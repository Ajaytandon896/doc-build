import{S as QWt,i as WWt,s as HWt,e as a,k as l,w as F,t as o,M as UWt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as JWt,L as q}from"../../chunks/vendor-hf-doc-builder.js";import{T as nat}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as N}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function YWt($){let g,v,u,f,p,d,h,wo,yi,Pm,lt,xi,$i,sy,Bm,Oe,We,ki,Pn,ly,Bn,In,iy,Si,Nn,dy,Ri,Im,Sa;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),wo=o(`, make sure its
`),yi=a("code"),Pm=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),xi=a("code"),$i=o('"new-model"'),sy=o(")."),Bm=l(),Oe=a("p"),We=o("Likewise, if your "),ki=a("code"),Pn=o("NewModel"),ly=o(" is a subclass of "),Bn=a("a"),In=o("PreTrainedModel"),iy=o(`, make sure its
`),Si=a("code"),Nn=o("config_class"),dy=o(` attribute is set to the same class you use when registering the model (here
`),Ri=a("code"),Im=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var OS=s(u);f=r(OS,"NewModelConfig"),OS.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Pi=s(d);h=r(Pi,"PretrainedConfig"),Pi.forEach(t),wo=r(Ae,`, make sure its
`),yi=n(Ae,"CODE",{});var VS=s(yi);Pm=r(VS,"model_type"),VS.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),xi=n(Ae,"CODE",{});var XS=s(xi);$i=r(XS,'"new-model"'),XS.forEach(t),sy=r(Ae,")."),Ae.forEach(t),Bm=i(He),Oe=n(He,"P",{});var Ao=s(Oe);We=r(Ao,"Likewise, if your "),ki=n(Ao,"CODE",{});var Ra=s(ki);Pn=r(Ra,"NewModel"),Ra.forEach(t),ly=r(Ao," is a subclass of "),Bn=n(Ao,"A",{href:!0});var zS=s(Bn);In=r(zS,"PreTrainedModel"),zS.forEach(t),iy=r(Ao,`, make sure its
`),Si=n(Ao,"CODE",{});var Nm=s(Si);Nn=r(Nm,"config_class"),Nm.forEach(t),dy=r(Ao,` attribute is set to the same class you use when registering the model (here
`),Ri=n(Ao,"CODE",{});var QS=s(Ri);Im=r(QS,"NewModelConfig"),QS.forEach(t),Sa=r(Ao,")."),Ao.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,wo),e(g,yi),e(yi,Pm),e(g,lt),e(g,xi),e(xi,$i),e(g,sy),b(He,Bm,Ae),b(He,Oe,Ae),e(Oe,We),e(Oe,ki),e(ki,Pn),e(Oe,ly),e(Oe,Bn),e(Bn,In),e(Oe,iy),e(Oe,Si),e(Si,Nn),e(Oe,dy),e(Oe,Ri),e(Ri,Im),e(Oe,Sa)},d(He){He&&t(g),He&&t(Bm),He&&t(Oe)}}}function KWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eHt($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var wo=s(u);f=r(wo,"use_auth_token=True"),wo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function oHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rHt($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var wo=s(u);f=r(wo,"use_auth_token=True"),wo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function tHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Ht($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function THt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function EHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function AHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Ht($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function IHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function UHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Ut($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function TUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function EUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function AUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Ut($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function IUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function UUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JUt($){let g,v,u,f,p,d,h,wo,yi,Pm,lt,xi,$i,sy,Bm,Oe,We,ki,Pn,ly,Bn,In,iy,Si,Nn,dy,Ri,Im,Sa,He,Ae,OS,Pi,VS,XS,Ao,Ra,zS,Nm,QS,NHe,MXe,Bi,qm,jae,cy,qHe,Dae,jHe,EXe,qn,DHe,Gae,GHe,OHe,Oae,VHe,XHe,CXe,my,wXe,WS,zHe,AXe,jm,LXe,Ii,Dm,Vae,fy,QHe,Xae,WHe,yXe,Lo,gy,HHe,hy,UHe,HS,JHe,YHe,KHe,uy,ZHe,zae,eUe,oUe,rUe,yr,py,tUe,Qae,aUe,nUe,Ni,sUe,Wae,lUe,iUe,Hae,dUe,cUe,mUe,A,Gm,Uae,fUe,gUe,US,hUe,uUe,pUe,Om,Jae,_Ue,bUe,JS,vUe,FUe,TUe,Vm,Yae,MUe,EUe,YS,CUe,wUe,AUe,Xm,Kae,LUe,yUe,KS,xUe,$Ue,kUe,zm,Zae,SUe,RUe,ZS,PUe,BUe,IUe,Qm,ene,NUe,qUe,eR,jUe,DUe,GUe,Wm,one,OUe,VUe,oR,XUe,zUe,QUe,Hm,rne,WUe,HUe,rR,UUe,JUe,YUe,Um,tne,KUe,ZUe,tR,eJe,oJe,rJe,Jm,ane,tJe,aJe,aR,nJe,sJe,lJe,Ym,nne,iJe,dJe,nR,cJe,mJe,fJe,Km,sne,gJe,hJe,sR,uJe,pJe,_Je,Zm,lne,bJe,vJe,lR,FJe,TJe,MJe,ef,ine,EJe,CJe,iR,wJe,AJe,LJe,of,dne,yJe,xJe,dR,$Je,kJe,SJe,rf,cne,RJe,PJe,cR,BJe,IJe,NJe,tf,mne,qJe,jJe,mR,DJe,GJe,OJe,af,fne,VJe,XJe,fR,zJe,QJe,WJe,nf,gne,HJe,UJe,gR,JJe,YJe,KJe,sf,hne,ZJe,eYe,hR,oYe,rYe,tYe,lf,une,aYe,nYe,uR,sYe,lYe,iYe,df,pne,dYe,cYe,pR,mYe,fYe,gYe,cf,_ne,hYe,uYe,_R,pYe,_Ye,bYe,mf,bne,vYe,FYe,bR,TYe,MYe,EYe,ff,vne,CYe,wYe,vR,AYe,LYe,yYe,gf,Fne,xYe,$Ye,FR,kYe,SYe,RYe,hf,Tne,PYe,BYe,TR,IYe,NYe,qYe,uf,Mne,jYe,DYe,MR,GYe,OYe,VYe,pf,Ene,XYe,zYe,ER,QYe,WYe,HYe,_f,Cne,UYe,JYe,CR,YYe,KYe,ZYe,bf,wne,eKe,oKe,wR,rKe,tKe,aKe,vf,Ane,nKe,sKe,AR,lKe,iKe,dKe,Ff,Lne,cKe,mKe,LR,fKe,gKe,hKe,Tf,yne,uKe,pKe,yR,_Ke,bKe,vKe,Mf,xne,FKe,TKe,xR,MKe,EKe,CKe,Ef,$ne,wKe,AKe,$R,LKe,yKe,xKe,Cf,kne,$Ke,kKe,kR,SKe,RKe,PKe,wf,Sne,BKe,IKe,SR,NKe,qKe,jKe,Af,Rne,DKe,GKe,RR,OKe,VKe,XKe,Lf,Pne,zKe,QKe,PR,WKe,HKe,UKe,yf,Bne,JKe,YKe,BR,KKe,ZKe,eZe,xf,Ine,oZe,rZe,IR,tZe,aZe,nZe,$f,Nne,sZe,lZe,NR,iZe,dZe,cZe,kf,qne,mZe,fZe,qR,gZe,hZe,uZe,Sf,jne,pZe,_Ze,jR,bZe,vZe,FZe,Rf,Dne,TZe,MZe,DR,EZe,CZe,wZe,Pf,Gne,AZe,LZe,GR,yZe,xZe,$Ze,Bf,One,kZe,SZe,OR,RZe,PZe,BZe,If,Vne,IZe,NZe,VR,qZe,jZe,DZe,Nf,Xne,GZe,OZe,XR,VZe,XZe,zZe,qf,zne,QZe,WZe,zR,HZe,UZe,JZe,jf,Qne,YZe,KZe,QR,ZZe,eeo,oeo,Df,Wne,reo,teo,WR,aeo,neo,seo,Gf,Hne,leo,ieo,HR,deo,ceo,meo,Of,Une,feo,geo,UR,heo,ueo,peo,Vf,Jne,_eo,beo,JR,veo,Feo,Teo,Xf,Yne,Meo,Eeo,YR,Ceo,weo,Aeo,zf,Kne,Leo,yeo,KR,xeo,$eo,keo,Qf,Zne,Seo,Reo,ZR,Peo,Beo,Ieo,Wf,ese,Neo,qeo,eP,jeo,Deo,Geo,Hf,ose,Oeo,Veo,oP,Xeo,zeo,Qeo,Uf,rse,Weo,Heo,rP,Ueo,Jeo,Yeo,Jf,tse,Keo,Zeo,tP,eoo,ooo,roo,Yf,ase,too,aoo,aP,noo,soo,loo,Kf,nse,ioo,doo,nP,coo,moo,foo,Zf,sse,goo,hoo,sP,uoo,poo,_oo,eg,lse,boo,voo,lP,Foo,Too,Moo,og,ise,Eoo,Coo,iP,woo,Aoo,Loo,rg,dse,yoo,xoo,dP,$oo,koo,Soo,tg,cse,Roo,Poo,cP,Boo,Ioo,Noo,ag,mse,qoo,joo,mP,Doo,Goo,Ooo,ng,fse,Voo,Xoo,fP,zoo,Qoo,Woo,sg,gse,Hoo,Uoo,gP,Joo,Yoo,Koo,lg,hse,Zoo,ero,hP,oro,rro,tro,ig,use,aro,nro,uP,sro,lro,iro,dg,pse,dro,cro,pP,mro,fro,gro,cg,_se,hro,uro,_P,pro,_ro,bro,mg,bse,vro,Fro,bP,Tro,Mro,Ero,fg,vse,Cro,wro,vP,Aro,Lro,yro,gg,Fse,xro,$ro,FP,kro,Sro,Rro,hg,Tse,Pro,Bro,TP,Iro,Nro,qro,ug,Mse,jro,Dro,MP,Gro,Oro,Vro,pg,Ese,Xro,zro,EP,Qro,Wro,Hro,_g,Cse,Uro,Jro,CP,Yro,Kro,Zro,bg,wse,eto,oto,wP,rto,tto,ato,vg,Ase,nto,sto,AP,lto,ito,dto,Fg,Lse,cto,mto,LP,fto,gto,hto,Tg,yse,uto,pto,yP,_to,bto,vto,Mg,xse,Fto,Tto,xP,Mto,Eto,Cto,Eg,$se,wto,Ato,$P,Lto,yto,xto,Cg,kse,$to,kto,kP,Sto,Rto,Pto,wg,Sse,Bto,Ito,SP,Nto,qto,jto,Ag,Rse,Dto,Gto,RP,Oto,Vto,Xto,Lg,Pse,zto,Qto,PP,Wto,Hto,Uto,yg,Bse,Jto,Yto,BP,Kto,Zto,eao,xg,Ise,oao,rao,IP,tao,aao,nao,$g,Nse,sao,lao,NP,iao,dao,cao,kg,qse,mao,fao,qP,gao,hao,uao,Sg,jse,pao,_ao,jP,bao,vao,Fao,Rg,Dse,Tao,Mao,DP,Eao,Cao,wao,Pg,Gse,Aao,Lao,GP,yao,xao,$ao,Bg,Ose,kao,Sao,OP,Rao,Pao,Bao,Ig,Vse,Iao,Nao,VP,qao,jao,Dao,Ng,Xse,Gao,Oao,XP,Vao,Xao,zao,qg,zse,Qao,Wao,zP,Hao,Uao,Jao,jg,Qse,Yao,Kao,QP,Zao,eno,ono,Dg,Wse,rno,tno,WP,ano,nno,sno,Gg,Hse,lno,ino,HP,dno,cno,mno,Og,Use,fno,gno,UP,hno,uno,pno,Vg,Jse,_no,bno,JP,vno,Fno,Tno,Xg,Yse,Mno,Eno,YP,Cno,wno,Ano,zg,Kse,Lno,yno,KP,xno,$no,kno,Qg,Zse,Sno,Rno,ZP,Pno,Bno,Ino,Wg,ele,Nno,qno,eB,jno,Dno,Gno,Hg,ole,Ono,Vno,oB,Xno,zno,Qno,Ug,rle,Wno,Hno,rB,Uno,Jno,Yno,Jg,tle,Kno,Zno,tB,eso,oso,rso,Yg,ale,tso,aso,aB,nso,sso,lso,Kg,iso,Zg,_y,dso,nle,cso,xXe,qi,eh,sle,by,mso,lle,fso,$Xe,yo,vy,gso,Fy,hso,nB,uso,pso,_so,Ty,bso,ile,vso,Fso,Tso,xr,My,Mso,dle,Eso,Cso,Pa,wso,cle,Aso,Lso,mle,yso,xso,fle,$so,kso,Sso,k,jn,gle,Rso,Pso,sB,Bso,Iso,lB,Nso,qso,jso,Dn,hle,Dso,Gso,iB,Oso,Vso,dB,Xso,zso,Qso,Gn,ule,Wso,Hso,cB,Uso,Jso,mB,Yso,Kso,Zso,oh,ple,elo,olo,fB,rlo,tlo,alo,On,_le,nlo,slo,gB,llo,ilo,hB,dlo,clo,mlo,rh,ble,flo,glo,uB,hlo,ulo,plo,th,vle,_lo,blo,pB,vlo,Flo,Tlo,ah,Fle,Mlo,Elo,_B,Clo,wlo,Alo,Vn,Tle,Llo,ylo,bB,xlo,$lo,vB,klo,Slo,Rlo,Xn,Mle,Plo,Blo,FB,Ilo,Nlo,TB,qlo,jlo,Dlo,zn,Ele,Glo,Olo,MB,Vlo,Xlo,EB,zlo,Qlo,Wlo,nh,Cle,Hlo,Ulo,CB,Jlo,Ylo,Klo,sh,wle,Zlo,eio,wB,oio,rio,tio,lh,Ale,aio,nio,AB,sio,lio,iio,Qn,Lle,dio,cio,LB,mio,fio,yB,gio,hio,uio,ih,yle,pio,_io,xB,bio,vio,Fio,Wn,xle,Tio,Mio,$B,Eio,Cio,kB,wio,Aio,Lio,Hn,$le,yio,xio,SB,$io,kio,RB,Sio,Rio,Pio,Un,kle,Bio,Iio,PB,Nio,qio,BB,jio,Dio,Gio,Jn,Sle,Oio,Vio,IB,Xio,zio,NB,Qio,Wio,Hio,dh,Rle,Uio,Jio,qB,Yio,Kio,Zio,Yn,Ple,edo,odo,jB,rdo,tdo,DB,ado,ndo,sdo,Kn,Ble,ldo,ido,GB,ddo,cdo,OB,mdo,fdo,gdo,Zn,Ile,hdo,udo,VB,pdo,_do,XB,bdo,vdo,Fdo,es,Nle,Tdo,Mdo,zB,Edo,Cdo,QB,wdo,Ado,Ldo,os,qle,ydo,xdo,WB,$do,kdo,HB,Sdo,Rdo,Pdo,rs,jle,Bdo,Ido,UB,Ndo,qdo,JB,jdo,Ddo,Gdo,ch,Dle,Odo,Vdo,YB,Xdo,zdo,Qdo,ts,Gle,Wdo,Hdo,KB,Udo,Jdo,ZB,Ydo,Kdo,Zdo,mh,Ole,eco,oco,eI,rco,tco,aco,as,Vle,nco,sco,oI,lco,ico,rI,dco,cco,mco,ns,Xle,fco,gco,tI,hco,uco,aI,pco,_co,bco,ss,zle,vco,Fco,nI,Tco,Mco,sI,Eco,Cco,wco,fh,Qle,Aco,Lco,lI,yco,xco,$co,ls,Wle,kco,Sco,iI,Rco,Pco,dI,Bco,Ico,Nco,is,Hle,qco,jco,cI,Dco,Gco,mI,Oco,Vco,Xco,ds,Ule,zco,Qco,fI,Wco,Hco,gI,Uco,Jco,Yco,gh,Jle,Kco,Zco,hI,emo,omo,rmo,cs,Yle,tmo,amo,uI,nmo,smo,pI,lmo,imo,dmo,ms,Kle,cmo,mmo,_I,fmo,gmo,bI,hmo,umo,pmo,fs,Zle,_mo,bmo,vI,vmo,Fmo,FI,Tmo,Mmo,Emo,gs,eie,Cmo,wmo,TI,Amo,Lmo,MI,ymo,xmo,$mo,hs,oie,kmo,Smo,EI,Rmo,Pmo,CI,Bmo,Imo,Nmo,us,rie,qmo,jmo,wI,Dmo,Gmo,AI,Omo,Vmo,Xmo,ps,tie,zmo,Qmo,LI,Wmo,Hmo,yI,Umo,Jmo,Ymo,_s,aie,Kmo,Zmo,xI,efo,ofo,$I,rfo,tfo,afo,hh,nie,nfo,sfo,kI,lfo,ifo,dfo,bs,sie,cfo,mfo,SI,ffo,gfo,RI,hfo,ufo,pfo,uh,lie,_fo,bfo,PI,vfo,Ffo,Tfo,ph,iie,Mfo,Efo,BI,Cfo,wfo,Afo,vs,die,Lfo,yfo,II,xfo,$fo,NI,kfo,Sfo,Rfo,Fs,cie,Pfo,Bfo,qI,Ifo,Nfo,jI,qfo,jfo,Dfo,Ts,mie,Gfo,Ofo,DI,Vfo,Xfo,GI,zfo,Qfo,Wfo,_h,fie,Hfo,Ufo,OI,Jfo,Yfo,Kfo,Ms,gie,Zfo,ego,VI,ogo,rgo,XI,tgo,ago,ngo,Es,hie,sgo,lgo,zI,igo,dgo,QI,cgo,mgo,fgo,Cs,uie,ggo,hgo,WI,ugo,pgo,HI,_go,bgo,vgo,ws,pie,Fgo,Tgo,UI,Mgo,Ego,JI,Cgo,wgo,Ago,As,_ie,Lgo,ygo,YI,xgo,$go,KI,kgo,Sgo,Rgo,Ls,bie,Pgo,Bgo,ZI,Igo,Ngo,eN,qgo,jgo,Dgo,ys,vie,Ggo,Ogo,oN,Vgo,Xgo,rN,zgo,Qgo,Wgo,xs,Fie,Hgo,Ugo,tN,Jgo,Ygo,aN,Kgo,Zgo,eho,bh,Tie,oho,rho,nN,tho,aho,nho,$s,Mie,sho,lho,sN,iho,dho,lN,cho,mho,fho,vh,Eie,gho,hho,iN,uho,pho,_ho,Fh,Cie,bho,vho,dN,Fho,Tho,Mho,Th,wie,Eho,Cho,cN,who,Aho,Lho,Mh,Aie,yho,xho,mN,$ho,kho,Sho,ks,Lie,Rho,Pho,fN,Bho,Iho,gN,Nho,qho,jho,Eh,yie,Dho,Gho,hN,Oho,Vho,Xho,Ss,xie,zho,Qho,uN,Who,Hho,pN,Uho,Jho,Yho,Rs,$ie,Kho,Zho,_N,euo,ouo,bN,ruo,tuo,auo,Ps,kie,nuo,suo,vN,luo,iuo,FN,duo,cuo,muo,Bs,Sie,fuo,guo,TN,huo,uuo,MN,puo,_uo,buo,Is,Rie,vuo,Fuo,EN,Tuo,Muo,CN,Euo,Cuo,wuo,Ns,Pie,Auo,Luo,wN,yuo,xuo,AN,$uo,kuo,Suo,Ch,Bie,Ruo,Puo,LN,Buo,Iuo,Nuo,wh,Iie,quo,juo,yN,Duo,Guo,Ouo,qs,Nie,Vuo,Xuo,xN,zuo,Quo,$N,Wuo,Huo,Uuo,js,qie,Juo,Yuo,kN,Kuo,Zuo,SN,epo,opo,rpo,Ds,jie,tpo,apo,RN,npo,spo,PN,lpo,ipo,dpo,Ah,Die,cpo,mpo,BN,fpo,gpo,hpo,Lh,Gie,upo,ppo,IN,_po,bpo,vpo,yh,Oie,Fpo,Tpo,NN,Mpo,Epo,Cpo,Gs,Vie,wpo,Apo,qN,Lpo,ypo,jN,xpo,$po,kpo,Os,Xie,Spo,Rpo,DN,Ppo,Bpo,GN,Ipo,Npo,qpo,xh,zie,jpo,Dpo,ON,Gpo,Opo,Vpo,$h,Qie,Xpo,zpo,VN,Qpo,Wpo,Hpo,kh,Wie,Upo,Jpo,XN,Ypo,Kpo,Zpo,Vs,Hie,e_o,o_o,zN,r_o,t_o,QN,a_o,n_o,s_o,Sh,Uie,l_o,i_o,WN,d_o,c_o,m_o,Rh,Jie,f_o,g_o,HN,h_o,u_o,p_o,Xs,Yie,__o,b_o,UN,v_o,F_o,JN,T_o,M_o,E_o,zs,Kie,C_o,w_o,YN,A_o,L_o,KN,y_o,x_o,$_o,Qs,Zie,k_o,S_o,ZN,R_o,P_o,eq,B_o,I_o,N_o,Ws,ede,q_o,j_o,oq,D_o,G_o,rq,O_o,V_o,X_o,Ph,z_o,Bh,Ey,Q_o,ode,W_o,kXe,ji,Ih,rde,Cy,H_o,tde,U_o,SXe,xo,wy,J_o,Ay,Y_o,tq,K_o,Z_o,e2o,Ly,o2o,ade,r2o,t2o,a2o,Ue,yy,n2o,nde,s2o,l2o,Ba,i2o,sde,d2o,c2o,lde,m2o,f2o,ide,g2o,h2o,u2o,Y,Nh,dde,p2o,_2o,aq,b2o,v2o,F2o,qh,cde,T2o,M2o,nq,E2o,C2o,w2o,jh,mde,A2o,L2o,sq,y2o,x2o,$2o,Dh,fde,k2o,S2o,lq,R2o,P2o,B2o,Gh,gde,I2o,N2o,iq,q2o,j2o,D2o,Oh,hde,G2o,O2o,dq,V2o,X2o,z2o,Vh,ude,Q2o,W2o,cq,H2o,U2o,J2o,Xh,pde,Y2o,K2o,mq,Z2o,ebo,obo,zh,_de,rbo,tbo,fq,abo,nbo,sbo,Qh,bde,lbo,ibo,gq,dbo,cbo,mbo,Wh,vde,fbo,gbo,hq,hbo,ubo,pbo,Hh,Fde,_bo,bbo,uq,vbo,Fbo,Tbo,Uh,Tde,Mbo,Ebo,pq,Cbo,wbo,Abo,Jh,Mde,Lbo,ybo,_q,xbo,$bo,kbo,Yh,Ede,Sbo,Rbo,bq,Pbo,Bbo,Ibo,Kh,Cde,Nbo,qbo,vq,jbo,Dbo,Gbo,Zh,wde,Obo,Vbo,Fq,Xbo,zbo,Qbo,eu,Ade,Wbo,Hbo,Tq,Ubo,Jbo,Ybo,ou,Lde,Kbo,Zbo,Mq,evo,ovo,rvo,ru,yde,tvo,avo,Eq,nvo,svo,lvo,tu,xde,ivo,dvo,Cq,cvo,mvo,fvo,au,$de,gvo,hvo,wq,uvo,pvo,_vo,nu,kde,bvo,vvo,Aq,Fvo,Tvo,Mvo,su,Sde,Evo,Cvo,Lq,wvo,Avo,Lvo,lu,Rde,yvo,xvo,yq,$vo,kvo,Svo,iu,Pde,Rvo,Pvo,xq,Bvo,Ivo,Nvo,du,Bde,qvo,jvo,$q,Dvo,Gvo,Ovo,cu,Ide,Vvo,Xvo,kq,zvo,Qvo,Wvo,mu,Nde,Hvo,Uvo,Sq,Jvo,Yvo,Kvo,fu,qde,Zvo,e1o,Rq,o1o,r1o,t1o,gu,jde,a1o,n1o,Pq,s1o,l1o,i1o,hu,Dde,d1o,c1o,Bq,m1o,f1o,g1o,uu,Gde,h1o,u1o,Iq,p1o,_1o,b1o,pu,Ode,v1o,F1o,Nq,T1o,M1o,E1o,_u,C1o,bu,w1o,vu,xy,A1o,Vde,L1o,RXe,Di,Fu,Xde,$y,y1o,zde,x1o,PXe,$o,ky,$1o,Sy,k1o,qq,S1o,R1o,P1o,Ry,B1o,Qde,I1o,N1o,q1o,Je,Py,j1o,Wde,D1o,G1o,Gi,O1o,Hde,V1o,X1o,Ude,z1o,Q1o,W1o,ue,Tu,Jde,H1o,U1o,jq,J1o,Y1o,K1o,Mu,Yde,Z1o,eFo,Dq,oFo,rFo,tFo,Eu,Kde,aFo,nFo,Gq,sFo,lFo,iFo,Cu,Zde,dFo,cFo,Oq,mFo,fFo,gFo,wu,ece,hFo,uFo,Vq,pFo,_Fo,bFo,Au,oce,vFo,FFo,Xq,TFo,MFo,EFo,Lu,rce,CFo,wFo,zq,AFo,LFo,yFo,yu,tce,xFo,$Fo,Qq,kFo,SFo,RFo,xu,ace,PFo,BFo,Wq,IFo,NFo,qFo,$u,nce,jFo,DFo,Hq,GFo,OFo,VFo,ku,sce,XFo,zFo,Uq,QFo,WFo,HFo,Su,lce,UFo,JFo,Jq,YFo,KFo,ZFo,Ru,ice,eTo,oTo,Yq,rTo,tTo,aTo,Pu,dce,nTo,sTo,Kq,lTo,iTo,dTo,Bu,cce,cTo,mTo,Zq,fTo,gTo,hTo,Iu,mce,uTo,pTo,ej,_To,bTo,vTo,Nu,fce,FTo,TTo,oj,MTo,ETo,CTo,qu,gce,wTo,ATo,rj,LTo,yTo,xTo,ju,$To,Du,kTo,Gu,By,STo,hce,RTo,BXe,Oi,Ou,uce,Iy,PTo,pce,BTo,IXe,ko,Ny,ITo,Vi,NTo,tj,qTo,jTo,aj,DTo,GTo,OTo,qy,VTo,_ce,XTo,zTo,QTo,it,jy,WTo,bce,HTo,UTo,Xi,JTo,vce,YTo,KTo,nj,ZTo,eMo,oMo,Vu,rMo,Ye,Dy,tMo,Fce,aMo,nMo,Ia,sMo,Tce,lMo,iMo,Mce,dMo,cMo,Ece,mMo,fMo,gMo,y,Xu,Cce,hMo,uMo,sj,pMo,_Mo,bMo,zu,wce,vMo,FMo,lj,TMo,MMo,EMo,Qu,Ace,CMo,wMo,ij,AMo,LMo,yMo,Wu,Lce,xMo,$Mo,dj,kMo,SMo,RMo,Hu,yce,PMo,BMo,cj,IMo,NMo,qMo,Uu,xce,jMo,DMo,mj,GMo,OMo,VMo,Ju,$ce,XMo,zMo,fj,QMo,WMo,HMo,Yu,kce,UMo,JMo,gj,YMo,KMo,ZMo,Ku,Sce,e4o,o4o,hj,r4o,t4o,a4o,Zu,Rce,n4o,s4o,uj,l4o,i4o,d4o,ep,Pce,c4o,m4o,pj,f4o,g4o,h4o,op,Bce,u4o,p4o,_j,_4o,b4o,v4o,rp,Ice,F4o,T4o,bj,M4o,E4o,C4o,tp,Nce,w4o,A4o,vj,L4o,y4o,x4o,ap,qce,$4o,k4o,Fj,S4o,R4o,P4o,np,jce,B4o,I4o,Tj,N4o,q4o,j4o,sp,Dce,D4o,G4o,Mj,O4o,V4o,X4o,lp,Gce,z4o,Q4o,Ej,W4o,H4o,U4o,ip,Oce,J4o,Y4o,Cj,K4o,Z4o,eEo,dp,Vce,oEo,rEo,wj,tEo,aEo,nEo,cp,Xce,sEo,lEo,Aj,iEo,dEo,cEo,mp,zce,mEo,fEo,Lj,gEo,hEo,uEo,fp,Qce,pEo,_Eo,yj,bEo,vEo,FEo,gp,Wce,TEo,MEo,xj,EEo,CEo,wEo,hp,Hce,AEo,LEo,$j,yEo,xEo,$Eo,up,Uce,kEo,SEo,kj,REo,PEo,BEo,pp,Jce,IEo,NEo,Sj,qEo,jEo,DEo,_p,Yce,GEo,OEo,Rj,VEo,XEo,zEo,bp,Kce,QEo,WEo,Pj,HEo,UEo,JEo,vp,Zce,YEo,KEo,Bj,ZEo,eCo,oCo,Fp,eme,rCo,tCo,Ij,aCo,nCo,sCo,Tp,ome,lCo,iCo,Nj,dCo,cCo,mCo,Mp,rme,fCo,gCo,qj,hCo,uCo,pCo,Ep,tme,_Co,bCo,jj,vCo,FCo,TCo,Hs,ame,MCo,ECo,Dj,CCo,wCo,Gj,ACo,LCo,yCo,Cp,nme,xCo,$Co,Oj,kCo,SCo,RCo,wp,sme,PCo,BCo,Vj,ICo,NCo,qCo,Ap,lme,jCo,DCo,Xj,GCo,OCo,VCo,Lp,ime,XCo,zCo,zj,QCo,WCo,HCo,yp,dme,UCo,JCo,Qj,YCo,KCo,ZCo,xp,cme,e3o,o3o,Wj,r3o,t3o,a3o,$p,mme,n3o,s3o,Hj,l3o,i3o,d3o,kp,fme,c3o,m3o,Uj,f3o,g3o,h3o,Sp,gme,u3o,p3o,Jj,_3o,b3o,v3o,Rp,hme,F3o,T3o,Yj,M3o,E3o,C3o,Pp,ume,w3o,A3o,Kj,L3o,y3o,x3o,Bp,pme,$3o,k3o,Zj,S3o,R3o,P3o,Ip,_me,B3o,I3o,eD,N3o,q3o,j3o,Np,bme,D3o,G3o,oD,O3o,V3o,X3o,qp,vme,z3o,Q3o,rD,W3o,H3o,U3o,jp,Fme,J3o,Y3o,tD,K3o,Z3o,e5o,Dp,Tme,o5o,r5o,aD,t5o,a5o,n5o,Gp,Mme,s5o,l5o,nD,i5o,d5o,c5o,Op,Eme,m5o,f5o,sD,g5o,h5o,u5o,Vp,Cme,p5o,_5o,lD,b5o,v5o,F5o,Xp,wme,T5o,M5o,iD,E5o,C5o,w5o,zp,Ame,A5o,L5o,dD,y5o,x5o,$5o,Qp,Lme,k5o,S5o,cD,R5o,P5o,B5o,Wp,yme,I5o,N5o,mD,q5o,j5o,D5o,Hp,xme,G5o,O5o,fD,V5o,X5o,z5o,Up,$me,Q5o,W5o,gD,H5o,U5o,J5o,Jp,kme,Y5o,K5o,hD,Z5o,e0o,o0o,Yp,Sme,r0o,t0o,uD,a0o,n0o,s0o,Kp,Rme,l0o,i0o,pD,d0o,c0o,m0o,Zp,Pme,f0o,g0o,_D,h0o,u0o,p0o,e_,Bme,_0o,b0o,bD,v0o,F0o,T0o,o_,Ime,M0o,E0o,vD,C0o,w0o,A0o,r_,Nme,L0o,y0o,FD,x0o,$0o,k0o,t_,qme,S0o,R0o,TD,P0o,B0o,I0o,a_,jme,N0o,q0o,MD,j0o,D0o,G0o,n_,Dme,O0o,V0o,ED,X0o,z0o,Q0o,s_,Gme,W0o,H0o,CD,U0o,J0o,Y0o,l_,Ome,K0o,Z0o,wD,ewo,owo,rwo,i_,Vme,two,awo,AD,nwo,swo,lwo,d_,Xme,iwo,dwo,LD,cwo,mwo,fwo,c_,zme,gwo,hwo,yD,uwo,pwo,_wo,m_,Qme,bwo,vwo,xD,Fwo,Two,Mwo,f_,Wme,Ewo,Cwo,$D,wwo,Awo,Lwo,g_,Hme,ywo,xwo,kD,$wo,kwo,Swo,h_,Ume,Rwo,Pwo,SD,Bwo,Iwo,Nwo,u_,Jme,qwo,jwo,RD,Dwo,Gwo,Owo,p_,Yme,Vwo,Xwo,PD,zwo,Qwo,Wwo,__,Kme,Hwo,Uwo,BD,Jwo,Ywo,Kwo,b_,Zme,Zwo,eAo,ID,oAo,rAo,tAo,v_,efe,aAo,nAo,ND,sAo,lAo,iAo,F_,ofe,dAo,cAo,qD,mAo,fAo,gAo,T_,rfe,hAo,uAo,jD,pAo,_Ao,bAo,M_,tfe,vAo,FAo,DD,TAo,MAo,EAo,E_,afe,CAo,wAo,GD,AAo,LAo,yAo,C_,nfe,xAo,$Ao,OD,kAo,SAo,RAo,w_,sfe,PAo,BAo,VD,IAo,NAo,qAo,A_,lfe,jAo,DAo,XD,GAo,OAo,VAo,L_,ife,XAo,zAo,zD,QAo,WAo,HAo,y_,dfe,UAo,JAo,QD,YAo,KAo,ZAo,x_,cfe,e6o,o6o,WD,r6o,t6o,a6o,$_,mfe,n6o,s6o,HD,l6o,i6o,d6o,k_,ffe,c6o,m6o,UD,f6o,g6o,h6o,S_,gfe,u6o,p6o,JD,_6o,b6o,v6o,R_,hfe,F6o,T6o,YD,M6o,E6o,C6o,P_,ufe,w6o,A6o,KD,L6o,y6o,x6o,B_,pfe,$6o,k6o,ZD,S6o,R6o,P6o,I_,_fe,B6o,I6o,eG,N6o,q6o,j6o,N_,bfe,D6o,G6o,oG,O6o,V6o,X6o,q_,vfe,z6o,Q6o,rG,W6o,H6o,U6o,j_,Ffe,J6o,Y6o,tG,K6o,Z6o,e7o,D_,Tfe,o7o,r7o,aG,t7o,a7o,n7o,G_,Mfe,s7o,l7o,nG,i7o,d7o,c7o,O_,Efe,m7o,f7o,sG,g7o,h7o,u7o,V_,Cfe,p7o,_7o,lG,b7o,v7o,F7o,X_,wfe,T7o,M7o,iG,E7o,C7o,w7o,z_,Afe,A7o,L7o,dG,y7o,x7o,$7o,Q_,Lfe,k7o,S7o,cG,R7o,P7o,B7o,W_,I7o,yfe,N7o,q7o,xfe,j7o,D7o,H_,NXe,zi,U_,$fe,Gy,G7o,kfe,O7o,qXe,So,Oy,V7o,Qi,X7o,mG,z7o,Q7o,fG,W7o,H7o,U7o,Vy,J7o,Sfe,Y7o,K7o,Z7o,dt,Xy,eLo,Rfe,oLo,rLo,Wi,tLo,Pfe,aLo,nLo,gG,sLo,lLo,iLo,J_,dLo,Ke,zy,cLo,Bfe,mLo,fLo,Na,gLo,Ife,hLo,uLo,Nfe,pLo,_Lo,qfe,bLo,vLo,FLo,G,Y_,jfe,TLo,MLo,hG,ELo,CLo,wLo,K_,Dfe,ALo,LLo,uG,yLo,xLo,$Lo,Z_,Gfe,kLo,SLo,pG,RLo,PLo,BLo,e2,Ofe,ILo,NLo,_G,qLo,jLo,DLo,o2,Vfe,GLo,OLo,bG,VLo,XLo,zLo,r2,Xfe,QLo,WLo,vG,HLo,ULo,JLo,t2,zfe,YLo,KLo,FG,ZLo,eyo,oyo,a2,Qfe,ryo,tyo,TG,ayo,nyo,syo,n2,Wfe,lyo,iyo,MG,dyo,cyo,myo,s2,Hfe,fyo,gyo,EG,hyo,uyo,pyo,l2,Ufe,_yo,byo,CG,vyo,Fyo,Tyo,i2,Jfe,Myo,Eyo,wG,Cyo,wyo,Ayo,d2,Yfe,Lyo,yyo,AG,xyo,$yo,kyo,c2,Kfe,Syo,Ryo,LG,Pyo,Byo,Iyo,m2,Zfe,Nyo,qyo,yG,jyo,Dyo,Gyo,f2,ege,Oyo,Vyo,xG,Xyo,zyo,Qyo,g2,oge,Wyo,Hyo,$G,Uyo,Jyo,Yyo,h2,rge,Kyo,Zyo,kG,e8o,o8o,r8o,u2,tge,t8o,a8o,SG,n8o,s8o,l8o,p2,age,i8o,d8o,RG,c8o,m8o,f8o,_2,nge,g8o,h8o,PG,u8o,p8o,_8o,b2,sge,b8o,v8o,BG,F8o,T8o,M8o,v2,lge,E8o,C8o,IG,w8o,A8o,L8o,F2,ige,y8o,x8o,NG,$8o,k8o,S8o,T2,dge,R8o,P8o,qG,B8o,I8o,N8o,M2,cge,q8o,j8o,jG,D8o,G8o,O8o,E2,mge,V8o,X8o,DG,z8o,Q8o,W8o,C2,fge,H8o,U8o,GG,J8o,Y8o,K8o,w2,gge,Z8o,e9o,OG,o9o,r9o,t9o,A2,hge,a9o,n9o,VG,s9o,l9o,i9o,L2,uge,d9o,c9o,XG,m9o,f9o,g9o,y2,pge,h9o,u9o,zG,p9o,_9o,b9o,x2,_ge,v9o,F9o,QG,T9o,M9o,E9o,$2,bge,C9o,w9o,WG,A9o,L9o,y9o,k2,vge,x9o,$9o,HG,k9o,S9o,R9o,S2,Fge,P9o,B9o,UG,I9o,N9o,q9o,R2,Tge,j9o,D9o,JG,G9o,O9o,V9o,P2,Mge,X9o,z9o,YG,Q9o,W9o,H9o,B2,Ege,U9o,J9o,KG,Y9o,K9o,Z9o,I2,Cge,exo,oxo,ZG,rxo,txo,axo,N2,wge,nxo,sxo,eO,lxo,ixo,dxo,q2,Age,cxo,mxo,oO,fxo,gxo,hxo,j2,Lge,uxo,pxo,rO,_xo,bxo,vxo,D2,yge,Fxo,Txo,tO,Mxo,Exo,Cxo,G2,xge,wxo,Axo,aO,Lxo,yxo,xxo,O2,$xo,$ge,kxo,Sxo,kge,Rxo,Pxo,V2,jXe,Hi,X2,Sge,Qy,Bxo,Rge,Ixo,DXe,Ro,Wy,Nxo,Ui,qxo,nO,jxo,Dxo,sO,Gxo,Oxo,Vxo,Hy,Xxo,Pge,zxo,Qxo,Wxo,ct,Uy,Hxo,Bge,Uxo,Jxo,Ji,Yxo,Ige,Kxo,Zxo,lO,e$o,o$o,r$o,z2,t$o,Ze,Jy,a$o,Nge,n$o,s$o,qa,l$o,qge,i$o,d$o,jge,c$o,m$o,Dge,f$o,g$o,h$o,z,Q2,Gge,u$o,p$o,iO,_$o,b$o,v$o,W2,Oge,F$o,T$o,dO,M$o,E$o,C$o,H2,Vge,w$o,A$o,cO,L$o,y$o,x$o,U2,Xge,$$o,k$o,mO,S$o,R$o,P$o,J2,zge,B$o,I$o,fO,N$o,q$o,j$o,Y2,Qge,D$o,G$o,gO,O$o,V$o,X$o,K2,Wge,z$o,Q$o,hO,W$o,H$o,U$o,Z2,Hge,J$o,Y$o,uO,K$o,Z$o,eko,eb,Uge,oko,rko,pO,tko,ako,nko,ob,Jge,sko,lko,_O,iko,dko,cko,rb,Yge,mko,fko,bO,gko,hko,uko,tb,Kge,pko,_ko,vO,bko,vko,Fko,ab,Zge,Tko,Mko,FO,Eko,Cko,wko,nb,ehe,Ako,Lko,TO,yko,xko,$ko,sb,ohe,kko,Sko,MO,Rko,Pko,Bko,lb,rhe,Iko,Nko,EO,qko,jko,Dko,ib,the,Gko,Oko,CO,Vko,Xko,zko,db,ahe,Qko,Wko,wO,Hko,Uko,Jko,cb,nhe,Yko,Kko,AO,Zko,eSo,oSo,mb,she,rSo,tSo,LO,aSo,nSo,sSo,fb,lhe,lSo,iSo,yO,dSo,cSo,mSo,gb,ihe,fSo,gSo,xO,hSo,uSo,pSo,hb,dhe,_So,bSo,$O,vSo,FSo,TSo,ub,che,MSo,ESo,kO,CSo,wSo,ASo,pb,mhe,LSo,ySo,SO,xSo,$So,kSo,_b,fhe,SSo,RSo,RO,PSo,BSo,ISo,bb,ghe,NSo,qSo,PO,jSo,DSo,GSo,vb,hhe,OSo,VSo,BO,XSo,zSo,QSo,Fb,uhe,WSo,HSo,IO,USo,JSo,YSo,Tb,phe,KSo,ZSo,NO,eRo,oRo,rRo,Mb,_he,tRo,aRo,qO,nRo,sRo,lRo,Eb,bhe,iRo,dRo,jO,cRo,mRo,fRo,Cb,vhe,gRo,hRo,DO,uRo,pRo,_Ro,wb,Fhe,bRo,vRo,GO,FRo,TRo,MRo,Ab,The,ERo,CRo,OO,wRo,ARo,LRo,Lb,Mhe,yRo,xRo,VO,$Ro,kRo,SRo,yb,Ehe,RRo,PRo,XO,BRo,IRo,NRo,xb,Che,qRo,jRo,zO,DRo,GRo,ORo,$b,whe,VRo,XRo,QO,zRo,QRo,WRo,kb,Ahe,HRo,URo,WO,JRo,YRo,KRo,Sb,ZRo,Lhe,ePo,oPo,yhe,rPo,tPo,Rb,GXe,Yi,Pb,xhe,Yy,aPo,$he,nPo,OXe,Po,Ky,sPo,Ki,lPo,HO,iPo,dPo,UO,cPo,mPo,fPo,Zy,gPo,khe,hPo,uPo,pPo,mt,e8,_Po,She,bPo,vPo,Zi,FPo,Rhe,TPo,MPo,JO,EPo,CPo,wPo,Bb,APo,eo,o8,LPo,Phe,yPo,xPo,ja,$Po,Bhe,kPo,SPo,Ihe,RPo,PPo,Nhe,BPo,IPo,NPo,W,Ib,qhe,qPo,jPo,YO,DPo,GPo,OPo,Nb,jhe,VPo,XPo,KO,zPo,QPo,WPo,qb,Dhe,HPo,UPo,ZO,JPo,YPo,KPo,jb,Ghe,ZPo,eBo,eV,oBo,rBo,tBo,Db,Ohe,aBo,nBo,oV,sBo,lBo,iBo,Gb,Vhe,dBo,cBo,rV,mBo,fBo,gBo,Ob,Xhe,hBo,uBo,tV,pBo,_Bo,bBo,Vb,zhe,vBo,FBo,aV,TBo,MBo,EBo,Xb,Qhe,CBo,wBo,nV,ABo,LBo,yBo,zb,Whe,xBo,$Bo,sV,kBo,SBo,RBo,Qb,Hhe,PBo,BBo,lV,IBo,NBo,qBo,Wb,Uhe,jBo,DBo,iV,GBo,OBo,VBo,Hb,Jhe,XBo,zBo,dV,QBo,WBo,HBo,Ub,Yhe,UBo,JBo,cV,YBo,KBo,ZBo,Jb,Khe,eIo,oIo,mV,rIo,tIo,aIo,Yb,Zhe,nIo,sIo,fV,lIo,iIo,dIo,Kb,eue,cIo,mIo,gV,fIo,gIo,hIo,Zb,oue,uIo,pIo,hV,_Io,bIo,vIo,ev,rue,FIo,TIo,uV,MIo,EIo,CIo,ov,tue,wIo,AIo,pV,LIo,yIo,xIo,rv,aue,$Io,kIo,_V,SIo,RIo,PIo,tv,nue,BIo,IIo,bV,NIo,qIo,jIo,av,sue,DIo,GIo,vV,OIo,VIo,XIo,nv,lue,zIo,QIo,FV,WIo,HIo,UIo,sv,iue,JIo,YIo,TV,KIo,ZIo,eNo,lv,due,oNo,rNo,MV,tNo,aNo,nNo,iv,cue,sNo,lNo,EV,iNo,dNo,cNo,dv,mue,mNo,fNo,CV,gNo,hNo,uNo,cv,fue,pNo,_No,wV,bNo,vNo,FNo,mv,gue,TNo,MNo,AV,ENo,CNo,wNo,fv,hue,ANo,LNo,LV,yNo,xNo,$No,gv,uue,kNo,SNo,yV,RNo,PNo,BNo,hv,pue,INo,NNo,xV,qNo,jNo,DNo,uv,_ue,GNo,ONo,bue,VNo,XNo,zNo,pv,vue,QNo,WNo,$V,HNo,UNo,JNo,_v,Fue,YNo,KNo,kV,ZNo,eqo,oqo,bv,Tue,rqo,tqo,SV,aqo,nqo,sqo,vv,Mue,lqo,iqo,RV,dqo,cqo,mqo,Fv,fqo,Eue,gqo,hqo,Cue,uqo,pqo,Tv,VXe,ed,Mv,wue,r8,_qo,Aue,bqo,XXe,Bo,t8,vqo,od,Fqo,PV,Tqo,Mqo,BV,Eqo,Cqo,wqo,a8,Aqo,Lue,Lqo,yqo,xqo,ft,n8,$qo,yue,kqo,Sqo,rd,Rqo,xue,Pqo,Bqo,IV,Iqo,Nqo,qqo,Ev,jqo,oo,s8,Dqo,$ue,Gqo,Oqo,Da,Vqo,kue,Xqo,zqo,Sue,Qqo,Wqo,Rue,Hqo,Uqo,Jqo,me,Cv,Pue,Yqo,Kqo,NV,Zqo,ejo,ojo,wv,Bue,rjo,tjo,qV,ajo,njo,sjo,Av,Iue,ljo,ijo,jV,djo,cjo,mjo,Lv,Nue,fjo,gjo,DV,hjo,ujo,pjo,yv,que,_jo,bjo,GV,vjo,Fjo,Tjo,xv,jue,Mjo,Ejo,OV,Cjo,wjo,Ajo,$v,Due,Ljo,yjo,VV,xjo,$jo,kjo,kv,Gue,Sjo,Rjo,XV,Pjo,Bjo,Ijo,Sv,Oue,Njo,qjo,zV,jjo,Djo,Gjo,Rv,Vue,Ojo,Vjo,QV,Xjo,zjo,Qjo,Pv,Xue,Wjo,Hjo,WV,Ujo,Jjo,Yjo,Bv,zue,Kjo,Zjo,HV,eDo,oDo,rDo,Iv,Que,tDo,aDo,UV,nDo,sDo,lDo,Nv,Wue,iDo,dDo,JV,cDo,mDo,fDo,qv,Hue,gDo,hDo,YV,uDo,pDo,_Do,jv,Uue,bDo,vDo,KV,FDo,TDo,MDo,Dv,Jue,EDo,CDo,ZV,wDo,ADo,LDo,Gv,Yue,yDo,xDo,eX,$Do,kDo,SDo,Ov,Kue,RDo,PDo,oX,BDo,IDo,NDo,Vv,qDo,Zue,jDo,DDo,epe,GDo,ODo,Xv,zXe,td,zv,ope,l8,VDo,rpe,XDo,QXe,Io,i8,zDo,ad,QDo,rX,WDo,HDo,tX,UDo,JDo,YDo,d8,KDo,tpe,ZDo,eGo,oGo,gt,c8,rGo,ape,tGo,aGo,nd,nGo,npe,sGo,lGo,aX,iGo,dGo,cGo,Qv,mGo,ro,m8,fGo,spe,gGo,hGo,Ga,uGo,lpe,pGo,_Go,ipe,bGo,vGo,dpe,FGo,TGo,MGo,B,Wv,cpe,EGo,CGo,nX,wGo,AGo,LGo,Hv,mpe,yGo,xGo,sX,$Go,kGo,SGo,Uv,fpe,RGo,PGo,lX,BGo,IGo,NGo,Jv,gpe,qGo,jGo,iX,DGo,GGo,OGo,Yv,hpe,VGo,XGo,dX,zGo,QGo,WGo,Kv,upe,HGo,UGo,cX,JGo,YGo,KGo,Zv,ppe,ZGo,eOo,mX,oOo,rOo,tOo,e1,_pe,aOo,nOo,fX,sOo,lOo,iOo,o1,bpe,dOo,cOo,gX,mOo,fOo,gOo,r1,vpe,hOo,uOo,hX,pOo,_Oo,bOo,t1,Fpe,vOo,FOo,uX,TOo,MOo,EOo,a1,Tpe,COo,wOo,pX,AOo,LOo,yOo,n1,Mpe,xOo,$Oo,_X,kOo,SOo,ROo,s1,Epe,POo,BOo,bX,IOo,NOo,qOo,l1,Cpe,jOo,DOo,vX,GOo,OOo,VOo,i1,wpe,XOo,zOo,FX,QOo,WOo,HOo,d1,Ape,UOo,JOo,TX,YOo,KOo,ZOo,c1,Lpe,eVo,oVo,MX,rVo,tVo,aVo,m1,ype,nVo,sVo,EX,lVo,iVo,dVo,f1,xpe,cVo,mVo,CX,fVo,gVo,hVo,g1,$pe,uVo,pVo,wX,_Vo,bVo,vVo,h1,kpe,FVo,TVo,AX,MVo,EVo,CVo,u1,Spe,wVo,AVo,LX,LVo,yVo,xVo,p1,Rpe,$Vo,kVo,yX,SVo,RVo,PVo,_1,Ppe,BVo,IVo,xX,NVo,qVo,jVo,b1,Bpe,DVo,GVo,$X,OVo,VVo,XVo,v1,Ipe,zVo,QVo,kX,WVo,HVo,UVo,F1,Npe,JVo,YVo,SX,KVo,ZVo,eXo,T1,qpe,oXo,rXo,RX,tXo,aXo,nXo,M1,jpe,sXo,lXo,PX,iXo,dXo,cXo,E1,Dpe,mXo,fXo,BX,gXo,hXo,uXo,C1,Gpe,pXo,_Xo,IX,bXo,vXo,FXo,w1,Ope,TXo,MXo,NX,EXo,CXo,wXo,A1,Vpe,AXo,LXo,qX,yXo,xXo,$Xo,L1,Xpe,kXo,SXo,jX,RXo,PXo,BXo,y1,zpe,IXo,NXo,DX,qXo,jXo,DXo,x1,Qpe,GXo,OXo,GX,VXo,XXo,zXo,$1,Wpe,QXo,WXo,OX,HXo,UXo,JXo,k1,Hpe,YXo,KXo,VX,ZXo,ezo,ozo,S1,Upe,rzo,tzo,XX,azo,nzo,szo,R1,Jpe,lzo,izo,zX,dzo,czo,mzo,P1,Ype,fzo,gzo,QX,hzo,uzo,pzo,B1,Kpe,_zo,bzo,WX,vzo,Fzo,Tzo,I1,Zpe,Mzo,Ezo,HX,Czo,wzo,Azo,N1,e_e,Lzo,yzo,UX,xzo,$zo,kzo,q1,o_e,Szo,Rzo,JX,Pzo,Bzo,Izo,j1,r_e,Nzo,qzo,YX,jzo,Dzo,Gzo,D1,t_e,Ozo,Vzo,KX,Xzo,zzo,Qzo,G1,a_e,Wzo,Hzo,ZX,Uzo,Jzo,Yzo,O1,n_e,Kzo,Zzo,ez,eQo,oQo,rQo,V1,s_e,tQo,aQo,oz,nQo,sQo,lQo,X1,iQo,l_e,dQo,cQo,i_e,mQo,fQo,z1,WXe,sd,Q1,d_e,f8,gQo,c_e,hQo,HXe,No,g8,uQo,ld,pQo,rz,_Qo,bQo,tz,vQo,FQo,TQo,h8,MQo,m_e,EQo,CQo,wQo,ht,u8,AQo,f_e,LQo,yQo,id,xQo,g_e,$Qo,kQo,az,SQo,RQo,PQo,W1,BQo,to,p8,IQo,h_e,NQo,qQo,Oa,jQo,u_e,DQo,GQo,p_e,OQo,VQo,__e,XQo,zQo,QQo,Z,H1,b_e,WQo,HQo,nz,UQo,JQo,YQo,U1,v_e,KQo,ZQo,sz,eWo,oWo,rWo,J1,F_e,tWo,aWo,lz,nWo,sWo,lWo,Y1,T_e,iWo,dWo,iz,cWo,mWo,fWo,K1,M_e,gWo,hWo,dz,uWo,pWo,_Wo,Z1,E_e,bWo,vWo,cz,FWo,TWo,MWo,eF,C_e,EWo,CWo,mz,wWo,AWo,LWo,oF,w_e,yWo,xWo,fz,$Wo,kWo,SWo,rF,A_e,RWo,PWo,gz,BWo,IWo,NWo,tF,L_e,qWo,jWo,hz,DWo,GWo,OWo,aF,y_e,VWo,XWo,uz,zWo,QWo,WWo,nF,x_e,HWo,UWo,pz,JWo,YWo,KWo,sF,$_e,ZWo,eHo,_z,oHo,rHo,tHo,lF,k_e,aHo,nHo,bz,sHo,lHo,iHo,iF,S_e,dHo,cHo,vz,mHo,fHo,gHo,dF,R_e,hHo,uHo,Fz,pHo,_Ho,bHo,cF,P_e,vHo,FHo,Tz,THo,MHo,EHo,mF,B_e,CHo,wHo,Mz,AHo,LHo,yHo,fF,I_e,xHo,$Ho,Ez,kHo,SHo,RHo,gF,N_e,PHo,BHo,Cz,IHo,NHo,qHo,hF,q_e,jHo,DHo,wz,GHo,OHo,VHo,uF,j_e,XHo,zHo,Az,QHo,WHo,HHo,pF,D_e,UHo,JHo,Lz,YHo,KHo,ZHo,_F,G_e,eUo,oUo,yz,rUo,tUo,aUo,bF,O_e,nUo,sUo,xz,lUo,iUo,dUo,vF,V_e,cUo,mUo,$z,fUo,gUo,hUo,FF,X_e,uUo,pUo,kz,_Uo,bUo,vUo,TF,z_e,FUo,TUo,Sz,MUo,EUo,CUo,MF,Q_e,wUo,AUo,Rz,LUo,yUo,xUo,EF,W_e,$Uo,kUo,Pz,SUo,RUo,PUo,CF,BUo,H_e,IUo,NUo,U_e,qUo,jUo,wF,UXe,dd,AF,J_e,_8,DUo,Y_e,GUo,JXe,qo,b8,OUo,cd,VUo,Bz,XUo,zUo,Iz,QUo,WUo,HUo,v8,UUo,K_e,JUo,YUo,KUo,ut,F8,ZUo,Z_e,eJo,oJo,md,rJo,e2e,tJo,aJo,Nz,nJo,sJo,lJo,LF,iJo,ao,T8,dJo,o2e,cJo,mJo,Va,fJo,r2e,gJo,hJo,t2e,uJo,pJo,a2e,_Jo,bJo,vJo,jo,yF,n2e,FJo,TJo,qz,MJo,EJo,CJo,xF,s2e,wJo,AJo,jz,LJo,yJo,xJo,$F,l2e,$Jo,kJo,Dz,SJo,RJo,PJo,kF,i2e,BJo,IJo,Gz,NJo,qJo,jJo,SF,d2e,DJo,GJo,Oz,OJo,VJo,XJo,RF,c2e,zJo,QJo,Vz,WJo,HJo,UJo,PF,JJo,m2e,YJo,KJo,f2e,ZJo,eYo,BF,YXe,fd,IF,g2e,M8,oYo,h2e,rYo,KXe,Do,E8,tYo,gd,aYo,Xz,nYo,sYo,zz,lYo,iYo,dYo,C8,cYo,u2e,mYo,fYo,gYo,pt,w8,hYo,p2e,uYo,pYo,hd,_Yo,_2e,bYo,vYo,Qz,FYo,TYo,MYo,NF,EYo,no,A8,CYo,b2e,wYo,AYo,Xa,LYo,v2e,yYo,xYo,F2e,$Yo,kYo,T2e,SYo,RYo,PYo,U,qF,M2e,BYo,IYo,Wz,NYo,qYo,jYo,jF,E2e,DYo,GYo,Hz,OYo,VYo,XYo,DF,C2e,zYo,QYo,Uz,WYo,HYo,UYo,GF,w2e,JYo,YYo,Jz,KYo,ZYo,eKo,OF,A2e,oKo,rKo,Yz,tKo,aKo,nKo,VF,L2e,sKo,lKo,Kz,iKo,dKo,cKo,XF,y2e,mKo,fKo,Zz,gKo,hKo,uKo,zF,x2e,pKo,_Ko,eQ,bKo,vKo,FKo,QF,$2e,TKo,MKo,oQ,EKo,CKo,wKo,WF,k2e,AKo,LKo,rQ,yKo,xKo,$Ko,HF,S2e,kKo,SKo,tQ,RKo,PKo,BKo,UF,R2e,IKo,NKo,aQ,qKo,jKo,DKo,JF,P2e,GKo,OKo,nQ,VKo,XKo,zKo,YF,B2e,QKo,WKo,sQ,HKo,UKo,JKo,KF,I2e,YKo,KKo,lQ,ZKo,eZo,oZo,ZF,N2e,rZo,tZo,iQ,aZo,nZo,sZo,eT,q2e,lZo,iZo,dQ,dZo,cZo,mZo,oT,j2e,fZo,gZo,cQ,hZo,uZo,pZo,rT,D2e,_Zo,bZo,mQ,vZo,FZo,TZo,tT,G2e,MZo,EZo,fQ,CZo,wZo,AZo,aT,O2e,LZo,yZo,gQ,xZo,$Zo,kZo,nT,V2e,SZo,RZo,hQ,PZo,BZo,IZo,sT,X2e,NZo,qZo,uQ,jZo,DZo,GZo,lT,z2e,OZo,VZo,pQ,XZo,zZo,QZo,iT,Q2e,WZo,HZo,_Q,UZo,JZo,YZo,dT,W2e,KZo,ZZo,bQ,eer,oer,rer,cT,H2e,ter,aer,vQ,ner,ser,ler,mT,U2e,ier,der,FQ,cer,mer,fer,fT,J2e,ger,her,TQ,uer,per,_er,gT,Y2e,ber,ver,MQ,Fer,Ter,Mer,hT,K2e,Eer,Cer,EQ,wer,Aer,Ler,uT,Z2e,yer,xer,CQ,$er,ker,Ser,pT,ebe,Rer,Per,wQ,Ber,Ier,Ner,_T,obe,qer,jer,AQ,Der,Ger,Oer,bT,rbe,Ver,Xer,LQ,zer,Qer,Wer,vT,tbe,Her,Uer,yQ,Jer,Yer,Ker,FT,Zer,abe,eor,oor,nbe,ror,tor,TT,ZXe,ud,MT,sbe,L8,aor,lbe,nor,eze,Go,y8,sor,pd,lor,xQ,ior,dor,$Q,cor,mor,gor,x8,hor,ibe,uor,por,_or,_t,$8,bor,dbe,vor,For,_d,Tor,cbe,Mor,Eor,kQ,Cor,wor,Aor,ET,Lor,so,k8,yor,mbe,xor,$or,za,kor,fbe,Sor,Ror,gbe,Por,Bor,hbe,Ior,Nor,qor,V,CT,ube,jor,Dor,SQ,Gor,Oor,Vor,wT,pbe,Xor,zor,RQ,Qor,Wor,Hor,AT,_be,Uor,Jor,PQ,Yor,Kor,Zor,LT,bbe,err,orr,BQ,rrr,trr,arr,yT,vbe,nrr,srr,IQ,lrr,irr,drr,xT,Fbe,crr,mrr,NQ,frr,grr,hrr,$T,Tbe,urr,prr,qQ,_rr,brr,vrr,kT,Mbe,Frr,Trr,jQ,Mrr,Err,Crr,ST,Ebe,wrr,Arr,DQ,Lrr,yrr,xrr,RT,Cbe,$rr,krr,GQ,Srr,Rrr,Prr,PT,wbe,Brr,Irr,OQ,Nrr,qrr,jrr,BT,Abe,Drr,Grr,VQ,Orr,Vrr,Xrr,IT,Lbe,zrr,Qrr,XQ,Wrr,Hrr,Urr,NT,ybe,Jrr,Yrr,zQ,Krr,Zrr,etr,qT,xbe,otr,rtr,QQ,ttr,atr,ntr,jT,$be,str,ltr,WQ,itr,dtr,ctr,DT,kbe,mtr,ftr,HQ,gtr,htr,utr,GT,Sbe,ptr,_tr,UQ,btr,vtr,Ftr,OT,Rbe,Ttr,Mtr,JQ,Etr,Ctr,wtr,VT,Pbe,Atr,Ltr,YQ,ytr,xtr,$tr,XT,Bbe,ktr,Str,KQ,Rtr,Ptr,Btr,zT,Ibe,Itr,Ntr,ZQ,qtr,jtr,Dtr,QT,Nbe,Gtr,Otr,eW,Vtr,Xtr,ztr,WT,qbe,Qtr,Wtr,oW,Htr,Utr,Jtr,HT,jbe,Ytr,Ktr,rW,Ztr,ear,oar,UT,Dbe,rar,tar,tW,aar,nar,sar,JT,Gbe,lar,iar,aW,dar,car,mar,YT,Obe,far,gar,nW,har,uar,par,KT,Vbe,_ar,bar,sW,Far,Tar,Mar,ZT,Xbe,Ear,Car,lW,war,Aar,Lar,eM,zbe,yar,xar,iW,$ar,kar,Sar,oM,Qbe,Rar,Par,dW,Bar,Iar,Nar,rM,Wbe,qar,jar,cW,Dar,Gar,Oar,tM,Hbe,Var,Xar,mW,zar,Qar,War,aM,Ube,Har,Uar,fW,Jar,Yar,Kar,nM,Jbe,Zar,enr,gW,onr,rnr,tnr,sM,Ybe,anr,nnr,hW,snr,lnr,inr,lM,Kbe,dnr,cnr,uW,mnr,fnr,gnr,iM,Zbe,hnr,unr,pW,pnr,_nr,bnr,dM,eve,vnr,Fnr,_W,Tnr,Mnr,Enr,cM,ove,Cnr,wnr,bW,Anr,Lnr,ynr,mM,rve,xnr,$nr,vW,knr,Snr,Rnr,fM,Pnr,tve,Bnr,Inr,ave,Nnr,qnr,gM,oze,bd,hM,nve,S8,jnr,sve,Dnr,rze,Oo,R8,Gnr,vd,Onr,FW,Vnr,Xnr,TW,znr,Qnr,Wnr,P8,Hnr,lve,Unr,Jnr,Ynr,bt,B8,Knr,ive,Znr,esr,Fd,osr,dve,rsr,tsr,MW,asr,nsr,ssr,uM,lsr,lo,I8,isr,cve,dsr,csr,Qa,msr,mve,fsr,gsr,fve,hsr,usr,gve,psr,_sr,bsr,hve,pM,uve,vsr,Fsr,EW,Tsr,Msr,Esr,_M,Csr,pve,wsr,Asr,_ve,Lsr,ysr,bM,tze,Td,vM,bve,N8,xsr,vve,$sr,aze,Vo,q8,ksr,Md,Ssr,CW,Rsr,Psr,wW,Bsr,Isr,Nsr,j8,qsr,Fve,jsr,Dsr,Gsr,vt,D8,Osr,Tve,Vsr,Xsr,Ed,zsr,Mve,Qsr,Wsr,AW,Hsr,Usr,Jsr,FM,Ysr,io,G8,Ksr,Eve,Zsr,elr,Wa,olr,Cve,rlr,tlr,wve,alr,nlr,Ave,slr,llr,ilr,ve,TM,Lve,dlr,clr,LW,mlr,flr,glr,MM,yve,hlr,ulr,yW,plr,_lr,blr,EM,xve,vlr,Flr,xW,Tlr,Mlr,Elr,CM,$ve,Clr,wlr,$W,Alr,Llr,ylr,Us,kve,xlr,$lr,kW,klr,Slr,SW,Rlr,Plr,Blr,wM,Sve,Ilr,Nlr,RW,qlr,jlr,Dlr,Js,Rve,Glr,Olr,PW,Vlr,Xlr,BW,zlr,Qlr,Wlr,AM,Pve,Hlr,Ulr,IW,Jlr,Ylr,Klr,Ft,Bve,Zlr,eir,NW,oir,rir,qW,tir,air,jW,nir,sir,lir,LM,Ive,iir,dir,DW,cir,mir,fir,yM,Nve,gir,hir,GW,uir,pir,_ir,xM,qve,bir,vir,OW,Fir,Tir,Mir,$M,jve,Eir,Cir,VW,wir,Air,Lir,kM,Dve,yir,xir,XW,$ir,kir,Sir,SM,Gve,Rir,Pir,zW,Bir,Iir,Nir,RM,Ove,qir,jir,QW,Dir,Gir,Oir,PM,Vir,Vve,Xir,zir,Xve,Qir,Wir,BM,nze,Cd,IM,zve,O8,Hir,Qve,Uir,sze,Xo,V8,Jir,wd,Yir,WW,Kir,Zir,HW,edr,odr,rdr,X8,tdr,Wve,adr,ndr,sdr,Tt,z8,ldr,Hve,idr,ddr,Ad,cdr,Uve,mdr,fdr,UW,gdr,hdr,udr,NM,pdr,co,Q8,_dr,Jve,bdr,vdr,Ha,Fdr,Yve,Tdr,Mdr,Kve,Edr,Cdr,Zve,wdr,Adr,Ldr,e1e,qM,o1e,ydr,xdr,JW,$dr,kdr,Sdr,jM,Rdr,r1e,Pdr,Bdr,t1e,Idr,Ndr,DM,lze,Ld,GM,a1e,W8,qdr,n1e,jdr,ize,zo,H8,Ddr,yd,Gdr,YW,Odr,Vdr,KW,Xdr,zdr,Qdr,U8,Wdr,s1e,Hdr,Udr,Jdr,Mt,J8,Ydr,l1e,Kdr,Zdr,xd,ecr,i1e,ocr,rcr,ZW,tcr,acr,ncr,OM,scr,mo,Y8,lcr,d1e,icr,dcr,Ua,ccr,c1e,mcr,fcr,m1e,gcr,hcr,f1e,ucr,pcr,_cr,g1e,VM,h1e,bcr,vcr,eH,Fcr,Tcr,Mcr,XM,Ecr,u1e,Ccr,wcr,p1e,Acr,Lcr,zM,dze,$d,QM,_1e,K8,ycr,b1e,xcr,cze,Qo,Z8,$cr,kd,kcr,oH,Scr,Rcr,rH,Pcr,Bcr,Icr,e9,Ncr,v1e,qcr,jcr,Dcr,Et,o9,Gcr,F1e,Ocr,Vcr,Sd,Xcr,T1e,zcr,Qcr,tH,Wcr,Hcr,Ucr,WM,Jcr,fo,r9,Ycr,M1e,Kcr,Zcr,Ja,emr,E1e,omr,rmr,C1e,tmr,amr,w1e,nmr,smr,lmr,Pe,HM,A1e,imr,dmr,aH,cmr,mmr,fmr,UM,L1e,gmr,hmr,nH,umr,pmr,_mr,JM,y1e,bmr,vmr,sH,Fmr,Tmr,Mmr,YM,x1e,Emr,Cmr,lH,wmr,Amr,Lmr,KM,$1e,ymr,xmr,iH,$mr,kmr,Smr,ZM,k1e,Rmr,Pmr,dH,Bmr,Imr,Nmr,e4,S1e,qmr,jmr,cH,Dmr,Gmr,Omr,o4,R1e,Vmr,Xmr,mH,zmr,Qmr,Wmr,r4,P1e,Hmr,Umr,fH,Jmr,Ymr,Kmr,t4,Zmr,B1e,efr,ofr,I1e,rfr,tfr,a4,mze,Rd,n4,N1e,t9,afr,q1e,nfr,fze,Wo,a9,sfr,Pd,lfr,gH,ifr,dfr,hH,cfr,mfr,ffr,n9,gfr,j1e,hfr,ufr,pfr,Ct,s9,_fr,D1e,bfr,vfr,Bd,Ffr,G1e,Tfr,Mfr,uH,Efr,Cfr,wfr,s4,Afr,go,l9,Lfr,O1e,yfr,xfr,Ya,$fr,V1e,kfr,Sfr,X1e,Rfr,Pfr,z1e,Bfr,Ifr,Nfr,rt,l4,Q1e,qfr,jfr,pH,Dfr,Gfr,Ofr,i4,W1e,Vfr,Xfr,_H,zfr,Qfr,Wfr,d4,H1e,Hfr,Ufr,bH,Jfr,Yfr,Kfr,c4,U1e,Zfr,egr,vH,ogr,rgr,tgr,m4,J1e,agr,ngr,FH,sgr,lgr,igr,f4,dgr,Y1e,cgr,mgr,K1e,fgr,ggr,g4,gze,Id,h4,Z1e,i9,hgr,eFe,ugr,hze,Ho,d9,pgr,Nd,_gr,TH,bgr,vgr,MH,Fgr,Tgr,Mgr,c9,Egr,oFe,Cgr,wgr,Agr,wt,m9,Lgr,rFe,ygr,xgr,qd,$gr,tFe,kgr,Sgr,EH,Rgr,Pgr,Bgr,u4,Igr,ho,f9,Ngr,aFe,qgr,jgr,Ka,Dgr,nFe,Ggr,Ogr,sFe,Vgr,Xgr,lFe,zgr,Qgr,Wgr,Le,p4,iFe,Hgr,Ugr,CH,Jgr,Ygr,Kgr,_4,dFe,Zgr,ehr,wH,ohr,rhr,thr,b4,cFe,ahr,nhr,AH,shr,lhr,ihr,v4,mFe,dhr,chr,LH,mhr,fhr,ghr,F4,fFe,hhr,uhr,yH,phr,_hr,bhr,T4,gFe,vhr,Fhr,xH,Thr,Mhr,Ehr,M4,hFe,Chr,whr,$H,Ahr,Lhr,yhr,E4,uFe,xhr,$hr,kH,khr,Shr,Rhr,C4,pFe,Phr,Bhr,SH,Ihr,Nhr,qhr,w4,_Fe,jhr,Dhr,RH,Ghr,Ohr,Vhr,A4,Xhr,bFe,zhr,Qhr,vFe,Whr,Hhr,L4,uze,jd,y4,FFe,g9,Uhr,TFe,Jhr,pze,Uo,h9,Yhr,Dd,Khr,PH,Zhr,eur,BH,our,rur,tur,u9,aur,MFe,nur,sur,lur,At,p9,iur,EFe,dur,cur,Gd,mur,CFe,fur,gur,IH,hur,uur,pur,x4,_ur,uo,_9,bur,wFe,vur,Fur,Za,Tur,AFe,Mur,Eur,LFe,Cur,wur,yFe,Aur,Lur,yur,b9,$4,xFe,xur,$ur,NH,kur,Sur,Rur,k4,$Fe,Pur,Bur,qH,Iur,Nur,qur,S4,jur,kFe,Dur,Gur,SFe,Our,Vur,R4,_ze,Od,P4,RFe,v9,Xur,PFe,zur,bze,Jo,F9,Qur,Vd,Wur,jH,Hur,Uur,DH,Jur,Yur,Kur,T9,Zur,BFe,epr,opr,rpr,Lt,M9,tpr,IFe,apr,npr,Xd,spr,NFe,lpr,ipr,GH,dpr,cpr,mpr,B4,fpr,po,E9,gpr,qFe,hpr,upr,en,ppr,jFe,_pr,bpr,DFe,vpr,Fpr,GFe,Tpr,Mpr,Epr,tt,I4,OFe,Cpr,wpr,OH,Apr,Lpr,ypr,N4,VFe,xpr,$pr,VH,kpr,Spr,Rpr,q4,XFe,Ppr,Bpr,XH,Ipr,Npr,qpr,j4,zFe,jpr,Dpr,zH,Gpr,Opr,Vpr,D4,QFe,Xpr,zpr,QH,Qpr,Wpr,Hpr,G4,Upr,WFe,Jpr,Ypr,HFe,Kpr,Zpr,O4,vze,zd,V4,UFe,C9,e_r,JFe,o_r,Fze,Yo,w9,r_r,Qd,t_r,WH,a_r,n_r,HH,s_r,l_r,i_r,A9,d_r,YFe,c_r,m_r,f_r,yt,L9,g_r,KFe,h_r,u_r,Wd,p_r,ZFe,__r,b_r,UH,v_r,F_r,T_r,X4,M_r,_o,y9,E_r,eTe,C_r,w_r,on,A_r,oTe,L_r,y_r,rTe,x_r,$_r,tTe,k_r,S_r,R_r,Hd,z4,aTe,P_r,B_r,JH,I_r,N_r,q_r,Q4,nTe,j_r,D_r,YH,G_r,O_r,V_r,W4,sTe,X_r,z_r,KH,Q_r,W_r,H_r,H4,U_r,lTe,J_r,Y_r,iTe,K_r,Z_r,U4,Tze,Ud,J4,dTe,x9,e2r,cTe,o2r,Mze,Ko,$9,r2r,Jd,t2r,ZH,a2r,n2r,eU,s2r,l2r,i2r,k9,d2r,mTe,c2r,m2r,f2r,xt,S9,g2r,fTe,h2r,u2r,Yd,p2r,gTe,_2r,b2r,oU,v2r,F2r,T2r,Y4,M2r,bo,R9,E2r,hTe,C2r,w2r,rn,A2r,uTe,L2r,y2r,pTe,x2r,$2r,_Te,k2r,S2r,R2r,P9,K4,bTe,P2r,B2r,rU,I2r,N2r,q2r,Z4,vTe,j2r,D2r,tU,G2r,O2r,V2r,eE,X2r,FTe,z2r,Q2r,TTe,W2r,H2r,oE,Eze,Kd,rE,MTe,B9,U2r,ETe,J2r,Cze,Zo,I9,Y2r,Zd,K2r,aU,Z2r,ebr,nU,obr,rbr,tbr,N9,abr,CTe,nbr,sbr,lbr,$t,q9,ibr,wTe,dbr,cbr,ec,mbr,ATe,fbr,gbr,sU,hbr,ubr,pbr,tE,_br,vo,j9,bbr,LTe,vbr,Fbr,tn,Tbr,yTe,Mbr,Ebr,xTe,Cbr,wbr,$Te,Abr,Lbr,ybr,kTe,aE,STe,xbr,$br,lU,kbr,Sbr,Rbr,nE,Pbr,RTe,Bbr,Ibr,PTe,Nbr,qbr,sE,wze,oc,lE,BTe,D9,jbr,ITe,Dbr,Aze,er,G9,Gbr,rc,Obr,iU,Vbr,Xbr,dU,zbr,Qbr,Wbr,O9,Hbr,NTe,Ubr,Jbr,Ybr,kt,V9,Kbr,qTe,Zbr,evr,tc,ovr,jTe,rvr,tvr,cU,avr,nvr,svr,iE,lvr,Fo,X9,ivr,DTe,dvr,cvr,an,mvr,GTe,fvr,gvr,OTe,hvr,uvr,VTe,pvr,_vr,bvr,at,dE,XTe,vvr,Fvr,mU,Tvr,Mvr,Evr,cE,zTe,Cvr,wvr,fU,Avr,Lvr,yvr,mE,QTe,xvr,$vr,gU,kvr,Svr,Rvr,fE,WTe,Pvr,Bvr,hU,Ivr,Nvr,qvr,gE,HTe,jvr,Dvr,uU,Gvr,Ovr,Vvr,hE,Xvr,UTe,zvr,Qvr,JTe,Wvr,Hvr,uE,Lze,ac,pE,YTe,z9,Uvr,KTe,Jvr,yze,or,Q9,Yvr,nc,Kvr,pU,Zvr,e1r,_U,o1r,r1r,t1r,W9,a1r,ZTe,n1r,s1r,l1r,St,H9,i1r,eMe,d1r,c1r,sc,m1r,oMe,f1r,g1r,bU,h1r,u1r,p1r,_E,_1r,To,U9,b1r,rMe,v1r,F1r,nn,T1r,tMe,M1r,E1r,aMe,C1r,w1r,nMe,A1r,L1r,y1r,sMe,bE,lMe,x1r,$1r,vU,k1r,S1r,R1r,vE,P1r,iMe,B1r,I1r,dMe,N1r,q1r,FE,xze,lc,TE,cMe,J9,j1r,mMe,D1r,$ze,rr,Y9,G1r,ic,O1r,FU,V1r,X1r,TU,z1r,Q1r,W1r,K9,H1r,fMe,U1r,J1r,Y1r,Rt,Z9,K1r,gMe,Z1r,eFr,dc,oFr,hMe,rFr,tFr,MU,aFr,nFr,sFr,ME,lFr,$r,ex,iFr,uMe,dFr,cFr,sn,mFr,pMe,fFr,gFr,_Me,hFr,uFr,bMe,pFr,_Fr,bFr,I,EE,vMe,vFr,FFr,EU,TFr,MFr,EFr,CE,FMe,CFr,wFr,CU,AFr,LFr,yFr,wE,TMe,xFr,$Fr,wU,kFr,SFr,RFr,AE,MMe,PFr,BFr,AU,IFr,NFr,qFr,LE,EMe,jFr,DFr,LU,GFr,OFr,VFr,yE,CMe,XFr,zFr,yU,QFr,WFr,HFr,xE,wMe,UFr,JFr,xU,YFr,KFr,ZFr,$E,AMe,eTr,oTr,$U,rTr,tTr,aTr,kE,LMe,nTr,sTr,kU,lTr,iTr,dTr,SE,yMe,cTr,mTr,SU,fTr,gTr,hTr,RE,xMe,uTr,pTr,RU,_Tr,bTr,vTr,PE,$Me,FTr,TTr,PU,MTr,ETr,CTr,BE,kMe,wTr,ATr,BU,LTr,yTr,xTr,IE,SMe,$Tr,kTr,IU,STr,RTr,PTr,NE,RMe,BTr,ITr,NU,NTr,qTr,jTr,qE,PMe,DTr,GTr,qU,OTr,VTr,XTr,jE,BMe,zTr,QTr,jU,WTr,HTr,UTr,DE,IMe,JTr,YTr,DU,KTr,ZTr,eMr,Ys,NMe,oMr,rMr,GU,tMr,aMr,OU,nMr,sMr,lMr,GE,qMe,iMr,dMr,VU,cMr,mMr,fMr,OE,jMe,gMr,hMr,XU,uMr,pMr,_Mr,VE,DMe,bMr,vMr,zU,FMr,TMr,MMr,XE,GMe,EMr,CMr,QU,wMr,AMr,LMr,zE,OMe,yMr,xMr,WU,$Mr,kMr,SMr,QE,VMe,RMr,PMr,HU,BMr,IMr,NMr,WE,XMe,qMr,jMr,UU,DMr,GMr,OMr,HE,zMe,VMr,XMr,JU,zMr,QMr,WMr,UE,QMe,HMr,UMr,YU,JMr,YMr,KMr,JE,WMe,ZMr,e4r,KU,o4r,r4r,t4r,YE,HMe,a4r,n4r,ZU,s4r,l4r,i4r,KE,UMe,d4r,c4r,eJ,m4r,f4r,g4r,ZE,JMe,h4r,u4r,oJ,p4r,_4r,b4r,eC,YMe,v4r,F4r,rJ,T4r,M4r,E4r,oC,KMe,C4r,w4r,tJ,A4r,L4r,y4r,rC,ZMe,x4r,$4r,aJ,k4r,S4r,R4r,tC,e4e,P4r,B4r,nJ,I4r,N4r,q4r,aC,o4e,j4r,D4r,sJ,G4r,O4r,V4r,nC,r4e,X4r,z4r,lJ,Q4r,W4r,H4r,sC,t4e,U4r,J4r,iJ,Y4r,K4r,Z4r,lC,a4e,eEr,oEr,dJ,rEr,tEr,aEr,iC,n4e,nEr,sEr,cJ,lEr,iEr,dEr,dC,s4e,cEr,mEr,mJ,fEr,gEr,hEr,cC,l4e,uEr,pEr,fJ,_Er,bEr,vEr,mC,i4e,FEr,TEr,gJ,MEr,EEr,CEr,fC,d4e,wEr,AEr,hJ,LEr,yEr,xEr,gC,c4e,$Er,kEr,uJ,SEr,REr,PEr,hC,m4e,BEr,IEr,pJ,NEr,qEr,jEr,uC,f4e,DEr,GEr,_J,OEr,VEr,XEr,pC,g4e,zEr,QEr,bJ,WEr,HEr,UEr,_C,h4e,JEr,YEr,vJ,KEr,ZEr,eCr,bC,u4e,oCr,rCr,FJ,tCr,aCr,nCr,vC,kze,cc,FC,p4e,ox,sCr,_4e,lCr,Sze,tr,rx,iCr,mc,dCr,TJ,cCr,mCr,MJ,fCr,gCr,hCr,tx,uCr,b4e,pCr,_Cr,bCr,Pt,ax,vCr,v4e,FCr,TCr,fc,MCr,F4e,ECr,CCr,EJ,wCr,ACr,LCr,TC,yCr,kr,nx,xCr,T4e,$Cr,kCr,ln,SCr,M4e,RCr,PCr,E4e,BCr,ICr,C4e,NCr,qCr,jCr,se,MC,w4e,DCr,GCr,CJ,OCr,VCr,XCr,EC,A4e,zCr,QCr,wJ,WCr,HCr,UCr,CC,L4e,JCr,YCr,AJ,KCr,ZCr,e3r,wC,y4e,o3r,r3r,LJ,t3r,a3r,n3r,AC,x4e,s3r,l3r,yJ,i3r,d3r,c3r,LC,$4e,m3r,f3r,xJ,g3r,h3r,u3r,yC,k4e,p3r,_3r,$J,b3r,v3r,F3r,xC,S4e,T3r,M3r,kJ,E3r,C3r,w3r,$C,R4e,A3r,L3r,SJ,y3r,x3r,$3r,kC,P4e,k3r,S3r,RJ,R3r,P3r,B3r,SC,B4e,I3r,N3r,PJ,q3r,j3r,D3r,RC,I4e,G3r,O3r,BJ,V3r,X3r,z3r,PC,N4e,Q3r,W3r,IJ,H3r,U3r,J3r,BC,q4e,Y3r,K3r,NJ,Z3r,e5r,o5r,IC,j4e,r5r,t5r,qJ,a5r,n5r,s5r,NC,D4e,l5r,i5r,jJ,d5r,c5r,m5r,qC,G4e,f5r,g5r,DJ,h5r,u5r,p5r,jC,O4e,_5r,b5r,GJ,v5r,F5r,T5r,DC,V4e,M5r,E5r,OJ,C5r,w5r,A5r,GC,X4e,L5r,y5r,VJ,x5r,$5r,k5r,OC,z4e,S5r,R5r,XJ,P5r,B5r,I5r,VC,Q4e,N5r,q5r,zJ,j5r,D5r,G5r,XC,W4e,O5r,V5r,QJ,X5r,z5r,Q5r,zC,Rze,gc,QC,H4e,sx,W5r,U4e,H5r,Pze,ar,lx,U5r,hc,J5r,WJ,Y5r,K5r,HJ,Z5r,e0r,o0r,ix,r0r,J4e,t0r,a0r,n0r,Bt,dx,s0r,Y4e,l0r,i0r,uc,d0r,K4e,c0r,m0r,UJ,f0r,g0r,h0r,WC,u0r,Sr,cx,p0r,Z4e,_0r,b0r,dn,v0r,eEe,F0r,T0r,oEe,M0r,E0r,rEe,C0r,w0r,A0r,Me,HC,tEe,L0r,y0r,JJ,x0r,$0r,k0r,UC,aEe,S0r,R0r,YJ,P0r,B0r,I0r,JC,nEe,N0r,q0r,KJ,j0r,D0r,G0r,YC,sEe,O0r,V0r,ZJ,X0r,z0r,Q0r,KC,lEe,W0r,H0r,eY,U0r,J0r,Y0r,ZC,iEe,K0r,Z0r,oY,ewr,owr,rwr,e3,dEe,twr,awr,rY,nwr,swr,lwr,o3,cEe,iwr,dwr,tY,cwr,mwr,fwr,r3,mEe,gwr,hwr,aY,uwr,pwr,_wr,t3,fEe,bwr,vwr,nY,Fwr,Twr,Mwr,a3,gEe,Ewr,Cwr,sY,wwr,Awr,Lwr,n3,hEe,ywr,xwr,lY,$wr,kwr,Swr,s3,uEe,Rwr,Pwr,iY,Bwr,Iwr,Nwr,l3,Bze,pc,i3,pEe,mx,qwr,_Ee,jwr,Ize,nr,fx,Dwr,_c,Gwr,dY,Owr,Vwr,cY,Xwr,zwr,Qwr,gx,Wwr,bEe,Hwr,Uwr,Jwr,It,hx,Ywr,vEe,Kwr,Zwr,bc,eAr,FEe,oAr,rAr,mY,tAr,aAr,nAr,d3,sAr,Rr,ux,lAr,TEe,iAr,dAr,cn,cAr,MEe,mAr,fAr,EEe,gAr,hAr,CEe,uAr,pAr,_Ar,Ve,c3,wEe,bAr,vAr,fY,FAr,TAr,MAr,m3,AEe,EAr,CAr,gY,wAr,AAr,LAr,Ks,LEe,yAr,xAr,hY,$Ar,kAr,uY,SAr,RAr,PAr,f3,yEe,BAr,IAr,pY,NAr,qAr,jAr,g3,xEe,DAr,GAr,_Y,OAr,VAr,XAr,h3,$Ee,zAr,QAr,bY,WAr,HAr,UAr,u3,kEe,JAr,YAr,vY,KAr,ZAr,e6r,p3,SEe,o6r,r6r,FY,t6r,a6r,n6r,_3,Nze,vc,b3,REe,px,s6r,PEe,l6r,qze,sr,_x,i6r,Fc,d6r,TY,c6r,m6r,MY,f6r,g6r,h6r,bx,u6r,BEe,p6r,_6r,b6r,Nt,vx,v6r,IEe,F6r,T6r,Tc,M6r,NEe,E6r,C6r,EY,w6r,A6r,L6r,v3,y6r,Pr,Fx,x6r,qEe,$6r,k6r,mn,S6r,jEe,R6r,P6r,DEe,B6r,I6r,GEe,N6r,q6r,j6r,ie,F3,OEe,D6r,G6r,CY,O6r,V6r,X6r,T3,VEe,z6r,Q6r,wY,W6r,H6r,U6r,M3,XEe,J6r,Y6r,AY,K6r,Z6r,e7r,E3,zEe,o7r,r7r,LY,t7r,a7r,n7r,C3,QEe,s7r,l7r,yY,i7r,d7r,c7r,w3,WEe,m7r,f7r,xY,g7r,h7r,u7r,A3,HEe,p7r,_7r,$Y,b7r,v7r,F7r,L3,UEe,T7r,M7r,kY,E7r,C7r,w7r,y3,JEe,A7r,L7r,SY,y7r,x7r,$7r,x3,YEe,k7r,S7r,RY,R7r,P7r,B7r,$3,KEe,I7r,N7r,PY,q7r,j7r,D7r,k3,ZEe,G7r,O7r,BY,V7r,X7r,z7r,S3,eCe,Q7r,W7r,IY,H7r,U7r,J7r,R3,oCe,Y7r,K7r,NY,Z7r,eLr,oLr,P3,rCe,rLr,tLr,qY,aLr,nLr,sLr,B3,tCe,lLr,iLr,jY,dLr,cLr,mLr,I3,aCe,fLr,gLr,DY,hLr,uLr,pLr,N3,nCe,_Lr,bLr,GY,vLr,FLr,TLr,q3,sCe,MLr,ELr,OY,CLr,wLr,ALr,j3,lCe,LLr,yLr,VY,xLr,$Lr,kLr,D3,jze,Mc,G3,iCe,Tx,SLr,dCe,RLr,Dze,lr,Mx,PLr,Ec,BLr,XY,ILr,NLr,zY,qLr,jLr,DLr,Ex,GLr,cCe,OLr,VLr,XLr,qt,Cx,zLr,mCe,QLr,WLr,Cc,HLr,fCe,ULr,JLr,QY,YLr,KLr,ZLr,O3,eyr,Br,wx,oyr,gCe,ryr,tyr,fn,ayr,hCe,nyr,syr,uCe,lyr,iyr,pCe,dyr,cyr,myr,ye,V3,_Ce,fyr,gyr,WY,hyr,uyr,pyr,X3,bCe,_yr,byr,HY,vyr,Fyr,Tyr,z3,vCe,Myr,Eyr,UY,Cyr,wyr,Ayr,Q3,FCe,Lyr,yyr,JY,xyr,$yr,kyr,W3,TCe,Syr,Ryr,YY,Pyr,Byr,Iyr,H3,MCe,Nyr,qyr,KY,jyr,Dyr,Gyr,U3,ECe,Oyr,Vyr,ZY,Xyr,zyr,Qyr,J3,CCe,Wyr,Hyr,eK,Uyr,Jyr,Yyr,Y3,wCe,Kyr,Zyr,oK,e8r,o8r,r8r,K3,ACe,t8r,a8r,rK,n8r,s8r,l8r,Z3,Gze,wc,e5,LCe,Ax,i8r,yCe,d8r,Oze,ir,Lx,c8r,Ac,m8r,tK,f8r,g8r,aK,h8r,u8r,p8r,yx,_8r,xCe,b8r,v8r,F8r,jt,xx,T8r,$Ce,M8r,E8r,Lc,C8r,kCe,w8r,A8r,nK,L8r,y8r,x8r,o5,$8r,Ir,$x,k8r,SCe,S8r,R8r,gn,P8r,RCe,B8r,I8r,PCe,N8r,q8r,BCe,j8r,D8r,G8r,te,r5,ICe,O8r,V8r,sK,X8r,z8r,Q8r,t5,NCe,W8r,H8r,lK,U8r,J8r,Y8r,a5,qCe,K8r,Z8r,iK,e9r,o9r,r9r,n5,jCe,t9r,a9r,dK,n9r,s9r,l9r,s5,DCe,i9r,d9r,cK,c9r,m9r,f9r,l5,GCe,g9r,h9r,mK,u9r,p9r,_9r,i5,OCe,b9r,v9r,fK,F9r,T9r,M9r,d5,VCe,E9r,C9r,gK,w9r,A9r,L9r,c5,XCe,y9r,x9r,hK,$9r,k9r,S9r,m5,zCe,R9r,P9r,uK,B9r,I9r,N9r,f5,QCe,q9r,j9r,pK,D9r,G9r,O9r,g5,WCe,V9r,X9r,_K,z9r,Q9r,W9r,h5,HCe,H9r,U9r,bK,J9r,Y9r,K9r,u5,UCe,Z9r,exr,vK,oxr,rxr,txr,p5,JCe,axr,nxr,FK,sxr,lxr,ixr,_5,YCe,dxr,cxr,TK,mxr,fxr,gxr,b5,KCe,hxr,uxr,MK,pxr,_xr,bxr,v5,ZCe,vxr,Fxr,EK,Txr,Mxr,Exr,F5,e3e,Cxr,wxr,CK,Axr,Lxr,yxr,T5,o3e,xxr,$xr,wK,kxr,Sxr,Rxr,M5,r3e,Pxr,Bxr,AK,Ixr,Nxr,qxr,E5,t3e,jxr,Dxr,LK,Gxr,Oxr,Vxr,C5,a3e,Xxr,zxr,yK,Qxr,Wxr,Hxr,w5,n3e,Uxr,Jxr,xK,Yxr,Kxr,Zxr,A5,s3e,e$r,o$r,$K,r$r,t$r,a$r,L5,l3e,n$r,s$r,kK,l$r,i$r,d$r,y5,Vze,yc,x5,i3e,kx,c$r,d3e,m$r,Xze,dr,Sx,f$r,xc,g$r,SK,h$r,u$r,RK,p$r,_$r,b$r,Rx,v$r,c3e,F$r,T$r,M$r,Dt,Px,E$r,m3e,C$r,w$r,$c,A$r,f3e,L$r,y$r,PK,x$r,$$r,k$r,$5,S$r,Nr,Bx,R$r,g3e,P$r,B$r,hn,I$r,h3e,N$r,q$r,u3e,j$r,D$r,p3e,G$r,O$r,V$r,_e,k5,_3e,X$r,z$r,BK,Q$r,W$r,H$r,S5,b3e,U$r,J$r,IK,Y$r,K$r,Z$r,R5,v3e,ekr,okr,NK,rkr,tkr,akr,P5,F3e,nkr,skr,qK,lkr,ikr,dkr,B5,T3e,ckr,mkr,jK,fkr,gkr,hkr,I5,M3e,ukr,pkr,DK,_kr,bkr,vkr,N5,E3e,Fkr,Tkr,GK,Mkr,Ekr,Ckr,q5,C3e,wkr,Akr,OK,Lkr,ykr,xkr,j5,w3e,$kr,kkr,VK,Skr,Rkr,Pkr,D5,A3e,Bkr,Ikr,XK,Nkr,qkr,jkr,G5,L3e,Dkr,Gkr,zK,Okr,Vkr,Xkr,O5,y3e,zkr,Qkr,QK,Wkr,Hkr,Ukr,V5,x3e,Jkr,Ykr,WK,Kkr,Zkr,eSr,X5,$3e,oSr,rSr,HK,tSr,aSr,nSr,z5,k3e,sSr,lSr,UK,iSr,dSr,cSr,Q5,S3e,mSr,fSr,JK,gSr,hSr,uSr,W5,R3e,pSr,_Sr,YK,bSr,vSr,FSr,H5,zze,kc,U5,P3e,Ix,TSr,B3e,MSr,Qze,cr,Nx,ESr,Sc,CSr,KK,wSr,ASr,ZK,LSr,ySr,xSr,qx,$Sr,I3e,kSr,SSr,RSr,Gt,jx,PSr,N3e,BSr,ISr,Rc,NSr,q3e,qSr,jSr,eZ,DSr,GSr,OSr,J5,VSr,qr,Dx,XSr,j3e,zSr,QSr,un,WSr,D3e,HSr,USr,G3e,JSr,YSr,O3e,KSr,ZSr,eRr,Gx,Y5,V3e,oRr,rRr,oZ,tRr,aRr,nRr,K5,X3e,sRr,lRr,rZ,iRr,dRr,cRr,Z5,Wze,Pc,e0,z3e,Ox,mRr,Q3e,fRr,Hze,mr,Vx,gRr,Bc,hRr,tZ,uRr,pRr,aZ,_Rr,bRr,vRr,Xx,FRr,W3e,TRr,MRr,ERr,Ot,zx,CRr,H3e,wRr,ARr,Ic,LRr,U3e,yRr,xRr,nZ,$Rr,kRr,SRr,o0,RRr,jr,Qx,PRr,J3e,BRr,IRr,pn,NRr,Y3e,qRr,jRr,K3e,DRr,GRr,Z3e,ORr,VRr,XRr,e5e,r0,o5e,zRr,QRr,sZ,WRr,HRr,URr,t0,Uze,Nc,a0,r5e,Wx,JRr,t5e,YRr,Jze,fr,Hx,KRr,qc,ZRr,lZ,ePr,oPr,iZ,rPr,tPr,aPr,Ux,nPr,a5e,sPr,lPr,iPr,Vt,Jx,dPr,n5e,cPr,mPr,jc,fPr,s5e,gPr,hPr,dZ,uPr,pPr,_Pr,n0,bPr,Dr,Yx,vPr,l5e,FPr,TPr,_n,MPr,i5e,EPr,CPr,d5e,wPr,APr,c5e,LPr,yPr,xPr,de,s0,m5e,$Pr,kPr,cZ,SPr,RPr,PPr,l0,f5e,BPr,IPr,mZ,NPr,qPr,jPr,i0,g5e,DPr,GPr,fZ,OPr,VPr,XPr,d0,h5e,zPr,QPr,gZ,WPr,HPr,UPr,c0,u5e,JPr,YPr,hZ,KPr,ZPr,eBr,m0,p5e,oBr,rBr,uZ,tBr,aBr,nBr,f0,_5e,sBr,lBr,pZ,iBr,dBr,cBr,g0,b5e,mBr,fBr,_Z,gBr,hBr,uBr,h0,v5e,pBr,_Br,bZ,bBr,vBr,FBr,u0,F5e,TBr,MBr,vZ,EBr,CBr,wBr,p0,T5e,ABr,LBr,FZ,yBr,xBr,$Br,_0,M5e,kBr,SBr,TZ,RBr,PBr,BBr,b0,E5e,IBr,NBr,MZ,qBr,jBr,DBr,v0,C5e,GBr,OBr,EZ,VBr,XBr,zBr,F0,w5e,QBr,WBr,CZ,HBr,UBr,JBr,T0,A5e,YBr,KBr,wZ,ZBr,eIr,oIr,M0,L5e,rIr,tIr,AZ,aIr,nIr,sIr,E0,y5e,lIr,iIr,LZ,dIr,cIr,mIr,C0,x5e,fIr,gIr,yZ,hIr,uIr,pIr,w0,$5e,_Ir,bIr,xZ,vIr,FIr,TIr,A0,Yze,Dc,L0,k5e,Kx,MIr,S5e,EIr,Kze,gr,Zx,CIr,Gc,wIr,$Z,AIr,LIr,kZ,yIr,xIr,$Ir,e$,kIr,R5e,SIr,RIr,PIr,Xt,o$,BIr,P5e,IIr,NIr,Oc,qIr,B5e,jIr,DIr,SZ,GIr,OIr,VIr,y0,XIr,Gr,r$,zIr,I5e,QIr,WIr,bn,HIr,N5e,UIr,JIr,q5e,YIr,KIr,j5e,ZIr,eNr,oNr,ce,x0,D5e,rNr,tNr,RZ,aNr,nNr,sNr,$0,G5e,lNr,iNr,PZ,dNr,cNr,mNr,k0,O5e,fNr,gNr,BZ,hNr,uNr,pNr,S0,V5e,_Nr,bNr,IZ,vNr,FNr,TNr,R0,X5e,MNr,ENr,NZ,CNr,wNr,ANr,P0,z5e,LNr,yNr,qZ,xNr,$Nr,kNr,B0,Q5e,SNr,RNr,jZ,PNr,BNr,INr,I0,W5e,NNr,qNr,DZ,jNr,DNr,GNr,N0,H5e,ONr,VNr,GZ,XNr,zNr,QNr,q0,U5e,WNr,HNr,OZ,UNr,JNr,YNr,j0,J5e,KNr,ZNr,VZ,eqr,oqr,rqr,D0,Y5e,tqr,aqr,XZ,nqr,sqr,lqr,G0,K5e,iqr,dqr,zZ,cqr,mqr,fqr,O0,Z5e,gqr,hqr,QZ,uqr,pqr,_qr,V0,e0e,bqr,vqr,WZ,Fqr,Tqr,Mqr,X0,o0e,Eqr,Cqr,HZ,wqr,Aqr,Lqr,z0,r0e,yqr,xqr,UZ,$qr,kqr,Sqr,Q0,t0e,Rqr,Pqr,JZ,Bqr,Iqr,Nqr,W0,a0e,qqr,jqr,YZ,Dqr,Gqr,Oqr,H0,n0e,Vqr,Xqr,KZ,zqr,Qqr,Wqr,U0,Zze,Vc,J0,s0e,t$,Hqr,l0e,Uqr,eQe,hr,a$,Jqr,Xc,Yqr,ZZ,Kqr,Zqr,eee,ejr,ojr,rjr,n$,tjr,i0e,ajr,njr,sjr,zt,s$,ljr,d0e,ijr,djr,zc,cjr,c0e,mjr,fjr,oee,gjr,hjr,ujr,Y0,pjr,Or,l$,_jr,m0e,bjr,vjr,vn,Fjr,f0e,Tjr,Mjr,g0e,Ejr,Cjr,h0e,wjr,Ajr,Ljr,u0e,K0,p0e,yjr,xjr,ree,$jr,kjr,Sjr,Z0,oQe,Qc,ew,_0e,i$,Rjr,b0e,Pjr,rQe,ur,d$,Bjr,Wc,Ijr,tee,Njr,qjr,aee,jjr,Djr,Gjr,c$,Ojr,v0e,Vjr,Xjr,zjr,Qt,m$,Qjr,F0e,Wjr,Hjr,Hc,Ujr,T0e,Jjr,Yjr,nee,Kjr,Zjr,eDr,ow,oDr,Vr,f$,rDr,M0e,tDr,aDr,Fn,nDr,E0e,sDr,lDr,C0e,iDr,dDr,w0e,cDr,mDr,fDr,A0e,rw,L0e,gDr,hDr,see,uDr,pDr,_Dr,tw,tQe,Uc,aw,y0e,g$,bDr,x0e,vDr,aQe,pr,h$,FDr,Jc,TDr,lee,MDr,EDr,iee,CDr,wDr,ADr,u$,LDr,$0e,yDr,xDr,$Dr,Wt,p$,kDr,k0e,SDr,RDr,Yc,PDr,S0e,BDr,IDr,dee,NDr,qDr,jDr,nw,DDr,Xr,_$,GDr,R0e,ODr,VDr,Tn,XDr,P0e,zDr,QDr,B0e,WDr,HDr,I0e,UDr,JDr,YDr,oe,sw,N0e,KDr,ZDr,cee,eGr,oGr,rGr,lw,q0e,tGr,aGr,mee,nGr,sGr,lGr,iw,j0e,iGr,dGr,fee,cGr,mGr,fGr,dw,D0e,gGr,hGr,gee,uGr,pGr,_Gr,cw,G0e,bGr,vGr,hee,FGr,TGr,MGr,mw,O0e,EGr,CGr,uee,wGr,AGr,LGr,fw,V0e,yGr,xGr,pee,$Gr,kGr,SGr,gw,X0e,RGr,PGr,_ee,BGr,IGr,NGr,hw,z0e,qGr,jGr,bee,DGr,GGr,OGr,uw,Q0e,VGr,XGr,vee,zGr,QGr,WGr,pw,W0e,HGr,UGr,Fee,JGr,YGr,KGr,_w,H0e,ZGr,eOr,Tee,oOr,rOr,tOr,bw,U0e,aOr,nOr,Mee,sOr,lOr,iOr,vw,J0e,dOr,cOr,Eee,mOr,fOr,gOr,Fw,Y0e,hOr,uOr,Cee,pOr,_Or,bOr,Tw,K0e,vOr,FOr,wee,TOr,MOr,EOr,Mw,Z0e,COr,wOr,Aee,AOr,LOr,yOr,Ew,ewe,xOr,$Or,Lee,kOr,SOr,ROr,Cw,owe,POr,BOr,yee,IOr,NOr,qOr,ww,rwe,jOr,DOr,xee,GOr,OOr,VOr,Aw,twe,XOr,zOr,$ee,QOr,WOr,HOr,Lw,awe,UOr,JOr,kee,YOr,KOr,ZOr,yw,nwe,eVr,oVr,See,rVr,tVr,aVr,xw,swe,nVr,sVr,Ree,lVr,iVr,dVr,$w,lwe,cVr,mVr,Pee,fVr,gVr,hVr,kw,iwe,uVr,pVr,Bee,_Vr,bVr,vVr,Sw,dwe,FVr,TVr,Iee,MVr,EVr,CVr,Rw,nQe,Kc,Pw,cwe,b$,wVr,mwe,AVr,sQe,_r,v$,LVr,Zc,yVr,Nee,xVr,$Vr,qee,kVr,SVr,RVr,F$,PVr,fwe,BVr,IVr,NVr,Ht,T$,qVr,gwe,jVr,DVr,em,GVr,hwe,OVr,VVr,jee,XVr,zVr,QVr,Bw,WVr,zr,M$,HVr,uwe,UVr,JVr,Mn,YVr,pwe,KVr,ZVr,_we,eXr,oXr,bwe,rXr,tXr,aXr,xe,Iw,vwe,nXr,sXr,Dee,lXr,iXr,dXr,Nw,Fwe,cXr,mXr,Gee,fXr,gXr,hXr,qw,Twe,uXr,pXr,Oee,_Xr,bXr,vXr,jw,Mwe,FXr,TXr,Vee,MXr,EXr,CXr,Dw,Ewe,wXr,AXr,Xee,LXr,yXr,xXr,Gw,Cwe,$Xr,kXr,zee,SXr,RXr,PXr,Ow,wwe,BXr,IXr,Qee,NXr,qXr,jXr,Vw,Awe,DXr,GXr,Wee,OXr,VXr,XXr,Xw,Lwe,zXr,QXr,Hee,WXr,HXr,UXr,zw,ywe,JXr,YXr,Uee,KXr,ZXr,ezr,Qw,lQe,om,Ww,xwe,E$,ozr,$we,rzr,iQe,br,C$,tzr,rm,azr,Jee,nzr,szr,Yee,lzr,izr,dzr,w$,czr,kwe,mzr,fzr,gzr,Ut,A$,hzr,Swe,uzr,pzr,tm,_zr,Rwe,bzr,vzr,Kee,Fzr,Tzr,Mzr,Hw,Ezr,Qr,L$,Czr,Pwe,wzr,Azr,En,Lzr,Bwe,yzr,xzr,Iwe,$zr,kzr,Nwe,Szr,Rzr,Pzr,Ee,Uw,qwe,Bzr,Izr,Zee,Nzr,qzr,jzr,Jw,jwe,Dzr,Gzr,eoe,Ozr,Vzr,Xzr,Yw,Dwe,zzr,Qzr,ooe,Wzr,Hzr,Uzr,Kw,Gwe,Jzr,Yzr,roe,Kzr,Zzr,eQr,Zw,Owe,oQr,rQr,toe,tQr,aQr,nQr,eA,Vwe,sQr,lQr,aoe,iQr,dQr,cQr,oA,Xwe,mQr,fQr,noe,gQr,hQr,uQr,rA,zwe,pQr,_Qr,soe,bQr,vQr,FQr,tA,Qwe,TQr,MQr,loe,EQr,CQr,wQr,aA,Wwe,AQr,LQr,ioe,yQr,xQr,$Qr,nA,Hwe,kQr,SQr,doe,RQr,PQr,BQr,sA,Uwe,IQr,NQr,coe,qQr,jQr,DQr,lA,Jwe,GQr,OQr,moe,VQr,XQr,zQr,iA,dQe,am,dA,Ywe,y$,QQr,Kwe,WQr,cQe,vr,x$,HQr,nm,UQr,foe,JQr,YQr,goe,KQr,ZQr,eWr,$$,oWr,Zwe,rWr,tWr,aWr,Jt,k$,nWr,eAe,sWr,lWr,sm,iWr,oAe,dWr,cWr,hoe,mWr,fWr,gWr,cA,hWr,Wr,S$,uWr,rAe,pWr,_Wr,Cn,bWr,tAe,vWr,FWr,aAe,TWr,MWr,nAe,EWr,CWr,wWr,$e,mA,sAe,AWr,LWr,uoe,yWr,xWr,$Wr,fA,lAe,kWr,SWr,poe,RWr,PWr,BWr,gA,iAe,IWr,NWr,_oe,qWr,jWr,DWr,hA,dAe,GWr,OWr,boe,VWr,XWr,zWr,uA,cAe,QWr,WWr,voe,HWr,UWr,JWr,pA,mAe,YWr,KWr,Foe,ZWr,eHr,oHr,_A,fAe,rHr,tHr,Toe,aHr,nHr,sHr,bA,gAe,lHr,iHr,Moe,dHr,cHr,mHr,vA,hAe,fHr,gHr,Eoe,hHr,uHr,pHr,FA,uAe,_Hr,bHr,Coe,vHr,FHr,THr,TA,mQe,lm,MA,pAe,R$,MHr,_Ae,EHr,fQe,Fr,P$,CHr,im,wHr,woe,AHr,LHr,Aoe,yHr,xHr,$Hr,B$,kHr,bAe,SHr,RHr,PHr,Yt,I$,BHr,vAe,IHr,NHr,dm,qHr,FAe,jHr,DHr,Loe,GHr,OHr,VHr,EA,XHr,Hr,N$,zHr,TAe,QHr,WHr,wn,HHr,MAe,UHr,JHr,EAe,YHr,KHr,CAe,ZHr,eUr,oUr,ke,CA,wAe,rUr,tUr,yoe,aUr,nUr,sUr,wA,AAe,lUr,iUr,xoe,dUr,cUr,mUr,AA,LAe,fUr,gUr,$oe,hUr,uUr,pUr,LA,yAe,_Ur,bUr,koe,vUr,FUr,TUr,yA,xAe,MUr,EUr,Soe,CUr,wUr,AUr,xA,$Ae,LUr,yUr,Roe,xUr,$Ur,kUr,$A,kAe,SUr,RUr,Poe,PUr,BUr,IUr,kA,SAe,NUr,qUr,Boe,jUr,DUr,GUr,SA,RAe,OUr,VUr,Ioe,XUr,zUr,QUr,RA,PAe,WUr,HUr,Noe,UUr,JUr,YUr,PA,gQe,cm,BA,BAe,q$,KUr,IAe,ZUr,hQe,Tr,j$,eJr,mm,oJr,qoe,rJr,tJr,joe,aJr,nJr,sJr,D$,lJr,NAe,iJr,dJr,cJr,Kt,G$,mJr,qAe,fJr,gJr,fm,hJr,jAe,uJr,pJr,Doe,_Jr,bJr,vJr,IA,FJr,Ur,O$,TJr,DAe,MJr,EJr,An,CJr,GAe,wJr,AJr,OAe,LJr,yJr,VAe,xJr,$Jr,kJr,Se,NA,XAe,SJr,RJr,Goe,PJr,BJr,IJr,qA,zAe,NJr,qJr,Ooe,jJr,DJr,GJr,jA,QAe,OJr,VJr,Voe,XJr,zJr,QJr,DA,WAe,WJr,HJr,Xoe,UJr,JJr,YJr,GA,HAe,KJr,ZJr,zoe,eYr,oYr,rYr,OA,UAe,tYr,aYr,Qoe,nYr,sYr,lYr,VA,JAe,iYr,dYr,Woe,cYr,mYr,fYr,XA,YAe,gYr,hYr,Hoe,uYr,pYr,_Yr,zA,KAe,bYr,vYr,Uoe,FYr,TYr,MYr,QA,ZAe,EYr,CYr,Joe,wYr,AYr,LYr,WA,uQe,gm,HA,e6e,V$,yYr,o6e,xYr,pQe,Mr,X$,$Yr,hm,kYr,Yoe,SYr,RYr,Koe,PYr,BYr,IYr,z$,NYr,r6e,qYr,jYr,DYr,Zt,Q$,GYr,t6e,OYr,VYr,um,XYr,a6e,zYr,QYr,Zoe,WYr,HYr,UYr,UA,JYr,Jr,W$,YYr,n6e,KYr,ZYr,Ln,eKr,s6e,oKr,rKr,l6e,tKr,aKr,i6e,nKr,sKr,lKr,Re,JA,d6e,iKr,dKr,ere,cKr,mKr,fKr,YA,c6e,gKr,hKr,ore,uKr,pKr,_Kr,KA,m6e,bKr,vKr,rre,FKr,TKr,MKr,ZA,f6e,EKr,CKr,tre,wKr,AKr,LKr,e6,g6e,yKr,xKr,are,$Kr,kKr,SKr,o6,h6e,RKr,PKr,nre,BKr,IKr,NKr,r6,u6e,qKr,jKr,sre,DKr,GKr,OKr,t6,p6e,VKr,XKr,lre,zKr,QKr,WKr,a6,_6e,HKr,UKr,ire,JKr,YKr,KKr,n6,b6e,ZKr,eZr,dre,oZr,rZr,tZr,s6,_Qe,pm,l6,v6e,H$,aZr,F6e,nZr,bQe,Er,U$,sZr,_m,lZr,cre,iZr,dZr,mre,cZr,mZr,fZr,J$,gZr,T6e,hZr,uZr,pZr,ea,Y$,_Zr,M6e,bZr,vZr,bm,FZr,E6e,TZr,MZr,fre,EZr,CZr,wZr,i6,AZr,Yr,K$,LZr,C6e,yZr,xZr,yn,$Zr,w6e,kZr,SZr,A6e,RZr,PZr,L6e,BZr,IZr,NZr,Xe,d6,y6e,qZr,jZr,gre,DZr,GZr,OZr,c6,x6e,VZr,XZr,hre,zZr,QZr,WZr,m6,$6e,HZr,UZr,ure,JZr,YZr,KZr,f6,k6e,ZZr,eet,pre,oet,ret,tet,g6,S6e,aet,net,_re,set,iet,det,h6,R6e,cet,met,bre,fet,get,het,u6,P6e,uet,pet,vre,_et,bet,vet,p6,B6e,Fet,Tet,Fre,Met,Eet,Cet,_6,vQe,vm,b6,I6e,Z$,wet,N6e,Aet,FQe,Cr,ek,Let,Fm,yet,Tre,xet,$et,Mre,ket,Set,Ret,ok,Pet,q6e,Bet,Iet,Net,oa,rk,qet,j6e,jet,Det,Tm,Get,D6e,Oet,Vet,Ere,Xet,zet,Qet,v6,Wet,Kr,tk,Het,G6e,Uet,Jet,xn,Yet,O6e,Ket,Zet,V6e,eot,oot,X6e,rot,tot,aot,ze,F6,z6e,not,sot,Cre,lot,iot,dot,T6,Q6e,cot,mot,wre,fot,got,hot,M6,W6e,uot,pot,Are,_ot,bot,vot,E6,H6e,Fot,Tot,Lre,Mot,Eot,Cot,C6,U6e,wot,Aot,yre,Lot,yot,xot,w6,J6e,$ot,kot,xre,Sot,Rot,Pot,A6,Y6e,Bot,Iot,$re,Not,qot,jot,L6,K6e,Dot,Got,kre,Oot,Vot,Xot,y6,TQe,Mm,x6,Z6e,ak,zot,e7e,Qot,MQe,wr,nk,Wot,Em,Hot,Sre,Uot,Jot,Rre,Yot,Kot,Zot,sk,ert,o7e,ort,rrt,trt,ra,lk,art,r7e,nrt,srt,Cm,lrt,t7e,irt,drt,Pre,crt,mrt,frt,$6,grt,Zr,ik,hrt,a7e,urt,prt,$n,_rt,n7e,brt,vrt,s7e,Frt,Trt,l7e,Mrt,Ert,Crt,i7e,k6,d7e,wrt,Art,Bre,Lrt,yrt,xrt,S6,EQe,wm,R6,c7e,dk,$rt,m7e,krt,CQe,Ar,ck,Srt,Am,Rrt,Ire,Prt,Brt,Nre,Irt,Nrt,qrt,mk,jrt,f7e,Drt,Grt,Ort,ta,fk,Vrt,g7e,Xrt,zrt,Lm,Qrt,h7e,Wrt,Hrt,qre,Urt,Jrt,Yrt,P6,Krt,et,gk,Zrt,u7e,ett,ott,kn,rtt,p7e,ttt,att,_7e,ntt,stt,b7e,ltt,itt,dtt,hk,B6,v7e,ctt,mtt,jre,ftt,gtt,htt,I6,F7e,utt,ptt,Dre,_tt,btt,vtt,N6,wQe,ym,q6,T7e,uk,Ftt,M7e,Ttt,AQe,Lr,pk,Mtt,xm,Ett,Gre,Ctt,wtt,Ore,Att,Ltt,ytt,_k,xtt,E7e,$tt,ktt,Stt,aa,bk,Rtt,C7e,Ptt,Btt,$m,Itt,w7e,Ntt,qtt,Vre,jtt,Dtt,Gtt,j6,Ott,ot,vk,Vtt,A7e,Xtt,ztt,Sn,Qtt,L7e,Wtt,Htt,y7e,Utt,Jtt,x7e,Ytt,Ktt,Ztt,$7e,D6,k7e,eat,oat,Xre,rat,tat,aat,G6,LQe;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),cy=new re({}),my=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),jm=new nat({props:{warning:!0,$$slots:{default:[YWt]},$$scope:{ctx:$}}}),fy=new re({}),gy=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L611"}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L634"}}),Kg=new N({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[KWt]},$$scope:{ctx:$}}}),_y=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L757"}}),by=new re({}),vy=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L410"}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L424"}}),Ph=new N({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[ZWt]},$$scope:{ctx:$}}}),Ey=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L623"}}),Cy=new re({}),wy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L195"}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L209"}}),_u=new nat({props:{$$slots:{default:[eHt]},$$scope:{ctx:$}}}),bu=new N({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),xy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L336"}}),$y=new re({}),ky=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L89"}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L103"}}),ju=new nat({props:{$$slots:{default:[rHt]},$$scope:{ctx:$}}}),Du=new N({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),By=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L256"}}),Iy=new re({}),Ny=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L786"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Vu=new N({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H_=new N({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),Gy=new re({}),Oy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L793"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J_=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),V2=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),Qy=new re({}),Wy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L808"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),z2=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[iHt]},$$scope:{ctx:$}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Rb=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[dHt]},$$scope:{ctx:$}}}),Yy=new re({}),Ky=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L815"}}),e8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Bb=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[cHt]},$$scope:{ctx:$}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Tv=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[mHt]},$$scope:{ctx:$}}}),r8=new re({}),t8=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L822"}}),n8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Ev=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[fHt]},$$scope:{ctx:$}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Xv=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[gHt]},$$scope:{ctx:$}}}),l8=new re({}),i8=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L831"}}),c8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Qv=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[hHt]},$$scope:{ctx:$}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),z1=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[uHt]},$$scope:{ctx:$}}}),f8=new re({}),g8=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L876"}}),u8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),W1=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[pHt]},$$scope:{ctx:$}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),wF=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[_Ht]},$$scope:{ctx:$}}}),_8=new re({}),b8=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L883"}}),F8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),LF=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[bHt]},$$scope:{ctx:$}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),BF=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[vHt]},$$scope:{ctx:$}}}),M8=new re({}),E8=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L869"}}),w8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),NF=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[FHt]},$$scope:{ctx:$}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),TT=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[THt]},$$scope:{ctx:$}}}),L8=new re({}),y8=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L840"}}),$8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ET=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[MHt]},$$scope:{ctx:$}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gM=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[EHt]},$$scope:{ctx:$}}}),S8=new re({}),R8=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L847"}}),B8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uM=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[CHt]},$$scope:{ctx:$}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bM=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[wHt]},$$scope:{ctx:$}}}),N8=new re({}),q8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L892"}}),D8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),FM=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[AHt]},$$scope:{ctx:$}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),BM=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[LHt]},$$scope:{ctx:$}}}),O8=new re({}),V8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L931"}}),z8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),NM=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[yHt]},$$scope:{ctx:$}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),DM=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[xHt]},$$scope:{ctx:$}}}),W8=new re({}),H8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L858"}}),J8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),OM=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[$Ht]},$$scope:{ctx:$}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),zM=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[kHt]},$$scope:{ctx:$}}}),K8=new re({}),Z8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L938"}}),o9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),WM=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[SHt]},$$scope:{ctx:$}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a4=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[RHt]},$$scope:{ctx:$}}}),t9=new re({}),a9=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L961"}}),s9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s4=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[PHt]},$$scope:{ctx:$}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),g4=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[BHt]},$$scope:{ctx:$}}}),i9=new re({}),d9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L945"}}),m9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),u4=new N({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[IHt]},$$scope:{ctx:$}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),L4=new N({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[NHt]},$$scope:{ctx:$}}}),g9=new re({}),h9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L952"}}),p9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),x4=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[qHt]},$$scope:{ctx:$}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),R4=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[jHt]},$$scope:{ctx:$}}}),v9=new re({}),F9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L970"}}),M9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),B4=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[DHt]},$$scope:{ctx:$}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),O4=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[GHt]},$$scope:{ctx:$}}}),C9=new re({}),w9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L977"}}),L9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),X4=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[OHt]},$$scope:{ctx:$}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U4=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[VHt]},$$scope:{ctx:$}}}),x9=new re({}),$9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L924"}}),S9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y4=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[XHt]},$$scope:{ctx:$}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),oE=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[zHt]},$$scope:{ctx:$}}}),B9=new re({}),I9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L899"}}),q9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),tE=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[QHt]},$$scope:{ctx:$}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),sE=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[WHt]},$$scope:{ctx:$}}}),D9=new re({}),G9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L906"}}),V9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),iE=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[HHt]},$$scope:{ctx:$}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),uE=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[UHt]},$$scope:{ctx:$}}}),z9=new re({}),Q9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L915"}}),H9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_E=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[JHt]},$$scope:{ctx:$}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),FE=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[YHt]},$$scope:{ctx:$}}}),J9=new re({}),Y9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ME=new N({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[KHt]},$$scope:{ctx:$}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vC=new N({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[ZHt]},$$scope:{ctx:$}}}),ox=new re({}),rx=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),TC=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[eUt]},$$scope:{ctx:$}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),zC=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[oUt]},$$scope:{ctx:$}}}),sx=new re({}),lx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),WC=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[rUt]},$$scope:{ctx:$}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l3=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[tUt]},$$scope:{ctx:$}}}),mx=new re({}),fx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d3=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[aUt]},$$scope:{ctx:$}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_3=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[nUt]},$$scope:{ctx:$}}}),px=new re({}),_x=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),v3=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[sUt]},$$scope:{ctx:$}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),D3=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[lUt]},$$scope:{ctx:$}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L486"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),O3=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[iUt]},$$scope:{ctx:$}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z3=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[dUt]},$$scope:{ctx:$}}}),Ax=new re({}),Lx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L495"}}),xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o5=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[cUt]},$$scope:{ctx:$}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),y5=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[mUt]},$$scope:{ctx:$}}}),kx=new re({}),Sx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L531"}}),Px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$5=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[fUt]},$$scope:{ctx:$}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H5=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[gUt]},$$scope:{ctx:$}}}),Ix=new re({}),Nx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L538"}}),jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J5=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[hUt]},$$scope:{ctx:$}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z5=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[uUt]},$$scope:{ctx:$}}}),Ox=new re({}),Vx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L511"}}),zx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o0=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[pUt]},$$scope:{ctx:$}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),t0=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[_Ut]},$$scope:{ctx:$}}}),Wx=new re({}),Hx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L522"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),n0=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[bUt]},$$scope:{ctx:$}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),A0=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[vUt]},$$scope:{ctx:$}}}),Kx=new re({}),Zx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),o$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),y0=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[FUt]},$$scope:{ctx:$}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U0=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[TUt]},$$scope:{ctx:$}}}),t$=new re({}),a$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),s$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y0=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[MUt]},$$scope:{ctx:$}}}),l$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z0=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[EUt]},$$scope:{ctx:$}}}),i$=new re({}),d$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L547"}}),m$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ow=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[CUt]},$$scope:{ctx:$}}}),f$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),tw=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[wUt]},$$scope:{ctx:$}}}),g$=new re({}),h$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),p$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),nw=new N({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[AUt]},$$scope:{ctx:$}}}),_$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Rw=new N({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[LUt]},$$scope:{ctx:$}}}),b$=new re({}),v$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),T$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Bw=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[yUt]},$$scope:{ctx:$}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Qw=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[xUt]},$$scope:{ctx:$}}}),E$=new re({}),C$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),A$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Hw=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[$Ut]},$$scope:{ctx:$}}}),L$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iA=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[kUt]},$$scope:{ctx:$}}}),y$=new re({}),x$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),k$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cA=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[SUt]},$$scope:{ctx:$}}}),S$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),TA=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[RUt]},$$scope:{ctx:$}}}),R$=new re({}),P$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),I$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),EA=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[PUt]},$$scope:{ctx:$}}}),N$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),PA=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[BUt]},$$scope:{ctx:$}}}),q$=new re({}),j$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),G$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),IA=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[IUt]},$$scope:{ctx:$}}}),O$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),WA=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[NUt]},$$scope:{ctx:$}}}),V$=new re({}),X$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),Q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),UA=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[qUt]},$$scope:{ctx:$}}}),W$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),s6=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[jUt]},$$scope:{ctx:$}}}),H$=new re({}),U$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),Y$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),i6=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[DUt]},$$scope:{ctx:$}}}),K$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_6=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[GUt]},$$scope:{ctx:$}}}),Z$=new re({}),ek=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),rk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),v6=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[OUt]},$$scope:{ctx:$}}}),tk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),y6=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[VUt]},$$scope:{ctx:$}}}),ak=new re({}),nk=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),lk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$6=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[XUt]},$$scope:{ctx:$}}}),ik=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),S6=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[zUt]},$$scope:{ctx:$}}}),dk=new re({}),ck=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),fk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),P6=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[QUt]},$$scope:{ctx:$}}}),gk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),N6=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[WUt]},$$scope:{ctx:$}}}),uk=new re({}),pk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),bk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),j6=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[HUt]},$$scope:{ctx:$}}}),vk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G6=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[UUt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),wo=a("span"),yi=o("Auto Classes"),Pm=l(),lt=a("p"),xi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),$i=a("code"),sy=o("from_pretrained()"),Bm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),ki=o("Instantiating one of "),Pn=a("a"),ly=o("AutoConfig"),Bn=o(", "),In=a("a"),iy=o("AutoModel"),Si=o(`, and
`),Nn=a("a"),dy=o("AutoTokenizer"),Ri=o(" will directly create a class of the relevant architecture. For instance"),Im=l(),F(Sa.$$.fragment),He=l(),Ae=a("p"),OS=o("will create a model that is an instance of "),Pi=a("a"),VS=o("BertModel"),XS=o("."),Ao=l(),Ra=a("p"),zS=o("There is one class of "),Nm=a("code"),QS=o("AutoModel"),NHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),MXe=l(),Bi=a("h2"),qm=a("a"),jae=a("span"),F(cy.$$.fragment),qHe=l(),Dae=a("span"),jHe=o("Extending the Auto Classes"),EXe=l(),qn=a("p"),DHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Gae=a("code"),GHe=o("NewModel"),OHe=o(", make sure you have a "),Oae=a("code"),VHe=o("NewModelConfig"),XHe=o(` then you can add those to the auto
classes like this:`),CXe=l(),F(my.$$.fragment),wXe=l(),WS=a("p"),zHe=o("You will then be able to use the auto classes like you would usually do!"),AXe=l(),F(jm.$$.fragment),LXe=l(),Ii=a("h2"),Dm=a("a"),Vae=a("span"),F(fy.$$.fragment),QHe=l(),Xae=a("span"),WHe=o("AutoConfig"),yXe=l(),Lo=a("div"),F(gy.$$.fragment),HHe=l(),hy=a("p"),UHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),HS=a("a"),JHe=o("from_pretrained()"),YHe=o(" class method."),KHe=l(),uy=a("p"),ZHe=o("This class cannot be instantiated directly using "),zae=a("code"),eUe=o("__init__()"),oUe=o(" (throws an error)."),rUe=l(),yr=a("div"),F(py.$$.fragment),tUe=l(),Qae=a("p"),aUe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),nUe=l(),Ni=a("p"),sUe=o("The configuration class to instantiate is selected based on the "),Wae=a("code"),lUe=o("model_type"),iUe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Hae=a("code"),dUe=o("pretrained_model_name_or_path"),cUe=o(":"),mUe=l(),A=a("ul"),Gm=a("li"),Uae=a("strong"),fUe=o("albert"),gUe=o(" \u2014 "),US=a("a"),hUe=o("AlbertConfig"),uUe=o(" (ALBERT model)"),pUe=l(),Om=a("li"),Jae=a("strong"),_Ue=o("bart"),bUe=o(" \u2014 "),JS=a("a"),vUe=o("BartConfig"),FUe=o(" (BART model)"),TUe=l(),Vm=a("li"),Yae=a("strong"),MUe=o("beit"),EUe=o(" \u2014 "),YS=a("a"),CUe=o("BeitConfig"),wUe=o(" (BEiT model)"),AUe=l(),Xm=a("li"),Kae=a("strong"),LUe=o("bert"),yUe=o(" \u2014 "),KS=a("a"),xUe=o("BertConfig"),$Ue=o(" (BERT model)"),kUe=l(),zm=a("li"),Zae=a("strong"),SUe=o("bert-generation"),RUe=o(" \u2014 "),ZS=a("a"),PUe=o("BertGenerationConfig"),BUe=o(" (Bert Generation model)"),IUe=l(),Qm=a("li"),ene=a("strong"),NUe=o("big_bird"),qUe=o(" \u2014 "),eR=a("a"),jUe=o("BigBirdConfig"),DUe=o(" (BigBird model)"),GUe=l(),Wm=a("li"),one=a("strong"),OUe=o("bigbird_pegasus"),VUe=o(" \u2014 "),oR=a("a"),XUe=o("BigBirdPegasusConfig"),zUe=o(" (BigBird-Pegasus model)"),QUe=l(),Hm=a("li"),rne=a("strong"),WUe=o("blenderbot"),HUe=o(" \u2014 "),rR=a("a"),UUe=o("BlenderbotConfig"),JUe=o(" (Blenderbot model)"),YUe=l(),Um=a("li"),tne=a("strong"),KUe=o("blenderbot-small"),ZUe=o(" \u2014 "),tR=a("a"),eJe=o("BlenderbotSmallConfig"),oJe=o(" (BlenderbotSmall model)"),rJe=l(),Jm=a("li"),ane=a("strong"),tJe=o("bloom"),aJe=o(" \u2014 "),aR=a("a"),nJe=o("BloomConfig"),sJe=o(" (BLOOM model)"),lJe=l(),Ym=a("li"),nne=a("strong"),iJe=o("camembert"),dJe=o(" \u2014 "),nR=a("a"),cJe=o("CamembertConfig"),mJe=o(" (CamemBERT model)"),fJe=l(),Km=a("li"),sne=a("strong"),gJe=o("canine"),hJe=o(" \u2014 "),sR=a("a"),uJe=o("CanineConfig"),pJe=o(" (CANINE model)"),_Je=l(),Zm=a("li"),lne=a("strong"),bJe=o("clip"),vJe=o(" \u2014 "),lR=a("a"),FJe=o("CLIPConfig"),TJe=o(" (CLIP model)"),MJe=l(),ef=a("li"),ine=a("strong"),EJe=o("codegen"),CJe=o(" \u2014 "),iR=a("a"),wJe=o("CodeGenConfig"),AJe=o(" (CodeGen model)"),LJe=l(),of=a("li"),dne=a("strong"),yJe=o("convbert"),xJe=o(" \u2014 "),dR=a("a"),$Je=o("ConvBertConfig"),kJe=o(" (ConvBERT model)"),SJe=l(),rf=a("li"),cne=a("strong"),RJe=o("convnext"),PJe=o(" \u2014 "),cR=a("a"),BJe=o("ConvNextConfig"),IJe=o(" (ConvNeXT model)"),NJe=l(),tf=a("li"),mne=a("strong"),qJe=o("ctrl"),jJe=o(" \u2014 "),mR=a("a"),DJe=o("CTRLConfig"),GJe=o(" (CTRL model)"),OJe=l(),af=a("li"),fne=a("strong"),VJe=o("cvt"),XJe=o(" \u2014 "),fR=a("a"),zJe=o("CvtConfig"),QJe=o(" (CvT model)"),WJe=l(),nf=a("li"),gne=a("strong"),HJe=o("data2vec-audio"),UJe=o(" \u2014 "),gR=a("a"),JJe=o("Data2VecAudioConfig"),YJe=o(" (Data2VecAudio model)"),KJe=l(),sf=a("li"),hne=a("strong"),ZJe=o("data2vec-text"),eYe=o(" \u2014 "),hR=a("a"),oYe=o("Data2VecTextConfig"),rYe=o(" (Data2VecText model)"),tYe=l(),lf=a("li"),une=a("strong"),aYe=o("data2vec-vision"),nYe=o(" \u2014 "),uR=a("a"),sYe=o("Data2VecVisionConfig"),lYe=o(" (Data2VecVision model)"),iYe=l(),df=a("li"),pne=a("strong"),dYe=o("deberta"),cYe=o(" \u2014 "),pR=a("a"),mYe=o("DebertaConfig"),fYe=o(" (DeBERTa model)"),gYe=l(),cf=a("li"),_ne=a("strong"),hYe=o("deberta-v2"),uYe=o(" \u2014 "),_R=a("a"),pYe=o("DebertaV2Config"),_Ye=o(" (DeBERTa-v2 model)"),bYe=l(),mf=a("li"),bne=a("strong"),vYe=o("decision_transformer"),FYe=o(" \u2014 "),bR=a("a"),TYe=o("DecisionTransformerConfig"),MYe=o(" (Decision Transformer model)"),EYe=l(),ff=a("li"),vne=a("strong"),CYe=o("deit"),wYe=o(" \u2014 "),vR=a("a"),AYe=o("DeiTConfig"),LYe=o(" (DeiT model)"),yYe=l(),gf=a("li"),Fne=a("strong"),xYe=o("detr"),$Ye=o(" \u2014 "),FR=a("a"),kYe=o("DetrConfig"),SYe=o(" (DETR model)"),RYe=l(),hf=a("li"),Tne=a("strong"),PYe=o("distilbert"),BYe=o(" \u2014 "),TR=a("a"),IYe=o("DistilBertConfig"),NYe=o(" (DistilBERT model)"),qYe=l(),uf=a("li"),Mne=a("strong"),jYe=o("dpr"),DYe=o(" \u2014 "),MR=a("a"),GYe=o("DPRConfig"),OYe=o(" (DPR model)"),VYe=l(),pf=a("li"),Ene=a("strong"),XYe=o("dpt"),zYe=o(" \u2014 "),ER=a("a"),QYe=o("DPTConfig"),WYe=o(" (DPT model)"),HYe=l(),_f=a("li"),Cne=a("strong"),UYe=o("electra"),JYe=o(" \u2014 "),CR=a("a"),YYe=o("ElectraConfig"),KYe=o(" (ELECTRA model)"),ZYe=l(),bf=a("li"),wne=a("strong"),eKe=o("encoder-decoder"),oKe=o(" \u2014 "),wR=a("a"),rKe=o("EncoderDecoderConfig"),tKe=o(" (Encoder decoder model)"),aKe=l(),vf=a("li"),Ane=a("strong"),nKe=o("flaubert"),sKe=o(" \u2014 "),AR=a("a"),lKe=o("FlaubertConfig"),iKe=o(" (FlauBERT model)"),dKe=l(),Ff=a("li"),Lne=a("strong"),cKe=o("flava"),mKe=o(" \u2014 "),LR=a("a"),fKe=o("FlavaConfig"),gKe=o(" (FLAVA model)"),hKe=l(),Tf=a("li"),yne=a("strong"),uKe=o("fnet"),pKe=o(" \u2014 "),yR=a("a"),_Ke=o("FNetConfig"),bKe=o(" (FNet model)"),vKe=l(),Mf=a("li"),xne=a("strong"),FKe=o("fsmt"),TKe=o(" \u2014 "),xR=a("a"),MKe=o("FSMTConfig"),EKe=o(" (FairSeq Machine-Translation model)"),CKe=l(),Ef=a("li"),$ne=a("strong"),wKe=o("funnel"),AKe=o(" \u2014 "),$R=a("a"),LKe=o("FunnelConfig"),yKe=o(" (Funnel Transformer model)"),xKe=l(),Cf=a("li"),kne=a("strong"),$Ke=o("glpn"),kKe=o(" \u2014 "),kR=a("a"),SKe=o("GLPNConfig"),RKe=o(" (GLPN model)"),PKe=l(),wf=a("li"),Sne=a("strong"),BKe=o("gpt2"),IKe=o(" \u2014 "),SR=a("a"),NKe=o("GPT2Config"),qKe=o(" (OpenAI GPT-2 model)"),jKe=l(),Af=a("li"),Rne=a("strong"),DKe=o("gpt_neo"),GKe=o(" \u2014 "),RR=a("a"),OKe=o("GPTNeoConfig"),VKe=o(" (GPT Neo model)"),XKe=l(),Lf=a("li"),Pne=a("strong"),zKe=o("gpt_neox"),QKe=o(" \u2014 "),PR=a("a"),WKe=o("GPTNeoXConfig"),HKe=o(" (GPT NeoX model)"),UKe=l(),yf=a("li"),Bne=a("strong"),JKe=o("gptj"),YKe=o(" \u2014 "),BR=a("a"),KKe=o("GPTJConfig"),ZKe=o(" (GPT-J model)"),eZe=l(),xf=a("li"),Ine=a("strong"),oZe=o("groupvit"),rZe=o(" \u2014 "),IR=a("a"),tZe=o("GroupViTConfig"),aZe=o(" (GroupViT model)"),nZe=l(),$f=a("li"),Nne=a("strong"),sZe=o("hubert"),lZe=o(" \u2014 "),NR=a("a"),iZe=o("HubertConfig"),dZe=o(" (Hubert model)"),cZe=l(),kf=a("li"),qne=a("strong"),mZe=o("ibert"),fZe=o(" \u2014 "),qR=a("a"),gZe=o("IBertConfig"),hZe=o(" (I-BERT model)"),uZe=l(),Sf=a("li"),jne=a("strong"),pZe=o("imagegpt"),_Ze=o(" \u2014 "),jR=a("a"),bZe=o("ImageGPTConfig"),vZe=o(" (ImageGPT model)"),FZe=l(),Rf=a("li"),Dne=a("strong"),TZe=o("layoutlm"),MZe=o(" \u2014 "),DR=a("a"),EZe=o("LayoutLMConfig"),CZe=o(" (LayoutLM model)"),wZe=l(),Pf=a("li"),Gne=a("strong"),AZe=o("layoutlmv2"),LZe=o(" \u2014 "),GR=a("a"),yZe=o("LayoutLMv2Config"),xZe=o(" (LayoutLMv2 model)"),$Ze=l(),Bf=a("li"),One=a("strong"),kZe=o("layoutlmv3"),SZe=o(" \u2014 "),OR=a("a"),RZe=o("LayoutLMv3Config"),PZe=o(" (LayoutLMv3 model)"),BZe=l(),If=a("li"),Vne=a("strong"),IZe=o("led"),NZe=o(" \u2014 "),VR=a("a"),qZe=o("LEDConfig"),jZe=o(" (LED model)"),DZe=l(),Nf=a("li"),Xne=a("strong"),GZe=o("levit"),OZe=o(" \u2014 "),XR=a("a"),VZe=o("LevitConfig"),XZe=o(" (LeViT model)"),zZe=l(),qf=a("li"),zne=a("strong"),QZe=o("longformer"),WZe=o(" \u2014 "),zR=a("a"),HZe=o("LongformerConfig"),UZe=o(" (Longformer model)"),JZe=l(),jf=a("li"),Qne=a("strong"),YZe=o("longt5"),KZe=o(" \u2014 "),QR=a("a"),ZZe=o("LongT5Config"),eeo=o(" (LongT5 model)"),oeo=l(),Df=a("li"),Wne=a("strong"),reo=o("luke"),teo=o(" \u2014 "),WR=a("a"),aeo=o("LukeConfig"),neo=o(" (LUKE model)"),seo=l(),Gf=a("li"),Hne=a("strong"),leo=o("lxmert"),ieo=o(" \u2014 "),HR=a("a"),deo=o("LxmertConfig"),ceo=o(" (LXMERT model)"),meo=l(),Of=a("li"),Une=a("strong"),feo=o("m2m_100"),geo=o(" \u2014 "),UR=a("a"),heo=o("M2M100Config"),ueo=o(" (M2M100 model)"),peo=l(),Vf=a("li"),Jne=a("strong"),_eo=o("marian"),beo=o(" \u2014 "),JR=a("a"),veo=o("MarianConfig"),Feo=o(" (Marian model)"),Teo=l(),Xf=a("li"),Yne=a("strong"),Meo=o("maskformer"),Eeo=o(" \u2014 "),YR=a("a"),Ceo=o("MaskFormerConfig"),weo=o(" (MaskFormer model)"),Aeo=l(),zf=a("li"),Kne=a("strong"),Leo=o("mbart"),yeo=o(" \u2014 "),KR=a("a"),xeo=o("MBartConfig"),$eo=o(" (mBART model)"),keo=l(),Qf=a("li"),Zne=a("strong"),Seo=o("mctct"),Reo=o(" \u2014 "),ZR=a("a"),Peo=o("MCTCTConfig"),Beo=o(" (M-CTC-T model)"),Ieo=l(),Wf=a("li"),ese=a("strong"),Neo=o("megatron-bert"),qeo=o(" \u2014 "),eP=a("a"),jeo=o("MegatronBertConfig"),Deo=o(" (Megatron-BERT model)"),Geo=l(),Hf=a("li"),ose=a("strong"),Oeo=o("mobilebert"),Veo=o(" \u2014 "),oP=a("a"),Xeo=o("MobileBertConfig"),zeo=o(" (MobileBERT model)"),Qeo=l(),Uf=a("li"),rse=a("strong"),Weo=o("mobilevit"),Heo=o(" \u2014 "),rP=a("a"),Ueo=o("MobileViTConfig"),Jeo=o(" (MobileViT model)"),Yeo=l(),Jf=a("li"),tse=a("strong"),Keo=o("mpnet"),Zeo=o(" \u2014 "),tP=a("a"),eoo=o("MPNetConfig"),ooo=o(" (MPNet model)"),roo=l(),Yf=a("li"),ase=a("strong"),too=o("mt5"),aoo=o(" \u2014 "),aP=a("a"),noo=o("MT5Config"),soo=o(" (MT5 model)"),loo=l(),Kf=a("li"),nse=a("strong"),ioo=o("mvp"),doo=o(" \u2014 "),nP=a("a"),coo=o("MvpConfig"),moo=o(" (MVP model)"),foo=l(),Zf=a("li"),sse=a("strong"),goo=o("nezha"),hoo=o(" \u2014 "),sP=a("a"),uoo=o("NezhaConfig"),poo=o(" (Nezha model)"),_oo=l(),eg=a("li"),lse=a("strong"),boo=o("nystromformer"),voo=o(" \u2014 "),lP=a("a"),Foo=o("NystromformerConfig"),Too=o(" (Nystr\xF6mformer model)"),Moo=l(),og=a("li"),ise=a("strong"),Eoo=o("openai-gpt"),Coo=o(" \u2014 "),iP=a("a"),woo=o("OpenAIGPTConfig"),Aoo=o(" (OpenAI GPT model)"),Loo=l(),rg=a("li"),dse=a("strong"),yoo=o("opt"),xoo=o(" \u2014 "),dP=a("a"),$oo=o("OPTConfig"),koo=o(" (OPT model)"),Soo=l(),tg=a("li"),cse=a("strong"),Roo=o("pegasus"),Poo=o(" \u2014 "),cP=a("a"),Boo=o("PegasusConfig"),Ioo=o(" (Pegasus model)"),Noo=l(),ag=a("li"),mse=a("strong"),qoo=o("perceiver"),joo=o(" \u2014 "),mP=a("a"),Doo=o("PerceiverConfig"),Goo=o(" (Perceiver model)"),Ooo=l(),ng=a("li"),fse=a("strong"),Voo=o("plbart"),Xoo=o(" \u2014 "),fP=a("a"),zoo=o("PLBartConfig"),Qoo=o(" (PLBart model)"),Woo=l(),sg=a("li"),gse=a("strong"),Hoo=o("poolformer"),Uoo=o(" \u2014 "),gP=a("a"),Joo=o("PoolFormerConfig"),Yoo=o(" (PoolFormer model)"),Koo=l(),lg=a("li"),hse=a("strong"),Zoo=o("prophetnet"),ero=o(" \u2014 "),hP=a("a"),oro=o("ProphetNetConfig"),rro=o(" (ProphetNet model)"),tro=l(),ig=a("li"),use=a("strong"),aro=o("qdqbert"),nro=o(" \u2014 "),uP=a("a"),sro=o("QDQBertConfig"),lro=o(" (QDQBert model)"),iro=l(),dg=a("li"),pse=a("strong"),dro=o("rag"),cro=o(" \u2014 "),pP=a("a"),mro=o("RagConfig"),fro=o(" (RAG model)"),gro=l(),cg=a("li"),_se=a("strong"),hro=o("realm"),uro=o(" \u2014 "),_P=a("a"),pro=o("RealmConfig"),_ro=o(" (REALM model)"),bro=l(),mg=a("li"),bse=a("strong"),vro=o("reformer"),Fro=o(" \u2014 "),bP=a("a"),Tro=o("ReformerConfig"),Mro=o(" (Reformer model)"),Ero=l(),fg=a("li"),vse=a("strong"),Cro=o("regnet"),wro=o(" \u2014 "),vP=a("a"),Aro=o("RegNetConfig"),Lro=o(" (RegNet model)"),yro=l(),gg=a("li"),Fse=a("strong"),xro=o("rembert"),$ro=o(" \u2014 "),FP=a("a"),kro=o("RemBertConfig"),Sro=o(" (RemBERT model)"),Rro=l(),hg=a("li"),Tse=a("strong"),Pro=o("resnet"),Bro=o(" \u2014 "),TP=a("a"),Iro=o("ResNetConfig"),Nro=o(" (ResNet model)"),qro=l(),ug=a("li"),Mse=a("strong"),jro=o("retribert"),Dro=o(" \u2014 "),MP=a("a"),Gro=o("RetriBertConfig"),Oro=o(" (RetriBERT model)"),Vro=l(),pg=a("li"),Ese=a("strong"),Xro=o("roberta"),zro=o(" \u2014 "),EP=a("a"),Qro=o("RobertaConfig"),Wro=o(" (RoBERTa model)"),Hro=l(),_g=a("li"),Cse=a("strong"),Uro=o("roformer"),Jro=o(" \u2014 "),CP=a("a"),Yro=o("RoFormerConfig"),Kro=o(" (RoFormer model)"),Zro=l(),bg=a("li"),wse=a("strong"),eto=o("segformer"),oto=o(" \u2014 "),wP=a("a"),rto=o("SegformerConfig"),tto=o(" (SegFormer model)"),ato=l(),vg=a("li"),Ase=a("strong"),nto=o("sew"),sto=o(" \u2014 "),AP=a("a"),lto=o("SEWConfig"),ito=o(" (SEW model)"),dto=l(),Fg=a("li"),Lse=a("strong"),cto=o("sew-d"),mto=o(" \u2014 "),LP=a("a"),fto=o("SEWDConfig"),gto=o(" (SEW-D model)"),hto=l(),Tg=a("li"),yse=a("strong"),uto=o("speech-encoder-decoder"),pto=o(" \u2014 "),yP=a("a"),_to=o("SpeechEncoderDecoderConfig"),bto=o(" (Speech Encoder decoder model)"),vto=l(),Mg=a("li"),xse=a("strong"),Fto=o("speech_to_text"),Tto=o(" \u2014 "),xP=a("a"),Mto=o("Speech2TextConfig"),Eto=o(" (Speech2Text model)"),Cto=l(),Eg=a("li"),$se=a("strong"),wto=o("speech_to_text_2"),Ato=o(" \u2014 "),$P=a("a"),Lto=o("Speech2Text2Config"),yto=o(" (Speech2Text2 model)"),xto=l(),Cg=a("li"),kse=a("strong"),$to=o("splinter"),kto=o(" \u2014 "),kP=a("a"),Sto=o("SplinterConfig"),Rto=o(" (Splinter model)"),Pto=l(),wg=a("li"),Sse=a("strong"),Bto=o("squeezebert"),Ito=o(" \u2014 "),SP=a("a"),Nto=o("SqueezeBertConfig"),qto=o(" (SqueezeBERT model)"),jto=l(),Ag=a("li"),Rse=a("strong"),Dto=o("swin"),Gto=o(" \u2014 "),RP=a("a"),Oto=o("SwinConfig"),Vto=o(" (Swin Transformer model)"),Xto=l(),Lg=a("li"),Pse=a("strong"),zto=o("t5"),Qto=o(" \u2014 "),PP=a("a"),Wto=o("T5Config"),Hto=o(" (T5 model)"),Uto=l(),yg=a("li"),Bse=a("strong"),Jto=o("tapas"),Yto=o(" \u2014 "),BP=a("a"),Kto=o("TapasConfig"),Zto=o(" (TAPAS model)"),eao=l(),xg=a("li"),Ise=a("strong"),oao=o("trajectory_transformer"),rao=o(" \u2014 "),IP=a("a"),tao=o("TrajectoryTransformerConfig"),aao=o(" (Trajectory Transformer model)"),nao=l(),$g=a("li"),Nse=a("strong"),sao=o("transfo-xl"),lao=o(" \u2014 "),NP=a("a"),iao=o("TransfoXLConfig"),dao=o(" (Transformer-XL model)"),cao=l(),kg=a("li"),qse=a("strong"),mao=o("trocr"),fao=o(" \u2014 "),qP=a("a"),gao=o("TrOCRConfig"),hao=o(" (TrOCR model)"),uao=l(),Sg=a("li"),jse=a("strong"),pao=o("unispeech"),_ao=o(" \u2014 "),jP=a("a"),bao=o("UniSpeechConfig"),vao=o(" (UniSpeech model)"),Fao=l(),Rg=a("li"),Dse=a("strong"),Tao=o("unispeech-sat"),Mao=o(" \u2014 "),DP=a("a"),Eao=o("UniSpeechSatConfig"),Cao=o(" (UniSpeechSat model)"),wao=l(),Pg=a("li"),Gse=a("strong"),Aao=o("van"),Lao=o(" \u2014 "),GP=a("a"),yao=o("VanConfig"),xao=o(" (VAN model)"),$ao=l(),Bg=a("li"),Ose=a("strong"),kao=o("vilt"),Sao=o(" \u2014 "),OP=a("a"),Rao=o("ViltConfig"),Pao=o(" (ViLT model)"),Bao=l(),Ig=a("li"),Vse=a("strong"),Iao=o("vision-encoder-decoder"),Nao=o(" \u2014 "),VP=a("a"),qao=o("VisionEncoderDecoderConfig"),jao=o(" (Vision Encoder decoder model)"),Dao=l(),Ng=a("li"),Xse=a("strong"),Gao=o("vision-text-dual-encoder"),Oao=o(" \u2014 "),XP=a("a"),Vao=o("VisionTextDualEncoderConfig"),Xao=o(" (VisionTextDualEncoder model)"),zao=l(),qg=a("li"),zse=a("strong"),Qao=o("visual_bert"),Wao=o(" \u2014 "),zP=a("a"),Hao=o("VisualBertConfig"),Uao=o(" (VisualBERT model)"),Jao=l(),jg=a("li"),Qse=a("strong"),Yao=o("vit"),Kao=o(" \u2014 "),QP=a("a"),Zao=o("ViTConfig"),eno=o(" (ViT model)"),ono=l(),Dg=a("li"),Wse=a("strong"),rno=o("vit_mae"),tno=o(" \u2014 "),WP=a("a"),ano=o("ViTMAEConfig"),nno=o(" (ViTMAE model)"),sno=l(),Gg=a("li"),Hse=a("strong"),lno=o("wav2vec2"),ino=o(" \u2014 "),HP=a("a"),dno=o("Wav2Vec2Config"),cno=o(" (Wav2Vec2 model)"),mno=l(),Og=a("li"),Use=a("strong"),fno=o("wav2vec2-conformer"),gno=o(" \u2014 "),UP=a("a"),hno=o("Wav2Vec2ConformerConfig"),uno=o(" (Wav2Vec2-Conformer model)"),pno=l(),Vg=a("li"),Jse=a("strong"),_no=o("wavlm"),bno=o(" \u2014 "),JP=a("a"),vno=o("WavLMConfig"),Fno=o(" (WavLM model)"),Tno=l(),Xg=a("li"),Yse=a("strong"),Mno=o("xglm"),Eno=o(" \u2014 "),YP=a("a"),Cno=o("XGLMConfig"),wno=o(" (XGLM model)"),Ano=l(),zg=a("li"),Kse=a("strong"),Lno=o("xlm"),yno=o(" \u2014 "),KP=a("a"),xno=o("XLMConfig"),$no=o(" (XLM model)"),kno=l(),Qg=a("li"),Zse=a("strong"),Sno=o("xlm-prophetnet"),Rno=o(" \u2014 "),ZP=a("a"),Pno=o("XLMProphetNetConfig"),Bno=o(" (XLM-ProphetNet model)"),Ino=l(),Wg=a("li"),ele=a("strong"),Nno=o("xlm-roberta"),qno=o(" \u2014 "),eB=a("a"),jno=o("XLMRobertaConfig"),Dno=o(" (XLM-RoBERTa model)"),Gno=l(),Hg=a("li"),ole=a("strong"),Ono=o("xlm-roberta-xl"),Vno=o(" \u2014 "),oB=a("a"),Xno=o("XLMRobertaXLConfig"),zno=o(" (XLM-RoBERTa-XL model)"),Qno=l(),Ug=a("li"),rle=a("strong"),Wno=o("xlnet"),Hno=o(" \u2014 "),rB=a("a"),Uno=o("XLNetConfig"),Jno=o(" (XLNet model)"),Yno=l(),Jg=a("li"),tle=a("strong"),Kno=o("yolos"),Zno=o(" \u2014 "),tB=a("a"),eso=o("YolosConfig"),oso=o(" (YOLOS model)"),rso=l(),Yg=a("li"),ale=a("strong"),tso=o("yoso"),aso=o(" \u2014 "),aB=a("a"),nso=o("YosoConfig"),sso=o(" (YOSO model)"),lso=l(),F(Kg.$$.fragment),iso=l(),Zg=a("div"),F(_y.$$.fragment),dso=l(),nle=a("p"),cso=o("Register a new configuration for this class."),xXe=l(),qi=a("h2"),eh=a("a"),sle=a("span"),F(by.$$.fragment),mso=l(),lle=a("span"),fso=o("AutoTokenizer"),$Xe=l(),yo=a("div"),F(vy.$$.fragment),gso=l(),Fy=a("p"),hso=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),nB=a("a"),uso=o("AutoTokenizer.from_pretrained()"),pso=o(" class method."),_so=l(),Ty=a("p"),bso=o("This class cannot be instantiated directly using "),ile=a("code"),vso=o("__init__()"),Fso=o(" (throws an error)."),Tso=l(),xr=a("div"),F(My.$$.fragment),Mso=l(),dle=a("p"),Eso=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Cso=l(),Pa=a("p"),wso=o("The tokenizer class to instantiate is selected based on the "),cle=a("code"),Aso=o("model_type"),Lso=o(` property of the config object (either
passed as an argument or loaded from `),mle=a("code"),yso=o("pretrained_model_name_or_path"),xso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fle=a("code"),$so=o("pretrained_model_name_or_path"),kso=o(":"),Sso=l(),k=a("ul"),jn=a("li"),gle=a("strong"),Rso=o("albert"),Pso=o(" \u2014 "),sB=a("a"),Bso=o("AlbertTokenizer"),Iso=o(" or "),lB=a("a"),Nso=o("AlbertTokenizerFast"),qso=o(" (ALBERT model)"),jso=l(),Dn=a("li"),hle=a("strong"),Dso=o("bart"),Gso=o(" \u2014 "),iB=a("a"),Oso=o("BartTokenizer"),Vso=o(" or "),dB=a("a"),Xso=o("BartTokenizerFast"),zso=o(" (BART model)"),Qso=l(),Gn=a("li"),ule=a("strong"),Wso=o("barthez"),Hso=o(" \u2014 "),cB=a("a"),Uso=o("BarthezTokenizer"),Jso=o(" or "),mB=a("a"),Yso=o("BarthezTokenizerFast"),Kso=o(" (BARThez model)"),Zso=l(),oh=a("li"),ple=a("strong"),elo=o("bartpho"),olo=o(" \u2014 "),fB=a("a"),rlo=o("BartphoTokenizer"),tlo=o(" (BARTpho model)"),alo=l(),On=a("li"),_le=a("strong"),nlo=o("bert"),slo=o(" \u2014 "),gB=a("a"),llo=o("BertTokenizer"),ilo=o(" or "),hB=a("a"),dlo=o("BertTokenizerFast"),clo=o(" (BERT model)"),mlo=l(),rh=a("li"),ble=a("strong"),flo=o("bert-generation"),glo=o(" \u2014 "),uB=a("a"),hlo=o("BertGenerationTokenizer"),ulo=o(" (Bert Generation model)"),plo=l(),th=a("li"),vle=a("strong"),_lo=o("bert-japanese"),blo=o(" \u2014 "),pB=a("a"),vlo=o("BertJapaneseTokenizer"),Flo=o(" (BertJapanese model)"),Tlo=l(),ah=a("li"),Fle=a("strong"),Mlo=o("bertweet"),Elo=o(" \u2014 "),_B=a("a"),Clo=o("BertweetTokenizer"),wlo=o(" (BERTweet model)"),Alo=l(),Vn=a("li"),Tle=a("strong"),Llo=o("big_bird"),ylo=o(" \u2014 "),bB=a("a"),xlo=o("BigBirdTokenizer"),$lo=o(" or "),vB=a("a"),klo=o("BigBirdTokenizerFast"),Slo=o(" (BigBird model)"),Rlo=l(),Xn=a("li"),Mle=a("strong"),Plo=o("bigbird_pegasus"),Blo=o(" \u2014 "),FB=a("a"),Ilo=o("PegasusTokenizer"),Nlo=o(" or "),TB=a("a"),qlo=o("PegasusTokenizerFast"),jlo=o(" (BigBird-Pegasus model)"),Dlo=l(),zn=a("li"),Ele=a("strong"),Glo=o("blenderbot"),Olo=o(" \u2014 "),MB=a("a"),Vlo=o("BlenderbotTokenizer"),Xlo=o(" or "),EB=a("a"),zlo=o("BlenderbotTokenizerFast"),Qlo=o(" (Blenderbot model)"),Wlo=l(),nh=a("li"),Cle=a("strong"),Hlo=o("blenderbot-small"),Ulo=o(" \u2014 "),CB=a("a"),Jlo=o("BlenderbotSmallTokenizer"),Ylo=o(" (BlenderbotSmall model)"),Klo=l(),sh=a("li"),wle=a("strong"),Zlo=o("bloom"),eio=o(" \u2014 "),wB=a("a"),oio=o("BloomTokenizerFast"),rio=o(" (BLOOM model)"),tio=l(),lh=a("li"),Ale=a("strong"),aio=o("byt5"),nio=o(" \u2014 "),AB=a("a"),sio=o("ByT5Tokenizer"),lio=o(" (ByT5 model)"),iio=l(),Qn=a("li"),Lle=a("strong"),dio=o("camembert"),cio=o(" \u2014 "),LB=a("a"),mio=o("CamembertTokenizer"),fio=o(" or "),yB=a("a"),gio=o("CamembertTokenizerFast"),hio=o(" (CamemBERT model)"),uio=l(),ih=a("li"),yle=a("strong"),pio=o("canine"),_io=o(" \u2014 "),xB=a("a"),bio=o("CanineTokenizer"),vio=o(" (CANINE model)"),Fio=l(),Wn=a("li"),xle=a("strong"),Tio=o("clip"),Mio=o(" \u2014 "),$B=a("a"),Eio=o("CLIPTokenizer"),Cio=o(" or "),kB=a("a"),wio=o("CLIPTokenizerFast"),Aio=o(" (CLIP model)"),Lio=l(),Hn=a("li"),$le=a("strong"),yio=o("codegen"),xio=o(" \u2014 "),SB=a("a"),$io=o("CodeGenTokenizer"),kio=o(" or "),RB=a("a"),Sio=o("CodeGenTokenizerFast"),Rio=o(" (CodeGen model)"),Pio=l(),Un=a("li"),kle=a("strong"),Bio=o("convbert"),Iio=o(" \u2014 "),PB=a("a"),Nio=o("ConvBertTokenizer"),qio=o(" or "),BB=a("a"),jio=o("ConvBertTokenizerFast"),Dio=o(" (ConvBERT model)"),Gio=l(),Jn=a("li"),Sle=a("strong"),Oio=o("cpm"),Vio=o(" \u2014 "),IB=a("a"),Xio=o("CpmTokenizer"),zio=o(" or "),NB=a("a"),Qio=o("CpmTokenizerFast"),Wio=o(" (CPM model)"),Hio=l(),dh=a("li"),Rle=a("strong"),Uio=o("ctrl"),Jio=o(" \u2014 "),qB=a("a"),Yio=o("CTRLTokenizer"),Kio=o(" (CTRL model)"),Zio=l(),Yn=a("li"),Ple=a("strong"),edo=o("data2vec-text"),odo=o(" \u2014 "),jB=a("a"),rdo=o("RobertaTokenizer"),tdo=o(" or "),DB=a("a"),ado=o("RobertaTokenizerFast"),ndo=o(" (Data2VecText model)"),sdo=l(),Kn=a("li"),Ble=a("strong"),ldo=o("deberta"),ido=o(" \u2014 "),GB=a("a"),ddo=o("DebertaTokenizer"),cdo=o(" or "),OB=a("a"),mdo=o("DebertaTokenizerFast"),fdo=o(" (DeBERTa model)"),gdo=l(),Zn=a("li"),Ile=a("strong"),hdo=o("deberta-v2"),udo=o(" \u2014 "),VB=a("a"),pdo=o("DebertaV2Tokenizer"),_do=o(" or "),XB=a("a"),bdo=o("DebertaV2TokenizerFast"),vdo=o(" (DeBERTa-v2 model)"),Fdo=l(),es=a("li"),Nle=a("strong"),Tdo=o("distilbert"),Mdo=o(" \u2014 "),zB=a("a"),Edo=o("DistilBertTokenizer"),Cdo=o(" or "),QB=a("a"),wdo=o("DistilBertTokenizerFast"),Ado=o(" (DistilBERT model)"),Ldo=l(),os=a("li"),qle=a("strong"),ydo=o("dpr"),xdo=o(" \u2014 "),WB=a("a"),$do=o("DPRQuestionEncoderTokenizer"),kdo=o(" or "),HB=a("a"),Sdo=o("DPRQuestionEncoderTokenizerFast"),Rdo=o(" (DPR model)"),Pdo=l(),rs=a("li"),jle=a("strong"),Bdo=o("electra"),Ido=o(" \u2014 "),UB=a("a"),Ndo=o("ElectraTokenizer"),qdo=o(" or "),JB=a("a"),jdo=o("ElectraTokenizerFast"),Ddo=o(" (ELECTRA model)"),Gdo=l(),ch=a("li"),Dle=a("strong"),Odo=o("flaubert"),Vdo=o(" \u2014 "),YB=a("a"),Xdo=o("FlaubertTokenizer"),zdo=o(" (FlauBERT model)"),Qdo=l(),ts=a("li"),Gle=a("strong"),Wdo=o("fnet"),Hdo=o(" \u2014 "),KB=a("a"),Udo=o("FNetTokenizer"),Jdo=o(" or "),ZB=a("a"),Ydo=o("FNetTokenizerFast"),Kdo=o(" (FNet model)"),Zdo=l(),mh=a("li"),Ole=a("strong"),eco=o("fsmt"),oco=o(" \u2014 "),eI=a("a"),rco=o("FSMTTokenizer"),tco=o(" (FairSeq Machine-Translation model)"),aco=l(),as=a("li"),Vle=a("strong"),nco=o("funnel"),sco=o(" \u2014 "),oI=a("a"),lco=o("FunnelTokenizer"),ico=o(" or "),rI=a("a"),dco=o("FunnelTokenizerFast"),cco=o(" (Funnel Transformer model)"),mco=l(),ns=a("li"),Xle=a("strong"),fco=o("gpt2"),gco=o(" \u2014 "),tI=a("a"),hco=o("GPT2Tokenizer"),uco=o(" or "),aI=a("a"),pco=o("GPT2TokenizerFast"),_co=o(" (OpenAI GPT-2 model)"),bco=l(),ss=a("li"),zle=a("strong"),vco=o("gpt_neo"),Fco=o(" \u2014 "),nI=a("a"),Tco=o("GPT2Tokenizer"),Mco=o(" or "),sI=a("a"),Eco=o("GPT2TokenizerFast"),Cco=o(" (GPT Neo model)"),wco=l(),fh=a("li"),Qle=a("strong"),Aco=o("gpt_neox"),Lco=o(" \u2014 "),lI=a("a"),yco=o("GPTNeoXTokenizerFast"),xco=o(" (GPT NeoX model)"),$co=l(),ls=a("li"),Wle=a("strong"),kco=o("gptj"),Sco=o(" \u2014 "),iI=a("a"),Rco=o("GPT2Tokenizer"),Pco=o(" or "),dI=a("a"),Bco=o("GPT2TokenizerFast"),Ico=o(" (GPT-J model)"),Nco=l(),is=a("li"),Hle=a("strong"),qco=o("groupvit"),jco=o(" \u2014 "),cI=a("a"),Dco=o("CLIPTokenizer"),Gco=o(" or "),mI=a("a"),Oco=o("CLIPTokenizerFast"),Vco=o(" (GroupViT model)"),Xco=l(),ds=a("li"),Ule=a("strong"),zco=o("herbert"),Qco=o(" \u2014 "),fI=a("a"),Wco=o("HerbertTokenizer"),Hco=o(" or "),gI=a("a"),Uco=o("HerbertTokenizerFast"),Jco=o(" (HerBERT model)"),Yco=l(),gh=a("li"),Jle=a("strong"),Kco=o("hubert"),Zco=o(" \u2014 "),hI=a("a"),emo=o("Wav2Vec2CTCTokenizer"),omo=o(" (Hubert model)"),rmo=l(),cs=a("li"),Yle=a("strong"),tmo=o("ibert"),amo=o(" \u2014 "),uI=a("a"),nmo=o("RobertaTokenizer"),smo=o(" or "),pI=a("a"),lmo=o("RobertaTokenizerFast"),imo=o(" (I-BERT model)"),dmo=l(),ms=a("li"),Kle=a("strong"),cmo=o("layoutlm"),mmo=o(" \u2014 "),_I=a("a"),fmo=o("LayoutLMTokenizer"),gmo=o(" or "),bI=a("a"),hmo=o("LayoutLMTokenizerFast"),umo=o(" (LayoutLM model)"),pmo=l(),fs=a("li"),Zle=a("strong"),_mo=o("layoutlmv2"),bmo=o(" \u2014 "),vI=a("a"),vmo=o("LayoutLMv2Tokenizer"),Fmo=o(" or "),FI=a("a"),Tmo=o("LayoutLMv2TokenizerFast"),Mmo=o(" (LayoutLMv2 model)"),Emo=l(),gs=a("li"),eie=a("strong"),Cmo=o("layoutlmv3"),wmo=o(" \u2014 "),TI=a("a"),Amo=o("LayoutLMv3Tokenizer"),Lmo=o(" or "),MI=a("a"),ymo=o("LayoutLMv3TokenizerFast"),xmo=o(" (LayoutLMv3 model)"),$mo=l(),hs=a("li"),oie=a("strong"),kmo=o("layoutxlm"),Smo=o(" \u2014 "),EI=a("a"),Rmo=o("LayoutXLMTokenizer"),Pmo=o(" or "),CI=a("a"),Bmo=o("LayoutXLMTokenizerFast"),Imo=o(" (LayoutXLM model)"),Nmo=l(),us=a("li"),rie=a("strong"),qmo=o("led"),jmo=o(" \u2014 "),wI=a("a"),Dmo=o("LEDTokenizer"),Gmo=o(" or "),AI=a("a"),Omo=o("LEDTokenizerFast"),Vmo=o(" (LED model)"),Xmo=l(),ps=a("li"),tie=a("strong"),zmo=o("longformer"),Qmo=o(" \u2014 "),LI=a("a"),Wmo=o("LongformerTokenizer"),Hmo=o(" or "),yI=a("a"),Umo=o("LongformerTokenizerFast"),Jmo=o(" (Longformer model)"),Ymo=l(),_s=a("li"),aie=a("strong"),Kmo=o("longt5"),Zmo=o(" \u2014 "),xI=a("a"),efo=o("T5Tokenizer"),ofo=o(" or "),$I=a("a"),rfo=o("T5TokenizerFast"),tfo=o(" (LongT5 model)"),afo=l(),hh=a("li"),nie=a("strong"),nfo=o("luke"),sfo=o(" \u2014 "),kI=a("a"),lfo=o("LukeTokenizer"),ifo=o(" (LUKE model)"),dfo=l(),bs=a("li"),sie=a("strong"),cfo=o("lxmert"),mfo=o(" \u2014 "),SI=a("a"),ffo=o("LxmertTokenizer"),gfo=o(" or "),RI=a("a"),hfo=o("LxmertTokenizerFast"),ufo=o(" (LXMERT model)"),pfo=l(),uh=a("li"),lie=a("strong"),_fo=o("m2m_100"),bfo=o(" \u2014 "),PI=a("a"),vfo=o("M2M100Tokenizer"),Ffo=o(" (M2M100 model)"),Tfo=l(),ph=a("li"),iie=a("strong"),Mfo=o("marian"),Efo=o(" \u2014 "),BI=a("a"),Cfo=o("MarianTokenizer"),wfo=o(" (Marian model)"),Afo=l(),vs=a("li"),die=a("strong"),Lfo=o("mbart"),yfo=o(" \u2014 "),II=a("a"),xfo=o("MBartTokenizer"),$fo=o(" or "),NI=a("a"),kfo=o("MBartTokenizerFast"),Sfo=o(" (mBART model)"),Rfo=l(),Fs=a("li"),cie=a("strong"),Pfo=o("mbart50"),Bfo=o(" \u2014 "),qI=a("a"),Ifo=o("MBart50Tokenizer"),Nfo=o(" or "),jI=a("a"),qfo=o("MBart50TokenizerFast"),jfo=o(" (mBART-50 model)"),Dfo=l(),Ts=a("li"),mie=a("strong"),Gfo=o("megatron-bert"),Ofo=o(" \u2014 "),DI=a("a"),Vfo=o("BertTokenizer"),Xfo=o(" or "),GI=a("a"),zfo=o("BertTokenizerFast"),Qfo=o(" (Megatron-BERT model)"),Wfo=l(),_h=a("li"),fie=a("strong"),Hfo=o("mluke"),Ufo=o(" \u2014 "),OI=a("a"),Jfo=o("MLukeTokenizer"),Yfo=o(" (mLUKE model)"),Kfo=l(),Ms=a("li"),gie=a("strong"),Zfo=o("mobilebert"),ego=o(" \u2014 "),VI=a("a"),ogo=o("MobileBertTokenizer"),rgo=o(" or "),XI=a("a"),tgo=o("MobileBertTokenizerFast"),ago=o(" (MobileBERT model)"),ngo=l(),Es=a("li"),hie=a("strong"),sgo=o("mpnet"),lgo=o(" \u2014 "),zI=a("a"),igo=o("MPNetTokenizer"),dgo=o(" or "),QI=a("a"),cgo=o("MPNetTokenizerFast"),mgo=o(" (MPNet model)"),fgo=l(),Cs=a("li"),uie=a("strong"),ggo=o("mt5"),hgo=o(" \u2014 "),WI=a("a"),ugo=o("MT5Tokenizer"),pgo=o(" or "),HI=a("a"),_go=o("MT5TokenizerFast"),bgo=o(" (MT5 model)"),vgo=l(),ws=a("li"),pie=a("strong"),Fgo=o("mvp"),Tgo=o(" \u2014 "),UI=a("a"),Mgo=o("MvpTokenizer"),Ego=o(" or "),JI=a("a"),Cgo=o("MvpTokenizerFast"),wgo=o(" (MVP model)"),Ago=l(),As=a("li"),_ie=a("strong"),Lgo=o("nezha"),ygo=o(" \u2014 "),YI=a("a"),xgo=o("BertTokenizer"),$go=o(" or "),KI=a("a"),kgo=o("BertTokenizerFast"),Sgo=o(" (Nezha model)"),Rgo=l(),Ls=a("li"),bie=a("strong"),Pgo=o("nllb"),Bgo=o(" \u2014 "),ZI=a("a"),Igo=o("NllbTokenizer"),Ngo=o(" or "),eN=a("a"),qgo=o("NllbTokenizerFast"),jgo=o(" (NLLB model)"),Dgo=l(),ys=a("li"),vie=a("strong"),Ggo=o("nystromformer"),Ogo=o(" \u2014 "),oN=a("a"),Vgo=o("AlbertTokenizer"),Xgo=o(" or "),rN=a("a"),zgo=o("AlbertTokenizerFast"),Qgo=o(" (Nystr\xF6mformer model)"),Wgo=l(),xs=a("li"),Fie=a("strong"),Hgo=o("openai-gpt"),Ugo=o(" \u2014 "),tN=a("a"),Jgo=o("OpenAIGPTTokenizer"),Ygo=o(" or "),aN=a("a"),Kgo=o("OpenAIGPTTokenizerFast"),Zgo=o(" (OpenAI GPT model)"),eho=l(),bh=a("li"),Tie=a("strong"),oho=o("opt"),rho=o(" \u2014 "),nN=a("a"),tho=o("GPT2Tokenizer"),aho=o(" (OPT model)"),nho=l(),$s=a("li"),Mie=a("strong"),sho=o("pegasus"),lho=o(" \u2014 "),sN=a("a"),iho=o("PegasusTokenizer"),dho=o(" or "),lN=a("a"),cho=o("PegasusTokenizerFast"),mho=o(" (Pegasus model)"),fho=l(),vh=a("li"),Eie=a("strong"),gho=o("perceiver"),hho=o(" \u2014 "),iN=a("a"),uho=o("PerceiverTokenizer"),pho=o(" (Perceiver model)"),_ho=l(),Fh=a("li"),Cie=a("strong"),bho=o("phobert"),vho=o(" \u2014 "),dN=a("a"),Fho=o("PhobertTokenizer"),Tho=o(" (PhoBERT model)"),Mho=l(),Th=a("li"),wie=a("strong"),Eho=o("plbart"),Cho=o(" \u2014 "),cN=a("a"),who=o("PLBartTokenizer"),Aho=o(" (PLBart model)"),Lho=l(),Mh=a("li"),Aie=a("strong"),yho=o("prophetnet"),xho=o(" \u2014 "),mN=a("a"),$ho=o("ProphetNetTokenizer"),kho=o(" (ProphetNet model)"),Sho=l(),ks=a("li"),Lie=a("strong"),Rho=o("qdqbert"),Pho=o(" \u2014 "),fN=a("a"),Bho=o("BertTokenizer"),Iho=o(" or "),gN=a("a"),Nho=o("BertTokenizerFast"),qho=o(" (QDQBert model)"),jho=l(),Eh=a("li"),yie=a("strong"),Dho=o("rag"),Gho=o(" \u2014 "),hN=a("a"),Oho=o("RagTokenizer"),Vho=o(" (RAG model)"),Xho=l(),Ss=a("li"),xie=a("strong"),zho=o("realm"),Qho=o(" \u2014 "),uN=a("a"),Who=o("RealmTokenizer"),Hho=o(" or "),pN=a("a"),Uho=o("RealmTokenizerFast"),Jho=o(" (REALM model)"),Yho=l(),Rs=a("li"),$ie=a("strong"),Kho=o("reformer"),Zho=o(" \u2014 "),_N=a("a"),euo=o("ReformerTokenizer"),ouo=o(" or "),bN=a("a"),ruo=o("ReformerTokenizerFast"),tuo=o(" (Reformer model)"),auo=l(),Ps=a("li"),kie=a("strong"),nuo=o("rembert"),suo=o(" \u2014 "),vN=a("a"),luo=o("RemBertTokenizer"),iuo=o(" or "),FN=a("a"),duo=o("RemBertTokenizerFast"),cuo=o(" (RemBERT model)"),muo=l(),Bs=a("li"),Sie=a("strong"),fuo=o("retribert"),guo=o(" \u2014 "),TN=a("a"),huo=o("RetriBertTokenizer"),uuo=o(" or "),MN=a("a"),puo=o("RetriBertTokenizerFast"),_uo=o(" (RetriBERT model)"),buo=l(),Is=a("li"),Rie=a("strong"),vuo=o("roberta"),Fuo=o(" \u2014 "),EN=a("a"),Tuo=o("RobertaTokenizer"),Muo=o(" or "),CN=a("a"),Euo=o("RobertaTokenizerFast"),Cuo=o(" (RoBERTa model)"),wuo=l(),Ns=a("li"),Pie=a("strong"),Auo=o("roformer"),Luo=o(" \u2014 "),wN=a("a"),yuo=o("RoFormerTokenizer"),xuo=o(" or "),AN=a("a"),$uo=o("RoFormerTokenizerFast"),kuo=o(" (RoFormer model)"),Suo=l(),Ch=a("li"),Bie=a("strong"),Ruo=o("speech_to_text"),Puo=o(" \u2014 "),LN=a("a"),Buo=o("Speech2TextTokenizer"),Iuo=o(" (Speech2Text model)"),Nuo=l(),wh=a("li"),Iie=a("strong"),quo=o("speech_to_text_2"),juo=o(" \u2014 "),yN=a("a"),Duo=o("Speech2Text2Tokenizer"),Guo=o(" (Speech2Text2 model)"),Ouo=l(),qs=a("li"),Nie=a("strong"),Vuo=o("splinter"),Xuo=o(" \u2014 "),xN=a("a"),zuo=o("SplinterTokenizer"),Quo=o(" or "),$N=a("a"),Wuo=o("SplinterTokenizerFast"),Huo=o(" (Splinter model)"),Uuo=l(),js=a("li"),qie=a("strong"),Juo=o("squeezebert"),Yuo=o(" \u2014 "),kN=a("a"),Kuo=o("SqueezeBertTokenizer"),Zuo=o(" or "),SN=a("a"),epo=o("SqueezeBertTokenizerFast"),opo=o(" (SqueezeBERT model)"),rpo=l(),Ds=a("li"),jie=a("strong"),tpo=o("t5"),apo=o(" \u2014 "),RN=a("a"),npo=o("T5Tokenizer"),spo=o(" or "),PN=a("a"),lpo=o("T5TokenizerFast"),ipo=o(" (T5 model)"),dpo=l(),Ah=a("li"),Die=a("strong"),cpo=o("tapas"),mpo=o(" \u2014 "),BN=a("a"),fpo=o("TapasTokenizer"),gpo=o(" (TAPAS model)"),hpo=l(),Lh=a("li"),Gie=a("strong"),upo=o("tapex"),ppo=o(" \u2014 "),IN=a("a"),_po=o("TapexTokenizer"),bpo=o(" (TAPEX model)"),vpo=l(),yh=a("li"),Oie=a("strong"),Fpo=o("transfo-xl"),Tpo=o(" \u2014 "),NN=a("a"),Mpo=o("TransfoXLTokenizer"),Epo=o(" (Transformer-XL model)"),Cpo=l(),Gs=a("li"),Vie=a("strong"),wpo=o("vilt"),Apo=o(" \u2014 "),qN=a("a"),Lpo=o("BertTokenizer"),ypo=o(" or "),jN=a("a"),xpo=o("BertTokenizerFast"),$po=o(" (ViLT model)"),kpo=l(),Os=a("li"),Xie=a("strong"),Spo=o("visual_bert"),Rpo=o(" \u2014 "),DN=a("a"),Ppo=o("BertTokenizer"),Bpo=o(" or "),GN=a("a"),Ipo=o("BertTokenizerFast"),Npo=o(" (VisualBERT model)"),qpo=l(),xh=a("li"),zie=a("strong"),jpo=o("wav2vec2"),Dpo=o(" \u2014 "),ON=a("a"),Gpo=o("Wav2Vec2CTCTokenizer"),Opo=o(" (Wav2Vec2 model)"),Vpo=l(),$h=a("li"),Qie=a("strong"),Xpo=o("wav2vec2-conformer"),zpo=o(" \u2014 "),VN=a("a"),Qpo=o("Wav2Vec2CTCTokenizer"),Wpo=o(" (Wav2Vec2-Conformer model)"),Hpo=l(),kh=a("li"),Wie=a("strong"),Upo=o("wav2vec2_phoneme"),Jpo=o(" \u2014 "),XN=a("a"),Ypo=o("Wav2Vec2PhonemeCTCTokenizer"),Kpo=o(" (Wav2Vec2Phoneme model)"),Zpo=l(),Vs=a("li"),Hie=a("strong"),e_o=o("xglm"),o_o=o(" \u2014 "),zN=a("a"),r_o=o("XGLMTokenizer"),t_o=o(" or "),QN=a("a"),a_o=o("XGLMTokenizerFast"),n_o=o(" (XGLM model)"),s_o=l(),Sh=a("li"),Uie=a("strong"),l_o=o("xlm"),i_o=o(" \u2014 "),WN=a("a"),d_o=o("XLMTokenizer"),c_o=o(" (XLM model)"),m_o=l(),Rh=a("li"),Jie=a("strong"),f_o=o("xlm-prophetnet"),g_o=o(" \u2014 "),HN=a("a"),h_o=o("XLMProphetNetTokenizer"),u_o=o(" (XLM-ProphetNet model)"),p_o=l(),Xs=a("li"),Yie=a("strong"),__o=o("xlm-roberta"),b_o=o(" \u2014 "),UN=a("a"),v_o=o("XLMRobertaTokenizer"),F_o=o(" or "),JN=a("a"),T_o=o("XLMRobertaTokenizerFast"),M_o=o(" (XLM-RoBERTa model)"),E_o=l(),zs=a("li"),Kie=a("strong"),C_o=o("xlm-roberta-xl"),w_o=o(" \u2014 "),YN=a("a"),A_o=o("RobertaTokenizer"),L_o=o(" or "),KN=a("a"),y_o=o("RobertaTokenizerFast"),x_o=o(" (XLM-RoBERTa-XL model)"),$_o=l(),Qs=a("li"),Zie=a("strong"),k_o=o("xlnet"),S_o=o(" \u2014 "),ZN=a("a"),R_o=o("XLNetTokenizer"),P_o=o(" or "),eq=a("a"),B_o=o("XLNetTokenizerFast"),I_o=o(" (XLNet model)"),N_o=l(),Ws=a("li"),ede=a("strong"),q_o=o("yoso"),j_o=o(" \u2014 "),oq=a("a"),D_o=o("AlbertTokenizer"),G_o=o(" or "),rq=a("a"),O_o=o("AlbertTokenizerFast"),V_o=o(" (YOSO model)"),X_o=l(),F(Ph.$$.fragment),z_o=l(),Bh=a("div"),F(Ey.$$.fragment),Q_o=l(),ode=a("p"),W_o=o("Register a new tokenizer in this mapping."),kXe=l(),ji=a("h2"),Ih=a("a"),rde=a("span"),F(Cy.$$.fragment),H_o=l(),tde=a("span"),U_o=o("AutoFeatureExtractor"),SXe=l(),xo=a("div"),F(wy.$$.fragment),J_o=l(),Ay=a("p"),Y_o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),tq=a("a"),K_o=o("AutoFeatureExtractor.from_pretrained()"),Z_o=o(" class method."),e2o=l(),Ly=a("p"),o2o=o("This class cannot be instantiated directly using "),ade=a("code"),r2o=o("__init__()"),t2o=o(" (throws an error)."),a2o=l(),Ue=a("div"),F(yy.$$.fragment),n2o=l(),nde=a("p"),s2o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),l2o=l(),Ba=a("p"),i2o=o("The feature extractor class to instantiate is selected based on the "),sde=a("code"),d2o=o("model_type"),c2o=o(` property of the config object
(either passed as an argument or loaded from `),lde=a("code"),m2o=o("pretrained_model_name_or_path"),f2o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ide=a("code"),g2o=o("pretrained_model_name_or_path"),h2o=o(":"),u2o=l(),Y=a("ul"),Nh=a("li"),dde=a("strong"),p2o=o("beit"),_2o=o(" \u2014 "),aq=a("a"),b2o=o("BeitFeatureExtractor"),v2o=o(" (BEiT model)"),F2o=l(),qh=a("li"),cde=a("strong"),T2o=o("clip"),M2o=o(" \u2014 "),nq=a("a"),E2o=o("CLIPFeatureExtractor"),C2o=o(" (CLIP model)"),w2o=l(),jh=a("li"),mde=a("strong"),A2o=o("convnext"),L2o=o(" \u2014 "),sq=a("a"),y2o=o("ConvNextFeatureExtractor"),x2o=o(" (ConvNeXT model)"),$2o=l(),Dh=a("li"),fde=a("strong"),k2o=o("cvt"),S2o=o(" \u2014 "),lq=a("a"),R2o=o("ConvNextFeatureExtractor"),P2o=o(" (CvT model)"),B2o=l(),Gh=a("li"),gde=a("strong"),I2o=o("data2vec-audio"),N2o=o(" \u2014 "),iq=a("a"),q2o=o("Wav2Vec2FeatureExtractor"),j2o=o(" (Data2VecAudio model)"),D2o=l(),Oh=a("li"),hde=a("strong"),G2o=o("data2vec-vision"),O2o=o(" \u2014 "),dq=a("a"),V2o=o("BeitFeatureExtractor"),X2o=o(" (Data2VecVision model)"),z2o=l(),Vh=a("li"),ude=a("strong"),Q2o=o("deit"),W2o=o(" \u2014 "),cq=a("a"),H2o=o("DeiTFeatureExtractor"),U2o=o(" (DeiT model)"),J2o=l(),Xh=a("li"),pde=a("strong"),Y2o=o("detr"),K2o=o(" \u2014 "),mq=a("a"),Z2o=o("DetrFeatureExtractor"),ebo=o(" (DETR model)"),obo=l(),zh=a("li"),_de=a("strong"),rbo=o("dpt"),tbo=o(" \u2014 "),fq=a("a"),abo=o("DPTFeatureExtractor"),nbo=o(" (DPT model)"),sbo=l(),Qh=a("li"),bde=a("strong"),lbo=o("flava"),ibo=o(" \u2014 "),gq=a("a"),dbo=o("FlavaFeatureExtractor"),cbo=o(" (FLAVA model)"),mbo=l(),Wh=a("li"),vde=a("strong"),fbo=o("glpn"),gbo=o(" \u2014 "),hq=a("a"),hbo=o("GLPNFeatureExtractor"),ubo=o(" (GLPN model)"),pbo=l(),Hh=a("li"),Fde=a("strong"),_bo=o("groupvit"),bbo=o(" \u2014 "),uq=a("a"),vbo=o("CLIPFeatureExtractor"),Fbo=o(" (GroupViT model)"),Tbo=l(),Uh=a("li"),Tde=a("strong"),Mbo=o("hubert"),Ebo=o(" \u2014 "),pq=a("a"),Cbo=o("Wav2Vec2FeatureExtractor"),wbo=o(" (Hubert model)"),Abo=l(),Jh=a("li"),Mde=a("strong"),Lbo=o("imagegpt"),ybo=o(" \u2014 "),_q=a("a"),xbo=o("ImageGPTFeatureExtractor"),$bo=o(" (ImageGPT model)"),kbo=l(),Yh=a("li"),Ede=a("strong"),Sbo=o("layoutlmv2"),Rbo=o(" \u2014 "),bq=a("a"),Pbo=o("LayoutLMv2FeatureExtractor"),Bbo=o(" (LayoutLMv2 model)"),Ibo=l(),Kh=a("li"),Cde=a("strong"),Nbo=o("layoutlmv3"),qbo=o(" \u2014 "),vq=a("a"),jbo=o("LayoutLMv3FeatureExtractor"),Dbo=o(" (LayoutLMv3 model)"),Gbo=l(),Zh=a("li"),wde=a("strong"),Obo=o("levit"),Vbo=o(" \u2014 "),Fq=a("a"),Xbo=o("LevitFeatureExtractor"),zbo=o(" (LeViT model)"),Qbo=l(),eu=a("li"),Ade=a("strong"),Wbo=o("maskformer"),Hbo=o(" \u2014 "),Tq=a("a"),Ubo=o("MaskFormerFeatureExtractor"),Jbo=o(" (MaskFormer model)"),Ybo=l(),ou=a("li"),Lde=a("strong"),Kbo=o("mctct"),Zbo=o(" \u2014 "),Mq=a("a"),evo=o("MCTCTFeatureExtractor"),ovo=o(" (M-CTC-T model)"),rvo=l(),ru=a("li"),yde=a("strong"),tvo=o("mobilevit"),avo=o(" \u2014 "),Eq=a("a"),nvo=o("MobileViTFeatureExtractor"),svo=o(" (MobileViT model)"),lvo=l(),tu=a("li"),xde=a("strong"),ivo=o("perceiver"),dvo=o(" \u2014 "),Cq=a("a"),cvo=o("PerceiverFeatureExtractor"),mvo=o(" (Perceiver model)"),fvo=l(),au=a("li"),$de=a("strong"),gvo=o("poolformer"),hvo=o(" \u2014 "),wq=a("a"),uvo=o("PoolFormerFeatureExtractor"),pvo=o(" (PoolFormer model)"),_vo=l(),nu=a("li"),kde=a("strong"),bvo=o("regnet"),vvo=o(" \u2014 "),Aq=a("a"),Fvo=o("ConvNextFeatureExtractor"),Tvo=o(" (RegNet model)"),Mvo=l(),su=a("li"),Sde=a("strong"),Evo=o("resnet"),Cvo=o(" \u2014 "),Lq=a("a"),wvo=o("ConvNextFeatureExtractor"),Avo=o(" (ResNet model)"),Lvo=l(),lu=a("li"),Rde=a("strong"),yvo=o("segformer"),xvo=o(" \u2014 "),yq=a("a"),$vo=o("SegformerFeatureExtractor"),kvo=o(" (SegFormer model)"),Svo=l(),iu=a("li"),Pde=a("strong"),Rvo=o("speech_to_text"),Pvo=o(" \u2014 "),xq=a("a"),Bvo=o("Speech2TextFeatureExtractor"),Ivo=o(" (Speech2Text model)"),Nvo=l(),du=a("li"),Bde=a("strong"),qvo=o("swin"),jvo=o(" \u2014 "),$q=a("a"),Dvo=o("ViTFeatureExtractor"),Gvo=o(" (Swin Transformer model)"),Ovo=l(),cu=a("li"),Ide=a("strong"),Vvo=o("van"),Xvo=o(" \u2014 "),kq=a("a"),zvo=o("ConvNextFeatureExtractor"),Qvo=o(" (VAN model)"),Wvo=l(),mu=a("li"),Nde=a("strong"),Hvo=o("vilt"),Uvo=o(" \u2014 "),Sq=a("a"),Jvo=o("ViltFeatureExtractor"),Yvo=o(" (ViLT model)"),Kvo=l(),fu=a("li"),qde=a("strong"),Zvo=o("vit"),e1o=o(" \u2014 "),Rq=a("a"),o1o=o("ViTFeatureExtractor"),r1o=o(" (ViT model)"),t1o=l(),gu=a("li"),jde=a("strong"),a1o=o("vit_mae"),n1o=o(" \u2014 "),Pq=a("a"),s1o=o("ViTFeatureExtractor"),l1o=o(" (ViTMAE model)"),i1o=l(),hu=a("li"),Dde=a("strong"),d1o=o("wav2vec2"),c1o=o(" \u2014 "),Bq=a("a"),m1o=o("Wav2Vec2FeatureExtractor"),f1o=o(" (Wav2Vec2 model)"),g1o=l(),uu=a("li"),Gde=a("strong"),h1o=o("wav2vec2-conformer"),u1o=o(" \u2014 "),Iq=a("a"),p1o=o("Wav2Vec2FeatureExtractor"),_1o=o(" (Wav2Vec2-Conformer model)"),b1o=l(),pu=a("li"),Ode=a("strong"),v1o=o("yolos"),F1o=o(" \u2014 "),Nq=a("a"),T1o=o("YolosFeatureExtractor"),M1o=o(" (YOLOS model)"),E1o=l(),F(_u.$$.fragment),C1o=l(),F(bu.$$.fragment),w1o=l(),vu=a("div"),F(xy.$$.fragment),A1o=l(),Vde=a("p"),L1o=o("Register a new feature extractor for this class."),RXe=l(),Di=a("h2"),Fu=a("a"),Xde=a("span"),F($y.$$.fragment),y1o=l(),zde=a("span"),x1o=o("AutoProcessor"),PXe=l(),$o=a("div"),F(ky.$$.fragment),$1o=l(),Sy=a("p"),k1o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),qq=a("a"),S1o=o("AutoProcessor.from_pretrained()"),R1o=o(" class method."),P1o=l(),Ry=a("p"),B1o=o("This class cannot be instantiated directly using "),Qde=a("code"),I1o=o("__init__()"),N1o=o(" (throws an error)."),q1o=l(),Je=a("div"),F(Py.$$.fragment),j1o=l(),Wde=a("p"),D1o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),G1o=l(),Gi=a("p"),O1o=o("The processor class to instantiate is selected based on the "),Hde=a("code"),V1o=o("model_type"),X1o=o(` property of the config object (either
passed as an argument or loaded from `),Ude=a("code"),z1o=o("pretrained_model_name_or_path"),Q1o=o(" if possible):"),W1o=l(),ue=a("ul"),Tu=a("li"),Jde=a("strong"),H1o=o("clip"),U1o=o(" \u2014 "),jq=a("a"),J1o=o("CLIPProcessor"),Y1o=o(" (CLIP model)"),K1o=l(),Mu=a("li"),Yde=a("strong"),Z1o=o("flava"),eFo=o(" \u2014 "),Dq=a("a"),oFo=o("FlavaProcessor"),rFo=o(" (FLAVA model)"),tFo=l(),Eu=a("li"),Kde=a("strong"),aFo=o("groupvit"),nFo=o(" \u2014 "),Gq=a("a"),sFo=o("CLIPProcessor"),lFo=o(" (GroupViT model)"),iFo=l(),Cu=a("li"),Zde=a("strong"),dFo=o("layoutlmv2"),cFo=o(" \u2014 "),Oq=a("a"),mFo=o("LayoutLMv2Processor"),fFo=o(" (LayoutLMv2 model)"),gFo=l(),wu=a("li"),ece=a("strong"),hFo=o("layoutlmv3"),uFo=o(" \u2014 "),Vq=a("a"),pFo=o("LayoutLMv3Processor"),_Fo=o(" (LayoutLMv3 model)"),bFo=l(),Au=a("li"),oce=a("strong"),vFo=o("layoutxlm"),FFo=o(" \u2014 "),Xq=a("a"),TFo=o("LayoutXLMProcessor"),MFo=o(" (LayoutXLM model)"),EFo=l(),Lu=a("li"),rce=a("strong"),CFo=o("sew"),wFo=o(" \u2014 "),zq=a("a"),AFo=o("Wav2Vec2Processor"),LFo=o(" (SEW model)"),yFo=l(),yu=a("li"),tce=a("strong"),xFo=o("sew-d"),$Fo=o(" \u2014 "),Qq=a("a"),kFo=o("Wav2Vec2Processor"),SFo=o(" (SEW-D model)"),RFo=l(),xu=a("li"),ace=a("strong"),PFo=o("speech_to_text"),BFo=o(" \u2014 "),Wq=a("a"),IFo=o("Speech2TextProcessor"),NFo=o(" (Speech2Text model)"),qFo=l(),$u=a("li"),nce=a("strong"),jFo=o("speech_to_text_2"),DFo=o(" \u2014 "),Hq=a("a"),GFo=o("Speech2Text2Processor"),OFo=o(" (Speech2Text2 model)"),VFo=l(),ku=a("li"),sce=a("strong"),XFo=o("trocr"),zFo=o(" \u2014 "),Uq=a("a"),QFo=o("TrOCRProcessor"),WFo=o(" (TrOCR model)"),HFo=l(),Su=a("li"),lce=a("strong"),UFo=o("unispeech"),JFo=o(" \u2014 "),Jq=a("a"),YFo=o("Wav2Vec2Processor"),KFo=o(" (UniSpeech model)"),ZFo=l(),Ru=a("li"),ice=a("strong"),eTo=o("unispeech-sat"),oTo=o(" \u2014 "),Yq=a("a"),rTo=o("Wav2Vec2Processor"),tTo=o(" (UniSpeechSat model)"),aTo=l(),Pu=a("li"),dce=a("strong"),nTo=o("vilt"),sTo=o(" \u2014 "),Kq=a("a"),lTo=o("ViltProcessor"),iTo=o(" (ViLT model)"),dTo=l(),Bu=a("li"),cce=a("strong"),cTo=o("vision-text-dual-encoder"),mTo=o(" \u2014 "),Zq=a("a"),fTo=o("VisionTextDualEncoderProcessor"),gTo=o(" (VisionTextDualEncoder model)"),hTo=l(),Iu=a("li"),mce=a("strong"),uTo=o("wav2vec2"),pTo=o(" \u2014 "),ej=a("a"),_To=o("Wav2Vec2Processor"),bTo=o(" (Wav2Vec2 model)"),vTo=l(),Nu=a("li"),fce=a("strong"),FTo=o("wav2vec2-conformer"),TTo=o(" \u2014 "),oj=a("a"),MTo=o("Wav2Vec2Processor"),ETo=o(" (Wav2Vec2-Conformer model)"),CTo=l(),qu=a("li"),gce=a("strong"),wTo=o("wavlm"),ATo=o(" \u2014 "),rj=a("a"),LTo=o("Wav2Vec2Processor"),yTo=o(" (WavLM model)"),xTo=l(),F(ju.$$.fragment),$To=l(),F(Du.$$.fragment),kTo=l(),Gu=a("div"),F(By.$$.fragment),STo=l(),hce=a("p"),RTo=o("Register a new processor for this class."),BXe=l(),Oi=a("h2"),Ou=a("a"),uce=a("span"),F(Iy.$$.fragment),PTo=l(),pce=a("span"),BTo=o("AutoModel"),IXe=l(),ko=a("div"),F(Ny.$$.fragment),ITo=l(),Vi=a("p"),NTo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tj=a("a"),qTo=o("from_pretrained()"),jTo=o(" class method or the "),aj=a("a"),DTo=o("from_config()"),GTo=o(` class
method.`),OTo=l(),qy=a("p"),VTo=o("This class cannot be instantiated directly using "),_ce=a("code"),XTo=o("__init__()"),zTo=o(" (throws an error)."),QTo=l(),it=a("div"),F(jy.$$.fragment),WTo=l(),bce=a("p"),HTo=o("Instantiates one of the base model classes of the library from a configuration."),UTo=l(),Xi=a("p"),JTo=o(`Note:
Loading a model from its configuration file does `),vce=a("strong"),YTo=o("not"),KTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nj=a("a"),ZTo=o("from_pretrained()"),eMo=o(" to load the model weights."),oMo=l(),F(Vu.$$.fragment),rMo=l(),Ye=a("div"),F(Dy.$$.fragment),tMo=l(),Fce=a("p"),aMo=o("Instantiate one of the base model classes of the library from a pretrained model."),nMo=l(),Ia=a("p"),sMo=o("The model class to instantiate is selected based on the "),Tce=a("code"),lMo=o("model_type"),iMo=o(` property of the config object (either
passed as an argument or loaded from `),Mce=a("code"),dMo=o("pretrained_model_name_or_path"),cMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ece=a("code"),mMo=o("pretrained_model_name_or_path"),fMo=o(":"),gMo=l(),y=a("ul"),Xu=a("li"),Cce=a("strong"),hMo=o("albert"),uMo=o(" \u2014 "),sj=a("a"),pMo=o("AlbertModel"),_Mo=o(" (ALBERT model)"),bMo=l(),zu=a("li"),wce=a("strong"),vMo=o("bart"),FMo=o(" \u2014 "),lj=a("a"),TMo=o("BartModel"),MMo=o(" (BART model)"),EMo=l(),Qu=a("li"),Ace=a("strong"),CMo=o("beit"),wMo=o(" \u2014 "),ij=a("a"),AMo=o("BeitModel"),LMo=o(" (BEiT model)"),yMo=l(),Wu=a("li"),Lce=a("strong"),xMo=o("bert"),$Mo=o(" \u2014 "),dj=a("a"),kMo=o("BertModel"),SMo=o(" (BERT model)"),RMo=l(),Hu=a("li"),yce=a("strong"),PMo=o("bert-generation"),BMo=o(" \u2014 "),cj=a("a"),IMo=o("BertGenerationEncoder"),NMo=o(" (Bert Generation model)"),qMo=l(),Uu=a("li"),xce=a("strong"),jMo=o("big_bird"),DMo=o(" \u2014 "),mj=a("a"),GMo=o("BigBirdModel"),OMo=o(" (BigBird model)"),VMo=l(),Ju=a("li"),$ce=a("strong"),XMo=o("bigbird_pegasus"),zMo=o(" \u2014 "),fj=a("a"),QMo=o("BigBirdPegasusModel"),WMo=o(" (BigBird-Pegasus model)"),HMo=l(),Yu=a("li"),kce=a("strong"),UMo=o("blenderbot"),JMo=o(" \u2014 "),gj=a("a"),YMo=o("BlenderbotModel"),KMo=o(" (Blenderbot model)"),ZMo=l(),Ku=a("li"),Sce=a("strong"),e4o=o("blenderbot-small"),o4o=o(" \u2014 "),hj=a("a"),r4o=o("BlenderbotSmallModel"),t4o=o(" (BlenderbotSmall model)"),a4o=l(),Zu=a("li"),Rce=a("strong"),n4o=o("bloom"),s4o=o(" \u2014 "),uj=a("a"),l4o=o("BloomModel"),i4o=o(" (BLOOM model)"),d4o=l(),ep=a("li"),Pce=a("strong"),c4o=o("camembert"),m4o=o(" \u2014 "),pj=a("a"),f4o=o("CamembertModel"),g4o=o(" (CamemBERT model)"),h4o=l(),op=a("li"),Bce=a("strong"),u4o=o("canine"),p4o=o(" \u2014 "),_j=a("a"),_4o=o("CanineModel"),b4o=o(" (CANINE model)"),v4o=l(),rp=a("li"),Ice=a("strong"),F4o=o("clip"),T4o=o(" \u2014 "),bj=a("a"),M4o=o("CLIPModel"),E4o=o(" (CLIP model)"),C4o=l(),tp=a("li"),Nce=a("strong"),w4o=o("codegen"),A4o=o(" \u2014 "),vj=a("a"),L4o=o("CodeGenModel"),y4o=o(" (CodeGen model)"),x4o=l(),ap=a("li"),qce=a("strong"),$4o=o("convbert"),k4o=o(" \u2014 "),Fj=a("a"),S4o=o("ConvBertModel"),R4o=o(" (ConvBERT model)"),P4o=l(),np=a("li"),jce=a("strong"),B4o=o("convnext"),I4o=o(" \u2014 "),Tj=a("a"),N4o=o("ConvNextModel"),q4o=o(" (ConvNeXT model)"),j4o=l(),sp=a("li"),Dce=a("strong"),D4o=o("ctrl"),G4o=o(" \u2014 "),Mj=a("a"),O4o=o("CTRLModel"),V4o=o(" (CTRL model)"),X4o=l(),lp=a("li"),Gce=a("strong"),z4o=o("cvt"),Q4o=o(" \u2014 "),Ej=a("a"),W4o=o("CvtModel"),H4o=o(" (CvT model)"),U4o=l(),ip=a("li"),Oce=a("strong"),J4o=o("data2vec-audio"),Y4o=o(" \u2014 "),Cj=a("a"),K4o=o("Data2VecAudioModel"),Z4o=o(" (Data2VecAudio model)"),eEo=l(),dp=a("li"),Vce=a("strong"),oEo=o("data2vec-text"),rEo=o(" \u2014 "),wj=a("a"),tEo=o("Data2VecTextModel"),aEo=o(" (Data2VecText model)"),nEo=l(),cp=a("li"),Xce=a("strong"),sEo=o("data2vec-vision"),lEo=o(" \u2014 "),Aj=a("a"),iEo=o("Data2VecVisionModel"),dEo=o(" (Data2VecVision model)"),cEo=l(),mp=a("li"),zce=a("strong"),mEo=o("deberta"),fEo=o(" \u2014 "),Lj=a("a"),gEo=o("DebertaModel"),hEo=o(" (DeBERTa model)"),uEo=l(),fp=a("li"),Qce=a("strong"),pEo=o("deberta-v2"),_Eo=o(" \u2014 "),yj=a("a"),bEo=o("DebertaV2Model"),vEo=o(" (DeBERTa-v2 model)"),FEo=l(),gp=a("li"),Wce=a("strong"),TEo=o("decision_transformer"),MEo=o(" \u2014 "),xj=a("a"),EEo=o("DecisionTransformerModel"),CEo=o(" (Decision Transformer model)"),wEo=l(),hp=a("li"),Hce=a("strong"),AEo=o("deit"),LEo=o(" \u2014 "),$j=a("a"),yEo=o("DeiTModel"),xEo=o(" (DeiT model)"),$Eo=l(),up=a("li"),Uce=a("strong"),kEo=o("detr"),SEo=o(" \u2014 "),kj=a("a"),REo=o("DetrModel"),PEo=o(" (DETR model)"),BEo=l(),pp=a("li"),Jce=a("strong"),IEo=o("distilbert"),NEo=o(" \u2014 "),Sj=a("a"),qEo=o("DistilBertModel"),jEo=o(" (DistilBERT model)"),DEo=l(),_p=a("li"),Yce=a("strong"),GEo=o("dpr"),OEo=o(" \u2014 "),Rj=a("a"),VEo=o("DPRQuestionEncoder"),XEo=o(" (DPR model)"),zEo=l(),bp=a("li"),Kce=a("strong"),QEo=o("dpt"),WEo=o(" \u2014 "),Pj=a("a"),HEo=o("DPTModel"),UEo=o(" (DPT model)"),JEo=l(),vp=a("li"),Zce=a("strong"),YEo=o("electra"),KEo=o(" \u2014 "),Bj=a("a"),ZEo=o("ElectraModel"),eCo=o(" (ELECTRA model)"),oCo=l(),Fp=a("li"),eme=a("strong"),rCo=o("flaubert"),tCo=o(" \u2014 "),Ij=a("a"),aCo=o("FlaubertModel"),nCo=o(" (FlauBERT model)"),sCo=l(),Tp=a("li"),ome=a("strong"),lCo=o("flava"),iCo=o(" \u2014 "),Nj=a("a"),dCo=o("FlavaModel"),cCo=o(" (FLAVA model)"),mCo=l(),Mp=a("li"),rme=a("strong"),fCo=o("fnet"),gCo=o(" \u2014 "),qj=a("a"),hCo=o("FNetModel"),uCo=o(" (FNet model)"),pCo=l(),Ep=a("li"),tme=a("strong"),_Co=o("fsmt"),bCo=o(" \u2014 "),jj=a("a"),vCo=o("FSMTModel"),FCo=o(" (FairSeq Machine-Translation model)"),TCo=l(),Hs=a("li"),ame=a("strong"),MCo=o("funnel"),ECo=o(" \u2014 "),Dj=a("a"),CCo=o("FunnelModel"),wCo=o(" or "),Gj=a("a"),ACo=o("FunnelBaseModel"),LCo=o(" (Funnel Transformer model)"),yCo=l(),Cp=a("li"),nme=a("strong"),xCo=o("glpn"),$Co=o(" \u2014 "),Oj=a("a"),kCo=o("GLPNModel"),SCo=o(" (GLPN model)"),RCo=l(),wp=a("li"),sme=a("strong"),PCo=o("gpt2"),BCo=o(" \u2014 "),Vj=a("a"),ICo=o("GPT2Model"),NCo=o(" (OpenAI GPT-2 model)"),qCo=l(),Ap=a("li"),lme=a("strong"),jCo=o("gpt_neo"),DCo=o(" \u2014 "),Xj=a("a"),GCo=o("GPTNeoModel"),OCo=o(" (GPT Neo model)"),VCo=l(),Lp=a("li"),ime=a("strong"),XCo=o("gpt_neox"),zCo=o(" \u2014 "),zj=a("a"),QCo=o("GPTNeoXModel"),WCo=o(" (GPT NeoX model)"),HCo=l(),yp=a("li"),dme=a("strong"),UCo=o("gptj"),JCo=o(" \u2014 "),Qj=a("a"),YCo=o("GPTJModel"),KCo=o(" (GPT-J model)"),ZCo=l(),xp=a("li"),cme=a("strong"),e3o=o("groupvit"),o3o=o(" \u2014 "),Wj=a("a"),r3o=o("GroupViTModel"),t3o=o(" (GroupViT model)"),a3o=l(),$p=a("li"),mme=a("strong"),n3o=o("hubert"),s3o=o(" \u2014 "),Hj=a("a"),l3o=o("HubertModel"),i3o=o(" (Hubert model)"),d3o=l(),kp=a("li"),fme=a("strong"),c3o=o("ibert"),m3o=o(" \u2014 "),Uj=a("a"),f3o=o("IBertModel"),g3o=o(" (I-BERT model)"),h3o=l(),Sp=a("li"),gme=a("strong"),u3o=o("imagegpt"),p3o=o(" \u2014 "),Jj=a("a"),_3o=o("ImageGPTModel"),b3o=o(" (ImageGPT model)"),v3o=l(),Rp=a("li"),hme=a("strong"),F3o=o("layoutlm"),T3o=o(" \u2014 "),Yj=a("a"),M3o=o("LayoutLMModel"),E3o=o(" (LayoutLM model)"),C3o=l(),Pp=a("li"),ume=a("strong"),w3o=o("layoutlmv2"),A3o=o(" \u2014 "),Kj=a("a"),L3o=o("LayoutLMv2Model"),y3o=o(" (LayoutLMv2 model)"),x3o=l(),Bp=a("li"),pme=a("strong"),$3o=o("layoutlmv3"),k3o=o(" \u2014 "),Zj=a("a"),S3o=o("LayoutLMv3Model"),R3o=o(" (LayoutLMv3 model)"),P3o=l(),Ip=a("li"),_me=a("strong"),B3o=o("led"),I3o=o(" \u2014 "),eD=a("a"),N3o=o("LEDModel"),q3o=o(" (LED model)"),j3o=l(),Np=a("li"),bme=a("strong"),D3o=o("levit"),G3o=o(" \u2014 "),oD=a("a"),O3o=o("LevitModel"),V3o=o(" (LeViT model)"),X3o=l(),qp=a("li"),vme=a("strong"),z3o=o("longformer"),Q3o=o(" \u2014 "),rD=a("a"),W3o=o("LongformerModel"),H3o=o(" (Longformer model)"),U3o=l(),jp=a("li"),Fme=a("strong"),J3o=o("longt5"),Y3o=o(" \u2014 "),tD=a("a"),K3o=o("LongT5Model"),Z3o=o(" (LongT5 model)"),e5o=l(),Dp=a("li"),Tme=a("strong"),o5o=o("luke"),r5o=o(" \u2014 "),aD=a("a"),t5o=o("LukeModel"),a5o=o(" (LUKE model)"),n5o=l(),Gp=a("li"),Mme=a("strong"),s5o=o("lxmert"),l5o=o(" \u2014 "),nD=a("a"),i5o=o("LxmertModel"),d5o=o(" (LXMERT model)"),c5o=l(),Op=a("li"),Eme=a("strong"),m5o=o("m2m_100"),f5o=o(" \u2014 "),sD=a("a"),g5o=o("M2M100Model"),h5o=o(" (M2M100 model)"),u5o=l(),Vp=a("li"),Cme=a("strong"),p5o=o("marian"),_5o=o(" \u2014 "),lD=a("a"),b5o=o("MarianModel"),v5o=o(" (Marian model)"),F5o=l(),Xp=a("li"),wme=a("strong"),T5o=o("maskformer"),M5o=o(" \u2014 "),iD=a("a"),E5o=o("MaskFormerModel"),C5o=o(" (MaskFormer model)"),w5o=l(),zp=a("li"),Ame=a("strong"),A5o=o("mbart"),L5o=o(" \u2014 "),dD=a("a"),y5o=o("MBartModel"),x5o=o(" (mBART model)"),$5o=l(),Qp=a("li"),Lme=a("strong"),k5o=o("mctct"),S5o=o(" \u2014 "),cD=a("a"),R5o=o("MCTCTModel"),P5o=o(" (M-CTC-T model)"),B5o=l(),Wp=a("li"),yme=a("strong"),I5o=o("megatron-bert"),N5o=o(" \u2014 "),mD=a("a"),q5o=o("MegatronBertModel"),j5o=o(" (Megatron-BERT model)"),D5o=l(),Hp=a("li"),xme=a("strong"),G5o=o("mobilebert"),O5o=o(" \u2014 "),fD=a("a"),V5o=o("MobileBertModel"),X5o=o(" (MobileBERT model)"),z5o=l(),Up=a("li"),$me=a("strong"),Q5o=o("mobilevit"),W5o=o(" \u2014 "),gD=a("a"),H5o=o("MobileViTModel"),U5o=o(" (MobileViT model)"),J5o=l(),Jp=a("li"),kme=a("strong"),Y5o=o("mpnet"),K5o=o(" \u2014 "),hD=a("a"),Z5o=o("MPNetModel"),e0o=o(" (MPNet model)"),o0o=l(),Yp=a("li"),Sme=a("strong"),r0o=o("mt5"),t0o=o(" \u2014 "),uD=a("a"),a0o=o("MT5Model"),n0o=o(" (MT5 model)"),s0o=l(),Kp=a("li"),Rme=a("strong"),l0o=o("mvp"),i0o=o(" \u2014 "),pD=a("a"),d0o=o("MvpModel"),c0o=o(" (MVP model)"),m0o=l(),Zp=a("li"),Pme=a("strong"),f0o=o("nezha"),g0o=o(" \u2014 "),_D=a("a"),h0o=o("NezhaModel"),u0o=o(" (Nezha model)"),p0o=l(),e_=a("li"),Bme=a("strong"),_0o=o("nllb"),b0o=o(" \u2014 "),bD=a("a"),v0o=o("M2M100Model"),F0o=o(" (NLLB model)"),T0o=l(),o_=a("li"),Ime=a("strong"),M0o=o("nystromformer"),E0o=o(" \u2014 "),vD=a("a"),C0o=o("NystromformerModel"),w0o=o(" (Nystr\xF6mformer model)"),A0o=l(),r_=a("li"),Nme=a("strong"),L0o=o("openai-gpt"),y0o=o(" \u2014 "),FD=a("a"),x0o=o("OpenAIGPTModel"),$0o=o(" (OpenAI GPT model)"),k0o=l(),t_=a("li"),qme=a("strong"),S0o=o("opt"),R0o=o(" \u2014 "),TD=a("a"),P0o=o("OPTModel"),B0o=o(" (OPT model)"),I0o=l(),a_=a("li"),jme=a("strong"),N0o=o("pegasus"),q0o=o(" \u2014 "),MD=a("a"),j0o=o("PegasusModel"),D0o=o(" (Pegasus model)"),G0o=l(),n_=a("li"),Dme=a("strong"),O0o=o("perceiver"),V0o=o(" \u2014 "),ED=a("a"),X0o=o("PerceiverModel"),z0o=o(" (Perceiver model)"),Q0o=l(),s_=a("li"),Gme=a("strong"),W0o=o("plbart"),H0o=o(" \u2014 "),CD=a("a"),U0o=o("PLBartModel"),J0o=o(" (PLBart model)"),Y0o=l(),l_=a("li"),Ome=a("strong"),K0o=o("poolformer"),Z0o=o(" \u2014 "),wD=a("a"),ewo=o("PoolFormerModel"),owo=o(" (PoolFormer model)"),rwo=l(),i_=a("li"),Vme=a("strong"),two=o("prophetnet"),awo=o(" \u2014 "),AD=a("a"),nwo=o("ProphetNetModel"),swo=o(" (ProphetNet model)"),lwo=l(),d_=a("li"),Xme=a("strong"),iwo=o("qdqbert"),dwo=o(" \u2014 "),LD=a("a"),cwo=o("QDQBertModel"),mwo=o(" (QDQBert model)"),fwo=l(),c_=a("li"),zme=a("strong"),gwo=o("reformer"),hwo=o(" \u2014 "),yD=a("a"),uwo=o("ReformerModel"),pwo=o(" (Reformer model)"),_wo=l(),m_=a("li"),Qme=a("strong"),bwo=o("regnet"),vwo=o(" \u2014 "),xD=a("a"),Fwo=o("RegNetModel"),Two=o(" (RegNet model)"),Mwo=l(),f_=a("li"),Wme=a("strong"),Ewo=o("rembert"),Cwo=o(" \u2014 "),$D=a("a"),wwo=o("RemBertModel"),Awo=o(" (RemBERT model)"),Lwo=l(),g_=a("li"),Hme=a("strong"),ywo=o("resnet"),xwo=o(" \u2014 "),kD=a("a"),$wo=o("ResNetModel"),kwo=o(" (ResNet model)"),Swo=l(),h_=a("li"),Ume=a("strong"),Rwo=o("retribert"),Pwo=o(" \u2014 "),SD=a("a"),Bwo=o("RetriBertModel"),Iwo=o(" (RetriBERT model)"),Nwo=l(),u_=a("li"),Jme=a("strong"),qwo=o("roberta"),jwo=o(" \u2014 "),RD=a("a"),Dwo=o("RobertaModel"),Gwo=o(" (RoBERTa model)"),Owo=l(),p_=a("li"),Yme=a("strong"),Vwo=o("roformer"),Xwo=o(" \u2014 "),PD=a("a"),zwo=o("RoFormerModel"),Qwo=o(" (RoFormer model)"),Wwo=l(),__=a("li"),Kme=a("strong"),Hwo=o("segformer"),Uwo=o(" \u2014 "),BD=a("a"),Jwo=o("SegformerModel"),Ywo=o(" (SegFormer model)"),Kwo=l(),b_=a("li"),Zme=a("strong"),Zwo=o("sew"),eAo=o(" \u2014 "),ID=a("a"),oAo=o("SEWModel"),rAo=o(" (SEW model)"),tAo=l(),v_=a("li"),efe=a("strong"),aAo=o("sew-d"),nAo=o(" \u2014 "),ND=a("a"),sAo=o("SEWDModel"),lAo=o(" (SEW-D model)"),iAo=l(),F_=a("li"),ofe=a("strong"),dAo=o("speech_to_text"),cAo=o(" \u2014 "),qD=a("a"),mAo=o("Speech2TextModel"),fAo=o(" (Speech2Text model)"),gAo=l(),T_=a("li"),rfe=a("strong"),hAo=o("splinter"),uAo=o(" \u2014 "),jD=a("a"),pAo=o("SplinterModel"),_Ao=o(" (Splinter model)"),bAo=l(),M_=a("li"),tfe=a("strong"),vAo=o("squeezebert"),FAo=o(" \u2014 "),DD=a("a"),TAo=o("SqueezeBertModel"),MAo=o(" (SqueezeBERT model)"),EAo=l(),E_=a("li"),afe=a("strong"),CAo=o("swin"),wAo=o(" \u2014 "),GD=a("a"),AAo=o("SwinModel"),LAo=o(" (Swin Transformer model)"),yAo=l(),C_=a("li"),nfe=a("strong"),xAo=o("t5"),$Ao=o(" \u2014 "),OD=a("a"),kAo=o("T5Model"),SAo=o(" (T5 model)"),RAo=l(),w_=a("li"),sfe=a("strong"),PAo=o("tapas"),BAo=o(" \u2014 "),VD=a("a"),IAo=o("TapasModel"),NAo=o(" (TAPAS model)"),qAo=l(),A_=a("li"),lfe=a("strong"),jAo=o("trajectory_transformer"),DAo=o(" \u2014 "),XD=a("a"),GAo=o("TrajectoryTransformerModel"),OAo=o(" (Trajectory Transformer model)"),VAo=l(),L_=a("li"),ife=a("strong"),XAo=o("transfo-xl"),zAo=o(" \u2014 "),zD=a("a"),QAo=o("TransfoXLModel"),WAo=o(" (Transformer-XL model)"),HAo=l(),y_=a("li"),dfe=a("strong"),UAo=o("unispeech"),JAo=o(" \u2014 "),QD=a("a"),YAo=o("UniSpeechModel"),KAo=o(" (UniSpeech model)"),ZAo=l(),x_=a("li"),cfe=a("strong"),e6o=o("unispeech-sat"),o6o=o(" \u2014 "),WD=a("a"),r6o=o("UniSpeechSatModel"),t6o=o(" (UniSpeechSat model)"),a6o=l(),$_=a("li"),mfe=a("strong"),n6o=o("van"),s6o=o(" \u2014 "),HD=a("a"),l6o=o("VanModel"),i6o=o(" (VAN model)"),d6o=l(),k_=a("li"),ffe=a("strong"),c6o=o("vilt"),m6o=o(" \u2014 "),UD=a("a"),f6o=o("ViltModel"),g6o=o(" (ViLT model)"),h6o=l(),S_=a("li"),gfe=a("strong"),u6o=o("vision-text-dual-encoder"),p6o=o(" \u2014 "),JD=a("a"),_6o=o("VisionTextDualEncoderModel"),b6o=o(" (VisionTextDualEncoder model)"),v6o=l(),R_=a("li"),hfe=a("strong"),F6o=o("visual_bert"),T6o=o(" \u2014 "),YD=a("a"),M6o=o("VisualBertModel"),E6o=o(" (VisualBERT model)"),C6o=l(),P_=a("li"),ufe=a("strong"),w6o=o("vit"),A6o=o(" \u2014 "),KD=a("a"),L6o=o("ViTModel"),y6o=o(" (ViT model)"),x6o=l(),B_=a("li"),pfe=a("strong"),$6o=o("vit_mae"),k6o=o(" \u2014 "),ZD=a("a"),S6o=o("ViTMAEModel"),R6o=o(" (ViTMAE model)"),P6o=l(),I_=a("li"),_fe=a("strong"),B6o=o("wav2vec2"),I6o=o(" \u2014 "),eG=a("a"),N6o=o("Wav2Vec2Model"),q6o=o(" (Wav2Vec2 model)"),j6o=l(),N_=a("li"),bfe=a("strong"),D6o=o("wav2vec2-conformer"),G6o=o(" \u2014 "),oG=a("a"),O6o=o("Wav2Vec2ConformerModel"),V6o=o(" (Wav2Vec2-Conformer model)"),X6o=l(),q_=a("li"),vfe=a("strong"),z6o=o("wavlm"),Q6o=o(" \u2014 "),rG=a("a"),W6o=o("WavLMModel"),H6o=o(" (WavLM model)"),U6o=l(),j_=a("li"),Ffe=a("strong"),J6o=o("xglm"),Y6o=o(" \u2014 "),tG=a("a"),K6o=o("XGLMModel"),Z6o=o(" (XGLM model)"),e7o=l(),D_=a("li"),Tfe=a("strong"),o7o=o("xlm"),r7o=o(" \u2014 "),aG=a("a"),t7o=o("XLMModel"),a7o=o(" (XLM model)"),n7o=l(),G_=a("li"),Mfe=a("strong"),s7o=o("xlm-prophetnet"),l7o=o(" \u2014 "),nG=a("a"),i7o=o("XLMProphetNetModel"),d7o=o(" (XLM-ProphetNet model)"),c7o=l(),O_=a("li"),Efe=a("strong"),m7o=o("xlm-roberta"),f7o=o(" \u2014 "),sG=a("a"),g7o=o("XLMRobertaModel"),h7o=o(" (XLM-RoBERTa model)"),u7o=l(),V_=a("li"),Cfe=a("strong"),p7o=o("xlm-roberta-xl"),_7o=o(" \u2014 "),lG=a("a"),b7o=o("XLMRobertaXLModel"),v7o=o(" (XLM-RoBERTa-XL model)"),F7o=l(),X_=a("li"),wfe=a("strong"),T7o=o("xlnet"),M7o=o(" \u2014 "),iG=a("a"),E7o=o("XLNetModel"),C7o=o(" (XLNet model)"),w7o=l(),z_=a("li"),Afe=a("strong"),A7o=o("yolos"),L7o=o(" \u2014 "),dG=a("a"),y7o=o("YolosModel"),x7o=o(" (YOLOS model)"),$7o=l(),Q_=a("li"),Lfe=a("strong"),k7o=o("yoso"),S7o=o(" \u2014 "),cG=a("a"),R7o=o("YosoModel"),P7o=o(" (YOSO model)"),B7o=l(),W_=a("p"),I7o=o("The model is set in evaluation mode by default using "),yfe=a("code"),N7o=o("model.eval()"),q7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xfe=a("code"),j7o=o("model.train()"),D7o=l(),F(H_.$$.fragment),NXe=l(),zi=a("h2"),U_=a("a"),$fe=a("span"),F(Gy.$$.fragment),G7o=l(),kfe=a("span"),O7o=o("AutoModelForPreTraining"),qXe=l(),So=a("div"),F(Oy.$$.fragment),V7o=l(),Qi=a("p"),X7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),mG=a("a"),z7o=o("from_pretrained()"),Q7o=o(" class method or the "),fG=a("a"),W7o=o("from_config()"),H7o=o(` class
method.`),U7o=l(),Vy=a("p"),J7o=o("This class cannot be instantiated directly using "),Sfe=a("code"),Y7o=o("__init__()"),K7o=o(" (throws an error)."),Z7o=l(),dt=a("div"),F(Xy.$$.fragment),eLo=l(),Rfe=a("p"),oLo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rLo=l(),Wi=a("p"),tLo=o(`Note:
Loading a model from its configuration file does `),Pfe=a("strong"),aLo=o("not"),nLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gG=a("a"),sLo=o("from_pretrained()"),lLo=o(" to load the model weights."),iLo=l(),F(J_.$$.fragment),dLo=l(),Ke=a("div"),F(zy.$$.fragment),cLo=l(),Bfe=a("p"),mLo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fLo=l(),Na=a("p"),gLo=o("The model class to instantiate is selected based on the "),Ife=a("code"),hLo=o("model_type"),uLo=o(` property of the config object (either
passed as an argument or loaded from `),Nfe=a("code"),pLo=o("pretrained_model_name_or_path"),_Lo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qfe=a("code"),bLo=o("pretrained_model_name_or_path"),vLo=o(":"),FLo=l(),G=a("ul"),Y_=a("li"),jfe=a("strong"),TLo=o("albert"),MLo=o(" \u2014 "),hG=a("a"),ELo=o("AlbertForPreTraining"),CLo=o(" (ALBERT model)"),wLo=l(),K_=a("li"),Dfe=a("strong"),ALo=o("bart"),LLo=o(" \u2014 "),uG=a("a"),yLo=o("BartForConditionalGeneration"),xLo=o(" (BART model)"),$Lo=l(),Z_=a("li"),Gfe=a("strong"),kLo=o("bert"),SLo=o(" \u2014 "),pG=a("a"),RLo=o("BertForPreTraining"),PLo=o(" (BERT model)"),BLo=l(),e2=a("li"),Ofe=a("strong"),ILo=o("big_bird"),NLo=o(" \u2014 "),_G=a("a"),qLo=o("BigBirdForPreTraining"),jLo=o(" (BigBird model)"),DLo=l(),o2=a("li"),Vfe=a("strong"),GLo=o("bloom"),OLo=o(" \u2014 "),bG=a("a"),VLo=o("BloomForCausalLM"),XLo=o(" (BLOOM model)"),zLo=l(),r2=a("li"),Xfe=a("strong"),QLo=o("camembert"),WLo=o(" \u2014 "),vG=a("a"),HLo=o("CamembertForMaskedLM"),ULo=o(" (CamemBERT model)"),JLo=l(),t2=a("li"),zfe=a("strong"),YLo=o("ctrl"),KLo=o(" \u2014 "),FG=a("a"),ZLo=o("CTRLLMHeadModel"),eyo=o(" (CTRL model)"),oyo=l(),a2=a("li"),Qfe=a("strong"),ryo=o("data2vec-text"),tyo=o(" \u2014 "),TG=a("a"),ayo=o("Data2VecTextForMaskedLM"),nyo=o(" (Data2VecText model)"),syo=l(),n2=a("li"),Wfe=a("strong"),lyo=o("deberta"),iyo=o(" \u2014 "),MG=a("a"),dyo=o("DebertaForMaskedLM"),cyo=o(" (DeBERTa model)"),myo=l(),s2=a("li"),Hfe=a("strong"),fyo=o("deberta-v2"),gyo=o(" \u2014 "),EG=a("a"),hyo=o("DebertaV2ForMaskedLM"),uyo=o(" (DeBERTa-v2 model)"),pyo=l(),l2=a("li"),Ufe=a("strong"),_yo=o("distilbert"),byo=o(" \u2014 "),CG=a("a"),vyo=o("DistilBertForMaskedLM"),Fyo=o(" (DistilBERT model)"),Tyo=l(),i2=a("li"),Jfe=a("strong"),Myo=o("electra"),Eyo=o(" \u2014 "),wG=a("a"),Cyo=o("ElectraForPreTraining"),wyo=o(" (ELECTRA model)"),Ayo=l(),d2=a("li"),Yfe=a("strong"),Lyo=o("flaubert"),yyo=o(" \u2014 "),AG=a("a"),xyo=o("FlaubertWithLMHeadModel"),$yo=o(" (FlauBERT model)"),kyo=l(),c2=a("li"),Kfe=a("strong"),Syo=o("flava"),Ryo=o(" \u2014 "),LG=a("a"),Pyo=o("FlavaForPreTraining"),Byo=o(" (FLAVA model)"),Iyo=l(),m2=a("li"),Zfe=a("strong"),Nyo=o("fnet"),qyo=o(" \u2014 "),yG=a("a"),jyo=o("FNetForPreTraining"),Dyo=o(" (FNet model)"),Gyo=l(),f2=a("li"),ege=a("strong"),Oyo=o("fsmt"),Vyo=o(" \u2014 "),xG=a("a"),Xyo=o("FSMTForConditionalGeneration"),zyo=o(" (FairSeq Machine-Translation model)"),Qyo=l(),g2=a("li"),oge=a("strong"),Wyo=o("funnel"),Hyo=o(" \u2014 "),$G=a("a"),Uyo=o("FunnelForPreTraining"),Jyo=o(" (Funnel Transformer model)"),Yyo=l(),h2=a("li"),rge=a("strong"),Kyo=o("gpt2"),Zyo=o(" \u2014 "),kG=a("a"),e8o=o("GPT2LMHeadModel"),o8o=o(" (OpenAI GPT-2 model)"),r8o=l(),u2=a("li"),tge=a("strong"),t8o=o("ibert"),a8o=o(" \u2014 "),SG=a("a"),n8o=o("IBertForMaskedLM"),s8o=o(" (I-BERT model)"),l8o=l(),p2=a("li"),age=a("strong"),i8o=o("layoutlm"),d8o=o(" \u2014 "),RG=a("a"),c8o=o("LayoutLMForMaskedLM"),m8o=o(" (LayoutLM model)"),f8o=l(),_2=a("li"),nge=a("strong"),g8o=o("longformer"),h8o=o(" \u2014 "),PG=a("a"),u8o=o("LongformerForMaskedLM"),p8o=o(" (Longformer model)"),_8o=l(),b2=a("li"),sge=a("strong"),b8o=o("lxmert"),v8o=o(" \u2014 "),BG=a("a"),F8o=o("LxmertForPreTraining"),T8o=o(" (LXMERT model)"),M8o=l(),v2=a("li"),lge=a("strong"),E8o=o("megatron-bert"),C8o=o(" \u2014 "),IG=a("a"),w8o=o("MegatronBertForPreTraining"),A8o=o(" (Megatron-BERT model)"),L8o=l(),F2=a("li"),ige=a("strong"),y8o=o("mobilebert"),x8o=o(" \u2014 "),NG=a("a"),$8o=o("MobileBertForPreTraining"),k8o=o(" (MobileBERT model)"),S8o=l(),T2=a("li"),dge=a("strong"),R8o=o("mpnet"),P8o=o(" \u2014 "),qG=a("a"),B8o=o("MPNetForMaskedLM"),I8o=o(" (MPNet model)"),N8o=l(),M2=a("li"),cge=a("strong"),q8o=o("mvp"),j8o=o(" \u2014 "),jG=a("a"),D8o=o("MvpForConditionalGeneration"),G8o=o(" (MVP model)"),O8o=l(),E2=a("li"),mge=a("strong"),V8o=o("nezha"),X8o=o(" \u2014 "),DG=a("a"),z8o=o("NezhaForPreTraining"),Q8o=o(" (Nezha model)"),W8o=l(),C2=a("li"),fge=a("strong"),H8o=o("openai-gpt"),U8o=o(" \u2014 "),GG=a("a"),J8o=o("OpenAIGPTLMHeadModel"),Y8o=o(" (OpenAI GPT model)"),K8o=l(),w2=a("li"),gge=a("strong"),Z8o=o("retribert"),e9o=o(" \u2014 "),OG=a("a"),o9o=o("RetriBertModel"),r9o=o(" (RetriBERT model)"),t9o=l(),A2=a("li"),hge=a("strong"),a9o=o("roberta"),n9o=o(" \u2014 "),VG=a("a"),s9o=o("RobertaForMaskedLM"),l9o=o(" (RoBERTa model)"),i9o=l(),L2=a("li"),uge=a("strong"),d9o=o("splinter"),c9o=o(" \u2014 "),XG=a("a"),m9o=o("SplinterForPreTraining"),f9o=o(" (Splinter model)"),g9o=l(),y2=a("li"),pge=a("strong"),h9o=o("squeezebert"),u9o=o(" \u2014 "),zG=a("a"),p9o=o("SqueezeBertForMaskedLM"),_9o=o(" (SqueezeBERT model)"),b9o=l(),x2=a("li"),_ge=a("strong"),v9o=o("t5"),F9o=o(" \u2014 "),QG=a("a"),T9o=o("T5ForConditionalGeneration"),M9o=o(" (T5 model)"),E9o=l(),$2=a("li"),bge=a("strong"),C9o=o("tapas"),w9o=o(" \u2014 "),WG=a("a"),A9o=o("TapasForMaskedLM"),L9o=o(" (TAPAS model)"),y9o=l(),k2=a("li"),vge=a("strong"),x9o=o("transfo-xl"),$9o=o(" \u2014 "),HG=a("a"),k9o=o("TransfoXLLMHeadModel"),S9o=o(" (Transformer-XL model)"),R9o=l(),S2=a("li"),Fge=a("strong"),P9o=o("unispeech"),B9o=o(" \u2014 "),UG=a("a"),I9o=o("UniSpeechForPreTraining"),N9o=o(" (UniSpeech model)"),q9o=l(),R2=a("li"),Tge=a("strong"),j9o=o("unispeech-sat"),D9o=o(" \u2014 "),JG=a("a"),G9o=o("UniSpeechSatForPreTraining"),O9o=o(" (UniSpeechSat model)"),V9o=l(),P2=a("li"),Mge=a("strong"),X9o=o("visual_bert"),z9o=o(" \u2014 "),YG=a("a"),Q9o=o("VisualBertForPreTraining"),W9o=o(" (VisualBERT model)"),H9o=l(),B2=a("li"),Ege=a("strong"),U9o=o("vit_mae"),J9o=o(" \u2014 "),KG=a("a"),Y9o=o("ViTMAEForPreTraining"),K9o=o(" (ViTMAE model)"),Z9o=l(),I2=a("li"),Cge=a("strong"),exo=o("wav2vec2"),oxo=o(" \u2014 "),ZG=a("a"),rxo=o("Wav2Vec2ForPreTraining"),txo=o(" (Wav2Vec2 model)"),axo=l(),N2=a("li"),wge=a("strong"),nxo=o("wav2vec2-conformer"),sxo=o(" \u2014 "),eO=a("a"),lxo=o("Wav2Vec2ConformerForPreTraining"),ixo=o(" (Wav2Vec2-Conformer model)"),dxo=l(),q2=a("li"),Age=a("strong"),cxo=o("xlm"),mxo=o(" \u2014 "),oO=a("a"),fxo=o("XLMWithLMHeadModel"),gxo=o(" (XLM model)"),hxo=l(),j2=a("li"),Lge=a("strong"),uxo=o("xlm-roberta"),pxo=o(" \u2014 "),rO=a("a"),_xo=o("XLMRobertaForMaskedLM"),bxo=o(" (XLM-RoBERTa model)"),vxo=l(),D2=a("li"),yge=a("strong"),Fxo=o("xlm-roberta-xl"),Txo=o(" \u2014 "),tO=a("a"),Mxo=o("XLMRobertaXLForMaskedLM"),Exo=o(" (XLM-RoBERTa-XL model)"),Cxo=l(),G2=a("li"),xge=a("strong"),wxo=o("xlnet"),Axo=o(" \u2014 "),aO=a("a"),Lxo=o("XLNetLMHeadModel"),yxo=o(" (XLNet model)"),xxo=l(),O2=a("p"),$xo=o("The model is set in evaluation mode by default using "),$ge=a("code"),kxo=o("model.eval()"),Sxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kge=a("code"),Rxo=o("model.train()"),Pxo=l(),F(V2.$$.fragment),jXe=l(),Hi=a("h2"),X2=a("a"),Sge=a("span"),F(Qy.$$.fragment),Bxo=l(),Rge=a("span"),Ixo=o("AutoModelForCausalLM"),DXe=l(),Ro=a("div"),F(Wy.$$.fragment),Nxo=l(),Ui=a("p"),qxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nO=a("a"),jxo=o("from_pretrained()"),Dxo=o(" class method or the "),sO=a("a"),Gxo=o("from_config()"),Oxo=o(` class
method.`),Vxo=l(),Hy=a("p"),Xxo=o("This class cannot be instantiated directly using "),Pge=a("code"),zxo=o("__init__()"),Qxo=o(" (throws an error)."),Wxo=l(),ct=a("div"),F(Uy.$$.fragment),Hxo=l(),Bge=a("p"),Uxo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Jxo=l(),Ji=a("p"),Yxo=o(`Note:
Loading a model from its configuration file does `),Ige=a("strong"),Kxo=o("not"),Zxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=a("a"),e$o=o("from_pretrained()"),o$o=o(" to load the model weights."),r$o=l(),F(z2.$$.fragment),t$o=l(),Ze=a("div"),F(Jy.$$.fragment),a$o=l(),Nge=a("p"),n$o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),s$o=l(),qa=a("p"),l$o=o("The model class to instantiate is selected based on the "),qge=a("code"),i$o=o("model_type"),d$o=o(` property of the config object (either
passed as an argument or loaded from `),jge=a("code"),c$o=o("pretrained_model_name_or_path"),m$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dge=a("code"),f$o=o("pretrained_model_name_or_path"),g$o=o(":"),h$o=l(),z=a("ul"),Q2=a("li"),Gge=a("strong"),u$o=o("bart"),p$o=o(" \u2014 "),iO=a("a"),_$o=o("BartForCausalLM"),b$o=o(" (BART model)"),v$o=l(),W2=a("li"),Oge=a("strong"),F$o=o("bert"),T$o=o(" \u2014 "),dO=a("a"),M$o=o("BertLMHeadModel"),E$o=o(" (BERT model)"),C$o=l(),H2=a("li"),Vge=a("strong"),w$o=o("bert-generation"),A$o=o(" \u2014 "),cO=a("a"),L$o=o("BertGenerationDecoder"),y$o=o(" (Bert Generation model)"),x$o=l(),U2=a("li"),Xge=a("strong"),$$o=o("big_bird"),k$o=o(" \u2014 "),mO=a("a"),S$o=o("BigBirdForCausalLM"),R$o=o(" (BigBird model)"),P$o=l(),J2=a("li"),zge=a("strong"),B$o=o("bigbird_pegasus"),I$o=o(" \u2014 "),fO=a("a"),N$o=o("BigBirdPegasusForCausalLM"),q$o=o(" (BigBird-Pegasus model)"),j$o=l(),Y2=a("li"),Qge=a("strong"),D$o=o("blenderbot"),G$o=o(" \u2014 "),gO=a("a"),O$o=o("BlenderbotForCausalLM"),V$o=o(" (Blenderbot model)"),X$o=l(),K2=a("li"),Wge=a("strong"),z$o=o("blenderbot-small"),Q$o=o(" \u2014 "),hO=a("a"),W$o=o("BlenderbotSmallForCausalLM"),H$o=o(" (BlenderbotSmall model)"),U$o=l(),Z2=a("li"),Hge=a("strong"),J$o=o("bloom"),Y$o=o(" \u2014 "),uO=a("a"),K$o=o("BloomForCausalLM"),Z$o=o(" (BLOOM model)"),eko=l(),eb=a("li"),Uge=a("strong"),oko=o("camembert"),rko=o(" \u2014 "),pO=a("a"),tko=o("CamembertForCausalLM"),ako=o(" (CamemBERT model)"),nko=l(),ob=a("li"),Jge=a("strong"),sko=o("codegen"),lko=o(" \u2014 "),_O=a("a"),iko=o("CodeGenForCausalLM"),dko=o(" (CodeGen model)"),cko=l(),rb=a("li"),Yge=a("strong"),mko=o("ctrl"),fko=o(" \u2014 "),bO=a("a"),gko=o("CTRLLMHeadModel"),hko=o(" (CTRL model)"),uko=l(),tb=a("li"),Kge=a("strong"),pko=o("data2vec-text"),_ko=o(" \u2014 "),vO=a("a"),bko=o("Data2VecTextForCausalLM"),vko=o(" (Data2VecText model)"),Fko=l(),ab=a("li"),Zge=a("strong"),Tko=o("electra"),Mko=o(" \u2014 "),FO=a("a"),Eko=o("ElectraForCausalLM"),Cko=o(" (ELECTRA model)"),wko=l(),nb=a("li"),ehe=a("strong"),Ako=o("gpt2"),Lko=o(" \u2014 "),TO=a("a"),yko=o("GPT2LMHeadModel"),xko=o(" (OpenAI GPT-2 model)"),$ko=l(),sb=a("li"),ohe=a("strong"),kko=o("gpt_neo"),Sko=o(" \u2014 "),MO=a("a"),Rko=o("GPTNeoForCausalLM"),Pko=o(" (GPT Neo model)"),Bko=l(),lb=a("li"),rhe=a("strong"),Iko=o("gpt_neox"),Nko=o(" \u2014 "),EO=a("a"),qko=o("GPTNeoXForCausalLM"),jko=o(" (GPT NeoX model)"),Dko=l(),ib=a("li"),the=a("strong"),Gko=o("gptj"),Oko=o(" \u2014 "),CO=a("a"),Vko=o("GPTJForCausalLM"),Xko=o(" (GPT-J model)"),zko=l(),db=a("li"),ahe=a("strong"),Qko=o("marian"),Wko=o(" \u2014 "),wO=a("a"),Hko=o("MarianForCausalLM"),Uko=o(" (Marian model)"),Jko=l(),cb=a("li"),nhe=a("strong"),Yko=o("mbart"),Kko=o(" \u2014 "),AO=a("a"),Zko=o("MBartForCausalLM"),eSo=o(" (mBART model)"),oSo=l(),mb=a("li"),she=a("strong"),rSo=o("megatron-bert"),tSo=o(" \u2014 "),LO=a("a"),aSo=o("MegatronBertForCausalLM"),nSo=o(" (Megatron-BERT model)"),sSo=l(),fb=a("li"),lhe=a("strong"),lSo=o("mvp"),iSo=o(" \u2014 "),yO=a("a"),dSo=o("MvpForCausalLM"),cSo=o(" (MVP model)"),mSo=l(),gb=a("li"),ihe=a("strong"),fSo=o("openai-gpt"),gSo=o(" \u2014 "),xO=a("a"),hSo=o("OpenAIGPTLMHeadModel"),uSo=o(" (OpenAI GPT model)"),pSo=l(),hb=a("li"),dhe=a("strong"),_So=o("opt"),bSo=o(" \u2014 "),$O=a("a"),vSo=o("OPTForCausalLM"),FSo=o(" (OPT model)"),TSo=l(),ub=a("li"),che=a("strong"),MSo=o("pegasus"),ESo=o(" \u2014 "),kO=a("a"),CSo=o("PegasusForCausalLM"),wSo=o(" (Pegasus model)"),ASo=l(),pb=a("li"),mhe=a("strong"),LSo=o("plbart"),ySo=o(" \u2014 "),SO=a("a"),xSo=o("PLBartForCausalLM"),$So=o(" (PLBart model)"),kSo=l(),_b=a("li"),fhe=a("strong"),SSo=o("prophetnet"),RSo=o(" \u2014 "),RO=a("a"),PSo=o("ProphetNetForCausalLM"),BSo=o(" (ProphetNet model)"),ISo=l(),bb=a("li"),ghe=a("strong"),NSo=o("qdqbert"),qSo=o(" \u2014 "),PO=a("a"),jSo=o("QDQBertLMHeadModel"),DSo=o(" (QDQBert model)"),GSo=l(),vb=a("li"),hhe=a("strong"),OSo=o("reformer"),VSo=o(" \u2014 "),BO=a("a"),XSo=o("ReformerModelWithLMHead"),zSo=o(" (Reformer model)"),QSo=l(),Fb=a("li"),uhe=a("strong"),WSo=o("rembert"),HSo=o(" \u2014 "),IO=a("a"),USo=o("RemBertForCausalLM"),JSo=o(" (RemBERT model)"),YSo=l(),Tb=a("li"),phe=a("strong"),KSo=o("roberta"),ZSo=o(" \u2014 "),NO=a("a"),eRo=o("RobertaForCausalLM"),oRo=o(" (RoBERTa model)"),rRo=l(),Mb=a("li"),_he=a("strong"),tRo=o("roformer"),aRo=o(" \u2014 "),qO=a("a"),nRo=o("RoFormerForCausalLM"),sRo=o(" (RoFormer model)"),lRo=l(),Eb=a("li"),bhe=a("strong"),iRo=o("speech_to_text_2"),dRo=o(" \u2014 "),jO=a("a"),cRo=o("Speech2Text2ForCausalLM"),mRo=o(" (Speech2Text2 model)"),fRo=l(),Cb=a("li"),vhe=a("strong"),gRo=o("transfo-xl"),hRo=o(" \u2014 "),DO=a("a"),uRo=o("TransfoXLLMHeadModel"),pRo=o(" (Transformer-XL model)"),_Ro=l(),wb=a("li"),Fhe=a("strong"),bRo=o("trocr"),vRo=o(" \u2014 "),GO=a("a"),FRo=o("TrOCRForCausalLM"),TRo=o(" (TrOCR model)"),MRo=l(),Ab=a("li"),The=a("strong"),ERo=o("xglm"),CRo=o(" \u2014 "),OO=a("a"),wRo=o("XGLMForCausalLM"),ARo=o(" (XGLM model)"),LRo=l(),Lb=a("li"),Mhe=a("strong"),yRo=o("xlm"),xRo=o(" \u2014 "),VO=a("a"),$Ro=o("XLMWithLMHeadModel"),kRo=o(" (XLM model)"),SRo=l(),yb=a("li"),Ehe=a("strong"),RRo=o("xlm-prophetnet"),PRo=o(" \u2014 "),XO=a("a"),BRo=o("XLMProphetNetForCausalLM"),IRo=o(" (XLM-ProphetNet model)"),NRo=l(),xb=a("li"),Che=a("strong"),qRo=o("xlm-roberta"),jRo=o(" \u2014 "),zO=a("a"),DRo=o("XLMRobertaForCausalLM"),GRo=o(" (XLM-RoBERTa model)"),ORo=l(),$b=a("li"),whe=a("strong"),VRo=o("xlm-roberta-xl"),XRo=o(" \u2014 "),QO=a("a"),zRo=o("XLMRobertaXLForCausalLM"),QRo=o(" (XLM-RoBERTa-XL model)"),WRo=l(),kb=a("li"),Ahe=a("strong"),HRo=o("xlnet"),URo=o(" \u2014 "),WO=a("a"),JRo=o("XLNetLMHeadModel"),YRo=o(" (XLNet model)"),KRo=l(),Sb=a("p"),ZRo=o("The model is set in evaluation mode by default using "),Lhe=a("code"),ePo=o("model.eval()"),oPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=a("code"),rPo=o("model.train()"),tPo=l(),F(Rb.$$.fragment),GXe=l(),Yi=a("h2"),Pb=a("a"),xhe=a("span"),F(Yy.$$.fragment),aPo=l(),$he=a("span"),nPo=o("AutoModelForMaskedLM"),OXe=l(),Po=a("div"),F(Ky.$$.fragment),sPo=l(),Ki=a("p"),lPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),HO=a("a"),iPo=o("from_pretrained()"),dPo=o(" class method or the "),UO=a("a"),cPo=o("from_config()"),mPo=o(` class
method.`),fPo=l(),Zy=a("p"),gPo=o("This class cannot be instantiated directly using "),khe=a("code"),hPo=o("__init__()"),uPo=o(" (throws an error)."),pPo=l(),mt=a("div"),F(e8.$$.fragment),_Po=l(),She=a("p"),bPo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),vPo=l(),Zi=a("p"),FPo=o(`Note:
Loading a model from its configuration file does `),Rhe=a("strong"),TPo=o("not"),MPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=a("a"),EPo=o("from_pretrained()"),CPo=o(" to load the model weights."),wPo=l(),F(Bb.$$.fragment),APo=l(),eo=a("div"),F(o8.$$.fragment),LPo=l(),Phe=a("p"),yPo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xPo=l(),ja=a("p"),$Po=o("The model class to instantiate is selected based on the "),Bhe=a("code"),kPo=o("model_type"),SPo=o(` property of the config object (either
passed as an argument or loaded from `),Ihe=a("code"),RPo=o("pretrained_model_name_or_path"),PPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nhe=a("code"),BPo=o("pretrained_model_name_or_path"),IPo=o(":"),NPo=l(),W=a("ul"),Ib=a("li"),qhe=a("strong"),qPo=o("albert"),jPo=o(" \u2014 "),YO=a("a"),DPo=o("AlbertForMaskedLM"),GPo=o(" (ALBERT model)"),OPo=l(),Nb=a("li"),jhe=a("strong"),VPo=o("bart"),XPo=o(" \u2014 "),KO=a("a"),zPo=o("BartForConditionalGeneration"),QPo=o(" (BART model)"),WPo=l(),qb=a("li"),Dhe=a("strong"),HPo=o("bert"),UPo=o(" \u2014 "),ZO=a("a"),JPo=o("BertForMaskedLM"),YPo=o(" (BERT model)"),KPo=l(),jb=a("li"),Ghe=a("strong"),ZPo=o("big_bird"),eBo=o(" \u2014 "),eV=a("a"),oBo=o("BigBirdForMaskedLM"),rBo=o(" (BigBird model)"),tBo=l(),Db=a("li"),Ohe=a("strong"),aBo=o("camembert"),nBo=o(" \u2014 "),oV=a("a"),sBo=o("CamembertForMaskedLM"),lBo=o(" (CamemBERT model)"),iBo=l(),Gb=a("li"),Vhe=a("strong"),dBo=o("convbert"),cBo=o(" \u2014 "),rV=a("a"),mBo=o("ConvBertForMaskedLM"),fBo=o(" (ConvBERT model)"),gBo=l(),Ob=a("li"),Xhe=a("strong"),hBo=o("data2vec-text"),uBo=o(" \u2014 "),tV=a("a"),pBo=o("Data2VecTextForMaskedLM"),_Bo=o(" (Data2VecText model)"),bBo=l(),Vb=a("li"),zhe=a("strong"),vBo=o("deberta"),FBo=o(" \u2014 "),aV=a("a"),TBo=o("DebertaForMaskedLM"),MBo=o(" (DeBERTa model)"),EBo=l(),Xb=a("li"),Qhe=a("strong"),CBo=o("deberta-v2"),wBo=o(" \u2014 "),nV=a("a"),ABo=o("DebertaV2ForMaskedLM"),LBo=o(" (DeBERTa-v2 model)"),yBo=l(),zb=a("li"),Whe=a("strong"),xBo=o("distilbert"),$Bo=o(" \u2014 "),sV=a("a"),kBo=o("DistilBertForMaskedLM"),SBo=o(" (DistilBERT model)"),RBo=l(),Qb=a("li"),Hhe=a("strong"),PBo=o("electra"),BBo=o(" \u2014 "),lV=a("a"),IBo=o("ElectraForMaskedLM"),NBo=o(" (ELECTRA model)"),qBo=l(),Wb=a("li"),Uhe=a("strong"),jBo=o("flaubert"),DBo=o(" \u2014 "),iV=a("a"),GBo=o("FlaubertWithLMHeadModel"),OBo=o(" (FlauBERT model)"),VBo=l(),Hb=a("li"),Jhe=a("strong"),XBo=o("fnet"),zBo=o(" \u2014 "),dV=a("a"),QBo=o("FNetForMaskedLM"),WBo=o(" (FNet model)"),HBo=l(),Ub=a("li"),Yhe=a("strong"),UBo=o("funnel"),JBo=o(" \u2014 "),cV=a("a"),YBo=o("FunnelForMaskedLM"),KBo=o(" (Funnel Transformer model)"),ZBo=l(),Jb=a("li"),Khe=a("strong"),eIo=o("ibert"),oIo=o(" \u2014 "),mV=a("a"),rIo=o("IBertForMaskedLM"),tIo=o(" (I-BERT model)"),aIo=l(),Yb=a("li"),Zhe=a("strong"),nIo=o("layoutlm"),sIo=o(" \u2014 "),fV=a("a"),lIo=o("LayoutLMForMaskedLM"),iIo=o(" (LayoutLM model)"),dIo=l(),Kb=a("li"),eue=a("strong"),cIo=o("longformer"),mIo=o(" \u2014 "),gV=a("a"),fIo=o("LongformerForMaskedLM"),gIo=o(" (Longformer model)"),hIo=l(),Zb=a("li"),oue=a("strong"),uIo=o("luke"),pIo=o(" \u2014 "),hV=a("a"),_Io=o("LukeForMaskedLM"),bIo=o(" (LUKE model)"),vIo=l(),ev=a("li"),rue=a("strong"),FIo=o("mbart"),TIo=o(" \u2014 "),uV=a("a"),MIo=o("MBartForConditionalGeneration"),EIo=o(" (mBART model)"),CIo=l(),ov=a("li"),tue=a("strong"),wIo=o("megatron-bert"),AIo=o(" \u2014 "),pV=a("a"),LIo=o("MegatronBertForMaskedLM"),yIo=o(" (Megatron-BERT model)"),xIo=l(),rv=a("li"),aue=a("strong"),$Io=o("mobilebert"),kIo=o(" \u2014 "),_V=a("a"),SIo=o("MobileBertForMaskedLM"),RIo=o(" (MobileBERT model)"),PIo=l(),tv=a("li"),nue=a("strong"),BIo=o("mpnet"),IIo=o(" \u2014 "),bV=a("a"),NIo=o("MPNetForMaskedLM"),qIo=o(" (MPNet model)"),jIo=l(),av=a("li"),sue=a("strong"),DIo=o("mvp"),GIo=o(" \u2014 "),vV=a("a"),OIo=o("MvpForConditionalGeneration"),VIo=o(" (MVP model)"),XIo=l(),nv=a("li"),lue=a("strong"),zIo=o("nezha"),QIo=o(" \u2014 "),FV=a("a"),WIo=o("NezhaForMaskedLM"),HIo=o(" (Nezha model)"),UIo=l(),sv=a("li"),iue=a("strong"),JIo=o("nystromformer"),YIo=o(" \u2014 "),TV=a("a"),KIo=o("NystromformerForMaskedLM"),ZIo=o(" (Nystr\xF6mformer model)"),eNo=l(),lv=a("li"),due=a("strong"),oNo=o("perceiver"),rNo=o(" \u2014 "),MV=a("a"),tNo=o("PerceiverForMaskedLM"),aNo=o(" (Perceiver model)"),nNo=l(),iv=a("li"),cue=a("strong"),sNo=o("qdqbert"),lNo=o(" \u2014 "),EV=a("a"),iNo=o("QDQBertForMaskedLM"),dNo=o(" (QDQBert model)"),cNo=l(),dv=a("li"),mue=a("strong"),mNo=o("reformer"),fNo=o(" \u2014 "),CV=a("a"),gNo=o("ReformerForMaskedLM"),hNo=o(" (Reformer model)"),uNo=l(),cv=a("li"),fue=a("strong"),pNo=o("rembert"),_No=o(" \u2014 "),wV=a("a"),bNo=o("RemBertForMaskedLM"),vNo=o(" (RemBERT model)"),FNo=l(),mv=a("li"),gue=a("strong"),TNo=o("roberta"),MNo=o(" \u2014 "),AV=a("a"),ENo=o("RobertaForMaskedLM"),CNo=o(" (RoBERTa model)"),wNo=l(),fv=a("li"),hue=a("strong"),ANo=o("roformer"),LNo=o(" \u2014 "),LV=a("a"),yNo=o("RoFormerForMaskedLM"),xNo=o(" (RoFormer model)"),$No=l(),gv=a("li"),uue=a("strong"),kNo=o("squeezebert"),SNo=o(" \u2014 "),yV=a("a"),RNo=o("SqueezeBertForMaskedLM"),PNo=o(" (SqueezeBERT model)"),BNo=l(),hv=a("li"),pue=a("strong"),INo=o("tapas"),NNo=o(" \u2014 "),xV=a("a"),qNo=o("TapasForMaskedLM"),jNo=o(" (TAPAS model)"),DNo=l(),uv=a("li"),_ue=a("strong"),GNo=o("wav2vec2"),ONo=o(" \u2014 "),bue=a("code"),VNo=o("Wav2Vec2ForMaskedLM"),XNo=o(" (Wav2Vec2 model)"),zNo=l(),pv=a("li"),vue=a("strong"),QNo=o("xlm"),WNo=o(" \u2014 "),$V=a("a"),HNo=o("XLMWithLMHeadModel"),UNo=o(" (XLM model)"),JNo=l(),_v=a("li"),Fue=a("strong"),YNo=o("xlm-roberta"),KNo=o(" \u2014 "),kV=a("a"),ZNo=o("XLMRobertaForMaskedLM"),eqo=o(" (XLM-RoBERTa model)"),oqo=l(),bv=a("li"),Tue=a("strong"),rqo=o("xlm-roberta-xl"),tqo=o(" \u2014 "),SV=a("a"),aqo=o("XLMRobertaXLForMaskedLM"),nqo=o(" (XLM-RoBERTa-XL model)"),sqo=l(),vv=a("li"),Mue=a("strong"),lqo=o("yoso"),iqo=o(" \u2014 "),RV=a("a"),dqo=o("YosoForMaskedLM"),cqo=o(" (YOSO model)"),mqo=l(),Fv=a("p"),fqo=o("The model is set in evaluation mode by default using "),Eue=a("code"),gqo=o("model.eval()"),hqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cue=a("code"),uqo=o("model.train()"),pqo=l(),F(Tv.$$.fragment),VXe=l(),ed=a("h2"),Mv=a("a"),wue=a("span"),F(r8.$$.fragment),_qo=l(),Aue=a("span"),bqo=o("AutoModelForSeq2SeqLM"),XXe=l(),Bo=a("div"),F(t8.$$.fragment),vqo=l(),od=a("p"),Fqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PV=a("a"),Tqo=o("from_pretrained()"),Mqo=o(" class method or the "),BV=a("a"),Eqo=o("from_config()"),Cqo=o(` class
method.`),wqo=l(),a8=a("p"),Aqo=o("This class cannot be instantiated directly using "),Lue=a("code"),Lqo=o("__init__()"),yqo=o(" (throws an error)."),xqo=l(),ft=a("div"),F(n8.$$.fragment),$qo=l(),yue=a("p"),kqo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Sqo=l(),rd=a("p"),Rqo=o(`Note:
Loading a model from its configuration file does `),xue=a("strong"),Pqo=o("not"),Bqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=a("a"),Iqo=o("from_pretrained()"),Nqo=o(" to load the model weights."),qqo=l(),F(Ev.$$.fragment),jqo=l(),oo=a("div"),F(s8.$$.fragment),Dqo=l(),$ue=a("p"),Gqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Oqo=l(),Da=a("p"),Vqo=o("The model class to instantiate is selected based on the "),kue=a("code"),Xqo=o("model_type"),zqo=o(` property of the config object (either
passed as an argument or loaded from `),Sue=a("code"),Qqo=o("pretrained_model_name_or_path"),Wqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=a("code"),Hqo=o("pretrained_model_name_or_path"),Uqo=o(":"),Jqo=l(),me=a("ul"),Cv=a("li"),Pue=a("strong"),Yqo=o("bart"),Kqo=o(" \u2014 "),NV=a("a"),Zqo=o("BartForConditionalGeneration"),ejo=o(" (BART model)"),ojo=l(),wv=a("li"),Bue=a("strong"),rjo=o("bigbird_pegasus"),tjo=o(" \u2014 "),qV=a("a"),ajo=o("BigBirdPegasusForConditionalGeneration"),njo=o(" (BigBird-Pegasus model)"),sjo=l(),Av=a("li"),Iue=a("strong"),ljo=o("blenderbot"),ijo=o(" \u2014 "),jV=a("a"),djo=o("BlenderbotForConditionalGeneration"),cjo=o(" (Blenderbot model)"),mjo=l(),Lv=a("li"),Nue=a("strong"),fjo=o("blenderbot-small"),gjo=o(" \u2014 "),DV=a("a"),hjo=o("BlenderbotSmallForConditionalGeneration"),ujo=o(" (BlenderbotSmall model)"),pjo=l(),yv=a("li"),que=a("strong"),_jo=o("encoder-decoder"),bjo=o(" \u2014 "),GV=a("a"),vjo=o("EncoderDecoderModel"),Fjo=o(" (Encoder decoder model)"),Tjo=l(),xv=a("li"),jue=a("strong"),Mjo=o("fsmt"),Ejo=o(" \u2014 "),OV=a("a"),Cjo=o("FSMTForConditionalGeneration"),wjo=o(" (FairSeq Machine-Translation model)"),Ajo=l(),$v=a("li"),Due=a("strong"),Ljo=o("led"),yjo=o(" \u2014 "),VV=a("a"),xjo=o("LEDForConditionalGeneration"),$jo=o(" (LED model)"),kjo=l(),kv=a("li"),Gue=a("strong"),Sjo=o("longt5"),Rjo=o(" \u2014 "),XV=a("a"),Pjo=o("LongT5ForConditionalGeneration"),Bjo=o(" (LongT5 model)"),Ijo=l(),Sv=a("li"),Oue=a("strong"),Njo=o("m2m_100"),qjo=o(" \u2014 "),zV=a("a"),jjo=o("M2M100ForConditionalGeneration"),Djo=o(" (M2M100 model)"),Gjo=l(),Rv=a("li"),Vue=a("strong"),Ojo=o("marian"),Vjo=o(" \u2014 "),QV=a("a"),Xjo=o("MarianMTModel"),zjo=o(" (Marian model)"),Qjo=l(),Pv=a("li"),Xue=a("strong"),Wjo=o("mbart"),Hjo=o(" \u2014 "),WV=a("a"),Ujo=o("MBartForConditionalGeneration"),Jjo=o(" (mBART model)"),Yjo=l(),Bv=a("li"),zue=a("strong"),Kjo=o("mt5"),Zjo=o(" \u2014 "),HV=a("a"),eDo=o("MT5ForConditionalGeneration"),oDo=o(" (MT5 model)"),rDo=l(),Iv=a("li"),Que=a("strong"),tDo=o("mvp"),aDo=o(" \u2014 "),UV=a("a"),nDo=o("MvpForConditionalGeneration"),sDo=o(" (MVP model)"),lDo=l(),Nv=a("li"),Wue=a("strong"),iDo=o("nllb"),dDo=o(" \u2014 "),JV=a("a"),cDo=o("M2M100ForConditionalGeneration"),mDo=o(" (NLLB model)"),fDo=l(),qv=a("li"),Hue=a("strong"),gDo=o("pegasus"),hDo=o(" \u2014 "),YV=a("a"),uDo=o("PegasusForConditionalGeneration"),pDo=o(" (Pegasus model)"),_Do=l(),jv=a("li"),Uue=a("strong"),bDo=o("plbart"),vDo=o(" \u2014 "),KV=a("a"),FDo=o("PLBartForConditionalGeneration"),TDo=o(" (PLBart model)"),MDo=l(),Dv=a("li"),Jue=a("strong"),EDo=o("prophetnet"),CDo=o(" \u2014 "),ZV=a("a"),wDo=o("ProphetNetForConditionalGeneration"),ADo=o(" (ProphetNet model)"),LDo=l(),Gv=a("li"),Yue=a("strong"),yDo=o("t5"),xDo=o(" \u2014 "),eX=a("a"),$Do=o("T5ForConditionalGeneration"),kDo=o(" (T5 model)"),SDo=l(),Ov=a("li"),Kue=a("strong"),RDo=o("xlm-prophetnet"),PDo=o(" \u2014 "),oX=a("a"),BDo=o("XLMProphetNetForConditionalGeneration"),IDo=o(" (XLM-ProphetNet model)"),NDo=l(),Vv=a("p"),qDo=o("The model is set in evaluation mode by default using "),Zue=a("code"),jDo=o("model.eval()"),DDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=a("code"),GDo=o("model.train()"),ODo=l(),F(Xv.$$.fragment),zXe=l(),td=a("h2"),zv=a("a"),ope=a("span"),F(l8.$$.fragment),VDo=l(),rpe=a("span"),XDo=o("AutoModelForSequenceClassification"),QXe=l(),Io=a("div"),F(i8.$$.fragment),zDo=l(),ad=a("p"),QDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rX=a("a"),WDo=o("from_pretrained()"),HDo=o(" class method or the "),tX=a("a"),UDo=o("from_config()"),JDo=o(` class
method.`),YDo=l(),d8=a("p"),KDo=o("This class cannot be instantiated directly using "),tpe=a("code"),ZDo=o("__init__()"),eGo=o(" (throws an error)."),oGo=l(),gt=a("div"),F(c8.$$.fragment),rGo=l(),ape=a("p"),tGo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aGo=l(),nd=a("p"),nGo=o(`Note:
Loading a model from its configuration file does `),npe=a("strong"),sGo=o("not"),lGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),iGo=o("from_pretrained()"),dGo=o(" to load the model weights."),cGo=l(),F(Qv.$$.fragment),mGo=l(),ro=a("div"),F(m8.$$.fragment),fGo=l(),spe=a("p"),gGo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hGo=l(),Ga=a("p"),uGo=o("The model class to instantiate is selected based on the "),lpe=a("code"),pGo=o("model_type"),_Go=o(` property of the config object (either
passed as an argument or loaded from `),ipe=a("code"),bGo=o("pretrained_model_name_or_path"),vGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=a("code"),FGo=o("pretrained_model_name_or_path"),TGo=o(":"),MGo=l(),B=a("ul"),Wv=a("li"),cpe=a("strong"),EGo=o("albert"),CGo=o(" \u2014 "),nX=a("a"),wGo=o("AlbertForSequenceClassification"),AGo=o(" (ALBERT model)"),LGo=l(),Hv=a("li"),mpe=a("strong"),yGo=o("bart"),xGo=o(" \u2014 "),sX=a("a"),$Go=o("BartForSequenceClassification"),kGo=o(" (BART model)"),SGo=l(),Uv=a("li"),fpe=a("strong"),RGo=o("bert"),PGo=o(" \u2014 "),lX=a("a"),BGo=o("BertForSequenceClassification"),IGo=o(" (BERT model)"),NGo=l(),Jv=a("li"),gpe=a("strong"),qGo=o("big_bird"),jGo=o(" \u2014 "),iX=a("a"),DGo=o("BigBirdForSequenceClassification"),GGo=o(" (BigBird model)"),OGo=l(),Yv=a("li"),hpe=a("strong"),VGo=o("bigbird_pegasus"),XGo=o(" \u2014 "),dX=a("a"),zGo=o("BigBirdPegasusForSequenceClassification"),QGo=o(" (BigBird-Pegasus model)"),WGo=l(),Kv=a("li"),upe=a("strong"),HGo=o("bloom"),UGo=o(" \u2014 "),cX=a("a"),JGo=o("BloomForSequenceClassification"),YGo=o(" (BLOOM model)"),KGo=l(),Zv=a("li"),ppe=a("strong"),ZGo=o("camembert"),eOo=o(" \u2014 "),mX=a("a"),oOo=o("CamembertForSequenceClassification"),rOo=o(" (CamemBERT model)"),tOo=l(),e1=a("li"),_pe=a("strong"),aOo=o("canine"),nOo=o(" \u2014 "),fX=a("a"),sOo=o("CanineForSequenceClassification"),lOo=o(" (CANINE model)"),iOo=l(),o1=a("li"),bpe=a("strong"),dOo=o("convbert"),cOo=o(" \u2014 "),gX=a("a"),mOo=o("ConvBertForSequenceClassification"),fOo=o(" (ConvBERT model)"),gOo=l(),r1=a("li"),vpe=a("strong"),hOo=o("ctrl"),uOo=o(" \u2014 "),hX=a("a"),pOo=o("CTRLForSequenceClassification"),_Oo=o(" (CTRL model)"),bOo=l(),t1=a("li"),Fpe=a("strong"),vOo=o("data2vec-text"),FOo=o(" \u2014 "),uX=a("a"),TOo=o("Data2VecTextForSequenceClassification"),MOo=o(" (Data2VecText model)"),EOo=l(),a1=a("li"),Tpe=a("strong"),COo=o("deberta"),wOo=o(" \u2014 "),pX=a("a"),AOo=o("DebertaForSequenceClassification"),LOo=o(" (DeBERTa model)"),yOo=l(),n1=a("li"),Mpe=a("strong"),xOo=o("deberta-v2"),$Oo=o(" \u2014 "),_X=a("a"),kOo=o("DebertaV2ForSequenceClassification"),SOo=o(" (DeBERTa-v2 model)"),ROo=l(),s1=a("li"),Epe=a("strong"),POo=o("distilbert"),BOo=o(" \u2014 "),bX=a("a"),IOo=o("DistilBertForSequenceClassification"),NOo=o(" (DistilBERT model)"),qOo=l(),l1=a("li"),Cpe=a("strong"),jOo=o("electra"),DOo=o(" \u2014 "),vX=a("a"),GOo=o("ElectraForSequenceClassification"),OOo=o(" (ELECTRA model)"),VOo=l(),i1=a("li"),wpe=a("strong"),XOo=o("flaubert"),zOo=o(" \u2014 "),FX=a("a"),QOo=o("FlaubertForSequenceClassification"),WOo=o(" (FlauBERT model)"),HOo=l(),d1=a("li"),Ape=a("strong"),UOo=o("fnet"),JOo=o(" \u2014 "),TX=a("a"),YOo=o("FNetForSequenceClassification"),KOo=o(" (FNet model)"),ZOo=l(),c1=a("li"),Lpe=a("strong"),eVo=o("funnel"),oVo=o(" \u2014 "),MX=a("a"),rVo=o("FunnelForSequenceClassification"),tVo=o(" (Funnel Transformer model)"),aVo=l(),m1=a("li"),ype=a("strong"),nVo=o("gpt2"),sVo=o(" \u2014 "),EX=a("a"),lVo=o("GPT2ForSequenceClassification"),iVo=o(" (OpenAI GPT-2 model)"),dVo=l(),f1=a("li"),xpe=a("strong"),cVo=o("gpt_neo"),mVo=o(" \u2014 "),CX=a("a"),fVo=o("GPTNeoForSequenceClassification"),gVo=o(" (GPT Neo model)"),hVo=l(),g1=a("li"),$pe=a("strong"),uVo=o("gptj"),pVo=o(" \u2014 "),wX=a("a"),_Vo=o("GPTJForSequenceClassification"),bVo=o(" (GPT-J model)"),vVo=l(),h1=a("li"),kpe=a("strong"),FVo=o("ibert"),TVo=o(" \u2014 "),AX=a("a"),MVo=o("IBertForSequenceClassification"),EVo=o(" (I-BERT model)"),CVo=l(),u1=a("li"),Spe=a("strong"),wVo=o("layoutlm"),AVo=o(" \u2014 "),LX=a("a"),LVo=o("LayoutLMForSequenceClassification"),yVo=o(" (LayoutLM model)"),xVo=l(),p1=a("li"),Rpe=a("strong"),$Vo=o("layoutlmv2"),kVo=o(" \u2014 "),yX=a("a"),SVo=o("LayoutLMv2ForSequenceClassification"),RVo=o(" (LayoutLMv2 model)"),PVo=l(),_1=a("li"),Ppe=a("strong"),BVo=o("layoutlmv3"),IVo=o(" \u2014 "),xX=a("a"),NVo=o("LayoutLMv3ForSequenceClassification"),qVo=o(" (LayoutLMv3 model)"),jVo=l(),b1=a("li"),Bpe=a("strong"),DVo=o("led"),GVo=o(" \u2014 "),$X=a("a"),OVo=o("LEDForSequenceClassification"),VVo=o(" (LED model)"),XVo=l(),v1=a("li"),Ipe=a("strong"),zVo=o("longformer"),QVo=o(" \u2014 "),kX=a("a"),WVo=o("LongformerForSequenceClassification"),HVo=o(" (Longformer model)"),UVo=l(),F1=a("li"),Npe=a("strong"),JVo=o("mbart"),YVo=o(" \u2014 "),SX=a("a"),KVo=o("MBartForSequenceClassification"),ZVo=o(" (mBART model)"),eXo=l(),T1=a("li"),qpe=a("strong"),oXo=o("megatron-bert"),rXo=o(" \u2014 "),RX=a("a"),tXo=o("MegatronBertForSequenceClassification"),aXo=o(" (Megatron-BERT model)"),nXo=l(),M1=a("li"),jpe=a("strong"),sXo=o("mobilebert"),lXo=o(" \u2014 "),PX=a("a"),iXo=o("MobileBertForSequenceClassification"),dXo=o(" (MobileBERT model)"),cXo=l(),E1=a("li"),Dpe=a("strong"),mXo=o("mpnet"),fXo=o(" \u2014 "),BX=a("a"),gXo=o("MPNetForSequenceClassification"),hXo=o(" (MPNet model)"),uXo=l(),C1=a("li"),Gpe=a("strong"),pXo=o("mvp"),_Xo=o(" \u2014 "),IX=a("a"),bXo=o("MvpForSequenceClassification"),vXo=o(" (MVP model)"),FXo=l(),w1=a("li"),Ope=a("strong"),TXo=o("nezha"),MXo=o(" \u2014 "),NX=a("a"),EXo=o("NezhaForSequenceClassification"),CXo=o(" (Nezha model)"),wXo=l(),A1=a("li"),Vpe=a("strong"),AXo=o("nystromformer"),LXo=o(" \u2014 "),qX=a("a"),yXo=o("NystromformerForSequenceClassification"),xXo=o(" (Nystr\xF6mformer model)"),$Xo=l(),L1=a("li"),Xpe=a("strong"),kXo=o("openai-gpt"),SXo=o(" \u2014 "),jX=a("a"),RXo=o("OpenAIGPTForSequenceClassification"),PXo=o(" (OpenAI GPT model)"),BXo=l(),y1=a("li"),zpe=a("strong"),IXo=o("opt"),NXo=o(" \u2014 "),DX=a("a"),qXo=o("OPTForSequenceClassification"),jXo=o(" (OPT model)"),DXo=l(),x1=a("li"),Qpe=a("strong"),GXo=o("perceiver"),OXo=o(" \u2014 "),GX=a("a"),VXo=o("PerceiverForSequenceClassification"),XXo=o(" (Perceiver model)"),zXo=l(),$1=a("li"),Wpe=a("strong"),QXo=o("plbart"),WXo=o(" \u2014 "),OX=a("a"),HXo=o("PLBartForSequenceClassification"),UXo=o(" (PLBart model)"),JXo=l(),k1=a("li"),Hpe=a("strong"),YXo=o("qdqbert"),KXo=o(" \u2014 "),VX=a("a"),ZXo=o("QDQBertForSequenceClassification"),ezo=o(" (QDQBert model)"),ozo=l(),S1=a("li"),Upe=a("strong"),rzo=o("reformer"),tzo=o(" \u2014 "),XX=a("a"),azo=o("ReformerForSequenceClassification"),nzo=o(" (Reformer model)"),szo=l(),R1=a("li"),Jpe=a("strong"),lzo=o("rembert"),izo=o(" \u2014 "),zX=a("a"),dzo=o("RemBertForSequenceClassification"),czo=o(" (RemBERT model)"),mzo=l(),P1=a("li"),Ype=a("strong"),fzo=o("roberta"),gzo=o(" \u2014 "),QX=a("a"),hzo=o("RobertaForSequenceClassification"),uzo=o(" (RoBERTa model)"),pzo=l(),B1=a("li"),Kpe=a("strong"),_zo=o("roformer"),bzo=o(" \u2014 "),WX=a("a"),vzo=o("RoFormerForSequenceClassification"),Fzo=o(" (RoFormer model)"),Tzo=l(),I1=a("li"),Zpe=a("strong"),Mzo=o("squeezebert"),Ezo=o(" \u2014 "),HX=a("a"),Czo=o("SqueezeBertForSequenceClassification"),wzo=o(" (SqueezeBERT model)"),Azo=l(),N1=a("li"),e_e=a("strong"),Lzo=o("tapas"),yzo=o(" \u2014 "),UX=a("a"),xzo=o("TapasForSequenceClassification"),$zo=o(" (TAPAS model)"),kzo=l(),q1=a("li"),o_e=a("strong"),Szo=o("transfo-xl"),Rzo=o(" \u2014 "),JX=a("a"),Pzo=o("TransfoXLForSequenceClassification"),Bzo=o(" (Transformer-XL model)"),Izo=l(),j1=a("li"),r_e=a("strong"),Nzo=o("xlm"),qzo=o(" \u2014 "),YX=a("a"),jzo=o("XLMForSequenceClassification"),Dzo=o(" (XLM model)"),Gzo=l(),D1=a("li"),t_e=a("strong"),Ozo=o("xlm-roberta"),Vzo=o(" \u2014 "),KX=a("a"),Xzo=o("XLMRobertaForSequenceClassification"),zzo=o(" (XLM-RoBERTa model)"),Qzo=l(),G1=a("li"),a_e=a("strong"),Wzo=o("xlm-roberta-xl"),Hzo=o(" \u2014 "),ZX=a("a"),Uzo=o("XLMRobertaXLForSequenceClassification"),Jzo=o(" (XLM-RoBERTa-XL model)"),Yzo=l(),O1=a("li"),n_e=a("strong"),Kzo=o("xlnet"),Zzo=o(" \u2014 "),ez=a("a"),eQo=o("XLNetForSequenceClassification"),oQo=o(" (XLNet model)"),rQo=l(),V1=a("li"),s_e=a("strong"),tQo=o("yoso"),aQo=o(" \u2014 "),oz=a("a"),nQo=o("YosoForSequenceClassification"),sQo=o(" (YOSO model)"),lQo=l(),X1=a("p"),iQo=o("The model is set in evaluation mode by default using "),l_e=a("code"),dQo=o("model.eval()"),cQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i_e=a("code"),mQo=o("model.train()"),fQo=l(),F(z1.$$.fragment),WXe=l(),sd=a("h2"),Q1=a("a"),d_e=a("span"),F(f8.$$.fragment),gQo=l(),c_e=a("span"),hQo=o("AutoModelForMultipleChoice"),HXe=l(),No=a("div"),F(g8.$$.fragment),uQo=l(),ld=a("p"),pQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rz=a("a"),_Qo=o("from_pretrained()"),bQo=o(" class method or the "),tz=a("a"),vQo=o("from_config()"),FQo=o(` class
method.`),TQo=l(),h8=a("p"),MQo=o("This class cannot be instantiated directly using "),m_e=a("code"),EQo=o("__init__()"),CQo=o(" (throws an error)."),wQo=l(),ht=a("div"),F(u8.$$.fragment),AQo=l(),f_e=a("p"),LQo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),yQo=l(),id=a("p"),xQo=o(`Note:
Loading a model from its configuration file does `),g_e=a("strong"),$Qo=o("not"),kQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),az=a("a"),SQo=o("from_pretrained()"),RQo=o(" to load the model weights."),PQo=l(),F(W1.$$.fragment),BQo=l(),to=a("div"),F(p8.$$.fragment),IQo=l(),h_e=a("p"),NQo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),qQo=l(),Oa=a("p"),jQo=o("The model class to instantiate is selected based on the "),u_e=a("code"),DQo=o("model_type"),GQo=o(` property of the config object (either
passed as an argument or loaded from `),p_e=a("code"),OQo=o("pretrained_model_name_or_path"),VQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),__e=a("code"),XQo=o("pretrained_model_name_or_path"),zQo=o(":"),QQo=l(),Z=a("ul"),H1=a("li"),b_e=a("strong"),WQo=o("albert"),HQo=o(" \u2014 "),nz=a("a"),UQo=o("AlbertForMultipleChoice"),JQo=o(" (ALBERT model)"),YQo=l(),U1=a("li"),v_e=a("strong"),KQo=o("bert"),ZQo=o(" \u2014 "),sz=a("a"),eWo=o("BertForMultipleChoice"),oWo=o(" (BERT model)"),rWo=l(),J1=a("li"),F_e=a("strong"),tWo=o("big_bird"),aWo=o(" \u2014 "),lz=a("a"),nWo=o("BigBirdForMultipleChoice"),sWo=o(" (BigBird model)"),lWo=l(),Y1=a("li"),T_e=a("strong"),iWo=o("camembert"),dWo=o(" \u2014 "),iz=a("a"),cWo=o("CamembertForMultipleChoice"),mWo=o(" (CamemBERT model)"),fWo=l(),K1=a("li"),M_e=a("strong"),gWo=o("canine"),hWo=o(" \u2014 "),dz=a("a"),uWo=o("CanineForMultipleChoice"),pWo=o(" (CANINE model)"),_Wo=l(),Z1=a("li"),E_e=a("strong"),bWo=o("convbert"),vWo=o(" \u2014 "),cz=a("a"),FWo=o("ConvBertForMultipleChoice"),TWo=o(" (ConvBERT model)"),MWo=l(),eF=a("li"),C_e=a("strong"),EWo=o("data2vec-text"),CWo=o(" \u2014 "),mz=a("a"),wWo=o("Data2VecTextForMultipleChoice"),AWo=o(" (Data2VecText model)"),LWo=l(),oF=a("li"),w_e=a("strong"),yWo=o("deberta-v2"),xWo=o(" \u2014 "),fz=a("a"),$Wo=o("DebertaV2ForMultipleChoice"),kWo=o(" (DeBERTa-v2 model)"),SWo=l(),rF=a("li"),A_e=a("strong"),RWo=o("distilbert"),PWo=o(" \u2014 "),gz=a("a"),BWo=o("DistilBertForMultipleChoice"),IWo=o(" (DistilBERT model)"),NWo=l(),tF=a("li"),L_e=a("strong"),qWo=o("electra"),jWo=o(" \u2014 "),hz=a("a"),DWo=o("ElectraForMultipleChoice"),GWo=o(" (ELECTRA model)"),OWo=l(),aF=a("li"),y_e=a("strong"),VWo=o("flaubert"),XWo=o(" \u2014 "),uz=a("a"),zWo=o("FlaubertForMultipleChoice"),QWo=o(" (FlauBERT model)"),WWo=l(),nF=a("li"),x_e=a("strong"),HWo=o("fnet"),UWo=o(" \u2014 "),pz=a("a"),JWo=o("FNetForMultipleChoice"),YWo=o(" (FNet model)"),KWo=l(),sF=a("li"),$_e=a("strong"),ZWo=o("funnel"),eHo=o(" \u2014 "),_z=a("a"),oHo=o("FunnelForMultipleChoice"),rHo=o(" (Funnel Transformer model)"),tHo=l(),lF=a("li"),k_e=a("strong"),aHo=o("ibert"),nHo=o(" \u2014 "),bz=a("a"),sHo=o("IBertForMultipleChoice"),lHo=o(" (I-BERT model)"),iHo=l(),iF=a("li"),S_e=a("strong"),dHo=o("longformer"),cHo=o(" \u2014 "),vz=a("a"),mHo=o("LongformerForMultipleChoice"),fHo=o(" (Longformer model)"),gHo=l(),dF=a("li"),R_e=a("strong"),hHo=o("megatron-bert"),uHo=o(" \u2014 "),Fz=a("a"),pHo=o("MegatronBertForMultipleChoice"),_Ho=o(" (Megatron-BERT model)"),bHo=l(),cF=a("li"),P_e=a("strong"),vHo=o("mobilebert"),FHo=o(" \u2014 "),Tz=a("a"),THo=o("MobileBertForMultipleChoice"),MHo=o(" (MobileBERT model)"),EHo=l(),mF=a("li"),B_e=a("strong"),CHo=o("mpnet"),wHo=o(" \u2014 "),Mz=a("a"),AHo=o("MPNetForMultipleChoice"),LHo=o(" (MPNet model)"),yHo=l(),fF=a("li"),I_e=a("strong"),xHo=o("nezha"),$Ho=o(" \u2014 "),Ez=a("a"),kHo=o("NezhaForMultipleChoice"),SHo=o(" (Nezha model)"),RHo=l(),gF=a("li"),N_e=a("strong"),PHo=o("nystromformer"),BHo=o(" \u2014 "),Cz=a("a"),IHo=o("NystromformerForMultipleChoice"),NHo=o(" (Nystr\xF6mformer model)"),qHo=l(),hF=a("li"),q_e=a("strong"),jHo=o("qdqbert"),DHo=o(" \u2014 "),wz=a("a"),GHo=o("QDQBertForMultipleChoice"),OHo=o(" (QDQBert model)"),VHo=l(),uF=a("li"),j_e=a("strong"),XHo=o("rembert"),zHo=o(" \u2014 "),Az=a("a"),QHo=o("RemBertForMultipleChoice"),WHo=o(" (RemBERT model)"),HHo=l(),pF=a("li"),D_e=a("strong"),UHo=o("roberta"),JHo=o(" \u2014 "),Lz=a("a"),YHo=o("RobertaForMultipleChoice"),KHo=o(" (RoBERTa model)"),ZHo=l(),_F=a("li"),G_e=a("strong"),eUo=o("roformer"),oUo=o(" \u2014 "),yz=a("a"),rUo=o("RoFormerForMultipleChoice"),tUo=o(" (RoFormer model)"),aUo=l(),bF=a("li"),O_e=a("strong"),nUo=o("squeezebert"),sUo=o(" \u2014 "),xz=a("a"),lUo=o("SqueezeBertForMultipleChoice"),iUo=o(" (SqueezeBERT model)"),dUo=l(),vF=a("li"),V_e=a("strong"),cUo=o("xlm"),mUo=o(" \u2014 "),$z=a("a"),fUo=o("XLMForMultipleChoice"),gUo=o(" (XLM model)"),hUo=l(),FF=a("li"),X_e=a("strong"),uUo=o("xlm-roberta"),pUo=o(" \u2014 "),kz=a("a"),_Uo=o("XLMRobertaForMultipleChoice"),bUo=o(" (XLM-RoBERTa model)"),vUo=l(),TF=a("li"),z_e=a("strong"),FUo=o("xlm-roberta-xl"),TUo=o(" \u2014 "),Sz=a("a"),MUo=o("XLMRobertaXLForMultipleChoice"),EUo=o(" (XLM-RoBERTa-XL model)"),CUo=l(),MF=a("li"),Q_e=a("strong"),wUo=o("xlnet"),AUo=o(" \u2014 "),Rz=a("a"),LUo=o("XLNetForMultipleChoice"),yUo=o(" (XLNet model)"),xUo=l(),EF=a("li"),W_e=a("strong"),$Uo=o("yoso"),kUo=o(" \u2014 "),Pz=a("a"),SUo=o("YosoForMultipleChoice"),RUo=o(" (YOSO model)"),PUo=l(),CF=a("p"),BUo=o("The model is set in evaluation mode by default using "),H_e=a("code"),IUo=o("model.eval()"),NUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U_e=a("code"),qUo=o("model.train()"),jUo=l(),F(wF.$$.fragment),UXe=l(),dd=a("h2"),AF=a("a"),J_e=a("span"),F(_8.$$.fragment),DUo=l(),Y_e=a("span"),GUo=o("AutoModelForNextSentencePrediction"),JXe=l(),qo=a("div"),F(b8.$$.fragment),OUo=l(),cd=a("p"),VUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Bz=a("a"),XUo=o("from_pretrained()"),zUo=o(" class method or the "),Iz=a("a"),QUo=o("from_config()"),WUo=o(` class
method.`),HUo=l(),v8=a("p"),UUo=o("This class cannot be instantiated directly using "),K_e=a("code"),JUo=o("__init__()"),YUo=o(" (throws an error)."),KUo=l(),ut=a("div"),F(F8.$$.fragment),ZUo=l(),Z_e=a("p"),eJo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),oJo=l(),md=a("p"),rJo=o(`Note:
Loading a model from its configuration file does `),e2e=a("strong"),tJo=o("not"),aJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=a("a"),nJo=o("from_pretrained()"),sJo=o(" to load the model weights."),lJo=l(),F(LF.$$.fragment),iJo=l(),ao=a("div"),F(T8.$$.fragment),dJo=l(),o2e=a("p"),cJo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),mJo=l(),Va=a("p"),fJo=o("The model class to instantiate is selected based on the "),r2e=a("code"),gJo=o("model_type"),hJo=o(` property of the config object (either
passed as an argument or loaded from `),t2e=a("code"),uJo=o("pretrained_model_name_or_path"),pJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a2e=a("code"),_Jo=o("pretrained_model_name_or_path"),bJo=o(":"),vJo=l(),jo=a("ul"),yF=a("li"),n2e=a("strong"),FJo=o("bert"),TJo=o(" \u2014 "),qz=a("a"),MJo=o("BertForNextSentencePrediction"),EJo=o(" (BERT model)"),CJo=l(),xF=a("li"),s2e=a("strong"),wJo=o("fnet"),AJo=o(" \u2014 "),jz=a("a"),LJo=o("FNetForNextSentencePrediction"),yJo=o(" (FNet model)"),xJo=l(),$F=a("li"),l2e=a("strong"),$Jo=o("megatron-bert"),kJo=o(" \u2014 "),Dz=a("a"),SJo=o("MegatronBertForNextSentencePrediction"),RJo=o(" (Megatron-BERT model)"),PJo=l(),kF=a("li"),i2e=a("strong"),BJo=o("mobilebert"),IJo=o(" \u2014 "),Gz=a("a"),NJo=o("MobileBertForNextSentencePrediction"),qJo=o(" (MobileBERT model)"),jJo=l(),SF=a("li"),d2e=a("strong"),DJo=o("nezha"),GJo=o(" \u2014 "),Oz=a("a"),OJo=o("NezhaForNextSentencePrediction"),VJo=o(" (Nezha model)"),XJo=l(),RF=a("li"),c2e=a("strong"),zJo=o("qdqbert"),QJo=o(" \u2014 "),Vz=a("a"),WJo=o("QDQBertForNextSentencePrediction"),HJo=o(" (QDQBert model)"),UJo=l(),PF=a("p"),JJo=o("The model is set in evaluation mode by default using "),m2e=a("code"),YJo=o("model.eval()"),KJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f2e=a("code"),ZJo=o("model.train()"),eYo=l(),F(BF.$$.fragment),YXe=l(),fd=a("h2"),IF=a("a"),g2e=a("span"),F(M8.$$.fragment),oYo=l(),h2e=a("span"),rYo=o("AutoModelForTokenClassification"),KXe=l(),Do=a("div"),F(E8.$$.fragment),tYo=l(),gd=a("p"),aYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Xz=a("a"),nYo=o("from_pretrained()"),sYo=o(" class method or the "),zz=a("a"),lYo=o("from_config()"),iYo=o(` class
method.`),dYo=l(),C8=a("p"),cYo=o("This class cannot be instantiated directly using "),u2e=a("code"),mYo=o("__init__()"),fYo=o(" (throws an error)."),gYo=l(),pt=a("div"),F(w8.$$.fragment),hYo=l(),p2e=a("p"),uYo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pYo=l(),hd=a("p"),_Yo=o(`Note:
Loading a model from its configuration file does `),_2e=a("strong"),bYo=o("not"),vYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=a("a"),FYo=o("from_pretrained()"),TYo=o(" to load the model weights."),MYo=l(),F(NF.$$.fragment),EYo=l(),no=a("div"),F(A8.$$.fragment),CYo=l(),b2e=a("p"),wYo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),AYo=l(),Xa=a("p"),LYo=o("The model class to instantiate is selected based on the "),v2e=a("code"),yYo=o("model_type"),xYo=o(` property of the config object (either
passed as an argument or loaded from `),F2e=a("code"),$Yo=o("pretrained_model_name_or_path"),kYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=a("code"),SYo=o("pretrained_model_name_or_path"),RYo=o(":"),PYo=l(),U=a("ul"),qF=a("li"),M2e=a("strong"),BYo=o("albert"),IYo=o(" \u2014 "),Wz=a("a"),NYo=o("AlbertForTokenClassification"),qYo=o(" (ALBERT model)"),jYo=l(),jF=a("li"),E2e=a("strong"),DYo=o("bert"),GYo=o(" \u2014 "),Hz=a("a"),OYo=o("BertForTokenClassification"),VYo=o(" (BERT model)"),XYo=l(),DF=a("li"),C2e=a("strong"),zYo=o("big_bird"),QYo=o(" \u2014 "),Uz=a("a"),WYo=o("BigBirdForTokenClassification"),HYo=o(" (BigBird model)"),UYo=l(),GF=a("li"),w2e=a("strong"),JYo=o("bloom"),YYo=o(" \u2014 "),Jz=a("a"),KYo=o("BloomForTokenClassification"),ZYo=o(" (BLOOM model)"),eKo=l(),OF=a("li"),A2e=a("strong"),oKo=o("camembert"),rKo=o(" \u2014 "),Yz=a("a"),tKo=o("CamembertForTokenClassification"),aKo=o(" (CamemBERT model)"),nKo=l(),VF=a("li"),L2e=a("strong"),sKo=o("canine"),lKo=o(" \u2014 "),Kz=a("a"),iKo=o("CanineForTokenClassification"),dKo=o(" (CANINE model)"),cKo=l(),XF=a("li"),y2e=a("strong"),mKo=o("convbert"),fKo=o(" \u2014 "),Zz=a("a"),gKo=o("ConvBertForTokenClassification"),hKo=o(" (ConvBERT model)"),uKo=l(),zF=a("li"),x2e=a("strong"),pKo=o("data2vec-text"),_Ko=o(" \u2014 "),eQ=a("a"),bKo=o("Data2VecTextForTokenClassification"),vKo=o(" (Data2VecText model)"),FKo=l(),QF=a("li"),$2e=a("strong"),TKo=o("deberta"),MKo=o(" \u2014 "),oQ=a("a"),EKo=o("DebertaForTokenClassification"),CKo=o(" (DeBERTa model)"),wKo=l(),WF=a("li"),k2e=a("strong"),AKo=o("deberta-v2"),LKo=o(" \u2014 "),rQ=a("a"),yKo=o("DebertaV2ForTokenClassification"),xKo=o(" (DeBERTa-v2 model)"),$Ko=l(),HF=a("li"),S2e=a("strong"),kKo=o("distilbert"),SKo=o(" \u2014 "),tQ=a("a"),RKo=o("DistilBertForTokenClassification"),PKo=o(" (DistilBERT model)"),BKo=l(),UF=a("li"),R2e=a("strong"),IKo=o("electra"),NKo=o(" \u2014 "),aQ=a("a"),qKo=o("ElectraForTokenClassification"),jKo=o(" (ELECTRA model)"),DKo=l(),JF=a("li"),P2e=a("strong"),GKo=o("flaubert"),OKo=o(" \u2014 "),nQ=a("a"),VKo=o("FlaubertForTokenClassification"),XKo=o(" (FlauBERT model)"),zKo=l(),YF=a("li"),B2e=a("strong"),QKo=o("fnet"),WKo=o(" \u2014 "),sQ=a("a"),HKo=o("FNetForTokenClassification"),UKo=o(" (FNet model)"),JKo=l(),KF=a("li"),I2e=a("strong"),YKo=o("funnel"),KKo=o(" \u2014 "),lQ=a("a"),ZKo=o("FunnelForTokenClassification"),eZo=o(" (Funnel Transformer model)"),oZo=l(),ZF=a("li"),N2e=a("strong"),rZo=o("gpt2"),tZo=o(" \u2014 "),iQ=a("a"),aZo=o("GPT2ForTokenClassification"),nZo=o(" (OpenAI GPT-2 model)"),sZo=l(),eT=a("li"),q2e=a("strong"),lZo=o("ibert"),iZo=o(" \u2014 "),dQ=a("a"),dZo=o("IBertForTokenClassification"),cZo=o(" (I-BERT model)"),mZo=l(),oT=a("li"),j2e=a("strong"),fZo=o("layoutlm"),gZo=o(" \u2014 "),cQ=a("a"),hZo=o("LayoutLMForTokenClassification"),uZo=o(" (LayoutLM model)"),pZo=l(),rT=a("li"),D2e=a("strong"),_Zo=o("layoutlmv2"),bZo=o(" \u2014 "),mQ=a("a"),vZo=o("LayoutLMv2ForTokenClassification"),FZo=o(" (LayoutLMv2 model)"),TZo=l(),tT=a("li"),G2e=a("strong"),MZo=o("layoutlmv3"),EZo=o(" \u2014 "),fQ=a("a"),CZo=o("LayoutLMv3ForTokenClassification"),wZo=o(" (LayoutLMv3 model)"),AZo=l(),aT=a("li"),O2e=a("strong"),LZo=o("longformer"),yZo=o(" \u2014 "),gQ=a("a"),xZo=o("LongformerForTokenClassification"),$Zo=o(" (Longformer model)"),kZo=l(),nT=a("li"),V2e=a("strong"),SZo=o("megatron-bert"),RZo=o(" \u2014 "),hQ=a("a"),PZo=o("MegatronBertForTokenClassification"),BZo=o(" (Megatron-BERT model)"),IZo=l(),sT=a("li"),X2e=a("strong"),NZo=o("mobilebert"),qZo=o(" \u2014 "),uQ=a("a"),jZo=o("MobileBertForTokenClassification"),DZo=o(" (MobileBERT model)"),GZo=l(),lT=a("li"),z2e=a("strong"),OZo=o("mpnet"),VZo=o(" \u2014 "),pQ=a("a"),XZo=o("MPNetForTokenClassification"),zZo=o(" (MPNet model)"),QZo=l(),iT=a("li"),Q2e=a("strong"),WZo=o("nezha"),HZo=o(" \u2014 "),_Q=a("a"),UZo=o("NezhaForTokenClassification"),JZo=o(" (Nezha model)"),YZo=l(),dT=a("li"),W2e=a("strong"),KZo=o("nystromformer"),ZZo=o(" \u2014 "),bQ=a("a"),eer=o("NystromformerForTokenClassification"),oer=o(" (Nystr\xF6mformer model)"),rer=l(),cT=a("li"),H2e=a("strong"),ter=o("qdqbert"),aer=o(" \u2014 "),vQ=a("a"),ner=o("QDQBertForTokenClassification"),ser=o(" (QDQBert model)"),ler=l(),mT=a("li"),U2e=a("strong"),ier=o("rembert"),der=o(" \u2014 "),FQ=a("a"),cer=o("RemBertForTokenClassification"),mer=o(" (RemBERT model)"),fer=l(),fT=a("li"),J2e=a("strong"),ger=o("roberta"),her=o(" \u2014 "),TQ=a("a"),uer=o("RobertaForTokenClassification"),per=o(" (RoBERTa model)"),_er=l(),gT=a("li"),Y2e=a("strong"),ber=o("roformer"),ver=o(" \u2014 "),MQ=a("a"),Fer=o("RoFormerForTokenClassification"),Ter=o(" (RoFormer model)"),Mer=l(),hT=a("li"),K2e=a("strong"),Eer=o("squeezebert"),Cer=o(" \u2014 "),EQ=a("a"),wer=o("SqueezeBertForTokenClassification"),Aer=o(" (SqueezeBERT model)"),Ler=l(),uT=a("li"),Z2e=a("strong"),yer=o("xlm"),xer=o(" \u2014 "),CQ=a("a"),$er=o("XLMForTokenClassification"),ker=o(" (XLM model)"),Ser=l(),pT=a("li"),ebe=a("strong"),Rer=o("xlm-roberta"),Per=o(" \u2014 "),wQ=a("a"),Ber=o("XLMRobertaForTokenClassification"),Ier=o(" (XLM-RoBERTa model)"),Ner=l(),_T=a("li"),obe=a("strong"),qer=o("xlm-roberta-xl"),jer=o(" \u2014 "),AQ=a("a"),Der=o("XLMRobertaXLForTokenClassification"),Ger=o(" (XLM-RoBERTa-XL model)"),Oer=l(),bT=a("li"),rbe=a("strong"),Ver=o("xlnet"),Xer=o(" \u2014 "),LQ=a("a"),zer=o("XLNetForTokenClassification"),Qer=o(" (XLNet model)"),Wer=l(),vT=a("li"),tbe=a("strong"),Her=o("yoso"),Uer=o(" \u2014 "),yQ=a("a"),Jer=o("YosoForTokenClassification"),Yer=o(" (YOSO model)"),Ker=l(),FT=a("p"),Zer=o("The model is set in evaluation mode by default using "),abe=a("code"),eor=o("model.eval()"),oor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nbe=a("code"),ror=o("model.train()"),tor=l(),F(TT.$$.fragment),ZXe=l(),ud=a("h2"),MT=a("a"),sbe=a("span"),F(L8.$$.fragment),aor=l(),lbe=a("span"),nor=o("AutoModelForQuestionAnswering"),eze=l(),Go=a("div"),F(y8.$$.fragment),sor=l(),pd=a("p"),lor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xQ=a("a"),ior=o("from_pretrained()"),dor=o(" class method or the "),$Q=a("a"),cor=o("from_config()"),mor=o(` class
method.`),gor=l(),x8=a("p"),hor=o("This class cannot be instantiated directly using "),ibe=a("code"),uor=o("__init__()"),por=o(" (throws an error)."),_or=l(),_t=a("div"),F($8.$$.fragment),bor=l(),dbe=a("p"),vor=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),For=l(),_d=a("p"),Tor=o(`Note:
Loading a model from its configuration file does `),cbe=a("strong"),Mor=o("not"),Eor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kQ=a("a"),Cor=o("from_pretrained()"),wor=o(" to load the model weights."),Aor=l(),F(ET.$$.fragment),Lor=l(),so=a("div"),F(k8.$$.fragment),yor=l(),mbe=a("p"),xor=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$or=l(),za=a("p"),kor=o("The model class to instantiate is selected based on the "),fbe=a("code"),Sor=o("model_type"),Ror=o(` property of the config object (either
passed as an argument or loaded from `),gbe=a("code"),Por=o("pretrained_model_name_or_path"),Bor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=a("code"),Ior=o("pretrained_model_name_or_path"),Nor=o(":"),qor=l(),V=a("ul"),CT=a("li"),ube=a("strong"),jor=o("albert"),Dor=o(" \u2014 "),SQ=a("a"),Gor=o("AlbertForQuestionAnswering"),Oor=o(" (ALBERT model)"),Vor=l(),wT=a("li"),pbe=a("strong"),Xor=o("bart"),zor=o(" \u2014 "),RQ=a("a"),Qor=o("BartForQuestionAnswering"),Wor=o(" (BART model)"),Hor=l(),AT=a("li"),_be=a("strong"),Uor=o("bert"),Jor=o(" \u2014 "),PQ=a("a"),Yor=o("BertForQuestionAnswering"),Kor=o(" (BERT model)"),Zor=l(),LT=a("li"),bbe=a("strong"),err=o("big_bird"),orr=o(" \u2014 "),BQ=a("a"),rrr=o("BigBirdForQuestionAnswering"),trr=o(" (BigBird model)"),arr=l(),yT=a("li"),vbe=a("strong"),nrr=o("bigbird_pegasus"),srr=o(" \u2014 "),IQ=a("a"),lrr=o("BigBirdPegasusForQuestionAnswering"),irr=o(" (BigBird-Pegasus model)"),drr=l(),xT=a("li"),Fbe=a("strong"),crr=o("camembert"),mrr=o(" \u2014 "),NQ=a("a"),frr=o("CamembertForQuestionAnswering"),grr=o(" (CamemBERT model)"),hrr=l(),$T=a("li"),Tbe=a("strong"),urr=o("canine"),prr=o(" \u2014 "),qQ=a("a"),_rr=o("CanineForQuestionAnswering"),brr=o(" (CANINE model)"),vrr=l(),kT=a("li"),Mbe=a("strong"),Frr=o("convbert"),Trr=o(" \u2014 "),jQ=a("a"),Mrr=o("ConvBertForQuestionAnswering"),Err=o(" (ConvBERT model)"),Crr=l(),ST=a("li"),Ebe=a("strong"),wrr=o("data2vec-text"),Arr=o(" \u2014 "),DQ=a("a"),Lrr=o("Data2VecTextForQuestionAnswering"),yrr=o(" (Data2VecText model)"),xrr=l(),RT=a("li"),Cbe=a("strong"),$rr=o("deberta"),krr=o(" \u2014 "),GQ=a("a"),Srr=o("DebertaForQuestionAnswering"),Rrr=o(" (DeBERTa model)"),Prr=l(),PT=a("li"),wbe=a("strong"),Brr=o("deberta-v2"),Irr=o(" \u2014 "),OQ=a("a"),Nrr=o("DebertaV2ForQuestionAnswering"),qrr=o(" (DeBERTa-v2 model)"),jrr=l(),BT=a("li"),Abe=a("strong"),Drr=o("distilbert"),Grr=o(" \u2014 "),VQ=a("a"),Orr=o("DistilBertForQuestionAnswering"),Vrr=o(" (DistilBERT model)"),Xrr=l(),IT=a("li"),Lbe=a("strong"),zrr=o("electra"),Qrr=o(" \u2014 "),XQ=a("a"),Wrr=o("ElectraForQuestionAnswering"),Hrr=o(" (ELECTRA model)"),Urr=l(),NT=a("li"),ybe=a("strong"),Jrr=o("flaubert"),Yrr=o(" \u2014 "),zQ=a("a"),Krr=o("FlaubertForQuestionAnsweringSimple"),Zrr=o(" (FlauBERT model)"),etr=l(),qT=a("li"),xbe=a("strong"),otr=o("fnet"),rtr=o(" \u2014 "),QQ=a("a"),ttr=o("FNetForQuestionAnswering"),atr=o(" (FNet model)"),ntr=l(),jT=a("li"),$be=a("strong"),str=o("funnel"),ltr=o(" \u2014 "),WQ=a("a"),itr=o("FunnelForQuestionAnswering"),dtr=o(" (Funnel Transformer model)"),ctr=l(),DT=a("li"),kbe=a("strong"),mtr=o("gptj"),ftr=o(" \u2014 "),HQ=a("a"),gtr=o("GPTJForQuestionAnswering"),htr=o(" (GPT-J model)"),utr=l(),GT=a("li"),Sbe=a("strong"),ptr=o("ibert"),_tr=o(" \u2014 "),UQ=a("a"),btr=o("IBertForQuestionAnswering"),vtr=o(" (I-BERT model)"),Ftr=l(),OT=a("li"),Rbe=a("strong"),Ttr=o("layoutlmv2"),Mtr=o(" \u2014 "),JQ=a("a"),Etr=o("LayoutLMv2ForQuestionAnswering"),Ctr=o(" (LayoutLMv2 model)"),wtr=l(),VT=a("li"),Pbe=a("strong"),Atr=o("layoutlmv3"),Ltr=o(" \u2014 "),YQ=a("a"),ytr=o("LayoutLMv3ForQuestionAnswering"),xtr=o(" (LayoutLMv3 model)"),$tr=l(),XT=a("li"),Bbe=a("strong"),ktr=o("led"),Str=o(" \u2014 "),KQ=a("a"),Rtr=o("LEDForQuestionAnswering"),Ptr=o(" (LED model)"),Btr=l(),zT=a("li"),Ibe=a("strong"),Itr=o("longformer"),Ntr=o(" \u2014 "),ZQ=a("a"),qtr=o("LongformerForQuestionAnswering"),jtr=o(" (Longformer model)"),Dtr=l(),QT=a("li"),Nbe=a("strong"),Gtr=o("lxmert"),Otr=o(" \u2014 "),eW=a("a"),Vtr=o("LxmertForQuestionAnswering"),Xtr=o(" (LXMERT model)"),ztr=l(),WT=a("li"),qbe=a("strong"),Qtr=o("mbart"),Wtr=o(" \u2014 "),oW=a("a"),Htr=o("MBartForQuestionAnswering"),Utr=o(" (mBART model)"),Jtr=l(),HT=a("li"),jbe=a("strong"),Ytr=o("megatron-bert"),Ktr=o(" \u2014 "),rW=a("a"),Ztr=o("MegatronBertForQuestionAnswering"),ear=o(" (Megatron-BERT model)"),oar=l(),UT=a("li"),Dbe=a("strong"),rar=o("mobilebert"),tar=o(" \u2014 "),tW=a("a"),aar=o("MobileBertForQuestionAnswering"),nar=o(" (MobileBERT model)"),sar=l(),JT=a("li"),Gbe=a("strong"),lar=o("mpnet"),iar=o(" \u2014 "),aW=a("a"),dar=o("MPNetForQuestionAnswering"),car=o(" (MPNet model)"),mar=l(),YT=a("li"),Obe=a("strong"),far=o("mvp"),gar=o(" \u2014 "),nW=a("a"),har=o("MvpForQuestionAnswering"),uar=o(" (MVP model)"),par=l(),KT=a("li"),Vbe=a("strong"),_ar=o("nezha"),bar=o(" \u2014 "),sW=a("a"),Far=o("NezhaForQuestionAnswering"),Tar=o(" (Nezha model)"),Mar=l(),ZT=a("li"),Xbe=a("strong"),Ear=o("nystromformer"),Car=o(" \u2014 "),lW=a("a"),war=o("NystromformerForQuestionAnswering"),Aar=o(" (Nystr\xF6mformer model)"),Lar=l(),eM=a("li"),zbe=a("strong"),yar=o("qdqbert"),xar=o(" \u2014 "),iW=a("a"),$ar=o("QDQBertForQuestionAnswering"),kar=o(" (QDQBert model)"),Sar=l(),oM=a("li"),Qbe=a("strong"),Rar=o("reformer"),Par=o(" \u2014 "),dW=a("a"),Bar=o("ReformerForQuestionAnswering"),Iar=o(" (Reformer model)"),Nar=l(),rM=a("li"),Wbe=a("strong"),qar=o("rembert"),jar=o(" \u2014 "),cW=a("a"),Dar=o("RemBertForQuestionAnswering"),Gar=o(" (RemBERT model)"),Oar=l(),tM=a("li"),Hbe=a("strong"),Var=o("roberta"),Xar=o(" \u2014 "),mW=a("a"),zar=o("RobertaForQuestionAnswering"),Qar=o(" (RoBERTa model)"),War=l(),aM=a("li"),Ube=a("strong"),Har=o("roformer"),Uar=o(" \u2014 "),fW=a("a"),Jar=o("RoFormerForQuestionAnswering"),Yar=o(" (RoFormer model)"),Kar=l(),nM=a("li"),Jbe=a("strong"),Zar=o("splinter"),enr=o(" \u2014 "),gW=a("a"),onr=o("SplinterForQuestionAnswering"),rnr=o(" (Splinter model)"),tnr=l(),sM=a("li"),Ybe=a("strong"),anr=o("squeezebert"),nnr=o(" \u2014 "),hW=a("a"),snr=o("SqueezeBertForQuestionAnswering"),lnr=o(" (SqueezeBERT model)"),inr=l(),lM=a("li"),Kbe=a("strong"),dnr=o("xlm"),cnr=o(" \u2014 "),uW=a("a"),mnr=o("XLMForQuestionAnsweringSimple"),fnr=o(" (XLM model)"),gnr=l(),iM=a("li"),Zbe=a("strong"),hnr=o("xlm-roberta"),unr=o(" \u2014 "),pW=a("a"),pnr=o("XLMRobertaForQuestionAnswering"),_nr=o(" (XLM-RoBERTa model)"),bnr=l(),dM=a("li"),eve=a("strong"),vnr=o("xlm-roberta-xl"),Fnr=o(" \u2014 "),_W=a("a"),Tnr=o("XLMRobertaXLForQuestionAnswering"),Mnr=o(" (XLM-RoBERTa-XL model)"),Enr=l(),cM=a("li"),ove=a("strong"),Cnr=o("xlnet"),wnr=o(" \u2014 "),bW=a("a"),Anr=o("XLNetForQuestionAnsweringSimple"),Lnr=o(" (XLNet model)"),ynr=l(),mM=a("li"),rve=a("strong"),xnr=o("yoso"),$nr=o(" \u2014 "),vW=a("a"),knr=o("YosoForQuestionAnswering"),Snr=o(" (YOSO model)"),Rnr=l(),fM=a("p"),Pnr=o("The model is set in evaluation mode by default using "),tve=a("code"),Bnr=o("model.eval()"),Inr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ave=a("code"),Nnr=o("model.train()"),qnr=l(),F(gM.$$.fragment),oze=l(),bd=a("h2"),hM=a("a"),nve=a("span"),F(S8.$$.fragment),jnr=l(),sve=a("span"),Dnr=o("AutoModelForTableQuestionAnswering"),rze=l(),Oo=a("div"),F(R8.$$.fragment),Gnr=l(),vd=a("p"),Onr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),FW=a("a"),Vnr=o("from_pretrained()"),Xnr=o(" class method or the "),TW=a("a"),znr=o("from_config()"),Qnr=o(` class
method.`),Wnr=l(),P8=a("p"),Hnr=o("This class cannot be instantiated directly using "),lve=a("code"),Unr=o("__init__()"),Jnr=o(" (throws an error)."),Ynr=l(),bt=a("div"),F(B8.$$.fragment),Knr=l(),ive=a("p"),Znr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),esr=l(),Fd=a("p"),osr=o(`Note:
Loading a model from its configuration file does `),dve=a("strong"),rsr=o("not"),tsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=a("a"),asr=o("from_pretrained()"),nsr=o(" to load the model weights."),ssr=l(),F(uM.$$.fragment),lsr=l(),lo=a("div"),F(I8.$$.fragment),isr=l(),cve=a("p"),dsr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),csr=l(),Qa=a("p"),msr=o("The model class to instantiate is selected based on the "),mve=a("code"),fsr=o("model_type"),gsr=o(` property of the config object (either
passed as an argument or loaded from `),fve=a("code"),hsr=o("pretrained_model_name_or_path"),usr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=a("code"),psr=o("pretrained_model_name_or_path"),_sr=o(":"),bsr=l(),hve=a("ul"),pM=a("li"),uve=a("strong"),vsr=o("tapas"),Fsr=o(" \u2014 "),EW=a("a"),Tsr=o("TapasForQuestionAnswering"),Msr=o(" (TAPAS model)"),Esr=l(),_M=a("p"),Csr=o("The model is set in evaluation mode by default using "),pve=a("code"),wsr=o("model.eval()"),Asr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ve=a("code"),Lsr=o("model.train()"),ysr=l(),F(bM.$$.fragment),tze=l(),Td=a("h2"),vM=a("a"),bve=a("span"),F(N8.$$.fragment),xsr=l(),vve=a("span"),$sr=o("AutoModelForImageClassification"),aze=l(),Vo=a("div"),F(q8.$$.fragment),ksr=l(),Md=a("p"),Ssr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CW=a("a"),Rsr=o("from_pretrained()"),Psr=o(" class method or the "),wW=a("a"),Bsr=o("from_config()"),Isr=o(` class
method.`),Nsr=l(),j8=a("p"),qsr=o("This class cannot be instantiated directly using "),Fve=a("code"),jsr=o("__init__()"),Dsr=o(" (throws an error)."),Gsr=l(),vt=a("div"),F(D8.$$.fragment),Osr=l(),Tve=a("p"),Vsr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Xsr=l(),Ed=a("p"),zsr=o(`Note:
Loading a model from its configuration file does `),Mve=a("strong"),Qsr=o("not"),Wsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=a("a"),Hsr=o("from_pretrained()"),Usr=o(" to load the model weights."),Jsr=l(),F(FM.$$.fragment),Ysr=l(),io=a("div"),F(G8.$$.fragment),Ksr=l(),Eve=a("p"),Zsr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),elr=l(),Wa=a("p"),olr=o("The model class to instantiate is selected based on the "),Cve=a("code"),rlr=o("model_type"),tlr=o(` property of the config object (either
passed as an argument or loaded from `),wve=a("code"),alr=o("pretrained_model_name_or_path"),nlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ave=a("code"),slr=o("pretrained_model_name_or_path"),llr=o(":"),ilr=l(),ve=a("ul"),TM=a("li"),Lve=a("strong"),dlr=o("beit"),clr=o(" \u2014 "),LW=a("a"),mlr=o("BeitForImageClassification"),flr=o(" (BEiT model)"),glr=l(),MM=a("li"),yve=a("strong"),hlr=o("convnext"),ulr=o(" \u2014 "),yW=a("a"),plr=o("ConvNextForImageClassification"),_lr=o(" (ConvNeXT model)"),blr=l(),EM=a("li"),xve=a("strong"),vlr=o("cvt"),Flr=o(" \u2014 "),xW=a("a"),Tlr=o("CvtForImageClassification"),Mlr=o(" (CvT model)"),Elr=l(),CM=a("li"),$ve=a("strong"),Clr=o("data2vec-vision"),wlr=o(" \u2014 "),$W=a("a"),Alr=o("Data2VecVisionForImageClassification"),Llr=o(" (Data2VecVision model)"),ylr=l(),Us=a("li"),kve=a("strong"),xlr=o("deit"),$lr=o(" \u2014 "),kW=a("a"),klr=o("DeiTForImageClassification"),Slr=o(" or "),SW=a("a"),Rlr=o("DeiTForImageClassificationWithTeacher"),Plr=o(" (DeiT model)"),Blr=l(),wM=a("li"),Sve=a("strong"),Ilr=o("imagegpt"),Nlr=o(" \u2014 "),RW=a("a"),qlr=o("ImageGPTForImageClassification"),jlr=o(" (ImageGPT model)"),Dlr=l(),Js=a("li"),Rve=a("strong"),Glr=o("levit"),Olr=o(" \u2014 "),PW=a("a"),Vlr=o("LevitForImageClassification"),Xlr=o(" or "),BW=a("a"),zlr=o("LevitForImageClassificationWithTeacher"),Qlr=o(" (LeViT model)"),Wlr=l(),AM=a("li"),Pve=a("strong"),Hlr=o("mobilevit"),Ulr=o(" \u2014 "),IW=a("a"),Jlr=o("MobileViTForImageClassification"),Ylr=o(" (MobileViT model)"),Klr=l(),Ft=a("li"),Bve=a("strong"),Zlr=o("perceiver"),eir=o(" \u2014 "),NW=a("a"),oir=o("PerceiverForImageClassificationLearned"),rir=o(" or "),qW=a("a"),tir=o("PerceiverForImageClassificationFourier"),air=o(" or "),jW=a("a"),nir=o("PerceiverForImageClassificationConvProcessing"),sir=o(" (Perceiver model)"),lir=l(),LM=a("li"),Ive=a("strong"),iir=o("poolformer"),dir=o(" \u2014 "),DW=a("a"),cir=o("PoolFormerForImageClassification"),mir=o(" (PoolFormer model)"),fir=l(),yM=a("li"),Nve=a("strong"),gir=o("regnet"),hir=o(" \u2014 "),GW=a("a"),uir=o("RegNetForImageClassification"),pir=o(" (RegNet model)"),_ir=l(),xM=a("li"),qve=a("strong"),bir=o("resnet"),vir=o(" \u2014 "),OW=a("a"),Fir=o("ResNetForImageClassification"),Tir=o(" (ResNet model)"),Mir=l(),$M=a("li"),jve=a("strong"),Eir=o("segformer"),Cir=o(" \u2014 "),VW=a("a"),wir=o("SegformerForImageClassification"),Air=o(" (SegFormer model)"),Lir=l(),kM=a("li"),Dve=a("strong"),yir=o("swin"),xir=o(" \u2014 "),XW=a("a"),$ir=o("SwinForImageClassification"),kir=o(" (Swin Transformer model)"),Sir=l(),SM=a("li"),Gve=a("strong"),Rir=o("van"),Pir=o(" \u2014 "),zW=a("a"),Bir=o("VanForImageClassification"),Iir=o(" (VAN model)"),Nir=l(),RM=a("li"),Ove=a("strong"),qir=o("vit"),jir=o(" \u2014 "),QW=a("a"),Dir=o("ViTForImageClassification"),Gir=o(" (ViT model)"),Oir=l(),PM=a("p"),Vir=o("The model is set in evaluation mode by default using "),Vve=a("code"),Xir=o("model.eval()"),zir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xve=a("code"),Qir=o("model.train()"),Wir=l(),F(BM.$$.fragment),nze=l(),Cd=a("h2"),IM=a("a"),zve=a("span"),F(O8.$$.fragment),Hir=l(),Qve=a("span"),Uir=o("AutoModelForVision2Seq"),sze=l(),Xo=a("div"),F(V8.$$.fragment),Jir=l(),wd=a("p"),Yir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WW=a("a"),Kir=o("from_pretrained()"),Zir=o(" class method or the "),HW=a("a"),edr=o("from_config()"),odr=o(` class
method.`),rdr=l(),X8=a("p"),tdr=o("This class cannot be instantiated directly using "),Wve=a("code"),adr=o("__init__()"),ndr=o(" (throws an error)."),sdr=l(),Tt=a("div"),F(z8.$$.fragment),ldr=l(),Hve=a("p"),idr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ddr=l(),Ad=a("p"),cdr=o(`Note:
Loading a model from its configuration file does `),Uve=a("strong"),mdr=o("not"),fdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=a("a"),gdr=o("from_pretrained()"),hdr=o(" to load the model weights."),udr=l(),F(NM.$$.fragment),pdr=l(),co=a("div"),F(Q8.$$.fragment),_dr=l(),Jve=a("p"),bdr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vdr=l(),Ha=a("p"),Fdr=o("The model class to instantiate is selected based on the "),Yve=a("code"),Tdr=o("model_type"),Mdr=o(` property of the config object (either
passed as an argument or loaded from `),Kve=a("code"),Edr=o("pretrained_model_name_or_path"),Cdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=a("code"),wdr=o("pretrained_model_name_or_path"),Adr=o(":"),Ldr=l(),e1e=a("ul"),qM=a("li"),o1e=a("strong"),ydr=o("vision-encoder-decoder"),xdr=o(" \u2014 "),JW=a("a"),$dr=o("VisionEncoderDecoderModel"),kdr=o(" (Vision Encoder decoder model)"),Sdr=l(),jM=a("p"),Rdr=o("The model is set in evaluation mode by default using "),r1e=a("code"),Pdr=o("model.eval()"),Bdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t1e=a("code"),Idr=o("model.train()"),Ndr=l(),F(DM.$$.fragment),lze=l(),Ld=a("h2"),GM=a("a"),a1e=a("span"),F(W8.$$.fragment),qdr=l(),n1e=a("span"),jdr=o("AutoModelForVisualQuestionAnswering"),ize=l(),zo=a("div"),F(H8.$$.fragment),Ddr=l(),yd=a("p"),Gdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),YW=a("a"),Odr=o("from_pretrained()"),Vdr=o(" class method or the "),KW=a("a"),Xdr=o("from_config()"),zdr=o(` class
method.`),Qdr=l(),U8=a("p"),Wdr=o("This class cannot be instantiated directly using "),s1e=a("code"),Hdr=o("__init__()"),Udr=o(" (throws an error)."),Jdr=l(),Mt=a("div"),F(J8.$$.fragment),Ydr=l(),l1e=a("p"),Kdr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Zdr=l(),xd=a("p"),ecr=o(`Note:
Loading a model from its configuration file does `),i1e=a("strong"),ocr=o("not"),rcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=a("a"),tcr=o("from_pretrained()"),acr=o(" to load the model weights."),ncr=l(),F(OM.$$.fragment),scr=l(),mo=a("div"),F(Y8.$$.fragment),lcr=l(),d1e=a("p"),icr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),dcr=l(),Ua=a("p"),ccr=o("The model class to instantiate is selected based on the "),c1e=a("code"),mcr=o("model_type"),fcr=o(` property of the config object (either
passed as an argument or loaded from `),m1e=a("code"),gcr=o("pretrained_model_name_or_path"),hcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f1e=a("code"),ucr=o("pretrained_model_name_or_path"),pcr=o(":"),_cr=l(),g1e=a("ul"),VM=a("li"),h1e=a("strong"),bcr=o("vilt"),vcr=o(" \u2014 "),eH=a("a"),Fcr=o("ViltForQuestionAnswering"),Tcr=o(" (ViLT model)"),Mcr=l(),XM=a("p"),Ecr=o("The model is set in evaluation mode by default using "),u1e=a("code"),Ccr=o("model.eval()"),wcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p1e=a("code"),Acr=o("model.train()"),Lcr=l(),F(zM.$$.fragment),dze=l(),$d=a("h2"),QM=a("a"),_1e=a("span"),F(K8.$$.fragment),ycr=l(),b1e=a("span"),xcr=o("AutoModelForAudioClassification"),cze=l(),Qo=a("div"),F(Z8.$$.fragment),$cr=l(),kd=a("p"),kcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),oH=a("a"),Scr=o("from_pretrained()"),Rcr=o(" class method or the "),rH=a("a"),Pcr=o("from_config()"),Bcr=o(` class
method.`),Icr=l(),e9=a("p"),Ncr=o("This class cannot be instantiated directly using "),v1e=a("code"),qcr=o("__init__()"),jcr=o(" (throws an error)."),Dcr=l(),Et=a("div"),F(o9.$$.fragment),Gcr=l(),F1e=a("p"),Ocr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Vcr=l(),Sd=a("p"),Xcr=o(`Note:
Loading a model from its configuration file does `),T1e=a("strong"),zcr=o("not"),Qcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=a("a"),Wcr=o("from_pretrained()"),Hcr=o(" to load the model weights."),Ucr=l(),F(WM.$$.fragment),Jcr=l(),fo=a("div"),F(r9.$$.fragment),Ycr=l(),M1e=a("p"),Kcr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Zcr=l(),Ja=a("p"),emr=o("The model class to instantiate is selected based on the "),E1e=a("code"),omr=o("model_type"),rmr=o(` property of the config object (either
passed as an argument or loaded from `),C1e=a("code"),tmr=o("pretrained_model_name_or_path"),amr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w1e=a("code"),nmr=o("pretrained_model_name_or_path"),smr=o(":"),lmr=l(),Pe=a("ul"),HM=a("li"),A1e=a("strong"),imr=o("data2vec-audio"),dmr=o(" \u2014 "),aH=a("a"),cmr=o("Data2VecAudioForSequenceClassification"),mmr=o(" (Data2VecAudio model)"),fmr=l(),UM=a("li"),L1e=a("strong"),gmr=o("hubert"),hmr=o(" \u2014 "),nH=a("a"),umr=o("HubertForSequenceClassification"),pmr=o(" (Hubert model)"),_mr=l(),JM=a("li"),y1e=a("strong"),bmr=o("sew"),vmr=o(" \u2014 "),sH=a("a"),Fmr=o("SEWForSequenceClassification"),Tmr=o(" (SEW model)"),Mmr=l(),YM=a("li"),x1e=a("strong"),Emr=o("sew-d"),Cmr=o(" \u2014 "),lH=a("a"),wmr=o("SEWDForSequenceClassification"),Amr=o(" (SEW-D model)"),Lmr=l(),KM=a("li"),$1e=a("strong"),ymr=o("unispeech"),xmr=o(" \u2014 "),iH=a("a"),$mr=o("UniSpeechForSequenceClassification"),kmr=o(" (UniSpeech model)"),Smr=l(),ZM=a("li"),k1e=a("strong"),Rmr=o("unispeech-sat"),Pmr=o(" \u2014 "),dH=a("a"),Bmr=o("UniSpeechSatForSequenceClassification"),Imr=o(" (UniSpeechSat model)"),Nmr=l(),e4=a("li"),S1e=a("strong"),qmr=o("wav2vec2"),jmr=o(" \u2014 "),cH=a("a"),Dmr=o("Wav2Vec2ForSequenceClassification"),Gmr=o(" (Wav2Vec2 model)"),Omr=l(),o4=a("li"),R1e=a("strong"),Vmr=o("wav2vec2-conformer"),Xmr=o(" \u2014 "),mH=a("a"),zmr=o("Wav2Vec2ConformerForSequenceClassification"),Qmr=o(" (Wav2Vec2-Conformer model)"),Wmr=l(),r4=a("li"),P1e=a("strong"),Hmr=o("wavlm"),Umr=o(" \u2014 "),fH=a("a"),Jmr=o("WavLMForSequenceClassification"),Ymr=o(" (WavLM model)"),Kmr=l(),t4=a("p"),Zmr=o("The model is set in evaluation mode by default using "),B1e=a("code"),efr=o("model.eval()"),ofr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I1e=a("code"),rfr=o("model.train()"),tfr=l(),F(a4.$$.fragment),mze=l(),Rd=a("h2"),n4=a("a"),N1e=a("span"),F(t9.$$.fragment),afr=l(),q1e=a("span"),nfr=o("AutoModelForAudioFrameClassification"),fze=l(),Wo=a("div"),F(a9.$$.fragment),sfr=l(),Pd=a("p"),lfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),gH=a("a"),ifr=o("from_pretrained()"),dfr=o(" class method or the "),hH=a("a"),cfr=o("from_config()"),mfr=o(` class
method.`),ffr=l(),n9=a("p"),gfr=o("This class cannot be instantiated directly using "),j1e=a("code"),hfr=o("__init__()"),ufr=o(" (throws an error)."),pfr=l(),Ct=a("div"),F(s9.$$.fragment),_fr=l(),D1e=a("p"),bfr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),vfr=l(),Bd=a("p"),Ffr=o(`Note:
Loading a model from its configuration file does `),G1e=a("strong"),Tfr=o("not"),Mfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=a("a"),Efr=o("from_pretrained()"),Cfr=o(" to load the model weights."),wfr=l(),F(s4.$$.fragment),Afr=l(),go=a("div"),F(l9.$$.fragment),Lfr=l(),O1e=a("p"),yfr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),xfr=l(),Ya=a("p"),$fr=o("The model class to instantiate is selected based on the "),V1e=a("code"),kfr=o("model_type"),Sfr=o(` property of the config object (either
passed as an argument or loaded from `),X1e=a("code"),Rfr=o("pretrained_model_name_or_path"),Pfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z1e=a("code"),Bfr=o("pretrained_model_name_or_path"),Ifr=o(":"),Nfr=l(),rt=a("ul"),l4=a("li"),Q1e=a("strong"),qfr=o("data2vec-audio"),jfr=o(" \u2014 "),pH=a("a"),Dfr=o("Data2VecAudioForAudioFrameClassification"),Gfr=o(" (Data2VecAudio model)"),Ofr=l(),i4=a("li"),W1e=a("strong"),Vfr=o("unispeech-sat"),Xfr=o(" \u2014 "),_H=a("a"),zfr=o("UniSpeechSatForAudioFrameClassification"),Qfr=o(" (UniSpeechSat model)"),Wfr=l(),d4=a("li"),H1e=a("strong"),Hfr=o("wav2vec2"),Ufr=o(" \u2014 "),bH=a("a"),Jfr=o("Wav2Vec2ForAudioFrameClassification"),Yfr=o(" (Wav2Vec2 model)"),Kfr=l(),c4=a("li"),U1e=a("strong"),Zfr=o("wav2vec2-conformer"),egr=o(" \u2014 "),vH=a("a"),ogr=o("Wav2Vec2ConformerForAudioFrameClassification"),rgr=o(" (Wav2Vec2-Conformer model)"),tgr=l(),m4=a("li"),J1e=a("strong"),agr=o("wavlm"),ngr=o(" \u2014 "),FH=a("a"),sgr=o("WavLMForAudioFrameClassification"),lgr=o(" (WavLM model)"),igr=l(),f4=a("p"),dgr=o("The model is set in evaluation mode by default using "),Y1e=a("code"),cgr=o("model.eval()"),mgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K1e=a("code"),fgr=o("model.train()"),ggr=l(),F(g4.$$.fragment),gze=l(),Id=a("h2"),h4=a("a"),Z1e=a("span"),F(i9.$$.fragment),hgr=l(),eFe=a("span"),ugr=o("AutoModelForCTC"),hze=l(),Ho=a("div"),F(d9.$$.fragment),pgr=l(),Nd=a("p"),_gr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),TH=a("a"),bgr=o("from_pretrained()"),vgr=o(" class method or the "),MH=a("a"),Fgr=o("from_config()"),Tgr=o(` class
method.`),Mgr=l(),c9=a("p"),Egr=o("This class cannot be instantiated directly using "),oFe=a("code"),Cgr=o("__init__()"),wgr=o(" (throws an error)."),Agr=l(),wt=a("div"),F(m9.$$.fragment),Lgr=l(),rFe=a("p"),ygr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),xgr=l(),qd=a("p"),$gr=o(`Note:
Loading a model from its configuration file does `),tFe=a("strong"),kgr=o("not"),Sgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=a("a"),Rgr=o("from_pretrained()"),Pgr=o(" to load the model weights."),Bgr=l(),F(u4.$$.fragment),Igr=l(),ho=a("div"),F(f9.$$.fragment),Ngr=l(),aFe=a("p"),qgr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),jgr=l(),Ka=a("p"),Dgr=o("The model class to instantiate is selected based on the "),nFe=a("code"),Ggr=o("model_type"),Ogr=o(` property of the config object (either
passed as an argument or loaded from `),sFe=a("code"),Vgr=o("pretrained_model_name_or_path"),Xgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lFe=a("code"),zgr=o("pretrained_model_name_or_path"),Qgr=o(":"),Wgr=l(),Le=a("ul"),p4=a("li"),iFe=a("strong"),Hgr=o("data2vec-audio"),Ugr=o(" \u2014 "),CH=a("a"),Jgr=o("Data2VecAudioForCTC"),Ygr=o(" (Data2VecAudio model)"),Kgr=l(),_4=a("li"),dFe=a("strong"),Zgr=o("hubert"),ehr=o(" \u2014 "),wH=a("a"),ohr=o("HubertForCTC"),rhr=o(" (Hubert model)"),thr=l(),b4=a("li"),cFe=a("strong"),ahr=o("mctct"),nhr=o(" \u2014 "),AH=a("a"),shr=o("MCTCTForCTC"),lhr=o(" (M-CTC-T model)"),ihr=l(),v4=a("li"),mFe=a("strong"),dhr=o("sew"),chr=o(" \u2014 "),LH=a("a"),mhr=o("SEWForCTC"),fhr=o(" (SEW model)"),ghr=l(),F4=a("li"),fFe=a("strong"),hhr=o("sew-d"),uhr=o(" \u2014 "),yH=a("a"),phr=o("SEWDForCTC"),_hr=o(" (SEW-D model)"),bhr=l(),T4=a("li"),gFe=a("strong"),vhr=o("unispeech"),Fhr=o(" \u2014 "),xH=a("a"),Thr=o("UniSpeechForCTC"),Mhr=o(" (UniSpeech model)"),Ehr=l(),M4=a("li"),hFe=a("strong"),Chr=o("unispeech-sat"),whr=o(" \u2014 "),$H=a("a"),Ahr=o("UniSpeechSatForCTC"),Lhr=o(" (UniSpeechSat model)"),yhr=l(),E4=a("li"),uFe=a("strong"),xhr=o("wav2vec2"),$hr=o(" \u2014 "),kH=a("a"),khr=o("Wav2Vec2ForCTC"),Shr=o(" (Wav2Vec2 model)"),Rhr=l(),C4=a("li"),pFe=a("strong"),Phr=o("wav2vec2-conformer"),Bhr=o(" \u2014 "),SH=a("a"),Ihr=o("Wav2Vec2ConformerForCTC"),Nhr=o(" (Wav2Vec2-Conformer model)"),qhr=l(),w4=a("li"),_Fe=a("strong"),jhr=o("wavlm"),Dhr=o(" \u2014 "),RH=a("a"),Ghr=o("WavLMForCTC"),Ohr=o(" (WavLM model)"),Vhr=l(),A4=a("p"),Xhr=o("The model is set in evaluation mode by default using "),bFe=a("code"),zhr=o("model.eval()"),Qhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vFe=a("code"),Whr=o("model.train()"),Hhr=l(),F(L4.$$.fragment),uze=l(),jd=a("h2"),y4=a("a"),FFe=a("span"),F(g9.$$.fragment),Uhr=l(),TFe=a("span"),Jhr=o("AutoModelForSpeechSeq2Seq"),pze=l(),Uo=a("div"),F(h9.$$.fragment),Yhr=l(),Dd=a("p"),Khr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PH=a("a"),Zhr=o("from_pretrained()"),eur=o(" class method or the "),BH=a("a"),our=o("from_config()"),rur=o(` class
method.`),tur=l(),u9=a("p"),aur=o("This class cannot be instantiated directly using "),MFe=a("code"),nur=o("__init__()"),sur=o(" (throws an error)."),lur=l(),At=a("div"),F(p9.$$.fragment),iur=l(),EFe=a("p"),dur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),cur=l(),Gd=a("p"),mur=o(`Note:
Loading a model from its configuration file does `),CFe=a("strong"),fur=o("not"),gur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=a("a"),hur=o("from_pretrained()"),uur=o(" to load the model weights."),pur=l(),F(x4.$$.fragment),_ur=l(),uo=a("div"),F(_9.$$.fragment),bur=l(),wFe=a("p"),vur=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Fur=l(),Za=a("p"),Tur=o("The model class to instantiate is selected based on the "),AFe=a("code"),Mur=o("model_type"),Eur=o(` property of the config object (either
passed as an argument or loaded from `),LFe=a("code"),Cur=o("pretrained_model_name_or_path"),wur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=a("code"),Aur=o("pretrained_model_name_or_path"),Lur=o(":"),yur=l(),b9=a("ul"),$4=a("li"),xFe=a("strong"),xur=o("speech-encoder-decoder"),$ur=o(" \u2014 "),NH=a("a"),kur=o("SpeechEncoderDecoderModel"),Sur=o(" (Speech Encoder decoder model)"),Rur=l(),k4=a("li"),$Fe=a("strong"),Pur=o("speech_to_text"),Bur=o(" \u2014 "),qH=a("a"),Iur=o("Speech2TextForConditionalGeneration"),Nur=o(" (Speech2Text model)"),qur=l(),S4=a("p"),jur=o("The model is set in evaluation mode by default using "),kFe=a("code"),Dur=o("model.eval()"),Gur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SFe=a("code"),Our=o("model.train()"),Vur=l(),F(R4.$$.fragment),_ze=l(),Od=a("h2"),P4=a("a"),RFe=a("span"),F(v9.$$.fragment),Xur=l(),PFe=a("span"),zur=o("AutoModelForAudioXVector"),bze=l(),Jo=a("div"),F(F9.$$.fragment),Qur=l(),Vd=a("p"),Wur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jH=a("a"),Hur=o("from_pretrained()"),Uur=o(" class method or the "),DH=a("a"),Jur=o("from_config()"),Yur=o(` class
method.`),Kur=l(),T9=a("p"),Zur=o("This class cannot be instantiated directly using "),BFe=a("code"),epr=o("__init__()"),opr=o(" (throws an error)."),rpr=l(),Lt=a("div"),F(M9.$$.fragment),tpr=l(),IFe=a("p"),apr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),npr=l(),Xd=a("p"),spr=o(`Note:
Loading a model from its configuration file does `),NFe=a("strong"),lpr=o("not"),ipr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=a("a"),dpr=o("from_pretrained()"),cpr=o(" to load the model weights."),mpr=l(),F(B4.$$.fragment),fpr=l(),po=a("div"),F(E9.$$.fragment),gpr=l(),qFe=a("p"),hpr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),upr=l(),en=a("p"),ppr=o("The model class to instantiate is selected based on the "),jFe=a("code"),_pr=o("model_type"),bpr=o(` property of the config object (either
passed as an argument or loaded from `),DFe=a("code"),vpr=o("pretrained_model_name_or_path"),Fpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GFe=a("code"),Tpr=o("pretrained_model_name_or_path"),Mpr=o(":"),Epr=l(),tt=a("ul"),I4=a("li"),OFe=a("strong"),Cpr=o("data2vec-audio"),wpr=o(" \u2014 "),OH=a("a"),Apr=o("Data2VecAudioForXVector"),Lpr=o(" (Data2VecAudio model)"),ypr=l(),N4=a("li"),VFe=a("strong"),xpr=o("unispeech-sat"),$pr=o(" \u2014 "),VH=a("a"),kpr=o("UniSpeechSatForXVector"),Spr=o(" (UniSpeechSat model)"),Rpr=l(),q4=a("li"),XFe=a("strong"),Ppr=o("wav2vec2"),Bpr=o(" \u2014 "),XH=a("a"),Ipr=o("Wav2Vec2ForXVector"),Npr=o(" (Wav2Vec2 model)"),qpr=l(),j4=a("li"),zFe=a("strong"),jpr=o("wav2vec2-conformer"),Dpr=o(" \u2014 "),zH=a("a"),Gpr=o("Wav2Vec2ConformerForXVector"),Opr=o(" (Wav2Vec2-Conformer model)"),Vpr=l(),D4=a("li"),QFe=a("strong"),Xpr=o("wavlm"),zpr=o(" \u2014 "),QH=a("a"),Qpr=o("WavLMForXVector"),Wpr=o(" (WavLM model)"),Hpr=l(),G4=a("p"),Upr=o("The model is set in evaluation mode by default using "),WFe=a("code"),Jpr=o("model.eval()"),Ypr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),HFe=a("code"),Kpr=o("model.train()"),Zpr=l(),F(O4.$$.fragment),vze=l(),zd=a("h2"),V4=a("a"),UFe=a("span"),F(C9.$$.fragment),e_r=l(),JFe=a("span"),o_r=o("AutoModelForMaskedImageModeling"),Fze=l(),Yo=a("div"),F(w9.$$.fragment),r_r=l(),Qd=a("p"),t_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),WH=a("a"),a_r=o("from_pretrained()"),n_r=o(" class method or the "),HH=a("a"),s_r=o("from_config()"),l_r=o(` class
method.`),i_r=l(),A9=a("p"),d_r=o("This class cannot be instantiated directly using "),YFe=a("code"),c_r=o("__init__()"),m_r=o(" (throws an error)."),f_r=l(),yt=a("div"),F(L9.$$.fragment),g_r=l(),KFe=a("p"),h_r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),u_r=l(),Wd=a("p"),p_r=o(`Note:
Loading a model from its configuration file does `),ZFe=a("strong"),__r=o("not"),b_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=a("a"),v_r=o("from_pretrained()"),F_r=o(" to load the model weights."),T_r=l(),F(X4.$$.fragment),M_r=l(),_o=a("div"),F(y9.$$.fragment),E_r=l(),eTe=a("p"),C_r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),w_r=l(),on=a("p"),A_r=o("The model class to instantiate is selected based on the "),oTe=a("code"),L_r=o("model_type"),y_r=o(` property of the config object (either
passed as an argument or loaded from `),rTe=a("code"),x_r=o("pretrained_model_name_or_path"),$_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=a("code"),k_r=o("pretrained_model_name_or_path"),S_r=o(":"),R_r=l(),Hd=a("ul"),z4=a("li"),aTe=a("strong"),P_r=o("deit"),B_r=o(" \u2014 "),JH=a("a"),I_r=o("DeiTForMaskedImageModeling"),N_r=o(" (DeiT model)"),q_r=l(),Q4=a("li"),nTe=a("strong"),j_r=o("swin"),D_r=o(" \u2014 "),YH=a("a"),G_r=o("SwinForMaskedImageModeling"),O_r=o(" (Swin Transformer model)"),V_r=l(),W4=a("li"),sTe=a("strong"),X_r=o("vit"),z_r=o(" \u2014 "),KH=a("a"),Q_r=o("ViTForMaskedImageModeling"),W_r=o(" (ViT model)"),H_r=l(),H4=a("p"),U_r=o("The model is set in evaluation mode by default using "),lTe=a("code"),J_r=o("model.eval()"),Y_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iTe=a("code"),K_r=o("model.train()"),Z_r=l(),F(U4.$$.fragment),Tze=l(),Ud=a("h2"),J4=a("a"),dTe=a("span"),F(x9.$$.fragment),e2r=l(),cTe=a("span"),o2r=o("AutoModelForObjectDetection"),Mze=l(),Ko=a("div"),F($9.$$.fragment),r2r=l(),Jd=a("p"),t2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),ZH=a("a"),a2r=o("from_pretrained()"),n2r=o(" class method or the "),eU=a("a"),s2r=o("from_config()"),l2r=o(` class
method.`),i2r=l(),k9=a("p"),d2r=o("This class cannot be instantiated directly using "),mTe=a("code"),c2r=o("__init__()"),m2r=o(" (throws an error)."),f2r=l(),xt=a("div"),F(S9.$$.fragment),g2r=l(),fTe=a("p"),h2r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),u2r=l(),Yd=a("p"),p2r=o(`Note:
Loading a model from its configuration file does `),gTe=a("strong"),_2r=o("not"),b2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),v2r=o("from_pretrained()"),F2r=o(" to load the model weights."),T2r=l(),F(Y4.$$.fragment),M2r=l(),bo=a("div"),F(R9.$$.fragment),E2r=l(),hTe=a("p"),C2r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),w2r=l(),rn=a("p"),A2r=o("The model class to instantiate is selected based on the "),uTe=a("code"),L2r=o("model_type"),y2r=o(` property of the config object (either
passed as an argument or loaded from `),pTe=a("code"),x2r=o("pretrained_model_name_or_path"),$2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Te=a("code"),k2r=o("pretrained_model_name_or_path"),S2r=o(":"),R2r=l(),P9=a("ul"),K4=a("li"),bTe=a("strong"),P2r=o("detr"),B2r=o(" \u2014 "),rU=a("a"),I2r=o("DetrForObjectDetection"),N2r=o(" (DETR model)"),q2r=l(),Z4=a("li"),vTe=a("strong"),j2r=o("yolos"),D2r=o(" \u2014 "),tU=a("a"),G2r=o("YolosForObjectDetection"),O2r=o(" (YOLOS model)"),V2r=l(),eE=a("p"),X2r=o("The model is set in evaluation mode by default using "),FTe=a("code"),z2r=o("model.eval()"),Q2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),TTe=a("code"),W2r=o("model.train()"),H2r=l(),F(oE.$$.fragment),Eze=l(),Kd=a("h2"),rE=a("a"),MTe=a("span"),F(B9.$$.fragment),U2r=l(),ETe=a("span"),J2r=o("AutoModelForImageSegmentation"),Cze=l(),Zo=a("div"),F(I9.$$.fragment),Y2r=l(),Zd=a("p"),K2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),aU=a("a"),Z2r=o("from_pretrained()"),ebr=o(" class method or the "),nU=a("a"),obr=o("from_config()"),rbr=o(` class
method.`),tbr=l(),N9=a("p"),abr=o("This class cannot be instantiated directly using "),CTe=a("code"),nbr=o("__init__()"),sbr=o(" (throws an error)."),lbr=l(),$t=a("div"),F(q9.$$.fragment),ibr=l(),wTe=a("p"),dbr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),cbr=l(),ec=a("p"),mbr=o(`Note:
Loading a model from its configuration file does `),ATe=a("strong"),fbr=o("not"),gbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=a("a"),hbr=o("from_pretrained()"),ubr=o(" to load the model weights."),pbr=l(),F(tE.$$.fragment),_br=l(),vo=a("div"),F(j9.$$.fragment),bbr=l(),LTe=a("p"),vbr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Fbr=l(),tn=a("p"),Tbr=o("The model class to instantiate is selected based on the "),yTe=a("code"),Mbr=o("model_type"),Ebr=o(` property of the config object (either
passed as an argument or loaded from `),xTe=a("code"),Cbr=o("pretrained_model_name_or_path"),wbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Te=a("code"),Abr=o("pretrained_model_name_or_path"),Lbr=o(":"),ybr=l(),kTe=a("ul"),aE=a("li"),STe=a("strong"),xbr=o("detr"),$br=o(" \u2014 "),lU=a("a"),kbr=o("DetrForSegmentation"),Sbr=o(" (DETR model)"),Rbr=l(),nE=a("p"),Pbr=o("The model is set in evaluation mode by default using "),RTe=a("code"),Bbr=o("model.eval()"),Ibr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PTe=a("code"),Nbr=o("model.train()"),qbr=l(),F(sE.$$.fragment),wze=l(),oc=a("h2"),lE=a("a"),BTe=a("span"),F(D9.$$.fragment),jbr=l(),ITe=a("span"),Dbr=o("AutoModelForSemanticSegmentation"),Aze=l(),er=a("div"),F(G9.$$.fragment),Gbr=l(),rc=a("p"),Obr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),iU=a("a"),Vbr=o("from_pretrained()"),Xbr=o(" class method or the "),dU=a("a"),zbr=o("from_config()"),Qbr=o(` class
method.`),Wbr=l(),O9=a("p"),Hbr=o("This class cannot be instantiated directly using "),NTe=a("code"),Ubr=o("__init__()"),Jbr=o(" (throws an error)."),Ybr=l(),kt=a("div"),F(V9.$$.fragment),Kbr=l(),qTe=a("p"),Zbr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),evr=l(),tc=a("p"),ovr=o(`Note:
Loading a model from its configuration file does `),jTe=a("strong"),rvr=o("not"),tvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=a("a"),avr=o("from_pretrained()"),nvr=o(" to load the model weights."),svr=l(),F(iE.$$.fragment),lvr=l(),Fo=a("div"),F(X9.$$.fragment),ivr=l(),DTe=a("p"),dvr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),cvr=l(),an=a("p"),mvr=o("The model class to instantiate is selected based on the "),GTe=a("code"),fvr=o("model_type"),gvr=o(` property of the config object (either
passed as an argument or loaded from `),OTe=a("code"),hvr=o("pretrained_model_name_or_path"),uvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=a("code"),pvr=o("pretrained_model_name_or_path"),_vr=o(":"),bvr=l(),at=a("ul"),dE=a("li"),XTe=a("strong"),vvr=o("beit"),Fvr=o(" \u2014 "),mU=a("a"),Tvr=o("BeitForSemanticSegmentation"),Mvr=o(" (BEiT model)"),Evr=l(),cE=a("li"),zTe=a("strong"),Cvr=o("data2vec-vision"),wvr=o(" \u2014 "),fU=a("a"),Avr=o("Data2VecVisionForSemanticSegmentation"),Lvr=o(" (Data2VecVision model)"),yvr=l(),mE=a("li"),QTe=a("strong"),xvr=o("dpt"),$vr=o(" \u2014 "),gU=a("a"),kvr=o("DPTForSemanticSegmentation"),Svr=o(" (DPT model)"),Rvr=l(),fE=a("li"),WTe=a("strong"),Pvr=o("mobilevit"),Bvr=o(" \u2014 "),hU=a("a"),Ivr=o("MobileViTForSemanticSegmentation"),Nvr=o(" (MobileViT model)"),qvr=l(),gE=a("li"),HTe=a("strong"),jvr=o("segformer"),Dvr=o(" \u2014 "),uU=a("a"),Gvr=o("SegformerForSemanticSegmentation"),Ovr=o(" (SegFormer model)"),Vvr=l(),hE=a("p"),Xvr=o("The model is set in evaluation mode by default using "),UTe=a("code"),zvr=o("model.eval()"),Qvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),JTe=a("code"),Wvr=o("model.train()"),Hvr=l(),F(uE.$$.fragment),Lze=l(),ac=a("h2"),pE=a("a"),YTe=a("span"),F(z9.$$.fragment),Uvr=l(),KTe=a("span"),Jvr=o("AutoModelForInstanceSegmentation"),yze=l(),or=a("div"),F(Q9.$$.fragment),Yvr=l(),nc=a("p"),Kvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),pU=a("a"),Zvr=o("from_pretrained()"),e1r=o(" class method or the "),_U=a("a"),o1r=o("from_config()"),r1r=o(` class
method.`),t1r=l(),W9=a("p"),a1r=o("This class cannot be instantiated directly using "),ZTe=a("code"),n1r=o("__init__()"),s1r=o(" (throws an error)."),l1r=l(),St=a("div"),F(H9.$$.fragment),i1r=l(),eMe=a("p"),d1r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),c1r=l(),sc=a("p"),m1r=o(`Note:
Loading a model from its configuration file does `),oMe=a("strong"),f1r=o("not"),g1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=a("a"),h1r=o("from_pretrained()"),u1r=o(" to load the model weights."),p1r=l(),F(_E.$$.fragment),_1r=l(),To=a("div"),F(U9.$$.fragment),b1r=l(),rMe=a("p"),v1r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),F1r=l(),nn=a("p"),T1r=o("The model class to instantiate is selected based on the "),tMe=a("code"),M1r=o("model_type"),E1r=o(` property of the config object (either
passed as an argument or loaded from `),aMe=a("code"),C1r=o("pretrained_model_name_or_path"),w1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=a("code"),A1r=o("pretrained_model_name_or_path"),L1r=o(":"),y1r=l(),sMe=a("ul"),bE=a("li"),lMe=a("strong"),x1r=o("maskformer"),$1r=o(" \u2014 "),vU=a("a"),k1r=o("MaskFormerForInstanceSegmentation"),S1r=o(" (MaskFormer model)"),R1r=l(),vE=a("p"),P1r=o("The model is set in evaluation mode by default using "),iMe=a("code"),B1r=o("model.eval()"),I1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dMe=a("code"),N1r=o("model.train()"),q1r=l(),F(FE.$$.fragment),xze=l(),lc=a("h2"),TE=a("a"),cMe=a("span"),F(J9.$$.fragment),j1r=l(),mMe=a("span"),D1r=o("TFAutoModel"),$ze=l(),rr=a("div"),F(Y9.$$.fragment),G1r=l(),ic=a("p"),O1r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FU=a("a"),V1r=o("from_pretrained()"),X1r=o(" class method or the "),TU=a("a"),z1r=o("from_config()"),Q1r=o(` class
method.`),W1r=l(),K9=a("p"),H1r=o("This class cannot be instantiated directly using "),fMe=a("code"),U1r=o("__init__()"),J1r=o(" (throws an error)."),Y1r=l(),Rt=a("div"),F(Z9.$$.fragment),K1r=l(),gMe=a("p"),Z1r=o("Instantiates one of the base model classes of the library from a configuration."),eFr=l(),dc=a("p"),oFr=o(`Note:
Loading a model from its configuration file does `),hMe=a("strong"),rFr=o("not"),tFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=a("a"),aFr=o("from_pretrained()"),nFr=o(" to load the model weights."),sFr=l(),F(ME.$$.fragment),lFr=l(),$r=a("div"),F(ex.$$.fragment),iFr=l(),uMe=a("p"),dFr=o("Instantiate one of the base model classes of the library from a pretrained model."),cFr=l(),sn=a("p"),mFr=o("The model class to instantiate is selected based on the "),pMe=a("code"),fFr=o("model_type"),gFr=o(` property of the config object (either
passed as an argument or loaded from `),_Me=a("code"),hFr=o("pretrained_model_name_or_path"),uFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bMe=a("code"),pFr=o("pretrained_model_name_or_path"),_Fr=o(":"),bFr=l(),I=a("ul"),EE=a("li"),vMe=a("strong"),vFr=o("albert"),FFr=o(" \u2014 "),EU=a("a"),TFr=o("TFAlbertModel"),MFr=o(" (ALBERT model)"),EFr=l(),CE=a("li"),FMe=a("strong"),CFr=o("bart"),wFr=o(" \u2014 "),CU=a("a"),AFr=o("TFBartModel"),LFr=o(" (BART model)"),yFr=l(),wE=a("li"),TMe=a("strong"),xFr=o("bert"),$Fr=o(" \u2014 "),wU=a("a"),kFr=o("TFBertModel"),SFr=o(" (BERT model)"),RFr=l(),AE=a("li"),MMe=a("strong"),PFr=o("blenderbot"),BFr=o(" \u2014 "),AU=a("a"),IFr=o("TFBlenderbotModel"),NFr=o(" (Blenderbot model)"),qFr=l(),LE=a("li"),EMe=a("strong"),jFr=o("blenderbot-small"),DFr=o(" \u2014 "),LU=a("a"),GFr=o("TFBlenderbotSmallModel"),OFr=o(" (BlenderbotSmall model)"),VFr=l(),yE=a("li"),CMe=a("strong"),XFr=o("camembert"),zFr=o(" \u2014 "),yU=a("a"),QFr=o("TFCamembertModel"),WFr=o(" (CamemBERT model)"),HFr=l(),xE=a("li"),wMe=a("strong"),UFr=o("clip"),JFr=o(" \u2014 "),xU=a("a"),YFr=o("TFCLIPModel"),KFr=o(" (CLIP model)"),ZFr=l(),$E=a("li"),AMe=a("strong"),eTr=o("convbert"),oTr=o(" \u2014 "),$U=a("a"),rTr=o("TFConvBertModel"),tTr=o(" (ConvBERT model)"),aTr=l(),kE=a("li"),LMe=a("strong"),nTr=o("convnext"),sTr=o(" \u2014 "),kU=a("a"),lTr=o("TFConvNextModel"),iTr=o(" (ConvNeXT model)"),dTr=l(),SE=a("li"),yMe=a("strong"),cTr=o("ctrl"),mTr=o(" \u2014 "),SU=a("a"),fTr=o("TFCTRLModel"),gTr=o(" (CTRL model)"),hTr=l(),RE=a("li"),xMe=a("strong"),uTr=o("data2vec-vision"),pTr=o(" \u2014 "),RU=a("a"),_Tr=o("TFData2VecVisionModel"),bTr=o(" (Data2VecVision model)"),vTr=l(),PE=a("li"),$Me=a("strong"),FTr=o("deberta"),TTr=o(" \u2014 "),PU=a("a"),MTr=o("TFDebertaModel"),ETr=o(" (DeBERTa model)"),CTr=l(),BE=a("li"),kMe=a("strong"),wTr=o("deberta-v2"),ATr=o(" \u2014 "),BU=a("a"),LTr=o("TFDebertaV2Model"),yTr=o(" (DeBERTa-v2 model)"),xTr=l(),IE=a("li"),SMe=a("strong"),$Tr=o("deit"),kTr=o(" \u2014 "),IU=a("a"),STr=o("TFDeiTModel"),RTr=o(" (DeiT model)"),PTr=l(),NE=a("li"),RMe=a("strong"),BTr=o("distilbert"),ITr=o(" \u2014 "),NU=a("a"),NTr=o("TFDistilBertModel"),qTr=o(" (DistilBERT model)"),jTr=l(),qE=a("li"),PMe=a("strong"),DTr=o("dpr"),GTr=o(" \u2014 "),qU=a("a"),OTr=o("TFDPRQuestionEncoder"),VTr=o(" (DPR model)"),XTr=l(),jE=a("li"),BMe=a("strong"),zTr=o("electra"),QTr=o(" \u2014 "),jU=a("a"),WTr=o("TFElectraModel"),HTr=o(" (ELECTRA model)"),UTr=l(),DE=a("li"),IMe=a("strong"),JTr=o("flaubert"),YTr=o(" \u2014 "),DU=a("a"),KTr=o("TFFlaubertModel"),ZTr=o(" (FlauBERT model)"),eMr=l(),Ys=a("li"),NMe=a("strong"),oMr=o("funnel"),rMr=o(" \u2014 "),GU=a("a"),tMr=o("TFFunnelModel"),aMr=o(" or "),OU=a("a"),nMr=o("TFFunnelBaseModel"),sMr=o(" (Funnel Transformer model)"),lMr=l(),GE=a("li"),qMe=a("strong"),iMr=o("gpt2"),dMr=o(" \u2014 "),VU=a("a"),cMr=o("TFGPT2Model"),mMr=o(" (OpenAI GPT-2 model)"),fMr=l(),OE=a("li"),jMe=a("strong"),gMr=o("gptj"),hMr=o(" \u2014 "),XU=a("a"),uMr=o("TFGPTJModel"),pMr=o(" (GPT-J model)"),_Mr=l(),VE=a("li"),DMe=a("strong"),bMr=o("hubert"),vMr=o(" \u2014 "),zU=a("a"),FMr=o("TFHubertModel"),TMr=o(" (Hubert model)"),MMr=l(),XE=a("li"),GMe=a("strong"),EMr=o("layoutlm"),CMr=o(" \u2014 "),QU=a("a"),wMr=o("TFLayoutLMModel"),AMr=o(" (LayoutLM model)"),LMr=l(),zE=a("li"),OMe=a("strong"),yMr=o("led"),xMr=o(" \u2014 "),WU=a("a"),$Mr=o("TFLEDModel"),kMr=o(" (LED model)"),SMr=l(),QE=a("li"),VMe=a("strong"),RMr=o("longformer"),PMr=o(" \u2014 "),HU=a("a"),BMr=o("TFLongformerModel"),IMr=o(" (Longformer model)"),NMr=l(),WE=a("li"),XMe=a("strong"),qMr=o("lxmert"),jMr=o(" \u2014 "),UU=a("a"),DMr=o("TFLxmertModel"),GMr=o(" (LXMERT model)"),OMr=l(),HE=a("li"),zMe=a("strong"),VMr=o("marian"),XMr=o(" \u2014 "),JU=a("a"),zMr=o("TFMarianModel"),QMr=o(" (Marian model)"),WMr=l(),UE=a("li"),QMe=a("strong"),HMr=o("mbart"),UMr=o(" \u2014 "),YU=a("a"),JMr=o("TFMBartModel"),YMr=o(" (mBART model)"),KMr=l(),JE=a("li"),WMe=a("strong"),ZMr=o("mobilebert"),e4r=o(" \u2014 "),KU=a("a"),o4r=o("TFMobileBertModel"),r4r=o(" (MobileBERT model)"),t4r=l(),YE=a("li"),HMe=a("strong"),a4r=o("mpnet"),n4r=o(" \u2014 "),ZU=a("a"),s4r=o("TFMPNetModel"),l4r=o(" (MPNet model)"),i4r=l(),KE=a("li"),UMe=a("strong"),d4r=o("mt5"),c4r=o(" \u2014 "),eJ=a("a"),m4r=o("TFMT5Model"),f4r=o(" (MT5 model)"),g4r=l(),ZE=a("li"),JMe=a("strong"),h4r=o("openai-gpt"),u4r=o(" \u2014 "),oJ=a("a"),p4r=o("TFOpenAIGPTModel"),_4r=o(" (OpenAI GPT model)"),b4r=l(),eC=a("li"),YMe=a("strong"),v4r=o("opt"),F4r=o(" \u2014 "),rJ=a("a"),T4r=o("TFOPTModel"),M4r=o(" (OPT model)"),E4r=l(),oC=a("li"),KMe=a("strong"),C4r=o("pegasus"),w4r=o(" \u2014 "),tJ=a("a"),A4r=o("TFPegasusModel"),L4r=o(" (Pegasus model)"),y4r=l(),rC=a("li"),ZMe=a("strong"),x4r=o("regnet"),$4r=o(" \u2014 "),aJ=a("a"),k4r=o("TFRegNetModel"),S4r=o(" (RegNet model)"),R4r=l(),tC=a("li"),e4e=a("strong"),P4r=o("rembert"),B4r=o(" \u2014 "),nJ=a("a"),I4r=o("TFRemBertModel"),N4r=o(" (RemBERT model)"),q4r=l(),aC=a("li"),o4e=a("strong"),j4r=o("resnet"),D4r=o(" \u2014 "),sJ=a("a"),G4r=o("TFResNetModel"),O4r=o(" (ResNet model)"),V4r=l(),nC=a("li"),r4e=a("strong"),X4r=o("roberta"),z4r=o(" \u2014 "),lJ=a("a"),Q4r=o("TFRobertaModel"),W4r=o(" (RoBERTa model)"),H4r=l(),sC=a("li"),t4e=a("strong"),U4r=o("roformer"),J4r=o(" \u2014 "),iJ=a("a"),Y4r=o("TFRoFormerModel"),K4r=o(" (RoFormer model)"),Z4r=l(),lC=a("li"),a4e=a("strong"),eEr=o("segformer"),oEr=o(" \u2014 "),dJ=a("a"),rEr=o("TFSegformerModel"),tEr=o(" (SegFormer model)"),aEr=l(),iC=a("li"),n4e=a("strong"),nEr=o("speech_to_text"),sEr=o(" \u2014 "),cJ=a("a"),lEr=o("TFSpeech2TextModel"),iEr=o(" (Speech2Text model)"),dEr=l(),dC=a("li"),s4e=a("strong"),cEr=o("swin"),mEr=o(" \u2014 "),mJ=a("a"),fEr=o("TFSwinModel"),gEr=o(" (Swin Transformer model)"),hEr=l(),cC=a("li"),l4e=a("strong"),uEr=o("t5"),pEr=o(" \u2014 "),fJ=a("a"),_Er=o("TFT5Model"),bEr=o(" (T5 model)"),vEr=l(),mC=a("li"),i4e=a("strong"),FEr=o("tapas"),TEr=o(" \u2014 "),gJ=a("a"),MEr=o("TFTapasModel"),EEr=o(" (TAPAS model)"),CEr=l(),fC=a("li"),d4e=a("strong"),wEr=o("transfo-xl"),AEr=o(" \u2014 "),hJ=a("a"),LEr=o("TFTransfoXLModel"),yEr=o(" (Transformer-XL model)"),xEr=l(),gC=a("li"),c4e=a("strong"),$Er=o("vit"),kEr=o(" \u2014 "),uJ=a("a"),SEr=o("TFViTModel"),REr=o(" (ViT model)"),PEr=l(),hC=a("li"),m4e=a("strong"),BEr=o("vit_mae"),IEr=o(" \u2014 "),pJ=a("a"),NEr=o("TFViTMAEModel"),qEr=o(" (ViTMAE model)"),jEr=l(),uC=a("li"),f4e=a("strong"),DEr=o("wav2vec2"),GEr=o(" \u2014 "),_J=a("a"),OEr=o("TFWav2Vec2Model"),VEr=o(" (Wav2Vec2 model)"),XEr=l(),pC=a("li"),g4e=a("strong"),zEr=o("xlm"),QEr=o(" \u2014 "),bJ=a("a"),WEr=o("TFXLMModel"),HEr=o(" (XLM model)"),UEr=l(),_C=a("li"),h4e=a("strong"),JEr=o("xlm-roberta"),YEr=o(" \u2014 "),vJ=a("a"),KEr=o("TFXLMRobertaModel"),ZEr=o(" (XLM-RoBERTa model)"),eCr=l(),bC=a("li"),u4e=a("strong"),oCr=o("xlnet"),rCr=o(" \u2014 "),FJ=a("a"),tCr=o("TFXLNetModel"),aCr=o(" (XLNet model)"),nCr=l(),F(vC.$$.fragment),kze=l(),cc=a("h2"),FC=a("a"),p4e=a("span"),F(ox.$$.fragment),sCr=l(),_4e=a("span"),lCr=o("TFAutoModelForPreTraining"),Sze=l(),tr=a("div"),F(rx.$$.fragment),iCr=l(),mc=a("p"),dCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TJ=a("a"),cCr=o("from_pretrained()"),mCr=o(" class method or the "),MJ=a("a"),fCr=o("from_config()"),gCr=o(` class
method.`),hCr=l(),tx=a("p"),uCr=o("This class cannot be instantiated directly using "),b4e=a("code"),pCr=o("__init__()"),_Cr=o(" (throws an error)."),bCr=l(),Pt=a("div"),F(ax.$$.fragment),vCr=l(),v4e=a("p"),FCr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),TCr=l(),fc=a("p"),MCr=o(`Note:
Loading a model from its configuration file does `),F4e=a("strong"),ECr=o("not"),CCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=a("a"),wCr=o("from_pretrained()"),ACr=o(" to load the model weights."),LCr=l(),F(TC.$$.fragment),yCr=l(),kr=a("div"),F(nx.$$.fragment),xCr=l(),T4e=a("p"),$Cr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kCr=l(),ln=a("p"),SCr=o("The model class to instantiate is selected based on the "),M4e=a("code"),RCr=o("model_type"),PCr=o(` property of the config object (either
passed as an argument or loaded from `),E4e=a("code"),BCr=o("pretrained_model_name_or_path"),ICr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C4e=a("code"),NCr=o("pretrained_model_name_or_path"),qCr=o(":"),jCr=l(),se=a("ul"),MC=a("li"),w4e=a("strong"),DCr=o("albert"),GCr=o(" \u2014 "),CJ=a("a"),OCr=o("TFAlbertForPreTraining"),VCr=o(" (ALBERT model)"),XCr=l(),EC=a("li"),A4e=a("strong"),zCr=o("bart"),QCr=o(" \u2014 "),wJ=a("a"),WCr=o("TFBartForConditionalGeneration"),HCr=o(" (BART model)"),UCr=l(),CC=a("li"),L4e=a("strong"),JCr=o("bert"),YCr=o(" \u2014 "),AJ=a("a"),KCr=o("TFBertForPreTraining"),ZCr=o(" (BERT model)"),e3r=l(),wC=a("li"),y4e=a("strong"),o3r=o("camembert"),r3r=o(" \u2014 "),LJ=a("a"),t3r=o("TFCamembertForMaskedLM"),a3r=o(" (CamemBERT model)"),n3r=l(),AC=a("li"),x4e=a("strong"),s3r=o("ctrl"),l3r=o(" \u2014 "),yJ=a("a"),i3r=o("TFCTRLLMHeadModel"),d3r=o(" (CTRL model)"),c3r=l(),LC=a("li"),$4e=a("strong"),m3r=o("distilbert"),f3r=o(" \u2014 "),xJ=a("a"),g3r=o("TFDistilBertForMaskedLM"),h3r=o(" (DistilBERT model)"),u3r=l(),yC=a("li"),k4e=a("strong"),p3r=o("electra"),_3r=o(" \u2014 "),$J=a("a"),b3r=o("TFElectraForPreTraining"),v3r=o(" (ELECTRA model)"),F3r=l(),xC=a("li"),S4e=a("strong"),T3r=o("flaubert"),M3r=o(" \u2014 "),kJ=a("a"),E3r=o("TFFlaubertWithLMHeadModel"),C3r=o(" (FlauBERT model)"),w3r=l(),$C=a("li"),R4e=a("strong"),A3r=o("funnel"),L3r=o(" \u2014 "),SJ=a("a"),y3r=o("TFFunnelForPreTraining"),x3r=o(" (Funnel Transformer model)"),$3r=l(),kC=a("li"),P4e=a("strong"),k3r=o("gpt2"),S3r=o(" \u2014 "),RJ=a("a"),R3r=o("TFGPT2LMHeadModel"),P3r=o(" (OpenAI GPT-2 model)"),B3r=l(),SC=a("li"),B4e=a("strong"),I3r=o("layoutlm"),N3r=o(" \u2014 "),PJ=a("a"),q3r=o("TFLayoutLMForMaskedLM"),j3r=o(" (LayoutLM model)"),D3r=l(),RC=a("li"),I4e=a("strong"),G3r=o("lxmert"),O3r=o(" \u2014 "),BJ=a("a"),V3r=o("TFLxmertForPreTraining"),X3r=o(" (LXMERT model)"),z3r=l(),PC=a("li"),N4e=a("strong"),Q3r=o("mobilebert"),W3r=o(" \u2014 "),IJ=a("a"),H3r=o("TFMobileBertForPreTraining"),U3r=o(" (MobileBERT model)"),J3r=l(),BC=a("li"),q4e=a("strong"),Y3r=o("mpnet"),K3r=o(" \u2014 "),NJ=a("a"),Z3r=o("TFMPNetForMaskedLM"),e5r=o(" (MPNet model)"),o5r=l(),IC=a("li"),j4e=a("strong"),r5r=o("openai-gpt"),t5r=o(" \u2014 "),qJ=a("a"),a5r=o("TFOpenAIGPTLMHeadModel"),n5r=o(" (OpenAI GPT model)"),s5r=l(),NC=a("li"),D4e=a("strong"),l5r=o("roberta"),i5r=o(" \u2014 "),jJ=a("a"),d5r=o("TFRobertaForMaskedLM"),c5r=o(" (RoBERTa model)"),m5r=l(),qC=a("li"),G4e=a("strong"),f5r=o("t5"),g5r=o(" \u2014 "),DJ=a("a"),h5r=o("TFT5ForConditionalGeneration"),u5r=o(" (T5 model)"),p5r=l(),jC=a("li"),O4e=a("strong"),_5r=o("tapas"),b5r=o(" \u2014 "),GJ=a("a"),v5r=o("TFTapasForMaskedLM"),F5r=o(" (TAPAS model)"),T5r=l(),DC=a("li"),V4e=a("strong"),M5r=o("transfo-xl"),E5r=o(" \u2014 "),OJ=a("a"),C5r=o("TFTransfoXLLMHeadModel"),w5r=o(" (Transformer-XL model)"),A5r=l(),GC=a("li"),X4e=a("strong"),L5r=o("vit_mae"),y5r=o(" \u2014 "),VJ=a("a"),x5r=o("TFViTMAEForPreTraining"),$5r=o(" (ViTMAE model)"),k5r=l(),OC=a("li"),z4e=a("strong"),S5r=o("xlm"),R5r=o(" \u2014 "),XJ=a("a"),P5r=o("TFXLMWithLMHeadModel"),B5r=o(" (XLM model)"),I5r=l(),VC=a("li"),Q4e=a("strong"),N5r=o("xlm-roberta"),q5r=o(" \u2014 "),zJ=a("a"),j5r=o("TFXLMRobertaForMaskedLM"),D5r=o(" (XLM-RoBERTa model)"),G5r=l(),XC=a("li"),W4e=a("strong"),O5r=o("xlnet"),V5r=o(" \u2014 "),QJ=a("a"),X5r=o("TFXLNetLMHeadModel"),z5r=o(" (XLNet model)"),Q5r=l(),F(zC.$$.fragment),Rze=l(),gc=a("h2"),QC=a("a"),H4e=a("span"),F(sx.$$.fragment),W5r=l(),U4e=a("span"),H5r=o("TFAutoModelForCausalLM"),Pze=l(),ar=a("div"),F(lx.$$.fragment),U5r=l(),hc=a("p"),J5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WJ=a("a"),Y5r=o("from_pretrained()"),K5r=o(" class method or the "),HJ=a("a"),Z5r=o("from_config()"),e0r=o(` class
method.`),o0r=l(),ix=a("p"),r0r=o("This class cannot be instantiated directly using "),J4e=a("code"),t0r=o("__init__()"),a0r=o(" (throws an error)."),n0r=l(),Bt=a("div"),F(dx.$$.fragment),s0r=l(),Y4e=a("p"),l0r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),i0r=l(),uc=a("p"),d0r=o(`Note:
Loading a model from its configuration file does `),K4e=a("strong"),c0r=o("not"),m0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=a("a"),f0r=o("from_pretrained()"),g0r=o(" to load the model weights."),h0r=l(),F(WC.$$.fragment),u0r=l(),Sr=a("div"),F(cx.$$.fragment),p0r=l(),Z4e=a("p"),_0r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),b0r=l(),dn=a("p"),v0r=o("The model class to instantiate is selected based on the "),eEe=a("code"),F0r=o("model_type"),T0r=o(` property of the config object (either
passed as an argument or loaded from `),oEe=a("code"),M0r=o("pretrained_model_name_or_path"),E0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rEe=a("code"),C0r=o("pretrained_model_name_or_path"),w0r=o(":"),A0r=l(),Me=a("ul"),HC=a("li"),tEe=a("strong"),L0r=o("bert"),y0r=o(" \u2014 "),JJ=a("a"),x0r=o("TFBertLMHeadModel"),$0r=o(" (BERT model)"),k0r=l(),UC=a("li"),aEe=a("strong"),S0r=o("camembert"),R0r=o(" \u2014 "),YJ=a("a"),P0r=o("TFCamembertForCausalLM"),B0r=o(" (CamemBERT model)"),I0r=l(),JC=a("li"),nEe=a("strong"),N0r=o("ctrl"),q0r=o(" \u2014 "),KJ=a("a"),j0r=o("TFCTRLLMHeadModel"),D0r=o(" (CTRL model)"),G0r=l(),YC=a("li"),sEe=a("strong"),O0r=o("gpt2"),V0r=o(" \u2014 "),ZJ=a("a"),X0r=o("TFGPT2LMHeadModel"),z0r=o(" (OpenAI GPT-2 model)"),Q0r=l(),KC=a("li"),lEe=a("strong"),W0r=o("gptj"),H0r=o(" \u2014 "),eY=a("a"),U0r=o("TFGPTJForCausalLM"),J0r=o(" (GPT-J model)"),Y0r=l(),ZC=a("li"),iEe=a("strong"),K0r=o("openai-gpt"),Z0r=o(" \u2014 "),oY=a("a"),ewr=o("TFOpenAIGPTLMHeadModel"),owr=o(" (OpenAI GPT model)"),rwr=l(),e3=a("li"),dEe=a("strong"),twr=o("opt"),awr=o(" \u2014 "),rY=a("a"),nwr=o("TFOPTForCausalLM"),swr=o(" (OPT model)"),lwr=l(),o3=a("li"),cEe=a("strong"),iwr=o("rembert"),dwr=o(" \u2014 "),tY=a("a"),cwr=o("TFRemBertForCausalLM"),mwr=o(" (RemBERT model)"),fwr=l(),r3=a("li"),mEe=a("strong"),gwr=o("roberta"),hwr=o(" \u2014 "),aY=a("a"),uwr=o("TFRobertaForCausalLM"),pwr=o(" (RoBERTa model)"),_wr=l(),t3=a("li"),fEe=a("strong"),bwr=o("roformer"),vwr=o(" \u2014 "),nY=a("a"),Fwr=o("TFRoFormerForCausalLM"),Twr=o(" (RoFormer model)"),Mwr=l(),a3=a("li"),gEe=a("strong"),Ewr=o("transfo-xl"),Cwr=o(" \u2014 "),sY=a("a"),wwr=o("TFTransfoXLLMHeadModel"),Awr=o(" (Transformer-XL model)"),Lwr=l(),n3=a("li"),hEe=a("strong"),ywr=o("xlm"),xwr=o(" \u2014 "),lY=a("a"),$wr=o("TFXLMWithLMHeadModel"),kwr=o(" (XLM model)"),Swr=l(),s3=a("li"),uEe=a("strong"),Rwr=o("xlnet"),Pwr=o(" \u2014 "),iY=a("a"),Bwr=o("TFXLNetLMHeadModel"),Iwr=o(" (XLNet model)"),Nwr=l(),F(l3.$$.fragment),Bze=l(),pc=a("h2"),i3=a("a"),pEe=a("span"),F(mx.$$.fragment),qwr=l(),_Ee=a("span"),jwr=o("TFAutoModelForImageClassification"),Ize=l(),nr=a("div"),F(fx.$$.fragment),Dwr=l(),_c=a("p"),Gwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dY=a("a"),Owr=o("from_pretrained()"),Vwr=o(" class method or the "),cY=a("a"),Xwr=o("from_config()"),zwr=o(` class
method.`),Qwr=l(),gx=a("p"),Wwr=o("This class cannot be instantiated directly using "),bEe=a("code"),Hwr=o("__init__()"),Uwr=o(" (throws an error)."),Jwr=l(),It=a("div"),F(hx.$$.fragment),Ywr=l(),vEe=a("p"),Kwr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Zwr=l(),bc=a("p"),eAr=o(`Note:
Loading a model from its configuration file does `),FEe=a("strong"),oAr=o("not"),rAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=a("a"),tAr=o("from_pretrained()"),aAr=o(" to load the model weights."),nAr=l(),F(d3.$$.fragment),sAr=l(),Rr=a("div"),F(ux.$$.fragment),lAr=l(),TEe=a("p"),iAr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),dAr=l(),cn=a("p"),cAr=o("The model class to instantiate is selected based on the "),MEe=a("code"),mAr=o("model_type"),fAr=o(` property of the config object (either
passed as an argument or loaded from `),EEe=a("code"),gAr=o("pretrained_model_name_or_path"),hAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CEe=a("code"),uAr=o("pretrained_model_name_or_path"),pAr=o(":"),_Ar=l(),Ve=a("ul"),c3=a("li"),wEe=a("strong"),bAr=o("convnext"),vAr=o(" \u2014 "),fY=a("a"),FAr=o("TFConvNextForImageClassification"),TAr=o(" (ConvNeXT model)"),MAr=l(),m3=a("li"),AEe=a("strong"),EAr=o("data2vec-vision"),CAr=o(" \u2014 "),gY=a("a"),wAr=o("TFData2VecVisionForImageClassification"),AAr=o(" (Data2VecVision model)"),LAr=l(),Ks=a("li"),LEe=a("strong"),yAr=o("deit"),xAr=o(" \u2014 "),hY=a("a"),$Ar=o("TFDeiTForImageClassification"),kAr=o(" or "),uY=a("a"),SAr=o("TFDeiTForImageClassificationWithTeacher"),RAr=o(" (DeiT model)"),PAr=l(),f3=a("li"),yEe=a("strong"),BAr=o("regnet"),IAr=o(" \u2014 "),pY=a("a"),NAr=o("TFRegNetForImageClassification"),qAr=o(" (RegNet model)"),jAr=l(),g3=a("li"),xEe=a("strong"),DAr=o("resnet"),GAr=o(" \u2014 "),_Y=a("a"),OAr=o("TFResNetForImageClassification"),VAr=o(" (ResNet model)"),XAr=l(),h3=a("li"),$Ee=a("strong"),zAr=o("segformer"),QAr=o(" \u2014 "),bY=a("a"),WAr=o("TFSegformerForImageClassification"),HAr=o(" (SegFormer model)"),UAr=l(),u3=a("li"),kEe=a("strong"),JAr=o("swin"),YAr=o(" \u2014 "),vY=a("a"),KAr=o("TFSwinForImageClassification"),ZAr=o(" (Swin Transformer model)"),e6r=l(),p3=a("li"),SEe=a("strong"),o6r=o("vit"),r6r=o(" \u2014 "),FY=a("a"),t6r=o("TFViTForImageClassification"),a6r=o(" (ViT model)"),n6r=l(),F(_3.$$.fragment),Nze=l(),vc=a("h2"),b3=a("a"),REe=a("span"),F(px.$$.fragment),s6r=l(),PEe=a("span"),l6r=o("TFAutoModelForMaskedLM"),qze=l(),sr=a("div"),F(_x.$$.fragment),i6r=l(),Fc=a("p"),d6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TY=a("a"),c6r=o("from_pretrained()"),m6r=o(" class method or the "),MY=a("a"),f6r=o("from_config()"),g6r=o(` class
method.`),h6r=l(),bx=a("p"),u6r=o("This class cannot be instantiated directly using "),BEe=a("code"),p6r=o("__init__()"),_6r=o(" (throws an error)."),b6r=l(),Nt=a("div"),F(vx.$$.fragment),v6r=l(),IEe=a("p"),F6r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),T6r=l(),Tc=a("p"),M6r=o(`Note:
Loading a model from its configuration file does `),NEe=a("strong"),E6r=o("not"),C6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=a("a"),w6r=o("from_pretrained()"),A6r=o(" to load the model weights."),L6r=l(),F(v3.$$.fragment),y6r=l(),Pr=a("div"),F(Fx.$$.fragment),x6r=l(),qEe=a("p"),$6r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),k6r=l(),mn=a("p"),S6r=o("The model class to instantiate is selected based on the "),jEe=a("code"),R6r=o("model_type"),P6r=o(` property of the config object (either
passed as an argument or loaded from `),DEe=a("code"),B6r=o("pretrained_model_name_or_path"),I6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GEe=a("code"),N6r=o("pretrained_model_name_or_path"),q6r=o(":"),j6r=l(),ie=a("ul"),F3=a("li"),OEe=a("strong"),D6r=o("albert"),G6r=o(" \u2014 "),CY=a("a"),O6r=o("TFAlbertForMaskedLM"),V6r=o(" (ALBERT model)"),X6r=l(),T3=a("li"),VEe=a("strong"),z6r=o("bert"),Q6r=o(" \u2014 "),wY=a("a"),W6r=o("TFBertForMaskedLM"),H6r=o(" (BERT model)"),U6r=l(),M3=a("li"),XEe=a("strong"),J6r=o("camembert"),Y6r=o(" \u2014 "),AY=a("a"),K6r=o("TFCamembertForMaskedLM"),Z6r=o(" (CamemBERT model)"),e7r=l(),E3=a("li"),zEe=a("strong"),o7r=o("convbert"),r7r=o(" \u2014 "),LY=a("a"),t7r=o("TFConvBertForMaskedLM"),a7r=o(" (ConvBERT model)"),n7r=l(),C3=a("li"),QEe=a("strong"),s7r=o("deberta"),l7r=o(" \u2014 "),yY=a("a"),i7r=o("TFDebertaForMaskedLM"),d7r=o(" (DeBERTa model)"),c7r=l(),w3=a("li"),WEe=a("strong"),m7r=o("deberta-v2"),f7r=o(" \u2014 "),xY=a("a"),g7r=o("TFDebertaV2ForMaskedLM"),h7r=o(" (DeBERTa-v2 model)"),u7r=l(),A3=a("li"),HEe=a("strong"),p7r=o("distilbert"),_7r=o(" \u2014 "),$Y=a("a"),b7r=o("TFDistilBertForMaskedLM"),v7r=o(" (DistilBERT model)"),F7r=l(),L3=a("li"),UEe=a("strong"),T7r=o("electra"),M7r=o(" \u2014 "),kY=a("a"),E7r=o("TFElectraForMaskedLM"),C7r=o(" (ELECTRA model)"),w7r=l(),y3=a("li"),JEe=a("strong"),A7r=o("flaubert"),L7r=o(" \u2014 "),SY=a("a"),y7r=o("TFFlaubertWithLMHeadModel"),x7r=o(" (FlauBERT model)"),$7r=l(),x3=a("li"),YEe=a("strong"),k7r=o("funnel"),S7r=o(" \u2014 "),RY=a("a"),R7r=o("TFFunnelForMaskedLM"),P7r=o(" (Funnel Transformer model)"),B7r=l(),$3=a("li"),KEe=a("strong"),I7r=o("layoutlm"),N7r=o(" \u2014 "),PY=a("a"),q7r=o("TFLayoutLMForMaskedLM"),j7r=o(" (LayoutLM model)"),D7r=l(),k3=a("li"),ZEe=a("strong"),G7r=o("longformer"),O7r=o(" \u2014 "),BY=a("a"),V7r=o("TFLongformerForMaskedLM"),X7r=o(" (Longformer model)"),z7r=l(),S3=a("li"),eCe=a("strong"),Q7r=o("mobilebert"),W7r=o(" \u2014 "),IY=a("a"),H7r=o("TFMobileBertForMaskedLM"),U7r=o(" (MobileBERT model)"),J7r=l(),R3=a("li"),oCe=a("strong"),Y7r=o("mpnet"),K7r=o(" \u2014 "),NY=a("a"),Z7r=o("TFMPNetForMaskedLM"),eLr=o(" (MPNet model)"),oLr=l(),P3=a("li"),rCe=a("strong"),rLr=o("rembert"),tLr=o(" \u2014 "),qY=a("a"),aLr=o("TFRemBertForMaskedLM"),nLr=o(" (RemBERT model)"),sLr=l(),B3=a("li"),tCe=a("strong"),lLr=o("roberta"),iLr=o(" \u2014 "),jY=a("a"),dLr=o("TFRobertaForMaskedLM"),cLr=o(" (RoBERTa model)"),mLr=l(),I3=a("li"),aCe=a("strong"),fLr=o("roformer"),gLr=o(" \u2014 "),DY=a("a"),hLr=o("TFRoFormerForMaskedLM"),uLr=o(" (RoFormer model)"),pLr=l(),N3=a("li"),nCe=a("strong"),_Lr=o("tapas"),bLr=o(" \u2014 "),GY=a("a"),vLr=o("TFTapasForMaskedLM"),FLr=o(" (TAPAS model)"),TLr=l(),q3=a("li"),sCe=a("strong"),MLr=o("xlm"),ELr=o(" \u2014 "),OY=a("a"),CLr=o("TFXLMWithLMHeadModel"),wLr=o(" (XLM model)"),ALr=l(),j3=a("li"),lCe=a("strong"),LLr=o("xlm-roberta"),yLr=o(" \u2014 "),VY=a("a"),xLr=o("TFXLMRobertaForMaskedLM"),$Lr=o(" (XLM-RoBERTa model)"),kLr=l(),F(D3.$$.fragment),jze=l(),Mc=a("h2"),G3=a("a"),iCe=a("span"),F(Tx.$$.fragment),SLr=l(),dCe=a("span"),RLr=o("TFAutoModelForSeq2SeqLM"),Dze=l(),lr=a("div"),F(Mx.$$.fragment),PLr=l(),Ec=a("p"),BLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),XY=a("a"),ILr=o("from_pretrained()"),NLr=o(" class method or the "),zY=a("a"),qLr=o("from_config()"),jLr=o(` class
method.`),DLr=l(),Ex=a("p"),GLr=o("This class cannot be instantiated directly using "),cCe=a("code"),OLr=o("__init__()"),VLr=o(" (throws an error)."),XLr=l(),qt=a("div"),F(Cx.$$.fragment),zLr=l(),mCe=a("p"),QLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),WLr=l(),Cc=a("p"),HLr=o(`Note:
Loading a model from its configuration file does `),fCe=a("strong"),ULr=o("not"),JLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=a("a"),YLr=o("from_pretrained()"),KLr=o(" to load the model weights."),ZLr=l(),F(O3.$$.fragment),eyr=l(),Br=a("div"),F(wx.$$.fragment),oyr=l(),gCe=a("p"),ryr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),tyr=l(),fn=a("p"),ayr=o("The model class to instantiate is selected based on the "),hCe=a("code"),nyr=o("model_type"),syr=o(` property of the config object (either
passed as an argument or loaded from `),uCe=a("code"),lyr=o("pretrained_model_name_or_path"),iyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pCe=a("code"),dyr=o("pretrained_model_name_or_path"),cyr=o(":"),myr=l(),ye=a("ul"),V3=a("li"),_Ce=a("strong"),fyr=o("bart"),gyr=o(" \u2014 "),WY=a("a"),hyr=o("TFBartForConditionalGeneration"),uyr=o(" (BART model)"),pyr=l(),X3=a("li"),bCe=a("strong"),_yr=o("blenderbot"),byr=o(" \u2014 "),HY=a("a"),vyr=o("TFBlenderbotForConditionalGeneration"),Fyr=o(" (Blenderbot model)"),Tyr=l(),z3=a("li"),vCe=a("strong"),Myr=o("blenderbot-small"),Eyr=o(" \u2014 "),UY=a("a"),Cyr=o("TFBlenderbotSmallForConditionalGeneration"),wyr=o(" (BlenderbotSmall model)"),Ayr=l(),Q3=a("li"),FCe=a("strong"),Lyr=o("encoder-decoder"),yyr=o(" \u2014 "),JY=a("a"),xyr=o("TFEncoderDecoderModel"),$yr=o(" (Encoder decoder model)"),kyr=l(),W3=a("li"),TCe=a("strong"),Syr=o("led"),Ryr=o(" \u2014 "),YY=a("a"),Pyr=o("TFLEDForConditionalGeneration"),Byr=o(" (LED model)"),Iyr=l(),H3=a("li"),MCe=a("strong"),Nyr=o("marian"),qyr=o(" \u2014 "),KY=a("a"),jyr=o("TFMarianMTModel"),Dyr=o(" (Marian model)"),Gyr=l(),U3=a("li"),ECe=a("strong"),Oyr=o("mbart"),Vyr=o(" \u2014 "),ZY=a("a"),Xyr=o("TFMBartForConditionalGeneration"),zyr=o(" (mBART model)"),Qyr=l(),J3=a("li"),CCe=a("strong"),Wyr=o("mt5"),Hyr=o(" \u2014 "),eK=a("a"),Uyr=o("TFMT5ForConditionalGeneration"),Jyr=o(" (MT5 model)"),Yyr=l(),Y3=a("li"),wCe=a("strong"),Kyr=o("pegasus"),Zyr=o(" \u2014 "),oK=a("a"),e8r=o("TFPegasusForConditionalGeneration"),o8r=o(" (Pegasus model)"),r8r=l(),K3=a("li"),ACe=a("strong"),t8r=o("t5"),a8r=o(" \u2014 "),rK=a("a"),n8r=o("TFT5ForConditionalGeneration"),s8r=o(" (T5 model)"),l8r=l(),F(Z3.$$.fragment),Gze=l(),wc=a("h2"),e5=a("a"),LCe=a("span"),F(Ax.$$.fragment),i8r=l(),yCe=a("span"),d8r=o("TFAutoModelForSequenceClassification"),Oze=l(),ir=a("div"),F(Lx.$$.fragment),c8r=l(),Ac=a("p"),m8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tK=a("a"),f8r=o("from_pretrained()"),g8r=o(" class method or the "),aK=a("a"),h8r=o("from_config()"),u8r=o(` class
method.`),p8r=l(),yx=a("p"),_8r=o("This class cannot be instantiated directly using "),xCe=a("code"),b8r=o("__init__()"),v8r=o(" (throws an error)."),F8r=l(),jt=a("div"),F(xx.$$.fragment),T8r=l(),$Ce=a("p"),M8r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),E8r=l(),Lc=a("p"),C8r=o(`Note:
Loading a model from its configuration file does `),kCe=a("strong"),w8r=o("not"),A8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nK=a("a"),L8r=o("from_pretrained()"),y8r=o(" to load the model weights."),x8r=l(),F(o5.$$.fragment),$8r=l(),Ir=a("div"),F($x.$$.fragment),k8r=l(),SCe=a("p"),S8r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),R8r=l(),gn=a("p"),P8r=o("The model class to instantiate is selected based on the "),RCe=a("code"),B8r=o("model_type"),I8r=o(` property of the config object (either
passed as an argument or loaded from `),PCe=a("code"),N8r=o("pretrained_model_name_or_path"),q8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BCe=a("code"),j8r=o("pretrained_model_name_or_path"),D8r=o(":"),G8r=l(),te=a("ul"),r5=a("li"),ICe=a("strong"),O8r=o("albert"),V8r=o(" \u2014 "),sK=a("a"),X8r=o("TFAlbertForSequenceClassification"),z8r=o(" (ALBERT model)"),Q8r=l(),t5=a("li"),NCe=a("strong"),W8r=o("bert"),H8r=o(" \u2014 "),lK=a("a"),U8r=o("TFBertForSequenceClassification"),J8r=o(" (BERT model)"),Y8r=l(),a5=a("li"),qCe=a("strong"),K8r=o("camembert"),Z8r=o(" \u2014 "),iK=a("a"),e9r=o("TFCamembertForSequenceClassification"),o9r=o(" (CamemBERT model)"),r9r=l(),n5=a("li"),jCe=a("strong"),t9r=o("convbert"),a9r=o(" \u2014 "),dK=a("a"),n9r=o("TFConvBertForSequenceClassification"),s9r=o(" (ConvBERT model)"),l9r=l(),s5=a("li"),DCe=a("strong"),i9r=o("ctrl"),d9r=o(" \u2014 "),cK=a("a"),c9r=o("TFCTRLForSequenceClassification"),m9r=o(" (CTRL model)"),f9r=l(),l5=a("li"),GCe=a("strong"),g9r=o("deberta"),h9r=o(" \u2014 "),mK=a("a"),u9r=o("TFDebertaForSequenceClassification"),p9r=o(" (DeBERTa model)"),_9r=l(),i5=a("li"),OCe=a("strong"),b9r=o("deberta-v2"),v9r=o(" \u2014 "),fK=a("a"),F9r=o("TFDebertaV2ForSequenceClassification"),T9r=o(" (DeBERTa-v2 model)"),M9r=l(),d5=a("li"),VCe=a("strong"),E9r=o("distilbert"),C9r=o(" \u2014 "),gK=a("a"),w9r=o("TFDistilBertForSequenceClassification"),A9r=o(" (DistilBERT model)"),L9r=l(),c5=a("li"),XCe=a("strong"),y9r=o("electra"),x9r=o(" \u2014 "),hK=a("a"),$9r=o("TFElectraForSequenceClassification"),k9r=o(" (ELECTRA model)"),S9r=l(),m5=a("li"),zCe=a("strong"),R9r=o("flaubert"),P9r=o(" \u2014 "),uK=a("a"),B9r=o("TFFlaubertForSequenceClassification"),I9r=o(" (FlauBERT model)"),N9r=l(),f5=a("li"),QCe=a("strong"),q9r=o("funnel"),j9r=o(" \u2014 "),pK=a("a"),D9r=o("TFFunnelForSequenceClassification"),G9r=o(" (Funnel Transformer model)"),O9r=l(),g5=a("li"),WCe=a("strong"),V9r=o("gpt2"),X9r=o(" \u2014 "),_K=a("a"),z9r=o("TFGPT2ForSequenceClassification"),Q9r=o(" (OpenAI GPT-2 model)"),W9r=l(),h5=a("li"),HCe=a("strong"),H9r=o("gptj"),U9r=o(" \u2014 "),bK=a("a"),J9r=o("TFGPTJForSequenceClassification"),Y9r=o(" (GPT-J model)"),K9r=l(),u5=a("li"),UCe=a("strong"),Z9r=o("layoutlm"),exr=o(" \u2014 "),vK=a("a"),oxr=o("TFLayoutLMForSequenceClassification"),rxr=o(" (LayoutLM model)"),txr=l(),p5=a("li"),JCe=a("strong"),axr=o("longformer"),nxr=o(" \u2014 "),FK=a("a"),sxr=o("TFLongformerForSequenceClassification"),lxr=o(" (Longformer model)"),ixr=l(),_5=a("li"),YCe=a("strong"),dxr=o("mobilebert"),cxr=o(" \u2014 "),TK=a("a"),mxr=o("TFMobileBertForSequenceClassification"),fxr=o(" (MobileBERT model)"),gxr=l(),b5=a("li"),KCe=a("strong"),hxr=o("mpnet"),uxr=o(" \u2014 "),MK=a("a"),pxr=o("TFMPNetForSequenceClassification"),_xr=o(" (MPNet model)"),bxr=l(),v5=a("li"),ZCe=a("strong"),vxr=o("openai-gpt"),Fxr=o(" \u2014 "),EK=a("a"),Txr=o("TFOpenAIGPTForSequenceClassification"),Mxr=o(" (OpenAI GPT model)"),Exr=l(),F5=a("li"),e3e=a("strong"),Cxr=o("rembert"),wxr=o(" \u2014 "),CK=a("a"),Axr=o("TFRemBertForSequenceClassification"),Lxr=o(" (RemBERT model)"),yxr=l(),T5=a("li"),o3e=a("strong"),xxr=o("roberta"),$xr=o(" \u2014 "),wK=a("a"),kxr=o("TFRobertaForSequenceClassification"),Sxr=o(" (RoBERTa model)"),Rxr=l(),M5=a("li"),r3e=a("strong"),Pxr=o("roformer"),Bxr=o(" \u2014 "),AK=a("a"),Ixr=o("TFRoFormerForSequenceClassification"),Nxr=o(" (RoFormer model)"),qxr=l(),E5=a("li"),t3e=a("strong"),jxr=o("tapas"),Dxr=o(" \u2014 "),LK=a("a"),Gxr=o("TFTapasForSequenceClassification"),Oxr=o(" (TAPAS model)"),Vxr=l(),C5=a("li"),a3e=a("strong"),Xxr=o("transfo-xl"),zxr=o(" \u2014 "),yK=a("a"),Qxr=o("TFTransfoXLForSequenceClassification"),Wxr=o(" (Transformer-XL model)"),Hxr=l(),w5=a("li"),n3e=a("strong"),Uxr=o("xlm"),Jxr=o(" \u2014 "),xK=a("a"),Yxr=o("TFXLMForSequenceClassification"),Kxr=o(" (XLM model)"),Zxr=l(),A5=a("li"),s3e=a("strong"),e$r=o("xlm-roberta"),o$r=o(" \u2014 "),$K=a("a"),r$r=o("TFXLMRobertaForSequenceClassification"),t$r=o(" (XLM-RoBERTa model)"),a$r=l(),L5=a("li"),l3e=a("strong"),n$r=o("xlnet"),s$r=o(" \u2014 "),kK=a("a"),l$r=o("TFXLNetForSequenceClassification"),i$r=o(" (XLNet model)"),d$r=l(),F(y5.$$.fragment),Vze=l(),yc=a("h2"),x5=a("a"),i3e=a("span"),F(kx.$$.fragment),c$r=l(),d3e=a("span"),m$r=o("TFAutoModelForMultipleChoice"),Xze=l(),dr=a("div"),F(Sx.$$.fragment),f$r=l(),xc=a("p"),g$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SK=a("a"),h$r=o("from_pretrained()"),u$r=o(" class method or the "),RK=a("a"),p$r=o("from_config()"),_$r=o(` class
method.`),b$r=l(),Rx=a("p"),v$r=o("This class cannot be instantiated directly using "),c3e=a("code"),F$r=o("__init__()"),T$r=o(" (throws an error)."),M$r=l(),Dt=a("div"),F(Px.$$.fragment),E$r=l(),m3e=a("p"),C$r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),w$r=l(),$c=a("p"),A$r=o(`Note:
Loading a model from its configuration file does `),f3e=a("strong"),L$r=o("not"),y$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PK=a("a"),x$r=o("from_pretrained()"),$$r=o(" to load the model weights."),k$r=l(),F($5.$$.fragment),S$r=l(),Nr=a("div"),F(Bx.$$.fragment),R$r=l(),g3e=a("p"),P$r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),B$r=l(),hn=a("p"),I$r=o("The model class to instantiate is selected based on the "),h3e=a("code"),N$r=o("model_type"),q$r=o(` property of the config object (either
passed as an argument or loaded from `),u3e=a("code"),j$r=o("pretrained_model_name_or_path"),D$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p3e=a("code"),G$r=o("pretrained_model_name_or_path"),O$r=o(":"),V$r=l(),_e=a("ul"),k5=a("li"),_3e=a("strong"),X$r=o("albert"),z$r=o(" \u2014 "),BK=a("a"),Q$r=o("TFAlbertForMultipleChoice"),W$r=o(" (ALBERT model)"),H$r=l(),S5=a("li"),b3e=a("strong"),U$r=o("bert"),J$r=o(" \u2014 "),IK=a("a"),Y$r=o("TFBertForMultipleChoice"),K$r=o(" (BERT model)"),Z$r=l(),R5=a("li"),v3e=a("strong"),ekr=o("camembert"),okr=o(" \u2014 "),NK=a("a"),rkr=o("TFCamembertForMultipleChoice"),tkr=o(" (CamemBERT model)"),akr=l(),P5=a("li"),F3e=a("strong"),nkr=o("convbert"),skr=o(" \u2014 "),qK=a("a"),lkr=o("TFConvBertForMultipleChoice"),ikr=o(" (ConvBERT model)"),dkr=l(),B5=a("li"),T3e=a("strong"),ckr=o("distilbert"),mkr=o(" \u2014 "),jK=a("a"),fkr=o("TFDistilBertForMultipleChoice"),gkr=o(" (DistilBERT model)"),hkr=l(),I5=a("li"),M3e=a("strong"),ukr=o("electra"),pkr=o(" \u2014 "),DK=a("a"),_kr=o("TFElectraForMultipleChoice"),bkr=o(" (ELECTRA model)"),vkr=l(),N5=a("li"),E3e=a("strong"),Fkr=o("flaubert"),Tkr=o(" \u2014 "),GK=a("a"),Mkr=o("TFFlaubertForMultipleChoice"),Ekr=o(" (FlauBERT model)"),Ckr=l(),q5=a("li"),C3e=a("strong"),wkr=o("funnel"),Akr=o(" \u2014 "),OK=a("a"),Lkr=o("TFFunnelForMultipleChoice"),ykr=o(" (Funnel Transformer model)"),xkr=l(),j5=a("li"),w3e=a("strong"),$kr=o("longformer"),kkr=o(" \u2014 "),VK=a("a"),Skr=o("TFLongformerForMultipleChoice"),Rkr=o(" (Longformer model)"),Pkr=l(),D5=a("li"),A3e=a("strong"),Bkr=o("mobilebert"),Ikr=o(" \u2014 "),XK=a("a"),Nkr=o("TFMobileBertForMultipleChoice"),qkr=o(" (MobileBERT model)"),jkr=l(),G5=a("li"),L3e=a("strong"),Dkr=o("mpnet"),Gkr=o(" \u2014 "),zK=a("a"),Okr=o("TFMPNetForMultipleChoice"),Vkr=o(" (MPNet model)"),Xkr=l(),O5=a("li"),y3e=a("strong"),zkr=o("rembert"),Qkr=o(" \u2014 "),QK=a("a"),Wkr=o("TFRemBertForMultipleChoice"),Hkr=o(" (RemBERT model)"),Ukr=l(),V5=a("li"),x3e=a("strong"),Jkr=o("roberta"),Ykr=o(" \u2014 "),WK=a("a"),Kkr=o("TFRobertaForMultipleChoice"),Zkr=o(" (RoBERTa model)"),eSr=l(),X5=a("li"),$3e=a("strong"),oSr=o("roformer"),rSr=o(" \u2014 "),HK=a("a"),tSr=o("TFRoFormerForMultipleChoice"),aSr=o(" (RoFormer model)"),nSr=l(),z5=a("li"),k3e=a("strong"),sSr=o("xlm"),lSr=o(" \u2014 "),UK=a("a"),iSr=o("TFXLMForMultipleChoice"),dSr=o(" (XLM model)"),cSr=l(),Q5=a("li"),S3e=a("strong"),mSr=o("xlm-roberta"),fSr=o(" \u2014 "),JK=a("a"),gSr=o("TFXLMRobertaForMultipleChoice"),hSr=o(" (XLM-RoBERTa model)"),uSr=l(),W5=a("li"),R3e=a("strong"),pSr=o("xlnet"),_Sr=o(" \u2014 "),YK=a("a"),bSr=o("TFXLNetForMultipleChoice"),vSr=o(" (XLNet model)"),FSr=l(),F(H5.$$.fragment),zze=l(),kc=a("h2"),U5=a("a"),P3e=a("span"),F(Ix.$$.fragment),TSr=l(),B3e=a("span"),MSr=o("TFAutoModelForNextSentencePrediction"),Qze=l(),cr=a("div"),F(Nx.$$.fragment),ESr=l(),Sc=a("p"),CSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),KK=a("a"),wSr=o("from_pretrained()"),ASr=o(" class method or the "),ZK=a("a"),LSr=o("from_config()"),ySr=o(` class
method.`),xSr=l(),qx=a("p"),$Sr=o("This class cannot be instantiated directly using "),I3e=a("code"),kSr=o("__init__()"),SSr=o(" (throws an error)."),RSr=l(),Gt=a("div"),F(jx.$$.fragment),PSr=l(),N3e=a("p"),BSr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ISr=l(),Rc=a("p"),NSr=o(`Note:
Loading a model from its configuration file does `),q3e=a("strong"),qSr=o("not"),jSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=a("a"),DSr=o("from_pretrained()"),GSr=o(" to load the model weights."),OSr=l(),F(J5.$$.fragment),VSr=l(),qr=a("div"),F(Dx.$$.fragment),XSr=l(),j3e=a("p"),zSr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),QSr=l(),un=a("p"),WSr=o("The model class to instantiate is selected based on the "),D3e=a("code"),HSr=o("model_type"),USr=o(` property of the config object (either
passed as an argument or loaded from `),G3e=a("code"),JSr=o("pretrained_model_name_or_path"),YSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O3e=a("code"),KSr=o("pretrained_model_name_or_path"),ZSr=o(":"),eRr=l(),Gx=a("ul"),Y5=a("li"),V3e=a("strong"),oRr=o("bert"),rRr=o(" \u2014 "),oZ=a("a"),tRr=o("TFBertForNextSentencePrediction"),aRr=o(" (BERT model)"),nRr=l(),K5=a("li"),X3e=a("strong"),sRr=o("mobilebert"),lRr=o(" \u2014 "),rZ=a("a"),iRr=o("TFMobileBertForNextSentencePrediction"),dRr=o(" (MobileBERT model)"),cRr=l(),F(Z5.$$.fragment),Wze=l(),Pc=a("h2"),e0=a("a"),z3e=a("span"),F(Ox.$$.fragment),mRr=l(),Q3e=a("span"),fRr=o("TFAutoModelForTableQuestionAnswering"),Hze=l(),mr=a("div"),F(Vx.$$.fragment),gRr=l(),Bc=a("p"),hRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),tZ=a("a"),uRr=o("from_pretrained()"),pRr=o(" class method or the "),aZ=a("a"),_Rr=o("from_config()"),bRr=o(` class
method.`),vRr=l(),Xx=a("p"),FRr=o("This class cannot be instantiated directly using "),W3e=a("code"),TRr=o("__init__()"),MRr=o(" (throws an error)."),ERr=l(),Ot=a("div"),F(zx.$$.fragment),CRr=l(),H3e=a("p"),wRr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ARr=l(),Ic=a("p"),LRr=o(`Note:
Loading a model from its configuration file does `),U3e=a("strong"),yRr=o("not"),xRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nZ=a("a"),$Rr=o("from_pretrained()"),kRr=o(" to load the model weights."),SRr=l(),F(o0.$$.fragment),RRr=l(),jr=a("div"),F(Qx.$$.fragment),PRr=l(),J3e=a("p"),BRr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),IRr=l(),pn=a("p"),NRr=o("The model class to instantiate is selected based on the "),Y3e=a("code"),qRr=o("model_type"),jRr=o(` property of the config object (either
passed as an argument or loaded from `),K3e=a("code"),DRr=o("pretrained_model_name_or_path"),GRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z3e=a("code"),ORr=o("pretrained_model_name_or_path"),VRr=o(":"),XRr=l(),e5e=a("ul"),r0=a("li"),o5e=a("strong"),zRr=o("tapas"),QRr=o(" \u2014 "),sZ=a("a"),WRr=o("TFTapasForQuestionAnswering"),HRr=o(" (TAPAS model)"),URr=l(),F(t0.$$.fragment),Uze=l(),Nc=a("h2"),a0=a("a"),r5e=a("span"),F(Wx.$$.fragment),JRr=l(),t5e=a("span"),YRr=o("TFAutoModelForTokenClassification"),Jze=l(),fr=a("div"),F(Hx.$$.fragment),KRr=l(),qc=a("p"),ZRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lZ=a("a"),ePr=o("from_pretrained()"),oPr=o(" class method or the "),iZ=a("a"),rPr=o("from_config()"),tPr=o(` class
method.`),aPr=l(),Ux=a("p"),nPr=o("This class cannot be instantiated directly using "),a5e=a("code"),sPr=o("__init__()"),lPr=o(" (throws an error)."),iPr=l(),Vt=a("div"),F(Jx.$$.fragment),dPr=l(),n5e=a("p"),cPr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mPr=l(),jc=a("p"),fPr=o(`Note:
Loading a model from its configuration file does `),s5e=a("strong"),gPr=o("not"),hPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dZ=a("a"),uPr=o("from_pretrained()"),pPr=o(" to load the model weights."),_Pr=l(),F(n0.$$.fragment),bPr=l(),Dr=a("div"),F(Yx.$$.fragment),vPr=l(),l5e=a("p"),FPr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),TPr=l(),_n=a("p"),MPr=o("The model class to instantiate is selected based on the "),i5e=a("code"),EPr=o("model_type"),CPr=o(` property of the config object (either
passed as an argument or loaded from `),d5e=a("code"),wPr=o("pretrained_model_name_or_path"),APr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c5e=a("code"),LPr=o("pretrained_model_name_or_path"),yPr=o(":"),xPr=l(),de=a("ul"),s0=a("li"),m5e=a("strong"),$Pr=o("albert"),kPr=o(" \u2014 "),cZ=a("a"),SPr=o("TFAlbertForTokenClassification"),RPr=o(" (ALBERT model)"),PPr=l(),l0=a("li"),f5e=a("strong"),BPr=o("bert"),IPr=o(" \u2014 "),mZ=a("a"),NPr=o("TFBertForTokenClassification"),qPr=o(" (BERT model)"),jPr=l(),i0=a("li"),g5e=a("strong"),DPr=o("camembert"),GPr=o(" \u2014 "),fZ=a("a"),OPr=o("TFCamembertForTokenClassification"),VPr=o(" (CamemBERT model)"),XPr=l(),d0=a("li"),h5e=a("strong"),zPr=o("convbert"),QPr=o(" \u2014 "),gZ=a("a"),WPr=o("TFConvBertForTokenClassification"),HPr=o(" (ConvBERT model)"),UPr=l(),c0=a("li"),u5e=a("strong"),JPr=o("deberta"),YPr=o(" \u2014 "),hZ=a("a"),KPr=o("TFDebertaForTokenClassification"),ZPr=o(" (DeBERTa model)"),eBr=l(),m0=a("li"),p5e=a("strong"),oBr=o("deberta-v2"),rBr=o(" \u2014 "),uZ=a("a"),tBr=o("TFDebertaV2ForTokenClassification"),aBr=o(" (DeBERTa-v2 model)"),nBr=l(),f0=a("li"),_5e=a("strong"),sBr=o("distilbert"),lBr=o(" \u2014 "),pZ=a("a"),iBr=o("TFDistilBertForTokenClassification"),dBr=o(" (DistilBERT model)"),cBr=l(),g0=a("li"),b5e=a("strong"),mBr=o("electra"),fBr=o(" \u2014 "),_Z=a("a"),gBr=o("TFElectraForTokenClassification"),hBr=o(" (ELECTRA model)"),uBr=l(),h0=a("li"),v5e=a("strong"),pBr=o("flaubert"),_Br=o(" \u2014 "),bZ=a("a"),bBr=o("TFFlaubertForTokenClassification"),vBr=o(" (FlauBERT model)"),FBr=l(),u0=a("li"),F5e=a("strong"),TBr=o("funnel"),MBr=o(" \u2014 "),vZ=a("a"),EBr=o("TFFunnelForTokenClassification"),CBr=o(" (Funnel Transformer model)"),wBr=l(),p0=a("li"),T5e=a("strong"),ABr=o("layoutlm"),LBr=o(" \u2014 "),FZ=a("a"),yBr=o("TFLayoutLMForTokenClassification"),xBr=o(" (LayoutLM model)"),$Br=l(),_0=a("li"),M5e=a("strong"),kBr=o("longformer"),SBr=o(" \u2014 "),TZ=a("a"),RBr=o("TFLongformerForTokenClassification"),PBr=o(" (Longformer model)"),BBr=l(),b0=a("li"),E5e=a("strong"),IBr=o("mobilebert"),NBr=o(" \u2014 "),MZ=a("a"),qBr=o("TFMobileBertForTokenClassification"),jBr=o(" (MobileBERT model)"),DBr=l(),v0=a("li"),C5e=a("strong"),GBr=o("mpnet"),OBr=o(" \u2014 "),EZ=a("a"),VBr=o("TFMPNetForTokenClassification"),XBr=o(" (MPNet model)"),zBr=l(),F0=a("li"),w5e=a("strong"),QBr=o("rembert"),WBr=o(" \u2014 "),CZ=a("a"),HBr=o("TFRemBertForTokenClassification"),UBr=o(" (RemBERT model)"),JBr=l(),T0=a("li"),A5e=a("strong"),YBr=o("roberta"),KBr=o(" \u2014 "),wZ=a("a"),ZBr=o("TFRobertaForTokenClassification"),eIr=o(" (RoBERTa model)"),oIr=l(),M0=a("li"),L5e=a("strong"),rIr=o("roformer"),tIr=o(" \u2014 "),AZ=a("a"),aIr=o("TFRoFormerForTokenClassification"),nIr=o(" (RoFormer model)"),sIr=l(),E0=a("li"),y5e=a("strong"),lIr=o("xlm"),iIr=o(" \u2014 "),LZ=a("a"),dIr=o("TFXLMForTokenClassification"),cIr=o(" (XLM model)"),mIr=l(),C0=a("li"),x5e=a("strong"),fIr=o("xlm-roberta"),gIr=o(" \u2014 "),yZ=a("a"),hIr=o("TFXLMRobertaForTokenClassification"),uIr=o(" (XLM-RoBERTa model)"),pIr=l(),w0=a("li"),$5e=a("strong"),_Ir=o("xlnet"),bIr=o(" \u2014 "),xZ=a("a"),vIr=o("TFXLNetForTokenClassification"),FIr=o(" (XLNet model)"),TIr=l(),F(A0.$$.fragment),Yze=l(),Dc=a("h2"),L0=a("a"),k5e=a("span"),F(Kx.$$.fragment),MIr=l(),S5e=a("span"),EIr=o("TFAutoModelForQuestionAnswering"),Kze=l(),gr=a("div"),F(Zx.$$.fragment),CIr=l(),Gc=a("p"),wIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$Z=a("a"),AIr=o("from_pretrained()"),LIr=o(" class method or the "),kZ=a("a"),yIr=o("from_config()"),xIr=o(` class
method.`),$Ir=l(),e$=a("p"),kIr=o("This class cannot be instantiated directly using "),R5e=a("code"),SIr=o("__init__()"),RIr=o(" (throws an error)."),PIr=l(),Xt=a("div"),F(o$.$$.fragment),BIr=l(),P5e=a("p"),IIr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),NIr=l(),Oc=a("p"),qIr=o(`Note:
Loading a model from its configuration file does `),B5e=a("strong"),jIr=o("not"),DIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=a("a"),GIr=o("from_pretrained()"),OIr=o(" to load the model weights."),VIr=l(),F(y0.$$.fragment),XIr=l(),Gr=a("div"),F(r$.$$.fragment),zIr=l(),I5e=a("p"),QIr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),WIr=l(),bn=a("p"),HIr=o("The model class to instantiate is selected based on the "),N5e=a("code"),UIr=o("model_type"),JIr=o(` property of the config object (either
passed as an argument or loaded from `),q5e=a("code"),YIr=o("pretrained_model_name_or_path"),KIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j5e=a("code"),ZIr=o("pretrained_model_name_or_path"),eNr=o(":"),oNr=l(),ce=a("ul"),x0=a("li"),D5e=a("strong"),rNr=o("albert"),tNr=o(" \u2014 "),RZ=a("a"),aNr=o("TFAlbertForQuestionAnswering"),nNr=o(" (ALBERT model)"),sNr=l(),$0=a("li"),G5e=a("strong"),lNr=o("bert"),iNr=o(" \u2014 "),PZ=a("a"),dNr=o("TFBertForQuestionAnswering"),cNr=o(" (BERT model)"),mNr=l(),k0=a("li"),O5e=a("strong"),fNr=o("camembert"),gNr=o(" \u2014 "),BZ=a("a"),hNr=o("TFCamembertForQuestionAnswering"),uNr=o(" (CamemBERT model)"),pNr=l(),S0=a("li"),V5e=a("strong"),_Nr=o("convbert"),bNr=o(" \u2014 "),IZ=a("a"),vNr=o("TFConvBertForQuestionAnswering"),FNr=o(" (ConvBERT model)"),TNr=l(),R0=a("li"),X5e=a("strong"),MNr=o("deberta"),ENr=o(" \u2014 "),NZ=a("a"),CNr=o("TFDebertaForQuestionAnswering"),wNr=o(" (DeBERTa model)"),ANr=l(),P0=a("li"),z5e=a("strong"),LNr=o("deberta-v2"),yNr=o(" \u2014 "),qZ=a("a"),xNr=o("TFDebertaV2ForQuestionAnswering"),$Nr=o(" (DeBERTa-v2 model)"),kNr=l(),B0=a("li"),Q5e=a("strong"),SNr=o("distilbert"),RNr=o(" \u2014 "),jZ=a("a"),PNr=o("TFDistilBertForQuestionAnswering"),BNr=o(" (DistilBERT model)"),INr=l(),I0=a("li"),W5e=a("strong"),NNr=o("electra"),qNr=o(" \u2014 "),DZ=a("a"),jNr=o("TFElectraForQuestionAnswering"),DNr=o(" (ELECTRA model)"),GNr=l(),N0=a("li"),H5e=a("strong"),ONr=o("flaubert"),VNr=o(" \u2014 "),GZ=a("a"),XNr=o("TFFlaubertForQuestionAnsweringSimple"),zNr=o(" (FlauBERT model)"),QNr=l(),q0=a("li"),U5e=a("strong"),WNr=o("funnel"),HNr=o(" \u2014 "),OZ=a("a"),UNr=o("TFFunnelForQuestionAnswering"),JNr=o(" (Funnel Transformer model)"),YNr=l(),j0=a("li"),J5e=a("strong"),KNr=o("gptj"),ZNr=o(" \u2014 "),VZ=a("a"),eqr=o("TFGPTJForQuestionAnswering"),oqr=o(" (GPT-J model)"),rqr=l(),D0=a("li"),Y5e=a("strong"),tqr=o("longformer"),aqr=o(" \u2014 "),XZ=a("a"),nqr=o("TFLongformerForQuestionAnswering"),sqr=o(" (Longformer model)"),lqr=l(),G0=a("li"),K5e=a("strong"),iqr=o("mobilebert"),dqr=o(" \u2014 "),zZ=a("a"),cqr=o("TFMobileBertForQuestionAnswering"),mqr=o(" (MobileBERT model)"),fqr=l(),O0=a("li"),Z5e=a("strong"),gqr=o("mpnet"),hqr=o(" \u2014 "),QZ=a("a"),uqr=o("TFMPNetForQuestionAnswering"),pqr=o(" (MPNet model)"),_qr=l(),V0=a("li"),e0e=a("strong"),bqr=o("rembert"),vqr=o(" \u2014 "),WZ=a("a"),Fqr=o("TFRemBertForQuestionAnswering"),Tqr=o(" (RemBERT model)"),Mqr=l(),X0=a("li"),o0e=a("strong"),Eqr=o("roberta"),Cqr=o(" \u2014 "),HZ=a("a"),wqr=o("TFRobertaForQuestionAnswering"),Aqr=o(" (RoBERTa model)"),Lqr=l(),z0=a("li"),r0e=a("strong"),yqr=o("roformer"),xqr=o(" \u2014 "),UZ=a("a"),$qr=o("TFRoFormerForQuestionAnswering"),kqr=o(" (RoFormer model)"),Sqr=l(),Q0=a("li"),t0e=a("strong"),Rqr=o("xlm"),Pqr=o(" \u2014 "),JZ=a("a"),Bqr=o("TFXLMForQuestionAnsweringSimple"),Iqr=o(" (XLM model)"),Nqr=l(),W0=a("li"),a0e=a("strong"),qqr=o("xlm-roberta"),jqr=o(" \u2014 "),YZ=a("a"),Dqr=o("TFXLMRobertaForQuestionAnswering"),Gqr=o(" (XLM-RoBERTa model)"),Oqr=l(),H0=a("li"),n0e=a("strong"),Vqr=o("xlnet"),Xqr=o(" \u2014 "),KZ=a("a"),zqr=o("TFXLNetForQuestionAnsweringSimple"),Qqr=o(" (XLNet model)"),Wqr=l(),F(U0.$$.fragment),Zze=l(),Vc=a("h2"),J0=a("a"),s0e=a("span"),F(t$.$$.fragment),Hqr=l(),l0e=a("span"),Uqr=o("TFAutoModelForVision2Seq"),eQe=l(),hr=a("div"),F(a$.$$.fragment),Jqr=l(),Xc=a("p"),Yqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ZZ=a("a"),Kqr=o("from_pretrained()"),Zqr=o(" class method or the "),eee=a("a"),ejr=o("from_config()"),ojr=o(` class
method.`),rjr=l(),n$=a("p"),tjr=o("This class cannot be instantiated directly using "),i0e=a("code"),ajr=o("__init__()"),njr=o(" (throws an error)."),sjr=l(),zt=a("div"),F(s$.$$.fragment),ljr=l(),d0e=a("p"),ijr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),djr=l(),zc=a("p"),cjr=o(`Note:
Loading a model from its configuration file does `),c0e=a("strong"),mjr=o("not"),fjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=a("a"),gjr=o("from_pretrained()"),hjr=o(" to load the model weights."),ujr=l(),F(Y0.$$.fragment),pjr=l(),Or=a("div"),F(l$.$$.fragment),_jr=l(),m0e=a("p"),bjr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vjr=l(),vn=a("p"),Fjr=o("The model class to instantiate is selected based on the "),f0e=a("code"),Tjr=o("model_type"),Mjr=o(` property of the config object (either
passed as an argument or loaded from `),g0e=a("code"),Ejr=o("pretrained_model_name_or_path"),Cjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h0e=a("code"),wjr=o("pretrained_model_name_or_path"),Ajr=o(":"),Ljr=l(),u0e=a("ul"),K0=a("li"),p0e=a("strong"),yjr=o("vision-encoder-decoder"),xjr=o(" \u2014 "),ree=a("a"),$jr=o("TFVisionEncoderDecoderModel"),kjr=o(" (Vision Encoder decoder model)"),Sjr=l(),F(Z0.$$.fragment),oQe=l(),Qc=a("h2"),ew=a("a"),_0e=a("span"),F(i$.$$.fragment),Rjr=l(),b0e=a("span"),Pjr=o("TFAutoModelForSpeechSeq2Seq"),rQe=l(),ur=a("div"),F(d$.$$.fragment),Bjr=l(),Wc=a("p"),Ijr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),tee=a("a"),Njr=o("from_pretrained()"),qjr=o(" class method or the "),aee=a("a"),jjr=o("from_config()"),Djr=o(` class
method.`),Gjr=l(),c$=a("p"),Ojr=o("This class cannot be instantiated directly using "),v0e=a("code"),Vjr=o("__init__()"),Xjr=o(" (throws an error)."),zjr=l(),Qt=a("div"),F(m$.$$.fragment),Qjr=l(),F0e=a("p"),Wjr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Hjr=l(),Hc=a("p"),Ujr=o(`Note:
Loading a model from its configuration file does `),T0e=a("strong"),Jjr=o("not"),Yjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nee=a("a"),Kjr=o("from_pretrained()"),Zjr=o(" to load the model weights."),eDr=l(),F(ow.$$.fragment),oDr=l(),Vr=a("div"),F(f$.$$.fragment),rDr=l(),M0e=a("p"),tDr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),aDr=l(),Fn=a("p"),nDr=o("The model class to instantiate is selected based on the "),E0e=a("code"),sDr=o("model_type"),lDr=o(` property of the config object (either
passed as an argument or loaded from `),C0e=a("code"),iDr=o("pretrained_model_name_or_path"),dDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w0e=a("code"),cDr=o("pretrained_model_name_or_path"),mDr=o(":"),fDr=l(),A0e=a("ul"),rw=a("li"),L0e=a("strong"),gDr=o("speech_to_text"),hDr=o(" \u2014 "),see=a("a"),uDr=o("TFSpeech2TextForConditionalGeneration"),pDr=o(" (Speech2Text model)"),_Dr=l(),F(tw.$$.fragment),tQe=l(),Uc=a("h2"),aw=a("a"),y0e=a("span"),F(g$.$$.fragment),bDr=l(),x0e=a("span"),vDr=o("FlaxAutoModel"),aQe=l(),pr=a("div"),F(h$.$$.fragment),FDr=l(),Jc=a("p"),TDr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lee=a("a"),MDr=o("from_pretrained()"),EDr=o(" class method or the "),iee=a("a"),CDr=o("from_config()"),wDr=o(` class
method.`),ADr=l(),u$=a("p"),LDr=o("This class cannot be instantiated directly using "),$0e=a("code"),yDr=o("__init__()"),xDr=o(" (throws an error)."),$Dr=l(),Wt=a("div"),F(p$.$$.fragment),kDr=l(),k0e=a("p"),SDr=o("Instantiates one of the base model classes of the library from a configuration."),RDr=l(),Yc=a("p"),PDr=o(`Note:
Loading a model from its configuration file does `),S0e=a("strong"),BDr=o("not"),IDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dee=a("a"),NDr=o("from_pretrained()"),qDr=o(" to load the model weights."),jDr=l(),F(nw.$$.fragment),DDr=l(),Xr=a("div"),F(_$.$$.fragment),GDr=l(),R0e=a("p"),ODr=o("Instantiate one of the base model classes of the library from a pretrained model."),VDr=l(),Tn=a("p"),XDr=o("The model class to instantiate is selected based on the "),P0e=a("code"),zDr=o("model_type"),QDr=o(` property of the config object (either
passed as an argument or loaded from `),B0e=a("code"),WDr=o("pretrained_model_name_or_path"),HDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I0e=a("code"),UDr=o("pretrained_model_name_or_path"),JDr=o(":"),YDr=l(),oe=a("ul"),sw=a("li"),N0e=a("strong"),KDr=o("albert"),ZDr=o(" \u2014 "),cee=a("a"),eGr=o("FlaxAlbertModel"),oGr=o(" (ALBERT model)"),rGr=l(),lw=a("li"),q0e=a("strong"),tGr=o("bart"),aGr=o(" \u2014 "),mee=a("a"),nGr=o("FlaxBartModel"),sGr=o(" (BART model)"),lGr=l(),iw=a("li"),j0e=a("strong"),iGr=o("beit"),dGr=o(" \u2014 "),fee=a("a"),cGr=o("FlaxBeitModel"),mGr=o(" (BEiT model)"),fGr=l(),dw=a("li"),D0e=a("strong"),gGr=o("bert"),hGr=o(" \u2014 "),gee=a("a"),uGr=o("FlaxBertModel"),pGr=o(" (BERT model)"),_Gr=l(),cw=a("li"),G0e=a("strong"),bGr=o("big_bird"),vGr=o(" \u2014 "),hee=a("a"),FGr=o("FlaxBigBirdModel"),TGr=o(" (BigBird model)"),MGr=l(),mw=a("li"),O0e=a("strong"),EGr=o("blenderbot"),CGr=o(" \u2014 "),uee=a("a"),wGr=o("FlaxBlenderbotModel"),AGr=o(" (Blenderbot model)"),LGr=l(),fw=a("li"),V0e=a("strong"),yGr=o("blenderbot-small"),xGr=o(" \u2014 "),pee=a("a"),$Gr=o("FlaxBlenderbotSmallModel"),kGr=o(" (BlenderbotSmall model)"),SGr=l(),gw=a("li"),X0e=a("strong"),RGr=o("clip"),PGr=o(" \u2014 "),_ee=a("a"),BGr=o("FlaxCLIPModel"),IGr=o(" (CLIP model)"),NGr=l(),hw=a("li"),z0e=a("strong"),qGr=o("distilbert"),jGr=o(" \u2014 "),bee=a("a"),DGr=o("FlaxDistilBertModel"),GGr=o(" (DistilBERT model)"),OGr=l(),uw=a("li"),Q0e=a("strong"),VGr=o("electra"),XGr=o(" \u2014 "),vee=a("a"),zGr=o("FlaxElectraModel"),QGr=o(" (ELECTRA model)"),WGr=l(),pw=a("li"),W0e=a("strong"),HGr=o("gpt2"),UGr=o(" \u2014 "),Fee=a("a"),JGr=o("FlaxGPT2Model"),YGr=o(" (OpenAI GPT-2 model)"),KGr=l(),_w=a("li"),H0e=a("strong"),ZGr=o("gpt_neo"),eOr=o(" \u2014 "),Tee=a("a"),oOr=o("FlaxGPTNeoModel"),rOr=o(" (GPT Neo model)"),tOr=l(),bw=a("li"),U0e=a("strong"),aOr=o("gptj"),nOr=o(" \u2014 "),Mee=a("a"),sOr=o("FlaxGPTJModel"),lOr=o(" (GPT-J model)"),iOr=l(),vw=a("li"),J0e=a("strong"),dOr=o("longt5"),cOr=o(" \u2014 "),Eee=a("a"),mOr=o("FlaxLongT5Model"),fOr=o(" (LongT5 model)"),gOr=l(),Fw=a("li"),Y0e=a("strong"),hOr=o("marian"),uOr=o(" \u2014 "),Cee=a("a"),pOr=o("FlaxMarianModel"),_Or=o(" (Marian model)"),bOr=l(),Tw=a("li"),K0e=a("strong"),vOr=o("mbart"),FOr=o(" \u2014 "),wee=a("a"),TOr=o("FlaxMBartModel"),MOr=o(" (mBART model)"),EOr=l(),Mw=a("li"),Z0e=a("strong"),COr=o("mt5"),wOr=o(" \u2014 "),Aee=a("a"),AOr=o("FlaxMT5Model"),LOr=o(" (MT5 model)"),yOr=l(),Ew=a("li"),ewe=a("strong"),xOr=o("opt"),$Or=o(" \u2014 "),Lee=a("a"),kOr=o("FlaxOPTModel"),SOr=o(" (OPT model)"),ROr=l(),Cw=a("li"),owe=a("strong"),POr=o("pegasus"),BOr=o(" \u2014 "),yee=a("a"),IOr=o("FlaxPegasusModel"),NOr=o(" (Pegasus model)"),qOr=l(),ww=a("li"),rwe=a("strong"),jOr=o("roberta"),DOr=o(" \u2014 "),xee=a("a"),GOr=o("FlaxRobertaModel"),OOr=o(" (RoBERTa model)"),VOr=l(),Aw=a("li"),twe=a("strong"),XOr=o("roformer"),zOr=o(" \u2014 "),$ee=a("a"),QOr=o("FlaxRoFormerModel"),WOr=o(" (RoFormer model)"),HOr=l(),Lw=a("li"),awe=a("strong"),UOr=o("t5"),JOr=o(" \u2014 "),kee=a("a"),YOr=o("FlaxT5Model"),KOr=o(" (T5 model)"),ZOr=l(),yw=a("li"),nwe=a("strong"),eVr=o("vision-text-dual-encoder"),oVr=o(" \u2014 "),See=a("a"),rVr=o("FlaxVisionTextDualEncoderModel"),tVr=o(" (VisionTextDualEncoder model)"),aVr=l(),xw=a("li"),swe=a("strong"),nVr=o("vit"),sVr=o(" \u2014 "),Ree=a("a"),lVr=o("FlaxViTModel"),iVr=o(" (ViT model)"),dVr=l(),$w=a("li"),lwe=a("strong"),cVr=o("wav2vec2"),mVr=o(" \u2014 "),Pee=a("a"),fVr=o("FlaxWav2Vec2Model"),gVr=o(" (Wav2Vec2 model)"),hVr=l(),kw=a("li"),iwe=a("strong"),uVr=o("xglm"),pVr=o(" \u2014 "),Bee=a("a"),_Vr=o("FlaxXGLMModel"),bVr=o(" (XGLM model)"),vVr=l(),Sw=a("li"),dwe=a("strong"),FVr=o("xlm-roberta"),TVr=o(" \u2014 "),Iee=a("a"),MVr=o("FlaxXLMRobertaModel"),EVr=o(" (XLM-RoBERTa model)"),CVr=l(),F(Rw.$$.fragment),nQe=l(),Kc=a("h2"),Pw=a("a"),cwe=a("span"),F(b$.$$.fragment),wVr=l(),mwe=a("span"),AVr=o("FlaxAutoModelForCausalLM"),sQe=l(),_r=a("div"),F(v$.$$.fragment),LVr=l(),Zc=a("p"),yVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Nee=a("a"),xVr=o("from_pretrained()"),$Vr=o(" class method or the "),qee=a("a"),kVr=o("from_config()"),SVr=o(` class
method.`),RVr=l(),F$=a("p"),PVr=o("This class cannot be instantiated directly using "),fwe=a("code"),BVr=o("__init__()"),IVr=o(" (throws an error)."),NVr=l(),Ht=a("div"),F(T$.$$.fragment),qVr=l(),gwe=a("p"),jVr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),DVr=l(),em=a("p"),GVr=o(`Note:
Loading a model from its configuration file does `),hwe=a("strong"),OVr=o("not"),VVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jee=a("a"),XVr=o("from_pretrained()"),zVr=o(" to load the model weights."),QVr=l(),F(Bw.$$.fragment),WVr=l(),zr=a("div"),F(M$.$$.fragment),HVr=l(),uwe=a("p"),UVr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),JVr=l(),Mn=a("p"),YVr=o("The model class to instantiate is selected based on the "),pwe=a("code"),KVr=o("model_type"),ZVr=o(` property of the config object (either
passed as an argument or loaded from `),_we=a("code"),eXr=o("pretrained_model_name_or_path"),oXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bwe=a("code"),rXr=o("pretrained_model_name_or_path"),tXr=o(":"),aXr=l(),xe=a("ul"),Iw=a("li"),vwe=a("strong"),nXr=o("bart"),sXr=o(" \u2014 "),Dee=a("a"),lXr=o("FlaxBartForCausalLM"),iXr=o(" (BART model)"),dXr=l(),Nw=a("li"),Fwe=a("strong"),cXr=o("bert"),mXr=o(" \u2014 "),Gee=a("a"),fXr=o("FlaxBertForCausalLM"),gXr=o(" (BERT model)"),hXr=l(),qw=a("li"),Twe=a("strong"),uXr=o("big_bird"),pXr=o(" \u2014 "),Oee=a("a"),_Xr=o("FlaxBigBirdForCausalLM"),bXr=o(" (BigBird model)"),vXr=l(),jw=a("li"),Mwe=a("strong"),FXr=o("electra"),TXr=o(" \u2014 "),Vee=a("a"),MXr=o("FlaxElectraForCausalLM"),EXr=o(" (ELECTRA model)"),CXr=l(),Dw=a("li"),Ewe=a("strong"),wXr=o("gpt2"),AXr=o(" \u2014 "),Xee=a("a"),LXr=o("FlaxGPT2LMHeadModel"),yXr=o(" (OpenAI GPT-2 model)"),xXr=l(),Gw=a("li"),Cwe=a("strong"),$Xr=o("gpt_neo"),kXr=o(" \u2014 "),zee=a("a"),SXr=o("FlaxGPTNeoForCausalLM"),RXr=o(" (GPT Neo model)"),PXr=l(),Ow=a("li"),wwe=a("strong"),BXr=o("gptj"),IXr=o(" \u2014 "),Qee=a("a"),NXr=o("FlaxGPTJForCausalLM"),qXr=o(" (GPT-J model)"),jXr=l(),Vw=a("li"),Awe=a("strong"),DXr=o("opt"),GXr=o(" \u2014 "),Wee=a("a"),OXr=o("FlaxOPTForCausalLM"),VXr=o(" (OPT model)"),XXr=l(),Xw=a("li"),Lwe=a("strong"),zXr=o("roberta"),QXr=o(" \u2014 "),Hee=a("a"),WXr=o("FlaxRobertaForCausalLM"),HXr=o(" (RoBERTa model)"),UXr=l(),zw=a("li"),ywe=a("strong"),JXr=o("xglm"),YXr=o(" \u2014 "),Uee=a("a"),KXr=o("FlaxXGLMForCausalLM"),ZXr=o(" (XGLM model)"),ezr=l(),F(Qw.$$.fragment),lQe=l(),om=a("h2"),Ww=a("a"),xwe=a("span"),F(E$.$$.fragment),ozr=l(),$we=a("span"),rzr=o("FlaxAutoModelForPreTraining"),iQe=l(),br=a("div"),F(C$.$$.fragment),tzr=l(),rm=a("p"),azr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jee=a("a"),nzr=o("from_pretrained()"),szr=o(" class method or the "),Yee=a("a"),lzr=o("from_config()"),izr=o(` class
method.`),dzr=l(),w$=a("p"),czr=o("This class cannot be instantiated directly using "),kwe=a("code"),mzr=o("__init__()"),fzr=o(" (throws an error)."),gzr=l(),Ut=a("div"),F(A$.$$.fragment),hzr=l(),Swe=a("p"),uzr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),pzr=l(),tm=a("p"),_zr=o(`Note:
Loading a model from its configuration file does `),Rwe=a("strong"),bzr=o("not"),vzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kee=a("a"),Fzr=o("from_pretrained()"),Tzr=o(" to load the model weights."),Mzr=l(),F(Hw.$$.fragment),Ezr=l(),Qr=a("div"),F(L$.$$.fragment),Czr=l(),Pwe=a("p"),wzr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Azr=l(),En=a("p"),Lzr=o("The model class to instantiate is selected based on the "),Bwe=a("code"),yzr=o("model_type"),xzr=o(` property of the config object (either
passed as an argument or loaded from `),Iwe=a("code"),$zr=o("pretrained_model_name_or_path"),kzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nwe=a("code"),Szr=o("pretrained_model_name_or_path"),Rzr=o(":"),Pzr=l(),Ee=a("ul"),Uw=a("li"),qwe=a("strong"),Bzr=o("albert"),Izr=o(" \u2014 "),Zee=a("a"),Nzr=o("FlaxAlbertForPreTraining"),qzr=o(" (ALBERT model)"),jzr=l(),Jw=a("li"),jwe=a("strong"),Dzr=o("bart"),Gzr=o(" \u2014 "),eoe=a("a"),Ozr=o("FlaxBartForConditionalGeneration"),Vzr=o(" (BART model)"),Xzr=l(),Yw=a("li"),Dwe=a("strong"),zzr=o("bert"),Qzr=o(" \u2014 "),ooe=a("a"),Wzr=o("FlaxBertForPreTraining"),Hzr=o(" (BERT model)"),Uzr=l(),Kw=a("li"),Gwe=a("strong"),Jzr=o("big_bird"),Yzr=o(" \u2014 "),roe=a("a"),Kzr=o("FlaxBigBirdForPreTraining"),Zzr=o(" (BigBird model)"),eQr=l(),Zw=a("li"),Owe=a("strong"),oQr=o("electra"),rQr=o(" \u2014 "),toe=a("a"),tQr=o("FlaxElectraForPreTraining"),aQr=o(" (ELECTRA model)"),nQr=l(),eA=a("li"),Vwe=a("strong"),sQr=o("longt5"),lQr=o(" \u2014 "),aoe=a("a"),iQr=o("FlaxLongT5ForConditionalGeneration"),dQr=o(" (LongT5 model)"),cQr=l(),oA=a("li"),Xwe=a("strong"),mQr=o("mbart"),fQr=o(" \u2014 "),noe=a("a"),gQr=o("FlaxMBartForConditionalGeneration"),hQr=o(" (mBART model)"),uQr=l(),rA=a("li"),zwe=a("strong"),pQr=o("mt5"),_Qr=o(" \u2014 "),soe=a("a"),bQr=o("FlaxMT5ForConditionalGeneration"),vQr=o(" (MT5 model)"),FQr=l(),tA=a("li"),Qwe=a("strong"),TQr=o("roberta"),MQr=o(" \u2014 "),loe=a("a"),EQr=o("FlaxRobertaForMaskedLM"),CQr=o(" (RoBERTa model)"),wQr=l(),aA=a("li"),Wwe=a("strong"),AQr=o("roformer"),LQr=o(" \u2014 "),ioe=a("a"),yQr=o("FlaxRoFormerForMaskedLM"),xQr=o(" (RoFormer model)"),$Qr=l(),nA=a("li"),Hwe=a("strong"),kQr=o("t5"),SQr=o(" \u2014 "),doe=a("a"),RQr=o("FlaxT5ForConditionalGeneration"),PQr=o(" (T5 model)"),BQr=l(),sA=a("li"),Uwe=a("strong"),IQr=o("wav2vec2"),NQr=o(" \u2014 "),coe=a("a"),qQr=o("FlaxWav2Vec2ForPreTraining"),jQr=o(" (Wav2Vec2 model)"),DQr=l(),lA=a("li"),Jwe=a("strong"),GQr=o("xlm-roberta"),OQr=o(" \u2014 "),moe=a("a"),VQr=o("FlaxXLMRobertaForMaskedLM"),XQr=o(" (XLM-RoBERTa model)"),zQr=l(),F(iA.$$.fragment),dQe=l(),am=a("h2"),dA=a("a"),Ywe=a("span"),F(y$.$$.fragment),QQr=l(),Kwe=a("span"),WQr=o("FlaxAutoModelForMaskedLM"),cQe=l(),vr=a("div"),F(x$.$$.fragment),HQr=l(),nm=a("p"),UQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),foe=a("a"),JQr=o("from_pretrained()"),YQr=o(" class method or the "),goe=a("a"),KQr=o("from_config()"),ZQr=o(` class
method.`),eWr=l(),$$=a("p"),oWr=o("This class cannot be instantiated directly using "),Zwe=a("code"),rWr=o("__init__()"),tWr=o(" (throws an error)."),aWr=l(),Jt=a("div"),F(k$.$$.fragment),nWr=l(),eAe=a("p"),sWr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lWr=l(),sm=a("p"),iWr=o(`Note:
Loading a model from its configuration file does `),oAe=a("strong"),dWr=o("not"),cWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hoe=a("a"),mWr=o("from_pretrained()"),fWr=o(" to load the model weights."),gWr=l(),F(cA.$$.fragment),hWr=l(),Wr=a("div"),F(S$.$$.fragment),uWr=l(),rAe=a("p"),pWr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_Wr=l(),Cn=a("p"),bWr=o("The model class to instantiate is selected based on the "),tAe=a("code"),vWr=o("model_type"),FWr=o(` property of the config object (either
passed as an argument or loaded from `),aAe=a("code"),TWr=o("pretrained_model_name_or_path"),MWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nAe=a("code"),EWr=o("pretrained_model_name_or_path"),CWr=o(":"),wWr=l(),$e=a("ul"),mA=a("li"),sAe=a("strong"),AWr=o("albert"),LWr=o(" \u2014 "),uoe=a("a"),yWr=o("FlaxAlbertForMaskedLM"),xWr=o(" (ALBERT model)"),$Wr=l(),fA=a("li"),lAe=a("strong"),kWr=o("bart"),SWr=o(" \u2014 "),poe=a("a"),RWr=o("FlaxBartForConditionalGeneration"),PWr=o(" (BART model)"),BWr=l(),gA=a("li"),iAe=a("strong"),IWr=o("bert"),NWr=o(" \u2014 "),_oe=a("a"),qWr=o("FlaxBertForMaskedLM"),jWr=o(" (BERT model)"),DWr=l(),hA=a("li"),dAe=a("strong"),GWr=o("big_bird"),OWr=o(" \u2014 "),boe=a("a"),VWr=o("FlaxBigBirdForMaskedLM"),XWr=o(" (BigBird model)"),zWr=l(),uA=a("li"),cAe=a("strong"),QWr=o("distilbert"),WWr=o(" \u2014 "),voe=a("a"),HWr=o("FlaxDistilBertForMaskedLM"),UWr=o(" (DistilBERT model)"),JWr=l(),pA=a("li"),mAe=a("strong"),YWr=o("electra"),KWr=o(" \u2014 "),Foe=a("a"),ZWr=o("FlaxElectraForMaskedLM"),eHr=o(" (ELECTRA model)"),oHr=l(),_A=a("li"),fAe=a("strong"),rHr=o("mbart"),tHr=o(" \u2014 "),Toe=a("a"),aHr=o("FlaxMBartForConditionalGeneration"),nHr=o(" (mBART model)"),sHr=l(),bA=a("li"),gAe=a("strong"),lHr=o("roberta"),iHr=o(" \u2014 "),Moe=a("a"),dHr=o("FlaxRobertaForMaskedLM"),cHr=o(" (RoBERTa model)"),mHr=l(),vA=a("li"),hAe=a("strong"),fHr=o("roformer"),gHr=o(" \u2014 "),Eoe=a("a"),hHr=o("FlaxRoFormerForMaskedLM"),uHr=o(" (RoFormer model)"),pHr=l(),FA=a("li"),uAe=a("strong"),_Hr=o("xlm-roberta"),bHr=o(" \u2014 "),Coe=a("a"),vHr=o("FlaxXLMRobertaForMaskedLM"),FHr=o(" (XLM-RoBERTa model)"),THr=l(),F(TA.$$.fragment),mQe=l(),lm=a("h2"),MA=a("a"),pAe=a("span"),F(R$.$$.fragment),MHr=l(),_Ae=a("span"),EHr=o("FlaxAutoModelForSeq2SeqLM"),fQe=l(),Fr=a("div"),F(P$.$$.fragment),CHr=l(),im=a("p"),wHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),woe=a("a"),AHr=o("from_pretrained()"),LHr=o(" class method or the "),Aoe=a("a"),yHr=o("from_config()"),xHr=o(` class
method.`),$Hr=l(),B$=a("p"),kHr=o("This class cannot be instantiated directly using "),bAe=a("code"),SHr=o("__init__()"),RHr=o(" (throws an error)."),PHr=l(),Yt=a("div"),F(I$.$$.fragment),BHr=l(),vAe=a("p"),IHr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),NHr=l(),dm=a("p"),qHr=o(`Note:
Loading a model from its configuration file does `),FAe=a("strong"),jHr=o("not"),DHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Loe=a("a"),GHr=o("from_pretrained()"),OHr=o(" to load the model weights."),VHr=l(),F(EA.$$.fragment),XHr=l(),Hr=a("div"),F(N$.$$.fragment),zHr=l(),TAe=a("p"),QHr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),WHr=l(),wn=a("p"),HHr=o("The model class to instantiate is selected based on the "),MAe=a("code"),UHr=o("model_type"),JHr=o(` property of the config object (either
passed as an argument or loaded from `),EAe=a("code"),YHr=o("pretrained_model_name_or_path"),KHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CAe=a("code"),ZHr=o("pretrained_model_name_or_path"),eUr=o(":"),oUr=l(),ke=a("ul"),CA=a("li"),wAe=a("strong"),rUr=o("bart"),tUr=o(" \u2014 "),yoe=a("a"),aUr=o("FlaxBartForConditionalGeneration"),nUr=o(" (BART model)"),sUr=l(),wA=a("li"),AAe=a("strong"),lUr=o("blenderbot"),iUr=o(" \u2014 "),xoe=a("a"),dUr=o("FlaxBlenderbotForConditionalGeneration"),cUr=o(" (Blenderbot model)"),mUr=l(),AA=a("li"),LAe=a("strong"),fUr=o("blenderbot-small"),gUr=o(" \u2014 "),$oe=a("a"),hUr=o("FlaxBlenderbotSmallForConditionalGeneration"),uUr=o(" (BlenderbotSmall model)"),pUr=l(),LA=a("li"),yAe=a("strong"),_Ur=o("encoder-decoder"),bUr=o(" \u2014 "),koe=a("a"),vUr=o("FlaxEncoderDecoderModel"),FUr=o(" (Encoder decoder model)"),TUr=l(),yA=a("li"),xAe=a("strong"),MUr=o("longt5"),EUr=o(" \u2014 "),Soe=a("a"),CUr=o("FlaxLongT5ForConditionalGeneration"),wUr=o(" (LongT5 model)"),AUr=l(),xA=a("li"),$Ae=a("strong"),LUr=o("marian"),yUr=o(" \u2014 "),Roe=a("a"),xUr=o("FlaxMarianMTModel"),$Ur=o(" (Marian model)"),kUr=l(),$A=a("li"),kAe=a("strong"),SUr=o("mbart"),RUr=o(" \u2014 "),Poe=a("a"),PUr=o("FlaxMBartForConditionalGeneration"),BUr=o(" (mBART model)"),IUr=l(),kA=a("li"),SAe=a("strong"),NUr=o("mt5"),qUr=o(" \u2014 "),Boe=a("a"),jUr=o("FlaxMT5ForConditionalGeneration"),DUr=o(" (MT5 model)"),GUr=l(),SA=a("li"),RAe=a("strong"),OUr=o("pegasus"),VUr=o(" \u2014 "),Ioe=a("a"),XUr=o("FlaxPegasusForConditionalGeneration"),zUr=o(" (Pegasus model)"),QUr=l(),RA=a("li"),PAe=a("strong"),WUr=o("t5"),HUr=o(" \u2014 "),Noe=a("a"),UUr=o("FlaxT5ForConditionalGeneration"),JUr=o(" (T5 model)"),YUr=l(),F(PA.$$.fragment),gQe=l(),cm=a("h2"),BA=a("a"),BAe=a("span"),F(q$.$$.fragment),KUr=l(),IAe=a("span"),ZUr=o("FlaxAutoModelForSequenceClassification"),hQe=l(),Tr=a("div"),F(j$.$$.fragment),eJr=l(),mm=a("p"),oJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qoe=a("a"),rJr=o("from_pretrained()"),tJr=o(" class method or the "),joe=a("a"),aJr=o("from_config()"),nJr=o(` class
method.`),sJr=l(),D$=a("p"),lJr=o("This class cannot be instantiated directly using "),NAe=a("code"),iJr=o("__init__()"),dJr=o(" (throws an error)."),cJr=l(),Kt=a("div"),F(G$.$$.fragment),mJr=l(),qAe=a("p"),fJr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gJr=l(),fm=a("p"),hJr=o(`Note:
Loading a model from its configuration file does `),jAe=a("strong"),uJr=o("not"),pJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Doe=a("a"),_Jr=o("from_pretrained()"),bJr=o(" to load the model weights."),vJr=l(),F(IA.$$.fragment),FJr=l(),Ur=a("div"),F(O$.$$.fragment),TJr=l(),DAe=a("p"),MJr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),EJr=l(),An=a("p"),CJr=o("The model class to instantiate is selected based on the "),GAe=a("code"),wJr=o("model_type"),AJr=o(` property of the config object (either
passed as an argument or loaded from `),OAe=a("code"),LJr=o("pretrained_model_name_or_path"),yJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VAe=a("code"),xJr=o("pretrained_model_name_or_path"),$Jr=o(":"),kJr=l(),Se=a("ul"),NA=a("li"),XAe=a("strong"),SJr=o("albert"),RJr=o(" \u2014 "),Goe=a("a"),PJr=o("FlaxAlbertForSequenceClassification"),BJr=o(" (ALBERT model)"),IJr=l(),qA=a("li"),zAe=a("strong"),NJr=o("bart"),qJr=o(" \u2014 "),Ooe=a("a"),jJr=o("FlaxBartForSequenceClassification"),DJr=o(" (BART model)"),GJr=l(),jA=a("li"),QAe=a("strong"),OJr=o("bert"),VJr=o(" \u2014 "),Voe=a("a"),XJr=o("FlaxBertForSequenceClassification"),zJr=o(" (BERT model)"),QJr=l(),DA=a("li"),WAe=a("strong"),WJr=o("big_bird"),HJr=o(" \u2014 "),Xoe=a("a"),UJr=o("FlaxBigBirdForSequenceClassification"),JJr=o(" (BigBird model)"),YJr=l(),GA=a("li"),HAe=a("strong"),KJr=o("distilbert"),ZJr=o(" \u2014 "),zoe=a("a"),eYr=o("FlaxDistilBertForSequenceClassification"),oYr=o(" (DistilBERT model)"),rYr=l(),OA=a("li"),UAe=a("strong"),tYr=o("electra"),aYr=o(" \u2014 "),Qoe=a("a"),nYr=o("FlaxElectraForSequenceClassification"),sYr=o(" (ELECTRA model)"),lYr=l(),VA=a("li"),JAe=a("strong"),iYr=o("mbart"),dYr=o(" \u2014 "),Woe=a("a"),cYr=o("FlaxMBartForSequenceClassification"),mYr=o(" (mBART model)"),fYr=l(),XA=a("li"),YAe=a("strong"),gYr=o("roberta"),hYr=o(" \u2014 "),Hoe=a("a"),uYr=o("FlaxRobertaForSequenceClassification"),pYr=o(" (RoBERTa model)"),_Yr=l(),zA=a("li"),KAe=a("strong"),bYr=o("roformer"),vYr=o(" \u2014 "),Uoe=a("a"),FYr=o("FlaxRoFormerForSequenceClassification"),TYr=o(" (RoFormer model)"),MYr=l(),QA=a("li"),ZAe=a("strong"),EYr=o("xlm-roberta"),CYr=o(" \u2014 "),Joe=a("a"),wYr=o("FlaxXLMRobertaForSequenceClassification"),AYr=o(" (XLM-RoBERTa model)"),LYr=l(),F(WA.$$.fragment),uQe=l(),gm=a("h2"),HA=a("a"),e6e=a("span"),F(V$.$$.fragment),yYr=l(),o6e=a("span"),xYr=o("FlaxAutoModelForQuestionAnswering"),pQe=l(),Mr=a("div"),F(X$.$$.fragment),$Yr=l(),hm=a("p"),kYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Yoe=a("a"),SYr=o("from_pretrained()"),RYr=o(" class method or the "),Koe=a("a"),PYr=o("from_config()"),BYr=o(` class
method.`),IYr=l(),z$=a("p"),NYr=o("This class cannot be instantiated directly using "),r6e=a("code"),qYr=o("__init__()"),jYr=o(" (throws an error)."),DYr=l(),Zt=a("div"),F(Q$.$$.fragment),GYr=l(),t6e=a("p"),OYr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),VYr=l(),um=a("p"),XYr=o(`Note:
Loading a model from its configuration file does `),a6e=a("strong"),zYr=o("not"),QYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=a("a"),WYr=o("from_pretrained()"),HYr=o(" to load the model weights."),UYr=l(),F(UA.$$.fragment),JYr=l(),Jr=a("div"),F(W$.$$.fragment),YYr=l(),n6e=a("p"),KYr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ZYr=l(),Ln=a("p"),eKr=o("The model class to instantiate is selected based on the "),s6e=a("code"),oKr=o("model_type"),rKr=o(` property of the config object (either
passed as an argument or loaded from `),l6e=a("code"),tKr=o("pretrained_model_name_or_path"),aKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i6e=a("code"),nKr=o("pretrained_model_name_or_path"),sKr=o(":"),lKr=l(),Re=a("ul"),JA=a("li"),d6e=a("strong"),iKr=o("albert"),dKr=o(" \u2014 "),ere=a("a"),cKr=o("FlaxAlbertForQuestionAnswering"),mKr=o(" (ALBERT model)"),fKr=l(),YA=a("li"),c6e=a("strong"),gKr=o("bart"),hKr=o(" \u2014 "),ore=a("a"),uKr=o("FlaxBartForQuestionAnswering"),pKr=o(" (BART model)"),_Kr=l(),KA=a("li"),m6e=a("strong"),bKr=o("bert"),vKr=o(" \u2014 "),rre=a("a"),FKr=o("FlaxBertForQuestionAnswering"),TKr=o(" (BERT model)"),MKr=l(),ZA=a("li"),f6e=a("strong"),EKr=o("big_bird"),CKr=o(" \u2014 "),tre=a("a"),wKr=o("FlaxBigBirdForQuestionAnswering"),AKr=o(" (BigBird model)"),LKr=l(),e6=a("li"),g6e=a("strong"),yKr=o("distilbert"),xKr=o(" \u2014 "),are=a("a"),$Kr=o("FlaxDistilBertForQuestionAnswering"),kKr=o(" (DistilBERT model)"),SKr=l(),o6=a("li"),h6e=a("strong"),RKr=o("electra"),PKr=o(" \u2014 "),nre=a("a"),BKr=o("FlaxElectraForQuestionAnswering"),IKr=o(" (ELECTRA model)"),NKr=l(),r6=a("li"),u6e=a("strong"),qKr=o("mbart"),jKr=o(" \u2014 "),sre=a("a"),DKr=o("FlaxMBartForQuestionAnswering"),GKr=o(" (mBART model)"),OKr=l(),t6=a("li"),p6e=a("strong"),VKr=o("roberta"),XKr=o(" \u2014 "),lre=a("a"),zKr=o("FlaxRobertaForQuestionAnswering"),QKr=o(" (RoBERTa model)"),WKr=l(),a6=a("li"),_6e=a("strong"),HKr=o("roformer"),UKr=o(" \u2014 "),ire=a("a"),JKr=o("FlaxRoFormerForQuestionAnswering"),YKr=o(" (RoFormer model)"),KKr=l(),n6=a("li"),b6e=a("strong"),ZKr=o("xlm-roberta"),eZr=o(" \u2014 "),dre=a("a"),oZr=o("FlaxXLMRobertaForQuestionAnswering"),rZr=o(" (XLM-RoBERTa model)"),tZr=l(),F(s6.$$.fragment),_Qe=l(),pm=a("h2"),l6=a("a"),v6e=a("span"),F(H$.$$.fragment),aZr=l(),F6e=a("span"),nZr=o("FlaxAutoModelForTokenClassification"),bQe=l(),Er=a("div"),F(U$.$$.fragment),sZr=l(),_m=a("p"),lZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cre=a("a"),iZr=o("from_pretrained()"),dZr=o(" class method or the "),mre=a("a"),cZr=o("from_config()"),mZr=o(` class
method.`),fZr=l(),J$=a("p"),gZr=o("This class cannot be instantiated directly using "),T6e=a("code"),hZr=o("__init__()"),uZr=o(" (throws an error)."),pZr=l(),ea=a("div"),F(Y$.$$.fragment),_Zr=l(),M6e=a("p"),bZr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),vZr=l(),bm=a("p"),FZr=o(`Note:
Loading a model from its configuration file does `),E6e=a("strong"),TZr=o("not"),MZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fre=a("a"),EZr=o("from_pretrained()"),CZr=o(" to load the model weights."),wZr=l(),F(i6.$$.fragment),AZr=l(),Yr=a("div"),F(K$.$$.fragment),LZr=l(),C6e=a("p"),yZr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xZr=l(),yn=a("p"),$Zr=o("The model class to instantiate is selected based on the "),w6e=a("code"),kZr=o("model_type"),SZr=o(` property of the config object (either
passed as an argument or loaded from `),A6e=a("code"),RZr=o("pretrained_model_name_or_path"),PZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L6e=a("code"),BZr=o("pretrained_model_name_or_path"),IZr=o(":"),NZr=l(),Xe=a("ul"),d6=a("li"),y6e=a("strong"),qZr=o("albert"),jZr=o(" \u2014 "),gre=a("a"),DZr=o("FlaxAlbertForTokenClassification"),GZr=o(" (ALBERT model)"),OZr=l(),c6=a("li"),x6e=a("strong"),VZr=o("bert"),XZr=o(" \u2014 "),hre=a("a"),zZr=o("FlaxBertForTokenClassification"),QZr=o(" (BERT model)"),WZr=l(),m6=a("li"),$6e=a("strong"),HZr=o("big_bird"),UZr=o(" \u2014 "),ure=a("a"),JZr=o("FlaxBigBirdForTokenClassification"),YZr=o(" (BigBird model)"),KZr=l(),f6=a("li"),k6e=a("strong"),ZZr=o("distilbert"),eet=o(" \u2014 "),pre=a("a"),oet=o("FlaxDistilBertForTokenClassification"),ret=o(" (DistilBERT model)"),tet=l(),g6=a("li"),S6e=a("strong"),aet=o("electra"),net=o(" \u2014 "),_re=a("a"),set=o("FlaxElectraForTokenClassification"),iet=o(" (ELECTRA model)"),det=l(),h6=a("li"),R6e=a("strong"),cet=o("roberta"),met=o(" \u2014 "),bre=a("a"),fet=o("FlaxRobertaForTokenClassification"),get=o(" (RoBERTa model)"),het=l(),u6=a("li"),P6e=a("strong"),uet=o("roformer"),pet=o(" \u2014 "),vre=a("a"),_et=o("FlaxRoFormerForTokenClassification"),bet=o(" (RoFormer model)"),vet=l(),p6=a("li"),B6e=a("strong"),Fet=o("xlm-roberta"),Tet=o(" \u2014 "),Fre=a("a"),Met=o("FlaxXLMRobertaForTokenClassification"),Eet=o(" (XLM-RoBERTa model)"),Cet=l(),F(_6.$$.fragment),vQe=l(),vm=a("h2"),b6=a("a"),I6e=a("span"),F(Z$.$$.fragment),wet=l(),N6e=a("span"),Aet=o("FlaxAutoModelForMultipleChoice"),FQe=l(),Cr=a("div"),F(ek.$$.fragment),Let=l(),Fm=a("p"),yet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Tre=a("a"),xet=o("from_pretrained()"),$et=o(" class method or the "),Mre=a("a"),ket=o("from_config()"),Set=o(` class
method.`),Ret=l(),ok=a("p"),Pet=o("This class cannot be instantiated directly using "),q6e=a("code"),Bet=o("__init__()"),Iet=o(" (throws an error)."),Net=l(),oa=a("div"),F(rk.$$.fragment),qet=l(),j6e=a("p"),jet=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Det=l(),Tm=a("p"),Get=o(`Note:
Loading a model from its configuration file does `),D6e=a("strong"),Oet=o("not"),Vet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ere=a("a"),Xet=o("from_pretrained()"),zet=o(" to load the model weights."),Qet=l(),F(v6.$$.fragment),Wet=l(),Kr=a("div"),F(tk.$$.fragment),Het=l(),G6e=a("p"),Uet=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Jet=l(),xn=a("p"),Yet=o("The model class to instantiate is selected based on the "),O6e=a("code"),Ket=o("model_type"),Zet=o(` property of the config object (either
passed as an argument or loaded from `),V6e=a("code"),eot=o("pretrained_model_name_or_path"),oot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=a("code"),rot=o("pretrained_model_name_or_path"),tot=o(":"),aot=l(),ze=a("ul"),F6=a("li"),z6e=a("strong"),not=o("albert"),sot=o(" \u2014 "),Cre=a("a"),lot=o("FlaxAlbertForMultipleChoice"),iot=o(" (ALBERT model)"),dot=l(),T6=a("li"),Q6e=a("strong"),cot=o("bert"),mot=o(" \u2014 "),wre=a("a"),fot=o("FlaxBertForMultipleChoice"),got=o(" (BERT model)"),hot=l(),M6=a("li"),W6e=a("strong"),uot=o("big_bird"),pot=o(" \u2014 "),Are=a("a"),_ot=o("FlaxBigBirdForMultipleChoice"),bot=o(" (BigBird model)"),vot=l(),E6=a("li"),H6e=a("strong"),Fot=o("distilbert"),Tot=o(" \u2014 "),Lre=a("a"),Mot=o("FlaxDistilBertForMultipleChoice"),Eot=o(" (DistilBERT model)"),Cot=l(),C6=a("li"),U6e=a("strong"),wot=o("electra"),Aot=o(" \u2014 "),yre=a("a"),Lot=o("FlaxElectraForMultipleChoice"),yot=o(" (ELECTRA model)"),xot=l(),w6=a("li"),J6e=a("strong"),$ot=o("roberta"),kot=o(" \u2014 "),xre=a("a"),Sot=o("FlaxRobertaForMultipleChoice"),Rot=o(" (RoBERTa model)"),Pot=l(),A6=a("li"),Y6e=a("strong"),Bot=o("roformer"),Iot=o(" \u2014 "),$re=a("a"),Not=o("FlaxRoFormerForMultipleChoice"),qot=o(" (RoFormer model)"),jot=l(),L6=a("li"),K6e=a("strong"),Dot=o("xlm-roberta"),Got=o(" \u2014 "),kre=a("a"),Oot=o("FlaxXLMRobertaForMultipleChoice"),Vot=o(" (XLM-RoBERTa model)"),Xot=l(),F(y6.$$.fragment),TQe=l(),Mm=a("h2"),x6=a("a"),Z6e=a("span"),F(ak.$$.fragment),zot=l(),e7e=a("span"),Qot=o("FlaxAutoModelForNextSentencePrediction"),MQe=l(),wr=a("div"),F(nk.$$.fragment),Wot=l(),Em=a("p"),Hot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Sre=a("a"),Uot=o("from_pretrained()"),Jot=o(" class method or the "),Rre=a("a"),Yot=o("from_config()"),Kot=o(` class
method.`),Zot=l(),sk=a("p"),ert=o("This class cannot be instantiated directly using "),o7e=a("code"),ort=o("__init__()"),rrt=o(" (throws an error)."),trt=l(),ra=a("div"),F(lk.$$.fragment),art=l(),r7e=a("p"),nrt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),srt=l(),Cm=a("p"),lrt=o(`Note:
Loading a model from its configuration file does `),t7e=a("strong"),irt=o("not"),drt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pre=a("a"),crt=o("from_pretrained()"),mrt=o(" to load the model weights."),frt=l(),F($6.$$.fragment),grt=l(),Zr=a("div"),F(ik.$$.fragment),hrt=l(),a7e=a("p"),urt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),prt=l(),$n=a("p"),_rt=o("The model class to instantiate is selected based on the "),n7e=a("code"),brt=o("model_type"),vrt=o(` property of the config object (either
passed as an argument or loaded from `),s7e=a("code"),Frt=o("pretrained_model_name_or_path"),Trt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=a("code"),Mrt=o("pretrained_model_name_or_path"),Ert=o(":"),Crt=l(),i7e=a("ul"),k6=a("li"),d7e=a("strong"),wrt=o("bert"),Art=o(" \u2014 "),Bre=a("a"),Lrt=o("FlaxBertForNextSentencePrediction"),yrt=o(" (BERT model)"),xrt=l(),F(S6.$$.fragment),EQe=l(),wm=a("h2"),R6=a("a"),c7e=a("span"),F(dk.$$.fragment),$rt=l(),m7e=a("span"),krt=o("FlaxAutoModelForImageClassification"),CQe=l(),Ar=a("div"),F(ck.$$.fragment),Srt=l(),Am=a("p"),Rrt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Ire=a("a"),Prt=o("from_pretrained()"),Brt=o(" class method or the "),Nre=a("a"),Irt=o("from_config()"),Nrt=o(` class
method.`),qrt=l(),mk=a("p"),jrt=o("This class cannot be instantiated directly using "),f7e=a("code"),Drt=o("__init__()"),Grt=o(" (throws an error)."),Ort=l(),ta=a("div"),F(fk.$$.fragment),Vrt=l(),g7e=a("p"),Xrt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zrt=l(),Lm=a("p"),Qrt=o(`Note:
Loading a model from its configuration file does `),h7e=a("strong"),Wrt=o("not"),Hrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qre=a("a"),Urt=o("from_pretrained()"),Jrt=o(" to load the model weights."),Yrt=l(),F(P6.$$.fragment),Krt=l(),et=a("div"),F(gk.$$.fragment),Zrt=l(),u7e=a("p"),ett=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ott=l(),kn=a("p"),rtt=o("The model class to instantiate is selected based on the "),p7e=a("code"),ttt=o("model_type"),att=o(` property of the config object (either
passed as an argument or loaded from `),_7e=a("code"),ntt=o("pretrained_model_name_or_path"),stt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b7e=a("code"),ltt=o("pretrained_model_name_or_path"),itt=o(":"),dtt=l(),hk=a("ul"),B6=a("li"),v7e=a("strong"),ctt=o("beit"),mtt=o(" \u2014 "),jre=a("a"),ftt=o("FlaxBeitForImageClassification"),gtt=o(" (BEiT model)"),htt=l(),I6=a("li"),F7e=a("strong"),utt=o("vit"),ptt=o(" \u2014 "),Dre=a("a"),_tt=o("FlaxViTForImageClassification"),btt=o(" (ViT model)"),vtt=l(),F(N6.$$.fragment),wQe=l(),ym=a("h2"),q6=a("a"),T7e=a("span"),F(uk.$$.fragment),Ftt=l(),M7e=a("span"),Ttt=o("FlaxAutoModelForVision2Seq"),AQe=l(),Lr=a("div"),F(pk.$$.fragment),Mtt=l(),xm=a("p"),Ett=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Gre=a("a"),Ctt=o("from_pretrained()"),wtt=o(" class method or the "),Ore=a("a"),Att=o("from_config()"),Ltt=o(` class
method.`),ytt=l(),_k=a("p"),xtt=o("This class cannot be instantiated directly using "),E7e=a("code"),$tt=o("__init__()"),ktt=o(" (throws an error)."),Stt=l(),aa=a("div"),F(bk.$$.fragment),Rtt=l(),C7e=a("p"),Ptt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Btt=l(),$m=a("p"),Itt=o(`Note:
Loading a model from its configuration file does `),w7e=a("strong"),Ntt=o("not"),qtt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vre=a("a"),jtt=o("from_pretrained()"),Dtt=o(" to load the model weights."),Gtt=l(),F(j6.$$.fragment),Ott=l(),ot=a("div"),F(vk.$$.fragment),Vtt=l(),A7e=a("p"),Xtt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ztt=l(),Sn=a("p"),Qtt=o("The model class to instantiate is selected based on the "),L7e=a("code"),Wtt=o("model_type"),Htt=o(` property of the config object (either
passed as an argument or loaded from `),y7e=a("code"),Utt=o("pretrained_model_name_or_path"),Jtt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x7e=a("code"),Ytt=o("pretrained_model_name_or_path"),Ktt=o(":"),Ztt=l(),$7e=a("ul"),D6=a("li"),k7e=a("strong"),eat=o("vision-encoder-decoder"),oat=o(" \u2014 "),Xre=a("a"),rat=o("FlaxVisionEncoderDecoderModel"),tat=o(" (Vision Encoder decoder model)"),aat=l(),F(G6.$$.fragment),this.h()},l(m){const _=UWt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var Fk=s(u);f=n(Fk,"A",{id:!0,class:!0,href:!0});var S7e=s(f);p=n(S7e,"SPAN",{});var R7e=s(p);T(d.$$.fragment,R7e),R7e.forEach(t),S7e.forEach(t),h=i(Fk),wo=n(Fk,"SPAN",{});var P7e=s(wo);yi=r(P7e,"Auto Classes"),P7e.forEach(t),Fk.forEach(t),Pm=i(m),lt=n(m,"P",{});var Tk=s(lt);xi=r(Tk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),$i=n(Tk,"CODE",{});var B7e=s($i);sy=r(B7e,"from_pretrained()"),B7e.forEach(t),Bm=r(Tk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Tk.forEach(t),Oe=i(m),We=n(m,"P",{});var Rn=s(We);ki=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var I7e=s(Pn);ly=r(I7e,"AutoConfig"),I7e.forEach(t),Bn=r(Rn,", "),In=n(Rn,"A",{href:!0});var N7e=s(In);iy=r(N7e,"AutoModel"),N7e.forEach(t),Si=r(Rn,`, and
`),Nn=n(Rn,"A",{href:!0});var q7e=s(Nn);dy=r(q7e,"AutoTokenizer"),q7e.forEach(t),Ri=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),Im=i(m),T(Sa.$$.fragment,m),He=i(m),Ae=n(m,"P",{});var Mk=s(Ae);OS=r(Mk,"will create a model that is an instance of "),Pi=n(Mk,"A",{href:!0});var j7e=s(Pi);VS=r(j7e,"BertModel"),j7e.forEach(t),XS=r(Mk,"."),Mk.forEach(t),Ao=i(m),Ra=n(m,"P",{});var Ek=s(Ra);zS=r(Ek,"There is one class of "),Nm=n(Ek,"CODE",{});var D7e=s(Nm);QS=r(D7e,"AutoModel"),D7e.forEach(t),NHe=r(Ek," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Ek.forEach(t),MXe=i(m),Bi=n(m,"H2",{class:!0});var Ck=s(Bi);qm=n(Ck,"A",{id:!0,class:!0,href:!0});var G7e=s(qm);jae=n(G7e,"SPAN",{});var O7e=s(jae);T(cy.$$.fragment,O7e),O7e.forEach(t),G7e.forEach(t),qHe=i(Ck),Dae=n(Ck,"SPAN",{});var V7e=s(Dae);jHe=r(V7e,"Extending the Auto Classes"),V7e.forEach(t),Ck.forEach(t),EXe=i(m),qn=n(m,"P",{});var km=s(qn);DHe=r(km,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Gae=n(km,"CODE",{});var X7e=s(Gae);GHe=r(X7e,"NewModel"),X7e.forEach(t),OHe=r(km,", make sure you have a "),Oae=n(km,"CODE",{});var z7e=s(Oae);VHe=r(z7e,"NewModelConfig"),z7e.forEach(t),XHe=r(km,` then you can add those to the auto
classes like this:`),km.forEach(t),CXe=i(m),T(my.$$.fragment,m),wXe=i(m),WS=n(m,"P",{});var Q7e=s(WS);zHe=r(Q7e,"You will then be able to use the auto classes like you would usually do!"),Q7e.forEach(t),AXe=i(m),T(jm.$$.fragment,m),LXe=i(m),Ii=n(m,"H2",{class:!0});var wk=s(Ii);Dm=n(wk,"A",{id:!0,class:!0,href:!0});var W7e=s(Dm);Vae=n(W7e,"SPAN",{});var H7e=s(Vae);T(fy.$$.fragment,H7e),H7e.forEach(t),W7e.forEach(t),QHe=i(wk),Xae=n(wk,"SPAN",{});var U7e=s(Xae);WHe=r(U7e,"AutoConfig"),U7e.forEach(t),wk.forEach(t),yXe=i(m),Lo=n(m,"DIV",{class:!0});var nt=s(Lo);T(gy.$$.fragment,nt),HHe=i(nt),hy=n(nt,"P",{});var Ak=s(hy);UHe=r(Ak,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),HS=n(Ak,"A",{href:!0});var J7e=s(HS);JHe=r(J7e,"from_pretrained()"),J7e.forEach(t),YHe=r(Ak," class method."),Ak.forEach(t),KHe=i(nt),uy=n(nt,"P",{});var Lk=s(uy);ZHe=r(Lk,"This class cannot be instantiated directly using "),zae=n(Lk,"CODE",{});var Y7e=s(zae);eUe=r(Y7e,"__init__()"),Y7e.forEach(t),oUe=r(Lk," (throws an error)."),Lk.forEach(t),rUe=i(nt),yr=n(nt,"DIV",{class:!0});var st=s(yr);T(py.$$.fragment,st),tUe=i(st),Qae=n(st,"P",{});var K7e=s(Qae);aUe=r(K7e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),K7e.forEach(t),nUe=i(st),Ni=n(st,"P",{});var Sm=s(Ni);sUe=r(Sm,"The configuration class to instantiate is selected based on the "),Wae=n(Sm,"CODE",{});var Z7e=s(Wae);lUe=r(Z7e,"model_type"),Z7e.forEach(t),iUe=r(Sm,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Hae=n(Sm,"CODE",{});var eLe=s(Hae);dUe=r(eLe,"pretrained_model_name_or_path"),eLe.forEach(t),cUe=r(Sm,":"),Sm.forEach(t),mUe=i(st),A=n(st,"UL",{});var L=s(A);Gm=n(L,"LI",{});var O6=s(Gm);Uae=n(O6,"STRONG",{});var oLe=s(Uae);fUe=r(oLe,"albert"),oLe.forEach(t),gUe=r(O6," \u2014 "),US=n(O6,"A",{href:!0});var rLe=s(US);hUe=r(rLe,"AlbertConfig"),rLe.forEach(t),uUe=r(O6," (ALBERT model)"),O6.forEach(t),pUe=i(L),Om=n(L,"LI",{});var V6=s(Om);Jae=n(V6,"STRONG",{});var tLe=s(Jae);_Ue=r(tLe,"bart"),tLe.forEach(t),bUe=r(V6," \u2014 "),JS=n(V6,"A",{href:!0});var aLe=s(JS);vUe=r(aLe,"BartConfig"),aLe.forEach(t),FUe=r(V6," (BART model)"),V6.forEach(t),TUe=i(L),Vm=n(L,"LI",{});var X6=s(Vm);Yae=n(X6,"STRONG",{});var nLe=s(Yae);MUe=r(nLe,"beit"),nLe.forEach(t),EUe=r(X6," \u2014 "),YS=n(X6,"A",{href:!0});var sLe=s(YS);CUe=r(sLe,"BeitConfig"),sLe.forEach(t),wUe=r(X6," (BEiT model)"),X6.forEach(t),AUe=i(L),Xm=n(L,"LI",{});var z6=s(Xm);Kae=n(z6,"STRONG",{});var lLe=s(Kae);LUe=r(lLe,"bert"),lLe.forEach(t),yUe=r(z6," \u2014 "),KS=n(z6,"A",{href:!0});var iLe=s(KS);xUe=r(iLe,"BertConfig"),iLe.forEach(t),$Ue=r(z6," (BERT model)"),z6.forEach(t),kUe=i(L),zm=n(L,"LI",{});var Q6=s(zm);Zae=n(Q6,"STRONG",{});var dLe=s(Zae);SUe=r(dLe,"bert-generation"),dLe.forEach(t),RUe=r(Q6," \u2014 "),ZS=n(Q6,"A",{href:!0});var cLe=s(ZS);PUe=r(cLe,"BertGenerationConfig"),cLe.forEach(t),BUe=r(Q6," (Bert Generation model)"),Q6.forEach(t),IUe=i(L),Qm=n(L,"LI",{});var W6=s(Qm);ene=n(W6,"STRONG",{});var mLe=s(ene);NUe=r(mLe,"big_bird"),mLe.forEach(t),qUe=r(W6," \u2014 "),eR=n(W6,"A",{href:!0});var fLe=s(eR);jUe=r(fLe,"BigBirdConfig"),fLe.forEach(t),DUe=r(W6," (BigBird model)"),W6.forEach(t),GUe=i(L),Wm=n(L,"LI",{});var H6=s(Wm);one=n(H6,"STRONG",{});var gLe=s(one);OUe=r(gLe,"bigbird_pegasus"),gLe.forEach(t),VUe=r(H6," \u2014 "),oR=n(H6,"A",{href:!0});var hLe=s(oR);XUe=r(hLe,"BigBirdPegasusConfig"),hLe.forEach(t),zUe=r(H6," (BigBird-Pegasus model)"),H6.forEach(t),QUe=i(L),Hm=n(L,"LI",{});var U6=s(Hm);rne=n(U6,"STRONG",{});var uLe=s(rne);WUe=r(uLe,"blenderbot"),uLe.forEach(t),HUe=r(U6," \u2014 "),rR=n(U6,"A",{href:!0});var pLe=s(rR);UUe=r(pLe,"BlenderbotConfig"),pLe.forEach(t),JUe=r(U6," (Blenderbot model)"),U6.forEach(t),YUe=i(L),Um=n(L,"LI",{});var J6=s(Um);tne=n(J6,"STRONG",{});var _Le=s(tne);KUe=r(_Le,"blenderbot-small"),_Le.forEach(t),ZUe=r(J6," \u2014 "),tR=n(J6,"A",{href:!0});var bLe=s(tR);eJe=r(bLe,"BlenderbotSmallConfig"),bLe.forEach(t),oJe=r(J6," (BlenderbotSmall model)"),J6.forEach(t),rJe=i(L),Jm=n(L,"LI",{});var Y6=s(Jm);ane=n(Y6,"STRONG",{});var vLe=s(ane);tJe=r(vLe,"bloom"),vLe.forEach(t),aJe=r(Y6," \u2014 "),aR=n(Y6,"A",{href:!0});var FLe=s(aR);nJe=r(FLe,"BloomConfig"),FLe.forEach(t),sJe=r(Y6," (BLOOM model)"),Y6.forEach(t),lJe=i(L),Ym=n(L,"LI",{});var K6=s(Ym);nne=n(K6,"STRONG",{});var TLe=s(nne);iJe=r(TLe,"camembert"),TLe.forEach(t),dJe=r(K6," \u2014 "),nR=n(K6,"A",{href:!0});var MLe=s(nR);cJe=r(MLe,"CamembertConfig"),MLe.forEach(t),mJe=r(K6," (CamemBERT model)"),K6.forEach(t),fJe=i(L),Km=n(L,"LI",{});var Z6=s(Km);sne=n(Z6,"STRONG",{});var ELe=s(sne);gJe=r(ELe,"canine"),ELe.forEach(t),hJe=r(Z6," \u2014 "),sR=n(Z6,"A",{href:!0});var CLe=s(sR);uJe=r(CLe,"CanineConfig"),CLe.forEach(t),pJe=r(Z6," (CANINE model)"),Z6.forEach(t),_Je=i(L),Zm=n(L,"LI",{});var e7=s(Zm);lne=n(e7,"STRONG",{});var wLe=s(lne);bJe=r(wLe,"clip"),wLe.forEach(t),vJe=r(e7," \u2014 "),lR=n(e7,"A",{href:!0});var ALe=s(lR);FJe=r(ALe,"CLIPConfig"),ALe.forEach(t),TJe=r(e7," (CLIP model)"),e7.forEach(t),MJe=i(L),ef=n(L,"LI",{});var o7=s(ef);ine=n(o7,"STRONG",{});var LLe=s(ine);EJe=r(LLe,"codegen"),LLe.forEach(t),CJe=r(o7," \u2014 "),iR=n(o7,"A",{href:!0});var yLe=s(iR);wJe=r(yLe,"CodeGenConfig"),yLe.forEach(t),AJe=r(o7," (CodeGen model)"),o7.forEach(t),LJe=i(L),of=n(L,"LI",{});var r7=s(of);dne=n(r7,"STRONG",{});var xLe=s(dne);yJe=r(xLe,"convbert"),xLe.forEach(t),xJe=r(r7," \u2014 "),dR=n(r7,"A",{href:!0});var $Le=s(dR);$Je=r($Le,"ConvBertConfig"),$Le.forEach(t),kJe=r(r7," (ConvBERT model)"),r7.forEach(t),SJe=i(L),rf=n(L,"LI",{});var t7=s(rf);cne=n(t7,"STRONG",{});var kLe=s(cne);RJe=r(kLe,"convnext"),kLe.forEach(t),PJe=r(t7," \u2014 "),cR=n(t7,"A",{href:!0});var SLe=s(cR);BJe=r(SLe,"ConvNextConfig"),SLe.forEach(t),IJe=r(t7," (ConvNeXT model)"),t7.forEach(t),NJe=i(L),tf=n(L,"LI",{});var a7=s(tf);mne=n(a7,"STRONG",{});var RLe=s(mne);qJe=r(RLe,"ctrl"),RLe.forEach(t),jJe=r(a7," \u2014 "),mR=n(a7,"A",{href:!0});var PLe=s(mR);DJe=r(PLe,"CTRLConfig"),PLe.forEach(t),GJe=r(a7," (CTRL model)"),a7.forEach(t),OJe=i(L),af=n(L,"LI",{});var n7=s(af);fne=n(n7,"STRONG",{});var BLe=s(fne);VJe=r(BLe,"cvt"),BLe.forEach(t),XJe=r(n7," \u2014 "),fR=n(n7,"A",{href:!0});var ILe=s(fR);zJe=r(ILe,"CvtConfig"),ILe.forEach(t),QJe=r(n7," (CvT model)"),n7.forEach(t),WJe=i(L),nf=n(L,"LI",{});var s7=s(nf);gne=n(s7,"STRONG",{});var NLe=s(gne);HJe=r(NLe,"data2vec-audio"),NLe.forEach(t),UJe=r(s7," \u2014 "),gR=n(s7,"A",{href:!0});var qLe=s(gR);JJe=r(qLe,"Data2VecAudioConfig"),qLe.forEach(t),YJe=r(s7," (Data2VecAudio model)"),s7.forEach(t),KJe=i(L),sf=n(L,"LI",{});var l7=s(sf);hne=n(l7,"STRONG",{});var jLe=s(hne);ZJe=r(jLe,"data2vec-text"),jLe.forEach(t),eYe=r(l7," \u2014 "),hR=n(l7,"A",{href:!0});var DLe=s(hR);oYe=r(DLe,"Data2VecTextConfig"),DLe.forEach(t),rYe=r(l7," (Data2VecText model)"),l7.forEach(t),tYe=i(L),lf=n(L,"LI",{});var i7=s(lf);une=n(i7,"STRONG",{});var GLe=s(une);aYe=r(GLe,"data2vec-vision"),GLe.forEach(t),nYe=r(i7," \u2014 "),uR=n(i7,"A",{href:!0});var OLe=s(uR);sYe=r(OLe,"Data2VecVisionConfig"),OLe.forEach(t),lYe=r(i7," (Data2VecVision model)"),i7.forEach(t),iYe=i(L),df=n(L,"LI",{});var d7=s(df);pne=n(d7,"STRONG",{});var VLe=s(pne);dYe=r(VLe,"deberta"),VLe.forEach(t),cYe=r(d7," \u2014 "),pR=n(d7,"A",{href:!0});var XLe=s(pR);mYe=r(XLe,"DebertaConfig"),XLe.forEach(t),fYe=r(d7," (DeBERTa model)"),d7.forEach(t),gYe=i(L),cf=n(L,"LI",{});var c7=s(cf);_ne=n(c7,"STRONG",{});var zLe=s(_ne);hYe=r(zLe,"deberta-v2"),zLe.forEach(t),uYe=r(c7," \u2014 "),_R=n(c7,"A",{href:!0});var QLe=s(_R);pYe=r(QLe,"DebertaV2Config"),QLe.forEach(t),_Ye=r(c7," (DeBERTa-v2 model)"),c7.forEach(t),bYe=i(L),mf=n(L,"LI",{});var m7=s(mf);bne=n(m7,"STRONG",{});var sat=s(bne);vYe=r(sat,"decision_transformer"),sat.forEach(t),FYe=r(m7," \u2014 "),bR=n(m7,"A",{href:!0});var lat=s(bR);TYe=r(lat,"DecisionTransformerConfig"),lat.forEach(t),MYe=r(m7," (Decision Transformer model)"),m7.forEach(t),EYe=i(L),ff=n(L,"LI",{});var WLe=s(ff);vne=n(WLe,"STRONG",{});var iat=s(vne);CYe=r(iat,"deit"),iat.forEach(t),wYe=r(WLe," \u2014 "),vR=n(WLe,"A",{href:!0});var dat=s(vR);AYe=r(dat,"DeiTConfig"),dat.forEach(t),LYe=r(WLe," (DeiT model)"),WLe.forEach(t),yYe=i(L),gf=n(L,"LI",{});var HLe=s(gf);Fne=n(HLe,"STRONG",{});var cat=s(Fne);xYe=r(cat,"detr"),cat.forEach(t),$Ye=r(HLe," \u2014 "),FR=n(HLe,"A",{href:!0});var mat=s(FR);kYe=r(mat,"DetrConfig"),mat.forEach(t),SYe=r(HLe," (DETR model)"),HLe.forEach(t),RYe=i(L),hf=n(L,"LI",{});var ULe=s(hf);Tne=n(ULe,"STRONG",{});var fat=s(Tne);PYe=r(fat,"distilbert"),fat.forEach(t),BYe=r(ULe," \u2014 "),TR=n(ULe,"A",{href:!0});var gat=s(TR);IYe=r(gat,"DistilBertConfig"),gat.forEach(t),NYe=r(ULe," (DistilBERT model)"),ULe.forEach(t),qYe=i(L),uf=n(L,"LI",{});var JLe=s(uf);Mne=n(JLe,"STRONG",{});var hat=s(Mne);jYe=r(hat,"dpr"),hat.forEach(t),DYe=r(JLe," \u2014 "),MR=n(JLe,"A",{href:!0});var uat=s(MR);GYe=r(uat,"DPRConfig"),uat.forEach(t),OYe=r(JLe," (DPR model)"),JLe.forEach(t),VYe=i(L),pf=n(L,"LI",{});var YLe=s(pf);Ene=n(YLe,"STRONG",{});var pat=s(Ene);XYe=r(pat,"dpt"),pat.forEach(t),zYe=r(YLe," \u2014 "),ER=n(YLe,"A",{href:!0});var _at=s(ER);QYe=r(_at,"DPTConfig"),_at.forEach(t),WYe=r(YLe," (DPT model)"),YLe.forEach(t),HYe=i(L),_f=n(L,"LI",{});var KLe=s(_f);Cne=n(KLe,"STRONG",{});var bat=s(Cne);UYe=r(bat,"electra"),bat.forEach(t),JYe=r(KLe," \u2014 "),CR=n(KLe,"A",{href:!0});var vat=s(CR);YYe=r(vat,"ElectraConfig"),vat.forEach(t),KYe=r(KLe," (ELECTRA model)"),KLe.forEach(t),ZYe=i(L),bf=n(L,"LI",{});var ZLe=s(bf);wne=n(ZLe,"STRONG",{});var Fat=s(wne);eKe=r(Fat,"encoder-decoder"),Fat.forEach(t),oKe=r(ZLe," \u2014 "),wR=n(ZLe,"A",{href:!0});var Tat=s(wR);rKe=r(Tat,"EncoderDecoderConfig"),Tat.forEach(t),tKe=r(ZLe," (Encoder decoder model)"),ZLe.forEach(t),aKe=i(L),vf=n(L,"LI",{});var eye=s(vf);Ane=n(eye,"STRONG",{});var Mat=s(Ane);nKe=r(Mat,"flaubert"),Mat.forEach(t),sKe=r(eye," \u2014 "),AR=n(eye,"A",{href:!0});var Eat=s(AR);lKe=r(Eat,"FlaubertConfig"),Eat.forEach(t),iKe=r(eye," (FlauBERT model)"),eye.forEach(t),dKe=i(L),Ff=n(L,"LI",{});var oye=s(Ff);Lne=n(oye,"STRONG",{});var Cat=s(Lne);cKe=r(Cat,"flava"),Cat.forEach(t),mKe=r(oye," \u2014 "),LR=n(oye,"A",{href:!0});var wat=s(LR);fKe=r(wat,"FlavaConfig"),wat.forEach(t),gKe=r(oye," (FLAVA model)"),oye.forEach(t),hKe=i(L),Tf=n(L,"LI",{});var rye=s(Tf);yne=n(rye,"STRONG",{});var Aat=s(yne);uKe=r(Aat,"fnet"),Aat.forEach(t),pKe=r(rye," \u2014 "),yR=n(rye,"A",{href:!0});var Lat=s(yR);_Ke=r(Lat,"FNetConfig"),Lat.forEach(t),bKe=r(rye," (FNet model)"),rye.forEach(t),vKe=i(L),Mf=n(L,"LI",{});var tye=s(Mf);xne=n(tye,"STRONG",{});var yat=s(xne);FKe=r(yat,"fsmt"),yat.forEach(t),TKe=r(tye," \u2014 "),xR=n(tye,"A",{href:!0});var xat=s(xR);MKe=r(xat,"FSMTConfig"),xat.forEach(t),EKe=r(tye," (FairSeq Machine-Translation model)"),tye.forEach(t),CKe=i(L),Ef=n(L,"LI",{});var aye=s(Ef);$ne=n(aye,"STRONG",{});var $at=s($ne);wKe=r($at,"funnel"),$at.forEach(t),AKe=r(aye," \u2014 "),$R=n(aye,"A",{href:!0});var kat=s($R);LKe=r(kat,"FunnelConfig"),kat.forEach(t),yKe=r(aye," (Funnel Transformer model)"),aye.forEach(t),xKe=i(L),Cf=n(L,"LI",{});var nye=s(Cf);kne=n(nye,"STRONG",{});var Sat=s(kne);$Ke=r(Sat,"glpn"),Sat.forEach(t),kKe=r(nye," \u2014 "),kR=n(nye,"A",{href:!0});var Rat=s(kR);SKe=r(Rat,"GLPNConfig"),Rat.forEach(t),RKe=r(nye," (GLPN model)"),nye.forEach(t),PKe=i(L),wf=n(L,"LI",{});var sye=s(wf);Sne=n(sye,"STRONG",{});var Pat=s(Sne);BKe=r(Pat,"gpt2"),Pat.forEach(t),IKe=r(sye," \u2014 "),SR=n(sye,"A",{href:!0});var Bat=s(SR);NKe=r(Bat,"GPT2Config"),Bat.forEach(t),qKe=r(sye," (OpenAI GPT-2 model)"),sye.forEach(t),jKe=i(L),Af=n(L,"LI",{});var lye=s(Af);Rne=n(lye,"STRONG",{});var Iat=s(Rne);DKe=r(Iat,"gpt_neo"),Iat.forEach(t),GKe=r(lye," \u2014 "),RR=n(lye,"A",{href:!0});var Nat=s(RR);OKe=r(Nat,"GPTNeoConfig"),Nat.forEach(t),VKe=r(lye," (GPT Neo model)"),lye.forEach(t),XKe=i(L),Lf=n(L,"LI",{});var iye=s(Lf);Pne=n(iye,"STRONG",{});var qat=s(Pne);zKe=r(qat,"gpt_neox"),qat.forEach(t),QKe=r(iye," \u2014 "),PR=n(iye,"A",{href:!0});var jat=s(PR);WKe=r(jat,"GPTNeoXConfig"),jat.forEach(t),HKe=r(iye," (GPT NeoX model)"),iye.forEach(t),UKe=i(L),yf=n(L,"LI",{});var dye=s(yf);Bne=n(dye,"STRONG",{});var Dat=s(Bne);JKe=r(Dat,"gptj"),Dat.forEach(t),YKe=r(dye," \u2014 "),BR=n(dye,"A",{href:!0});var Gat=s(BR);KKe=r(Gat,"GPTJConfig"),Gat.forEach(t),ZKe=r(dye," (GPT-J model)"),dye.forEach(t),eZe=i(L),xf=n(L,"LI",{});var cye=s(xf);Ine=n(cye,"STRONG",{});var Oat=s(Ine);oZe=r(Oat,"groupvit"),Oat.forEach(t),rZe=r(cye," \u2014 "),IR=n(cye,"A",{href:!0});var Vat=s(IR);tZe=r(Vat,"GroupViTConfig"),Vat.forEach(t),aZe=r(cye," (GroupViT model)"),cye.forEach(t),nZe=i(L),$f=n(L,"LI",{});var mye=s($f);Nne=n(mye,"STRONG",{});var Xat=s(Nne);sZe=r(Xat,"hubert"),Xat.forEach(t),lZe=r(mye," \u2014 "),NR=n(mye,"A",{href:!0});var zat=s(NR);iZe=r(zat,"HubertConfig"),zat.forEach(t),dZe=r(mye," (Hubert model)"),mye.forEach(t),cZe=i(L),kf=n(L,"LI",{});var fye=s(kf);qne=n(fye,"STRONG",{});var Qat=s(qne);mZe=r(Qat,"ibert"),Qat.forEach(t),fZe=r(fye," \u2014 "),qR=n(fye,"A",{href:!0});var Wat=s(qR);gZe=r(Wat,"IBertConfig"),Wat.forEach(t),hZe=r(fye," (I-BERT model)"),fye.forEach(t),uZe=i(L),Sf=n(L,"LI",{});var gye=s(Sf);jne=n(gye,"STRONG",{});var Hat=s(jne);pZe=r(Hat,"imagegpt"),Hat.forEach(t),_Ze=r(gye," \u2014 "),jR=n(gye,"A",{href:!0});var Uat=s(jR);bZe=r(Uat,"ImageGPTConfig"),Uat.forEach(t),vZe=r(gye," (ImageGPT model)"),gye.forEach(t),FZe=i(L),Rf=n(L,"LI",{});var hye=s(Rf);Dne=n(hye,"STRONG",{});var Jat=s(Dne);TZe=r(Jat,"layoutlm"),Jat.forEach(t),MZe=r(hye," \u2014 "),DR=n(hye,"A",{href:!0});var Yat=s(DR);EZe=r(Yat,"LayoutLMConfig"),Yat.forEach(t),CZe=r(hye," (LayoutLM model)"),hye.forEach(t),wZe=i(L),Pf=n(L,"LI",{});var uye=s(Pf);Gne=n(uye,"STRONG",{});var Kat=s(Gne);AZe=r(Kat,"layoutlmv2"),Kat.forEach(t),LZe=r(uye," \u2014 "),GR=n(uye,"A",{href:!0});var Zat=s(GR);yZe=r(Zat,"LayoutLMv2Config"),Zat.forEach(t),xZe=r(uye," (LayoutLMv2 model)"),uye.forEach(t),$Ze=i(L),Bf=n(L,"LI",{});var pye=s(Bf);One=n(pye,"STRONG",{});var ent=s(One);kZe=r(ent,"layoutlmv3"),ent.forEach(t),SZe=r(pye," \u2014 "),OR=n(pye,"A",{href:!0});var ont=s(OR);RZe=r(ont,"LayoutLMv3Config"),ont.forEach(t),PZe=r(pye," (LayoutLMv3 model)"),pye.forEach(t),BZe=i(L),If=n(L,"LI",{});var _ye=s(If);Vne=n(_ye,"STRONG",{});var rnt=s(Vne);IZe=r(rnt,"led"),rnt.forEach(t),NZe=r(_ye," \u2014 "),VR=n(_ye,"A",{href:!0});var tnt=s(VR);qZe=r(tnt,"LEDConfig"),tnt.forEach(t),jZe=r(_ye," (LED model)"),_ye.forEach(t),DZe=i(L),Nf=n(L,"LI",{});var bye=s(Nf);Xne=n(bye,"STRONG",{});var ant=s(Xne);GZe=r(ant,"levit"),ant.forEach(t),OZe=r(bye," \u2014 "),XR=n(bye,"A",{href:!0});var nnt=s(XR);VZe=r(nnt,"LevitConfig"),nnt.forEach(t),XZe=r(bye," (LeViT model)"),bye.forEach(t),zZe=i(L),qf=n(L,"LI",{});var vye=s(qf);zne=n(vye,"STRONG",{});var snt=s(zne);QZe=r(snt,"longformer"),snt.forEach(t),WZe=r(vye," \u2014 "),zR=n(vye,"A",{href:!0});var lnt=s(zR);HZe=r(lnt,"LongformerConfig"),lnt.forEach(t),UZe=r(vye," (Longformer model)"),vye.forEach(t),JZe=i(L),jf=n(L,"LI",{});var Fye=s(jf);Qne=n(Fye,"STRONG",{});var int=s(Qne);YZe=r(int,"longt5"),int.forEach(t),KZe=r(Fye," \u2014 "),QR=n(Fye,"A",{href:!0});var dnt=s(QR);ZZe=r(dnt,"LongT5Config"),dnt.forEach(t),eeo=r(Fye," (LongT5 model)"),Fye.forEach(t),oeo=i(L),Df=n(L,"LI",{});var Tye=s(Df);Wne=n(Tye,"STRONG",{});var cnt=s(Wne);reo=r(cnt,"luke"),cnt.forEach(t),teo=r(Tye," \u2014 "),WR=n(Tye,"A",{href:!0});var mnt=s(WR);aeo=r(mnt,"LukeConfig"),mnt.forEach(t),neo=r(Tye," (LUKE model)"),Tye.forEach(t),seo=i(L),Gf=n(L,"LI",{});var Mye=s(Gf);Hne=n(Mye,"STRONG",{});var fnt=s(Hne);leo=r(fnt,"lxmert"),fnt.forEach(t),ieo=r(Mye," \u2014 "),HR=n(Mye,"A",{href:!0});var gnt=s(HR);deo=r(gnt,"LxmertConfig"),gnt.forEach(t),ceo=r(Mye," (LXMERT model)"),Mye.forEach(t),meo=i(L),Of=n(L,"LI",{});var Eye=s(Of);Une=n(Eye,"STRONG",{});var hnt=s(Une);feo=r(hnt,"m2m_100"),hnt.forEach(t),geo=r(Eye," \u2014 "),UR=n(Eye,"A",{href:!0});var unt=s(UR);heo=r(unt,"M2M100Config"),unt.forEach(t),ueo=r(Eye," (M2M100 model)"),Eye.forEach(t),peo=i(L),Vf=n(L,"LI",{});var Cye=s(Vf);Jne=n(Cye,"STRONG",{});var pnt=s(Jne);_eo=r(pnt,"marian"),pnt.forEach(t),beo=r(Cye," \u2014 "),JR=n(Cye,"A",{href:!0});var _nt=s(JR);veo=r(_nt,"MarianConfig"),_nt.forEach(t),Feo=r(Cye," (Marian model)"),Cye.forEach(t),Teo=i(L),Xf=n(L,"LI",{});var wye=s(Xf);Yne=n(wye,"STRONG",{});var bnt=s(Yne);Meo=r(bnt,"maskformer"),bnt.forEach(t),Eeo=r(wye," \u2014 "),YR=n(wye,"A",{href:!0});var vnt=s(YR);Ceo=r(vnt,"MaskFormerConfig"),vnt.forEach(t),weo=r(wye," (MaskFormer model)"),wye.forEach(t),Aeo=i(L),zf=n(L,"LI",{});var Aye=s(zf);Kne=n(Aye,"STRONG",{});var Fnt=s(Kne);Leo=r(Fnt,"mbart"),Fnt.forEach(t),yeo=r(Aye," \u2014 "),KR=n(Aye,"A",{href:!0});var Tnt=s(KR);xeo=r(Tnt,"MBartConfig"),Tnt.forEach(t),$eo=r(Aye," (mBART model)"),Aye.forEach(t),keo=i(L),Qf=n(L,"LI",{});var Lye=s(Qf);Zne=n(Lye,"STRONG",{});var Mnt=s(Zne);Seo=r(Mnt,"mctct"),Mnt.forEach(t),Reo=r(Lye," \u2014 "),ZR=n(Lye,"A",{href:!0});var Ent=s(ZR);Peo=r(Ent,"MCTCTConfig"),Ent.forEach(t),Beo=r(Lye," (M-CTC-T model)"),Lye.forEach(t),Ieo=i(L),Wf=n(L,"LI",{});var yye=s(Wf);ese=n(yye,"STRONG",{});var Cnt=s(ese);Neo=r(Cnt,"megatron-bert"),Cnt.forEach(t),qeo=r(yye," \u2014 "),eP=n(yye,"A",{href:!0});var wnt=s(eP);jeo=r(wnt,"MegatronBertConfig"),wnt.forEach(t),Deo=r(yye," (Megatron-BERT model)"),yye.forEach(t),Geo=i(L),Hf=n(L,"LI",{});var xye=s(Hf);ose=n(xye,"STRONG",{});var Ant=s(ose);Oeo=r(Ant,"mobilebert"),Ant.forEach(t),Veo=r(xye," \u2014 "),oP=n(xye,"A",{href:!0});var Lnt=s(oP);Xeo=r(Lnt,"MobileBertConfig"),Lnt.forEach(t),zeo=r(xye," (MobileBERT model)"),xye.forEach(t),Qeo=i(L),Uf=n(L,"LI",{});var $ye=s(Uf);rse=n($ye,"STRONG",{});var ynt=s(rse);Weo=r(ynt,"mobilevit"),ynt.forEach(t),Heo=r($ye," \u2014 "),rP=n($ye,"A",{href:!0});var xnt=s(rP);Ueo=r(xnt,"MobileViTConfig"),xnt.forEach(t),Jeo=r($ye," (MobileViT model)"),$ye.forEach(t),Yeo=i(L),Jf=n(L,"LI",{});var kye=s(Jf);tse=n(kye,"STRONG",{});var $nt=s(tse);Keo=r($nt,"mpnet"),$nt.forEach(t),Zeo=r(kye," \u2014 "),tP=n(kye,"A",{href:!0});var knt=s(tP);eoo=r(knt,"MPNetConfig"),knt.forEach(t),ooo=r(kye," (MPNet model)"),kye.forEach(t),roo=i(L),Yf=n(L,"LI",{});var Sye=s(Yf);ase=n(Sye,"STRONG",{});var Snt=s(ase);too=r(Snt,"mt5"),Snt.forEach(t),aoo=r(Sye," \u2014 "),aP=n(Sye,"A",{href:!0});var Rnt=s(aP);noo=r(Rnt,"MT5Config"),Rnt.forEach(t),soo=r(Sye," (MT5 model)"),Sye.forEach(t),loo=i(L),Kf=n(L,"LI",{});var Rye=s(Kf);nse=n(Rye,"STRONG",{});var Pnt=s(nse);ioo=r(Pnt,"mvp"),Pnt.forEach(t),doo=r(Rye," \u2014 "),nP=n(Rye,"A",{href:!0});var Bnt=s(nP);coo=r(Bnt,"MvpConfig"),Bnt.forEach(t),moo=r(Rye," (MVP model)"),Rye.forEach(t),foo=i(L),Zf=n(L,"LI",{});var Pye=s(Zf);sse=n(Pye,"STRONG",{});var Int=s(sse);goo=r(Int,"nezha"),Int.forEach(t),hoo=r(Pye," \u2014 "),sP=n(Pye,"A",{href:!0});var Nnt=s(sP);uoo=r(Nnt,"NezhaConfig"),Nnt.forEach(t),poo=r(Pye," (Nezha model)"),Pye.forEach(t),_oo=i(L),eg=n(L,"LI",{});var Bye=s(eg);lse=n(Bye,"STRONG",{});var qnt=s(lse);boo=r(qnt,"nystromformer"),qnt.forEach(t),voo=r(Bye," \u2014 "),lP=n(Bye,"A",{href:!0});var jnt=s(lP);Foo=r(jnt,"NystromformerConfig"),jnt.forEach(t),Too=r(Bye," (Nystr\xF6mformer model)"),Bye.forEach(t),Moo=i(L),og=n(L,"LI",{});var Iye=s(og);ise=n(Iye,"STRONG",{});var Dnt=s(ise);Eoo=r(Dnt,"openai-gpt"),Dnt.forEach(t),Coo=r(Iye," \u2014 "),iP=n(Iye,"A",{href:!0});var Gnt=s(iP);woo=r(Gnt,"OpenAIGPTConfig"),Gnt.forEach(t),Aoo=r(Iye," (OpenAI GPT model)"),Iye.forEach(t),Loo=i(L),rg=n(L,"LI",{});var Nye=s(rg);dse=n(Nye,"STRONG",{});var Ont=s(dse);yoo=r(Ont,"opt"),Ont.forEach(t),xoo=r(Nye," \u2014 "),dP=n(Nye,"A",{href:!0});var Vnt=s(dP);$oo=r(Vnt,"OPTConfig"),Vnt.forEach(t),koo=r(Nye," (OPT model)"),Nye.forEach(t),Soo=i(L),tg=n(L,"LI",{});var qye=s(tg);cse=n(qye,"STRONG",{});var Xnt=s(cse);Roo=r(Xnt,"pegasus"),Xnt.forEach(t),Poo=r(qye," \u2014 "),cP=n(qye,"A",{href:!0});var znt=s(cP);Boo=r(znt,"PegasusConfig"),znt.forEach(t),Ioo=r(qye," (Pegasus model)"),qye.forEach(t),Noo=i(L),ag=n(L,"LI",{});var jye=s(ag);mse=n(jye,"STRONG",{});var Qnt=s(mse);qoo=r(Qnt,"perceiver"),Qnt.forEach(t),joo=r(jye," \u2014 "),mP=n(jye,"A",{href:!0});var Wnt=s(mP);Doo=r(Wnt,"PerceiverConfig"),Wnt.forEach(t),Goo=r(jye," (Perceiver model)"),jye.forEach(t),Ooo=i(L),ng=n(L,"LI",{});var Dye=s(ng);fse=n(Dye,"STRONG",{});var Hnt=s(fse);Voo=r(Hnt,"plbart"),Hnt.forEach(t),Xoo=r(Dye," \u2014 "),fP=n(Dye,"A",{href:!0});var Unt=s(fP);zoo=r(Unt,"PLBartConfig"),Unt.forEach(t),Qoo=r(Dye," (PLBart model)"),Dye.forEach(t),Woo=i(L),sg=n(L,"LI",{});var Gye=s(sg);gse=n(Gye,"STRONG",{});var Jnt=s(gse);Hoo=r(Jnt,"poolformer"),Jnt.forEach(t),Uoo=r(Gye," \u2014 "),gP=n(Gye,"A",{href:!0});var Ynt=s(gP);Joo=r(Ynt,"PoolFormerConfig"),Ynt.forEach(t),Yoo=r(Gye," (PoolFormer model)"),Gye.forEach(t),Koo=i(L),lg=n(L,"LI",{});var Oye=s(lg);hse=n(Oye,"STRONG",{});var Knt=s(hse);Zoo=r(Knt,"prophetnet"),Knt.forEach(t),ero=r(Oye," \u2014 "),hP=n(Oye,"A",{href:!0});var Znt=s(hP);oro=r(Znt,"ProphetNetConfig"),Znt.forEach(t),rro=r(Oye," (ProphetNet model)"),Oye.forEach(t),tro=i(L),ig=n(L,"LI",{});var Vye=s(ig);use=n(Vye,"STRONG",{});var est=s(use);aro=r(est,"qdqbert"),est.forEach(t),nro=r(Vye," \u2014 "),uP=n(Vye,"A",{href:!0});var ost=s(uP);sro=r(ost,"QDQBertConfig"),ost.forEach(t),lro=r(Vye," (QDQBert model)"),Vye.forEach(t),iro=i(L),dg=n(L,"LI",{});var Xye=s(dg);pse=n(Xye,"STRONG",{});var rst=s(pse);dro=r(rst,"rag"),rst.forEach(t),cro=r(Xye," \u2014 "),pP=n(Xye,"A",{href:!0});var tst=s(pP);mro=r(tst,"RagConfig"),tst.forEach(t),fro=r(Xye," (RAG model)"),Xye.forEach(t),gro=i(L),cg=n(L,"LI",{});var zye=s(cg);_se=n(zye,"STRONG",{});var ast=s(_se);hro=r(ast,"realm"),ast.forEach(t),uro=r(zye," \u2014 "),_P=n(zye,"A",{href:!0});var nst=s(_P);pro=r(nst,"RealmConfig"),nst.forEach(t),_ro=r(zye," (REALM model)"),zye.forEach(t),bro=i(L),mg=n(L,"LI",{});var Qye=s(mg);bse=n(Qye,"STRONG",{});var sst=s(bse);vro=r(sst,"reformer"),sst.forEach(t),Fro=r(Qye," \u2014 "),bP=n(Qye,"A",{href:!0});var lst=s(bP);Tro=r(lst,"ReformerConfig"),lst.forEach(t),Mro=r(Qye," (Reformer model)"),Qye.forEach(t),Ero=i(L),fg=n(L,"LI",{});var Wye=s(fg);vse=n(Wye,"STRONG",{});var ist=s(vse);Cro=r(ist,"regnet"),ist.forEach(t),wro=r(Wye," \u2014 "),vP=n(Wye,"A",{href:!0});var dst=s(vP);Aro=r(dst,"RegNetConfig"),dst.forEach(t),Lro=r(Wye," (RegNet model)"),Wye.forEach(t),yro=i(L),gg=n(L,"LI",{});var Hye=s(gg);Fse=n(Hye,"STRONG",{});var cst=s(Fse);xro=r(cst,"rembert"),cst.forEach(t),$ro=r(Hye," \u2014 "),FP=n(Hye,"A",{href:!0});var mst=s(FP);kro=r(mst,"RemBertConfig"),mst.forEach(t),Sro=r(Hye," (RemBERT model)"),Hye.forEach(t),Rro=i(L),hg=n(L,"LI",{});var Uye=s(hg);Tse=n(Uye,"STRONG",{});var fst=s(Tse);Pro=r(fst,"resnet"),fst.forEach(t),Bro=r(Uye," \u2014 "),TP=n(Uye,"A",{href:!0});var gst=s(TP);Iro=r(gst,"ResNetConfig"),gst.forEach(t),Nro=r(Uye," (ResNet model)"),Uye.forEach(t),qro=i(L),ug=n(L,"LI",{});var Jye=s(ug);Mse=n(Jye,"STRONG",{});var hst=s(Mse);jro=r(hst,"retribert"),hst.forEach(t),Dro=r(Jye," \u2014 "),MP=n(Jye,"A",{href:!0});var ust=s(MP);Gro=r(ust,"RetriBertConfig"),ust.forEach(t),Oro=r(Jye," (RetriBERT model)"),Jye.forEach(t),Vro=i(L),pg=n(L,"LI",{});var Yye=s(pg);Ese=n(Yye,"STRONG",{});var pst=s(Ese);Xro=r(pst,"roberta"),pst.forEach(t),zro=r(Yye," \u2014 "),EP=n(Yye,"A",{href:!0});var _st=s(EP);Qro=r(_st,"RobertaConfig"),_st.forEach(t),Wro=r(Yye," (RoBERTa model)"),Yye.forEach(t),Hro=i(L),_g=n(L,"LI",{});var Kye=s(_g);Cse=n(Kye,"STRONG",{});var bst=s(Cse);Uro=r(bst,"roformer"),bst.forEach(t),Jro=r(Kye," \u2014 "),CP=n(Kye,"A",{href:!0});var vst=s(CP);Yro=r(vst,"RoFormerConfig"),vst.forEach(t),Kro=r(Kye," (RoFormer model)"),Kye.forEach(t),Zro=i(L),bg=n(L,"LI",{});var Zye=s(bg);wse=n(Zye,"STRONG",{});var Fst=s(wse);eto=r(Fst,"segformer"),Fst.forEach(t),oto=r(Zye," \u2014 "),wP=n(Zye,"A",{href:!0});var Tst=s(wP);rto=r(Tst,"SegformerConfig"),Tst.forEach(t),tto=r(Zye," (SegFormer model)"),Zye.forEach(t),ato=i(L),vg=n(L,"LI",{});var e8e=s(vg);Ase=n(e8e,"STRONG",{});var Mst=s(Ase);nto=r(Mst,"sew"),Mst.forEach(t),sto=r(e8e," \u2014 "),AP=n(e8e,"A",{href:!0});var Est=s(AP);lto=r(Est,"SEWConfig"),Est.forEach(t),ito=r(e8e," (SEW model)"),e8e.forEach(t),dto=i(L),Fg=n(L,"LI",{});var o8e=s(Fg);Lse=n(o8e,"STRONG",{});var Cst=s(Lse);cto=r(Cst,"sew-d"),Cst.forEach(t),mto=r(o8e," \u2014 "),LP=n(o8e,"A",{href:!0});var wst=s(LP);fto=r(wst,"SEWDConfig"),wst.forEach(t),gto=r(o8e," (SEW-D model)"),o8e.forEach(t),hto=i(L),Tg=n(L,"LI",{});var r8e=s(Tg);yse=n(r8e,"STRONG",{});var Ast=s(yse);uto=r(Ast,"speech-encoder-decoder"),Ast.forEach(t),pto=r(r8e," \u2014 "),yP=n(r8e,"A",{href:!0});var Lst=s(yP);_to=r(Lst,"SpeechEncoderDecoderConfig"),Lst.forEach(t),bto=r(r8e," (Speech Encoder decoder model)"),r8e.forEach(t),vto=i(L),Mg=n(L,"LI",{});var t8e=s(Mg);xse=n(t8e,"STRONG",{});var yst=s(xse);Fto=r(yst,"speech_to_text"),yst.forEach(t),Tto=r(t8e," \u2014 "),xP=n(t8e,"A",{href:!0});var xst=s(xP);Mto=r(xst,"Speech2TextConfig"),xst.forEach(t),Eto=r(t8e," (Speech2Text model)"),t8e.forEach(t),Cto=i(L),Eg=n(L,"LI",{});var a8e=s(Eg);$se=n(a8e,"STRONG",{});var $st=s($se);wto=r($st,"speech_to_text_2"),$st.forEach(t),Ato=r(a8e," \u2014 "),$P=n(a8e,"A",{href:!0});var kst=s($P);Lto=r(kst,"Speech2Text2Config"),kst.forEach(t),yto=r(a8e," (Speech2Text2 model)"),a8e.forEach(t),xto=i(L),Cg=n(L,"LI",{});var n8e=s(Cg);kse=n(n8e,"STRONG",{});var Sst=s(kse);$to=r(Sst,"splinter"),Sst.forEach(t),kto=r(n8e," \u2014 "),kP=n(n8e,"A",{href:!0});var Rst=s(kP);Sto=r(Rst,"SplinterConfig"),Rst.forEach(t),Rto=r(n8e," (Splinter model)"),n8e.forEach(t),Pto=i(L),wg=n(L,"LI",{});var s8e=s(wg);Sse=n(s8e,"STRONG",{});var Pst=s(Sse);Bto=r(Pst,"squeezebert"),Pst.forEach(t),Ito=r(s8e," \u2014 "),SP=n(s8e,"A",{href:!0});var Bst=s(SP);Nto=r(Bst,"SqueezeBertConfig"),Bst.forEach(t),qto=r(s8e," (SqueezeBERT model)"),s8e.forEach(t),jto=i(L),Ag=n(L,"LI",{});var l8e=s(Ag);Rse=n(l8e,"STRONG",{});var Ist=s(Rse);Dto=r(Ist,"swin"),Ist.forEach(t),Gto=r(l8e," \u2014 "),RP=n(l8e,"A",{href:!0});var Nst=s(RP);Oto=r(Nst,"SwinConfig"),Nst.forEach(t),Vto=r(l8e," (Swin Transformer model)"),l8e.forEach(t),Xto=i(L),Lg=n(L,"LI",{});var i8e=s(Lg);Pse=n(i8e,"STRONG",{});var qst=s(Pse);zto=r(qst,"t5"),qst.forEach(t),Qto=r(i8e," \u2014 "),PP=n(i8e,"A",{href:!0});var jst=s(PP);Wto=r(jst,"T5Config"),jst.forEach(t),Hto=r(i8e," (T5 model)"),i8e.forEach(t),Uto=i(L),yg=n(L,"LI",{});var d8e=s(yg);Bse=n(d8e,"STRONG",{});var Dst=s(Bse);Jto=r(Dst,"tapas"),Dst.forEach(t),Yto=r(d8e," \u2014 "),BP=n(d8e,"A",{href:!0});var Gst=s(BP);Kto=r(Gst,"TapasConfig"),Gst.forEach(t),Zto=r(d8e," (TAPAS model)"),d8e.forEach(t),eao=i(L),xg=n(L,"LI",{});var c8e=s(xg);Ise=n(c8e,"STRONG",{});var Ost=s(Ise);oao=r(Ost,"trajectory_transformer"),Ost.forEach(t),rao=r(c8e," \u2014 "),IP=n(c8e,"A",{href:!0});var Vst=s(IP);tao=r(Vst,"TrajectoryTransformerConfig"),Vst.forEach(t),aao=r(c8e," (Trajectory Transformer model)"),c8e.forEach(t),nao=i(L),$g=n(L,"LI",{});var m8e=s($g);Nse=n(m8e,"STRONG",{});var Xst=s(Nse);sao=r(Xst,"transfo-xl"),Xst.forEach(t),lao=r(m8e," \u2014 "),NP=n(m8e,"A",{href:!0});var zst=s(NP);iao=r(zst,"TransfoXLConfig"),zst.forEach(t),dao=r(m8e," (Transformer-XL model)"),m8e.forEach(t),cao=i(L),kg=n(L,"LI",{});var f8e=s(kg);qse=n(f8e,"STRONG",{});var Qst=s(qse);mao=r(Qst,"trocr"),Qst.forEach(t),fao=r(f8e," \u2014 "),qP=n(f8e,"A",{href:!0});var Wst=s(qP);gao=r(Wst,"TrOCRConfig"),Wst.forEach(t),hao=r(f8e," (TrOCR model)"),f8e.forEach(t),uao=i(L),Sg=n(L,"LI",{});var g8e=s(Sg);jse=n(g8e,"STRONG",{});var Hst=s(jse);pao=r(Hst,"unispeech"),Hst.forEach(t),_ao=r(g8e," \u2014 "),jP=n(g8e,"A",{href:!0});var Ust=s(jP);bao=r(Ust,"UniSpeechConfig"),Ust.forEach(t),vao=r(g8e," (UniSpeech model)"),g8e.forEach(t),Fao=i(L),Rg=n(L,"LI",{});var h8e=s(Rg);Dse=n(h8e,"STRONG",{});var Jst=s(Dse);Tao=r(Jst,"unispeech-sat"),Jst.forEach(t),Mao=r(h8e," \u2014 "),DP=n(h8e,"A",{href:!0});var Yst=s(DP);Eao=r(Yst,"UniSpeechSatConfig"),Yst.forEach(t),Cao=r(h8e," (UniSpeechSat model)"),h8e.forEach(t),wao=i(L),Pg=n(L,"LI",{});var u8e=s(Pg);Gse=n(u8e,"STRONG",{});var Kst=s(Gse);Aao=r(Kst,"van"),Kst.forEach(t),Lao=r(u8e," \u2014 "),GP=n(u8e,"A",{href:!0});var Zst=s(GP);yao=r(Zst,"VanConfig"),Zst.forEach(t),xao=r(u8e," (VAN model)"),u8e.forEach(t),$ao=i(L),Bg=n(L,"LI",{});var p8e=s(Bg);Ose=n(p8e,"STRONG",{});var elt=s(Ose);kao=r(elt,"vilt"),elt.forEach(t),Sao=r(p8e," \u2014 "),OP=n(p8e,"A",{href:!0});var olt=s(OP);Rao=r(olt,"ViltConfig"),olt.forEach(t),Pao=r(p8e," (ViLT model)"),p8e.forEach(t),Bao=i(L),Ig=n(L,"LI",{});var _8e=s(Ig);Vse=n(_8e,"STRONG",{});var rlt=s(Vse);Iao=r(rlt,"vision-encoder-decoder"),rlt.forEach(t),Nao=r(_8e," \u2014 "),VP=n(_8e,"A",{href:!0});var tlt=s(VP);qao=r(tlt,"VisionEncoderDecoderConfig"),tlt.forEach(t),jao=r(_8e," (Vision Encoder decoder model)"),_8e.forEach(t),Dao=i(L),Ng=n(L,"LI",{});var b8e=s(Ng);Xse=n(b8e,"STRONG",{});var alt=s(Xse);Gao=r(alt,"vision-text-dual-encoder"),alt.forEach(t),Oao=r(b8e," \u2014 "),XP=n(b8e,"A",{href:!0});var nlt=s(XP);Vao=r(nlt,"VisionTextDualEncoderConfig"),nlt.forEach(t),Xao=r(b8e," (VisionTextDualEncoder model)"),b8e.forEach(t),zao=i(L),qg=n(L,"LI",{});var v8e=s(qg);zse=n(v8e,"STRONG",{});var slt=s(zse);Qao=r(slt,"visual_bert"),slt.forEach(t),Wao=r(v8e," \u2014 "),zP=n(v8e,"A",{href:!0});var llt=s(zP);Hao=r(llt,"VisualBertConfig"),llt.forEach(t),Uao=r(v8e," (VisualBERT model)"),v8e.forEach(t),Jao=i(L),jg=n(L,"LI",{});var F8e=s(jg);Qse=n(F8e,"STRONG",{});var ilt=s(Qse);Yao=r(ilt,"vit"),ilt.forEach(t),Kao=r(F8e," \u2014 "),QP=n(F8e,"A",{href:!0});var dlt=s(QP);Zao=r(dlt,"ViTConfig"),dlt.forEach(t),eno=r(F8e," (ViT model)"),F8e.forEach(t),ono=i(L),Dg=n(L,"LI",{});var T8e=s(Dg);Wse=n(T8e,"STRONG",{});var clt=s(Wse);rno=r(clt,"vit_mae"),clt.forEach(t),tno=r(T8e," \u2014 "),WP=n(T8e,"A",{href:!0});var mlt=s(WP);ano=r(mlt,"ViTMAEConfig"),mlt.forEach(t),nno=r(T8e," (ViTMAE model)"),T8e.forEach(t),sno=i(L),Gg=n(L,"LI",{});var M8e=s(Gg);Hse=n(M8e,"STRONG",{});var flt=s(Hse);lno=r(flt,"wav2vec2"),flt.forEach(t),ino=r(M8e," \u2014 "),HP=n(M8e,"A",{href:!0});var glt=s(HP);dno=r(glt,"Wav2Vec2Config"),glt.forEach(t),cno=r(M8e," (Wav2Vec2 model)"),M8e.forEach(t),mno=i(L),Og=n(L,"LI",{});var E8e=s(Og);Use=n(E8e,"STRONG",{});var hlt=s(Use);fno=r(hlt,"wav2vec2-conformer"),hlt.forEach(t),gno=r(E8e," \u2014 "),UP=n(E8e,"A",{href:!0});var ult=s(UP);hno=r(ult,"Wav2Vec2ConformerConfig"),ult.forEach(t),uno=r(E8e," (Wav2Vec2-Conformer model)"),E8e.forEach(t),pno=i(L),Vg=n(L,"LI",{});var C8e=s(Vg);Jse=n(C8e,"STRONG",{});var plt=s(Jse);_no=r(plt,"wavlm"),plt.forEach(t),bno=r(C8e," \u2014 "),JP=n(C8e,"A",{href:!0});var _lt=s(JP);vno=r(_lt,"WavLMConfig"),_lt.forEach(t),Fno=r(C8e," (WavLM model)"),C8e.forEach(t),Tno=i(L),Xg=n(L,"LI",{});var w8e=s(Xg);Yse=n(w8e,"STRONG",{});var blt=s(Yse);Mno=r(blt,"xglm"),blt.forEach(t),Eno=r(w8e," \u2014 "),YP=n(w8e,"A",{href:!0});var vlt=s(YP);Cno=r(vlt,"XGLMConfig"),vlt.forEach(t),wno=r(w8e," (XGLM model)"),w8e.forEach(t),Ano=i(L),zg=n(L,"LI",{});var A8e=s(zg);Kse=n(A8e,"STRONG",{});var Flt=s(Kse);Lno=r(Flt,"xlm"),Flt.forEach(t),yno=r(A8e," \u2014 "),KP=n(A8e,"A",{href:!0});var Tlt=s(KP);xno=r(Tlt,"XLMConfig"),Tlt.forEach(t),$no=r(A8e," (XLM model)"),A8e.forEach(t),kno=i(L),Qg=n(L,"LI",{});var L8e=s(Qg);Zse=n(L8e,"STRONG",{});var Mlt=s(Zse);Sno=r(Mlt,"xlm-prophetnet"),Mlt.forEach(t),Rno=r(L8e," \u2014 "),ZP=n(L8e,"A",{href:!0});var Elt=s(ZP);Pno=r(Elt,"XLMProphetNetConfig"),Elt.forEach(t),Bno=r(L8e," (XLM-ProphetNet model)"),L8e.forEach(t),Ino=i(L),Wg=n(L,"LI",{});var y8e=s(Wg);ele=n(y8e,"STRONG",{});var Clt=s(ele);Nno=r(Clt,"xlm-roberta"),Clt.forEach(t),qno=r(y8e," \u2014 "),eB=n(y8e,"A",{href:!0});var wlt=s(eB);jno=r(wlt,"XLMRobertaConfig"),wlt.forEach(t),Dno=r(y8e," (XLM-RoBERTa model)"),y8e.forEach(t),Gno=i(L),Hg=n(L,"LI",{});var x8e=s(Hg);ole=n(x8e,"STRONG",{});var Alt=s(ole);Ono=r(Alt,"xlm-roberta-xl"),Alt.forEach(t),Vno=r(x8e," \u2014 "),oB=n(x8e,"A",{href:!0});var Llt=s(oB);Xno=r(Llt,"XLMRobertaXLConfig"),Llt.forEach(t),zno=r(x8e," (XLM-RoBERTa-XL model)"),x8e.forEach(t),Qno=i(L),Ug=n(L,"LI",{});var $8e=s(Ug);rle=n($8e,"STRONG",{});var ylt=s(rle);Wno=r(ylt,"xlnet"),ylt.forEach(t),Hno=r($8e," \u2014 "),rB=n($8e,"A",{href:!0});var xlt=s(rB);Uno=r(xlt,"XLNetConfig"),xlt.forEach(t),Jno=r($8e," (XLNet model)"),$8e.forEach(t),Yno=i(L),Jg=n(L,"LI",{});var k8e=s(Jg);tle=n(k8e,"STRONG",{});var $lt=s(tle);Kno=r($lt,"yolos"),$lt.forEach(t),Zno=r(k8e," \u2014 "),tB=n(k8e,"A",{href:!0});var klt=s(tB);eso=r(klt,"YolosConfig"),klt.forEach(t),oso=r(k8e," (YOLOS model)"),k8e.forEach(t),rso=i(L),Yg=n(L,"LI",{});var S8e=s(Yg);ale=n(S8e,"STRONG",{});var Slt=s(ale);tso=r(Slt,"yoso"),Slt.forEach(t),aso=r(S8e," \u2014 "),aB=n(S8e,"A",{href:!0});var Rlt=s(aB);nso=r(Rlt,"YosoConfig"),Rlt.forEach(t),sso=r(S8e," (YOSO model)"),S8e.forEach(t),L.forEach(t),lso=i(st),T(Kg.$$.fragment,st),st.forEach(t),iso=i(nt),Zg=n(nt,"DIV",{class:!0});var yQe=s(Zg);T(_y.$$.fragment,yQe),dso=i(yQe),nle=n(yQe,"P",{});var Plt=s(nle);cso=r(Plt,"Register a new configuration for this class."),Plt.forEach(t),yQe.forEach(t),nt.forEach(t),xXe=i(m),qi=n(m,"H2",{class:!0});var xQe=s(qi);eh=n(xQe,"A",{id:!0,class:!0,href:!0});var Blt=s(eh);sle=n(Blt,"SPAN",{});var Ilt=s(sle);T(by.$$.fragment,Ilt),Ilt.forEach(t),Blt.forEach(t),mso=i(xQe),lle=n(xQe,"SPAN",{});var Nlt=s(lle);fso=r(Nlt,"AutoTokenizer"),Nlt.forEach(t),xQe.forEach(t),$Xe=i(m),yo=n(m,"DIV",{class:!0});var Zs=s(yo);T(vy.$$.fragment,Zs),gso=i(Zs),Fy=n(Zs,"P",{});var $Qe=s(Fy);hso=r($Qe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),nB=n($Qe,"A",{href:!0});var qlt=s(nB);uso=r(qlt,"AutoTokenizer.from_pretrained()"),qlt.forEach(t),pso=r($Qe," class method."),$Qe.forEach(t),_so=i(Zs),Ty=n(Zs,"P",{});var kQe=s(Ty);bso=r(kQe,"This class cannot be instantiated directly using "),ile=n(kQe,"CODE",{});var jlt=s(ile);vso=r(jlt,"__init__()"),jlt.forEach(t),Fso=r(kQe," (throws an error)."),kQe.forEach(t),Tso=i(Zs),xr=n(Zs,"DIV",{class:!0});var el=s(xr);T(My.$$.fragment,el),Mso=i(el),dle=n(el,"P",{});var Dlt=s(dle);Eso=r(Dlt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Dlt.forEach(t),Cso=i(el),Pa=n(el,"P",{});var f7=s(Pa);wso=r(f7,"The tokenizer class to instantiate is selected based on the "),cle=n(f7,"CODE",{});var Glt=s(cle);Aso=r(Glt,"model_type"),Glt.forEach(t),Lso=r(f7,` property of the config object (either
passed as an argument or loaded from `),mle=n(f7,"CODE",{});var Olt=s(mle);yso=r(Olt,"pretrained_model_name_or_path"),Olt.forEach(t),xso=r(f7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fle=n(f7,"CODE",{});var Vlt=s(fle);$so=r(Vlt,"pretrained_model_name_or_path"),Vlt.forEach(t),kso=r(f7,":"),f7.forEach(t),Sso=i(el),k=n(el,"UL",{});var S=s(k);jn=n(S,"LI",{});var yk=s(jn);gle=n(yk,"STRONG",{});var Xlt=s(gle);Rso=r(Xlt,"albert"),Xlt.forEach(t),Pso=r(yk," \u2014 "),sB=n(yk,"A",{href:!0});var zlt=s(sB);Bso=r(zlt,"AlbertTokenizer"),zlt.forEach(t),Iso=r(yk," or "),lB=n(yk,"A",{href:!0});var Qlt=s(lB);Nso=r(Qlt,"AlbertTokenizerFast"),Qlt.forEach(t),qso=r(yk," (ALBERT model)"),yk.forEach(t),jso=i(S),Dn=n(S,"LI",{});var xk=s(Dn);hle=n(xk,"STRONG",{});var Wlt=s(hle);Dso=r(Wlt,"bart"),Wlt.forEach(t),Gso=r(xk," \u2014 "),iB=n(xk,"A",{href:!0});var Hlt=s(iB);Oso=r(Hlt,"BartTokenizer"),Hlt.forEach(t),Vso=r(xk," or "),dB=n(xk,"A",{href:!0});var Ult=s(dB);Xso=r(Ult,"BartTokenizerFast"),Ult.forEach(t),zso=r(xk," (BART model)"),xk.forEach(t),Qso=i(S),Gn=n(S,"LI",{});var $k=s(Gn);ule=n($k,"STRONG",{});var Jlt=s(ule);Wso=r(Jlt,"barthez"),Jlt.forEach(t),Hso=r($k," \u2014 "),cB=n($k,"A",{href:!0});var Ylt=s(cB);Uso=r(Ylt,"BarthezTokenizer"),Ylt.forEach(t),Jso=r($k," or "),mB=n($k,"A",{href:!0});var Klt=s(mB);Yso=r(Klt,"BarthezTokenizerFast"),Klt.forEach(t),Kso=r($k," (BARThez model)"),$k.forEach(t),Zso=i(S),oh=n(S,"LI",{});var R8e=s(oh);ple=n(R8e,"STRONG",{});var Zlt=s(ple);elo=r(Zlt,"bartpho"),Zlt.forEach(t),olo=r(R8e," \u2014 "),fB=n(R8e,"A",{href:!0});var eit=s(fB);rlo=r(eit,"BartphoTokenizer"),eit.forEach(t),tlo=r(R8e," (BARTpho model)"),R8e.forEach(t),alo=i(S),On=n(S,"LI",{});var kk=s(On);_le=n(kk,"STRONG",{});var oit=s(_le);nlo=r(oit,"bert"),oit.forEach(t),slo=r(kk," \u2014 "),gB=n(kk,"A",{href:!0});var rit=s(gB);llo=r(rit,"BertTokenizer"),rit.forEach(t),ilo=r(kk," or "),hB=n(kk,"A",{href:!0});var tit=s(hB);dlo=r(tit,"BertTokenizerFast"),tit.forEach(t),clo=r(kk," (BERT model)"),kk.forEach(t),mlo=i(S),rh=n(S,"LI",{});var P8e=s(rh);ble=n(P8e,"STRONG",{});var ait=s(ble);flo=r(ait,"bert-generation"),ait.forEach(t),glo=r(P8e," \u2014 "),uB=n(P8e,"A",{href:!0});var nit=s(uB);hlo=r(nit,"BertGenerationTokenizer"),nit.forEach(t),ulo=r(P8e," (Bert Generation model)"),P8e.forEach(t),plo=i(S),th=n(S,"LI",{});var B8e=s(th);vle=n(B8e,"STRONG",{});var sit=s(vle);_lo=r(sit,"bert-japanese"),sit.forEach(t),blo=r(B8e," \u2014 "),pB=n(B8e,"A",{href:!0});var lit=s(pB);vlo=r(lit,"BertJapaneseTokenizer"),lit.forEach(t),Flo=r(B8e," (BertJapanese model)"),B8e.forEach(t),Tlo=i(S),ah=n(S,"LI",{});var I8e=s(ah);Fle=n(I8e,"STRONG",{});var iit=s(Fle);Mlo=r(iit,"bertweet"),iit.forEach(t),Elo=r(I8e," \u2014 "),_B=n(I8e,"A",{href:!0});var dit=s(_B);Clo=r(dit,"BertweetTokenizer"),dit.forEach(t),wlo=r(I8e," (BERTweet model)"),I8e.forEach(t),Alo=i(S),Vn=n(S,"LI",{});var Sk=s(Vn);Tle=n(Sk,"STRONG",{});var cit=s(Tle);Llo=r(cit,"big_bird"),cit.forEach(t),ylo=r(Sk," \u2014 "),bB=n(Sk,"A",{href:!0});var mit=s(bB);xlo=r(mit,"BigBirdTokenizer"),mit.forEach(t),$lo=r(Sk," or "),vB=n(Sk,"A",{href:!0});var fit=s(vB);klo=r(fit,"BigBirdTokenizerFast"),fit.forEach(t),Slo=r(Sk," (BigBird model)"),Sk.forEach(t),Rlo=i(S),Xn=n(S,"LI",{});var Rk=s(Xn);Mle=n(Rk,"STRONG",{});var git=s(Mle);Plo=r(git,"bigbird_pegasus"),git.forEach(t),Blo=r(Rk," \u2014 "),FB=n(Rk,"A",{href:!0});var hit=s(FB);Ilo=r(hit,"PegasusTokenizer"),hit.forEach(t),Nlo=r(Rk," or "),TB=n(Rk,"A",{href:!0});var uit=s(TB);qlo=r(uit,"PegasusTokenizerFast"),uit.forEach(t),jlo=r(Rk," (BigBird-Pegasus model)"),Rk.forEach(t),Dlo=i(S),zn=n(S,"LI",{});var Pk=s(zn);Ele=n(Pk,"STRONG",{});var pit=s(Ele);Glo=r(pit,"blenderbot"),pit.forEach(t),Olo=r(Pk," \u2014 "),MB=n(Pk,"A",{href:!0});var _it=s(MB);Vlo=r(_it,"BlenderbotTokenizer"),_it.forEach(t),Xlo=r(Pk," or "),EB=n(Pk,"A",{href:!0});var bit=s(EB);zlo=r(bit,"BlenderbotTokenizerFast"),bit.forEach(t),Qlo=r(Pk," (Blenderbot model)"),Pk.forEach(t),Wlo=i(S),nh=n(S,"LI",{});var N8e=s(nh);Cle=n(N8e,"STRONG",{});var vit=s(Cle);Hlo=r(vit,"blenderbot-small"),vit.forEach(t),Ulo=r(N8e," \u2014 "),CB=n(N8e,"A",{href:!0});var Fit=s(CB);Jlo=r(Fit,"BlenderbotSmallTokenizer"),Fit.forEach(t),Ylo=r(N8e," (BlenderbotSmall model)"),N8e.forEach(t),Klo=i(S),sh=n(S,"LI",{});var q8e=s(sh);wle=n(q8e,"STRONG",{});var Tit=s(wle);Zlo=r(Tit,"bloom"),Tit.forEach(t),eio=r(q8e," \u2014 "),wB=n(q8e,"A",{href:!0});var Mit=s(wB);oio=r(Mit,"BloomTokenizerFast"),Mit.forEach(t),rio=r(q8e," (BLOOM model)"),q8e.forEach(t),tio=i(S),lh=n(S,"LI",{});var j8e=s(lh);Ale=n(j8e,"STRONG",{});var Eit=s(Ale);aio=r(Eit,"byt5"),Eit.forEach(t),nio=r(j8e," \u2014 "),AB=n(j8e,"A",{href:!0});var Cit=s(AB);sio=r(Cit,"ByT5Tokenizer"),Cit.forEach(t),lio=r(j8e," (ByT5 model)"),j8e.forEach(t),iio=i(S),Qn=n(S,"LI",{});var Bk=s(Qn);Lle=n(Bk,"STRONG",{});var wit=s(Lle);dio=r(wit,"camembert"),wit.forEach(t),cio=r(Bk," \u2014 "),LB=n(Bk,"A",{href:!0});var Ait=s(LB);mio=r(Ait,"CamembertTokenizer"),Ait.forEach(t),fio=r(Bk," or "),yB=n(Bk,"A",{href:!0});var Lit=s(yB);gio=r(Lit,"CamembertTokenizerFast"),Lit.forEach(t),hio=r(Bk," (CamemBERT model)"),Bk.forEach(t),uio=i(S),ih=n(S,"LI",{});var D8e=s(ih);yle=n(D8e,"STRONG",{});var yit=s(yle);pio=r(yit,"canine"),yit.forEach(t),_io=r(D8e," \u2014 "),xB=n(D8e,"A",{href:!0});var xit=s(xB);bio=r(xit,"CanineTokenizer"),xit.forEach(t),vio=r(D8e," (CANINE model)"),D8e.forEach(t),Fio=i(S),Wn=n(S,"LI",{});var Ik=s(Wn);xle=n(Ik,"STRONG",{});var $it=s(xle);Tio=r($it,"clip"),$it.forEach(t),Mio=r(Ik," \u2014 "),$B=n(Ik,"A",{href:!0});var kit=s($B);Eio=r(kit,"CLIPTokenizer"),kit.forEach(t),Cio=r(Ik," or "),kB=n(Ik,"A",{href:!0});var Sit=s(kB);wio=r(Sit,"CLIPTokenizerFast"),Sit.forEach(t),Aio=r(Ik," (CLIP model)"),Ik.forEach(t),Lio=i(S),Hn=n(S,"LI",{});var Nk=s(Hn);$le=n(Nk,"STRONG",{});var Rit=s($le);yio=r(Rit,"codegen"),Rit.forEach(t),xio=r(Nk," \u2014 "),SB=n(Nk,"A",{href:!0});var Pit=s(SB);$io=r(Pit,"CodeGenTokenizer"),Pit.forEach(t),kio=r(Nk," or "),RB=n(Nk,"A",{href:!0});var Bit=s(RB);Sio=r(Bit,"CodeGenTokenizerFast"),Bit.forEach(t),Rio=r(Nk," (CodeGen model)"),Nk.forEach(t),Pio=i(S),Un=n(S,"LI",{});var qk=s(Un);kle=n(qk,"STRONG",{});var Iit=s(kle);Bio=r(Iit,"convbert"),Iit.forEach(t),Iio=r(qk," \u2014 "),PB=n(qk,"A",{href:!0});var Nit=s(PB);Nio=r(Nit,"ConvBertTokenizer"),Nit.forEach(t),qio=r(qk," or "),BB=n(qk,"A",{href:!0});var qit=s(BB);jio=r(qit,"ConvBertTokenizerFast"),qit.forEach(t),Dio=r(qk," (ConvBERT model)"),qk.forEach(t),Gio=i(S),Jn=n(S,"LI",{});var jk=s(Jn);Sle=n(jk,"STRONG",{});var jit=s(Sle);Oio=r(jit,"cpm"),jit.forEach(t),Vio=r(jk," \u2014 "),IB=n(jk,"A",{href:!0});var Dit=s(IB);Xio=r(Dit,"CpmTokenizer"),Dit.forEach(t),zio=r(jk," or "),NB=n(jk,"A",{href:!0});var Git=s(NB);Qio=r(Git,"CpmTokenizerFast"),Git.forEach(t),Wio=r(jk," (CPM model)"),jk.forEach(t),Hio=i(S),dh=n(S,"LI",{});var G8e=s(dh);Rle=n(G8e,"STRONG",{});var Oit=s(Rle);Uio=r(Oit,"ctrl"),Oit.forEach(t),Jio=r(G8e," \u2014 "),qB=n(G8e,"A",{href:!0});var Vit=s(qB);Yio=r(Vit,"CTRLTokenizer"),Vit.forEach(t),Kio=r(G8e," (CTRL model)"),G8e.forEach(t),Zio=i(S),Yn=n(S,"LI",{});var Dk=s(Yn);Ple=n(Dk,"STRONG",{});var Xit=s(Ple);edo=r(Xit,"data2vec-text"),Xit.forEach(t),odo=r(Dk," \u2014 "),jB=n(Dk,"A",{href:!0});var zit=s(jB);rdo=r(zit,"RobertaTokenizer"),zit.forEach(t),tdo=r(Dk," or "),DB=n(Dk,"A",{href:!0});var Qit=s(DB);ado=r(Qit,"RobertaTokenizerFast"),Qit.forEach(t),ndo=r(Dk," (Data2VecText model)"),Dk.forEach(t),sdo=i(S),Kn=n(S,"LI",{});var Gk=s(Kn);Ble=n(Gk,"STRONG",{});var Wit=s(Ble);ldo=r(Wit,"deberta"),Wit.forEach(t),ido=r(Gk," \u2014 "),GB=n(Gk,"A",{href:!0});var Hit=s(GB);ddo=r(Hit,"DebertaTokenizer"),Hit.forEach(t),cdo=r(Gk," or "),OB=n(Gk,"A",{href:!0});var Uit=s(OB);mdo=r(Uit,"DebertaTokenizerFast"),Uit.forEach(t),fdo=r(Gk," (DeBERTa model)"),Gk.forEach(t),gdo=i(S),Zn=n(S,"LI",{});var Ok=s(Zn);Ile=n(Ok,"STRONG",{});var Jit=s(Ile);hdo=r(Jit,"deberta-v2"),Jit.forEach(t),udo=r(Ok," \u2014 "),VB=n(Ok,"A",{href:!0});var Yit=s(VB);pdo=r(Yit,"DebertaV2Tokenizer"),Yit.forEach(t),_do=r(Ok," or "),XB=n(Ok,"A",{href:!0});var Kit=s(XB);bdo=r(Kit,"DebertaV2TokenizerFast"),Kit.forEach(t),vdo=r(Ok," (DeBERTa-v2 model)"),Ok.forEach(t),Fdo=i(S),es=n(S,"LI",{});var Vk=s(es);Nle=n(Vk,"STRONG",{});var Zit=s(Nle);Tdo=r(Zit,"distilbert"),Zit.forEach(t),Mdo=r(Vk," \u2014 "),zB=n(Vk,"A",{href:!0});var edt=s(zB);Edo=r(edt,"DistilBertTokenizer"),edt.forEach(t),Cdo=r(Vk," or "),QB=n(Vk,"A",{href:!0});var odt=s(QB);wdo=r(odt,"DistilBertTokenizerFast"),odt.forEach(t),Ado=r(Vk," (DistilBERT model)"),Vk.forEach(t),Ldo=i(S),os=n(S,"LI",{});var Xk=s(os);qle=n(Xk,"STRONG",{});var rdt=s(qle);ydo=r(rdt,"dpr"),rdt.forEach(t),xdo=r(Xk," \u2014 "),WB=n(Xk,"A",{href:!0});var tdt=s(WB);$do=r(tdt,"DPRQuestionEncoderTokenizer"),tdt.forEach(t),kdo=r(Xk," or "),HB=n(Xk,"A",{href:!0});var adt=s(HB);Sdo=r(adt,"DPRQuestionEncoderTokenizerFast"),adt.forEach(t),Rdo=r(Xk," (DPR model)"),Xk.forEach(t),Pdo=i(S),rs=n(S,"LI",{});var zk=s(rs);jle=n(zk,"STRONG",{});var ndt=s(jle);Bdo=r(ndt,"electra"),ndt.forEach(t),Ido=r(zk," \u2014 "),UB=n(zk,"A",{href:!0});var sdt=s(UB);Ndo=r(sdt,"ElectraTokenizer"),sdt.forEach(t),qdo=r(zk," or "),JB=n(zk,"A",{href:!0});var ldt=s(JB);jdo=r(ldt,"ElectraTokenizerFast"),ldt.forEach(t),Ddo=r(zk," (ELECTRA model)"),zk.forEach(t),Gdo=i(S),ch=n(S,"LI",{});var O8e=s(ch);Dle=n(O8e,"STRONG",{});var idt=s(Dle);Odo=r(idt,"flaubert"),idt.forEach(t),Vdo=r(O8e," \u2014 "),YB=n(O8e,"A",{href:!0});var ddt=s(YB);Xdo=r(ddt,"FlaubertTokenizer"),ddt.forEach(t),zdo=r(O8e," (FlauBERT model)"),O8e.forEach(t),Qdo=i(S),ts=n(S,"LI",{});var Qk=s(ts);Gle=n(Qk,"STRONG",{});var cdt=s(Gle);Wdo=r(cdt,"fnet"),cdt.forEach(t),Hdo=r(Qk," \u2014 "),KB=n(Qk,"A",{href:!0});var mdt=s(KB);Udo=r(mdt,"FNetTokenizer"),mdt.forEach(t),Jdo=r(Qk," or "),ZB=n(Qk,"A",{href:!0});var fdt=s(ZB);Ydo=r(fdt,"FNetTokenizerFast"),fdt.forEach(t),Kdo=r(Qk," (FNet model)"),Qk.forEach(t),Zdo=i(S),mh=n(S,"LI",{});var V8e=s(mh);Ole=n(V8e,"STRONG",{});var gdt=s(Ole);eco=r(gdt,"fsmt"),gdt.forEach(t),oco=r(V8e," \u2014 "),eI=n(V8e,"A",{href:!0});var hdt=s(eI);rco=r(hdt,"FSMTTokenizer"),hdt.forEach(t),tco=r(V8e," (FairSeq Machine-Translation model)"),V8e.forEach(t),aco=i(S),as=n(S,"LI",{});var Wk=s(as);Vle=n(Wk,"STRONG",{});var udt=s(Vle);nco=r(udt,"funnel"),udt.forEach(t),sco=r(Wk," \u2014 "),oI=n(Wk,"A",{href:!0});var pdt=s(oI);lco=r(pdt,"FunnelTokenizer"),pdt.forEach(t),ico=r(Wk," or "),rI=n(Wk,"A",{href:!0});var _dt=s(rI);dco=r(_dt,"FunnelTokenizerFast"),_dt.forEach(t),cco=r(Wk," (Funnel Transformer model)"),Wk.forEach(t),mco=i(S),ns=n(S,"LI",{});var Hk=s(ns);Xle=n(Hk,"STRONG",{});var bdt=s(Xle);fco=r(bdt,"gpt2"),bdt.forEach(t),gco=r(Hk," \u2014 "),tI=n(Hk,"A",{href:!0});var vdt=s(tI);hco=r(vdt,"GPT2Tokenizer"),vdt.forEach(t),uco=r(Hk," or "),aI=n(Hk,"A",{href:!0});var Fdt=s(aI);pco=r(Fdt,"GPT2TokenizerFast"),Fdt.forEach(t),_co=r(Hk," (OpenAI GPT-2 model)"),Hk.forEach(t),bco=i(S),ss=n(S,"LI",{});var Uk=s(ss);zle=n(Uk,"STRONG",{});var Tdt=s(zle);vco=r(Tdt,"gpt_neo"),Tdt.forEach(t),Fco=r(Uk," \u2014 "),nI=n(Uk,"A",{href:!0});var Mdt=s(nI);Tco=r(Mdt,"GPT2Tokenizer"),Mdt.forEach(t),Mco=r(Uk," or "),sI=n(Uk,"A",{href:!0});var Edt=s(sI);Eco=r(Edt,"GPT2TokenizerFast"),Edt.forEach(t),Cco=r(Uk," (GPT Neo model)"),Uk.forEach(t),wco=i(S),fh=n(S,"LI",{});var X8e=s(fh);Qle=n(X8e,"STRONG",{});var Cdt=s(Qle);Aco=r(Cdt,"gpt_neox"),Cdt.forEach(t),Lco=r(X8e," \u2014 "),lI=n(X8e,"A",{href:!0});var wdt=s(lI);yco=r(wdt,"GPTNeoXTokenizerFast"),wdt.forEach(t),xco=r(X8e," (GPT NeoX model)"),X8e.forEach(t),$co=i(S),ls=n(S,"LI",{});var Jk=s(ls);Wle=n(Jk,"STRONG",{});var Adt=s(Wle);kco=r(Adt,"gptj"),Adt.forEach(t),Sco=r(Jk," \u2014 "),iI=n(Jk,"A",{href:!0});var Ldt=s(iI);Rco=r(Ldt,"GPT2Tokenizer"),Ldt.forEach(t),Pco=r(Jk," or "),dI=n(Jk,"A",{href:!0});var ydt=s(dI);Bco=r(ydt,"GPT2TokenizerFast"),ydt.forEach(t),Ico=r(Jk," (GPT-J model)"),Jk.forEach(t),Nco=i(S),is=n(S,"LI",{});var Yk=s(is);Hle=n(Yk,"STRONG",{});var xdt=s(Hle);qco=r(xdt,"groupvit"),xdt.forEach(t),jco=r(Yk," \u2014 "),cI=n(Yk,"A",{href:!0});var $dt=s(cI);Dco=r($dt,"CLIPTokenizer"),$dt.forEach(t),Gco=r(Yk," or "),mI=n(Yk,"A",{href:!0});var kdt=s(mI);Oco=r(kdt,"CLIPTokenizerFast"),kdt.forEach(t),Vco=r(Yk," (GroupViT model)"),Yk.forEach(t),Xco=i(S),ds=n(S,"LI",{});var Kk=s(ds);Ule=n(Kk,"STRONG",{});var Sdt=s(Ule);zco=r(Sdt,"herbert"),Sdt.forEach(t),Qco=r(Kk," \u2014 "),fI=n(Kk,"A",{href:!0});var Rdt=s(fI);Wco=r(Rdt,"HerbertTokenizer"),Rdt.forEach(t),Hco=r(Kk," or "),gI=n(Kk,"A",{href:!0});var Pdt=s(gI);Uco=r(Pdt,"HerbertTokenizerFast"),Pdt.forEach(t),Jco=r(Kk," (HerBERT model)"),Kk.forEach(t),Yco=i(S),gh=n(S,"LI",{});var z8e=s(gh);Jle=n(z8e,"STRONG",{});var Bdt=s(Jle);Kco=r(Bdt,"hubert"),Bdt.forEach(t),Zco=r(z8e," \u2014 "),hI=n(z8e,"A",{href:!0});var Idt=s(hI);emo=r(Idt,"Wav2Vec2CTCTokenizer"),Idt.forEach(t),omo=r(z8e," (Hubert model)"),z8e.forEach(t),rmo=i(S),cs=n(S,"LI",{});var Zk=s(cs);Yle=n(Zk,"STRONG",{});var Ndt=s(Yle);tmo=r(Ndt,"ibert"),Ndt.forEach(t),amo=r(Zk," \u2014 "),uI=n(Zk,"A",{href:!0});var qdt=s(uI);nmo=r(qdt,"RobertaTokenizer"),qdt.forEach(t),smo=r(Zk," or "),pI=n(Zk,"A",{href:!0});var jdt=s(pI);lmo=r(jdt,"RobertaTokenizerFast"),jdt.forEach(t),imo=r(Zk," (I-BERT model)"),Zk.forEach(t),dmo=i(S),ms=n(S,"LI",{});var eS=s(ms);Kle=n(eS,"STRONG",{});var Ddt=s(Kle);cmo=r(Ddt,"layoutlm"),Ddt.forEach(t),mmo=r(eS," \u2014 "),_I=n(eS,"A",{href:!0});var Gdt=s(_I);fmo=r(Gdt,"LayoutLMTokenizer"),Gdt.forEach(t),gmo=r(eS," or "),bI=n(eS,"A",{href:!0});var Odt=s(bI);hmo=r(Odt,"LayoutLMTokenizerFast"),Odt.forEach(t),umo=r(eS," (LayoutLM model)"),eS.forEach(t),pmo=i(S),fs=n(S,"LI",{});var oS=s(fs);Zle=n(oS,"STRONG",{});var Vdt=s(Zle);_mo=r(Vdt,"layoutlmv2"),Vdt.forEach(t),bmo=r(oS," \u2014 "),vI=n(oS,"A",{href:!0});var Xdt=s(vI);vmo=r(Xdt,"LayoutLMv2Tokenizer"),Xdt.forEach(t),Fmo=r(oS," or "),FI=n(oS,"A",{href:!0});var zdt=s(FI);Tmo=r(zdt,"LayoutLMv2TokenizerFast"),zdt.forEach(t),Mmo=r(oS," (LayoutLMv2 model)"),oS.forEach(t),Emo=i(S),gs=n(S,"LI",{});var rS=s(gs);eie=n(rS,"STRONG",{});var Qdt=s(eie);Cmo=r(Qdt,"layoutlmv3"),Qdt.forEach(t),wmo=r(rS," \u2014 "),TI=n(rS,"A",{href:!0});var Wdt=s(TI);Amo=r(Wdt,"LayoutLMv3Tokenizer"),Wdt.forEach(t),Lmo=r(rS," or "),MI=n(rS,"A",{href:!0});var Hdt=s(MI);ymo=r(Hdt,"LayoutLMv3TokenizerFast"),Hdt.forEach(t),xmo=r(rS," (LayoutLMv3 model)"),rS.forEach(t),$mo=i(S),hs=n(S,"LI",{});var tS=s(hs);oie=n(tS,"STRONG",{});var Udt=s(oie);kmo=r(Udt,"layoutxlm"),Udt.forEach(t),Smo=r(tS," \u2014 "),EI=n(tS,"A",{href:!0});var Jdt=s(EI);Rmo=r(Jdt,"LayoutXLMTokenizer"),Jdt.forEach(t),Pmo=r(tS," or "),CI=n(tS,"A",{href:!0});var Ydt=s(CI);Bmo=r(Ydt,"LayoutXLMTokenizerFast"),Ydt.forEach(t),Imo=r(tS," (LayoutXLM model)"),tS.forEach(t),Nmo=i(S),us=n(S,"LI",{});var aS=s(us);rie=n(aS,"STRONG",{});var Kdt=s(rie);qmo=r(Kdt,"led"),Kdt.forEach(t),jmo=r(aS," \u2014 "),wI=n(aS,"A",{href:!0});var Zdt=s(wI);Dmo=r(Zdt,"LEDTokenizer"),Zdt.forEach(t),Gmo=r(aS," or "),AI=n(aS,"A",{href:!0});var ect=s(AI);Omo=r(ect,"LEDTokenizerFast"),ect.forEach(t),Vmo=r(aS," (LED model)"),aS.forEach(t),Xmo=i(S),ps=n(S,"LI",{});var nS=s(ps);tie=n(nS,"STRONG",{});var oct=s(tie);zmo=r(oct,"longformer"),oct.forEach(t),Qmo=r(nS," \u2014 "),LI=n(nS,"A",{href:!0});var rct=s(LI);Wmo=r(rct,"LongformerTokenizer"),rct.forEach(t),Hmo=r(nS," or "),yI=n(nS,"A",{href:!0});var tct=s(yI);Umo=r(tct,"LongformerTokenizerFast"),tct.forEach(t),Jmo=r(nS," (Longformer model)"),nS.forEach(t),Ymo=i(S),_s=n(S,"LI",{});var sS=s(_s);aie=n(sS,"STRONG",{});var act=s(aie);Kmo=r(act,"longt5"),act.forEach(t),Zmo=r(sS," \u2014 "),xI=n(sS,"A",{href:!0});var nct=s(xI);efo=r(nct,"T5Tokenizer"),nct.forEach(t),ofo=r(sS," or "),$I=n(sS,"A",{href:!0});var sct=s($I);rfo=r(sct,"T5TokenizerFast"),sct.forEach(t),tfo=r(sS," (LongT5 model)"),sS.forEach(t),afo=i(S),hh=n(S,"LI",{});var Q8e=s(hh);nie=n(Q8e,"STRONG",{});var lct=s(nie);nfo=r(lct,"luke"),lct.forEach(t),sfo=r(Q8e," \u2014 "),kI=n(Q8e,"A",{href:!0});var ict=s(kI);lfo=r(ict,"LukeTokenizer"),ict.forEach(t),ifo=r(Q8e," (LUKE model)"),Q8e.forEach(t),dfo=i(S),bs=n(S,"LI",{});var lS=s(bs);sie=n(lS,"STRONG",{});var dct=s(sie);cfo=r(dct,"lxmert"),dct.forEach(t),mfo=r(lS," \u2014 "),SI=n(lS,"A",{href:!0});var cct=s(SI);ffo=r(cct,"LxmertTokenizer"),cct.forEach(t),gfo=r(lS," or "),RI=n(lS,"A",{href:!0});var mct=s(RI);hfo=r(mct,"LxmertTokenizerFast"),mct.forEach(t),ufo=r(lS," (LXMERT model)"),lS.forEach(t),pfo=i(S),uh=n(S,"LI",{});var W8e=s(uh);lie=n(W8e,"STRONG",{});var fct=s(lie);_fo=r(fct,"m2m_100"),fct.forEach(t),bfo=r(W8e," \u2014 "),PI=n(W8e,"A",{href:!0});var gct=s(PI);vfo=r(gct,"M2M100Tokenizer"),gct.forEach(t),Ffo=r(W8e," (M2M100 model)"),W8e.forEach(t),Tfo=i(S),ph=n(S,"LI",{});var H8e=s(ph);iie=n(H8e,"STRONG",{});var hct=s(iie);Mfo=r(hct,"marian"),hct.forEach(t),Efo=r(H8e," \u2014 "),BI=n(H8e,"A",{href:!0});var uct=s(BI);Cfo=r(uct,"MarianTokenizer"),uct.forEach(t),wfo=r(H8e," (Marian model)"),H8e.forEach(t),Afo=i(S),vs=n(S,"LI",{});var iS=s(vs);die=n(iS,"STRONG",{});var pct=s(die);Lfo=r(pct,"mbart"),pct.forEach(t),yfo=r(iS," \u2014 "),II=n(iS,"A",{href:!0});var _ct=s(II);xfo=r(_ct,"MBartTokenizer"),_ct.forEach(t),$fo=r(iS," or "),NI=n(iS,"A",{href:!0});var bct=s(NI);kfo=r(bct,"MBartTokenizerFast"),bct.forEach(t),Sfo=r(iS," (mBART model)"),iS.forEach(t),Rfo=i(S),Fs=n(S,"LI",{});var dS=s(Fs);cie=n(dS,"STRONG",{});var vct=s(cie);Pfo=r(vct,"mbart50"),vct.forEach(t),Bfo=r(dS," \u2014 "),qI=n(dS,"A",{href:!0});var Fct=s(qI);Ifo=r(Fct,"MBart50Tokenizer"),Fct.forEach(t),Nfo=r(dS," or "),jI=n(dS,"A",{href:!0});var Tct=s(jI);qfo=r(Tct,"MBart50TokenizerFast"),Tct.forEach(t),jfo=r(dS," (mBART-50 model)"),dS.forEach(t),Dfo=i(S),Ts=n(S,"LI",{});var cS=s(Ts);mie=n(cS,"STRONG",{});var Mct=s(mie);Gfo=r(Mct,"megatron-bert"),Mct.forEach(t),Ofo=r(cS," \u2014 "),DI=n(cS,"A",{href:!0});var Ect=s(DI);Vfo=r(Ect,"BertTokenizer"),Ect.forEach(t),Xfo=r(cS," or "),GI=n(cS,"A",{href:!0});var Cct=s(GI);zfo=r(Cct,"BertTokenizerFast"),Cct.forEach(t),Qfo=r(cS," (Megatron-BERT model)"),cS.forEach(t),Wfo=i(S),_h=n(S,"LI",{});var U8e=s(_h);fie=n(U8e,"STRONG",{});var wct=s(fie);Hfo=r(wct,"mluke"),wct.forEach(t),Ufo=r(U8e," \u2014 "),OI=n(U8e,"A",{href:!0});var Act=s(OI);Jfo=r(Act,"MLukeTokenizer"),Act.forEach(t),Yfo=r(U8e," (mLUKE model)"),U8e.forEach(t),Kfo=i(S),Ms=n(S,"LI",{});var mS=s(Ms);gie=n(mS,"STRONG",{});var Lct=s(gie);Zfo=r(Lct,"mobilebert"),Lct.forEach(t),ego=r(mS," \u2014 "),VI=n(mS,"A",{href:!0});var yct=s(VI);ogo=r(yct,"MobileBertTokenizer"),yct.forEach(t),rgo=r(mS," or "),XI=n(mS,"A",{href:!0});var xct=s(XI);tgo=r(xct,"MobileBertTokenizerFast"),xct.forEach(t),ago=r(mS," (MobileBERT model)"),mS.forEach(t),ngo=i(S),Es=n(S,"LI",{});var fS=s(Es);hie=n(fS,"STRONG",{});var $ct=s(hie);sgo=r($ct,"mpnet"),$ct.forEach(t),lgo=r(fS," \u2014 "),zI=n(fS,"A",{href:!0});var kct=s(zI);igo=r(kct,"MPNetTokenizer"),kct.forEach(t),dgo=r(fS," or "),QI=n(fS,"A",{href:!0});var Sct=s(QI);cgo=r(Sct,"MPNetTokenizerFast"),Sct.forEach(t),mgo=r(fS," (MPNet model)"),fS.forEach(t),fgo=i(S),Cs=n(S,"LI",{});var gS=s(Cs);uie=n(gS,"STRONG",{});var Rct=s(uie);ggo=r(Rct,"mt5"),Rct.forEach(t),hgo=r(gS," \u2014 "),WI=n(gS,"A",{href:!0});var Pct=s(WI);ugo=r(Pct,"MT5Tokenizer"),Pct.forEach(t),pgo=r(gS," or "),HI=n(gS,"A",{href:!0});var Bct=s(HI);_go=r(Bct,"MT5TokenizerFast"),Bct.forEach(t),bgo=r(gS," (MT5 model)"),gS.forEach(t),vgo=i(S),ws=n(S,"LI",{});var hS=s(ws);pie=n(hS,"STRONG",{});var Ict=s(pie);Fgo=r(Ict,"mvp"),Ict.forEach(t),Tgo=r(hS," \u2014 "),UI=n(hS,"A",{href:!0});var Nct=s(UI);Mgo=r(Nct,"MvpTokenizer"),Nct.forEach(t),Ego=r(hS," or "),JI=n(hS,"A",{href:!0});var qct=s(JI);Cgo=r(qct,"MvpTokenizerFast"),qct.forEach(t),wgo=r(hS," (MVP model)"),hS.forEach(t),Ago=i(S),As=n(S,"LI",{});var uS=s(As);_ie=n(uS,"STRONG",{});var jct=s(_ie);Lgo=r(jct,"nezha"),jct.forEach(t),ygo=r(uS," \u2014 "),YI=n(uS,"A",{href:!0});var Dct=s(YI);xgo=r(Dct,"BertTokenizer"),Dct.forEach(t),$go=r(uS," or "),KI=n(uS,"A",{href:!0});var Gct=s(KI);kgo=r(Gct,"BertTokenizerFast"),Gct.forEach(t),Sgo=r(uS," (Nezha model)"),uS.forEach(t),Rgo=i(S),Ls=n(S,"LI",{});var pS=s(Ls);bie=n(pS,"STRONG",{});var Oct=s(bie);Pgo=r(Oct,"nllb"),Oct.forEach(t),Bgo=r(pS," \u2014 "),ZI=n(pS,"A",{href:!0});var Vct=s(ZI);Igo=r(Vct,"NllbTokenizer"),Vct.forEach(t),Ngo=r(pS," or "),eN=n(pS,"A",{href:!0});var Xct=s(eN);qgo=r(Xct,"NllbTokenizerFast"),Xct.forEach(t),jgo=r(pS," (NLLB model)"),pS.forEach(t),Dgo=i(S),ys=n(S,"LI",{});var _S=s(ys);vie=n(_S,"STRONG",{});var zct=s(vie);Ggo=r(zct,"nystromformer"),zct.forEach(t),Ogo=r(_S," \u2014 "),oN=n(_S,"A",{href:!0});var Qct=s(oN);Vgo=r(Qct,"AlbertTokenizer"),Qct.forEach(t),Xgo=r(_S," or "),rN=n(_S,"A",{href:!0});var Wct=s(rN);zgo=r(Wct,"AlbertTokenizerFast"),Wct.forEach(t),Qgo=r(_S," (Nystr\xF6mformer model)"),_S.forEach(t),Wgo=i(S),xs=n(S,"LI",{});var bS=s(xs);Fie=n(bS,"STRONG",{});var Hct=s(Fie);Hgo=r(Hct,"openai-gpt"),Hct.forEach(t),Ugo=r(bS," \u2014 "),tN=n(bS,"A",{href:!0});var Uct=s(tN);Jgo=r(Uct,"OpenAIGPTTokenizer"),Uct.forEach(t),Ygo=r(bS," or "),aN=n(bS,"A",{href:!0});var Jct=s(aN);Kgo=r(Jct,"OpenAIGPTTokenizerFast"),Jct.forEach(t),Zgo=r(bS," (OpenAI GPT model)"),bS.forEach(t),eho=i(S),bh=n(S,"LI",{});var J8e=s(bh);Tie=n(J8e,"STRONG",{});var Yct=s(Tie);oho=r(Yct,"opt"),Yct.forEach(t),rho=r(J8e," \u2014 "),nN=n(J8e,"A",{href:!0});var Kct=s(nN);tho=r(Kct,"GPT2Tokenizer"),Kct.forEach(t),aho=r(J8e," (OPT model)"),J8e.forEach(t),nho=i(S),$s=n(S,"LI",{});var vS=s($s);Mie=n(vS,"STRONG",{});var Zct=s(Mie);sho=r(Zct,"pegasus"),Zct.forEach(t),lho=r(vS," \u2014 "),sN=n(vS,"A",{href:!0});var emt=s(sN);iho=r(emt,"PegasusTokenizer"),emt.forEach(t),dho=r(vS," or "),lN=n(vS,"A",{href:!0});var omt=s(lN);cho=r(omt,"PegasusTokenizerFast"),omt.forEach(t),mho=r(vS," (Pegasus model)"),vS.forEach(t),fho=i(S),vh=n(S,"LI",{});var Y8e=s(vh);Eie=n(Y8e,"STRONG",{});var rmt=s(Eie);gho=r(rmt,"perceiver"),rmt.forEach(t),hho=r(Y8e," \u2014 "),iN=n(Y8e,"A",{href:!0});var tmt=s(iN);uho=r(tmt,"PerceiverTokenizer"),tmt.forEach(t),pho=r(Y8e," (Perceiver model)"),Y8e.forEach(t),_ho=i(S),Fh=n(S,"LI",{});var K8e=s(Fh);Cie=n(K8e,"STRONG",{});var amt=s(Cie);bho=r(amt,"phobert"),amt.forEach(t),vho=r(K8e," \u2014 "),dN=n(K8e,"A",{href:!0});var nmt=s(dN);Fho=r(nmt,"PhobertTokenizer"),nmt.forEach(t),Tho=r(K8e," (PhoBERT model)"),K8e.forEach(t),Mho=i(S),Th=n(S,"LI",{});var Z8e=s(Th);wie=n(Z8e,"STRONG",{});var smt=s(wie);Eho=r(smt,"plbart"),smt.forEach(t),Cho=r(Z8e," \u2014 "),cN=n(Z8e,"A",{href:!0});var lmt=s(cN);who=r(lmt,"PLBartTokenizer"),lmt.forEach(t),Aho=r(Z8e," (PLBart model)"),Z8e.forEach(t),Lho=i(S),Mh=n(S,"LI",{});var e9e=s(Mh);Aie=n(e9e,"STRONG",{});var imt=s(Aie);yho=r(imt,"prophetnet"),imt.forEach(t),xho=r(e9e," \u2014 "),mN=n(e9e,"A",{href:!0});var dmt=s(mN);$ho=r(dmt,"ProphetNetTokenizer"),dmt.forEach(t),kho=r(e9e," (ProphetNet model)"),e9e.forEach(t),Sho=i(S),ks=n(S,"LI",{});var FS=s(ks);Lie=n(FS,"STRONG",{});var cmt=s(Lie);Rho=r(cmt,"qdqbert"),cmt.forEach(t),Pho=r(FS," \u2014 "),fN=n(FS,"A",{href:!0});var mmt=s(fN);Bho=r(mmt,"BertTokenizer"),mmt.forEach(t),Iho=r(FS," or "),gN=n(FS,"A",{href:!0});var fmt=s(gN);Nho=r(fmt,"BertTokenizerFast"),fmt.forEach(t),qho=r(FS," (QDQBert model)"),FS.forEach(t),jho=i(S),Eh=n(S,"LI",{});var o9e=s(Eh);yie=n(o9e,"STRONG",{});var gmt=s(yie);Dho=r(gmt,"rag"),gmt.forEach(t),Gho=r(o9e," \u2014 "),hN=n(o9e,"A",{href:!0});var hmt=s(hN);Oho=r(hmt,"RagTokenizer"),hmt.forEach(t),Vho=r(o9e," (RAG model)"),o9e.forEach(t),Xho=i(S),Ss=n(S,"LI",{});var TS=s(Ss);xie=n(TS,"STRONG",{});var umt=s(xie);zho=r(umt,"realm"),umt.forEach(t),Qho=r(TS," \u2014 "),uN=n(TS,"A",{href:!0});var pmt=s(uN);Who=r(pmt,"RealmTokenizer"),pmt.forEach(t),Hho=r(TS," or "),pN=n(TS,"A",{href:!0});var _mt=s(pN);Uho=r(_mt,"RealmTokenizerFast"),_mt.forEach(t),Jho=r(TS," (REALM model)"),TS.forEach(t),Yho=i(S),Rs=n(S,"LI",{});var MS=s(Rs);$ie=n(MS,"STRONG",{});var bmt=s($ie);Kho=r(bmt,"reformer"),bmt.forEach(t),Zho=r(MS," \u2014 "),_N=n(MS,"A",{href:!0});var vmt=s(_N);euo=r(vmt,"ReformerTokenizer"),vmt.forEach(t),ouo=r(MS," or "),bN=n(MS,"A",{href:!0});var Fmt=s(bN);ruo=r(Fmt,"ReformerTokenizerFast"),Fmt.forEach(t),tuo=r(MS," (Reformer model)"),MS.forEach(t),auo=i(S),Ps=n(S,"LI",{});var ES=s(Ps);kie=n(ES,"STRONG",{});var Tmt=s(kie);nuo=r(Tmt,"rembert"),Tmt.forEach(t),suo=r(ES," \u2014 "),vN=n(ES,"A",{href:!0});var Mmt=s(vN);luo=r(Mmt,"RemBertTokenizer"),Mmt.forEach(t),iuo=r(ES," or "),FN=n(ES,"A",{href:!0});var Emt=s(FN);duo=r(Emt,"RemBertTokenizerFast"),Emt.forEach(t),cuo=r(ES," (RemBERT model)"),ES.forEach(t),muo=i(S),Bs=n(S,"LI",{});var CS=s(Bs);Sie=n(CS,"STRONG",{});var Cmt=s(Sie);fuo=r(Cmt,"retribert"),Cmt.forEach(t),guo=r(CS," \u2014 "),TN=n(CS,"A",{href:!0});var wmt=s(TN);huo=r(wmt,"RetriBertTokenizer"),wmt.forEach(t),uuo=r(CS," or "),MN=n(CS,"A",{href:!0});var Amt=s(MN);puo=r(Amt,"RetriBertTokenizerFast"),Amt.forEach(t),_uo=r(CS," (RetriBERT model)"),CS.forEach(t),buo=i(S),Is=n(S,"LI",{});var wS=s(Is);Rie=n(wS,"STRONG",{});var Lmt=s(Rie);vuo=r(Lmt,"roberta"),Lmt.forEach(t),Fuo=r(wS," \u2014 "),EN=n(wS,"A",{href:!0});var ymt=s(EN);Tuo=r(ymt,"RobertaTokenizer"),ymt.forEach(t),Muo=r(wS," or "),CN=n(wS,"A",{href:!0});var xmt=s(CN);Euo=r(xmt,"RobertaTokenizerFast"),xmt.forEach(t),Cuo=r(wS," (RoBERTa model)"),wS.forEach(t),wuo=i(S),Ns=n(S,"LI",{});var AS=s(Ns);Pie=n(AS,"STRONG",{});var $mt=s(Pie);Auo=r($mt,"roformer"),$mt.forEach(t),Luo=r(AS," \u2014 "),wN=n(AS,"A",{href:!0});var kmt=s(wN);yuo=r(kmt,"RoFormerTokenizer"),kmt.forEach(t),xuo=r(AS," or "),AN=n(AS,"A",{href:!0});var Smt=s(AN);$uo=r(Smt,"RoFormerTokenizerFast"),Smt.forEach(t),kuo=r(AS," (RoFormer model)"),AS.forEach(t),Suo=i(S),Ch=n(S,"LI",{});var r9e=s(Ch);Bie=n(r9e,"STRONG",{});var Rmt=s(Bie);Ruo=r(Rmt,"speech_to_text"),Rmt.forEach(t),Puo=r(r9e," \u2014 "),LN=n(r9e,"A",{href:!0});var Pmt=s(LN);Buo=r(Pmt,"Speech2TextTokenizer"),Pmt.forEach(t),Iuo=r(r9e," (Speech2Text model)"),r9e.forEach(t),Nuo=i(S),wh=n(S,"LI",{});var t9e=s(wh);Iie=n(t9e,"STRONG",{});var Bmt=s(Iie);quo=r(Bmt,"speech_to_text_2"),Bmt.forEach(t),juo=r(t9e," \u2014 "),yN=n(t9e,"A",{href:!0});var Imt=s(yN);Duo=r(Imt,"Speech2Text2Tokenizer"),Imt.forEach(t),Guo=r(t9e," (Speech2Text2 model)"),t9e.forEach(t),Ouo=i(S),qs=n(S,"LI",{});var LS=s(qs);Nie=n(LS,"STRONG",{});var Nmt=s(Nie);Vuo=r(Nmt,"splinter"),Nmt.forEach(t),Xuo=r(LS," \u2014 "),xN=n(LS,"A",{href:!0});var qmt=s(xN);zuo=r(qmt,"SplinterTokenizer"),qmt.forEach(t),Quo=r(LS," or "),$N=n(LS,"A",{href:!0});var jmt=s($N);Wuo=r(jmt,"SplinterTokenizerFast"),jmt.forEach(t),Huo=r(LS," (Splinter model)"),LS.forEach(t),Uuo=i(S),js=n(S,"LI",{});var yS=s(js);qie=n(yS,"STRONG",{});var Dmt=s(qie);Juo=r(Dmt,"squeezebert"),Dmt.forEach(t),Yuo=r(yS," \u2014 "),kN=n(yS,"A",{href:!0});var Gmt=s(kN);Kuo=r(Gmt,"SqueezeBertTokenizer"),Gmt.forEach(t),Zuo=r(yS," or "),SN=n(yS,"A",{href:!0});var Omt=s(SN);epo=r(Omt,"SqueezeBertTokenizerFast"),Omt.forEach(t),opo=r(yS," (SqueezeBERT model)"),yS.forEach(t),rpo=i(S),Ds=n(S,"LI",{});var xS=s(Ds);jie=n(xS,"STRONG",{});var Vmt=s(jie);tpo=r(Vmt,"t5"),Vmt.forEach(t),apo=r(xS," \u2014 "),RN=n(xS,"A",{href:!0});var Xmt=s(RN);npo=r(Xmt,"T5Tokenizer"),Xmt.forEach(t),spo=r(xS," or "),PN=n(xS,"A",{href:!0});var zmt=s(PN);lpo=r(zmt,"T5TokenizerFast"),zmt.forEach(t),ipo=r(xS," (T5 model)"),xS.forEach(t),dpo=i(S),Ah=n(S,"LI",{});var a9e=s(Ah);Die=n(a9e,"STRONG",{});var Qmt=s(Die);cpo=r(Qmt,"tapas"),Qmt.forEach(t),mpo=r(a9e," \u2014 "),BN=n(a9e,"A",{href:!0});var Wmt=s(BN);fpo=r(Wmt,"TapasTokenizer"),Wmt.forEach(t),gpo=r(a9e," (TAPAS model)"),a9e.forEach(t),hpo=i(S),Lh=n(S,"LI",{});var n9e=s(Lh);Gie=n(n9e,"STRONG",{});var Hmt=s(Gie);upo=r(Hmt,"tapex"),Hmt.forEach(t),ppo=r(n9e," \u2014 "),IN=n(n9e,"A",{href:!0});var Umt=s(IN);_po=r(Umt,"TapexTokenizer"),Umt.forEach(t),bpo=r(n9e," (TAPEX model)"),n9e.forEach(t),vpo=i(S),yh=n(S,"LI",{});var s9e=s(yh);Oie=n(s9e,"STRONG",{});var Jmt=s(Oie);Fpo=r(Jmt,"transfo-xl"),Jmt.forEach(t),Tpo=r(s9e," \u2014 "),NN=n(s9e,"A",{href:!0});var Ymt=s(NN);Mpo=r(Ymt,"TransfoXLTokenizer"),Ymt.forEach(t),Epo=r(s9e," (Transformer-XL model)"),s9e.forEach(t),Cpo=i(S),Gs=n(S,"LI",{});var $S=s(Gs);Vie=n($S,"STRONG",{});var Kmt=s(Vie);wpo=r(Kmt,"vilt"),Kmt.forEach(t),Apo=r($S," \u2014 "),qN=n($S,"A",{href:!0});var Zmt=s(qN);Lpo=r(Zmt,"BertTokenizer"),Zmt.forEach(t),ypo=r($S," or "),jN=n($S,"A",{href:!0});var eft=s(jN);xpo=r(eft,"BertTokenizerFast"),eft.forEach(t),$po=r($S," (ViLT model)"),$S.forEach(t),kpo=i(S),Os=n(S,"LI",{});var kS=s(Os);Xie=n(kS,"STRONG",{});var oft=s(Xie);Spo=r(oft,"visual_bert"),oft.forEach(t),Rpo=r(kS," \u2014 "),DN=n(kS,"A",{href:!0});var rft=s(DN);Ppo=r(rft,"BertTokenizer"),rft.forEach(t),Bpo=r(kS," or "),GN=n(kS,"A",{href:!0});var tft=s(GN);Ipo=r(tft,"BertTokenizerFast"),tft.forEach(t),Npo=r(kS," (VisualBERT model)"),kS.forEach(t),qpo=i(S),xh=n(S,"LI",{});var l9e=s(xh);zie=n(l9e,"STRONG",{});var aft=s(zie);jpo=r(aft,"wav2vec2"),aft.forEach(t),Dpo=r(l9e," \u2014 "),ON=n(l9e,"A",{href:!0});var nft=s(ON);Gpo=r(nft,"Wav2Vec2CTCTokenizer"),nft.forEach(t),Opo=r(l9e," (Wav2Vec2 model)"),l9e.forEach(t),Vpo=i(S),$h=n(S,"LI",{});var i9e=s($h);Qie=n(i9e,"STRONG",{});var sft=s(Qie);Xpo=r(sft,"wav2vec2-conformer"),sft.forEach(t),zpo=r(i9e," \u2014 "),VN=n(i9e,"A",{href:!0});var lft=s(VN);Qpo=r(lft,"Wav2Vec2CTCTokenizer"),lft.forEach(t),Wpo=r(i9e," (Wav2Vec2-Conformer model)"),i9e.forEach(t),Hpo=i(S),kh=n(S,"LI",{});var d9e=s(kh);Wie=n(d9e,"STRONG",{});var ift=s(Wie);Upo=r(ift,"wav2vec2_phoneme"),ift.forEach(t),Jpo=r(d9e," \u2014 "),XN=n(d9e,"A",{href:!0});var dft=s(XN);Ypo=r(dft,"Wav2Vec2PhonemeCTCTokenizer"),dft.forEach(t),Kpo=r(d9e," (Wav2Vec2Phoneme model)"),d9e.forEach(t),Zpo=i(S),Vs=n(S,"LI",{});var SS=s(Vs);Hie=n(SS,"STRONG",{});var cft=s(Hie);e_o=r(cft,"xglm"),cft.forEach(t),o_o=r(SS," \u2014 "),zN=n(SS,"A",{href:!0});var mft=s(zN);r_o=r(mft,"XGLMTokenizer"),mft.forEach(t),t_o=r(SS," or "),QN=n(SS,"A",{href:!0});var fft=s(QN);a_o=r(fft,"XGLMTokenizerFast"),fft.forEach(t),n_o=r(SS," (XGLM model)"),SS.forEach(t),s_o=i(S),Sh=n(S,"LI",{});var c9e=s(Sh);Uie=n(c9e,"STRONG",{});var gft=s(Uie);l_o=r(gft,"xlm"),gft.forEach(t),i_o=r(c9e," \u2014 "),WN=n(c9e,"A",{href:!0});var hft=s(WN);d_o=r(hft,"XLMTokenizer"),hft.forEach(t),c_o=r(c9e," (XLM model)"),c9e.forEach(t),m_o=i(S),Rh=n(S,"LI",{});var m9e=s(Rh);Jie=n(m9e,"STRONG",{});var uft=s(Jie);f_o=r(uft,"xlm-prophetnet"),uft.forEach(t),g_o=r(m9e," \u2014 "),HN=n(m9e,"A",{href:!0});var pft=s(HN);h_o=r(pft,"XLMProphetNetTokenizer"),pft.forEach(t),u_o=r(m9e," (XLM-ProphetNet model)"),m9e.forEach(t),p_o=i(S),Xs=n(S,"LI",{});var RS=s(Xs);Yie=n(RS,"STRONG",{});var _ft=s(Yie);__o=r(_ft,"xlm-roberta"),_ft.forEach(t),b_o=r(RS," \u2014 "),UN=n(RS,"A",{href:!0});var bft=s(UN);v_o=r(bft,"XLMRobertaTokenizer"),bft.forEach(t),F_o=r(RS," or "),JN=n(RS,"A",{href:!0});var vft=s(JN);T_o=r(vft,"XLMRobertaTokenizerFast"),vft.forEach(t),M_o=r(RS," (XLM-RoBERTa model)"),RS.forEach(t),E_o=i(S),zs=n(S,"LI",{});var PS=s(zs);Kie=n(PS,"STRONG",{});var Fft=s(Kie);C_o=r(Fft,"xlm-roberta-xl"),Fft.forEach(t),w_o=r(PS," \u2014 "),YN=n(PS,"A",{href:!0});var Tft=s(YN);A_o=r(Tft,"RobertaTokenizer"),Tft.forEach(t),L_o=r(PS," or "),KN=n(PS,"A",{href:!0});var Mft=s(KN);y_o=r(Mft,"RobertaTokenizerFast"),Mft.forEach(t),x_o=r(PS," (XLM-RoBERTa-XL model)"),PS.forEach(t),$_o=i(S),Qs=n(S,"LI",{});var BS=s(Qs);Zie=n(BS,"STRONG",{});var Eft=s(Zie);k_o=r(Eft,"xlnet"),Eft.forEach(t),S_o=r(BS," \u2014 "),ZN=n(BS,"A",{href:!0});var Cft=s(ZN);R_o=r(Cft,"XLNetTokenizer"),Cft.forEach(t),P_o=r(BS," or "),eq=n(BS,"A",{href:!0});var wft=s(eq);B_o=r(wft,"XLNetTokenizerFast"),wft.forEach(t),I_o=r(BS," (XLNet model)"),BS.forEach(t),N_o=i(S),Ws=n(S,"LI",{});var IS=s(Ws);ede=n(IS,"STRONG",{});var Aft=s(ede);q_o=r(Aft,"yoso"),Aft.forEach(t),j_o=r(IS," \u2014 "),oq=n(IS,"A",{href:!0});var Lft=s(oq);D_o=r(Lft,"AlbertTokenizer"),Lft.forEach(t),G_o=r(IS," or "),rq=n(IS,"A",{href:!0});var yft=s(rq);O_o=r(yft,"AlbertTokenizerFast"),yft.forEach(t),V_o=r(IS," (YOSO model)"),IS.forEach(t),S.forEach(t),X_o=i(el),T(Ph.$$.fragment,el),el.forEach(t),z_o=i(Zs),Bh=n(Zs,"DIV",{class:!0});var SQe=s(Bh);T(Ey.$$.fragment,SQe),Q_o=i(SQe),ode=n(SQe,"P",{});var xft=s(ode);W_o=r(xft,"Register a new tokenizer in this mapping."),xft.forEach(t),SQe.forEach(t),Zs.forEach(t),kXe=i(m),ji=n(m,"H2",{class:!0});var RQe=s(ji);Ih=n(RQe,"A",{id:!0,class:!0,href:!0});var $ft=s(Ih);rde=n($ft,"SPAN",{});var kft=s(rde);T(Cy.$$.fragment,kft),kft.forEach(t),$ft.forEach(t),H_o=i(RQe),tde=n(RQe,"SPAN",{});var Sft=s(tde);U_o=r(Sft,"AutoFeatureExtractor"),Sft.forEach(t),RQe.forEach(t),SXe=i(m),xo=n(m,"DIV",{class:!0});var ol=s(xo);T(wy.$$.fragment,ol),J_o=i(ol),Ay=n(ol,"P",{});var PQe=s(Ay);Y_o=r(PQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),tq=n(PQe,"A",{href:!0});var Rft=s(tq);K_o=r(Rft,"AutoFeatureExtractor.from_pretrained()"),Rft.forEach(t),Z_o=r(PQe," class method."),PQe.forEach(t),e2o=i(ol),Ly=n(ol,"P",{});var BQe=s(Ly);o2o=r(BQe,"This class cannot be instantiated directly using "),ade=n(BQe,"CODE",{});var Pft=s(ade);r2o=r(Pft,"__init__()"),Pft.forEach(t),t2o=r(BQe," (throws an error)."),BQe.forEach(t),a2o=i(ol),Ue=n(ol,"DIV",{class:!0});var na=s(Ue);T(yy.$$.fragment,na),n2o=i(na),nde=n(na,"P",{});var Bft=s(nde);s2o=r(Bft,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Bft.forEach(t),l2o=i(na),Ba=n(na,"P",{});var g7=s(Ba);i2o=r(g7,"The feature extractor class to instantiate is selected based on the "),sde=n(g7,"CODE",{});var Ift=s(sde);d2o=r(Ift,"model_type"),Ift.forEach(t),c2o=r(g7,` property of the config object
(either passed as an argument or loaded from `),lde=n(g7,"CODE",{});var Nft=s(lde);m2o=r(Nft,"pretrained_model_name_or_path"),Nft.forEach(t),f2o=r(g7,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ide=n(g7,"CODE",{});var qft=s(ide);g2o=r(qft,"pretrained_model_name_or_path"),qft.forEach(t),h2o=r(g7,":"),g7.forEach(t),u2o=i(na),Y=n(na,"UL",{});var K=s(Y);Nh=n(K,"LI",{});var f9e=s(Nh);dde=n(f9e,"STRONG",{});var jft=s(dde);p2o=r(jft,"beit"),jft.forEach(t),_2o=r(f9e," \u2014 "),aq=n(f9e,"A",{href:!0});var Dft=s(aq);b2o=r(Dft,"BeitFeatureExtractor"),Dft.forEach(t),v2o=r(f9e," (BEiT model)"),f9e.forEach(t),F2o=i(K),qh=n(K,"LI",{});var g9e=s(qh);cde=n(g9e,"STRONG",{});var Gft=s(cde);T2o=r(Gft,"clip"),Gft.forEach(t),M2o=r(g9e," \u2014 "),nq=n(g9e,"A",{href:!0});var Oft=s(nq);E2o=r(Oft,"CLIPFeatureExtractor"),Oft.forEach(t),C2o=r(g9e," (CLIP model)"),g9e.forEach(t),w2o=i(K),jh=n(K,"LI",{});var h9e=s(jh);mde=n(h9e,"STRONG",{});var Vft=s(mde);A2o=r(Vft,"convnext"),Vft.forEach(t),L2o=r(h9e," \u2014 "),sq=n(h9e,"A",{href:!0});var Xft=s(sq);y2o=r(Xft,"ConvNextFeatureExtractor"),Xft.forEach(t),x2o=r(h9e," (ConvNeXT model)"),h9e.forEach(t),$2o=i(K),Dh=n(K,"LI",{});var u9e=s(Dh);fde=n(u9e,"STRONG",{});var zft=s(fde);k2o=r(zft,"cvt"),zft.forEach(t),S2o=r(u9e," \u2014 "),lq=n(u9e,"A",{href:!0});var Qft=s(lq);R2o=r(Qft,"ConvNextFeatureExtractor"),Qft.forEach(t),P2o=r(u9e," (CvT model)"),u9e.forEach(t),B2o=i(K),Gh=n(K,"LI",{});var p9e=s(Gh);gde=n(p9e,"STRONG",{});var Wft=s(gde);I2o=r(Wft,"data2vec-audio"),Wft.forEach(t),N2o=r(p9e," \u2014 "),iq=n(p9e,"A",{href:!0});var Hft=s(iq);q2o=r(Hft,"Wav2Vec2FeatureExtractor"),Hft.forEach(t),j2o=r(p9e," (Data2VecAudio model)"),p9e.forEach(t),D2o=i(K),Oh=n(K,"LI",{});var _9e=s(Oh);hde=n(_9e,"STRONG",{});var Uft=s(hde);G2o=r(Uft,"data2vec-vision"),Uft.forEach(t),O2o=r(_9e," \u2014 "),dq=n(_9e,"A",{href:!0});var Jft=s(dq);V2o=r(Jft,"BeitFeatureExtractor"),Jft.forEach(t),X2o=r(_9e," (Data2VecVision model)"),_9e.forEach(t),z2o=i(K),Vh=n(K,"LI",{});var b9e=s(Vh);ude=n(b9e,"STRONG",{});var Yft=s(ude);Q2o=r(Yft,"deit"),Yft.forEach(t),W2o=r(b9e," \u2014 "),cq=n(b9e,"A",{href:!0});var Kft=s(cq);H2o=r(Kft,"DeiTFeatureExtractor"),Kft.forEach(t),U2o=r(b9e," (DeiT model)"),b9e.forEach(t),J2o=i(K),Xh=n(K,"LI",{});var v9e=s(Xh);pde=n(v9e,"STRONG",{});var Zft=s(pde);Y2o=r(Zft,"detr"),Zft.forEach(t),K2o=r(v9e," \u2014 "),mq=n(v9e,"A",{href:!0});var egt=s(mq);Z2o=r(egt,"DetrFeatureExtractor"),egt.forEach(t),ebo=r(v9e," (DETR model)"),v9e.forEach(t),obo=i(K),zh=n(K,"LI",{});var F9e=s(zh);_de=n(F9e,"STRONG",{});var ogt=s(_de);rbo=r(ogt,"dpt"),ogt.forEach(t),tbo=r(F9e," \u2014 "),fq=n(F9e,"A",{href:!0});var rgt=s(fq);abo=r(rgt,"DPTFeatureExtractor"),rgt.forEach(t),nbo=r(F9e," (DPT model)"),F9e.forEach(t),sbo=i(K),Qh=n(K,"LI",{});var T9e=s(Qh);bde=n(T9e,"STRONG",{});var tgt=s(bde);lbo=r(tgt,"flava"),tgt.forEach(t),ibo=r(T9e," \u2014 "),gq=n(T9e,"A",{href:!0});var agt=s(gq);dbo=r(agt,"FlavaFeatureExtractor"),agt.forEach(t),cbo=r(T9e," (FLAVA model)"),T9e.forEach(t),mbo=i(K),Wh=n(K,"LI",{});var M9e=s(Wh);vde=n(M9e,"STRONG",{});var ngt=s(vde);fbo=r(ngt,"glpn"),ngt.forEach(t),gbo=r(M9e," \u2014 "),hq=n(M9e,"A",{href:!0});var sgt=s(hq);hbo=r(sgt,"GLPNFeatureExtractor"),sgt.forEach(t),ubo=r(M9e," (GLPN model)"),M9e.forEach(t),pbo=i(K),Hh=n(K,"LI",{});var E9e=s(Hh);Fde=n(E9e,"STRONG",{});var lgt=s(Fde);_bo=r(lgt,"groupvit"),lgt.forEach(t),bbo=r(E9e," \u2014 "),uq=n(E9e,"A",{href:!0});var igt=s(uq);vbo=r(igt,"CLIPFeatureExtractor"),igt.forEach(t),Fbo=r(E9e," (GroupViT model)"),E9e.forEach(t),Tbo=i(K),Uh=n(K,"LI",{});var C9e=s(Uh);Tde=n(C9e,"STRONG",{});var dgt=s(Tde);Mbo=r(dgt,"hubert"),dgt.forEach(t),Ebo=r(C9e," \u2014 "),pq=n(C9e,"A",{href:!0});var cgt=s(pq);Cbo=r(cgt,"Wav2Vec2FeatureExtractor"),cgt.forEach(t),wbo=r(C9e," (Hubert model)"),C9e.forEach(t),Abo=i(K),Jh=n(K,"LI",{});var w9e=s(Jh);Mde=n(w9e,"STRONG",{});var mgt=s(Mde);Lbo=r(mgt,"imagegpt"),mgt.forEach(t),ybo=r(w9e," \u2014 "),_q=n(w9e,"A",{href:!0});var fgt=s(_q);xbo=r(fgt,"ImageGPTFeatureExtractor"),fgt.forEach(t),$bo=r(w9e," (ImageGPT model)"),w9e.forEach(t),kbo=i(K),Yh=n(K,"LI",{});var A9e=s(Yh);Ede=n(A9e,"STRONG",{});var ggt=s(Ede);Sbo=r(ggt,"layoutlmv2"),ggt.forEach(t),Rbo=r(A9e," \u2014 "),bq=n(A9e,"A",{href:!0});var hgt=s(bq);Pbo=r(hgt,"LayoutLMv2FeatureExtractor"),hgt.forEach(t),Bbo=r(A9e," (LayoutLMv2 model)"),A9e.forEach(t),Ibo=i(K),Kh=n(K,"LI",{});var L9e=s(Kh);Cde=n(L9e,"STRONG",{});var ugt=s(Cde);Nbo=r(ugt,"layoutlmv3"),ugt.forEach(t),qbo=r(L9e," \u2014 "),vq=n(L9e,"A",{href:!0});var pgt=s(vq);jbo=r(pgt,"LayoutLMv3FeatureExtractor"),pgt.forEach(t),Dbo=r(L9e," (LayoutLMv3 model)"),L9e.forEach(t),Gbo=i(K),Zh=n(K,"LI",{});var y9e=s(Zh);wde=n(y9e,"STRONG",{});var _gt=s(wde);Obo=r(_gt,"levit"),_gt.forEach(t),Vbo=r(y9e," \u2014 "),Fq=n(y9e,"A",{href:!0});var bgt=s(Fq);Xbo=r(bgt,"LevitFeatureExtractor"),bgt.forEach(t),zbo=r(y9e," (LeViT model)"),y9e.forEach(t),Qbo=i(K),eu=n(K,"LI",{});var x9e=s(eu);Ade=n(x9e,"STRONG",{});var vgt=s(Ade);Wbo=r(vgt,"maskformer"),vgt.forEach(t),Hbo=r(x9e," \u2014 "),Tq=n(x9e,"A",{href:!0});var Fgt=s(Tq);Ubo=r(Fgt,"MaskFormerFeatureExtractor"),Fgt.forEach(t),Jbo=r(x9e," (MaskFormer model)"),x9e.forEach(t),Ybo=i(K),ou=n(K,"LI",{});var $9e=s(ou);Lde=n($9e,"STRONG",{});var Tgt=s(Lde);Kbo=r(Tgt,"mctct"),Tgt.forEach(t),Zbo=r($9e," \u2014 "),Mq=n($9e,"A",{href:!0});var Mgt=s(Mq);evo=r(Mgt,"MCTCTFeatureExtractor"),Mgt.forEach(t),ovo=r($9e," (M-CTC-T model)"),$9e.forEach(t),rvo=i(K),ru=n(K,"LI",{});var k9e=s(ru);yde=n(k9e,"STRONG",{});var Egt=s(yde);tvo=r(Egt,"mobilevit"),Egt.forEach(t),avo=r(k9e," \u2014 "),Eq=n(k9e,"A",{href:!0});var Cgt=s(Eq);nvo=r(Cgt,"MobileViTFeatureExtractor"),Cgt.forEach(t),svo=r(k9e," (MobileViT model)"),k9e.forEach(t),lvo=i(K),tu=n(K,"LI",{});var S9e=s(tu);xde=n(S9e,"STRONG",{});var wgt=s(xde);ivo=r(wgt,"perceiver"),wgt.forEach(t),dvo=r(S9e," \u2014 "),Cq=n(S9e,"A",{href:!0});var Agt=s(Cq);cvo=r(Agt,"PerceiverFeatureExtractor"),Agt.forEach(t),mvo=r(S9e," (Perceiver model)"),S9e.forEach(t),fvo=i(K),au=n(K,"LI",{});var R9e=s(au);$de=n(R9e,"STRONG",{});var Lgt=s($de);gvo=r(Lgt,"poolformer"),Lgt.forEach(t),hvo=r(R9e," \u2014 "),wq=n(R9e,"A",{href:!0});var ygt=s(wq);uvo=r(ygt,"PoolFormerFeatureExtractor"),ygt.forEach(t),pvo=r(R9e," (PoolFormer model)"),R9e.forEach(t),_vo=i(K),nu=n(K,"LI",{});var P9e=s(nu);kde=n(P9e,"STRONG",{});var xgt=s(kde);bvo=r(xgt,"regnet"),xgt.forEach(t),vvo=r(P9e," \u2014 "),Aq=n(P9e,"A",{href:!0});var $gt=s(Aq);Fvo=r($gt,"ConvNextFeatureExtractor"),$gt.forEach(t),Tvo=r(P9e," (RegNet model)"),P9e.forEach(t),Mvo=i(K),su=n(K,"LI",{});var B9e=s(su);Sde=n(B9e,"STRONG",{});var kgt=s(Sde);Evo=r(kgt,"resnet"),kgt.forEach(t),Cvo=r(B9e," \u2014 "),Lq=n(B9e,"A",{href:!0});var Sgt=s(Lq);wvo=r(Sgt,"ConvNextFeatureExtractor"),Sgt.forEach(t),Avo=r(B9e," (ResNet model)"),B9e.forEach(t),Lvo=i(K),lu=n(K,"LI",{});var I9e=s(lu);Rde=n(I9e,"STRONG",{});var Rgt=s(Rde);yvo=r(Rgt,"segformer"),Rgt.forEach(t),xvo=r(I9e," \u2014 "),yq=n(I9e,"A",{href:!0});var Pgt=s(yq);$vo=r(Pgt,"SegformerFeatureExtractor"),Pgt.forEach(t),kvo=r(I9e," (SegFormer model)"),I9e.forEach(t),Svo=i(K),iu=n(K,"LI",{});var N9e=s(iu);Pde=n(N9e,"STRONG",{});var Bgt=s(Pde);Rvo=r(Bgt,"speech_to_text"),Bgt.forEach(t),Pvo=r(N9e," \u2014 "),xq=n(N9e,"A",{href:!0});var Igt=s(xq);Bvo=r(Igt,"Speech2TextFeatureExtractor"),Igt.forEach(t),Ivo=r(N9e," (Speech2Text model)"),N9e.forEach(t),Nvo=i(K),du=n(K,"LI",{});var q9e=s(du);Bde=n(q9e,"STRONG",{});var Ngt=s(Bde);qvo=r(Ngt,"swin"),Ngt.forEach(t),jvo=r(q9e," \u2014 "),$q=n(q9e,"A",{href:!0});var qgt=s($q);Dvo=r(qgt,"ViTFeatureExtractor"),qgt.forEach(t),Gvo=r(q9e," (Swin Transformer model)"),q9e.forEach(t),Ovo=i(K),cu=n(K,"LI",{});var j9e=s(cu);Ide=n(j9e,"STRONG",{});var jgt=s(Ide);Vvo=r(jgt,"van"),jgt.forEach(t),Xvo=r(j9e," \u2014 "),kq=n(j9e,"A",{href:!0});var Dgt=s(kq);zvo=r(Dgt,"ConvNextFeatureExtractor"),Dgt.forEach(t),Qvo=r(j9e," (VAN model)"),j9e.forEach(t),Wvo=i(K),mu=n(K,"LI",{});var D9e=s(mu);Nde=n(D9e,"STRONG",{});var Ggt=s(Nde);Hvo=r(Ggt,"vilt"),Ggt.forEach(t),Uvo=r(D9e," \u2014 "),Sq=n(D9e,"A",{href:!0});var Ogt=s(Sq);Jvo=r(Ogt,"ViltFeatureExtractor"),Ogt.forEach(t),Yvo=r(D9e," (ViLT model)"),D9e.forEach(t),Kvo=i(K),fu=n(K,"LI",{});var G9e=s(fu);qde=n(G9e,"STRONG",{});var Vgt=s(qde);Zvo=r(Vgt,"vit"),Vgt.forEach(t),e1o=r(G9e," \u2014 "),Rq=n(G9e,"A",{href:!0});var Xgt=s(Rq);o1o=r(Xgt,"ViTFeatureExtractor"),Xgt.forEach(t),r1o=r(G9e," (ViT model)"),G9e.forEach(t),t1o=i(K),gu=n(K,"LI",{});var O9e=s(gu);jde=n(O9e,"STRONG",{});var zgt=s(jde);a1o=r(zgt,"vit_mae"),zgt.forEach(t),n1o=r(O9e," \u2014 "),Pq=n(O9e,"A",{href:!0});var Qgt=s(Pq);s1o=r(Qgt,"ViTFeatureExtractor"),Qgt.forEach(t),l1o=r(O9e," (ViTMAE model)"),O9e.forEach(t),i1o=i(K),hu=n(K,"LI",{});var V9e=s(hu);Dde=n(V9e,"STRONG",{});var Wgt=s(Dde);d1o=r(Wgt,"wav2vec2"),Wgt.forEach(t),c1o=r(V9e," \u2014 "),Bq=n(V9e,"A",{href:!0});var Hgt=s(Bq);m1o=r(Hgt,"Wav2Vec2FeatureExtractor"),Hgt.forEach(t),f1o=r(V9e," (Wav2Vec2 model)"),V9e.forEach(t),g1o=i(K),uu=n(K,"LI",{});var X9e=s(uu);Gde=n(X9e,"STRONG",{});var Ugt=s(Gde);h1o=r(Ugt,"wav2vec2-conformer"),Ugt.forEach(t),u1o=r(X9e," \u2014 "),Iq=n(X9e,"A",{href:!0});var Jgt=s(Iq);p1o=r(Jgt,"Wav2Vec2FeatureExtractor"),Jgt.forEach(t),_1o=r(X9e," (Wav2Vec2-Conformer model)"),X9e.forEach(t),b1o=i(K),pu=n(K,"LI",{});var z9e=s(pu);Ode=n(z9e,"STRONG",{});var Ygt=s(Ode);v1o=r(Ygt,"yolos"),Ygt.forEach(t),F1o=r(z9e," \u2014 "),Nq=n(z9e,"A",{href:!0});var Kgt=s(Nq);T1o=r(Kgt,"YolosFeatureExtractor"),Kgt.forEach(t),M1o=r(z9e," (YOLOS model)"),z9e.forEach(t),K.forEach(t),E1o=i(na),T(_u.$$.fragment,na),C1o=i(na),T(bu.$$.fragment,na),na.forEach(t),w1o=i(ol),vu=n(ol,"DIV",{class:!0});var IQe=s(vu);T(xy.$$.fragment,IQe),A1o=i(IQe),Vde=n(IQe,"P",{});var Zgt=s(Vde);L1o=r(Zgt,"Register a new feature extractor for this class."),Zgt.forEach(t),IQe.forEach(t),ol.forEach(t),RXe=i(m),Di=n(m,"H2",{class:!0});var NQe=s(Di);Fu=n(NQe,"A",{id:!0,class:!0,href:!0});var eht=s(Fu);Xde=n(eht,"SPAN",{});var oht=s(Xde);T($y.$$.fragment,oht),oht.forEach(t),eht.forEach(t),y1o=i(NQe),zde=n(NQe,"SPAN",{});var rht=s(zde);x1o=r(rht,"AutoProcessor"),rht.forEach(t),NQe.forEach(t),PXe=i(m),$o=n(m,"DIV",{class:!0});var rl=s($o);T(ky.$$.fragment,rl),$1o=i(rl),Sy=n(rl,"P",{});var qQe=s(Sy);k1o=r(qQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),qq=n(qQe,"A",{href:!0});var tht=s(qq);S1o=r(tht,"AutoProcessor.from_pretrained()"),tht.forEach(t),R1o=r(qQe," class method."),qQe.forEach(t),P1o=i(rl),Ry=n(rl,"P",{});var jQe=s(Ry);B1o=r(jQe,"This class cannot be instantiated directly using "),Qde=n(jQe,"CODE",{});var aht=s(Qde);I1o=r(aht,"__init__()"),aht.forEach(t),N1o=r(jQe," (throws an error)."),jQe.forEach(t),q1o=i(rl),Je=n(rl,"DIV",{class:!0});var sa=s(Je);T(Py.$$.fragment,sa),j1o=i(sa),Wde=n(sa,"P",{});var nht=s(Wde);D1o=r(nht,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),nht.forEach(t),G1o=i(sa),Gi=n(sa,"P",{});var zre=s(Gi);O1o=r(zre,"The processor class to instantiate is selected based on the "),Hde=n(zre,"CODE",{});var sht=s(Hde);V1o=r(sht,"model_type"),sht.forEach(t),X1o=r(zre,` property of the config object (either
passed as an argument or loaded from `),Ude=n(zre,"CODE",{});var lht=s(Ude);z1o=r(lht,"pretrained_model_name_or_path"),lht.forEach(t),Q1o=r(zre," if possible):"),zre.forEach(t),W1o=i(sa),ue=n(sa,"UL",{});var be=s(ue);Tu=n(be,"LI",{});var Q9e=s(Tu);Jde=n(Q9e,"STRONG",{});var iht=s(Jde);H1o=r(iht,"clip"),iht.forEach(t),U1o=r(Q9e," \u2014 "),jq=n(Q9e,"A",{href:!0});var dht=s(jq);J1o=r(dht,"CLIPProcessor"),dht.forEach(t),Y1o=r(Q9e," (CLIP model)"),Q9e.forEach(t),K1o=i(be),Mu=n(be,"LI",{});var W9e=s(Mu);Yde=n(W9e,"STRONG",{});var cht=s(Yde);Z1o=r(cht,"flava"),cht.forEach(t),eFo=r(W9e," \u2014 "),Dq=n(W9e,"A",{href:!0});var mht=s(Dq);oFo=r(mht,"FlavaProcessor"),mht.forEach(t),rFo=r(W9e," (FLAVA model)"),W9e.forEach(t),tFo=i(be),Eu=n(be,"LI",{});var H9e=s(Eu);Kde=n(H9e,"STRONG",{});var fht=s(Kde);aFo=r(fht,"groupvit"),fht.forEach(t),nFo=r(H9e," \u2014 "),Gq=n(H9e,"A",{href:!0});var ght=s(Gq);sFo=r(ght,"CLIPProcessor"),ght.forEach(t),lFo=r(H9e," (GroupViT model)"),H9e.forEach(t),iFo=i(be),Cu=n(be,"LI",{});var U9e=s(Cu);Zde=n(U9e,"STRONG",{});var hht=s(Zde);dFo=r(hht,"layoutlmv2"),hht.forEach(t),cFo=r(U9e," \u2014 "),Oq=n(U9e,"A",{href:!0});var uht=s(Oq);mFo=r(uht,"LayoutLMv2Processor"),uht.forEach(t),fFo=r(U9e," (LayoutLMv2 model)"),U9e.forEach(t),gFo=i(be),wu=n(be,"LI",{});var J9e=s(wu);ece=n(J9e,"STRONG",{});var pht=s(ece);hFo=r(pht,"layoutlmv3"),pht.forEach(t),uFo=r(J9e," \u2014 "),Vq=n(J9e,"A",{href:!0});var _ht=s(Vq);pFo=r(_ht,"LayoutLMv3Processor"),_ht.forEach(t),_Fo=r(J9e," (LayoutLMv3 model)"),J9e.forEach(t),bFo=i(be),Au=n(be,"LI",{});var Y9e=s(Au);oce=n(Y9e,"STRONG",{});var bht=s(oce);vFo=r(bht,"layoutxlm"),bht.forEach(t),FFo=r(Y9e," \u2014 "),Xq=n(Y9e,"A",{href:!0});var vht=s(Xq);TFo=r(vht,"LayoutXLMProcessor"),vht.forEach(t),MFo=r(Y9e," (LayoutXLM model)"),Y9e.forEach(t),EFo=i(be),Lu=n(be,"LI",{});var K9e=s(Lu);rce=n(K9e,"STRONG",{});var Fht=s(rce);CFo=r(Fht,"sew"),Fht.forEach(t),wFo=r(K9e," \u2014 "),zq=n(K9e,"A",{href:!0});var Tht=s(zq);AFo=r(Tht,"Wav2Vec2Processor"),Tht.forEach(t),LFo=r(K9e," (SEW model)"),K9e.forEach(t),yFo=i(be),yu=n(be,"LI",{});var Z9e=s(yu);tce=n(Z9e,"STRONG",{});var Mht=s(tce);xFo=r(Mht,"sew-d"),Mht.forEach(t),$Fo=r(Z9e," \u2014 "),Qq=n(Z9e,"A",{href:!0});var Eht=s(Qq);kFo=r(Eht,"Wav2Vec2Processor"),Eht.forEach(t),SFo=r(Z9e," (SEW-D model)"),Z9e.forEach(t),RFo=i(be),xu=n(be,"LI",{});var exe=s(xu);ace=n(exe,"STRONG",{});var Cht=s(ace);PFo=r(Cht,"speech_to_text"),Cht.forEach(t),BFo=r(exe," \u2014 "),Wq=n(exe,"A",{href:!0});var wht=s(Wq);IFo=r(wht,"Speech2TextProcessor"),wht.forEach(t),NFo=r(exe," (Speech2Text model)"),exe.forEach(t),qFo=i(be),$u=n(be,"LI",{});var oxe=s($u);nce=n(oxe,"STRONG",{});var Aht=s(nce);jFo=r(Aht,"speech_to_text_2"),Aht.forEach(t),DFo=r(oxe," \u2014 "),Hq=n(oxe,"A",{href:!0});var Lht=s(Hq);GFo=r(Lht,"Speech2Text2Processor"),Lht.forEach(t),OFo=r(oxe," (Speech2Text2 model)"),oxe.forEach(t),VFo=i(be),ku=n(be,"LI",{});var rxe=s(ku);sce=n(rxe,"STRONG",{});var yht=s(sce);XFo=r(yht,"trocr"),yht.forEach(t),zFo=r(rxe," \u2014 "),Uq=n(rxe,"A",{href:!0});var xht=s(Uq);QFo=r(xht,"TrOCRProcessor"),xht.forEach(t),WFo=r(rxe," (TrOCR model)"),rxe.forEach(t),HFo=i(be),Su=n(be,"LI",{});var txe=s(Su);lce=n(txe,"STRONG",{});var $ht=s(lce);UFo=r($ht,"unispeech"),$ht.forEach(t),JFo=r(txe," \u2014 "),Jq=n(txe,"A",{href:!0});var kht=s(Jq);YFo=r(kht,"Wav2Vec2Processor"),kht.forEach(t),KFo=r(txe," (UniSpeech model)"),txe.forEach(t),ZFo=i(be),Ru=n(be,"LI",{});var axe=s(Ru);ice=n(axe,"STRONG",{});var Sht=s(ice);eTo=r(Sht,"unispeech-sat"),Sht.forEach(t),oTo=r(axe," \u2014 "),Yq=n(axe,"A",{href:!0});var Rht=s(Yq);rTo=r(Rht,"Wav2Vec2Processor"),Rht.forEach(t),tTo=r(axe," (UniSpeechSat model)"),axe.forEach(t),aTo=i(be),Pu=n(be,"LI",{});var nxe=s(Pu);dce=n(nxe,"STRONG",{});var Pht=s(dce);nTo=r(Pht,"vilt"),Pht.forEach(t),sTo=r(nxe," \u2014 "),Kq=n(nxe,"A",{href:!0});var Bht=s(Kq);lTo=r(Bht,"ViltProcessor"),Bht.forEach(t),iTo=r(nxe," (ViLT model)"),nxe.forEach(t),dTo=i(be),Bu=n(be,"LI",{});var sxe=s(Bu);cce=n(sxe,"STRONG",{});var Iht=s(cce);cTo=r(Iht,"vision-text-dual-encoder"),Iht.forEach(t),mTo=r(sxe," \u2014 "),Zq=n(sxe,"A",{href:!0});var Nht=s(Zq);fTo=r(Nht,"VisionTextDualEncoderProcessor"),Nht.forEach(t),gTo=r(sxe," (VisionTextDualEncoder model)"),sxe.forEach(t),hTo=i(be),Iu=n(be,"LI",{});var lxe=s(Iu);mce=n(lxe,"STRONG",{});var qht=s(mce);uTo=r(qht,"wav2vec2"),qht.forEach(t),pTo=r(lxe," \u2014 "),ej=n(lxe,"A",{href:!0});var jht=s(ej);_To=r(jht,"Wav2Vec2Processor"),jht.forEach(t),bTo=r(lxe," (Wav2Vec2 model)"),lxe.forEach(t),vTo=i(be),Nu=n(be,"LI",{});var ixe=s(Nu);fce=n(ixe,"STRONG",{});var Dht=s(fce);FTo=r(Dht,"wav2vec2-conformer"),Dht.forEach(t),TTo=r(ixe," \u2014 "),oj=n(ixe,"A",{href:!0});var Ght=s(oj);MTo=r(Ght,"Wav2Vec2Processor"),Ght.forEach(t),ETo=r(ixe," (Wav2Vec2-Conformer model)"),ixe.forEach(t),CTo=i(be),qu=n(be,"LI",{});var dxe=s(qu);gce=n(dxe,"STRONG",{});var Oht=s(gce);wTo=r(Oht,"wavlm"),Oht.forEach(t),ATo=r(dxe," \u2014 "),rj=n(dxe,"A",{href:!0});var Vht=s(rj);LTo=r(Vht,"Wav2Vec2Processor"),Vht.forEach(t),yTo=r(dxe," (WavLM model)"),dxe.forEach(t),be.forEach(t),xTo=i(sa),T(ju.$$.fragment,sa),$To=i(sa),T(Du.$$.fragment,sa),sa.forEach(t),kTo=i(rl),Gu=n(rl,"DIV",{class:!0});var DQe=s(Gu);T(By.$$.fragment,DQe),STo=i(DQe),hce=n(DQe,"P",{});var Xht=s(hce);RTo=r(Xht,"Register a new processor for this class."),Xht.forEach(t),DQe.forEach(t),rl.forEach(t),BXe=i(m),Oi=n(m,"H2",{class:!0});var GQe=s(Oi);Ou=n(GQe,"A",{id:!0,class:!0,href:!0});var zht=s(Ou);uce=n(zht,"SPAN",{});var Qht=s(uce);T(Iy.$$.fragment,Qht),Qht.forEach(t),zht.forEach(t),PTo=i(GQe),pce=n(GQe,"SPAN",{});var Wht=s(pce);BTo=r(Wht,"AutoModel"),Wht.forEach(t),GQe.forEach(t),IXe=i(m),ko=n(m,"DIV",{class:!0});var tl=s(ko);T(Ny.$$.fragment,tl),ITo=i(tl),Vi=n(tl,"P",{});var Qre=s(Vi);NTo=r(Qre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tj=n(Qre,"A",{href:!0});var Hht=s(tj);qTo=r(Hht,"from_pretrained()"),Hht.forEach(t),jTo=r(Qre," class method or the "),aj=n(Qre,"A",{href:!0});var Uht=s(aj);DTo=r(Uht,"from_config()"),Uht.forEach(t),GTo=r(Qre,` class
method.`),Qre.forEach(t),OTo=i(tl),qy=n(tl,"P",{});var OQe=s(qy);VTo=r(OQe,"This class cannot be instantiated directly using "),_ce=n(OQe,"CODE",{});var Jht=s(_ce);XTo=r(Jht,"__init__()"),Jht.forEach(t),zTo=r(OQe," (throws an error)."),OQe.forEach(t),QTo=i(tl),it=n(tl,"DIV",{class:!0});var h7=s(it);T(jy.$$.fragment,h7),WTo=i(h7),bce=n(h7,"P",{});var Yht=s(bce);HTo=r(Yht,"Instantiates one of the base model classes of the library from a configuration."),Yht.forEach(t),UTo=i(h7),Xi=n(h7,"P",{});var Wre=s(Xi);JTo=r(Wre,`Note:
Loading a model from its configuration file does `),vce=n(Wre,"STRONG",{});var Kht=s(vce);YTo=r(Kht,"not"),Kht.forEach(t),KTo=r(Wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),nj=n(Wre,"A",{href:!0});var Zht=s(nj);ZTo=r(Zht,"from_pretrained()"),Zht.forEach(t),eMo=r(Wre," to load the model weights."),Wre.forEach(t),oMo=i(h7),T(Vu.$$.fragment,h7),h7.forEach(t),rMo=i(tl),Ye=n(tl,"DIV",{class:!0});var la=s(Ye);T(Dy.$$.fragment,la),tMo=i(la),Fce=n(la,"P",{});var eut=s(Fce);aMo=r(eut,"Instantiate one of the base model classes of the library from a pretrained model."),eut.forEach(t),nMo=i(la),Ia=n(la,"P",{});var u7=s(Ia);sMo=r(u7,"The model class to instantiate is selected based on the "),Tce=n(u7,"CODE",{});var out=s(Tce);lMo=r(out,"model_type"),out.forEach(t),iMo=r(u7,` property of the config object (either
passed as an argument or loaded from `),Mce=n(u7,"CODE",{});var rut=s(Mce);dMo=r(rut,"pretrained_model_name_or_path"),rut.forEach(t),cMo=r(u7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ece=n(u7,"CODE",{});var tut=s(Ece);mMo=r(tut,"pretrained_model_name_or_path"),tut.forEach(t),fMo=r(u7,":"),u7.forEach(t),gMo=i(la),y=n(la,"UL",{});var x=s(y);Xu=n(x,"LI",{});var cxe=s(Xu);Cce=n(cxe,"STRONG",{});var aut=s(Cce);hMo=r(aut,"albert"),aut.forEach(t),uMo=r(cxe," \u2014 "),sj=n(cxe,"A",{href:!0});var nut=s(sj);pMo=r(nut,"AlbertModel"),nut.forEach(t),_Mo=r(cxe," (ALBERT model)"),cxe.forEach(t),bMo=i(x),zu=n(x,"LI",{});var mxe=s(zu);wce=n(mxe,"STRONG",{});var sut=s(wce);vMo=r(sut,"bart"),sut.forEach(t),FMo=r(mxe," \u2014 "),lj=n(mxe,"A",{href:!0});var lut=s(lj);TMo=r(lut,"BartModel"),lut.forEach(t),MMo=r(mxe," (BART model)"),mxe.forEach(t),EMo=i(x),Qu=n(x,"LI",{});var fxe=s(Qu);Ace=n(fxe,"STRONG",{});var iut=s(Ace);CMo=r(iut,"beit"),iut.forEach(t),wMo=r(fxe," \u2014 "),ij=n(fxe,"A",{href:!0});var dut=s(ij);AMo=r(dut,"BeitModel"),dut.forEach(t),LMo=r(fxe," (BEiT model)"),fxe.forEach(t),yMo=i(x),Wu=n(x,"LI",{});var gxe=s(Wu);Lce=n(gxe,"STRONG",{});var cut=s(Lce);xMo=r(cut,"bert"),cut.forEach(t),$Mo=r(gxe," \u2014 "),dj=n(gxe,"A",{href:!0});var mut=s(dj);kMo=r(mut,"BertModel"),mut.forEach(t),SMo=r(gxe," (BERT model)"),gxe.forEach(t),RMo=i(x),Hu=n(x,"LI",{});var hxe=s(Hu);yce=n(hxe,"STRONG",{});var fut=s(yce);PMo=r(fut,"bert-generation"),fut.forEach(t),BMo=r(hxe," \u2014 "),cj=n(hxe,"A",{href:!0});var gut=s(cj);IMo=r(gut,"BertGenerationEncoder"),gut.forEach(t),NMo=r(hxe," (Bert Generation model)"),hxe.forEach(t),qMo=i(x),Uu=n(x,"LI",{});var uxe=s(Uu);xce=n(uxe,"STRONG",{});var hut=s(xce);jMo=r(hut,"big_bird"),hut.forEach(t),DMo=r(uxe," \u2014 "),mj=n(uxe,"A",{href:!0});var uut=s(mj);GMo=r(uut,"BigBirdModel"),uut.forEach(t),OMo=r(uxe," (BigBird model)"),uxe.forEach(t),VMo=i(x),Ju=n(x,"LI",{});var pxe=s(Ju);$ce=n(pxe,"STRONG",{});var put=s($ce);XMo=r(put,"bigbird_pegasus"),put.forEach(t),zMo=r(pxe," \u2014 "),fj=n(pxe,"A",{href:!0});var _ut=s(fj);QMo=r(_ut,"BigBirdPegasusModel"),_ut.forEach(t),WMo=r(pxe," (BigBird-Pegasus model)"),pxe.forEach(t),HMo=i(x),Yu=n(x,"LI",{});var _xe=s(Yu);kce=n(_xe,"STRONG",{});var but=s(kce);UMo=r(but,"blenderbot"),but.forEach(t),JMo=r(_xe," \u2014 "),gj=n(_xe,"A",{href:!0});var vut=s(gj);YMo=r(vut,"BlenderbotModel"),vut.forEach(t),KMo=r(_xe," (Blenderbot model)"),_xe.forEach(t),ZMo=i(x),Ku=n(x,"LI",{});var bxe=s(Ku);Sce=n(bxe,"STRONG",{});var Fut=s(Sce);e4o=r(Fut,"blenderbot-small"),Fut.forEach(t),o4o=r(bxe," \u2014 "),hj=n(bxe,"A",{href:!0});var Tut=s(hj);r4o=r(Tut,"BlenderbotSmallModel"),Tut.forEach(t),t4o=r(bxe," (BlenderbotSmall model)"),bxe.forEach(t),a4o=i(x),Zu=n(x,"LI",{});var vxe=s(Zu);Rce=n(vxe,"STRONG",{});var Mut=s(Rce);n4o=r(Mut,"bloom"),Mut.forEach(t),s4o=r(vxe," \u2014 "),uj=n(vxe,"A",{href:!0});var Eut=s(uj);l4o=r(Eut,"BloomModel"),Eut.forEach(t),i4o=r(vxe," (BLOOM model)"),vxe.forEach(t),d4o=i(x),ep=n(x,"LI",{});var Fxe=s(ep);Pce=n(Fxe,"STRONG",{});var Cut=s(Pce);c4o=r(Cut,"camembert"),Cut.forEach(t),m4o=r(Fxe," \u2014 "),pj=n(Fxe,"A",{href:!0});var wut=s(pj);f4o=r(wut,"CamembertModel"),wut.forEach(t),g4o=r(Fxe," (CamemBERT model)"),Fxe.forEach(t),h4o=i(x),op=n(x,"LI",{});var Txe=s(op);Bce=n(Txe,"STRONG",{});var Aut=s(Bce);u4o=r(Aut,"canine"),Aut.forEach(t),p4o=r(Txe," \u2014 "),_j=n(Txe,"A",{href:!0});var Lut=s(_j);_4o=r(Lut,"CanineModel"),Lut.forEach(t),b4o=r(Txe," (CANINE model)"),Txe.forEach(t),v4o=i(x),rp=n(x,"LI",{});var Mxe=s(rp);Ice=n(Mxe,"STRONG",{});var yut=s(Ice);F4o=r(yut,"clip"),yut.forEach(t),T4o=r(Mxe," \u2014 "),bj=n(Mxe,"A",{href:!0});var xut=s(bj);M4o=r(xut,"CLIPModel"),xut.forEach(t),E4o=r(Mxe," (CLIP model)"),Mxe.forEach(t),C4o=i(x),tp=n(x,"LI",{});var Exe=s(tp);Nce=n(Exe,"STRONG",{});var $ut=s(Nce);w4o=r($ut,"codegen"),$ut.forEach(t),A4o=r(Exe," \u2014 "),vj=n(Exe,"A",{href:!0});var kut=s(vj);L4o=r(kut,"CodeGenModel"),kut.forEach(t),y4o=r(Exe," (CodeGen model)"),Exe.forEach(t),x4o=i(x),ap=n(x,"LI",{});var Cxe=s(ap);qce=n(Cxe,"STRONG",{});var Sut=s(qce);$4o=r(Sut,"convbert"),Sut.forEach(t),k4o=r(Cxe," \u2014 "),Fj=n(Cxe,"A",{href:!0});var Rut=s(Fj);S4o=r(Rut,"ConvBertModel"),Rut.forEach(t),R4o=r(Cxe," (ConvBERT model)"),Cxe.forEach(t),P4o=i(x),np=n(x,"LI",{});var wxe=s(np);jce=n(wxe,"STRONG",{});var Put=s(jce);B4o=r(Put,"convnext"),Put.forEach(t),I4o=r(wxe," \u2014 "),Tj=n(wxe,"A",{href:!0});var But=s(Tj);N4o=r(But,"ConvNextModel"),But.forEach(t),q4o=r(wxe," (ConvNeXT model)"),wxe.forEach(t),j4o=i(x),sp=n(x,"LI",{});var Axe=s(sp);Dce=n(Axe,"STRONG",{});var Iut=s(Dce);D4o=r(Iut,"ctrl"),Iut.forEach(t),G4o=r(Axe," \u2014 "),Mj=n(Axe,"A",{href:!0});var Nut=s(Mj);O4o=r(Nut,"CTRLModel"),Nut.forEach(t),V4o=r(Axe," (CTRL model)"),Axe.forEach(t),X4o=i(x),lp=n(x,"LI",{});var Lxe=s(lp);Gce=n(Lxe,"STRONG",{});var qut=s(Gce);z4o=r(qut,"cvt"),qut.forEach(t),Q4o=r(Lxe," \u2014 "),Ej=n(Lxe,"A",{href:!0});var jut=s(Ej);W4o=r(jut,"CvtModel"),jut.forEach(t),H4o=r(Lxe," (CvT model)"),Lxe.forEach(t),U4o=i(x),ip=n(x,"LI",{});var yxe=s(ip);Oce=n(yxe,"STRONG",{});var Dut=s(Oce);J4o=r(Dut,"data2vec-audio"),Dut.forEach(t),Y4o=r(yxe," \u2014 "),Cj=n(yxe,"A",{href:!0});var Gut=s(Cj);K4o=r(Gut,"Data2VecAudioModel"),Gut.forEach(t),Z4o=r(yxe," (Data2VecAudio model)"),yxe.forEach(t),eEo=i(x),dp=n(x,"LI",{});var xxe=s(dp);Vce=n(xxe,"STRONG",{});var Out=s(Vce);oEo=r(Out,"data2vec-text"),Out.forEach(t),rEo=r(xxe," \u2014 "),wj=n(xxe,"A",{href:!0});var Vut=s(wj);tEo=r(Vut,"Data2VecTextModel"),Vut.forEach(t),aEo=r(xxe," (Data2VecText model)"),xxe.forEach(t),nEo=i(x),cp=n(x,"LI",{});var $xe=s(cp);Xce=n($xe,"STRONG",{});var Xut=s(Xce);sEo=r(Xut,"data2vec-vision"),Xut.forEach(t),lEo=r($xe," \u2014 "),Aj=n($xe,"A",{href:!0});var zut=s(Aj);iEo=r(zut,"Data2VecVisionModel"),zut.forEach(t),dEo=r($xe," (Data2VecVision model)"),$xe.forEach(t),cEo=i(x),mp=n(x,"LI",{});var kxe=s(mp);zce=n(kxe,"STRONG",{});var Qut=s(zce);mEo=r(Qut,"deberta"),Qut.forEach(t),fEo=r(kxe," \u2014 "),Lj=n(kxe,"A",{href:!0});var Wut=s(Lj);gEo=r(Wut,"DebertaModel"),Wut.forEach(t),hEo=r(kxe," (DeBERTa model)"),kxe.forEach(t),uEo=i(x),fp=n(x,"LI",{});var Sxe=s(fp);Qce=n(Sxe,"STRONG",{});var Hut=s(Qce);pEo=r(Hut,"deberta-v2"),Hut.forEach(t),_Eo=r(Sxe," \u2014 "),yj=n(Sxe,"A",{href:!0});var Uut=s(yj);bEo=r(Uut,"DebertaV2Model"),Uut.forEach(t),vEo=r(Sxe," (DeBERTa-v2 model)"),Sxe.forEach(t),FEo=i(x),gp=n(x,"LI",{});var Rxe=s(gp);Wce=n(Rxe,"STRONG",{});var Jut=s(Wce);TEo=r(Jut,"decision_transformer"),Jut.forEach(t),MEo=r(Rxe," \u2014 "),xj=n(Rxe,"A",{href:!0});var Yut=s(xj);EEo=r(Yut,"DecisionTransformerModel"),Yut.forEach(t),CEo=r(Rxe," (Decision Transformer model)"),Rxe.forEach(t),wEo=i(x),hp=n(x,"LI",{});var Pxe=s(hp);Hce=n(Pxe,"STRONG",{});var Kut=s(Hce);AEo=r(Kut,"deit"),Kut.forEach(t),LEo=r(Pxe," \u2014 "),$j=n(Pxe,"A",{href:!0});var Zut=s($j);yEo=r(Zut,"DeiTModel"),Zut.forEach(t),xEo=r(Pxe," (DeiT model)"),Pxe.forEach(t),$Eo=i(x),up=n(x,"LI",{});var Bxe=s(up);Uce=n(Bxe,"STRONG",{});var ept=s(Uce);kEo=r(ept,"detr"),ept.forEach(t),SEo=r(Bxe," \u2014 "),kj=n(Bxe,"A",{href:!0});var opt=s(kj);REo=r(opt,"DetrModel"),opt.forEach(t),PEo=r(Bxe," (DETR model)"),Bxe.forEach(t),BEo=i(x),pp=n(x,"LI",{});var Ixe=s(pp);Jce=n(Ixe,"STRONG",{});var rpt=s(Jce);IEo=r(rpt,"distilbert"),rpt.forEach(t),NEo=r(Ixe," \u2014 "),Sj=n(Ixe,"A",{href:!0});var tpt=s(Sj);qEo=r(tpt,"DistilBertModel"),tpt.forEach(t),jEo=r(Ixe," (DistilBERT model)"),Ixe.forEach(t),DEo=i(x),_p=n(x,"LI",{});var Nxe=s(_p);Yce=n(Nxe,"STRONG",{});var apt=s(Yce);GEo=r(apt,"dpr"),apt.forEach(t),OEo=r(Nxe," \u2014 "),Rj=n(Nxe,"A",{href:!0});var npt=s(Rj);VEo=r(npt,"DPRQuestionEncoder"),npt.forEach(t),XEo=r(Nxe," (DPR model)"),Nxe.forEach(t),zEo=i(x),bp=n(x,"LI",{});var qxe=s(bp);Kce=n(qxe,"STRONG",{});var spt=s(Kce);QEo=r(spt,"dpt"),spt.forEach(t),WEo=r(qxe," \u2014 "),Pj=n(qxe,"A",{href:!0});var lpt=s(Pj);HEo=r(lpt,"DPTModel"),lpt.forEach(t),UEo=r(qxe," (DPT model)"),qxe.forEach(t),JEo=i(x),vp=n(x,"LI",{});var jxe=s(vp);Zce=n(jxe,"STRONG",{});var ipt=s(Zce);YEo=r(ipt,"electra"),ipt.forEach(t),KEo=r(jxe," \u2014 "),Bj=n(jxe,"A",{href:!0});var dpt=s(Bj);ZEo=r(dpt,"ElectraModel"),dpt.forEach(t),eCo=r(jxe," (ELECTRA model)"),jxe.forEach(t),oCo=i(x),Fp=n(x,"LI",{});var Dxe=s(Fp);eme=n(Dxe,"STRONG",{});var cpt=s(eme);rCo=r(cpt,"flaubert"),cpt.forEach(t),tCo=r(Dxe," \u2014 "),Ij=n(Dxe,"A",{href:!0});var mpt=s(Ij);aCo=r(mpt,"FlaubertModel"),mpt.forEach(t),nCo=r(Dxe," (FlauBERT model)"),Dxe.forEach(t),sCo=i(x),Tp=n(x,"LI",{});var Gxe=s(Tp);ome=n(Gxe,"STRONG",{});var fpt=s(ome);lCo=r(fpt,"flava"),fpt.forEach(t),iCo=r(Gxe," \u2014 "),Nj=n(Gxe,"A",{href:!0});var gpt=s(Nj);dCo=r(gpt,"FlavaModel"),gpt.forEach(t),cCo=r(Gxe," (FLAVA model)"),Gxe.forEach(t),mCo=i(x),Mp=n(x,"LI",{});var Oxe=s(Mp);rme=n(Oxe,"STRONG",{});var hpt=s(rme);fCo=r(hpt,"fnet"),hpt.forEach(t),gCo=r(Oxe," \u2014 "),qj=n(Oxe,"A",{href:!0});var upt=s(qj);hCo=r(upt,"FNetModel"),upt.forEach(t),uCo=r(Oxe," (FNet model)"),Oxe.forEach(t),pCo=i(x),Ep=n(x,"LI",{});var Vxe=s(Ep);tme=n(Vxe,"STRONG",{});var ppt=s(tme);_Co=r(ppt,"fsmt"),ppt.forEach(t),bCo=r(Vxe," \u2014 "),jj=n(Vxe,"A",{href:!0});var _pt=s(jj);vCo=r(_pt,"FSMTModel"),_pt.forEach(t),FCo=r(Vxe," (FairSeq Machine-Translation model)"),Vxe.forEach(t),TCo=i(x),Hs=n(x,"LI",{});var NS=s(Hs);ame=n(NS,"STRONG",{});var bpt=s(ame);MCo=r(bpt,"funnel"),bpt.forEach(t),ECo=r(NS," \u2014 "),Dj=n(NS,"A",{href:!0});var vpt=s(Dj);CCo=r(vpt,"FunnelModel"),vpt.forEach(t),wCo=r(NS," or "),Gj=n(NS,"A",{href:!0});var Fpt=s(Gj);ACo=r(Fpt,"FunnelBaseModel"),Fpt.forEach(t),LCo=r(NS," (Funnel Transformer model)"),NS.forEach(t),yCo=i(x),Cp=n(x,"LI",{});var Xxe=s(Cp);nme=n(Xxe,"STRONG",{});var Tpt=s(nme);xCo=r(Tpt,"glpn"),Tpt.forEach(t),$Co=r(Xxe," \u2014 "),Oj=n(Xxe,"A",{href:!0});var Mpt=s(Oj);kCo=r(Mpt,"GLPNModel"),Mpt.forEach(t),SCo=r(Xxe," (GLPN model)"),Xxe.forEach(t),RCo=i(x),wp=n(x,"LI",{});var zxe=s(wp);sme=n(zxe,"STRONG",{});var Ept=s(sme);PCo=r(Ept,"gpt2"),Ept.forEach(t),BCo=r(zxe," \u2014 "),Vj=n(zxe,"A",{href:!0});var Cpt=s(Vj);ICo=r(Cpt,"GPT2Model"),Cpt.forEach(t),NCo=r(zxe," (OpenAI GPT-2 model)"),zxe.forEach(t),qCo=i(x),Ap=n(x,"LI",{});var Qxe=s(Ap);lme=n(Qxe,"STRONG",{});var wpt=s(lme);jCo=r(wpt,"gpt_neo"),wpt.forEach(t),DCo=r(Qxe," \u2014 "),Xj=n(Qxe,"A",{href:!0});var Apt=s(Xj);GCo=r(Apt,"GPTNeoModel"),Apt.forEach(t),OCo=r(Qxe," (GPT Neo model)"),Qxe.forEach(t),VCo=i(x),Lp=n(x,"LI",{});var Wxe=s(Lp);ime=n(Wxe,"STRONG",{});var Lpt=s(ime);XCo=r(Lpt,"gpt_neox"),Lpt.forEach(t),zCo=r(Wxe," \u2014 "),zj=n(Wxe,"A",{href:!0});var ypt=s(zj);QCo=r(ypt,"GPTNeoXModel"),ypt.forEach(t),WCo=r(Wxe," (GPT NeoX model)"),Wxe.forEach(t),HCo=i(x),yp=n(x,"LI",{});var Hxe=s(yp);dme=n(Hxe,"STRONG",{});var xpt=s(dme);UCo=r(xpt,"gptj"),xpt.forEach(t),JCo=r(Hxe," \u2014 "),Qj=n(Hxe,"A",{href:!0});var $pt=s(Qj);YCo=r($pt,"GPTJModel"),$pt.forEach(t),KCo=r(Hxe," (GPT-J model)"),Hxe.forEach(t),ZCo=i(x),xp=n(x,"LI",{});var Uxe=s(xp);cme=n(Uxe,"STRONG",{});var kpt=s(cme);e3o=r(kpt,"groupvit"),kpt.forEach(t),o3o=r(Uxe," \u2014 "),Wj=n(Uxe,"A",{href:!0});var Spt=s(Wj);r3o=r(Spt,"GroupViTModel"),Spt.forEach(t),t3o=r(Uxe," (GroupViT model)"),Uxe.forEach(t),a3o=i(x),$p=n(x,"LI",{});var Jxe=s($p);mme=n(Jxe,"STRONG",{});var Rpt=s(mme);n3o=r(Rpt,"hubert"),Rpt.forEach(t),s3o=r(Jxe," \u2014 "),Hj=n(Jxe,"A",{href:!0});var Ppt=s(Hj);l3o=r(Ppt,"HubertModel"),Ppt.forEach(t),i3o=r(Jxe," (Hubert model)"),Jxe.forEach(t),d3o=i(x),kp=n(x,"LI",{});var Yxe=s(kp);fme=n(Yxe,"STRONG",{});var Bpt=s(fme);c3o=r(Bpt,"ibert"),Bpt.forEach(t),m3o=r(Yxe," \u2014 "),Uj=n(Yxe,"A",{href:!0});var Ipt=s(Uj);f3o=r(Ipt,"IBertModel"),Ipt.forEach(t),g3o=r(Yxe," (I-BERT model)"),Yxe.forEach(t),h3o=i(x),Sp=n(x,"LI",{});var Kxe=s(Sp);gme=n(Kxe,"STRONG",{});var Npt=s(gme);u3o=r(Npt,"imagegpt"),Npt.forEach(t),p3o=r(Kxe," \u2014 "),Jj=n(Kxe,"A",{href:!0});var qpt=s(Jj);_3o=r(qpt,"ImageGPTModel"),qpt.forEach(t),b3o=r(Kxe," (ImageGPT model)"),Kxe.forEach(t),v3o=i(x),Rp=n(x,"LI",{});var Zxe=s(Rp);hme=n(Zxe,"STRONG",{});var jpt=s(hme);F3o=r(jpt,"layoutlm"),jpt.forEach(t),T3o=r(Zxe," \u2014 "),Yj=n(Zxe,"A",{href:!0});var Dpt=s(Yj);M3o=r(Dpt,"LayoutLMModel"),Dpt.forEach(t),E3o=r(Zxe," (LayoutLM model)"),Zxe.forEach(t),C3o=i(x),Pp=n(x,"LI",{});var e$e=s(Pp);ume=n(e$e,"STRONG",{});var Gpt=s(ume);w3o=r(Gpt,"layoutlmv2"),Gpt.forEach(t),A3o=r(e$e," \u2014 "),Kj=n(e$e,"A",{href:!0});var Opt=s(Kj);L3o=r(Opt,"LayoutLMv2Model"),Opt.forEach(t),y3o=r(e$e," (LayoutLMv2 model)"),e$e.forEach(t),x3o=i(x),Bp=n(x,"LI",{});var o$e=s(Bp);pme=n(o$e,"STRONG",{});var Vpt=s(pme);$3o=r(Vpt,"layoutlmv3"),Vpt.forEach(t),k3o=r(o$e," \u2014 "),Zj=n(o$e,"A",{href:!0});var Xpt=s(Zj);S3o=r(Xpt,"LayoutLMv3Model"),Xpt.forEach(t),R3o=r(o$e," (LayoutLMv3 model)"),o$e.forEach(t),P3o=i(x),Ip=n(x,"LI",{});var r$e=s(Ip);_me=n(r$e,"STRONG",{});var zpt=s(_me);B3o=r(zpt,"led"),zpt.forEach(t),I3o=r(r$e," \u2014 "),eD=n(r$e,"A",{href:!0});var Qpt=s(eD);N3o=r(Qpt,"LEDModel"),Qpt.forEach(t),q3o=r(r$e," (LED model)"),r$e.forEach(t),j3o=i(x),Np=n(x,"LI",{});var t$e=s(Np);bme=n(t$e,"STRONG",{});var Wpt=s(bme);D3o=r(Wpt,"levit"),Wpt.forEach(t),G3o=r(t$e," \u2014 "),oD=n(t$e,"A",{href:!0});var Hpt=s(oD);O3o=r(Hpt,"LevitModel"),Hpt.forEach(t),V3o=r(t$e," (LeViT model)"),t$e.forEach(t),X3o=i(x),qp=n(x,"LI",{});var a$e=s(qp);vme=n(a$e,"STRONG",{});var Upt=s(vme);z3o=r(Upt,"longformer"),Upt.forEach(t),Q3o=r(a$e," \u2014 "),rD=n(a$e,"A",{href:!0});var Jpt=s(rD);W3o=r(Jpt,"LongformerModel"),Jpt.forEach(t),H3o=r(a$e," (Longformer model)"),a$e.forEach(t),U3o=i(x),jp=n(x,"LI",{});var n$e=s(jp);Fme=n(n$e,"STRONG",{});var Ypt=s(Fme);J3o=r(Ypt,"longt5"),Ypt.forEach(t),Y3o=r(n$e," \u2014 "),tD=n(n$e,"A",{href:!0});var Kpt=s(tD);K3o=r(Kpt,"LongT5Model"),Kpt.forEach(t),Z3o=r(n$e," (LongT5 model)"),n$e.forEach(t),e5o=i(x),Dp=n(x,"LI",{});var s$e=s(Dp);Tme=n(s$e,"STRONG",{});var Zpt=s(Tme);o5o=r(Zpt,"luke"),Zpt.forEach(t),r5o=r(s$e," \u2014 "),aD=n(s$e,"A",{href:!0});var e_t=s(aD);t5o=r(e_t,"LukeModel"),e_t.forEach(t),a5o=r(s$e," (LUKE model)"),s$e.forEach(t),n5o=i(x),Gp=n(x,"LI",{});var l$e=s(Gp);Mme=n(l$e,"STRONG",{});var o_t=s(Mme);s5o=r(o_t,"lxmert"),o_t.forEach(t),l5o=r(l$e," \u2014 "),nD=n(l$e,"A",{href:!0});var r_t=s(nD);i5o=r(r_t,"LxmertModel"),r_t.forEach(t),d5o=r(l$e," (LXMERT model)"),l$e.forEach(t),c5o=i(x),Op=n(x,"LI",{});var i$e=s(Op);Eme=n(i$e,"STRONG",{});var t_t=s(Eme);m5o=r(t_t,"m2m_100"),t_t.forEach(t),f5o=r(i$e," \u2014 "),sD=n(i$e,"A",{href:!0});var a_t=s(sD);g5o=r(a_t,"M2M100Model"),a_t.forEach(t),h5o=r(i$e," (M2M100 model)"),i$e.forEach(t),u5o=i(x),Vp=n(x,"LI",{});var d$e=s(Vp);Cme=n(d$e,"STRONG",{});var n_t=s(Cme);p5o=r(n_t,"marian"),n_t.forEach(t),_5o=r(d$e," \u2014 "),lD=n(d$e,"A",{href:!0});var s_t=s(lD);b5o=r(s_t,"MarianModel"),s_t.forEach(t),v5o=r(d$e," (Marian model)"),d$e.forEach(t),F5o=i(x),Xp=n(x,"LI",{});var c$e=s(Xp);wme=n(c$e,"STRONG",{});var l_t=s(wme);T5o=r(l_t,"maskformer"),l_t.forEach(t),M5o=r(c$e," \u2014 "),iD=n(c$e,"A",{href:!0});var i_t=s(iD);E5o=r(i_t,"MaskFormerModel"),i_t.forEach(t),C5o=r(c$e," (MaskFormer model)"),c$e.forEach(t),w5o=i(x),zp=n(x,"LI",{});var m$e=s(zp);Ame=n(m$e,"STRONG",{});var d_t=s(Ame);A5o=r(d_t,"mbart"),d_t.forEach(t),L5o=r(m$e," \u2014 "),dD=n(m$e,"A",{href:!0});var c_t=s(dD);y5o=r(c_t,"MBartModel"),c_t.forEach(t),x5o=r(m$e," (mBART model)"),m$e.forEach(t),$5o=i(x),Qp=n(x,"LI",{});var f$e=s(Qp);Lme=n(f$e,"STRONG",{});var m_t=s(Lme);k5o=r(m_t,"mctct"),m_t.forEach(t),S5o=r(f$e," \u2014 "),cD=n(f$e,"A",{href:!0});var f_t=s(cD);R5o=r(f_t,"MCTCTModel"),f_t.forEach(t),P5o=r(f$e," (M-CTC-T model)"),f$e.forEach(t),B5o=i(x),Wp=n(x,"LI",{});var g$e=s(Wp);yme=n(g$e,"STRONG",{});var g_t=s(yme);I5o=r(g_t,"megatron-bert"),g_t.forEach(t),N5o=r(g$e," \u2014 "),mD=n(g$e,"A",{href:!0});var h_t=s(mD);q5o=r(h_t,"MegatronBertModel"),h_t.forEach(t),j5o=r(g$e," (Megatron-BERT model)"),g$e.forEach(t),D5o=i(x),Hp=n(x,"LI",{});var h$e=s(Hp);xme=n(h$e,"STRONG",{});var u_t=s(xme);G5o=r(u_t,"mobilebert"),u_t.forEach(t),O5o=r(h$e," \u2014 "),fD=n(h$e,"A",{href:!0});var p_t=s(fD);V5o=r(p_t,"MobileBertModel"),p_t.forEach(t),X5o=r(h$e," (MobileBERT model)"),h$e.forEach(t),z5o=i(x),Up=n(x,"LI",{});var u$e=s(Up);$me=n(u$e,"STRONG",{});var __t=s($me);Q5o=r(__t,"mobilevit"),__t.forEach(t),W5o=r(u$e," \u2014 "),gD=n(u$e,"A",{href:!0});var b_t=s(gD);H5o=r(b_t,"MobileViTModel"),b_t.forEach(t),U5o=r(u$e," (MobileViT model)"),u$e.forEach(t),J5o=i(x),Jp=n(x,"LI",{});var p$e=s(Jp);kme=n(p$e,"STRONG",{});var v_t=s(kme);Y5o=r(v_t,"mpnet"),v_t.forEach(t),K5o=r(p$e," \u2014 "),hD=n(p$e,"A",{href:!0});var F_t=s(hD);Z5o=r(F_t,"MPNetModel"),F_t.forEach(t),e0o=r(p$e," (MPNet model)"),p$e.forEach(t),o0o=i(x),Yp=n(x,"LI",{});var _$e=s(Yp);Sme=n(_$e,"STRONG",{});var T_t=s(Sme);r0o=r(T_t,"mt5"),T_t.forEach(t),t0o=r(_$e," \u2014 "),uD=n(_$e,"A",{href:!0});var M_t=s(uD);a0o=r(M_t,"MT5Model"),M_t.forEach(t),n0o=r(_$e," (MT5 model)"),_$e.forEach(t),s0o=i(x),Kp=n(x,"LI",{});var b$e=s(Kp);Rme=n(b$e,"STRONG",{});var E_t=s(Rme);l0o=r(E_t,"mvp"),E_t.forEach(t),i0o=r(b$e," \u2014 "),pD=n(b$e,"A",{href:!0});var C_t=s(pD);d0o=r(C_t,"MvpModel"),C_t.forEach(t),c0o=r(b$e," (MVP model)"),b$e.forEach(t),m0o=i(x),Zp=n(x,"LI",{});var v$e=s(Zp);Pme=n(v$e,"STRONG",{});var w_t=s(Pme);f0o=r(w_t,"nezha"),w_t.forEach(t),g0o=r(v$e," \u2014 "),_D=n(v$e,"A",{href:!0});var A_t=s(_D);h0o=r(A_t,"NezhaModel"),A_t.forEach(t),u0o=r(v$e," (Nezha model)"),v$e.forEach(t),p0o=i(x),e_=n(x,"LI",{});var F$e=s(e_);Bme=n(F$e,"STRONG",{});var L_t=s(Bme);_0o=r(L_t,"nllb"),L_t.forEach(t),b0o=r(F$e," \u2014 "),bD=n(F$e,"A",{href:!0});var y_t=s(bD);v0o=r(y_t,"M2M100Model"),y_t.forEach(t),F0o=r(F$e," (NLLB model)"),F$e.forEach(t),T0o=i(x),o_=n(x,"LI",{});var T$e=s(o_);Ime=n(T$e,"STRONG",{});var x_t=s(Ime);M0o=r(x_t,"nystromformer"),x_t.forEach(t),E0o=r(T$e," \u2014 "),vD=n(T$e,"A",{href:!0});var $_t=s(vD);C0o=r($_t,"NystromformerModel"),$_t.forEach(t),w0o=r(T$e," (Nystr\xF6mformer model)"),T$e.forEach(t),A0o=i(x),r_=n(x,"LI",{});var M$e=s(r_);Nme=n(M$e,"STRONG",{});var k_t=s(Nme);L0o=r(k_t,"openai-gpt"),k_t.forEach(t),y0o=r(M$e," \u2014 "),FD=n(M$e,"A",{href:!0});var S_t=s(FD);x0o=r(S_t,"OpenAIGPTModel"),S_t.forEach(t),$0o=r(M$e," (OpenAI GPT model)"),M$e.forEach(t),k0o=i(x),t_=n(x,"LI",{});var E$e=s(t_);qme=n(E$e,"STRONG",{});var R_t=s(qme);S0o=r(R_t,"opt"),R_t.forEach(t),R0o=r(E$e," \u2014 "),TD=n(E$e,"A",{href:!0});var P_t=s(TD);P0o=r(P_t,"OPTModel"),P_t.forEach(t),B0o=r(E$e," (OPT model)"),E$e.forEach(t),I0o=i(x),a_=n(x,"LI",{});var C$e=s(a_);jme=n(C$e,"STRONG",{});var B_t=s(jme);N0o=r(B_t,"pegasus"),B_t.forEach(t),q0o=r(C$e," \u2014 "),MD=n(C$e,"A",{href:!0});var I_t=s(MD);j0o=r(I_t,"PegasusModel"),I_t.forEach(t),D0o=r(C$e," (Pegasus model)"),C$e.forEach(t),G0o=i(x),n_=n(x,"LI",{});var w$e=s(n_);Dme=n(w$e,"STRONG",{});var N_t=s(Dme);O0o=r(N_t,"perceiver"),N_t.forEach(t),V0o=r(w$e," \u2014 "),ED=n(w$e,"A",{href:!0});var q_t=s(ED);X0o=r(q_t,"PerceiverModel"),q_t.forEach(t),z0o=r(w$e," (Perceiver model)"),w$e.forEach(t),Q0o=i(x),s_=n(x,"LI",{});var A$e=s(s_);Gme=n(A$e,"STRONG",{});var j_t=s(Gme);W0o=r(j_t,"plbart"),j_t.forEach(t),H0o=r(A$e," \u2014 "),CD=n(A$e,"A",{href:!0});var D_t=s(CD);U0o=r(D_t,"PLBartModel"),D_t.forEach(t),J0o=r(A$e," (PLBart model)"),A$e.forEach(t),Y0o=i(x),l_=n(x,"LI",{});var L$e=s(l_);Ome=n(L$e,"STRONG",{});var G_t=s(Ome);K0o=r(G_t,"poolformer"),G_t.forEach(t),Z0o=r(L$e," \u2014 "),wD=n(L$e,"A",{href:!0});var O_t=s(wD);ewo=r(O_t,"PoolFormerModel"),O_t.forEach(t),owo=r(L$e," (PoolFormer model)"),L$e.forEach(t),rwo=i(x),i_=n(x,"LI",{});var y$e=s(i_);Vme=n(y$e,"STRONG",{});var V_t=s(Vme);two=r(V_t,"prophetnet"),V_t.forEach(t),awo=r(y$e," \u2014 "),AD=n(y$e,"A",{href:!0});var X_t=s(AD);nwo=r(X_t,"ProphetNetModel"),X_t.forEach(t),swo=r(y$e," (ProphetNet model)"),y$e.forEach(t),lwo=i(x),d_=n(x,"LI",{});var x$e=s(d_);Xme=n(x$e,"STRONG",{});var z_t=s(Xme);iwo=r(z_t,"qdqbert"),z_t.forEach(t),dwo=r(x$e," \u2014 "),LD=n(x$e,"A",{href:!0});var Q_t=s(LD);cwo=r(Q_t,"QDQBertModel"),Q_t.forEach(t),mwo=r(x$e," (QDQBert model)"),x$e.forEach(t),fwo=i(x),c_=n(x,"LI",{});var $$e=s(c_);zme=n($$e,"STRONG",{});var W_t=s(zme);gwo=r(W_t,"reformer"),W_t.forEach(t),hwo=r($$e," \u2014 "),yD=n($$e,"A",{href:!0});var H_t=s(yD);uwo=r(H_t,"ReformerModel"),H_t.forEach(t),pwo=r($$e," (Reformer model)"),$$e.forEach(t),_wo=i(x),m_=n(x,"LI",{});var k$e=s(m_);Qme=n(k$e,"STRONG",{});var U_t=s(Qme);bwo=r(U_t,"regnet"),U_t.forEach(t),vwo=r(k$e," \u2014 "),xD=n(k$e,"A",{href:!0});var J_t=s(xD);Fwo=r(J_t,"RegNetModel"),J_t.forEach(t),Two=r(k$e," (RegNet model)"),k$e.forEach(t),Mwo=i(x),f_=n(x,"LI",{});var S$e=s(f_);Wme=n(S$e,"STRONG",{});var Y_t=s(Wme);Ewo=r(Y_t,"rembert"),Y_t.forEach(t),Cwo=r(S$e," \u2014 "),$D=n(S$e,"A",{href:!0});var K_t=s($D);wwo=r(K_t,"RemBertModel"),K_t.forEach(t),Awo=r(S$e," (RemBERT model)"),S$e.forEach(t),Lwo=i(x),g_=n(x,"LI",{});var R$e=s(g_);Hme=n(R$e,"STRONG",{});var Z_t=s(Hme);ywo=r(Z_t,"resnet"),Z_t.forEach(t),xwo=r(R$e," \u2014 "),kD=n(R$e,"A",{href:!0});var e2t=s(kD);$wo=r(e2t,"ResNetModel"),e2t.forEach(t),kwo=r(R$e," (ResNet model)"),R$e.forEach(t),Swo=i(x),h_=n(x,"LI",{});var P$e=s(h_);Ume=n(P$e,"STRONG",{});var o2t=s(Ume);Rwo=r(o2t,"retribert"),o2t.forEach(t),Pwo=r(P$e," \u2014 "),SD=n(P$e,"A",{href:!0});var r2t=s(SD);Bwo=r(r2t,"RetriBertModel"),r2t.forEach(t),Iwo=r(P$e," (RetriBERT model)"),P$e.forEach(t),Nwo=i(x),u_=n(x,"LI",{});var B$e=s(u_);Jme=n(B$e,"STRONG",{});var t2t=s(Jme);qwo=r(t2t,"roberta"),t2t.forEach(t),jwo=r(B$e," \u2014 "),RD=n(B$e,"A",{href:!0});var a2t=s(RD);Dwo=r(a2t,"RobertaModel"),a2t.forEach(t),Gwo=r(B$e," (RoBERTa model)"),B$e.forEach(t),Owo=i(x),p_=n(x,"LI",{});var I$e=s(p_);Yme=n(I$e,"STRONG",{});var n2t=s(Yme);Vwo=r(n2t,"roformer"),n2t.forEach(t),Xwo=r(I$e," \u2014 "),PD=n(I$e,"A",{href:!0});var s2t=s(PD);zwo=r(s2t,"RoFormerModel"),s2t.forEach(t),Qwo=r(I$e," (RoFormer model)"),I$e.forEach(t),Wwo=i(x),__=n(x,"LI",{});var N$e=s(__);Kme=n(N$e,"STRONG",{});var l2t=s(Kme);Hwo=r(l2t,"segformer"),l2t.forEach(t),Uwo=r(N$e," \u2014 "),BD=n(N$e,"A",{href:!0});var i2t=s(BD);Jwo=r(i2t,"SegformerModel"),i2t.forEach(t),Ywo=r(N$e," (SegFormer model)"),N$e.forEach(t),Kwo=i(x),b_=n(x,"LI",{});var q$e=s(b_);Zme=n(q$e,"STRONG",{});var d2t=s(Zme);Zwo=r(d2t,"sew"),d2t.forEach(t),eAo=r(q$e," \u2014 "),ID=n(q$e,"A",{href:!0});var c2t=s(ID);oAo=r(c2t,"SEWModel"),c2t.forEach(t),rAo=r(q$e," (SEW model)"),q$e.forEach(t),tAo=i(x),v_=n(x,"LI",{});var j$e=s(v_);efe=n(j$e,"STRONG",{});var m2t=s(efe);aAo=r(m2t,"sew-d"),m2t.forEach(t),nAo=r(j$e," \u2014 "),ND=n(j$e,"A",{href:!0});var f2t=s(ND);sAo=r(f2t,"SEWDModel"),f2t.forEach(t),lAo=r(j$e," (SEW-D model)"),j$e.forEach(t),iAo=i(x),F_=n(x,"LI",{});var D$e=s(F_);ofe=n(D$e,"STRONG",{});var g2t=s(ofe);dAo=r(g2t,"speech_to_text"),g2t.forEach(t),cAo=r(D$e," \u2014 "),qD=n(D$e,"A",{href:!0});var h2t=s(qD);mAo=r(h2t,"Speech2TextModel"),h2t.forEach(t),fAo=r(D$e," (Speech2Text model)"),D$e.forEach(t),gAo=i(x),T_=n(x,"LI",{});var G$e=s(T_);rfe=n(G$e,"STRONG",{});var u2t=s(rfe);hAo=r(u2t,"splinter"),u2t.forEach(t),uAo=r(G$e," \u2014 "),jD=n(G$e,"A",{href:!0});var p2t=s(jD);pAo=r(p2t,"SplinterModel"),p2t.forEach(t),_Ao=r(G$e," (Splinter model)"),G$e.forEach(t),bAo=i(x),M_=n(x,"LI",{});var O$e=s(M_);tfe=n(O$e,"STRONG",{});var _2t=s(tfe);vAo=r(_2t,"squeezebert"),_2t.forEach(t),FAo=r(O$e," \u2014 "),DD=n(O$e,"A",{href:!0});var b2t=s(DD);TAo=r(b2t,"SqueezeBertModel"),b2t.forEach(t),MAo=r(O$e," (SqueezeBERT model)"),O$e.forEach(t),EAo=i(x),E_=n(x,"LI",{});var V$e=s(E_);afe=n(V$e,"STRONG",{});var v2t=s(afe);CAo=r(v2t,"swin"),v2t.forEach(t),wAo=r(V$e," \u2014 "),GD=n(V$e,"A",{href:!0});var F2t=s(GD);AAo=r(F2t,"SwinModel"),F2t.forEach(t),LAo=r(V$e," (Swin Transformer model)"),V$e.forEach(t),yAo=i(x),C_=n(x,"LI",{});var X$e=s(C_);nfe=n(X$e,"STRONG",{});var T2t=s(nfe);xAo=r(T2t,"t5"),T2t.forEach(t),$Ao=r(X$e," \u2014 "),OD=n(X$e,"A",{href:!0});var M2t=s(OD);kAo=r(M2t,"T5Model"),M2t.forEach(t),SAo=r(X$e," (T5 model)"),X$e.forEach(t),RAo=i(x),w_=n(x,"LI",{});var z$e=s(w_);sfe=n(z$e,"STRONG",{});var E2t=s(sfe);PAo=r(E2t,"tapas"),E2t.forEach(t),BAo=r(z$e," \u2014 "),VD=n(z$e,"A",{href:!0});var C2t=s(VD);IAo=r(C2t,"TapasModel"),C2t.forEach(t),NAo=r(z$e," (TAPAS model)"),z$e.forEach(t),qAo=i(x),A_=n(x,"LI",{});var Q$e=s(A_);lfe=n(Q$e,"STRONG",{});var w2t=s(lfe);jAo=r(w2t,"trajectory_transformer"),w2t.forEach(t),DAo=r(Q$e," \u2014 "),XD=n(Q$e,"A",{href:!0});var A2t=s(XD);GAo=r(A2t,"TrajectoryTransformerModel"),A2t.forEach(t),OAo=r(Q$e," (Trajectory Transformer model)"),Q$e.forEach(t),VAo=i(x),L_=n(x,"LI",{});var W$e=s(L_);ife=n(W$e,"STRONG",{});var L2t=s(ife);XAo=r(L2t,"transfo-xl"),L2t.forEach(t),zAo=r(W$e," \u2014 "),zD=n(W$e,"A",{href:!0});var y2t=s(zD);QAo=r(y2t,"TransfoXLModel"),y2t.forEach(t),WAo=r(W$e," (Transformer-XL model)"),W$e.forEach(t),HAo=i(x),y_=n(x,"LI",{});var H$e=s(y_);dfe=n(H$e,"STRONG",{});var x2t=s(dfe);UAo=r(x2t,"unispeech"),x2t.forEach(t),JAo=r(H$e," \u2014 "),QD=n(H$e,"A",{href:!0});var $2t=s(QD);YAo=r($2t,"UniSpeechModel"),$2t.forEach(t),KAo=r(H$e," (UniSpeech model)"),H$e.forEach(t),ZAo=i(x),x_=n(x,"LI",{});var U$e=s(x_);cfe=n(U$e,"STRONG",{});var k2t=s(cfe);e6o=r(k2t,"unispeech-sat"),k2t.forEach(t),o6o=r(U$e," \u2014 "),WD=n(U$e,"A",{href:!0});var S2t=s(WD);r6o=r(S2t,"UniSpeechSatModel"),S2t.forEach(t),t6o=r(U$e," (UniSpeechSat model)"),U$e.forEach(t),a6o=i(x),$_=n(x,"LI",{});var J$e=s($_);mfe=n(J$e,"STRONG",{});var R2t=s(mfe);n6o=r(R2t,"van"),R2t.forEach(t),s6o=r(J$e," \u2014 "),HD=n(J$e,"A",{href:!0});var P2t=s(HD);l6o=r(P2t,"VanModel"),P2t.forEach(t),i6o=r(J$e," (VAN model)"),J$e.forEach(t),d6o=i(x),k_=n(x,"LI",{});var Y$e=s(k_);ffe=n(Y$e,"STRONG",{});var B2t=s(ffe);c6o=r(B2t,"vilt"),B2t.forEach(t),m6o=r(Y$e," \u2014 "),UD=n(Y$e,"A",{href:!0});var I2t=s(UD);f6o=r(I2t,"ViltModel"),I2t.forEach(t),g6o=r(Y$e," (ViLT model)"),Y$e.forEach(t),h6o=i(x),S_=n(x,"LI",{});var K$e=s(S_);gfe=n(K$e,"STRONG",{});var N2t=s(gfe);u6o=r(N2t,"vision-text-dual-encoder"),N2t.forEach(t),p6o=r(K$e," \u2014 "),JD=n(K$e,"A",{href:!0});var q2t=s(JD);_6o=r(q2t,"VisionTextDualEncoderModel"),q2t.forEach(t),b6o=r(K$e," (VisionTextDualEncoder model)"),K$e.forEach(t),v6o=i(x),R_=n(x,"LI",{});var Z$e=s(R_);hfe=n(Z$e,"STRONG",{});var j2t=s(hfe);F6o=r(j2t,"visual_bert"),j2t.forEach(t),T6o=r(Z$e," \u2014 "),YD=n(Z$e,"A",{href:!0});var D2t=s(YD);M6o=r(D2t,"VisualBertModel"),D2t.forEach(t),E6o=r(Z$e," (VisualBERT model)"),Z$e.forEach(t),C6o=i(x),P_=n(x,"LI",{});var eke=s(P_);ufe=n(eke,"STRONG",{});var G2t=s(ufe);w6o=r(G2t,"vit"),G2t.forEach(t),A6o=r(eke," \u2014 "),KD=n(eke,"A",{href:!0});var O2t=s(KD);L6o=r(O2t,"ViTModel"),O2t.forEach(t),y6o=r(eke," (ViT model)"),eke.forEach(t),x6o=i(x),B_=n(x,"LI",{});var oke=s(B_);pfe=n(oke,"STRONG",{});var V2t=s(pfe);$6o=r(V2t,"vit_mae"),V2t.forEach(t),k6o=r(oke," \u2014 "),ZD=n(oke,"A",{href:!0});var X2t=s(ZD);S6o=r(X2t,"ViTMAEModel"),X2t.forEach(t),R6o=r(oke," (ViTMAE model)"),oke.forEach(t),P6o=i(x),I_=n(x,"LI",{});var rke=s(I_);_fe=n(rke,"STRONG",{});var z2t=s(_fe);B6o=r(z2t,"wav2vec2"),z2t.forEach(t),I6o=r(rke," \u2014 "),eG=n(rke,"A",{href:!0});var Q2t=s(eG);N6o=r(Q2t,"Wav2Vec2Model"),Q2t.forEach(t),q6o=r(rke," (Wav2Vec2 model)"),rke.forEach(t),j6o=i(x),N_=n(x,"LI",{});var tke=s(N_);bfe=n(tke,"STRONG",{});var W2t=s(bfe);D6o=r(W2t,"wav2vec2-conformer"),W2t.forEach(t),G6o=r(tke," \u2014 "),oG=n(tke,"A",{href:!0});var H2t=s(oG);O6o=r(H2t,"Wav2Vec2ConformerModel"),H2t.forEach(t),V6o=r(tke," (Wav2Vec2-Conformer model)"),tke.forEach(t),X6o=i(x),q_=n(x,"LI",{});var ake=s(q_);vfe=n(ake,"STRONG",{});var U2t=s(vfe);z6o=r(U2t,"wavlm"),U2t.forEach(t),Q6o=r(ake," \u2014 "),rG=n(ake,"A",{href:!0});var J2t=s(rG);W6o=r(J2t,"WavLMModel"),J2t.forEach(t),H6o=r(ake," (WavLM model)"),ake.forEach(t),U6o=i(x),j_=n(x,"LI",{});var nke=s(j_);Ffe=n(nke,"STRONG",{});var Y2t=s(Ffe);J6o=r(Y2t,"xglm"),Y2t.forEach(t),Y6o=r(nke," \u2014 "),tG=n(nke,"A",{href:!0});var K2t=s(tG);K6o=r(K2t,"XGLMModel"),K2t.forEach(t),Z6o=r(nke," (XGLM model)"),nke.forEach(t),e7o=i(x),D_=n(x,"LI",{});var ske=s(D_);Tfe=n(ske,"STRONG",{});var Z2t=s(Tfe);o7o=r(Z2t,"xlm"),Z2t.forEach(t),r7o=r(ske," \u2014 "),aG=n(ske,"A",{href:!0});var ebt=s(aG);t7o=r(ebt,"XLMModel"),ebt.forEach(t),a7o=r(ske," (XLM model)"),ske.forEach(t),n7o=i(x),G_=n(x,"LI",{});var lke=s(G_);Mfe=n(lke,"STRONG",{});var obt=s(Mfe);s7o=r(obt,"xlm-prophetnet"),obt.forEach(t),l7o=r(lke," \u2014 "),nG=n(lke,"A",{href:!0});var rbt=s(nG);i7o=r(rbt,"XLMProphetNetModel"),rbt.forEach(t),d7o=r(lke," (XLM-ProphetNet model)"),lke.forEach(t),c7o=i(x),O_=n(x,"LI",{});var ike=s(O_);Efe=n(ike,"STRONG",{});var tbt=s(Efe);m7o=r(tbt,"xlm-roberta"),tbt.forEach(t),f7o=r(ike," \u2014 "),sG=n(ike,"A",{href:!0});var abt=s(sG);g7o=r(abt,"XLMRobertaModel"),abt.forEach(t),h7o=r(ike," (XLM-RoBERTa model)"),ike.forEach(t),u7o=i(x),V_=n(x,"LI",{});var dke=s(V_);Cfe=n(dke,"STRONG",{});var nbt=s(Cfe);p7o=r(nbt,"xlm-roberta-xl"),nbt.forEach(t),_7o=r(dke," \u2014 "),lG=n(dke,"A",{href:!0});var sbt=s(lG);b7o=r(sbt,"XLMRobertaXLModel"),sbt.forEach(t),v7o=r(dke," (XLM-RoBERTa-XL model)"),dke.forEach(t),F7o=i(x),X_=n(x,"LI",{});var cke=s(X_);wfe=n(cke,"STRONG",{});var lbt=s(wfe);T7o=r(lbt,"xlnet"),lbt.forEach(t),M7o=r(cke," \u2014 "),iG=n(cke,"A",{href:!0});var ibt=s(iG);E7o=r(ibt,"XLNetModel"),ibt.forEach(t),C7o=r(cke," (XLNet model)"),cke.forEach(t),w7o=i(x),z_=n(x,"LI",{});var mke=s(z_);Afe=n(mke,"STRONG",{});var dbt=s(Afe);A7o=r(dbt,"yolos"),dbt.forEach(t),L7o=r(mke," \u2014 "),dG=n(mke,"A",{href:!0});var cbt=s(dG);y7o=r(cbt,"YolosModel"),cbt.forEach(t),x7o=r(mke," (YOLOS model)"),mke.forEach(t),$7o=i(x),Q_=n(x,"LI",{});var fke=s(Q_);Lfe=n(fke,"STRONG",{});var mbt=s(Lfe);k7o=r(mbt,"yoso"),mbt.forEach(t),S7o=r(fke," \u2014 "),cG=n(fke,"A",{href:!0});var fbt=s(cG);R7o=r(fbt,"YosoModel"),fbt.forEach(t),P7o=r(fke," (YOSO model)"),fke.forEach(t),x.forEach(t),B7o=i(la),W_=n(la,"P",{});var gke=s(W_);I7o=r(gke,"The model is set in evaluation mode by default using "),yfe=n(gke,"CODE",{});var gbt=s(yfe);N7o=r(gbt,"model.eval()"),gbt.forEach(t),q7o=r(gke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xfe=n(gke,"CODE",{});var hbt=s(xfe);j7o=r(hbt,"model.train()"),hbt.forEach(t),gke.forEach(t),D7o=i(la),T(H_.$$.fragment,la),la.forEach(t),tl.forEach(t),NXe=i(m),zi=n(m,"H2",{class:!0});var VQe=s(zi);U_=n(VQe,"A",{id:!0,class:!0,href:!0});var ubt=s(U_);$fe=n(ubt,"SPAN",{});var pbt=s($fe);T(Gy.$$.fragment,pbt),pbt.forEach(t),ubt.forEach(t),G7o=i(VQe),kfe=n(VQe,"SPAN",{});var _bt=s(kfe);O7o=r(_bt,"AutoModelForPreTraining"),_bt.forEach(t),VQe.forEach(t),qXe=i(m),So=n(m,"DIV",{class:!0});var al=s(So);T(Oy.$$.fragment,al),V7o=i(al),Qi=n(al,"P",{});var Hre=s(Qi);X7o=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),mG=n(Hre,"A",{href:!0});var bbt=s(mG);z7o=r(bbt,"from_pretrained()"),bbt.forEach(t),Q7o=r(Hre," class method or the "),fG=n(Hre,"A",{href:!0});var vbt=s(fG);W7o=r(vbt,"from_config()"),vbt.forEach(t),H7o=r(Hre,` class
method.`),Hre.forEach(t),U7o=i(al),Vy=n(al,"P",{});var XQe=s(Vy);J7o=r(XQe,"This class cannot be instantiated directly using "),Sfe=n(XQe,"CODE",{});var Fbt=s(Sfe);Y7o=r(Fbt,"__init__()"),Fbt.forEach(t),K7o=r(XQe," (throws an error)."),XQe.forEach(t),Z7o=i(al),dt=n(al,"DIV",{class:!0});var p7=s(dt);T(Xy.$$.fragment,p7),eLo=i(p7),Rfe=n(p7,"P",{});var Tbt=s(Rfe);oLo=r(Tbt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Tbt.forEach(t),rLo=i(p7),Wi=n(p7,"P",{});var Ure=s(Wi);tLo=r(Ure,`Note:
Loading a model from its configuration file does `),Pfe=n(Ure,"STRONG",{});var Mbt=s(Pfe);aLo=r(Mbt,"not"),Mbt.forEach(t),nLo=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),gG=n(Ure,"A",{href:!0});var Ebt=s(gG);sLo=r(Ebt,"from_pretrained()"),Ebt.forEach(t),lLo=r(Ure," to load the model weights."),Ure.forEach(t),iLo=i(p7),T(J_.$$.fragment,p7),p7.forEach(t),dLo=i(al),Ke=n(al,"DIV",{class:!0});var ia=s(Ke);T(zy.$$.fragment,ia),cLo=i(ia),Bfe=n(ia,"P",{});var Cbt=s(Bfe);mLo=r(Cbt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Cbt.forEach(t),fLo=i(ia),Na=n(ia,"P",{});var _7=s(Na);gLo=r(_7,"The model class to instantiate is selected based on the "),Ife=n(_7,"CODE",{});var wbt=s(Ife);hLo=r(wbt,"model_type"),wbt.forEach(t),uLo=r(_7,` property of the config object (either
passed as an argument or loaded from `),Nfe=n(_7,"CODE",{});var Abt=s(Nfe);pLo=r(Abt,"pretrained_model_name_or_path"),Abt.forEach(t),_Lo=r(_7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qfe=n(_7,"CODE",{});var Lbt=s(qfe);bLo=r(Lbt,"pretrained_model_name_or_path"),Lbt.forEach(t),vLo=r(_7,":"),_7.forEach(t),FLo=i(ia),G=n(ia,"UL",{});var O=s(G);Y_=n(O,"LI",{});var hke=s(Y_);jfe=n(hke,"STRONG",{});var ybt=s(jfe);TLo=r(ybt,"albert"),ybt.forEach(t),MLo=r(hke," \u2014 "),hG=n(hke,"A",{href:!0});var xbt=s(hG);ELo=r(xbt,"AlbertForPreTraining"),xbt.forEach(t),CLo=r(hke," (ALBERT model)"),hke.forEach(t),wLo=i(O),K_=n(O,"LI",{});var uke=s(K_);Dfe=n(uke,"STRONG",{});var $bt=s(Dfe);ALo=r($bt,"bart"),$bt.forEach(t),LLo=r(uke," \u2014 "),uG=n(uke,"A",{href:!0});var kbt=s(uG);yLo=r(kbt,"BartForConditionalGeneration"),kbt.forEach(t),xLo=r(uke," (BART model)"),uke.forEach(t),$Lo=i(O),Z_=n(O,"LI",{});var pke=s(Z_);Gfe=n(pke,"STRONG",{});var Sbt=s(Gfe);kLo=r(Sbt,"bert"),Sbt.forEach(t),SLo=r(pke," \u2014 "),pG=n(pke,"A",{href:!0});var Rbt=s(pG);RLo=r(Rbt,"BertForPreTraining"),Rbt.forEach(t),PLo=r(pke," (BERT model)"),pke.forEach(t),BLo=i(O),e2=n(O,"LI",{});var _ke=s(e2);Ofe=n(_ke,"STRONG",{});var Pbt=s(Ofe);ILo=r(Pbt,"big_bird"),Pbt.forEach(t),NLo=r(_ke," \u2014 "),_G=n(_ke,"A",{href:!0});var Bbt=s(_G);qLo=r(Bbt,"BigBirdForPreTraining"),Bbt.forEach(t),jLo=r(_ke," (BigBird model)"),_ke.forEach(t),DLo=i(O),o2=n(O,"LI",{});var bke=s(o2);Vfe=n(bke,"STRONG",{});var Ibt=s(Vfe);GLo=r(Ibt,"bloom"),Ibt.forEach(t),OLo=r(bke," \u2014 "),bG=n(bke,"A",{href:!0});var Nbt=s(bG);VLo=r(Nbt,"BloomForCausalLM"),Nbt.forEach(t),XLo=r(bke," (BLOOM model)"),bke.forEach(t),zLo=i(O),r2=n(O,"LI",{});var vke=s(r2);Xfe=n(vke,"STRONG",{});var qbt=s(Xfe);QLo=r(qbt,"camembert"),qbt.forEach(t),WLo=r(vke," \u2014 "),vG=n(vke,"A",{href:!0});var jbt=s(vG);HLo=r(jbt,"CamembertForMaskedLM"),jbt.forEach(t),ULo=r(vke," (CamemBERT model)"),vke.forEach(t),JLo=i(O),t2=n(O,"LI",{});var Fke=s(t2);zfe=n(Fke,"STRONG",{});var Dbt=s(zfe);YLo=r(Dbt,"ctrl"),Dbt.forEach(t),KLo=r(Fke," \u2014 "),FG=n(Fke,"A",{href:!0});var Gbt=s(FG);ZLo=r(Gbt,"CTRLLMHeadModel"),Gbt.forEach(t),eyo=r(Fke," (CTRL model)"),Fke.forEach(t),oyo=i(O),a2=n(O,"LI",{});var Tke=s(a2);Qfe=n(Tke,"STRONG",{});var Obt=s(Qfe);ryo=r(Obt,"data2vec-text"),Obt.forEach(t),tyo=r(Tke," \u2014 "),TG=n(Tke,"A",{href:!0});var Vbt=s(TG);ayo=r(Vbt,"Data2VecTextForMaskedLM"),Vbt.forEach(t),nyo=r(Tke," (Data2VecText model)"),Tke.forEach(t),syo=i(O),n2=n(O,"LI",{});var Mke=s(n2);Wfe=n(Mke,"STRONG",{});var Xbt=s(Wfe);lyo=r(Xbt,"deberta"),Xbt.forEach(t),iyo=r(Mke," \u2014 "),MG=n(Mke,"A",{href:!0});var zbt=s(MG);dyo=r(zbt,"DebertaForMaskedLM"),zbt.forEach(t),cyo=r(Mke," (DeBERTa model)"),Mke.forEach(t),myo=i(O),s2=n(O,"LI",{});var Eke=s(s2);Hfe=n(Eke,"STRONG",{});var Qbt=s(Hfe);fyo=r(Qbt,"deberta-v2"),Qbt.forEach(t),gyo=r(Eke," \u2014 "),EG=n(Eke,"A",{href:!0});var Wbt=s(EG);hyo=r(Wbt,"DebertaV2ForMaskedLM"),Wbt.forEach(t),uyo=r(Eke," (DeBERTa-v2 model)"),Eke.forEach(t),pyo=i(O),l2=n(O,"LI",{});var Cke=s(l2);Ufe=n(Cke,"STRONG",{});var Hbt=s(Ufe);_yo=r(Hbt,"distilbert"),Hbt.forEach(t),byo=r(Cke," \u2014 "),CG=n(Cke,"A",{href:!0});var Ubt=s(CG);vyo=r(Ubt,"DistilBertForMaskedLM"),Ubt.forEach(t),Fyo=r(Cke," (DistilBERT model)"),Cke.forEach(t),Tyo=i(O),i2=n(O,"LI",{});var wke=s(i2);Jfe=n(wke,"STRONG",{});var Jbt=s(Jfe);Myo=r(Jbt,"electra"),Jbt.forEach(t),Eyo=r(wke," \u2014 "),wG=n(wke,"A",{href:!0});var Ybt=s(wG);Cyo=r(Ybt,"ElectraForPreTraining"),Ybt.forEach(t),wyo=r(wke," (ELECTRA model)"),wke.forEach(t),Ayo=i(O),d2=n(O,"LI",{});var Ake=s(d2);Yfe=n(Ake,"STRONG",{});var Kbt=s(Yfe);Lyo=r(Kbt,"flaubert"),Kbt.forEach(t),yyo=r(Ake," \u2014 "),AG=n(Ake,"A",{href:!0});var Zbt=s(AG);xyo=r(Zbt,"FlaubertWithLMHeadModel"),Zbt.forEach(t),$yo=r(Ake," (FlauBERT model)"),Ake.forEach(t),kyo=i(O),c2=n(O,"LI",{});var Lke=s(c2);Kfe=n(Lke,"STRONG",{});var evt=s(Kfe);Syo=r(evt,"flava"),evt.forEach(t),Ryo=r(Lke," \u2014 "),LG=n(Lke,"A",{href:!0});var ovt=s(LG);Pyo=r(ovt,"FlavaForPreTraining"),ovt.forEach(t),Byo=r(Lke," (FLAVA model)"),Lke.forEach(t),Iyo=i(O),m2=n(O,"LI",{});var yke=s(m2);Zfe=n(yke,"STRONG",{});var rvt=s(Zfe);Nyo=r(rvt,"fnet"),rvt.forEach(t),qyo=r(yke," \u2014 "),yG=n(yke,"A",{href:!0});var tvt=s(yG);jyo=r(tvt,"FNetForPreTraining"),tvt.forEach(t),Dyo=r(yke," (FNet model)"),yke.forEach(t),Gyo=i(O),f2=n(O,"LI",{});var xke=s(f2);ege=n(xke,"STRONG",{});var avt=s(ege);Oyo=r(avt,"fsmt"),avt.forEach(t),Vyo=r(xke," \u2014 "),xG=n(xke,"A",{href:!0});var nvt=s(xG);Xyo=r(nvt,"FSMTForConditionalGeneration"),nvt.forEach(t),zyo=r(xke," (FairSeq Machine-Translation model)"),xke.forEach(t),Qyo=i(O),g2=n(O,"LI",{});var $ke=s(g2);oge=n($ke,"STRONG",{});var svt=s(oge);Wyo=r(svt,"funnel"),svt.forEach(t),Hyo=r($ke," \u2014 "),$G=n($ke,"A",{href:!0});var lvt=s($G);Uyo=r(lvt,"FunnelForPreTraining"),lvt.forEach(t),Jyo=r($ke," (Funnel Transformer model)"),$ke.forEach(t),Yyo=i(O),h2=n(O,"LI",{});var kke=s(h2);rge=n(kke,"STRONG",{});var ivt=s(rge);Kyo=r(ivt,"gpt2"),ivt.forEach(t),Zyo=r(kke," \u2014 "),kG=n(kke,"A",{href:!0});var dvt=s(kG);e8o=r(dvt,"GPT2LMHeadModel"),dvt.forEach(t),o8o=r(kke," (OpenAI GPT-2 model)"),kke.forEach(t),r8o=i(O),u2=n(O,"LI",{});var Ske=s(u2);tge=n(Ske,"STRONG",{});var cvt=s(tge);t8o=r(cvt,"ibert"),cvt.forEach(t),a8o=r(Ske," \u2014 "),SG=n(Ske,"A",{href:!0});var mvt=s(SG);n8o=r(mvt,"IBertForMaskedLM"),mvt.forEach(t),s8o=r(Ske," (I-BERT model)"),Ske.forEach(t),l8o=i(O),p2=n(O,"LI",{});var Rke=s(p2);age=n(Rke,"STRONG",{});var fvt=s(age);i8o=r(fvt,"layoutlm"),fvt.forEach(t),d8o=r(Rke," \u2014 "),RG=n(Rke,"A",{href:!0});var gvt=s(RG);c8o=r(gvt,"LayoutLMForMaskedLM"),gvt.forEach(t),m8o=r(Rke," (LayoutLM model)"),Rke.forEach(t),f8o=i(O),_2=n(O,"LI",{});var Pke=s(_2);nge=n(Pke,"STRONG",{});var hvt=s(nge);g8o=r(hvt,"longformer"),hvt.forEach(t),h8o=r(Pke," \u2014 "),PG=n(Pke,"A",{href:!0});var uvt=s(PG);u8o=r(uvt,"LongformerForMaskedLM"),uvt.forEach(t),p8o=r(Pke," (Longformer model)"),Pke.forEach(t),_8o=i(O),b2=n(O,"LI",{});var Bke=s(b2);sge=n(Bke,"STRONG",{});var pvt=s(sge);b8o=r(pvt,"lxmert"),pvt.forEach(t),v8o=r(Bke," \u2014 "),BG=n(Bke,"A",{href:!0});var _vt=s(BG);F8o=r(_vt,"LxmertForPreTraining"),_vt.forEach(t),T8o=r(Bke," (LXMERT model)"),Bke.forEach(t),M8o=i(O),v2=n(O,"LI",{});var Ike=s(v2);lge=n(Ike,"STRONG",{});var bvt=s(lge);E8o=r(bvt,"megatron-bert"),bvt.forEach(t),C8o=r(Ike," \u2014 "),IG=n(Ike,"A",{href:!0});var vvt=s(IG);w8o=r(vvt,"MegatronBertForPreTraining"),vvt.forEach(t),A8o=r(Ike," (Megatron-BERT model)"),Ike.forEach(t),L8o=i(O),F2=n(O,"LI",{});var Nke=s(F2);ige=n(Nke,"STRONG",{});var Fvt=s(ige);y8o=r(Fvt,"mobilebert"),Fvt.forEach(t),x8o=r(Nke," \u2014 "),NG=n(Nke,"A",{href:!0});var Tvt=s(NG);$8o=r(Tvt,"MobileBertForPreTraining"),Tvt.forEach(t),k8o=r(Nke," (MobileBERT model)"),Nke.forEach(t),S8o=i(O),T2=n(O,"LI",{});var qke=s(T2);dge=n(qke,"STRONG",{});var Mvt=s(dge);R8o=r(Mvt,"mpnet"),Mvt.forEach(t),P8o=r(qke," \u2014 "),qG=n(qke,"A",{href:!0});var Evt=s(qG);B8o=r(Evt,"MPNetForMaskedLM"),Evt.forEach(t),I8o=r(qke," (MPNet model)"),qke.forEach(t),N8o=i(O),M2=n(O,"LI",{});var jke=s(M2);cge=n(jke,"STRONG",{});var Cvt=s(cge);q8o=r(Cvt,"mvp"),Cvt.forEach(t),j8o=r(jke," \u2014 "),jG=n(jke,"A",{href:!0});var wvt=s(jG);D8o=r(wvt,"MvpForConditionalGeneration"),wvt.forEach(t),G8o=r(jke," (MVP model)"),jke.forEach(t),O8o=i(O),E2=n(O,"LI",{});var Dke=s(E2);mge=n(Dke,"STRONG",{});var Avt=s(mge);V8o=r(Avt,"nezha"),Avt.forEach(t),X8o=r(Dke," \u2014 "),DG=n(Dke,"A",{href:!0});var Lvt=s(DG);z8o=r(Lvt,"NezhaForPreTraining"),Lvt.forEach(t),Q8o=r(Dke," (Nezha model)"),Dke.forEach(t),W8o=i(O),C2=n(O,"LI",{});var Gke=s(C2);fge=n(Gke,"STRONG",{});var yvt=s(fge);H8o=r(yvt,"openai-gpt"),yvt.forEach(t),U8o=r(Gke," \u2014 "),GG=n(Gke,"A",{href:!0});var xvt=s(GG);J8o=r(xvt,"OpenAIGPTLMHeadModel"),xvt.forEach(t),Y8o=r(Gke," (OpenAI GPT model)"),Gke.forEach(t),K8o=i(O),w2=n(O,"LI",{});var Oke=s(w2);gge=n(Oke,"STRONG",{});var $vt=s(gge);Z8o=r($vt,"retribert"),$vt.forEach(t),e9o=r(Oke," \u2014 "),OG=n(Oke,"A",{href:!0});var kvt=s(OG);o9o=r(kvt,"RetriBertModel"),kvt.forEach(t),r9o=r(Oke," (RetriBERT model)"),Oke.forEach(t),t9o=i(O),A2=n(O,"LI",{});var Vke=s(A2);hge=n(Vke,"STRONG",{});var Svt=s(hge);a9o=r(Svt,"roberta"),Svt.forEach(t),n9o=r(Vke," \u2014 "),VG=n(Vke,"A",{href:!0});var Rvt=s(VG);s9o=r(Rvt,"RobertaForMaskedLM"),Rvt.forEach(t),l9o=r(Vke," (RoBERTa model)"),Vke.forEach(t),i9o=i(O),L2=n(O,"LI",{});var Xke=s(L2);uge=n(Xke,"STRONG",{});var Pvt=s(uge);d9o=r(Pvt,"splinter"),Pvt.forEach(t),c9o=r(Xke," \u2014 "),XG=n(Xke,"A",{href:!0});var Bvt=s(XG);m9o=r(Bvt,"SplinterForPreTraining"),Bvt.forEach(t),f9o=r(Xke," (Splinter model)"),Xke.forEach(t),g9o=i(O),y2=n(O,"LI",{});var zke=s(y2);pge=n(zke,"STRONG",{});var Ivt=s(pge);h9o=r(Ivt,"squeezebert"),Ivt.forEach(t),u9o=r(zke," \u2014 "),zG=n(zke,"A",{href:!0});var Nvt=s(zG);p9o=r(Nvt,"SqueezeBertForMaskedLM"),Nvt.forEach(t),_9o=r(zke," (SqueezeBERT model)"),zke.forEach(t),b9o=i(O),x2=n(O,"LI",{});var Qke=s(x2);_ge=n(Qke,"STRONG",{});var qvt=s(_ge);v9o=r(qvt,"t5"),qvt.forEach(t),F9o=r(Qke," \u2014 "),QG=n(Qke,"A",{href:!0});var jvt=s(QG);T9o=r(jvt,"T5ForConditionalGeneration"),jvt.forEach(t),M9o=r(Qke," (T5 model)"),Qke.forEach(t),E9o=i(O),$2=n(O,"LI",{});var Wke=s($2);bge=n(Wke,"STRONG",{});var Dvt=s(bge);C9o=r(Dvt,"tapas"),Dvt.forEach(t),w9o=r(Wke," \u2014 "),WG=n(Wke,"A",{href:!0});var Gvt=s(WG);A9o=r(Gvt,"TapasForMaskedLM"),Gvt.forEach(t),L9o=r(Wke," (TAPAS model)"),Wke.forEach(t),y9o=i(O),k2=n(O,"LI",{});var Hke=s(k2);vge=n(Hke,"STRONG",{});var Ovt=s(vge);x9o=r(Ovt,"transfo-xl"),Ovt.forEach(t),$9o=r(Hke," \u2014 "),HG=n(Hke,"A",{href:!0});var Vvt=s(HG);k9o=r(Vvt,"TransfoXLLMHeadModel"),Vvt.forEach(t),S9o=r(Hke," (Transformer-XL model)"),Hke.forEach(t),R9o=i(O),S2=n(O,"LI",{});var Uke=s(S2);Fge=n(Uke,"STRONG",{});var Xvt=s(Fge);P9o=r(Xvt,"unispeech"),Xvt.forEach(t),B9o=r(Uke," \u2014 "),UG=n(Uke,"A",{href:!0});var zvt=s(UG);I9o=r(zvt,"UniSpeechForPreTraining"),zvt.forEach(t),N9o=r(Uke," (UniSpeech model)"),Uke.forEach(t),q9o=i(O),R2=n(O,"LI",{});var Jke=s(R2);Tge=n(Jke,"STRONG",{});var Qvt=s(Tge);j9o=r(Qvt,"unispeech-sat"),Qvt.forEach(t),D9o=r(Jke," \u2014 "),JG=n(Jke,"A",{href:!0});var Wvt=s(JG);G9o=r(Wvt,"UniSpeechSatForPreTraining"),Wvt.forEach(t),O9o=r(Jke," (UniSpeechSat model)"),Jke.forEach(t),V9o=i(O),P2=n(O,"LI",{});var Yke=s(P2);Mge=n(Yke,"STRONG",{});var Hvt=s(Mge);X9o=r(Hvt,"visual_bert"),Hvt.forEach(t),z9o=r(Yke," \u2014 "),YG=n(Yke,"A",{href:!0});var Uvt=s(YG);Q9o=r(Uvt,"VisualBertForPreTraining"),Uvt.forEach(t),W9o=r(Yke," (VisualBERT model)"),Yke.forEach(t),H9o=i(O),B2=n(O,"LI",{});var Kke=s(B2);Ege=n(Kke,"STRONG",{});var Jvt=s(Ege);U9o=r(Jvt,"vit_mae"),Jvt.forEach(t),J9o=r(Kke," \u2014 "),KG=n(Kke,"A",{href:!0});var Yvt=s(KG);Y9o=r(Yvt,"ViTMAEForPreTraining"),Yvt.forEach(t),K9o=r(Kke," (ViTMAE model)"),Kke.forEach(t),Z9o=i(O),I2=n(O,"LI",{});var Zke=s(I2);Cge=n(Zke,"STRONG",{});var Kvt=s(Cge);exo=r(Kvt,"wav2vec2"),Kvt.forEach(t),oxo=r(Zke," \u2014 "),ZG=n(Zke,"A",{href:!0});var Zvt=s(ZG);rxo=r(Zvt,"Wav2Vec2ForPreTraining"),Zvt.forEach(t),txo=r(Zke," (Wav2Vec2 model)"),Zke.forEach(t),axo=i(O),N2=n(O,"LI",{});var eSe=s(N2);wge=n(eSe,"STRONG",{});var e1t=s(wge);nxo=r(e1t,"wav2vec2-conformer"),e1t.forEach(t),sxo=r(eSe," \u2014 "),eO=n(eSe,"A",{href:!0});var o1t=s(eO);lxo=r(o1t,"Wav2Vec2ConformerForPreTraining"),o1t.forEach(t),ixo=r(eSe," (Wav2Vec2-Conformer model)"),eSe.forEach(t),dxo=i(O),q2=n(O,"LI",{});var oSe=s(q2);Age=n(oSe,"STRONG",{});var r1t=s(Age);cxo=r(r1t,"xlm"),r1t.forEach(t),mxo=r(oSe," \u2014 "),oO=n(oSe,"A",{href:!0});var t1t=s(oO);fxo=r(t1t,"XLMWithLMHeadModel"),t1t.forEach(t),gxo=r(oSe," (XLM model)"),oSe.forEach(t),hxo=i(O),j2=n(O,"LI",{});var rSe=s(j2);Lge=n(rSe,"STRONG",{});var a1t=s(Lge);uxo=r(a1t,"xlm-roberta"),a1t.forEach(t),pxo=r(rSe," \u2014 "),rO=n(rSe,"A",{href:!0});var n1t=s(rO);_xo=r(n1t,"XLMRobertaForMaskedLM"),n1t.forEach(t),bxo=r(rSe," (XLM-RoBERTa model)"),rSe.forEach(t),vxo=i(O),D2=n(O,"LI",{});var tSe=s(D2);yge=n(tSe,"STRONG",{});var s1t=s(yge);Fxo=r(s1t,"xlm-roberta-xl"),s1t.forEach(t),Txo=r(tSe," \u2014 "),tO=n(tSe,"A",{href:!0});var l1t=s(tO);Mxo=r(l1t,"XLMRobertaXLForMaskedLM"),l1t.forEach(t),Exo=r(tSe," (XLM-RoBERTa-XL model)"),tSe.forEach(t),Cxo=i(O),G2=n(O,"LI",{});var aSe=s(G2);xge=n(aSe,"STRONG",{});var i1t=s(xge);wxo=r(i1t,"xlnet"),i1t.forEach(t),Axo=r(aSe," \u2014 "),aO=n(aSe,"A",{href:!0});var d1t=s(aO);Lxo=r(d1t,"XLNetLMHeadModel"),d1t.forEach(t),yxo=r(aSe," (XLNet model)"),aSe.forEach(t),O.forEach(t),xxo=i(ia),O2=n(ia,"P",{});var nSe=s(O2);$xo=r(nSe,"The model is set in evaluation mode by default using "),$ge=n(nSe,"CODE",{});var c1t=s($ge);kxo=r(c1t,"model.eval()"),c1t.forEach(t),Sxo=r(nSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kge=n(nSe,"CODE",{});var m1t=s(kge);Rxo=r(m1t,"model.train()"),m1t.forEach(t),nSe.forEach(t),Pxo=i(ia),T(V2.$$.fragment,ia),ia.forEach(t),al.forEach(t),jXe=i(m),Hi=n(m,"H2",{class:!0});var zQe=s(Hi);X2=n(zQe,"A",{id:!0,class:!0,href:!0});var f1t=s(X2);Sge=n(f1t,"SPAN",{});var g1t=s(Sge);T(Qy.$$.fragment,g1t),g1t.forEach(t),f1t.forEach(t),Bxo=i(zQe),Rge=n(zQe,"SPAN",{});var h1t=s(Rge);Ixo=r(h1t,"AutoModelForCausalLM"),h1t.forEach(t),zQe.forEach(t),DXe=i(m),Ro=n(m,"DIV",{class:!0});var nl=s(Ro);T(Wy.$$.fragment,nl),Nxo=i(nl),Ui=n(nl,"P",{});var Jre=s(Ui);qxo=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nO=n(Jre,"A",{href:!0});var u1t=s(nO);jxo=r(u1t,"from_pretrained()"),u1t.forEach(t),Dxo=r(Jre," class method or the "),sO=n(Jre,"A",{href:!0});var p1t=s(sO);Gxo=r(p1t,"from_config()"),p1t.forEach(t),Oxo=r(Jre,` class
method.`),Jre.forEach(t),Vxo=i(nl),Hy=n(nl,"P",{});var QQe=s(Hy);Xxo=r(QQe,"This class cannot be instantiated directly using "),Pge=n(QQe,"CODE",{});var _1t=s(Pge);zxo=r(_1t,"__init__()"),_1t.forEach(t),Qxo=r(QQe," (throws an error)."),QQe.forEach(t),Wxo=i(nl),ct=n(nl,"DIV",{class:!0});var b7=s(ct);T(Uy.$$.fragment,b7),Hxo=i(b7),Bge=n(b7,"P",{});var b1t=s(Bge);Uxo=r(b1t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),b1t.forEach(t),Jxo=i(b7),Ji=n(b7,"P",{});var Yre=s(Ji);Yxo=r(Yre,`Note:
Loading a model from its configuration file does `),Ige=n(Yre,"STRONG",{});var v1t=s(Ige);Kxo=r(v1t,"not"),v1t.forEach(t),Zxo=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=n(Yre,"A",{href:!0});var F1t=s(lO);e$o=r(F1t,"from_pretrained()"),F1t.forEach(t),o$o=r(Yre," to load the model weights."),Yre.forEach(t),r$o=i(b7),T(z2.$$.fragment,b7),b7.forEach(t),t$o=i(nl),Ze=n(nl,"DIV",{class:!0});var da=s(Ze);T(Jy.$$.fragment,da),a$o=i(da),Nge=n(da,"P",{});var T1t=s(Nge);n$o=r(T1t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),T1t.forEach(t),s$o=i(da),qa=n(da,"P",{});var v7=s(qa);l$o=r(v7,"The model class to instantiate is selected based on the "),qge=n(v7,"CODE",{});var M1t=s(qge);i$o=r(M1t,"model_type"),M1t.forEach(t),d$o=r(v7,` property of the config object (either
passed as an argument or loaded from `),jge=n(v7,"CODE",{});var E1t=s(jge);c$o=r(E1t,"pretrained_model_name_or_path"),E1t.forEach(t),m$o=r(v7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dge=n(v7,"CODE",{});var C1t=s(Dge);f$o=r(C1t,"pretrained_model_name_or_path"),C1t.forEach(t),g$o=r(v7,":"),v7.forEach(t),h$o=i(da),z=n(da,"UL",{});var Q=s(z);Q2=n(Q,"LI",{});var sSe=s(Q2);Gge=n(sSe,"STRONG",{});var w1t=s(Gge);u$o=r(w1t,"bart"),w1t.forEach(t),p$o=r(sSe," \u2014 "),iO=n(sSe,"A",{href:!0});var A1t=s(iO);_$o=r(A1t,"BartForCausalLM"),A1t.forEach(t),b$o=r(sSe," (BART model)"),sSe.forEach(t),v$o=i(Q),W2=n(Q,"LI",{});var lSe=s(W2);Oge=n(lSe,"STRONG",{});var L1t=s(Oge);F$o=r(L1t,"bert"),L1t.forEach(t),T$o=r(lSe," \u2014 "),dO=n(lSe,"A",{href:!0});var y1t=s(dO);M$o=r(y1t,"BertLMHeadModel"),y1t.forEach(t),E$o=r(lSe," (BERT model)"),lSe.forEach(t),C$o=i(Q),H2=n(Q,"LI",{});var iSe=s(H2);Vge=n(iSe,"STRONG",{});var x1t=s(Vge);w$o=r(x1t,"bert-generation"),x1t.forEach(t),A$o=r(iSe," \u2014 "),cO=n(iSe,"A",{href:!0});var $1t=s(cO);L$o=r($1t,"BertGenerationDecoder"),$1t.forEach(t),y$o=r(iSe," (Bert Generation model)"),iSe.forEach(t),x$o=i(Q),U2=n(Q,"LI",{});var dSe=s(U2);Xge=n(dSe,"STRONG",{});var k1t=s(Xge);$$o=r(k1t,"big_bird"),k1t.forEach(t),k$o=r(dSe," \u2014 "),mO=n(dSe,"A",{href:!0});var S1t=s(mO);S$o=r(S1t,"BigBirdForCausalLM"),S1t.forEach(t),R$o=r(dSe," (BigBird model)"),dSe.forEach(t),P$o=i(Q),J2=n(Q,"LI",{});var cSe=s(J2);zge=n(cSe,"STRONG",{});var R1t=s(zge);B$o=r(R1t,"bigbird_pegasus"),R1t.forEach(t),I$o=r(cSe," \u2014 "),fO=n(cSe,"A",{href:!0});var P1t=s(fO);N$o=r(P1t,"BigBirdPegasusForCausalLM"),P1t.forEach(t),q$o=r(cSe," (BigBird-Pegasus model)"),cSe.forEach(t),j$o=i(Q),Y2=n(Q,"LI",{});var mSe=s(Y2);Qge=n(mSe,"STRONG",{});var B1t=s(Qge);D$o=r(B1t,"blenderbot"),B1t.forEach(t),G$o=r(mSe," \u2014 "),gO=n(mSe,"A",{href:!0});var I1t=s(gO);O$o=r(I1t,"BlenderbotForCausalLM"),I1t.forEach(t),V$o=r(mSe," (Blenderbot model)"),mSe.forEach(t),X$o=i(Q),K2=n(Q,"LI",{});var fSe=s(K2);Wge=n(fSe,"STRONG",{});var N1t=s(Wge);z$o=r(N1t,"blenderbot-small"),N1t.forEach(t),Q$o=r(fSe," \u2014 "),hO=n(fSe,"A",{href:!0});var q1t=s(hO);W$o=r(q1t,"BlenderbotSmallForCausalLM"),q1t.forEach(t),H$o=r(fSe," (BlenderbotSmall model)"),fSe.forEach(t),U$o=i(Q),Z2=n(Q,"LI",{});var gSe=s(Z2);Hge=n(gSe,"STRONG",{});var j1t=s(Hge);J$o=r(j1t,"bloom"),j1t.forEach(t),Y$o=r(gSe," \u2014 "),uO=n(gSe,"A",{href:!0});var D1t=s(uO);K$o=r(D1t,"BloomForCausalLM"),D1t.forEach(t),Z$o=r(gSe," (BLOOM model)"),gSe.forEach(t),eko=i(Q),eb=n(Q,"LI",{});var hSe=s(eb);Uge=n(hSe,"STRONG",{});var G1t=s(Uge);oko=r(G1t,"camembert"),G1t.forEach(t),rko=r(hSe," \u2014 "),pO=n(hSe,"A",{href:!0});var O1t=s(pO);tko=r(O1t,"CamembertForCausalLM"),O1t.forEach(t),ako=r(hSe," (CamemBERT model)"),hSe.forEach(t),nko=i(Q),ob=n(Q,"LI",{});var uSe=s(ob);Jge=n(uSe,"STRONG",{});var V1t=s(Jge);sko=r(V1t,"codegen"),V1t.forEach(t),lko=r(uSe," \u2014 "),_O=n(uSe,"A",{href:!0});var X1t=s(_O);iko=r(X1t,"CodeGenForCausalLM"),X1t.forEach(t),dko=r(uSe," (CodeGen model)"),uSe.forEach(t),cko=i(Q),rb=n(Q,"LI",{});var pSe=s(rb);Yge=n(pSe,"STRONG",{});var z1t=s(Yge);mko=r(z1t,"ctrl"),z1t.forEach(t),fko=r(pSe," \u2014 "),bO=n(pSe,"A",{href:!0});var Q1t=s(bO);gko=r(Q1t,"CTRLLMHeadModel"),Q1t.forEach(t),hko=r(pSe," (CTRL model)"),pSe.forEach(t),uko=i(Q),tb=n(Q,"LI",{});var _Se=s(tb);Kge=n(_Se,"STRONG",{});var W1t=s(Kge);pko=r(W1t,"data2vec-text"),W1t.forEach(t),_ko=r(_Se," \u2014 "),vO=n(_Se,"A",{href:!0});var H1t=s(vO);bko=r(H1t,"Data2VecTextForCausalLM"),H1t.forEach(t),vko=r(_Se," (Data2VecText model)"),_Se.forEach(t),Fko=i(Q),ab=n(Q,"LI",{});var bSe=s(ab);Zge=n(bSe,"STRONG",{});var U1t=s(Zge);Tko=r(U1t,"electra"),U1t.forEach(t),Mko=r(bSe," \u2014 "),FO=n(bSe,"A",{href:!0});var J1t=s(FO);Eko=r(J1t,"ElectraForCausalLM"),J1t.forEach(t),Cko=r(bSe," (ELECTRA model)"),bSe.forEach(t),wko=i(Q),nb=n(Q,"LI",{});var vSe=s(nb);ehe=n(vSe,"STRONG",{});var Y1t=s(ehe);Ako=r(Y1t,"gpt2"),Y1t.forEach(t),Lko=r(vSe," \u2014 "),TO=n(vSe,"A",{href:!0});var K1t=s(TO);yko=r(K1t,"GPT2LMHeadModel"),K1t.forEach(t),xko=r(vSe," (OpenAI GPT-2 model)"),vSe.forEach(t),$ko=i(Q),sb=n(Q,"LI",{});var FSe=s(sb);ohe=n(FSe,"STRONG",{});var Z1t=s(ohe);kko=r(Z1t,"gpt_neo"),Z1t.forEach(t),Sko=r(FSe," \u2014 "),MO=n(FSe,"A",{href:!0});var eFt=s(MO);Rko=r(eFt,"GPTNeoForCausalLM"),eFt.forEach(t),Pko=r(FSe," (GPT Neo model)"),FSe.forEach(t),Bko=i(Q),lb=n(Q,"LI",{});var TSe=s(lb);rhe=n(TSe,"STRONG",{});var oFt=s(rhe);Iko=r(oFt,"gpt_neox"),oFt.forEach(t),Nko=r(TSe," \u2014 "),EO=n(TSe,"A",{href:!0});var rFt=s(EO);qko=r(rFt,"GPTNeoXForCausalLM"),rFt.forEach(t),jko=r(TSe," (GPT NeoX model)"),TSe.forEach(t),Dko=i(Q),ib=n(Q,"LI",{});var MSe=s(ib);the=n(MSe,"STRONG",{});var tFt=s(the);Gko=r(tFt,"gptj"),tFt.forEach(t),Oko=r(MSe," \u2014 "),CO=n(MSe,"A",{href:!0});var aFt=s(CO);Vko=r(aFt,"GPTJForCausalLM"),aFt.forEach(t),Xko=r(MSe," (GPT-J model)"),MSe.forEach(t),zko=i(Q),db=n(Q,"LI",{});var ESe=s(db);ahe=n(ESe,"STRONG",{});var nFt=s(ahe);Qko=r(nFt,"marian"),nFt.forEach(t),Wko=r(ESe," \u2014 "),wO=n(ESe,"A",{href:!0});var sFt=s(wO);Hko=r(sFt,"MarianForCausalLM"),sFt.forEach(t),Uko=r(ESe," (Marian model)"),ESe.forEach(t),Jko=i(Q),cb=n(Q,"LI",{});var CSe=s(cb);nhe=n(CSe,"STRONG",{});var lFt=s(nhe);Yko=r(lFt,"mbart"),lFt.forEach(t),Kko=r(CSe," \u2014 "),AO=n(CSe,"A",{href:!0});var iFt=s(AO);Zko=r(iFt,"MBartForCausalLM"),iFt.forEach(t),eSo=r(CSe," (mBART model)"),CSe.forEach(t),oSo=i(Q),mb=n(Q,"LI",{});var wSe=s(mb);she=n(wSe,"STRONG",{});var dFt=s(she);rSo=r(dFt,"megatron-bert"),dFt.forEach(t),tSo=r(wSe," \u2014 "),LO=n(wSe,"A",{href:!0});var cFt=s(LO);aSo=r(cFt,"MegatronBertForCausalLM"),cFt.forEach(t),nSo=r(wSe," (Megatron-BERT model)"),wSe.forEach(t),sSo=i(Q),fb=n(Q,"LI",{});var ASe=s(fb);lhe=n(ASe,"STRONG",{});var mFt=s(lhe);lSo=r(mFt,"mvp"),mFt.forEach(t),iSo=r(ASe," \u2014 "),yO=n(ASe,"A",{href:!0});var fFt=s(yO);dSo=r(fFt,"MvpForCausalLM"),fFt.forEach(t),cSo=r(ASe," (MVP model)"),ASe.forEach(t),mSo=i(Q),gb=n(Q,"LI",{});var LSe=s(gb);ihe=n(LSe,"STRONG",{});var gFt=s(ihe);fSo=r(gFt,"openai-gpt"),gFt.forEach(t),gSo=r(LSe," \u2014 "),xO=n(LSe,"A",{href:!0});var hFt=s(xO);hSo=r(hFt,"OpenAIGPTLMHeadModel"),hFt.forEach(t),uSo=r(LSe," (OpenAI GPT model)"),LSe.forEach(t),pSo=i(Q),hb=n(Q,"LI",{});var ySe=s(hb);dhe=n(ySe,"STRONG",{});var uFt=s(dhe);_So=r(uFt,"opt"),uFt.forEach(t),bSo=r(ySe," \u2014 "),$O=n(ySe,"A",{href:!0});var pFt=s($O);vSo=r(pFt,"OPTForCausalLM"),pFt.forEach(t),FSo=r(ySe," (OPT model)"),ySe.forEach(t),TSo=i(Q),ub=n(Q,"LI",{});var xSe=s(ub);che=n(xSe,"STRONG",{});var _Ft=s(che);MSo=r(_Ft,"pegasus"),_Ft.forEach(t),ESo=r(xSe," \u2014 "),kO=n(xSe,"A",{href:!0});var bFt=s(kO);CSo=r(bFt,"PegasusForCausalLM"),bFt.forEach(t),wSo=r(xSe," (Pegasus model)"),xSe.forEach(t),ASo=i(Q),pb=n(Q,"LI",{});var $Se=s(pb);mhe=n($Se,"STRONG",{});var vFt=s(mhe);LSo=r(vFt,"plbart"),vFt.forEach(t),ySo=r($Se," \u2014 "),SO=n($Se,"A",{href:!0});var FFt=s(SO);xSo=r(FFt,"PLBartForCausalLM"),FFt.forEach(t),$So=r($Se," (PLBart model)"),$Se.forEach(t),kSo=i(Q),_b=n(Q,"LI",{});var kSe=s(_b);fhe=n(kSe,"STRONG",{});var TFt=s(fhe);SSo=r(TFt,"prophetnet"),TFt.forEach(t),RSo=r(kSe," \u2014 "),RO=n(kSe,"A",{href:!0});var MFt=s(RO);PSo=r(MFt,"ProphetNetForCausalLM"),MFt.forEach(t),BSo=r(kSe," (ProphetNet model)"),kSe.forEach(t),ISo=i(Q),bb=n(Q,"LI",{});var SSe=s(bb);ghe=n(SSe,"STRONG",{});var EFt=s(ghe);NSo=r(EFt,"qdqbert"),EFt.forEach(t),qSo=r(SSe," \u2014 "),PO=n(SSe,"A",{href:!0});var CFt=s(PO);jSo=r(CFt,"QDQBertLMHeadModel"),CFt.forEach(t),DSo=r(SSe," (QDQBert model)"),SSe.forEach(t),GSo=i(Q),vb=n(Q,"LI",{});var RSe=s(vb);hhe=n(RSe,"STRONG",{});var wFt=s(hhe);OSo=r(wFt,"reformer"),wFt.forEach(t),VSo=r(RSe," \u2014 "),BO=n(RSe,"A",{href:!0});var AFt=s(BO);XSo=r(AFt,"ReformerModelWithLMHead"),AFt.forEach(t),zSo=r(RSe," (Reformer model)"),RSe.forEach(t),QSo=i(Q),Fb=n(Q,"LI",{});var PSe=s(Fb);uhe=n(PSe,"STRONG",{});var LFt=s(uhe);WSo=r(LFt,"rembert"),LFt.forEach(t),HSo=r(PSe," \u2014 "),IO=n(PSe,"A",{href:!0});var yFt=s(IO);USo=r(yFt,"RemBertForCausalLM"),yFt.forEach(t),JSo=r(PSe," (RemBERT model)"),PSe.forEach(t),YSo=i(Q),Tb=n(Q,"LI",{});var BSe=s(Tb);phe=n(BSe,"STRONG",{});var xFt=s(phe);KSo=r(xFt,"roberta"),xFt.forEach(t),ZSo=r(BSe," \u2014 "),NO=n(BSe,"A",{href:!0});var $Ft=s(NO);eRo=r($Ft,"RobertaForCausalLM"),$Ft.forEach(t),oRo=r(BSe," (RoBERTa model)"),BSe.forEach(t),rRo=i(Q),Mb=n(Q,"LI",{});var ISe=s(Mb);_he=n(ISe,"STRONG",{});var kFt=s(_he);tRo=r(kFt,"roformer"),kFt.forEach(t),aRo=r(ISe," \u2014 "),qO=n(ISe,"A",{href:!0});var SFt=s(qO);nRo=r(SFt,"RoFormerForCausalLM"),SFt.forEach(t),sRo=r(ISe," (RoFormer model)"),ISe.forEach(t),lRo=i(Q),Eb=n(Q,"LI",{});var NSe=s(Eb);bhe=n(NSe,"STRONG",{});var RFt=s(bhe);iRo=r(RFt,"speech_to_text_2"),RFt.forEach(t),dRo=r(NSe," \u2014 "),jO=n(NSe,"A",{href:!0});var PFt=s(jO);cRo=r(PFt,"Speech2Text2ForCausalLM"),PFt.forEach(t),mRo=r(NSe," (Speech2Text2 model)"),NSe.forEach(t),fRo=i(Q),Cb=n(Q,"LI",{});var qSe=s(Cb);vhe=n(qSe,"STRONG",{});var BFt=s(vhe);gRo=r(BFt,"transfo-xl"),BFt.forEach(t),hRo=r(qSe," \u2014 "),DO=n(qSe,"A",{href:!0});var IFt=s(DO);uRo=r(IFt,"TransfoXLLMHeadModel"),IFt.forEach(t),pRo=r(qSe," (Transformer-XL model)"),qSe.forEach(t),_Ro=i(Q),wb=n(Q,"LI",{});var jSe=s(wb);Fhe=n(jSe,"STRONG",{});var NFt=s(Fhe);bRo=r(NFt,"trocr"),NFt.forEach(t),vRo=r(jSe," \u2014 "),GO=n(jSe,"A",{href:!0});var qFt=s(GO);FRo=r(qFt,"TrOCRForCausalLM"),qFt.forEach(t),TRo=r(jSe," (TrOCR model)"),jSe.forEach(t),MRo=i(Q),Ab=n(Q,"LI",{});var DSe=s(Ab);The=n(DSe,"STRONG",{});var jFt=s(The);ERo=r(jFt,"xglm"),jFt.forEach(t),CRo=r(DSe," \u2014 "),OO=n(DSe,"A",{href:!0});var DFt=s(OO);wRo=r(DFt,"XGLMForCausalLM"),DFt.forEach(t),ARo=r(DSe," (XGLM model)"),DSe.forEach(t),LRo=i(Q),Lb=n(Q,"LI",{});var GSe=s(Lb);Mhe=n(GSe,"STRONG",{});var GFt=s(Mhe);yRo=r(GFt,"xlm"),GFt.forEach(t),xRo=r(GSe," \u2014 "),VO=n(GSe,"A",{href:!0});var OFt=s(VO);$Ro=r(OFt,"XLMWithLMHeadModel"),OFt.forEach(t),kRo=r(GSe," (XLM model)"),GSe.forEach(t),SRo=i(Q),yb=n(Q,"LI",{});var OSe=s(yb);Ehe=n(OSe,"STRONG",{});var VFt=s(Ehe);RRo=r(VFt,"xlm-prophetnet"),VFt.forEach(t),PRo=r(OSe," \u2014 "),XO=n(OSe,"A",{href:!0});var XFt=s(XO);BRo=r(XFt,"XLMProphetNetForCausalLM"),XFt.forEach(t),IRo=r(OSe," (XLM-ProphetNet model)"),OSe.forEach(t),NRo=i(Q),xb=n(Q,"LI",{});var VSe=s(xb);Che=n(VSe,"STRONG",{});var zFt=s(Che);qRo=r(zFt,"xlm-roberta"),zFt.forEach(t),jRo=r(VSe," \u2014 "),zO=n(VSe,"A",{href:!0});var QFt=s(zO);DRo=r(QFt,"XLMRobertaForCausalLM"),QFt.forEach(t),GRo=r(VSe," (XLM-RoBERTa model)"),VSe.forEach(t),ORo=i(Q),$b=n(Q,"LI",{});var XSe=s($b);whe=n(XSe,"STRONG",{});var WFt=s(whe);VRo=r(WFt,"xlm-roberta-xl"),WFt.forEach(t),XRo=r(XSe," \u2014 "),QO=n(XSe,"A",{href:!0});var HFt=s(QO);zRo=r(HFt,"XLMRobertaXLForCausalLM"),HFt.forEach(t),QRo=r(XSe," (XLM-RoBERTa-XL model)"),XSe.forEach(t),WRo=i(Q),kb=n(Q,"LI",{});var zSe=s(kb);Ahe=n(zSe,"STRONG",{});var UFt=s(Ahe);HRo=r(UFt,"xlnet"),UFt.forEach(t),URo=r(zSe," \u2014 "),WO=n(zSe,"A",{href:!0});var JFt=s(WO);JRo=r(JFt,"XLNetLMHeadModel"),JFt.forEach(t),YRo=r(zSe," (XLNet model)"),zSe.forEach(t),Q.forEach(t),KRo=i(da),Sb=n(da,"P",{});var QSe=s(Sb);ZRo=r(QSe,"The model is set in evaluation mode by default using "),Lhe=n(QSe,"CODE",{});var YFt=s(Lhe);ePo=r(YFt,"model.eval()"),YFt.forEach(t),oPo=r(QSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=n(QSe,"CODE",{});var KFt=s(yhe);rPo=r(KFt,"model.train()"),KFt.forEach(t),QSe.forEach(t),tPo=i(da),T(Rb.$$.fragment,da),da.forEach(t),nl.forEach(t),GXe=i(m),Yi=n(m,"H2",{class:!0});var WQe=s(Yi);Pb=n(WQe,"A",{id:!0,class:!0,href:!0});var ZFt=s(Pb);xhe=n(ZFt,"SPAN",{});var eTt=s(xhe);T(Yy.$$.fragment,eTt),eTt.forEach(t),ZFt.forEach(t),aPo=i(WQe),$he=n(WQe,"SPAN",{});var oTt=s($he);nPo=r(oTt,"AutoModelForMaskedLM"),oTt.forEach(t),WQe.forEach(t),OXe=i(m),Po=n(m,"DIV",{class:!0});var sl=s(Po);T(Ky.$$.fragment,sl),sPo=i(sl),Ki=n(sl,"P",{});var Kre=s(Ki);lPo=r(Kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),HO=n(Kre,"A",{href:!0});var rTt=s(HO);iPo=r(rTt,"from_pretrained()"),rTt.forEach(t),dPo=r(Kre," class method or the "),UO=n(Kre,"A",{href:!0});var tTt=s(UO);cPo=r(tTt,"from_config()"),tTt.forEach(t),mPo=r(Kre,` class
method.`),Kre.forEach(t),fPo=i(sl),Zy=n(sl,"P",{});var HQe=s(Zy);gPo=r(HQe,"This class cannot be instantiated directly using "),khe=n(HQe,"CODE",{});var aTt=s(khe);hPo=r(aTt,"__init__()"),aTt.forEach(t),uPo=r(HQe," (throws an error)."),HQe.forEach(t),pPo=i(sl),mt=n(sl,"DIV",{class:!0});var F7=s(mt);T(e8.$$.fragment,F7),_Po=i(F7),She=n(F7,"P",{});var nTt=s(She);bPo=r(nTt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),nTt.forEach(t),vPo=i(F7),Zi=n(F7,"P",{});var Zre=s(Zi);FPo=r(Zre,`Note:
Loading a model from its configuration file does `),Rhe=n(Zre,"STRONG",{});var sTt=s(Rhe);TPo=r(sTt,"not"),sTt.forEach(t),MPo=r(Zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=n(Zre,"A",{href:!0});var lTt=s(JO);EPo=r(lTt,"from_pretrained()"),lTt.forEach(t),CPo=r(Zre," to load the model weights."),Zre.forEach(t),wPo=i(F7),T(Bb.$$.fragment,F7),F7.forEach(t),APo=i(sl),eo=n(sl,"DIV",{class:!0});var ca=s(eo);T(o8.$$.fragment,ca),LPo=i(ca),Phe=n(ca,"P",{});var iTt=s(Phe);yPo=r(iTt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),iTt.forEach(t),xPo=i(ca),ja=n(ca,"P",{});var T7=s(ja);$Po=r(T7,"The model class to instantiate is selected based on the "),Bhe=n(T7,"CODE",{});var dTt=s(Bhe);kPo=r(dTt,"model_type"),dTt.forEach(t),SPo=r(T7,` property of the config object (either
passed as an argument or loaded from `),Ihe=n(T7,"CODE",{});var cTt=s(Ihe);RPo=r(cTt,"pretrained_model_name_or_path"),cTt.forEach(t),PPo=r(T7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nhe=n(T7,"CODE",{});var mTt=s(Nhe);BPo=r(mTt,"pretrained_model_name_or_path"),mTt.forEach(t),IPo=r(T7,":"),T7.forEach(t),NPo=i(ca),W=n(ca,"UL",{});var H=s(W);Ib=n(H,"LI",{});var WSe=s(Ib);qhe=n(WSe,"STRONG",{});var fTt=s(qhe);qPo=r(fTt,"albert"),fTt.forEach(t),jPo=r(WSe," \u2014 "),YO=n(WSe,"A",{href:!0});var gTt=s(YO);DPo=r(gTt,"AlbertForMaskedLM"),gTt.forEach(t),GPo=r(WSe," (ALBERT model)"),WSe.forEach(t),OPo=i(H),Nb=n(H,"LI",{});var HSe=s(Nb);jhe=n(HSe,"STRONG",{});var hTt=s(jhe);VPo=r(hTt,"bart"),hTt.forEach(t),XPo=r(HSe," \u2014 "),KO=n(HSe,"A",{href:!0});var uTt=s(KO);zPo=r(uTt,"BartForConditionalGeneration"),uTt.forEach(t),QPo=r(HSe," (BART model)"),HSe.forEach(t),WPo=i(H),qb=n(H,"LI",{});var USe=s(qb);Dhe=n(USe,"STRONG",{});var pTt=s(Dhe);HPo=r(pTt,"bert"),pTt.forEach(t),UPo=r(USe," \u2014 "),ZO=n(USe,"A",{href:!0});var _Tt=s(ZO);JPo=r(_Tt,"BertForMaskedLM"),_Tt.forEach(t),YPo=r(USe," (BERT model)"),USe.forEach(t),KPo=i(H),jb=n(H,"LI",{});var JSe=s(jb);Ghe=n(JSe,"STRONG",{});var bTt=s(Ghe);ZPo=r(bTt,"big_bird"),bTt.forEach(t),eBo=r(JSe," \u2014 "),eV=n(JSe,"A",{href:!0});var vTt=s(eV);oBo=r(vTt,"BigBirdForMaskedLM"),vTt.forEach(t),rBo=r(JSe," (BigBird model)"),JSe.forEach(t),tBo=i(H),Db=n(H,"LI",{});var YSe=s(Db);Ohe=n(YSe,"STRONG",{});var FTt=s(Ohe);aBo=r(FTt,"camembert"),FTt.forEach(t),nBo=r(YSe," \u2014 "),oV=n(YSe,"A",{href:!0});var TTt=s(oV);sBo=r(TTt,"CamembertForMaskedLM"),TTt.forEach(t),lBo=r(YSe," (CamemBERT model)"),YSe.forEach(t),iBo=i(H),Gb=n(H,"LI",{});var KSe=s(Gb);Vhe=n(KSe,"STRONG",{});var MTt=s(Vhe);dBo=r(MTt,"convbert"),MTt.forEach(t),cBo=r(KSe," \u2014 "),rV=n(KSe,"A",{href:!0});var ETt=s(rV);mBo=r(ETt,"ConvBertForMaskedLM"),ETt.forEach(t),fBo=r(KSe," (ConvBERT model)"),KSe.forEach(t),gBo=i(H),Ob=n(H,"LI",{});var ZSe=s(Ob);Xhe=n(ZSe,"STRONG",{});var CTt=s(Xhe);hBo=r(CTt,"data2vec-text"),CTt.forEach(t),uBo=r(ZSe," \u2014 "),tV=n(ZSe,"A",{href:!0});var wTt=s(tV);pBo=r(wTt,"Data2VecTextForMaskedLM"),wTt.forEach(t),_Bo=r(ZSe," (Data2VecText model)"),ZSe.forEach(t),bBo=i(H),Vb=n(H,"LI",{});var eRe=s(Vb);zhe=n(eRe,"STRONG",{});var ATt=s(zhe);vBo=r(ATt,"deberta"),ATt.forEach(t),FBo=r(eRe," \u2014 "),aV=n(eRe,"A",{href:!0});var LTt=s(aV);TBo=r(LTt,"DebertaForMaskedLM"),LTt.forEach(t),MBo=r(eRe," (DeBERTa model)"),eRe.forEach(t),EBo=i(H),Xb=n(H,"LI",{});var oRe=s(Xb);Qhe=n(oRe,"STRONG",{});var yTt=s(Qhe);CBo=r(yTt,"deberta-v2"),yTt.forEach(t),wBo=r(oRe," \u2014 "),nV=n(oRe,"A",{href:!0});var xTt=s(nV);ABo=r(xTt,"DebertaV2ForMaskedLM"),xTt.forEach(t),LBo=r(oRe," (DeBERTa-v2 model)"),oRe.forEach(t),yBo=i(H),zb=n(H,"LI",{});var rRe=s(zb);Whe=n(rRe,"STRONG",{});var $Tt=s(Whe);xBo=r($Tt,"distilbert"),$Tt.forEach(t),$Bo=r(rRe," \u2014 "),sV=n(rRe,"A",{href:!0});var kTt=s(sV);kBo=r(kTt,"DistilBertForMaskedLM"),kTt.forEach(t),SBo=r(rRe," (DistilBERT model)"),rRe.forEach(t),RBo=i(H),Qb=n(H,"LI",{});var tRe=s(Qb);Hhe=n(tRe,"STRONG",{});var STt=s(Hhe);PBo=r(STt,"electra"),STt.forEach(t),BBo=r(tRe," \u2014 "),lV=n(tRe,"A",{href:!0});var RTt=s(lV);IBo=r(RTt,"ElectraForMaskedLM"),RTt.forEach(t),NBo=r(tRe," (ELECTRA model)"),tRe.forEach(t),qBo=i(H),Wb=n(H,"LI",{});var aRe=s(Wb);Uhe=n(aRe,"STRONG",{});var PTt=s(Uhe);jBo=r(PTt,"flaubert"),PTt.forEach(t),DBo=r(aRe," \u2014 "),iV=n(aRe,"A",{href:!0});var BTt=s(iV);GBo=r(BTt,"FlaubertWithLMHeadModel"),BTt.forEach(t),OBo=r(aRe," (FlauBERT model)"),aRe.forEach(t),VBo=i(H),Hb=n(H,"LI",{});var nRe=s(Hb);Jhe=n(nRe,"STRONG",{});var ITt=s(Jhe);XBo=r(ITt,"fnet"),ITt.forEach(t),zBo=r(nRe," \u2014 "),dV=n(nRe,"A",{href:!0});var NTt=s(dV);QBo=r(NTt,"FNetForMaskedLM"),NTt.forEach(t),WBo=r(nRe," (FNet model)"),nRe.forEach(t),HBo=i(H),Ub=n(H,"LI",{});var sRe=s(Ub);Yhe=n(sRe,"STRONG",{});var qTt=s(Yhe);UBo=r(qTt,"funnel"),qTt.forEach(t),JBo=r(sRe," \u2014 "),cV=n(sRe,"A",{href:!0});var jTt=s(cV);YBo=r(jTt,"FunnelForMaskedLM"),jTt.forEach(t),KBo=r(sRe," (Funnel Transformer model)"),sRe.forEach(t),ZBo=i(H),Jb=n(H,"LI",{});var lRe=s(Jb);Khe=n(lRe,"STRONG",{});var DTt=s(Khe);eIo=r(DTt,"ibert"),DTt.forEach(t),oIo=r(lRe," \u2014 "),mV=n(lRe,"A",{href:!0});var GTt=s(mV);rIo=r(GTt,"IBertForMaskedLM"),GTt.forEach(t),tIo=r(lRe," (I-BERT model)"),lRe.forEach(t),aIo=i(H),Yb=n(H,"LI",{});var iRe=s(Yb);Zhe=n(iRe,"STRONG",{});var OTt=s(Zhe);nIo=r(OTt,"layoutlm"),OTt.forEach(t),sIo=r(iRe," \u2014 "),fV=n(iRe,"A",{href:!0});var VTt=s(fV);lIo=r(VTt,"LayoutLMForMaskedLM"),VTt.forEach(t),iIo=r(iRe," (LayoutLM model)"),iRe.forEach(t),dIo=i(H),Kb=n(H,"LI",{});var dRe=s(Kb);eue=n(dRe,"STRONG",{});var XTt=s(eue);cIo=r(XTt,"longformer"),XTt.forEach(t),mIo=r(dRe," \u2014 "),gV=n(dRe,"A",{href:!0});var zTt=s(gV);fIo=r(zTt,"LongformerForMaskedLM"),zTt.forEach(t),gIo=r(dRe," (Longformer model)"),dRe.forEach(t),hIo=i(H),Zb=n(H,"LI",{});var cRe=s(Zb);oue=n(cRe,"STRONG",{});var QTt=s(oue);uIo=r(QTt,"luke"),QTt.forEach(t),pIo=r(cRe," \u2014 "),hV=n(cRe,"A",{href:!0});var WTt=s(hV);_Io=r(WTt,"LukeForMaskedLM"),WTt.forEach(t),bIo=r(cRe," (LUKE model)"),cRe.forEach(t),vIo=i(H),ev=n(H,"LI",{});var mRe=s(ev);rue=n(mRe,"STRONG",{});var HTt=s(rue);FIo=r(HTt,"mbart"),HTt.forEach(t),TIo=r(mRe," \u2014 "),uV=n(mRe,"A",{href:!0});var UTt=s(uV);MIo=r(UTt,"MBartForConditionalGeneration"),UTt.forEach(t),EIo=r(mRe," (mBART model)"),mRe.forEach(t),CIo=i(H),ov=n(H,"LI",{});var fRe=s(ov);tue=n(fRe,"STRONG",{});var JTt=s(tue);wIo=r(JTt,"megatron-bert"),JTt.forEach(t),AIo=r(fRe," \u2014 "),pV=n(fRe,"A",{href:!0});var YTt=s(pV);LIo=r(YTt,"MegatronBertForMaskedLM"),YTt.forEach(t),yIo=r(fRe," (Megatron-BERT model)"),fRe.forEach(t),xIo=i(H),rv=n(H,"LI",{});var gRe=s(rv);aue=n(gRe,"STRONG",{});var KTt=s(aue);$Io=r(KTt,"mobilebert"),KTt.forEach(t),kIo=r(gRe," \u2014 "),_V=n(gRe,"A",{href:!0});var ZTt=s(_V);SIo=r(ZTt,"MobileBertForMaskedLM"),ZTt.forEach(t),RIo=r(gRe," (MobileBERT model)"),gRe.forEach(t),PIo=i(H),tv=n(H,"LI",{});var hRe=s(tv);nue=n(hRe,"STRONG",{});var eMt=s(nue);BIo=r(eMt,"mpnet"),eMt.forEach(t),IIo=r(hRe," \u2014 "),bV=n(hRe,"A",{href:!0});var oMt=s(bV);NIo=r(oMt,"MPNetForMaskedLM"),oMt.forEach(t),qIo=r(hRe," (MPNet model)"),hRe.forEach(t),jIo=i(H),av=n(H,"LI",{});var uRe=s(av);sue=n(uRe,"STRONG",{});var rMt=s(sue);DIo=r(rMt,"mvp"),rMt.forEach(t),GIo=r(uRe," \u2014 "),vV=n(uRe,"A",{href:!0});var tMt=s(vV);OIo=r(tMt,"MvpForConditionalGeneration"),tMt.forEach(t),VIo=r(uRe," (MVP model)"),uRe.forEach(t),XIo=i(H),nv=n(H,"LI",{});var pRe=s(nv);lue=n(pRe,"STRONG",{});var aMt=s(lue);zIo=r(aMt,"nezha"),aMt.forEach(t),QIo=r(pRe," \u2014 "),FV=n(pRe,"A",{href:!0});var nMt=s(FV);WIo=r(nMt,"NezhaForMaskedLM"),nMt.forEach(t),HIo=r(pRe," (Nezha model)"),pRe.forEach(t),UIo=i(H),sv=n(H,"LI",{});var _Re=s(sv);iue=n(_Re,"STRONG",{});var sMt=s(iue);JIo=r(sMt,"nystromformer"),sMt.forEach(t),YIo=r(_Re," \u2014 "),TV=n(_Re,"A",{href:!0});var lMt=s(TV);KIo=r(lMt,"NystromformerForMaskedLM"),lMt.forEach(t),ZIo=r(_Re," (Nystr\xF6mformer model)"),_Re.forEach(t),eNo=i(H),lv=n(H,"LI",{});var bRe=s(lv);due=n(bRe,"STRONG",{});var iMt=s(due);oNo=r(iMt,"perceiver"),iMt.forEach(t),rNo=r(bRe," \u2014 "),MV=n(bRe,"A",{href:!0});var dMt=s(MV);tNo=r(dMt,"PerceiverForMaskedLM"),dMt.forEach(t),aNo=r(bRe," (Perceiver model)"),bRe.forEach(t),nNo=i(H),iv=n(H,"LI",{});var vRe=s(iv);cue=n(vRe,"STRONG",{});var cMt=s(cue);sNo=r(cMt,"qdqbert"),cMt.forEach(t),lNo=r(vRe," \u2014 "),EV=n(vRe,"A",{href:!0});var mMt=s(EV);iNo=r(mMt,"QDQBertForMaskedLM"),mMt.forEach(t),dNo=r(vRe," (QDQBert model)"),vRe.forEach(t),cNo=i(H),dv=n(H,"LI",{});var FRe=s(dv);mue=n(FRe,"STRONG",{});var fMt=s(mue);mNo=r(fMt,"reformer"),fMt.forEach(t),fNo=r(FRe," \u2014 "),CV=n(FRe,"A",{href:!0});var gMt=s(CV);gNo=r(gMt,"ReformerForMaskedLM"),gMt.forEach(t),hNo=r(FRe," (Reformer model)"),FRe.forEach(t),uNo=i(H),cv=n(H,"LI",{});var TRe=s(cv);fue=n(TRe,"STRONG",{});var hMt=s(fue);pNo=r(hMt,"rembert"),hMt.forEach(t),_No=r(TRe," \u2014 "),wV=n(TRe,"A",{href:!0});var uMt=s(wV);bNo=r(uMt,"RemBertForMaskedLM"),uMt.forEach(t),vNo=r(TRe," (RemBERT model)"),TRe.forEach(t),FNo=i(H),mv=n(H,"LI",{});var MRe=s(mv);gue=n(MRe,"STRONG",{});var pMt=s(gue);TNo=r(pMt,"roberta"),pMt.forEach(t),MNo=r(MRe," \u2014 "),AV=n(MRe,"A",{href:!0});var _Mt=s(AV);ENo=r(_Mt,"RobertaForMaskedLM"),_Mt.forEach(t),CNo=r(MRe," (RoBERTa model)"),MRe.forEach(t),wNo=i(H),fv=n(H,"LI",{});var ERe=s(fv);hue=n(ERe,"STRONG",{});var bMt=s(hue);ANo=r(bMt,"roformer"),bMt.forEach(t),LNo=r(ERe," \u2014 "),LV=n(ERe,"A",{href:!0});var vMt=s(LV);yNo=r(vMt,"RoFormerForMaskedLM"),vMt.forEach(t),xNo=r(ERe," (RoFormer model)"),ERe.forEach(t),$No=i(H),gv=n(H,"LI",{});var CRe=s(gv);uue=n(CRe,"STRONG",{});var FMt=s(uue);kNo=r(FMt,"squeezebert"),FMt.forEach(t),SNo=r(CRe," \u2014 "),yV=n(CRe,"A",{href:!0});var TMt=s(yV);RNo=r(TMt,"SqueezeBertForMaskedLM"),TMt.forEach(t),PNo=r(CRe," (SqueezeBERT model)"),CRe.forEach(t),BNo=i(H),hv=n(H,"LI",{});var wRe=s(hv);pue=n(wRe,"STRONG",{});var MMt=s(pue);INo=r(MMt,"tapas"),MMt.forEach(t),NNo=r(wRe," \u2014 "),xV=n(wRe,"A",{href:!0});var EMt=s(xV);qNo=r(EMt,"TapasForMaskedLM"),EMt.forEach(t),jNo=r(wRe," (TAPAS model)"),wRe.forEach(t),DNo=i(H),uv=n(H,"LI",{});var ARe=s(uv);_ue=n(ARe,"STRONG",{});var CMt=s(_ue);GNo=r(CMt,"wav2vec2"),CMt.forEach(t),ONo=r(ARe," \u2014 "),bue=n(ARe,"CODE",{});var wMt=s(bue);VNo=r(wMt,"Wav2Vec2ForMaskedLM"),wMt.forEach(t),XNo=r(ARe," (Wav2Vec2 model)"),ARe.forEach(t),zNo=i(H),pv=n(H,"LI",{});var LRe=s(pv);vue=n(LRe,"STRONG",{});var AMt=s(vue);QNo=r(AMt,"xlm"),AMt.forEach(t),WNo=r(LRe," \u2014 "),$V=n(LRe,"A",{href:!0});var LMt=s($V);HNo=r(LMt,"XLMWithLMHeadModel"),LMt.forEach(t),UNo=r(LRe," (XLM model)"),LRe.forEach(t),JNo=i(H),_v=n(H,"LI",{});var yRe=s(_v);Fue=n(yRe,"STRONG",{});var yMt=s(Fue);YNo=r(yMt,"xlm-roberta"),yMt.forEach(t),KNo=r(yRe," \u2014 "),kV=n(yRe,"A",{href:!0});var xMt=s(kV);ZNo=r(xMt,"XLMRobertaForMaskedLM"),xMt.forEach(t),eqo=r(yRe," (XLM-RoBERTa model)"),yRe.forEach(t),oqo=i(H),bv=n(H,"LI",{});var xRe=s(bv);Tue=n(xRe,"STRONG",{});var $Mt=s(Tue);rqo=r($Mt,"xlm-roberta-xl"),$Mt.forEach(t),tqo=r(xRe," \u2014 "),SV=n(xRe,"A",{href:!0});var kMt=s(SV);aqo=r(kMt,"XLMRobertaXLForMaskedLM"),kMt.forEach(t),nqo=r(xRe," (XLM-RoBERTa-XL model)"),xRe.forEach(t),sqo=i(H),vv=n(H,"LI",{});var $Re=s(vv);Mue=n($Re,"STRONG",{});var SMt=s(Mue);lqo=r(SMt,"yoso"),SMt.forEach(t),iqo=r($Re," \u2014 "),RV=n($Re,"A",{href:!0});var RMt=s(RV);dqo=r(RMt,"YosoForMaskedLM"),RMt.forEach(t),cqo=r($Re," (YOSO model)"),$Re.forEach(t),H.forEach(t),mqo=i(ca),Fv=n(ca,"P",{});var kRe=s(Fv);fqo=r(kRe,"The model is set in evaluation mode by default using "),Eue=n(kRe,"CODE",{});var PMt=s(Eue);gqo=r(PMt,"model.eval()"),PMt.forEach(t),hqo=r(kRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cue=n(kRe,"CODE",{});var BMt=s(Cue);uqo=r(BMt,"model.train()"),BMt.forEach(t),kRe.forEach(t),pqo=i(ca),T(Tv.$$.fragment,ca),ca.forEach(t),sl.forEach(t),VXe=i(m),ed=n(m,"H2",{class:!0});var UQe=s(ed);Mv=n(UQe,"A",{id:!0,class:!0,href:!0});var IMt=s(Mv);wue=n(IMt,"SPAN",{});var NMt=s(wue);T(r8.$$.fragment,NMt),NMt.forEach(t),IMt.forEach(t),_qo=i(UQe),Aue=n(UQe,"SPAN",{});var qMt=s(Aue);bqo=r(qMt,"AutoModelForSeq2SeqLM"),qMt.forEach(t),UQe.forEach(t),XXe=i(m),Bo=n(m,"DIV",{class:!0});var ll=s(Bo);T(t8.$$.fragment,ll),vqo=i(ll),od=n(ll,"P",{});var ete=s(od);Fqo=r(ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PV=n(ete,"A",{href:!0});var jMt=s(PV);Tqo=r(jMt,"from_pretrained()"),jMt.forEach(t),Mqo=r(ete," class method or the "),BV=n(ete,"A",{href:!0});var DMt=s(BV);Eqo=r(DMt,"from_config()"),DMt.forEach(t),Cqo=r(ete,` class
method.`),ete.forEach(t),wqo=i(ll),a8=n(ll,"P",{});var JQe=s(a8);Aqo=r(JQe,"This class cannot be instantiated directly using "),Lue=n(JQe,"CODE",{});var GMt=s(Lue);Lqo=r(GMt,"__init__()"),GMt.forEach(t),yqo=r(JQe," (throws an error)."),JQe.forEach(t),xqo=i(ll),ft=n(ll,"DIV",{class:!0});var M7=s(ft);T(n8.$$.fragment,M7),$qo=i(M7),yue=n(M7,"P",{});var OMt=s(yue);kqo=r(OMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),OMt.forEach(t),Sqo=i(M7),rd=n(M7,"P",{});var ote=s(rd);Rqo=r(ote,`Note:
Loading a model from its configuration file does `),xue=n(ote,"STRONG",{});var VMt=s(xue);Pqo=r(VMt,"not"),VMt.forEach(t),Bqo=r(ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=n(ote,"A",{href:!0});var XMt=s(IV);Iqo=r(XMt,"from_pretrained()"),XMt.forEach(t),Nqo=r(ote," to load the model weights."),ote.forEach(t),qqo=i(M7),T(Ev.$$.fragment,M7),M7.forEach(t),jqo=i(ll),oo=n(ll,"DIV",{class:!0});var ma=s(oo);T(s8.$$.fragment,ma),Dqo=i(ma),$ue=n(ma,"P",{});var zMt=s($ue);Gqo=r(zMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zMt.forEach(t),Oqo=i(ma),Da=n(ma,"P",{});var E7=s(Da);Vqo=r(E7,"The model class to instantiate is selected based on the "),kue=n(E7,"CODE",{});var QMt=s(kue);Xqo=r(QMt,"model_type"),QMt.forEach(t),zqo=r(E7,` property of the config object (either
passed as an argument or loaded from `),Sue=n(E7,"CODE",{});var WMt=s(Sue);Qqo=r(WMt,"pretrained_model_name_or_path"),WMt.forEach(t),Wqo=r(E7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=n(E7,"CODE",{});var HMt=s(Rue);Hqo=r(HMt,"pretrained_model_name_or_path"),HMt.forEach(t),Uqo=r(E7,":"),E7.forEach(t),Jqo=i(ma),me=n(ma,"UL",{});var pe=s(me);Cv=n(pe,"LI",{});var SRe=s(Cv);Pue=n(SRe,"STRONG",{});var UMt=s(Pue);Yqo=r(UMt,"bart"),UMt.forEach(t),Kqo=r(SRe," \u2014 "),NV=n(SRe,"A",{href:!0});var JMt=s(NV);Zqo=r(JMt,"BartForConditionalGeneration"),JMt.forEach(t),ejo=r(SRe," (BART model)"),SRe.forEach(t),ojo=i(pe),wv=n(pe,"LI",{});var RRe=s(wv);Bue=n(RRe,"STRONG",{});var YMt=s(Bue);rjo=r(YMt,"bigbird_pegasus"),YMt.forEach(t),tjo=r(RRe," \u2014 "),qV=n(RRe,"A",{href:!0});var KMt=s(qV);ajo=r(KMt,"BigBirdPegasusForConditionalGeneration"),KMt.forEach(t),njo=r(RRe," (BigBird-Pegasus model)"),RRe.forEach(t),sjo=i(pe),Av=n(pe,"LI",{});var PRe=s(Av);Iue=n(PRe,"STRONG",{});var ZMt=s(Iue);ljo=r(ZMt,"blenderbot"),ZMt.forEach(t),ijo=r(PRe," \u2014 "),jV=n(PRe,"A",{href:!0});var e4t=s(jV);djo=r(e4t,"BlenderbotForConditionalGeneration"),e4t.forEach(t),cjo=r(PRe," (Blenderbot model)"),PRe.forEach(t),mjo=i(pe),Lv=n(pe,"LI",{});var BRe=s(Lv);Nue=n(BRe,"STRONG",{});var o4t=s(Nue);fjo=r(o4t,"blenderbot-small"),o4t.forEach(t),gjo=r(BRe," \u2014 "),DV=n(BRe,"A",{href:!0});var r4t=s(DV);hjo=r(r4t,"BlenderbotSmallForConditionalGeneration"),r4t.forEach(t),ujo=r(BRe," (BlenderbotSmall model)"),BRe.forEach(t),pjo=i(pe),yv=n(pe,"LI",{});var IRe=s(yv);que=n(IRe,"STRONG",{});var t4t=s(que);_jo=r(t4t,"encoder-decoder"),t4t.forEach(t),bjo=r(IRe," \u2014 "),GV=n(IRe,"A",{href:!0});var a4t=s(GV);vjo=r(a4t,"EncoderDecoderModel"),a4t.forEach(t),Fjo=r(IRe," (Encoder decoder model)"),IRe.forEach(t),Tjo=i(pe),xv=n(pe,"LI",{});var NRe=s(xv);jue=n(NRe,"STRONG",{});var n4t=s(jue);Mjo=r(n4t,"fsmt"),n4t.forEach(t),Ejo=r(NRe," \u2014 "),OV=n(NRe,"A",{href:!0});var s4t=s(OV);Cjo=r(s4t,"FSMTForConditionalGeneration"),s4t.forEach(t),wjo=r(NRe," (FairSeq Machine-Translation model)"),NRe.forEach(t),Ajo=i(pe),$v=n(pe,"LI",{});var qRe=s($v);Due=n(qRe,"STRONG",{});var l4t=s(Due);Ljo=r(l4t,"led"),l4t.forEach(t),yjo=r(qRe," \u2014 "),VV=n(qRe,"A",{href:!0});var i4t=s(VV);xjo=r(i4t,"LEDForConditionalGeneration"),i4t.forEach(t),$jo=r(qRe," (LED model)"),qRe.forEach(t),kjo=i(pe),kv=n(pe,"LI",{});var jRe=s(kv);Gue=n(jRe,"STRONG",{});var d4t=s(Gue);Sjo=r(d4t,"longt5"),d4t.forEach(t),Rjo=r(jRe," \u2014 "),XV=n(jRe,"A",{href:!0});var c4t=s(XV);Pjo=r(c4t,"LongT5ForConditionalGeneration"),c4t.forEach(t),Bjo=r(jRe," (LongT5 model)"),jRe.forEach(t),Ijo=i(pe),Sv=n(pe,"LI",{});var DRe=s(Sv);Oue=n(DRe,"STRONG",{});var m4t=s(Oue);Njo=r(m4t,"m2m_100"),m4t.forEach(t),qjo=r(DRe," \u2014 "),zV=n(DRe,"A",{href:!0});var f4t=s(zV);jjo=r(f4t,"M2M100ForConditionalGeneration"),f4t.forEach(t),Djo=r(DRe," (M2M100 model)"),DRe.forEach(t),Gjo=i(pe),Rv=n(pe,"LI",{});var GRe=s(Rv);Vue=n(GRe,"STRONG",{});var g4t=s(Vue);Ojo=r(g4t,"marian"),g4t.forEach(t),Vjo=r(GRe," \u2014 "),QV=n(GRe,"A",{href:!0});var h4t=s(QV);Xjo=r(h4t,"MarianMTModel"),h4t.forEach(t),zjo=r(GRe," (Marian model)"),GRe.forEach(t),Qjo=i(pe),Pv=n(pe,"LI",{});var ORe=s(Pv);Xue=n(ORe,"STRONG",{});var u4t=s(Xue);Wjo=r(u4t,"mbart"),u4t.forEach(t),Hjo=r(ORe," \u2014 "),WV=n(ORe,"A",{href:!0});var p4t=s(WV);Ujo=r(p4t,"MBartForConditionalGeneration"),p4t.forEach(t),Jjo=r(ORe," (mBART model)"),ORe.forEach(t),Yjo=i(pe),Bv=n(pe,"LI",{});var VRe=s(Bv);zue=n(VRe,"STRONG",{});var _4t=s(zue);Kjo=r(_4t,"mt5"),_4t.forEach(t),Zjo=r(VRe," \u2014 "),HV=n(VRe,"A",{href:!0});var b4t=s(HV);eDo=r(b4t,"MT5ForConditionalGeneration"),b4t.forEach(t),oDo=r(VRe," (MT5 model)"),VRe.forEach(t),rDo=i(pe),Iv=n(pe,"LI",{});var XRe=s(Iv);Que=n(XRe,"STRONG",{});var v4t=s(Que);tDo=r(v4t,"mvp"),v4t.forEach(t),aDo=r(XRe," \u2014 "),UV=n(XRe,"A",{href:!0});var F4t=s(UV);nDo=r(F4t,"MvpForConditionalGeneration"),F4t.forEach(t),sDo=r(XRe," (MVP model)"),XRe.forEach(t),lDo=i(pe),Nv=n(pe,"LI",{});var zRe=s(Nv);Wue=n(zRe,"STRONG",{});var T4t=s(Wue);iDo=r(T4t,"nllb"),T4t.forEach(t),dDo=r(zRe," \u2014 "),JV=n(zRe,"A",{href:!0});var M4t=s(JV);cDo=r(M4t,"M2M100ForConditionalGeneration"),M4t.forEach(t),mDo=r(zRe," (NLLB model)"),zRe.forEach(t),fDo=i(pe),qv=n(pe,"LI",{});var QRe=s(qv);Hue=n(QRe,"STRONG",{});var E4t=s(Hue);gDo=r(E4t,"pegasus"),E4t.forEach(t),hDo=r(QRe," \u2014 "),YV=n(QRe,"A",{href:!0});var C4t=s(YV);uDo=r(C4t,"PegasusForConditionalGeneration"),C4t.forEach(t),pDo=r(QRe," (Pegasus model)"),QRe.forEach(t),_Do=i(pe),jv=n(pe,"LI",{});var WRe=s(jv);Uue=n(WRe,"STRONG",{});var w4t=s(Uue);bDo=r(w4t,"plbart"),w4t.forEach(t),vDo=r(WRe," \u2014 "),KV=n(WRe,"A",{href:!0});var A4t=s(KV);FDo=r(A4t,"PLBartForConditionalGeneration"),A4t.forEach(t),TDo=r(WRe," (PLBart model)"),WRe.forEach(t),MDo=i(pe),Dv=n(pe,"LI",{});var HRe=s(Dv);Jue=n(HRe,"STRONG",{});var L4t=s(Jue);EDo=r(L4t,"prophetnet"),L4t.forEach(t),CDo=r(HRe," \u2014 "),ZV=n(HRe,"A",{href:!0});var y4t=s(ZV);wDo=r(y4t,"ProphetNetForConditionalGeneration"),y4t.forEach(t),ADo=r(HRe," (ProphetNet model)"),HRe.forEach(t),LDo=i(pe),Gv=n(pe,"LI",{});var URe=s(Gv);Yue=n(URe,"STRONG",{});var x4t=s(Yue);yDo=r(x4t,"t5"),x4t.forEach(t),xDo=r(URe," \u2014 "),eX=n(URe,"A",{href:!0});var $4t=s(eX);$Do=r($4t,"T5ForConditionalGeneration"),$4t.forEach(t),kDo=r(URe," (T5 model)"),URe.forEach(t),SDo=i(pe),Ov=n(pe,"LI",{});var JRe=s(Ov);Kue=n(JRe,"STRONG",{});var k4t=s(Kue);RDo=r(k4t,"xlm-prophetnet"),k4t.forEach(t),PDo=r(JRe," \u2014 "),oX=n(JRe,"A",{href:!0});var S4t=s(oX);BDo=r(S4t,"XLMProphetNetForConditionalGeneration"),S4t.forEach(t),IDo=r(JRe," (XLM-ProphetNet model)"),JRe.forEach(t),pe.forEach(t),NDo=i(ma),Vv=n(ma,"P",{});var YRe=s(Vv);qDo=r(YRe,"The model is set in evaluation mode by default using "),Zue=n(YRe,"CODE",{});var R4t=s(Zue);jDo=r(R4t,"model.eval()"),R4t.forEach(t),DDo=r(YRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=n(YRe,"CODE",{});var P4t=s(epe);GDo=r(P4t,"model.train()"),P4t.forEach(t),YRe.forEach(t),ODo=i(ma),T(Xv.$$.fragment,ma),ma.forEach(t),ll.forEach(t),zXe=i(m),td=n(m,"H2",{class:!0});var YQe=s(td);zv=n(YQe,"A",{id:!0,class:!0,href:!0});var B4t=s(zv);ope=n(B4t,"SPAN",{});var I4t=s(ope);T(l8.$$.fragment,I4t),I4t.forEach(t),B4t.forEach(t),VDo=i(YQe),rpe=n(YQe,"SPAN",{});var N4t=s(rpe);XDo=r(N4t,"AutoModelForSequenceClassification"),N4t.forEach(t),YQe.forEach(t),QXe=i(m),Io=n(m,"DIV",{class:!0});var il=s(Io);T(i8.$$.fragment,il),zDo=i(il),ad=n(il,"P",{});var rte=s(ad);QDo=r(rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rX=n(rte,"A",{href:!0});var q4t=s(rX);WDo=r(q4t,"from_pretrained()"),q4t.forEach(t),HDo=r(rte," class method or the "),tX=n(rte,"A",{href:!0});var j4t=s(tX);UDo=r(j4t,"from_config()"),j4t.forEach(t),JDo=r(rte,` class
method.`),rte.forEach(t),YDo=i(il),d8=n(il,"P",{});var KQe=s(d8);KDo=r(KQe,"This class cannot be instantiated directly using "),tpe=n(KQe,"CODE",{});var D4t=s(tpe);ZDo=r(D4t,"__init__()"),D4t.forEach(t),eGo=r(KQe," (throws an error)."),KQe.forEach(t),oGo=i(il),gt=n(il,"DIV",{class:!0});var C7=s(gt);T(c8.$$.fragment,C7),rGo=i(C7),ape=n(C7,"P",{});var G4t=s(ape);tGo=r(G4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),G4t.forEach(t),aGo=i(C7),nd=n(C7,"P",{});var tte=s(nd);nGo=r(tte,`Note:
Loading a model from its configuration file does `),npe=n(tte,"STRONG",{});var O4t=s(npe);sGo=r(O4t,"not"),O4t.forEach(t),lGo=r(tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(tte,"A",{href:!0});var V4t=s(aX);iGo=r(V4t,"from_pretrained()"),V4t.forEach(t),dGo=r(tte," to load the model weights."),tte.forEach(t),cGo=i(C7),T(Qv.$$.fragment,C7),C7.forEach(t),mGo=i(il),ro=n(il,"DIV",{class:!0});var fa=s(ro);T(m8.$$.fragment,fa),fGo=i(fa),spe=n(fa,"P",{});var X4t=s(spe);gGo=r(X4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),X4t.forEach(t),hGo=i(fa),Ga=n(fa,"P",{});var w7=s(Ga);uGo=r(w7,"The model class to instantiate is selected based on the "),lpe=n(w7,"CODE",{});var z4t=s(lpe);pGo=r(z4t,"model_type"),z4t.forEach(t),_Go=r(w7,` property of the config object (either
passed as an argument or loaded from `),ipe=n(w7,"CODE",{});var Q4t=s(ipe);bGo=r(Q4t,"pretrained_model_name_or_path"),Q4t.forEach(t),vGo=r(w7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=n(w7,"CODE",{});var W4t=s(dpe);FGo=r(W4t,"pretrained_model_name_or_path"),W4t.forEach(t),TGo=r(w7,":"),w7.forEach(t),MGo=i(fa),B=n(fa,"UL",{});var j=s(B);Wv=n(j,"LI",{});var KRe=s(Wv);cpe=n(KRe,"STRONG",{});var H4t=s(cpe);EGo=r(H4t,"albert"),H4t.forEach(t),CGo=r(KRe," \u2014 "),nX=n(KRe,"A",{href:!0});var U4t=s(nX);wGo=r(U4t,"AlbertForSequenceClassification"),U4t.forEach(t),AGo=r(KRe," (ALBERT model)"),KRe.forEach(t),LGo=i(j),Hv=n(j,"LI",{});var ZRe=s(Hv);mpe=n(ZRe,"STRONG",{});var J4t=s(mpe);yGo=r(J4t,"bart"),J4t.forEach(t),xGo=r(ZRe," \u2014 "),sX=n(ZRe,"A",{href:!0});var Y4t=s(sX);$Go=r(Y4t,"BartForSequenceClassification"),Y4t.forEach(t),kGo=r(ZRe," (BART model)"),ZRe.forEach(t),SGo=i(j),Uv=n(j,"LI",{});var ePe=s(Uv);fpe=n(ePe,"STRONG",{});var K4t=s(fpe);RGo=r(K4t,"bert"),K4t.forEach(t),PGo=r(ePe," \u2014 "),lX=n(ePe,"A",{href:!0});var Z4t=s(lX);BGo=r(Z4t,"BertForSequenceClassification"),Z4t.forEach(t),IGo=r(ePe," (BERT model)"),ePe.forEach(t),NGo=i(j),Jv=n(j,"LI",{});var oPe=s(Jv);gpe=n(oPe,"STRONG",{});var eEt=s(gpe);qGo=r(eEt,"big_bird"),eEt.forEach(t),jGo=r(oPe," \u2014 "),iX=n(oPe,"A",{href:!0});var oEt=s(iX);DGo=r(oEt,"BigBirdForSequenceClassification"),oEt.forEach(t),GGo=r(oPe," (BigBird model)"),oPe.forEach(t),OGo=i(j),Yv=n(j,"LI",{});var rPe=s(Yv);hpe=n(rPe,"STRONG",{});var rEt=s(hpe);VGo=r(rEt,"bigbird_pegasus"),rEt.forEach(t),XGo=r(rPe," \u2014 "),dX=n(rPe,"A",{href:!0});var tEt=s(dX);zGo=r(tEt,"BigBirdPegasusForSequenceClassification"),tEt.forEach(t),QGo=r(rPe," (BigBird-Pegasus model)"),rPe.forEach(t),WGo=i(j),Kv=n(j,"LI",{});var tPe=s(Kv);upe=n(tPe,"STRONG",{});var aEt=s(upe);HGo=r(aEt,"bloom"),aEt.forEach(t),UGo=r(tPe," \u2014 "),cX=n(tPe,"A",{href:!0});var nEt=s(cX);JGo=r(nEt,"BloomForSequenceClassification"),nEt.forEach(t),YGo=r(tPe," (BLOOM model)"),tPe.forEach(t),KGo=i(j),Zv=n(j,"LI",{});var aPe=s(Zv);ppe=n(aPe,"STRONG",{});var sEt=s(ppe);ZGo=r(sEt,"camembert"),sEt.forEach(t),eOo=r(aPe," \u2014 "),mX=n(aPe,"A",{href:!0});var lEt=s(mX);oOo=r(lEt,"CamembertForSequenceClassification"),lEt.forEach(t),rOo=r(aPe," (CamemBERT model)"),aPe.forEach(t),tOo=i(j),e1=n(j,"LI",{});var nPe=s(e1);_pe=n(nPe,"STRONG",{});var iEt=s(_pe);aOo=r(iEt,"canine"),iEt.forEach(t),nOo=r(nPe," \u2014 "),fX=n(nPe,"A",{href:!0});var dEt=s(fX);sOo=r(dEt,"CanineForSequenceClassification"),dEt.forEach(t),lOo=r(nPe," (CANINE model)"),nPe.forEach(t),iOo=i(j),o1=n(j,"LI",{});var sPe=s(o1);bpe=n(sPe,"STRONG",{});var cEt=s(bpe);dOo=r(cEt,"convbert"),cEt.forEach(t),cOo=r(sPe," \u2014 "),gX=n(sPe,"A",{href:!0});var mEt=s(gX);mOo=r(mEt,"ConvBertForSequenceClassification"),mEt.forEach(t),fOo=r(sPe," (ConvBERT model)"),sPe.forEach(t),gOo=i(j),r1=n(j,"LI",{});var lPe=s(r1);vpe=n(lPe,"STRONG",{});var fEt=s(vpe);hOo=r(fEt,"ctrl"),fEt.forEach(t),uOo=r(lPe," \u2014 "),hX=n(lPe,"A",{href:!0});var gEt=s(hX);pOo=r(gEt,"CTRLForSequenceClassification"),gEt.forEach(t),_Oo=r(lPe," (CTRL model)"),lPe.forEach(t),bOo=i(j),t1=n(j,"LI",{});var iPe=s(t1);Fpe=n(iPe,"STRONG",{});var hEt=s(Fpe);vOo=r(hEt,"data2vec-text"),hEt.forEach(t),FOo=r(iPe," \u2014 "),uX=n(iPe,"A",{href:!0});var uEt=s(uX);TOo=r(uEt,"Data2VecTextForSequenceClassification"),uEt.forEach(t),MOo=r(iPe," (Data2VecText model)"),iPe.forEach(t),EOo=i(j),a1=n(j,"LI",{});var dPe=s(a1);Tpe=n(dPe,"STRONG",{});var pEt=s(Tpe);COo=r(pEt,"deberta"),pEt.forEach(t),wOo=r(dPe," \u2014 "),pX=n(dPe,"A",{href:!0});var _Et=s(pX);AOo=r(_Et,"DebertaForSequenceClassification"),_Et.forEach(t),LOo=r(dPe," (DeBERTa model)"),dPe.forEach(t),yOo=i(j),n1=n(j,"LI",{});var cPe=s(n1);Mpe=n(cPe,"STRONG",{});var bEt=s(Mpe);xOo=r(bEt,"deberta-v2"),bEt.forEach(t),$Oo=r(cPe," \u2014 "),_X=n(cPe,"A",{href:!0});var vEt=s(_X);kOo=r(vEt,"DebertaV2ForSequenceClassification"),vEt.forEach(t),SOo=r(cPe," (DeBERTa-v2 model)"),cPe.forEach(t),ROo=i(j),s1=n(j,"LI",{});var mPe=s(s1);Epe=n(mPe,"STRONG",{});var FEt=s(Epe);POo=r(FEt,"distilbert"),FEt.forEach(t),BOo=r(mPe," \u2014 "),bX=n(mPe,"A",{href:!0});var TEt=s(bX);IOo=r(TEt,"DistilBertForSequenceClassification"),TEt.forEach(t),NOo=r(mPe," (DistilBERT model)"),mPe.forEach(t),qOo=i(j),l1=n(j,"LI",{});var fPe=s(l1);Cpe=n(fPe,"STRONG",{});var MEt=s(Cpe);jOo=r(MEt,"electra"),MEt.forEach(t),DOo=r(fPe," \u2014 "),vX=n(fPe,"A",{href:!0});var EEt=s(vX);GOo=r(EEt,"ElectraForSequenceClassification"),EEt.forEach(t),OOo=r(fPe," (ELECTRA model)"),fPe.forEach(t),VOo=i(j),i1=n(j,"LI",{});var gPe=s(i1);wpe=n(gPe,"STRONG",{});var CEt=s(wpe);XOo=r(CEt,"flaubert"),CEt.forEach(t),zOo=r(gPe," \u2014 "),FX=n(gPe,"A",{href:!0});var wEt=s(FX);QOo=r(wEt,"FlaubertForSequenceClassification"),wEt.forEach(t),WOo=r(gPe," (FlauBERT model)"),gPe.forEach(t),HOo=i(j),d1=n(j,"LI",{});var hPe=s(d1);Ape=n(hPe,"STRONG",{});var AEt=s(Ape);UOo=r(AEt,"fnet"),AEt.forEach(t),JOo=r(hPe," \u2014 "),TX=n(hPe,"A",{href:!0});var LEt=s(TX);YOo=r(LEt,"FNetForSequenceClassification"),LEt.forEach(t),KOo=r(hPe," (FNet model)"),hPe.forEach(t),ZOo=i(j),c1=n(j,"LI",{});var uPe=s(c1);Lpe=n(uPe,"STRONG",{});var yEt=s(Lpe);eVo=r(yEt,"funnel"),yEt.forEach(t),oVo=r(uPe," \u2014 "),MX=n(uPe,"A",{href:!0});var xEt=s(MX);rVo=r(xEt,"FunnelForSequenceClassification"),xEt.forEach(t),tVo=r(uPe," (Funnel Transformer model)"),uPe.forEach(t),aVo=i(j),m1=n(j,"LI",{});var pPe=s(m1);ype=n(pPe,"STRONG",{});var $Et=s(ype);nVo=r($Et,"gpt2"),$Et.forEach(t),sVo=r(pPe," \u2014 "),EX=n(pPe,"A",{href:!0});var kEt=s(EX);lVo=r(kEt,"GPT2ForSequenceClassification"),kEt.forEach(t),iVo=r(pPe," (OpenAI GPT-2 model)"),pPe.forEach(t),dVo=i(j),f1=n(j,"LI",{});var _Pe=s(f1);xpe=n(_Pe,"STRONG",{});var SEt=s(xpe);cVo=r(SEt,"gpt_neo"),SEt.forEach(t),mVo=r(_Pe," \u2014 "),CX=n(_Pe,"A",{href:!0});var REt=s(CX);fVo=r(REt,"GPTNeoForSequenceClassification"),REt.forEach(t),gVo=r(_Pe," (GPT Neo model)"),_Pe.forEach(t),hVo=i(j),g1=n(j,"LI",{});var bPe=s(g1);$pe=n(bPe,"STRONG",{});var PEt=s($pe);uVo=r(PEt,"gptj"),PEt.forEach(t),pVo=r(bPe," \u2014 "),wX=n(bPe,"A",{href:!0});var BEt=s(wX);_Vo=r(BEt,"GPTJForSequenceClassification"),BEt.forEach(t),bVo=r(bPe," (GPT-J model)"),bPe.forEach(t),vVo=i(j),h1=n(j,"LI",{});var vPe=s(h1);kpe=n(vPe,"STRONG",{});var IEt=s(kpe);FVo=r(IEt,"ibert"),IEt.forEach(t),TVo=r(vPe," \u2014 "),AX=n(vPe,"A",{href:!0});var NEt=s(AX);MVo=r(NEt,"IBertForSequenceClassification"),NEt.forEach(t),EVo=r(vPe," (I-BERT model)"),vPe.forEach(t),CVo=i(j),u1=n(j,"LI",{});var FPe=s(u1);Spe=n(FPe,"STRONG",{});var qEt=s(Spe);wVo=r(qEt,"layoutlm"),qEt.forEach(t),AVo=r(FPe," \u2014 "),LX=n(FPe,"A",{href:!0});var jEt=s(LX);LVo=r(jEt,"LayoutLMForSequenceClassification"),jEt.forEach(t),yVo=r(FPe," (LayoutLM model)"),FPe.forEach(t),xVo=i(j),p1=n(j,"LI",{});var TPe=s(p1);Rpe=n(TPe,"STRONG",{});var DEt=s(Rpe);$Vo=r(DEt,"layoutlmv2"),DEt.forEach(t),kVo=r(TPe," \u2014 "),yX=n(TPe,"A",{href:!0});var GEt=s(yX);SVo=r(GEt,"LayoutLMv2ForSequenceClassification"),GEt.forEach(t),RVo=r(TPe," (LayoutLMv2 model)"),TPe.forEach(t),PVo=i(j),_1=n(j,"LI",{});var MPe=s(_1);Ppe=n(MPe,"STRONG",{});var OEt=s(Ppe);BVo=r(OEt,"layoutlmv3"),OEt.forEach(t),IVo=r(MPe," \u2014 "),xX=n(MPe,"A",{href:!0});var VEt=s(xX);NVo=r(VEt,"LayoutLMv3ForSequenceClassification"),VEt.forEach(t),qVo=r(MPe," (LayoutLMv3 model)"),MPe.forEach(t),jVo=i(j),b1=n(j,"LI",{});var EPe=s(b1);Bpe=n(EPe,"STRONG",{});var XEt=s(Bpe);DVo=r(XEt,"led"),XEt.forEach(t),GVo=r(EPe," \u2014 "),$X=n(EPe,"A",{href:!0});var zEt=s($X);OVo=r(zEt,"LEDForSequenceClassification"),zEt.forEach(t),VVo=r(EPe," (LED model)"),EPe.forEach(t),XVo=i(j),v1=n(j,"LI",{});var CPe=s(v1);Ipe=n(CPe,"STRONG",{});var QEt=s(Ipe);zVo=r(QEt,"longformer"),QEt.forEach(t),QVo=r(CPe," \u2014 "),kX=n(CPe,"A",{href:!0});var WEt=s(kX);WVo=r(WEt,"LongformerForSequenceClassification"),WEt.forEach(t),HVo=r(CPe," (Longformer model)"),CPe.forEach(t),UVo=i(j),F1=n(j,"LI",{});var wPe=s(F1);Npe=n(wPe,"STRONG",{});var HEt=s(Npe);JVo=r(HEt,"mbart"),HEt.forEach(t),YVo=r(wPe," \u2014 "),SX=n(wPe,"A",{href:!0});var UEt=s(SX);KVo=r(UEt,"MBartForSequenceClassification"),UEt.forEach(t),ZVo=r(wPe," (mBART model)"),wPe.forEach(t),eXo=i(j),T1=n(j,"LI",{});var APe=s(T1);qpe=n(APe,"STRONG",{});var JEt=s(qpe);oXo=r(JEt,"megatron-bert"),JEt.forEach(t),rXo=r(APe," \u2014 "),RX=n(APe,"A",{href:!0});var YEt=s(RX);tXo=r(YEt,"MegatronBertForSequenceClassification"),YEt.forEach(t),aXo=r(APe," (Megatron-BERT model)"),APe.forEach(t),nXo=i(j),M1=n(j,"LI",{});var LPe=s(M1);jpe=n(LPe,"STRONG",{});var KEt=s(jpe);sXo=r(KEt,"mobilebert"),KEt.forEach(t),lXo=r(LPe," \u2014 "),PX=n(LPe,"A",{href:!0});var ZEt=s(PX);iXo=r(ZEt,"MobileBertForSequenceClassification"),ZEt.forEach(t),dXo=r(LPe," (MobileBERT model)"),LPe.forEach(t),cXo=i(j),E1=n(j,"LI",{});var yPe=s(E1);Dpe=n(yPe,"STRONG",{});var eCt=s(Dpe);mXo=r(eCt,"mpnet"),eCt.forEach(t),fXo=r(yPe," \u2014 "),BX=n(yPe,"A",{href:!0});var oCt=s(BX);gXo=r(oCt,"MPNetForSequenceClassification"),oCt.forEach(t),hXo=r(yPe," (MPNet model)"),yPe.forEach(t),uXo=i(j),C1=n(j,"LI",{});var xPe=s(C1);Gpe=n(xPe,"STRONG",{});var rCt=s(Gpe);pXo=r(rCt,"mvp"),rCt.forEach(t),_Xo=r(xPe," \u2014 "),IX=n(xPe,"A",{href:!0});var tCt=s(IX);bXo=r(tCt,"MvpForSequenceClassification"),tCt.forEach(t),vXo=r(xPe," (MVP model)"),xPe.forEach(t),FXo=i(j),w1=n(j,"LI",{});var $Pe=s(w1);Ope=n($Pe,"STRONG",{});var aCt=s(Ope);TXo=r(aCt,"nezha"),aCt.forEach(t),MXo=r($Pe," \u2014 "),NX=n($Pe,"A",{href:!0});var nCt=s(NX);EXo=r(nCt,"NezhaForSequenceClassification"),nCt.forEach(t),CXo=r($Pe," (Nezha model)"),$Pe.forEach(t),wXo=i(j),A1=n(j,"LI",{});var kPe=s(A1);Vpe=n(kPe,"STRONG",{});var sCt=s(Vpe);AXo=r(sCt,"nystromformer"),sCt.forEach(t),LXo=r(kPe," \u2014 "),qX=n(kPe,"A",{href:!0});var lCt=s(qX);yXo=r(lCt,"NystromformerForSequenceClassification"),lCt.forEach(t),xXo=r(kPe," (Nystr\xF6mformer model)"),kPe.forEach(t),$Xo=i(j),L1=n(j,"LI",{});var SPe=s(L1);Xpe=n(SPe,"STRONG",{});var iCt=s(Xpe);kXo=r(iCt,"openai-gpt"),iCt.forEach(t),SXo=r(SPe," \u2014 "),jX=n(SPe,"A",{href:!0});var dCt=s(jX);RXo=r(dCt,"OpenAIGPTForSequenceClassification"),dCt.forEach(t),PXo=r(SPe," (OpenAI GPT model)"),SPe.forEach(t),BXo=i(j),y1=n(j,"LI",{});var RPe=s(y1);zpe=n(RPe,"STRONG",{});var cCt=s(zpe);IXo=r(cCt,"opt"),cCt.forEach(t),NXo=r(RPe," \u2014 "),DX=n(RPe,"A",{href:!0});var mCt=s(DX);qXo=r(mCt,"OPTForSequenceClassification"),mCt.forEach(t),jXo=r(RPe," (OPT model)"),RPe.forEach(t),DXo=i(j),x1=n(j,"LI",{});var PPe=s(x1);Qpe=n(PPe,"STRONG",{});var fCt=s(Qpe);GXo=r(fCt,"perceiver"),fCt.forEach(t),OXo=r(PPe," \u2014 "),GX=n(PPe,"A",{href:!0});var gCt=s(GX);VXo=r(gCt,"PerceiverForSequenceClassification"),gCt.forEach(t),XXo=r(PPe," (Perceiver model)"),PPe.forEach(t),zXo=i(j),$1=n(j,"LI",{});var BPe=s($1);Wpe=n(BPe,"STRONG",{});var hCt=s(Wpe);QXo=r(hCt,"plbart"),hCt.forEach(t),WXo=r(BPe," \u2014 "),OX=n(BPe,"A",{href:!0});var uCt=s(OX);HXo=r(uCt,"PLBartForSequenceClassification"),uCt.forEach(t),UXo=r(BPe," (PLBart model)"),BPe.forEach(t),JXo=i(j),k1=n(j,"LI",{});var IPe=s(k1);Hpe=n(IPe,"STRONG",{});var pCt=s(Hpe);YXo=r(pCt,"qdqbert"),pCt.forEach(t),KXo=r(IPe," \u2014 "),VX=n(IPe,"A",{href:!0});var _Ct=s(VX);ZXo=r(_Ct,"QDQBertForSequenceClassification"),_Ct.forEach(t),ezo=r(IPe," (QDQBert model)"),IPe.forEach(t),ozo=i(j),S1=n(j,"LI",{});var NPe=s(S1);Upe=n(NPe,"STRONG",{});var bCt=s(Upe);rzo=r(bCt,"reformer"),bCt.forEach(t),tzo=r(NPe," \u2014 "),XX=n(NPe,"A",{href:!0});var vCt=s(XX);azo=r(vCt,"ReformerForSequenceClassification"),vCt.forEach(t),nzo=r(NPe," (Reformer model)"),NPe.forEach(t),szo=i(j),R1=n(j,"LI",{});var qPe=s(R1);Jpe=n(qPe,"STRONG",{});var FCt=s(Jpe);lzo=r(FCt,"rembert"),FCt.forEach(t),izo=r(qPe," \u2014 "),zX=n(qPe,"A",{href:!0});var TCt=s(zX);dzo=r(TCt,"RemBertForSequenceClassification"),TCt.forEach(t),czo=r(qPe," (RemBERT model)"),qPe.forEach(t),mzo=i(j),P1=n(j,"LI",{});var jPe=s(P1);Ype=n(jPe,"STRONG",{});var MCt=s(Ype);fzo=r(MCt,"roberta"),MCt.forEach(t),gzo=r(jPe," \u2014 "),QX=n(jPe,"A",{href:!0});var ECt=s(QX);hzo=r(ECt,"RobertaForSequenceClassification"),ECt.forEach(t),uzo=r(jPe," (RoBERTa model)"),jPe.forEach(t),pzo=i(j),B1=n(j,"LI",{});var DPe=s(B1);Kpe=n(DPe,"STRONG",{});var CCt=s(Kpe);_zo=r(CCt,"roformer"),CCt.forEach(t),bzo=r(DPe," \u2014 "),WX=n(DPe,"A",{href:!0});var wCt=s(WX);vzo=r(wCt,"RoFormerForSequenceClassification"),wCt.forEach(t),Fzo=r(DPe," (RoFormer model)"),DPe.forEach(t),Tzo=i(j),I1=n(j,"LI",{});var GPe=s(I1);Zpe=n(GPe,"STRONG",{});var ACt=s(Zpe);Mzo=r(ACt,"squeezebert"),ACt.forEach(t),Ezo=r(GPe," \u2014 "),HX=n(GPe,"A",{href:!0});var LCt=s(HX);Czo=r(LCt,"SqueezeBertForSequenceClassification"),LCt.forEach(t),wzo=r(GPe," (SqueezeBERT model)"),GPe.forEach(t),Azo=i(j),N1=n(j,"LI",{});var OPe=s(N1);e_e=n(OPe,"STRONG",{});var yCt=s(e_e);Lzo=r(yCt,"tapas"),yCt.forEach(t),yzo=r(OPe," \u2014 "),UX=n(OPe,"A",{href:!0});var xCt=s(UX);xzo=r(xCt,"TapasForSequenceClassification"),xCt.forEach(t),$zo=r(OPe," (TAPAS model)"),OPe.forEach(t),kzo=i(j),q1=n(j,"LI",{});var VPe=s(q1);o_e=n(VPe,"STRONG",{});var $Ct=s(o_e);Szo=r($Ct,"transfo-xl"),$Ct.forEach(t),Rzo=r(VPe," \u2014 "),JX=n(VPe,"A",{href:!0});var kCt=s(JX);Pzo=r(kCt,"TransfoXLForSequenceClassification"),kCt.forEach(t),Bzo=r(VPe," (Transformer-XL model)"),VPe.forEach(t),Izo=i(j),j1=n(j,"LI",{});var XPe=s(j1);r_e=n(XPe,"STRONG",{});var SCt=s(r_e);Nzo=r(SCt,"xlm"),SCt.forEach(t),qzo=r(XPe," \u2014 "),YX=n(XPe,"A",{href:!0});var RCt=s(YX);jzo=r(RCt,"XLMForSequenceClassification"),RCt.forEach(t),Dzo=r(XPe," (XLM model)"),XPe.forEach(t),Gzo=i(j),D1=n(j,"LI",{});var zPe=s(D1);t_e=n(zPe,"STRONG",{});var PCt=s(t_e);Ozo=r(PCt,"xlm-roberta"),PCt.forEach(t),Vzo=r(zPe," \u2014 "),KX=n(zPe,"A",{href:!0});var BCt=s(KX);Xzo=r(BCt,"XLMRobertaForSequenceClassification"),BCt.forEach(t),zzo=r(zPe," (XLM-RoBERTa model)"),zPe.forEach(t),Qzo=i(j),G1=n(j,"LI",{});var QPe=s(G1);a_e=n(QPe,"STRONG",{});var ICt=s(a_e);Wzo=r(ICt,"xlm-roberta-xl"),ICt.forEach(t),Hzo=r(QPe," \u2014 "),ZX=n(QPe,"A",{href:!0});var NCt=s(ZX);Uzo=r(NCt,"XLMRobertaXLForSequenceClassification"),NCt.forEach(t),Jzo=r(QPe," (XLM-RoBERTa-XL model)"),QPe.forEach(t),Yzo=i(j),O1=n(j,"LI",{});var WPe=s(O1);n_e=n(WPe,"STRONG",{});var qCt=s(n_e);Kzo=r(qCt,"xlnet"),qCt.forEach(t),Zzo=r(WPe," \u2014 "),ez=n(WPe,"A",{href:!0});var jCt=s(ez);eQo=r(jCt,"XLNetForSequenceClassification"),jCt.forEach(t),oQo=r(WPe," (XLNet model)"),WPe.forEach(t),rQo=i(j),V1=n(j,"LI",{});var HPe=s(V1);s_e=n(HPe,"STRONG",{});var DCt=s(s_e);tQo=r(DCt,"yoso"),DCt.forEach(t),aQo=r(HPe," \u2014 "),oz=n(HPe,"A",{href:!0});var GCt=s(oz);nQo=r(GCt,"YosoForSequenceClassification"),GCt.forEach(t),sQo=r(HPe," (YOSO model)"),HPe.forEach(t),j.forEach(t),lQo=i(fa),X1=n(fa,"P",{});var UPe=s(X1);iQo=r(UPe,"The model is set in evaluation mode by default using "),l_e=n(UPe,"CODE",{});var OCt=s(l_e);dQo=r(OCt,"model.eval()"),OCt.forEach(t),cQo=r(UPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i_e=n(UPe,"CODE",{});var VCt=s(i_e);mQo=r(VCt,"model.train()"),VCt.forEach(t),UPe.forEach(t),fQo=i(fa),T(z1.$$.fragment,fa),fa.forEach(t),il.forEach(t),WXe=i(m),sd=n(m,"H2",{class:!0});var ZQe=s(sd);Q1=n(ZQe,"A",{id:!0,class:!0,href:!0});var XCt=s(Q1);d_e=n(XCt,"SPAN",{});var zCt=s(d_e);T(f8.$$.fragment,zCt),zCt.forEach(t),XCt.forEach(t),gQo=i(ZQe),c_e=n(ZQe,"SPAN",{});var QCt=s(c_e);hQo=r(QCt,"AutoModelForMultipleChoice"),QCt.forEach(t),ZQe.forEach(t),HXe=i(m),No=n(m,"DIV",{class:!0});var dl=s(No);T(g8.$$.fragment,dl),uQo=i(dl),ld=n(dl,"P",{});var ate=s(ld);pQo=r(ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rz=n(ate,"A",{href:!0});var WCt=s(rz);_Qo=r(WCt,"from_pretrained()"),WCt.forEach(t),bQo=r(ate," class method or the "),tz=n(ate,"A",{href:!0});var HCt=s(tz);vQo=r(HCt,"from_config()"),HCt.forEach(t),FQo=r(ate,` class
method.`),ate.forEach(t),TQo=i(dl),h8=n(dl,"P",{});var eWe=s(h8);MQo=r(eWe,"This class cannot be instantiated directly using "),m_e=n(eWe,"CODE",{});var UCt=s(m_e);EQo=r(UCt,"__init__()"),UCt.forEach(t),CQo=r(eWe," (throws an error)."),eWe.forEach(t),wQo=i(dl),ht=n(dl,"DIV",{class:!0});var A7=s(ht);T(u8.$$.fragment,A7),AQo=i(A7),f_e=n(A7,"P",{});var JCt=s(f_e);LQo=r(JCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),JCt.forEach(t),yQo=i(A7),id=n(A7,"P",{});var nte=s(id);xQo=r(nte,`Note:
Loading a model from its configuration file does `),g_e=n(nte,"STRONG",{});var YCt=s(g_e);$Qo=r(YCt,"not"),YCt.forEach(t),kQo=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),az=n(nte,"A",{href:!0});var KCt=s(az);SQo=r(KCt,"from_pretrained()"),KCt.forEach(t),RQo=r(nte," to load the model weights."),nte.forEach(t),PQo=i(A7),T(W1.$$.fragment,A7),A7.forEach(t),BQo=i(dl),to=n(dl,"DIV",{class:!0});var ga=s(to);T(p8.$$.fragment,ga),IQo=i(ga),h_e=n(ga,"P",{});var ZCt=s(h_e);NQo=r(ZCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ZCt.forEach(t),qQo=i(ga),Oa=n(ga,"P",{});var L7=s(Oa);jQo=r(L7,"The model class to instantiate is selected based on the "),u_e=n(L7,"CODE",{});var e3t=s(u_e);DQo=r(e3t,"model_type"),e3t.forEach(t),GQo=r(L7,` property of the config object (either
passed as an argument or loaded from `),p_e=n(L7,"CODE",{});var o3t=s(p_e);OQo=r(o3t,"pretrained_model_name_or_path"),o3t.forEach(t),VQo=r(L7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),__e=n(L7,"CODE",{});var r3t=s(__e);XQo=r(r3t,"pretrained_model_name_or_path"),r3t.forEach(t),zQo=r(L7,":"),L7.forEach(t),QQo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);H1=n(ee,"LI",{});var JPe=s(H1);b_e=n(JPe,"STRONG",{});var t3t=s(b_e);WQo=r(t3t,"albert"),t3t.forEach(t),HQo=r(JPe," \u2014 "),nz=n(JPe,"A",{href:!0});var a3t=s(nz);UQo=r(a3t,"AlbertForMultipleChoice"),a3t.forEach(t),JQo=r(JPe," (ALBERT model)"),JPe.forEach(t),YQo=i(ee),U1=n(ee,"LI",{});var YPe=s(U1);v_e=n(YPe,"STRONG",{});var n3t=s(v_e);KQo=r(n3t,"bert"),n3t.forEach(t),ZQo=r(YPe," \u2014 "),sz=n(YPe,"A",{href:!0});var s3t=s(sz);eWo=r(s3t,"BertForMultipleChoice"),s3t.forEach(t),oWo=r(YPe," (BERT model)"),YPe.forEach(t),rWo=i(ee),J1=n(ee,"LI",{});var KPe=s(J1);F_e=n(KPe,"STRONG",{});var l3t=s(F_e);tWo=r(l3t,"big_bird"),l3t.forEach(t),aWo=r(KPe," \u2014 "),lz=n(KPe,"A",{href:!0});var i3t=s(lz);nWo=r(i3t,"BigBirdForMultipleChoice"),i3t.forEach(t),sWo=r(KPe," (BigBird model)"),KPe.forEach(t),lWo=i(ee),Y1=n(ee,"LI",{});var ZPe=s(Y1);T_e=n(ZPe,"STRONG",{});var d3t=s(T_e);iWo=r(d3t,"camembert"),d3t.forEach(t),dWo=r(ZPe," \u2014 "),iz=n(ZPe,"A",{href:!0});var c3t=s(iz);cWo=r(c3t,"CamembertForMultipleChoice"),c3t.forEach(t),mWo=r(ZPe," (CamemBERT model)"),ZPe.forEach(t),fWo=i(ee),K1=n(ee,"LI",{});var eBe=s(K1);M_e=n(eBe,"STRONG",{});var m3t=s(M_e);gWo=r(m3t,"canine"),m3t.forEach(t),hWo=r(eBe," \u2014 "),dz=n(eBe,"A",{href:!0});var f3t=s(dz);uWo=r(f3t,"CanineForMultipleChoice"),f3t.forEach(t),pWo=r(eBe," (CANINE model)"),eBe.forEach(t),_Wo=i(ee),Z1=n(ee,"LI",{});var oBe=s(Z1);E_e=n(oBe,"STRONG",{});var g3t=s(E_e);bWo=r(g3t,"convbert"),g3t.forEach(t),vWo=r(oBe," \u2014 "),cz=n(oBe,"A",{href:!0});var h3t=s(cz);FWo=r(h3t,"ConvBertForMultipleChoice"),h3t.forEach(t),TWo=r(oBe," (ConvBERT model)"),oBe.forEach(t),MWo=i(ee),eF=n(ee,"LI",{});var rBe=s(eF);C_e=n(rBe,"STRONG",{});var u3t=s(C_e);EWo=r(u3t,"data2vec-text"),u3t.forEach(t),CWo=r(rBe," \u2014 "),mz=n(rBe,"A",{href:!0});var p3t=s(mz);wWo=r(p3t,"Data2VecTextForMultipleChoice"),p3t.forEach(t),AWo=r(rBe," (Data2VecText model)"),rBe.forEach(t),LWo=i(ee),oF=n(ee,"LI",{});var tBe=s(oF);w_e=n(tBe,"STRONG",{});var _3t=s(w_e);yWo=r(_3t,"deberta-v2"),_3t.forEach(t),xWo=r(tBe," \u2014 "),fz=n(tBe,"A",{href:!0});var b3t=s(fz);$Wo=r(b3t,"DebertaV2ForMultipleChoice"),b3t.forEach(t),kWo=r(tBe," (DeBERTa-v2 model)"),tBe.forEach(t),SWo=i(ee),rF=n(ee,"LI",{});var aBe=s(rF);A_e=n(aBe,"STRONG",{});var v3t=s(A_e);RWo=r(v3t,"distilbert"),v3t.forEach(t),PWo=r(aBe," \u2014 "),gz=n(aBe,"A",{href:!0});var F3t=s(gz);BWo=r(F3t,"DistilBertForMultipleChoice"),F3t.forEach(t),IWo=r(aBe," (DistilBERT model)"),aBe.forEach(t),NWo=i(ee),tF=n(ee,"LI",{});var nBe=s(tF);L_e=n(nBe,"STRONG",{});var T3t=s(L_e);qWo=r(T3t,"electra"),T3t.forEach(t),jWo=r(nBe," \u2014 "),hz=n(nBe,"A",{href:!0});var M3t=s(hz);DWo=r(M3t,"ElectraForMultipleChoice"),M3t.forEach(t),GWo=r(nBe," (ELECTRA model)"),nBe.forEach(t),OWo=i(ee),aF=n(ee,"LI",{});var sBe=s(aF);y_e=n(sBe,"STRONG",{});var E3t=s(y_e);VWo=r(E3t,"flaubert"),E3t.forEach(t),XWo=r(sBe," \u2014 "),uz=n(sBe,"A",{href:!0});var C3t=s(uz);zWo=r(C3t,"FlaubertForMultipleChoice"),C3t.forEach(t),QWo=r(sBe," (FlauBERT model)"),sBe.forEach(t),WWo=i(ee),nF=n(ee,"LI",{});var lBe=s(nF);x_e=n(lBe,"STRONG",{});var w3t=s(x_e);HWo=r(w3t,"fnet"),w3t.forEach(t),UWo=r(lBe," \u2014 "),pz=n(lBe,"A",{href:!0});var A3t=s(pz);JWo=r(A3t,"FNetForMultipleChoice"),A3t.forEach(t),YWo=r(lBe," (FNet model)"),lBe.forEach(t),KWo=i(ee),sF=n(ee,"LI",{});var iBe=s(sF);$_e=n(iBe,"STRONG",{});var L3t=s($_e);ZWo=r(L3t,"funnel"),L3t.forEach(t),eHo=r(iBe," \u2014 "),_z=n(iBe,"A",{href:!0});var y3t=s(_z);oHo=r(y3t,"FunnelForMultipleChoice"),y3t.forEach(t),rHo=r(iBe," (Funnel Transformer model)"),iBe.forEach(t),tHo=i(ee),lF=n(ee,"LI",{});var dBe=s(lF);k_e=n(dBe,"STRONG",{});var x3t=s(k_e);aHo=r(x3t,"ibert"),x3t.forEach(t),nHo=r(dBe," \u2014 "),bz=n(dBe,"A",{href:!0});var $3t=s(bz);sHo=r($3t,"IBertForMultipleChoice"),$3t.forEach(t),lHo=r(dBe," (I-BERT model)"),dBe.forEach(t),iHo=i(ee),iF=n(ee,"LI",{});var cBe=s(iF);S_e=n(cBe,"STRONG",{});var k3t=s(S_e);dHo=r(k3t,"longformer"),k3t.forEach(t),cHo=r(cBe," \u2014 "),vz=n(cBe,"A",{href:!0});var S3t=s(vz);mHo=r(S3t,"LongformerForMultipleChoice"),S3t.forEach(t),fHo=r(cBe," (Longformer model)"),cBe.forEach(t),gHo=i(ee),dF=n(ee,"LI",{});var mBe=s(dF);R_e=n(mBe,"STRONG",{});var R3t=s(R_e);hHo=r(R3t,"megatron-bert"),R3t.forEach(t),uHo=r(mBe," \u2014 "),Fz=n(mBe,"A",{href:!0});var P3t=s(Fz);pHo=r(P3t,"MegatronBertForMultipleChoice"),P3t.forEach(t),_Ho=r(mBe," (Megatron-BERT model)"),mBe.forEach(t),bHo=i(ee),cF=n(ee,"LI",{});var fBe=s(cF);P_e=n(fBe,"STRONG",{});var B3t=s(P_e);vHo=r(B3t,"mobilebert"),B3t.forEach(t),FHo=r(fBe," \u2014 "),Tz=n(fBe,"A",{href:!0});var I3t=s(Tz);THo=r(I3t,"MobileBertForMultipleChoice"),I3t.forEach(t),MHo=r(fBe," (MobileBERT model)"),fBe.forEach(t),EHo=i(ee),mF=n(ee,"LI",{});var gBe=s(mF);B_e=n(gBe,"STRONG",{});var N3t=s(B_e);CHo=r(N3t,"mpnet"),N3t.forEach(t),wHo=r(gBe," \u2014 "),Mz=n(gBe,"A",{href:!0});var q3t=s(Mz);AHo=r(q3t,"MPNetForMultipleChoice"),q3t.forEach(t),LHo=r(gBe," (MPNet model)"),gBe.forEach(t),yHo=i(ee),fF=n(ee,"LI",{});var hBe=s(fF);I_e=n(hBe,"STRONG",{});var j3t=s(I_e);xHo=r(j3t,"nezha"),j3t.forEach(t),$Ho=r(hBe," \u2014 "),Ez=n(hBe,"A",{href:!0});var D3t=s(Ez);kHo=r(D3t,"NezhaForMultipleChoice"),D3t.forEach(t),SHo=r(hBe," (Nezha model)"),hBe.forEach(t),RHo=i(ee),gF=n(ee,"LI",{});var uBe=s(gF);N_e=n(uBe,"STRONG",{});var G3t=s(N_e);PHo=r(G3t,"nystromformer"),G3t.forEach(t),BHo=r(uBe," \u2014 "),Cz=n(uBe,"A",{href:!0});var O3t=s(Cz);IHo=r(O3t,"NystromformerForMultipleChoice"),O3t.forEach(t),NHo=r(uBe," (Nystr\xF6mformer model)"),uBe.forEach(t),qHo=i(ee),hF=n(ee,"LI",{});var pBe=s(hF);q_e=n(pBe,"STRONG",{});var V3t=s(q_e);jHo=r(V3t,"qdqbert"),V3t.forEach(t),DHo=r(pBe," \u2014 "),wz=n(pBe,"A",{href:!0});var X3t=s(wz);GHo=r(X3t,"QDQBertForMultipleChoice"),X3t.forEach(t),OHo=r(pBe," (QDQBert model)"),pBe.forEach(t),VHo=i(ee),uF=n(ee,"LI",{});var _Be=s(uF);j_e=n(_Be,"STRONG",{});var z3t=s(j_e);XHo=r(z3t,"rembert"),z3t.forEach(t),zHo=r(_Be," \u2014 "),Az=n(_Be,"A",{href:!0});var Q3t=s(Az);QHo=r(Q3t,"RemBertForMultipleChoice"),Q3t.forEach(t),WHo=r(_Be," (RemBERT model)"),_Be.forEach(t),HHo=i(ee),pF=n(ee,"LI",{});var bBe=s(pF);D_e=n(bBe,"STRONG",{});var W3t=s(D_e);UHo=r(W3t,"roberta"),W3t.forEach(t),JHo=r(bBe," \u2014 "),Lz=n(bBe,"A",{href:!0});var H3t=s(Lz);YHo=r(H3t,"RobertaForMultipleChoice"),H3t.forEach(t),KHo=r(bBe," (RoBERTa model)"),bBe.forEach(t),ZHo=i(ee),_F=n(ee,"LI",{});var vBe=s(_F);G_e=n(vBe,"STRONG",{});var U3t=s(G_e);eUo=r(U3t,"roformer"),U3t.forEach(t),oUo=r(vBe," \u2014 "),yz=n(vBe,"A",{href:!0});var J3t=s(yz);rUo=r(J3t,"RoFormerForMultipleChoice"),J3t.forEach(t),tUo=r(vBe," (RoFormer model)"),vBe.forEach(t),aUo=i(ee),bF=n(ee,"LI",{});var FBe=s(bF);O_e=n(FBe,"STRONG",{});var Y3t=s(O_e);nUo=r(Y3t,"squeezebert"),Y3t.forEach(t),sUo=r(FBe," \u2014 "),xz=n(FBe,"A",{href:!0});var K3t=s(xz);lUo=r(K3t,"SqueezeBertForMultipleChoice"),K3t.forEach(t),iUo=r(FBe," (SqueezeBERT model)"),FBe.forEach(t),dUo=i(ee),vF=n(ee,"LI",{});var TBe=s(vF);V_e=n(TBe,"STRONG",{});var Z3t=s(V_e);cUo=r(Z3t,"xlm"),Z3t.forEach(t),mUo=r(TBe," \u2014 "),$z=n(TBe,"A",{href:!0});var e5t=s($z);fUo=r(e5t,"XLMForMultipleChoice"),e5t.forEach(t),gUo=r(TBe," (XLM model)"),TBe.forEach(t),hUo=i(ee),FF=n(ee,"LI",{});var MBe=s(FF);X_e=n(MBe,"STRONG",{});var o5t=s(X_e);uUo=r(o5t,"xlm-roberta"),o5t.forEach(t),pUo=r(MBe," \u2014 "),kz=n(MBe,"A",{href:!0});var r5t=s(kz);_Uo=r(r5t,"XLMRobertaForMultipleChoice"),r5t.forEach(t),bUo=r(MBe," (XLM-RoBERTa model)"),MBe.forEach(t),vUo=i(ee),TF=n(ee,"LI",{});var EBe=s(TF);z_e=n(EBe,"STRONG",{});var t5t=s(z_e);FUo=r(t5t,"xlm-roberta-xl"),t5t.forEach(t),TUo=r(EBe," \u2014 "),Sz=n(EBe,"A",{href:!0});var a5t=s(Sz);MUo=r(a5t,"XLMRobertaXLForMultipleChoice"),a5t.forEach(t),EUo=r(EBe," (XLM-RoBERTa-XL model)"),EBe.forEach(t),CUo=i(ee),MF=n(ee,"LI",{});var CBe=s(MF);Q_e=n(CBe,"STRONG",{});var n5t=s(Q_e);wUo=r(n5t,"xlnet"),n5t.forEach(t),AUo=r(CBe," \u2014 "),Rz=n(CBe,"A",{href:!0});var s5t=s(Rz);LUo=r(s5t,"XLNetForMultipleChoice"),s5t.forEach(t),yUo=r(CBe," (XLNet model)"),CBe.forEach(t),xUo=i(ee),EF=n(ee,"LI",{});var wBe=s(EF);W_e=n(wBe,"STRONG",{});var l5t=s(W_e);$Uo=r(l5t,"yoso"),l5t.forEach(t),kUo=r(wBe," \u2014 "),Pz=n(wBe,"A",{href:!0});var i5t=s(Pz);SUo=r(i5t,"YosoForMultipleChoice"),i5t.forEach(t),RUo=r(wBe," (YOSO model)"),wBe.forEach(t),ee.forEach(t),PUo=i(ga),CF=n(ga,"P",{});var ABe=s(CF);BUo=r(ABe,"The model is set in evaluation mode by default using "),H_e=n(ABe,"CODE",{});var d5t=s(H_e);IUo=r(d5t,"model.eval()"),d5t.forEach(t),NUo=r(ABe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U_e=n(ABe,"CODE",{});var c5t=s(U_e);qUo=r(c5t,"model.train()"),c5t.forEach(t),ABe.forEach(t),jUo=i(ga),T(wF.$$.fragment,ga),ga.forEach(t),dl.forEach(t),UXe=i(m),dd=n(m,"H2",{class:!0});var oWe=s(dd);AF=n(oWe,"A",{id:!0,class:!0,href:!0});var m5t=s(AF);J_e=n(m5t,"SPAN",{});var f5t=s(J_e);T(_8.$$.fragment,f5t),f5t.forEach(t),m5t.forEach(t),DUo=i(oWe),Y_e=n(oWe,"SPAN",{});var g5t=s(Y_e);GUo=r(g5t,"AutoModelForNextSentencePrediction"),g5t.forEach(t),oWe.forEach(t),JXe=i(m),qo=n(m,"DIV",{class:!0});var cl=s(qo);T(b8.$$.fragment,cl),OUo=i(cl),cd=n(cl,"P",{});var ste=s(cd);VUo=r(ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Bz=n(ste,"A",{href:!0});var h5t=s(Bz);XUo=r(h5t,"from_pretrained()"),h5t.forEach(t),zUo=r(ste," class method or the "),Iz=n(ste,"A",{href:!0});var u5t=s(Iz);QUo=r(u5t,"from_config()"),u5t.forEach(t),WUo=r(ste,` class
method.`),ste.forEach(t),HUo=i(cl),v8=n(cl,"P",{});var rWe=s(v8);UUo=r(rWe,"This class cannot be instantiated directly using "),K_e=n(rWe,"CODE",{});var p5t=s(K_e);JUo=r(p5t,"__init__()"),p5t.forEach(t),YUo=r(rWe," (throws an error)."),rWe.forEach(t),KUo=i(cl),ut=n(cl,"DIV",{class:!0});var y7=s(ut);T(F8.$$.fragment,y7),ZUo=i(y7),Z_e=n(y7,"P",{});var _5t=s(Z_e);eJo=r(_5t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_5t.forEach(t),oJo=i(y7),md=n(y7,"P",{});var lte=s(md);rJo=r(lte,`Note:
Loading a model from its configuration file does `),e2e=n(lte,"STRONG",{});var b5t=s(e2e);tJo=r(b5t,"not"),b5t.forEach(t),aJo=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=n(lte,"A",{href:!0});var v5t=s(Nz);nJo=r(v5t,"from_pretrained()"),v5t.forEach(t),sJo=r(lte," to load the model weights."),lte.forEach(t),lJo=i(y7),T(LF.$$.fragment,y7),y7.forEach(t),iJo=i(cl),ao=n(cl,"DIV",{class:!0});var ha=s(ao);T(T8.$$.fragment,ha),dJo=i(ha),o2e=n(ha,"P",{});var F5t=s(o2e);cJo=r(F5t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),F5t.forEach(t),mJo=i(ha),Va=n(ha,"P",{});var x7=s(Va);fJo=r(x7,"The model class to instantiate is selected based on the "),r2e=n(x7,"CODE",{});var T5t=s(r2e);gJo=r(T5t,"model_type"),T5t.forEach(t),hJo=r(x7,` property of the config object (either
passed as an argument or loaded from `),t2e=n(x7,"CODE",{});var M5t=s(t2e);uJo=r(M5t,"pretrained_model_name_or_path"),M5t.forEach(t),pJo=r(x7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a2e=n(x7,"CODE",{});var E5t=s(a2e);_Jo=r(E5t,"pretrained_model_name_or_path"),E5t.forEach(t),bJo=r(x7,":"),x7.forEach(t),vJo=i(ha),jo=n(ha,"UL",{});var ua=s(jo);yF=n(ua,"LI",{});var LBe=s(yF);n2e=n(LBe,"STRONG",{});var C5t=s(n2e);FJo=r(C5t,"bert"),C5t.forEach(t),TJo=r(LBe," \u2014 "),qz=n(LBe,"A",{href:!0});var w5t=s(qz);MJo=r(w5t,"BertForNextSentencePrediction"),w5t.forEach(t),EJo=r(LBe," (BERT model)"),LBe.forEach(t),CJo=i(ua),xF=n(ua,"LI",{});var yBe=s(xF);s2e=n(yBe,"STRONG",{});var A5t=s(s2e);wJo=r(A5t,"fnet"),A5t.forEach(t),AJo=r(yBe," \u2014 "),jz=n(yBe,"A",{href:!0});var L5t=s(jz);LJo=r(L5t,"FNetForNextSentencePrediction"),L5t.forEach(t),yJo=r(yBe," (FNet model)"),yBe.forEach(t),xJo=i(ua),$F=n(ua,"LI",{});var xBe=s($F);l2e=n(xBe,"STRONG",{});var y5t=s(l2e);$Jo=r(y5t,"megatron-bert"),y5t.forEach(t),kJo=r(xBe," \u2014 "),Dz=n(xBe,"A",{href:!0});var x5t=s(Dz);SJo=r(x5t,"MegatronBertForNextSentencePrediction"),x5t.forEach(t),RJo=r(xBe," (Megatron-BERT model)"),xBe.forEach(t),PJo=i(ua),kF=n(ua,"LI",{});var $Be=s(kF);i2e=n($Be,"STRONG",{});var $5t=s(i2e);BJo=r($5t,"mobilebert"),$5t.forEach(t),IJo=r($Be," \u2014 "),Gz=n($Be,"A",{href:!0});var k5t=s(Gz);NJo=r(k5t,"MobileBertForNextSentencePrediction"),k5t.forEach(t),qJo=r($Be," (MobileBERT model)"),$Be.forEach(t),jJo=i(ua),SF=n(ua,"LI",{});var kBe=s(SF);d2e=n(kBe,"STRONG",{});var S5t=s(d2e);DJo=r(S5t,"nezha"),S5t.forEach(t),GJo=r(kBe," \u2014 "),Oz=n(kBe,"A",{href:!0});var R5t=s(Oz);OJo=r(R5t,"NezhaForNextSentencePrediction"),R5t.forEach(t),VJo=r(kBe," (Nezha model)"),kBe.forEach(t),XJo=i(ua),RF=n(ua,"LI",{});var SBe=s(RF);c2e=n(SBe,"STRONG",{});var P5t=s(c2e);zJo=r(P5t,"qdqbert"),P5t.forEach(t),QJo=r(SBe," \u2014 "),Vz=n(SBe,"A",{href:!0});var B5t=s(Vz);WJo=r(B5t,"QDQBertForNextSentencePrediction"),B5t.forEach(t),HJo=r(SBe," (QDQBert model)"),SBe.forEach(t),ua.forEach(t),UJo=i(ha),PF=n(ha,"P",{});var RBe=s(PF);JJo=r(RBe,"The model is set in evaluation mode by default using "),m2e=n(RBe,"CODE",{});var I5t=s(m2e);YJo=r(I5t,"model.eval()"),I5t.forEach(t),KJo=r(RBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f2e=n(RBe,"CODE",{});var N5t=s(f2e);ZJo=r(N5t,"model.train()"),N5t.forEach(t),RBe.forEach(t),eYo=i(ha),T(BF.$$.fragment,ha),ha.forEach(t),cl.forEach(t),YXe=i(m),fd=n(m,"H2",{class:!0});var tWe=s(fd);IF=n(tWe,"A",{id:!0,class:!0,href:!0});var q5t=s(IF);g2e=n(q5t,"SPAN",{});var j5t=s(g2e);T(M8.$$.fragment,j5t),j5t.forEach(t),q5t.forEach(t),oYo=i(tWe),h2e=n(tWe,"SPAN",{});var D5t=s(h2e);rYo=r(D5t,"AutoModelForTokenClassification"),D5t.forEach(t),tWe.forEach(t),KXe=i(m),Do=n(m,"DIV",{class:!0});var ml=s(Do);T(E8.$$.fragment,ml),tYo=i(ml),gd=n(ml,"P",{});var ite=s(gd);aYo=r(ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Xz=n(ite,"A",{href:!0});var G5t=s(Xz);nYo=r(G5t,"from_pretrained()"),G5t.forEach(t),sYo=r(ite," class method or the "),zz=n(ite,"A",{href:!0});var O5t=s(zz);lYo=r(O5t,"from_config()"),O5t.forEach(t),iYo=r(ite,` class
method.`),ite.forEach(t),dYo=i(ml),C8=n(ml,"P",{});var aWe=s(C8);cYo=r(aWe,"This class cannot be instantiated directly using "),u2e=n(aWe,"CODE",{});var V5t=s(u2e);mYo=r(V5t,"__init__()"),V5t.forEach(t),fYo=r(aWe," (throws an error)."),aWe.forEach(t),gYo=i(ml),pt=n(ml,"DIV",{class:!0});var $7=s(pt);T(w8.$$.fragment,$7),hYo=i($7),p2e=n($7,"P",{});var X5t=s(p2e);uYo=r(X5t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),X5t.forEach(t),pYo=i($7),hd=n($7,"P",{});var dte=s(hd);_Yo=r(dte,`Note:
Loading a model from its configuration file does `),_2e=n(dte,"STRONG",{});var z5t=s(_2e);bYo=r(z5t,"not"),z5t.forEach(t),vYo=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=n(dte,"A",{href:!0});var Q5t=s(Qz);FYo=r(Q5t,"from_pretrained()"),Q5t.forEach(t),TYo=r(dte," to load the model weights."),dte.forEach(t),MYo=i($7),T(NF.$$.fragment,$7),$7.forEach(t),EYo=i(ml),no=n(ml,"DIV",{class:!0});var pa=s(no);T(A8.$$.fragment,pa),CYo=i(pa),b2e=n(pa,"P",{});var W5t=s(b2e);wYo=r(W5t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),W5t.forEach(t),AYo=i(pa),Xa=n(pa,"P",{});var k7=s(Xa);LYo=r(k7,"The model class to instantiate is selected based on the "),v2e=n(k7,"CODE",{});var H5t=s(v2e);yYo=r(H5t,"model_type"),H5t.forEach(t),xYo=r(k7,` property of the config object (either
passed as an argument or loaded from `),F2e=n(k7,"CODE",{});var U5t=s(F2e);$Yo=r(U5t,"pretrained_model_name_or_path"),U5t.forEach(t),kYo=r(k7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=n(k7,"CODE",{});var J5t=s(T2e);SYo=r(J5t,"pretrained_model_name_or_path"),J5t.forEach(t),RYo=r(k7,":"),k7.forEach(t),PYo=i(pa),U=n(pa,"UL",{});var J=s(U);qF=n(J,"LI",{});var PBe=s(qF);M2e=n(PBe,"STRONG",{});var Y5t=s(M2e);BYo=r(Y5t,"albert"),Y5t.forEach(t),IYo=r(PBe," \u2014 "),Wz=n(PBe,"A",{href:!0});var K5t=s(Wz);NYo=r(K5t,"AlbertForTokenClassification"),K5t.forEach(t),qYo=r(PBe," (ALBERT model)"),PBe.forEach(t),jYo=i(J),jF=n(J,"LI",{});var BBe=s(jF);E2e=n(BBe,"STRONG",{});var Z5t=s(E2e);DYo=r(Z5t,"bert"),Z5t.forEach(t),GYo=r(BBe," \u2014 "),Hz=n(BBe,"A",{href:!0});var e0t=s(Hz);OYo=r(e0t,"BertForTokenClassification"),e0t.forEach(t),VYo=r(BBe," (BERT model)"),BBe.forEach(t),XYo=i(J),DF=n(J,"LI",{});var IBe=s(DF);C2e=n(IBe,"STRONG",{});var o0t=s(C2e);zYo=r(o0t,"big_bird"),o0t.forEach(t),QYo=r(IBe," \u2014 "),Uz=n(IBe,"A",{href:!0});var r0t=s(Uz);WYo=r(r0t,"BigBirdForTokenClassification"),r0t.forEach(t),HYo=r(IBe," (BigBird model)"),IBe.forEach(t),UYo=i(J),GF=n(J,"LI",{});var NBe=s(GF);w2e=n(NBe,"STRONG",{});var t0t=s(w2e);JYo=r(t0t,"bloom"),t0t.forEach(t),YYo=r(NBe," \u2014 "),Jz=n(NBe,"A",{href:!0});var a0t=s(Jz);KYo=r(a0t,"BloomForTokenClassification"),a0t.forEach(t),ZYo=r(NBe," (BLOOM model)"),NBe.forEach(t),eKo=i(J),OF=n(J,"LI",{});var qBe=s(OF);A2e=n(qBe,"STRONG",{});var n0t=s(A2e);oKo=r(n0t,"camembert"),n0t.forEach(t),rKo=r(qBe," \u2014 "),Yz=n(qBe,"A",{href:!0});var s0t=s(Yz);tKo=r(s0t,"CamembertForTokenClassification"),s0t.forEach(t),aKo=r(qBe," (CamemBERT model)"),qBe.forEach(t),nKo=i(J),VF=n(J,"LI",{});var jBe=s(VF);L2e=n(jBe,"STRONG",{});var l0t=s(L2e);sKo=r(l0t,"canine"),l0t.forEach(t),lKo=r(jBe," \u2014 "),Kz=n(jBe,"A",{href:!0});var i0t=s(Kz);iKo=r(i0t,"CanineForTokenClassification"),i0t.forEach(t),dKo=r(jBe," (CANINE model)"),jBe.forEach(t),cKo=i(J),XF=n(J,"LI",{});var DBe=s(XF);y2e=n(DBe,"STRONG",{});var d0t=s(y2e);mKo=r(d0t,"convbert"),d0t.forEach(t),fKo=r(DBe," \u2014 "),Zz=n(DBe,"A",{href:!0});var c0t=s(Zz);gKo=r(c0t,"ConvBertForTokenClassification"),c0t.forEach(t),hKo=r(DBe," (ConvBERT model)"),DBe.forEach(t),uKo=i(J),zF=n(J,"LI",{});var GBe=s(zF);x2e=n(GBe,"STRONG",{});var m0t=s(x2e);pKo=r(m0t,"data2vec-text"),m0t.forEach(t),_Ko=r(GBe," \u2014 "),eQ=n(GBe,"A",{href:!0});var f0t=s(eQ);bKo=r(f0t,"Data2VecTextForTokenClassification"),f0t.forEach(t),vKo=r(GBe," (Data2VecText model)"),GBe.forEach(t),FKo=i(J),QF=n(J,"LI",{});var OBe=s(QF);$2e=n(OBe,"STRONG",{});var g0t=s($2e);TKo=r(g0t,"deberta"),g0t.forEach(t),MKo=r(OBe," \u2014 "),oQ=n(OBe,"A",{href:!0});var h0t=s(oQ);EKo=r(h0t,"DebertaForTokenClassification"),h0t.forEach(t),CKo=r(OBe," (DeBERTa model)"),OBe.forEach(t),wKo=i(J),WF=n(J,"LI",{});var VBe=s(WF);k2e=n(VBe,"STRONG",{});var u0t=s(k2e);AKo=r(u0t,"deberta-v2"),u0t.forEach(t),LKo=r(VBe," \u2014 "),rQ=n(VBe,"A",{href:!0});var p0t=s(rQ);yKo=r(p0t,"DebertaV2ForTokenClassification"),p0t.forEach(t),xKo=r(VBe," (DeBERTa-v2 model)"),VBe.forEach(t),$Ko=i(J),HF=n(J,"LI",{});var XBe=s(HF);S2e=n(XBe,"STRONG",{});var _0t=s(S2e);kKo=r(_0t,"distilbert"),_0t.forEach(t),SKo=r(XBe," \u2014 "),tQ=n(XBe,"A",{href:!0});var b0t=s(tQ);RKo=r(b0t,"DistilBertForTokenClassification"),b0t.forEach(t),PKo=r(XBe," (DistilBERT model)"),XBe.forEach(t),BKo=i(J),UF=n(J,"LI",{});var zBe=s(UF);R2e=n(zBe,"STRONG",{});var v0t=s(R2e);IKo=r(v0t,"electra"),v0t.forEach(t),NKo=r(zBe," \u2014 "),aQ=n(zBe,"A",{href:!0});var F0t=s(aQ);qKo=r(F0t,"ElectraForTokenClassification"),F0t.forEach(t),jKo=r(zBe," (ELECTRA model)"),zBe.forEach(t),DKo=i(J),JF=n(J,"LI",{});var QBe=s(JF);P2e=n(QBe,"STRONG",{});var T0t=s(P2e);GKo=r(T0t,"flaubert"),T0t.forEach(t),OKo=r(QBe," \u2014 "),nQ=n(QBe,"A",{href:!0});var M0t=s(nQ);VKo=r(M0t,"FlaubertForTokenClassification"),M0t.forEach(t),XKo=r(QBe," (FlauBERT model)"),QBe.forEach(t),zKo=i(J),YF=n(J,"LI",{});var WBe=s(YF);B2e=n(WBe,"STRONG",{});var E0t=s(B2e);QKo=r(E0t,"fnet"),E0t.forEach(t),WKo=r(WBe," \u2014 "),sQ=n(WBe,"A",{href:!0});var C0t=s(sQ);HKo=r(C0t,"FNetForTokenClassification"),C0t.forEach(t),UKo=r(WBe," (FNet model)"),WBe.forEach(t),JKo=i(J),KF=n(J,"LI",{});var HBe=s(KF);I2e=n(HBe,"STRONG",{});var w0t=s(I2e);YKo=r(w0t,"funnel"),w0t.forEach(t),KKo=r(HBe," \u2014 "),lQ=n(HBe,"A",{href:!0});var A0t=s(lQ);ZKo=r(A0t,"FunnelForTokenClassification"),A0t.forEach(t),eZo=r(HBe," (Funnel Transformer model)"),HBe.forEach(t),oZo=i(J),ZF=n(J,"LI",{});var UBe=s(ZF);N2e=n(UBe,"STRONG",{});var L0t=s(N2e);rZo=r(L0t,"gpt2"),L0t.forEach(t),tZo=r(UBe," \u2014 "),iQ=n(UBe,"A",{href:!0});var y0t=s(iQ);aZo=r(y0t,"GPT2ForTokenClassification"),y0t.forEach(t),nZo=r(UBe," (OpenAI GPT-2 model)"),UBe.forEach(t),sZo=i(J),eT=n(J,"LI",{});var JBe=s(eT);q2e=n(JBe,"STRONG",{});var x0t=s(q2e);lZo=r(x0t,"ibert"),x0t.forEach(t),iZo=r(JBe," \u2014 "),dQ=n(JBe,"A",{href:!0});var $0t=s(dQ);dZo=r($0t,"IBertForTokenClassification"),$0t.forEach(t),cZo=r(JBe," (I-BERT model)"),JBe.forEach(t),mZo=i(J),oT=n(J,"LI",{});var YBe=s(oT);j2e=n(YBe,"STRONG",{});var k0t=s(j2e);fZo=r(k0t,"layoutlm"),k0t.forEach(t),gZo=r(YBe," \u2014 "),cQ=n(YBe,"A",{href:!0});var S0t=s(cQ);hZo=r(S0t,"LayoutLMForTokenClassification"),S0t.forEach(t),uZo=r(YBe," (LayoutLM model)"),YBe.forEach(t),pZo=i(J),rT=n(J,"LI",{});var KBe=s(rT);D2e=n(KBe,"STRONG",{});var R0t=s(D2e);_Zo=r(R0t,"layoutlmv2"),R0t.forEach(t),bZo=r(KBe," \u2014 "),mQ=n(KBe,"A",{href:!0});var P0t=s(mQ);vZo=r(P0t,"LayoutLMv2ForTokenClassification"),P0t.forEach(t),FZo=r(KBe," (LayoutLMv2 model)"),KBe.forEach(t),TZo=i(J),tT=n(J,"LI",{});var ZBe=s(tT);G2e=n(ZBe,"STRONG",{});var B0t=s(G2e);MZo=r(B0t,"layoutlmv3"),B0t.forEach(t),EZo=r(ZBe," \u2014 "),fQ=n(ZBe,"A",{href:!0});var I0t=s(fQ);CZo=r(I0t,"LayoutLMv3ForTokenClassification"),I0t.forEach(t),wZo=r(ZBe," (LayoutLMv3 model)"),ZBe.forEach(t),AZo=i(J),aT=n(J,"LI",{});var eIe=s(aT);O2e=n(eIe,"STRONG",{});var N0t=s(O2e);LZo=r(N0t,"longformer"),N0t.forEach(t),yZo=r(eIe," \u2014 "),gQ=n(eIe,"A",{href:!0});var q0t=s(gQ);xZo=r(q0t,"LongformerForTokenClassification"),q0t.forEach(t),$Zo=r(eIe," (Longformer model)"),eIe.forEach(t),kZo=i(J),nT=n(J,"LI",{});var oIe=s(nT);V2e=n(oIe,"STRONG",{});var j0t=s(V2e);SZo=r(j0t,"megatron-bert"),j0t.forEach(t),RZo=r(oIe," \u2014 "),hQ=n(oIe,"A",{href:!0});var D0t=s(hQ);PZo=r(D0t,"MegatronBertForTokenClassification"),D0t.forEach(t),BZo=r(oIe," (Megatron-BERT model)"),oIe.forEach(t),IZo=i(J),sT=n(J,"LI",{});var rIe=s(sT);X2e=n(rIe,"STRONG",{});var G0t=s(X2e);NZo=r(G0t,"mobilebert"),G0t.forEach(t),qZo=r(rIe," \u2014 "),uQ=n(rIe,"A",{href:!0});var O0t=s(uQ);jZo=r(O0t,"MobileBertForTokenClassification"),O0t.forEach(t),DZo=r(rIe," (MobileBERT model)"),rIe.forEach(t),GZo=i(J),lT=n(J,"LI",{});var tIe=s(lT);z2e=n(tIe,"STRONG",{});var V0t=s(z2e);OZo=r(V0t,"mpnet"),V0t.forEach(t),VZo=r(tIe," \u2014 "),pQ=n(tIe,"A",{href:!0});var X0t=s(pQ);XZo=r(X0t,"MPNetForTokenClassification"),X0t.forEach(t),zZo=r(tIe," (MPNet model)"),tIe.forEach(t),QZo=i(J),iT=n(J,"LI",{});var aIe=s(iT);Q2e=n(aIe,"STRONG",{});var z0t=s(Q2e);WZo=r(z0t,"nezha"),z0t.forEach(t),HZo=r(aIe," \u2014 "),_Q=n(aIe,"A",{href:!0});var Q0t=s(_Q);UZo=r(Q0t,"NezhaForTokenClassification"),Q0t.forEach(t),JZo=r(aIe," (Nezha model)"),aIe.forEach(t),YZo=i(J),dT=n(J,"LI",{});var nIe=s(dT);W2e=n(nIe,"STRONG",{});var W0t=s(W2e);KZo=r(W0t,"nystromformer"),W0t.forEach(t),ZZo=r(nIe," \u2014 "),bQ=n(nIe,"A",{href:!0});var H0t=s(bQ);eer=r(H0t,"NystromformerForTokenClassification"),H0t.forEach(t),oer=r(nIe," (Nystr\xF6mformer model)"),nIe.forEach(t),rer=i(J),cT=n(J,"LI",{});var sIe=s(cT);H2e=n(sIe,"STRONG",{});var U0t=s(H2e);ter=r(U0t,"qdqbert"),U0t.forEach(t),aer=r(sIe," \u2014 "),vQ=n(sIe,"A",{href:!0});var J0t=s(vQ);ner=r(J0t,"QDQBertForTokenClassification"),J0t.forEach(t),ser=r(sIe," (QDQBert model)"),sIe.forEach(t),ler=i(J),mT=n(J,"LI",{});var lIe=s(mT);U2e=n(lIe,"STRONG",{});var Y0t=s(U2e);ier=r(Y0t,"rembert"),Y0t.forEach(t),der=r(lIe," \u2014 "),FQ=n(lIe,"A",{href:!0});var K0t=s(FQ);cer=r(K0t,"RemBertForTokenClassification"),K0t.forEach(t),mer=r(lIe," (RemBERT model)"),lIe.forEach(t),fer=i(J),fT=n(J,"LI",{});var iIe=s(fT);J2e=n(iIe,"STRONG",{});var Z0t=s(J2e);ger=r(Z0t,"roberta"),Z0t.forEach(t),her=r(iIe," \u2014 "),TQ=n(iIe,"A",{href:!0});var ewt=s(TQ);uer=r(ewt,"RobertaForTokenClassification"),ewt.forEach(t),per=r(iIe," (RoBERTa model)"),iIe.forEach(t),_er=i(J),gT=n(J,"LI",{});var dIe=s(gT);Y2e=n(dIe,"STRONG",{});var owt=s(Y2e);ber=r(owt,"roformer"),owt.forEach(t),ver=r(dIe," \u2014 "),MQ=n(dIe,"A",{href:!0});var rwt=s(MQ);Fer=r(rwt,"RoFormerForTokenClassification"),rwt.forEach(t),Ter=r(dIe," (RoFormer model)"),dIe.forEach(t),Mer=i(J),hT=n(J,"LI",{});var cIe=s(hT);K2e=n(cIe,"STRONG",{});var twt=s(K2e);Eer=r(twt,"squeezebert"),twt.forEach(t),Cer=r(cIe," \u2014 "),EQ=n(cIe,"A",{href:!0});var awt=s(EQ);wer=r(awt,"SqueezeBertForTokenClassification"),awt.forEach(t),Aer=r(cIe," (SqueezeBERT model)"),cIe.forEach(t),Ler=i(J),uT=n(J,"LI",{});var mIe=s(uT);Z2e=n(mIe,"STRONG",{});var nwt=s(Z2e);yer=r(nwt,"xlm"),nwt.forEach(t),xer=r(mIe," \u2014 "),CQ=n(mIe,"A",{href:!0});var swt=s(CQ);$er=r(swt,"XLMForTokenClassification"),swt.forEach(t),ker=r(mIe," (XLM model)"),mIe.forEach(t),Ser=i(J),pT=n(J,"LI",{});var fIe=s(pT);ebe=n(fIe,"STRONG",{});var lwt=s(ebe);Rer=r(lwt,"xlm-roberta"),lwt.forEach(t),Per=r(fIe," \u2014 "),wQ=n(fIe,"A",{href:!0});var iwt=s(wQ);Ber=r(iwt,"XLMRobertaForTokenClassification"),iwt.forEach(t),Ier=r(fIe," (XLM-RoBERTa model)"),fIe.forEach(t),Ner=i(J),_T=n(J,"LI",{});var gIe=s(_T);obe=n(gIe,"STRONG",{});var dwt=s(obe);qer=r(dwt,"xlm-roberta-xl"),dwt.forEach(t),jer=r(gIe," \u2014 "),AQ=n(gIe,"A",{href:!0});var cwt=s(AQ);Der=r(cwt,"XLMRobertaXLForTokenClassification"),cwt.forEach(t),Ger=r(gIe," (XLM-RoBERTa-XL model)"),gIe.forEach(t),Oer=i(J),bT=n(J,"LI",{});var hIe=s(bT);rbe=n(hIe,"STRONG",{});var mwt=s(rbe);Ver=r(mwt,"xlnet"),mwt.forEach(t),Xer=r(hIe," \u2014 "),LQ=n(hIe,"A",{href:!0});var fwt=s(LQ);zer=r(fwt,"XLNetForTokenClassification"),fwt.forEach(t),Qer=r(hIe," (XLNet model)"),hIe.forEach(t),Wer=i(J),vT=n(J,"LI",{});var uIe=s(vT);tbe=n(uIe,"STRONG",{});var gwt=s(tbe);Her=r(gwt,"yoso"),gwt.forEach(t),Uer=r(uIe," \u2014 "),yQ=n(uIe,"A",{href:!0});var hwt=s(yQ);Jer=r(hwt,"YosoForTokenClassification"),hwt.forEach(t),Yer=r(uIe," (YOSO model)"),uIe.forEach(t),J.forEach(t),Ker=i(pa),FT=n(pa,"P",{});var pIe=s(FT);Zer=r(pIe,"The model is set in evaluation mode by default using "),abe=n(pIe,"CODE",{});var uwt=s(abe);eor=r(uwt,"model.eval()"),uwt.forEach(t),oor=r(pIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nbe=n(pIe,"CODE",{});var pwt=s(nbe);ror=r(pwt,"model.train()"),pwt.forEach(t),pIe.forEach(t),tor=i(pa),T(TT.$$.fragment,pa),pa.forEach(t),ml.forEach(t),ZXe=i(m),ud=n(m,"H2",{class:!0});var nWe=s(ud);MT=n(nWe,"A",{id:!0,class:!0,href:!0});var _wt=s(MT);sbe=n(_wt,"SPAN",{});var bwt=s(sbe);T(L8.$$.fragment,bwt),bwt.forEach(t),_wt.forEach(t),aor=i(nWe),lbe=n(nWe,"SPAN",{});var vwt=s(lbe);nor=r(vwt,"AutoModelForQuestionAnswering"),vwt.forEach(t),nWe.forEach(t),eze=i(m),Go=n(m,"DIV",{class:!0});var fl=s(Go);T(y8.$$.fragment,fl),sor=i(fl),pd=n(fl,"P",{});var cte=s(pd);lor=r(cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xQ=n(cte,"A",{href:!0});var Fwt=s(xQ);ior=r(Fwt,"from_pretrained()"),Fwt.forEach(t),dor=r(cte," class method or the "),$Q=n(cte,"A",{href:!0});var Twt=s($Q);cor=r(Twt,"from_config()"),Twt.forEach(t),mor=r(cte,` class
method.`),cte.forEach(t),gor=i(fl),x8=n(fl,"P",{});var sWe=s(x8);hor=r(sWe,"This class cannot be instantiated directly using "),ibe=n(sWe,"CODE",{});var Mwt=s(ibe);uor=r(Mwt,"__init__()"),Mwt.forEach(t),por=r(sWe," (throws an error)."),sWe.forEach(t),_or=i(fl),_t=n(fl,"DIV",{class:!0});var S7=s(_t);T($8.$$.fragment,S7),bor=i(S7),dbe=n(S7,"P",{});var Ewt=s(dbe);vor=r(Ewt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ewt.forEach(t),For=i(S7),_d=n(S7,"P",{});var mte=s(_d);Tor=r(mte,`Note:
Loading a model from its configuration file does `),cbe=n(mte,"STRONG",{});var Cwt=s(cbe);Mor=r(Cwt,"not"),Cwt.forEach(t),Eor=r(mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),kQ=n(mte,"A",{href:!0});var wwt=s(kQ);Cor=r(wwt,"from_pretrained()"),wwt.forEach(t),wor=r(mte," to load the model weights."),mte.forEach(t),Aor=i(S7),T(ET.$$.fragment,S7),S7.forEach(t),Lor=i(fl),so=n(fl,"DIV",{class:!0});var _a=s(so);T(k8.$$.fragment,_a),yor=i(_a),mbe=n(_a,"P",{});var Awt=s(mbe);xor=r(Awt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Awt.forEach(t),$or=i(_a),za=n(_a,"P",{});var R7=s(za);kor=r(R7,"The model class to instantiate is selected based on the "),fbe=n(R7,"CODE",{});var Lwt=s(fbe);Sor=r(Lwt,"model_type"),Lwt.forEach(t),Ror=r(R7,` property of the config object (either
passed as an argument or loaded from `),gbe=n(R7,"CODE",{});var ywt=s(gbe);Por=r(ywt,"pretrained_model_name_or_path"),ywt.forEach(t),Bor=r(R7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=n(R7,"CODE",{});var xwt=s(hbe);Ior=r(xwt,"pretrained_model_name_or_path"),xwt.forEach(t),Nor=r(R7,":"),R7.forEach(t),qor=i(_a),V=n(_a,"UL",{});var X=s(V);CT=n(X,"LI",{});var _Ie=s(CT);ube=n(_Ie,"STRONG",{});var $wt=s(ube);jor=r($wt,"albert"),$wt.forEach(t),Dor=r(_Ie," \u2014 "),SQ=n(_Ie,"A",{href:!0});var kwt=s(SQ);Gor=r(kwt,"AlbertForQuestionAnswering"),kwt.forEach(t),Oor=r(_Ie," (ALBERT model)"),_Ie.forEach(t),Vor=i(X),wT=n(X,"LI",{});var bIe=s(wT);pbe=n(bIe,"STRONG",{});var Swt=s(pbe);Xor=r(Swt,"bart"),Swt.forEach(t),zor=r(bIe," \u2014 "),RQ=n(bIe,"A",{href:!0});var Rwt=s(RQ);Qor=r(Rwt,"BartForQuestionAnswering"),Rwt.forEach(t),Wor=r(bIe," (BART model)"),bIe.forEach(t),Hor=i(X),AT=n(X,"LI",{});var vIe=s(AT);_be=n(vIe,"STRONG",{});var Pwt=s(_be);Uor=r(Pwt,"bert"),Pwt.forEach(t),Jor=r(vIe," \u2014 "),PQ=n(vIe,"A",{href:!0});var Bwt=s(PQ);Yor=r(Bwt,"BertForQuestionAnswering"),Bwt.forEach(t),Kor=r(vIe," (BERT model)"),vIe.forEach(t),Zor=i(X),LT=n(X,"LI",{});var FIe=s(LT);bbe=n(FIe,"STRONG",{});var Iwt=s(bbe);err=r(Iwt,"big_bird"),Iwt.forEach(t),orr=r(FIe," \u2014 "),BQ=n(FIe,"A",{href:!0});var Nwt=s(BQ);rrr=r(Nwt,"BigBirdForQuestionAnswering"),Nwt.forEach(t),trr=r(FIe," (BigBird model)"),FIe.forEach(t),arr=i(X),yT=n(X,"LI",{});var TIe=s(yT);vbe=n(TIe,"STRONG",{});var qwt=s(vbe);nrr=r(qwt,"bigbird_pegasus"),qwt.forEach(t),srr=r(TIe," \u2014 "),IQ=n(TIe,"A",{href:!0});var jwt=s(IQ);lrr=r(jwt,"BigBirdPegasusForQuestionAnswering"),jwt.forEach(t),irr=r(TIe," (BigBird-Pegasus model)"),TIe.forEach(t),drr=i(X),xT=n(X,"LI",{});var MIe=s(xT);Fbe=n(MIe,"STRONG",{});var Dwt=s(Fbe);crr=r(Dwt,"camembert"),Dwt.forEach(t),mrr=r(MIe," \u2014 "),NQ=n(MIe,"A",{href:!0});var Gwt=s(NQ);frr=r(Gwt,"CamembertForQuestionAnswering"),Gwt.forEach(t),grr=r(MIe," (CamemBERT model)"),MIe.forEach(t),hrr=i(X),$T=n(X,"LI",{});var EIe=s($T);Tbe=n(EIe,"STRONG",{});var Owt=s(Tbe);urr=r(Owt,"canine"),Owt.forEach(t),prr=r(EIe," \u2014 "),qQ=n(EIe,"A",{href:!0});var Vwt=s(qQ);_rr=r(Vwt,"CanineForQuestionAnswering"),Vwt.forEach(t),brr=r(EIe," (CANINE model)"),EIe.forEach(t),vrr=i(X),kT=n(X,"LI",{});var CIe=s(kT);Mbe=n(CIe,"STRONG",{});var Xwt=s(Mbe);Frr=r(Xwt,"convbert"),Xwt.forEach(t),Trr=r(CIe," \u2014 "),jQ=n(CIe,"A",{href:!0});var zwt=s(jQ);Mrr=r(zwt,"ConvBertForQuestionAnswering"),zwt.forEach(t),Err=r(CIe," (ConvBERT model)"),CIe.forEach(t),Crr=i(X),ST=n(X,"LI",{});var wIe=s(ST);Ebe=n(wIe,"STRONG",{});var Qwt=s(Ebe);wrr=r(Qwt,"data2vec-text"),Qwt.forEach(t),Arr=r(wIe," \u2014 "),DQ=n(wIe,"A",{href:!0});var Wwt=s(DQ);Lrr=r(Wwt,"Data2VecTextForQuestionAnswering"),Wwt.forEach(t),yrr=r(wIe," (Data2VecText model)"),wIe.forEach(t),xrr=i(X),RT=n(X,"LI",{});var AIe=s(RT);Cbe=n(AIe,"STRONG",{});var Hwt=s(Cbe);$rr=r(Hwt,"deberta"),Hwt.forEach(t),krr=r(AIe," \u2014 "),GQ=n(AIe,"A",{href:!0});var Uwt=s(GQ);Srr=r(Uwt,"DebertaForQuestionAnswering"),Uwt.forEach(t),Rrr=r(AIe," (DeBERTa model)"),AIe.forEach(t),Prr=i(X),PT=n(X,"LI",{});var LIe=s(PT);wbe=n(LIe,"STRONG",{});var Jwt=s(wbe);Brr=r(Jwt,"deberta-v2"),Jwt.forEach(t),Irr=r(LIe," \u2014 "),OQ=n(LIe,"A",{href:!0});var Ywt=s(OQ);Nrr=r(Ywt,"DebertaV2ForQuestionAnswering"),Ywt.forEach(t),qrr=r(LIe," (DeBERTa-v2 model)"),LIe.forEach(t),jrr=i(X),BT=n(X,"LI",{});var yIe=s(BT);Abe=n(yIe,"STRONG",{});var Kwt=s(Abe);Drr=r(Kwt,"distilbert"),Kwt.forEach(t),Grr=r(yIe," \u2014 "),VQ=n(yIe,"A",{href:!0});var Zwt=s(VQ);Orr=r(Zwt,"DistilBertForQuestionAnswering"),Zwt.forEach(t),Vrr=r(yIe," (DistilBERT model)"),yIe.forEach(t),Xrr=i(X),IT=n(X,"LI",{});var xIe=s(IT);Lbe=n(xIe,"STRONG",{});var eAt=s(Lbe);zrr=r(eAt,"electra"),eAt.forEach(t),Qrr=r(xIe," \u2014 "),XQ=n(xIe,"A",{href:!0});var oAt=s(XQ);Wrr=r(oAt,"ElectraForQuestionAnswering"),oAt.forEach(t),Hrr=r(xIe," (ELECTRA model)"),xIe.forEach(t),Urr=i(X),NT=n(X,"LI",{});var $Ie=s(NT);ybe=n($Ie,"STRONG",{});var rAt=s(ybe);Jrr=r(rAt,"flaubert"),rAt.forEach(t),Yrr=r($Ie," \u2014 "),zQ=n($Ie,"A",{href:!0});var tAt=s(zQ);Krr=r(tAt,"FlaubertForQuestionAnsweringSimple"),tAt.forEach(t),Zrr=r($Ie," (FlauBERT model)"),$Ie.forEach(t),etr=i(X),qT=n(X,"LI",{});var kIe=s(qT);xbe=n(kIe,"STRONG",{});var aAt=s(xbe);otr=r(aAt,"fnet"),aAt.forEach(t),rtr=r(kIe," \u2014 "),QQ=n(kIe,"A",{href:!0});var nAt=s(QQ);ttr=r(nAt,"FNetForQuestionAnswering"),nAt.forEach(t),atr=r(kIe," (FNet model)"),kIe.forEach(t),ntr=i(X),jT=n(X,"LI",{});var SIe=s(jT);$be=n(SIe,"STRONG",{});var sAt=s($be);str=r(sAt,"funnel"),sAt.forEach(t),ltr=r(SIe," \u2014 "),WQ=n(SIe,"A",{href:!0});var lAt=s(WQ);itr=r(lAt,"FunnelForQuestionAnswering"),lAt.forEach(t),dtr=r(SIe," (Funnel Transformer model)"),SIe.forEach(t),ctr=i(X),DT=n(X,"LI",{});var RIe=s(DT);kbe=n(RIe,"STRONG",{});var iAt=s(kbe);mtr=r(iAt,"gptj"),iAt.forEach(t),ftr=r(RIe," \u2014 "),HQ=n(RIe,"A",{href:!0});var dAt=s(HQ);gtr=r(dAt,"GPTJForQuestionAnswering"),dAt.forEach(t),htr=r(RIe," (GPT-J model)"),RIe.forEach(t),utr=i(X),GT=n(X,"LI",{});var PIe=s(GT);Sbe=n(PIe,"STRONG",{});var cAt=s(Sbe);ptr=r(cAt,"ibert"),cAt.forEach(t),_tr=r(PIe," \u2014 "),UQ=n(PIe,"A",{href:!0});var mAt=s(UQ);btr=r(mAt,"IBertForQuestionAnswering"),mAt.forEach(t),vtr=r(PIe," (I-BERT model)"),PIe.forEach(t),Ftr=i(X),OT=n(X,"LI",{});var BIe=s(OT);Rbe=n(BIe,"STRONG",{});var fAt=s(Rbe);Ttr=r(fAt,"layoutlmv2"),fAt.forEach(t),Mtr=r(BIe," \u2014 "),JQ=n(BIe,"A",{href:!0});var gAt=s(JQ);Etr=r(gAt,"LayoutLMv2ForQuestionAnswering"),gAt.forEach(t),Ctr=r(BIe," (LayoutLMv2 model)"),BIe.forEach(t),wtr=i(X),VT=n(X,"LI",{});var IIe=s(VT);Pbe=n(IIe,"STRONG",{});var hAt=s(Pbe);Atr=r(hAt,"layoutlmv3"),hAt.forEach(t),Ltr=r(IIe," \u2014 "),YQ=n(IIe,"A",{href:!0});var uAt=s(YQ);ytr=r(uAt,"LayoutLMv3ForQuestionAnswering"),uAt.forEach(t),xtr=r(IIe," (LayoutLMv3 model)"),IIe.forEach(t),$tr=i(X),XT=n(X,"LI",{});var NIe=s(XT);Bbe=n(NIe,"STRONG",{});var pAt=s(Bbe);ktr=r(pAt,"led"),pAt.forEach(t),Str=r(NIe," \u2014 "),KQ=n(NIe,"A",{href:!0});var _At=s(KQ);Rtr=r(_At,"LEDForQuestionAnswering"),_At.forEach(t),Ptr=r(NIe," (LED model)"),NIe.forEach(t),Btr=i(X),zT=n(X,"LI",{});var qIe=s(zT);Ibe=n(qIe,"STRONG",{});var bAt=s(Ibe);Itr=r(bAt,"longformer"),bAt.forEach(t),Ntr=r(qIe," \u2014 "),ZQ=n(qIe,"A",{href:!0});var vAt=s(ZQ);qtr=r(vAt,"LongformerForQuestionAnswering"),vAt.forEach(t),jtr=r(qIe," (Longformer model)"),qIe.forEach(t),Dtr=i(X),QT=n(X,"LI",{});var jIe=s(QT);Nbe=n(jIe,"STRONG",{});var FAt=s(Nbe);Gtr=r(FAt,"lxmert"),FAt.forEach(t),Otr=r(jIe," \u2014 "),eW=n(jIe,"A",{href:!0});var TAt=s(eW);Vtr=r(TAt,"LxmertForQuestionAnswering"),TAt.forEach(t),Xtr=r(jIe," (LXMERT model)"),jIe.forEach(t),ztr=i(X),WT=n(X,"LI",{});var DIe=s(WT);qbe=n(DIe,"STRONG",{});var MAt=s(qbe);Qtr=r(MAt,"mbart"),MAt.forEach(t),Wtr=r(DIe," \u2014 "),oW=n(DIe,"A",{href:!0});var EAt=s(oW);Htr=r(EAt,"MBartForQuestionAnswering"),EAt.forEach(t),Utr=r(DIe," (mBART model)"),DIe.forEach(t),Jtr=i(X),HT=n(X,"LI",{});var GIe=s(HT);jbe=n(GIe,"STRONG",{});var CAt=s(jbe);Ytr=r(CAt,"megatron-bert"),CAt.forEach(t),Ktr=r(GIe," \u2014 "),rW=n(GIe,"A",{href:!0});var wAt=s(rW);Ztr=r(wAt,"MegatronBertForQuestionAnswering"),wAt.forEach(t),ear=r(GIe," (Megatron-BERT model)"),GIe.forEach(t),oar=i(X),UT=n(X,"LI",{});var OIe=s(UT);Dbe=n(OIe,"STRONG",{});var AAt=s(Dbe);rar=r(AAt,"mobilebert"),AAt.forEach(t),tar=r(OIe," \u2014 "),tW=n(OIe,"A",{href:!0});var LAt=s(tW);aar=r(LAt,"MobileBertForQuestionAnswering"),LAt.forEach(t),nar=r(OIe," (MobileBERT model)"),OIe.forEach(t),sar=i(X),JT=n(X,"LI",{});var VIe=s(JT);Gbe=n(VIe,"STRONG",{});var yAt=s(Gbe);lar=r(yAt,"mpnet"),yAt.forEach(t),iar=r(VIe," \u2014 "),aW=n(VIe,"A",{href:!0});var xAt=s(aW);dar=r(xAt,"MPNetForQuestionAnswering"),xAt.forEach(t),car=r(VIe," (MPNet model)"),VIe.forEach(t),mar=i(X),YT=n(X,"LI",{});var XIe=s(YT);Obe=n(XIe,"STRONG",{});var $At=s(Obe);far=r($At,"mvp"),$At.forEach(t),gar=r(XIe," \u2014 "),nW=n(XIe,"A",{href:!0});var kAt=s(nW);har=r(kAt,"MvpForQuestionAnswering"),kAt.forEach(t),uar=r(XIe," (MVP model)"),XIe.forEach(t),par=i(X),KT=n(X,"LI",{});var zIe=s(KT);Vbe=n(zIe,"STRONG",{});var SAt=s(Vbe);_ar=r(SAt,"nezha"),SAt.forEach(t),bar=r(zIe," \u2014 "),sW=n(zIe,"A",{href:!0});var RAt=s(sW);Far=r(RAt,"NezhaForQuestionAnswering"),RAt.forEach(t),Tar=r(zIe," (Nezha model)"),zIe.forEach(t),Mar=i(X),ZT=n(X,"LI",{});var QIe=s(ZT);Xbe=n(QIe,"STRONG",{});var PAt=s(Xbe);Ear=r(PAt,"nystromformer"),PAt.forEach(t),Car=r(QIe," \u2014 "),lW=n(QIe,"A",{href:!0});var BAt=s(lW);war=r(BAt,"NystromformerForQuestionAnswering"),BAt.forEach(t),Aar=r(QIe," (Nystr\xF6mformer model)"),QIe.forEach(t),Lar=i(X),eM=n(X,"LI",{});var WIe=s(eM);zbe=n(WIe,"STRONG",{});var IAt=s(zbe);yar=r(IAt,"qdqbert"),IAt.forEach(t),xar=r(WIe," \u2014 "),iW=n(WIe,"A",{href:!0});var NAt=s(iW);$ar=r(NAt,"QDQBertForQuestionAnswering"),NAt.forEach(t),kar=r(WIe," (QDQBert model)"),WIe.forEach(t),Sar=i(X),oM=n(X,"LI",{});var HIe=s(oM);Qbe=n(HIe,"STRONG",{});var qAt=s(Qbe);Rar=r(qAt,"reformer"),qAt.forEach(t),Par=r(HIe," \u2014 "),dW=n(HIe,"A",{href:!0});var jAt=s(dW);Bar=r(jAt,"ReformerForQuestionAnswering"),jAt.forEach(t),Iar=r(HIe," (Reformer model)"),HIe.forEach(t),Nar=i(X),rM=n(X,"LI",{});var UIe=s(rM);Wbe=n(UIe,"STRONG",{});var DAt=s(Wbe);qar=r(DAt,"rembert"),DAt.forEach(t),jar=r(UIe," \u2014 "),cW=n(UIe,"A",{href:!0});var GAt=s(cW);Dar=r(GAt,"RemBertForQuestionAnswering"),GAt.forEach(t),Gar=r(UIe," (RemBERT model)"),UIe.forEach(t),Oar=i(X),tM=n(X,"LI",{});var JIe=s(tM);Hbe=n(JIe,"STRONG",{});var OAt=s(Hbe);Var=r(OAt,"roberta"),OAt.forEach(t),Xar=r(JIe," \u2014 "),mW=n(JIe,"A",{href:!0});var VAt=s(mW);zar=r(VAt,"RobertaForQuestionAnswering"),VAt.forEach(t),Qar=r(JIe," (RoBERTa model)"),JIe.forEach(t),War=i(X),aM=n(X,"LI",{});var YIe=s(aM);Ube=n(YIe,"STRONG",{});var XAt=s(Ube);Har=r(XAt,"roformer"),XAt.forEach(t),Uar=r(YIe," \u2014 "),fW=n(YIe,"A",{href:!0});var zAt=s(fW);Jar=r(zAt,"RoFormerForQuestionAnswering"),zAt.forEach(t),Yar=r(YIe," (RoFormer model)"),YIe.forEach(t),Kar=i(X),nM=n(X,"LI",{});var KIe=s(nM);Jbe=n(KIe,"STRONG",{});var QAt=s(Jbe);Zar=r(QAt,"splinter"),QAt.forEach(t),enr=r(KIe," \u2014 "),gW=n(KIe,"A",{href:!0});var WAt=s(gW);onr=r(WAt,"SplinterForQuestionAnswering"),WAt.forEach(t),rnr=r(KIe," (Splinter model)"),KIe.forEach(t),tnr=i(X),sM=n(X,"LI",{});var ZIe=s(sM);Ybe=n(ZIe,"STRONG",{});var HAt=s(Ybe);anr=r(HAt,"squeezebert"),HAt.forEach(t),nnr=r(ZIe," \u2014 "),hW=n(ZIe,"A",{href:!0});var UAt=s(hW);snr=r(UAt,"SqueezeBertForQuestionAnswering"),UAt.forEach(t),lnr=r(ZIe," (SqueezeBERT model)"),ZIe.forEach(t),inr=i(X),lM=n(X,"LI",{});var eNe=s(lM);Kbe=n(eNe,"STRONG",{});var JAt=s(Kbe);dnr=r(JAt,"xlm"),JAt.forEach(t),cnr=r(eNe," \u2014 "),uW=n(eNe,"A",{href:!0});var YAt=s(uW);mnr=r(YAt,"XLMForQuestionAnsweringSimple"),YAt.forEach(t),fnr=r(eNe," (XLM model)"),eNe.forEach(t),gnr=i(X),iM=n(X,"LI",{});var oNe=s(iM);Zbe=n(oNe,"STRONG",{});var KAt=s(Zbe);hnr=r(KAt,"xlm-roberta"),KAt.forEach(t),unr=r(oNe," \u2014 "),pW=n(oNe,"A",{href:!0});var ZAt=s(pW);pnr=r(ZAt,"XLMRobertaForQuestionAnswering"),ZAt.forEach(t),_nr=r(oNe," (XLM-RoBERTa model)"),oNe.forEach(t),bnr=i(X),dM=n(X,"LI",{});var rNe=s(dM);eve=n(rNe,"STRONG",{});var e6t=s(eve);vnr=r(e6t,"xlm-roberta-xl"),e6t.forEach(t),Fnr=r(rNe," \u2014 "),_W=n(rNe,"A",{href:!0});var o6t=s(_W);Tnr=r(o6t,"XLMRobertaXLForQuestionAnswering"),o6t.forEach(t),Mnr=r(rNe," (XLM-RoBERTa-XL model)"),rNe.forEach(t),Enr=i(X),cM=n(X,"LI",{});var tNe=s(cM);ove=n(tNe,"STRONG",{});var r6t=s(ove);Cnr=r(r6t,"xlnet"),r6t.forEach(t),wnr=r(tNe," \u2014 "),bW=n(tNe,"A",{href:!0});var t6t=s(bW);Anr=r(t6t,"XLNetForQuestionAnsweringSimple"),t6t.forEach(t),Lnr=r(tNe," (XLNet model)"),tNe.forEach(t),ynr=i(X),mM=n(X,"LI",{});var aNe=s(mM);rve=n(aNe,"STRONG",{});var a6t=s(rve);xnr=r(a6t,"yoso"),a6t.forEach(t),$nr=r(aNe," \u2014 "),vW=n(aNe,"A",{href:!0});var n6t=s(vW);knr=r(n6t,"YosoForQuestionAnswering"),n6t.forEach(t),Snr=r(aNe," (YOSO model)"),aNe.forEach(t),X.forEach(t),Rnr=i(_a),fM=n(_a,"P",{});var nNe=s(fM);Pnr=r(nNe,"The model is set in evaluation mode by default using "),tve=n(nNe,"CODE",{});var s6t=s(tve);Bnr=r(s6t,"model.eval()"),s6t.forEach(t),Inr=r(nNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ave=n(nNe,"CODE",{});var l6t=s(ave);Nnr=r(l6t,"model.train()"),l6t.forEach(t),nNe.forEach(t),qnr=i(_a),T(gM.$$.fragment,_a),_a.forEach(t),fl.forEach(t),oze=i(m),bd=n(m,"H2",{class:!0});var lWe=s(bd);hM=n(lWe,"A",{id:!0,class:!0,href:!0});var i6t=s(hM);nve=n(i6t,"SPAN",{});var d6t=s(nve);T(S8.$$.fragment,d6t),d6t.forEach(t),i6t.forEach(t),jnr=i(lWe),sve=n(lWe,"SPAN",{});var c6t=s(sve);Dnr=r(c6t,"AutoModelForTableQuestionAnswering"),c6t.forEach(t),lWe.forEach(t),rze=i(m),Oo=n(m,"DIV",{class:!0});var gl=s(Oo);T(R8.$$.fragment,gl),Gnr=i(gl),vd=n(gl,"P",{});var fte=s(vd);Onr=r(fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),FW=n(fte,"A",{href:!0});var m6t=s(FW);Vnr=r(m6t,"from_pretrained()"),m6t.forEach(t),Xnr=r(fte," class method or the "),TW=n(fte,"A",{href:!0});var f6t=s(TW);znr=r(f6t,"from_config()"),f6t.forEach(t),Qnr=r(fte,` class
method.`),fte.forEach(t),Wnr=i(gl),P8=n(gl,"P",{});var iWe=s(P8);Hnr=r(iWe,"This class cannot be instantiated directly using "),lve=n(iWe,"CODE",{});var g6t=s(lve);Unr=r(g6t,"__init__()"),g6t.forEach(t),Jnr=r(iWe," (throws an error)."),iWe.forEach(t),Ynr=i(gl),bt=n(gl,"DIV",{class:!0});var P7=s(bt);T(B8.$$.fragment,P7),Knr=i(P7),ive=n(P7,"P",{});var h6t=s(ive);Znr=r(h6t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),h6t.forEach(t),esr=i(P7),Fd=n(P7,"P",{});var gte=s(Fd);osr=r(gte,`Note:
Loading a model from its configuration file does `),dve=n(gte,"STRONG",{});var u6t=s(dve);rsr=r(u6t,"not"),u6t.forEach(t),tsr=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=n(gte,"A",{href:!0});var p6t=s(MW);asr=r(p6t,"from_pretrained()"),p6t.forEach(t),nsr=r(gte," to load the model weights."),gte.forEach(t),ssr=i(P7),T(uM.$$.fragment,P7),P7.forEach(t),lsr=i(gl),lo=n(gl,"DIV",{class:!0});var ba=s(lo);T(I8.$$.fragment,ba),isr=i(ba),cve=n(ba,"P",{});var _6t=s(cve);dsr=r(_6t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),_6t.forEach(t),csr=i(ba),Qa=n(ba,"P",{});var B7=s(Qa);msr=r(B7,"The model class to instantiate is selected based on the "),mve=n(B7,"CODE",{});var b6t=s(mve);fsr=r(b6t,"model_type"),b6t.forEach(t),gsr=r(B7,` property of the config object (either
passed as an argument or loaded from `),fve=n(B7,"CODE",{});var v6t=s(fve);hsr=r(v6t,"pretrained_model_name_or_path"),v6t.forEach(t),usr=r(B7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=n(B7,"CODE",{});var F6t=s(gve);psr=r(F6t,"pretrained_model_name_or_path"),F6t.forEach(t),_sr=r(B7,":"),B7.forEach(t),bsr=i(ba),hve=n(ba,"UL",{});var T6t=s(hve);pM=n(T6t,"LI",{});var sNe=s(pM);uve=n(sNe,"STRONG",{});var M6t=s(uve);vsr=r(M6t,"tapas"),M6t.forEach(t),Fsr=r(sNe," \u2014 "),EW=n(sNe,"A",{href:!0});var E6t=s(EW);Tsr=r(E6t,"TapasForQuestionAnswering"),E6t.forEach(t),Msr=r(sNe," (TAPAS model)"),sNe.forEach(t),T6t.forEach(t),Esr=i(ba),_M=n(ba,"P",{});var lNe=s(_M);Csr=r(lNe,"The model is set in evaluation mode by default using "),pve=n(lNe,"CODE",{});var C6t=s(pve);wsr=r(C6t,"model.eval()"),C6t.forEach(t),Asr=r(lNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ve=n(lNe,"CODE",{});var w6t=s(_ve);Lsr=r(w6t,"model.train()"),w6t.forEach(t),lNe.forEach(t),ysr=i(ba),T(bM.$$.fragment,ba),ba.forEach(t),gl.forEach(t),tze=i(m),Td=n(m,"H2",{class:!0});var dWe=s(Td);vM=n(dWe,"A",{id:!0,class:!0,href:!0});var A6t=s(vM);bve=n(A6t,"SPAN",{});var L6t=s(bve);T(N8.$$.fragment,L6t),L6t.forEach(t),A6t.forEach(t),xsr=i(dWe),vve=n(dWe,"SPAN",{});var y6t=s(vve);$sr=r(y6t,"AutoModelForImageClassification"),y6t.forEach(t),dWe.forEach(t),aze=i(m),Vo=n(m,"DIV",{class:!0});var hl=s(Vo);T(q8.$$.fragment,hl),ksr=i(hl),Md=n(hl,"P",{});var hte=s(Md);Ssr=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CW=n(hte,"A",{href:!0});var x6t=s(CW);Rsr=r(x6t,"from_pretrained()"),x6t.forEach(t),Psr=r(hte," class method or the "),wW=n(hte,"A",{href:!0});var $6t=s(wW);Bsr=r($6t,"from_config()"),$6t.forEach(t),Isr=r(hte,` class
method.`),hte.forEach(t),Nsr=i(hl),j8=n(hl,"P",{});var cWe=s(j8);qsr=r(cWe,"This class cannot be instantiated directly using "),Fve=n(cWe,"CODE",{});var k6t=s(Fve);jsr=r(k6t,"__init__()"),k6t.forEach(t),Dsr=r(cWe," (throws an error)."),cWe.forEach(t),Gsr=i(hl),vt=n(hl,"DIV",{class:!0});var I7=s(vt);T(D8.$$.fragment,I7),Osr=i(I7),Tve=n(I7,"P",{});var S6t=s(Tve);Vsr=r(S6t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),S6t.forEach(t),Xsr=i(I7),Ed=n(I7,"P",{});var ute=s(Ed);zsr=r(ute,`Note:
Loading a model from its configuration file does `),Mve=n(ute,"STRONG",{});var R6t=s(Mve);Qsr=r(R6t,"not"),R6t.forEach(t),Wsr=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=n(ute,"A",{href:!0});var P6t=s(AW);Hsr=r(P6t,"from_pretrained()"),P6t.forEach(t),Usr=r(ute," to load the model weights."),ute.forEach(t),Jsr=i(I7),T(FM.$$.fragment,I7),I7.forEach(t),Ysr=i(hl),io=n(hl,"DIV",{class:!0});var va=s(io);T(G8.$$.fragment,va),Ksr=i(va),Eve=n(va,"P",{});var B6t=s(Eve);Zsr=r(B6t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),B6t.forEach(t),elr=i(va),Wa=n(va,"P",{});var N7=s(Wa);olr=r(N7,"The model class to instantiate is selected based on the "),Cve=n(N7,"CODE",{});var I6t=s(Cve);rlr=r(I6t,"model_type"),I6t.forEach(t),tlr=r(N7,` property of the config object (either
passed as an argument or loaded from `),wve=n(N7,"CODE",{});var N6t=s(wve);alr=r(N6t,"pretrained_model_name_or_path"),N6t.forEach(t),nlr=r(N7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ave=n(N7,"CODE",{});var q6t=s(Ave);slr=r(q6t,"pretrained_model_name_or_path"),q6t.forEach(t),llr=r(N7,":"),N7.forEach(t),ilr=i(va),ve=n(va,"UL",{});var Te=s(ve);TM=n(Te,"LI",{});var iNe=s(TM);Lve=n(iNe,"STRONG",{});var j6t=s(Lve);dlr=r(j6t,"beit"),j6t.forEach(t),clr=r(iNe," \u2014 "),LW=n(iNe,"A",{href:!0});var D6t=s(LW);mlr=r(D6t,"BeitForImageClassification"),D6t.forEach(t),flr=r(iNe," (BEiT model)"),iNe.forEach(t),glr=i(Te),MM=n(Te,"LI",{});var dNe=s(MM);yve=n(dNe,"STRONG",{});var G6t=s(yve);hlr=r(G6t,"convnext"),G6t.forEach(t),ulr=r(dNe," \u2014 "),yW=n(dNe,"A",{href:!0});var O6t=s(yW);plr=r(O6t,"ConvNextForImageClassification"),O6t.forEach(t),_lr=r(dNe," (ConvNeXT model)"),dNe.forEach(t),blr=i(Te),EM=n(Te,"LI",{});var cNe=s(EM);xve=n(cNe,"STRONG",{});var V6t=s(xve);vlr=r(V6t,"cvt"),V6t.forEach(t),Flr=r(cNe," \u2014 "),xW=n(cNe,"A",{href:!0});var X6t=s(xW);Tlr=r(X6t,"CvtForImageClassification"),X6t.forEach(t),Mlr=r(cNe," (CvT model)"),cNe.forEach(t),Elr=i(Te),CM=n(Te,"LI",{});var mNe=s(CM);$ve=n(mNe,"STRONG",{});var z6t=s($ve);Clr=r(z6t,"data2vec-vision"),z6t.forEach(t),wlr=r(mNe," \u2014 "),$W=n(mNe,"A",{href:!0});var Q6t=s($W);Alr=r(Q6t,"Data2VecVisionForImageClassification"),Q6t.forEach(t),Llr=r(mNe," (Data2VecVision model)"),mNe.forEach(t),ylr=i(Te),Us=n(Te,"LI",{});var qS=s(Us);kve=n(qS,"STRONG",{});var W6t=s(kve);xlr=r(W6t,"deit"),W6t.forEach(t),$lr=r(qS," \u2014 "),kW=n(qS,"A",{href:!0});var H6t=s(kW);klr=r(H6t,"DeiTForImageClassification"),H6t.forEach(t),Slr=r(qS," or "),SW=n(qS,"A",{href:!0});var U6t=s(SW);Rlr=r(U6t,"DeiTForImageClassificationWithTeacher"),U6t.forEach(t),Plr=r(qS," (DeiT model)"),qS.forEach(t),Blr=i(Te),wM=n(Te,"LI",{});var fNe=s(wM);Sve=n(fNe,"STRONG",{});var J6t=s(Sve);Ilr=r(J6t,"imagegpt"),J6t.forEach(t),Nlr=r(fNe," \u2014 "),RW=n(fNe,"A",{href:!0});var Y6t=s(RW);qlr=r(Y6t,"ImageGPTForImageClassification"),Y6t.forEach(t),jlr=r(fNe," (ImageGPT model)"),fNe.forEach(t),Dlr=i(Te),Js=n(Te,"LI",{});var jS=s(Js);Rve=n(jS,"STRONG",{});var K6t=s(Rve);Glr=r(K6t,"levit"),K6t.forEach(t),Olr=r(jS," \u2014 "),PW=n(jS,"A",{href:!0});var Z6t=s(PW);Vlr=r(Z6t,"LevitForImageClassification"),Z6t.forEach(t),Xlr=r(jS," or "),BW=n(jS,"A",{href:!0});var e7t=s(BW);zlr=r(e7t,"LevitForImageClassificationWithTeacher"),e7t.forEach(t),Qlr=r(jS," (LeViT model)"),jS.forEach(t),Wlr=i(Te),AM=n(Te,"LI",{});var gNe=s(AM);Pve=n(gNe,"STRONG",{});var o7t=s(Pve);Hlr=r(o7t,"mobilevit"),o7t.forEach(t),Ulr=r(gNe," \u2014 "),IW=n(gNe,"A",{href:!0});var r7t=s(IW);Jlr=r(r7t,"MobileViTForImageClassification"),r7t.forEach(t),Ylr=r(gNe," (MobileViT model)"),gNe.forEach(t),Klr=i(Te),Ft=n(Te,"LI",{});var Rm=s(Ft);Bve=n(Rm,"STRONG",{});var t7t=s(Bve);Zlr=r(t7t,"perceiver"),t7t.forEach(t),eir=r(Rm," \u2014 "),NW=n(Rm,"A",{href:!0});var a7t=s(NW);oir=r(a7t,"PerceiverForImageClassificationLearned"),a7t.forEach(t),rir=r(Rm," or "),qW=n(Rm,"A",{href:!0});var n7t=s(qW);tir=r(n7t,"PerceiverForImageClassificationFourier"),n7t.forEach(t),air=r(Rm," or "),jW=n(Rm,"A",{href:!0});var s7t=s(jW);nir=r(s7t,"PerceiverForImageClassificationConvProcessing"),s7t.forEach(t),sir=r(Rm," (Perceiver model)"),Rm.forEach(t),lir=i(Te),LM=n(Te,"LI",{});var hNe=s(LM);Ive=n(hNe,"STRONG",{});var l7t=s(Ive);iir=r(l7t,"poolformer"),l7t.forEach(t),dir=r(hNe," \u2014 "),DW=n(hNe,"A",{href:!0});var i7t=s(DW);cir=r(i7t,"PoolFormerForImageClassification"),i7t.forEach(t),mir=r(hNe," (PoolFormer model)"),hNe.forEach(t),fir=i(Te),yM=n(Te,"LI",{});var uNe=s(yM);Nve=n(uNe,"STRONG",{});var d7t=s(Nve);gir=r(d7t,"regnet"),d7t.forEach(t),hir=r(uNe," \u2014 "),GW=n(uNe,"A",{href:!0});var c7t=s(GW);uir=r(c7t,"RegNetForImageClassification"),c7t.forEach(t),pir=r(uNe," (RegNet model)"),uNe.forEach(t),_ir=i(Te),xM=n(Te,"LI",{});var pNe=s(xM);qve=n(pNe,"STRONG",{});var m7t=s(qve);bir=r(m7t,"resnet"),m7t.forEach(t),vir=r(pNe," \u2014 "),OW=n(pNe,"A",{href:!0});var f7t=s(OW);Fir=r(f7t,"ResNetForImageClassification"),f7t.forEach(t),Tir=r(pNe," (ResNet model)"),pNe.forEach(t),Mir=i(Te),$M=n(Te,"LI",{});var _Ne=s($M);jve=n(_Ne,"STRONG",{});var g7t=s(jve);Eir=r(g7t,"segformer"),g7t.forEach(t),Cir=r(_Ne," \u2014 "),VW=n(_Ne,"A",{href:!0});var h7t=s(VW);wir=r(h7t,"SegformerForImageClassification"),h7t.forEach(t),Air=r(_Ne," (SegFormer model)"),_Ne.forEach(t),Lir=i(Te),kM=n(Te,"LI",{});var bNe=s(kM);Dve=n(bNe,"STRONG",{});var u7t=s(Dve);yir=r(u7t,"swin"),u7t.forEach(t),xir=r(bNe," \u2014 "),XW=n(bNe,"A",{href:!0});var p7t=s(XW);$ir=r(p7t,"SwinForImageClassification"),p7t.forEach(t),kir=r(bNe," (Swin Transformer model)"),bNe.forEach(t),Sir=i(Te),SM=n(Te,"LI",{});var vNe=s(SM);Gve=n(vNe,"STRONG",{});var _7t=s(Gve);Rir=r(_7t,"van"),_7t.forEach(t),Pir=r(vNe," \u2014 "),zW=n(vNe,"A",{href:!0});var b7t=s(zW);Bir=r(b7t,"VanForImageClassification"),b7t.forEach(t),Iir=r(vNe," (VAN model)"),vNe.forEach(t),Nir=i(Te),RM=n(Te,"LI",{});var FNe=s(RM);Ove=n(FNe,"STRONG",{});var v7t=s(Ove);qir=r(v7t,"vit"),v7t.forEach(t),jir=r(FNe," \u2014 "),QW=n(FNe,"A",{href:!0});var F7t=s(QW);Dir=r(F7t,"ViTForImageClassification"),F7t.forEach(t),Gir=r(FNe," (ViT model)"),FNe.forEach(t),Te.forEach(t),Oir=i(va),PM=n(va,"P",{});var TNe=s(PM);Vir=r(TNe,"The model is set in evaluation mode by default using "),Vve=n(TNe,"CODE",{});var T7t=s(Vve);Xir=r(T7t,"model.eval()"),T7t.forEach(t),zir=r(TNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xve=n(TNe,"CODE",{});var M7t=s(Xve);Qir=r(M7t,"model.train()"),M7t.forEach(t),TNe.forEach(t),Wir=i(va),T(BM.$$.fragment,va),va.forEach(t),hl.forEach(t),nze=i(m),Cd=n(m,"H2",{class:!0});var mWe=s(Cd);IM=n(mWe,"A",{id:!0,class:!0,href:!0});var E7t=s(IM);zve=n(E7t,"SPAN",{});var C7t=s(zve);T(O8.$$.fragment,C7t),C7t.forEach(t),E7t.forEach(t),Hir=i(mWe),Qve=n(mWe,"SPAN",{});var w7t=s(Qve);Uir=r(w7t,"AutoModelForVision2Seq"),w7t.forEach(t),mWe.forEach(t),sze=i(m),Xo=n(m,"DIV",{class:!0});var ul=s(Xo);T(V8.$$.fragment,ul),Jir=i(ul),wd=n(ul,"P",{});var pte=s(wd);Yir=r(pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WW=n(pte,"A",{href:!0});var A7t=s(WW);Kir=r(A7t,"from_pretrained()"),A7t.forEach(t),Zir=r(pte," class method or the "),HW=n(pte,"A",{href:!0});var L7t=s(HW);edr=r(L7t,"from_config()"),L7t.forEach(t),odr=r(pte,` class
method.`),pte.forEach(t),rdr=i(ul),X8=n(ul,"P",{});var fWe=s(X8);tdr=r(fWe,"This class cannot be instantiated directly using "),Wve=n(fWe,"CODE",{});var y7t=s(Wve);adr=r(y7t,"__init__()"),y7t.forEach(t),ndr=r(fWe," (throws an error)."),fWe.forEach(t),sdr=i(ul),Tt=n(ul,"DIV",{class:!0});var q7=s(Tt);T(z8.$$.fragment,q7),ldr=i(q7),Hve=n(q7,"P",{});var x7t=s(Hve);idr=r(x7t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),x7t.forEach(t),ddr=i(q7),Ad=n(q7,"P",{});var _te=s(Ad);cdr=r(_te,`Note:
Loading a model from its configuration file does `),Uve=n(_te,"STRONG",{});var $7t=s(Uve);mdr=r($7t,"not"),$7t.forEach(t),fdr=r(_te,` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=n(_te,"A",{href:!0});var k7t=s(UW);gdr=r(k7t,"from_pretrained()"),k7t.forEach(t),hdr=r(_te," to load the model weights."),_te.forEach(t),udr=i(q7),T(NM.$$.fragment,q7),q7.forEach(t),pdr=i(ul),co=n(ul,"DIV",{class:!0});var Fa=s(co);T(Q8.$$.fragment,Fa),_dr=i(Fa),Jve=n(Fa,"P",{});var S7t=s(Jve);bdr=r(S7t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),S7t.forEach(t),vdr=i(Fa),Ha=n(Fa,"P",{});var j7=s(Ha);Fdr=r(j7,"The model class to instantiate is selected based on the "),Yve=n(j7,"CODE",{});var R7t=s(Yve);Tdr=r(R7t,"model_type"),R7t.forEach(t),Mdr=r(j7,` property of the config object (either
passed as an argument or loaded from `),Kve=n(j7,"CODE",{});var P7t=s(Kve);Edr=r(P7t,"pretrained_model_name_or_path"),P7t.forEach(t),Cdr=r(j7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=n(j7,"CODE",{});var B7t=s(Zve);wdr=r(B7t,"pretrained_model_name_or_path"),B7t.forEach(t),Adr=r(j7,":"),j7.forEach(t),Ldr=i(Fa),e1e=n(Fa,"UL",{});var I7t=s(e1e);qM=n(I7t,"LI",{});var MNe=s(qM);o1e=n(MNe,"STRONG",{});var N7t=s(o1e);ydr=r(N7t,"vision-encoder-decoder"),N7t.forEach(t),xdr=r(MNe," \u2014 "),JW=n(MNe,"A",{href:!0});var q7t=s(JW);$dr=r(q7t,"VisionEncoderDecoderModel"),q7t.forEach(t),kdr=r(MNe," (Vision Encoder decoder model)"),MNe.forEach(t),I7t.forEach(t),Sdr=i(Fa),jM=n(Fa,"P",{});var ENe=s(jM);Rdr=r(ENe,"The model is set in evaluation mode by default using "),r1e=n(ENe,"CODE",{});var j7t=s(r1e);Pdr=r(j7t,"model.eval()"),j7t.forEach(t),Bdr=r(ENe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t1e=n(ENe,"CODE",{});var D7t=s(t1e);Idr=r(D7t,"model.train()"),D7t.forEach(t),ENe.forEach(t),Ndr=i(Fa),T(DM.$$.fragment,Fa),Fa.forEach(t),ul.forEach(t),lze=i(m),Ld=n(m,"H2",{class:!0});var gWe=s(Ld);GM=n(gWe,"A",{id:!0,class:!0,href:!0});var G7t=s(GM);a1e=n(G7t,"SPAN",{});var O7t=s(a1e);T(W8.$$.fragment,O7t),O7t.forEach(t),G7t.forEach(t),qdr=i(gWe),n1e=n(gWe,"SPAN",{});var V7t=s(n1e);jdr=r(V7t,"AutoModelForVisualQuestionAnswering"),V7t.forEach(t),gWe.forEach(t),ize=i(m),zo=n(m,"DIV",{class:!0});var pl=s(zo);T(H8.$$.fragment,pl),Ddr=i(pl),yd=n(pl,"P",{});var bte=s(yd);Gdr=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),YW=n(bte,"A",{href:!0});var X7t=s(YW);Odr=r(X7t,"from_pretrained()"),X7t.forEach(t),Vdr=r(bte," class method or the "),KW=n(bte,"A",{href:!0});var z7t=s(KW);Xdr=r(z7t,"from_config()"),z7t.forEach(t),zdr=r(bte,` class
method.`),bte.forEach(t),Qdr=i(pl),U8=n(pl,"P",{});var hWe=s(U8);Wdr=r(hWe,"This class cannot be instantiated directly using "),s1e=n(hWe,"CODE",{});var Q7t=s(s1e);Hdr=r(Q7t,"__init__()"),Q7t.forEach(t),Udr=r(hWe," (throws an error)."),hWe.forEach(t),Jdr=i(pl),Mt=n(pl,"DIV",{class:!0});var D7=s(Mt);T(J8.$$.fragment,D7),Ydr=i(D7),l1e=n(D7,"P",{});var W7t=s(l1e);Kdr=r(W7t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),W7t.forEach(t),Zdr=i(D7),xd=n(D7,"P",{});var vte=s(xd);ecr=r(vte,`Note:
Loading a model from its configuration file does `),i1e=n(vte,"STRONG",{});var H7t=s(i1e);ocr=r(H7t,"not"),H7t.forEach(t),rcr=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=n(vte,"A",{href:!0});var U7t=s(ZW);tcr=r(U7t,"from_pretrained()"),U7t.forEach(t),acr=r(vte," to load the model weights."),vte.forEach(t),ncr=i(D7),T(OM.$$.fragment,D7),D7.forEach(t),scr=i(pl),mo=n(pl,"DIV",{class:!0});var Ta=s(mo);T(Y8.$$.fragment,Ta),lcr=i(Ta),d1e=n(Ta,"P",{});var J7t=s(d1e);icr=r(J7t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),J7t.forEach(t),dcr=i(Ta),Ua=n(Ta,"P",{});var G7=s(Ua);ccr=r(G7,"The model class to instantiate is selected based on the "),c1e=n(G7,"CODE",{});var Y7t=s(c1e);mcr=r(Y7t,"model_type"),Y7t.forEach(t),fcr=r(G7,` property of the config object (either
passed as an argument or loaded from `),m1e=n(G7,"CODE",{});var K7t=s(m1e);gcr=r(K7t,"pretrained_model_name_or_path"),K7t.forEach(t),hcr=r(G7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f1e=n(G7,"CODE",{});var Z7t=s(f1e);ucr=r(Z7t,"pretrained_model_name_or_path"),Z7t.forEach(t),pcr=r(G7,":"),G7.forEach(t),_cr=i(Ta),g1e=n(Ta,"UL",{});var eLt=s(g1e);VM=n(eLt,"LI",{});var CNe=s(VM);h1e=n(CNe,"STRONG",{});var oLt=s(h1e);bcr=r(oLt,"vilt"),oLt.forEach(t),vcr=r(CNe," \u2014 "),eH=n(CNe,"A",{href:!0});var rLt=s(eH);Fcr=r(rLt,"ViltForQuestionAnswering"),rLt.forEach(t),Tcr=r(CNe," (ViLT model)"),CNe.forEach(t),eLt.forEach(t),Mcr=i(Ta),XM=n(Ta,"P",{});var wNe=s(XM);Ecr=r(wNe,"The model is set in evaluation mode by default using "),u1e=n(wNe,"CODE",{});var tLt=s(u1e);Ccr=r(tLt,"model.eval()"),tLt.forEach(t),wcr=r(wNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p1e=n(wNe,"CODE",{});var aLt=s(p1e);Acr=r(aLt,"model.train()"),aLt.forEach(t),wNe.forEach(t),Lcr=i(Ta),T(zM.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),dze=i(m),$d=n(m,"H2",{class:!0});var uWe=s($d);QM=n(uWe,"A",{id:!0,class:!0,href:!0});var nLt=s(QM);_1e=n(nLt,"SPAN",{});var sLt=s(_1e);T(K8.$$.fragment,sLt),sLt.forEach(t),nLt.forEach(t),ycr=i(uWe),b1e=n(uWe,"SPAN",{});var lLt=s(b1e);xcr=r(lLt,"AutoModelForAudioClassification"),lLt.forEach(t),uWe.forEach(t),cze=i(m),Qo=n(m,"DIV",{class:!0});var _l=s(Qo);T(Z8.$$.fragment,_l),$cr=i(_l),kd=n(_l,"P",{});var Fte=s(kd);kcr=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),oH=n(Fte,"A",{href:!0});var iLt=s(oH);Scr=r(iLt,"from_pretrained()"),iLt.forEach(t),Rcr=r(Fte," class method or the "),rH=n(Fte,"A",{href:!0});var dLt=s(rH);Pcr=r(dLt,"from_config()"),dLt.forEach(t),Bcr=r(Fte,` class
method.`),Fte.forEach(t),Icr=i(_l),e9=n(_l,"P",{});var pWe=s(e9);Ncr=r(pWe,"This class cannot be instantiated directly using "),v1e=n(pWe,"CODE",{});var cLt=s(v1e);qcr=r(cLt,"__init__()"),cLt.forEach(t),jcr=r(pWe," (throws an error)."),pWe.forEach(t),Dcr=i(_l),Et=n(_l,"DIV",{class:!0});var O7=s(Et);T(o9.$$.fragment,O7),Gcr=i(O7),F1e=n(O7,"P",{});var mLt=s(F1e);Ocr=r(mLt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),mLt.forEach(t),Vcr=i(O7),Sd=n(O7,"P",{});var Tte=s(Sd);Xcr=r(Tte,`Note:
Loading a model from its configuration file does `),T1e=n(Tte,"STRONG",{});var fLt=s(T1e);zcr=r(fLt,"not"),fLt.forEach(t),Qcr=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=n(Tte,"A",{href:!0});var gLt=s(tH);Wcr=r(gLt,"from_pretrained()"),gLt.forEach(t),Hcr=r(Tte," to load the model weights."),Tte.forEach(t),Ucr=i(O7),T(WM.$$.fragment,O7),O7.forEach(t),Jcr=i(_l),fo=n(_l,"DIV",{class:!0});var Ma=s(fo);T(r9.$$.fragment,Ma),Ycr=i(Ma),M1e=n(Ma,"P",{});var hLt=s(M1e);Kcr=r(hLt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),hLt.forEach(t),Zcr=i(Ma),Ja=n(Ma,"P",{});var V7=s(Ja);emr=r(V7,"The model class to instantiate is selected based on the "),E1e=n(V7,"CODE",{});var uLt=s(E1e);omr=r(uLt,"model_type"),uLt.forEach(t),rmr=r(V7,` property of the config object (either
passed as an argument or loaded from `),C1e=n(V7,"CODE",{});var pLt=s(C1e);tmr=r(pLt,"pretrained_model_name_or_path"),pLt.forEach(t),amr=r(V7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w1e=n(V7,"CODE",{});var _Lt=s(w1e);nmr=r(_Lt,"pretrained_model_name_or_path"),_Lt.forEach(t),smr=r(V7,":"),V7.forEach(t),lmr=i(Ma),Pe=n(Ma,"UL",{});var Qe=s(Pe);HM=n(Qe,"LI",{});var ANe=s(HM);A1e=n(ANe,"STRONG",{});var bLt=s(A1e);imr=r(bLt,"data2vec-audio"),bLt.forEach(t),dmr=r(ANe," \u2014 "),aH=n(ANe,"A",{href:!0});var vLt=s(aH);cmr=r(vLt,"Data2VecAudioForSequenceClassification"),vLt.forEach(t),mmr=r(ANe," (Data2VecAudio model)"),ANe.forEach(t),fmr=i(Qe),UM=n(Qe,"LI",{});var LNe=s(UM);L1e=n(LNe,"STRONG",{});var FLt=s(L1e);gmr=r(FLt,"hubert"),FLt.forEach(t),hmr=r(LNe," \u2014 "),nH=n(LNe,"A",{href:!0});var TLt=s(nH);umr=r(TLt,"HubertForSequenceClassification"),TLt.forEach(t),pmr=r(LNe," (Hubert model)"),LNe.forEach(t),_mr=i(Qe),JM=n(Qe,"LI",{});var yNe=s(JM);y1e=n(yNe,"STRONG",{});var MLt=s(y1e);bmr=r(MLt,"sew"),MLt.forEach(t),vmr=r(yNe," \u2014 "),sH=n(yNe,"A",{href:!0});var ELt=s(sH);Fmr=r(ELt,"SEWForSequenceClassification"),ELt.forEach(t),Tmr=r(yNe," (SEW model)"),yNe.forEach(t),Mmr=i(Qe),YM=n(Qe,"LI",{});var xNe=s(YM);x1e=n(xNe,"STRONG",{});var CLt=s(x1e);Emr=r(CLt,"sew-d"),CLt.forEach(t),Cmr=r(xNe," \u2014 "),lH=n(xNe,"A",{href:!0});var wLt=s(lH);wmr=r(wLt,"SEWDForSequenceClassification"),wLt.forEach(t),Amr=r(xNe," (SEW-D model)"),xNe.forEach(t),Lmr=i(Qe),KM=n(Qe,"LI",{});var $Ne=s(KM);$1e=n($Ne,"STRONG",{});var ALt=s($1e);ymr=r(ALt,"unispeech"),ALt.forEach(t),xmr=r($Ne," \u2014 "),iH=n($Ne,"A",{href:!0});var LLt=s(iH);$mr=r(LLt,"UniSpeechForSequenceClassification"),LLt.forEach(t),kmr=r($Ne," (UniSpeech model)"),$Ne.forEach(t),Smr=i(Qe),ZM=n(Qe,"LI",{});var kNe=s(ZM);k1e=n(kNe,"STRONG",{});var yLt=s(k1e);Rmr=r(yLt,"unispeech-sat"),yLt.forEach(t),Pmr=r(kNe," \u2014 "),dH=n(kNe,"A",{href:!0});var xLt=s(dH);Bmr=r(xLt,"UniSpeechSatForSequenceClassification"),xLt.forEach(t),Imr=r(kNe," (UniSpeechSat model)"),kNe.forEach(t),Nmr=i(Qe),e4=n(Qe,"LI",{});var SNe=s(e4);S1e=n(SNe,"STRONG",{});var $Lt=s(S1e);qmr=r($Lt,"wav2vec2"),$Lt.forEach(t),jmr=r(SNe," \u2014 "),cH=n(SNe,"A",{href:!0});var kLt=s(cH);Dmr=r(kLt,"Wav2Vec2ForSequenceClassification"),kLt.forEach(t),Gmr=r(SNe," (Wav2Vec2 model)"),SNe.forEach(t),Omr=i(Qe),o4=n(Qe,"LI",{});var RNe=s(o4);R1e=n(RNe,"STRONG",{});var SLt=s(R1e);Vmr=r(SLt,"wav2vec2-conformer"),SLt.forEach(t),Xmr=r(RNe," \u2014 "),mH=n(RNe,"A",{href:!0});var RLt=s(mH);zmr=r(RLt,"Wav2Vec2ConformerForSequenceClassification"),RLt.forEach(t),Qmr=r(RNe," (Wav2Vec2-Conformer model)"),RNe.forEach(t),Wmr=i(Qe),r4=n(Qe,"LI",{});var PNe=s(r4);P1e=n(PNe,"STRONG",{});var PLt=s(P1e);Hmr=r(PLt,"wavlm"),PLt.forEach(t),Umr=r(PNe," \u2014 "),fH=n(PNe,"A",{href:!0});var BLt=s(fH);Jmr=r(BLt,"WavLMForSequenceClassification"),BLt.forEach(t),Ymr=r(PNe," (WavLM model)"),PNe.forEach(t),Qe.forEach(t),Kmr=i(Ma),t4=n(Ma,"P",{});var BNe=s(t4);Zmr=r(BNe,"The model is set in evaluation mode by default using "),B1e=n(BNe,"CODE",{});var ILt=s(B1e);efr=r(ILt,"model.eval()"),ILt.forEach(t),ofr=r(BNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I1e=n(BNe,"CODE",{});var NLt=s(I1e);rfr=r(NLt,"model.train()"),NLt.forEach(t),BNe.forEach(t),tfr=i(Ma),T(a4.$$.fragment,Ma),Ma.forEach(t),_l.forEach(t),mze=i(m),Rd=n(m,"H2",{class:!0});var _We=s(Rd);n4=n(_We,"A",{id:!0,class:!0,href:!0});var qLt=s(n4);N1e=n(qLt,"SPAN",{});var jLt=s(N1e);T(t9.$$.fragment,jLt),jLt.forEach(t),qLt.forEach(t),afr=i(_We),q1e=n(_We,"SPAN",{});var DLt=s(q1e);nfr=r(DLt,"AutoModelForAudioFrameClassification"),DLt.forEach(t),_We.forEach(t),fze=i(m),Wo=n(m,"DIV",{class:!0});var bl=s(Wo);T(a9.$$.fragment,bl),sfr=i(bl),Pd=n(bl,"P",{});var Mte=s(Pd);lfr=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),gH=n(Mte,"A",{href:!0});var GLt=s(gH);ifr=r(GLt,"from_pretrained()"),GLt.forEach(t),dfr=r(Mte," class method or the "),hH=n(Mte,"A",{href:!0});var OLt=s(hH);cfr=r(OLt,"from_config()"),OLt.forEach(t),mfr=r(Mte,` class
method.`),Mte.forEach(t),ffr=i(bl),n9=n(bl,"P",{});var bWe=s(n9);gfr=r(bWe,"This class cannot be instantiated directly using "),j1e=n(bWe,"CODE",{});var VLt=s(j1e);hfr=r(VLt,"__init__()"),VLt.forEach(t),ufr=r(bWe," (throws an error)."),bWe.forEach(t),pfr=i(bl),Ct=n(bl,"DIV",{class:!0});var X7=s(Ct);T(s9.$$.fragment,X7),_fr=i(X7),D1e=n(X7,"P",{});var XLt=s(D1e);bfr=r(XLt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),XLt.forEach(t),vfr=i(X7),Bd=n(X7,"P",{});var Ete=s(Bd);Ffr=r(Ete,`Note:
Loading a model from its configuration file does `),G1e=n(Ete,"STRONG",{});var zLt=s(G1e);Tfr=r(zLt,"not"),zLt.forEach(t),Mfr=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=n(Ete,"A",{href:!0});var QLt=s(uH);Efr=r(QLt,"from_pretrained()"),QLt.forEach(t),Cfr=r(Ete," to load the model weights."),Ete.forEach(t),wfr=i(X7),T(s4.$$.fragment,X7),X7.forEach(t),Afr=i(bl),go=n(bl,"DIV",{class:!0});var Ea=s(go);T(l9.$$.fragment,Ea),Lfr=i(Ea),O1e=n(Ea,"P",{});var WLt=s(O1e);yfr=r(WLt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),WLt.forEach(t),xfr=i(Ea),Ya=n(Ea,"P",{});var z7=s(Ya);$fr=r(z7,"The model class to instantiate is selected based on the "),V1e=n(z7,"CODE",{});var HLt=s(V1e);kfr=r(HLt,"model_type"),HLt.forEach(t),Sfr=r(z7,` property of the config object (either
passed as an argument or loaded from `),X1e=n(z7,"CODE",{});var ULt=s(X1e);Rfr=r(ULt,"pretrained_model_name_or_path"),ULt.forEach(t),Pfr=r(z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z1e=n(z7,"CODE",{});var JLt=s(z1e);Bfr=r(JLt,"pretrained_model_name_or_path"),JLt.forEach(t),Ifr=r(z7,":"),z7.forEach(t),Nfr=i(Ea),rt=n(Ea,"UL",{});var vl=s(rt);l4=n(vl,"LI",{});var INe=s(l4);Q1e=n(INe,"STRONG",{});var YLt=s(Q1e);qfr=r(YLt,"data2vec-audio"),YLt.forEach(t),jfr=r(INe," \u2014 "),pH=n(INe,"A",{href:!0});var KLt=s(pH);Dfr=r(KLt,"Data2VecAudioForAudioFrameClassification"),KLt.forEach(t),Gfr=r(INe," (Data2VecAudio model)"),INe.forEach(t),Ofr=i(vl),i4=n(vl,"LI",{});var NNe=s(i4);W1e=n(NNe,"STRONG",{});var ZLt=s(W1e);Vfr=r(ZLt,"unispeech-sat"),ZLt.forEach(t),Xfr=r(NNe," \u2014 "),_H=n(NNe,"A",{href:!0});var eyt=s(_H);zfr=r(eyt,"UniSpeechSatForAudioFrameClassification"),eyt.forEach(t),Qfr=r(NNe," (UniSpeechSat model)"),NNe.forEach(t),Wfr=i(vl),d4=n(vl,"LI",{});var qNe=s(d4);H1e=n(qNe,"STRONG",{});var oyt=s(H1e);Hfr=r(oyt,"wav2vec2"),oyt.forEach(t),Ufr=r(qNe," \u2014 "),bH=n(qNe,"A",{href:!0});var ryt=s(bH);Jfr=r(ryt,"Wav2Vec2ForAudioFrameClassification"),ryt.forEach(t),Yfr=r(qNe," (Wav2Vec2 model)"),qNe.forEach(t),Kfr=i(vl),c4=n(vl,"LI",{});var jNe=s(c4);U1e=n(jNe,"STRONG",{});var tyt=s(U1e);Zfr=r(tyt,"wav2vec2-conformer"),tyt.forEach(t),egr=r(jNe," \u2014 "),vH=n(jNe,"A",{href:!0});var ayt=s(vH);ogr=r(ayt,"Wav2Vec2ConformerForAudioFrameClassification"),ayt.forEach(t),rgr=r(jNe," (Wav2Vec2-Conformer model)"),jNe.forEach(t),tgr=i(vl),m4=n(vl,"LI",{});var DNe=s(m4);J1e=n(DNe,"STRONG",{});var nyt=s(J1e);agr=r(nyt,"wavlm"),nyt.forEach(t),ngr=r(DNe," \u2014 "),FH=n(DNe,"A",{href:!0});var syt=s(FH);sgr=r(syt,"WavLMForAudioFrameClassification"),syt.forEach(t),lgr=r(DNe," (WavLM model)"),DNe.forEach(t),vl.forEach(t),igr=i(Ea),f4=n(Ea,"P",{});var GNe=s(f4);dgr=r(GNe,"The model is set in evaluation mode by default using "),Y1e=n(GNe,"CODE",{});var lyt=s(Y1e);cgr=r(lyt,"model.eval()"),lyt.forEach(t),mgr=r(GNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K1e=n(GNe,"CODE",{});var iyt=s(K1e);fgr=r(iyt,"model.train()"),iyt.forEach(t),GNe.forEach(t),ggr=i(Ea),T(g4.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),gze=i(m),Id=n(m,"H2",{class:!0});var vWe=s(Id);h4=n(vWe,"A",{id:!0,class:!0,href:!0});var dyt=s(h4);Z1e=n(dyt,"SPAN",{});var cyt=s(Z1e);T(i9.$$.fragment,cyt),cyt.forEach(t),dyt.forEach(t),hgr=i(vWe),eFe=n(vWe,"SPAN",{});var myt=s(eFe);ugr=r(myt,"AutoModelForCTC"),myt.forEach(t),vWe.forEach(t),hze=i(m),Ho=n(m,"DIV",{class:!0});var Fl=s(Ho);T(d9.$$.fragment,Fl),pgr=i(Fl),Nd=n(Fl,"P",{});var Cte=s(Nd);_gr=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),TH=n(Cte,"A",{href:!0});var fyt=s(TH);bgr=r(fyt,"from_pretrained()"),fyt.forEach(t),vgr=r(Cte," class method or the "),MH=n(Cte,"A",{href:!0});var gyt=s(MH);Fgr=r(gyt,"from_config()"),gyt.forEach(t),Tgr=r(Cte,` class
method.`),Cte.forEach(t),Mgr=i(Fl),c9=n(Fl,"P",{});var FWe=s(c9);Egr=r(FWe,"This class cannot be instantiated directly using "),oFe=n(FWe,"CODE",{});var hyt=s(oFe);Cgr=r(hyt,"__init__()"),hyt.forEach(t),wgr=r(FWe," (throws an error)."),FWe.forEach(t),Agr=i(Fl),wt=n(Fl,"DIV",{class:!0});var Q7=s(wt);T(m9.$$.fragment,Q7),Lgr=i(Q7),rFe=n(Q7,"P",{});var uyt=s(rFe);ygr=r(uyt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),uyt.forEach(t),xgr=i(Q7),qd=n(Q7,"P",{});var wte=s(qd);$gr=r(wte,`Note:
Loading a model from its configuration file does `),tFe=n(wte,"STRONG",{});var pyt=s(tFe);kgr=r(pyt,"not"),pyt.forEach(t),Sgr=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=n(wte,"A",{href:!0});var _yt=s(EH);Rgr=r(_yt,"from_pretrained()"),_yt.forEach(t),Pgr=r(wte," to load the model weights."),wte.forEach(t),Bgr=i(Q7),T(u4.$$.fragment,Q7),Q7.forEach(t),Igr=i(Fl),ho=n(Fl,"DIV",{class:!0});var Ca=s(ho);T(f9.$$.fragment,Ca),Ngr=i(Ca),aFe=n(Ca,"P",{});var byt=s(aFe);qgr=r(byt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),byt.forEach(t),jgr=i(Ca),Ka=n(Ca,"P",{});var W7=s(Ka);Dgr=r(W7,"The model class to instantiate is selected based on the "),nFe=n(W7,"CODE",{});var vyt=s(nFe);Ggr=r(vyt,"model_type"),vyt.forEach(t),Ogr=r(W7,` property of the config object (either
passed as an argument or loaded from `),sFe=n(W7,"CODE",{});var Fyt=s(sFe);Vgr=r(Fyt,"pretrained_model_name_or_path"),Fyt.forEach(t),Xgr=r(W7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lFe=n(W7,"CODE",{});var Tyt=s(lFe);zgr=r(Tyt,"pretrained_model_name_or_path"),Tyt.forEach(t),Qgr=r(W7,":"),W7.forEach(t),Wgr=i(Ca),Le=n(Ca,"UL",{});var Be=s(Le);p4=n(Be,"LI",{});var ONe=s(p4);iFe=n(ONe,"STRONG",{});var Myt=s(iFe);Hgr=r(Myt,"data2vec-audio"),Myt.forEach(t),Ugr=r(ONe," \u2014 "),CH=n(ONe,"A",{href:!0});var Eyt=s(CH);Jgr=r(Eyt,"Data2VecAudioForCTC"),Eyt.forEach(t),Ygr=r(ONe," (Data2VecAudio model)"),ONe.forEach(t),Kgr=i(Be),_4=n(Be,"LI",{});var VNe=s(_4);dFe=n(VNe,"STRONG",{});var Cyt=s(dFe);Zgr=r(Cyt,"hubert"),Cyt.forEach(t),ehr=r(VNe," \u2014 "),wH=n(VNe,"A",{href:!0});var wyt=s(wH);ohr=r(wyt,"HubertForCTC"),wyt.forEach(t),rhr=r(VNe," (Hubert model)"),VNe.forEach(t),thr=i(Be),b4=n(Be,"LI",{});var XNe=s(b4);cFe=n(XNe,"STRONG",{});var Ayt=s(cFe);ahr=r(Ayt,"mctct"),Ayt.forEach(t),nhr=r(XNe," \u2014 "),AH=n(XNe,"A",{href:!0});var Lyt=s(AH);shr=r(Lyt,"MCTCTForCTC"),Lyt.forEach(t),lhr=r(XNe," (M-CTC-T model)"),XNe.forEach(t),ihr=i(Be),v4=n(Be,"LI",{});var zNe=s(v4);mFe=n(zNe,"STRONG",{});var yyt=s(mFe);dhr=r(yyt,"sew"),yyt.forEach(t),chr=r(zNe," \u2014 "),LH=n(zNe,"A",{href:!0});var xyt=s(LH);mhr=r(xyt,"SEWForCTC"),xyt.forEach(t),fhr=r(zNe," (SEW model)"),zNe.forEach(t),ghr=i(Be),F4=n(Be,"LI",{});var QNe=s(F4);fFe=n(QNe,"STRONG",{});var $yt=s(fFe);hhr=r($yt,"sew-d"),$yt.forEach(t),uhr=r(QNe," \u2014 "),yH=n(QNe,"A",{href:!0});var kyt=s(yH);phr=r(kyt,"SEWDForCTC"),kyt.forEach(t),_hr=r(QNe," (SEW-D model)"),QNe.forEach(t),bhr=i(Be),T4=n(Be,"LI",{});var WNe=s(T4);gFe=n(WNe,"STRONG",{});var Syt=s(gFe);vhr=r(Syt,"unispeech"),Syt.forEach(t),Fhr=r(WNe," \u2014 "),xH=n(WNe,"A",{href:!0});var Ryt=s(xH);Thr=r(Ryt,"UniSpeechForCTC"),Ryt.forEach(t),Mhr=r(WNe," (UniSpeech model)"),WNe.forEach(t),Ehr=i(Be),M4=n(Be,"LI",{});var HNe=s(M4);hFe=n(HNe,"STRONG",{});var Pyt=s(hFe);Chr=r(Pyt,"unispeech-sat"),Pyt.forEach(t),whr=r(HNe," \u2014 "),$H=n(HNe,"A",{href:!0});var Byt=s($H);Ahr=r(Byt,"UniSpeechSatForCTC"),Byt.forEach(t),Lhr=r(HNe," (UniSpeechSat model)"),HNe.forEach(t),yhr=i(Be),E4=n(Be,"LI",{});var UNe=s(E4);uFe=n(UNe,"STRONG",{});var Iyt=s(uFe);xhr=r(Iyt,"wav2vec2"),Iyt.forEach(t),$hr=r(UNe," \u2014 "),kH=n(UNe,"A",{href:!0});var Nyt=s(kH);khr=r(Nyt,"Wav2Vec2ForCTC"),Nyt.forEach(t),Shr=r(UNe," (Wav2Vec2 model)"),UNe.forEach(t),Rhr=i(Be),C4=n(Be,"LI",{});var JNe=s(C4);pFe=n(JNe,"STRONG",{});var qyt=s(pFe);Phr=r(qyt,"wav2vec2-conformer"),qyt.forEach(t),Bhr=r(JNe," \u2014 "),SH=n(JNe,"A",{href:!0});var jyt=s(SH);Ihr=r(jyt,"Wav2Vec2ConformerForCTC"),jyt.forEach(t),Nhr=r(JNe," (Wav2Vec2-Conformer model)"),JNe.forEach(t),qhr=i(Be),w4=n(Be,"LI",{});var YNe=s(w4);_Fe=n(YNe,"STRONG",{});var Dyt=s(_Fe);jhr=r(Dyt,"wavlm"),Dyt.forEach(t),Dhr=r(YNe," \u2014 "),RH=n(YNe,"A",{href:!0});var Gyt=s(RH);Ghr=r(Gyt,"WavLMForCTC"),Gyt.forEach(t),Ohr=r(YNe," (WavLM model)"),YNe.forEach(t),Be.forEach(t),Vhr=i(Ca),A4=n(Ca,"P",{});var KNe=s(A4);Xhr=r(KNe,"The model is set in evaluation mode by default using "),bFe=n(KNe,"CODE",{});var Oyt=s(bFe);zhr=r(Oyt,"model.eval()"),Oyt.forEach(t),Qhr=r(KNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vFe=n(KNe,"CODE",{});var Vyt=s(vFe);Whr=r(Vyt,"model.train()"),Vyt.forEach(t),KNe.forEach(t),Hhr=i(Ca),T(L4.$$.fragment,Ca),Ca.forEach(t),Fl.forEach(t),uze=i(m),jd=n(m,"H2",{class:!0});var TWe=s(jd);y4=n(TWe,"A",{id:!0,class:!0,href:!0});var Xyt=s(y4);FFe=n(Xyt,"SPAN",{});var zyt=s(FFe);T(g9.$$.fragment,zyt),zyt.forEach(t),Xyt.forEach(t),Uhr=i(TWe),TFe=n(TWe,"SPAN",{});var Qyt=s(TFe);Jhr=r(Qyt,"AutoModelForSpeechSeq2Seq"),Qyt.forEach(t),TWe.forEach(t),pze=i(m),Uo=n(m,"DIV",{class:!0});var Tl=s(Uo);T(h9.$$.fragment,Tl),Yhr=i(Tl),Dd=n(Tl,"P",{});var Ate=s(Dd);Khr=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PH=n(Ate,"A",{href:!0});var Wyt=s(PH);Zhr=r(Wyt,"from_pretrained()"),Wyt.forEach(t),eur=r(Ate," class method or the "),BH=n(Ate,"A",{href:!0});var Hyt=s(BH);our=r(Hyt,"from_config()"),Hyt.forEach(t),rur=r(Ate,` class
method.`),Ate.forEach(t),tur=i(Tl),u9=n(Tl,"P",{});var MWe=s(u9);aur=r(MWe,"This class cannot be instantiated directly using "),MFe=n(MWe,"CODE",{});var Uyt=s(MFe);nur=r(Uyt,"__init__()"),Uyt.forEach(t),sur=r(MWe," (throws an error)."),MWe.forEach(t),lur=i(Tl),At=n(Tl,"DIV",{class:!0});var H7=s(At);T(p9.$$.fragment,H7),iur=i(H7),EFe=n(H7,"P",{});var Jyt=s(EFe);dur=r(Jyt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Jyt.forEach(t),cur=i(H7),Gd=n(H7,"P",{});var Lte=s(Gd);mur=r(Lte,`Note:
Loading a model from its configuration file does `),CFe=n(Lte,"STRONG",{});var Yyt=s(CFe);fur=r(Yyt,"not"),Yyt.forEach(t),gur=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=n(Lte,"A",{href:!0});var Kyt=s(IH);hur=r(Kyt,"from_pretrained()"),Kyt.forEach(t),uur=r(Lte," to load the model weights."),Lte.forEach(t),pur=i(H7),T(x4.$$.fragment,H7),H7.forEach(t),_ur=i(Tl),uo=n(Tl,"DIV",{class:!0});var wa=s(uo);T(_9.$$.fragment,wa),bur=i(wa),wFe=n(wa,"P",{});var Zyt=s(wFe);vur=r(Zyt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Zyt.forEach(t),Fur=i(wa),Za=n(wa,"P",{});var U7=s(Za);Tur=r(U7,"The model class to instantiate is selected based on the "),AFe=n(U7,"CODE",{});var e8t=s(AFe);Mur=r(e8t,"model_type"),e8t.forEach(t),Eur=r(U7,` property of the config object (either
passed as an argument or loaded from `),LFe=n(U7,"CODE",{});var o8t=s(LFe);Cur=r(o8t,"pretrained_model_name_or_path"),o8t.forEach(t),wur=r(U7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=n(U7,"CODE",{});var r8t=s(yFe);Aur=r(r8t,"pretrained_model_name_or_path"),r8t.forEach(t),Lur=r(U7,":"),U7.forEach(t),yur=i(wa),b9=n(wa,"UL",{});var EWe=s(b9);$4=n(EWe,"LI",{});var ZNe=s($4);xFe=n(ZNe,"STRONG",{});var t8t=s(xFe);xur=r(t8t,"speech-encoder-decoder"),t8t.forEach(t),$ur=r(ZNe," \u2014 "),NH=n(ZNe,"A",{href:!0});var a8t=s(NH);kur=r(a8t,"SpeechEncoderDecoderModel"),a8t.forEach(t),Sur=r(ZNe," (Speech Encoder decoder model)"),ZNe.forEach(t),Rur=i(EWe),k4=n(EWe,"LI",{});var eqe=s(k4);$Fe=n(eqe,"STRONG",{});var n8t=s($Fe);Pur=r(n8t,"speech_to_text"),n8t.forEach(t),Bur=r(eqe," \u2014 "),qH=n(eqe,"A",{href:!0});var s8t=s(qH);Iur=r(s8t,"Speech2TextForConditionalGeneration"),s8t.forEach(t),Nur=r(eqe," (Speech2Text model)"),eqe.forEach(t),EWe.forEach(t),qur=i(wa),S4=n(wa,"P",{});var oqe=s(S4);jur=r(oqe,"The model is set in evaluation mode by default using "),kFe=n(oqe,"CODE",{});var l8t=s(kFe);Dur=r(l8t,"model.eval()"),l8t.forEach(t),Gur=r(oqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SFe=n(oqe,"CODE",{});var i8t=s(SFe);Our=r(i8t,"model.train()"),i8t.forEach(t),oqe.forEach(t),Vur=i(wa),T(R4.$$.fragment,wa),wa.forEach(t),Tl.forEach(t),_ze=i(m),Od=n(m,"H2",{class:!0});var CWe=s(Od);P4=n(CWe,"A",{id:!0,class:!0,href:!0});var d8t=s(P4);RFe=n(d8t,"SPAN",{});var c8t=s(RFe);T(v9.$$.fragment,c8t),c8t.forEach(t),d8t.forEach(t),Xur=i(CWe),PFe=n(CWe,"SPAN",{});var m8t=s(PFe);zur=r(m8t,"AutoModelForAudioXVector"),m8t.forEach(t),CWe.forEach(t),bze=i(m),Jo=n(m,"DIV",{class:!0});var Ml=s(Jo);T(F9.$$.fragment,Ml),Qur=i(Ml),Vd=n(Ml,"P",{});var yte=s(Vd);Wur=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jH=n(yte,"A",{href:!0});var f8t=s(jH);Hur=r(f8t,"from_pretrained()"),f8t.forEach(t),Uur=r(yte," class method or the "),DH=n(yte,"A",{href:!0});var g8t=s(DH);Jur=r(g8t,"from_config()"),g8t.forEach(t),Yur=r(yte,` class
method.`),yte.forEach(t),Kur=i(Ml),T9=n(Ml,"P",{});var wWe=s(T9);Zur=r(wWe,"This class cannot be instantiated directly using "),BFe=n(wWe,"CODE",{});var h8t=s(BFe);epr=r(h8t,"__init__()"),h8t.forEach(t),opr=r(wWe," (throws an error)."),wWe.forEach(t),rpr=i(Ml),Lt=n(Ml,"DIV",{class:!0});var J7=s(Lt);T(M9.$$.fragment,J7),tpr=i(J7),IFe=n(J7,"P",{});var u8t=s(IFe);apr=r(u8t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),u8t.forEach(t),npr=i(J7),Xd=n(J7,"P",{});var xte=s(Xd);spr=r(xte,`Note:
Loading a model from its configuration file does `),NFe=n(xte,"STRONG",{});var p8t=s(NFe);lpr=r(p8t,"not"),p8t.forEach(t),ipr=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=n(xte,"A",{href:!0});var _8t=s(GH);dpr=r(_8t,"from_pretrained()"),_8t.forEach(t),cpr=r(xte," to load the model weights."),xte.forEach(t),mpr=i(J7),T(B4.$$.fragment,J7),J7.forEach(t),fpr=i(Ml),po=n(Ml,"DIV",{class:!0});var Aa=s(po);T(E9.$$.fragment,Aa),gpr=i(Aa),qFe=n(Aa,"P",{});var b8t=s(qFe);hpr=r(b8t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),b8t.forEach(t),upr=i(Aa),en=n(Aa,"P",{});var Y7=s(en);ppr=r(Y7,"The model class to instantiate is selected based on the "),jFe=n(Y7,"CODE",{});var v8t=s(jFe);_pr=r(v8t,"model_type"),v8t.forEach(t),bpr=r(Y7,` property of the config object (either
passed as an argument or loaded from `),DFe=n(Y7,"CODE",{});var F8t=s(DFe);vpr=r(F8t,"pretrained_model_name_or_path"),F8t.forEach(t),Fpr=r(Y7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GFe=n(Y7,"CODE",{});var T8t=s(GFe);Tpr=r(T8t,"pretrained_model_name_or_path"),T8t.forEach(t),Mpr=r(Y7,":"),Y7.forEach(t),Epr=i(Aa),tt=n(Aa,"UL",{});var El=s(tt);I4=n(El,"LI",{});var rqe=s(I4);OFe=n(rqe,"STRONG",{});var M8t=s(OFe);Cpr=r(M8t,"data2vec-audio"),M8t.forEach(t),wpr=r(rqe," \u2014 "),OH=n(rqe,"A",{href:!0});var E8t=s(OH);Apr=r(E8t,"Data2VecAudioForXVector"),E8t.forEach(t),Lpr=r(rqe," (Data2VecAudio model)"),rqe.forEach(t),ypr=i(El),N4=n(El,"LI",{});var tqe=s(N4);VFe=n(tqe,"STRONG",{});var C8t=s(VFe);xpr=r(C8t,"unispeech-sat"),C8t.forEach(t),$pr=r(tqe," \u2014 "),VH=n(tqe,"A",{href:!0});var w8t=s(VH);kpr=r(w8t,"UniSpeechSatForXVector"),w8t.forEach(t),Spr=r(tqe," (UniSpeechSat model)"),tqe.forEach(t),Rpr=i(El),q4=n(El,"LI",{});var aqe=s(q4);XFe=n(aqe,"STRONG",{});var A8t=s(XFe);Ppr=r(A8t,"wav2vec2"),A8t.forEach(t),Bpr=r(aqe," \u2014 "),XH=n(aqe,"A",{href:!0});var L8t=s(XH);Ipr=r(L8t,"Wav2Vec2ForXVector"),L8t.forEach(t),Npr=r(aqe," (Wav2Vec2 model)"),aqe.forEach(t),qpr=i(El),j4=n(El,"LI",{});var nqe=s(j4);zFe=n(nqe,"STRONG",{});var y8t=s(zFe);jpr=r(y8t,"wav2vec2-conformer"),y8t.forEach(t),Dpr=r(nqe," \u2014 "),zH=n(nqe,"A",{href:!0});var x8t=s(zH);Gpr=r(x8t,"Wav2Vec2ConformerForXVector"),x8t.forEach(t),Opr=r(nqe," (Wav2Vec2-Conformer model)"),nqe.forEach(t),Vpr=i(El),D4=n(El,"LI",{});var sqe=s(D4);QFe=n(sqe,"STRONG",{});var $8t=s(QFe);Xpr=r($8t,"wavlm"),$8t.forEach(t),zpr=r(sqe," \u2014 "),QH=n(sqe,"A",{href:!0});var k8t=s(QH);Qpr=r(k8t,"WavLMForXVector"),k8t.forEach(t),Wpr=r(sqe," (WavLM model)"),sqe.forEach(t),El.forEach(t),Hpr=i(Aa),G4=n(Aa,"P",{});var lqe=s(G4);Upr=r(lqe,"The model is set in evaluation mode by default using "),WFe=n(lqe,"CODE",{});var S8t=s(WFe);Jpr=r(S8t,"model.eval()"),S8t.forEach(t),Ypr=r(lqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),HFe=n(lqe,"CODE",{});var R8t=s(HFe);Kpr=r(R8t,"model.train()"),R8t.forEach(t),lqe.forEach(t),Zpr=i(Aa),T(O4.$$.fragment,Aa),Aa.forEach(t),Ml.forEach(t),vze=i(m),zd=n(m,"H2",{class:!0});var AWe=s(zd);V4=n(AWe,"A",{id:!0,class:!0,href:!0});var P8t=s(V4);UFe=n(P8t,"SPAN",{});var B8t=s(UFe);T(C9.$$.fragment,B8t),B8t.forEach(t),P8t.forEach(t),e_r=i(AWe),JFe=n(AWe,"SPAN",{});var I8t=s(JFe);o_r=r(I8t,"AutoModelForMaskedImageModeling"),I8t.forEach(t),AWe.forEach(t),Fze=i(m),Yo=n(m,"DIV",{class:!0});var Cl=s(Yo);T(w9.$$.fragment,Cl),r_r=i(Cl),Qd=n(Cl,"P",{});var $te=s(Qd);t_r=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),WH=n($te,"A",{href:!0});var N8t=s(WH);a_r=r(N8t,"from_pretrained()"),N8t.forEach(t),n_r=r($te," class method or the "),HH=n($te,"A",{href:!0});var q8t=s(HH);s_r=r(q8t,"from_config()"),q8t.forEach(t),l_r=r($te,` class
method.`),$te.forEach(t),i_r=i(Cl),A9=n(Cl,"P",{});var LWe=s(A9);d_r=r(LWe,"This class cannot be instantiated directly using "),YFe=n(LWe,"CODE",{});var j8t=s(YFe);c_r=r(j8t,"__init__()"),j8t.forEach(t),m_r=r(LWe," (throws an error)."),LWe.forEach(t),f_r=i(Cl),yt=n(Cl,"DIV",{class:!0});var K7=s(yt);T(L9.$$.fragment,K7),g_r=i(K7),KFe=n(K7,"P",{});var D8t=s(KFe);h_r=r(D8t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),D8t.forEach(t),u_r=i(K7),Wd=n(K7,"P",{});var kte=s(Wd);p_r=r(kte,`Note:
Loading a model from its configuration file does `),ZFe=n(kte,"STRONG",{});var G8t=s(ZFe);__r=r(G8t,"not"),G8t.forEach(t),b_r=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=n(kte,"A",{href:!0});var O8t=s(UH);v_r=r(O8t,"from_pretrained()"),O8t.forEach(t),F_r=r(kte," to load the model weights."),kte.forEach(t),T_r=i(K7),T(X4.$$.fragment,K7),K7.forEach(t),M_r=i(Cl),_o=n(Cl,"DIV",{class:!0});var La=s(_o);T(y9.$$.fragment,La),E_r=i(La),eTe=n(La,"P",{});var V8t=s(eTe);C_r=r(V8t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),V8t.forEach(t),w_r=i(La),on=n(La,"P",{});var Z7=s(on);A_r=r(Z7,"The model class to instantiate is selected based on the "),oTe=n(Z7,"CODE",{});var X8t=s(oTe);L_r=r(X8t,"model_type"),X8t.forEach(t),y_r=r(Z7,` property of the config object (either
passed as an argument or loaded from `),rTe=n(Z7,"CODE",{});var z8t=s(rTe);x_r=r(z8t,"pretrained_model_name_or_path"),z8t.forEach(t),$_r=r(Z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=n(Z7,"CODE",{});var Q8t=s(tTe);k_r=r(Q8t,"pretrained_model_name_or_path"),Q8t.forEach(t),S_r=r(Z7,":"),Z7.forEach(t),R_r=i(La),Hd=n(La,"UL",{});var Ste=s(Hd);z4=n(Ste,"LI",{});var iqe=s(z4);aTe=n(iqe,"STRONG",{});var W8t=s(aTe);P_r=r(W8t,"deit"),W8t.forEach(t),B_r=r(iqe," \u2014 "),JH=n(iqe,"A",{href:!0});var H8t=s(JH);I_r=r(H8t,"DeiTForMaskedImageModeling"),H8t.forEach(t),N_r=r(iqe," (DeiT model)"),iqe.forEach(t),q_r=i(Ste),Q4=n(Ste,"LI",{});var dqe=s(Q4);nTe=n(dqe,"STRONG",{});var U8t=s(nTe);j_r=r(U8t,"swin"),U8t.forEach(t),D_r=r(dqe," \u2014 "),YH=n(dqe,"A",{href:!0});var J8t=s(YH);G_r=r(J8t,"SwinForMaskedImageModeling"),J8t.forEach(t),O_r=r(dqe," (Swin Transformer model)"),dqe.forEach(t),V_r=i(Ste),W4=n(Ste,"LI",{});var cqe=s(W4);sTe=n(cqe,"STRONG",{});var Y8t=s(sTe);X_r=r(Y8t,"vit"),Y8t.forEach(t),z_r=r(cqe," \u2014 "),KH=n(cqe,"A",{href:!0});var K8t=s(KH);Q_r=r(K8t,"ViTForMaskedImageModeling"),K8t.forEach(t),W_r=r(cqe," (ViT model)"),cqe.forEach(t),Ste.forEach(t),H_r=i(La),H4=n(La,"P",{});var mqe=s(H4);U_r=r(mqe,"The model is set in evaluation mode by default using "),lTe=n(mqe,"CODE",{});var Z8t=s(lTe);J_r=r(Z8t,"model.eval()"),Z8t.forEach(t),Y_r=r(mqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iTe=n(mqe,"CODE",{});var e9t=s(iTe);K_r=r(e9t,"model.train()"),e9t.forEach(t),mqe.forEach(t),Z_r=i(La),T(U4.$$.fragment,La),La.forEach(t),Cl.forEach(t),Tze=i(m),Ud=n(m,"H2",{class:!0});var yWe=s(Ud);J4=n(yWe,"A",{id:!0,class:!0,href:!0});var o9t=s(J4);dTe=n(o9t,"SPAN",{});var r9t=s(dTe);T(x9.$$.fragment,r9t),r9t.forEach(t),o9t.forEach(t),e2r=i(yWe),cTe=n(yWe,"SPAN",{});var t9t=s(cTe);o2r=r(t9t,"AutoModelForObjectDetection"),t9t.forEach(t),yWe.forEach(t),Mze=i(m),Ko=n(m,"DIV",{class:!0});var wl=s(Ko);T($9.$$.fragment,wl),r2r=i(wl),Jd=n(wl,"P",{});var Rte=s(Jd);t2r=r(Rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),ZH=n(Rte,"A",{href:!0});var a9t=s(ZH);a2r=r(a9t,"from_pretrained()"),a9t.forEach(t),n2r=r(Rte," class method or the "),eU=n(Rte,"A",{href:!0});var n9t=s(eU);s2r=r(n9t,"from_config()"),n9t.forEach(t),l2r=r(Rte,` class
method.`),Rte.forEach(t),i2r=i(wl),k9=n(wl,"P",{});var xWe=s(k9);d2r=r(xWe,"This class cannot be instantiated directly using "),mTe=n(xWe,"CODE",{});var s9t=s(mTe);c2r=r(s9t,"__init__()"),s9t.forEach(t),m2r=r(xWe," (throws an error)."),xWe.forEach(t),f2r=i(wl),xt=n(wl,"DIV",{class:!0});var eL=s(xt);T(S9.$$.fragment,eL),g2r=i(eL),fTe=n(eL,"P",{});var l9t=s(fTe);h2r=r(l9t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),l9t.forEach(t),u2r=i(eL),Yd=n(eL,"P",{});var Pte=s(Yd);p2r=r(Pte,`Note:
Loading a model from its configuration file does `),gTe=n(Pte,"STRONG",{});var i9t=s(gTe);_2r=r(i9t,"not"),i9t.forEach(t),b2r=r(Pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(Pte,"A",{href:!0});var d9t=s(oU);v2r=r(d9t,"from_pretrained()"),d9t.forEach(t),F2r=r(Pte," to load the model weights."),Pte.forEach(t),T2r=i(eL),T(Y4.$$.fragment,eL),eL.forEach(t),M2r=i(wl),bo=n(wl,"DIV",{class:!0});var ya=s(bo);T(R9.$$.fragment,ya),E2r=i(ya),hTe=n(ya,"P",{});var c9t=s(hTe);C2r=r(c9t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),c9t.forEach(t),w2r=i(ya),rn=n(ya,"P",{});var oL=s(rn);A2r=r(oL,"The model class to instantiate is selected based on the "),uTe=n(oL,"CODE",{});var m9t=s(uTe);L2r=r(m9t,"model_type"),m9t.forEach(t),y2r=r(oL,` property of the config object (either
passed as an argument or loaded from `),pTe=n(oL,"CODE",{});var f9t=s(pTe);x2r=r(f9t,"pretrained_model_name_or_path"),f9t.forEach(t),$2r=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Te=n(oL,"CODE",{});var g9t=s(_Te);k2r=r(g9t,"pretrained_model_name_or_path"),g9t.forEach(t),S2r=r(oL,":"),oL.forEach(t),R2r=i(ya),P9=n(ya,"UL",{});var $We=s(P9);K4=n($We,"LI",{});var fqe=s(K4);bTe=n(fqe,"STRONG",{});var h9t=s(bTe);P2r=r(h9t,"detr"),h9t.forEach(t),B2r=r(fqe," \u2014 "),rU=n(fqe,"A",{href:!0});var u9t=s(rU);I2r=r(u9t,"DetrForObjectDetection"),u9t.forEach(t),N2r=r(fqe," (DETR model)"),fqe.forEach(t),q2r=i($We),Z4=n($We,"LI",{});var gqe=s(Z4);vTe=n(gqe,"STRONG",{});var p9t=s(vTe);j2r=r(p9t,"yolos"),p9t.forEach(t),D2r=r(gqe," \u2014 "),tU=n(gqe,"A",{href:!0});var _9t=s(tU);G2r=r(_9t,"YolosForObjectDetection"),_9t.forEach(t),O2r=r(gqe," (YOLOS model)"),gqe.forEach(t),$We.forEach(t),V2r=i(ya),eE=n(ya,"P",{});var hqe=s(eE);X2r=r(hqe,"The model is set in evaluation mode by default using "),FTe=n(hqe,"CODE",{});var b9t=s(FTe);z2r=r(b9t,"model.eval()"),b9t.forEach(t),Q2r=r(hqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),TTe=n(hqe,"CODE",{});var v9t=s(TTe);W2r=r(v9t,"model.train()"),v9t.forEach(t),hqe.forEach(t),H2r=i(ya),T(oE.$$.fragment,ya),ya.forEach(t),wl.forEach(t),Eze=i(m),Kd=n(m,"H2",{class:!0});var kWe=s(Kd);rE=n(kWe,"A",{id:!0,class:!0,href:!0});var F9t=s(rE);MTe=n(F9t,"SPAN",{});var T9t=s(MTe);T(B9.$$.fragment,T9t),T9t.forEach(t),F9t.forEach(t),U2r=i(kWe),ETe=n(kWe,"SPAN",{});var M9t=s(ETe);J2r=r(M9t,"AutoModelForImageSegmentation"),M9t.forEach(t),kWe.forEach(t),Cze=i(m),Zo=n(m,"DIV",{class:!0});var Al=s(Zo);T(I9.$$.fragment,Al),Y2r=i(Al),Zd=n(Al,"P",{});var Bte=s(Zd);K2r=r(Bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),aU=n(Bte,"A",{href:!0});var E9t=s(aU);Z2r=r(E9t,"from_pretrained()"),E9t.forEach(t),ebr=r(Bte," class method or the "),nU=n(Bte,"A",{href:!0});var C9t=s(nU);obr=r(C9t,"from_config()"),C9t.forEach(t),rbr=r(Bte,` class
method.`),Bte.forEach(t),tbr=i(Al),N9=n(Al,"P",{});var SWe=s(N9);abr=r(SWe,"This class cannot be instantiated directly using "),CTe=n(SWe,"CODE",{});var w9t=s(CTe);nbr=r(w9t,"__init__()"),w9t.forEach(t),sbr=r(SWe," (throws an error)."),SWe.forEach(t),lbr=i(Al),$t=n(Al,"DIV",{class:!0});var rL=s($t);T(q9.$$.fragment,rL),ibr=i(rL),wTe=n(rL,"P",{});var A9t=s(wTe);dbr=r(A9t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),A9t.forEach(t),cbr=i(rL),ec=n(rL,"P",{});var Ite=s(ec);mbr=r(Ite,`Note:
Loading a model from its configuration file does `),ATe=n(Ite,"STRONG",{});var L9t=s(ATe);fbr=r(L9t,"not"),L9t.forEach(t),gbr=r(Ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=n(Ite,"A",{href:!0});var y9t=s(sU);hbr=r(y9t,"from_pretrained()"),y9t.forEach(t),ubr=r(Ite," to load the model weights."),Ite.forEach(t),pbr=i(rL),T(tE.$$.fragment,rL),rL.forEach(t),_br=i(Al),vo=n(Al,"DIV",{class:!0});var xa=s(vo);T(j9.$$.fragment,xa),bbr=i(xa),LTe=n(xa,"P",{});var x9t=s(LTe);vbr=r(x9t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),x9t.forEach(t),Fbr=i(xa),tn=n(xa,"P",{});var tL=s(tn);Tbr=r(tL,"The model class to instantiate is selected based on the "),yTe=n(tL,"CODE",{});var $9t=s(yTe);Mbr=r($9t,"model_type"),$9t.forEach(t),Ebr=r(tL,` property of the config object (either
passed as an argument or loaded from `),xTe=n(tL,"CODE",{});var k9t=s(xTe);Cbr=r(k9t,"pretrained_model_name_or_path"),k9t.forEach(t),wbr=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Te=n(tL,"CODE",{});var S9t=s($Te);Abr=r(S9t,"pretrained_model_name_or_path"),S9t.forEach(t),Lbr=r(tL,":"),tL.forEach(t),ybr=i(xa),kTe=n(xa,"UL",{});var R9t=s(kTe);aE=n(R9t,"LI",{});var uqe=s(aE);STe=n(uqe,"STRONG",{});var P9t=s(STe);xbr=r(P9t,"detr"),P9t.forEach(t),$br=r(uqe," \u2014 "),lU=n(uqe,"A",{href:!0});var B9t=s(lU);kbr=r(B9t,"DetrForSegmentation"),B9t.forEach(t),Sbr=r(uqe," (DETR model)"),uqe.forEach(t),R9t.forEach(t),Rbr=i(xa),nE=n(xa,"P",{});var pqe=s(nE);Pbr=r(pqe,"The model is set in evaluation mode by default using "),RTe=n(pqe,"CODE",{});var I9t=s(RTe);Bbr=r(I9t,"model.eval()"),I9t.forEach(t),Ibr=r(pqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PTe=n(pqe,"CODE",{});var N9t=s(PTe);Nbr=r(N9t,"model.train()"),N9t.forEach(t),pqe.forEach(t),qbr=i(xa),T(sE.$$.fragment,xa),xa.forEach(t),Al.forEach(t),wze=i(m),oc=n(m,"H2",{class:!0});var RWe=s(oc);lE=n(RWe,"A",{id:!0,class:!0,href:!0});var q9t=s(lE);BTe=n(q9t,"SPAN",{});var j9t=s(BTe);T(D9.$$.fragment,j9t),j9t.forEach(t),q9t.forEach(t),jbr=i(RWe),ITe=n(RWe,"SPAN",{});var D9t=s(ITe);Dbr=r(D9t,"AutoModelForSemanticSegmentation"),D9t.forEach(t),RWe.forEach(t),Aze=i(m),er=n(m,"DIV",{class:!0});var Ll=s(er);T(G9.$$.fragment,Ll),Gbr=i(Ll),rc=n(Ll,"P",{});var Nte=s(rc);Obr=r(Nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),iU=n(Nte,"A",{href:!0});var G9t=s(iU);Vbr=r(G9t,"from_pretrained()"),G9t.forEach(t),Xbr=r(Nte," class method or the "),dU=n(Nte,"A",{href:!0});var O9t=s(dU);zbr=r(O9t,"from_config()"),O9t.forEach(t),Qbr=r(Nte,` class
method.`),Nte.forEach(t),Wbr=i(Ll),O9=n(Ll,"P",{});var PWe=s(O9);Hbr=r(PWe,"This class cannot be instantiated directly using "),NTe=n(PWe,"CODE",{});var V9t=s(NTe);Ubr=r(V9t,"__init__()"),V9t.forEach(t),Jbr=r(PWe," (throws an error)."),PWe.forEach(t),Ybr=i(Ll),kt=n(Ll,"DIV",{class:!0});var aL=s(kt);T(V9.$$.fragment,aL),Kbr=i(aL),qTe=n(aL,"P",{});var X9t=s(qTe);Zbr=r(X9t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),X9t.forEach(t),evr=i(aL),tc=n(aL,"P",{});var qte=s(tc);ovr=r(qte,`Note:
Loading a model from its configuration file does `),jTe=n(qte,"STRONG",{});var z9t=s(jTe);rvr=r(z9t,"not"),z9t.forEach(t),tvr=r(qte,` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=n(qte,"A",{href:!0});var Q9t=s(cU);avr=r(Q9t,"from_pretrained()"),Q9t.forEach(t),nvr=r(qte," to load the model weights."),qte.forEach(t),svr=i(aL),T(iE.$$.fragment,aL),aL.forEach(t),lvr=i(Ll),Fo=n(Ll,"DIV",{class:!0});var $a=s(Fo);T(X9.$$.fragment,$a),ivr=i($a),DTe=n($a,"P",{});var W9t=s(DTe);dvr=r(W9t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),W9t.forEach(t),cvr=i($a),an=n($a,"P",{});var nL=s(an);mvr=r(nL,"The model class to instantiate is selected based on the "),GTe=n(nL,"CODE",{});var H9t=s(GTe);fvr=r(H9t,"model_type"),H9t.forEach(t),gvr=r(nL,` property of the config object (either
passed as an argument or loaded from `),OTe=n(nL,"CODE",{});var U9t=s(OTe);hvr=r(U9t,"pretrained_model_name_or_path"),U9t.forEach(t),uvr=r(nL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=n(nL,"CODE",{});var J9t=s(VTe);pvr=r(J9t,"pretrained_model_name_or_path"),J9t.forEach(t),_vr=r(nL,":"),nL.forEach(t),bvr=i($a),at=n($a,"UL",{});var yl=s(at);dE=n(yl,"LI",{});var _qe=s(dE);XTe=n(_qe,"STRONG",{});var Y9t=s(XTe);vvr=r(Y9t,"beit"),Y9t.forEach(t),Fvr=r(_qe," \u2014 "),mU=n(_qe,"A",{href:!0});var K9t=s(mU);Tvr=r(K9t,"BeitForSemanticSegmentation"),K9t.forEach(t),Mvr=r(_qe," (BEiT model)"),_qe.forEach(t),Evr=i(yl),cE=n(yl,"LI",{});var bqe=s(cE);zTe=n(bqe,"STRONG",{});var Z9t=s(zTe);Cvr=r(Z9t,"data2vec-vision"),Z9t.forEach(t),wvr=r(bqe," \u2014 "),fU=n(bqe,"A",{href:!0});var ext=s(fU);Avr=r(ext,"Data2VecVisionForSemanticSegmentation"),ext.forEach(t),Lvr=r(bqe," (Data2VecVision model)"),bqe.forEach(t),yvr=i(yl),mE=n(yl,"LI",{});var vqe=s(mE);QTe=n(vqe,"STRONG",{});var oxt=s(QTe);xvr=r(oxt,"dpt"),oxt.forEach(t),$vr=r(vqe," \u2014 "),gU=n(vqe,"A",{href:!0});var rxt=s(gU);kvr=r(rxt,"DPTForSemanticSegmentation"),rxt.forEach(t),Svr=r(vqe," (DPT model)"),vqe.forEach(t),Rvr=i(yl),fE=n(yl,"LI",{});var Fqe=s(fE);WTe=n(Fqe,"STRONG",{});var txt=s(WTe);Pvr=r(txt,"mobilevit"),txt.forEach(t),Bvr=r(Fqe," \u2014 "),hU=n(Fqe,"A",{href:!0});var axt=s(hU);Ivr=r(axt,"MobileViTForSemanticSegmentation"),axt.forEach(t),Nvr=r(Fqe," (MobileViT model)"),Fqe.forEach(t),qvr=i(yl),gE=n(yl,"LI",{});var Tqe=s(gE);HTe=n(Tqe,"STRONG",{});var nxt=s(HTe);jvr=r(nxt,"segformer"),nxt.forEach(t),Dvr=r(Tqe," \u2014 "),uU=n(Tqe,"A",{href:!0});var sxt=s(uU);Gvr=r(sxt,"SegformerForSemanticSegmentation"),sxt.forEach(t),Ovr=r(Tqe," (SegFormer model)"),Tqe.forEach(t),yl.forEach(t),Vvr=i($a),hE=n($a,"P",{});var Mqe=s(hE);Xvr=r(Mqe,"The model is set in evaluation mode by default using "),UTe=n(Mqe,"CODE",{});var lxt=s(UTe);zvr=r(lxt,"model.eval()"),lxt.forEach(t),Qvr=r(Mqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),JTe=n(Mqe,"CODE",{});var ixt=s(JTe);Wvr=r(ixt,"model.train()"),ixt.forEach(t),Mqe.forEach(t),Hvr=i($a),T(uE.$$.fragment,$a),$a.forEach(t),Ll.forEach(t),Lze=i(m),ac=n(m,"H2",{class:!0});var BWe=s(ac);pE=n(BWe,"A",{id:!0,class:!0,href:!0});var dxt=s(pE);YTe=n(dxt,"SPAN",{});var cxt=s(YTe);T(z9.$$.fragment,cxt),cxt.forEach(t),dxt.forEach(t),Uvr=i(BWe),KTe=n(BWe,"SPAN",{});var mxt=s(KTe);Jvr=r(mxt,"AutoModelForInstanceSegmentation"),mxt.forEach(t),BWe.forEach(t),yze=i(m),or=n(m,"DIV",{class:!0});var xl=s(or);T(Q9.$$.fragment,xl),Yvr=i(xl),nc=n(xl,"P",{});var jte=s(nc);Kvr=r(jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),pU=n(jte,"A",{href:!0});var fxt=s(pU);Zvr=r(fxt,"from_pretrained()"),fxt.forEach(t),e1r=r(jte," class method or the "),_U=n(jte,"A",{href:!0});var gxt=s(_U);o1r=r(gxt,"from_config()"),gxt.forEach(t),r1r=r(jte,` class
method.`),jte.forEach(t),t1r=i(xl),W9=n(xl,"P",{});var IWe=s(W9);a1r=r(IWe,"This class cannot be instantiated directly using "),ZTe=n(IWe,"CODE",{});var hxt=s(ZTe);n1r=r(hxt,"__init__()"),hxt.forEach(t),s1r=r(IWe," (throws an error)."),IWe.forEach(t),l1r=i(xl),St=n(xl,"DIV",{class:!0});var sL=s(St);T(H9.$$.fragment,sL),i1r=i(sL),eMe=n(sL,"P",{});var uxt=s(eMe);d1r=r(uxt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),uxt.forEach(t),c1r=i(sL),sc=n(sL,"P",{});var Dte=s(sc);m1r=r(Dte,`Note:
Loading a model from its configuration file does `),oMe=n(Dte,"STRONG",{});var pxt=s(oMe);f1r=r(pxt,"not"),pxt.forEach(t),g1r=r(Dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=n(Dte,"A",{href:!0});var _xt=s(bU);h1r=r(_xt,"from_pretrained()"),_xt.forEach(t),u1r=r(Dte," to load the model weights."),Dte.forEach(t),p1r=i(sL),T(_E.$$.fragment,sL),sL.forEach(t),_1r=i(xl),To=n(xl,"DIV",{class:!0});var ka=s(To);T(U9.$$.fragment,ka),b1r=i(ka),rMe=n(ka,"P",{});var bxt=s(rMe);v1r=r(bxt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),bxt.forEach(t),F1r=i(ka),nn=n(ka,"P",{});var lL=s(nn);T1r=r(lL,"The model class to instantiate is selected based on the "),tMe=n(lL,"CODE",{});var vxt=s(tMe);M1r=r(vxt,"model_type"),vxt.forEach(t),E1r=r(lL,` property of the config object (either
passed as an argument or loaded from `),aMe=n(lL,"CODE",{});var Fxt=s(aMe);C1r=r(Fxt,"pretrained_model_name_or_path"),Fxt.forEach(t),w1r=r(lL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=n(lL,"CODE",{});var Txt=s(nMe);A1r=r(Txt,"pretrained_model_name_or_path"),Txt.forEach(t),L1r=r(lL,":"),lL.forEach(t),y1r=i(ka),sMe=n(ka,"UL",{});var Mxt=s(sMe);bE=n(Mxt,"LI",{});var Eqe=s(bE);lMe=n(Eqe,"STRONG",{});var Ext=s(lMe);x1r=r(Ext,"maskformer"),Ext.forEach(t),$1r=r(Eqe," \u2014 "),vU=n(Eqe,"A",{href:!0});var Cxt=s(vU);k1r=r(Cxt,"MaskFormerForInstanceSegmentation"),Cxt.forEach(t),S1r=r(Eqe," (MaskFormer model)"),Eqe.forEach(t),Mxt.forEach(t),R1r=i(ka),vE=n(ka,"P",{});var Cqe=s(vE);P1r=r(Cqe,"The model is set in evaluation mode by default using "),iMe=n(Cqe,"CODE",{});var wxt=s(iMe);B1r=r(wxt,"model.eval()"),wxt.forEach(t),I1r=r(Cqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dMe=n(Cqe,"CODE",{});var Axt=s(dMe);N1r=r(Axt,"model.train()"),Axt.forEach(t),Cqe.forEach(t),q1r=i(ka),T(FE.$$.fragment,ka),ka.forEach(t),xl.forEach(t),xze=i(m),lc=n(m,"H2",{class:!0});var NWe=s(lc);TE=n(NWe,"A",{id:!0,class:!0,href:!0});var Lxt=s(TE);cMe=n(Lxt,"SPAN",{});var yxt=s(cMe);T(J9.$$.fragment,yxt),yxt.forEach(t),Lxt.forEach(t),j1r=i(NWe),mMe=n(NWe,"SPAN",{});var xxt=s(mMe);D1r=r(xxt,"TFAutoModel"),xxt.forEach(t),NWe.forEach(t),$ze=i(m),rr=n(m,"DIV",{class:!0});var $l=s(rr);T(Y9.$$.fragment,$l),G1r=i($l),ic=n($l,"P",{});var Gte=s(ic);O1r=r(Gte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FU=n(Gte,"A",{href:!0});var $xt=s(FU);V1r=r($xt,"from_pretrained()"),$xt.forEach(t),X1r=r(Gte," class method or the "),TU=n(Gte,"A",{href:!0});var kxt=s(TU);z1r=r(kxt,"from_config()"),kxt.forEach(t),Q1r=r(Gte,` class
method.`),Gte.forEach(t),W1r=i($l),K9=n($l,"P",{});var qWe=s(K9);H1r=r(qWe,"This class cannot be instantiated directly using "),fMe=n(qWe,"CODE",{});var Sxt=s(fMe);U1r=r(Sxt,"__init__()"),Sxt.forEach(t),J1r=r(qWe," (throws an error)."),qWe.forEach(t),Y1r=i($l),Rt=n($l,"DIV",{class:!0});var iL=s(Rt);T(Z9.$$.fragment,iL),K1r=i(iL),gMe=n(iL,"P",{});var Rxt=s(gMe);Z1r=r(Rxt,"Instantiates one of the base model classes of the library from a configuration."),Rxt.forEach(t),eFr=i(iL),dc=n(iL,"P",{});var Ote=s(dc);oFr=r(Ote,`Note:
Loading a model from its configuration file does `),hMe=n(Ote,"STRONG",{});var Pxt=s(hMe);rFr=r(Pxt,"not"),Pxt.forEach(t),tFr=r(Ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=n(Ote,"A",{href:!0});var Bxt=s(MU);aFr=r(Bxt,"from_pretrained()"),Bxt.forEach(t),nFr=r(Ote," to load the model weights."),Ote.forEach(t),sFr=i(iL),T(ME.$$.fragment,iL),iL.forEach(t),lFr=i($l),$r=n($l,"DIV",{class:!0});var kl=s($r);T(ex.$$.fragment,kl),iFr=i(kl),uMe=n(kl,"P",{});var Ixt=s(uMe);dFr=r(Ixt,"Instantiate one of the base model classes of the library from a pretrained model."),Ixt.forEach(t),cFr=i(kl),sn=n(kl,"P",{});var dL=s(sn);mFr=r(dL,"The model class to instantiate is selected based on the "),pMe=n(dL,"CODE",{});var Nxt=s(pMe);fFr=r(Nxt,"model_type"),Nxt.forEach(t),gFr=r(dL,` property of the config object (either
passed as an argument or loaded from `),_Me=n(dL,"CODE",{});var qxt=s(_Me);hFr=r(qxt,"pretrained_model_name_or_path"),qxt.forEach(t),uFr=r(dL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bMe=n(dL,"CODE",{});var jxt=s(bMe);pFr=r(jxt,"pretrained_model_name_or_path"),jxt.forEach(t),_Fr=r(dL,":"),dL.forEach(t),bFr=i(kl),I=n(kl,"UL",{});var D=s(I);EE=n(D,"LI",{});var wqe=s(EE);vMe=n(wqe,"STRONG",{});var Dxt=s(vMe);vFr=r(Dxt,"albert"),Dxt.forEach(t),FFr=r(wqe," \u2014 "),EU=n(wqe,"A",{href:!0});var Gxt=s(EU);TFr=r(Gxt,"TFAlbertModel"),Gxt.forEach(t),MFr=r(wqe," (ALBERT model)"),wqe.forEach(t),EFr=i(D),CE=n(D,"LI",{});var Aqe=s(CE);FMe=n(Aqe,"STRONG",{});var Oxt=s(FMe);CFr=r(Oxt,"bart"),Oxt.forEach(t),wFr=r(Aqe," \u2014 "),CU=n(Aqe,"A",{href:!0});var Vxt=s(CU);AFr=r(Vxt,"TFBartModel"),Vxt.forEach(t),LFr=r(Aqe," (BART model)"),Aqe.forEach(t),yFr=i(D),wE=n(D,"LI",{});var Lqe=s(wE);TMe=n(Lqe,"STRONG",{});var Xxt=s(TMe);xFr=r(Xxt,"bert"),Xxt.forEach(t),$Fr=r(Lqe," \u2014 "),wU=n(Lqe,"A",{href:!0});var zxt=s(wU);kFr=r(zxt,"TFBertModel"),zxt.forEach(t),SFr=r(Lqe," (BERT model)"),Lqe.forEach(t),RFr=i(D),AE=n(D,"LI",{});var yqe=s(AE);MMe=n(yqe,"STRONG",{});var Qxt=s(MMe);PFr=r(Qxt,"blenderbot"),Qxt.forEach(t),BFr=r(yqe," \u2014 "),AU=n(yqe,"A",{href:!0});var Wxt=s(AU);IFr=r(Wxt,"TFBlenderbotModel"),Wxt.forEach(t),NFr=r(yqe," (Blenderbot model)"),yqe.forEach(t),qFr=i(D),LE=n(D,"LI",{});var xqe=s(LE);EMe=n(xqe,"STRONG",{});var Hxt=s(EMe);jFr=r(Hxt,"blenderbot-small"),Hxt.forEach(t),DFr=r(xqe," \u2014 "),LU=n(xqe,"A",{href:!0});var Uxt=s(LU);GFr=r(Uxt,"TFBlenderbotSmallModel"),Uxt.forEach(t),OFr=r(xqe," (BlenderbotSmall model)"),xqe.forEach(t),VFr=i(D),yE=n(D,"LI",{});var $qe=s(yE);CMe=n($qe,"STRONG",{});var Jxt=s(CMe);XFr=r(Jxt,"camembert"),Jxt.forEach(t),zFr=r($qe," \u2014 "),yU=n($qe,"A",{href:!0});var Yxt=s(yU);QFr=r(Yxt,"TFCamembertModel"),Yxt.forEach(t),WFr=r($qe," (CamemBERT model)"),$qe.forEach(t),HFr=i(D),xE=n(D,"LI",{});var kqe=s(xE);wMe=n(kqe,"STRONG",{});var Kxt=s(wMe);UFr=r(Kxt,"clip"),Kxt.forEach(t),JFr=r(kqe," \u2014 "),xU=n(kqe,"A",{href:!0});var Zxt=s(xU);YFr=r(Zxt,"TFCLIPModel"),Zxt.forEach(t),KFr=r(kqe," (CLIP model)"),kqe.forEach(t),ZFr=i(D),$E=n(D,"LI",{});var Sqe=s($E);AMe=n(Sqe,"STRONG",{});var e$t=s(AMe);eTr=r(e$t,"convbert"),e$t.forEach(t),oTr=r(Sqe," \u2014 "),$U=n(Sqe,"A",{href:!0});var o$t=s($U);rTr=r(o$t,"TFConvBertModel"),o$t.forEach(t),tTr=r(Sqe," (ConvBERT model)"),Sqe.forEach(t),aTr=i(D),kE=n(D,"LI",{});var Rqe=s(kE);LMe=n(Rqe,"STRONG",{});var r$t=s(LMe);nTr=r(r$t,"convnext"),r$t.forEach(t),sTr=r(Rqe," \u2014 "),kU=n(Rqe,"A",{href:!0});var t$t=s(kU);lTr=r(t$t,"TFConvNextModel"),t$t.forEach(t),iTr=r(Rqe," (ConvNeXT model)"),Rqe.forEach(t),dTr=i(D),SE=n(D,"LI",{});var Pqe=s(SE);yMe=n(Pqe,"STRONG",{});var a$t=s(yMe);cTr=r(a$t,"ctrl"),a$t.forEach(t),mTr=r(Pqe," \u2014 "),SU=n(Pqe,"A",{href:!0});var n$t=s(SU);fTr=r(n$t,"TFCTRLModel"),n$t.forEach(t),gTr=r(Pqe," (CTRL model)"),Pqe.forEach(t),hTr=i(D),RE=n(D,"LI",{});var Bqe=s(RE);xMe=n(Bqe,"STRONG",{});var s$t=s(xMe);uTr=r(s$t,"data2vec-vision"),s$t.forEach(t),pTr=r(Bqe," \u2014 "),RU=n(Bqe,"A",{href:!0});var l$t=s(RU);_Tr=r(l$t,"TFData2VecVisionModel"),l$t.forEach(t),bTr=r(Bqe," (Data2VecVision model)"),Bqe.forEach(t),vTr=i(D),PE=n(D,"LI",{});var Iqe=s(PE);$Me=n(Iqe,"STRONG",{});var i$t=s($Me);FTr=r(i$t,"deberta"),i$t.forEach(t),TTr=r(Iqe," \u2014 "),PU=n(Iqe,"A",{href:!0});var d$t=s(PU);MTr=r(d$t,"TFDebertaModel"),d$t.forEach(t),ETr=r(Iqe," (DeBERTa model)"),Iqe.forEach(t),CTr=i(D),BE=n(D,"LI",{});var Nqe=s(BE);kMe=n(Nqe,"STRONG",{});var c$t=s(kMe);wTr=r(c$t,"deberta-v2"),c$t.forEach(t),ATr=r(Nqe," \u2014 "),BU=n(Nqe,"A",{href:!0});var m$t=s(BU);LTr=r(m$t,"TFDebertaV2Model"),m$t.forEach(t),yTr=r(Nqe," (DeBERTa-v2 model)"),Nqe.forEach(t),xTr=i(D),IE=n(D,"LI",{});var qqe=s(IE);SMe=n(qqe,"STRONG",{});var f$t=s(SMe);$Tr=r(f$t,"deit"),f$t.forEach(t),kTr=r(qqe," \u2014 "),IU=n(qqe,"A",{href:!0});var g$t=s(IU);STr=r(g$t,"TFDeiTModel"),g$t.forEach(t),RTr=r(qqe," (DeiT model)"),qqe.forEach(t),PTr=i(D),NE=n(D,"LI",{});var jqe=s(NE);RMe=n(jqe,"STRONG",{});var h$t=s(RMe);BTr=r(h$t,"distilbert"),h$t.forEach(t),ITr=r(jqe," \u2014 "),NU=n(jqe,"A",{href:!0});var u$t=s(NU);NTr=r(u$t,"TFDistilBertModel"),u$t.forEach(t),qTr=r(jqe," (DistilBERT model)"),jqe.forEach(t),jTr=i(D),qE=n(D,"LI",{});var Dqe=s(qE);PMe=n(Dqe,"STRONG",{});var p$t=s(PMe);DTr=r(p$t,"dpr"),p$t.forEach(t),GTr=r(Dqe," \u2014 "),qU=n(Dqe,"A",{href:!0});var _$t=s(qU);OTr=r(_$t,"TFDPRQuestionEncoder"),_$t.forEach(t),VTr=r(Dqe," (DPR model)"),Dqe.forEach(t),XTr=i(D),jE=n(D,"LI",{});var Gqe=s(jE);BMe=n(Gqe,"STRONG",{});var b$t=s(BMe);zTr=r(b$t,"electra"),b$t.forEach(t),QTr=r(Gqe," \u2014 "),jU=n(Gqe,"A",{href:!0});var v$t=s(jU);WTr=r(v$t,"TFElectraModel"),v$t.forEach(t),HTr=r(Gqe," (ELECTRA model)"),Gqe.forEach(t),UTr=i(D),DE=n(D,"LI",{});var Oqe=s(DE);IMe=n(Oqe,"STRONG",{});var F$t=s(IMe);JTr=r(F$t,"flaubert"),F$t.forEach(t),YTr=r(Oqe," \u2014 "),DU=n(Oqe,"A",{href:!0});var T$t=s(DU);KTr=r(T$t,"TFFlaubertModel"),T$t.forEach(t),ZTr=r(Oqe," (FlauBERT model)"),Oqe.forEach(t),eMr=i(D),Ys=n(D,"LI",{});var DS=s(Ys);NMe=n(DS,"STRONG",{});var M$t=s(NMe);oMr=r(M$t,"funnel"),M$t.forEach(t),rMr=r(DS," \u2014 "),GU=n(DS,"A",{href:!0});var E$t=s(GU);tMr=r(E$t,"TFFunnelModel"),E$t.forEach(t),aMr=r(DS," or "),OU=n(DS,"A",{href:!0});var C$t=s(OU);nMr=r(C$t,"TFFunnelBaseModel"),C$t.forEach(t),sMr=r(DS," (Funnel Transformer model)"),DS.forEach(t),lMr=i(D),GE=n(D,"LI",{});var Vqe=s(GE);qMe=n(Vqe,"STRONG",{});var w$t=s(qMe);iMr=r(w$t,"gpt2"),w$t.forEach(t),dMr=r(Vqe," \u2014 "),VU=n(Vqe,"A",{href:!0});var A$t=s(VU);cMr=r(A$t,"TFGPT2Model"),A$t.forEach(t),mMr=r(Vqe," (OpenAI GPT-2 model)"),Vqe.forEach(t),fMr=i(D),OE=n(D,"LI",{});var Xqe=s(OE);jMe=n(Xqe,"STRONG",{});var L$t=s(jMe);gMr=r(L$t,"gptj"),L$t.forEach(t),hMr=r(Xqe," \u2014 "),XU=n(Xqe,"A",{href:!0});var y$t=s(XU);uMr=r(y$t,"TFGPTJModel"),y$t.forEach(t),pMr=r(Xqe," (GPT-J model)"),Xqe.forEach(t),_Mr=i(D),VE=n(D,"LI",{});var zqe=s(VE);DMe=n(zqe,"STRONG",{});var x$t=s(DMe);bMr=r(x$t,"hubert"),x$t.forEach(t),vMr=r(zqe," \u2014 "),zU=n(zqe,"A",{href:!0});var $$t=s(zU);FMr=r($$t,"TFHubertModel"),$$t.forEach(t),TMr=r(zqe," (Hubert model)"),zqe.forEach(t),MMr=i(D),XE=n(D,"LI",{});var Qqe=s(XE);GMe=n(Qqe,"STRONG",{});var k$t=s(GMe);EMr=r(k$t,"layoutlm"),k$t.forEach(t),CMr=r(Qqe," \u2014 "),QU=n(Qqe,"A",{href:!0});var S$t=s(QU);wMr=r(S$t,"TFLayoutLMModel"),S$t.forEach(t),AMr=r(Qqe," (LayoutLM model)"),Qqe.forEach(t),LMr=i(D),zE=n(D,"LI",{});var Wqe=s(zE);OMe=n(Wqe,"STRONG",{});var R$t=s(OMe);yMr=r(R$t,"led"),R$t.forEach(t),xMr=r(Wqe," \u2014 "),WU=n(Wqe,"A",{href:!0});var P$t=s(WU);$Mr=r(P$t,"TFLEDModel"),P$t.forEach(t),kMr=r(Wqe," (LED model)"),Wqe.forEach(t),SMr=i(D),QE=n(D,"LI",{});var Hqe=s(QE);VMe=n(Hqe,"STRONG",{});var B$t=s(VMe);RMr=r(B$t,"longformer"),B$t.forEach(t),PMr=r(Hqe," \u2014 "),HU=n(Hqe,"A",{href:!0});var I$t=s(HU);BMr=r(I$t,"TFLongformerModel"),I$t.forEach(t),IMr=r(Hqe," (Longformer model)"),Hqe.forEach(t),NMr=i(D),WE=n(D,"LI",{});var Uqe=s(WE);XMe=n(Uqe,"STRONG",{});var N$t=s(XMe);qMr=r(N$t,"lxmert"),N$t.forEach(t),jMr=r(Uqe," \u2014 "),UU=n(Uqe,"A",{href:!0});var q$t=s(UU);DMr=r(q$t,"TFLxmertModel"),q$t.forEach(t),GMr=r(Uqe," (LXMERT model)"),Uqe.forEach(t),OMr=i(D),HE=n(D,"LI",{});var Jqe=s(HE);zMe=n(Jqe,"STRONG",{});var j$t=s(zMe);VMr=r(j$t,"marian"),j$t.forEach(t),XMr=r(Jqe," \u2014 "),JU=n(Jqe,"A",{href:!0});var D$t=s(JU);zMr=r(D$t,"TFMarianModel"),D$t.forEach(t),QMr=r(Jqe," (Marian model)"),Jqe.forEach(t),WMr=i(D),UE=n(D,"LI",{});var Yqe=s(UE);QMe=n(Yqe,"STRONG",{});var G$t=s(QMe);HMr=r(G$t,"mbart"),G$t.forEach(t),UMr=r(Yqe," \u2014 "),YU=n(Yqe,"A",{href:!0});var O$t=s(YU);JMr=r(O$t,"TFMBartModel"),O$t.forEach(t),YMr=r(Yqe," (mBART model)"),Yqe.forEach(t),KMr=i(D),JE=n(D,"LI",{});var Kqe=s(JE);WMe=n(Kqe,"STRONG",{});var V$t=s(WMe);ZMr=r(V$t,"mobilebert"),V$t.forEach(t),e4r=r(Kqe," \u2014 "),KU=n(Kqe,"A",{href:!0});var X$t=s(KU);o4r=r(X$t,"TFMobileBertModel"),X$t.forEach(t),r4r=r(Kqe," (MobileBERT model)"),Kqe.forEach(t),t4r=i(D),YE=n(D,"LI",{});var Zqe=s(YE);HMe=n(Zqe,"STRONG",{});var z$t=s(HMe);a4r=r(z$t,"mpnet"),z$t.forEach(t),n4r=r(Zqe," \u2014 "),ZU=n(Zqe,"A",{href:!0});var Q$t=s(ZU);s4r=r(Q$t,"TFMPNetModel"),Q$t.forEach(t),l4r=r(Zqe," (MPNet model)"),Zqe.forEach(t),i4r=i(D),KE=n(D,"LI",{});var eje=s(KE);UMe=n(eje,"STRONG",{});var W$t=s(UMe);d4r=r(W$t,"mt5"),W$t.forEach(t),c4r=r(eje," \u2014 "),eJ=n(eje,"A",{href:!0});var H$t=s(eJ);m4r=r(H$t,"TFMT5Model"),H$t.forEach(t),f4r=r(eje," (MT5 model)"),eje.forEach(t),g4r=i(D),ZE=n(D,"LI",{});var oje=s(ZE);JMe=n(oje,"STRONG",{});var U$t=s(JMe);h4r=r(U$t,"openai-gpt"),U$t.forEach(t),u4r=r(oje," \u2014 "),oJ=n(oje,"A",{href:!0});var J$t=s(oJ);p4r=r(J$t,"TFOpenAIGPTModel"),J$t.forEach(t),_4r=r(oje," (OpenAI GPT model)"),oje.forEach(t),b4r=i(D),eC=n(D,"LI",{});var rje=s(eC);YMe=n(rje,"STRONG",{});var Y$t=s(YMe);v4r=r(Y$t,"opt"),Y$t.forEach(t),F4r=r(rje," \u2014 "),rJ=n(rje,"A",{href:!0});var K$t=s(rJ);T4r=r(K$t,"TFOPTModel"),K$t.forEach(t),M4r=r(rje," (OPT model)"),rje.forEach(t),E4r=i(D),oC=n(D,"LI",{});var tje=s(oC);KMe=n(tje,"STRONG",{});var Z$t=s(KMe);C4r=r(Z$t,"pegasus"),Z$t.forEach(t),w4r=r(tje," \u2014 "),tJ=n(tje,"A",{href:!0});var ekt=s(tJ);A4r=r(ekt,"TFPegasusModel"),ekt.forEach(t),L4r=r(tje," (Pegasus model)"),tje.forEach(t),y4r=i(D),rC=n(D,"LI",{});var aje=s(rC);ZMe=n(aje,"STRONG",{});var okt=s(ZMe);x4r=r(okt,"regnet"),okt.forEach(t),$4r=r(aje," \u2014 "),aJ=n(aje,"A",{href:!0});var rkt=s(aJ);k4r=r(rkt,"TFRegNetModel"),rkt.forEach(t),S4r=r(aje," (RegNet model)"),aje.forEach(t),R4r=i(D),tC=n(D,"LI",{});var nje=s(tC);e4e=n(nje,"STRONG",{});var tkt=s(e4e);P4r=r(tkt,"rembert"),tkt.forEach(t),B4r=r(nje," \u2014 "),nJ=n(nje,"A",{href:!0});var akt=s(nJ);I4r=r(akt,"TFRemBertModel"),akt.forEach(t),N4r=r(nje," (RemBERT model)"),nje.forEach(t),q4r=i(D),aC=n(D,"LI",{});var sje=s(aC);o4e=n(sje,"STRONG",{});var nkt=s(o4e);j4r=r(nkt,"resnet"),nkt.forEach(t),D4r=r(sje," \u2014 "),sJ=n(sje,"A",{href:!0});var skt=s(sJ);G4r=r(skt,"TFResNetModel"),skt.forEach(t),O4r=r(sje," (ResNet model)"),sje.forEach(t),V4r=i(D),nC=n(D,"LI",{});var lje=s(nC);r4e=n(lje,"STRONG",{});var lkt=s(r4e);X4r=r(lkt,"roberta"),lkt.forEach(t),z4r=r(lje," \u2014 "),lJ=n(lje,"A",{href:!0});var ikt=s(lJ);Q4r=r(ikt,"TFRobertaModel"),ikt.forEach(t),W4r=r(lje," (RoBERTa model)"),lje.forEach(t),H4r=i(D),sC=n(D,"LI",{});var ije=s(sC);t4e=n(ije,"STRONG",{});var dkt=s(t4e);U4r=r(dkt,"roformer"),dkt.forEach(t),J4r=r(ije," \u2014 "),iJ=n(ije,"A",{href:!0});var ckt=s(iJ);Y4r=r(ckt,"TFRoFormerModel"),ckt.forEach(t),K4r=r(ije," (RoFormer model)"),ije.forEach(t),Z4r=i(D),lC=n(D,"LI",{});var dje=s(lC);a4e=n(dje,"STRONG",{});var mkt=s(a4e);eEr=r(mkt,"segformer"),mkt.forEach(t),oEr=r(dje," \u2014 "),dJ=n(dje,"A",{href:!0});var fkt=s(dJ);rEr=r(fkt,"TFSegformerModel"),fkt.forEach(t),tEr=r(dje," (SegFormer model)"),dje.forEach(t),aEr=i(D),iC=n(D,"LI",{});var cje=s(iC);n4e=n(cje,"STRONG",{});var gkt=s(n4e);nEr=r(gkt,"speech_to_text"),gkt.forEach(t),sEr=r(cje," \u2014 "),cJ=n(cje,"A",{href:!0});var hkt=s(cJ);lEr=r(hkt,"TFSpeech2TextModel"),hkt.forEach(t),iEr=r(cje," (Speech2Text model)"),cje.forEach(t),dEr=i(D),dC=n(D,"LI",{});var mje=s(dC);s4e=n(mje,"STRONG",{});var ukt=s(s4e);cEr=r(ukt,"swin"),ukt.forEach(t),mEr=r(mje," \u2014 "),mJ=n(mje,"A",{href:!0});var pkt=s(mJ);fEr=r(pkt,"TFSwinModel"),pkt.forEach(t),gEr=r(mje," (Swin Transformer model)"),mje.forEach(t),hEr=i(D),cC=n(D,"LI",{});var fje=s(cC);l4e=n(fje,"STRONG",{});var _kt=s(l4e);uEr=r(_kt,"t5"),_kt.forEach(t),pEr=r(fje," \u2014 "),fJ=n(fje,"A",{href:!0});var bkt=s(fJ);_Er=r(bkt,"TFT5Model"),bkt.forEach(t),bEr=r(fje," (T5 model)"),fje.forEach(t),vEr=i(D),mC=n(D,"LI",{});var gje=s(mC);i4e=n(gje,"STRONG",{});var vkt=s(i4e);FEr=r(vkt,"tapas"),vkt.forEach(t),TEr=r(gje," \u2014 "),gJ=n(gje,"A",{href:!0});var Fkt=s(gJ);MEr=r(Fkt,"TFTapasModel"),Fkt.forEach(t),EEr=r(gje," (TAPAS model)"),gje.forEach(t),CEr=i(D),fC=n(D,"LI",{});var hje=s(fC);d4e=n(hje,"STRONG",{});var Tkt=s(d4e);wEr=r(Tkt,"transfo-xl"),Tkt.forEach(t),AEr=r(hje," \u2014 "),hJ=n(hje,"A",{href:!0});var Mkt=s(hJ);LEr=r(Mkt,"TFTransfoXLModel"),Mkt.forEach(t),yEr=r(hje," (Transformer-XL model)"),hje.forEach(t),xEr=i(D),gC=n(D,"LI",{});var uje=s(gC);c4e=n(uje,"STRONG",{});var Ekt=s(c4e);$Er=r(Ekt,"vit"),Ekt.forEach(t),kEr=r(uje," \u2014 "),uJ=n(uje,"A",{href:!0});var Ckt=s(uJ);SEr=r(Ckt,"TFViTModel"),Ckt.forEach(t),REr=r(uje," (ViT model)"),uje.forEach(t),PEr=i(D),hC=n(D,"LI",{});var pje=s(hC);m4e=n(pje,"STRONG",{});var wkt=s(m4e);BEr=r(wkt,"vit_mae"),wkt.forEach(t),IEr=r(pje," \u2014 "),pJ=n(pje,"A",{href:!0});var Akt=s(pJ);NEr=r(Akt,"TFViTMAEModel"),Akt.forEach(t),qEr=r(pje," (ViTMAE model)"),pje.forEach(t),jEr=i(D),uC=n(D,"LI",{});var _je=s(uC);f4e=n(_je,"STRONG",{});var Lkt=s(f4e);DEr=r(Lkt,"wav2vec2"),Lkt.forEach(t),GEr=r(_je," \u2014 "),_J=n(_je,"A",{href:!0});var ykt=s(_J);OEr=r(ykt,"TFWav2Vec2Model"),ykt.forEach(t),VEr=r(_je," (Wav2Vec2 model)"),_je.forEach(t),XEr=i(D),pC=n(D,"LI",{});var bje=s(pC);g4e=n(bje,"STRONG",{});var xkt=s(g4e);zEr=r(xkt,"xlm"),xkt.forEach(t),QEr=r(bje," \u2014 "),bJ=n(bje,"A",{href:!0});var $kt=s(bJ);WEr=r($kt,"TFXLMModel"),$kt.forEach(t),HEr=r(bje," (XLM model)"),bje.forEach(t),UEr=i(D),_C=n(D,"LI",{});var vje=s(_C);h4e=n(vje,"STRONG",{});var kkt=s(h4e);JEr=r(kkt,"xlm-roberta"),kkt.forEach(t),YEr=r(vje," \u2014 "),vJ=n(vje,"A",{href:!0});var Skt=s(vJ);KEr=r(Skt,"TFXLMRobertaModel"),Skt.forEach(t),ZEr=r(vje," (XLM-RoBERTa model)"),vje.forEach(t),eCr=i(D),bC=n(D,"LI",{});var Fje=s(bC);u4e=n(Fje,"STRONG",{});var Rkt=s(u4e);oCr=r(Rkt,"xlnet"),Rkt.forEach(t),rCr=r(Fje," \u2014 "),FJ=n(Fje,"A",{href:!0});var Pkt=s(FJ);tCr=r(Pkt,"TFXLNetModel"),Pkt.forEach(t),aCr=r(Fje," (XLNet model)"),Fje.forEach(t),D.forEach(t),nCr=i(kl),T(vC.$$.fragment,kl),kl.forEach(t),$l.forEach(t),kze=i(m),cc=n(m,"H2",{class:!0});var jWe=s(cc);FC=n(jWe,"A",{id:!0,class:!0,href:!0});var Bkt=s(FC);p4e=n(Bkt,"SPAN",{});var Ikt=s(p4e);T(ox.$$.fragment,Ikt),Ikt.forEach(t),Bkt.forEach(t),sCr=i(jWe),_4e=n(jWe,"SPAN",{});var Nkt=s(_4e);lCr=r(Nkt,"TFAutoModelForPreTraining"),Nkt.forEach(t),jWe.forEach(t),Sze=i(m),tr=n(m,"DIV",{class:!0});var Sl=s(tr);T(rx.$$.fragment,Sl),iCr=i(Sl),mc=n(Sl,"P",{});var Vte=s(mc);dCr=r(Vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TJ=n(Vte,"A",{href:!0});var qkt=s(TJ);cCr=r(qkt,"from_pretrained()"),qkt.forEach(t),mCr=r(Vte," class method or the "),MJ=n(Vte,"A",{href:!0});var jkt=s(MJ);fCr=r(jkt,"from_config()"),jkt.forEach(t),gCr=r(Vte,` class
method.`),Vte.forEach(t),hCr=i(Sl),tx=n(Sl,"P",{});var DWe=s(tx);uCr=r(DWe,"This class cannot be instantiated directly using "),b4e=n(DWe,"CODE",{});var Dkt=s(b4e);pCr=r(Dkt,"__init__()"),Dkt.forEach(t),_Cr=r(DWe," (throws an error)."),DWe.forEach(t),bCr=i(Sl),Pt=n(Sl,"DIV",{class:!0});var cL=s(Pt);T(ax.$$.fragment,cL),vCr=i(cL),v4e=n(cL,"P",{});var Gkt=s(v4e);FCr=r(Gkt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Gkt.forEach(t),TCr=i(cL),fc=n(cL,"P",{});var Xte=s(fc);MCr=r(Xte,`Note:
Loading a model from its configuration file does `),F4e=n(Xte,"STRONG",{});var Okt=s(F4e);ECr=r(Okt,"not"),Okt.forEach(t),CCr=r(Xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=n(Xte,"A",{href:!0});var Vkt=s(EJ);wCr=r(Vkt,"from_pretrained()"),Vkt.forEach(t),ACr=r(Xte," to load the model weights."),Xte.forEach(t),LCr=i(cL),T(TC.$$.fragment,cL),cL.forEach(t),yCr=i(Sl),kr=n(Sl,"DIV",{class:!0});var Rl=s(kr);T(nx.$$.fragment,Rl),xCr=i(Rl),T4e=n(Rl,"P",{});var Xkt=s(T4e);$Cr=r(Xkt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Xkt.forEach(t),kCr=i(Rl),ln=n(Rl,"P",{});var mL=s(ln);SCr=r(mL,"The model class to instantiate is selected based on the "),M4e=n(mL,"CODE",{});var zkt=s(M4e);RCr=r(zkt,"model_type"),zkt.forEach(t),PCr=r(mL,` property of the config object (either
passed as an argument or loaded from `),E4e=n(mL,"CODE",{});var Qkt=s(E4e);BCr=r(Qkt,"pretrained_model_name_or_path"),Qkt.forEach(t),ICr=r(mL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C4e=n(mL,"CODE",{});var Wkt=s(C4e);NCr=r(Wkt,"pretrained_model_name_or_path"),Wkt.forEach(t),qCr=r(mL,":"),mL.forEach(t),jCr=i(Rl),se=n(Rl,"UL",{});var le=s(se);MC=n(le,"LI",{});var Tje=s(MC);w4e=n(Tje,"STRONG",{});var Hkt=s(w4e);DCr=r(Hkt,"albert"),Hkt.forEach(t),GCr=r(Tje," \u2014 "),CJ=n(Tje,"A",{href:!0});var Ukt=s(CJ);OCr=r(Ukt,"TFAlbertForPreTraining"),Ukt.forEach(t),VCr=r(Tje," (ALBERT model)"),Tje.forEach(t),XCr=i(le),EC=n(le,"LI",{});var Mje=s(EC);A4e=n(Mje,"STRONG",{});var Jkt=s(A4e);zCr=r(Jkt,"bart"),Jkt.forEach(t),QCr=r(Mje," \u2014 "),wJ=n(Mje,"A",{href:!0});var Ykt=s(wJ);WCr=r(Ykt,"TFBartForConditionalGeneration"),Ykt.forEach(t),HCr=r(Mje," (BART model)"),Mje.forEach(t),UCr=i(le),CC=n(le,"LI",{});var Eje=s(CC);L4e=n(Eje,"STRONG",{});var Kkt=s(L4e);JCr=r(Kkt,"bert"),Kkt.forEach(t),YCr=r(Eje," \u2014 "),AJ=n(Eje,"A",{href:!0});var Zkt=s(AJ);KCr=r(Zkt,"TFBertForPreTraining"),Zkt.forEach(t),ZCr=r(Eje," (BERT model)"),Eje.forEach(t),e3r=i(le),wC=n(le,"LI",{});var Cje=s(wC);y4e=n(Cje,"STRONG",{});var eSt=s(y4e);o3r=r(eSt,"camembert"),eSt.forEach(t),r3r=r(Cje," \u2014 "),LJ=n(Cje,"A",{href:!0});var oSt=s(LJ);t3r=r(oSt,"TFCamembertForMaskedLM"),oSt.forEach(t),a3r=r(Cje," (CamemBERT model)"),Cje.forEach(t),n3r=i(le),AC=n(le,"LI",{});var wje=s(AC);x4e=n(wje,"STRONG",{});var rSt=s(x4e);s3r=r(rSt,"ctrl"),rSt.forEach(t),l3r=r(wje," \u2014 "),yJ=n(wje,"A",{href:!0});var tSt=s(yJ);i3r=r(tSt,"TFCTRLLMHeadModel"),tSt.forEach(t),d3r=r(wje," (CTRL model)"),wje.forEach(t),c3r=i(le),LC=n(le,"LI",{});var Aje=s(LC);$4e=n(Aje,"STRONG",{});var aSt=s($4e);m3r=r(aSt,"distilbert"),aSt.forEach(t),f3r=r(Aje," \u2014 "),xJ=n(Aje,"A",{href:!0});var nSt=s(xJ);g3r=r(nSt,"TFDistilBertForMaskedLM"),nSt.forEach(t),h3r=r(Aje," (DistilBERT model)"),Aje.forEach(t),u3r=i(le),yC=n(le,"LI",{});var Lje=s(yC);k4e=n(Lje,"STRONG",{});var sSt=s(k4e);p3r=r(sSt,"electra"),sSt.forEach(t),_3r=r(Lje," \u2014 "),$J=n(Lje,"A",{href:!0});var lSt=s($J);b3r=r(lSt,"TFElectraForPreTraining"),lSt.forEach(t),v3r=r(Lje," (ELECTRA model)"),Lje.forEach(t),F3r=i(le),xC=n(le,"LI",{});var yje=s(xC);S4e=n(yje,"STRONG",{});var iSt=s(S4e);T3r=r(iSt,"flaubert"),iSt.forEach(t),M3r=r(yje," \u2014 "),kJ=n(yje,"A",{href:!0});var dSt=s(kJ);E3r=r(dSt,"TFFlaubertWithLMHeadModel"),dSt.forEach(t),C3r=r(yje," (FlauBERT model)"),yje.forEach(t),w3r=i(le),$C=n(le,"LI",{});var xje=s($C);R4e=n(xje,"STRONG",{});var cSt=s(R4e);A3r=r(cSt,"funnel"),cSt.forEach(t),L3r=r(xje," \u2014 "),SJ=n(xje,"A",{href:!0});var mSt=s(SJ);y3r=r(mSt,"TFFunnelForPreTraining"),mSt.forEach(t),x3r=r(xje," (Funnel Transformer model)"),xje.forEach(t),$3r=i(le),kC=n(le,"LI",{});var $je=s(kC);P4e=n($je,"STRONG",{});var fSt=s(P4e);k3r=r(fSt,"gpt2"),fSt.forEach(t),S3r=r($je," \u2014 "),RJ=n($je,"A",{href:!0});var gSt=s(RJ);R3r=r(gSt,"TFGPT2LMHeadModel"),gSt.forEach(t),P3r=r($je," (OpenAI GPT-2 model)"),$je.forEach(t),B3r=i(le),SC=n(le,"LI",{});var kje=s(SC);B4e=n(kje,"STRONG",{});var hSt=s(B4e);I3r=r(hSt,"layoutlm"),hSt.forEach(t),N3r=r(kje," \u2014 "),PJ=n(kje,"A",{href:!0});var uSt=s(PJ);q3r=r(uSt,"TFLayoutLMForMaskedLM"),uSt.forEach(t),j3r=r(kje," (LayoutLM model)"),kje.forEach(t),D3r=i(le),RC=n(le,"LI",{});var Sje=s(RC);I4e=n(Sje,"STRONG",{});var pSt=s(I4e);G3r=r(pSt,"lxmert"),pSt.forEach(t),O3r=r(Sje," \u2014 "),BJ=n(Sje,"A",{href:!0});var _St=s(BJ);V3r=r(_St,"TFLxmertForPreTraining"),_St.forEach(t),X3r=r(Sje," (LXMERT model)"),Sje.forEach(t),z3r=i(le),PC=n(le,"LI",{});var Rje=s(PC);N4e=n(Rje,"STRONG",{});var bSt=s(N4e);Q3r=r(bSt,"mobilebert"),bSt.forEach(t),W3r=r(Rje," \u2014 "),IJ=n(Rje,"A",{href:!0});var vSt=s(IJ);H3r=r(vSt,"TFMobileBertForPreTraining"),vSt.forEach(t),U3r=r(Rje," (MobileBERT model)"),Rje.forEach(t),J3r=i(le),BC=n(le,"LI",{});var Pje=s(BC);q4e=n(Pje,"STRONG",{});var FSt=s(q4e);Y3r=r(FSt,"mpnet"),FSt.forEach(t),K3r=r(Pje," \u2014 "),NJ=n(Pje,"A",{href:!0});var TSt=s(NJ);Z3r=r(TSt,"TFMPNetForMaskedLM"),TSt.forEach(t),e5r=r(Pje," (MPNet model)"),Pje.forEach(t),o5r=i(le),IC=n(le,"LI",{});var Bje=s(IC);j4e=n(Bje,"STRONG",{});var MSt=s(j4e);r5r=r(MSt,"openai-gpt"),MSt.forEach(t),t5r=r(Bje," \u2014 "),qJ=n(Bje,"A",{href:!0});var ESt=s(qJ);a5r=r(ESt,"TFOpenAIGPTLMHeadModel"),ESt.forEach(t),n5r=r(Bje," (OpenAI GPT model)"),Bje.forEach(t),s5r=i(le),NC=n(le,"LI",{});var Ije=s(NC);D4e=n(Ije,"STRONG",{});var CSt=s(D4e);l5r=r(CSt,"roberta"),CSt.forEach(t),i5r=r(Ije," \u2014 "),jJ=n(Ije,"A",{href:!0});var wSt=s(jJ);d5r=r(wSt,"TFRobertaForMaskedLM"),wSt.forEach(t),c5r=r(Ije," (RoBERTa model)"),Ije.forEach(t),m5r=i(le),qC=n(le,"LI",{});var Nje=s(qC);G4e=n(Nje,"STRONG",{});var ASt=s(G4e);f5r=r(ASt,"t5"),ASt.forEach(t),g5r=r(Nje," \u2014 "),DJ=n(Nje,"A",{href:!0});var LSt=s(DJ);h5r=r(LSt,"TFT5ForConditionalGeneration"),LSt.forEach(t),u5r=r(Nje," (T5 model)"),Nje.forEach(t),p5r=i(le),jC=n(le,"LI",{});var qje=s(jC);O4e=n(qje,"STRONG",{});var ySt=s(O4e);_5r=r(ySt,"tapas"),ySt.forEach(t),b5r=r(qje," \u2014 "),GJ=n(qje,"A",{href:!0});var xSt=s(GJ);v5r=r(xSt,"TFTapasForMaskedLM"),xSt.forEach(t),F5r=r(qje," (TAPAS model)"),qje.forEach(t),T5r=i(le),DC=n(le,"LI",{});var jje=s(DC);V4e=n(jje,"STRONG",{});var $St=s(V4e);M5r=r($St,"transfo-xl"),$St.forEach(t),E5r=r(jje," \u2014 "),OJ=n(jje,"A",{href:!0});var kSt=s(OJ);C5r=r(kSt,"TFTransfoXLLMHeadModel"),kSt.forEach(t),w5r=r(jje," (Transformer-XL model)"),jje.forEach(t),A5r=i(le),GC=n(le,"LI",{});var Dje=s(GC);X4e=n(Dje,"STRONG",{});var SSt=s(X4e);L5r=r(SSt,"vit_mae"),SSt.forEach(t),y5r=r(Dje," \u2014 "),VJ=n(Dje,"A",{href:!0});var RSt=s(VJ);x5r=r(RSt,"TFViTMAEForPreTraining"),RSt.forEach(t),$5r=r(Dje," (ViTMAE model)"),Dje.forEach(t),k5r=i(le),OC=n(le,"LI",{});var Gje=s(OC);z4e=n(Gje,"STRONG",{});var PSt=s(z4e);S5r=r(PSt,"xlm"),PSt.forEach(t),R5r=r(Gje," \u2014 "),XJ=n(Gje,"A",{href:!0});var BSt=s(XJ);P5r=r(BSt,"TFXLMWithLMHeadModel"),BSt.forEach(t),B5r=r(Gje," (XLM model)"),Gje.forEach(t),I5r=i(le),VC=n(le,"LI",{});var Oje=s(VC);Q4e=n(Oje,"STRONG",{});var ISt=s(Q4e);N5r=r(ISt,"xlm-roberta"),ISt.forEach(t),q5r=r(Oje," \u2014 "),zJ=n(Oje,"A",{href:!0});var NSt=s(zJ);j5r=r(NSt,"TFXLMRobertaForMaskedLM"),NSt.forEach(t),D5r=r(Oje," (XLM-RoBERTa model)"),Oje.forEach(t),G5r=i(le),XC=n(le,"LI",{});var Vje=s(XC);W4e=n(Vje,"STRONG",{});var qSt=s(W4e);O5r=r(qSt,"xlnet"),qSt.forEach(t),V5r=r(Vje," \u2014 "),QJ=n(Vje,"A",{href:!0});var jSt=s(QJ);X5r=r(jSt,"TFXLNetLMHeadModel"),jSt.forEach(t),z5r=r(Vje," (XLNet model)"),Vje.forEach(t),le.forEach(t),Q5r=i(Rl),T(zC.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),Rze=i(m),gc=n(m,"H2",{class:!0});var GWe=s(gc);QC=n(GWe,"A",{id:!0,class:!0,href:!0});var DSt=s(QC);H4e=n(DSt,"SPAN",{});var GSt=s(H4e);T(sx.$$.fragment,GSt),GSt.forEach(t),DSt.forEach(t),W5r=i(GWe),U4e=n(GWe,"SPAN",{});var OSt=s(U4e);H5r=r(OSt,"TFAutoModelForCausalLM"),OSt.forEach(t),GWe.forEach(t),Pze=i(m),ar=n(m,"DIV",{class:!0});var Pl=s(ar);T(lx.$$.fragment,Pl),U5r=i(Pl),hc=n(Pl,"P",{});var zte=s(hc);J5r=r(zte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WJ=n(zte,"A",{href:!0});var VSt=s(WJ);Y5r=r(VSt,"from_pretrained()"),VSt.forEach(t),K5r=r(zte," class method or the "),HJ=n(zte,"A",{href:!0});var XSt=s(HJ);Z5r=r(XSt,"from_config()"),XSt.forEach(t),e0r=r(zte,` class
method.`),zte.forEach(t),o0r=i(Pl),ix=n(Pl,"P",{});var OWe=s(ix);r0r=r(OWe,"This class cannot be instantiated directly using "),J4e=n(OWe,"CODE",{});var zSt=s(J4e);t0r=r(zSt,"__init__()"),zSt.forEach(t),a0r=r(OWe," (throws an error)."),OWe.forEach(t),n0r=i(Pl),Bt=n(Pl,"DIV",{class:!0});var fL=s(Bt);T(dx.$$.fragment,fL),s0r=i(fL),Y4e=n(fL,"P",{});var QSt=s(Y4e);l0r=r(QSt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),QSt.forEach(t),i0r=i(fL),uc=n(fL,"P",{});var Qte=s(uc);d0r=r(Qte,`Note:
Loading a model from its configuration file does `),K4e=n(Qte,"STRONG",{});var WSt=s(K4e);c0r=r(WSt,"not"),WSt.forEach(t),m0r=r(Qte,` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=n(Qte,"A",{href:!0});var HSt=s(UJ);f0r=r(HSt,"from_pretrained()"),HSt.forEach(t),g0r=r(Qte," to load the model weights."),Qte.forEach(t),h0r=i(fL),T(WC.$$.fragment,fL),fL.forEach(t),u0r=i(Pl),Sr=n(Pl,"DIV",{class:!0});var Bl=s(Sr);T(cx.$$.fragment,Bl),p0r=i(Bl),Z4e=n(Bl,"P",{});var USt=s(Z4e);_0r=r(USt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),USt.forEach(t),b0r=i(Bl),dn=n(Bl,"P",{});var gL=s(dn);v0r=r(gL,"The model class to instantiate is selected based on the "),eEe=n(gL,"CODE",{});var JSt=s(eEe);F0r=r(JSt,"model_type"),JSt.forEach(t),T0r=r(gL,` property of the config object (either
passed as an argument or loaded from `),oEe=n(gL,"CODE",{});var YSt=s(oEe);M0r=r(YSt,"pretrained_model_name_or_path"),YSt.forEach(t),E0r=r(gL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rEe=n(gL,"CODE",{});var KSt=s(rEe);C0r=r(KSt,"pretrained_model_name_or_path"),KSt.forEach(t),w0r=r(gL,":"),gL.forEach(t),A0r=i(Bl),Me=n(Bl,"UL",{});var Ce=s(Me);HC=n(Ce,"LI",{});var Xje=s(HC);tEe=n(Xje,"STRONG",{});var ZSt=s(tEe);L0r=r(ZSt,"bert"),ZSt.forEach(t),y0r=r(Xje," \u2014 "),JJ=n(Xje,"A",{href:!0});var eRt=s(JJ);x0r=r(eRt,"TFBertLMHeadModel"),eRt.forEach(t),$0r=r(Xje," (BERT model)"),Xje.forEach(t),k0r=i(Ce),UC=n(Ce,"LI",{});var zje=s(UC);aEe=n(zje,"STRONG",{});var oRt=s(aEe);S0r=r(oRt,"camembert"),oRt.forEach(t),R0r=r(zje," \u2014 "),YJ=n(zje,"A",{href:!0});var rRt=s(YJ);P0r=r(rRt,"TFCamembertForCausalLM"),rRt.forEach(t),B0r=r(zje," (CamemBERT model)"),zje.forEach(t),I0r=i(Ce),JC=n(Ce,"LI",{});var Qje=s(JC);nEe=n(Qje,"STRONG",{});var tRt=s(nEe);N0r=r(tRt,"ctrl"),tRt.forEach(t),q0r=r(Qje," \u2014 "),KJ=n(Qje,"A",{href:!0});var aRt=s(KJ);j0r=r(aRt,"TFCTRLLMHeadModel"),aRt.forEach(t),D0r=r(Qje," (CTRL model)"),Qje.forEach(t),G0r=i(Ce),YC=n(Ce,"LI",{});var Wje=s(YC);sEe=n(Wje,"STRONG",{});var nRt=s(sEe);O0r=r(nRt,"gpt2"),nRt.forEach(t),V0r=r(Wje," \u2014 "),ZJ=n(Wje,"A",{href:!0});var sRt=s(ZJ);X0r=r(sRt,"TFGPT2LMHeadModel"),sRt.forEach(t),z0r=r(Wje," (OpenAI GPT-2 model)"),Wje.forEach(t),Q0r=i(Ce),KC=n(Ce,"LI",{});var Hje=s(KC);lEe=n(Hje,"STRONG",{});var lRt=s(lEe);W0r=r(lRt,"gptj"),lRt.forEach(t),H0r=r(Hje," \u2014 "),eY=n(Hje,"A",{href:!0});var iRt=s(eY);U0r=r(iRt,"TFGPTJForCausalLM"),iRt.forEach(t),J0r=r(Hje," (GPT-J model)"),Hje.forEach(t),Y0r=i(Ce),ZC=n(Ce,"LI",{});var Uje=s(ZC);iEe=n(Uje,"STRONG",{});var dRt=s(iEe);K0r=r(dRt,"openai-gpt"),dRt.forEach(t),Z0r=r(Uje," \u2014 "),oY=n(Uje,"A",{href:!0});var cRt=s(oY);ewr=r(cRt,"TFOpenAIGPTLMHeadModel"),cRt.forEach(t),owr=r(Uje," (OpenAI GPT model)"),Uje.forEach(t),rwr=i(Ce),e3=n(Ce,"LI",{});var Jje=s(e3);dEe=n(Jje,"STRONG",{});var mRt=s(dEe);twr=r(mRt,"opt"),mRt.forEach(t),awr=r(Jje," \u2014 "),rY=n(Jje,"A",{href:!0});var fRt=s(rY);nwr=r(fRt,"TFOPTForCausalLM"),fRt.forEach(t),swr=r(Jje," (OPT model)"),Jje.forEach(t),lwr=i(Ce),o3=n(Ce,"LI",{});var Yje=s(o3);cEe=n(Yje,"STRONG",{});var gRt=s(cEe);iwr=r(gRt,"rembert"),gRt.forEach(t),dwr=r(Yje," \u2014 "),tY=n(Yje,"A",{href:!0});var hRt=s(tY);cwr=r(hRt,"TFRemBertForCausalLM"),hRt.forEach(t),mwr=r(Yje," (RemBERT model)"),Yje.forEach(t),fwr=i(Ce),r3=n(Ce,"LI",{});var Kje=s(r3);mEe=n(Kje,"STRONG",{});var uRt=s(mEe);gwr=r(uRt,"roberta"),uRt.forEach(t),hwr=r(Kje," \u2014 "),aY=n(Kje,"A",{href:!0});var pRt=s(aY);uwr=r(pRt,"TFRobertaForCausalLM"),pRt.forEach(t),pwr=r(Kje," (RoBERTa model)"),Kje.forEach(t),_wr=i(Ce),t3=n(Ce,"LI",{});var Zje=s(t3);fEe=n(Zje,"STRONG",{});var _Rt=s(fEe);bwr=r(_Rt,"roformer"),_Rt.forEach(t),vwr=r(Zje," \u2014 "),nY=n(Zje,"A",{href:!0});var bRt=s(nY);Fwr=r(bRt,"TFRoFormerForCausalLM"),bRt.forEach(t),Twr=r(Zje," (RoFormer model)"),Zje.forEach(t),Mwr=i(Ce),a3=n(Ce,"LI",{});var eDe=s(a3);gEe=n(eDe,"STRONG",{});var vRt=s(gEe);Ewr=r(vRt,"transfo-xl"),vRt.forEach(t),Cwr=r(eDe," \u2014 "),sY=n(eDe,"A",{href:!0});var FRt=s(sY);wwr=r(FRt,"TFTransfoXLLMHeadModel"),FRt.forEach(t),Awr=r(eDe," (Transformer-XL model)"),eDe.forEach(t),Lwr=i(Ce),n3=n(Ce,"LI",{});var oDe=s(n3);hEe=n(oDe,"STRONG",{});var TRt=s(hEe);ywr=r(TRt,"xlm"),TRt.forEach(t),xwr=r(oDe," \u2014 "),lY=n(oDe,"A",{href:!0});var MRt=s(lY);$wr=r(MRt,"TFXLMWithLMHeadModel"),MRt.forEach(t),kwr=r(oDe," (XLM model)"),oDe.forEach(t),Swr=i(Ce),s3=n(Ce,"LI",{});var rDe=s(s3);uEe=n(rDe,"STRONG",{});var ERt=s(uEe);Rwr=r(ERt,"xlnet"),ERt.forEach(t),Pwr=r(rDe," \u2014 "),iY=n(rDe,"A",{href:!0});var CRt=s(iY);Bwr=r(CRt,"TFXLNetLMHeadModel"),CRt.forEach(t),Iwr=r(rDe," (XLNet model)"),rDe.forEach(t),Ce.forEach(t),Nwr=i(Bl),T(l3.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),Bze=i(m),pc=n(m,"H2",{class:!0});var VWe=s(pc);i3=n(VWe,"A",{id:!0,class:!0,href:!0});var wRt=s(i3);pEe=n(wRt,"SPAN",{});var ARt=s(pEe);T(mx.$$.fragment,ARt),ARt.forEach(t),wRt.forEach(t),qwr=i(VWe),_Ee=n(VWe,"SPAN",{});var LRt=s(_Ee);jwr=r(LRt,"TFAutoModelForImageClassification"),LRt.forEach(t),VWe.forEach(t),Ize=i(m),nr=n(m,"DIV",{class:!0});var Il=s(nr);T(fx.$$.fragment,Il),Dwr=i(Il),_c=n(Il,"P",{});var Wte=s(_c);Gwr=r(Wte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dY=n(Wte,"A",{href:!0});var yRt=s(dY);Owr=r(yRt,"from_pretrained()"),yRt.forEach(t),Vwr=r(Wte," class method or the "),cY=n(Wte,"A",{href:!0});var xRt=s(cY);Xwr=r(xRt,"from_config()"),xRt.forEach(t),zwr=r(Wte,` class
method.`),Wte.forEach(t),Qwr=i(Il),gx=n(Il,"P",{});var XWe=s(gx);Wwr=r(XWe,"This class cannot be instantiated directly using "),bEe=n(XWe,"CODE",{});var $Rt=s(bEe);Hwr=r($Rt,"__init__()"),$Rt.forEach(t),Uwr=r(XWe," (throws an error)."),XWe.forEach(t),Jwr=i(Il),It=n(Il,"DIV",{class:!0});var hL=s(It);T(hx.$$.fragment,hL),Ywr=i(hL),vEe=n(hL,"P",{});var kRt=s(vEe);Kwr=r(kRt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kRt.forEach(t),Zwr=i(hL),bc=n(hL,"P",{});var Hte=s(bc);eAr=r(Hte,`Note:
Loading a model from its configuration file does `),FEe=n(Hte,"STRONG",{});var SRt=s(FEe);oAr=r(SRt,"not"),SRt.forEach(t),rAr=r(Hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=n(Hte,"A",{href:!0});var RRt=s(mY);tAr=r(RRt,"from_pretrained()"),RRt.forEach(t),aAr=r(Hte," to load the model weights."),Hte.forEach(t),nAr=i(hL),T(d3.$$.fragment,hL),hL.forEach(t),sAr=i(Il),Rr=n(Il,"DIV",{class:!0});var Nl=s(Rr);T(ux.$$.fragment,Nl),lAr=i(Nl),TEe=n(Nl,"P",{});var PRt=s(TEe);iAr=r(PRt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),PRt.forEach(t),dAr=i(Nl),cn=n(Nl,"P",{});var uL=s(cn);cAr=r(uL,"The model class to instantiate is selected based on the "),MEe=n(uL,"CODE",{});var BRt=s(MEe);mAr=r(BRt,"model_type"),BRt.forEach(t),fAr=r(uL,` property of the config object (either
passed as an argument or loaded from `),EEe=n(uL,"CODE",{});var IRt=s(EEe);gAr=r(IRt,"pretrained_model_name_or_path"),IRt.forEach(t),hAr=r(uL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CEe=n(uL,"CODE",{});var NRt=s(CEe);uAr=r(NRt,"pretrained_model_name_or_path"),NRt.forEach(t),pAr=r(uL,":"),uL.forEach(t),_Ar=i(Nl),Ve=n(Nl,"UL",{});var Mo=s(Ve);c3=n(Mo,"LI",{});var tDe=s(c3);wEe=n(tDe,"STRONG",{});var qRt=s(wEe);bAr=r(qRt,"convnext"),qRt.forEach(t),vAr=r(tDe," \u2014 "),fY=n(tDe,"A",{href:!0});var jRt=s(fY);FAr=r(jRt,"TFConvNextForImageClassification"),jRt.forEach(t),TAr=r(tDe," (ConvNeXT model)"),tDe.forEach(t),MAr=i(Mo),m3=n(Mo,"LI",{});var aDe=s(m3);AEe=n(aDe,"STRONG",{});var DRt=s(AEe);EAr=r(DRt,"data2vec-vision"),DRt.forEach(t),CAr=r(aDe," \u2014 "),gY=n(aDe,"A",{href:!0});var GRt=s(gY);wAr=r(GRt,"TFData2VecVisionForImageClassification"),GRt.forEach(t),AAr=r(aDe," (Data2VecVision model)"),aDe.forEach(t),LAr=i(Mo),Ks=n(Mo,"LI",{});var GS=s(Ks);LEe=n(GS,"STRONG",{});var ORt=s(LEe);yAr=r(ORt,"deit"),ORt.forEach(t),xAr=r(GS," \u2014 "),hY=n(GS,"A",{href:!0});var VRt=s(hY);$Ar=r(VRt,"TFDeiTForImageClassification"),VRt.forEach(t),kAr=r(GS," or "),uY=n(GS,"A",{href:!0});var XRt=s(uY);SAr=r(XRt,"TFDeiTForImageClassificationWithTeacher"),XRt.forEach(t),RAr=r(GS," (DeiT model)"),GS.forEach(t),PAr=i(Mo),f3=n(Mo,"LI",{});var nDe=s(f3);yEe=n(nDe,"STRONG",{});var zRt=s(yEe);BAr=r(zRt,"regnet"),zRt.forEach(t),IAr=r(nDe," \u2014 "),pY=n(nDe,"A",{href:!0});var QRt=s(pY);NAr=r(QRt,"TFRegNetForImageClassification"),QRt.forEach(t),qAr=r(nDe," (RegNet model)"),nDe.forEach(t),jAr=i(Mo),g3=n(Mo,"LI",{});var sDe=s(g3);xEe=n(sDe,"STRONG",{});var WRt=s(xEe);DAr=r(WRt,"resnet"),WRt.forEach(t),GAr=r(sDe," \u2014 "),_Y=n(sDe,"A",{href:!0});var HRt=s(_Y);OAr=r(HRt,"TFResNetForImageClassification"),HRt.forEach(t),VAr=r(sDe," (ResNet model)"),sDe.forEach(t),XAr=i(Mo),h3=n(Mo,"LI",{});var lDe=s(h3);$Ee=n(lDe,"STRONG",{});var URt=s($Ee);zAr=r(URt,"segformer"),URt.forEach(t),QAr=r(lDe," \u2014 "),bY=n(lDe,"A",{href:!0});var JRt=s(bY);WAr=r(JRt,"TFSegformerForImageClassification"),JRt.forEach(t),HAr=r(lDe," (SegFormer model)"),lDe.forEach(t),UAr=i(Mo),u3=n(Mo,"LI",{});var iDe=s(u3);kEe=n(iDe,"STRONG",{});var YRt=s(kEe);JAr=r(YRt,"swin"),YRt.forEach(t),YAr=r(iDe," \u2014 "),vY=n(iDe,"A",{href:!0});var KRt=s(vY);KAr=r(KRt,"TFSwinForImageClassification"),KRt.forEach(t),ZAr=r(iDe," (Swin Transformer model)"),iDe.forEach(t),e6r=i(Mo),p3=n(Mo,"LI",{});var dDe=s(p3);SEe=n(dDe,"STRONG",{});var ZRt=s(SEe);o6r=r(ZRt,"vit"),ZRt.forEach(t),r6r=r(dDe," \u2014 "),FY=n(dDe,"A",{href:!0});var ePt=s(FY);t6r=r(ePt,"TFViTForImageClassification"),ePt.forEach(t),a6r=r(dDe," (ViT model)"),dDe.forEach(t),Mo.forEach(t),n6r=i(Nl),T(_3.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),Nze=i(m),vc=n(m,"H2",{class:!0});var zWe=s(vc);b3=n(zWe,"A",{id:!0,class:!0,href:!0});var oPt=s(b3);REe=n(oPt,"SPAN",{});var rPt=s(REe);T(px.$$.fragment,rPt),rPt.forEach(t),oPt.forEach(t),s6r=i(zWe),PEe=n(zWe,"SPAN",{});var tPt=s(PEe);l6r=r(tPt,"TFAutoModelForMaskedLM"),tPt.forEach(t),zWe.forEach(t),qze=i(m),sr=n(m,"DIV",{class:!0});var ql=s(sr);T(_x.$$.fragment,ql),i6r=i(ql),Fc=n(ql,"P",{});var Ute=s(Fc);d6r=r(Ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TY=n(Ute,"A",{href:!0});var aPt=s(TY);c6r=r(aPt,"from_pretrained()"),aPt.forEach(t),m6r=r(Ute," class method or the "),MY=n(Ute,"A",{href:!0});var nPt=s(MY);f6r=r(nPt,"from_config()"),nPt.forEach(t),g6r=r(Ute,` class
method.`),Ute.forEach(t),h6r=i(ql),bx=n(ql,"P",{});var QWe=s(bx);u6r=r(QWe,"This class cannot be instantiated directly using "),BEe=n(QWe,"CODE",{});var sPt=s(BEe);p6r=r(sPt,"__init__()"),sPt.forEach(t),_6r=r(QWe," (throws an error)."),QWe.forEach(t),b6r=i(ql),Nt=n(ql,"DIV",{class:!0});var pL=s(Nt);T(vx.$$.fragment,pL),v6r=i(pL),IEe=n(pL,"P",{});var lPt=s(IEe);F6r=r(lPt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lPt.forEach(t),T6r=i(pL),Tc=n(pL,"P",{});var Jte=s(Tc);M6r=r(Jte,`Note:
Loading a model from its configuration file does `),NEe=n(Jte,"STRONG",{});var iPt=s(NEe);E6r=r(iPt,"not"),iPt.forEach(t),C6r=r(Jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=n(Jte,"A",{href:!0});var dPt=s(EY);w6r=r(dPt,"from_pretrained()"),dPt.forEach(t),A6r=r(Jte," to load the model weights."),Jte.forEach(t),L6r=i(pL),T(v3.$$.fragment,pL),pL.forEach(t),y6r=i(ql),Pr=n(ql,"DIV",{class:!0});var jl=s(Pr);T(Fx.$$.fragment,jl),x6r=i(jl),qEe=n(jl,"P",{});var cPt=s(qEe);$6r=r(cPt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cPt.forEach(t),k6r=i(jl),mn=n(jl,"P",{});var _L=s(mn);S6r=r(_L,"The model class to instantiate is selected based on the "),jEe=n(_L,"CODE",{});var mPt=s(jEe);R6r=r(mPt,"model_type"),mPt.forEach(t),P6r=r(_L,` property of the config object (either
passed as an argument or loaded from `),DEe=n(_L,"CODE",{});var fPt=s(DEe);B6r=r(fPt,"pretrained_model_name_or_path"),fPt.forEach(t),I6r=r(_L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GEe=n(_L,"CODE",{});var gPt=s(GEe);N6r=r(gPt,"pretrained_model_name_or_path"),gPt.forEach(t),q6r=r(_L,":"),_L.forEach(t),j6r=i(jl),ie=n(jl,"UL",{});var fe=s(ie);F3=n(fe,"LI",{});var cDe=s(F3);OEe=n(cDe,"STRONG",{});var hPt=s(OEe);D6r=r(hPt,"albert"),hPt.forEach(t),G6r=r(cDe," \u2014 "),CY=n(cDe,"A",{href:!0});var uPt=s(CY);O6r=r(uPt,"TFAlbertForMaskedLM"),uPt.forEach(t),V6r=r(cDe," (ALBERT model)"),cDe.forEach(t),X6r=i(fe),T3=n(fe,"LI",{});var mDe=s(T3);VEe=n(mDe,"STRONG",{});var pPt=s(VEe);z6r=r(pPt,"bert"),pPt.forEach(t),Q6r=r(mDe," \u2014 "),wY=n(mDe,"A",{href:!0});var _Pt=s(wY);W6r=r(_Pt,"TFBertForMaskedLM"),_Pt.forEach(t),H6r=r(mDe," (BERT model)"),mDe.forEach(t),U6r=i(fe),M3=n(fe,"LI",{});var fDe=s(M3);XEe=n(fDe,"STRONG",{});var bPt=s(XEe);J6r=r(bPt,"camembert"),bPt.forEach(t),Y6r=r(fDe," \u2014 "),AY=n(fDe,"A",{href:!0});var vPt=s(AY);K6r=r(vPt,"TFCamembertForMaskedLM"),vPt.forEach(t),Z6r=r(fDe," (CamemBERT model)"),fDe.forEach(t),e7r=i(fe),E3=n(fe,"LI",{});var gDe=s(E3);zEe=n(gDe,"STRONG",{});var FPt=s(zEe);o7r=r(FPt,"convbert"),FPt.forEach(t),r7r=r(gDe," \u2014 "),LY=n(gDe,"A",{href:!0});var TPt=s(LY);t7r=r(TPt,"TFConvBertForMaskedLM"),TPt.forEach(t),a7r=r(gDe," (ConvBERT model)"),gDe.forEach(t),n7r=i(fe),C3=n(fe,"LI",{});var hDe=s(C3);QEe=n(hDe,"STRONG",{});var MPt=s(QEe);s7r=r(MPt,"deberta"),MPt.forEach(t),l7r=r(hDe," \u2014 "),yY=n(hDe,"A",{href:!0});var EPt=s(yY);i7r=r(EPt,"TFDebertaForMaskedLM"),EPt.forEach(t),d7r=r(hDe," (DeBERTa model)"),hDe.forEach(t),c7r=i(fe),w3=n(fe,"LI",{});var uDe=s(w3);WEe=n(uDe,"STRONG",{});var CPt=s(WEe);m7r=r(CPt,"deberta-v2"),CPt.forEach(t),f7r=r(uDe," \u2014 "),xY=n(uDe,"A",{href:!0});var wPt=s(xY);g7r=r(wPt,"TFDebertaV2ForMaskedLM"),wPt.forEach(t),h7r=r(uDe," (DeBERTa-v2 model)"),uDe.forEach(t),u7r=i(fe),A3=n(fe,"LI",{});var pDe=s(A3);HEe=n(pDe,"STRONG",{});var APt=s(HEe);p7r=r(APt,"distilbert"),APt.forEach(t),_7r=r(pDe," \u2014 "),$Y=n(pDe,"A",{href:!0});var LPt=s($Y);b7r=r(LPt,"TFDistilBertForMaskedLM"),LPt.forEach(t),v7r=r(pDe," (DistilBERT model)"),pDe.forEach(t),F7r=i(fe),L3=n(fe,"LI",{});var _De=s(L3);UEe=n(_De,"STRONG",{});var yPt=s(UEe);T7r=r(yPt,"electra"),yPt.forEach(t),M7r=r(_De," \u2014 "),kY=n(_De,"A",{href:!0});var xPt=s(kY);E7r=r(xPt,"TFElectraForMaskedLM"),xPt.forEach(t),C7r=r(_De," (ELECTRA model)"),_De.forEach(t),w7r=i(fe),y3=n(fe,"LI",{});var bDe=s(y3);JEe=n(bDe,"STRONG",{});var $Pt=s(JEe);A7r=r($Pt,"flaubert"),$Pt.forEach(t),L7r=r(bDe," \u2014 "),SY=n(bDe,"A",{href:!0});var kPt=s(SY);y7r=r(kPt,"TFFlaubertWithLMHeadModel"),kPt.forEach(t),x7r=r(bDe," (FlauBERT model)"),bDe.forEach(t),$7r=i(fe),x3=n(fe,"LI",{});var vDe=s(x3);YEe=n(vDe,"STRONG",{});var SPt=s(YEe);k7r=r(SPt,"funnel"),SPt.forEach(t),S7r=r(vDe," \u2014 "),RY=n(vDe,"A",{href:!0});var RPt=s(RY);R7r=r(RPt,"TFFunnelForMaskedLM"),RPt.forEach(t),P7r=r(vDe," (Funnel Transformer model)"),vDe.forEach(t),B7r=i(fe),$3=n(fe,"LI",{});var FDe=s($3);KEe=n(FDe,"STRONG",{});var PPt=s(KEe);I7r=r(PPt,"layoutlm"),PPt.forEach(t),N7r=r(FDe," \u2014 "),PY=n(FDe,"A",{href:!0});var BPt=s(PY);q7r=r(BPt,"TFLayoutLMForMaskedLM"),BPt.forEach(t),j7r=r(FDe," (LayoutLM model)"),FDe.forEach(t),D7r=i(fe),k3=n(fe,"LI",{});var TDe=s(k3);ZEe=n(TDe,"STRONG",{});var IPt=s(ZEe);G7r=r(IPt,"longformer"),IPt.forEach(t),O7r=r(TDe," \u2014 "),BY=n(TDe,"A",{href:!0});var NPt=s(BY);V7r=r(NPt,"TFLongformerForMaskedLM"),NPt.forEach(t),X7r=r(TDe," (Longformer model)"),TDe.forEach(t),z7r=i(fe),S3=n(fe,"LI",{});var MDe=s(S3);eCe=n(MDe,"STRONG",{});var qPt=s(eCe);Q7r=r(qPt,"mobilebert"),qPt.forEach(t),W7r=r(MDe," \u2014 "),IY=n(MDe,"A",{href:!0});var jPt=s(IY);H7r=r(jPt,"TFMobileBertForMaskedLM"),jPt.forEach(t),U7r=r(MDe," (MobileBERT model)"),MDe.forEach(t),J7r=i(fe),R3=n(fe,"LI",{});var EDe=s(R3);oCe=n(EDe,"STRONG",{});var DPt=s(oCe);Y7r=r(DPt,"mpnet"),DPt.forEach(t),K7r=r(EDe," \u2014 "),NY=n(EDe,"A",{href:!0});var GPt=s(NY);Z7r=r(GPt,"TFMPNetForMaskedLM"),GPt.forEach(t),eLr=r(EDe," (MPNet model)"),EDe.forEach(t),oLr=i(fe),P3=n(fe,"LI",{});var CDe=s(P3);rCe=n(CDe,"STRONG",{});var OPt=s(rCe);rLr=r(OPt,"rembert"),OPt.forEach(t),tLr=r(CDe," \u2014 "),qY=n(CDe,"A",{href:!0});var VPt=s(qY);aLr=r(VPt,"TFRemBertForMaskedLM"),VPt.forEach(t),nLr=r(CDe," (RemBERT model)"),CDe.forEach(t),sLr=i(fe),B3=n(fe,"LI",{});var wDe=s(B3);tCe=n(wDe,"STRONG",{});var XPt=s(tCe);lLr=r(XPt,"roberta"),XPt.forEach(t),iLr=r(wDe," \u2014 "),jY=n(wDe,"A",{href:!0});var zPt=s(jY);dLr=r(zPt,"TFRobertaForMaskedLM"),zPt.forEach(t),cLr=r(wDe," (RoBERTa model)"),wDe.forEach(t),mLr=i(fe),I3=n(fe,"LI",{});var ADe=s(I3);aCe=n(ADe,"STRONG",{});var QPt=s(aCe);fLr=r(QPt,"roformer"),QPt.forEach(t),gLr=r(ADe," \u2014 "),DY=n(ADe,"A",{href:!0});var WPt=s(DY);hLr=r(WPt,"TFRoFormerForMaskedLM"),WPt.forEach(t),uLr=r(ADe," (RoFormer model)"),ADe.forEach(t),pLr=i(fe),N3=n(fe,"LI",{});var LDe=s(N3);nCe=n(LDe,"STRONG",{});var HPt=s(nCe);_Lr=r(HPt,"tapas"),HPt.forEach(t),bLr=r(LDe," \u2014 "),GY=n(LDe,"A",{href:!0});var UPt=s(GY);vLr=r(UPt,"TFTapasForMaskedLM"),UPt.forEach(t),FLr=r(LDe," (TAPAS model)"),LDe.forEach(t),TLr=i(fe),q3=n(fe,"LI",{});var yDe=s(q3);sCe=n(yDe,"STRONG",{});var JPt=s(sCe);MLr=r(JPt,"xlm"),JPt.forEach(t),ELr=r(yDe," \u2014 "),OY=n(yDe,"A",{href:!0});var YPt=s(OY);CLr=r(YPt,"TFXLMWithLMHeadModel"),YPt.forEach(t),wLr=r(yDe," (XLM model)"),yDe.forEach(t),ALr=i(fe),j3=n(fe,"LI",{});var xDe=s(j3);lCe=n(xDe,"STRONG",{});var KPt=s(lCe);LLr=r(KPt,"xlm-roberta"),KPt.forEach(t),yLr=r(xDe," \u2014 "),VY=n(xDe,"A",{href:!0});var ZPt=s(VY);xLr=r(ZPt,"TFXLMRobertaForMaskedLM"),ZPt.forEach(t),$Lr=r(xDe," (XLM-RoBERTa model)"),xDe.forEach(t),fe.forEach(t),kLr=i(jl),T(D3.$$.fragment,jl),jl.forEach(t),ql.forEach(t),jze=i(m),Mc=n(m,"H2",{class:!0});var WWe=s(Mc);G3=n(WWe,"A",{id:!0,class:!0,href:!0});var eBt=s(G3);iCe=n(eBt,"SPAN",{});var oBt=s(iCe);T(Tx.$$.fragment,oBt),oBt.forEach(t),eBt.forEach(t),SLr=i(WWe),dCe=n(WWe,"SPAN",{});var rBt=s(dCe);RLr=r(rBt,"TFAutoModelForSeq2SeqLM"),rBt.forEach(t),WWe.forEach(t),Dze=i(m),lr=n(m,"DIV",{class:!0});var Dl=s(lr);T(Mx.$$.fragment,Dl),PLr=i(Dl),Ec=n(Dl,"P",{});var Yte=s(Ec);BLr=r(Yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),XY=n(Yte,"A",{href:!0});var tBt=s(XY);ILr=r(tBt,"from_pretrained()"),tBt.forEach(t),NLr=r(Yte," class method or the "),zY=n(Yte,"A",{href:!0});var aBt=s(zY);qLr=r(aBt,"from_config()"),aBt.forEach(t),jLr=r(Yte,` class
method.`),Yte.forEach(t),DLr=i(Dl),Ex=n(Dl,"P",{});var HWe=s(Ex);GLr=r(HWe,"This class cannot be instantiated directly using "),cCe=n(HWe,"CODE",{});var nBt=s(cCe);OLr=r(nBt,"__init__()"),nBt.forEach(t),VLr=r(HWe," (throws an error)."),HWe.forEach(t),XLr=i(Dl),qt=n(Dl,"DIV",{class:!0});var bL=s(qt);T(Cx.$$.fragment,bL),zLr=i(bL),mCe=n(bL,"P",{});var sBt=s(mCe);QLr=r(sBt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),sBt.forEach(t),WLr=i(bL),Cc=n(bL,"P",{});var Kte=s(Cc);HLr=r(Kte,`Note:
Loading a model from its configuration file does `),fCe=n(Kte,"STRONG",{});var lBt=s(fCe);ULr=r(lBt,"not"),lBt.forEach(t),JLr=r(Kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=n(Kte,"A",{href:!0});var iBt=s(QY);YLr=r(iBt,"from_pretrained()"),iBt.forEach(t),KLr=r(Kte," to load the model weights."),Kte.forEach(t),ZLr=i(bL),T(O3.$$.fragment,bL),bL.forEach(t),eyr=i(Dl),Br=n(Dl,"DIV",{class:!0});var Gl=s(Br);T(wx.$$.fragment,Gl),oyr=i(Gl),gCe=n(Gl,"P",{});var dBt=s(gCe);ryr=r(dBt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dBt.forEach(t),tyr=i(Gl),fn=n(Gl,"P",{});var vL=s(fn);ayr=r(vL,"The model class to instantiate is selected based on the "),hCe=n(vL,"CODE",{});var cBt=s(hCe);nyr=r(cBt,"model_type"),cBt.forEach(t),syr=r(vL,` property of the config object (either
passed as an argument or loaded from `),uCe=n(vL,"CODE",{});var mBt=s(uCe);lyr=r(mBt,"pretrained_model_name_or_path"),mBt.forEach(t),iyr=r(vL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pCe=n(vL,"CODE",{});var fBt=s(pCe);dyr=r(fBt,"pretrained_model_name_or_path"),fBt.forEach(t),cyr=r(vL,":"),vL.forEach(t),myr=i(Gl),ye=n(Gl,"UL",{});var Ie=s(ye);V3=n(Ie,"LI",{});var $De=s(V3);_Ce=n($De,"STRONG",{});var gBt=s(_Ce);fyr=r(gBt,"bart"),gBt.forEach(t),gyr=r($De," \u2014 "),WY=n($De,"A",{href:!0});var hBt=s(WY);hyr=r(hBt,"TFBartForConditionalGeneration"),hBt.forEach(t),uyr=r($De," (BART model)"),$De.forEach(t),pyr=i(Ie),X3=n(Ie,"LI",{});var kDe=s(X3);bCe=n(kDe,"STRONG",{});var uBt=s(bCe);_yr=r(uBt,"blenderbot"),uBt.forEach(t),byr=r(kDe," \u2014 "),HY=n(kDe,"A",{href:!0});var pBt=s(HY);vyr=r(pBt,"TFBlenderbotForConditionalGeneration"),pBt.forEach(t),Fyr=r(kDe," (Blenderbot model)"),kDe.forEach(t),Tyr=i(Ie),z3=n(Ie,"LI",{});var SDe=s(z3);vCe=n(SDe,"STRONG",{});var _Bt=s(vCe);Myr=r(_Bt,"blenderbot-small"),_Bt.forEach(t),Eyr=r(SDe," \u2014 "),UY=n(SDe,"A",{href:!0});var bBt=s(UY);Cyr=r(bBt,"TFBlenderbotSmallForConditionalGeneration"),bBt.forEach(t),wyr=r(SDe," (BlenderbotSmall model)"),SDe.forEach(t),Ayr=i(Ie),Q3=n(Ie,"LI",{});var RDe=s(Q3);FCe=n(RDe,"STRONG",{});var vBt=s(FCe);Lyr=r(vBt,"encoder-decoder"),vBt.forEach(t),yyr=r(RDe," \u2014 "),JY=n(RDe,"A",{href:!0});var FBt=s(JY);xyr=r(FBt,"TFEncoderDecoderModel"),FBt.forEach(t),$yr=r(RDe," (Encoder decoder model)"),RDe.forEach(t),kyr=i(Ie),W3=n(Ie,"LI",{});var PDe=s(W3);TCe=n(PDe,"STRONG",{});var TBt=s(TCe);Syr=r(TBt,"led"),TBt.forEach(t),Ryr=r(PDe," \u2014 "),YY=n(PDe,"A",{href:!0});var MBt=s(YY);Pyr=r(MBt,"TFLEDForConditionalGeneration"),MBt.forEach(t),Byr=r(PDe," (LED model)"),PDe.forEach(t),Iyr=i(Ie),H3=n(Ie,"LI",{});var BDe=s(H3);MCe=n(BDe,"STRONG",{});var EBt=s(MCe);Nyr=r(EBt,"marian"),EBt.forEach(t),qyr=r(BDe," \u2014 "),KY=n(BDe,"A",{href:!0});var CBt=s(KY);jyr=r(CBt,"TFMarianMTModel"),CBt.forEach(t),Dyr=r(BDe," (Marian model)"),BDe.forEach(t),Gyr=i(Ie),U3=n(Ie,"LI",{});var IDe=s(U3);ECe=n(IDe,"STRONG",{});var wBt=s(ECe);Oyr=r(wBt,"mbart"),wBt.forEach(t),Vyr=r(IDe," \u2014 "),ZY=n(IDe,"A",{href:!0});var ABt=s(ZY);Xyr=r(ABt,"TFMBartForConditionalGeneration"),ABt.forEach(t),zyr=r(IDe," (mBART model)"),IDe.forEach(t),Qyr=i(Ie),J3=n(Ie,"LI",{});var NDe=s(J3);CCe=n(NDe,"STRONG",{});var LBt=s(CCe);Wyr=r(LBt,"mt5"),LBt.forEach(t),Hyr=r(NDe," \u2014 "),eK=n(NDe,"A",{href:!0});var yBt=s(eK);Uyr=r(yBt,"TFMT5ForConditionalGeneration"),yBt.forEach(t),Jyr=r(NDe," (MT5 model)"),NDe.forEach(t),Yyr=i(Ie),Y3=n(Ie,"LI",{});var qDe=s(Y3);wCe=n(qDe,"STRONG",{});var xBt=s(wCe);Kyr=r(xBt,"pegasus"),xBt.forEach(t),Zyr=r(qDe," \u2014 "),oK=n(qDe,"A",{href:!0});var $Bt=s(oK);e8r=r($Bt,"TFPegasusForConditionalGeneration"),$Bt.forEach(t),o8r=r(qDe," (Pegasus model)"),qDe.forEach(t),r8r=i(Ie),K3=n(Ie,"LI",{});var jDe=s(K3);ACe=n(jDe,"STRONG",{});var kBt=s(ACe);t8r=r(kBt,"t5"),kBt.forEach(t),a8r=r(jDe," \u2014 "),rK=n(jDe,"A",{href:!0});var SBt=s(rK);n8r=r(SBt,"TFT5ForConditionalGeneration"),SBt.forEach(t),s8r=r(jDe," (T5 model)"),jDe.forEach(t),Ie.forEach(t),l8r=i(Gl),T(Z3.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),Gze=i(m),wc=n(m,"H2",{class:!0});var UWe=s(wc);e5=n(UWe,"A",{id:!0,class:!0,href:!0});var RBt=s(e5);LCe=n(RBt,"SPAN",{});var PBt=s(LCe);T(Ax.$$.fragment,PBt),PBt.forEach(t),RBt.forEach(t),i8r=i(UWe),yCe=n(UWe,"SPAN",{});var BBt=s(yCe);d8r=r(BBt,"TFAutoModelForSequenceClassification"),BBt.forEach(t),UWe.forEach(t),Oze=i(m),ir=n(m,"DIV",{class:!0});var Ol=s(ir);T(Lx.$$.fragment,Ol),c8r=i(Ol),Ac=n(Ol,"P",{});var Zte=s(Ac);m8r=r(Zte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tK=n(Zte,"A",{href:!0});var IBt=s(tK);f8r=r(IBt,"from_pretrained()"),IBt.forEach(t),g8r=r(Zte," class method or the "),aK=n(Zte,"A",{href:!0});var NBt=s(aK);h8r=r(NBt,"from_config()"),NBt.forEach(t),u8r=r(Zte,` class
method.`),Zte.forEach(t),p8r=i(Ol),yx=n(Ol,"P",{});var JWe=s(yx);_8r=r(JWe,"This class cannot be instantiated directly using "),xCe=n(JWe,"CODE",{});var qBt=s(xCe);b8r=r(qBt,"__init__()"),qBt.forEach(t),v8r=r(JWe," (throws an error)."),JWe.forEach(t),F8r=i(Ol),jt=n(Ol,"DIV",{class:!0});var FL=s(jt);T(xx.$$.fragment,FL),T8r=i(FL),$Ce=n(FL,"P",{});var jBt=s($Ce);M8r=r(jBt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jBt.forEach(t),E8r=i(FL),Lc=n(FL,"P",{});var eae=s(Lc);C8r=r(eae,`Note:
Loading a model from its configuration file does `),kCe=n(eae,"STRONG",{});var DBt=s(kCe);w8r=r(DBt,"not"),DBt.forEach(t),A8r=r(eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),nK=n(eae,"A",{href:!0});var GBt=s(nK);L8r=r(GBt,"from_pretrained()"),GBt.forEach(t),y8r=r(eae," to load the model weights."),eae.forEach(t),x8r=i(FL),T(o5.$$.fragment,FL),FL.forEach(t),$8r=i(Ol),Ir=n(Ol,"DIV",{class:!0});var Vl=s(Ir);T($x.$$.fragment,Vl),k8r=i(Vl),SCe=n(Vl,"P",{});var OBt=s(SCe);S8r=r(OBt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),OBt.forEach(t),R8r=i(Vl),gn=n(Vl,"P",{});var TL=s(gn);P8r=r(TL,"The model class to instantiate is selected based on the "),RCe=n(TL,"CODE",{});var VBt=s(RCe);B8r=r(VBt,"model_type"),VBt.forEach(t),I8r=r(TL,` property of the config object (either
passed as an argument or loaded from `),PCe=n(TL,"CODE",{});var XBt=s(PCe);N8r=r(XBt,"pretrained_model_name_or_path"),XBt.forEach(t),q8r=r(TL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BCe=n(TL,"CODE",{});var zBt=s(BCe);j8r=r(zBt,"pretrained_model_name_or_path"),zBt.forEach(t),D8r=r(TL,":"),TL.forEach(t),G8r=i(Vl),te=n(Vl,"UL",{});var ne=s(te);r5=n(ne,"LI",{});var DDe=s(r5);ICe=n(DDe,"STRONG",{});var QBt=s(ICe);O8r=r(QBt,"albert"),QBt.forEach(t),V8r=r(DDe," \u2014 "),sK=n(DDe,"A",{href:!0});var WBt=s(sK);X8r=r(WBt,"TFAlbertForSequenceClassification"),WBt.forEach(t),z8r=r(DDe," (ALBERT model)"),DDe.forEach(t),Q8r=i(ne),t5=n(ne,"LI",{});var GDe=s(t5);NCe=n(GDe,"STRONG",{});var HBt=s(NCe);W8r=r(HBt,"bert"),HBt.forEach(t),H8r=r(GDe," \u2014 "),lK=n(GDe,"A",{href:!0});var UBt=s(lK);U8r=r(UBt,"TFBertForSequenceClassification"),UBt.forEach(t),J8r=r(GDe," (BERT model)"),GDe.forEach(t),Y8r=i(ne),a5=n(ne,"LI",{});var ODe=s(a5);qCe=n(ODe,"STRONG",{});var JBt=s(qCe);K8r=r(JBt,"camembert"),JBt.forEach(t),Z8r=r(ODe," \u2014 "),iK=n(ODe,"A",{href:!0});var YBt=s(iK);e9r=r(YBt,"TFCamembertForSequenceClassification"),YBt.forEach(t),o9r=r(ODe," (CamemBERT model)"),ODe.forEach(t),r9r=i(ne),n5=n(ne,"LI",{});var VDe=s(n5);jCe=n(VDe,"STRONG",{});var KBt=s(jCe);t9r=r(KBt,"convbert"),KBt.forEach(t),a9r=r(VDe," \u2014 "),dK=n(VDe,"A",{href:!0});var ZBt=s(dK);n9r=r(ZBt,"TFConvBertForSequenceClassification"),ZBt.forEach(t),s9r=r(VDe," (ConvBERT model)"),VDe.forEach(t),l9r=i(ne),s5=n(ne,"LI",{});var XDe=s(s5);DCe=n(XDe,"STRONG",{});var eIt=s(DCe);i9r=r(eIt,"ctrl"),eIt.forEach(t),d9r=r(XDe," \u2014 "),cK=n(XDe,"A",{href:!0});var oIt=s(cK);c9r=r(oIt,"TFCTRLForSequenceClassification"),oIt.forEach(t),m9r=r(XDe," (CTRL model)"),XDe.forEach(t),f9r=i(ne),l5=n(ne,"LI",{});var zDe=s(l5);GCe=n(zDe,"STRONG",{});var rIt=s(GCe);g9r=r(rIt,"deberta"),rIt.forEach(t),h9r=r(zDe," \u2014 "),mK=n(zDe,"A",{href:!0});var tIt=s(mK);u9r=r(tIt,"TFDebertaForSequenceClassification"),tIt.forEach(t),p9r=r(zDe," (DeBERTa model)"),zDe.forEach(t),_9r=i(ne),i5=n(ne,"LI",{});var QDe=s(i5);OCe=n(QDe,"STRONG",{});var aIt=s(OCe);b9r=r(aIt,"deberta-v2"),aIt.forEach(t),v9r=r(QDe," \u2014 "),fK=n(QDe,"A",{href:!0});var nIt=s(fK);F9r=r(nIt,"TFDebertaV2ForSequenceClassification"),nIt.forEach(t),T9r=r(QDe," (DeBERTa-v2 model)"),QDe.forEach(t),M9r=i(ne),d5=n(ne,"LI",{});var WDe=s(d5);VCe=n(WDe,"STRONG",{});var sIt=s(VCe);E9r=r(sIt,"distilbert"),sIt.forEach(t),C9r=r(WDe," \u2014 "),gK=n(WDe,"A",{href:!0});var lIt=s(gK);w9r=r(lIt,"TFDistilBertForSequenceClassification"),lIt.forEach(t),A9r=r(WDe," (DistilBERT model)"),WDe.forEach(t),L9r=i(ne),c5=n(ne,"LI",{});var HDe=s(c5);XCe=n(HDe,"STRONG",{});var iIt=s(XCe);y9r=r(iIt,"electra"),iIt.forEach(t),x9r=r(HDe," \u2014 "),hK=n(HDe,"A",{href:!0});var dIt=s(hK);$9r=r(dIt,"TFElectraForSequenceClassification"),dIt.forEach(t),k9r=r(HDe," (ELECTRA model)"),HDe.forEach(t),S9r=i(ne),m5=n(ne,"LI",{});var UDe=s(m5);zCe=n(UDe,"STRONG",{});var cIt=s(zCe);R9r=r(cIt,"flaubert"),cIt.forEach(t),P9r=r(UDe," \u2014 "),uK=n(UDe,"A",{href:!0});var mIt=s(uK);B9r=r(mIt,"TFFlaubertForSequenceClassification"),mIt.forEach(t),I9r=r(UDe," (FlauBERT model)"),UDe.forEach(t),N9r=i(ne),f5=n(ne,"LI",{});var JDe=s(f5);QCe=n(JDe,"STRONG",{});var fIt=s(QCe);q9r=r(fIt,"funnel"),fIt.forEach(t),j9r=r(JDe," \u2014 "),pK=n(JDe,"A",{href:!0});var gIt=s(pK);D9r=r(gIt,"TFFunnelForSequenceClassification"),gIt.forEach(t),G9r=r(JDe," (Funnel Transformer model)"),JDe.forEach(t),O9r=i(ne),g5=n(ne,"LI",{});var YDe=s(g5);WCe=n(YDe,"STRONG",{});var hIt=s(WCe);V9r=r(hIt,"gpt2"),hIt.forEach(t),X9r=r(YDe," \u2014 "),_K=n(YDe,"A",{href:!0});var uIt=s(_K);z9r=r(uIt,"TFGPT2ForSequenceClassification"),uIt.forEach(t),Q9r=r(YDe," (OpenAI GPT-2 model)"),YDe.forEach(t),W9r=i(ne),h5=n(ne,"LI",{});var KDe=s(h5);HCe=n(KDe,"STRONG",{});var pIt=s(HCe);H9r=r(pIt,"gptj"),pIt.forEach(t),U9r=r(KDe," \u2014 "),bK=n(KDe,"A",{href:!0});var _It=s(bK);J9r=r(_It,"TFGPTJForSequenceClassification"),_It.forEach(t),Y9r=r(KDe," (GPT-J model)"),KDe.forEach(t),K9r=i(ne),u5=n(ne,"LI",{});var ZDe=s(u5);UCe=n(ZDe,"STRONG",{});var bIt=s(UCe);Z9r=r(bIt,"layoutlm"),bIt.forEach(t),exr=r(ZDe," \u2014 "),vK=n(ZDe,"A",{href:!0});var vIt=s(vK);oxr=r(vIt,"TFLayoutLMForSequenceClassification"),vIt.forEach(t),rxr=r(ZDe," (LayoutLM model)"),ZDe.forEach(t),txr=i(ne),p5=n(ne,"LI",{});var eGe=s(p5);JCe=n(eGe,"STRONG",{});var FIt=s(JCe);axr=r(FIt,"longformer"),FIt.forEach(t),nxr=r(eGe," \u2014 "),FK=n(eGe,"A",{href:!0});var TIt=s(FK);sxr=r(TIt,"TFLongformerForSequenceClassification"),TIt.forEach(t),lxr=r(eGe," (Longformer model)"),eGe.forEach(t),ixr=i(ne),_5=n(ne,"LI",{});var oGe=s(_5);YCe=n(oGe,"STRONG",{});var MIt=s(YCe);dxr=r(MIt,"mobilebert"),MIt.forEach(t),cxr=r(oGe," \u2014 "),TK=n(oGe,"A",{href:!0});var EIt=s(TK);mxr=r(EIt,"TFMobileBertForSequenceClassification"),EIt.forEach(t),fxr=r(oGe," (MobileBERT model)"),oGe.forEach(t),gxr=i(ne),b5=n(ne,"LI",{});var rGe=s(b5);KCe=n(rGe,"STRONG",{});var CIt=s(KCe);hxr=r(CIt,"mpnet"),CIt.forEach(t),uxr=r(rGe," \u2014 "),MK=n(rGe,"A",{href:!0});var wIt=s(MK);pxr=r(wIt,"TFMPNetForSequenceClassification"),wIt.forEach(t),_xr=r(rGe," (MPNet model)"),rGe.forEach(t),bxr=i(ne),v5=n(ne,"LI",{});var tGe=s(v5);ZCe=n(tGe,"STRONG",{});var AIt=s(ZCe);vxr=r(AIt,"openai-gpt"),AIt.forEach(t),Fxr=r(tGe," \u2014 "),EK=n(tGe,"A",{href:!0});var LIt=s(EK);Txr=r(LIt,"TFOpenAIGPTForSequenceClassification"),LIt.forEach(t),Mxr=r(tGe," (OpenAI GPT model)"),tGe.forEach(t),Exr=i(ne),F5=n(ne,"LI",{});var aGe=s(F5);e3e=n(aGe,"STRONG",{});var yIt=s(e3e);Cxr=r(yIt,"rembert"),yIt.forEach(t),wxr=r(aGe," \u2014 "),CK=n(aGe,"A",{href:!0});var xIt=s(CK);Axr=r(xIt,"TFRemBertForSequenceClassification"),xIt.forEach(t),Lxr=r(aGe," (RemBERT model)"),aGe.forEach(t),yxr=i(ne),T5=n(ne,"LI",{});var nGe=s(T5);o3e=n(nGe,"STRONG",{});var $It=s(o3e);xxr=r($It,"roberta"),$It.forEach(t),$xr=r(nGe," \u2014 "),wK=n(nGe,"A",{href:!0});var kIt=s(wK);kxr=r(kIt,"TFRobertaForSequenceClassification"),kIt.forEach(t),Sxr=r(nGe," (RoBERTa model)"),nGe.forEach(t),Rxr=i(ne),M5=n(ne,"LI",{});var sGe=s(M5);r3e=n(sGe,"STRONG",{});var SIt=s(r3e);Pxr=r(SIt,"roformer"),SIt.forEach(t),Bxr=r(sGe," \u2014 "),AK=n(sGe,"A",{href:!0});var RIt=s(AK);Ixr=r(RIt,"TFRoFormerForSequenceClassification"),RIt.forEach(t),Nxr=r(sGe," (RoFormer model)"),sGe.forEach(t),qxr=i(ne),E5=n(ne,"LI",{});var lGe=s(E5);t3e=n(lGe,"STRONG",{});var PIt=s(t3e);jxr=r(PIt,"tapas"),PIt.forEach(t),Dxr=r(lGe," \u2014 "),LK=n(lGe,"A",{href:!0});var BIt=s(LK);Gxr=r(BIt,"TFTapasForSequenceClassification"),BIt.forEach(t),Oxr=r(lGe," (TAPAS model)"),lGe.forEach(t),Vxr=i(ne),C5=n(ne,"LI",{});var iGe=s(C5);a3e=n(iGe,"STRONG",{});var IIt=s(a3e);Xxr=r(IIt,"transfo-xl"),IIt.forEach(t),zxr=r(iGe," \u2014 "),yK=n(iGe,"A",{href:!0});var NIt=s(yK);Qxr=r(NIt,"TFTransfoXLForSequenceClassification"),NIt.forEach(t),Wxr=r(iGe," (Transformer-XL model)"),iGe.forEach(t),Hxr=i(ne),w5=n(ne,"LI",{});var dGe=s(w5);n3e=n(dGe,"STRONG",{});var qIt=s(n3e);Uxr=r(qIt,"xlm"),qIt.forEach(t),Jxr=r(dGe," \u2014 "),xK=n(dGe,"A",{href:!0});var jIt=s(xK);Yxr=r(jIt,"TFXLMForSequenceClassification"),jIt.forEach(t),Kxr=r(dGe," (XLM model)"),dGe.forEach(t),Zxr=i(ne),A5=n(ne,"LI",{});var cGe=s(A5);s3e=n(cGe,"STRONG",{});var DIt=s(s3e);e$r=r(DIt,"xlm-roberta"),DIt.forEach(t),o$r=r(cGe," \u2014 "),$K=n(cGe,"A",{href:!0});var GIt=s($K);r$r=r(GIt,"TFXLMRobertaForSequenceClassification"),GIt.forEach(t),t$r=r(cGe," (XLM-RoBERTa model)"),cGe.forEach(t),a$r=i(ne),L5=n(ne,"LI",{});var mGe=s(L5);l3e=n(mGe,"STRONG",{});var OIt=s(l3e);n$r=r(OIt,"xlnet"),OIt.forEach(t),s$r=r(mGe," \u2014 "),kK=n(mGe,"A",{href:!0});var VIt=s(kK);l$r=r(VIt,"TFXLNetForSequenceClassification"),VIt.forEach(t),i$r=r(mGe," (XLNet model)"),mGe.forEach(t),ne.forEach(t),d$r=i(Vl),T(y5.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),Vze=i(m),yc=n(m,"H2",{class:!0});var YWe=s(yc);x5=n(YWe,"A",{id:!0,class:!0,href:!0});var XIt=s(x5);i3e=n(XIt,"SPAN",{});var zIt=s(i3e);T(kx.$$.fragment,zIt),zIt.forEach(t),XIt.forEach(t),c$r=i(YWe),d3e=n(YWe,"SPAN",{});var QIt=s(d3e);m$r=r(QIt,"TFAutoModelForMultipleChoice"),QIt.forEach(t),YWe.forEach(t),Xze=i(m),dr=n(m,"DIV",{class:!0});var Xl=s(dr);T(Sx.$$.fragment,Xl),f$r=i(Xl),xc=n(Xl,"P",{});var oae=s(xc);g$r=r(oae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SK=n(oae,"A",{href:!0});var WIt=s(SK);h$r=r(WIt,"from_pretrained()"),WIt.forEach(t),u$r=r(oae," class method or the "),RK=n(oae,"A",{href:!0});var HIt=s(RK);p$r=r(HIt,"from_config()"),HIt.forEach(t),_$r=r(oae,` class
method.`),oae.forEach(t),b$r=i(Xl),Rx=n(Xl,"P",{});var KWe=s(Rx);v$r=r(KWe,"This class cannot be instantiated directly using "),c3e=n(KWe,"CODE",{});var UIt=s(c3e);F$r=r(UIt,"__init__()"),UIt.forEach(t),T$r=r(KWe," (throws an error)."),KWe.forEach(t),M$r=i(Xl),Dt=n(Xl,"DIV",{class:!0});var ML=s(Dt);T(Px.$$.fragment,ML),E$r=i(ML),m3e=n(ML,"P",{});var JIt=s(m3e);C$r=r(JIt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),JIt.forEach(t),w$r=i(ML),$c=n(ML,"P",{});var rae=s($c);A$r=r(rae,`Note:
Loading a model from its configuration file does `),f3e=n(rae,"STRONG",{});var YIt=s(f3e);L$r=r(YIt,"not"),YIt.forEach(t),y$r=r(rae,` load the model weights. It only affects the
model\u2019s configuration. Use `),PK=n(rae,"A",{href:!0});var KIt=s(PK);x$r=r(KIt,"from_pretrained()"),KIt.forEach(t),$$r=r(rae," to load the model weights."),rae.forEach(t),k$r=i(ML),T($5.$$.fragment,ML),ML.forEach(t),S$r=i(Xl),Nr=n(Xl,"DIV",{class:!0});var zl=s(Nr);T(Bx.$$.fragment,zl),R$r=i(zl),g3e=n(zl,"P",{});var ZIt=s(g3e);P$r=r(ZIt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ZIt.forEach(t),B$r=i(zl),hn=n(zl,"P",{});var EL=s(hn);I$r=r(EL,"The model class to instantiate is selected based on the "),h3e=n(EL,"CODE",{});var eNt=s(h3e);N$r=r(eNt,"model_type"),eNt.forEach(t),q$r=r(EL,` property of the config object (either
passed as an argument or loaded from `),u3e=n(EL,"CODE",{});var oNt=s(u3e);j$r=r(oNt,"pretrained_model_name_or_path"),oNt.forEach(t),D$r=r(EL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p3e=n(EL,"CODE",{});var rNt=s(p3e);G$r=r(rNt,"pretrained_model_name_or_path"),rNt.forEach(t),O$r=r(EL,":"),EL.forEach(t),V$r=i(zl),_e=n(zl,"UL",{});var Fe=s(_e);k5=n(Fe,"LI",{});var fGe=s(k5);_3e=n(fGe,"STRONG",{});var tNt=s(_3e);X$r=r(tNt,"albert"),tNt.forEach(t),z$r=r(fGe," \u2014 "),BK=n(fGe,"A",{href:!0});var aNt=s(BK);Q$r=r(aNt,"TFAlbertForMultipleChoice"),aNt.forEach(t),W$r=r(fGe," (ALBERT model)"),fGe.forEach(t),H$r=i(Fe),S5=n(Fe,"LI",{});var gGe=s(S5);b3e=n(gGe,"STRONG",{});var nNt=s(b3e);U$r=r(nNt,"bert"),nNt.forEach(t),J$r=r(gGe," \u2014 "),IK=n(gGe,"A",{href:!0});var sNt=s(IK);Y$r=r(sNt,"TFBertForMultipleChoice"),sNt.forEach(t),K$r=r(gGe," (BERT model)"),gGe.forEach(t),Z$r=i(Fe),R5=n(Fe,"LI",{});var hGe=s(R5);v3e=n(hGe,"STRONG",{});var lNt=s(v3e);ekr=r(lNt,"camembert"),lNt.forEach(t),okr=r(hGe," \u2014 "),NK=n(hGe,"A",{href:!0});var iNt=s(NK);rkr=r(iNt,"TFCamembertForMultipleChoice"),iNt.forEach(t),tkr=r(hGe," (CamemBERT model)"),hGe.forEach(t),akr=i(Fe),P5=n(Fe,"LI",{});var uGe=s(P5);F3e=n(uGe,"STRONG",{});var dNt=s(F3e);nkr=r(dNt,"convbert"),dNt.forEach(t),skr=r(uGe," \u2014 "),qK=n(uGe,"A",{href:!0});var cNt=s(qK);lkr=r(cNt,"TFConvBertForMultipleChoice"),cNt.forEach(t),ikr=r(uGe," (ConvBERT model)"),uGe.forEach(t),dkr=i(Fe),B5=n(Fe,"LI",{});var pGe=s(B5);T3e=n(pGe,"STRONG",{});var mNt=s(T3e);ckr=r(mNt,"distilbert"),mNt.forEach(t),mkr=r(pGe," \u2014 "),jK=n(pGe,"A",{href:!0});var fNt=s(jK);fkr=r(fNt,"TFDistilBertForMultipleChoice"),fNt.forEach(t),gkr=r(pGe," (DistilBERT model)"),pGe.forEach(t),hkr=i(Fe),I5=n(Fe,"LI",{});var _Ge=s(I5);M3e=n(_Ge,"STRONG",{});var gNt=s(M3e);ukr=r(gNt,"electra"),gNt.forEach(t),pkr=r(_Ge," \u2014 "),DK=n(_Ge,"A",{href:!0});var hNt=s(DK);_kr=r(hNt,"TFElectraForMultipleChoice"),hNt.forEach(t),bkr=r(_Ge," (ELECTRA model)"),_Ge.forEach(t),vkr=i(Fe),N5=n(Fe,"LI",{});var bGe=s(N5);E3e=n(bGe,"STRONG",{});var uNt=s(E3e);Fkr=r(uNt,"flaubert"),uNt.forEach(t),Tkr=r(bGe," \u2014 "),GK=n(bGe,"A",{href:!0});var pNt=s(GK);Mkr=r(pNt,"TFFlaubertForMultipleChoice"),pNt.forEach(t),Ekr=r(bGe," (FlauBERT model)"),bGe.forEach(t),Ckr=i(Fe),q5=n(Fe,"LI",{});var vGe=s(q5);C3e=n(vGe,"STRONG",{});var _Nt=s(C3e);wkr=r(_Nt,"funnel"),_Nt.forEach(t),Akr=r(vGe," \u2014 "),OK=n(vGe,"A",{href:!0});var bNt=s(OK);Lkr=r(bNt,"TFFunnelForMultipleChoice"),bNt.forEach(t),ykr=r(vGe," (Funnel Transformer model)"),vGe.forEach(t),xkr=i(Fe),j5=n(Fe,"LI",{});var FGe=s(j5);w3e=n(FGe,"STRONG",{});var vNt=s(w3e);$kr=r(vNt,"longformer"),vNt.forEach(t),kkr=r(FGe," \u2014 "),VK=n(FGe,"A",{href:!0});var FNt=s(VK);Skr=r(FNt,"TFLongformerForMultipleChoice"),FNt.forEach(t),Rkr=r(FGe," (Longformer model)"),FGe.forEach(t),Pkr=i(Fe),D5=n(Fe,"LI",{});var TGe=s(D5);A3e=n(TGe,"STRONG",{});var TNt=s(A3e);Bkr=r(TNt,"mobilebert"),TNt.forEach(t),Ikr=r(TGe," \u2014 "),XK=n(TGe,"A",{href:!0});var MNt=s(XK);Nkr=r(MNt,"TFMobileBertForMultipleChoice"),MNt.forEach(t),qkr=r(TGe," (MobileBERT model)"),TGe.forEach(t),jkr=i(Fe),G5=n(Fe,"LI",{});var MGe=s(G5);L3e=n(MGe,"STRONG",{});var ENt=s(L3e);Dkr=r(ENt,"mpnet"),ENt.forEach(t),Gkr=r(MGe," \u2014 "),zK=n(MGe,"A",{href:!0});var CNt=s(zK);Okr=r(CNt,"TFMPNetForMultipleChoice"),CNt.forEach(t),Vkr=r(MGe," (MPNet model)"),MGe.forEach(t),Xkr=i(Fe),O5=n(Fe,"LI",{});var EGe=s(O5);y3e=n(EGe,"STRONG",{});var wNt=s(y3e);zkr=r(wNt,"rembert"),wNt.forEach(t),Qkr=r(EGe," \u2014 "),QK=n(EGe,"A",{href:!0});var ANt=s(QK);Wkr=r(ANt,"TFRemBertForMultipleChoice"),ANt.forEach(t),Hkr=r(EGe," (RemBERT model)"),EGe.forEach(t),Ukr=i(Fe),V5=n(Fe,"LI",{});var CGe=s(V5);x3e=n(CGe,"STRONG",{});var LNt=s(x3e);Jkr=r(LNt,"roberta"),LNt.forEach(t),Ykr=r(CGe," \u2014 "),WK=n(CGe,"A",{href:!0});var yNt=s(WK);Kkr=r(yNt,"TFRobertaForMultipleChoice"),yNt.forEach(t),Zkr=r(CGe," (RoBERTa model)"),CGe.forEach(t),eSr=i(Fe),X5=n(Fe,"LI",{});var wGe=s(X5);$3e=n(wGe,"STRONG",{});var xNt=s($3e);oSr=r(xNt,"roformer"),xNt.forEach(t),rSr=r(wGe," \u2014 "),HK=n(wGe,"A",{href:!0});var $Nt=s(HK);tSr=r($Nt,"TFRoFormerForMultipleChoice"),$Nt.forEach(t),aSr=r(wGe," (RoFormer model)"),wGe.forEach(t),nSr=i(Fe),z5=n(Fe,"LI",{});var AGe=s(z5);k3e=n(AGe,"STRONG",{});var kNt=s(k3e);sSr=r(kNt,"xlm"),kNt.forEach(t),lSr=r(AGe," \u2014 "),UK=n(AGe,"A",{href:!0});var SNt=s(UK);iSr=r(SNt,"TFXLMForMultipleChoice"),SNt.forEach(t),dSr=r(AGe," (XLM model)"),AGe.forEach(t),cSr=i(Fe),Q5=n(Fe,"LI",{});var LGe=s(Q5);S3e=n(LGe,"STRONG",{});var RNt=s(S3e);mSr=r(RNt,"xlm-roberta"),RNt.forEach(t),fSr=r(LGe," \u2014 "),JK=n(LGe,"A",{href:!0});var PNt=s(JK);gSr=r(PNt,"TFXLMRobertaForMultipleChoice"),PNt.forEach(t),hSr=r(LGe," (XLM-RoBERTa model)"),LGe.forEach(t),uSr=i(Fe),W5=n(Fe,"LI",{});var yGe=s(W5);R3e=n(yGe,"STRONG",{});var BNt=s(R3e);pSr=r(BNt,"xlnet"),BNt.forEach(t),_Sr=r(yGe," \u2014 "),YK=n(yGe,"A",{href:!0});var INt=s(YK);bSr=r(INt,"TFXLNetForMultipleChoice"),INt.forEach(t),vSr=r(yGe," (XLNet model)"),yGe.forEach(t),Fe.forEach(t),FSr=i(zl),T(H5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),zze=i(m),kc=n(m,"H2",{class:!0});var ZWe=s(kc);U5=n(ZWe,"A",{id:!0,class:!0,href:!0});var NNt=s(U5);P3e=n(NNt,"SPAN",{});var qNt=s(P3e);T(Ix.$$.fragment,qNt),qNt.forEach(t),NNt.forEach(t),TSr=i(ZWe),B3e=n(ZWe,"SPAN",{});var jNt=s(B3e);MSr=r(jNt,"TFAutoModelForNextSentencePrediction"),jNt.forEach(t),ZWe.forEach(t),Qze=i(m),cr=n(m,"DIV",{class:!0});var Ql=s(cr);T(Nx.$$.fragment,Ql),ESr=i(Ql),Sc=n(Ql,"P",{});var tae=s(Sc);CSr=r(tae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),KK=n(tae,"A",{href:!0});var DNt=s(KK);wSr=r(DNt,"from_pretrained()"),DNt.forEach(t),ASr=r(tae," class method or the "),ZK=n(tae,"A",{href:!0});var GNt=s(ZK);LSr=r(GNt,"from_config()"),GNt.forEach(t),ySr=r(tae,` class
method.`),tae.forEach(t),xSr=i(Ql),qx=n(Ql,"P",{});var eHe=s(qx);$Sr=r(eHe,"This class cannot be instantiated directly using "),I3e=n(eHe,"CODE",{});var ONt=s(I3e);kSr=r(ONt,"__init__()"),ONt.forEach(t),SSr=r(eHe," (throws an error)."),eHe.forEach(t),RSr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var CL=s(Gt);T(jx.$$.fragment,CL),PSr=i(CL),N3e=n(CL,"P",{});var VNt=s(N3e);BSr=r(VNt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),VNt.forEach(t),ISr=i(CL),Rc=n(CL,"P",{});var aae=s(Rc);NSr=r(aae,`Note:
Loading a model from its configuration file does `),q3e=n(aae,"STRONG",{});var XNt=s(q3e);qSr=r(XNt,"not"),XNt.forEach(t),jSr=r(aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=n(aae,"A",{href:!0});var zNt=s(eZ);DSr=r(zNt,"from_pretrained()"),zNt.forEach(t),GSr=r(aae," to load the model weights."),aae.forEach(t),OSr=i(CL),T(J5.$$.fragment,CL),CL.forEach(t),VSr=i(Ql),qr=n(Ql,"DIV",{class:!0});var Wl=s(qr);T(Dx.$$.fragment,Wl),XSr=i(Wl),j3e=n(Wl,"P",{});var QNt=s(j3e);zSr=r(QNt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),QNt.forEach(t),QSr=i(Wl),un=n(Wl,"P",{});var wL=s(un);WSr=r(wL,"The model class to instantiate is selected based on the "),D3e=n(wL,"CODE",{});var WNt=s(D3e);HSr=r(WNt,"model_type"),WNt.forEach(t),USr=r(wL,` property of the config object (either
passed as an argument or loaded from `),G3e=n(wL,"CODE",{});var HNt=s(G3e);JSr=r(HNt,"pretrained_model_name_or_path"),HNt.forEach(t),YSr=r(wL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O3e=n(wL,"CODE",{});var UNt=s(O3e);KSr=r(UNt,"pretrained_model_name_or_path"),UNt.forEach(t),ZSr=r(wL,":"),wL.forEach(t),eRr=i(Wl),Gx=n(Wl,"UL",{});var oHe=s(Gx);Y5=n(oHe,"LI",{});var xGe=s(Y5);V3e=n(xGe,"STRONG",{});var JNt=s(V3e);oRr=r(JNt,"bert"),JNt.forEach(t),rRr=r(xGe," \u2014 "),oZ=n(xGe,"A",{href:!0});var YNt=s(oZ);tRr=r(YNt,"TFBertForNextSentencePrediction"),YNt.forEach(t),aRr=r(xGe," (BERT model)"),xGe.forEach(t),nRr=i(oHe),K5=n(oHe,"LI",{});var $Ge=s(K5);X3e=n($Ge,"STRONG",{});var KNt=s(X3e);sRr=r(KNt,"mobilebert"),KNt.forEach(t),lRr=r($Ge," \u2014 "),rZ=n($Ge,"A",{href:!0});var ZNt=s(rZ);iRr=r(ZNt,"TFMobileBertForNextSentencePrediction"),ZNt.forEach(t),dRr=r($Ge," (MobileBERT model)"),$Ge.forEach(t),oHe.forEach(t),cRr=i(Wl),T(Z5.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),Wze=i(m),Pc=n(m,"H2",{class:!0});var rHe=s(Pc);e0=n(rHe,"A",{id:!0,class:!0,href:!0});var eqt=s(e0);z3e=n(eqt,"SPAN",{});var oqt=s(z3e);T(Ox.$$.fragment,oqt),oqt.forEach(t),eqt.forEach(t),mRr=i(rHe),Q3e=n(rHe,"SPAN",{});var rqt=s(Q3e);fRr=r(rqt,"TFAutoModelForTableQuestionAnswering"),rqt.forEach(t),rHe.forEach(t),Hze=i(m),mr=n(m,"DIV",{class:!0});var Hl=s(mr);T(Vx.$$.fragment,Hl),gRr=i(Hl),Bc=n(Hl,"P",{});var nae=s(Bc);hRr=r(nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),tZ=n(nae,"A",{href:!0});var tqt=s(tZ);uRr=r(tqt,"from_pretrained()"),tqt.forEach(t),pRr=r(nae," class method or the "),aZ=n(nae,"A",{href:!0});var aqt=s(aZ);_Rr=r(aqt,"from_config()"),aqt.forEach(t),bRr=r(nae,` class
method.`),nae.forEach(t),vRr=i(Hl),Xx=n(Hl,"P",{});var tHe=s(Xx);FRr=r(tHe,"This class cannot be instantiated directly using "),W3e=n(tHe,"CODE",{});var nqt=s(W3e);TRr=r(nqt,"__init__()"),nqt.forEach(t),MRr=r(tHe," (throws an error)."),tHe.forEach(t),ERr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var AL=s(Ot);T(zx.$$.fragment,AL),CRr=i(AL),H3e=n(AL,"P",{});var sqt=s(H3e);wRr=r(sqt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),sqt.forEach(t),ARr=i(AL),Ic=n(AL,"P",{});var sae=s(Ic);LRr=r(sae,`Note:
Loading a model from its configuration file does `),U3e=n(sae,"STRONG",{});var lqt=s(U3e);yRr=r(lqt,"not"),lqt.forEach(t),xRr=r(sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),nZ=n(sae,"A",{href:!0});var iqt=s(nZ);$Rr=r(iqt,"from_pretrained()"),iqt.forEach(t),kRr=r(sae," to load the model weights."),sae.forEach(t),SRr=i(AL),T(o0.$$.fragment,AL),AL.forEach(t),RRr=i(Hl),jr=n(Hl,"DIV",{class:!0});var Ul=s(jr);T(Qx.$$.fragment,Ul),PRr=i(Ul),J3e=n(Ul,"P",{});var dqt=s(J3e);BRr=r(dqt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),dqt.forEach(t),IRr=i(Ul),pn=n(Ul,"P",{});var LL=s(pn);NRr=r(LL,"The model class to instantiate is selected based on the "),Y3e=n(LL,"CODE",{});var cqt=s(Y3e);qRr=r(cqt,"model_type"),cqt.forEach(t),jRr=r(LL,` property of the config object (either
passed as an argument or loaded from `),K3e=n(LL,"CODE",{});var mqt=s(K3e);DRr=r(mqt,"pretrained_model_name_or_path"),mqt.forEach(t),GRr=r(LL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z3e=n(LL,"CODE",{});var fqt=s(Z3e);ORr=r(fqt,"pretrained_model_name_or_path"),fqt.forEach(t),VRr=r(LL,":"),LL.forEach(t),XRr=i(Ul),e5e=n(Ul,"UL",{});var gqt=s(e5e);r0=n(gqt,"LI",{});var kGe=s(r0);o5e=n(kGe,"STRONG",{});var hqt=s(o5e);zRr=r(hqt,"tapas"),hqt.forEach(t),QRr=r(kGe," \u2014 "),sZ=n(kGe,"A",{href:!0});var uqt=s(sZ);WRr=r(uqt,"TFTapasForQuestionAnswering"),uqt.forEach(t),HRr=r(kGe," (TAPAS model)"),kGe.forEach(t),gqt.forEach(t),URr=i(Ul),T(t0.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),Uze=i(m),Nc=n(m,"H2",{class:!0});var aHe=s(Nc);a0=n(aHe,"A",{id:!0,class:!0,href:!0});var pqt=s(a0);r5e=n(pqt,"SPAN",{});var _qt=s(r5e);T(Wx.$$.fragment,_qt),_qt.forEach(t),pqt.forEach(t),JRr=i(aHe),t5e=n(aHe,"SPAN",{});var bqt=s(t5e);YRr=r(bqt,"TFAutoModelForTokenClassification"),bqt.forEach(t),aHe.forEach(t),Jze=i(m),fr=n(m,"DIV",{class:!0});var Jl=s(fr);T(Hx.$$.fragment,Jl),KRr=i(Jl),qc=n(Jl,"P",{});var lae=s(qc);ZRr=r(lae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lZ=n(lae,"A",{href:!0});var vqt=s(lZ);ePr=r(vqt,"from_pretrained()"),vqt.forEach(t),oPr=r(lae," class method or the "),iZ=n(lae,"A",{href:!0});var Fqt=s(iZ);rPr=r(Fqt,"from_config()"),Fqt.forEach(t),tPr=r(lae,` class
method.`),lae.forEach(t),aPr=i(Jl),Ux=n(Jl,"P",{});var nHe=s(Ux);nPr=r(nHe,"This class cannot be instantiated directly using "),a5e=n(nHe,"CODE",{});var Tqt=s(a5e);sPr=r(Tqt,"__init__()"),Tqt.forEach(t),lPr=r(nHe," (throws an error)."),nHe.forEach(t),iPr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var yL=s(Vt);T(Jx.$$.fragment,yL),dPr=i(yL),n5e=n(yL,"P",{});var Mqt=s(n5e);cPr=r(Mqt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Mqt.forEach(t),mPr=i(yL),jc=n(yL,"P",{});var iae=s(jc);fPr=r(iae,`Note:
Loading a model from its configuration file does `),s5e=n(iae,"STRONG",{});var Eqt=s(s5e);gPr=r(Eqt,"not"),Eqt.forEach(t),hPr=r(iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),dZ=n(iae,"A",{href:!0});var Cqt=s(dZ);uPr=r(Cqt,"from_pretrained()"),Cqt.forEach(t),pPr=r(iae," to load the model weights."),iae.forEach(t),_Pr=i(yL),T(n0.$$.fragment,yL),yL.forEach(t),bPr=i(Jl),Dr=n(Jl,"DIV",{class:!0});var Yl=s(Dr);T(Yx.$$.fragment,Yl),vPr=i(Yl),l5e=n(Yl,"P",{});var wqt=s(l5e);FPr=r(wqt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wqt.forEach(t),TPr=i(Yl),_n=n(Yl,"P",{});var xL=s(_n);MPr=r(xL,"The model class to instantiate is selected based on the "),i5e=n(xL,"CODE",{});var Aqt=s(i5e);EPr=r(Aqt,"model_type"),Aqt.forEach(t),CPr=r(xL,` property of the config object (either
passed as an argument or loaded from `),d5e=n(xL,"CODE",{});var Lqt=s(d5e);wPr=r(Lqt,"pretrained_model_name_or_path"),Lqt.forEach(t),APr=r(xL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c5e=n(xL,"CODE",{});var yqt=s(c5e);LPr=r(yqt,"pretrained_model_name_or_path"),yqt.forEach(t),yPr=r(xL,":"),xL.forEach(t),xPr=i(Yl),de=n(Yl,"UL",{});var ge=s(de);s0=n(ge,"LI",{});var SGe=s(s0);m5e=n(SGe,"STRONG",{});var xqt=s(m5e);$Pr=r(xqt,"albert"),xqt.forEach(t),kPr=r(SGe," \u2014 "),cZ=n(SGe,"A",{href:!0});var $qt=s(cZ);SPr=r($qt,"TFAlbertForTokenClassification"),$qt.forEach(t),RPr=r(SGe," (ALBERT model)"),SGe.forEach(t),PPr=i(ge),l0=n(ge,"LI",{});var RGe=s(l0);f5e=n(RGe,"STRONG",{});var kqt=s(f5e);BPr=r(kqt,"bert"),kqt.forEach(t),IPr=r(RGe," \u2014 "),mZ=n(RGe,"A",{href:!0});var Sqt=s(mZ);NPr=r(Sqt,"TFBertForTokenClassification"),Sqt.forEach(t),qPr=r(RGe," (BERT model)"),RGe.forEach(t),jPr=i(ge),i0=n(ge,"LI",{});var PGe=s(i0);g5e=n(PGe,"STRONG",{});var Rqt=s(g5e);DPr=r(Rqt,"camembert"),Rqt.forEach(t),GPr=r(PGe," \u2014 "),fZ=n(PGe,"A",{href:!0});var Pqt=s(fZ);OPr=r(Pqt,"TFCamembertForTokenClassification"),Pqt.forEach(t),VPr=r(PGe," (CamemBERT model)"),PGe.forEach(t),XPr=i(ge),d0=n(ge,"LI",{});var BGe=s(d0);h5e=n(BGe,"STRONG",{});var Bqt=s(h5e);zPr=r(Bqt,"convbert"),Bqt.forEach(t),QPr=r(BGe," \u2014 "),gZ=n(BGe,"A",{href:!0});var Iqt=s(gZ);WPr=r(Iqt,"TFConvBertForTokenClassification"),Iqt.forEach(t),HPr=r(BGe," (ConvBERT model)"),BGe.forEach(t),UPr=i(ge),c0=n(ge,"LI",{});var IGe=s(c0);u5e=n(IGe,"STRONG",{});var Nqt=s(u5e);JPr=r(Nqt,"deberta"),Nqt.forEach(t),YPr=r(IGe," \u2014 "),hZ=n(IGe,"A",{href:!0});var qqt=s(hZ);KPr=r(qqt,"TFDebertaForTokenClassification"),qqt.forEach(t),ZPr=r(IGe," (DeBERTa model)"),IGe.forEach(t),eBr=i(ge),m0=n(ge,"LI",{});var NGe=s(m0);p5e=n(NGe,"STRONG",{});var jqt=s(p5e);oBr=r(jqt,"deberta-v2"),jqt.forEach(t),rBr=r(NGe," \u2014 "),uZ=n(NGe,"A",{href:!0});var Dqt=s(uZ);tBr=r(Dqt,"TFDebertaV2ForTokenClassification"),Dqt.forEach(t),aBr=r(NGe," (DeBERTa-v2 model)"),NGe.forEach(t),nBr=i(ge),f0=n(ge,"LI",{});var qGe=s(f0);_5e=n(qGe,"STRONG",{});var Gqt=s(_5e);sBr=r(Gqt,"distilbert"),Gqt.forEach(t),lBr=r(qGe," \u2014 "),pZ=n(qGe,"A",{href:!0});var Oqt=s(pZ);iBr=r(Oqt,"TFDistilBertForTokenClassification"),Oqt.forEach(t),dBr=r(qGe," (DistilBERT model)"),qGe.forEach(t),cBr=i(ge),g0=n(ge,"LI",{});var jGe=s(g0);b5e=n(jGe,"STRONG",{});var Vqt=s(b5e);mBr=r(Vqt,"electra"),Vqt.forEach(t),fBr=r(jGe," \u2014 "),_Z=n(jGe,"A",{href:!0});var Xqt=s(_Z);gBr=r(Xqt,"TFElectraForTokenClassification"),Xqt.forEach(t),hBr=r(jGe," (ELECTRA model)"),jGe.forEach(t),uBr=i(ge),h0=n(ge,"LI",{});var DGe=s(h0);v5e=n(DGe,"STRONG",{});var zqt=s(v5e);pBr=r(zqt,"flaubert"),zqt.forEach(t),_Br=r(DGe," \u2014 "),bZ=n(DGe,"A",{href:!0});var Qqt=s(bZ);bBr=r(Qqt,"TFFlaubertForTokenClassification"),Qqt.forEach(t),vBr=r(DGe," (FlauBERT model)"),DGe.forEach(t),FBr=i(ge),u0=n(ge,"LI",{});var GGe=s(u0);F5e=n(GGe,"STRONG",{});var Wqt=s(F5e);TBr=r(Wqt,"funnel"),Wqt.forEach(t),MBr=r(GGe," \u2014 "),vZ=n(GGe,"A",{href:!0});var Hqt=s(vZ);EBr=r(Hqt,"TFFunnelForTokenClassification"),Hqt.forEach(t),CBr=r(GGe," (Funnel Transformer model)"),GGe.forEach(t),wBr=i(ge),p0=n(ge,"LI",{});var OGe=s(p0);T5e=n(OGe,"STRONG",{});var Uqt=s(T5e);ABr=r(Uqt,"layoutlm"),Uqt.forEach(t),LBr=r(OGe," \u2014 "),FZ=n(OGe,"A",{href:!0});var Jqt=s(FZ);yBr=r(Jqt,"TFLayoutLMForTokenClassification"),Jqt.forEach(t),xBr=r(OGe," (LayoutLM model)"),OGe.forEach(t),$Br=i(ge),_0=n(ge,"LI",{});var VGe=s(_0);M5e=n(VGe,"STRONG",{});var Yqt=s(M5e);kBr=r(Yqt,"longformer"),Yqt.forEach(t),SBr=r(VGe," \u2014 "),TZ=n(VGe,"A",{href:!0});var Kqt=s(TZ);RBr=r(Kqt,"TFLongformerForTokenClassification"),Kqt.forEach(t),PBr=r(VGe," (Longformer model)"),VGe.forEach(t),BBr=i(ge),b0=n(ge,"LI",{});var XGe=s(b0);E5e=n(XGe,"STRONG",{});var Zqt=s(E5e);IBr=r(Zqt,"mobilebert"),Zqt.forEach(t),NBr=r(XGe," \u2014 "),MZ=n(XGe,"A",{href:!0});var ejt=s(MZ);qBr=r(ejt,"TFMobileBertForTokenClassification"),ejt.forEach(t),jBr=r(XGe," (MobileBERT model)"),XGe.forEach(t),DBr=i(ge),v0=n(ge,"LI",{});var zGe=s(v0);C5e=n(zGe,"STRONG",{});var ojt=s(C5e);GBr=r(ojt,"mpnet"),ojt.forEach(t),OBr=r(zGe," \u2014 "),EZ=n(zGe,"A",{href:!0});var rjt=s(EZ);VBr=r(rjt,"TFMPNetForTokenClassification"),rjt.forEach(t),XBr=r(zGe," (MPNet model)"),zGe.forEach(t),zBr=i(ge),F0=n(ge,"LI",{});var QGe=s(F0);w5e=n(QGe,"STRONG",{});var tjt=s(w5e);QBr=r(tjt,"rembert"),tjt.forEach(t),WBr=r(QGe," \u2014 "),CZ=n(QGe,"A",{href:!0});var ajt=s(CZ);HBr=r(ajt,"TFRemBertForTokenClassification"),ajt.forEach(t),UBr=r(QGe," (RemBERT model)"),QGe.forEach(t),JBr=i(ge),T0=n(ge,"LI",{});var WGe=s(T0);A5e=n(WGe,"STRONG",{});var njt=s(A5e);YBr=r(njt,"roberta"),njt.forEach(t),KBr=r(WGe," \u2014 "),wZ=n(WGe,"A",{href:!0});var sjt=s(wZ);ZBr=r(sjt,"TFRobertaForTokenClassification"),sjt.forEach(t),eIr=r(WGe," (RoBERTa model)"),WGe.forEach(t),oIr=i(ge),M0=n(ge,"LI",{});var HGe=s(M0);L5e=n(HGe,"STRONG",{});var ljt=s(L5e);rIr=r(ljt,"roformer"),ljt.forEach(t),tIr=r(HGe," \u2014 "),AZ=n(HGe,"A",{href:!0});var ijt=s(AZ);aIr=r(ijt,"TFRoFormerForTokenClassification"),ijt.forEach(t),nIr=r(HGe," (RoFormer model)"),HGe.forEach(t),sIr=i(ge),E0=n(ge,"LI",{});var UGe=s(E0);y5e=n(UGe,"STRONG",{});var djt=s(y5e);lIr=r(djt,"xlm"),djt.forEach(t),iIr=r(UGe," \u2014 "),LZ=n(UGe,"A",{href:!0});var cjt=s(LZ);dIr=r(cjt,"TFXLMForTokenClassification"),cjt.forEach(t),cIr=r(UGe," (XLM model)"),UGe.forEach(t),mIr=i(ge),C0=n(ge,"LI",{});var JGe=s(C0);x5e=n(JGe,"STRONG",{});var mjt=s(x5e);fIr=r(mjt,"xlm-roberta"),mjt.forEach(t),gIr=r(JGe," \u2014 "),yZ=n(JGe,"A",{href:!0});var fjt=s(yZ);hIr=r(fjt,"TFXLMRobertaForTokenClassification"),fjt.forEach(t),uIr=r(JGe," (XLM-RoBERTa model)"),JGe.forEach(t),pIr=i(ge),w0=n(ge,"LI",{});var YGe=s(w0);$5e=n(YGe,"STRONG",{});var gjt=s($5e);_Ir=r(gjt,"xlnet"),gjt.forEach(t),bIr=r(YGe," \u2014 "),xZ=n(YGe,"A",{href:!0});var hjt=s(xZ);vIr=r(hjt,"TFXLNetForTokenClassification"),hjt.forEach(t),FIr=r(YGe," (XLNet model)"),YGe.forEach(t),ge.forEach(t),TIr=i(Yl),T(A0.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),Yze=i(m),Dc=n(m,"H2",{class:!0});var sHe=s(Dc);L0=n(sHe,"A",{id:!0,class:!0,href:!0});var ujt=s(L0);k5e=n(ujt,"SPAN",{});var pjt=s(k5e);T(Kx.$$.fragment,pjt),pjt.forEach(t),ujt.forEach(t),MIr=i(sHe),S5e=n(sHe,"SPAN",{});var _jt=s(S5e);EIr=r(_jt,"TFAutoModelForQuestionAnswering"),_jt.forEach(t),sHe.forEach(t),Kze=i(m),gr=n(m,"DIV",{class:!0});var Kl=s(gr);T(Zx.$$.fragment,Kl),CIr=i(Kl),Gc=n(Kl,"P",{});var dae=s(Gc);wIr=r(dae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$Z=n(dae,"A",{href:!0});var bjt=s($Z);AIr=r(bjt,"from_pretrained()"),bjt.forEach(t),LIr=r(dae," class method or the "),kZ=n(dae,"A",{href:!0});var vjt=s(kZ);yIr=r(vjt,"from_config()"),vjt.forEach(t),xIr=r(dae,` class
method.`),dae.forEach(t),$Ir=i(Kl),e$=n(Kl,"P",{});var lHe=s(e$);kIr=r(lHe,"This class cannot be instantiated directly using "),R5e=n(lHe,"CODE",{});var Fjt=s(R5e);SIr=r(Fjt,"__init__()"),Fjt.forEach(t),RIr=r(lHe," (throws an error)."),lHe.forEach(t),PIr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var $L=s(Xt);T(o$.$$.fragment,$L),BIr=i($L),P5e=n($L,"P",{});var Tjt=s(P5e);IIr=r(Tjt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Tjt.forEach(t),NIr=i($L),Oc=n($L,"P",{});var cae=s(Oc);qIr=r(cae,`Note:
Loading a model from its configuration file does `),B5e=n(cae,"STRONG",{});var Mjt=s(B5e);jIr=r(Mjt,"not"),Mjt.forEach(t),DIr=r(cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=n(cae,"A",{href:!0});var Ejt=s(SZ);GIr=r(Ejt,"from_pretrained()"),Ejt.forEach(t),OIr=r(cae," to load the model weights."),cae.forEach(t),VIr=i($L),T(y0.$$.fragment,$L),$L.forEach(t),XIr=i(Kl),Gr=n(Kl,"DIV",{class:!0});var Zl=s(Gr);T(r$.$$.fragment,Zl),zIr=i(Zl),I5e=n(Zl,"P",{});var Cjt=s(I5e);QIr=r(Cjt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Cjt.forEach(t),WIr=i(Zl),bn=n(Zl,"P",{});var kL=s(bn);HIr=r(kL,"The model class to instantiate is selected based on the "),N5e=n(kL,"CODE",{});var wjt=s(N5e);UIr=r(wjt,"model_type"),wjt.forEach(t),JIr=r(kL,` property of the config object (either
passed as an argument or loaded from `),q5e=n(kL,"CODE",{});var Ajt=s(q5e);YIr=r(Ajt,"pretrained_model_name_or_path"),Ajt.forEach(t),KIr=r(kL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j5e=n(kL,"CODE",{});var Ljt=s(j5e);ZIr=r(Ljt,"pretrained_model_name_or_path"),Ljt.forEach(t),eNr=r(kL,":"),kL.forEach(t),oNr=i(Zl),ce=n(Zl,"UL",{});var he=s(ce);x0=n(he,"LI",{});var KGe=s(x0);D5e=n(KGe,"STRONG",{});var yjt=s(D5e);rNr=r(yjt,"albert"),yjt.forEach(t),tNr=r(KGe," \u2014 "),RZ=n(KGe,"A",{href:!0});var xjt=s(RZ);aNr=r(xjt,"TFAlbertForQuestionAnswering"),xjt.forEach(t),nNr=r(KGe," (ALBERT model)"),KGe.forEach(t),sNr=i(he),$0=n(he,"LI",{});var ZGe=s($0);G5e=n(ZGe,"STRONG",{});var $jt=s(G5e);lNr=r($jt,"bert"),$jt.forEach(t),iNr=r(ZGe," \u2014 "),PZ=n(ZGe,"A",{href:!0});var kjt=s(PZ);dNr=r(kjt,"TFBertForQuestionAnswering"),kjt.forEach(t),cNr=r(ZGe," (BERT model)"),ZGe.forEach(t),mNr=i(he),k0=n(he,"LI",{});var eOe=s(k0);O5e=n(eOe,"STRONG",{});var Sjt=s(O5e);fNr=r(Sjt,"camembert"),Sjt.forEach(t),gNr=r(eOe," \u2014 "),BZ=n(eOe,"A",{href:!0});var Rjt=s(BZ);hNr=r(Rjt,"TFCamembertForQuestionAnswering"),Rjt.forEach(t),uNr=r(eOe," (CamemBERT model)"),eOe.forEach(t),pNr=i(he),S0=n(he,"LI",{});var oOe=s(S0);V5e=n(oOe,"STRONG",{});var Pjt=s(V5e);_Nr=r(Pjt,"convbert"),Pjt.forEach(t),bNr=r(oOe," \u2014 "),IZ=n(oOe,"A",{href:!0});var Bjt=s(IZ);vNr=r(Bjt,"TFConvBertForQuestionAnswering"),Bjt.forEach(t),FNr=r(oOe," (ConvBERT model)"),oOe.forEach(t),TNr=i(he),R0=n(he,"LI",{});var rOe=s(R0);X5e=n(rOe,"STRONG",{});var Ijt=s(X5e);MNr=r(Ijt,"deberta"),Ijt.forEach(t),ENr=r(rOe," \u2014 "),NZ=n(rOe,"A",{href:!0});var Njt=s(NZ);CNr=r(Njt,"TFDebertaForQuestionAnswering"),Njt.forEach(t),wNr=r(rOe," (DeBERTa model)"),rOe.forEach(t),ANr=i(he),P0=n(he,"LI",{});var tOe=s(P0);z5e=n(tOe,"STRONG",{});var qjt=s(z5e);LNr=r(qjt,"deberta-v2"),qjt.forEach(t),yNr=r(tOe," \u2014 "),qZ=n(tOe,"A",{href:!0});var jjt=s(qZ);xNr=r(jjt,"TFDebertaV2ForQuestionAnswering"),jjt.forEach(t),$Nr=r(tOe," (DeBERTa-v2 model)"),tOe.forEach(t),kNr=i(he),B0=n(he,"LI",{});var aOe=s(B0);Q5e=n(aOe,"STRONG",{});var Djt=s(Q5e);SNr=r(Djt,"distilbert"),Djt.forEach(t),RNr=r(aOe," \u2014 "),jZ=n(aOe,"A",{href:!0});var Gjt=s(jZ);PNr=r(Gjt,"TFDistilBertForQuestionAnswering"),Gjt.forEach(t),BNr=r(aOe," (DistilBERT model)"),aOe.forEach(t),INr=i(he),I0=n(he,"LI",{});var nOe=s(I0);W5e=n(nOe,"STRONG",{});var Ojt=s(W5e);NNr=r(Ojt,"electra"),Ojt.forEach(t),qNr=r(nOe," \u2014 "),DZ=n(nOe,"A",{href:!0});var Vjt=s(DZ);jNr=r(Vjt,"TFElectraForQuestionAnswering"),Vjt.forEach(t),DNr=r(nOe," (ELECTRA model)"),nOe.forEach(t),GNr=i(he),N0=n(he,"LI",{});var sOe=s(N0);H5e=n(sOe,"STRONG",{});var Xjt=s(H5e);ONr=r(Xjt,"flaubert"),Xjt.forEach(t),VNr=r(sOe," \u2014 "),GZ=n(sOe,"A",{href:!0});var zjt=s(GZ);XNr=r(zjt,"TFFlaubertForQuestionAnsweringSimple"),zjt.forEach(t),zNr=r(sOe," (FlauBERT model)"),sOe.forEach(t),QNr=i(he),q0=n(he,"LI",{});var lOe=s(q0);U5e=n(lOe,"STRONG",{});var Qjt=s(U5e);WNr=r(Qjt,"funnel"),Qjt.forEach(t),HNr=r(lOe," \u2014 "),OZ=n(lOe,"A",{href:!0});var Wjt=s(OZ);UNr=r(Wjt,"TFFunnelForQuestionAnswering"),Wjt.forEach(t),JNr=r(lOe," (Funnel Transformer model)"),lOe.forEach(t),YNr=i(he),j0=n(he,"LI",{});var iOe=s(j0);J5e=n(iOe,"STRONG",{});var Hjt=s(J5e);KNr=r(Hjt,"gptj"),Hjt.forEach(t),ZNr=r(iOe," \u2014 "),VZ=n(iOe,"A",{href:!0});var Ujt=s(VZ);eqr=r(Ujt,"TFGPTJForQuestionAnswering"),Ujt.forEach(t),oqr=r(iOe," (GPT-J model)"),iOe.forEach(t),rqr=i(he),D0=n(he,"LI",{});var dOe=s(D0);Y5e=n(dOe,"STRONG",{});var Jjt=s(Y5e);tqr=r(Jjt,"longformer"),Jjt.forEach(t),aqr=r(dOe," \u2014 "),XZ=n(dOe,"A",{href:!0});var Yjt=s(XZ);nqr=r(Yjt,"TFLongformerForQuestionAnswering"),Yjt.forEach(t),sqr=r(dOe," (Longformer model)"),dOe.forEach(t),lqr=i(he),G0=n(he,"LI",{});var cOe=s(G0);K5e=n(cOe,"STRONG",{});var Kjt=s(K5e);iqr=r(Kjt,"mobilebert"),Kjt.forEach(t),dqr=r(cOe," \u2014 "),zZ=n(cOe,"A",{href:!0});var Zjt=s(zZ);cqr=r(Zjt,"TFMobileBertForQuestionAnswering"),Zjt.forEach(t),mqr=r(cOe," (MobileBERT model)"),cOe.forEach(t),fqr=i(he),O0=n(he,"LI",{});var mOe=s(O0);Z5e=n(mOe,"STRONG",{});var eDt=s(Z5e);gqr=r(eDt,"mpnet"),eDt.forEach(t),hqr=r(mOe," \u2014 "),QZ=n(mOe,"A",{href:!0});var oDt=s(QZ);uqr=r(oDt,"TFMPNetForQuestionAnswering"),oDt.forEach(t),pqr=r(mOe," (MPNet model)"),mOe.forEach(t),_qr=i(he),V0=n(he,"LI",{});var fOe=s(V0);e0e=n(fOe,"STRONG",{});var rDt=s(e0e);bqr=r(rDt,"rembert"),rDt.forEach(t),vqr=r(fOe," \u2014 "),WZ=n(fOe,"A",{href:!0});var tDt=s(WZ);Fqr=r(tDt,"TFRemBertForQuestionAnswering"),tDt.forEach(t),Tqr=r(fOe," (RemBERT model)"),fOe.forEach(t),Mqr=i(he),X0=n(he,"LI",{});var gOe=s(X0);o0e=n(gOe,"STRONG",{});var aDt=s(o0e);Eqr=r(aDt,"roberta"),aDt.forEach(t),Cqr=r(gOe," \u2014 "),HZ=n(gOe,"A",{href:!0});var nDt=s(HZ);wqr=r(nDt,"TFRobertaForQuestionAnswering"),nDt.forEach(t),Aqr=r(gOe," (RoBERTa model)"),gOe.forEach(t),Lqr=i(he),z0=n(he,"LI",{});var hOe=s(z0);r0e=n(hOe,"STRONG",{});var sDt=s(r0e);yqr=r(sDt,"roformer"),sDt.forEach(t),xqr=r(hOe," \u2014 "),UZ=n(hOe,"A",{href:!0});var lDt=s(UZ);$qr=r(lDt,"TFRoFormerForQuestionAnswering"),lDt.forEach(t),kqr=r(hOe," (RoFormer model)"),hOe.forEach(t),Sqr=i(he),Q0=n(he,"LI",{});var uOe=s(Q0);t0e=n(uOe,"STRONG",{});var iDt=s(t0e);Rqr=r(iDt,"xlm"),iDt.forEach(t),Pqr=r(uOe," \u2014 "),JZ=n(uOe,"A",{href:!0});var dDt=s(JZ);Bqr=r(dDt,"TFXLMForQuestionAnsweringSimple"),dDt.forEach(t),Iqr=r(uOe," (XLM model)"),uOe.forEach(t),Nqr=i(he),W0=n(he,"LI",{});var pOe=s(W0);a0e=n(pOe,"STRONG",{});var cDt=s(a0e);qqr=r(cDt,"xlm-roberta"),cDt.forEach(t),jqr=r(pOe," \u2014 "),YZ=n(pOe,"A",{href:!0});var mDt=s(YZ);Dqr=r(mDt,"TFXLMRobertaForQuestionAnswering"),mDt.forEach(t),Gqr=r(pOe," (XLM-RoBERTa model)"),pOe.forEach(t),Oqr=i(he),H0=n(he,"LI",{});var _Oe=s(H0);n0e=n(_Oe,"STRONG",{});var fDt=s(n0e);Vqr=r(fDt,"xlnet"),fDt.forEach(t),Xqr=r(_Oe," \u2014 "),KZ=n(_Oe,"A",{href:!0});var gDt=s(KZ);zqr=r(gDt,"TFXLNetForQuestionAnsweringSimple"),gDt.forEach(t),Qqr=r(_Oe," (XLNet model)"),_Oe.forEach(t),he.forEach(t),Wqr=i(Zl),T(U0.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),Zze=i(m),Vc=n(m,"H2",{class:!0});var iHe=s(Vc);J0=n(iHe,"A",{id:!0,class:!0,href:!0});var hDt=s(J0);s0e=n(hDt,"SPAN",{});var uDt=s(s0e);T(t$.$$.fragment,uDt),uDt.forEach(t),hDt.forEach(t),Hqr=i(iHe),l0e=n(iHe,"SPAN",{});var pDt=s(l0e);Uqr=r(pDt,"TFAutoModelForVision2Seq"),pDt.forEach(t),iHe.forEach(t),eQe=i(m),hr=n(m,"DIV",{class:!0});var ei=s(hr);T(a$.$$.fragment,ei),Jqr=i(ei),Xc=n(ei,"P",{});var mae=s(Xc);Yqr=r(mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ZZ=n(mae,"A",{href:!0});var _Dt=s(ZZ);Kqr=r(_Dt,"from_pretrained()"),_Dt.forEach(t),Zqr=r(mae," class method or the "),eee=n(mae,"A",{href:!0});var bDt=s(eee);ejr=r(bDt,"from_config()"),bDt.forEach(t),ojr=r(mae,` class
method.`),mae.forEach(t),rjr=i(ei),n$=n(ei,"P",{});var dHe=s(n$);tjr=r(dHe,"This class cannot be instantiated directly using "),i0e=n(dHe,"CODE",{});var vDt=s(i0e);ajr=r(vDt,"__init__()"),vDt.forEach(t),njr=r(dHe," (throws an error)."),dHe.forEach(t),sjr=i(ei),zt=n(ei,"DIV",{class:!0});var SL=s(zt);T(s$.$$.fragment,SL),ljr=i(SL),d0e=n(SL,"P",{});var FDt=s(d0e);ijr=r(FDt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),FDt.forEach(t),djr=i(SL),zc=n(SL,"P",{});var fae=s(zc);cjr=r(fae,`Note:
Loading a model from its configuration file does `),c0e=n(fae,"STRONG",{});var TDt=s(c0e);mjr=r(TDt,"not"),TDt.forEach(t),fjr=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=n(fae,"A",{href:!0});var MDt=s(oee);gjr=r(MDt,"from_pretrained()"),MDt.forEach(t),hjr=r(fae," to load the model weights."),fae.forEach(t),ujr=i(SL),T(Y0.$$.fragment,SL),SL.forEach(t),pjr=i(ei),Or=n(ei,"DIV",{class:!0});var oi=s(Or);T(l$.$$.fragment,oi),_jr=i(oi),m0e=n(oi,"P",{});var EDt=s(m0e);bjr=r(EDt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),EDt.forEach(t),vjr=i(oi),vn=n(oi,"P",{});var RL=s(vn);Fjr=r(RL,"The model class to instantiate is selected based on the "),f0e=n(RL,"CODE",{});var CDt=s(f0e);Tjr=r(CDt,"model_type"),CDt.forEach(t),Mjr=r(RL,` property of the config object (either
passed as an argument or loaded from `),g0e=n(RL,"CODE",{});var wDt=s(g0e);Ejr=r(wDt,"pretrained_model_name_or_path"),wDt.forEach(t),Cjr=r(RL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h0e=n(RL,"CODE",{});var ADt=s(h0e);wjr=r(ADt,"pretrained_model_name_or_path"),ADt.forEach(t),Ajr=r(RL,":"),RL.forEach(t),Ljr=i(oi),u0e=n(oi,"UL",{});var LDt=s(u0e);K0=n(LDt,"LI",{});var bOe=s(K0);p0e=n(bOe,"STRONG",{});var yDt=s(p0e);yjr=r(yDt,"vision-encoder-decoder"),yDt.forEach(t),xjr=r(bOe," \u2014 "),ree=n(bOe,"A",{href:!0});var xDt=s(ree);$jr=r(xDt,"TFVisionEncoderDecoderModel"),xDt.forEach(t),kjr=r(bOe," (Vision Encoder decoder model)"),bOe.forEach(t),LDt.forEach(t),Sjr=i(oi),T(Z0.$$.fragment,oi),oi.forEach(t),ei.forEach(t),oQe=i(m),Qc=n(m,"H2",{class:!0});var cHe=s(Qc);ew=n(cHe,"A",{id:!0,class:!0,href:!0});var $Dt=s(ew);_0e=n($Dt,"SPAN",{});var kDt=s(_0e);T(i$.$$.fragment,kDt),kDt.forEach(t),$Dt.forEach(t),Rjr=i(cHe),b0e=n(cHe,"SPAN",{});var SDt=s(b0e);Pjr=r(SDt,"TFAutoModelForSpeechSeq2Seq"),SDt.forEach(t),cHe.forEach(t),rQe=i(m),ur=n(m,"DIV",{class:!0});var ri=s(ur);T(d$.$$.fragment,ri),Bjr=i(ri),Wc=n(ri,"P",{});var gae=s(Wc);Ijr=r(gae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),tee=n(gae,"A",{href:!0});var RDt=s(tee);Njr=r(RDt,"from_pretrained()"),RDt.forEach(t),qjr=r(gae," class method or the "),aee=n(gae,"A",{href:!0});var PDt=s(aee);jjr=r(PDt,"from_config()"),PDt.forEach(t),Djr=r(gae,` class
method.`),gae.forEach(t),Gjr=i(ri),c$=n(ri,"P",{});var mHe=s(c$);Ojr=r(mHe,"This class cannot be instantiated directly using "),v0e=n(mHe,"CODE",{});var BDt=s(v0e);Vjr=r(BDt,"__init__()"),BDt.forEach(t),Xjr=r(mHe," (throws an error)."),mHe.forEach(t),zjr=i(ri),Qt=n(ri,"DIV",{class:!0});var PL=s(Qt);T(m$.$$.fragment,PL),Qjr=i(PL),F0e=n(PL,"P",{});var IDt=s(F0e);Wjr=r(IDt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),IDt.forEach(t),Hjr=i(PL),Hc=n(PL,"P",{});var hae=s(Hc);Ujr=r(hae,`Note:
Loading a model from its configuration file does `),T0e=n(hae,"STRONG",{});var NDt=s(T0e);Jjr=r(NDt,"not"),NDt.forEach(t),Yjr=r(hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),nee=n(hae,"A",{href:!0});var qDt=s(nee);Kjr=r(qDt,"from_pretrained()"),qDt.forEach(t),Zjr=r(hae," to load the model weights."),hae.forEach(t),eDr=i(PL),T(ow.$$.fragment,PL),PL.forEach(t),oDr=i(ri),Vr=n(ri,"DIV",{class:!0});var ti=s(Vr);T(f$.$$.fragment,ti),rDr=i(ti),M0e=n(ti,"P",{});var jDt=s(M0e);tDr=r(jDt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jDt.forEach(t),aDr=i(ti),Fn=n(ti,"P",{});var BL=s(Fn);nDr=r(BL,"The model class to instantiate is selected based on the "),E0e=n(BL,"CODE",{});var DDt=s(E0e);sDr=r(DDt,"model_type"),DDt.forEach(t),lDr=r(BL,` property of the config object (either
passed as an argument or loaded from `),C0e=n(BL,"CODE",{});var GDt=s(C0e);iDr=r(GDt,"pretrained_model_name_or_path"),GDt.forEach(t),dDr=r(BL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w0e=n(BL,"CODE",{});var ODt=s(w0e);cDr=r(ODt,"pretrained_model_name_or_path"),ODt.forEach(t),mDr=r(BL,":"),BL.forEach(t),fDr=i(ti),A0e=n(ti,"UL",{});var VDt=s(A0e);rw=n(VDt,"LI",{});var vOe=s(rw);L0e=n(vOe,"STRONG",{});var XDt=s(L0e);gDr=r(XDt,"speech_to_text"),XDt.forEach(t),hDr=r(vOe," \u2014 "),see=n(vOe,"A",{href:!0});var zDt=s(see);uDr=r(zDt,"TFSpeech2TextForConditionalGeneration"),zDt.forEach(t),pDr=r(vOe," (Speech2Text model)"),vOe.forEach(t),VDt.forEach(t),_Dr=i(ti),T(tw.$$.fragment,ti),ti.forEach(t),ri.forEach(t),tQe=i(m),Uc=n(m,"H2",{class:!0});var fHe=s(Uc);aw=n(fHe,"A",{id:!0,class:!0,href:!0});var QDt=s(aw);y0e=n(QDt,"SPAN",{});var WDt=s(y0e);T(g$.$$.fragment,WDt),WDt.forEach(t),QDt.forEach(t),bDr=i(fHe),x0e=n(fHe,"SPAN",{});var HDt=s(x0e);vDr=r(HDt,"FlaxAutoModel"),HDt.forEach(t),fHe.forEach(t),aQe=i(m),pr=n(m,"DIV",{class:!0});var ai=s(pr);T(h$.$$.fragment,ai),FDr=i(ai),Jc=n(ai,"P",{});var uae=s(Jc);TDr=r(uae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lee=n(uae,"A",{href:!0});var UDt=s(lee);MDr=r(UDt,"from_pretrained()"),UDt.forEach(t),EDr=r(uae," class method or the "),iee=n(uae,"A",{href:!0});var JDt=s(iee);CDr=r(JDt,"from_config()"),JDt.forEach(t),wDr=r(uae,` class
method.`),uae.forEach(t),ADr=i(ai),u$=n(ai,"P",{});var gHe=s(u$);LDr=r(gHe,"This class cannot be instantiated directly using "),$0e=n(gHe,"CODE",{});var YDt=s($0e);yDr=r(YDt,"__init__()"),YDt.forEach(t),xDr=r(gHe," (throws an error)."),gHe.forEach(t),$Dr=i(ai),Wt=n(ai,"DIV",{class:!0});var IL=s(Wt);T(p$.$$.fragment,IL),kDr=i(IL),k0e=n(IL,"P",{});var KDt=s(k0e);SDr=r(KDt,"Instantiates one of the base model classes of the library from a configuration."),KDt.forEach(t),RDr=i(IL),Yc=n(IL,"P",{});var pae=s(Yc);PDr=r(pae,`Note:
Loading a model from its configuration file does `),S0e=n(pae,"STRONG",{});var ZDt=s(S0e);BDr=r(ZDt,"not"),ZDt.forEach(t),IDr=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),dee=n(pae,"A",{href:!0});var eGt=s(dee);NDr=r(eGt,"from_pretrained()"),eGt.forEach(t),qDr=r(pae," to load the model weights."),pae.forEach(t),jDr=i(IL),T(nw.$$.fragment,IL),IL.forEach(t),DDr=i(ai),Xr=n(ai,"DIV",{class:!0});var ni=s(Xr);T(_$.$$.fragment,ni),GDr=i(ni),R0e=n(ni,"P",{});var oGt=s(R0e);ODr=r(oGt,"Instantiate one of the base model classes of the library from a pretrained model."),oGt.forEach(t),VDr=i(ni),Tn=n(ni,"P",{});var NL=s(Tn);XDr=r(NL,"The model class to instantiate is selected based on the "),P0e=n(NL,"CODE",{});var rGt=s(P0e);zDr=r(rGt,"model_type"),rGt.forEach(t),QDr=r(NL,` property of the config object (either
passed as an argument or loaded from `),B0e=n(NL,"CODE",{});var tGt=s(B0e);WDr=r(tGt,"pretrained_model_name_or_path"),tGt.forEach(t),HDr=r(NL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I0e=n(NL,"CODE",{});var aGt=s(I0e);UDr=r(aGt,"pretrained_model_name_or_path"),aGt.forEach(t),JDr=r(NL,":"),NL.forEach(t),YDr=i(ni),oe=n(ni,"UL",{});var ae=s(oe);sw=n(ae,"LI",{});var FOe=s(sw);N0e=n(FOe,"STRONG",{});var nGt=s(N0e);KDr=r(nGt,"albert"),nGt.forEach(t),ZDr=r(FOe," \u2014 "),cee=n(FOe,"A",{href:!0});var sGt=s(cee);eGr=r(sGt,"FlaxAlbertModel"),sGt.forEach(t),oGr=r(FOe," (ALBERT model)"),FOe.forEach(t),rGr=i(ae),lw=n(ae,"LI",{});var TOe=s(lw);q0e=n(TOe,"STRONG",{});var lGt=s(q0e);tGr=r(lGt,"bart"),lGt.forEach(t),aGr=r(TOe," \u2014 "),mee=n(TOe,"A",{href:!0});var iGt=s(mee);nGr=r(iGt,"FlaxBartModel"),iGt.forEach(t),sGr=r(TOe," (BART model)"),TOe.forEach(t),lGr=i(ae),iw=n(ae,"LI",{});var MOe=s(iw);j0e=n(MOe,"STRONG",{});var dGt=s(j0e);iGr=r(dGt,"beit"),dGt.forEach(t),dGr=r(MOe," \u2014 "),fee=n(MOe,"A",{href:!0});var cGt=s(fee);cGr=r(cGt,"FlaxBeitModel"),cGt.forEach(t),mGr=r(MOe," (BEiT model)"),MOe.forEach(t),fGr=i(ae),dw=n(ae,"LI",{});var EOe=s(dw);D0e=n(EOe,"STRONG",{});var mGt=s(D0e);gGr=r(mGt,"bert"),mGt.forEach(t),hGr=r(EOe," \u2014 "),gee=n(EOe,"A",{href:!0});var fGt=s(gee);uGr=r(fGt,"FlaxBertModel"),fGt.forEach(t),pGr=r(EOe," (BERT model)"),EOe.forEach(t),_Gr=i(ae),cw=n(ae,"LI",{});var COe=s(cw);G0e=n(COe,"STRONG",{});var gGt=s(G0e);bGr=r(gGt,"big_bird"),gGt.forEach(t),vGr=r(COe," \u2014 "),hee=n(COe,"A",{href:!0});var hGt=s(hee);FGr=r(hGt,"FlaxBigBirdModel"),hGt.forEach(t),TGr=r(COe," (BigBird model)"),COe.forEach(t),MGr=i(ae),mw=n(ae,"LI",{});var wOe=s(mw);O0e=n(wOe,"STRONG",{});var uGt=s(O0e);EGr=r(uGt,"blenderbot"),uGt.forEach(t),CGr=r(wOe," \u2014 "),uee=n(wOe,"A",{href:!0});var pGt=s(uee);wGr=r(pGt,"FlaxBlenderbotModel"),pGt.forEach(t),AGr=r(wOe," (Blenderbot model)"),wOe.forEach(t),LGr=i(ae),fw=n(ae,"LI",{});var AOe=s(fw);V0e=n(AOe,"STRONG",{});var _Gt=s(V0e);yGr=r(_Gt,"blenderbot-small"),_Gt.forEach(t),xGr=r(AOe," \u2014 "),pee=n(AOe,"A",{href:!0});var bGt=s(pee);$Gr=r(bGt,"FlaxBlenderbotSmallModel"),bGt.forEach(t),kGr=r(AOe," (BlenderbotSmall model)"),AOe.forEach(t),SGr=i(ae),gw=n(ae,"LI",{});var LOe=s(gw);X0e=n(LOe,"STRONG",{});var vGt=s(X0e);RGr=r(vGt,"clip"),vGt.forEach(t),PGr=r(LOe," \u2014 "),_ee=n(LOe,"A",{href:!0});var FGt=s(_ee);BGr=r(FGt,"FlaxCLIPModel"),FGt.forEach(t),IGr=r(LOe," (CLIP model)"),LOe.forEach(t),NGr=i(ae),hw=n(ae,"LI",{});var yOe=s(hw);z0e=n(yOe,"STRONG",{});var TGt=s(z0e);qGr=r(TGt,"distilbert"),TGt.forEach(t),jGr=r(yOe," \u2014 "),bee=n(yOe,"A",{href:!0});var MGt=s(bee);DGr=r(MGt,"FlaxDistilBertModel"),MGt.forEach(t),GGr=r(yOe," (DistilBERT model)"),yOe.forEach(t),OGr=i(ae),uw=n(ae,"LI",{});var xOe=s(uw);Q0e=n(xOe,"STRONG",{});var EGt=s(Q0e);VGr=r(EGt,"electra"),EGt.forEach(t),XGr=r(xOe," \u2014 "),vee=n(xOe,"A",{href:!0});var CGt=s(vee);zGr=r(CGt,"FlaxElectraModel"),CGt.forEach(t),QGr=r(xOe," (ELECTRA model)"),xOe.forEach(t),WGr=i(ae),pw=n(ae,"LI",{});var $Oe=s(pw);W0e=n($Oe,"STRONG",{});var wGt=s(W0e);HGr=r(wGt,"gpt2"),wGt.forEach(t),UGr=r($Oe," \u2014 "),Fee=n($Oe,"A",{href:!0});var AGt=s(Fee);JGr=r(AGt,"FlaxGPT2Model"),AGt.forEach(t),YGr=r($Oe," (OpenAI GPT-2 model)"),$Oe.forEach(t),KGr=i(ae),_w=n(ae,"LI",{});var kOe=s(_w);H0e=n(kOe,"STRONG",{});var LGt=s(H0e);ZGr=r(LGt,"gpt_neo"),LGt.forEach(t),eOr=r(kOe," \u2014 "),Tee=n(kOe,"A",{href:!0});var yGt=s(Tee);oOr=r(yGt,"FlaxGPTNeoModel"),yGt.forEach(t),rOr=r(kOe," (GPT Neo model)"),kOe.forEach(t),tOr=i(ae),bw=n(ae,"LI",{});var SOe=s(bw);U0e=n(SOe,"STRONG",{});var xGt=s(U0e);aOr=r(xGt,"gptj"),xGt.forEach(t),nOr=r(SOe," \u2014 "),Mee=n(SOe,"A",{href:!0});var $Gt=s(Mee);sOr=r($Gt,"FlaxGPTJModel"),$Gt.forEach(t),lOr=r(SOe," (GPT-J model)"),SOe.forEach(t),iOr=i(ae),vw=n(ae,"LI",{});var ROe=s(vw);J0e=n(ROe,"STRONG",{});var kGt=s(J0e);dOr=r(kGt,"longt5"),kGt.forEach(t),cOr=r(ROe," \u2014 "),Eee=n(ROe,"A",{href:!0});var SGt=s(Eee);mOr=r(SGt,"FlaxLongT5Model"),SGt.forEach(t),fOr=r(ROe," (LongT5 model)"),ROe.forEach(t),gOr=i(ae),Fw=n(ae,"LI",{});var POe=s(Fw);Y0e=n(POe,"STRONG",{});var RGt=s(Y0e);hOr=r(RGt,"marian"),RGt.forEach(t),uOr=r(POe," \u2014 "),Cee=n(POe,"A",{href:!0});var PGt=s(Cee);pOr=r(PGt,"FlaxMarianModel"),PGt.forEach(t),_Or=r(POe," (Marian model)"),POe.forEach(t),bOr=i(ae),Tw=n(ae,"LI",{});var BOe=s(Tw);K0e=n(BOe,"STRONG",{});var BGt=s(K0e);vOr=r(BGt,"mbart"),BGt.forEach(t),FOr=r(BOe," \u2014 "),wee=n(BOe,"A",{href:!0});var IGt=s(wee);TOr=r(IGt,"FlaxMBartModel"),IGt.forEach(t),MOr=r(BOe," (mBART model)"),BOe.forEach(t),EOr=i(ae),Mw=n(ae,"LI",{});var IOe=s(Mw);Z0e=n(IOe,"STRONG",{});var NGt=s(Z0e);COr=r(NGt,"mt5"),NGt.forEach(t),wOr=r(IOe," \u2014 "),Aee=n(IOe,"A",{href:!0});var qGt=s(Aee);AOr=r(qGt,"FlaxMT5Model"),qGt.forEach(t),LOr=r(IOe," (MT5 model)"),IOe.forEach(t),yOr=i(ae),Ew=n(ae,"LI",{});var NOe=s(Ew);ewe=n(NOe,"STRONG",{});var jGt=s(ewe);xOr=r(jGt,"opt"),jGt.forEach(t),$Or=r(NOe," \u2014 "),Lee=n(NOe,"A",{href:!0});var DGt=s(Lee);kOr=r(DGt,"FlaxOPTModel"),DGt.forEach(t),SOr=r(NOe," (OPT model)"),NOe.forEach(t),ROr=i(ae),Cw=n(ae,"LI",{});var qOe=s(Cw);owe=n(qOe,"STRONG",{});var GGt=s(owe);POr=r(GGt,"pegasus"),GGt.forEach(t),BOr=r(qOe," \u2014 "),yee=n(qOe,"A",{href:!0});var OGt=s(yee);IOr=r(OGt,"FlaxPegasusModel"),OGt.forEach(t),NOr=r(qOe," (Pegasus model)"),qOe.forEach(t),qOr=i(ae),ww=n(ae,"LI",{});var jOe=s(ww);rwe=n(jOe,"STRONG",{});var VGt=s(rwe);jOr=r(VGt,"roberta"),VGt.forEach(t),DOr=r(jOe," \u2014 "),xee=n(jOe,"A",{href:!0});var XGt=s(xee);GOr=r(XGt,"FlaxRobertaModel"),XGt.forEach(t),OOr=r(jOe," (RoBERTa model)"),jOe.forEach(t),VOr=i(ae),Aw=n(ae,"LI",{});var DOe=s(Aw);twe=n(DOe,"STRONG",{});var zGt=s(twe);XOr=r(zGt,"roformer"),zGt.forEach(t),zOr=r(DOe," \u2014 "),$ee=n(DOe,"A",{href:!0});var QGt=s($ee);QOr=r(QGt,"FlaxRoFormerModel"),QGt.forEach(t),WOr=r(DOe," (RoFormer model)"),DOe.forEach(t),HOr=i(ae),Lw=n(ae,"LI",{});var GOe=s(Lw);awe=n(GOe,"STRONG",{});var WGt=s(awe);UOr=r(WGt,"t5"),WGt.forEach(t),JOr=r(GOe," \u2014 "),kee=n(GOe,"A",{href:!0});var HGt=s(kee);YOr=r(HGt,"FlaxT5Model"),HGt.forEach(t),KOr=r(GOe," (T5 model)"),GOe.forEach(t),ZOr=i(ae),yw=n(ae,"LI",{});var OOe=s(yw);nwe=n(OOe,"STRONG",{});var UGt=s(nwe);eVr=r(UGt,"vision-text-dual-encoder"),UGt.forEach(t),oVr=r(OOe," \u2014 "),See=n(OOe,"A",{href:!0});var JGt=s(See);rVr=r(JGt,"FlaxVisionTextDualEncoderModel"),JGt.forEach(t),tVr=r(OOe," (VisionTextDualEncoder model)"),OOe.forEach(t),aVr=i(ae),xw=n(ae,"LI",{});var VOe=s(xw);swe=n(VOe,"STRONG",{});var YGt=s(swe);nVr=r(YGt,"vit"),YGt.forEach(t),sVr=r(VOe," \u2014 "),Ree=n(VOe,"A",{href:!0});var KGt=s(Ree);lVr=r(KGt,"FlaxViTModel"),KGt.forEach(t),iVr=r(VOe," (ViT model)"),VOe.forEach(t),dVr=i(ae),$w=n(ae,"LI",{});var XOe=s($w);lwe=n(XOe,"STRONG",{});var ZGt=s(lwe);cVr=r(ZGt,"wav2vec2"),ZGt.forEach(t),mVr=r(XOe," \u2014 "),Pee=n(XOe,"A",{href:!0});var eOt=s(Pee);fVr=r(eOt,"FlaxWav2Vec2Model"),eOt.forEach(t),gVr=r(XOe," (Wav2Vec2 model)"),XOe.forEach(t),hVr=i(ae),kw=n(ae,"LI",{});var zOe=s(kw);iwe=n(zOe,"STRONG",{});var oOt=s(iwe);uVr=r(oOt,"xglm"),oOt.forEach(t),pVr=r(zOe," \u2014 "),Bee=n(zOe,"A",{href:!0});var rOt=s(Bee);_Vr=r(rOt,"FlaxXGLMModel"),rOt.forEach(t),bVr=r(zOe," (XGLM model)"),zOe.forEach(t),vVr=i(ae),Sw=n(ae,"LI",{});var QOe=s(Sw);dwe=n(QOe,"STRONG",{});var tOt=s(dwe);FVr=r(tOt,"xlm-roberta"),tOt.forEach(t),TVr=r(QOe," \u2014 "),Iee=n(QOe,"A",{href:!0});var aOt=s(Iee);MVr=r(aOt,"FlaxXLMRobertaModel"),aOt.forEach(t),EVr=r(QOe," (XLM-RoBERTa model)"),QOe.forEach(t),ae.forEach(t),CVr=i(ni),T(Rw.$$.fragment,ni),ni.forEach(t),ai.forEach(t),nQe=i(m),Kc=n(m,"H2",{class:!0});var hHe=s(Kc);Pw=n(hHe,"A",{id:!0,class:!0,href:!0});var nOt=s(Pw);cwe=n(nOt,"SPAN",{});var sOt=s(cwe);T(b$.$$.fragment,sOt),sOt.forEach(t),nOt.forEach(t),wVr=i(hHe),mwe=n(hHe,"SPAN",{});var lOt=s(mwe);AVr=r(lOt,"FlaxAutoModelForCausalLM"),lOt.forEach(t),hHe.forEach(t),sQe=i(m),_r=n(m,"DIV",{class:!0});var si=s(_r);T(v$.$$.fragment,si),LVr=i(si),Zc=n(si,"P",{});var _ae=s(Zc);yVr=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Nee=n(_ae,"A",{href:!0});var iOt=s(Nee);xVr=r(iOt,"from_pretrained()"),iOt.forEach(t),$Vr=r(_ae," class method or the "),qee=n(_ae,"A",{href:!0});var dOt=s(qee);kVr=r(dOt,"from_config()"),dOt.forEach(t),SVr=r(_ae,` class
method.`),_ae.forEach(t),RVr=i(si),F$=n(si,"P",{});var uHe=s(F$);PVr=r(uHe,"This class cannot be instantiated directly using "),fwe=n(uHe,"CODE",{});var cOt=s(fwe);BVr=r(cOt,"__init__()"),cOt.forEach(t),IVr=r(uHe," (throws an error)."),uHe.forEach(t),NVr=i(si),Ht=n(si,"DIV",{class:!0});var qL=s(Ht);T(T$.$$.fragment,qL),qVr=i(qL),gwe=n(qL,"P",{});var mOt=s(gwe);jVr=r(mOt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),mOt.forEach(t),DVr=i(qL),em=n(qL,"P",{});var bae=s(em);GVr=r(bae,`Note:
Loading a model from its configuration file does `),hwe=n(bae,"STRONG",{});var fOt=s(hwe);OVr=r(fOt,"not"),fOt.forEach(t),VVr=r(bae,` load the model weights. It only affects the
model\u2019s configuration. Use `),jee=n(bae,"A",{href:!0});var gOt=s(jee);XVr=r(gOt,"from_pretrained()"),gOt.forEach(t),zVr=r(bae," to load the model weights."),bae.forEach(t),QVr=i(qL),T(Bw.$$.fragment,qL),qL.forEach(t),WVr=i(si),zr=n(si,"DIV",{class:!0});var li=s(zr);T(M$.$$.fragment,li),HVr=i(li),uwe=n(li,"P",{});var hOt=s(uwe);UVr=r(hOt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hOt.forEach(t),JVr=i(li),Mn=n(li,"P",{});var jL=s(Mn);YVr=r(jL,"The model class to instantiate is selected based on the "),pwe=n(jL,"CODE",{});var uOt=s(pwe);KVr=r(uOt,"model_type"),uOt.forEach(t),ZVr=r(jL,` property of the config object (either
passed as an argument or loaded from `),_we=n(jL,"CODE",{});var pOt=s(_we);eXr=r(pOt,"pretrained_model_name_or_path"),pOt.forEach(t),oXr=r(jL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bwe=n(jL,"CODE",{});var _Ot=s(bwe);rXr=r(_Ot,"pretrained_model_name_or_path"),_Ot.forEach(t),tXr=r(jL,":"),jL.forEach(t),aXr=i(li),xe=n(li,"UL",{});var Ne=s(xe);Iw=n(Ne,"LI",{});var WOe=s(Iw);vwe=n(WOe,"STRONG",{});var bOt=s(vwe);nXr=r(bOt,"bart"),bOt.forEach(t),sXr=r(WOe," \u2014 "),Dee=n(WOe,"A",{href:!0});var vOt=s(Dee);lXr=r(vOt,"FlaxBartForCausalLM"),vOt.forEach(t),iXr=r(WOe," (BART model)"),WOe.forEach(t),dXr=i(Ne),Nw=n(Ne,"LI",{});var HOe=s(Nw);Fwe=n(HOe,"STRONG",{});var FOt=s(Fwe);cXr=r(FOt,"bert"),FOt.forEach(t),mXr=r(HOe," \u2014 "),Gee=n(HOe,"A",{href:!0});var TOt=s(Gee);fXr=r(TOt,"FlaxBertForCausalLM"),TOt.forEach(t),gXr=r(HOe," (BERT model)"),HOe.forEach(t),hXr=i(Ne),qw=n(Ne,"LI",{});var UOe=s(qw);Twe=n(UOe,"STRONG",{});var MOt=s(Twe);uXr=r(MOt,"big_bird"),MOt.forEach(t),pXr=r(UOe," \u2014 "),Oee=n(UOe,"A",{href:!0});var EOt=s(Oee);_Xr=r(EOt,"FlaxBigBirdForCausalLM"),EOt.forEach(t),bXr=r(UOe," (BigBird model)"),UOe.forEach(t),vXr=i(Ne),jw=n(Ne,"LI",{});var JOe=s(jw);Mwe=n(JOe,"STRONG",{});var COt=s(Mwe);FXr=r(COt,"electra"),COt.forEach(t),TXr=r(JOe," \u2014 "),Vee=n(JOe,"A",{href:!0});var wOt=s(Vee);MXr=r(wOt,"FlaxElectraForCausalLM"),wOt.forEach(t),EXr=r(JOe," (ELECTRA model)"),JOe.forEach(t),CXr=i(Ne),Dw=n(Ne,"LI",{});var YOe=s(Dw);Ewe=n(YOe,"STRONG",{});var AOt=s(Ewe);wXr=r(AOt,"gpt2"),AOt.forEach(t),AXr=r(YOe," \u2014 "),Xee=n(YOe,"A",{href:!0});var LOt=s(Xee);LXr=r(LOt,"FlaxGPT2LMHeadModel"),LOt.forEach(t),yXr=r(YOe," (OpenAI GPT-2 model)"),YOe.forEach(t),xXr=i(Ne),Gw=n(Ne,"LI",{});var KOe=s(Gw);Cwe=n(KOe,"STRONG",{});var yOt=s(Cwe);$Xr=r(yOt,"gpt_neo"),yOt.forEach(t),kXr=r(KOe," \u2014 "),zee=n(KOe,"A",{href:!0});var xOt=s(zee);SXr=r(xOt,"FlaxGPTNeoForCausalLM"),xOt.forEach(t),RXr=r(KOe," (GPT Neo model)"),KOe.forEach(t),PXr=i(Ne),Ow=n(Ne,"LI",{});var ZOe=s(Ow);wwe=n(ZOe,"STRONG",{});var $Ot=s(wwe);BXr=r($Ot,"gptj"),$Ot.forEach(t),IXr=r(ZOe," \u2014 "),Qee=n(ZOe,"A",{href:!0});var kOt=s(Qee);NXr=r(kOt,"FlaxGPTJForCausalLM"),kOt.forEach(t),qXr=r(ZOe," (GPT-J model)"),ZOe.forEach(t),jXr=i(Ne),Vw=n(Ne,"LI",{});var eVe=s(Vw);Awe=n(eVe,"STRONG",{});var SOt=s(Awe);DXr=r(SOt,"opt"),SOt.forEach(t),GXr=r(eVe," \u2014 "),Wee=n(eVe,"A",{href:!0});var ROt=s(Wee);OXr=r(ROt,"FlaxOPTForCausalLM"),ROt.forEach(t),VXr=r(eVe," (OPT model)"),eVe.forEach(t),XXr=i(Ne),Xw=n(Ne,"LI",{});var oVe=s(Xw);Lwe=n(oVe,"STRONG",{});var POt=s(Lwe);zXr=r(POt,"roberta"),POt.forEach(t),QXr=r(oVe," \u2014 "),Hee=n(oVe,"A",{href:!0});var BOt=s(Hee);WXr=r(BOt,"FlaxRobertaForCausalLM"),BOt.forEach(t),HXr=r(oVe," (RoBERTa model)"),oVe.forEach(t),UXr=i(Ne),zw=n(Ne,"LI",{});var rVe=s(zw);ywe=n(rVe,"STRONG",{});var IOt=s(ywe);JXr=r(IOt,"xglm"),IOt.forEach(t),YXr=r(rVe," \u2014 "),Uee=n(rVe,"A",{href:!0});var NOt=s(Uee);KXr=r(NOt,"FlaxXGLMForCausalLM"),NOt.forEach(t),ZXr=r(rVe," (XGLM model)"),rVe.forEach(t),Ne.forEach(t),ezr=i(li),T(Qw.$$.fragment,li),li.forEach(t),si.forEach(t),lQe=i(m),om=n(m,"H2",{class:!0});var pHe=s(om);Ww=n(pHe,"A",{id:!0,class:!0,href:!0});var qOt=s(Ww);xwe=n(qOt,"SPAN",{});var jOt=s(xwe);T(E$.$$.fragment,jOt),jOt.forEach(t),qOt.forEach(t),ozr=i(pHe),$we=n(pHe,"SPAN",{});var DOt=s($we);rzr=r(DOt,"FlaxAutoModelForPreTraining"),DOt.forEach(t),pHe.forEach(t),iQe=i(m),br=n(m,"DIV",{class:!0});var ii=s(br);T(C$.$$.fragment,ii),tzr=i(ii),rm=n(ii,"P",{});var vae=s(rm);azr=r(vae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jee=n(vae,"A",{href:!0});var GOt=s(Jee);nzr=r(GOt,"from_pretrained()"),GOt.forEach(t),szr=r(vae," class method or the "),Yee=n(vae,"A",{href:!0});var OOt=s(Yee);lzr=r(OOt,"from_config()"),OOt.forEach(t),izr=r(vae,` class
method.`),vae.forEach(t),dzr=i(ii),w$=n(ii,"P",{});var _He=s(w$);czr=r(_He,"This class cannot be instantiated directly using "),kwe=n(_He,"CODE",{});var VOt=s(kwe);mzr=r(VOt,"__init__()"),VOt.forEach(t),fzr=r(_He," (throws an error)."),_He.forEach(t),gzr=i(ii),Ut=n(ii,"DIV",{class:!0});var DL=s(Ut);T(A$.$$.fragment,DL),hzr=i(DL),Swe=n(DL,"P",{});var XOt=s(Swe);uzr=r(XOt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),XOt.forEach(t),pzr=i(DL),tm=n(DL,"P",{});var Fae=s(tm);_zr=r(Fae,`Note:
Loading a model from its configuration file does `),Rwe=n(Fae,"STRONG",{});var zOt=s(Rwe);bzr=r(zOt,"not"),zOt.forEach(t),vzr=r(Fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kee=n(Fae,"A",{href:!0});var QOt=s(Kee);Fzr=r(QOt,"from_pretrained()"),QOt.forEach(t),Tzr=r(Fae," to load the model weights."),Fae.forEach(t),Mzr=i(DL),T(Hw.$$.fragment,DL),DL.forEach(t),Ezr=i(ii),Qr=n(ii,"DIV",{class:!0});var di=s(Qr);T(L$.$$.fragment,di),Czr=i(di),Pwe=n(di,"P",{});var WOt=s(Pwe);wzr=r(WOt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),WOt.forEach(t),Azr=i(di),En=n(di,"P",{});var GL=s(En);Lzr=r(GL,"The model class to instantiate is selected based on the "),Bwe=n(GL,"CODE",{});var HOt=s(Bwe);yzr=r(HOt,"model_type"),HOt.forEach(t),xzr=r(GL,` property of the config object (either
passed as an argument or loaded from `),Iwe=n(GL,"CODE",{});var UOt=s(Iwe);$zr=r(UOt,"pretrained_model_name_or_path"),UOt.forEach(t),kzr=r(GL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nwe=n(GL,"CODE",{});var JOt=s(Nwe);Szr=r(JOt,"pretrained_model_name_or_path"),JOt.forEach(t),Rzr=r(GL,":"),GL.forEach(t),Pzr=i(di),Ee=n(di,"UL",{});var we=s(Ee);Uw=n(we,"LI",{});var tVe=s(Uw);qwe=n(tVe,"STRONG",{});var YOt=s(qwe);Bzr=r(YOt,"albert"),YOt.forEach(t),Izr=r(tVe," \u2014 "),Zee=n(tVe,"A",{href:!0});var KOt=s(Zee);Nzr=r(KOt,"FlaxAlbertForPreTraining"),KOt.forEach(t),qzr=r(tVe," (ALBERT model)"),tVe.forEach(t),jzr=i(we),Jw=n(we,"LI",{});var aVe=s(Jw);jwe=n(aVe,"STRONG",{});var ZOt=s(jwe);Dzr=r(ZOt,"bart"),ZOt.forEach(t),Gzr=r(aVe," \u2014 "),eoe=n(aVe,"A",{href:!0});var eVt=s(eoe);Ozr=r(eVt,"FlaxBartForConditionalGeneration"),eVt.forEach(t),Vzr=r(aVe," (BART model)"),aVe.forEach(t),Xzr=i(we),Yw=n(we,"LI",{});var nVe=s(Yw);Dwe=n(nVe,"STRONG",{});var oVt=s(Dwe);zzr=r(oVt,"bert"),oVt.forEach(t),Qzr=r(nVe," \u2014 "),ooe=n(nVe,"A",{href:!0});var rVt=s(ooe);Wzr=r(rVt,"FlaxBertForPreTraining"),rVt.forEach(t),Hzr=r(nVe," (BERT model)"),nVe.forEach(t),Uzr=i(we),Kw=n(we,"LI",{});var sVe=s(Kw);Gwe=n(sVe,"STRONG",{});var tVt=s(Gwe);Jzr=r(tVt,"big_bird"),tVt.forEach(t),Yzr=r(sVe," \u2014 "),roe=n(sVe,"A",{href:!0});var aVt=s(roe);Kzr=r(aVt,"FlaxBigBirdForPreTraining"),aVt.forEach(t),Zzr=r(sVe," (BigBird model)"),sVe.forEach(t),eQr=i(we),Zw=n(we,"LI",{});var lVe=s(Zw);Owe=n(lVe,"STRONG",{});var nVt=s(Owe);oQr=r(nVt,"electra"),nVt.forEach(t),rQr=r(lVe," \u2014 "),toe=n(lVe,"A",{href:!0});var sVt=s(toe);tQr=r(sVt,"FlaxElectraForPreTraining"),sVt.forEach(t),aQr=r(lVe," (ELECTRA model)"),lVe.forEach(t),nQr=i(we),eA=n(we,"LI",{});var iVe=s(eA);Vwe=n(iVe,"STRONG",{});var lVt=s(Vwe);sQr=r(lVt,"longt5"),lVt.forEach(t),lQr=r(iVe," \u2014 "),aoe=n(iVe,"A",{href:!0});var iVt=s(aoe);iQr=r(iVt,"FlaxLongT5ForConditionalGeneration"),iVt.forEach(t),dQr=r(iVe," (LongT5 model)"),iVe.forEach(t),cQr=i(we),oA=n(we,"LI",{});var dVe=s(oA);Xwe=n(dVe,"STRONG",{});var dVt=s(Xwe);mQr=r(dVt,"mbart"),dVt.forEach(t),fQr=r(dVe," \u2014 "),noe=n(dVe,"A",{href:!0});var cVt=s(noe);gQr=r(cVt,"FlaxMBartForConditionalGeneration"),cVt.forEach(t),hQr=r(dVe," (mBART model)"),dVe.forEach(t),uQr=i(we),rA=n(we,"LI",{});var cVe=s(rA);zwe=n(cVe,"STRONG",{});var mVt=s(zwe);pQr=r(mVt,"mt5"),mVt.forEach(t),_Qr=r(cVe," \u2014 "),soe=n(cVe,"A",{href:!0});var fVt=s(soe);bQr=r(fVt,"FlaxMT5ForConditionalGeneration"),fVt.forEach(t),vQr=r(cVe," (MT5 model)"),cVe.forEach(t),FQr=i(we),tA=n(we,"LI",{});var mVe=s(tA);Qwe=n(mVe,"STRONG",{});var gVt=s(Qwe);TQr=r(gVt,"roberta"),gVt.forEach(t),MQr=r(mVe," \u2014 "),loe=n(mVe,"A",{href:!0});var hVt=s(loe);EQr=r(hVt,"FlaxRobertaForMaskedLM"),hVt.forEach(t),CQr=r(mVe," (RoBERTa model)"),mVe.forEach(t),wQr=i(we),aA=n(we,"LI",{});var fVe=s(aA);Wwe=n(fVe,"STRONG",{});var uVt=s(Wwe);AQr=r(uVt,"roformer"),uVt.forEach(t),LQr=r(fVe," \u2014 "),ioe=n(fVe,"A",{href:!0});var pVt=s(ioe);yQr=r(pVt,"FlaxRoFormerForMaskedLM"),pVt.forEach(t),xQr=r(fVe," (RoFormer model)"),fVe.forEach(t),$Qr=i(we),nA=n(we,"LI",{});var gVe=s(nA);Hwe=n(gVe,"STRONG",{});var _Vt=s(Hwe);kQr=r(_Vt,"t5"),_Vt.forEach(t),SQr=r(gVe," \u2014 "),doe=n(gVe,"A",{href:!0});var bVt=s(doe);RQr=r(bVt,"FlaxT5ForConditionalGeneration"),bVt.forEach(t),PQr=r(gVe," (T5 model)"),gVe.forEach(t),BQr=i(we),sA=n(we,"LI",{});var hVe=s(sA);Uwe=n(hVe,"STRONG",{});var vVt=s(Uwe);IQr=r(vVt,"wav2vec2"),vVt.forEach(t),NQr=r(hVe," \u2014 "),coe=n(hVe,"A",{href:!0});var FVt=s(coe);qQr=r(FVt,"FlaxWav2Vec2ForPreTraining"),FVt.forEach(t),jQr=r(hVe," (Wav2Vec2 model)"),hVe.forEach(t),DQr=i(we),lA=n(we,"LI",{});var uVe=s(lA);Jwe=n(uVe,"STRONG",{});var TVt=s(Jwe);GQr=r(TVt,"xlm-roberta"),TVt.forEach(t),OQr=r(uVe," \u2014 "),moe=n(uVe,"A",{href:!0});var MVt=s(moe);VQr=r(MVt,"FlaxXLMRobertaForMaskedLM"),MVt.forEach(t),XQr=r(uVe," (XLM-RoBERTa model)"),uVe.forEach(t),we.forEach(t),zQr=i(di),T(iA.$$.fragment,di),di.forEach(t),ii.forEach(t),dQe=i(m),am=n(m,"H2",{class:!0});var bHe=s(am);dA=n(bHe,"A",{id:!0,class:!0,href:!0});var EVt=s(dA);Ywe=n(EVt,"SPAN",{});var CVt=s(Ywe);T(y$.$$.fragment,CVt),CVt.forEach(t),EVt.forEach(t),QQr=i(bHe),Kwe=n(bHe,"SPAN",{});var wVt=s(Kwe);WQr=r(wVt,"FlaxAutoModelForMaskedLM"),wVt.forEach(t),bHe.forEach(t),cQe=i(m),vr=n(m,"DIV",{class:!0});var ci=s(vr);T(x$.$$.fragment,ci),HQr=i(ci),nm=n(ci,"P",{});var Tae=s(nm);UQr=r(Tae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),foe=n(Tae,"A",{href:!0});var AVt=s(foe);JQr=r(AVt,"from_pretrained()"),AVt.forEach(t),YQr=r(Tae," class method or the "),goe=n(Tae,"A",{href:!0});var LVt=s(goe);KQr=r(LVt,"from_config()"),LVt.forEach(t),ZQr=r(Tae,` class
method.`),Tae.forEach(t),eWr=i(ci),$$=n(ci,"P",{});var vHe=s($$);oWr=r(vHe,"This class cannot be instantiated directly using "),Zwe=n(vHe,"CODE",{});var yVt=s(Zwe);rWr=r(yVt,"__init__()"),yVt.forEach(t),tWr=r(vHe," (throws an error)."),vHe.forEach(t),aWr=i(ci),Jt=n(ci,"DIV",{class:!0});var OL=s(Jt);T(k$.$$.fragment,OL),nWr=i(OL),eAe=n(OL,"P",{});var xVt=s(eAe);sWr=r(xVt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xVt.forEach(t),lWr=i(OL),sm=n(OL,"P",{});var Mae=s(sm);iWr=r(Mae,`Note:
Loading a model from its configuration file does `),oAe=n(Mae,"STRONG",{});var $Vt=s(oAe);dWr=r($Vt,"not"),$Vt.forEach(t),cWr=r(Mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),hoe=n(Mae,"A",{href:!0});var kVt=s(hoe);mWr=r(kVt,"from_pretrained()"),kVt.forEach(t),fWr=r(Mae," to load the model weights."),Mae.forEach(t),gWr=i(OL),T(cA.$$.fragment,OL),OL.forEach(t),hWr=i(ci),Wr=n(ci,"DIV",{class:!0});var mi=s(Wr);T(S$.$$.fragment,mi),uWr=i(mi),rAe=n(mi,"P",{});var SVt=s(rAe);pWr=r(SVt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),SVt.forEach(t),_Wr=i(mi),Cn=n(mi,"P",{});var VL=s(Cn);bWr=r(VL,"The model class to instantiate is selected based on the "),tAe=n(VL,"CODE",{});var RVt=s(tAe);vWr=r(RVt,"model_type"),RVt.forEach(t),FWr=r(VL,` property of the config object (either
passed as an argument or loaded from `),aAe=n(VL,"CODE",{});var PVt=s(aAe);TWr=r(PVt,"pretrained_model_name_or_path"),PVt.forEach(t),MWr=r(VL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nAe=n(VL,"CODE",{});var BVt=s(nAe);EWr=r(BVt,"pretrained_model_name_or_path"),BVt.forEach(t),CWr=r(VL,":"),VL.forEach(t),wWr=i(mi),$e=n(mi,"UL",{});var qe=s($e);mA=n(qe,"LI",{});var pVe=s(mA);sAe=n(pVe,"STRONG",{});var IVt=s(sAe);AWr=r(IVt,"albert"),IVt.forEach(t),LWr=r(pVe," \u2014 "),uoe=n(pVe,"A",{href:!0});var NVt=s(uoe);yWr=r(NVt,"FlaxAlbertForMaskedLM"),NVt.forEach(t),xWr=r(pVe," (ALBERT model)"),pVe.forEach(t),$Wr=i(qe),fA=n(qe,"LI",{});var _Ve=s(fA);lAe=n(_Ve,"STRONG",{});var qVt=s(lAe);kWr=r(qVt,"bart"),qVt.forEach(t),SWr=r(_Ve," \u2014 "),poe=n(_Ve,"A",{href:!0});var jVt=s(poe);RWr=r(jVt,"FlaxBartForConditionalGeneration"),jVt.forEach(t),PWr=r(_Ve," (BART model)"),_Ve.forEach(t),BWr=i(qe),gA=n(qe,"LI",{});var bVe=s(gA);iAe=n(bVe,"STRONG",{});var DVt=s(iAe);IWr=r(DVt,"bert"),DVt.forEach(t),NWr=r(bVe," \u2014 "),_oe=n(bVe,"A",{href:!0});var GVt=s(_oe);qWr=r(GVt,"FlaxBertForMaskedLM"),GVt.forEach(t),jWr=r(bVe," (BERT model)"),bVe.forEach(t),DWr=i(qe),hA=n(qe,"LI",{});var vVe=s(hA);dAe=n(vVe,"STRONG",{});var OVt=s(dAe);GWr=r(OVt,"big_bird"),OVt.forEach(t),OWr=r(vVe," \u2014 "),boe=n(vVe,"A",{href:!0});var VVt=s(boe);VWr=r(VVt,"FlaxBigBirdForMaskedLM"),VVt.forEach(t),XWr=r(vVe," (BigBird model)"),vVe.forEach(t),zWr=i(qe),uA=n(qe,"LI",{});var FVe=s(uA);cAe=n(FVe,"STRONG",{});var XVt=s(cAe);QWr=r(XVt,"distilbert"),XVt.forEach(t),WWr=r(FVe," \u2014 "),voe=n(FVe,"A",{href:!0});var zVt=s(voe);HWr=r(zVt,"FlaxDistilBertForMaskedLM"),zVt.forEach(t),UWr=r(FVe," (DistilBERT model)"),FVe.forEach(t),JWr=i(qe),pA=n(qe,"LI",{});var TVe=s(pA);mAe=n(TVe,"STRONG",{});var QVt=s(mAe);YWr=r(QVt,"electra"),QVt.forEach(t),KWr=r(TVe," \u2014 "),Foe=n(TVe,"A",{href:!0});var WVt=s(Foe);ZWr=r(WVt,"FlaxElectraForMaskedLM"),WVt.forEach(t),eHr=r(TVe," (ELECTRA model)"),TVe.forEach(t),oHr=i(qe),_A=n(qe,"LI",{});var MVe=s(_A);fAe=n(MVe,"STRONG",{});var HVt=s(fAe);rHr=r(HVt,"mbart"),HVt.forEach(t),tHr=r(MVe," \u2014 "),Toe=n(MVe,"A",{href:!0});var UVt=s(Toe);aHr=r(UVt,"FlaxMBartForConditionalGeneration"),UVt.forEach(t),nHr=r(MVe," (mBART model)"),MVe.forEach(t),sHr=i(qe),bA=n(qe,"LI",{});var EVe=s(bA);gAe=n(EVe,"STRONG",{});var JVt=s(gAe);lHr=r(JVt,"roberta"),JVt.forEach(t),iHr=r(EVe," \u2014 "),Moe=n(EVe,"A",{href:!0});var YVt=s(Moe);dHr=r(YVt,"FlaxRobertaForMaskedLM"),YVt.forEach(t),cHr=r(EVe," (RoBERTa model)"),EVe.forEach(t),mHr=i(qe),vA=n(qe,"LI",{});var CVe=s(vA);hAe=n(CVe,"STRONG",{});var KVt=s(hAe);fHr=r(KVt,"roformer"),KVt.forEach(t),gHr=r(CVe," \u2014 "),Eoe=n(CVe,"A",{href:!0});var ZVt=s(Eoe);hHr=r(ZVt,"FlaxRoFormerForMaskedLM"),ZVt.forEach(t),uHr=r(CVe," (RoFormer model)"),CVe.forEach(t),pHr=i(qe),FA=n(qe,"LI",{});var wVe=s(FA);uAe=n(wVe,"STRONG",{});var eXt=s(uAe);_Hr=r(eXt,"xlm-roberta"),eXt.forEach(t),bHr=r(wVe," \u2014 "),Coe=n(wVe,"A",{href:!0});var oXt=s(Coe);vHr=r(oXt,"FlaxXLMRobertaForMaskedLM"),oXt.forEach(t),FHr=r(wVe," (XLM-RoBERTa model)"),wVe.forEach(t),qe.forEach(t),THr=i(mi),T(TA.$$.fragment,mi),mi.forEach(t),ci.forEach(t),mQe=i(m),lm=n(m,"H2",{class:!0});var FHe=s(lm);MA=n(FHe,"A",{id:!0,class:!0,href:!0});var rXt=s(MA);pAe=n(rXt,"SPAN",{});var tXt=s(pAe);T(R$.$$.fragment,tXt),tXt.forEach(t),rXt.forEach(t),MHr=i(FHe),_Ae=n(FHe,"SPAN",{});var aXt=s(_Ae);EHr=r(aXt,"FlaxAutoModelForSeq2SeqLM"),aXt.forEach(t),FHe.forEach(t),fQe=i(m),Fr=n(m,"DIV",{class:!0});var fi=s(Fr);T(P$.$$.fragment,fi),CHr=i(fi),im=n(fi,"P",{});var Eae=s(im);wHr=r(Eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),woe=n(Eae,"A",{href:!0});var nXt=s(woe);AHr=r(nXt,"from_pretrained()"),nXt.forEach(t),LHr=r(Eae," class method or the "),Aoe=n(Eae,"A",{href:!0});var sXt=s(Aoe);yHr=r(sXt,"from_config()"),sXt.forEach(t),xHr=r(Eae,` class
method.`),Eae.forEach(t),$Hr=i(fi),B$=n(fi,"P",{});var THe=s(B$);kHr=r(THe,"This class cannot be instantiated directly using "),bAe=n(THe,"CODE",{});var lXt=s(bAe);SHr=r(lXt,"__init__()"),lXt.forEach(t),RHr=r(THe," (throws an error)."),THe.forEach(t),PHr=i(fi),Yt=n(fi,"DIV",{class:!0});var XL=s(Yt);T(I$.$$.fragment,XL),BHr=i(XL),vAe=n(XL,"P",{});var iXt=s(vAe);IHr=r(iXt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),iXt.forEach(t),NHr=i(XL),dm=n(XL,"P",{});var Cae=s(dm);qHr=r(Cae,`Note:
Loading a model from its configuration file does `),FAe=n(Cae,"STRONG",{});var dXt=s(FAe);jHr=r(dXt,"not"),dXt.forEach(t),DHr=r(Cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Loe=n(Cae,"A",{href:!0});var cXt=s(Loe);GHr=r(cXt,"from_pretrained()"),cXt.forEach(t),OHr=r(Cae," to load the model weights."),Cae.forEach(t),VHr=i(XL),T(EA.$$.fragment,XL),XL.forEach(t),XHr=i(fi),Hr=n(fi,"DIV",{class:!0});var gi=s(Hr);T(N$.$$.fragment,gi),zHr=i(gi),TAe=n(gi,"P",{});var mXt=s(TAe);QHr=r(mXt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mXt.forEach(t),WHr=i(gi),wn=n(gi,"P",{});var zL=s(wn);HHr=r(zL,"The model class to instantiate is selected based on the "),MAe=n(zL,"CODE",{});var fXt=s(MAe);UHr=r(fXt,"model_type"),fXt.forEach(t),JHr=r(zL,` property of the config object (either
passed as an argument or loaded from `),EAe=n(zL,"CODE",{});var gXt=s(EAe);YHr=r(gXt,"pretrained_model_name_or_path"),gXt.forEach(t),KHr=r(zL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CAe=n(zL,"CODE",{});var hXt=s(CAe);ZHr=r(hXt,"pretrained_model_name_or_path"),hXt.forEach(t),eUr=r(zL,":"),zL.forEach(t),oUr=i(gi),ke=n(gi,"UL",{});var je=s(ke);CA=n(je,"LI",{});var AVe=s(CA);wAe=n(AVe,"STRONG",{});var uXt=s(wAe);rUr=r(uXt,"bart"),uXt.forEach(t),tUr=r(AVe," \u2014 "),yoe=n(AVe,"A",{href:!0});var pXt=s(yoe);aUr=r(pXt,"FlaxBartForConditionalGeneration"),pXt.forEach(t),nUr=r(AVe," (BART model)"),AVe.forEach(t),sUr=i(je),wA=n(je,"LI",{});var LVe=s(wA);AAe=n(LVe,"STRONG",{});var _Xt=s(AAe);lUr=r(_Xt,"blenderbot"),_Xt.forEach(t),iUr=r(LVe," \u2014 "),xoe=n(LVe,"A",{href:!0});var bXt=s(xoe);dUr=r(bXt,"FlaxBlenderbotForConditionalGeneration"),bXt.forEach(t),cUr=r(LVe," (Blenderbot model)"),LVe.forEach(t),mUr=i(je),AA=n(je,"LI",{});var yVe=s(AA);LAe=n(yVe,"STRONG",{});var vXt=s(LAe);fUr=r(vXt,"blenderbot-small"),vXt.forEach(t),gUr=r(yVe," \u2014 "),$oe=n(yVe,"A",{href:!0});var FXt=s($oe);hUr=r(FXt,"FlaxBlenderbotSmallForConditionalGeneration"),FXt.forEach(t),uUr=r(yVe," (BlenderbotSmall model)"),yVe.forEach(t),pUr=i(je),LA=n(je,"LI",{});var xVe=s(LA);yAe=n(xVe,"STRONG",{});var TXt=s(yAe);_Ur=r(TXt,"encoder-decoder"),TXt.forEach(t),bUr=r(xVe," \u2014 "),koe=n(xVe,"A",{href:!0});var MXt=s(koe);vUr=r(MXt,"FlaxEncoderDecoderModel"),MXt.forEach(t),FUr=r(xVe," (Encoder decoder model)"),xVe.forEach(t),TUr=i(je),yA=n(je,"LI",{});var $Ve=s(yA);xAe=n($Ve,"STRONG",{});var EXt=s(xAe);MUr=r(EXt,"longt5"),EXt.forEach(t),EUr=r($Ve," \u2014 "),Soe=n($Ve,"A",{href:!0});var CXt=s(Soe);CUr=r(CXt,"FlaxLongT5ForConditionalGeneration"),CXt.forEach(t),wUr=r($Ve," (LongT5 model)"),$Ve.forEach(t),AUr=i(je),xA=n(je,"LI",{});var kVe=s(xA);$Ae=n(kVe,"STRONG",{});var wXt=s($Ae);LUr=r(wXt,"marian"),wXt.forEach(t),yUr=r(kVe," \u2014 "),Roe=n(kVe,"A",{href:!0});var AXt=s(Roe);xUr=r(AXt,"FlaxMarianMTModel"),AXt.forEach(t),$Ur=r(kVe," (Marian model)"),kVe.forEach(t),kUr=i(je),$A=n(je,"LI",{});var SVe=s($A);kAe=n(SVe,"STRONG",{});var LXt=s(kAe);SUr=r(LXt,"mbart"),LXt.forEach(t),RUr=r(SVe," \u2014 "),Poe=n(SVe,"A",{href:!0});var yXt=s(Poe);PUr=r(yXt,"FlaxMBartForConditionalGeneration"),yXt.forEach(t),BUr=r(SVe," (mBART model)"),SVe.forEach(t),IUr=i(je),kA=n(je,"LI",{});var RVe=s(kA);SAe=n(RVe,"STRONG",{});var xXt=s(SAe);NUr=r(xXt,"mt5"),xXt.forEach(t),qUr=r(RVe," \u2014 "),Boe=n(RVe,"A",{href:!0});var $Xt=s(Boe);jUr=r($Xt,"FlaxMT5ForConditionalGeneration"),$Xt.forEach(t),DUr=r(RVe," (MT5 model)"),RVe.forEach(t),GUr=i(je),SA=n(je,"LI",{});var PVe=s(SA);RAe=n(PVe,"STRONG",{});var kXt=s(RAe);OUr=r(kXt,"pegasus"),kXt.forEach(t),VUr=r(PVe," \u2014 "),Ioe=n(PVe,"A",{href:!0});var SXt=s(Ioe);XUr=r(SXt,"FlaxPegasusForConditionalGeneration"),SXt.forEach(t),zUr=r(PVe," (Pegasus model)"),PVe.forEach(t),QUr=i(je),RA=n(je,"LI",{});var BVe=s(RA);PAe=n(BVe,"STRONG",{});var RXt=s(PAe);WUr=r(RXt,"t5"),RXt.forEach(t),HUr=r(BVe," \u2014 "),Noe=n(BVe,"A",{href:!0});var PXt=s(Noe);UUr=r(PXt,"FlaxT5ForConditionalGeneration"),PXt.forEach(t),JUr=r(BVe," (T5 model)"),BVe.forEach(t),je.forEach(t),YUr=i(gi),T(PA.$$.fragment,gi),gi.forEach(t),fi.forEach(t),gQe=i(m),cm=n(m,"H2",{class:!0});var MHe=s(cm);BA=n(MHe,"A",{id:!0,class:!0,href:!0});var BXt=s(BA);BAe=n(BXt,"SPAN",{});var IXt=s(BAe);T(q$.$$.fragment,IXt),IXt.forEach(t),BXt.forEach(t),KUr=i(MHe),IAe=n(MHe,"SPAN",{});var NXt=s(IAe);ZUr=r(NXt,"FlaxAutoModelForSequenceClassification"),NXt.forEach(t),MHe.forEach(t),hQe=i(m),Tr=n(m,"DIV",{class:!0});var hi=s(Tr);T(j$.$$.fragment,hi),eJr=i(hi),mm=n(hi,"P",{});var wae=s(mm);oJr=r(wae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qoe=n(wae,"A",{href:!0});var qXt=s(qoe);rJr=r(qXt,"from_pretrained()"),qXt.forEach(t),tJr=r(wae," class method or the "),joe=n(wae,"A",{href:!0});var jXt=s(joe);aJr=r(jXt,"from_config()"),jXt.forEach(t),nJr=r(wae,` class
method.`),wae.forEach(t),sJr=i(hi),D$=n(hi,"P",{});var EHe=s(D$);lJr=r(EHe,"This class cannot be instantiated directly using "),NAe=n(EHe,"CODE",{});var DXt=s(NAe);iJr=r(DXt,"__init__()"),DXt.forEach(t),dJr=r(EHe," (throws an error)."),EHe.forEach(t),cJr=i(hi),Kt=n(hi,"DIV",{class:!0});var QL=s(Kt);T(G$.$$.fragment,QL),mJr=i(QL),qAe=n(QL,"P",{});var GXt=s(qAe);fJr=r(GXt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),GXt.forEach(t),gJr=i(QL),fm=n(QL,"P",{});var Aae=s(fm);hJr=r(Aae,`Note:
Loading a model from its configuration file does `),jAe=n(Aae,"STRONG",{});var OXt=s(jAe);uJr=r(OXt,"not"),OXt.forEach(t),pJr=r(Aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Doe=n(Aae,"A",{href:!0});var VXt=s(Doe);_Jr=r(VXt,"from_pretrained()"),VXt.forEach(t),bJr=r(Aae," to load the model weights."),Aae.forEach(t),vJr=i(QL),T(IA.$$.fragment,QL),QL.forEach(t),FJr=i(hi),Ur=n(hi,"DIV",{class:!0});var ui=s(Ur);T(O$.$$.fragment,ui),TJr=i(ui),DAe=n(ui,"P",{});var XXt=s(DAe);MJr=r(XXt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),XXt.forEach(t),EJr=i(ui),An=n(ui,"P",{});var WL=s(An);CJr=r(WL,"The model class to instantiate is selected based on the "),GAe=n(WL,"CODE",{});var zXt=s(GAe);wJr=r(zXt,"model_type"),zXt.forEach(t),AJr=r(WL,` property of the config object (either
passed as an argument or loaded from `),OAe=n(WL,"CODE",{});var QXt=s(OAe);LJr=r(QXt,"pretrained_model_name_or_path"),QXt.forEach(t),yJr=r(WL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VAe=n(WL,"CODE",{});var WXt=s(VAe);xJr=r(WXt,"pretrained_model_name_or_path"),WXt.forEach(t),$Jr=r(WL,":"),WL.forEach(t),kJr=i(ui),Se=n(ui,"UL",{});var De=s(Se);NA=n(De,"LI",{});var IVe=s(NA);XAe=n(IVe,"STRONG",{});var HXt=s(XAe);SJr=r(HXt,"albert"),HXt.forEach(t),RJr=r(IVe," \u2014 "),Goe=n(IVe,"A",{href:!0});var UXt=s(Goe);PJr=r(UXt,"FlaxAlbertForSequenceClassification"),UXt.forEach(t),BJr=r(IVe," (ALBERT model)"),IVe.forEach(t),IJr=i(De),qA=n(De,"LI",{});var NVe=s(qA);zAe=n(NVe,"STRONG",{});var JXt=s(zAe);NJr=r(JXt,"bart"),JXt.forEach(t),qJr=r(NVe," \u2014 "),Ooe=n(NVe,"A",{href:!0});var YXt=s(Ooe);jJr=r(YXt,"FlaxBartForSequenceClassification"),YXt.forEach(t),DJr=r(NVe," (BART model)"),NVe.forEach(t),GJr=i(De),jA=n(De,"LI",{});var qVe=s(jA);QAe=n(qVe,"STRONG",{});var KXt=s(QAe);OJr=r(KXt,"bert"),KXt.forEach(t),VJr=r(qVe," \u2014 "),Voe=n(qVe,"A",{href:!0});var ZXt=s(Voe);XJr=r(ZXt,"FlaxBertForSequenceClassification"),ZXt.forEach(t),zJr=r(qVe," (BERT model)"),qVe.forEach(t),QJr=i(De),DA=n(De,"LI",{});var jVe=s(DA);WAe=n(jVe,"STRONG",{});var ezt=s(WAe);WJr=r(ezt,"big_bird"),ezt.forEach(t),HJr=r(jVe," \u2014 "),Xoe=n(jVe,"A",{href:!0});var ozt=s(Xoe);UJr=r(ozt,"FlaxBigBirdForSequenceClassification"),ozt.forEach(t),JJr=r(jVe," (BigBird model)"),jVe.forEach(t),YJr=i(De),GA=n(De,"LI",{});var DVe=s(GA);HAe=n(DVe,"STRONG",{});var rzt=s(HAe);KJr=r(rzt,"distilbert"),rzt.forEach(t),ZJr=r(DVe," \u2014 "),zoe=n(DVe,"A",{href:!0});var tzt=s(zoe);eYr=r(tzt,"FlaxDistilBertForSequenceClassification"),tzt.forEach(t),oYr=r(DVe," (DistilBERT model)"),DVe.forEach(t),rYr=i(De),OA=n(De,"LI",{});var GVe=s(OA);UAe=n(GVe,"STRONG",{});var azt=s(UAe);tYr=r(azt,"electra"),azt.forEach(t),aYr=r(GVe," \u2014 "),Qoe=n(GVe,"A",{href:!0});var nzt=s(Qoe);nYr=r(nzt,"FlaxElectraForSequenceClassification"),nzt.forEach(t),sYr=r(GVe," (ELECTRA model)"),GVe.forEach(t),lYr=i(De),VA=n(De,"LI",{});var OVe=s(VA);JAe=n(OVe,"STRONG",{});var szt=s(JAe);iYr=r(szt,"mbart"),szt.forEach(t),dYr=r(OVe," \u2014 "),Woe=n(OVe,"A",{href:!0});var lzt=s(Woe);cYr=r(lzt,"FlaxMBartForSequenceClassification"),lzt.forEach(t),mYr=r(OVe," (mBART model)"),OVe.forEach(t),fYr=i(De),XA=n(De,"LI",{});var VVe=s(XA);YAe=n(VVe,"STRONG",{});var izt=s(YAe);gYr=r(izt,"roberta"),izt.forEach(t),hYr=r(VVe," \u2014 "),Hoe=n(VVe,"A",{href:!0});var dzt=s(Hoe);uYr=r(dzt,"FlaxRobertaForSequenceClassification"),dzt.forEach(t),pYr=r(VVe," (RoBERTa model)"),VVe.forEach(t),_Yr=i(De),zA=n(De,"LI",{});var XVe=s(zA);KAe=n(XVe,"STRONG",{});var czt=s(KAe);bYr=r(czt,"roformer"),czt.forEach(t),vYr=r(XVe," \u2014 "),Uoe=n(XVe,"A",{href:!0});var mzt=s(Uoe);FYr=r(mzt,"FlaxRoFormerForSequenceClassification"),mzt.forEach(t),TYr=r(XVe," (RoFormer model)"),XVe.forEach(t),MYr=i(De),QA=n(De,"LI",{});var zVe=s(QA);ZAe=n(zVe,"STRONG",{});var fzt=s(ZAe);EYr=r(fzt,"xlm-roberta"),fzt.forEach(t),CYr=r(zVe," \u2014 "),Joe=n(zVe,"A",{href:!0});var gzt=s(Joe);wYr=r(gzt,"FlaxXLMRobertaForSequenceClassification"),gzt.forEach(t),AYr=r(zVe," (XLM-RoBERTa model)"),zVe.forEach(t),De.forEach(t),LYr=i(ui),T(WA.$$.fragment,ui),ui.forEach(t),hi.forEach(t),uQe=i(m),gm=n(m,"H2",{class:!0});var CHe=s(gm);HA=n(CHe,"A",{id:!0,class:!0,href:!0});var hzt=s(HA);e6e=n(hzt,"SPAN",{});var uzt=s(e6e);T(V$.$$.fragment,uzt),uzt.forEach(t),hzt.forEach(t),yYr=i(CHe),o6e=n(CHe,"SPAN",{});var pzt=s(o6e);xYr=r(pzt,"FlaxAutoModelForQuestionAnswering"),pzt.forEach(t),CHe.forEach(t),pQe=i(m),Mr=n(m,"DIV",{class:!0});var pi=s(Mr);T(X$.$$.fragment,pi),$Yr=i(pi),hm=n(pi,"P",{});var Lae=s(hm);kYr=r(Lae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Yoe=n(Lae,"A",{href:!0});var _zt=s(Yoe);SYr=r(_zt,"from_pretrained()"),_zt.forEach(t),RYr=r(Lae," class method or the "),Koe=n(Lae,"A",{href:!0});var bzt=s(Koe);PYr=r(bzt,"from_config()"),bzt.forEach(t),BYr=r(Lae,` class
method.`),Lae.forEach(t),IYr=i(pi),z$=n(pi,"P",{});var wHe=s(z$);NYr=r(wHe,"This class cannot be instantiated directly using "),r6e=n(wHe,"CODE",{});var vzt=s(r6e);qYr=r(vzt,"__init__()"),vzt.forEach(t),jYr=r(wHe," (throws an error)."),wHe.forEach(t),DYr=i(pi),Zt=n(pi,"DIV",{class:!0});var HL=s(Zt);T(Q$.$$.fragment,HL),GYr=i(HL),t6e=n(HL,"P",{});var Fzt=s(t6e);OYr=r(Fzt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Fzt.forEach(t),VYr=i(HL),um=n(HL,"P",{});var yae=s(um);XYr=r(yae,`Note:
Loading a model from its configuration file does `),a6e=n(yae,"STRONG",{});var Tzt=s(a6e);zYr=r(Tzt,"not"),Tzt.forEach(t),QYr=r(yae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=n(yae,"A",{href:!0});var Mzt=s(Zoe);WYr=r(Mzt,"from_pretrained()"),Mzt.forEach(t),HYr=r(yae," to load the model weights."),yae.forEach(t),UYr=i(HL),T(UA.$$.fragment,HL),HL.forEach(t),JYr=i(pi),Jr=n(pi,"DIV",{class:!0});var _i=s(Jr);T(W$.$$.fragment,_i),YYr=i(_i),n6e=n(_i,"P",{});var Ezt=s(n6e);KYr=r(Ezt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ezt.forEach(t),ZYr=i(_i),Ln=n(_i,"P",{});var UL=s(Ln);eKr=r(UL,"The model class to instantiate is selected based on the "),s6e=n(UL,"CODE",{});var Czt=s(s6e);oKr=r(Czt,"model_type"),Czt.forEach(t),rKr=r(UL,` property of the config object (either
passed as an argument or loaded from `),l6e=n(UL,"CODE",{});var wzt=s(l6e);tKr=r(wzt,"pretrained_model_name_or_path"),wzt.forEach(t),aKr=r(UL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i6e=n(UL,"CODE",{});var Azt=s(i6e);nKr=r(Azt,"pretrained_model_name_or_path"),Azt.forEach(t),sKr=r(UL,":"),UL.forEach(t),lKr=i(_i),Re=n(_i,"UL",{});var Ge=s(Re);JA=n(Ge,"LI",{});var QVe=s(JA);d6e=n(QVe,"STRONG",{});var Lzt=s(d6e);iKr=r(Lzt,"albert"),Lzt.forEach(t),dKr=r(QVe," \u2014 "),ere=n(QVe,"A",{href:!0});var yzt=s(ere);cKr=r(yzt,"FlaxAlbertForQuestionAnswering"),yzt.forEach(t),mKr=r(QVe," (ALBERT model)"),QVe.forEach(t),fKr=i(Ge),YA=n(Ge,"LI",{});var WVe=s(YA);c6e=n(WVe,"STRONG",{});var xzt=s(c6e);gKr=r(xzt,"bart"),xzt.forEach(t),hKr=r(WVe," \u2014 "),ore=n(WVe,"A",{href:!0});var $zt=s(ore);uKr=r($zt,"FlaxBartForQuestionAnswering"),$zt.forEach(t),pKr=r(WVe," (BART model)"),WVe.forEach(t),_Kr=i(Ge),KA=n(Ge,"LI",{});var HVe=s(KA);m6e=n(HVe,"STRONG",{});var kzt=s(m6e);bKr=r(kzt,"bert"),kzt.forEach(t),vKr=r(HVe," \u2014 "),rre=n(HVe,"A",{href:!0});var Szt=s(rre);FKr=r(Szt,"FlaxBertForQuestionAnswering"),Szt.forEach(t),TKr=r(HVe," (BERT model)"),HVe.forEach(t),MKr=i(Ge),ZA=n(Ge,"LI",{});var UVe=s(ZA);f6e=n(UVe,"STRONG",{});var Rzt=s(f6e);EKr=r(Rzt,"big_bird"),Rzt.forEach(t),CKr=r(UVe," \u2014 "),tre=n(UVe,"A",{href:!0});var Pzt=s(tre);wKr=r(Pzt,"FlaxBigBirdForQuestionAnswering"),Pzt.forEach(t),AKr=r(UVe," (BigBird model)"),UVe.forEach(t),LKr=i(Ge),e6=n(Ge,"LI",{});var JVe=s(e6);g6e=n(JVe,"STRONG",{});var Bzt=s(g6e);yKr=r(Bzt,"distilbert"),Bzt.forEach(t),xKr=r(JVe," \u2014 "),are=n(JVe,"A",{href:!0});var Izt=s(are);$Kr=r(Izt,"FlaxDistilBertForQuestionAnswering"),Izt.forEach(t),kKr=r(JVe," (DistilBERT model)"),JVe.forEach(t),SKr=i(Ge),o6=n(Ge,"LI",{});var YVe=s(o6);h6e=n(YVe,"STRONG",{});var Nzt=s(h6e);RKr=r(Nzt,"electra"),Nzt.forEach(t),PKr=r(YVe," \u2014 "),nre=n(YVe,"A",{href:!0});var qzt=s(nre);BKr=r(qzt,"FlaxElectraForQuestionAnswering"),qzt.forEach(t),IKr=r(YVe," (ELECTRA model)"),YVe.forEach(t),NKr=i(Ge),r6=n(Ge,"LI",{});var KVe=s(r6);u6e=n(KVe,"STRONG",{});var jzt=s(u6e);qKr=r(jzt,"mbart"),jzt.forEach(t),jKr=r(KVe," \u2014 "),sre=n(KVe,"A",{href:!0});var Dzt=s(sre);DKr=r(Dzt,"FlaxMBartForQuestionAnswering"),Dzt.forEach(t),GKr=r(KVe," (mBART model)"),KVe.forEach(t),OKr=i(Ge),t6=n(Ge,"LI",{});var ZVe=s(t6);p6e=n(ZVe,"STRONG",{});var Gzt=s(p6e);VKr=r(Gzt,"roberta"),Gzt.forEach(t),XKr=r(ZVe," \u2014 "),lre=n(ZVe,"A",{href:!0});var Ozt=s(lre);zKr=r(Ozt,"FlaxRobertaForQuestionAnswering"),Ozt.forEach(t),QKr=r(ZVe," (RoBERTa model)"),ZVe.forEach(t),WKr=i(Ge),a6=n(Ge,"LI",{});var eXe=s(a6);_6e=n(eXe,"STRONG",{});var Vzt=s(_6e);HKr=r(Vzt,"roformer"),Vzt.forEach(t),UKr=r(eXe," \u2014 "),ire=n(eXe,"A",{href:!0});var Xzt=s(ire);JKr=r(Xzt,"FlaxRoFormerForQuestionAnswering"),Xzt.forEach(t),YKr=r(eXe," (RoFormer model)"),eXe.forEach(t),KKr=i(Ge),n6=n(Ge,"LI",{});var oXe=s(n6);b6e=n(oXe,"STRONG",{});var zzt=s(b6e);ZKr=r(zzt,"xlm-roberta"),zzt.forEach(t),eZr=r(oXe," \u2014 "),dre=n(oXe,"A",{href:!0});var Qzt=s(dre);oZr=r(Qzt,"FlaxXLMRobertaForQuestionAnswering"),Qzt.forEach(t),rZr=r(oXe," (XLM-RoBERTa model)"),oXe.forEach(t),Ge.forEach(t),tZr=i(_i),T(s6.$$.fragment,_i),_i.forEach(t),pi.forEach(t),_Qe=i(m),pm=n(m,"H2",{class:!0});var AHe=s(pm);l6=n(AHe,"A",{id:!0,class:!0,href:!0});var Wzt=s(l6);v6e=n(Wzt,"SPAN",{});var Hzt=s(v6e);T(H$.$$.fragment,Hzt),Hzt.forEach(t),Wzt.forEach(t),aZr=i(AHe),F6e=n(AHe,"SPAN",{});var Uzt=s(F6e);nZr=r(Uzt,"FlaxAutoModelForTokenClassification"),Uzt.forEach(t),AHe.forEach(t),bQe=i(m),Er=n(m,"DIV",{class:!0});var bi=s(Er);T(U$.$$.fragment,bi),sZr=i(bi),_m=n(bi,"P",{});var xae=s(_m);lZr=r(xae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cre=n(xae,"A",{href:!0});var Jzt=s(cre);iZr=r(Jzt,"from_pretrained()"),Jzt.forEach(t),dZr=r(xae," class method or the "),mre=n(xae,"A",{href:!0});var Yzt=s(mre);cZr=r(Yzt,"from_config()"),Yzt.forEach(t),mZr=r(xae,` class
method.`),xae.forEach(t),fZr=i(bi),J$=n(bi,"P",{});var LHe=s(J$);gZr=r(LHe,"This class cannot be instantiated directly using "),T6e=n(LHe,"CODE",{});var Kzt=s(T6e);hZr=r(Kzt,"__init__()"),Kzt.forEach(t),uZr=r(LHe," (throws an error)."),LHe.forEach(t),pZr=i(bi),ea=n(bi,"DIV",{class:!0});var JL=s(ea);T(Y$.$$.fragment,JL),_Zr=i(JL),M6e=n(JL,"P",{});var Zzt=s(M6e);bZr=r(Zzt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Zzt.forEach(t),vZr=i(JL),bm=n(JL,"P",{});var $ae=s(bm);FZr=r($ae,`Note:
Loading a model from its configuration file does `),E6e=n($ae,"STRONG",{});var eQt=s(E6e);TZr=r(eQt,"not"),eQt.forEach(t),MZr=r($ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),fre=n($ae,"A",{href:!0});var oQt=s(fre);EZr=r(oQt,"from_pretrained()"),oQt.forEach(t),CZr=r($ae," to load the model weights."),$ae.forEach(t),wZr=i(JL),T(i6.$$.fragment,JL),JL.forEach(t),AZr=i(bi),Yr=n(bi,"DIV",{class:!0});var vi=s(Yr);T(K$.$$.fragment,vi),LZr=i(vi),C6e=n(vi,"P",{});var rQt=s(C6e);yZr=r(rQt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rQt.forEach(t),xZr=i(vi),yn=n(vi,"P",{});var YL=s(yn);$Zr=r(YL,"The model class to instantiate is selected based on the "),w6e=n(YL,"CODE",{});var tQt=s(w6e);kZr=r(tQt,"model_type"),tQt.forEach(t),SZr=r(YL,` property of the config object (either
passed as an argument or loaded from `),A6e=n(YL,"CODE",{});var aQt=s(A6e);RZr=r(aQt,"pretrained_model_name_or_path"),aQt.forEach(t),PZr=r(YL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L6e=n(YL,"CODE",{});var nQt=s(L6e);BZr=r(nQt,"pretrained_model_name_or_path"),nQt.forEach(t),IZr=r(YL,":"),YL.forEach(t),NZr=i(vi),Xe=n(vi,"UL",{});var Eo=s(Xe);d6=n(Eo,"LI",{});var rXe=s(d6);y6e=n(rXe,"STRONG",{});var sQt=s(y6e);qZr=r(sQt,"albert"),sQt.forEach(t),jZr=r(rXe," \u2014 "),gre=n(rXe,"A",{href:!0});var lQt=s(gre);DZr=r(lQt,"FlaxAlbertForTokenClassification"),lQt.forEach(t),GZr=r(rXe," (ALBERT model)"),rXe.forEach(t),OZr=i(Eo),c6=n(Eo,"LI",{});var tXe=s(c6);x6e=n(tXe,"STRONG",{});var iQt=s(x6e);VZr=r(iQt,"bert"),iQt.forEach(t),XZr=r(tXe," \u2014 "),hre=n(tXe,"A",{href:!0});var dQt=s(hre);zZr=r(dQt,"FlaxBertForTokenClassification"),dQt.forEach(t),QZr=r(tXe," (BERT model)"),tXe.forEach(t),WZr=i(Eo),m6=n(Eo,"LI",{});var aXe=s(m6);$6e=n(aXe,"STRONG",{});var cQt=s($6e);HZr=r(cQt,"big_bird"),cQt.forEach(t),UZr=r(aXe," \u2014 "),ure=n(aXe,"A",{href:!0});var mQt=s(ure);JZr=r(mQt,"FlaxBigBirdForTokenClassification"),mQt.forEach(t),YZr=r(aXe," (BigBird model)"),aXe.forEach(t),KZr=i(Eo),f6=n(Eo,"LI",{});var nXe=s(f6);k6e=n(nXe,"STRONG",{});var fQt=s(k6e);ZZr=r(fQt,"distilbert"),fQt.forEach(t),eet=r(nXe," \u2014 "),pre=n(nXe,"A",{href:!0});var gQt=s(pre);oet=r(gQt,"FlaxDistilBertForTokenClassification"),gQt.forEach(t),ret=r(nXe," (DistilBERT model)"),nXe.forEach(t),tet=i(Eo),g6=n(Eo,"LI",{});var sXe=s(g6);S6e=n(sXe,"STRONG",{});var hQt=s(S6e);aet=r(hQt,"electra"),hQt.forEach(t),net=r(sXe," \u2014 "),_re=n(sXe,"A",{href:!0});var uQt=s(_re);set=r(uQt,"FlaxElectraForTokenClassification"),uQt.forEach(t),iet=r(sXe," (ELECTRA model)"),sXe.forEach(t),det=i(Eo),h6=n(Eo,"LI",{});var lXe=s(h6);R6e=n(lXe,"STRONG",{});var pQt=s(R6e);cet=r(pQt,"roberta"),pQt.forEach(t),met=r(lXe," \u2014 "),bre=n(lXe,"A",{href:!0});var _Qt=s(bre);fet=r(_Qt,"FlaxRobertaForTokenClassification"),_Qt.forEach(t),get=r(lXe," (RoBERTa model)"),lXe.forEach(t),het=i(Eo),u6=n(Eo,"LI",{});var iXe=s(u6);P6e=n(iXe,"STRONG",{});var bQt=s(P6e);uet=r(bQt,"roformer"),bQt.forEach(t),pet=r(iXe," \u2014 "),vre=n(iXe,"A",{href:!0});var vQt=s(vre);_et=r(vQt,"FlaxRoFormerForTokenClassification"),vQt.forEach(t),bet=r(iXe," (RoFormer model)"),iXe.forEach(t),vet=i(Eo),p6=n(Eo,"LI",{});var dXe=s(p6);B6e=n(dXe,"STRONG",{});var FQt=s(B6e);Fet=r(FQt,"xlm-roberta"),FQt.forEach(t),Tet=r(dXe," \u2014 "),Fre=n(dXe,"A",{href:!0});var TQt=s(Fre);Met=r(TQt,"FlaxXLMRobertaForTokenClassification"),TQt.forEach(t),Eet=r(dXe," (XLM-RoBERTa model)"),dXe.forEach(t),Eo.forEach(t),Cet=i(vi),T(_6.$$.fragment,vi),vi.forEach(t),bi.forEach(t),vQe=i(m),vm=n(m,"H2",{class:!0});var yHe=s(vm);b6=n(yHe,"A",{id:!0,class:!0,href:!0});var MQt=s(b6);I6e=n(MQt,"SPAN",{});var EQt=s(I6e);T(Z$.$$.fragment,EQt),EQt.forEach(t),MQt.forEach(t),wet=i(yHe),N6e=n(yHe,"SPAN",{});var CQt=s(N6e);Aet=r(CQt,"FlaxAutoModelForMultipleChoice"),CQt.forEach(t),yHe.forEach(t),FQe=i(m),Cr=n(m,"DIV",{class:!0});var Fi=s(Cr);T(ek.$$.fragment,Fi),Let=i(Fi),Fm=n(Fi,"P",{});var kae=s(Fm);yet=r(kae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Tre=n(kae,"A",{href:!0});var wQt=s(Tre);xet=r(wQt,"from_pretrained()"),wQt.forEach(t),$et=r(kae," class method or the "),Mre=n(kae,"A",{href:!0});var AQt=s(Mre);ket=r(AQt,"from_config()"),AQt.forEach(t),Set=r(kae,` class
method.`),kae.forEach(t),Ret=i(Fi),ok=n(Fi,"P",{});var xHe=s(ok);Pet=r(xHe,"This class cannot be instantiated directly using "),q6e=n(xHe,"CODE",{});var LQt=s(q6e);Bet=r(LQt,"__init__()"),LQt.forEach(t),Iet=r(xHe," (throws an error)."),xHe.forEach(t),Net=i(Fi),oa=n(Fi,"DIV",{class:!0});var KL=s(oa);T(rk.$$.fragment,KL),qet=i(KL),j6e=n(KL,"P",{});var yQt=s(j6e);jet=r(yQt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),yQt.forEach(t),Det=i(KL),Tm=n(KL,"P",{});var Sae=s(Tm);Get=r(Sae,`Note:
Loading a model from its configuration file does `),D6e=n(Sae,"STRONG",{});var xQt=s(D6e);Oet=r(xQt,"not"),xQt.forEach(t),Vet=r(Sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ere=n(Sae,"A",{href:!0});var $Qt=s(Ere);Xet=r($Qt,"from_pretrained()"),$Qt.forEach(t),zet=r(Sae," to load the model weights."),Sae.forEach(t),Qet=i(KL),T(v6.$$.fragment,KL),KL.forEach(t),Wet=i(Fi),Kr=n(Fi,"DIV",{class:!0});var Ti=s(Kr);T(tk.$$.fragment,Ti),Het=i(Ti),G6e=n(Ti,"P",{});var kQt=s(G6e);Uet=r(kQt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kQt.forEach(t),Jet=i(Ti),xn=n(Ti,"P",{});var ZL=s(xn);Yet=r(ZL,"The model class to instantiate is selected based on the "),O6e=n(ZL,"CODE",{});var SQt=s(O6e);Ket=r(SQt,"model_type"),SQt.forEach(t),Zet=r(ZL,` property of the config object (either
passed as an argument or loaded from `),V6e=n(ZL,"CODE",{});var RQt=s(V6e);eot=r(RQt,"pretrained_model_name_or_path"),RQt.forEach(t),oot=r(ZL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=n(ZL,"CODE",{});var PQt=s(X6e);rot=r(PQt,"pretrained_model_name_or_path"),PQt.forEach(t),tot=r(ZL,":"),ZL.forEach(t),aot=i(Ti),ze=n(Ti,"UL",{});var Co=s(ze);F6=n(Co,"LI",{});var cXe=s(F6);z6e=n(cXe,"STRONG",{});var BQt=s(z6e);not=r(BQt,"albert"),BQt.forEach(t),sot=r(cXe," \u2014 "),Cre=n(cXe,"A",{href:!0});var IQt=s(Cre);lot=r(IQt,"FlaxAlbertForMultipleChoice"),IQt.forEach(t),iot=r(cXe," (ALBERT model)"),cXe.forEach(t),dot=i(Co),T6=n(Co,"LI",{});var mXe=s(T6);Q6e=n(mXe,"STRONG",{});var NQt=s(Q6e);cot=r(NQt,"bert"),NQt.forEach(t),mot=r(mXe," \u2014 "),wre=n(mXe,"A",{href:!0});var qQt=s(wre);fot=r(qQt,"FlaxBertForMultipleChoice"),qQt.forEach(t),got=r(mXe," (BERT model)"),mXe.forEach(t),hot=i(Co),M6=n(Co,"LI",{});var fXe=s(M6);W6e=n(fXe,"STRONG",{});var jQt=s(W6e);uot=r(jQt,"big_bird"),jQt.forEach(t),pot=r(fXe," \u2014 "),Are=n(fXe,"A",{href:!0});var DQt=s(Are);_ot=r(DQt,"FlaxBigBirdForMultipleChoice"),DQt.forEach(t),bot=r(fXe," (BigBird model)"),fXe.forEach(t),vot=i(Co),E6=n(Co,"LI",{});var gXe=s(E6);H6e=n(gXe,"STRONG",{});var GQt=s(H6e);Fot=r(GQt,"distilbert"),GQt.forEach(t),Tot=r(gXe," \u2014 "),Lre=n(gXe,"A",{href:!0});var OQt=s(Lre);Mot=r(OQt,"FlaxDistilBertForMultipleChoice"),OQt.forEach(t),Eot=r(gXe," (DistilBERT model)"),gXe.forEach(t),Cot=i(Co),C6=n(Co,"LI",{});var hXe=s(C6);U6e=n(hXe,"STRONG",{});var VQt=s(U6e);wot=r(VQt,"electra"),VQt.forEach(t),Aot=r(hXe," \u2014 "),yre=n(hXe,"A",{href:!0});var XQt=s(yre);Lot=r(XQt,"FlaxElectraForMultipleChoice"),XQt.forEach(t),yot=r(hXe," (ELECTRA model)"),hXe.forEach(t),xot=i(Co),w6=n(Co,"LI",{});var uXe=s(w6);J6e=n(uXe,"STRONG",{});var zQt=s(J6e);$ot=r(zQt,"roberta"),zQt.forEach(t),kot=r(uXe," \u2014 "),xre=n(uXe,"A",{href:!0});var QQt=s(xre);Sot=r(QQt,"FlaxRobertaForMultipleChoice"),QQt.forEach(t),Rot=r(uXe," (RoBERTa model)"),uXe.forEach(t),Pot=i(Co),A6=n(Co,"LI",{});var pXe=s(A6);Y6e=n(pXe,"STRONG",{});var WQt=s(Y6e);Bot=r(WQt,"roformer"),WQt.forEach(t),Iot=r(pXe," \u2014 "),$re=n(pXe,"A",{href:!0});var HQt=s($re);Not=r(HQt,"FlaxRoFormerForMultipleChoice"),HQt.forEach(t),qot=r(pXe," (RoFormer model)"),pXe.forEach(t),jot=i(Co),L6=n(Co,"LI",{});var _Xe=s(L6);K6e=n(_Xe,"STRONG",{});var UQt=s(K6e);Dot=r(UQt,"xlm-roberta"),UQt.forEach(t),Got=r(_Xe," \u2014 "),kre=n(_Xe,"A",{href:!0});var JQt=s(kre);Oot=r(JQt,"FlaxXLMRobertaForMultipleChoice"),JQt.forEach(t),Vot=r(_Xe," (XLM-RoBERTa model)"),_Xe.forEach(t),Co.forEach(t),Xot=i(Ti),T(y6.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),TQe=i(m),Mm=n(m,"H2",{class:!0});var $He=s(Mm);x6=n($He,"A",{id:!0,class:!0,href:!0});var YQt=s(x6);Z6e=n(YQt,"SPAN",{});var KQt=s(Z6e);T(ak.$$.fragment,KQt),KQt.forEach(t),YQt.forEach(t),zot=i($He),e7e=n($He,"SPAN",{});var ZQt=s(e7e);Qot=r(ZQt,"FlaxAutoModelForNextSentencePrediction"),ZQt.forEach(t),$He.forEach(t),MQe=i(m),wr=n(m,"DIV",{class:!0});var Mi=s(wr);T(nk.$$.fragment,Mi),Wot=i(Mi),Em=n(Mi,"P",{});var Rae=s(Em);Hot=r(Rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Sre=n(Rae,"A",{href:!0});var eWt=s(Sre);Uot=r(eWt,"from_pretrained()"),eWt.forEach(t),Jot=r(Rae," class method or the "),Rre=n(Rae,"A",{href:!0});var oWt=s(Rre);Yot=r(oWt,"from_config()"),oWt.forEach(t),Kot=r(Rae,` class
method.`),Rae.forEach(t),Zot=i(Mi),sk=n(Mi,"P",{});var kHe=s(sk);ert=r(kHe,"This class cannot be instantiated directly using "),o7e=n(kHe,"CODE",{});var rWt=s(o7e);ort=r(rWt,"__init__()"),rWt.forEach(t),rrt=r(kHe," (throws an error)."),kHe.forEach(t),trt=i(Mi),ra=n(Mi,"DIV",{class:!0});var ey=s(ra);T(lk.$$.fragment,ey),art=i(ey),r7e=n(ey,"P",{});var tWt=s(r7e);nrt=r(tWt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tWt.forEach(t),srt=i(ey),Cm=n(ey,"P",{});var Pae=s(Cm);lrt=r(Pae,`Note:
Loading a model from its configuration file does `),t7e=n(Pae,"STRONG",{});var aWt=s(t7e);irt=r(aWt,"not"),aWt.forEach(t),drt=r(Pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pre=n(Pae,"A",{href:!0});var nWt=s(Pre);crt=r(nWt,"from_pretrained()"),nWt.forEach(t),mrt=r(Pae," to load the model weights."),Pae.forEach(t),frt=i(ey),T($6.$$.fragment,ey),ey.forEach(t),grt=i(Mi),Zr=n(Mi,"DIV",{class:!0});var Ei=s(Zr);T(ik.$$.fragment,Ei),hrt=i(Ei),a7e=n(Ei,"P",{});var sWt=s(a7e);urt=r(sWt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),sWt.forEach(t),prt=i(Ei),$n=n(Ei,"P",{});var oy=s($n);_rt=r(oy,"The model class to instantiate is selected based on the "),n7e=n(oy,"CODE",{});var lWt=s(n7e);brt=r(lWt,"model_type"),lWt.forEach(t),vrt=r(oy,` property of the config object (either
passed as an argument or loaded from `),s7e=n(oy,"CODE",{});var iWt=s(s7e);Frt=r(iWt,"pretrained_model_name_or_path"),iWt.forEach(t),Trt=r(oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=n(oy,"CODE",{});var dWt=s(l7e);Mrt=r(dWt,"pretrained_model_name_or_path"),dWt.forEach(t),Ert=r(oy,":"),oy.forEach(t),Crt=i(Ei),i7e=n(Ei,"UL",{});var cWt=s(i7e);k6=n(cWt,"LI",{});var bXe=s(k6);d7e=n(bXe,"STRONG",{});var mWt=s(d7e);wrt=r(mWt,"bert"),mWt.forEach(t),Art=r(bXe," \u2014 "),Bre=n(bXe,"A",{href:!0});var fWt=s(Bre);Lrt=r(fWt,"FlaxBertForNextSentencePrediction"),fWt.forEach(t),yrt=r(bXe," (BERT model)"),bXe.forEach(t),cWt.forEach(t),xrt=i(Ei),T(S6.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),EQe=i(m),wm=n(m,"H2",{class:!0});var SHe=s(wm);R6=n(SHe,"A",{id:!0,class:!0,href:!0});var gWt=s(R6);c7e=n(gWt,"SPAN",{});var hWt=s(c7e);T(dk.$$.fragment,hWt),hWt.forEach(t),gWt.forEach(t),$rt=i(SHe),m7e=n(SHe,"SPAN",{});var uWt=s(m7e);krt=r(uWt,"FlaxAutoModelForImageClassification"),uWt.forEach(t),SHe.forEach(t),CQe=i(m),Ar=n(m,"DIV",{class:!0});var Ci=s(Ar);T(ck.$$.fragment,Ci),Srt=i(Ci),Am=n(Ci,"P",{});var Bae=s(Am);Rrt=r(Bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Ire=n(Bae,"A",{href:!0});var pWt=s(Ire);Prt=r(pWt,"from_pretrained()"),pWt.forEach(t),Brt=r(Bae," class method or the "),Nre=n(Bae,"A",{href:!0});var _Wt=s(Nre);Irt=r(_Wt,"from_config()"),_Wt.forEach(t),Nrt=r(Bae,` class
method.`),Bae.forEach(t),qrt=i(Ci),mk=n(Ci,"P",{});var RHe=s(mk);jrt=r(RHe,"This class cannot be instantiated directly using "),f7e=n(RHe,"CODE",{});var bWt=s(f7e);Drt=r(bWt,"__init__()"),bWt.forEach(t),Grt=r(RHe," (throws an error)."),RHe.forEach(t),Ort=i(Ci),ta=n(Ci,"DIV",{class:!0});var ry=s(ta);T(fk.$$.fragment,ry),Vrt=i(ry),g7e=n(ry,"P",{});var vWt=s(g7e);Xrt=r(vWt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vWt.forEach(t),zrt=i(ry),Lm=n(ry,"P",{});var Iae=s(Lm);Qrt=r(Iae,`Note:
Loading a model from its configuration file does `),h7e=n(Iae,"STRONG",{});var FWt=s(h7e);Wrt=r(FWt,"not"),FWt.forEach(t),Hrt=r(Iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),qre=n(Iae,"A",{href:!0});var TWt=s(qre);Urt=r(TWt,"from_pretrained()"),TWt.forEach(t),Jrt=r(Iae," to load the model weights."),Iae.forEach(t),Yrt=i(ry),T(P6.$$.fragment,ry),ry.forEach(t),Krt=i(Ci),et=n(Ci,"DIV",{class:!0});var wi=s(et);T(gk.$$.fragment,wi),Zrt=i(wi),u7e=n(wi,"P",{});var MWt=s(u7e);ett=r(MWt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),MWt.forEach(t),ott=i(wi),kn=n(wi,"P",{});var ty=s(kn);rtt=r(ty,"The model class to instantiate is selected based on the "),p7e=n(ty,"CODE",{});var EWt=s(p7e);ttt=r(EWt,"model_type"),EWt.forEach(t),att=r(ty,` property of the config object (either
passed as an argument or loaded from `),_7e=n(ty,"CODE",{});var CWt=s(_7e);ntt=r(CWt,"pretrained_model_name_or_path"),CWt.forEach(t),stt=r(ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b7e=n(ty,"CODE",{});var wWt=s(b7e);ltt=r(wWt,"pretrained_model_name_or_path"),wWt.forEach(t),itt=r(ty,":"),ty.forEach(t),dtt=i(wi),hk=n(wi,"UL",{});var PHe=s(hk);B6=n(PHe,"LI",{});var vXe=s(B6);v7e=n(vXe,"STRONG",{});var AWt=s(v7e);ctt=r(AWt,"beit"),AWt.forEach(t),mtt=r(vXe," \u2014 "),jre=n(vXe,"A",{href:!0});var LWt=s(jre);ftt=r(LWt,"FlaxBeitForImageClassification"),LWt.forEach(t),gtt=r(vXe," (BEiT model)"),vXe.forEach(t),htt=i(PHe),I6=n(PHe,"LI",{});var FXe=s(I6);F7e=n(FXe,"STRONG",{});var yWt=s(F7e);utt=r(yWt,"vit"),yWt.forEach(t),ptt=r(FXe," \u2014 "),Dre=n(FXe,"A",{href:!0});var xWt=s(Dre);_tt=r(xWt,"FlaxViTForImageClassification"),xWt.forEach(t),btt=r(FXe," (ViT model)"),FXe.forEach(t),PHe.forEach(t),vtt=i(wi),T(N6.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),wQe=i(m),ym=n(m,"H2",{class:!0});var BHe=s(ym);q6=n(BHe,"A",{id:!0,class:!0,href:!0});var $Wt=s(q6);T7e=n($Wt,"SPAN",{});var kWt=s(T7e);T(uk.$$.fragment,kWt),kWt.forEach(t),$Wt.forEach(t),Ftt=i(BHe),M7e=n(BHe,"SPAN",{});var SWt=s(M7e);Ttt=r(SWt,"FlaxAutoModelForVision2Seq"),SWt.forEach(t),BHe.forEach(t),AQe=i(m),Lr=n(m,"DIV",{class:!0});var Ai=s(Lr);T(pk.$$.fragment,Ai),Mtt=i(Ai),xm=n(Ai,"P",{});var Nae=s(xm);Ett=r(Nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Gre=n(Nae,"A",{href:!0});var RWt=s(Gre);Ctt=r(RWt,"from_pretrained()"),RWt.forEach(t),wtt=r(Nae," class method or the "),Ore=n(Nae,"A",{href:!0});var PWt=s(Ore);Att=r(PWt,"from_config()"),PWt.forEach(t),Ltt=r(Nae,` class
method.`),Nae.forEach(t),ytt=i(Ai),_k=n(Ai,"P",{});var IHe=s(_k);xtt=r(IHe,"This class cannot be instantiated directly using "),E7e=n(IHe,"CODE",{});var BWt=s(E7e);$tt=r(BWt,"__init__()"),BWt.forEach(t),ktt=r(IHe," (throws an error)."),IHe.forEach(t),Stt=i(Ai),aa=n(Ai,"DIV",{class:!0});var ay=s(aa);T(bk.$$.fragment,ay),Rtt=i(ay),C7e=n(ay,"P",{});var IWt=s(C7e);Ptt=r(IWt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),IWt.forEach(t),Btt=i(ay),$m=n(ay,"P",{});var qae=s($m);Itt=r(qae,`Note:
Loading a model from its configuration file does `),w7e=n(qae,"STRONG",{});var NWt=s(w7e);Ntt=r(NWt,"not"),NWt.forEach(t),qtt=r(qae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vre=n(qae,"A",{href:!0});var qWt=s(Vre);jtt=r(qWt,"from_pretrained()"),qWt.forEach(t),Dtt=r(qae," to load the model weights."),qae.forEach(t),Gtt=i(ay),T(j6.$$.fragment,ay),ay.forEach(t),Ott=i(Ai),ot=n(Ai,"DIV",{class:!0});var Li=s(ot);T(vk.$$.fragment,Li),Vtt=i(Li),A7e=n(Li,"P",{});var jWt=s(A7e);Xtt=r(jWt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jWt.forEach(t),ztt=i(Li),Sn=n(Li,"P",{});var ny=s(Sn);Qtt=r(ny,"The model class to instantiate is selected based on the "),L7e=n(ny,"CODE",{});var DWt=s(L7e);Wtt=r(DWt,"model_type"),DWt.forEach(t),Htt=r(ny,` property of the config object (either
passed as an argument or loaded from `),y7e=n(ny,"CODE",{});var GWt=s(y7e);Utt=r(GWt,"pretrained_model_name_or_path"),GWt.forEach(t),Jtt=r(ny,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x7e=n(ny,"CODE",{});var OWt=s(x7e);Ytt=r(OWt,"pretrained_model_name_or_path"),OWt.forEach(t),Ktt=r(ny,":"),ny.forEach(t),Ztt=i(Li),$7e=n(Li,"UL",{});var VWt=s($7e);D6=n(VWt,"LI",{});var TXe=s(D6);k7e=n(TXe,"STRONG",{});var XWt=s(k7e);eat=r(XWt,"vision-encoder-decoder"),XWt.forEach(t),oat=r(TXe," \u2014 "),Xre=n(TXe,"A",{href:!0});var zWt=s(Xre);rat=r(zWt,"FlaxVisionEncoderDecoderModel"),zWt.forEach(t),tat=r(TXe," (Vision Encoder decoder model)"),TXe.forEach(t),VWt.forEach(t),aat=i(Li),T(G6.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(YUt)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(Pn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(In,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(Nn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(Pi,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(qm,"id","extending-the-auto-classes"),c(qm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qm,"href","#extending-the-auto-classes"),c(Bi,"class","relative group"),c(Dm,"id","transformers.AutoConfig"),c(Dm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dm,"href","#transformers.AutoConfig"),c(Ii,"class","relative group"),c(HS,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(US,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(JS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(YS,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(KS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(ZS,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(eR,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(oR,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(rR,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(tR,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(aR,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),c(nR,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(sR,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(lR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(iR,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),c(dR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(cR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(mR,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(fR,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(gR,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(hR,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(uR,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(pR,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(_R,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(bR,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(vR,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(FR,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(TR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(MR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(ER,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(CR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(wR,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(AR,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(LR,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(yR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(xR,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c($R,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(kR,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(SR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(RR,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(PR,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(BR,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(IR,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),c(NR,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(qR,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(jR,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(DR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(GR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(OR,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(VR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(XR,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),c(zR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(QR,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),c(WR,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(HR,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(UR,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(JR,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(YR,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(KR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(ZR,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),c(eP,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(oP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(rP,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(tP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(aP,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(nP,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig"),c(sP,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),c(lP,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(iP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(dP,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(cP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(mP,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(fP,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(gP,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(hP,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(uP,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(pP,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(_P,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(bP,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(vP,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(FP,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(TP,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(MP,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(EP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(CP,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(wP,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(AP,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(LP,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(yP,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(xP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c($P,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(kP,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(SP,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(RP,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(PP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(BP,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(IP,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(NP,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(qP,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(jP,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(DP,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(GP,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(OP,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(VP,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(XP,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(zP,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(QP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(WP,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(HP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(UP,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(JP,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(YP,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(KP,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(ZP,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(eB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(oB,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(rB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(tB,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(aB,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"id","transformers.AutoTokenizer"),c(eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eh,"href","#transformers.AutoTokenizer"),c(qi,"class","relative group"),c(nB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(sB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(lB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(iB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(dB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(cB,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(mB,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(fB,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(gB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(hB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(uB,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(pB,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(_B,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(bB,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(vB,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(FB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(TB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(MB,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(EB,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(CB,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(wB,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(AB,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(LB,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(yB,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(xB,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c($B,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(kB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(SB,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(RB,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(PB,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(BB,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(IB,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(NB,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(qB,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(jB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(DB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(GB,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(OB,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(VB,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(XB,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(zB,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(QB,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(WB,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(HB,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(UB,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(JB,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(YB,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(KB,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(ZB,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(eI,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(oI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(rI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(tI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(nI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(sI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(lI,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(iI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(dI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(cI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(mI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(fI,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(gI,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(hI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(uI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(pI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(_I,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(bI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(vI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(FI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(TI,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(MI,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(EI,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(CI,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(wI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(AI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(LI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(yI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(xI,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c($I,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(kI,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(SI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(RI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(PI,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(BI,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(II,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(NI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(qI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(jI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(DI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(GI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(OI,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(VI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(XI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(zI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(QI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(WI,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(HI,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(UI,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizer"),c(JI,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(YI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(KI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(ZI,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizer"),c(eN,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(oN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(rN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(tN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(aN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(nN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(sN,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(lN,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(iN,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(dN,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(cN,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(mN,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(fN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(gN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(hN,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(uN,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(pN,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(_N,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(bN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(vN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(FN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(TN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(MN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(EN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(CN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(wN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(AN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(LN,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(yN,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(xN,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c($N,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(kN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(SN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(RN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(PN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(BN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(IN,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(NN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(qN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(jN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(DN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(GN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(ON,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(VN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(XN,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(zN,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(QN,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(WN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(HN,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(UN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(JN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(YN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(KN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(ZN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(eq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(oq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(rq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ih,"id","transformers.AutoFeatureExtractor"),c(Ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ih,"href","#transformers.AutoFeatureExtractor"),c(ji,"class","relative group"),c(tq,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(aq,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(nq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(sq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(lq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(iq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(dq,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(cq,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(mq,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(fq,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(gq,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(hq,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(uq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(pq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(_q,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(bq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(vq,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(Fq,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(Tq,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(Mq,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(Eq,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(Cq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(wq,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Aq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Lq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(yq,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(xq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c($q,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(kq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Sq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(Rq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Pq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Bq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Iq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Nq,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fu,"id","transformers.AutoProcessor"),c(Fu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fu,"href","#transformers.AutoProcessor"),c(Di,"class","relative group"),c(qq,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(jq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(Dq,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaProcessor"),c(Gq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(Oq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Vq,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Xq,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(zq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Qq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Wq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Hq,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Uq,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Jq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Yq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Kq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(Zq,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(ej,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(oj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(rj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ou,"id","transformers.AutoModel"),c(Ou,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ou,"href","#transformers.AutoModel"),c(Oi,"class","relative group"),c(tj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(lj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(ij,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(dj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(cj,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(mj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(fj,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(gj,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(hj,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(uj,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),c(pj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(_j,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(bj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(vj,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),c(Fj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(Tj,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(Mj,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(Ej,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(Cj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(wj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Aj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Lj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(yj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(xj,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c($j,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(kj,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(Sj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(Rj,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Pj,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(Bj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(Ij,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(Nj,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(qj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(jj,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(Dj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(Gj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Oj,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(Vj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(Xj,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(zj,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Qj,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(Wj,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),c(Hj,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(Uj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(Jj,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Yj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Kj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Zj,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(eD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(oD,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(rD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(tD,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),c(aD,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(nD,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(sD,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(lD,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(iD,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(dD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(cD,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),c(mD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(fD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(gD,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),c(hD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(uD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(pD,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel"),c(_D,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),c(bD,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(vD,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(FD,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(TD,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(MD,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(ED,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(CD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(wD,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(AD,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(LD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(yD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(xD,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c($D,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(kD,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(SD,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(RD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(PD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(BD,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(ID,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(ND,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(qD,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(jD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(DD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(GD,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(OD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(VD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(XD,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(zD,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(QD,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(WD,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(HD,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(UD,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(JD,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(YD,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(KD,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(ZD,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(eG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(oG,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(rG,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(tG,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(aG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(nG,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(sG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(lG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(iG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(dG,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(cG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U_,"id","transformers.AutoModelForPreTraining"),c(U_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U_,"href","#transformers.AutoModelForPreTraining"),c(zi,"class","relative group"),c(mG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(uG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(pG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(_G,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(bG,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(vG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(FG,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(TG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(MG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(EG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(CG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(wG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(AG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(LG,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(yG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(xG,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c($G,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(kG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(SG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(RG,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(PG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(BG,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(IG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(NG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(qG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(jG,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(DG,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(GG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(OG,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(VG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(XG,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(zG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(QG,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(WG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(HG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(UG,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(JG,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(YG,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(KG,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(ZG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(eO,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(oO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(rO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(tO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(aO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X2,"id","transformers.AutoModelForCausalLM"),c(X2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X2,"href","#transformers.AutoModelForCausalLM"),c(Hi,"class","relative group"),c(nO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(dO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(cO,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(mO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(fO,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(gO,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(hO,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(uO,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(pO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(_O,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(bO,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(vO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(FO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(TO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(MO,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(EO,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(CO,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(wO,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(AO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(LO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(yO,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM"),c(xO,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c($O,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(kO,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(SO,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(RO,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(PO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(BO,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(IO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(NO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(qO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(jO,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(DO,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(GO,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(OO,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(VO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(XO,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(zO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(QO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(WO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pb,"id","transformers.AutoModelForMaskedLM"),c(Pb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pb,"href","#transformers.AutoModelForMaskedLM"),c(Yi,"class","relative group"),c(HO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(KO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(ZO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(eV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(oV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(rV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(tV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(aV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(nV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(sV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(lV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(iV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(dV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(cV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(mV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(fV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(gV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(hV,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(uV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(pV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(_V,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(bV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(vV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(FV,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(TV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(MV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(EV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(CV,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(wV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(AV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(LV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(yV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(xV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c($V,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(kV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(SV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(RV,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mv,"id","transformers.AutoModelForSeq2SeqLM"),c(Mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mv,"href","#transformers.AutoModelForSeq2SeqLM"),c(ed,"class","relative group"),c(PV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(qV,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(jV,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(DV,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(GV,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(OV,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(VV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(XV,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(zV,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(QV,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(WV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(HV,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(UV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(JV,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(YV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(KV,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(ZV,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(eX,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(oX,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zv,"id","transformers.AutoModelForSequenceClassification"),c(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zv,"href","#transformers.AutoModelForSequenceClassification"),c(td,"class","relative group"),c(rX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(sX,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(lX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(iX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(dX,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(cX,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(mX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(fX,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(gX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(hX,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(uX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(pX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(_X,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(bX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(vX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(FX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(TX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(MX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(EX,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(CX,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(wX,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(AX,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(LX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(yX,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(xX,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c($X,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(kX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(SX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(RX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(PX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(BX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(IX,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(NX,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(qX,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(jX,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(DX,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(GX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(OX,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(VX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(XX,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(zX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(QX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(WX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(HX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(UX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(JX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(YX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(KX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(ZX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(ez,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(oz,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q1,"id","transformers.AutoModelForMultipleChoice"),c(Q1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q1,"href","#transformers.AutoModelForMultipleChoice"),c(sd,"class","relative group"),c(rz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(az,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nz,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(sz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(lz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(iz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(dz,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(cz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(mz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(fz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(gz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(hz,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(uz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(pz,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(_z,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(bz,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(vz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(Fz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(Tz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(Mz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(Ez,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(Cz,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(wz,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(Az,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(Lz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(yz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(xz,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c($z,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(kz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(Sz,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(Rz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(Pz,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AF,"id","transformers.AutoModelForNextSentencePrediction"),c(AF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AF,"href","#transformers.AutoModelForNextSentencePrediction"),c(dd,"class","relative group"),c(Bz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(jz,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Dz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(Gz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(Oz,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(Vz,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IF,"id","transformers.AutoModelForTokenClassification"),c(IF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IF,"href","#transformers.AutoModelForTokenClassification"),c(fd,"class","relative group"),c(Xz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wz,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Hz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(Uz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Jz,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Yz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Kz,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Zz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(eQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(oQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(rQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(tQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(aQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(nQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(sQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(lQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(iQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(dQ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(cQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(mQ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(fQ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(gQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(hQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(uQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(pQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(_Q,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(bQ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(vQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(FQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(TQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(MQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(EQ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(CQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(wQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(AQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(LQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(yQ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MT,"id","transformers.AutoModelForQuestionAnswering"),c(MT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MT,"href","#transformers.AutoModelForQuestionAnswering"),c(ud,"class","relative group"),c(xQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Q,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(RQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(PQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(BQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(IQ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(NQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(qQ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(jQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(DQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(GQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(OQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(VQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(XQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(zQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(QQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(WQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(HQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(UQ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(JQ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(YQ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(KQ,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(ZQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(eW,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(oW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(rW,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(tW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(aW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(nW,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(sW,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(lW,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(iW,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(dW,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(cW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(mW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(fW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(gW,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(hW,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(uW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(pW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(_W,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(bW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(vW,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hM,"id","transformers.AutoModelForTableQuestionAnswering"),c(hM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hM,"href","#transformers.AutoModelForTableQuestionAnswering"),c(bd,"class","relative group"),c(FW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vM,"id","transformers.AutoModelForImageClassification"),c(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vM,"href","#transformers.AutoModelForImageClassification"),c(Td,"class","relative group"),c(CW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LW,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(yW,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(xW,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c($W,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(kW,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(SW,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(RW,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(PW,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(BW,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(IW,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(NW,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(qW,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(jW,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(DW,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(GW,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(OW,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(VW,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(XW,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(zW,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(QW,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IM,"id","transformers.AutoModelForVision2Seq"),c(IM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IM,"href","#transformers.AutoModelForVision2Seq"),c(Cd,"class","relative group"),c(WW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JW,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GM,"id","transformers.AutoModelForVisualQuestionAnswering"),c(GM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GM,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Ld,"class","relative group"),c(YW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eH,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QM,"id","transformers.AutoModelForAudioClassification"),c(QM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QM,"href","#transformers.AutoModelForAudioClassification"),c($d,"class","relative group"),c(oH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(nH,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(sH,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(lH,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(iH,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(dH,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(cH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(mH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(fH,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n4,"id","transformers.AutoModelForAudioFrameClassification"),c(n4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n4,"href","#transformers.AutoModelForAudioFrameClassification"),c(Rd,"class","relative group"),c(gH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(_H,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(bH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(vH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(FH,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h4,"id","transformers.AutoModelForCTC"),c(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h4,"href","#transformers.AutoModelForCTC"),c(Id,"class","relative group"),c(TH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(wH,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(AH,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),c(LH,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(yH,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(xH,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c($H,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(kH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(SH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(RH,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y4,"id","transformers.AutoModelForSpeechSeq2Seq"),c(y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y4,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(jd,"class","relative group"),c(PH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NH,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(qH,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P4,"id","transformers.AutoModelForAudioXVector"),c(P4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P4,"href","#transformers.AutoModelForAudioXVector"),c(Od,"class","relative group"),c(jH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(VH,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(XH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(zH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(QH,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V4,"id","transformers.AutoModelForMaskedImageModeling"),c(V4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V4,"href","#transformers.AutoModelForMaskedImageModeling"),c(zd,"class","relative group"),c(WH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JH,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(YH,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(KH,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J4,"id","transformers.AutoModelForObjectDetection"),c(J4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J4,"href","#transformers.AutoModelForObjectDetection"),c(Ud,"class","relative group"),c(ZH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rU,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(tU,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rE,"id","transformers.AutoModelForImageSegmentation"),c(rE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rE,"href","#transformers.AutoModelForImageSegmentation"),c(Kd,"class","relative group"),c(aU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lU,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lE,"id","transformers.AutoModelForSemanticSegmentation"),c(lE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lE,"href","#transformers.AutoModelForSemanticSegmentation"),c(oc,"class","relative group"),c(iU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mU,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(fU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(gU,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(hU,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(uU,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pE,"id","transformers.AutoModelForInstanceSegmentation"),c(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pE,"href","#transformers.AutoModelForInstanceSegmentation"),c(ac,"class","relative group"),c(pU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_U,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vU,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TE,"id","transformers.TFAutoModel"),c(TE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TE,"href","#transformers.TFAutoModel"),c(lc,"class","relative group"),c(FU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(CU,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(wU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(AU,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(LU,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(yU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(xU,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c($U,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(kU,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(SU,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(RU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(PU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(BU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(IU,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel"),c(NU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(qU,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(jU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(DU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(GU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(OU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(VU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(XU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(zU,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(QU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(WU,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(HU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(UU,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(JU,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(YU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(KU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(ZU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(eJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(oJ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(rJ,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(tJ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(aJ,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),c(nJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(sJ,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel"),c(lJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(iJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(dJ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel"),c(cJ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(mJ,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(fJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(gJ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(hJ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(uJ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(pJ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(_J,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(bJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(vJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(FJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FC,"id","transformers.TFAutoModelForPreTraining"),c(FC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FC,"href","#transformers.TFAutoModelForPreTraining"),c(cc,"class","relative group"),c(TJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(wJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(AJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(LJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(yJ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(xJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c($J,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(kJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(SJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(RJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(PJ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(BJ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(IJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(NJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(qJ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(jJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(DJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(GJ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(OJ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(VJ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(XJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(QJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QC,"id","transformers.TFAutoModelForCausalLM"),c(QC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QC,"href","#transformers.TFAutoModelForCausalLM"),c(gc,"class","relative group"),c(WJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(YJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(KJ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(ZJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(eY,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(oY,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(rY,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(tY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(aY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(nY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(sY,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(lY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(iY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i3,"id","transformers.TFAutoModelForImageClassification"),c(i3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i3,"href","#transformers.TFAutoModelForImageClassification"),c(pc,"class","relative group"),c(dY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fY,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(gY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(hY,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(uY,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(pY,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(_Y,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(bY,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(vY,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(FY,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b3,"id","transformers.TFAutoModelForMaskedLM"),c(b3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b3,"href","#transformers.TFAutoModelForMaskedLM"),c(vc,"class","relative group"),c(TY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CY,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(wY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(AY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(LY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(yY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(xY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c($Y,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(kY,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(SY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(RY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(PY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(BY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(IY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(NY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(qY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(jY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(DY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(GY,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(OY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(VY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G3,"id","transformers.TFAutoModelForSeq2SeqLM"),c(G3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G3,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Mc,"class","relative group"),c(XY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WY,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(HY,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(UY,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(JY,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(YY,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(KY,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(ZY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(eK,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(oK,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(rK,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e5,"id","transformers.TFAutoModelForSequenceClassification"),c(e5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e5,"href","#transformers.TFAutoModelForSequenceClassification"),c(wc,"class","relative group"),c(tK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sK,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(lK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(iK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(dK,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(cK,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(mK,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(fK,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(gK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(hK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(uK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(pK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(_K,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(bK,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(vK,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(FK,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(TK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(MK,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(EK,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(CK,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(wK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(AK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(LK,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(yK,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(xK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c($K,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(kK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x5,"id","transformers.TFAutoModelForMultipleChoice"),c(x5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x5,"href","#transformers.TFAutoModelForMultipleChoice"),c(yc,"class","relative group"),c(SK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BK,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(IK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(NK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(qK,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(jK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(DK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(GK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(OK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(VK,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(XK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(zK,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(QK,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(WK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(HK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(UK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(JK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(YK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U5,"id","transformers.TFAutoModelForNextSentencePrediction"),c(U5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U5,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(kc,"class","relative group"),c(KK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(rZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e0,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(e0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e0,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Pc,"class","relative group"),c(tZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sZ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a0,"id","transformers.TFAutoModelForTokenClassification"),c(a0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a0,"href","#transformers.TFAutoModelForTokenClassification"),c(Nc,"class","relative group"),c(lZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(mZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(fZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(gZ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(hZ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(uZ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(pZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(_Z,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(bZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(vZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(FZ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(TZ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(MZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(EZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(CZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(wZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(AZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(LZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(yZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(xZ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L0,"id","transformers.TFAutoModelForQuestionAnswering"),c(L0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L0,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Dc,"class","relative group"),c($Z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(PZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(BZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(IZ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(NZ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(qZ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(jZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(DZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(GZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(OZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(VZ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(XZ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(zZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(QZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(WZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(HZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(UZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(JZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(YZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(KZ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J0,"id","transformers.TFAutoModelForVision2Seq"),c(J0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J0,"href","#transformers.TFAutoModelForVision2Seq"),c(Vc,"class","relative group"),c(ZZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ree,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ew,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(ew,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ew,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Qc,"class","relative group"),c(tee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(see,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aw,"id","transformers.FlaxAutoModel"),c(aw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aw,"href","#transformers.FlaxAutoModel"),c(Uc,"class","relative group"),c(lee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cee,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(mee,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(fee,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(gee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(hee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(uee,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(pee,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(_ee,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(bee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(vee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(Fee,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(Tee,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(Mee,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(Eee,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(Cee,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(wee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(Aee,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Lee,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(yee,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(xee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c($ee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(kee,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(See,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(Ree,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(Pee,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Bee,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Iee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pw,"id","transformers.FlaxAutoModelForCausalLM"),c(Pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pw,"href","#transformers.FlaxAutoModelForCausalLM"),c(Kc,"class","relative group"),c(Nee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dee,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Gee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Oee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Vee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Xee,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(zee,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Qee,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Wee,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Hee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Uee,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ww,"id","transformers.FlaxAutoModelForPreTraining"),c(Ww,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ww,"href","#transformers.FlaxAutoModelForPreTraining"),c(om,"class","relative group"),c(Jee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zee,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(eoe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ooe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(roe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(toe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(aoe,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(noe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(soe,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(loe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(ioe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(doe,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(coe,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(moe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dA,"id","transformers.FlaxAutoModelForMaskedLM"),c(dA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dA,"href","#transformers.FlaxAutoModelForMaskedLM"),c(am,"class","relative group"),c(foe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(goe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uoe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(poe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(_oe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(boe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(voe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(Foe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Toe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Moe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Eoe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Coe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MA,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(MA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MA,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(lm,"class","relative group"),c(woe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Aoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Loe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yoe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(xoe,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c($oe,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(koe,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Soe,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Roe,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Poe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Boe,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Ioe,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Noe,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BA,"id","transformers.FlaxAutoModelForSequenceClassification"),c(BA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BA,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(cm,"class","relative group"),c(qoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(joe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Doe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Goe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Ooe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Voe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Xoe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(zoe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Qoe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Woe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Hoe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Uoe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Joe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HA,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(HA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HA,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(gm,"class","relative group"),c(Yoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Koe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ere,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(ore,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(rre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(tre,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(are,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(nre,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(sre,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(lre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(ire,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(dre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l6,"id","transformers.FlaxAutoModelForTokenClassification"),c(l6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l6,"href","#transformers.FlaxAutoModelForTokenClassification"),c(pm,"class","relative group"),c(cre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gre,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(hre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(ure,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(pre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(_re,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(bre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(vre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Fre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b6,"id","transformers.FlaxAutoModelForMultipleChoice"),c(b6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b6,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(vm,"class","relative group"),c(Tre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ere,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cre,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(wre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Are,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Lre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(yre,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(xre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c($re,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(kre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x6,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(x6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x6,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Mm,"class","relative group"),c(Sre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R6,"id","transformers.FlaxAutoModelForImageClassification"),c(R6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R6,"href","#transformers.FlaxAutoModelForImageClassification"),c(wm,"class","relative group"),c(Ire,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jre,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Dre,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q6,"id","transformers.FlaxAutoModelForVision2Seq"),c(q6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q6,"href","#transformers.FlaxAutoModelForVision2Seq"),c(ym,"class","relative group"),c(Gre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ore,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xre,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,wo),e(wo,yi),b(m,Pm,_),b(m,lt,_),e(lt,xi),e(lt,$i),e($i,sy),e(lt,Bm),b(m,Oe,_),b(m,We,_),e(We,ki),e(We,Pn),e(Pn,ly),e(We,Bn),e(We,In),e(In,iy),e(We,Si),e(We,Nn),e(Nn,dy),e(We,Ri),b(m,Im,_),M(Sa,m,_),b(m,He,_),b(m,Ae,_),e(Ae,OS),e(Ae,Pi),e(Pi,VS),e(Ae,XS),b(m,Ao,_),b(m,Ra,_),e(Ra,zS),e(Ra,Nm),e(Nm,QS),e(Ra,NHe),b(m,MXe,_),b(m,Bi,_),e(Bi,qm),e(qm,jae),M(cy,jae,null),e(Bi,qHe),e(Bi,Dae),e(Dae,jHe),b(m,EXe,_),b(m,qn,_),e(qn,DHe),e(qn,Gae),e(Gae,GHe),e(qn,OHe),e(qn,Oae),e(Oae,VHe),e(qn,XHe),b(m,CXe,_),M(my,m,_),b(m,wXe,_),b(m,WS,_),e(WS,zHe),b(m,AXe,_),M(jm,m,_),b(m,LXe,_),b(m,Ii,_),e(Ii,Dm),e(Dm,Vae),M(fy,Vae,null),e(Ii,QHe),e(Ii,Xae),e(Xae,WHe),b(m,yXe,_),b(m,Lo,_),M(gy,Lo,null),e(Lo,HHe),e(Lo,hy),e(hy,UHe),e(hy,HS),e(HS,JHe),e(hy,YHe),e(Lo,KHe),e(Lo,uy),e(uy,ZHe),e(uy,zae),e(zae,eUe),e(uy,oUe),e(Lo,rUe),e(Lo,yr),M(py,yr,null),e(yr,tUe),e(yr,Qae),e(Qae,aUe),e(yr,nUe),e(yr,Ni),e(Ni,sUe),e(Ni,Wae),e(Wae,lUe),e(Ni,iUe),e(Ni,Hae),e(Hae,dUe),e(Ni,cUe),e(yr,mUe),e(yr,A),e(A,Gm),e(Gm,Uae),e(Uae,fUe),e(Gm,gUe),e(Gm,US),e(US,hUe),e(Gm,uUe),e(A,pUe),e(A,Om),e(Om,Jae),e(Jae,_Ue),e(Om,bUe),e(Om,JS),e(JS,vUe),e(Om,FUe),e(A,TUe),e(A,Vm),e(Vm,Yae),e(Yae,MUe),e(Vm,EUe),e(Vm,YS),e(YS,CUe),e(Vm,wUe),e(A,AUe),e(A,Xm),e(Xm,Kae),e(Kae,LUe),e(Xm,yUe),e(Xm,KS),e(KS,xUe),e(Xm,$Ue),e(A,kUe),e(A,zm),e(zm,Zae),e(Zae,SUe),e(zm,RUe),e(zm,ZS),e(ZS,PUe),e(zm,BUe),e(A,IUe),e(A,Qm),e(Qm,ene),e(ene,NUe),e(Qm,qUe),e(Qm,eR),e(eR,jUe),e(Qm,DUe),e(A,GUe),e(A,Wm),e(Wm,one),e(one,OUe),e(Wm,VUe),e(Wm,oR),e(oR,XUe),e(Wm,zUe),e(A,QUe),e(A,Hm),e(Hm,rne),e(rne,WUe),e(Hm,HUe),e(Hm,rR),e(rR,UUe),e(Hm,JUe),e(A,YUe),e(A,Um),e(Um,tne),e(tne,KUe),e(Um,ZUe),e(Um,tR),e(tR,eJe),e(Um,oJe),e(A,rJe),e(A,Jm),e(Jm,ane),e(ane,tJe),e(Jm,aJe),e(Jm,aR),e(aR,nJe),e(Jm,sJe),e(A,lJe),e(A,Ym),e(Ym,nne),e(nne,iJe),e(Ym,dJe),e(Ym,nR),e(nR,cJe),e(Ym,mJe),e(A,fJe),e(A,Km),e(Km,sne),e(sne,gJe),e(Km,hJe),e(Km,sR),e(sR,uJe),e(Km,pJe),e(A,_Je),e(A,Zm),e(Zm,lne),e(lne,bJe),e(Zm,vJe),e(Zm,lR),e(lR,FJe),e(Zm,TJe),e(A,MJe),e(A,ef),e(ef,ine),e(ine,EJe),e(ef,CJe),e(ef,iR),e(iR,wJe),e(ef,AJe),e(A,LJe),e(A,of),e(of,dne),e(dne,yJe),e(of,xJe),e(of,dR),e(dR,$Je),e(of,kJe),e(A,SJe),e(A,rf),e(rf,cne),e(cne,RJe),e(rf,PJe),e(rf,cR),e(cR,BJe),e(rf,IJe),e(A,NJe),e(A,tf),e(tf,mne),e(mne,qJe),e(tf,jJe),e(tf,mR),e(mR,DJe),e(tf,GJe),e(A,OJe),e(A,af),e(af,fne),e(fne,VJe),e(af,XJe),e(af,fR),e(fR,zJe),e(af,QJe),e(A,WJe),e(A,nf),e(nf,gne),e(gne,HJe),e(nf,UJe),e(nf,gR),e(gR,JJe),e(nf,YJe),e(A,KJe),e(A,sf),e(sf,hne),e(hne,ZJe),e(sf,eYe),e(sf,hR),e(hR,oYe),e(sf,rYe),e(A,tYe),e(A,lf),e(lf,une),e(une,aYe),e(lf,nYe),e(lf,uR),e(uR,sYe),e(lf,lYe),e(A,iYe),e(A,df),e(df,pne),e(pne,dYe),e(df,cYe),e(df,pR),e(pR,mYe),e(df,fYe),e(A,gYe),e(A,cf),e(cf,_ne),e(_ne,hYe),e(cf,uYe),e(cf,_R),e(_R,pYe),e(cf,_Ye),e(A,bYe),e(A,mf),e(mf,bne),e(bne,vYe),e(mf,FYe),e(mf,bR),e(bR,TYe),e(mf,MYe),e(A,EYe),e(A,ff),e(ff,vne),e(vne,CYe),e(ff,wYe),e(ff,vR),e(vR,AYe),e(ff,LYe),e(A,yYe),e(A,gf),e(gf,Fne),e(Fne,xYe),e(gf,$Ye),e(gf,FR),e(FR,kYe),e(gf,SYe),e(A,RYe),e(A,hf),e(hf,Tne),e(Tne,PYe),e(hf,BYe),e(hf,TR),e(TR,IYe),e(hf,NYe),e(A,qYe),e(A,uf),e(uf,Mne),e(Mne,jYe),e(uf,DYe),e(uf,MR),e(MR,GYe),e(uf,OYe),e(A,VYe),e(A,pf),e(pf,Ene),e(Ene,XYe),e(pf,zYe),e(pf,ER),e(ER,QYe),e(pf,WYe),e(A,HYe),e(A,_f),e(_f,Cne),e(Cne,UYe),e(_f,JYe),e(_f,CR),e(CR,YYe),e(_f,KYe),e(A,ZYe),e(A,bf),e(bf,wne),e(wne,eKe),e(bf,oKe),e(bf,wR),e(wR,rKe),e(bf,tKe),e(A,aKe),e(A,vf),e(vf,Ane),e(Ane,nKe),e(vf,sKe),e(vf,AR),e(AR,lKe),e(vf,iKe),e(A,dKe),e(A,Ff),e(Ff,Lne),e(Lne,cKe),e(Ff,mKe),e(Ff,LR),e(LR,fKe),e(Ff,gKe),e(A,hKe),e(A,Tf),e(Tf,yne),e(yne,uKe),e(Tf,pKe),e(Tf,yR),e(yR,_Ke),e(Tf,bKe),e(A,vKe),e(A,Mf),e(Mf,xne),e(xne,FKe),e(Mf,TKe),e(Mf,xR),e(xR,MKe),e(Mf,EKe),e(A,CKe),e(A,Ef),e(Ef,$ne),e($ne,wKe),e(Ef,AKe),e(Ef,$R),e($R,LKe),e(Ef,yKe),e(A,xKe),e(A,Cf),e(Cf,kne),e(kne,$Ke),e(Cf,kKe),e(Cf,kR),e(kR,SKe),e(Cf,RKe),e(A,PKe),e(A,wf),e(wf,Sne),e(Sne,BKe),e(wf,IKe),e(wf,SR),e(SR,NKe),e(wf,qKe),e(A,jKe),e(A,Af),e(Af,Rne),e(Rne,DKe),e(Af,GKe),e(Af,RR),e(RR,OKe),e(Af,VKe),e(A,XKe),e(A,Lf),e(Lf,Pne),e(Pne,zKe),e(Lf,QKe),e(Lf,PR),e(PR,WKe),e(Lf,HKe),e(A,UKe),e(A,yf),e(yf,Bne),e(Bne,JKe),e(yf,YKe),e(yf,BR),e(BR,KKe),e(yf,ZKe),e(A,eZe),e(A,xf),e(xf,Ine),e(Ine,oZe),e(xf,rZe),e(xf,IR),e(IR,tZe),e(xf,aZe),e(A,nZe),e(A,$f),e($f,Nne),e(Nne,sZe),e($f,lZe),e($f,NR),e(NR,iZe),e($f,dZe),e(A,cZe),e(A,kf),e(kf,qne),e(qne,mZe),e(kf,fZe),e(kf,qR),e(qR,gZe),e(kf,hZe),e(A,uZe),e(A,Sf),e(Sf,jne),e(jne,pZe),e(Sf,_Ze),e(Sf,jR),e(jR,bZe),e(Sf,vZe),e(A,FZe),e(A,Rf),e(Rf,Dne),e(Dne,TZe),e(Rf,MZe),e(Rf,DR),e(DR,EZe),e(Rf,CZe),e(A,wZe),e(A,Pf),e(Pf,Gne),e(Gne,AZe),e(Pf,LZe),e(Pf,GR),e(GR,yZe),e(Pf,xZe),e(A,$Ze),e(A,Bf),e(Bf,One),e(One,kZe),e(Bf,SZe),e(Bf,OR),e(OR,RZe),e(Bf,PZe),e(A,BZe),e(A,If),e(If,Vne),e(Vne,IZe),e(If,NZe),e(If,VR),e(VR,qZe),e(If,jZe),e(A,DZe),e(A,Nf),e(Nf,Xne),e(Xne,GZe),e(Nf,OZe),e(Nf,XR),e(XR,VZe),e(Nf,XZe),e(A,zZe),e(A,qf),e(qf,zne),e(zne,QZe),e(qf,WZe),e(qf,zR),e(zR,HZe),e(qf,UZe),e(A,JZe),e(A,jf),e(jf,Qne),e(Qne,YZe),e(jf,KZe),e(jf,QR),e(QR,ZZe),e(jf,eeo),e(A,oeo),e(A,Df),e(Df,Wne),e(Wne,reo),e(Df,teo),e(Df,WR),e(WR,aeo),e(Df,neo),e(A,seo),e(A,Gf),e(Gf,Hne),e(Hne,leo),e(Gf,ieo),e(Gf,HR),e(HR,deo),e(Gf,ceo),e(A,meo),e(A,Of),e(Of,Une),e(Une,feo),e(Of,geo),e(Of,UR),e(UR,heo),e(Of,ueo),e(A,peo),e(A,Vf),e(Vf,Jne),e(Jne,_eo),e(Vf,beo),e(Vf,JR),e(JR,veo),e(Vf,Feo),e(A,Teo),e(A,Xf),e(Xf,Yne),e(Yne,Meo),e(Xf,Eeo),e(Xf,YR),e(YR,Ceo),e(Xf,weo),e(A,Aeo),e(A,zf),e(zf,Kne),e(Kne,Leo),e(zf,yeo),e(zf,KR),e(KR,xeo),e(zf,$eo),e(A,keo),e(A,Qf),e(Qf,Zne),e(Zne,Seo),e(Qf,Reo),e(Qf,ZR),e(ZR,Peo),e(Qf,Beo),e(A,Ieo),e(A,Wf),e(Wf,ese),e(ese,Neo),e(Wf,qeo),e(Wf,eP),e(eP,jeo),e(Wf,Deo),e(A,Geo),e(A,Hf),e(Hf,ose),e(ose,Oeo),e(Hf,Veo),e(Hf,oP),e(oP,Xeo),e(Hf,zeo),e(A,Qeo),e(A,Uf),e(Uf,rse),e(rse,Weo),e(Uf,Heo),e(Uf,rP),e(rP,Ueo),e(Uf,Jeo),e(A,Yeo),e(A,Jf),e(Jf,tse),e(tse,Keo),e(Jf,Zeo),e(Jf,tP),e(tP,eoo),e(Jf,ooo),e(A,roo),e(A,Yf),e(Yf,ase),e(ase,too),e(Yf,aoo),e(Yf,aP),e(aP,noo),e(Yf,soo),e(A,loo),e(A,Kf),e(Kf,nse),e(nse,ioo),e(Kf,doo),e(Kf,nP),e(nP,coo),e(Kf,moo),e(A,foo),e(A,Zf),e(Zf,sse),e(sse,goo),e(Zf,hoo),e(Zf,sP),e(sP,uoo),e(Zf,poo),e(A,_oo),e(A,eg),e(eg,lse),e(lse,boo),e(eg,voo),e(eg,lP),e(lP,Foo),e(eg,Too),e(A,Moo),e(A,og),e(og,ise),e(ise,Eoo),e(og,Coo),e(og,iP),e(iP,woo),e(og,Aoo),e(A,Loo),e(A,rg),e(rg,dse),e(dse,yoo),e(rg,xoo),e(rg,dP),e(dP,$oo),e(rg,koo),e(A,Soo),e(A,tg),e(tg,cse),e(cse,Roo),e(tg,Poo),e(tg,cP),e(cP,Boo),e(tg,Ioo),e(A,Noo),e(A,ag),e(ag,mse),e(mse,qoo),e(ag,joo),e(ag,mP),e(mP,Doo),e(ag,Goo),e(A,Ooo),e(A,ng),e(ng,fse),e(fse,Voo),e(ng,Xoo),e(ng,fP),e(fP,zoo),e(ng,Qoo),e(A,Woo),e(A,sg),e(sg,gse),e(gse,Hoo),e(sg,Uoo),e(sg,gP),e(gP,Joo),e(sg,Yoo),e(A,Koo),e(A,lg),e(lg,hse),e(hse,Zoo),e(lg,ero),e(lg,hP),e(hP,oro),e(lg,rro),e(A,tro),e(A,ig),e(ig,use),e(use,aro),e(ig,nro),e(ig,uP),e(uP,sro),e(ig,lro),e(A,iro),e(A,dg),e(dg,pse),e(pse,dro),e(dg,cro),e(dg,pP),e(pP,mro),e(dg,fro),e(A,gro),e(A,cg),e(cg,_se),e(_se,hro),e(cg,uro),e(cg,_P),e(_P,pro),e(cg,_ro),e(A,bro),e(A,mg),e(mg,bse),e(bse,vro),e(mg,Fro),e(mg,bP),e(bP,Tro),e(mg,Mro),e(A,Ero),e(A,fg),e(fg,vse),e(vse,Cro),e(fg,wro),e(fg,vP),e(vP,Aro),e(fg,Lro),e(A,yro),e(A,gg),e(gg,Fse),e(Fse,xro),e(gg,$ro),e(gg,FP),e(FP,kro),e(gg,Sro),e(A,Rro),e(A,hg),e(hg,Tse),e(Tse,Pro),e(hg,Bro),e(hg,TP),e(TP,Iro),e(hg,Nro),e(A,qro),e(A,ug),e(ug,Mse),e(Mse,jro),e(ug,Dro),e(ug,MP),e(MP,Gro),e(ug,Oro),e(A,Vro),e(A,pg),e(pg,Ese),e(Ese,Xro),e(pg,zro),e(pg,EP),e(EP,Qro),e(pg,Wro),e(A,Hro),e(A,_g),e(_g,Cse),e(Cse,Uro),e(_g,Jro),e(_g,CP),e(CP,Yro),e(_g,Kro),e(A,Zro),e(A,bg),e(bg,wse),e(wse,eto),e(bg,oto),e(bg,wP),e(wP,rto),e(bg,tto),e(A,ato),e(A,vg),e(vg,Ase),e(Ase,nto),e(vg,sto),e(vg,AP),e(AP,lto),e(vg,ito),e(A,dto),e(A,Fg),e(Fg,Lse),e(Lse,cto),e(Fg,mto),e(Fg,LP),e(LP,fto),e(Fg,gto),e(A,hto),e(A,Tg),e(Tg,yse),e(yse,uto),e(Tg,pto),e(Tg,yP),e(yP,_to),e(Tg,bto),e(A,vto),e(A,Mg),e(Mg,xse),e(xse,Fto),e(Mg,Tto),e(Mg,xP),e(xP,Mto),e(Mg,Eto),e(A,Cto),e(A,Eg),e(Eg,$se),e($se,wto),e(Eg,Ato),e(Eg,$P),e($P,Lto),e(Eg,yto),e(A,xto),e(A,Cg),e(Cg,kse),e(kse,$to),e(Cg,kto),e(Cg,kP),e(kP,Sto),e(Cg,Rto),e(A,Pto),e(A,wg),e(wg,Sse),e(Sse,Bto),e(wg,Ito),e(wg,SP),e(SP,Nto),e(wg,qto),e(A,jto),e(A,Ag),e(Ag,Rse),e(Rse,Dto),e(Ag,Gto),e(Ag,RP),e(RP,Oto),e(Ag,Vto),e(A,Xto),e(A,Lg),e(Lg,Pse),e(Pse,zto),e(Lg,Qto),e(Lg,PP),e(PP,Wto),e(Lg,Hto),e(A,Uto),e(A,yg),e(yg,Bse),e(Bse,Jto),e(yg,Yto),e(yg,BP),e(BP,Kto),e(yg,Zto),e(A,eao),e(A,xg),e(xg,Ise),e(Ise,oao),e(xg,rao),e(xg,IP),e(IP,tao),e(xg,aao),e(A,nao),e(A,$g),e($g,Nse),e(Nse,sao),e($g,lao),e($g,NP),e(NP,iao),e($g,dao),e(A,cao),e(A,kg),e(kg,qse),e(qse,mao),e(kg,fao),e(kg,qP),e(qP,gao),e(kg,hao),e(A,uao),e(A,Sg),e(Sg,jse),e(jse,pao),e(Sg,_ao),e(Sg,jP),e(jP,bao),e(Sg,vao),e(A,Fao),e(A,Rg),e(Rg,Dse),e(Dse,Tao),e(Rg,Mao),e(Rg,DP),e(DP,Eao),e(Rg,Cao),e(A,wao),e(A,Pg),e(Pg,Gse),e(Gse,Aao),e(Pg,Lao),e(Pg,GP),e(GP,yao),e(Pg,xao),e(A,$ao),e(A,Bg),e(Bg,Ose),e(Ose,kao),e(Bg,Sao),e(Bg,OP),e(OP,Rao),e(Bg,Pao),e(A,Bao),e(A,Ig),e(Ig,Vse),e(Vse,Iao),e(Ig,Nao),e(Ig,VP),e(VP,qao),e(Ig,jao),e(A,Dao),e(A,Ng),e(Ng,Xse),e(Xse,Gao),e(Ng,Oao),e(Ng,XP),e(XP,Vao),e(Ng,Xao),e(A,zao),e(A,qg),e(qg,zse),e(zse,Qao),e(qg,Wao),e(qg,zP),e(zP,Hao),e(qg,Uao),e(A,Jao),e(A,jg),e(jg,Qse),e(Qse,Yao),e(jg,Kao),e(jg,QP),e(QP,Zao),e(jg,eno),e(A,ono),e(A,Dg),e(Dg,Wse),e(Wse,rno),e(Dg,tno),e(Dg,WP),e(WP,ano),e(Dg,nno),e(A,sno),e(A,Gg),e(Gg,Hse),e(Hse,lno),e(Gg,ino),e(Gg,HP),e(HP,dno),e(Gg,cno),e(A,mno),e(A,Og),e(Og,Use),e(Use,fno),e(Og,gno),e(Og,UP),e(UP,hno),e(Og,uno),e(A,pno),e(A,Vg),e(Vg,Jse),e(Jse,_no),e(Vg,bno),e(Vg,JP),e(JP,vno),e(Vg,Fno),e(A,Tno),e(A,Xg),e(Xg,Yse),e(Yse,Mno),e(Xg,Eno),e(Xg,YP),e(YP,Cno),e(Xg,wno),e(A,Ano),e(A,zg),e(zg,Kse),e(Kse,Lno),e(zg,yno),e(zg,KP),e(KP,xno),e(zg,$no),e(A,kno),e(A,Qg),e(Qg,Zse),e(Zse,Sno),e(Qg,Rno),e(Qg,ZP),e(ZP,Pno),e(Qg,Bno),e(A,Ino),e(A,Wg),e(Wg,ele),e(ele,Nno),e(Wg,qno),e(Wg,eB),e(eB,jno),e(Wg,Dno),e(A,Gno),e(A,Hg),e(Hg,ole),e(ole,Ono),e(Hg,Vno),e(Hg,oB),e(oB,Xno),e(Hg,zno),e(A,Qno),e(A,Ug),e(Ug,rle),e(rle,Wno),e(Ug,Hno),e(Ug,rB),e(rB,Uno),e(Ug,Jno),e(A,Yno),e(A,Jg),e(Jg,tle),e(tle,Kno),e(Jg,Zno),e(Jg,tB),e(tB,eso),e(Jg,oso),e(A,rso),e(A,Yg),e(Yg,ale),e(ale,tso),e(Yg,aso),e(Yg,aB),e(aB,nso),e(Yg,sso),e(yr,lso),M(Kg,yr,null),e(Lo,iso),e(Lo,Zg),M(_y,Zg,null),e(Zg,dso),e(Zg,nle),e(nle,cso),b(m,xXe,_),b(m,qi,_),e(qi,eh),e(eh,sle),M(by,sle,null),e(qi,mso),e(qi,lle),e(lle,fso),b(m,$Xe,_),b(m,yo,_),M(vy,yo,null),e(yo,gso),e(yo,Fy),e(Fy,hso),e(Fy,nB),e(nB,uso),e(Fy,pso),e(yo,_so),e(yo,Ty),e(Ty,bso),e(Ty,ile),e(ile,vso),e(Ty,Fso),e(yo,Tso),e(yo,xr),M(My,xr,null),e(xr,Mso),e(xr,dle),e(dle,Eso),e(xr,Cso),e(xr,Pa),e(Pa,wso),e(Pa,cle),e(cle,Aso),e(Pa,Lso),e(Pa,mle),e(mle,yso),e(Pa,xso),e(Pa,fle),e(fle,$so),e(Pa,kso),e(xr,Sso),e(xr,k),e(k,jn),e(jn,gle),e(gle,Rso),e(jn,Pso),e(jn,sB),e(sB,Bso),e(jn,Iso),e(jn,lB),e(lB,Nso),e(jn,qso),e(k,jso),e(k,Dn),e(Dn,hle),e(hle,Dso),e(Dn,Gso),e(Dn,iB),e(iB,Oso),e(Dn,Vso),e(Dn,dB),e(dB,Xso),e(Dn,zso),e(k,Qso),e(k,Gn),e(Gn,ule),e(ule,Wso),e(Gn,Hso),e(Gn,cB),e(cB,Uso),e(Gn,Jso),e(Gn,mB),e(mB,Yso),e(Gn,Kso),e(k,Zso),e(k,oh),e(oh,ple),e(ple,elo),e(oh,olo),e(oh,fB),e(fB,rlo),e(oh,tlo),e(k,alo),e(k,On),e(On,_le),e(_le,nlo),e(On,slo),e(On,gB),e(gB,llo),e(On,ilo),e(On,hB),e(hB,dlo),e(On,clo),e(k,mlo),e(k,rh),e(rh,ble),e(ble,flo),e(rh,glo),e(rh,uB),e(uB,hlo),e(rh,ulo),e(k,plo),e(k,th),e(th,vle),e(vle,_lo),e(th,blo),e(th,pB),e(pB,vlo),e(th,Flo),e(k,Tlo),e(k,ah),e(ah,Fle),e(Fle,Mlo),e(ah,Elo),e(ah,_B),e(_B,Clo),e(ah,wlo),e(k,Alo),e(k,Vn),e(Vn,Tle),e(Tle,Llo),e(Vn,ylo),e(Vn,bB),e(bB,xlo),e(Vn,$lo),e(Vn,vB),e(vB,klo),e(Vn,Slo),e(k,Rlo),e(k,Xn),e(Xn,Mle),e(Mle,Plo),e(Xn,Blo),e(Xn,FB),e(FB,Ilo),e(Xn,Nlo),e(Xn,TB),e(TB,qlo),e(Xn,jlo),e(k,Dlo),e(k,zn),e(zn,Ele),e(Ele,Glo),e(zn,Olo),e(zn,MB),e(MB,Vlo),e(zn,Xlo),e(zn,EB),e(EB,zlo),e(zn,Qlo),e(k,Wlo),e(k,nh),e(nh,Cle),e(Cle,Hlo),e(nh,Ulo),e(nh,CB),e(CB,Jlo),e(nh,Ylo),e(k,Klo),e(k,sh),e(sh,wle),e(wle,Zlo),e(sh,eio),e(sh,wB),e(wB,oio),e(sh,rio),e(k,tio),e(k,lh),e(lh,Ale),e(Ale,aio),e(lh,nio),e(lh,AB),e(AB,sio),e(lh,lio),e(k,iio),e(k,Qn),e(Qn,Lle),e(Lle,dio),e(Qn,cio),e(Qn,LB),e(LB,mio),e(Qn,fio),e(Qn,yB),e(yB,gio),e(Qn,hio),e(k,uio),e(k,ih),e(ih,yle),e(yle,pio),e(ih,_io),e(ih,xB),e(xB,bio),e(ih,vio),e(k,Fio),e(k,Wn),e(Wn,xle),e(xle,Tio),e(Wn,Mio),e(Wn,$B),e($B,Eio),e(Wn,Cio),e(Wn,kB),e(kB,wio),e(Wn,Aio),e(k,Lio),e(k,Hn),e(Hn,$le),e($le,yio),e(Hn,xio),e(Hn,SB),e(SB,$io),e(Hn,kio),e(Hn,RB),e(RB,Sio),e(Hn,Rio),e(k,Pio),e(k,Un),e(Un,kle),e(kle,Bio),e(Un,Iio),e(Un,PB),e(PB,Nio),e(Un,qio),e(Un,BB),e(BB,jio),e(Un,Dio),e(k,Gio),e(k,Jn),e(Jn,Sle),e(Sle,Oio),e(Jn,Vio),e(Jn,IB),e(IB,Xio),e(Jn,zio),e(Jn,NB),e(NB,Qio),e(Jn,Wio),e(k,Hio),e(k,dh),e(dh,Rle),e(Rle,Uio),e(dh,Jio),e(dh,qB),e(qB,Yio),e(dh,Kio),e(k,Zio),e(k,Yn),e(Yn,Ple),e(Ple,edo),e(Yn,odo),e(Yn,jB),e(jB,rdo),e(Yn,tdo),e(Yn,DB),e(DB,ado),e(Yn,ndo),e(k,sdo),e(k,Kn),e(Kn,Ble),e(Ble,ldo),e(Kn,ido),e(Kn,GB),e(GB,ddo),e(Kn,cdo),e(Kn,OB),e(OB,mdo),e(Kn,fdo),e(k,gdo),e(k,Zn),e(Zn,Ile),e(Ile,hdo),e(Zn,udo),e(Zn,VB),e(VB,pdo),e(Zn,_do),e(Zn,XB),e(XB,bdo),e(Zn,vdo),e(k,Fdo),e(k,es),e(es,Nle),e(Nle,Tdo),e(es,Mdo),e(es,zB),e(zB,Edo),e(es,Cdo),e(es,QB),e(QB,wdo),e(es,Ado),e(k,Ldo),e(k,os),e(os,qle),e(qle,ydo),e(os,xdo),e(os,WB),e(WB,$do),e(os,kdo),e(os,HB),e(HB,Sdo),e(os,Rdo),e(k,Pdo),e(k,rs),e(rs,jle),e(jle,Bdo),e(rs,Ido),e(rs,UB),e(UB,Ndo),e(rs,qdo),e(rs,JB),e(JB,jdo),e(rs,Ddo),e(k,Gdo),e(k,ch),e(ch,Dle),e(Dle,Odo),e(ch,Vdo),e(ch,YB),e(YB,Xdo),e(ch,zdo),e(k,Qdo),e(k,ts),e(ts,Gle),e(Gle,Wdo),e(ts,Hdo),e(ts,KB),e(KB,Udo),e(ts,Jdo),e(ts,ZB),e(ZB,Ydo),e(ts,Kdo),e(k,Zdo),e(k,mh),e(mh,Ole),e(Ole,eco),e(mh,oco),e(mh,eI),e(eI,rco),e(mh,tco),e(k,aco),e(k,as),e(as,Vle),e(Vle,nco),e(as,sco),e(as,oI),e(oI,lco),e(as,ico),e(as,rI),e(rI,dco),e(as,cco),e(k,mco),e(k,ns),e(ns,Xle),e(Xle,fco),e(ns,gco),e(ns,tI),e(tI,hco),e(ns,uco),e(ns,aI),e(aI,pco),e(ns,_co),e(k,bco),e(k,ss),e(ss,zle),e(zle,vco),e(ss,Fco),e(ss,nI),e(nI,Tco),e(ss,Mco),e(ss,sI),e(sI,Eco),e(ss,Cco),e(k,wco),e(k,fh),e(fh,Qle),e(Qle,Aco),e(fh,Lco),e(fh,lI),e(lI,yco),e(fh,xco),e(k,$co),e(k,ls),e(ls,Wle),e(Wle,kco),e(ls,Sco),e(ls,iI),e(iI,Rco),e(ls,Pco),e(ls,dI),e(dI,Bco),e(ls,Ico),e(k,Nco),e(k,is),e(is,Hle),e(Hle,qco),e(is,jco),e(is,cI),e(cI,Dco),e(is,Gco),e(is,mI),e(mI,Oco),e(is,Vco),e(k,Xco),e(k,ds),e(ds,Ule),e(Ule,zco),e(ds,Qco),e(ds,fI),e(fI,Wco),e(ds,Hco),e(ds,gI),e(gI,Uco),e(ds,Jco),e(k,Yco),e(k,gh),e(gh,Jle),e(Jle,Kco),e(gh,Zco),e(gh,hI),e(hI,emo),e(gh,omo),e(k,rmo),e(k,cs),e(cs,Yle),e(Yle,tmo),e(cs,amo),e(cs,uI),e(uI,nmo),e(cs,smo),e(cs,pI),e(pI,lmo),e(cs,imo),e(k,dmo),e(k,ms),e(ms,Kle),e(Kle,cmo),e(ms,mmo),e(ms,_I),e(_I,fmo),e(ms,gmo),e(ms,bI),e(bI,hmo),e(ms,umo),e(k,pmo),e(k,fs),e(fs,Zle),e(Zle,_mo),e(fs,bmo),e(fs,vI),e(vI,vmo),e(fs,Fmo),e(fs,FI),e(FI,Tmo),e(fs,Mmo),e(k,Emo),e(k,gs),e(gs,eie),e(eie,Cmo),e(gs,wmo),e(gs,TI),e(TI,Amo),e(gs,Lmo),e(gs,MI),e(MI,ymo),e(gs,xmo),e(k,$mo),e(k,hs),e(hs,oie),e(oie,kmo),e(hs,Smo),e(hs,EI),e(EI,Rmo),e(hs,Pmo),e(hs,CI),e(CI,Bmo),e(hs,Imo),e(k,Nmo),e(k,us),e(us,rie),e(rie,qmo),e(us,jmo),e(us,wI),e(wI,Dmo),e(us,Gmo),e(us,AI),e(AI,Omo),e(us,Vmo),e(k,Xmo),e(k,ps),e(ps,tie),e(tie,zmo),e(ps,Qmo),e(ps,LI),e(LI,Wmo),e(ps,Hmo),e(ps,yI),e(yI,Umo),e(ps,Jmo),e(k,Ymo),e(k,_s),e(_s,aie),e(aie,Kmo),e(_s,Zmo),e(_s,xI),e(xI,efo),e(_s,ofo),e(_s,$I),e($I,rfo),e(_s,tfo),e(k,afo),e(k,hh),e(hh,nie),e(nie,nfo),e(hh,sfo),e(hh,kI),e(kI,lfo),e(hh,ifo),e(k,dfo),e(k,bs),e(bs,sie),e(sie,cfo),e(bs,mfo),e(bs,SI),e(SI,ffo),e(bs,gfo),e(bs,RI),e(RI,hfo),e(bs,ufo),e(k,pfo),e(k,uh),e(uh,lie),e(lie,_fo),e(uh,bfo),e(uh,PI),e(PI,vfo),e(uh,Ffo),e(k,Tfo),e(k,ph),e(ph,iie),e(iie,Mfo),e(ph,Efo),e(ph,BI),e(BI,Cfo),e(ph,wfo),e(k,Afo),e(k,vs),e(vs,die),e(die,Lfo),e(vs,yfo),e(vs,II),e(II,xfo),e(vs,$fo),e(vs,NI),e(NI,kfo),e(vs,Sfo),e(k,Rfo),e(k,Fs),e(Fs,cie),e(cie,Pfo),e(Fs,Bfo),e(Fs,qI),e(qI,Ifo),e(Fs,Nfo),e(Fs,jI),e(jI,qfo),e(Fs,jfo),e(k,Dfo),e(k,Ts),e(Ts,mie),e(mie,Gfo),e(Ts,Ofo),e(Ts,DI),e(DI,Vfo),e(Ts,Xfo),e(Ts,GI),e(GI,zfo),e(Ts,Qfo),e(k,Wfo),e(k,_h),e(_h,fie),e(fie,Hfo),e(_h,Ufo),e(_h,OI),e(OI,Jfo),e(_h,Yfo),e(k,Kfo),e(k,Ms),e(Ms,gie),e(gie,Zfo),e(Ms,ego),e(Ms,VI),e(VI,ogo),e(Ms,rgo),e(Ms,XI),e(XI,tgo),e(Ms,ago),e(k,ngo),e(k,Es),e(Es,hie),e(hie,sgo),e(Es,lgo),e(Es,zI),e(zI,igo),e(Es,dgo),e(Es,QI),e(QI,cgo),e(Es,mgo),e(k,fgo),e(k,Cs),e(Cs,uie),e(uie,ggo),e(Cs,hgo),e(Cs,WI),e(WI,ugo),e(Cs,pgo),e(Cs,HI),e(HI,_go),e(Cs,bgo),e(k,vgo),e(k,ws),e(ws,pie),e(pie,Fgo),e(ws,Tgo),e(ws,UI),e(UI,Mgo),e(ws,Ego),e(ws,JI),e(JI,Cgo),e(ws,wgo),e(k,Ago),e(k,As),e(As,_ie),e(_ie,Lgo),e(As,ygo),e(As,YI),e(YI,xgo),e(As,$go),e(As,KI),e(KI,kgo),e(As,Sgo),e(k,Rgo),e(k,Ls),e(Ls,bie),e(bie,Pgo),e(Ls,Bgo),e(Ls,ZI),e(ZI,Igo),e(Ls,Ngo),e(Ls,eN),e(eN,qgo),e(Ls,jgo),e(k,Dgo),e(k,ys),e(ys,vie),e(vie,Ggo),e(ys,Ogo),e(ys,oN),e(oN,Vgo),e(ys,Xgo),e(ys,rN),e(rN,zgo),e(ys,Qgo),e(k,Wgo),e(k,xs),e(xs,Fie),e(Fie,Hgo),e(xs,Ugo),e(xs,tN),e(tN,Jgo),e(xs,Ygo),e(xs,aN),e(aN,Kgo),e(xs,Zgo),e(k,eho),e(k,bh),e(bh,Tie),e(Tie,oho),e(bh,rho),e(bh,nN),e(nN,tho),e(bh,aho),e(k,nho),e(k,$s),e($s,Mie),e(Mie,sho),e($s,lho),e($s,sN),e(sN,iho),e($s,dho),e($s,lN),e(lN,cho),e($s,mho),e(k,fho),e(k,vh),e(vh,Eie),e(Eie,gho),e(vh,hho),e(vh,iN),e(iN,uho),e(vh,pho),e(k,_ho),e(k,Fh),e(Fh,Cie),e(Cie,bho),e(Fh,vho),e(Fh,dN),e(dN,Fho),e(Fh,Tho),e(k,Mho),e(k,Th),e(Th,wie),e(wie,Eho),e(Th,Cho),e(Th,cN),e(cN,who),e(Th,Aho),e(k,Lho),e(k,Mh),e(Mh,Aie),e(Aie,yho),e(Mh,xho),e(Mh,mN),e(mN,$ho),e(Mh,kho),e(k,Sho),e(k,ks),e(ks,Lie),e(Lie,Rho),e(ks,Pho),e(ks,fN),e(fN,Bho),e(ks,Iho),e(ks,gN),e(gN,Nho),e(ks,qho),e(k,jho),e(k,Eh),e(Eh,yie),e(yie,Dho),e(Eh,Gho),e(Eh,hN),e(hN,Oho),e(Eh,Vho),e(k,Xho),e(k,Ss),e(Ss,xie),e(xie,zho),e(Ss,Qho),e(Ss,uN),e(uN,Who),e(Ss,Hho),e(Ss,pN),e(pN,Uho),e(Ss,Jho),e(k,Yho),e(k,Rs),e(Rs,$ie),e($ie,Kho),e(Rs,Zho),e(Rs,_N),e(_N,euo),e(Rs,ouo),e(Rs,bN),e(bN,ruo),e(Rs,tuo),e(k,auo),e(k,Ps),e(Ps,kie),e(kie,nuo),e(Ps,suo),e(Ps,vN),e(vN,luo),e(Ps,iuo),e(Ps,FN),e(FN,duo),e(Ps,cuo),e(k,muo),e(k,Bs),e(Bs,Sie),e(Sie,fuo),e(Bs,guo),e(Bs,TN),e(TN,huo),e(Bs,uuo),e(Bs,MN),e(MN,puo),e(Bs,_uo),e(k,buo),e(k,Is),e(Is,Rie),e(Rie,vuo),e(Is,Fuo),e(Is,EN),e(EN,Tuo),e(Is,Muo),e(Is,CN),e(CN,Euo),e(Is,Cuo),e(k,wuo),e(k,Ns),e(Ns,Pie),e(Pie,Auo),e(Ns,Luo),e(Ns,wN),e(wN,yuo),e(Ns,xuo),e(Ns,AN),e(AN,$uo),e(Ns,kuo),e(k,Suo),e(k,Ch),e(Ch,Bie),e(Bie,Ruo),e(Ch,Puo),e(Ch,LN),e(LN,Buo),e(Ch,Iuo),e(k,Nuo),e(k,wh),e(wh,Iie),e(Iie,quo),e(wh,juo),e(wh,yN),e(yN,Duo),e(wh,Guo),e(k,Ouo),e(k,qs),e(qs,Nie),e(Nie,Vuo),e(qs,Xuo),e(qs,xN),e(xN,zuo),e(qs,Quo),e(qs,$N),e($N,Wuo),e(qs,Huo),e(k,Uuo),e(k,js),e(js,qie),e(qie,Juo),e(js,Yuo),e(js,kN),e(kN,Kuo),e(js,Zuo),e(js,SN),e(SN,epo),e(js,opo),e(k,rpo),e(k,Ds),e(Ds,jie),e(jie,tpo),e(Ds,apo),e(Ds,RN),e(RN,npo),e(Ds,spo),e(Ds,PN),e(PN,lpo),e(Ds,ipo),e(k,dpo),e(k,Ah),e(Ah,Die),e(Die,cpo),e(Ah,mpo),e(Ah,BN),e(BN,fpo),e(Ah,gpo),e(k,hpo),e(k,Lh),e(Lh,Gie),e(Gie,upo),e(Lh,ppo),e(Lh,IN),e(IN,_po),e(Lh,bpo),e(k,vpo),e(k,yh),e(yh,Oie),e(Oie,Fpo),e(yh,Tpo),e(yh,NN),e(NN,Mpo),e(yh,Epo),e(k,Cpo),e(k,Gs),e(Gs,Vie),e(Vie,wpo),e(Gs,Apo),e(Gs,qN),e(qN,Lpo),e(Gs,ypo),e(Gs,jN),e(jN,xpo),e(Gs,$po),e(k,kpo),e(k,Os),e(Os,Xie),e(Xie,Spo),e(Os,Rpo),e(Os,DN),e(DN,Ppo),e(Os,Bpo),e(Os,GN),e(GN,Ipo),e(Os,Npo),e(k,qpo),e(k,xh),e(xh,zie),e(zie,jpo),e(xh,Dpo),e(xh,ON),e(ON,Gpo),e(xh,Opo),e(k,Vpo),e(k,$h),e($h,Qie),e(Qie,Xpo),e($h,zpo),e($h,VN),e(VN,Qpo),e($h,Wpo),e(k,Hpo),e(k,kh),e(kh,Wie),e(Wie,Upo),e(kh,Jpo),e(kh,XN),e(XN,Ypo),e(kh,Kpo),e(k,Zpo),e(k,Vs),e(Vs,Hie),e(Hie,e_o),e(Vs,o_o),e(Vs,zN),e(zN,r_o),e(Vs,t_o),e(Vs,QN),e(QN,a_o),e(Vs,n_o),e(k,s_o),e(k,Sh),e(Sh,Uie),e(Uie,l_o),e(Sh,i_o),e(Sh,WN),e(WN,d_o),e(Sh,c_o),e(k,m_o),e(k,Rh),e(Rh,Jie),e(Jie,f_o),e(Rh,g_o),e(Rh,HN),e(HN,h_o),e(Rh,u_o),e(k,p_o),e(k,Xs),e(Xs,Yie),e(Yie,__o),e(Xs,b_o),e(Xs,UN),e(UN,v_o),e(Xs,F_o),e(Xs,JN),e(JN,T_o),e(Xs,M_o),e(k,E_o),e(k,zs),e(zs,Kie),e(Kie,C_o),e(zs,w_o),e(zs,YN),e(YN,A_o),e(zs,L_o),e(zs,KN),e(KN,y_o),e(zs,x_o),e(k,$_o),e(k,Qs),e(Qs,Zie),e(Zie,k_o),e(Qs,S_o),e(Qs,ZN),e(ZN,R_o),e(Qs,P_o),e(Qs,eq),e(eq,B_o),e(Qs,I_o),e(k,N_o),e(k,Ws),e(Ws,ede),e(ede,q_o),e(Ws,j_o),e(Ws,oq),e(oq,D_o),e(Ws,G_o),e(Ws,rq),e(rq,O_o),e(Ws,V_o),e(xr,X_o),M(Ph,xr,null),e(yo,z_o),e(yo,Bh),M(Ey,Bh,null),e(Bh,Q_o),e(Bh,ode),e(ode,W_o),b(m,kXe,_),b(m,ji,_),e(ji,Ih),e(Ih,rde),M(Cy,rde,null),e(ji,H_o),e(ji,tde),e(tde,U_o),b(m,SXe,_),b(m,xo,_),M(wy,xo,null),e(xo,J_o),e(xo,Ay),e(Ay,Y_o),e(Ay,tq),e(tq,K_o),e(Ay,Z_o),e(xo,e2o),e(xo,Ly),e(Ly,o2o),e(Ly,ade),e(ade,r2o),e(Ly,t2o),e(xo,a2o),e(xo,Ue),M(yy,Ue,null),e(Ue,n2o),e(Ue,nde),e(nde,s2o),e(Ue,l2o),e(Ue,Ba),e(Ba,i2o),e(Ba,sde),e(sde,d2o),e(Ba,c2o),e(Ba,lde),e(lde,m2o),e(Ba,f2o),e(Ba,ide),e(ide,g2o),e(Ba,h2o),e(Ue,u2o),e(Ue,Y),e(Y,Nh),e(Nh,dde),e(dde,p2o),e(Nh,_2o),e(Nh,aq),e(aq,b2o),e(Nh,v2o),e(Y,F2o),e(Y,qh),e(qh,cde),e(cde,T2o),e(qh,M2o),e(qh,nq),e(nq,E2o),e(qh,C2o),e(Y,w2o),e(Y,jh),e(jh,mde),e(mde,A2o),e(jh,L2o),e(jh,sq),e(sq,y2o),e(jh,x2o),e(Y,$2o),e(Y,Dh),e(Dh,fde),e(fde,k2o),e(Dh,S2o),e(Dh,lq),e(lq,R2o),e(Dh,P2o),e(Y,B2o),e(Y,Gh),e(Gh,gde),e(gde,I2o),e(Gh,N2o),e(Gh,iq),e(iq,q2o),e(Gh,j2o),e(Y,D2o),e(Y,Oh),e(Oh,hde),e(hde,G2o),e(Oh,O2o),e(Oh,dq),e(dq,V2o),e(Oh,X2o),e(Y,z2o),e(Y,Vh),e(Vh,ude),e(ude,Q2o),e(Vh,W2o),e(Vh,cq),e(cq,H2o),e(Vh,U2o),e(Y,J2o),e(Y,Xh),e(Xh,pde),e(pde,Y2o),e(Xh,K2o),e(Xh,mq),e(mq,Z2o),e(Xh,ebo),e(Y,obo),e(Y,zh),e(zh,_de),e(_de,rbo),e(zh,tbo),e(zh,fq),e(fq,abo),e(zh,nbo),e(Y,sbo),e(Y,Qh),e(Qh,bde),e(bde,lbo),e(Qh,ibo),e(Qh,gq),e(gq,dbo),e(Qh,cbo),e(Y,mbo),e(Y,Wh),e(Wh,vde),e(vde,fbo),e(Wh,gbo),e(Wh,hq),e(hq,hbo),e(Wh,ubo),e(Y,pbo),e(Y,Hh),e(Hh,Fde),e(Fde,_bo),e(Hh,bbo),e(Hh,uq),e(uq,vbo),e(Hh,Fbo),e(Y,Tbo),e(Y,Uh),e(Uh,Tde),e(Tde,Mbo),e(Uh,Ebo),e(Uh,pq),e(pq,Cbo),e(Uh,wbo),e(Y,Abo),e(Y,Jh),e(Jh,Mde),e(Mde,Lbo),e(Jh,ybo),e(Jh,_q),e(_q,xbo),e(Jh,$bo),e(Y,kbo),e(Y,Yh),e(Yh,Ede),e(Ede,Sbo),e(Yh,Rbo),e(Yh,bq),e(bq,Pbo),e(Yh,Bbo),e(Y,Ibo),e(Y,Kh),e(Kh,Cde),e(Cde,Nbo),e(Kh,qbo),e(Kh,vq),e(vq,jbo),e(Kh,Dbo),e(Y,Gbo),e(Y,Zh),e(Zh,wde),e(wde,Obo),e(Zh,Vbo),e(Zh,Fq),e(Fq,Xbo),e(Zh,zbo),e(Y,Qbo),e(Y,eu),e(eu,Ade),e(Ade,Wbo),e(eu,Hbo),e(eu,Tq),e(Tq,Ubo),e(eu,Jbo),e(Y,Ybo),e(Y,ou),e(ou,Lde),e(Lde,Kbo),e(ou,Zbo),e(ou,Mq),e(Mq,evo),e(ou,ovo),e(Y,rvo),e(Y,ru),e(ru,yde),e(yde,tvo),e(ru,avo),e(ru,Eq),e(Eq,nvo),e(ru,svo),e(Y,lvo),e(Y,tu),e(tu,xde),e(xde,ivo),e(tu,dvo),e(tu,Cq),e(Cq,cvo),e(tu,mvo),e(Y,fvo),e(Y,au),e(au,$de),e($de,gvo),e(au,hvo),e(au,wq),e(wq,uvo),e(au,pvo),e(Y,_vo),e(Y,nu),e(nu,kde),e(kde,bvo),e(nu,vvo),e(nu,Aq),e(Aq,Fvo),e(nu,Tvo),e(Y,Mvo),e(Y,su),e(su,Sde),e(Sde,Evo),e(su,Cvo),e(su,Lq),e(Lq,wvo),e(su,Avo),e(Y,Lvo),e(Y,lu),e(lu,Rde),e(Rde,yvo),e(lu,xvo),e(lu,yq),e(yq,$vo),e(lu,kvo),e(Y,Svo),e(Y,iu),e(iu,Pde),e(Pde,Rvo),e(iu,Pvo),e(iu,xq),e(xq,Bvo),e(iu,Ivo),e(Y,Nvo),e(Y,du),e(du,Bde),e(Bde,qvo),e(du,jvo),e(du,$q),e($q,Dvo),e(du,Gvo),e(Y,Ovo),e(Y,cu),e(cu,Ide),e(Ide,Vvo),e(cu,Xvo),e(cu,kq),e(kq,zvo),e(cu,Qvo),e(Y,Wvo),e(Y,mu),e(mu,Nde),e(Nde,Hvo),e(mu,Uvo),e(mu,Sq),e(Sq,Jvo),e(mu,Yvo),e(Y,Kvo),e(Y,fu),e(fu,qde),e(qde,Zvo),e(fu,e1o),e(fu,Rq),e(Rq,o1o),e(fu,r1o),e(Y,t1o),e(Y,gu),e(gu,jde),e(jde,a1o),e(gu,n1o),e(gu,Pq),e(Pq,s1o),e(gu,l1o),e(Y,i1o),e(Y,hu),e(hu,Dde),e(Dde,d1o),e(hu,c1o),e(hu,Bq),e(Bq,m1o),e(hu,f1o),e(Y,g1o),e(Y,uu),e(uu,Gde),e(Gde,h1o),e(uu,u1o),e(uu,Iq),e(Iq,p1o),e(uu,_1o),e(Y,b1o),e(Y,pu),e(pu,Ode),e(Ode,v1o),e(pu,F1o),e(pu,Nq),e(Nq,T1o),e(pu,M1o),e(Ue,E1o),M(_u,Ue,null),e(Ue,C1o),M(bu,Ue,null),e(xo,w1o),e(xo,vu),M(xy,vu,null),e(vu,A1o),e(vu,Vde),e(Vde,L1o),b(m,RXe,_),b(m,Di,_),e(Di,Fu),e(Fu,Xde),M($y,Xde,null),e(Di,y1o),e(Di,zde),e(zde,x1o),b(m,PXe,_),b(m,$o,_),M(ky,$o,null),e($o,$1o),e($o,Sy),e(Sy,k1o),e(Sy,qq),e(qq,S1o),e(Sy,R1o),e($o,P1o),e($o,Ry),e(Ry,B1o),e(Ry,Qde),e(Qde,I1o),e(Ry,N1o),e($o,q1o),e($o,Je),M(Py,Je,null),e(Je,j1o),e(Je,Wde),e(Wde,D1o),e(Je,G1o),e(Je,Gi),e(Gi,O1o),e(Gi,Hde),e(Hde,V1o),e(Gi,X1o),e(Gi,Ude),e(Ude,z1o),e(Gi,Q1o),e(Je,W1o),e(Je,ue),e(ue,Tu),e(Tu,Jde),e(Jde,H1o),e(Tu,U1o),e(Tu,jq),e(jq,J1o),e(Tu,Y1o),e(ue,K1o),e(ue,Mu),e(Mu,Yde),e(Yde,Z1o),e(Mu,eFo),e(Mu,Dq),e(Dq,oFo),e(Mu,rFo),e(ue,tFo),e(ue,Eu),e(Eu,Kde),e(Kde,aFo),e(Eu,nFo),e(Eu,Gq),e(Gq,sFo),e(Eu,lFo),e(ue,iFo),e(ue,Cu),e(Cu,Zde),e(Zde,dFo),e(Cu,cFo),e(Cu,Oq),e(Oq,mFo),e(Cu,fFo),e(ue,gFo),e(ue,wu),e(wu,ece),e(ece,hFo),e(wu,uFo),e(wu,Vq),e(Vq,pFo),e(wu,_Fo),e(ue,bFo),e(ue,Au),e(Au,oce),e(oce,vFo),e(Au,FFo),e(Au,Xq),e(Xq,TFo),e(Au,MFo),e(ue,EFo),e(ue,Lu),e(Lu,rce),e(rce,CFo),e(Lu,wFo),e(Lu,zq),e(zq,AFo),e(Lu,LFo),e(ue,yFo),e(ue,yu),e(yu,tce),e(tce,xFo),e(yu,$Fo),e(yu,Qq),e(Qq,kFo),e(yu,SFo),e(ue,RFo),e(ue,xu),e(xu,ace),e(ace,PFo),e(xu,BFo),e(xu,Wq),e(Wq,IFo),e(xu,NFo),e(ue,qFo),e(ue,$u),e($u,nce),e(nce,jFo),e($u,DFo),e($u,Hq),e(Hq,GFo),e($u,OFo),e(ue,VFo),e(ue,ku),e(ku,sce),e(sce,XFo),e(ku,zFo),e(ku,Uq),e(Uq,QFo),e(ku,WFo),e(ue,HFo),e(ue,Su),e(Su,lce),e(lce,UFo),e(Su,JFo),e(Su,Jq),e(Jq,YFo),e(Su,KFo),e(ue,ZFo),e(ue,Ru),e(Ru,ice),e(ice,eTo),e(Ru,oTo),e(Ru,Yq),e(Yq,rTo),e(Ru,tTo),e(ue,aTo),e(ue,Pu),e(Pu,dce),e(dce,nTo),e(Pu,sTo),e(Pu,Kq),e(Kq,lTo),e(Pu,iTo),e(ue,dTo),e(ue,Bu),e(Bu,cce),e(cce,cTo),e(Bu,mTo),e(Bu,Zq),e(Zq,fTo),e(Bu,gTo),e(ue,hTo),e(ue,Iu),e(Iu,mce),e(mce,uTo),e(Iu,pTo),e(Iu,ej),e(ej,_To),e(Iu,bTo),e(ue,vTo),e(ue,Nu),e(Nu,fce),e(fce,FTo),e(Nu,TTo),e(Nu,oj),e(oj,MTo),e(Nu,ETo),e(ue,CTo),e(ue,qu),e(qu,gce),e(gce,wTo),e(qu,ATo),e(qu,rj),e(rj,LTo),e(qu,yTo),e(Je,xTo),M(ju,Je,null),e(Je,$To),M(Du,Je,null),e($o,kTo),e($o,Gu),M(By,Gu,null),e(Gu,STo),e(Gu,hce),e(hce,RTo),b(m,BXe,_),b(m,Oi,_),e(Oi,Ou),e(Ou,uce),M(Iy,uce,null),e(Oi,PTo),e(Oi,pce),e(pce,BTo),b(m,IXe,_),b(m,ko,_),M(Ny,ko,null),e(ko,ITo),e(ko,Vi),e(Vi,NTo),e(Vi,tj),e(tj,qTo),e(Vi,jTo),e(Vi,aj),e(aj,DTo),e(Vi,GTo),e(ko,OTo),e(ko,qy),e(qy,VTo),e(qy,_ce),e(_ce,XTo),e(qy,zTo),e(ko,QTo),e(ko,it),M(jy,it,null),e(it,WTo),e(it,bce),e(bce,HTo),e(it,UTo),e(it,Xi),e(Xi,JTo),e(Xi,vce),e(vce,YTo),e(Xi,KTo),e(Xi,nj),e(nj,ZTo),e(Xi,eMo),e(it,oMo),M(Vu,it,null),e(ko,rMo),e(ko,Ye),M(Dy,Ye,null),e(Ye,tMo),e(Ye,Fce),e(Fce,aMo),e(Ye,nMo),e(Ye,Ia),e(Ia,sMo),e(Ia,Tce),e(Tce,lMo),e(Ia,iMo),e(Ia,Mce),e(Mce,dMo),e(Ia,cMo),e(Ia,Ece),e(Ece,mMo),e(Ia,fMo),e(Ye,gMo),e(Ye,y),e(y,Xu),e(Xu,Cce),e(Cce,hMo),e(Xu,uMo),e(Xu,sj),e(sj,pMo),e(Xu,_Mo),e(y,bMo),e(y,zu),e(zu,wce),e(wce,vMo),e(zu,FMo),e(zu,lj),e(lj,TMo),e(zu,MMo),e(y,EMo),e(y,Qu),e(Qu,Ace),e(Ace,CMo),e(Qu,wMo),e(Qu,ij),e(ij,AMo),e(Qu,LMo),e(y,yMo),e(y,Wu),e(Wu,Lce),e(Lce,xMo),e(Wu,$Mo),e(Wu,dj),e(dj,kMo),e(Wu,SMo),e(y,RMo),e(y,Hu),e(Hu,yce),e(yce,PMo),e(Hu,BMo),e(Hu,cj),e(cj,IMo),e(Hu,NMo),e(y,qMo),e(y,Uu),e(Uu,xce),e(xce,jMo),e(Uu,DMo),e(Uu,mj),e(mj,GMo),e(Uu,OMo),e(y,VMo),e(y,Ju),e(Ju,$ce),e($ce,XMo),e(Ju,zMo),e(Ju,fj),e(fj,QMo),e(Ju,WMo),e(y,HMo),e(y,Yu),e(Yu,kce),e(kce,UMo),e(Yu,JMo),e(Yu,gj),e(gj,YMo),e(Yu,KMo),e(y,ZMo),e(y,Ku),e(Ku,Sce),e(Sce,e4o),e(Ku,o4o),e(Ku,hj),e(hj,r4o),e(Ku,t4o),e(y,a4o),e(y,Zu),e(Zu,Rce),e(Rce,n4o),e(Zu,s4o),e(Zu,uj),e(uj,l4o),e(Zu,i4o),e(y,d4o),e(y,ep),e(ep,Pce),e(Pce,c4o),e(ep,m4o),e(ep,pj),e(pj,f4o),e(ep,g4o),e(y,h4o),e(y,op),e(op,Bce),e(Bce,u4o),e(op,p4o),e(op,_j),e(_j,_4o),e(op,b4o),e(y,v4o),e(y,rp),e(rp,Ice),e(Ice,F4o),e(rp,T4o),e(rp,bj),e(bj,M4o),e(rp,E4o),e(y,C4o),e(y,tp),e(tp,Nce),e(Nce,w4o),e(tp,A4o),e(tp,vj),e(vj,L4o),e(tp,y4o),e(y,x4o),e(y,ap),e(ap,qce),e(qce,$4o),e(ap,k4o),e(ap,Fj),e(Fj,S4o),e(ap,R4o),e(y,P4o),e(y,np),e(np,jce),e(jce,B4o),e(np,I4o),e(np,Tj),e(Tj,N4o),e(np,q4o),e(y,j4o),e(y,sp),e(sp,Dce),e(Dce,D4o),e(sp,G4o),e(sp,Mj),e(Mj,O4o),e(sp,V4o),e(y,X4o),e(y,lp),e(lp,Gce),e(Gce,z4o),e(lp,Q4o),e(lp,Ej),e(Ej,W4o),e(lp,H4o),e(y,U4o),e(y,ip),e(ip,Oce),e(Oce,J4o),e(ip,Y4o),e(ip,Cj),e(Cj,K4o),e(ip,Z4o),e(y,eEo),e(y,dp),e(dp,Vce),e(Vce,oEo),e(dp,rEo),e(dp,wj),e(wj,tEo),e(dp,aEo),e(y,nEo),e(y,cp),e(cp,Xce),e(Xce,sEo),e(cp,lEo),e(cp,Aj),e(Aj,iEo),e(cp,dEo),e(y,cEo),e(y,mp),e(mp,zce),e(zce,mEo),e(mp,fEo),e(mp,Lj),e(Lj,gEo),e(mp,hEo),e(y,uEo),e(y,fp),e(fp,Qce),e(Qce,pEo),e(fp,_Eo),e(fp,yj),e(yj,bEo),e(fp,vEo),e(y,FEo),e(y,gp),e(gp,Wce),e(Wce,TEo),e(gp,MEo),e(gp,xj),e(xj,EEo),e(gp,CEo),e(y,wEo),e(y,hp),e(hp,Hce),e(Hce,AEo),e(hp,LEo),e(hp,$j),e($j,yEo),e(hp,xEo),e(y,$Eo),e(y,up),e(up,Uce),e(Uce,kEo),e(up,SEo),e(up,kj),e(kj,REo),e(up,PEo),e(y,BEo),e(y,pp),e(pp,Jce),e(Jce,IEo),e(pp,NEo),e(pp,Sj),e(Sj,qEo),e(pp,jEo),e(y,DEo),e(y,_p),e(_p,Yce),e(Yce,GEo),e(_p,OEo),e(_p,Rj),e(Rj,VEo),e(_p,XEo),e(y,zEo),e(y,bp),e(bp,Kce),e(Kce,QEo),e(bp,WEo),e(bp,Pj),e(Pj,HEo),e(bp,UEo),e(y,JEo),e(y,vp),e(vp,Zce),e(Zce,YEo),e(vp,KEo),e(vp,Bj),e(Bj,ZEo),e(vp,eCo),e(y,oCo),e(y,Fp),e(Fp,eme),e(eme,rCo),e(Fp,tCo),e(Fp,Ij),e(Ij,aCo),e(Fp,nCo),e(y,sCo),e(y,Tp),e(Tp,ome),e(ome,lCo),e(Tp,iCo),e(Tp,Nj),e(Nj,dCo),e(Tp,cCo),e(y,mCo),e(y,Mp),e(Mp,rme),e(rme,fCo),e(Mp,gCo),e(Mp,qj),e(qj,hCo),e(Mp,uCo),e(y,pCo),e(y,Ep),e(Ep,tme),e(tme,_Co),e(Ep,bCo),e(Ep,jj),e(jj,vCo),e(Ep,FCo),e(y,TCo),e(y,Hs),e(Hs,ame),e(ame,MCo),e(Hs,ECo),e(Hs,Dj),e(Dj,CCo),e(Hs,wCo),e(Hs,Gj),e(Gj,ACo),e(Hs,LCo),e(y,yCo),e(y,Cp),e(Cp,nme),e(nme,xCo),e(Cp,$Co),e(Cp,Oj),e(Oj,kCo),e(Cp,SCo),e(y,RCo),e(y,wp),e(wp,sme),e(sme,PCo),e(wp,BCo),e(wp,Vj),e(Vj,ICo),e(wp,NCo),e(y,qCo),e(y,Ap),e(Ap,lme),e(lme,jCo),e(Ap,DCo),e(Ap,Xj),e(Xj,GCo),e(Ap,OCo),e(y,VCo),e(y,Lp),e(Lp,ime),e(ime,XCo),e(Lp,zCo),e(Lp,zj),e(zj,QCo),e(Lp,WCo),e(y,HCo),e(y,yp),e(yp,dme),e(dme,UCo),e(yp,JCo),e(yp,Qj),e(Qj,YCo),e(yp,KCo),e(y,ZCo),e(y,xp),e(xp,cme),e(cme,e3o),e(xp,o3o),e(xp,Wj),e(Wj,r3o),e(xp,t3o),e(y,a3o),e(y,$p),e($p,mme),e(mme,n3o),e($p,s3o),e($p,Hj),e(Hj,l3o),e($p,i3o),e(y,d3o),e(y,kp),e(kp,fme),e(fme,c3o),e(kp,m3o),e(kp,Uj),e(Uj,f3o),e(kp,g3o),e(y,h3o),e(y,Sp),e(Sp,gme),e(gme,u3o),e(Sp,p3o),e(Sp,Jj),e(Jj,_3o),e(Sp,b3o),e(y,v3o),e(y,Rp),e(Rp,hme),e(hme,F3o),e(Rp,T3o),e(Rp,Yj),e(Yj,M3o),e(Rp,E3o),e(y,C3o),e(y,Pp),e(Pp,ume),e(ume,w3o),e(Pp,A3o),e(Pp,Kj),e(Kj,L3o),e(Pp,y3o),e(y,x3o),e(y,Bp),e(Bp,pme),e(pme,$3o),e(Bp,k3o),e(Bp,Zj),e(Zj,S3o),e(Bp,R3o),e(y,P3o),e(y,Ip),e(Ip,_me),e(_me,B3o),e(Ip,I3o),e(Ip,eD),e(eD,N3o),e(Ip,q3o),e(y,j3o),e(y,Np),e(Np,bme),e(bme,D3o),e(Np,G3o),e(Np,oD),e(oD,O3o),e(Np,V3o),e(y,X3o),e(y,qp),e(qp,vme),e(vme,z3o),e(qp,Q3o),e(qp,rD),e(rD,W3o),e(qp,H3o),e(y,U3o),e(y,jp),e(jp,Fme),e(Fme,J3o),e(jp,Y3o),e(jp,tD),e(tD,K3o),e(jp,Z3o),e(y,e5o),e(y,Dp),e(Dp,Tme),e(Tme,o5o),e(Dp,r5o),e(Dp,aD),e(aD,t5o),e(Dp,a5o),e(y,n5o),e(y,Gp),e(Gp,Mme),e(Mme,s5o),e(Gp,l5o),e(Gp,nD),e(nD,i5o),e(Gp,d5o),e(y,c5o),e(y,Op),e(Op,Eme),e(Eme,m5o),e(Op,f5o),e(Op,sD),e(sD,g5o),e(Op,h5o),e(y,u5o),e(y,Vp),e(Vp,Cme),e(Cme,p5o),e(Vp,_5o),e(Vp,lD),e(lD,b5o),e(Vp,v5o),e(y,F5o),e(y,Xp),e(Xp,wme),e(wme,T5o),e(Xp,M5o),e(Xp,iD),e(iD,E5o),e(Xp,C5o),e(y,w5o),e(y,zp),e(zp,Ame),e(Ame,A5o),e(zp,L5o),e(zp,dD),e(dD,y5o),e(zp,x5o),e(y,$5o),e(y,Qp),e(Qp,Lme),e(Lme,k5o),e(Qp,S5o),e(Qp,cD),e(cD,R5o),e(Qp,P5o),e(y,B5o),e(y,Wp),e(Wp,yme),e(yme,I5o),e(Wp,N5o),e(Wp,mD),e(mD,q5o),e(Wp,j5o),e(y,D5o),e(y,Hp),e(Hp,xme),e(xme,G5o),e(Hp,O5o),e(Hp,fD),e(fD,V5o),e(Hp,X5o),e(y,z5o),e(y,Up),e(Up,$me),e($me,Q5o),e(Up,W5o),e(Up,gD),e(gD,H5o),e(Up,U5o),e(y,J5o),e(y,Jp),e(Jp,kme),e(kme,Y5o),e(Jp,K5o),e(Jp,hD),e(hD,Z5o),e(Jp,e0o),e(y,o0o),e(y,Yp),e(Yp,Sme),e(Sme,r0o),e(Yp,t0o),e(Yp,uD),e(uD,a0o),e(Yp,n0o),e(y,s0o),e(y,Kp),e(Kp,Rme),e(Rme,l0o),e(Kp,i0o),e(Kp,pD),e(pD,d0o),e(Kp,c0o),e(y,m0o),e(y,Zp),e(Zp,Pme),e(Pme,f0o),e(Zp,g0o),e(Zp,_D),e(_D,h0o),e(Zp,u0o),e(y,p0o),e(y,e_),e(e_,Bme),e(Bme,_0o),e(e_,b0o),e(e_,bD),e(bD,v0o),e(e_,F0o),e(y,T0o),e(y,o_),e(o_,Ime),e(Ime,M0o),e(o_,E0o),e(o_,vD),e(vD,C0o),e(o_,w0o),e(y,A0o),e(y,r_),e(r_,Nme),e(Nme,L0o),e(r_,y0o),e(r_,FD),e(FD,x0o),e(r_,$0o),e(y,k0o),e(y,t_),e(t_,qme),e(qme,S0o),e(t_,R0o),e(t_,TD),e(TD,P0o),e(t_,B0o),e(y,I0o),e(y,a_),e(a_,jme),e(jme,N0o),e(a_,q0o),e(a_,MD),e(MD,j0o),e(a_,D0o),e(y,G0o),e(y,n_),e(n_,Dme),e(Dme,O0o),e(n_,V0o),e(n_,ED),e(ED,X0o),e(n_,z0o),e(y,Q0o),e(y,s_),e(s_,Gme),e(Gme,W0o),e(s_,H0o),e(s_,CD),e(CD,U0o),e(s_,J0o),e(y,Y0o),e(y,l_),e(l_,Ome),e(Ome,K0o),e(l_,Z0o),e(l_,wD),e(wD,ewo),e(l_,owo),e(y,rwo),e(y,i_),e(i_,Vme),e(Vme,two),e(i_,awo),e(i_,AD),e(AD,nwo),e(i_,swo),e(y,lwo),e(y,d_),e(d_,Xme),e(Xme,iwo),e(d_,dwo),e(d_,LD),e(LD,cwo),e(d_,mwo),e(y,fwo),e(y,c_),e(c_,zme),e(zme,gwo),e(c_,hwo),e(c_,yD),e(yD,uwo),e(c_,pwo),e(y,_wo),e(y,m_),e(m_,Qme),e(Qme,bwo),e(m_,vwo),e(m_,xD),e(xD,Fwo),e(m_,Two),e(y,Mwo),e(y,f_),e(f_,Wme),e(Wme,Ewo),e(f_,Cwo),e(f_,$D),e($D,wwo),e(f_,Awo),e(y,Lwo),e(y,g_),e(g_,Hme),e(Hme,ywo),e(g_,xwo),e(g_,kD),e(kD,$wo),e(g_,kwo),e(y,Swo),e(y,h_),e(h_,Ume),e(Ume,Rwo),e(h_,Pwo),e(h_,SD),e(SD,Bwo),e(h_,Iwo),e(y,Nwo),e(y,u_),e(u_,Jme),e(Jme,qwo),e(u_,jwo),e(u_,RD),e(RD,Dwo),e(u_,Gwo),e(y,Owo),e(y,p_),e(p_,Yme),e(Yme,Vwo),e(p_,Xwo),e(p_,PD),e(PD,zwo),e(p_,Qwo),e(y,Wwo),e(y,__),e(__,Kme),e(Kme,Hwo),e(__,Uwo),e(__,BD),e(BD,Jwo),e(__,Ywo),e(y,Kwo),e(y,b_),e(b_,Zme),e(Zme,Zwo),e(b_,eAo),e(b_,ID),e(ID,oAo),e(b_,rAo),e(y,tAo),e(y,v_),e(v_,efe),e(efe,aAo),e(v_,nAo),e(v_,ND),e(ND,sAo),e(v_,lAo),e(y,iAo),e(y,F_),e(F_,ofe),e(ofe,dAo),e(F_,cAo),e(F_,qD),e(qD,mAo),e(F_,fAo),e(y,gAo),e(y,T_),e(T_,rfe),e(rfe,hAo),e(T_,uAo),e(T_,jD),e(jD,pAo),e(T_,_Ao),e(y,bAo),e(y,M_),e(M_,tfe),e(tfe,vAo),e(M_,FAo),e(M_,DD),e(DD,TAo),e(M_,MAo),e(y,EAo),e(y,E_),e(E_,afe),e(afe,CAo),e(E_,wAo),e(E_,GD),e(GD,AAo),e(E_,LAo),e(y,yAo),e(y,C_),e(C_,nfe),e(nfe,xAo),e(C_,$Ao),e(C_,OD),e(OD,kAo),e(C_,SAo),e(y,RAo),e(y,w_),e(w_,sfe),e(sfe,PAo),e(w_,BAo),e(w_,VD),e(VD,IAo),e(w_,NAo),e(y,qAo),e(y,A_),e(A_,lfe),e(lfe,jAo),e(A_,DAo),e(A_,XD),e(XD,GAo),e(A_,OAo),e(y,VAo),e(y,L_),e(L_,ife),e(ife,XAo),e(L_,zAo),e(L_,zD),e(zD,QAo),e(L_,WAo),e(y,HAo),e(y,y_),e(y_,dfe),e(dfe,UAo),e(y_,JAo),e(y_,QD),e(QD,YAo),e(y_,KAo),e(y,ZAo),e(y,x_),e(x_,cfe),e(cfe,e6o),e(x_,o6o),e(x_,WD),e(WD,r6o),e(x_,t6o),e(y,a6o),e(y,$_),e($_,mfe),e(mfe,n6o),e($_,s6o),e($_,HD),e(HD,l6o),e($_,i6o),e(y,d6o),e(y,k_),e(k_,ffe),e(ffe,c6o),e(k_,m6o),e(k_,UD),e(UD,f6o),e(k_,g6o),e(y,h6o),e(y,S_),e(S_,gfe),e(gfe,u6o),e(S_,p6o),e(S_,JD),e(JD,_6o),e(S_,b6o),e(y,v6o),e(y,R_),e(R_,hfe),e(hfe,F6o),e(R_,T6o),e(R_,YD),e(YD,M6o),e(R_,E6o),e(y,C6o),e(y,P_),e(P_,ufe),e(ufe,w6o),e(P_,A6o),e(P_,KD),e(KD,L6o),e(P_,y6o),e(y,x6o),e(y,B_),e(B_,pfe),e(pfe,$6o),e(B_,k6o),e(B_,ZD),e(ZD,S6o),e(B_,R6o),e(y,P6o),e(y,I_),e(I_,_fe),e(_fe,B6o),e(I_,I6o),e(I_,eG),e(eG,N6o),e(I_,q6o),e(y,j6o),e(y,N_),e(N_,bfe),e(bfe,D6o),e(N_,G6o),e(N_,oG),e(oG,O6o),e(N_,V6o),e(y,X6o),e(y,q_),e(q_,vfe),e(vfe,z6o),e(q_,Q6o),e(q_,rG),e(rG,W6o),e(q_,H6o),e(y,U6o),e(y,j_),e(j_,Ffe),e(Ffe,J6o),e(j_,Y6o),e(j_,tG),e(tG,K6o),e(j_,Z6o),e(y,e7o),e(y,D_),e(D_,Tfe),e(Tfe,o7o),e(D_,r7o),e(D_,aG),e(aG,t7o),e(D_,a7o),e(y,n7o),e(y,G_),e(G_,Mfe),e(Mfe,s7o),e(G_,l7o),e(G_,nG),e(nG,i7o),e(G_,d7o),e(y,c7o),e(y,O_),e(O_,Efe),e(Efe,m7o),e(O_,f7o),e(O_,sG),e(sG,g7o),e(O_,h7o),e(y,u7o),e(y,V_),e(V_,Cfe),e(Cfe,p7o),e(V_,_7o),e(V_,lG),e(lG,b7o),e(V_,v7o),e(y,F7o),e(y,X_),e(X_,wfe),e(wfe,T7o),e(X_,M7o),e(X_,iG),e(iG,E7o),e(X_,C7o),e(y,w7o),e(y,z_),e(z_,Afe),e(Afe,A7o),e(z_,L7o),e(z_,dG),e(dG,y7o),e(z_,x7o),e(y,$7o),e(y,Q_),e(Q_,Lfe),e(Lfe,k7o),e(Q_,S7o),e(Q_,cG),e(cG,R7o),e(Q_,P7o),e(Ye,B7o),e(Ye,W_),e(W_,I7o),e(W_,yfe),e(yfe,N7o),e(W_,q7o),e(W_,xfe),e(xfe,j7o),e(Ye,D7o),M(H_,Ye,null),b(m,NXe,_),b(m,zi,_),e(zi,U_),e(U_,$fe),M(Gy,$fe,null),e(zi,G7o),e(zi,kfe),e(kfe,O7o),b(m,qXe,_),b(m,So,_),M(Oy,So,null),e(So,V7o),e(So,Qi),e(Qi,X7o),e(Qi,mG),e(mG,z7o),e(Qi,Q7o),e(Qi,fG),e(fG,W7o),e(Qi,H7o),e(So,U7o),e(So,Vy),e(Vy,J7o),e(Vy,Sfe),e(Sfe,Y7o),e(Vy,K7o),e(So,Z7o),e(So,dt),M(Xy,dt,null),e(dt,eLo),e(dt,Rfe),e(Rfe,oLo),e(dt,rLo),e(dt,Wi),e(Wi,tLo),e(Wi,Pfe),e(Pfe,aLo),e(Wi,nLo),e(Wi,gG),e(gG,sLo),e(Wi,lLo),e(dt,iLo),M(J_,dt,null),e(So,dLo),e(So,Ke),M(zy,Ke,null),e(Ke,cLo),e(Ke,Bfe),e(Bfe,mLo),e(Ke,fLo),e(Ke,Na),e(Na,gLo),e(Na,Ife),e(Ife,hLo),e(Na,uLo),e(Na,Nfe),e(Nfe,pLo),e(Na,_Lo),e(Na,qfe),e(qfe,bLo),e(Na,vLo),e(Ke,FLo),e(Ke,G),e(G,Y_),e(Y_,jfe),e(jfe,TLo),e(Y_,MLo),e(Y_,hG),e(hG,ELo),e(Y_,CLo),e(G,wLo),e(G,K_),e(K_,Dfe),e(Dfe,ALo),e(K_,LLo),e(K_,uG),e(uG,yLo),e(K_,xLo),e(G,$Lo),e(G,Z_),e(Z_,Gfe),e(Gfe,kLo),e(Z_,SLo),e(Z_,pG),e(pG,RLo),e(Z_,PLo),e(G,BLo),e(G,e2),e(e2,Ofe),e(Ofe,ILo),e(e2,NLo),e(e2,_G),e(_G,qLo),e(e2,jLo),e(G,DLo),e(G,o2),e(o2,Vfe),e(Vfe,GLo),e(o2,OLo),e(o2,bG),e(bG,VLo),e(o2,XLo),e(G,zLo),e(G,r2),e(r2,Xfe),e(Xfe,QLo),e(r2,WLo),e(r2,vG),e(vG,HLo),e(r2,ULo),e(G,JLo),e(G,t2),e(t2,zfe),e(zfe,YLo),e(t2,KLo),e(t2,FG),e(FG,ZLo),e(t2,eyo),e(G,oyo),e(G,a2),e(a2,Qfe),e(Qfe,ryo),e(a2,tyo),e(a2,TG),e(TG,ayo),e(a2,nyo),e(G,syo),e(G,n2),e(n2,Wfe),e(Wfe,lyo),e(n2,iyo),e(n2,MG),e(MG,dyo),e(n2,cyo),e(G,myo),e(G,s2),e(s2,Hfe),e(Hfe,fyo),e(s2,gyo),e(s2,EG),e(EG,hyo),e(s2,uyo),e(G,pyo),e(G,l2),e(l2,Ufe),e(Ufe,_yo),e(l2,byo),e(l2,CG),e(CG,vyo),e(l2,Fyo),e(G,Tyo),e(G,i2),e(i2,Jfe),e(Jfe,Myo),e(i2,Eyo),e(i2,wG),e(wG,Cyo),e(i2,wyo),e(G,Ayo),e(G,d2),e(d2,Yfe),e(Yfe,Lyo),e(d2,yyo),e(d2,AG),e(AG,xyo),e(d2,$yo),e(G,kyo),e(G,c2),e(c2,Kfe),e(Kfe,Syo),e(c2,Ryo),e(c2,LG),e(LG,Pyo),e(c2,Byo),e(G,Iyo),e(G,m2),e(m2,Zfe),e(Zfe,Nyo),e(m2,qyo),e(m2,yG),e(yG,jyo),e(m2,Dyo),e(G,Gyo),e(G,f2),e(f2,ege),e(ege,Oyo),e(f2,Vyo),e(f2,xG),e(xG,Xyo),e(f2,zyo),e(G,Qyo),e(G,g2),e(g2,oge),e(oge,Wyo),e(g2,Hyo),e(g2,$G),e($G,Uyo),e(g2,Jyo),e(G,Yyo),e(G,h2),e(h2,rge),e(rge,Kyo),e(h2,Zyo),e(h2,kG),e(kG,e8o),e(h2,o8o),e(G,r8o),e(G,u2),e(u2,tge),e(tge,t8o),e(u2,a8o),e(u2,SG),e(SG,n8o),e(u2,s8o),e(G,l8o),e(G,p2),e(p2,age),e(age,i8o),e(p2,d8o),e(p2,RG),e(RG,c8o),e(p2,m8o),e(G,f8o),e(G,_2),e(_2,nge),e(nge,g8o),e(_2,h8o),e(_2,PG),e(PG,u8o),e(_2,p8o),e(G,_8o),e(G,b2),e(b2,sge),e(sge,b8o),e(b2,v8o),e(b2,BG),e(BG,F8o),e(b2,T8o),e(G,M8o),e(G,v2),e(v2,lge),e(lge,E8o),e(v2,C8o),e(v2,IG),e(IG,w8o),e(v2,A8o),e(G,L8o),e(G,F2),e(F2,ige),e(ige,y8o),e(F2,x8o),e(F2,NG),e(NG,$8o),e(F2,k8o),e(G,S8o),e(G,T2),e(T2,dge),e(dge,R8o),e(T2,P8o),e(T2,qG),e(qG,B8o),e(T2,I8o),e(G,N8o),e(G,M2),e(M2,cge),e(cge,q8o),e(M2,j8o),e(M2,jG),e(jG,D8o),e(M2,G8o),e(G,O8o),e(G,E2),e(E2,mge),e(mge,V8o),e(E2,X8o),e(E2,DG),e(DG,z8o),e(E2,Q8o),e(G,W8o),e(G,C2),e(C2,fge),e(fge,H8o),e(C2,U8o),e(C2,GG),e(GG,J8o),e(C2,Y8o),e(G,K8o),e(G,w2),e(w2,gge),e(gge,Z8o),e(w2,e9o),e(w2,OG),e(OG,o9o),e(w2,r9o),e(G,t9o),e(G,A2),e(A2,hge),e(hge,a9o),e(A2,n9o),e(A2,VG),e(VG,s9o),e(A2,l9o),e(G,i9o),e(G,L2),e(L2,uge),e(uge,d9o),e(L2,c9o),e(L2,XG),e(XG,m9o),e(L2,f9o),e(G,g9o),e(G,y2),e(y2,pge),e(pge,h9o),e(y2,u9o),e(y2,zG),e(zG,p9o),e(y2,_9o),e(G,b9o),e(G,x2),e(x2,_ge),e(_ge,v9o),e(x2,F9o),e(x2,QG),e(QG,T9o),e(x2,M9o),e(G,E9o),e(G,$2),e($2,bge),e(bge,C9o),e($2,w9o),e($2,WG),e(WG,A9o),e($2,L9o),e(G,y9o),e(G,k2),e(k2,vge),e(vge,x9o),e(k2,$9o),e(k2,HG),e(HG,k9o),e(k2,S9o),e(G,R9o),e(G,S2),e(S2,Fge),e(Fge,P9o),e(S2,B9o),e(S2,UG),e(UG,I9o),e(S2,N9o),e(G,q9o),e(G,R2),e(R2,Tge),e(Tge,j9o),e(R2,D9o),e(R2,JG),e(JG,G9o),e(R2,O9o),e(G,V9o),e(G,P2),e(P2,Mge),e(Mge,X9o),e(P2,z9o),e(P2,YG),e(YG,Q9o),e(P2,W9o),e(G,H9o),e(G,B2),e(B2,Ege),e(Ege,U9o),e(B2,J9o),e(B2,KG),e(KG,Y9o),e(B2,K9o),e(G,Z9o),e(G,I2),e(I2,Cge),e(Cge,exo),e(I2,oxo),e(I2,ZG),e(ZG,rxo),e(I2,txo),e(G,axo),e(G,N2),e(N2,wge),e(wge,nxo),e(N2,sxo),e(N2,eO),e(eO,lxo),e(N2,ixo),e(G,dxo),e(G,q2),e(q2,Age),e(Age,cxo),e(q2,mxo),e(q2,oO),e(oO,fxo),e(q2,gxo),e(G,hxo),e(G,j2),e(j2,Lge),e(Lge,uxo),e(j2,pxo),e(j2,rO),e(rO,_xo),e(j2,bxo),e(G,vxo),e(G,D2),e(D2,yge),e(yge,Fxo),e(D2,Txo),e(D2,tO),e(tO,Mxo),e(D2,Exo),e(G,Cxo),e(G,G2),e(G2,xge),e(xge,wxo),e(G2,Axo),e(G2,aO),e(aO,Lxo),e(G2,yxo),e(Ke,xxo),e(Ke,O2),e(O2,$xo),e(O2,$ge),e($ge,kxo),e(O2,Sxo),e(O2,kge),e(kge,Rxo),e(Ke,Pxo),M(V2,Ke,null),b(m,jXe,_),b(m,Hi,_),e(Hi,X2),e(X2,Sge),M(Qy,Sge,null),e(Hi,Bxo),e(Hi,Rge),e(Rge,Ixo),b(m,DXe,_),b(m,Ro,_),M(Wy,Ro,null),e(Ro,Nxo),e(Ro,Ui),e(Ui,qxo),e(Ui,nO),e(nO,jxo),e(Ui,Dxo),e(Ui,sO),e(sO,Gxo),e(Ui,Oxo),e(Ro,Vxo),e(Ro,Hy),e(Hy,Xxo),e(Hy,Pge),e(Pge,zxo),e(Hy,Qxo),e(Ro,Wxo),e(Ro,ct),M(Uy,ct,null),e(ct,Hxo),e(ct,Bge),e(Bge,Uxo),e(ct,Jxo),e(ct,Ji),e(Ji,Yxo),e(Ji,Ige),e(Ige,Kxo),e(Ji,Zxo),e(Ji,lO),e(lO,e$o),e(Ji,o$o),e(ct,r$o),M(z2,ct,null),e(Ro,t$o),e(Ro,Ze),M(Jy,Ze,null),e(Ze,a$o),e(Ze,Nge),e(Nge,n$o),e(Ze,s$o),e(Ze,qa),e(qa,l$o),e(qa,qge),e(qge,i$o),e(qa,d$o),e(qa,jge),e(jge,c$o),e(qa,m$o),e(qa,Dge),e(Dge,f$o),e(qa,g$o),e(Ze,h$o),e(Ze,z),e(z,Q2),e(Q2,Gge),e(Gge,u$o),e(Q2,p$o),e(Q2,iO),e(iO,_$o),e(Q2,b$o),e(z,v$o),e(z,W2),e(W2,Oge),e(Oge,F$o),e(W2,T$o),e(W2,dO),e(dO,M$o),e(W2,E$o),e(z,C$o),e(z,H2),e(H2,Vge),e(Vge,w$o),e(H2,A$o),e(H2,cO),e(cO,L$o),e(H2,y$o),e(z,x$o),e(z,U2),e(U2,Xge),e(Xge,$$o),e(U2,k$o),e(U2,mO),e(mO,S$o),e(U2,R$o),e(z,P$o),e(z,J2),e(J2,zge),e(zge,B$o),e(J2,I$o),e(J2,fO),e(fO,N$o),e(J2,q$o),e(z,j$o),e(z,Y2),e(Y2,Qge),e(Qge,D$o),e(Y2,G$o),e(Y2,gO),e(gO,O$o),e(Y2,V$o),e(z,X$o),e(z,K2),e(K2,Wge),e(Wge,z$o),e(K2,Q$o),e(K2,hO),e(hO,W$o),e(K2,H$o),e(z,U$o),e(z,Z2),e(Z2,Hge),e(Hge,J$o),e(Z2,Y$o),e(Z2,uO),e(uO,K$o),e(Z2,Z$o),e(z,eko),e(z,eb),e(eb,Uge),e(Uge,oko),e(eb,rko),e(eb,pO),e(pO,tko),e(eb,ako),e(z,nko),e(z,ob),e(ob,Jge),e(Jge,sko),e(ob,lko),e(ob,_O),e(_O,iko),e(ob,dko),e(z,cko),e(z,rb),e(rb,Yge),e(Yge,mko),e(rb,fko),e(rb,bO),e(bO,gko),e(rb,hko),e(z,uko),e(z,tb),e(tb,Kge),e(Kge,pko),e(tb,_ko),e(tb,vO),e(vO,bko),e(tb,vko),e(z,Fko),e(z,ab),e(ab,Zge),e(Zge,Tko),e(ab,Mko),e(ab,FO),e(FO,Eko),e(ab,Cko),e(z,wko),e(z,nb),e(nb,ehe),e(ehe,Ako),e(nb,Lko),e(nb,TO),e(TO,yko),e(nb,xko),e(z,$ko),e(z,sb),e(sb,ohe),e(ohe,kko),e(sb,Sko),e(sb,MO),e(MO,Rko),e(sb,Pko),e(z,Bko),e(z,lb),e(lb,rhe),e(rhe,Iko),e(lb,Nko),e(lb,EO),e(EO,qko),e(lb,jko),e(z,Dko),e(z,ib),e(ib,the),e(the,Gko),e(ib,Oko),e(ib,CO),e(CO,Vko),e(ib,Xko),e(z,zko),e(z,db),e(db,ahe),e(ahe,Qko),e(db,Wko),e(db,wO),e(wO,Hko),e(db,Uko),e(z,Jko),e(z,cb),e(cb,nhe),e(nhe,Yko),e(cb,Kko),e(cb,AO),e(AO,Zko),e(cb,eSo),e(z,oSo),e(z,mb),e(mb,she),e(she,rSo),e(mb,tSo),e(mb,LO),e(LO,aSo),e(mb,nSo),e(z,sSo),e(z,fb),e(fb,lhe),e(lhe,lSo),e(fb,iSo),e(fb,yO),e(yO,dSo),e(fb,cSo),e(z,mSo),e(z,gb),e(gb,ihe),e(ihe,fSo),e(gb,gSo),e(gb,xO),e(xO,hSo),e(gb,uSo),e(z,pSo),e(z,hb),e(hb,dhe),e(dhe,_So),e(hb,bSo),e(hb,$O),e($O,vSo),e(hb,FSo),e(z,TSo),e(z,ub),e(ub,che),e(che,MSo),e(ub,ESo),e(ub,kO),e(kO,CSo),e(ub,wSo),e(z,ASo),e(z,pb),e(pb,mhe),e(mhe,LSo),e(pb,ySo),e(pb,SO),e(SO,xSo),e(pb,$So),e(z,kSo),e(z,_b),e(_b,fhe),e(fhe,SSo),e(_b,RSo),e(_b,RO),e(RO,PSo),e(_b,BSo),e(z,ISo),e(z,bb),e(bb,ghe),e(ghe,NSo),e(bb,qSo),e(bb,PO),e(PO,jSo),e(bb,DSo),e(z,GSo),e(z,vb),e(vb,hhe),e(hhe,OSo),e(vb,VSo),e(vb,BO),e(BO,XSo),e(vb,zSo),e(z,QSo),e(z,Fb),e(Fb,uhe),e(uhe,WSo),e(Fb,HSo),e(Fb,IO),e(IO,USo),e(Fb,JSo),e(z,YSo),e(z,Tb),e(Tb,phe),e(phe,KSo),e(Tb,ZSo),e(Tb,NO),e(NO,eRo),e(Tb,oRo),e(z,rRo),e(z,Mb),e(Mb,_he),e(_he,tRo),e(Mb,aRo),e(Mb,qO),e(qO,nRo),e(Mb,sRo),e(z,lRo),e(z,Eb),e(Eb,bhe),e(bhe,iRo),e(Eb,dRo),e(Eb,jO),e(jO,cRo),e(Eb,mRo),e(z,fRo),e(z,Cb),e(Cb,vhe),e(vhe,gRo),e(Cb,hRo),e(Cb,DO),e(DO,uRo),e(Cb,pRo),e(z,_Ro),e(z,wb),e(wb,Fhe),e(Fhe,bRo),e(wb,vRo),e(wb,GO),e(GO,FRo),e(wb,TRo),e(z,MRo),e(z,Ab),e(Ab,The),e(The,ERo),e(Ab,CRo),e(Ab,OO),e(OO,wRo),e(Ab,ARo),e(z,LRo),e(z,Lb),e(Lb,Mhe),e(Mhe,yRo),e(Lb,xRo),e(Lb,VO),e(VO,$Ro),e(Lb,kRo),e(z,SRo),e(z,yb),e(yb,Ehe),e(Ehe,RRo),e(yb,PRo),e(yb,XO),e(XO,BRo),e(yb,IRo),e(z,NRo),e(z,xb),e(xb,Che),e(Che,qRo),e(xb,jRo),e(xb,zO),e(zO,DRo),e(xb,GRo),e(z,ORo),e(z,$b),e($b,whe),e(whe,VRo),e($b,XRo),e($b,QO),e(QO,zRo),e($b,QRo),e(z,WRo),e(z,kb),e(kb,Ahe),e(Ahe,HRo),e(kb,URo),e(kb,WO),e(WO,JRo),e(kb,YRo),e(Ze,KRo),e(Ze,Sb),e(Sb,ZRo),e(Sb,Lhe),e(Lhe,ePo),e(Sb,oPo),e(Sb,yhe),e(yhe,rPo),e(Ze,tPo),M(Rb,Ze,null),b(m,GXe,_),b(m,Yi,_),e(Yi,Pb),e(Pb,xhe),M(Yy,xhe,null),e(Yi,aPo),e(Yi,$he),e($he,nPo),b(m,OXe,_),b(m,Po,_),M(Ky,Po,null),e(Po,sPo),e(Po,Ki),e(Ki,lPo),e(Ki,HO),e(HO,iPo),e(Ki,dPo),e(Ki,UO),e(UO,cPo),e(Ki,mPo),e(Po,fPo),e(Po,Zy),e(Zy,gPo),e(Zy,khe),e(khe,hPo),e(Zy,uPo),e(Po,pPo),e(Po,mt),M(e8,mt,null),e(mt,_Po),e(mt,She),e(She,bPo),e(mt,vPo),e(mt,Zi),e(Zi,FPo),e(Zi,Rhe),e(Rhe,TPo),e(Zi,MPo),e(Zi,JO),e(JO,EPo),e(Zi,CPo),e(mt,wPo),M(Bb,mt,null),e(Po,APo),e(Po,eo),M(o8,eo,null),e(eo,LPo),e(eo,Phe),e(Phe,yPo),e(eo,xPo),e(eo,ja),e(ja,$Po),e(ja,Bhe),e(Bhe,kPo),e(ja,SPo),e(ja,Ihe),e(Ihe,RPo),e(ja,PPo),e(ja,Nhe),e(Nhe,BPo),e(ja,IPo),e(eo,NPo),e(eo,W),e(W,Ib),e(Ib,qhe),e(qhe,qPo),e(Ib,jPo),e(Ib,YO),e(YO,DPo),e(Ib,GPo),e(W,OPo),e(W,Nb),e(Nb,jhe),e(jhe,VPo),e(Nb,XPo),e(Nb,KO),e(KO,zPo),e(Nb,QPo),e(W,WPo),e(W,qb),e(qb,Dhe),e(Dhe,HPo),e(qb,UPo),e(qb,ZO),e(ZO,JPo),e(qb,YPo),e(W,KPo),e(W,jb),e(jb,Ghe),e(Ghe,ZPo),e(jb,eBo),e(jb,eV),e(eV,oBo),e(jb,rBo),e(W,tBo),e(W,Db),e(Db,Ohe),e(Ohe,aBo),e(Db,nBo),e(Db,oV),e(oV,sBo),e(Db,lBo),e(W,iBo),e(W,Gb),e(Gb,Vhe),e(Vhe,dBo),e(Gb,cBo),e(Gb,rV),e(rV,mBo),e(Gb,fBo),e(W,gBo),e(W,Ob),e(Ob,Xhe),e(Xhe,hBo),e(Ob,uBo),e(Ob,tV),e(tV,pBo),e(Ob,_Bo),e(W,bBo),e(W,Vb),e(Vb,zhe),e(zhe,vBo),e(Vb,FBo),e(Vb,aV),e(aV,TBo),e(Vb,MBo),e(W,EBo),e(W,Xb),e(Xb,Qhe),e(Qhe,CBo),e(Xb,wBo),e(Xb,nV),e(nV,ABo),e(Xb,LBo),e(W,yBo),e(W,zb),e(zb,Whe),e(Whe,xBo),e(zb,$Bo),e(zb,sV),e(sV,kBo),e(zb,SBo),e(W,RBo),e(W,Qb),e(Qb,Hhe),e(Hhe,PBo),e(Qb,BBo),e(Qb,lV),e(lV,IBo),e(Qb,NBo),e(W,qBo),e(W,Wb),e(Wb,Uhe),e(Uhe,jBo),e(Wb,DBo),e(Wb,iV),e(iV,GBo),e(Wb,OBo),e(W,VBo),e(W,Hb),e(Hb,Jhe),e(Jhe,XBo),e(Hb,zBo),e(Hb,dV),e(dV,QBo),e(Hb,WBo),e(W,HBo),e(W,Ub),e(Ub,Yhe),e(Yhe,UBo),e(Ub,JBo),e(Ub,cV),e(cV,YBo),e(Ub,KBo),e(W,ZBo),e(W,Jb),e(Jb,Khe),e(Khe,eIo),e(Jb,oIo),e(Jb,mV),e(mV,rIo),e(Jb,tIo),e(W,aIo),e(W,Yb),e(Yb,Zhe),e(Zhe,nIo),e(Yb,sIo),e(Yb,fV),e(fV,lIo),e(Yb,iIo),e(W,dIo),e(W,Kb),e(Kb,eue),e(eue,cIo),e(Kb,mIo),e(Kb,gV),e(gV,fIo),e(Kb,gIo),e(W,hIo),e(W,Zb),e(Zb,oue),e(oue,uIo),e(Zb,pIo),e(Zb,hV),e(hV,_Io),e(Zb,bIo),e(W,vIo),e(W,ev),e(ev,rue),e(rue,FIo),e(ev,TIo),e(ev,uV),e(uV,MIo),e(ev,EIo),e(W,CIo),e(W,ov),e(ov,tue),e(tue,wIo),e(ov,AIo),e(ov,pV),e(pV,LIo),e(ov,yIo),e(W,xIo),e(W,rv),e(rv,aue),e(aue,$Io),e(rv,kIo),e(rv,_V),e(_V,SIo),e(rv,RIo),e(W,PIo),e(W,tv),e(tv,nue),e(nue,BIo),e(tv,IIo),e(tv,bV),e(bV,NIo),e(tv,qIo),e(W,jIo),e(W,av),e(av,sue),e(sue,DIo),e(av,GIo),e(av,vV),e(vV,OIo),e(av,VIo),e(W,XIo),e(W,nv),e(nv,lue),e(lue,zIo),e(nv,QIo),e(nv,FV),e(FV,WIo),e(nv,HIo),e(W,UIo),e(W,sv),e(sv,iue),e(iue,JIo),e(sv,YIo),e(sv,TV),e(TV,KIo),e(sv,ZIo),e(W,eNo),e(W,lv),e(lv,due),e(due,oNo),e(lv,rNo),e(lv,MV),e(MV,tNo),e(lv,aNo),e(W,nNo),e(W,iv),e(iv,cue),e(cue,sNo),e(iv,lNo),e(iv,EV),e(EV,iNo),e(iv,dNo),e(W,cNo),e(W,dv),e(dv,mue),e(mue,mNo),e(dv,fNo),e(dv,CV),e(CV,gNo),e(dv,hNo),e(W,uNo),e(W,cv),e(cv,fue),e(fue,pNo),e(cv,_No),e(cv,wV),e(wV,bNo),e(cv,vNo),e(W,FNo),e(W,mv),e(mv,gue),e(gue,TNo),e(mv,MNo),e(mv,AV),e(AV,ENo),e(mv,CNo),e(W,wNo),e(W,fv),e(fv,hue),e(hue,ANo),e(fv,LNo),e(fv,LV),e(LV,yNo),e(fv,xNo),e(W,$No),e(W,gv),e(gv,uue),e(uue,kNo),e(gv,SNo),e(gv,yV),e(yV,RNo),e(gv,PNo),e(W,BNo),e(W,hv),e(hv,pue),e(pue,INo),e(hv,NNo),e(hv,xV),e(xV,qNo),e(hv,jNo),e(W,DNo),e(W,uv),e(uv,_ue),e(_ue,GNo),e(uv,ONo),e(uv,bue),e(bue,VNo),e(uv,XNo),e(W,zNo),e(W,pv),e(pv,vue),e(vue,QNo),e(pv,WNo),e(pv,$V),e($V,HNo),e(pv,UNo),e(W,JNo),e(W,_v),e(_v,Fue),e(Fue,YNo),e(_v,KNo),e(_v,kV),e(kV,ZNo),e(_v,eqo),e(W,oqo),e(W,bv),e(bv,Tue),e(Tue,rqo),e(bv,tqo),e(bv,SV),e(SV,aqo),e(bv,nqo),e(W,sqo),e(W,vv),e(vv,Mue),e(Mue,lqo),e(vv,iqo),e(vv,RV),e(RV,dqo),e(vv,cqo),e(eo,mqo),e(eo,Fv),e(Fv,fqo),e(Fv,Eue),e(Eue,gqo),e(Fv,hqo),e(Fv,Cue),e(Cue,uqo),e(eo,pqo),M(Tv,eo,null),b(m,VXe,_),b(m,ed,_),e(ed,Mv),e(Mv,wue),M(r8,wue,null),e(ed,_qo),e(ed,Aue),e(Aue,bqo),b(m,XXe,_),b(m,Bo,_),M(t8,Bo,null),e(Bo,vqo),e(Bo,od),e(od,Fqo),e(od,PV),e(PV,Tqo),e(od,Mqo),e(od,BV),e(BV,Eqo),e(od,Cqo),e(Bo,wqo),e(Bo,a8),e(a8,Aqo),e(a8,Lue),e(Lue,Lqo),e(a8,yqo),e(Bo,xqo),e(Bo,ft),M(n8,ft,null),e(ft,$qo),e(ft,yue),e(yue,kqo),e(ft,Sqo),e(ft,rd),e(rd,Rqo),e(rd,xue),e(xue,Pqo),e(rd,Bqo),e(rd,IV),e(IV,Iqo),e(rd,Nqo),e(ft,qqo),M(Ev,ft,null),e(Bo,jqo),e(Bo,oo),M(s8,oo,null),e(oo,Dqo),e(oo,$ue),e($ue,Gqo),e(oo,Oqo),e(oo,Da),e(Da,Vqo),e(Da,kue),e(kue,Xqo),e(Da,zqo),e(Da,Sue),e(Sue,Qqo),e(Da,Wqo),e(Da,Rue),e(Rue,Hqo),e(Da,Uqo),e(oo,Jqo),e(oo,me),e(me,Cv),e(Cv,Pue),e(Pue,Yqo),e(Cv,Kqo),e(Cv,NV),e(NV,Zqo),e(Cv,ejo),e(me,ojo),e(me,wv),e(wv,Bue),e(Bue,rjo),e(wv,tjo),e(wv,qV),e(qV,ajo),e(wv,njo),e(me,sjo),e(me,Av),e(Av,Iue),e(Iue,ljo),e(Av,ijo),e(Av,jV),e(jV,djo),e(Av,cjo),e(me,mjo),e(me,Lv),e(Lv,Nue),e(Nue,fjo),e(Lv,gjo),e(Lv,DV),e(DV,hjo),e(Lv,ujo),e(me,pjo),e(me,yv),e(yv,que),e(que,_jo),e(yv,bjo),e(yv,GV),e(GV,vjo),e(yv,Fjo),e(me,Tjo),e(me,xv),e(xv,jue),e(jue,Mjo),e(xv,Ejo),e(xv,OV),e(OV,Cjo),e(xv,wjo),e(me,Ajo),e(me,$v),e($v,Due),e(Due,Ljo),e($v,yjo),e($v,VV),e(VV,xjo),e($v,$jo),e(me,kjo),e(me,kv),e(kv,Gue),e(Gue,Sjo),e(kv,Rjo),e(kv,XV),e(XV,Pjo),e(kv,Bjo),e(me,Ijo),e(me,Sv),e(Sv,Oue),e(Oue,Njo),e(Sv,qjo),e(Sv,zV),e(zV,jjo),e(Sv,Djo),e(me,Gjo),e(me,Rv),e(Rv,Vue),e(Vue,Ojo),e(Rv,Vjo),e(Rv,QV),e(QV,Xjo),e(Rv,zjo),e(me,Qjo),e(me,Pv),e(Pv,Xue),e(Xue,Wjo),e(Pv,Hjo),e(Pv,WV),e(WV,Ujo),e(Pv,Jjo),e(me,Yjo),e(me,Bv),e(Bv,zue),e(zue,Kjo),e(Bv,Zjo),e(Bv,HV),e(HV,eDo),e(Bv,oDo),e(me,rDo),e(me,Iv),e(Iv,Que),e(Que,tDo),e(Iv,aDo),e(Iv,UV),e(UV,nDo),e(Iv,sDo),e(me,lDo),e(me,Nv),e(Nv,Wue),e(Wue,iDo),e(Nv,dDo),e(Nv,JV),e(JV,cDo),e(Nv,mDo),e(me,fDo),e(me,qv),e(qv,Hue),e(Hue,gDo),e(qv,hDo),e(qv,YV),e(YV,uDo),e(qv,pDo),e(me,_Do),e(me,jv),e(jv,Uue),e(Uue,bDo),e(jv,vDo),e(jv,KV),e(KV,FDo),e(jv,TDo),e(me,MDo),e(me,Dv),e(Dv,Jue),e(Jue,EDo),e(Dv,CDo),e(Dv,ZV),e(ZV,wDo),e(Dv,ADo),e(me,LDo),e(me,Gv),e(Gv,Yue),e(Yue,yDo),e(Gv,xDo),e(Gv,eX),e(eX,$Do),e(Gv,kDo),e(me,SDo),e(me,Ov),e(Ov,Kue),e(Kue,RDo),e(Ov,PDo),e(Ov,oX),e(oX,BDo),e(Ov,IDo),e(oo,NDo),e(oo,Vv),e(Vv,qDo),e(Vv,Zue),e(Zue,jDo),e(Vv,DDo),e(Vv,epe),e(epe,GDo),e(oo,ODo),M(Xv,oo,null),b(m,zXe,_),b(m,td,_),e(td,zv),e(zv,ope),M(l8,ope,null),e(td,VDo),e(td,rpe),e(rpe,XDo),b(m,QXe,_),b(m,Io,_),M(i8,Io,null),e(Io,zDo),e(Io,ad),e(ad,QDo),e(ad,rX),e(rX,WDo),e(ad,HDo),e(ad,tX),e(tX,UDo),e(ad,JDo),e(Io,YDo),e(Io,d8),e(d8,KDo),e(d8,tpe),e(tpe,ZDo),e(d8,eGo),e(Io,oGo),e(Io,gt),M(c8,gt,null),e(gt,rGo),e(gt,ape),e(ape,tGo),e(gt,aGo),e(gt,nd),e(nd,nGo),e(nd,npe),e(npe,sGo),e(nd,lGo),e(nd,aX),e(aX,iGo),e(nd,dGo),e(gt,cGo),M(Qv,gt,null),e(Io,mGo),e(Io,ro),M(m8,ro,null),e(ro,fGo),e(ro,spe),e(spe,gGo),e(ro,hGo),e(ro,Ga),e(Ga,uGo),e(Ga,lpe),e(lpe,pGo),e(Ga,_Go),e(Ga,ipe),e(ipe,bGo),e(Ga,vGo),e(Ga,dpe),e(dpe,FGo),e(Ga,TGo),e(ro,MGo),e(ro,B),e(B,Wv),e(Wv,cpe),e(cpe,EGo),e(Wv,CGo),e(Wv,nX),e(nX,wGo),e(Wv,AGo),e(B,LGo),e(B,Hv),e(Hv,mpe),e(mpe,yGo),e(Hv,xGo),e(Hv,sX),e(sX,$Go),e(Hv,kGo),e(B,SGo),e(B,Uv),e(Uv,fpe),e(fpe,RGo),e(Uv,PGo),e(Uv,lX),e(lX,BGo),e(Uv,IGo),e(B,NGo),e(B,Jv),e(Jv,gpe),e(gpe,qGo),e(Jv,jGo),e(Jv,iX),e(iX,DGo),e(Jv,GGo),e(B,OGo),e(B,Yv),e(Yv,hpe),e(hpe,VGo),e(Yv,XGo),e(Yv,dX),e(dX,zGo),e(Yv,QGo),e(B,WGo),e(B,Kv),e(Kv,upe),e(upe,HGo),e(Kv,UGo),e(Kv,cX),e(cX,JGo),e(Kv,YGo),e(B,KGo),e(B,Zv),e(Zv,ppe),e(ppe,ZGo),e(Zv,eOo),e(Zv,mX),e(mX,oOo),e(Zv,rOo),e(B,tOo),e(B,e1),e(e1,_pe),e(_pe,aOo),e(e1,nOo),e(e1,fX),e(fX,sOo),e(e1,lOo),e(B,iOo),e(B,o1),e(o1,bpe),e(bpe,dOo),e(o1,cOo),e(o1,gX),e(gX,mOo),e(o1,fOo),e(B,gOo),e(B,r1),e(r1,vpe),e(vpe,hOo),e(r1,uOo),e(r1,hX),e(hX,pOo),e(r1,_Oo),e(B,bOo),e(B,t1),e(t1,Fpe),e(Fpe,vOo),e(t1,FOo),e(t1,uX),e(uX,TOo),e(t1,MOo),e(B,EOo),e(B,a1),e(a1,Tpe),e(Tpe,COo),e(a1,wOo),e(a1,pX),e(pX,AOo),e(a1,LOo),e(B,yOo),e(B,n1),e(n1,Mpe),e(Mpe,xOo),e(n1,$Oo),e(n1,_X),e(_X,kOo),e(n1,SOo),e(B,ROo),e(B,s1),e(s1,Epe),e(Epe,POo),e(s1,BOo),e(s1,bX),e(bX,IOo),e(s1,NOo),e(B,qOo),e(B,l1),e(l1,Cpe),e(Cpe,jOo),e(l1,DOo),e(l1,vX),e(vX,GOo),e(l1,OOo),e(B,VOo),e(B,i1),e(i1,wpe),e(wpe,XOo),e(i1,zOo),e(i1,FX),e(FX,QOo),e(i1,WOo),e(B,HOo),e(B,d1),e(d1,Ape),e(Ape,UOo),e(d1,JOo),e(d1,TX),e(TX,YOo),e(d1,KOo),e(B,ZOo),e(B,c1),e(c1,Lpe),e(Lpe,eVo),e(c1,oVo),e(c1,MX),e(MX,rVo),e(c1,tVo),e(B,aVo),e(B,m1),e(m1,ype),e(ype,nVo),e(m1,sVo),e(m1,EX),e(EX,lVo),e(m1,iVo),e(B,dVo),e(B,f1),e(f1,xpe),e(xpe,cVo),e(f1,mVo),e(f1,CX),e(CX,fVo),e(f1,gVo),e(B,hVo),e(B,g1),e(g1,$pe),e($pe,uVo),e(g1,pVo),e(g1,wX),e(wX,_Vo),e(g1,bVo),e(B,vVo),e(B,h1),e(h1,kpe),e(kpe,FVo),e(h1,TVo),e(h1,AX),e(AX,MVo),e(h1,EVo),e(B,CVo),e(B,u1),e(u1,Spe),e(Spe,wVo),e(u1,AVo),e(u1,LX),e(LX,LVo),e(u1,yVo),e(B,xVo),e(B,p1),e(p1,Rpe),e(Rpe,$Vo),e(p1,kVo),e(p1,yX),e(yX,SVo),e(p1,RVo),e(B,PVo),e(B,_1),e(_1,Ppe),e(Ppe,BVo),e(_1,IVo),e(_1,xX),e(xX,NVo),e(_1,qVo),e(B,jVo),e(B,b1),e(b1,Bpe),e(Bpe,DVo),e(b1,GVo),e(b1,$X),e($X,OVo),e(b1,VVo),e(B,XVo),e(B,v1),e(v1,Ipe),e(Ipe,zVo),e(v1,QVo),e(v1,kX),e(kX,WVo),e(v1,HVo),e(B,UVo),e(B,F1),e(F1,Npe),e(Npe,JVo),e(F1,YVo),e(F1,SX),e(SX,KVo),e(F1,ZVo),e(B,eXo),e(B,T1),e(T1,qpe),e(qpe,oXo),e(T1,rXo),e(T1,RX),e(RX,tXo),e(T1,aXo),e(B,nXo),e(B,M1),e(M1,jpe),e(jpe,sXo),e(M1,lXo),e(M1,PX),e(PX,iXo),e(M1,dXo),e(B,cXo),e(B,E1),e(E1,Dpe),e(Dpe,mXo),e(E1,fXo),e(E1,BX),e(BX,gXo),e(E1,hXo),e(B,uXo),e(B,C1),e(C1,Gpe),e(Gpe,pXo),e(C1,_Xo),e(C1,IX),e(IX,bXo),e(C1,vXo),e(B,FXo),e(B,w1),e(w1,Ope),e(Ope,TXo),e(w1,MXo),e(w1,NX),e(NX,EXo),e(w1,CXo),e(B,wXo),e(B,A1),e(A1,Vpe),e(Vpe,AXo),e(A1,LXo),e(A1,qX),e(qX,yXo),e(A1,xXo),e(B,$Xo),e(B,L1),e(L1,Xpe),e(Xpe,kXo),e(L1,SXo),e(L1,jX),e(jX,RXo),e(L1,PXo),e(B,BXo),e(B,y1),e(y1,zpe),e(zpe,IXo),e(y1,NXo),e(y1,DX),e(DX,qXo),e(y1,jXo),e(B,DXo),e(B,x1),e(x1,Qpe),e(Qpe,GXo),e(x1,OXo),e(x1,GX),e(GX,VXo),e(x1,XXo),e(B,zXo),e(B,$1),e($1,Wpe),e(Wpe,QXo),e($1,WXo),e($1,OX),e(OX,HXo),e($1,UXo),e(B,JXo),e(B,k1),e(k1,Hpe),e(Hpe,YXo),e(k1,KXo),e(k1,VX),e(VX,ZXo),e(k1,ezo),e(B,ozo),e(B,S1),e(S1,Upe),e(Upe,rzo),e(S1,tzo),e(S1,XX),e(XX,azo),e(S1,nzo),e(B,szo),e(B,R1),e(R1,Jpe),e(Jpe,lzo),e(R1,izo),e(R1,zX),e(zX,dzo),e(R1,czo),e(B,mzo),e(B,P1),e(P1,Ype),e(Ype,fzo),e(P1,gzo),e(P1,QX),e(QX,hzo),e(P1,uzo),e(B,pzo),e(B,B1),e(B1,Kpe),e(Kpe,_zo),e(B1,bzo),e(B1,WX),e(WX,vzo),e(B1,Fzo),e(B,Tzo),e(B,I1),e(I1,Zpe),e(Zpe,Mzo),e(I1,Ezo),e(I1,HX),e(HX,Czo),e(I1,wzo),e(B,Azo),e(B,N1),e(N1,e_e),e(e_e,Lzo),e(N1,yzo),e(N1,UX),e(UX,xzo),e(N1,$zo),e(B,kzo),e(B,q1),e(q1,o_e),e(o_e,Szo),e(q1,Rzo),e(q1,JX),e(JX,Pzo),e(q1,Bzo),e(B,Izo),e(B,j1),e(j1,r_e),e(r_e,Nzo),e(j1,qzo),e(j1,YX),e(YX,jzo),e(j1,Dzo),e(B,Gzo),e(B,D1),e(D1,t_e),e(t_e,Ozo),e(D1,Vzo),e(D1,KX),e(KX,Xzo),e(D1,zzo),e(B,Qzo),e(B,G1),e(G1,a_e),e(a_e,Wzo),e(G1,Hzo),e(G1,ZX),e(ZX,Uzo),e(G1,Jzo),e(B,Yzo),e(B,O1),e(O1,n_e),e(n_e,Kzo),e(O1,Zzo),e(O1,ez),e(ez,eQo),e(O1,oQo),e(B,rQo),e(B,V1),e(V1,s_e),e(s_e,tQo),e(V1,aQo),e(V1,oz),e(oz,nQo),e(V1,sQo),e(ro,lQo),e(ro,X1),e(X1,iQo),e(X1,l_e),e(l_e,dQo),e(X1,cQo),e(X1,i_e),e(i_e,mQo),e(ro,fQo),M(z1,ro,null),b(m,WXe,_),b(m,sd,_),e(sd,Q1),e(Q1,d_e),M(f8,d_e,null),e(sd,gQo),e(sd,c_e),e(c_e,hQo),b(m,HXe,_),b(m,No,_),M(g8,No,null),e(No,uQo),e(No,ld),e(ld,pQo),e(ld,rz),e(rz,_Qo),e(ld,bQo),e(ld,tz),e(tz,vQo),e(ld,FQo),e(No,TQo),e(No,h8),e(h8,MQo),e(h8,m_e),e(m_e,EQo),e(h8,CQo),e(No,wQo),e(No,ht),M(u8,ht,null),e(ht,AQo),e(ht,f_e),e(f_e,LQo),e(ht,yQo),e(ht,id),e(id,xQo),e(id,g_e),e(g_e,$Qo),e(id,kQo),e(id,az),e(az,SQo),e(id,RQo),e(ht,PQo),M(W1,ht,null),e(No,BQo),e(No,to),M(p8,to,null),e(to,IQo),e(to,h_e),e(h_e,NQo),e(to,qQo),e(to,Oa),e(Oa,jQo),e(Oa,u_e),e(u_e,DQo),e(Oa,GQo),e(Oa,p_e),e(p_e,OQo),e(Oa,VQo),e(Oa,__e),e(__e,XQo),e(Oa,zQo),e(to,QQo),e(to,Z),e(Z,H1),e(H1,b_e),e(b_e,WQo),e(H1,HQo),e(H1,nz),e(nz,UQo),e(H1,JQo),e(Z,YQo),e(Z,U1),e(U1,v_e),e(v_e,KQo),e(U1,ZQo),e(U1,sz),e(sz,eWo),e(U1,oWo),e(Z,rWo),e(Z,J1),e(J1,F_e),e(F_e,tWo),e(J1,aWo),e(J1,lz),e(lz,nWo),e(J1,sWo),e(Z,lWo),e(Z,Y1),e(Y1,T_e),e(T_e,iWo),e(Y1,dWo),e(Y1,iz),e(iz,cWo),e(Y1,mWo),e(Z,fWo),e(Z,K1),e(K1,M_e),e(M_e,gWo),e(K1,hWo),e(K1,dz),e(dz,uWo),e(K1,pWo),e(Z,_Wo),e(Z,Z1),e(Z1,E_e),e(E_e,bWo),e(Z1,vWo),e(Z1,cz),e(cz,FWo),e(Z1,TWo),e(Z,MWo),e(Z,eF),e(eF,C_e),e(C_e,EWo),e(eF,CWo),e(eF,mz),e(mz,wWo),e(eF,AWo),e(Z,LWo),e(Z,oF),e(oF,w_e),e(w_e,yWo),e(oF,xWo),e(oF,fz),e(fz,$Wo),e(oF,kWo),e(Z,SWo),e(Z,rF),e(rF,A_e),e(A_e,RWo),e(rF,PWo),e(rF,gz),e(gz,BWo),e(rF,IWo),e(Z,NWo),e(Z,tF),e(tF,L_e),e(L_e,qWo),e(tF,jWo),e(tF,hz),e(hz,DWo),e(tF,GWo),e(Z,OWo),e(Z,aF),e(aF,y_e),e(y_e,VWo),e(aF,XWo),e(aF,uz),e(uz,zWo),e(aF,QWo),e(Z,WWo),e(Z,nF),e(nF,x_e),e(x_e,HWo),e(nF,UWo),e(nF,pz),e(pz,JWo),e(nF,YWo),e(Z,KWo),e(Z,sF),e(sF,$_e),e($_e,ZWo),e(sF,eHo),e(sF,_z),e(_z,oHo),e(sF,rHo),e(Z,tHo),e(Z,lF),e(lF,k_e),e(k_e,aHo),e(lF,nHo),e(lF,bz),e(bz,sHo),e(lF,lHo),e(Z,iHo),e(Z,iF),e(iF,S_e),e(S_e,dHo),e(iF,cHo),e(iF,vz),e(vz,mHo),e(iF,fHo),e(Z,gHo),e(Z,dF),e(dF,R_e),e(R_e,hHo),e(dF,uHo),e(dF,Fz),e(Fz,pHo),e(dF,_Ho),e(Z,bHo),e(Z,cF),e(cF,P_e),e(P_e,vHo),e(cF,FHo),e(cF,Tz),e(Tz,THo),e(cF,MHo),e(Z,EHo),e(Z,mF),e(mF,B_e),e(B_e,CHo),e(mF,wHo),e(mF,Mz),e(Mz,AHo),e(mF,LHo),e(Z,yHo),e(Z,fF),e(fF,I_e),e(I_e,xHo),e(fF,$Ho),e(fF,Ez),e(Ez,kHo),e(fF,SHo),e(Z,RHo),e(Z,gF),e(gF,N_e),e(N_e,PHo),e(gF,BHo),e(gF,Cz),e(Cz,IHo),e(gF,NHo),e(Z,qHo),e(Z,hF),e(hF,q_e),e(q_e,jHo),e(hF,DHo),e(hF,wz),e(wz,GHo),e(hF,OHo),e(Z,VHo),e(Z,uF),e(uF,j_e),e(j_e,XHo),e(uF,zHo),e(uF,Az),e(Az,QHo),e(uF,WHo),e(Z,HHo),e(Z,pF),e(pF,D_e),e(D_e,UHo),e(pF,JHo),e(pF,Lz),e(Lz,YHo),e(pF,KHo),e(Z,ZHo),e(Z,_F),e(_F,G_e),e(G_e,eUo),e(_F,oUo),e(_F,yz),e(yz,rUo),e(_F,tUo),e(Z,aUo),e(Z,bF),e(bF,O_e),e(O_e,nUo),e(bF,sUo),e(bF,xz),e(xz,lUo),e(bF,iUo),e(Z,dUo),e(Z,vF),e(vF,V_e),e(V_e,cUo),e(vF,mUo),e(vF,$z),e($z,fUo),e(vF,gUo),e(Z,hUo),e(Z,FF),e(FF,X_e),e(X_e,uUo),e(FF,pUo),e(FF,kz),e(kz,_Uo),e(FF,bUo),e(Z,vUo),e(Z,TF),e(TF,z_e),e(z_e,FUo),e(TF,TUo),e(TF,Sz),e(Sz,MUo),e(TF,EUo),e(Z,CUo),e(Z,MF),e(MF,Q_e),e(Q_e,wUo),e(MF,AUo),e(MF,Rz),e(Rz,LUo),e(MF,yUo),e(Z,xUo),e(Z,EF),e(EF,W_e),e(W_e,$Uo),e(EF,kUo),e(EF,Pz),e(Pz,SUo),e(EF,RUo),e(to,PUo),e(to,CF),e(CF,BUo),e(CF,H_e),e(H_e,IUo),e(CF,NUo),e(CF,U_e),e(U_e,qUo),e(to,jUo),M(wF,to,null),b(m,UXe,_),b(m,dd,_),e(dd,AF),e(AF,J_e),M(_8,J_e,null),e(dd,DUo),e(dd,Y_e),e(Y_e,GUo),b(m,JXe,_),b(m,qo,_),M(b8,qo,null),e(qo,OUo),e(qo,cd),e(cd,VUo),e(cd,Bz),e(Bz,XUo),e(cd,zUo),e(cd,Iz),e(Iz,QUo),e(cd,WUo),e(qo,HUo),e(qo,v8),e(v8,UUo),e(v8,K_e),e(K_e,JUo),e(v8,YUo),e(qo,KUo),e(qo,ut),M(F8,ut,null),e(ut,ZUo),e(ut,Z_e),e(Z_e,eJo),e(ut,oJo),e(ut,md),e(md,rJo),e(md,e2e),e(e2e,tJo),e(md,aJo),e(md,Nz),e(Nz,nJo),e(md,sJo),e(ut,lJo),M(LF,ut,null),e(qo,iJo),e(qo,ao),M(T8,ao,null),e(ao,dJo),e(ao,o2e),e(o2e,cJo),e(ao,mJo),e(ao,Va),e(Va,fJo),e(Va,r2e),e(r2e,gJo),e(Va,hJo),e(Va,t2e),e(t2e,uJo),e(Va,pJo),e(Va,a2e),e(a2e,_Jo),e(Va,bJo),e(ao,vJo),e(ao,jo),e(jo,yF),e(yF,n2e),e(n2e,FJo),e(yF,TJo),e(yF,qz),e(qz,MJo),e(yF,EJo),e(jo,CJo),e(jo,xF),e(xF,s2e),e(s2e,wJo),e(xF,AJo),e(xF,jz),e(jz,LJo),e(xF,yJo),e(jo,xJo),e(jo,$F),e($F,l2e),e(l2e,$Jo),e($F,kJo),e($F,Dz),e(Dz,SJo),e($F,RJo),e(jo,PJo),e(jo,kF),e(kF,i2e),e(i2e,BJo),e(kF,IJo),e(kF,Gz),e(Gz,NJo),e(kF,qJo),e(jo,jJo),e(jo,SF),e(SF,d2e),e(d2e,DJo),e(SF,GJo),e(SF,Oz),e(Oz,OJo),e(SF,VJo),e(jo,XJo),e(jo,RF),e(RF,c2e),e(c2e,zJo),e(RF,QJo),e(RF,Vz),e(Vz,WJo),e(RF,HJo),e(ao,UJo),e(ao,PF),e(PF,JJo),e(PF,m2e),e(m2e,YJo),e(PF,KJo),e(PF,f2e),e(f2e,ZJo),e(ao,eYo),M(BF,ao,null),b(m,YXe,_),b(m,fd,_),e(fd,IF),e(IF,g2e),M(M8,g2e,null),e(fd,oYo),e(fd,h2e),e(h2e,rYo),b(m,KXe,_),b(m,Do,_),M(E8,Do,null),e(Do,tYo),e(Do,gd),e(gd,aYo),e(gd,Xz),e(Xz,nYo),e(gd,sYo),e(gd,zz),e(zz,lYo),e(gd,iYo),e(Do,dYo),e(Do,C8),e(C8,cYo),e(C8,u2e),e(u2e,mYo),e(C8,fYo),e(Do,gYo),e(Do,pt),M(w8,pt,null),e(pt,hYo),e(pt,p2e),e(p2e,uYo),e(pt,pYo),e(pt,hd),e(hd,_Yo),e(hd,_2e),e(_2e,bYo),e(hd,vYo),e(hd,Qz),e(Qz,FYo),e(hd,TYo),e(pt,MYo),M(NF,pt,null),e(Do,EYo),e(Do,no),M(A8,no,null),e(no,CYo),e(no,b2e),e(b2e,wYo),e(no,AYo),e(no,Xa),e(Xa,LYo),e(Xa,v2e),e(v2e,yYo),e(Xa,xYo),e(Xa,F2e),e(F2e,$Yo),e(Xa,kYo),e(Xa,T2e),e(T2e,SYo),e(Xa,RYo),e(no,PYo),e(no,U),e(U,qF),e(qF,M2e),e(M2e,BYo),e(qF,IYo),e(qF,Wz),e(Wz,NYo),e(qF,qYo),e(U,jYo),e(U,jF),e(jF,E2e),e(E2e,DYo),e(jF,GYo),e(jF,Hz),e(Hz,OYo),e(jF,VYo),e(U,XYo),e(U,DF),e(DF,C2e),e(C2e,zYo),e(DF,QYo),e(DF,Uz),e(Uz,WYo),e(DF,HYo),e(U,UYo),e(U,GF),e(GF,w2e),e(w2e,JYo),e(GF,YYo),e(GF,Jz),e(Jz,KYo),e(GF,ZYo),e(U,eKo),e(U,OF),e(OF,A2e),e(A2e,oKo),e(OF,rKo),e(OF,Yz),e(Yz,tKo),e(OF,aKo),e(U,nKo),e(U,VF),e(VF,L2e),e(L2e,sKo),e(VF,lKo),e(VF,Kz),e(Kz,iKo),e(VF,dKo),e(U,cKo),e(U,XF),e(XF,y2e),e(y2e,mKo),e(XF,fKo),e(XF,Zz),e(Zz,gKo),e(XF,hKo),e(U,uKo),e(U,zF),e(zF,x2e),e(x2e,pKo),e(zF,_Ko),e(zF,eQ),e(eQ,bKo),e(zF,vKo),e(U,FKo),e(U,QF),e(QF,$2e),e($2e,TKo),e(QF,MKo),e(QF,oQ),e(oQ,EKo),e(QF,CKo),e(U,wKo),e(U,WF),e(WF,k2e),e(k2e,AKo),e(WF,LKo),e(WF,rQ),e(rQ,yKo),e(WF,xKo),e(U,$Ko),e(U,HF),e(HF,S2e),e(S2e,kKo),e(HF,SKo),e(HF,tQ),e(tQ,RKo),e(HF,PKo),e(U,BKo),e(U,UF),e(UF,R2e),e(R2e,IKo),e(UF,NKo),e(UF,aQ),e(aQ,qKo),e(UF,jKo),e(U,DKo),e(U,JF),e(JF,P2e),e(P2e,GKo),e(JF,OKo),e(JF,nQ),e(nQ,VKo),e(JF,XKo),e(U,zKo),e(U,YF),e(YF,B2e),e(B2e,QKo),e(YF,WKo),e(YF,sQ),e(sQ,HKo),e(YF,UKo),e(U,JKo),e(U,KF),e(KF,I2e),e(I2e,YKo),e(KF,KKo),e(KF,lQ),e(lQ,ZKo),e(KF,eZo),e(U,oZo),e(U,ZF),e(ZF,N2e),e(N2e,rZo),e(ZF,tZo),e(ZF,iQ),e(iQ,aZo),e(ZF,nZo),e(U,sZo),e(U,eT),e(eT,q2e),e(q2e,lZo),e(eT,iZo),e(eT,dQ),e(dQ,dZo),e(eT,cZo),e(U,mZo),e(U,oT),e(oT,j2e),e(j2e,fZo),e(oT,gZo),e(oT,cQ),e(cQ,hZo),e(oT,uZo),e(U,pZo),e(U,rT),e(rT,D2e),e(D2e,_Zo),e(rT,bZo),e(rT,mQ),e(mQ,vZo),e(rT,FZo),e(U,TZo),e(U,tT),e(tT,G2e),e(G2e,MZo),e(tT,EZo),e(tT,fQ),e(fQ,CZo),e(tT,wZo),e(U,AZo),e(U,aT),e(aT,O2e),e(O2e,LZo),e(aT,yZo),e(aT,gQ),e(gQ,xZo),e(aT,$Zo),e(U,kZo),e(U,nT),e(nT,V2e),e(V2e,SZo),e(nT,RZo),e(nT,hQ),e(hQ,PZo),e(nT,BZo),e(U,IZo),e(U,sT),e(sT,X2e),e(X2e,NZo),e(sT,qZo),e(sT,uQ),e(uQ,jZo),e(sT,DZo),e(U,GZo),e(U,lT),e(lT,z2e),e(z2e,OZo),e(lT,VZo),e(lT,pQ),e(pQ,XZo),e(lT,zZo),e(U,QZo),e(U,iT),e(iT,Q2e),e(Q2e,WZo),e(iT,HZo),e(iT,_Q),e(_Q,UZo),e(iT,JZo),e(U,YZo),e(U,dT),e(dT,W2e),e(W2e,KZo),e(dT,ZZo),e(dT,bQ),e(bQ,eer),e(dT,oer),e(U,rer),e(U,cT),e(cT,H2e),e(H2e,ter),e(cT,aer),e(cT,vQ),e(vQ,ner),e(cT,ser),e(U,ler),e(U,mT),e(mT,U2e),e(U2e,ier),e(mT,der),e(mT,FQ),e(FQ,cer),e(mT,mer),e(U,fer),e(U,fT),e(fT,J2e),e(J2e,ger),e(fT,her),e(fT,TQ),e(TQ,uer),e(fT,per),e(U,_er),e(U,gT),e(gT,Y2e),e(Y2e,ber),e(gT,ver),e(gT,MQ),e(MQ,Fer),e(gT,Ter),e(U,Mer),e(U,hT),e(hT,K2e),e(K2e,Eer),e(hT,Cer),e(hT,EQ),e(EQ,wer),e(hT,Aer),e(U,Ler),e(U,uT),e(uT,Z2e),e(Z2e,yer),e(uT,xer),e(uT,CQ),e(CQ,$er),e(uT,ker),e(U,Ser),e(U,pT),e(pT,ebe),e(ebe,Rer),e(pT,Per),e(pT,wQ),e(wQ,Ber),e(pT,Ier),e(U,Ner),e(U,_T),e(_T,obe),e(obe,qer),e(_T,jer),e(_T,AQ),e(AQ,Der),e(_T,Ger),e(U,Oer),e(U,bT),e(bT,rbe),e(rbe,Ver),e(bT,Xer),e(bT,LQ),e(LQ,zer),e(bT,Qer),e(U,Wer),e(U,vT),e(vT,tbe),e(tbe,Her),e(vT,Uer),e(vT,yQ),e(yQ,Jer),e(vT,Yer),e(no,Ker),e(no,FT),e(FT,Zer),e(FT,abe),e(abe,eor),e(FT,oor),e(FT,nbe),e(nbe,ror),e(no,tor),M(TT,no,null),b(m,ZXe,_),b(m,ud,_),e(ud,MT),e(MT,sbe),M(L8,sbe,null),e(ud,aor),e(ud,lbe),e(lbe,nor),b(m,eze,_),b(m,Go,_),M(y8,Go,null),e(Go,sor),e(Go,pd),e(pd,lor),e(pd,xQ),e(xQ,ior),e(pd,dor),e(pd,$Q),e($Q,cor),e(pd,mor),e(Go,gor),e(Go,x8),e(x8,hor),e(x8,ibe),e(ibe,uor),e(x8,por),e(Go,_or),e(Go,_t),M($8,_t,null),e(_t,bor),e(_t,dbe),e(dbe,vor),e(_t,For),e(_t,_d),e(_d,Tor),e(_d,cbe),e(cbe,Mor),e(_d,Eor),e(_d,kQ),e(kQ,Cor),e(_d,wor),e(_t,Aor),M(ET,_t,null),e(Go,Lor),e(Go,so),M(k8,so,null),e(so,yor),e(so,mbe),e(mbe,xor),e(so,$or),e(so,za),e(za,kor),e(za,fbe),e(fbe,Sor),e(za,Ror),e(za,gbe),e(gbe,Por),e(za,Bor),e(za,hbe),e(hbe,Ior),e(za,Nor),e(so,qor),e(so,V),e(V,CT),e(CT,ube),e(ube,jor),e(CT,Dor),e(CT,SQ),e(SQ,Gor),e(CT,Oor),e(V,Vor),e(V,wT),e(wT,pbe),e(pbe,Xor),e(wT,zor),e(wT,RQ),e(RQ,Qor),e(wT,Wor),e(V,Hor),e(V,AT),e(AT,_be),e(_be,Uor),e(AT,Jor),e(AT,PQ),e(PQ,Yor),e(AT,Kor),e(V,Zor),e(V,LT),e(LT,bbe),e(bbe,err),e(LT,orr),e(LT,BQ),e(BQ,rrr),e(LT,trr),e(V,arr),e(V,yT),e(yT,vbe),e(vbe,nrr),e(yT,srr),e(yT,IQ),e(IQ,lrr),e(yT,irr),e(V,drr),e(V,xT),e(xT,Fbe),e(Fbe,crr),e(xT,mrr),e(xT,NQ),e(NQ,frr),e(xT,grr),e(V,hrr),e(V,$T),e($T,Tbe),e(Tbe,urr),e($T,prr),e($T,qQ),e(qQ,_rr),e($T,brr),e(V,vrr),e(V,kT),e(kT,Mbe),e(Mbe,Frr),e(kT,Trr),e(kT,jQ),e(jQ,Mrr),e(kT,Err),e(V,Crr),e(V,ST),e(ST,Ebe),e(Ebe,wrr),e(ST,Arr),e(ST,DQ),e(DQ,Lrr),e(ST,yrr),e(V,xrr),e(V,RT),e(RT,Cbe),e(Cbe,$rr),e(RT,krr),e(RT,GQ),e(GQ,Srr),e(RT,Rrr),e(V,Prr),e(V,PT),e(PT,wbe),e(wbe,Brr),e(PT,Irr),e(PT,OQ),e(OQ,Nrr),e(PT,qrr),e(V,jrr),e(V,BT),e(BT,Abe),e(Abe,Drr),e(BT,Grr),e(BT,VQ),e(VQ,Orr),e(BT,Vrr),e(V,Xrr),e(V,IT),e(IT,Lbe),e(Lbe,zrr),e(IT,Qrr),e(IT,XQ),e(XQ,Wrr),e(IT,Hrr),e(V,Urr),e(V,NT),e(NT,ybe),e(ybe,Jrr),e(NT,Yrr),e(NT,zQ),e(zQ,Krr),e(NT,Zrr),e(V,etr),e(V,qT),e(qT,xbe),e(xbe,otr),e(qT,rtr),e(qT,QQ),e(QQ,ttr),e(qT,atr),e(V,ntr),e(V,jT),e(jT,$be),e($be,str),e(jT,ltr),e(jT,WQ),e(WQ,itr),e(jT,dtr),e(V,ctr),e(V,DT),e(DT,kbe),e(kbe,mtr),e(DT,ftr),e(DT,HQ),e(HQ,gtr),e(DT,htr),e(V,utr),e(V,GT),e(GT,Sbe),e(Sbe,ptr),e(GT,_tr),e(GT,UQ),e(UQ,btr),e(GT,vtr),e(V,Ftr),e(V,OT),e(OT,Rbe),e(Rbe,Ttr),e(OT,Mtr),e(OT,JQ),e(JQ,Etr),e(OT,Ctr),e(V,wtr),e(V,VT),e(VT,Pbe),e(Pbe,Atr),e(VT,Ltr),e(VT,YQ),e(YQ,ytr),e(VT,xtr),e(V,$tr),e(V,XT),e(XT,Bbe),e(Bbe,ktr),e(XT,Str),e(XT,KQ),e(KQ,Rtr),e(XT,Ptr),e(V,Btr),e(V,zT),e(zT,Ibe),e(Ibe,Itr),e(zT,Ntr),e(zT,ZQ),e(ZQ,qtr),e(zT,jtr),e(V,Dtr),e(V,QT),e(QT,Nbe),e(Nbe,Gtr),e(QT,Otr),e(QT,eW),e(eW,Vtr),e(QT,Xtr),e(V,ztr),e(V,WT),e(WT,qbe),e(qbe,Qtr),e(WT,Wtr),e(WT,oW),e(oW,Htr),e(WT,Utr),e(V,Jtr),e(V,HT),e(HT,jbe),e(jbe,Ytr),e(HT,Ktr),e(HT,rW),e(rW,Ztr),e(HT,ear),e(V,oar),e(V,UT),e(UT,Dbe),e(Dbe,rar),e(UT,tar),e(UT,tW),e(tW,aar),e(UT,nar),e(V,sar),e(V,JT),e(JT,Gbe),e(Gbe,lar),e(JT,iar),e(JT,aW),e(aW,dar),e(JT,car),e(V,mar),e(V,YT),e(YT,Obe),e(Obe,far),e(YT,gar),e(YT,nW),e(nW,har),e(YT,uar),e(V,par),e(V,KT),e(KT,Vbe),e(Vbe,_ar),e(KT,bar),e(KT,sW),e(sW,Far),e(KT,Tar),e(V,Mar),e(V,ZT),e(ZT,Xbe),e(Xbe,Ear),e(ZT,Car),e(ZT,lW),e(lW,war),e(ZT,Aar),e(V,Lar),e(V,eM),e(eM,zbe),e(zbe,yar),e(eM,xar),e(eM,iW),e(iW,$ar),e(eM,kar),e(V,Sar),e(V,oM),e(oM,Qbe),e(Qbe,Rar),e(oM,Par),e(oM,dW),e(dW,Bar),e(oM,Iar),e(V,Nar),e(V,rM),e(rM,Wbe),e(Wbe,qar),e(rM,jar),e(rM,cW),e(cW,Dar),e(rM,Gar),e(V,Oar),e(V,tM),e(tM,Hbe),e(Hbe,Var),e(tM,Xar),e(tM,mW),e(mW,zar),e(tM,Qar),e(V,War),e(V,aM),e(aM,Ube),e(Ube,Har),e(aM,Uar),e(aM,fW),e(fW,Jar),e(aM,Yar),e(V,Kar),e(V,nM),e(nM,Jbe),e(Jbe,Zar),e(nM,enr),e(nM,gW),e(gW,onr),e(nM,rnr),e(V,tnr),e(V,sM),e(sM,Ybe),e(Ybe,anr),e(sM,nnr),e(sM,hW),e(hW,snr),e(sM,lnr),e(V,inr),e(V,lM),e(lM,Kbe),e(Kbe,dnr),e(lM,cnr),e(lM,uW),e(uW,mnr),e(lM,fnr),e(V,gnr),e(V,iM),e(iM,Zbe),e(Zbe,hnr),e(iM,unr),e(iM,pW),e(pW,pnr),e(iM,_nr),e(V,bnr),e(V,dM),e(dM,eve),e(eve,vnr),e(dM,Fnr),e(dM,_W),e(_W,Tnr),e(dM,Mnr),e(V,Enr),e(V,cM),e(cM,ove),e(ove,Cnr),e(cM,wnr),e(cM,bW),e(bW,Anr),e(cM,Lnr),e(V,ynr),e(V,mM),e(mM,rve),e(rve,xnr),e(mM,$nr),e(mM,vW),e(vW,knr),e(mM,Snr),e(so,Rnr),e(so,fM),e(fM,Pnr),e(fM,tve),e(tve,Bnr),e(fM,Inr),e(fM,ave),e(ave,Nnr),e(so,qnr),M(gM,so,null),b(m,oze,_),b(m,bd,_),e(bd,hM),e(hM,nve),M(S8,nve,null),e(bd,jnr),e(bd,sve),e(sve,Dnr),b(m,rze,_),b(m,Oo,_),M(R8,Oo,null),e(Oo,Gnr),e(Oo,vd),e(vd,Onr),e(vd,FW),e(FW,Vnr),e(vd,Xnr),e(vd,TW),e(TW,znr),e(vd,Qnr),e(Oo,Wnr),e(Oo,P8),e(P8,Hnr),e(P8,lve),e(lve,Unr),e(P8,Jnr),e(Oo,Ynr),e(Oo,bt),M(B8,bt,null),e(bt,Knr),e(bt,ive),e(ive,Znr),e(bt,esr),e(bt,Fd),e(Fd,osr),e(Fd,dve),e(dve,rsr),e(Fd,tsr),e(Fd,MW),e(MW,asr),e(Fd,nsr),e(bt,ssr),M(uM,bt,null),e(Oo,lsr),e(Oo,lo),M(I8,lo,null),e(lo,isr),e(lo,cve),e(cve,dsr),e(lo,csr),e(lo,Qa),e(Qa,msr),e(Qa,mve),e(mve,fsr),e(Qa,gsr),e(Qa,fve),e(fve,hsr),e(Qa,usr),e(Qa,gve),e(gve,psr),e(Qa,_sr),e(lo,bsr),e(lo,hve),e(hve,pM),e(pM,uve),e(uve,vsr),e(pM,Fsr),e(pM,EW),e(EW,Tsr),e(pM,Msr),e(lo,Esr),e(lo,_M),e(_M,Csr),e(_M,pve),e(pve,wsr),e(_M,Asr),e(_M,_ve),e(_ve,Lsr),e(lo,ysr),M(bM,lo,null),b(m,tze,_),b(m,Td,_),e(Td,vM),e(vM,bve),M(N8,bve,null),e(Td,xsr),e(Td,vve),e(vve,$sr),b(m,aze,_),b(m,Vo,_),M(q8,Vo,null),e(Vo,ksr),e(Vo,Md),e(Md,Ssr),e(Md,CW),e(CW,Rsr),e(Md,Psr),e(Md,wW),e(wW,Bsr),e(Md,Isr),e(Vo,Nsr),e(Vo,j8),e(j8,qsr),e(j8,Fve),e(Fve,jsr),e(j8,Dsr),e(Vo,Gsr),e(Vo,vt),M(D8,vt,null),e(vt,Osr),e(vt,Tve),e(Tve,Vsr),e(vt,Xsr),e(vt,Ed),e(Ed,zsr),e(Ed,Mve),e(Mve,Qsr),e(Ed,Wsr),e(Ed,AW),e(AW,Hsr),e(Ed,Usr),e(vt,Jsr),M(FM,vt,null),e(Vo,Ysr),e(Vo,io),M(G8,io,null),e(io,Ksr),e(io,Eve),e(Eve,Zsr),e(io,elr),e(io,Wa),e(Wa,olr),e(Wa,Cve),e(Cve,rlr),e(Wa,tlr),e(Wa,wve),e(wve,alr),e(Wa,nlr),e(Wa,Ave),e(Ave,slr),e(Wa,llr),e(io,ilr),e(io,ve),e(ve,TM),e(TM,Lve),e(Lve,dlr),e(TM,clr),e(TM,LW),e(LW,mlr),e(TM,flr),e(ve,glr),e(ve,MM),e(MM,yve),e(yve,hlr),e(MM,ulr),e(MM,yW),e(yW,plr),e(MM,_lr),e(ve,blr),e(ve,EM),e(EM,xve),e(xve,vlr),e(EM,Flr),e(EM,xW),e(xW,Tlr),e(EM,Mlr),e(ve,Elr),e(ve,CM),e(CM,$ve),e($ve,Clr),e(CM,wlr),e(CM,$W),e($W,Alr),e(CM,Llr),e(ve,ylr),e(ve,Us),e(Us,kve),e(kve,xlr),e(Us,$lr),e(Us,kW),e(kW,klr),e(Us,Slr),e(Us,SW),e(SW,Rlr),e(Us,Plr),e(ve,Blr),e(ve,wM),e(wM,Sve),e(Sve,Ilr),e(wM,Nlr),e(wM,RW),e(RW,qlr),e(wM,jlr),e(ve,Dlr),e(ve,Js),e(Js,Rve),e(Rve,Glr),e(Js,Olr),e(Js,PW),e(PW,Vlr),e(Js,Xlr),e(Js,BW),e(BW,zlr),e(Js,Qlr),e(ve,Wlr),e(ve,AM),e(AM,Pve),e(Pve,Hlr),e(AM,Ulr),e(AM,IW),e(IW,Jlr),e(AM,Ylr),e(ve,Klr),e(ve,Ft),e(Ft,Bve),e(Bve,Zlr),e(Ft,eir),e(Ft,NW),e(NW,oir),e(Ft,rir),e(Ft,qW),e(qW,tir),e(Ft,air),e(Ft,jW),e(jW,nir),e(Ft,sir),e(ve,lir),e(ve,LM),e(LM,Ive),e(Ive,iir),e(LM,dir),e(LM,DW),e(DW,cir),e(LM,mir),e(ve,fir),e(ve,yM),e(yM,Nve),e(Nve,gir),e(yM,hir),e(yM,GW),e(GW,uir),e(yM,pir),e(ve,_ir),e(ve,xM),e(xM,qve),e(qve,bir),e(xM,vir),e(xM,OW),e(OW,Fir),e(xM,Tir),e(ve,Mir),e(ve,$M),e($M,jve),e(jve,Eir),e($M,Cir),e($M,VW),e(VW,wir),e($M,Air),e(ve,Lir),e(ve,kM),e(kM,Dve),e(Dve,yir),e(kM,xir),e(kM,XW),e(XW,$ir),e(kM,kir),e(ve,Sir),e(ve,SM),e(SM,Gve),e(Gve,Rir),e(SM,Pir),e(SM,zW),e(zW,Bir),e(SM,Iir),e(ve,Nir),e(ve,RM),e(RM,Ove),e(Ove,qir),e(RM,jir),e(RM,QW),e(QW,Dir),e(RM,Gir),e(io,Oir),e(io,PM),e(PM,Vir),e(PM,Vve),e(Vve,Xir),e(PM,zir),e(PM,Xve),e(Xve,Qir),e(io,Wir),M(BM,io,null),b(m,nze,_),b(m,Cd,_),e(Cd,IM),e(IM,zve),M(O8,zve,null),e(Cd,Hir),e(Cd,Qve),e(Qve,Uir),b(m,sze,_),b(m,Xo,_),M(V8,Xo,null),e(Xo,Jir),e(Xo,wd),e(wd,Yir),e(wd,WW),e(WW,Kir),e(wd,Zir),e(wd,HW),e(HW,edr),e(wd,odr),e(Xo,rdr),e(Xo,X8),e(X8,tdr),e(X8,Wve),e(Wve,adr),e(X8,ndr),e(Xo,sdr),e(Xo,Tt),M(z8,Tt,null),e(Tt,ldr),e(Tt,Hve),e(Hve,idr),e(Tt,ddr),e(Tt,Ad),e(Ad,cdr),e(Ad,Uve),e(Uve,mdr),e(Ad,fdr),e(Ad,UW),e(UW,gdr),e(Ad,hdr),e(Tt,udr),M(NM,Tt,null),e(Xo,pdr),e(Xo,co),M(Q8,co,null),e(co,_dr),e(co,Jve),e(Jve,bdr),e(co,vdr),e(co,Ha),e(Ha,Fdr),e(Ha,Yve),e(Yve,Tdr),e(Ha,Mdr),e(Ha,Kve),e(Kve,Edr),e(Ha,Cdr),e(Ha,Zve),e(Zve,wdr),e(Ha,Adr),e(co,Ldr),e(co,e1e),e(e1e,qM),e(qM,o1e),e(o1e,ydr),e(qM,xdr),e(qM,JW),e(JW,$dr),e(qM,kdr),e(co,Sdr),e(co,jM),e(jM,Rdr),e(jM,r1e),e(r1e,Pdr),e(jM,Bdr),e(jM,t1e),e(t1e,Idr),e(co,Ndr),M(DM,co,null),b(m,lze,_),b(m,Ld,_),e(Ld,GM),e(GM,a1e),M(W8,a1e,null),e(Ld,qdr),e(Ld,n1e),e(n1e,jdr),b(m,ize,_),b(m,zo,_),M(H8,zo,null),e(zo,Ddr),e(zo,yd),e(yd,Gdr),e(yd,YW),e(YW,Odr),e(yd,Vdr),e(yd,KW),e(KW,Xdr),e(yd,zdr),e(zo,Qdr),e(zo,U8),e(U8,Wdr),e(U8,s1e),e(s1e,Hdr),e(U8,Udr),e(zo,Jdr),e(zo,Mt),M(J8,Mt,null),e(Mt,Ydr),e(Mt,l1e),e(l1e,Kdr),e(Mt,Zdr),e(Mt,xd),e(xd,ecr),e(xd,i1e),e(i1e,ocr),e(xd,rcr),e(xd,ZW),e(ZW,tcr),e(xd,acr),e(Mt,ncr),M(OM,Mt,null),e(zo,scr),e(zo,mo),M(Y8,mo,null),e(mo,lcr),e(mo,d1e),e(d1e,icr),e(mo,dcr),e(mo,Ua),e(Ua,ccr),e(Ua,c1e),e(c1e,mcr),e(Ua,fcr),e(Ua,m1e),e(m1e,gcr),e(Ua,hcr),e(Ua,f1e),e(f1e,ucr),e(Ua,pcr),e(mo,_cr),e(mo,g1e),e(g1e,VM),e(VM,h1e),e(h1e,bcr),e(VM,vcr),e(VM,eH),e(eH,Fcr),e(VM,Tcr),e(mo,Mcr),e(mo,XM),e(XM,Ecr),e(XM,u1e),e(u1e,Ccr),e(XM,wcr),e(XM,p1e),e(p1e,Acr),e(mo,Lcr),M(zM,mo,null),b(m,dze,_),b(m,$d,_),e($d,QM),e(QM,_1e),M(K8,_1e,null),e($d,ycr),e($d,b1e),e(b1e,xcr),b(m,cze,_),b(m,Qo,_),M(Z8,Qo,null),e(Qo,$cr),e(Qo,kd),e(kd,kcr),e(kd,oH),e(oH,Scr),e(kd,Rcr),e(kd,rH),e(rH,Pcr),e(kd,Bcr),e(Qo,Icr),e(Qo,e9),e(e9,Ncr),e(e9,v1e),e(v1e,qcr),e(e9,jcr),e(Qo,Dcr),e(Qo,Et),M(o9,Et,null),e(Et,Gcr),e(Et,F1e),e(F1e,Ocr),e(Et,Vcr),e(Et,Sd),e(Sd,Xcr),e(Sd,T1e),e(T1e,zcr),e(Sd,Qcr),e(Sd,tH),e(tH,Wcr),e(Sd,Hcr),e(Et,Ucr),M(WM,Et,null),e(Qo,Jcr),e(Qo,fo),M(r9,fo,null),e(fo,Ycr),e(fo,M1e),e(M1e,Kcr),e(fo,Zcr),e(fo,Ja),e(Ja,emr),e(Ja,E1e),e(E1e,omr),e(Ja,rmr),e(Ja,C1e),e(C1e,tmr),e(Ja,amr),e(Ja,w1e),e(w1e,nmr),e(Ja,smr),e(fo,lmr),e(fo,Pe),e(Pe,HM),e(HM,A1e),e(A1e,imr),e(HM,dmr),e(HM,aH),e(aH,cmr),e(HM,mmr),e(Pe,fmr),e(Pe,UM),e(UM,L1e),e(L1e,gmr),e(UM,hmr),e(UM,nH),e(nH,umr),e(UM,pmr),e(Pe,_mr),e(Pe,JM),e(JM,y1e),e(y1e,bmr),e(JM,vmr),e(JM,sH),e(sH,Fmr),e(JM,Tmr),e(Pe,Mmr),e(Pe,YM),e(YM,x1e),e(x1e,Emr),e(YM,Cmr),e(YM,lH),e(lH,wmr),e(YM,Amr),e(Pe,Lmr),e(Pe,KM),e(KM,$1e),e($1e,ymr),e(KM,xmr),e(KM,iH),e(iH,$mr),e(KM,kmr),e(Pe,Smr),e(Pe,ZM),e(ZM,k1e),e(k1e,Rmr),e(ZM,Pmr),e(ZM,dH),e(dH,Bmr),e(ZM,Imr),e(Pe,Nmr),e(Pe,e4),e(e4,S1e),e(S1e,qmr),e(e4,jmr),e(e4,cH),e(cH,Dmr),e(e4,Gmr),e(Pe,Omr),e(Pe,o4),e(o4,R1e),e(R1e,Vmr),e(o4,Xmr),e(o4,mH),e(mH,zmr),e(o4,Qmr),e(Pe,Wmr),e(Pe,r4),e(r4,P1e),e(P1e,Hmr),e(r4,Umr),e(r4,fH),e(fH,Jmr),e(r4,Ymr),e(fo,Kmr),e(fo,t4),e(t4,Zmr),e(t4,B1e),e(B1e,efr),e(t4,ofr),e(t4,I1e),e(I1e,rfr),e(fo,tfr),M(a4,fo,null),b(m,mze,_),b(m,Rd,_),e(Rd,n4),e(n4,N1e),M(t9,N1e,null),e(Rd,afr),e(Rd,q1e),e(q1e,nfr),b(m,fze,_),b(m,Wo,_),M(a9,Wo,null),e(Wo,sfr),e(Wo,Pd),e(Pd,lfr),e(Pd,gH),e(gH,ifr),e(Pd,dfr),e(Pd,hH),e(hH,cfr),e(Pd,mfr),e(Wo,ffr),e(Wo,n9),e(n9,gfr),e(n9,j1e),e(j1e,hfr),e(n9,ufr),e(Wo,pfr),e(Wo,Ct),M(s9,Ct,null),e(Ct,_fr),e(Ct,D1e),e(D1e,bfr),e(Ct,vfr),e(Ct,Bd),e(Bd,Ffr),e(Bd,G1e),e(G1e,Tfr),e(Bd,Mfr),e(Bd,uH),e(uH,Efr),e(Bd,Cfr),e(Ct,wfr),M(s4,Ct,null),e(Wo,Afr),e(Wo,go),M(l9,go,null),e(go,Lfr),e(go,O1e),e(O1e,yfr),e(go,xfr),e(go,Ya),e(Ya,$fr),e(Ya,V1e),e(V1e,kfr),e(Ya,Sfr),e(Ya,X1e),e(X1e,Rfr),e(Ya,Pfr),e(Ya,z1e),e(z1e,Bfr),e(Ya,Ifr),e(go,Nfr),e(go,rt),e(rt,l4),e(l4,Q1e),e(Q1e,qfr),e(l4,jfr),e(l4,pH),e(pH,Dfr),e(l4,Gfr),e(rt,Ofr),e(rt,i4),e(i4,W1e),e(W1e,Vfr),e(i4,Xfr),e(i4,_H),e(_H,zfr),e(i4,Qfr),e(rt,Wfr),e(rt,d4),e(d4,H1e),e(H1e,Hfr),e(d4,Ufr),e(d4,bH),e(bH,Jfr),e(d4,Yfr),e(rt,Kfr),e(rt,c4),e(c4,U1e),e(U1e,Zfr),e(c4,egr),e(c4,vH),e(vH,ogr),e(c4,rgr),e(rt,tgr),e(rt,m4),e(m4,J1e),e(J1e,agr),e(m4,ngr),e(m4,FH),e(FH,sgr),e(m4,lgr),e(go,igr),e(go,f4),e(f4,dgr),e(f4,Y1e),e(Y1e,cgr),e(f4,mgr),e(f4,K1e),e(K1e,fgr),e(go,ggr),M(g4,go,null),b(m,gze,_),b(m,Id,_),e(Id,h4),e(h4,Z1e),M(i9,Z1e,null),e(Id,hgr),e(Id,eFe),e(eFe,ugr),b(m,hze,_),b(m,Ho,_),M(d9,Ho,null),e(Ho,pgr),e(Ho,Nd),e(Nd,_gr),e(Nd,TH),e(TH,bgr),e(Nd,vgr),e(Nd,MH),e(MH,Fgr),e(Nd,Tgr),e(Ho,Mgr),e(Ho,c9),e(c9,Egr),e(c9,oFe),e(oFe,Cgr),e(c9,wgr),e(Ho,Agr),e(Ho,wt),M(m9,wt,null),e(wt,Lgr),e(wt,rFe),e(rFe,ygr),e(wt,xgr),e(wt,qd),e(qd,$gr),e(qd,tFe),e(tFe,kgr),e(qd,Sgr),e(qd,EH),e(EH,Rgr),e(qd,Pgr),e(wt,Bgr),M(u4,wt,null),e(Ho,Igr),e(Ho,ho),M(f9,ho,null),e(ho,Ngr),e(ho,aFe),e(aFe,qgr),e(ho,jgr),e(ho,Ka),e(Ka,Dgr),e(Ka,nFe),e(nFe,Ggr),e(Ka,Ogr),e(Ka,sFe),e(sFe,Vgr),e(Ka,Xgr),e(Ka,lFe),e(lFe,zgr),e(Ka,Qgr),e(ho,Wgr),e(ho,Le),e(Le,p4),e(p4,iFe),e(iFe,Hgr),e(p4,Ugr),e(p4,CH),e(CH,Jgr),e(p4,Ygr),e(Le,Kgr),e(Le,_4),e(_4,dFe),e(dFe,Zgr),e(_4,ehr),e(_4,wH),e(wH,ohr),e(_4,rhr),e(Le,thr),e(Le,b4),e(b4,cFe),e(cFe,ahr),e(b4,nhr),e(b4,AH),e(AH,shr),e(b4,lhr),e(Le,ihr),e(Le,v4),e(v4,mFe),e(mFe,dhr),e(v4,chr),e(v4,LH),e(LH,mhr),e(v4,fhr),e(Le,ghr),e(Le,F4),e(F4,fFe),e(fFe,hhr),e(F4,uhr),e(F4,yH),e(yH,phr),e(F4,_hr),e(Le,bhr),e(Le,T4),e(T4,gFe),e(gFe,vhr),e(T4,Fhr),e(T4,xH),e(xH,Thr),e(T4,Mhr),e(Le,Ehr),e(Le,M4),e(M4,hFe),e(hFe,Chr),e(M4,whr),e(M4,$H),e($H,Ahr),e(M4,Lhr),e(Le,yhr),e(Le,E4),e(E4,uFe),e(uFe,xhr),e(E4,$hr),e(E4,kH),e(kH,khr),e(E4,Shr),e(Le,Rhr),e(Le,C4),e(C4,pFe),e(pFe,Phr),e(C4,Bhr),e(C4,SH),e(SH,Ihr),e(C4,Nhr),e(Le,qhr),e(Le,w4),e(w4,_Fe),e(_Fe,jhr),e(w4,Dhr),e(w4,RH),e(RH,Ghr),e(w4,Ohr),e(ho,Vhr),e(ho,A4),e(A4,Xhr),e(A4,bFe),e(bFe,zhr),e(A4,Qhr),e(A4,vFe),e(vFe,Whr),e(ho,Hhr),M(L4,ho,null),b(m,uze,_),b(m,jd,_),e(jd,y4),e(y4,FFe),M(g9,FFe,null),e(jd,Uhr),e(jd,TFe),e(TFe,Jhr),b(m,pze,_),b(m,Uo,_),M(h9,Uo,null),e(Uo,Yhr),e(Uo,Dd),e(Dd,Khr),e(Dd,PH),e(PH,Zhr),e(Dd,eur),e(Dd,BH),e(BH,our),e(Dd,rur),e(Uo,tur),e(Uo,u9),e(u9,aur),e(u9,MFe),e(MFe,nur),e(u9,sur),e(Uo,lur),e(Uo,At),M(p9,At,null),e(At,iur),e(At,EFe),e(EFe,dur),e(At,cur),e(At,Gd),e(Gd,mur),e(Gd,CFe),e(CFe,fur),e(Gd,gur),e(Gd,IH),e(IH,hur),e(Gd,uur),e(At,pur),M(x4,At,null),e(Uo,_ur),e(Uo,uo),M(_9,uo,null),e(uo,bur),e(uo,wFe),e(wFe,vur),e(uo,Fur),e(uo,Za),e(Za,Tur),e(Za,AFe),e(AFe,Mur),e(Za,Eur),e(Za,LFe),e(LFe,Cur),e(Za,wur),e(Za,yFe),e(yFe,Aur),e(Za,Lur),e(uo,yur),e(uo,b9),e(b9,$4),e($4,xFe),e(xFe,xur),e($4,$ur),e($4,NH),e(NH,kur),e($4,Sur),e(b9,Rur),e(b9,k4),e(k4,$Fe),e($Fe,Pur),e(k4,Bur),e(k4,qH),e(qH,Iur),e(k4,Nur),e(uo,qur),e(uo,S4),e(S4,jur),e(S4,kFe),e(kFe,Dur),e(S4,Gur),e(S4,SFe),e(SFe,Our),e(uo,Vur),M(R4,uo,null),b(m,_ze,_),b(m,Od,_),e(Od,P4),e(P4,RFe),M(v9,RFe,null),e(Od,Xur),e(Od,PFe),e(PFe,zur),b(m,bze,_),b(m,Jo,_),M(F9,Jo,null),e(Jo,Qur),e(Jo,Vd),e(Vd,Wur),e(Vd,jH),e(jH,Hur),e(Vd,Uur),e(Vd,DH),e(DH,Jur),e(Vd,Yur),e(Jo,Kur),e(Jo,T9),e(T9,Zur),e(T9,BFe),e(BFe,epr),e(T9,opr),e(Jo,rpr),e(Jo,Lt),M(M9,Lt,null),e(Lt,tpr),e(Lt,IFe),e(IFe,apr),e(Lt,npr),e(Lt,Xd),e(Xd,spr),e(Xd,NFe),e(NFe,lpr),e(Xd,ipr),e(Xd,GH),e(GH,dpr),e(Xd,cpr),e(Lt,mpr),M(B4,Lt,null),e(Jo,fpr),e(Jo,po),M(E9,po,null),e(po,gpr),e(po,qFe),e(qFe,hpr),e(po,upr),e(po,en),e(en,ppr),e(en,jFe),e(jFe,_pr),e(en,bpr),e(en,DFe),e(DFe,vpr),e(en,Fpr),e(en,GFe),e(GFe,Tpr),e(en,Mpr),e(po,Epr),e(po,tt),e(tt,I4),e(I4,OFe),e(OFe,Cpr),e(I4,wpr),e(I4,OH),e(OH,Apr),e(I4,Lpr),e(tt,ypr),e(tt,N4),e(N4,VFe),e(VFe,xpr),e(N4,$pr),e(N4,VH),e(VH,kpr),e(N4,Spr),e(tt,Rpr),e(tt,q4),e(q4,XFe),e(XFe,Ppr),e(q4,Bpr),e(q4,XH),e(XH,Ipr),e(q4,Npr),e(tt,qpr),e(tt,j4),e(j4,zFe),e(zFe,jpr),e(j4,Dpr),e(j4,zH),e(zH,Gpr),e(j4,Opr),e(tt,Vpr),e(tt,D4),e(D4,QFe),e(QFe,Xpr),e(D4,zpr),e(D4,QH),e(QH,Qpr),e(D4,Wpr),e(po,Hpr),e(po,G4),e(G4,Upr),e(G4,WFe),e(WFe,Jpr),e(G4,Ypr),e(G4,HFe),e(HFe,Kpr),e(po,Zpr),M(O4,po,null),b(m,vze,_),b(m,zd,_),e(zd,V4),e(V4,UFe),M(C9,UFe,null),e(zd,e_r),e(zd,JFe),e(JFe,o_r),b(m,Fze,_),b(m,Yo,_),M(w9,Yo,null),e(Yo,r_r),e(Yo,Qd),e(Qd,t_r),e(Qd,WH),e(WH,a_r),e(Qd,n_r),e(Qd,HH),e(HH,s_r),e(Qd,l_r),e(Yo,i_r),e(Yo,A9),e(A9,d_r),e(A9,YFe),e(YFe,c_r),e(A9,m_r),e(Yo,f_r),e(Yo,yt),M(L9,yt,null),e(yt,g_r),e(yt,KFe),e(KFe,h_r),e(yt,u_r),e(yt,Wd),e(Wd,p_r),e(Wd,ZFe),e(ZFe,__r),e(Wd,b_r),e(Wd,UH),e(UH,v_r),e(Wd,F_r),e(yt,T_r),M(X4,yt,null),e(Yo,M_r),e(Yo,_o),M(y9,_o,null),e(_o,E_r),e(_o,eTe),e(eTe,C_r),e(_o,w_r),e(_o,on),e(on,A_r),e(on,oTe),e(oTe,L_r),e(on,y_r),e(on,rTe),e(rTe,x_r),e(on,$_r),e(on,tTe),e(tTe,k_r),e(on,S_r),e(_o,R_r),e(_o,Hd),e(Hd,z4),e(z4,aTe),e(aTe,P_r),e(z4,B_r),e(z4,JH),e(JH,I_r),e(z4,N_r),e(Hd,q_r),e(Hd,Q4),e(Q4,nTe),e(nTe,j_r),e(Q4,D_r),e(Q4,YH),e(YH,G_r),e(Q4,O_r),e(Hd,V_r),e(Hd,W4),e(W4,sTe),e(sTe,X_r),e(W4,z_r),e(W4,KH),e(KH,Q_r),e(W4,W_r),e(_o,H_r),e(_o,H4),e(H4,U_r),e(H4,lTe),e(lTe,J_r),e(H4,Y_r),e(H4,iTe),e(iTe,K_r),e(_o,Z_r),M(U4,_o,null),b(m,Tze,_),b(m,Ud,_),e(Ud,J4),e(J4,dTe),M(x9,dTe,null),e(Ud,e2r),e(Ud,cTe),e(cTe,o2r),b(m,Mze,_),b(m,Ko,_),M($9,Ko,null),e(Ko,r2r),e(Ko,Jd),e(Jd,t2r),e(Jd,ZH),e(ZH,a2r),e(Jd,n2r),e(Jd,eU),e(eU,s2r),e(Jd,l2r),e(Ko,i2r),e(Ko,k9),e(k9,d2r),e(k9,mTe),e(mTe,c2r),e(k9,m2r),e(Ko,f2r),e(Ko,xt),M(S9,xt,null),e(xt,g2r),e(xt,fTe),e(fTe,h2r),e(xt,u2r),e(xt,Yd),e(Yd,p2r),e(Yd,gTe),e(gTe,_2r),e(Yd,b2r),e(Yd,oU),e(oU,v2r),e(Yd,F2r),e(xt,T2r),M(Y4,xt,null),e(Ko,M2r),e(Ko,bo),M(R9,bo,null),e(bo,E2r),e(bo,hTe),e(hTe,C2r),e(bo,w2r),e(bo,rn),e(rn,A2r),e(rn,uTe),e(uTe,L2r),e(rn,y2r),e(rn,pTe),e(pTe,x2r),e(rn,$2r),e(rn,_Te),e(_Te,k2r),e(rn,S2r),e(bo,R2r),e(bo,P9),e(P9,K4),e(K4,bTe),e(bTe,P2r),e(K4,B2r),e(K4,rU),e(rU,I2r),e(K4,N2r),e(P9,q2r),e(P9,Z4),e(Z4,vTe),e(vTe,j2r),e(Z4,D2r),e(Z4,tU),e(tU,G2r),e(Z4,O2r),e(bo,V2r),e(bo,eE),e(eE,X2r),e(eE,FTe),e(FTe,z2r),e(eE,Q2r),e(eE,TTe),e(TTe,W2r),e(bo,H2r),M(oE,bo,null),b(m,Eze,_),b(m,Kd,_),e(Kd,rE),e(rE,MTe),M(B9,MTe,null),e(Kd,U2r),e(Kd,ETe),e(ETe,J2r),b(m,Cze,_),b(m,Zo,_),M(I9,Zo,null),e(Zo,Y2r),e(Zo,Zd),e(Zd,K2r),e(Zd,aU),e(aU,Z2r),e(Zd,ebr),e(Zd,nU),e(nU,obr),e(Zd,rbr),e(Zo,tbr),e(Zo,N9),e(N9,abr),e(N9,CTe),e(CTe,nbr),e(N9,sbr),e(Zo,lbr),e(Zo,$t),M(q9,$t,null),e($t,ibr),e($t,wTe),e(wTe,dbr),e($t,cbr),e($t,ec),e(ec,mbr),e(ec,ATe),e(ATe,fbr),e(ec,gbr),e(ec,sU),e(sU,hbr),e(ec,ubr),e($t,pbr),M(tE,$t,null),e(Zo,_br),e(Zo,vo),M(j9,vo,null),e(vo,bbr),e(vo,LTe),e(LTe,vbr),e(vo,Fbr),e(vo,tn),e(tn,Tbr),e(tn,yTe),e(yTe,Mbr),e(tn,Ebr),e(tn,xTe),e(xTe,Cbr),e(tn,wbr),e(tn,$Te),e($Te,Abr),e(tn,Lbr),e(vo,ybr),e(vo,kTe),e(kTe,aE),e(aE,STe),e(STe,xbr),e(aE,$br),e(aE,lU),e(lU,kbr),e(aE,Sbr),e(vo,Rbr),e(vo,nE),e(nE,Pbr),e(nE,RTe),e(RTe,Bbr),e(nE,Ibr),e(nE,PTe),e(PTe,Nbr),e(vo,qbr),M(sE,vo,null),b(m,wze,_),b(m,oc,_),e(oc,lE),e(lE,BTe),M(D9,BTe,null),e(oc,jbr),e(oc,ITe),e(ITe,Dbr),b(m,Aze,_),b(m,er,_),M(G9,er,null),e(er,Gbr),e(er,rc),e(rc,Obr),e(rc,iU),e(iU,Vbr),e(rc,Xbr),e(rc,dU),e(dU,zbr),e(rc,Qbr),e(er,Wbr),e(er,O9),e(O9,Hbr),e(O9,NTe),e(NTe,Ubr),e(O9,Jbr),e(er,Ybr),e(er,kt),M(V9,kt,null),e(kt,Kbr),e(kt,qTe),e(qTe,Zbr),e(kt,evr),e(kt,tc),e(tc,ovr),e(tc,jTe),e(jTe,rvr),e(tc,tvr),e(tc,cU),e(cU,avr),e(tc,nvr),e(kt,svr),M(iE,kt,null),e(er,lvr),e(er,Fo),M(X9,Fo,null),e(Fo,ivr),e(Fo,DTe),e(DTe,dvr),e(Fo,cvr),e(Fo,an),e(an,mvr),e(an,GTe),e(GTe,fvr),e(an,gvr),e(an,OTe),e(OTe,hvr),e(an,uvr),e(an,VTe),e(VTe,pvr),e(an,_vr),e(Fo,bvr),e(Fo,at),e(at,dE),e(dE,XTe),e(XTe,vvr),e(dE,Fvr),e(dE,mU),e(mU,Tvr),e(dE,Mvr),e(at,Evr),e(at,cE),e(cE,zTe),e(zTe,Cvr),e(cE,wvr),e(cE,fU),e(fU,Avr),e(cE,Lvr),e(at,yvr),e(at,mE),e(mE,QTe),e(QTe,xvr),e(mE,$vr),e(mE,gU),e(gU,kvr),e(mE,Svr),e(at,Rvr),e(at,fE),e(fE,WTe),e(WTe,Pvr),e(fE,Bvr),e(fE,hU),e(hU,Ivr),e(fE,Nvr),e(at,qvr),e(at,gE),e(gE,HTe),e(HTe,jvr),e(gE,Dvr),e(gE,uU),e(uU,Gvr),e(gE,Ovr),e(Fo,Vvr),e(Fo,hE),e(hE,Xvr),e(hE,UTe),e(UTe,zvr),e(hE,Qvr),e(hE,JTe),e(JTe,Wvr),e(Fo,Hvr),M(uE,Fo,null),b(m,Lze,_),b(m,ac,_),e(ac,pE),e(pE,YTe),M(z9,YTe,null),e(ac,Uvr),e(ac,KTe),e(KTe,Jvr),b(m,yze,_),b(m,or,_),M(Q9,or,null),e(or,Yvr),e(or,nc),e(nc,Kvr),e(nc,pU),e(pU,Zvr),e(nc,e1r),e(nc,_U),e(_U,o1r),e(nc,r1r),e(or,t1r),e(or,W9),e(W9,a1r),e(W9,ZTe),e(ZTe,n1r),e(W9,s1r),e(or,l1r),e(or,St),M(H9,St,null),e(St,i1r),e(St,eMe),e(eMe,d1r),e(St,c1r),e(St,sc),e(sc,m1r),e(sc,oMe),e(oMe,f1r),e(sc,g1r),e(sc,bU),e(bU,h1r),e(sc,u1r),e(St,p1r),M(_E,St,null),e(or,_1r),e(or,To),M(U9,To,null),e(To,b1r),e(To,rMe),e(rMe,v1r),e(To,F1r),e(To,nn),e(nn,T1r),e(nn,tMe),e(tMe,M1r),e(nn,E1r),e(nn,aMe),e(aMe,C1r),e(nn,w1r),e(nn,nMe),e(nMe,A1r),e(nn,L1r),e(To,y1r),e(To,sMe),e(sMe,bE),e(bE,lMe),e(lMe,x1r),e(bE,$1r),e(bE,vU),e(vU,k1r),e(bE,S1r),e(To,R1r),e(To,vE),e(vE,P1r),e(vE,iMe),e(iMe,B1r),e(vE,I1r),e(vE,dMe),e(dMe,N1r),e(To,q1r),M(FE,To,null),b(m,xze,_),b(m,lc,_),e(lc,TE),e(TE,cMe),M(J9,cMe,null),e(lc,j1r),e(lc,mMe),e(mMe,D1r),b(m,$ze,_),b(m,rr,_),M(Y9,rr,null),e(rr,G1r),e(rr,ic),e(ic,O1r),e(ic,FU),e(FU,V1r),e(ic,X1r),e(ic,TU),e(TU,z1r),e(ic,Q1r),e(rr,W1r),e(rr,K9),e(K9,H1r),e(K9,fMe),e(fMe,U1r),e(K9,J1r),e(rr,Y1r),e(rr,Rt),M(Z9,Rt,null),e(Rt,K1r),e(Rt,gMe),e(gMe,Z1r),e(Rt,eFr),e(Rt,dc),e(dc,oFr),e(dc,hMe),e(hMe,rFr),e(dc,tFr),e(dc,MU),e(MU,aFr),e(dc,nFr),e(Rt,sFr),M(ME,Rt,null),e(rr,lFr),e(rr,$r),M(ex,$r,null),e($r,iFr),e($r,uMe),e(uMe,dFr),e($r,cFr),e($r,sn),e(sn,mFr),e(sn,pMe),e(pMe,fFr),e(sn,gFr),e(sn,_Me),e(_Me,hFr),e(sn,uFr),e(sn,bMe),e(bMe,pFr),e(sn,_Fr),e($r,bFr),e($r,I),e(I,EE),e(EE,vMe),e(vMe,vFr),e(EE,FFr),e(EE,EU),e(EU,TFr),e(EE,MFr),e(I,EFr),e(I,CE),e(CE,FMe),e(FMe,CFr),e(CE,wFr),e(CE,CU),e(CU,AFr),e(CE,LFr),e(I,yFr),e(I,wE),e(wE,TMe),e(TMe,xFr),e(wE,$Fr),e(wE,wU),e(wU,kFr),e(wE,SFr),e(I,RFr),e(I,AE),e(AE,MMe),e(MMe,PFr),e(AE,BFr),e(AE,AU),e(AU,IFr),e(AE,NFr),e(I,qFr),e(I,LE),e(LE,EMe),e(EMe,jFr),e(LE,DFr),e(LE,LU),e(LU,GFr),e(LE,OFr),e(I,VFr),e(I,yE),e(yE,CMe),e(CMe,XFr),e(yE,zFr),e(yE,yU),e(yU,QFr),e(yE,WFr),e(I,HFr),e(I,xE),e(xE,wMe),e(wMe,UFr),e(xE,JFr),e(xE,xU),e(xU,YFr),e(xE,KFr),e(I,ZFr),e(I,$E),e($E,AMe),e(AMe,eTr),e($E,oTr),e($E,$U),e($U,rTr),e($E,tTr),e(I,aTr),e(I,kE),e(kE,LMe),e(LMe,nTr),e(kE,sTr),e(kE,kU),e(kU,lTr),e(kE,iTr),e(I,dTr),e(I,SE),e(SE,yMe),e(yMe,cTr),e(SE,mTr),e(SE,SU),e(SU,fTr),e(SE,gTr),e(I,hTr),e(I,RE),e(RE,xMe),e(xMe,uTr),e(RE,pTr),e(RE,RU),e(RU,_Tr),e(RE,bTr),e(I,vTr),e(I,PE),e(PE,$Me),e($Me,FTr),e(PE,TTr),e(PE,PU),e(PU,MTr),e(PE,ETr),e(I,CTr),e(I,BE),e(BE,kMe),e(kMe,wTr),e(BE,ATr),e(BE,BU),e(BU,LTr),e(BE,yTr),e(I,xTr),e(I,IE),e(IE,SMe),e(SMe,$Tr),e(IE,kTr),e(IE,IU),e(IU,STr),e(IE,RTr),e(I,PTr),e(I,NE),e(NE,RMe),e(RMe,BTr),e(NE,ITr),e(NE,NU),e(NU,NTr),e(NE,qTr),e(I,jTr),e(I,qE),e(qE,PMe),e(PMe,DTr),e(qE,GTr),e(qE,qU),e(qU,OTr),e(qE,VTr),e(I,XTr),e(I,jE),e(jE,BMe),e(BMe,zTr),e(jE,QTr),e(jE,jU),e(jU,WTr),e(jE,HTr),e(I,UTr),e(I,DE),e(DE,IMe),e(IMe,JTr),e(DE,YTr),e(DE,DU),e(DU,KTr),e(DE,ZTr),e(I,eMr),e(I,Ys),e(Ys,NMe),e(NMe,oMr),e(Ys,rMr),e(Ys,GU),e(GU,tMr),e(Ys,aMr),e(Ys,OU),e(OU,nMr),e(Ys,sMr),e(I,lMr),e(I,GE),e(GE,qMe),e(qMe,iMr),e(GE,dMr),e(GE,VU),e(VU,cMr),e(GE,mMr),e(I,fMr),e(I,OE),e(OE,jMe),e(jMe,gMr),e(OE,hMr),e(OE,XU),e(XU,uMr),e(OE,pMr),e(I,_Mr),e(I,VE),e(VE,DMe),e(DMe,bMr),e(VE,vMr),e(VE,zU),e(zU,FMr),e(VE,TMr),e(I,MMr),e(I,XE),e(XE,GMe),e(GMe,EMr),e(XE,CMr),e(XE,QU),e(QU,wMr),e(XE,AMr),e(I,LMr),e(I,zE),e(zE,OMe),e(OMe,yMr),e(zE,xMr),e(zE,WU),e(WU,$Mr),e(zE,kMr),e(I,SMr),e(I,QE),e(QE,VMe),e(VMe,RMr),e(QE,PMr),e(QE,HU),e(HU,BMr),e(QE,IMr),e(I,NMr),e(I,WE),e(WE,XMe),e(XMe,qMr),e(WE,jMr),e(WE,UU),e(UU,DMr),e(WE,GMr),e(I,OMr),e(I,HE),e(HE,zMe),e(zMe,VMr),e(HE,XMr),e(HE,JU),e(JU,zMr),e(HE,QMr),e(I,WMr),e(I,UE),e(UE,QMe),e(QMe,HMr),e(UE,UMr),e(UE,YU),e(YU,JMr),e(UE,YMr),e(I,KMr),e(I,JE),e(JE,WMe),e(WMe,ZMr),e(JE,e4r),e(JE,KU),e(KU,o4r),e(JE,r4r),e(I,t4r),e(I,YE),e(YE,HMe),e(HMe,a4r),e(YE,n4r),e(YE,ZU),e(ZU,s4r),e(YE,l4r),e(I,i4r),e(I,KE),e(KE,UMe),e(UMe,d4r),e(KE,c4r),e(KE,eJ),e(eJ,m4r),e(KE,f4r),e(I,g4r),e(I,ZE),e(ZE,JMe),e(JMe,h4r),e(ZE,u4r),e(ZE,oJ),e(oJ,p4r),e(ZE,_4r),e(I,b4r),e(I,eC),e(eC,YMe),e(YMe,v4r),e(eC,F4r),e(eC,rJ),e(rJ,T4r),e(eC,M4r),e(I,E4r),e(I,oC),e(oC,KMe),e(KMe,C4r),e(oC,w4r),e(oC,tJ),e(tJ,A4r),e(oC,L4r),e(I,y4r),e(I,rC),e(rC,ZMe),e(ZMe,x4r),e(rC,$4r),e(rC,aJ),e(aJ,k4r),e(rC,S4r),e(I,R4r),e(I,tC),e(tC,e4e),e(e4e,P4r),e(tC,B4r),e(tC,nJ),e(nJ,I4r),e(tC,N4r),e(I,q4r),e(I,aC),e(aC,o4e),e(o4e,j4r),e(aC,D4r),e(aC,sJ),e(sJ,G4r),e(aC,O4r),e(I,V4r),e(I,nC),e(nC,r4e),e(r4e,X4r),e(nC,z4r),e(nC,lJ),e(lJ,Q4r),e(nC,W4r),e(I,H4r),e(I,sC),e(sC,t4e),e(t4e,U4r),e(sC,J4r),e(sC,iJ),e(iJ,Y4r),e(sC,K4r),e(I,Z4r),e(I,lC),e(lC,a4e),e(a4e,eEr),e(lC,oEr),e(lC,dJ),e(dJ,rEr),e(lC,tEr),e(I,aEr),e(I,iC),e(iC,n4e),e(n4e,nEr),e(iC,sEr),e(iC,cJ),e(cJ,lEr),e(iC,iEr),e(I,dEr),e(I,dC),e(dC,s4e),e(s4e,cEr),e(dC,mEr),e(dC,mJ),e(mJ,fEr),e(dC,gEr),e(I,hEr),e(I,cC),e(cC,l4e),e(l4e,uEr),e(cC,pEr),e(cC,fJ),e(fJ,_Er),e(cC,bEr),e(I,vEr),e(I,mC),e(mC,i4e),e(i4e,FEr),e(mC,TEr),e(mC,gJ),e(gJ,MEr),e(mC,EEr),e(I,CEr),e(I,fC),e(fC,d4e),e(d4e,wEr),e(fC,AEr),e(fC,hJ),e(hJ,LEr),e(fC,yEr),e(I,xEr),e(I,gC),e(gC,c4e),e(c4e,$Er),e(gC,kEr),e(gC,uJ),e(uJ,SEr),e(gC,REr),e(I,PEr),e(I,hC),e(hC,m4e),e(m4e,BEr),e(hC,IEr),e(hC,pJ),e(pJ,NEr),e(hC,qEr),e(I,jEr),e(I,uC),e(uC,f4e),e(f4e,DEr),e(uC,GEr),e(uC,_J),e(_J,OEr),e(uC,VEr),e(I,XEr),e(I,pC),e(pC,g4e),e(g4e,zEr),e(pC,QEr),e(pC,bJ),e(bJ,WEr),e(pC,HEr),e(I,UEr),e(I,_C),e(_C,h4e),e(h4e,JEr),e(_C,YEr),e(_C,vJ),e(vJ,KEr),e(_C,ZEr),e(I,eCr),e(I,bC),e(bC,u4e),e(u4e,oCr),e(bC,rCr),e(bC,FJ),e(FJ,tCr),e(bC,aCr),e($r,nCr),M(vC,$r,null),b(m,kze,_),b(m,cc,_),e(cc,FC),e(FC,p4e),M(ox,p4e,null),e(cc,sCr),e(cc,_4e),e(_4e,lCr),b(m,Sze,_),b(m,tr,_),M(rx,tr,null),e(tr,iCr),e(tr,mc),e(mc,dCr),e(mc,TJ),e(TJ,cCr),e(mc,mCr),e(mc,MJ),e(MJ,fCr),e(mc,gCr),e(tr,hCr),e(tr,tx),e(tx,uCr),e(tx,b4e),e(b4e,pCr),e(tx,_Cr),e(tr,bCr),e(tr,Pt),M(ax,Pt,null),e(Pt,vCr),e(Pt,v4e),e(v4e,FCr),e(Pt,TCr),e(Pt,fc),e(fc,MCr),e(fc,F4e),e(F4e,ECr),e(fc,CCr),e(fc,EJ),e(EJ,wCr),e(fc,ACr),e(Pt,LCr),M(TC,Pt,null),e(tr,yCr),e(tr,kr),M(nx,kr,null),e(kr,xCr),e(kr,T4e),e(T4e,$Cr),e(kr,kCr),e(kr,ln),e(ln,SCr),e(ln,M4e),e(M4e,RCr),e(ln,PCr),e(ln,E4e),e(E4e,BCr),e(ln,ICr),e(ln,C4e),e(C4e,NCr),e(ln,qCr),e(kr,jCr),e(kr,se),e(se,MC),e(MC,w4e),e(w4e,DCr),e(MC,GCr),e(MC,CJ),e(CJ,OCr),e(MC,VCr),e(se,XCr),e(se,EC),e(EC,A4e),e(A4e,zCr),e(EC,QCr),e(EC,wJ),e(wJ,WCr),e(EC,HCr),e(se,UCr),e(se,CC),e(CC,L4e),e(L4e,JCr),e(CC,YCr),e(CC,AJ),e(AJ,KCr),e(CC,ZCr),e(se,e3r),e(se,wC),e(wC,y4e),e(y4e,o3r),e(wC,r3r),e(wC,LJ),e(LJ,t3r),e(wC,a3r),e(se,n3r),e(se,AC),e(AC,x4e),e(x4e,s3r),e(AC,l3r),e(AC,yJ),e(yJ,i3r),e(AC,d3r),e(se,c3r),e(se,LC),e(LC,$4e),e($4e,m3r),e(LC,f3r),e(LC,xJ),e(xJ,g3r),e(LC,h3r),e(se,u3r),e(se,yC),e(yC,k4e),e(k4e,p3r),e(yC,_3r),e(yC,$J),e($J,b3r),e(yC,v3r),e(se,F3r),e(se,xC),e(xC,S4e),e(S4e,T3r),e(xC,M3r),e(xC,kJ),e(kJ,E3r),e(xC,C3r),e(se,w3r),e(se,$C),e($C,R4e),e(R4e,A3r),e($C,L3r),e($C,SJ),e(SJ,y3r),e($C,x3r),e(se,$3r),e(se,kC),e(kC,P4e),e(P4e,k3r),e(kC,S3r),e(kC,RJ),e(RJ,R3r),e(kC,P3r),e(se,B3r),e(se,SC),e(SC,B4e),e(B4e,I3r),e(SC,N3r),e(SC,PJ),e(PJ,q3r),e(SC,j3r),e(se,D3r),e(se,RC),e(RC,I4e),e(I4e,G3r),e(RC,O3r),e(RC,BJ),e(BJ,V3r),e(RC,X3r),e(se,z3r),e(se,PC),e(PC,N4e),e(N4e,Q3r),e(PC,W3r),e(PC,IJ),e(IJ,H3r),e(PC,U3r),e(se,J3r),e(se,BC),e(BC,q4e),e(q4e,Y3r),e(BC,K3r),e(BC,NJ),e(NJ,Z3r),e(BC,e5r),e(se,o5r),e(se,IC),e(IC,j4e),e(j4e,r5r),e(IC,t5r),e(IC,qJ),e(qJ,a5r),e(IC,n5r),e(se,s5r),e(se,NC),e(NC,D4e),e(D4e,l5r),e(NC,i5r),e(NC,jJ),e(jJ,d5r),e(NC,c5r),e(se,m5r),e(se,qC),e(qC,G4e),e(G4e,f5r),e(qC,g5r),e(qC,DJ),e(DJ,h5r),e(qC,u5r),e(se,p5r),e(se,jC),e(jC,O4e),e(O4e,_5r),e(jC,b5r),e(jC,GJ),e(GJ,v5r),e(jC,F5r),e(se,T5r),e(se,DC),e(DC,V4e),e(V4e,M5r),e(DC,E5r),e(DC,OJ),e(OJ,C5r),e(DC,w5r),e(se,A5r),e(se,GC),e(GC,X4e),e(X4e,L5r),e(GC,y5r),e(GC,VJ),e(VJ,x5r),e(GC,$5r),e(se,k5r),e(se,OC),e(OC,z4e),e(z4e,S5r),e(OC,R5r),e(OC,XJ),e(XJ,P5r),e(OC,B5r),e(se,I5r),e(se,VC),e(VC,Q4e),e(Q4e,N5r),e(VC,q5r),e(VC,zJ),e(zJ,j5r),e(VC,D5r),e(se,G5r),e(se,XC),e(XC,W4e),e(W4e,O5r),e(XC,V5r),e(XC,QJ),e(QJ,X5r),e(XC,z5r),e(kr,Q5r),M(zC,kr,null),b(m,Rze,_),b(m,gc,_),e(gc,QC),e(QC,H4e),M(sx,H4e,null),e(gc,W5r),e(gc,U4e),e(U4e,H5r),b(m,Pze,_),b(m,ar,_),M(lx,ar,null),e(ar,U5r),e(ar,hc),e(hc,J5r),e(hc,WJ),e(WJ,Y5r),e(hc,K5r),e(hc,HJ),e(HJ,Z5r),e(hc,e0r),e(ar,o0r),e(ar,ix),e(ix,r0r),e(ix,J4e),e(J4e,t0r),e(ix,a0r),e(ar,n0r),e(ar,Bt),M(dx,Bt,null),e(Bt,s0r),e(Bt,Y4e),e(Y4e,l0r),e(Bt,i0r),e(Bt,uc),e(uc,d0r),e(uc,K4e),e(K4e,c0r),e(uc,m0r),e(uc,UJ),e(UJ,f0r),e(uc,g0r),e(Bt,h0r),M(WC,Bt,null),e(ar,u0r),e(ar,Sr),M(cx,Sr,null),e(Sr,p0r),e(Sr,Z4e),e(Z4e,_0r),e(Sr,b0r),e(Sr,dn),e(dn,v0r),e(dn,eEe),e(eEe,F0r),e(dn,T0r),e(dn,oEe),e(oEe,M0r),e(dn,E0r),e(dn,rEe),e(rEe,C0r),e(dn,w0r),e(Sr,A0r),e(Sr,Me),e(Me,HC),e(HC,tEe),e(tEe,L0r),e(HC,y0r),e(HC,JJ),e(JJ,x0r),e(HC,$0r),e(Me,k0r),e(Me,UC),e(UC,aEe),e(aEe,S0r),e(UC,R0r),e(UC,YJ),e(YJ,P0r),e(UC,B0r),e(Me,I0r),e(Me,JC),e(JC,nEe),e(nEe,N0r),e(JC,q0r),e(JC,KJ),e(KJ,j0r),e(JC,D0r),e(Me,G0r),e(Me,YC),e(YC,sEe),e(sEe,O0r),e(YC,V0r),e(YC,ZJ),e(ZJ,X0r),e(YC,z0r),e(Me,Q0r),e(Me,KC),e(KC,lEe),e(lEe,W0r),e(KC,H0r),e(KC,eY),e(eY,U0r),e(KC,J0r),e(Me,Y0r),e(Me,ZC),e(ZC,iEe),e(iEe,K0r),e(ZC,Z0r),e(ZC,oY),e(oY,ewr),e(ZC,owr),e(Me,rwr),e(Me,e3),e(e3,dEe),e(dEe,twr),e(e3,awr),e(e3,rY),e(rY,nwr),e(e3,swr),e(Me,lwr),e(Me,o3),e(o3,cEe),e(cEe,iwr),e(o3,dwr),e(o3,tY),e(tY,cwr),e(o3,mwr),e(Me,fwr),e(Me,r3),e(r3,mEe),e(mEe,gwr),e(r3,hwr),e(r3,aY),e(aY,uwr),e(r3,pwr),e(Me,_wr),e(Me,t3),e(t3,fEe),e(fEe,bwr),e(t3,vwr),e(t3,nY),e(nY,Fwr),e(t3,Twr),e(Me,Mwr),e(Me,a3),e(a3,gEe),e(gEe,Ewr),e(a3,Cwr),e(a3,sY),e(sY,wwr),e(a3,Awr),e(Me,Lwr),e(Me,n3),e(n3,hEe),e(hEe,ywr),e(n3,xwr),e(n3,lY),e(lY,$wr),e(n3,kwr),e(Me,Swr),e(Me,s3),e(s3,uEe),e(uEe,Rwr),e(s3,Pwr),e(s3,iY),e(iY,Bwr),e(s3,Iwr),e(Sr,Nwr),M(l3,Sr,null),b(m,Bze,_),b(m,pc,_),e(pc,i3),e(i3,pEe),M(mx,pEe,null),e(pc,qwr),e(pc,_Ee),e(_Ee,jwr),b(m,Ize,_),b(m,nr,_),M(fx,nr,null),e(nr,Dwr),e(nr,_c),e(_c,Gwr),e(_c,dY),e(dY,Owr),e(_c,Vwr),e(_c,cY),e(cY,Xwr),e(_c,zwr),e(nr,Qwr),e(nr,gx),e(gx,Wwr),e(gx,bEe),e(bEe,Hwr),e(gx,Uwr),e(nr,Jwr),e(nr,It),M(hx,It,null),e(It,Ywr),e(It,vEe),e(vEe,Kwr),e(It,Zwr),e(It,bc),e(bc,eAr),e(bc,FEe),e(FEe,oAr),e(bc,rAr),e(bc,mY),e(mY,tAr),e(bc,aAr),e(It,nAr),M(d3,It,null),e(nr,sAr),e(nr,Rr),M(ux,Rr,null),e(Rr,lAr),e(Rr,TEe),e(TEe,iAr),e(Rr,dAr),e(Rr,cn),e(cn,cAr),e(cn,MEe),e(MEe,mAr),e(cn,fAr),e(cn,EEe),e(EEe,gAr),e(cn,hAr),e(cn,CEe),e(CEe,uAr),e(cn,pAr),e(Rr,_Ar),e(Rr,Ve),e(Ve,c3),e(c3,wEe),e(wEe,bAr),e(c3,vAr),e(c3,fY),e(fY,FAr),e(c3,TAr),e(Ve,MAr),e(Ve,m3),e(m3,AEe),e(AEe,EAr),e(m3,CAr),e(m3,gY),e(gY,wAr),e(m3,AAr),e(Ve,LAr),e(Ve,Ks),e(Ks,LEe),e(LEe,yAr),e(Ks,xAr),e(Ks,hY),e(hY,$Ar),e(Ks,kAr),e(Ks,uY),e(uY,SAr),e(Ks,RAr),e(Ve,PAr),e(Ve,f3),e(f3,yEe),e(yEe,BAr),e(f3,IAr),e(f3,pY),e(pY,NAr),e(f3,qAr),e(Ve,jAr),e(Ve,g3),e(g3,xEe),e(xEe,DAr),e(g3,GAr),e(g3,_Y),e(_Y,OAr),e(g3,VAr),e(Ve,XAr),e(Ve,h3),e(h3,$Ee),e($Ee,zAr),e(h3,QAr),e(h3,bY),e(bY,WAr),e(h3,HAr),e(Ve,UAr),e(Ve,u3),e(u3,kEe),e(kEe,JAr),e(u3,YAr),e(u3,vY),e(vY,KAr),e(u3,ZAr),e(Ve,e6r),e(Ve,p3),e(p3,SEe),e(SEe,o6r),e(p3,r6r),e(p3,FY),e(FY,t6r),e(p3,a6r),e(Rr,n6r),M(_3,Rr,null),b(m,Nze,_),b(m,vc,_),e(vc,b3),e(b3,REe),M(px,REe,null),e(vc,s6r),e(vc,PEe),e(PEe,l6r),b(m,qze,_),b(m,sr,_),M(_x,sr,null),e(sr,i6r),e(sr,Fc),e(Fc,d6r),e(Fc,TY),e(TY,c6r),e(Fc,m6r),e(Fc,MY),e(MY,f6r),e(Fc,g6r),e(sr,h6r),e(sr,bx),e(bx,u6r),e(bx,BEe),e(BEe,p6r),e(bx,_6r),e(sr,b6r),e(sr,Nt),M(vx,Nt,null),e(Nt,v6r),e(Nt,IEe),e(IEe,F6r),e(Nt,T6r),e(Nt,Tc),e(Tc,M6r),e(Tc,NEe),e(NEe,E6r),e(Tc,C6r),e(Tc,EY),e(EY,w6r),e(Tc,A6r),e(Nt,L6r),M(v3,Nt,null),e(sr,y6r),e(sr,Pr),M(Fx,Pr,null),e(Pr,x6r),e(Pr,qEe),e(qEe,$6r),e(Pr,k6r),e(Pr,mn),e(mn,S6r),e(mn,jEe),e(jEe,R6r),e(mn,P6r),e(mn,DEe),e(DEe,B6r),e(mn,I6r),e(mn,GEe),e(GEe,N6r),e(mn,q6r),e(Pr,j6r),e(Pr,ie),e(ie,F3),e(F3,OEe),e(OEe,D6r),e(F3,G6r),e(F3,CY),e(CY,O6r),e(F3,V6r),e(ie,X6r),e(ie,T3),e(T3,VEe),e(VEe,z6r),e(T3,Q6r),e(T3,wY),e(wY,W6r),e(T3,H6r),e(ie,U6r),e(ie,M3),e(M3,XEe),e(XEe,J6r),e(M3,Y6r),e(M3,AY),e(AY,K6r),e(M3,Z6r),e(ie,e7r),e(ie,E3),e(E3,zEe),e(zEe,o7r),e(E3,r7r),e(E3,LY),e(LY,t7r),e(E3,a7r),e(ie,n7r),e(ie,C3),e(C3,QEe),e(QEe,s7r),e(C3,l7r),e(C3,yY),e(yY,i7r),e(C3,d7r),e(ie,c7r),e(ie,w3),e(w3,WEe),e(WEe,m7r),e(w3,f7r),e(w3,xY),e(xY,g7r),e(w3,h7r),e(ie,u7r),e(ie,A3),e(A3,HEe),e(HEe,p7r),e(A3,_7r),e(A3,$Y),e($Y,b7r),e(A3,v7r),e(ie,F7r),e(ie,L3),e(L3,UEe),e(UEe,T7r),e(L3,M7r),e(L3,kY),e(kY,E7r),e(L3,C7r),e(ie,w7r),e(ie,y3),e(y3,JEe),e(JEe,A7r),e(y3,L7r),e(y3,SY),e(SY,y7r),e(y3,x7r),e(ie,$7r),e(ie,x3),e(x3,YEe),e(YEe,k7r),e(x3,S7r),e(x3,RY),e(RY,R7r),e(x3,P7r),e(ie,B7r),e(ie,$3),e($3,KEe),e(KEe,I7r),e($3,N7r),e($3,PY),e(PY,q7r),e($3,j7r),e(ie,D7r),e(ie,k3),e(k3,ZEe),e(ZEe,G7r),e(k3,O7r),e(k3,BY),e(BY,V7r),e(k3,X7r),e(ie,z7r),e(ie,S3),e(S3,eCe),e(eCe,Q7r),e(S3,W7r),e(S3,IY),e(IY,H7r),e(S3,U7r),e(ie,J7r),e(ie,R3),e(R3,oCe),e(oCe,Y7r),e(R3,K7r),e(R3,NY),e(NY,Z7r),e(R3,eLr),e(ie,oLr),e(ie,P3),e(P3,rCe),e(rCe,rLr),e(P3,tLr),e(P3,qY),e(qY,aLr),e(P3,nLr),e(ie,sLr),e(ie,B3),e(B3,tCe),e(tCe,lLr),e(B3,iLr),e(B3,jY),e(jY,dLr),e(B3,cLr),e(ie,mLr),e(ie,I3),e(I3,aCe),e(aCe,fLr),e(I3,gLr),e(I3,DY),e(DY,hLr),e(I3,uLr),e(ie,pLr),e(ie,N3),e(N3,nCe),e(nCe,_Lr),e(N3,bLr),e(N3,GY),e(GY,vLr),e(N3,FLr),e(ie,TLr),e(ie,q3),e(q3,sCe),e(sCe,MLr),e(q3,ELr),e(q3,OY),e(OY,CLr),e(q3,wLr),e(ie,ALr),e(ie,j3),e(j3,lCe),e(lCe,LLr),e(j3,yLr),e(j3,VY),e(VY,xLr),e(j3,$Lr),e(Pr,kLr),M(D3,Pr,null),b(m,jze,_),b(m,Mc,_),e(Mc,G3),e(G3,iCe),M(Tx,iCe,null),e(Mc,SLr),e(Mc,dCe),e(dCe,RLr),b(m,Dze,_),b(m,lr,_),M(Mx,lr,null),e(lr,PLr),e(lr,Ec),e(Ec,BLr),e(Ec,XY),e(XY,ILr),e(Ec,NLr),e(Ec,zY),e(zY,qLr),e(Ec,jLr),e(lr,DLr),e(lr,Ex),e(Ex,GLr),e(Ex,cCe),e(cCe,OLr),e(Ex,VLr),e(lr,XLr),e(lr,qt),M(Cx,qt,null),e(qt,zLr),e(qt,mCe),e(mCe,QLr),e(qt,WLr),e(qt,Cc),e(Cc,HLr),e(Cc,fCe),e(fCe,ULr),e(Cc,JLr),e(Cc,QY),e(QY,YLr),e(Cc,KLr),e(qt,ZLr),M(O3,qt,null),e(lr,eyr),e(lr,Br),M(wx,Br,null),e(Br,oyr),e(Br,gCe),e(gCe,ryr),e(Br,tyr),e(Br,fn),e(fn,ayr),e(fn,hCe),e(hCe,nyr),e(fn,syr),e(fn,uCe),e(uCe,lyr),e(fn,iyr),e(fn,pCe),e(pCe,dyr),e(fn,cyr),e(Br,myr),e(Br,ye),e(ye,V3),e(V3,_Ce),e(_Ce,fyr),e(V3,gyr),e(V3,WY),e(WY,hyr),e(V3,uyr),e(ye,pyr),e(ye,X3),e(X3,bCe),e(bCe,_yr),e(X3,byr),e(X3,HY),e(HY,vyr),e(X3,Fyr),e(ye,Tyr),e(ye,z3),e(z3,vCe),e(vCe,Myr),e(z3,Eyr),e(z3,UY),e(UY,Cyr),e(z3,wyr),e(ye,Ayr),e(ye,Q3),e(Q3,FCe),e(FCe,Lyr),e(Q3,yyr),e(Q3,JY),e(JY,xyr),e(Q3,$yr),e(ye,kyr),e(ye,W3),e(W3,TCe),e(TCe,Syr),e(W3,Ryr),e(W3,YY),e(YY,Pyr),e(W3,Byr),e(ye,Iyr),e(ye,H3),e(H3,MCe),e(MCe,Nyr),e(H3,qyr),e(H3,KY),e(KY,jyr),e(H3,Dyr),e(ye,Gyr),e(ye,U3),e(U3,ECe),e(ECe,Oyr),e(U3,Vyr),e(U3,ZY),e(ZY,Xyr),e(U3,zyr),e(ye,Qyr),e(ye,J3),e(J3,CCe),e(CCe,Wyr),e(J3,Hyr),e(J3,eK),e(eK,Uyr),e(J3,Jyr),e(ye,Yyr),e(ye,Y3),e(Y3,wCe),e(wCe,Kyr),e(Y3,Zyr),e(Y3,oK),e(oK,e8r),e(Y3,o8r),e(ye,r8r),e(ye,K3),e(K3,ACe),e(ACe,t8r),e(K3,a8r),e(K3,rK),e(rK,n8r),e(K3,s8r),e(Br,l8r),M(Z3,Br,null),b(m,Gze,_),b(m,wc,_),e(wc,e5),e(e5,LCe),M(Ax,LCe,null),e(wc,i8r),e(wc,yCe),e(yCe,d8r),b(m,Oze,_),b(m,ir,_),M(Lx,ir,null),e(ir,c8r),e(ir,Ac),e(Ac,m8r),e(Ac,tK),e(tK,f8r),e(Ac,g8r),e(Ac,aK),e(aK,h8r),e(Ac,u8r),e(ir,p8r),e(ir,yx),e(yx,_8r),e(yx,xCe),e(xCe,b8r),e(yx,v8r),e(ir,F8r),e(ir,jt),M(xx,jt,null),e(jt,T8r),e(jt,$Ce),e($Ce,M8r),e(jt,E8r),e(jt,Lc),e(Lc,C8r),e(Lc,kCe),e(kCe,w8r),e(Lc,A8r),e(Lc,nK),e(nK,L8r),e(Lc,y8r),e(jt,x8r),M(o5,jt,null),e(ir,$8r),e(ir,Ir),M($x,Ir,null),e(Ir,k8r),e(Ir,SCe),e(SCe,S8r),e(Ir,R8r),e(Ir,gn),e(gn,P8r),e(gn,RCe),e(RCe,B8r),e(gn,I8r),e(gn,PCe),e(PCe,N8r),e(gn,q8r),e(gn,BCe),e(BCe,j8r),e(gn,D8r),e(Ir,G8r),e(Ir,te),e(te,r5),e(r5,ICe),e(ICe,O8r),e(r5,V8r),e(r5,sK),e(sK,X8r),e(r5,z8r),e(te,Q8r),e(te,t5),e(t5,NCe),e(NCe,W8r),e(t5,H8r),e(t5,lK),e(lK,U8r),e(t5,J8r),e(te,Y8r),e(te,a5),e(a5,qCe),e(qCe,K8r),e(a5,Z8r),e(a5,iK),e(iK,e9r),e(a5,o9r),e(te,r9r),e(te,n5),e(n5,jCe),e(jCe,t9r),e(n5,a9r),e(n5,dK),e(dK,n9r),e(n5,s9r),e(te,l9r),e(te,s5),e(s5,DCe),e(DCe,i9r),e(s5,d9r),e(s5,cK),e(cK,c9r),e(s5,m9r),e(te,f9r),e(te,l5),e(l5,GCe),e(GCe,g9r),e(l5,h9r),e(l5,mK),e(mK,u9r),e(l5,p9r),e(te,_9r),e(te,i5),e(i5,OCe),e(OCe,b9r),e(i5,v9r),e(i5,fK),e(fK,F9r),e(i5,T9r),e(te,M9r),e(te,d5),e(d5,VCe),e(VCe,E9r),e(d5,C9r),e(d5,gK),e(gK,w9r),e(d5,A9r),e(te,L9r),e(te,c5),e(c5,XCe),e(XCe,y9r),e(c5,x9r),e(c5,hK),e(hK,$9r),e(c5,k9r),e(te,S9r),e(te,m5),e(m5,zCe),e(zCe,R9r),e(m5,P9r),e(m5,uK),e(uK,B9r),e(m5,I9r),e(te,N9r),e(te,f5),e(f5,QCe),e(QCe,q9r),e(f5,j9r),e(f5,pK),e(pK,D9r),e(f5,G9r),e(te,O9r),e(te,g5),e(g5,WCe),e(WCe,V9r),e(g5,X9r),e(g5,_K),e(_K,z9r),e(g5,Q9r),e(te,W9r),e(te,h5),e(h5,HCe),e(HCe,H9r),e(h5,U9r),e(h5,bK),e(bK,J9r),e(h5,Y9r),e(te,K9r),e(te,u5),e(u5,UCe),e(UCe,Z9r),e(u5,exr),e(u5,vK),e(vK,oxr),e(u5,rxr),e(te,txr),e(te,p5),e(p5,JCe),e(JCe,axr),e(p5,nxr),e(p5,FK),e(FK,sxr),e(p5,lxr),e(te,ixr),e(te,_5),e(_5,YCe),e(YCe,dxr),e(_5,cxr),e(_5,TK),e(TK,mxr),e(_5,fxr),e(te,gxr),e(te,b5),e(b5,KCe),e(KCe,hxr),e(b5,uxr),e(b5,MK),e(MK,pxr),e(b5,_xr),e(te,bxr),e(te,v5),e(v5,ZCe),e(ZCe,vxr),e(v5,Fxr),e(v5,EK),e(EK,Txr),e(v5,Mxr),e(te,Exr),e(te,F5),e(F5,e3e),e(e3e,Cxr),e(F5,wxr),e(F5,CK),e(CK,Axr),e(F5,Lxr),e(te,yxr),e(te,T5),e(T5,o3e),e(o3e,xxr),e(T5,$xr),e(T5,wK),e(wK,kxr),e(T5,Sxr),e(te,Rxr),e(te,M5),e(M5,r3e),e(r3e,Pxr),e(M5,Bxr),e(M5,AK),e(AK,Ixr),e(M5,Nxr),e(te,qxr),e(te,E5),e(E5,t3e),e(t3e,jxr),e(E5,Dxr),e(E5,LK),e(LK,Gxr),e(E5,Oxr),e(te,Vxr),e(te,C5),e(C5,a3e),e(a3e,Xxr),e(C5,zxr),e(C5,yK),e(yK,Qxr),e(C5,Wxr),e(te,Hxr),e(te,w5),e(w5,n3e),e(n3e,Uxr),e(w5,Jxr),e(w5,xK),e(xK,Yxr),e(w5,Kxr),e(te,Zxr),e(te,A5),e(A5,s3e),e(s3e,e$r),e(A5,o$r),e(A5,$K),e($K,r$r),e(A5,t$r),e(te,a$r),e(te,L5),e(L5,l3e),e(l3e,n$r),e(L5,s$r),e(L5,kK),e(kK,l$r),e(L5,i$r),e(Ir,d$r),M(y5,Ir,null),b(m,Vze,_),b(m,yc,_),e(yc,x5),e(x5,i3e),M(kx,i3e,null),e(yc,c$r),e(yc,d3e),e(d3e,m$r),b(m,Xze,_),b(m,dr,_),M(Sx,dr,null),e(dr,f$r),e(dr,xc),e(xc,g$r),e(xc,SK),e(SK,h$r),e(xc,u$r),e(xc,RK),e(RK,p$r),e(xc,_$r),e(dr,b$r),e(dr,Rx),e(Rx,v$r),e(Rx,c3e),e(c3e,F$r),e(Rx,T$r),e(dr,M$r),e(dr,Dt),M(Px,Dt,null),e(Dt,E$r),e(Dt,m3e),e(m3e,C$r),e(Dt,w$r),e(Dt,$c),e($c,A$r),e($c,f3e),e(f3e,L$r),e($c,y$r),e($c,PK),e(PK,x$r),e($c,$$r),e(Dt,k$r),M($5,Dt,null),e(dr,S$r),e(dr,Nr),M(Bx,Nr,null),e(Nr,R$r),e(Nr,g3e),e(g3e,P$r),e(Nr,B$r),e(Nr,hn),e(hn,I$r),e(hn,h3e),e(h3e,N$r),e(hn,q$r),e(hn,u3e),e(u3e,j$r),e(hn,D$r),e(hn,p3e),e(p3e,G$r),e(hn,O$r),e(Nr,V$r),e(Nr,_e),e(_e,k5),e(k5,_3e),e(_3e,X$r),e(k5,z$r),e(k5,BK),e(BK,Q$r),e(k5,W$r),e(_e,H$r),e(_e,S5),e(S5,b3e),e(b3e,U$r),e(S5,J$r),e(S5,IK),e(IK,Y$r),e(S5,K$r),e(_e,Z$r),e(_e,R5),e(R5,v3e),e(v3e,ekr),e(R5,okr),e(R5,NK),e(NK,rkr),e(R5,tkr),e(_e,akr),e(_e,P5),e(P5,F3e),e(F3e,nkr),e(P5,skr),e(P5,qK),e(qK,lkr),e(P5,ikr),e(_e,dkr),e(_e,B5),e(B5,T3e),e(T3e,ckr),e(B5,mkr),e(B5,jK),e(jK,fkr),e(B5,gkr),e(_e,hkr),e(_e,I5),e(I5,M3e),e(M3e,ukr),e(I5,pkr),e(I5,DK),e(DK,_kr),e(I5,bkr),e(_e,vkr),e(_e,N5),e(N5,E3e),e(E3e,Fkr),e(N5,Tkr),e(N5,GK),e(GK,Mkr),e(N5,Ekr),e(_e,Ckr),e(_e,q5),e(q5,C3e),e(C3e,wkr),e(q5,Akr),e(q5,OK),e(OK,Lkr),e(q5,ykr),e(_e,xkr),e(_e,j5),e(j5,w3e),e(w3e,$kr),e(j5,kkr),e(j5,VK),e(VK,Skr),e(j5,Rkr),e(_e,Pkr),e(_e,D5),e(D5,A3e),e(A3e,Bkr),e(D5,Ikr),e(D5,XK),e(XK,Nkr),e(D5,qkr),e(_e,jkr),e(_e,G5),e(G5,L3e),e(L3e,Dkr),e(G5,Gkr),e(G5,zK),e(zK,Okr),e(G5,Vkr),e(_e,Xkr),e(_e,O5),e(O5,y3e),e(y3e,zkr),e(O5,Qkr),e(O5,QK),e(QK,Wkr),e(O5,Hkr),e(_e,Ukr),e(_e,V5),e(V5,x3e),e(x3e,Jkr),e(V5,Ykr),e(V5,WK),e(WK,Kkr),e(V5,Zkr),e(_e,eSr),e(_e,X5),e(X5,$3e),e($3e,oSr),e(X5,rSr),e(X5,HK),e(HK,tSr),e(X5,aSr),e(_e,nSr),e(_e,z5),e(z5,k3e),e(k3e,sSr),e(z5,lSr),e(z5,UK),e(UK,iSr),e(z5,dSr),e(_e,cSr),e(_e,Q5),e(Q5,S3e),e(S3e,mSr),e(Q5,fSr),e(Q5,JK),e(JK,gSr),e(Q5,hSr),e(_e,uSr),e(_e,W5),e(W5,R3e),e(R3e,pSr),e(W5,_Sr),e(W5,YK),e(YK,bSr),e(W5,vSr),e(Nr,FSr),M(H5,Nr,null),b(m,zze,_),b(m,kc,_),e(kc,U5),e(U5,P3e),M(Ix,P3e,null),e(kc,TSr),e(kc,B3e),e(B3e,MSr),b(m,Qze,_),b(m,cr,_),M(Nx,cr,null),e(cr,ESr),e(cr,Sc),e(Sc,CSr),e(Sc,KK),e(KK,wSr),e(Sc,ASr),e(Sc,ZK),e(ZK,LSr),e(Sc,ySr),e(cr,xSr),e(cr,qx),e(qx,$Sr),e(qx,I3e),e(I3e,kSr),e(qx,SSr),e(cr,RSr),e(cr,Gt),M(jx,Gt,null),e(Gt,PSr),e(Gt,N3e),e(N3e,BSr),e(Gt,ISr),e(Gt,Rc),e(Rc,NSr),e(Rc,q3e),e(q3e,qSr),e(Rc,jSr),e(Rc,eZ),e(eZ,DSr),e(Rc,GSr),e(Gt,OSr),M(J5,Gt,null),e(cr,VSr),e(cr,qr),M(Dx,qr,null),e(qr,XSr),e(qr,j3e),e(j3e,zSr),e(qr,QSr),e(qr,un),e(un,WSr),e(un,D3e),e(D3e,HSr),e(un,USr),e(un,G3e),e(G3e,JSr),e(un,YSr),e(un,O3e),e(O3e,KSr),e(un,ZSr),e(qr,eRr),e(qr,Gx),e(Gx,Y5),e(Y5,V3e),e(V3e,oRr),e(Y5,rRr),e(Y5,oZ),e(oZ,tRr),e(Y5,aRr),e(Gx,nRr),e(Gx,K5),e(K5,X3e),e(X3e,sRr),e(K5,lRr),e(K5,rZ),e(rZ,iRr),e(K5,dRr),e(qr,cRr),M(Z5,qr,null),b(m,Wze,_),b(m,Pc,_),e(Pc,e0),e(e0,z3e),M(Ox,z3e,null),e(Pc,mRr),e(Pc,Q3e),e(Q3e,fRr),b(m,Hze,_),b(m,mr,_),M(Vx,mr,null),e(mr,gRr),e(mr,Bc),e(Bc,hRr),e(Bc,tZ),e(tZ,uRr),e(Bc,pRr),e(Bc,aZ),e(aZ,_Rr),e(Bc,bRr),e(mr,vRr),e(mr,Xx),e(Xx,FRr),e(Xx,W3e),e(W3e,TRr),e(Xx,MRr),e(mr,ERr),e(mr,Ot),M(zx,Ot,null),e(Ot,CRr),e(Ot,H3e),e(H3e,wRr),e(Ot,ARr),e(Ot,Ic),e(Ic,LRr),e(Ic,U3e),e(U3e,yRr),e(Ic,xRr),e(Ic,nZ),e(nZ,$Rr),e(Ic,kRr),e(Ot,SRr),M(o0,Ot,null),e(mr,RRr),e(mr,jr),M(Qx,jr,null),e(jr,PRr),e(jr,J3e),e(J3e,BRr),e(jr,IRr),e(jr,pn),e(pn,NRr),e(pn,Y3e),e(Y3e,qRr),e(pn,jRr),e(pn,K3e),e(K3e,DRr),e(pn,GRr),e(pn,Z3e),e(Z3e,ORr),e(pn,VRr),e(jr,XRr),e(jr,e5e),e(e5e,r0),e(r0,o5e),e(o5e,zRr),e(r0,QRr),e(r0,sZ),e(sZ,WRr),e(r0,HRr),e(jr,URr),M(t0,jr,null),b(m,Uze,_),b(m,Nc,_),e(Nc,a0),e(a0,r5e),M(Wx,r5e,null),e(Nc,JRr),e(Nc,t5e),e(t5e,YRr),b(m,Jze,_),b(m,fr,_),M(Hx,fr,null),e(fr,KRr),e(fr,qc),e(qc,ZRr),e(qc,lZ),e(lZ,ePr),e(qc,oPr),e(qc,iZ),e(iZ,rPr),e(qc,tPr),e(fr,aPr),e(fr,Ux),e(Ux,nPr),e(Ux,a5e),e(a5e,sPr),e(Ux,lPr),e(fr,iPr),e(fr,Vt),M(Jx,Vt,null),e(Vt,dPr),e(Vt,n5e),e(n5e,cPr),e(Vt,mPr),e(Vt,jc),e(jc,fPr),e(jc,s5e),e(s5e,gPr),e(jc,hPr),e(jc,dZ),e(dZ,uPr),e(jc,pPr),e(Vt,_Pr),M(n0,Vt,null),e(fr,bPr),e(fr,Dr),M(Yx,Dr,null),e(Dr,vPr),e(Dr,l5e),e(l5e,FPr),e(Dr,TPr),e(Dr,_n),e(_n,MPr),e(_n,i5e),e(i5e,EPr),e(_n,CPr),e(_n,d5e),e(d5e,wPr),e(_n,APr),e(_n,c5e),e(c5e,LPr),e(_n,yPr),e(Dr,xPr),e(Dr,de),e(de,s0),e(s0,m5e),e(m5e,$Pr),e(s0,kPr),e(s0,cZ),e(cZ,SPr),e(s0,RPr),e(de,PPr),e(de,l0),e(l0,f5e),e(f5e,BPr),e(l0,IPr),e(l0,mZ),e(mZ,NPr),e(l0,qPr),e(de,jPr),e(de,i0),e(i0,g5e),e(g5e,DPr),e(i0,GPr),e(i0,fZ),e(fZ,OPr),e(i0,VPr),e(de,XPr),e(de,d0),e(d0,h5e),e(h5e,zPr),e(d0,QPr),e(d0,gZ),e(gZ,WPr),e(d0,HPr),e(de,UPr),e(de,c0),e(c0,u5e),e(u5e,JPr),e(c0,YPr),e(c0,hZ),e(hZ,KPr),e(c0,ZPr),e(de,eBr),e(de,m0),e(m0,p5e),e(p5e,oBr),e(m0,rBr),e(m0,uZ),e(uZ,tBr),e(m0,aBr),e(de,nBr),e(de,f0),e(f0,_5e),e(_5e,sBr),e(f0,lBr),e(f0,pZ),e(pZ,iBr),e(f0,dBr),e(de,cBr),e(de,g0),e(g0,b5e),e(b5e,mBr),e(g0,fBr),e(g0,_Z),e(_Z,gBr),e(g0,hBr),e(de,uBr),e(de,h0),e(h0,v5e),e(v5e,pBr),e(h0,_Br),e(h0,bZ),e(bZ,bBr),e(h0,vBr),e(de,FBr),e(de,u0),e(u0,F5e),e(F5e,TBr),e(u0,MBr),e(u0,vZ),e(vZ,EBr),e(u0,CBr),e(de,wBr),e(de,p0),e(p0,T5e),e(T5e,ABr),e(p0,LBr),e(p0,FZ),e(FZ,yBr),e(p0,xBr),e(de,$Br),e(de,_0),e(_0,M5e),e(M5e,kBr),e(_0,SBr),e(_0,TZ),e(TZ,RBr),e(_0,PBr),e(de,BBr),e(de,b0),e(b0,E5e),e(E5e,IBr),e(b0,NBr),e(b0,MZ),e(MZ,qBr),e(b0,jBr),e(de,DBr),e(de,v0),e(v0,C5e),e(C5e,GBr),e(v0,OBr),e(v0,EZ),e(EZ,VBr),e(v0,XBr),e(de,zBr),e(de,F0),e(F0,w5e),e(w5e,QBr),e(F0,WBr),e(F0,CZ),e(CZ,HBr),e(F0,UBr),e(de,JBr),e(de,T0),e(T0,A5e),e(A5e,YBr),e(T0,KBr),e(T0,wZ),e(wZ,ZBr),e(T0,eIr),e(de,oIr),e(de,M0),e(M0,L5e),e(L5e,rIr),e(M0,tIr),e(M0,AZ),e(AZ,aIr),e(M0,nIr),e(de,sIr),e(de,E0),e(E0,y5e),e(y5e,lIr),e(E0,iIr),e(E0,LZ),e(LZ,dIr),e(E0,cIr),e(de,mIr),e(de,C0),e(C0,x5e),e(x5e,fIr),e(C0,gIr),e(C0,yZ),e(yZ,hIr),e(C0,uIr),e(de,pIr),e(de,w0),e(w0,$5e),e($5e,_Ir),e(w0,bIr),e(w0,xZ),e(xZ,vIr),e(w0,FIr),e(Dr,TIr),M(A0,Dr,null),b(m,Yze,_),b(m,Dc,_),e(Dc,L0),e(L0,k5e),M(Kx,k5e,null),e(Dc,MIr),e(Dc,S5e),e(S5e,EIr),b(m,Kze,_),b(m,gr,_),M(Zx,gr,null),e(gr,CIr),e(gr,Gc),e(Gc,wIr),e(Gc,$Z),e($Z,AIr),e(Gc,LIr),e(Gc,kZ),e(kZ,yIr),e(Gc,xIr),e(gr,$Ir),e(gr,e$),e(e$,kIr),e(e$,R5e),e(R5e,SIr),e(e$,RIr),e(gr,PIr),e(gr,Xt),M(o$,Xt,null),e(Xt,BIr),e(Xt,P5e),e(P5e,IIr),e(Xt,NIr),e(Xt,Oc),e(Oc,qIr),e(Oc,B5e),e(B5e,jIr),e(Oc,DIr),e(Oc,SZ),e(SZ,GIr),e(Oc,OIr),e(Xt,VIr),M(y0,Xt,null),e(gr,XIr),e(gr,Gr),M(r$,Gr,null),e(Gr,zIr),e(Gr,I5e),e(I5e,QIr),e(Gr,WIr),e(Gr,bn),e(bn,HIr),e(bn,N5e),e(N5e,UIr),e(bn,JIr),e(bn,q5e),e(q5e,YIr),e(bn,KIr),e(bn,j5e),e(j5e,ZIr),e(bn,eNr),e(Gr,oNr),e(Gr,ce),e(ce,x0),e(x0,D5e),e(D5e,rNr),e(x0,tNr),e(x0,RZ),e(RZ,aNr),e(x0,nNr),e(ce,sNr),e(ce,$0),e($0,G5e),e(G5e,lNr),e($0,iNr),e($0,PZ),e(PZ,dNr),e($0,cNr),e(ce,mNr),e(ce,k0),e(k0,O5e),e(O5e,fNr),e(k0,gNr),e(k0,BZ),e(BZ,hNr),e(k0,uNr),e(ce,pNr),e(ce,S0),e(S0,V5e),e(V5e,_Nr),e(S0,bNr),e(S0,IZ),e(IZ,vNr),e(S0,FNr),e(ce,TNr),e(ce,R0),e(R0,X5e),e(X5e,MNr),e(R0,ENr),e(R0,NZ),e(NZ,CNr),e(R0,wNr),e(ce,ANr),e(ce,P0),e(P0,z5e),e(z5e,LNr),e(P0,yNr),e(P0,qZ),e(qZ,xNr),e(P0,$Nr),e(ce,kNr),e(ce,B0),e(B0,Q5e),e(Q5e,SNr),e(B0,RNr),e(B0,jZ),e(jZ,PNr),e(B0,BNr),e(ce,INr),e(ce,I0),e(I0,W5e),e(W5e,NNr),e(I0,qNr),e(I0,DZ),e(DZ,jNr),e(I0,DNr),e(ce,GNr),e(ce,N0),e(N0,H5e),e(H5e,ONr),e(N0,VNr),e(N0,GZ),e(GZ,XNr),e(N0,zNr),e(ce,QNr),e(ce,q0),e(q0,U5e),e(U5e,WNr),e(q0,HNr),e(q0,OZ),e(OZ,UNr),e(q0,JNr),e(ce,YNr),e(ce,j0),e(j0,J5e),e(J5e,KNr),e(j0,ZNr),e(j0,VZ),e(VZ,eqr),e(j0,oqr),e(ce,rqr),e(ce,D0),e(D0,Y5e),e(Y5e,tqr),e(D0,aqr),e(D0,XZ),e(XZ,nqr),e(D0,sqr),e(ce,lqr),e(ce,G0),e(G0,K5e),e(K5e,iqr),e(G0,dqr),e(G0,zZ),e(zZ,cqr),e(G0,mqr),e(ce,fqr),e(ce,O0),e(O0,Z5e),e(Z5e,gqr),e(O0,hqr),e(O0,QZ),e(QZ,uqr),e(O0,pqr),e(ce,_qr),e(ce,V0),e(V0,e0e),e(e0e,bqr),e(V0,vqr),e(V0,WZ),e(WZ,Fqr),e(V0,Tqr),e(ce,Mqr),e(ce,X0),e(X0,o0e),e(o0e,Eqr),e(X0,Cqr),e(X0,HZ),e(HZ,wqr),e(X0,Aqr),e(ce,Lqr),e(ce,z0),e(z0,r0e),e(r0e,yqr),e(z0,xqr),e(z0,UZ),e(UZ,$qr),e(z0,kqr),e(ce,Sqr),e(ce,Q0),e(Q0,t0e),e(t0e,Rqr),e(Q0,Pqr),e(Q0,JZ),e(JZ,Bqr),e(Q0,Iqr),e(ce,Nqr),e(ce,W0),e(W0,a0e),e(a0e,qqr),e(W0,jqr),e(W0,YZ),e(YZ,Dqr),e(W0,Gqr),e(ce,Oqr),e(ce,H0),e(H0,n0e),e(n0e,Vqr),e(H0,Xqr),e(H0,KZ),e(KZ,zqr),e(H0,Qqr),e(Gr,Wqr),M(U0,Gr,null),b(m,Zze,_),b(m,Vc,_),e(Vc,J0),e(J0,s0e),M(t$,s0e,null),e(Vc,Hqr),e(Vc,l0e),e(l0e,Uqr),b(m,eQe,_),b(m,hr,_),M(a$,hr,null),e(hr,Jqr),e(hr,Xc),e(Xc,Yqr),e(Xc,ZZ),e(ZZ,Kqr),e(Xc,Zqr),e(Xc,eee),e(eee,ejr),e(Xc,ojr),e(hr,rjr),e(hr,n$),e(n$,tjr),e(n$,i0e),e(i0e,ajr),e(n$,njr),e(hr,sjr),e(hr,zt),M(s$,zt,null),e(zt,ljr),e(zt,d0e),e(d0e,ijr),e(zt,djr),e(zt,zc),e(zc,cjr),e(zc,c0e),e(c0e,mjr),e(zc,fjr),e(zc,oee),e(oee,gjr),e(zc,hjr),e(zt,ujr),M(Y0,zt,null),e(hr,pjr),e(hr,Or),M(l$,Or,null),e(Or,_jr),e(Or,m0e),e(m0e,bjr),e(Or,vjr),e(Or,vn),e(vn,Fjr),e(vn,f0e),e(f0e,Tjr),e(vn,Mjr),e(vn,g0e),e(g0e,Ejr),e(vn,Cjr),e(vn,h0e),e(h0e,wjr),e(vn,Ajr),e(Or,Ljr),e(Or,u0e),e(u0e,K0),e(K0,p0e),e(p0e,yjr),e(K0,xjr),e(K0,ree),e(ree,$jr),e(K0,kjr),e(Or,Sjr),M(Z0,Or,null),b(m,oQe,_),b(m,Qc,_),e(Qc,ew),e(ew,_0e),M(i$,_0e,null),e(Qc,Rjr),e(Qc,b0e),e(b0e,Pjr),b(m,rQe,_),b(m,ur,_),M(d$,ur,null),e(ur,Bjr),e(ur,Wc),e(Wc,Ijr),e(Wc,tee),e(tee,Njr),e(Wc,qjr),e(Wc,aee),e(aee,jjr),e(Wc,Djr),e(ur,Gjr),e(ur,c$),e(c$,Ojr),e(c$,v0e),e(v0e,Vjr),e(c$,Xjr),e(ur,zjr),e(ur,Qt),M(m$,Qt,null),e(Qt,Qjr),e(Qt,F0e),e(F0e,Wjr),e(Qt,Hjr),e(Qt,Hc),e(Hc,Ujr),e(Hc,T0e),e(T0e,Jjr),e(Hc,Yjr),e(Hc,nee),e(nee,Kjr),e(Hc,Zjr),e(Qt,eDr),M(ow,Qt,null),e(ur,oDr),e(ur,Vr),M(f$,Vr,null),e(Vr,rDr),e(Vr,M0e),e(M0e,tDr),e(Vr,aDr),e(Vr,Fn),e(Fn,nDr),e(Fn,E0e),e(E0e,sDr),e(Fn,lDr),e(Fn,C0e),e(C0e,iDr),e(Fn,dDr),e(Fn,w0e),e(w0e,cDr),e(Fn,mDr),e(Vr,fDr),e(Vr,A0e),e(A0e,rw),e(rw,L0e),e(L0e,gDr),e(rw,hDr),e(rw,see),e(see,uDr),e(rw,pDr),e(Vr,_Dr),M(tw,Vr,null),b(m,tQe,_),b(m,Uc,_),e(Uc,aw),e(aw,y0e),M(g$,y0e,null),e(Uc,bDr),e(Uc,x0e),e(x0e,vDr),b(m,aQe,_),b(m,pr,_),M(h$,pr,null),e(pr,FDr),e(pr,Jc),e(Jc,TDr),e(Jc,lee),e(lee,MDr),e(Jc,EDr),e(Jc,iee),e(iee,CDr),e(Jc,wDr),e(pr,ADr),e(pr,u$),e(u$,LDr),e(u$,$0e),e($0e,yDr),e(u$,xDr),e(pr,$Dr),e(pr,Wt),M(p$,Wt,null),e(Wt,kDr),e(Wt,k0e),e(k0e,SDr),e(Wt,RDr),e(Wt,Yc),e(Yc,PDr),e(Yc,S0e),e(S0e,BDr),e(Yc,IDr),e(Yc,dee),e(dee,NDr),e(Yc,qDr),e(Wt,jDr),M(nw,Wt,null),e(pr,DDr),e(pr,Xr),M(_$,Xr,null),e(Xr,GDr),e(Xr,R0e),e(R0e,ODr),e(Xr,VDr),e(Xr,Tn),e(Tn,XDr),e(Tn,P0e),e(P0e,zDr),e(Tn,QDr),e(Tn,B0e),e(B0e,WDr),e(Tn,HDr),e(Tn,I0e),e(I0e,UDr),e(Tn,JDr),e(Xr,YDr),e(Xr,oe),e(oe,sw),e(sw,N0e),e(N0e,KDr),e(sw,ZDr),e(sw,cee),e(cee,eGr),e(sw,oGr),e(oe,rGr),e(oe,lw),e(lw,q0e),e(q0e,tGr),e(lw,aGr),e(lw,mee),e(mee,nGr),e(lw,sGr),e(oe,lGr),e(oe,iw),e(iw,j0e),e(j0e,iGr),e(iw,dGr),e(iw,fee),e(fee,cGr),e(iw,mGr),e(oe,fGr),e(oe,dw),e(dw,D0e),e(D0e,gGr),e(dw,hGr),e(dw,gee),e(gee,uGr),e(dw,pGr),e(oe,_Gr),e(oe,cw),e(cw,G0e),e(G0e,bGr),e(cw,vGr),e(cw,hee),e(hee,FGr),e(cw,TGr),e(oe,MGr),e(oe,mw),e(mw,O0e),e(O0e,EGr),e(mw,CGr),e(mw,uee),e(uee,wGr),e(mw,AGr),e(oe,LGr),e(oe,fw),e(fw,V0e),e(V0e,yGr),e(fw,xGr),e(fw,pee),e(pee,$Gr),e(fw,kGr),e(oe,SGr),e(oe,gw),e(gw,X0e),e(X0e,RGr),e(gw,PGr),e(gw,_ee),e(_ee,BGr),e(gw,IGr),e(oe,NGr),e(oe,hw),e(hw,z0e),e(z0e,qGr),e(hw,jGr),e(hw,bee),e(bee,DGr),e(hw,GGr),e(oe,OGr),e(oe,uw),e(uw,Q0e),e(Q0e,VGr),e(uw,XGr),e(uw,vee),e(vee,zGr),e(uw,QGr),e(oe,WGr),e(oe,pw),e(pw,W0e),e(W0e,HGr),e(pw,UGr),e(pw,Fee),e(Fee,JGr),e(pw,YGr),e(oe,KGr),e(oe,_w),e(_w,H0e),e(H0e,ZGr),e(_w,eOr),e(_w,Tee),e(Tee,oOr),e(_w,rOr),e(oe,tOr),e(oe,bw),e(bw,U0e),e(U0e,aOr),e(bw,nOr),e(bw,Mee),e(Mee,sOr),e(bw,lOr),e(oe,iOr),e(oe,vw),e(vw,J0e),e(J0e,dOr),e(vw,cOr),e(vw,Eee),e(Eee,mOr),e(vw,fOr),e(oe,gOr),e(oe,Fw),e(Fw,Y0e),e(Y0e,hOr),e(Fw,uOr),e(Fw,Cee),e(Cee,pOr),e(Fw,_Or),e(oe,bOr),e(oe,Tw),e(Tw,K0e),e(K0e,vOr),e(Tw,FOr),e(Tw,wee),e(wee,TOr),e(Tw,MOr),e(oe,EOr),e(oe,Mw),e(Mw,Z0e),e(Z0e,COr),e(Mw,wOr),e(Mw,Aee),e(Aee,AOr),e(Mw,LOr),e(oe,yOr),e(oe,Ew),e(Ew,ewe),e(ewe,xOr),e(Ew,$Or),e(Ew,Lee),e(Lee,kOr),e(Ew,SOr),e(oe,ROr),e(oe,Cw),e(Cw,owe),e(owe,POr),e(Cw,BOr),e(Cw,yee),e(yee,IOr),e(Cw,NOr),e(oe,qOr),e(oe,ww),e(ww,rwe),e(rwe,jOr),e(ww,DOr),e(ww,xee),e(xee,GOr),e(ww,OOr),e(oe,VOr),e(oe,Aw),e(Aw,twe),e(twe,XOr),e(Aw,zOr),e(Aw,$ee),e($ee,QOr),e(Aw,WOr),e(oe,HOr),e(oe,Lw),e(Lw,awe),e(awe,UOr),e(Lw,JOr),e(Lw,kee),e(kee,YOr),e(Lw,KOr),e(oe,ZOr),e(oe,yw),e(yw,nwe),e(nwe,eVr),e(yw,oVr),e(yw,See),e(See,rVr),e(yw,tVr),e(oe,aVr),e(oe,xw),e(xw,swe),e(swe,nVr),e(xw,sVr),e(xw,Ree),e(Ree,lVr),e(xw,iVr),e(oe,dVr),e(oe,$w),e($w,lwe),e(lwe,cVr),e($w,mVr),e($w,Pee),e(Pee,fVr),e($w,gVr),e(oe,hVr),e(oe,kw),e(kw,iwe),e(iwe,uVr),e(kw,pVr),e(kw,Bee),e(Bee,_Vr),e(kw,bVr),e(oe,vVr),e(oe,Sw),e(Sw,dwe),e(dwe,FVr),e(Sw,TVr),e(Sw,Iee),e(Iee,MVr),e(Sw,EVr),e(Xr,CVr),M(Rw,Xr,null),b(m,nQe,_),b(m,Kc,_),e(Kc,Pw),e(Pw,cwe),M(b$,cwe,null),e(Kc,wVr),e(Kc,mwe),e(mwe,AVr),b(m,sQe,_),b(m,_r,_),M(v$,_r,null),e(_r,LVr),e(_r,Zc),e(Zc,yVr),e(Zc,Nee),e(Nee,xVr),e(Zc,$Vr),e(Zc,qee),e(qee,kVr),e(Zc,SVr),e(_r,RVr),e(_r,F$),e(F$,PVr),e(F$,fwe),e(fwe,BVr),e(F$,IVr),e(_r,NVr),e(_r,Ht),M(T$,Ht,null),e(Ht,qVr),e(Ht,gwe),e(gwe,jVr),e(Ht,DVr),e(Ht,em),e(em,GVr),e(em,hwe),e(hwe,OVr),e(em,VVr),e(em,jee),e(jee,XVr),e(em,zVr),e(Ht,QVr),M(Bw,Ht,null),e(_r,WVr),e(_r,zr),M(M$,zr,null),e(zr,HVr),e(zr,uwe),e(uwe,UVr),e(zr,JVr),e(zr,Mn),e(Mn,YVr),e(Mn,pwe),e(pwe,KVr),e(Mn,ZVr),e(Mn,_we),e(_we,eXr),e(Mn,oXr),e(Mn,bwe),e(bwe,rXr),e(Mn,tXr),e(zr,aXr),e(zr,xe),e(xe,Iw),e(Iw,vwe),e(vwe,nXr),e(Iw,sXr),e(Iw,Dee),e(Dee,lXr),e(Iw,iXr),e(xe,dXr),e(xe,Nw),e(Nw,Fwe),e(Fwe,cXr),e(Nw,mXr),e(Nw,Gee),e(Gee,fXr),e(Nw,gXr),e(xe,hXr),e(xe,qw),e(qw,Twe),e(Twe,uXr),e(qw,pXr),e(qw,Oee),e(Oee,_Xr),e(qw,bXr),e(xe,vXr),e(xe,jw),e(jw,Mwe),e(Mwe,FXr),e(jw,TXr),e(jw,Vee),e(Vee,MXr),e(jw,EXr),e(xe,CXr),e(xe,Dw),e(Dw,Ewe),e(Ewe,wXr),e(Dw,AXr),e(Dw,Xee),e(Xee,LXr),e(Dw,yXr),e(xe,xXr),e(xe,Gw),e(Gw,Cwe),e(Cwe,$Xr),e(Gw,kXr),e(Gw,zee),e(zee,SXr),e(Gw,RXr),e(xe,PXr),e(xe,Ow),e(Ow,wwe),e(wwe,BXr),e(Ow,IXr),e(Ow,Qee),e(Qee,NXr),e(Ow,qXr),e(xe,jXr),e(xe,Vw),e(Vw,Awe),e(Awe,DXr),e(Vw,GXr),e(Vw,Wee),e(Wee,OXr),e(Vw,VXr),e(xe,XXr),e(xe,Xw),e(Xw,Lwe),e(Lwe,zXr),e(Xw,QXr),e(Xw,Hee),e(Hee,WXr),e(Xw,HXr),e(xe,UXr),e(xe,zw),e(zw,ywe),e(ywe,JXr),e(zw,YXr),e(zw,Uee),e(Uee,KXr),e(zw,ZXr),e(zr,ezr),M(Qw,zr,null),b(m,lQe,_),b(m,om,_),e(om,Ww),e(Ww,xwe),M(E$,xwe,null),e(om,ozr),e(om,$we),e($we,rzr),b(m,iQe,_),b(m,br,_),M(C$,br,null),e(br,tzr),e(br,rm),e(rm,azr),e(rm,Jee),e(Jee,nzr),e(rm,szr),e(rm,Yee),e(Yee,lzr),e(rm,izr),e(br,dzr),e(br,w$),e(w$,czr),e(w$,kwe),e(kwe,mzr),e(w$,fzr),e(br,gzr),e(br,Ut),M(A$,Ut,null),e(Ut,hzr),e(Ut,Swe),e(Swe,uzr),e(Ut,pzr),e(Ut,tm),e(tm,_zr),e(tm,Rwe),e(Rwe,bzr),e(tm,vzr),e(tm,Kee),e(Kee,Fzr),e(tm,Tzr),e(Ut,Mzr),M(Hw,Ut,null),e(br,Ezr),e(br,Qr),M(L$,Qr,null),e(Qr,Czr),e(Qr,Pwe),e(Pwe,wzr),e(Qr,Azr),e(Qr,En),e(En,Lzr),e(En,Bwe),e(Bwe,yzr),e(En,xzr),e(En,Iwe),e(Iwe,$zr),e(En,kzr),e(En,Nwe),e(Nwe,Szr),e(En,Rzr),e(Qr,Pzr),e(Qr,Ee),e(Ee,Uw),e(Uw,qwe),e(qwe,Bzr),e(Uw,Izr),e(Uw,Zee),e(Zee,Nzr),e(Uw,qzr),e(Ee,jzr),e(Ee,Jw),e(Jw,jwe),e(jwe,Dzr),e(Jw,Gzr),e(Jw,eoe),e(eoe,Ozr),e(Jw,Vzr),e(Ee,Xzr),e(Ee,Yw),e(Yw,Dwe),e(Dwe,zzr),e(Yw,Qzr),e(Yw,ooe),e(ooe,Wzr),e(Yw,Hzr),e(Ee,Uzr),e(Ee,Kw),e(Kw,Gwe),e(Gwe,Jzr),e(Kw,Yzr),e(Kw,roe),e(roe,Kzr),e(Kw,Zzr),e(Ee,eQr),e(Ee,Zw),e(Zw,Owe),e(Owe,oQr),e(Zw,rQr),e(Zw,toe),e(toe,tQr),e(Zw,aQr),e(Ee,nQr),e(Ee,eA),e(eA,Vwe),e(Vwe,sQr),e(eA,lQr),e(eA,aoe),e(aoe,iQr),e(eA,dQr),e(Ee,cQr),e(Ee,oA),e(oA,Xwe),e(Xwe,mQr),e(oA,fQr),e(oA,noe),e(noe,gQr),e(oA,hQr),e(Ee,uQr),e(Ee,rA),e(rA,zwe),e(zwe,pQr),e(rA,_Qr),e(rA,soe),e(soe,bQr),e(rA,vQr),e(Ee,FQr),e(Ee,tA),e(tA,Qwe),e(Qwe,TQr),e(tA,MQr),e(tA,loe),e(loe,EQr),e(tA,CQr),e(Ee,wQr),e(Ee,aA),e(aA,Wwe),e(Wwe,AQr),e(aA,LQr),e(aA,ioe),e(ioe,yQr),e(aA,xQr),e(Ee,$Qr),e(Ee,nA),e(nA,Hwe),e(Hwe,kQr),e(nA,SQr),e(nA,doe),e(doe,RQr),e(nA,PQr),e(Ee,BQr),e(Ee,sA),e(sA,Uwe),e(Uwe,IQr),e(sA,NQr),e(sA,coe),e(coe,qQr),e(sA,jQr),e(Ee,DQr),e(Ee,lA),e(lA,Jwe),e(Jwe,GQr),e(lA,OQr),e(lA,moe),e(moe,VQr),e(lA,XQr),e(Qr,zQr),M(iA,Qr,null),b(m,dQe,_),b(m,am,_),e(am,dA),e(dA,Ywe),M(y$,Ywe,null),e(am,QQr),e(am,Kwe),e(Kwe,WQr),b(m,cQe,_),b(m,vr,_),M(x$,vr,null),e(vr,HQr),e(vr,nm),e(nm,UQr),e(nm,foe),e(foe,JQr),e(nm,YQr),e(nm,goe),e(goe,KQr),e(nm,ZQr),e(vr,eWr),e(vr,$$),e($$,oWr),e($$,Zwe),e(Zwe,rWr),e($$,tWr),e(vr,aWr),e(vr,Jt),M(k$,Jt,null),e(Jt,nWr),e(Jt,eAe),e(eAe,sWr),e(Jt,lWr),e(Jt,sm),e(sm,iWr),e(sm,oAe),e(oAe,dWr),e(sm,cWr),e(sm,hoe),e(hoe,mWr),e(sm,fWr),e(Jt,gWr),M(cA,Jt,null),e(vr,hWr),e(vr,Wr),M(S$,Wr,null),e(Wr,uWr),e(Wr,rAe),e(rAe,pWr),e(Wr,_Wr),e(Wr,Cn),e(Cn,bWr),e(Cn,tAe),e(tAe,vWr),e(Cn,FWr),e(Cn,aAe),e(aAe,TWr),e(Cn,MWr),e(Cn,nAe),e(nAe,EWr),e(Cn,CWr),e(Wr,wWr),e(Wr,$e),e($e,mA),e(mA,sAe),e(sAe,AWr),e(mA,LWr),e(mA,uoe),e(uoe,yWr),e(mA,xWr),e($e,$Wr),e($e,fA),e(fA,lAe),e(lAe,kWr),e(fA,SWr),e(fA,poe),e(poe,RWr),e(fA,PWr),e($e,BWr),e($e,gA),e(gA,iAe),e(iAe,IWr),e(gA,NWr),e(gA,_oe),e(_oe,qWr),e(gA,jWr),e($e,DWr),e($e,hA),e(hA,dAe),e(dAe,GWr),e(hA,OWr),e(hA,boe),e(boe,VWr),e(hA,XWr),e($e,zWr),e($e,uA),e(uA,cAe),e(cAe,QWr),e(uA,WWr),e(uA,voe),e(voe,HWr),e(uA,UWr),e($e,JWr),e($e,pA),e(pA,mAe),e(mAe,YWr),e(pA,KWr),e(pA,Foe),e(Foe,ZWr),e(pA,eHr),e($e,oHr),e($e,_A),e(_A,fAe),e(fAe,rHr),e(_A,tHr),e(_A,Toe),e(Toe,aHr),e(_A,nHr),e($e,sHr),e($e,bA),e(bA,gAe),e(gAe,lHr),e(bA,iHr),e(bA,Moe),e(Moe,dHr),e(bA,cHr),e($e,mHr),e($e,vA),e(vA,hAe),e(hAe,fHr),e(vA,gHr),e(vA,Eoe),e(Eoe,hHr),e(vA,uHr),e($e,pHr),e($e,FA),e(FA,uAe),e(uAe,_Hr),e(FA,bHr),e(FA,Coe),e(Coe,vHr),e(FA,FHr),e(Wr,THr),M(TA,Wr,null),b(m,mQe,_),b(m,lm,_),e(lm,MA),e(MA,pAe),M(R$,pAe,null),e(lm,MHr),e(lm,_Ae),e(_Ae,EHr),b(m,fQe,_),b(m,Fr,_),M(P$,Fr,null),e(Fr,CHr),e(Fr,im),e(im,wHr),e(im,woe),e(woe,AHr),e(im,LHr),e(im,Aoe),e(Aoe,yHr),e(im,xHr),e(Fr,$Hr),e(Fr,B$),e(B$,kHr),e(B$,bAe),e(bAe,SHr),e(B$,RHr),e(Fr,PHr),e(Fr,Yt),M(I$,Yt,null),e(Yt,BHr),e(Yt,vAe),e(vAe,IHr),e(Yt,NHr),e(Yt,dm),e(dm,qHr),e(dm,FAe),e(FAe,jHr),e(dm,DHr),e(dm,Loe),e(Loe,GHr),e(dm,OHr),e(Yt,VHr),M(EA,Yt,null),e(Fr,XHr),e(Fr,Hr),M(N$,Hr,null),e(Hr,zHr),e(Hr,TAe),e(TAe,QHr),e(Hr,WHr),e(Hr,wn),e(wn,HHr),e(wn,MAe),e(MAe,UHr),e(wn,JHr),e(wn,EAe),e(EAe,YHr),e(wn,KHr),e(wn,CAe),e(CAe,ZHr),e(wn,eUr),e(Hr,oUr),e(Hr,ke),e(ke,CA),e(CA,wAe),e(wAe,rUr),e(CA,tUr),e(CA,yoe),e(yoe,aUr),e(CA,nUr),e(ke,sUr),e(ke,wA),e(wA,AAe),e(AAe,lUr),e(wA,iUr),e(wA,xoe),e(xoe,dUr),e(wA,cUr),e(ke,mUr),e(ke,AA),e(AA,LAe),e(LAe,fUr),e(AA,gUr),e(AA,$oe),e($oe,hUr),e(AA,uUr),e(ke,pUr),e(ke,LA),e(LA,yAe),e(yAe,_Ur),e(LA,bUr),e(LA,koe),e(koe,vUr),e(LA,FUr),e(ke,TUr),e(ke,yA),e(yA,xAe),e(xAe,MUr),e(yA,EUr),e(yA,Soe),e(Soe,CUr),e(yA,wUr),e(ke,AUr),e(ke,xA),e(xA,$Ae),e($Ae,LUr),e(xA,yUr),e(xA,Roe),e(Roe,xUr),e(xA,$Ur),e(ke,kUr),e(ke,$A),e($A,kAe),e(kAe,SUr),e($A,RUr),e($A,Poe),e(Poe,PUr),e($A,BUr),e(ke,IUr),e(ke,kA),e(kA,SAe),e(SAe,NUr),e(kA,qUr),e(kA,Boe),e(Boe,jUr),e(kA,DUr),e(ke,GUr),e(ke,SA),e(SA,RAe),e(RAe,OUr),e(SA,VUr),e(SA,Ioe),e(Ioe,XUr),e(SA,zUr),e(ke,QUr),e(ke,RA),e(RA,PAe),e(PAe,WUr),e(RA,HUr),e(RA,Noe),e(Noe,UUr),e(RA,JUr),e(Hr,YUr),M(PA,Hr,null),b(m,gQe,_),b(m,cm,_),e(cm,BA),e(BA,BAe),M(q$,BAe,null),e(cm,KUr),e(cm,IAe),e(IAe,ZUr),b(m,hQe,_),b(m,Tr,_),M(j$,Tr,null),e(Tr,eJr),e(Tr,mm),e(mm,oJr),e(mm,qoe),e(qoe,rJr),e(mm,tJr),e(mm,joe),e(joe,aJr),e(mm,nJr),e(Tr,sJr),e(Tr,D$),e(D$,lJr),e(D$,NAe),e(NAe,iJr),e(D$,dJr),e(Tr,cJr),e(Tr,Kt),M(G$,Kt,null),e(Kt,mJr),e(Kt,qAe),e(qAe,fJr),e(Kt,gJr),e(Kt,fm),e(fm,hJr),e(fm,jAe),e(jAe,uJr),e(fm,pJr),e(fm,Doe),e(Doe,_Jr),e(fm,bJr),e(Kt,vJr),M(IA,Kt,null),e(Tr,FJr),e(Tr,Ur),M(O$,Ur,null),e(Ur,TJr),e(Ur,DAe),e(DAe,MJr),e(Ur,EJr),e(Ur,An),e(An,CJr),e(An,GAe),e(GAe,wJr),e(An,AJr),e(An,OAe),e(OAe,LJr),e(An,yJr),e(An,VAe),e(VAe,xJr),e(An,$Jr),e(Ur,kJr),e(Ur,Se),e(Se,NA),e(NA,XAe),e(XAe,SJr),e(NA,RJr),e(NA,Goe),e(Goe,PJr),e(NA,BJr),e(Se,IJr),e(Se,qA),e(qA,zAe),e(zAe,NJr),e(qA,qJr),e(qA,Ooe),e(Ooe,jJr),e(qA,DJr),e(Se,GJr),e(Se,jA),e(jA,QAe),e(QAe,OJr),e(jA,VJr),e(jA,Voe),e(Voe,XJr),e(jA,zJr),e(Se,QJr),e(Se,DA),e(DA,WAe),e(WAe,WJr),e(DA,HJr),e(DA,Xoe),e(Xoe,UJr),e(DA,JJr),e(Se,YJr),e(Se,GA),e(GA,HAe),e(HAe,KJr),e(GA,ZJr),e(GA,zoe),e(zoe,eYr),e(GA,oYr),e(Se,rYr),e(Se,OA),e(OA,UAe),e(UAe,tYr),e(OA,aYr),e(OA,Qoe),e(Qoe,nYr),e(OA,sYr),e(Se,lYr),e(Se,VA),e(VA,JAe),e(JAe,iYr),e(VA,dYr),e(VA,Woe),e(Woe,cYr),e(VA,mYr),e(Se,fYr),e(Se,XA),e(XA,YAe),e(YAe,gYr),e(XA,hYr),e(XA,Hoe),e(Hoe,uYr),e(XA,pYr),e(Se,_Yr),e(Se,zA),e(zA,KAe),e(KAe,bYr),e(zA,vYr),e(zA,Uoe),e(Uoe,FYr),e(zA,TYr),e(Se,MYr),e(Se,QA),e(QA,ZAe),e(ZAe,EYr),e(QA,CYr),e(QA,Joe),e(Joe,wYr),e(QA,AYr),e(Ur,LYr),M(WA,Ur,null),b(m,uQe,_),b(m,gm,_),e(gm,HA),e(HA,e6e),M(V$,e6e,null),e(gm,yYr),e(gm,o6e),e(o6e,xYr),b(m,pQe,_),b(m,Mr,_),M(X$,Mr,null),e(Mr,$Yr),e(Mr,hm),e(hm,kYr),e(hm,Yoe),e(Yoe,SYr),e(hm,RYr),e(hm,Koe),e(Koe,PYr),e(hm,BYr),e(Mr,IYr),e(Mr,z$),e(z$,NYr),e(z$,r6e),e(r6e,qYr),e(z$,jYr),e(Mr,DYr),e(Mr,Zt),M(Q$,Zt,null),e(Zt,GYr),e(Zt,t6e),e(t6e,OYr),e(Zt,VYr),e(Zt,um),e(um,XYr),e(um,a6e),e(a6e,zYr),e(um,QYr),e(um,Zoe),e(Zoe,WYr),e(um,HYr),e(Zt,UYr),M(UA,Zt,null),e(Mr,JYr),e(Mr,Jr),M(W$,Jr,null),e(Jr,YYr),e(Jr,n6e),e(n6e,KYr),e(Jr,ZYr),e(Jr,Ln),e(Ln,eKr),e(Ln,s6e),e(s6e,oKr),e(Ln,rKr),e(Ln,l6e),e(l6e,tKr),e(Ln,aKr),e(Ln,i6e),e(i6e,nKr),e(Ln,sKr),e(Jr,lKr),e(Jr,Re),e(Re,JA),e(JA,d6e),e(d6e,iKr),e(JA,dKr),e(JA,ere),e(ere,cKr),e(JA,mKr),e(Re,fKr),e(Re,YA),e(YA,c6e),e(c6e,gKr),e(YA,hKr),e(YA,ore),e(ore,uKr),e(YA,pKr),e(Re,_Kr),e(Re,KA),e(KA,m6e),e(m6e,bKr),e(KA,vKr),e(KA,rre),e(rre,FKr),e(KA,TKr),e(Re,MKr),e(Re,ZA),e(ZA,f6e),e(f6e,EKr),e(ZA,CKr),e(ZA,tre),e(tre,wKr),e(ZA,AKr),e(Re,LKr),e(Re,e6),e(e6,g6e),e(g6e,yKr),e(e6,xKr),e(e6,are),e(are,$Kr),e(e6,kKr),e(Re,SKr),e(Re,o6),e(o6,h6e),e(h6e,RKr),e(o6,PKr),e(o6,nre),e(nre,BKr),e(o6,IKr),e(Re,NKr),e(Re,r6),e(r6,u6e),e(u6e,qKr),e(r6,jKr),e(r6,sre),e(sre,DKr),e(r6,GKr),e(Re,OKr),e(Re,t6),e(t6,p6e),e(p6e,VKr),e(t6,XKr),e(t6,lre),e(lre,zKr),e(t6,QKr),e(Re,WKr),e(Re,a6),e(a6,_6e),e(_6e,HKr),e(a6,UKr),e(a6,ire),e(ire,JKr),e(a6,YKr),e(Re,KKr),e(Re,n6),e(n6,b6e),e(b6e,ZKr),e(n6,eZr),e(n6,dre),e(dre,oZr),e(n6,rZr),e(Jr,tZr),M(s6,Jr,null),b(m,_Qe,_),b(m,pm,_),e(pm,l6),e(l6,v6e),M(H$,v6e,null),e(pm,aZr),e(pm,F6e),e(F6e,nZr),b(m,bQe,_),b(m,Er,_),M(U$,Er,null),e(Er,sZr),e(Er,_m),e(_m,lZr),e(_m,cre),e(cre,iZr),e(_m,dZr),e(_m,mre),e(mre,cZr),e(_m,mZr),e(Er,fZr),e(Er,J$),e(J$,gZr),e(J$,T6e),e(T6e,hZr),e(J$,uZr),e(Er,pZr),e(Er,ea),M(Y$,ea,null),e(ea,_Zr),e(ea,M6e),e(M6e,bZr),e(ea,vZr),e(ea,bm),e(bm,FZr),e(bm,E6e),e(E6e,TZr),e(bm,MZr),e(bm,fre),e(fre,EZr),e(bm,CZr),e(ea,wZr),M(i6,ea,null),e(Er,AZr),e(Er,Yr),M(K$,Yr,null),e(Yr,LZr),e(Yr,C6e),e(C6e,yZr),e(Yr,xZr),e(Yr,yn),e(yn,$Zr),e(yn,w6e),e(w6e,kZr),e(yn,SZr),e(yn,A6e),e(A6e,RZr),e(yn,PZr),e(yn,L6e),e(L6e,BZr),e(yn,IZr),e(Yr,NZr),e(Yr,Xe),e(Xe,d6),e(d6,y6e),e(y6e,qZr),e(d6,jZr),e(d6,gre),e(gre,DZr),e(d6,GZr),e(Xe,OZr),e(Xe,c6),e(c6,x6e),e(x6e,VZr),e(c6,XZr),e(c6,hre),e(hre,zZr),e(c6,QZr),e(Xe,WZr),e(Xe,m6),e(m6,$6e),e($6e,HZr),e(m6,UZr),e(m6,ure),e(ure,JZr),e(m6,YZr),e(Xe,KZr),e(Xe,f6),e(f6,k6e),e(k6e,ZZr),e(f6,eet),e(f6,pre),e(pre,oet),e(f6,ret),e(Xe,tet),e(Xe,g6),e(g6,S6e),e(S6e,aet),e(g6,net),e(g6,_re),e(_re,set),e(g6,iet),e(Xe,det),e(Xe,h6),e(h6,R6e),e(R6e,cet),e(h6,met),e(h6,bre),e(bre,fet),e(h6,get),e(Xe,het),e(Xe,u6),e(u6,P6e),e(P6e,uet),e(u6,pet),e(u6,vre),e(vre,_et),e(u6,bet),e(Xe,vet),e(Xe,p6),e(p6,B6e),e(B6e,Fet),e(p6,Tet),e(p6,Fre),e(Fre,Met),e(p6,Eet),e(Yr,Cet),M(_6,Yr,null),b(m,vQe,_),b(m,vm,_),e(vm,b6),e(b6,I6e),M(Z$,I6e,null),e(vm,wet),e(vm,N6e),e(N6e,Aet),b(m,FQe,_),b(m,Cr,_),M(ek,Cr,null),e(Cr,Let),e(Cr,Fm),e(Fm,yet),e(Fm,Tre),e(Tre,xet),e(Fm,$et),e(Fm,Mre),e(Mre,ket),e(Fm,Set),e(Cr,Ret),e(Cr,ok),e(ok,Pet),e(ok,q6e),e(q6e,Bet),e(ok,Iet),e(Cr,Net),e(Cr,oa),M(rk,oa,null),e(oa,qet),e(oa,j6e),e(j6e,jet),e(oa,Det),e(oa,Tm),e(Tm,Get),e(Tm,D6e),e(D6e,Oet),e(Tm,Vet),e(Tm,Ere),e(Ere,Xet),e(Tm,zet),e(oa,Qet),M(v6,oa,null),e(Cr,Wet),e(Cr,Kr),M(tk,Kr,null),e(Kr,Het),e(Kr,G6e),e(G6e,Uet),e(Kr,Jet),e(Kr,xn),e(xn,Yet),e(xn,O6e),e(O6e,Ket),e(xn,Zet),e(xn,V6e),e(V6e,eot),e(xn,oot),e(xn,X6e),e(X6e,rot),e(xn,tot),e(Kr,aot),e(Kr,ze),e(ze,F6),e(F6,z6e),e(z6e,not),e(F6,sot),e(F6,Cre),e(Cre,lot),e(F6,iot),e(ze,dot),e(ze,T6),e(T6,Q6e),e(Q6e,cot),e(T6,mot),e(T6,wre),e(wre,fot),e(T6,got),e(ze,hot),e(ze,M6),e(M6,W6e),e(W6e,uot),e(M6,pot),e(M6,Are),e(Are,_ot),e(M6,bot),e(ze,vot),e(ze,E6),e(E6,H6e),e(H6e,Fot),e(E6,Tot),e(E6,Lre),e(Lre,Mot),e(E6,Eot),e(ze,Cot),e(ze,C6),e(C6,U6e),e(U6e,wot),e(C6,Aot),e(C6,yre),e(yre,Lot),e(C6,yot),e(ze,xot),e(ze,w6),e(w6,J6e),e(J6e,$ot),e(w6,kot),e(w6,xre),e(xre,Sot),e(w6,Rot),e(ze,Pot),e(ze,A6),e(A6,Y6e),e(Y6e,Bot),e(A6,Iot),e(A6,$re),e($re,Not),e(A6,qot),e(ze,jot),e(ze,L6),e(L6,K6e),e(K6e,Dot),e(L6,Got),e(L6,kre),e(kre,Oot),e(L6,Vot),e(Kr,Xot),M(y6,Kr,null),b(m,TQe,_),b(m,Mm,_),e(Mm,x6),e(x6,Z6e),M(ak,Z6e,null),e(Mm,zot),e(Mm,e7e),e(e7e,Qot),b(m,MQe,_),b(m,wr,_),M(nk,wr,null),e(wr,Wot),e(wr,Em),e(Em,Hot),e(Em,Sre),e(Sre,Uot),e(Em,Jot),e(Em,Rre),e(Rre,Yot),e(Em,Kot),e(wr,Zot),e(wr,sk),e(sk,ert),e(sk,o7e),e(o7e,ort),e(sk,rrt),e(wr,trt),e(wr,ra),M(lk,ra,null),e(ra,art),e(ra,r7e),e(r7e,nrt),e(ra,srt),e(ra,Cm),e(Cm,lrt),e(Cm,t7e),e(t7e,irt),e(Cm,drt),e(Cm,Pre),e(Pre,crt),e(Cm,mrt),e(ra,frt),M($6,ra,null),e(wr,grt),e(wr,Zr),M(ik,Zr,null),e(Zr,hrt),e(Zr,a7e),e(a7e,urt),e(Zr,prt),e(Zr,$n),e($n,_rt),e($n,n7e),e(n7e,brt),e($n,vrt),e($n,s7e),e(s7e,Frt),e($n,Trt),e($n,l7e),e(l7e,Mrt),e($n,Ert),e(Zr,Crt),e(Zr,i7e),e(i7e,k6),e(k6,d7e),e(d7e,wrt),e(k6,Art),e(k6,Bre),e(Bre,Lrt),e(k6,yrt),e(Zr,xrt),M(S6,Zr,null),b(m,EQe,_),b(m,wm,_),e(wm,R6),e(R6,c7e),M(dk,c7e,null),e(wm,$rt),e(wm,m7e),e(m7e,krt),b(m,CQe,_),b(m,Ar,_),M(ck,Ar,null),e(Ar,Srt),e(Ar,Am),e(Am,Rrt),e(Am,Ire),e(Ire,Prt),e(Am,Brt),e(Am,Nre),e(Nre,Irt),e(Am,Nrt),e(Ar,qrt),e(Ar,mk),e(mk,jrt),e(mk,f7e),e(f7e,Drt),e(mk,Grt),e(Ar,Ort),e(Ar,ta),M(fk,ta,null),e(ta,Vrt),e(ta,g7e),e(g7e,Xrt),e(ta,zrt),e(ta,Lm),e(Lm,Qrt),e(Lm,h7e),e(h7e,Wrt),e(Lm,Hrt),e(Lm,qre),e(qre,Urt),e(Lm,Jrt),e(ta,Yrt),M(P6,ta,null),e(Ar,Krt),e(Ar,et),M(gk,et,null),e(et,Zrt),e(et,u7e),e(u7e,ett),e(et,ott),e(et,kn),e(kn,rtt),e(kn,p7e),e(p7e,ttt),e(kn,att),e(kn,_7e),e(_7e,ntt),e(kn,stt),e(kn,b7e),e(b7e,ltt),e(kn,itt),e(et,dtt),e(et,hk),e(hk,B6),e(B6,v7e),e(v7e,ctt),e(B6,mtt),e(B6,jre),e(jre,ftt),e(B6,gtt),e(hk,htt),e(hk,I6),e(I6,F7e),e(F7e,utt),e(I6,ptt),e(I6,Dre),e(Dre,_tt),e(I6,btt),e(et,vtt),M(N6,et,null),b(m,wQe,_),b(m,ym,_),e(ym,q6),e(q6,T7e),M(uk,T7e,null),e(ym,Ftt),e(ym,M7e),e(M7e,Ttt),b(m,AQe,_),b(m,Lr,_),M(pk,Lr,null),e(Lr,Mtt),e(Lr,xm),e(xm,Ett),e(xm,Gre),e(Gre,Ctt),e(xm,wtt),e(xm,Ore),e(Ore,Att),e(xm,Ltt),e(Lr,ytt),e(Lr,_k),e(_k,xtt),e(_k,E7e),e(E7e,$tt),e(_k,ktt),e(Lr,Stt),e(Lr,aa),M(bk,aa,null),e(aa,Rtt),e(aa,C7e),e(C7e,Ptt),e(aa,Btt),e(aa,$m),e($m,Itt),e($m,w7e),e(w7e,Ntt),e($m,qtt),e($m,Vre),e(Vre,jtt),e($m,Dtt),e(aa,Gtt),M(j6,aa,null),e(Lr,Ott),e(Lr,ot),M(vk,ot,null),e(ot,Vtt),e(ot,A7e),e(A7e,Xtt),e(ot,ztt),e(ot,Sn),e(Sn,Qtt),e(Sn,L7e),e(L7e,Wtt),e(Sn,Htt),e(Sn,y7e),e(y7e,Utt),e(Sn,Jtt),e(Sn,x7e),e(x7e,Ytt),e(Sn,Ktt),e(ot,Ztt),e(ot,$7e),e($7e,D6),e(D6,k7e),e(k7e,eat),e(D6,oat),e(D6,Xre),e(Xre,rat),e(D6,tat),e(ot,aat),M(G6,ot,null),LQe=!0},p(m,[_]){const Fk={};_&2&&(Fk.$$scope={dirty:_,ctx:m}),jm.$set(Fk);const S7e={};_&2&&(S7e.$$scope={dirty:_,ctx:m}),Kg.$set(S7e);const R7e={};_&2&&(R7e.$$scope={dirty:_,ctx:m}),Ph.$set(R7e);const P7e={};_&2&&(P7e.$$scope={dirty:_,ctx:m}),_u.$set(P7e);const Tk={};_&2&&(Tk.$$scope={dirty:_,ctx:m}),bu.$set(Tk);const B7e={};_&2&&(B7e.$$scope={dirty:_,ctx:m}),ju.$set(B7e);const Rn={};_&2&&(Rn.$$scope={dirty:_,ctx:m}),Du.$set(Rn);const I7e={};_&2&&(I7e.$$scope={dirty:_,ctx:m}),Vu.$set(I7e);const N7e={};_&2&&(N7e.$$scope={dirty:_,ctx:m}),H_.$set(N7e);const q7e={};_&2&&(q7e.$$scope={dirty:_,ctx:m}),J_.$set(q7e);const Mk={};_&2&&(Mk.$$scope={dirty:_,ctx:m}),V2.$set(Mk);const j7e={};_&2&&(j7e.$$scope={dirty:_,ctx:m}),z2.$set(j7e);const Ek={};_&2&&(Ek.$$scope={dirty:_,ctx:m}),Rb.$set(Ek);const D7e={};_&2&&(D7e.$$scope={dirty:_,ctx:m}),Bb.$set(D7e);const Ck={};_&2&&(Ck.$$scope={dirty:_,ctx:m}),Tv.$set(Ck);const G7e={};_&2&&(G7e.$$scope={dirty:_,ctx:m}),Ev.$set(G7e);const O7e={};_&2&&(O7e.$$scope={dirty:_,ctx:m}),Xv.$set(O7e);const V7e={};_&2&&(V7e.$$scope={dirty:_,ctx:m}),Qv.$set(V7e);const km={};_&2&&(km.$$scope={dirty:_,ctx:m}),z1.$set(km);const X7e={};_&2&&(X7e.$$scope={dirty:_,ctx:m}),W1.$set(X7e);const z7e={};_&2&&(z7e.$$scope={dirty:_,ctx:m}),wF.$set(z7e);const Q7e={};_&2&&(Q7e.$$scope={dirty:_,ctx:m}),LF.$set(Q7e);const wk={};_&2&&(wk.$$scope={dirty:_,ctx:m}),BF.$set(wk);const W7e={};_&2&&(W7e.$$scope={dirty:_,ctx:m}),NF.$set(W7e);const H7e={};_&2&&(H7e.$$scope={dirty:_,ctx:m}),TT.$set(H7e);const U7e={};_&2&&(U7e.$$scope={dirty:_,ctx:m}),ET.$set(U7e);const nt={};_&2&&(nt.$$scope={dirty:_,ctx:m}),gM.$set(nt);const Ak={};_&2&&(Ak.$$scope={dirty:_,ctx:m}),uM.$set(Ak);const J7e={};_&2&&(J7e.$$scope={dirty:_,ctx:m}),bM.$set(J7e);const Lk={};_&2&&(Lk.$$scope={dirty:_,ctx:m}),FM.$set(Lk);const Y7e={};_&2&&(Y7e.$$scope={dirty:_,ctx:m}),BM.$set(Y7e);const st={};_&2&&(st.$$scope={dirty:_,ctx:m}),NM.$set(st);const K7e={};_&2&&(K7e.$$scope={dirty:_,ctx:m}),DM.$set(K7e);const Sm={};_&2&&(Sm.$$scope={dirty:_,ctx:m}),OM.$set(Sm);const Z7e={};_&2&&(Z7e.$$scope={dirty:_,ctx:m}),zM.$set(Z7e);const eLe={};_&2&&(eLe.$$scope={dirty:_,ctx:m}),WM.$set(eLe);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),a4.$set(L);const O6={};_&2&&(O6.$$scope={dirty:_,ctx:m}),s4.$set(O6);const oLe={};_&2&&(oLe.$$scope={dirty:_,ctx:m}),g4.$set(oLe);const rLe={};_&2&&(rLe.$$scope={dirty:_,ctx:m}),u4.$set(rLe);const V6={};_&2&&(V6.$$scope={dirty:_,ctx:m}),L4.$set(V6);const tLe={};_&2&&(tLe.$$scope={dirty:_,ctx:m}),x4.$set(tLe);const aLe={};_&2&&(aLe.$$scope={dirty:_,ctx:m}),R4.$set(aLe);const X6={};_&2&&(X6.$$scope={dirty:_,ctx:m}),B4.$set(X6);const nLe={};_&2&&(nLe.$$scope={dirty:_,ctx:m}),O4.$set(nLe);const sLe={};_&2&&(sLe.$$scope={dirty:_,ctx:m}),X4.$set(sLe);const z6={};_&2&&(z6.$$scope={dirty:_,ctx:m}),U4.$set(z6);const lLe={};_&2&&(lLe.$$scope={dirty:_,ctx:m}),Y4.$set(lLe);const iLe={};_&2&&(iLe.$$scope={dirty:_,ctx:m}),oE.$set(iLe);const Q6={};_&2&&(Q6.$$scope={dirty:_,ctx:m}),tE.$set(Q6);const dLe={};_&2&&(dLe.$$scope={dirty:_,ctx:m}),sE.$set(dLe);const cLe={};_&2&&(cLe.$$scope={dirty:_,ctx:m}),iE.$set(cLe);const W6={};_&2&&(W6.$$scope={dirty:_,ctx:m}),uE.$set(W6);const mLe={};_&2&&(mLe.$$scope={dirty:_,ctx:m}),_E.$set(mLe);const fLe={};_&2&&(fLe.$$scope={dirty:_,ctx:m}),FE.$set(fLe);const H6={};_&2&&(H6.$$scope={dirty:_,ctx:m}),ME.$set(H6);const gLe={};_&2&&(gLe.$$scope={dirty:_,ctx:m}),vC.$set(gLe);const hLe={};_&2&&(hLe.$$scope={dirty:_,ctx:m}),TC.$set(hLe);const U6={};_&2&&(U6.$$scope={dirty:_,ctx:m}),zC.$set(U6);const uLe={};_&2&&(uLe.$$scope={dirty:_,ctx:m}),WC.$set(uLe);const pLe={};_&2&&(pLe.$$scope={dirty:_,ctx:m}),l3.$set(pLe);const J6={};_&2&&(J6.$$scope={dirty:_,ctx:m}),d3.$set(J6);const _Le={};_&2&&(_Le.$$scope={dirty:_,ctx:m}),_3.$set(_Le);const bLe={};_&2&&(bLe.$$scope={dirty:_,ctx:m}),v3.$set(bLe);const Y6={};_&2&&(Y6.$$scope={dirty:_,ctx:m}),D3.$set(Y6);const vLe={};_&2&&(vLe.$$scope={dirty:_,ctx:m}),O3.$set(vLe);const FLe={};_&2&&(FLe.$$scope={dirty:_,ctx:m}),Z3.$set(FLe);const K6={};_&2&&(K6.$$scope={dirty:_,ctx:m}),o5.$set(K6);const TLe={};_&2&&(TLe.$$scope={dirty:_,ctx:m}),y5.$set(TLe);const MLe={};_&2&&(MLe.$$scope={dirty:_,ctx:m}),$5.$set(MLe);const Z6={};_&2&&(Z6.$$scope={dirty:_,ctx:m}),H5.$set(Z6);const ELe={};_&2&&(ELe.$$scope={dirty:_,ctx:m}),J5.$set(ELe);const CLe={};_&2&&(CLe.$$scope={dirty:_,ctx:m}),Z5.$set(CLe);const e7={};_&2&&(e7.$$scope={dirty:_,ctx:m}),o0.$set(e7);const wLe={};_&2&&(wLe.$$scope={dirty:_,ctx:m}),t0.$set(wLe);const ALe={};_&2&&(ALe.$$scope={dirty:_,ctx:m}),n0.$set(ALe);const o7={};_&2&&(o7.$$scope={dirty:_,ctx:m}),A0.$set(o7);const LLe={};_&2&&(LLe.$$scope={dirty:_,ctx:m}),y0.$set(LLe);const yLe={};_&2&&(yLe.$$scope={dirty:_,ctx:m}),U0.$set(yLe);const r7={};_&2&&(r7.$$scope={dirty:_,ctx:m}),Y0.$set(r7);const xLe={};_&2&&(xLe.$$scope={dirty:_,ctx:m}),Z0.$set(xLe);const $Le={};_&2&&($Le.$$scope={dirty:_,ctx:m}),ow.$set($Le);const t7={};_&2&&(t7.$$scope={dirty:_,ctx:m}),tw.$set(t7);const kLe={};_&2&&(kLe.$$scope={dirty:_,ctx:m}),nw.$set(kLe);const SLe={};_&2&&(SLe.$$scope={dirty:_,ctx:m}),Rw.$set(SLe);const a7={};_&2&&(a7.$$scope={dirty:_,ctx:m}),Bw.$set(a7);const RLe={};_&2&&(RLe.$$scope={dirty:_,ctx:m}),Qw.$set(RLe);const PLe={};_&2&&(PLe.$$scope={dirty:_,ctx:m}),Hw.$set(PLe);const n7={};_&2&&(n7.$$scope={dirty:_,ctx:m}),iA.$set(n7);const BLe={};_&2&&(BLe.$$scope={dirty:_,ctx:m}),cA.$set(BLe);const ILe={};_&2&&(ILe.$$scope={dirty:_,ctx:m}),TA.$set(ILe);const s7={};_&2&&(s7.$$scope={dirty:_,ctx:m}),EA.$set(s7);const NLe={};_&2&&(NLe.$$scope={dirty:_,ctx:m}),PA.$set(NLe);const qLe={};_&2&&(qLe.$$scope={dirty:_,ctx:m}),IA.$set(qLe);const l7={};_&2&&(l7.$$scope={dirty:_,ctx:m}),WA.$set(l7);const jLe={};_&2&&(jLe.$$scope={dirty:_,ctx:m}),UA.$set(jLe);const DLe={};_&2&&(DLe.$$scope={dirty:_,ctx:m}),s6.$set(DLe);const i7={};_&2&&(i7.$$scope={dirty:_,ctx:m}),i6.$set(i7);const GLe={};_&2&&(GLe.$$scope={dirty:_,ctx:m}),_6.$set(GLe);const OLe={};_&2&&(OLe.$$scope={dirty:_,ctx:m}),v6.$set(OLe);const d7={};_&2&&(d7.$$scope={dirty:_,ctx:m}),y6.$set(d7);const VLe={};_&2&&(VLe.$$scope={dirty:_,ctx:m}),$6.$set(VLe);const XLe={};_&2&&(XLe.$$scope={dirty:_,ctx:m}),S6.$set(XLe);const c7={};_&2&&(c7.$$scope={dirty:_,ctx:m}),P6.$set(c7);const zLe={};_&2&&(zLe.$$scope={dirty:_,ctx:m}),N6.$set(zLe);const QLe={};_&2&&(QLe.$$scope={dirty:_,ctx:m}),j6.$set(QLe);const m7={};_&2&&(m7.$$scope={dirty:_,ctx:m}),G6.$set(m7)},i(m){LQe||(E(d.$$.fragment,m),E(Sa.$$.fragment,m),E(cy.$$.fragment,m),E(my.$$.fragment,m),E(jm.$$.fragment,m),E(fy.$$.fragment,m),E(gy.$$.fragment,m),E(py.$$.fragment,m),E(Kg.$$.fragment,m),E(_y.$$.fragment,m),E(by.$$.fragment,m),E(vy.$$.fragment,m),E(My.$$.fragment,m),E(Ph.$$.fragment,m),E(Ey.$$.fragment,m),E(Cy.$$.fragment,m),E(wy.$$.fragment,m),E(yy.$$.fragment,m),E(_u.$$.fragment,m),E(bu.$$.fragment,m),E(xy.$$.fragment,m),E($y.$$.fragment,m),E(ky.$$.fragment,m),E(Py.$$.fragment,m),E(ju.$$.fragment,m),E(Du.$$.fragment,m),E(By.$$.fragment,m),E(Iy.$$.fragment,m),E(Ny.$$.fragment,m),E(jy.$$.fragment,m),E(Vu.$$.fragment,m),E(Dy.$$.fragment,m),E(H_.$$.fragment,m),E(Gy.$$.fragment,m),E(Oy.$$.fragment,m),E(Xy.$$.fragment,m),E(J_.$$.fragment,m),E(zy.$$.fragment,m),E(V2.$$.fragment,m),E(Qy.$$.fragment,m),E(Wy.$$.fragment,m),E(Uy.$$.fragment,m),E(z2.$$.fragment,m),E(Jy.$$.fragment,m),E(Rb.$$.fragment,m),E(Yy.$$.fragment,m),E(Ky.$$.fragment,m),E(e8.$$.fragment,m),E(Bb.$$.fragment,m),E(o8.$$.fragment,m),E(Tv.$$.fragment,m),E(r8.$$.fragment,m),E(t8.$$.fragment,m),E(n8.$$.fragment,m),E(Ev.$$.fragment,m),E(s8.$$.fragment,m),E(Xv.$$.fragment,m),E(l8.$$.fragment,m),E(i8.$$.fragment,m),E(c8.$$.fragment,m),E(Qv.$$.fragment,m),E(m8.$$.fragment,m),E(z1.$$.fragment,m),E(f8.$$.fragment,m),E(g8.$$.fragment,m),E(u8.$$.fragment,m),E(W1.$$.fragment,m),E(p8.$$.fragment,m),E(wF.$$.fragment,m),E(_8.$$.fragment,m),E(b8.$$.fragment,m),E(F8.$$.fragment,m),E(LF.$$.fragment,m),E(T8.$$.fragment,m),E(BF.$$.fragment,m),E(M8.$$.fragment,m),E(E8.$$.fragment,m),E(w8.$$.fragment,m),E(NF.$$.fragment,m),E(A8.$$.fragment,m),E(TT.$$.fragment,m),E(L8.$$.fragment,m),E(y8.$$.fragment,m),E($8.$$.fragment,m),E(ET.$$.fragment,m),E(k8.$$.fragment,m),E(gM.$$.fragment,m),E(S8.$$.fragment,m),E(R8.$$.fragment,m),E(B8.$$.fragment,m),E(uM.$$.fragment,m),E(I8.$$.fragment,m),E(bM.$$.fragment,m),E(N8.$$.fragment,m),E(q8.$$.fragment,m),E(D8.$$.fragment,m),E(FM.$$.fragment,m),E(G8.$$.fragment,m),E(BM.$$.fragment,m),E(O8.$$.fragment,m),E(V8.$$.fragment,m),E(z8.$$.fragment,m),E(NM.$$.fragment,m),E(Q8.$$.fragment,m),E(DM.$$.fragment,m),E(W8.$$.fragment,m),E(H8.$$.fragment,m),E(J8.$$.fragment,m),E(OM.$$.fragment,m),E(Y8.$$.fragment,m),E(zM.$$.fragment,m),E(K8.$$.fragment,m),E(Z8.$$.fragment,m),E(o9.$$.fragment,m),E(WM.$$.fragment,m),E(r9.$$.fragment,m),E(a4.$$.fragment,m),E(t9.$$.fragment,m),E(a9.$$.fragment,m),E(s9.$$.fragment,m),E(s4.$$.fragment,m),E(l9.$$.fragment,m),E(g4.$$.fragment,m),E(i9.$$.fragment,m),E(d9.$$.fragment,m),E(m9.$$.fragment,m),E(u4.$$.fragment,m),E(f9.$$.fragment,m),E(L4.$$.fragment,m),E(g9.$$.fragment,m),E(h9.$$.fragment,m),E(p9.$$.fragment,m),E(x4.$$.fragment,m),E(_9.$$.fragment,m),E(R4.$$.fragment,m),E(v9.$$.fragment,m),E(F9.$$.fragment,m),E(M9.$$.fragment,m),E(B4.$$.fragment,m),E(E9.$$.fragment,m),E(O4.$$.fragment,m),E(C9.$$.fragment,m),E(w9.$$.fragment,m),E(L9.$$.fragment,m),E(X4.$$.fragment,m),E(y9.$$.fragment,m),E(U4.$$.fragment,m),E(x9.$$.fragment,m),E($9.$$.fragment,m),E(S9.$$.fragment,m),E(Y4.$$.fragment,m),E(R9.$$.fragment,m),E(oE.$$.fragment,m),E(B9.$$.fragment,m),E(I9.$$.fragment,m),E(q9.$$.fragment,m),E(tE.$$.fragment,m),E(j9.$$.fragment,m),E(sE.$$.fragment,m),E(D9.$$.fragment,m),E(G9.$$.fragment,m),E(V9.$$.fragment,m),E(iE.$$.fragment,m),E(X9.$$.fragment,m),E(uE.$$.fragment,m),E(z9.$$.fragment,m),E(Q9.$$.fragment,m),E(H9.$$.fragment,m),E(_E.$$.fragment,m),E(U9.$$.fragment,m),E(FE.$$.fragment,m),E(J9.$$.fragment,m),E(Y9.$$.fragment,m),E(Z9.$$.fragment,m),E(ME.$$.fragment,m),E(ex.$$.fragment,m),E(vC.$$.fragment,m),E(ox.$$.fragment,m),E(rx.$$.fragment,m),E(ax.$$.fragment,m),E(TC.$$.fragment,m),E(nx.$$.fragment,m),E(zC.$$.fragment,m),E(sx.$$.fragment,m),E(lx.$$.fragment,m),E(dx.$$.fragment,m),E(WC.$$.fragment,m),E(cx.$$.fragment,m),E(l3.$$.fragment,m),E(mx.$$.fragment,m),E(fx.$$.fragment,m),E(hx.$$.fragment,m),E(d3.$$.fragment,m),E(ux.$$.fragment,m),E(_3.$$.fragment,m),E(px.$$.fragment,m),E(_x.$$.fragment,m),E(vx.$$.fragment,m),E(v3.$$.fragment,m),E(Fx.$$.fragment,m),E(D3.$$.fragment,m),E(Tx.$$.fragment,m),E(Mx.$$.fragment,m),E(Cx.$$.fragment,m),E(O3.$$.fragment,m),E(wx.$$.fragment,m),E(Z3.$$.fragment,m),E(Ax.$$.fragment,m),E(Lx.$$.fragment,m),E(xx.$$.fragment,m),E(o5.$$.fragment,m),E($x.$$.fragment,m),E(y5.$$.fragment,m),E(kx.$$.fragment,m),E(Sx.$$.fragment,m),E(Px.$$.fragment,m),E($5.$$.fragment,m),E(Bx.$$.fragment,m),E(H5.$$.fragment,m),E(Ix.$$.fragment,m),E(Nx.$$.fragment,m),E(jx.$$.fragment,m),E(J5.$$.fragment,m),E(Dx.$$.fragment,m),E(Z5.$$.fragment,m),E(Ox.$$.fragment,m),E(Vx.$$.fragment,m),E(zx.$$.fragment,m),E(o0.$$.fragment,m),E(Qx.$$.fragment,m),E(t0.$$.fragment,m),E(Wx.$$.fragment,m),E(Hx.$$.fragment,m),E(Jx.$$.fragment,m),E(n0.$$.fragment,m),E(Yx.$$.fragment,m),E(A0.$$.fragment,m),E(Kx.$$.fragment,m),E(Zx.$$.fragment,m),E(o$.$$.fragment,m),E(y0.$$.fragment,m),E(r$.$$.fragment,m),E(U0.$$.fragment,m),E(t$.$$.fragment,m),E(a$.$$.fragment,m),E(s$.$$.fragment,m),E(Y0.$$.fragment,m),E(l$.$$.fragment,m),E(Z0.$$.fragment,m),E(i$.$$.fragment,m),E(d$.$$.fragment,m),E(m$.$$.fragment,m),E(ow.$$.fragment,m),E(f$.$$.fragment,m),E(tw.$$.fragment,m),E(g$.$$.fragment,m),E(h$.$$.fragment,m),E(p$.$$.fragment,m),E(nw.$$.fragment,m),E(_$.$$.fragment,m),E(Rw.$$.fragment,m),E(b$.$$.fragment,m),E(v$.$$.fragment,m),E(T$.$$.fragment,m),E(Bw.$$.fragment,m),E(M$.$$.fragment,m),E(Qw.$$.fragment,m),E(E$.$$.fragment,m),E(C$.$$.fragment,m),E(A$.$$.fragment,m),E(Hw.$$.fragment,m),E(L$.$$.fragment,m),E(iA.$$.fragment,m),E(y$.$$.fragment,m),E(x$.$$.fragment,m),E(k$.$$.fragment,m),E(cA.$$.fragment,m),E(S$.$$.fragment,m),E(TA.$$.fragment,m),E(R$.$$.fragment,m),E(P$.$$.fragment,m),E(I$.$$.fragment,m),E(EA.$$.fragment,m),E(N$.$$.fragment,m),E(PA.$$.fragment,m),E(q$.$$.fragment,m),E(j$.$$.fragment,m),E(G$.$$.fragment,m),E(IA.$$.fragment,m),E(O$.$$.fragment,m),E(WA.$$.fragment,m),E(V$.$$.fragment,m),E(X$.$$.fragment,m),E(Q$.$$.fragment,m),E(UA.$$.fragment,m),E(W$.$$.fragment,m),E(s6.$$.fragment,m),E(H$.$$.fragment,m),E(U$.$$.fragment,m),E(Y$.$$.fragment,m),E(i6.$$.fragment,m),E(K$.$$.fragment,m),E(_6.$$.fragment,m),E(Z$.$$.fragment,m),E(ek.$$.fragment,m),E(rk.$$.fragment,m),E(v6.$$.fragment,m),E(tk.$$.fragment,m),E(y6.$$.fragment,m),E(ak.$$.fragment,m),E(nk.$$.fragment,m),E(lk.$$.fragment,m),E($6.$$.fragment,m),E(ik.$$.fragment,m),E(S6.$$.fragment,m),E(dk.$$.fragment,m),E(ck.$$.fragment,m),E(fk.$$.fragment,m),E(P6.$$.fragment,m),E(gk.$$.fragment,m),E(N6.$$.fragment,m),E(uk.$$.fragment,m),E(pk.$$.fragment,m),E(bk.$$.fragment,m),E(j6.$$.fragment,m),E(vk.$$.fragment,m),E(G6.$$.fragment,m),LQe=!0)},o(m){C(d.$$.fragment,m),C(Sa.$$.fragment,m),C(cy.$$.fragment,m),C(my.$$.fragment,m),C(jm.$$.fragment,m),C(fy.$$.fragment,m),C(gy.$$.fragment,m),C(py.$$.fragment,m),C(Kg.$$.fragment,m),C(_y.$$.fragment,m),C(by.$$.fragment,m),C(vy.$$.fragment,m),C(My.$$.fragment,m),C(Ph.$$.fragment,m),C(Ey.$$.fragment,m),C(Cy.$$.fragment,m),C(wy.$$.fragment,m),C(yy.$$.fragment,m),C(_u.$$.fragment,m),C(bu.$$.fragment,m),C(xy.$$.fragment,m),C($y.$$.fragment,m),C(ky.$$.fragment,m),C(Py.$$.fragment,m),C(ju.$$.fragment,m),C(Du.$$.fragment,m),C(By.$$.fragment,m),C(Iy.$$.fragment,m),C(Ny.$$.fragment,m),C(jy.$$.fragment,m),C(Vu.$$.fragment,m),C(Dy.$$.fragment,m),C(H_.$$.fragment,m),C(Gy.$$.fragment,m),C(Oy.$$.fragment,m),C(Xy.$$.fragment,m),C(J_.$$.fragment,m),C(zy.$$.fragment,m),C(V2.$$.fragment,m),C(Qy.$$.fragment,m),C(Wy.$$.fragment,m),C(Uy.$$.fragment,m),C(z2.$$.fragment,m),C(Jy.$$.fragment,m),C(Rb.$$.fragment,m),C(Yy.$$.fragment,m),C(Ky.$$.fragment,m),C(e8.$$.fragment,m),C(Bb.$$.fragment,m),C(o8.$$.fragment,m),C(Tv.$$.fragment,m),C(r8.$$.fragment,m),C(t8.$$.fragment,m),C(n8.$$.fragment,m),C(Ev.$$.fragment,m),C(s8.$$.fragment,m),C(Xv.$$.fragment,m),C(l8.$$.fragment,m),C(i8.$$.fragment,m),C(c8.$$.fragment,m),C(Qv.$$.fragment,m),C(m8.$$.fragment,m),C(z1.$$.fragment,m),C(f8.$$.fragment,m),C(g8.$$.fragment,m),C(u8.$$.fragment,m),C(W1.$$.fragment,m),C(p8.$$.fragment,m),C(wF.$$.fragment,m),C(_8.$$.fragment,m),C(b8.$$.fragment,m),C(F8.$$.fragment,m),C(LF.$$.fragment,m),C(T8.$$.fragment,m),C(BF.$$.fragment,m),C(M8.$$.fragment,m),C(E8.$$.fragment,m),C(w8.$$.fragment,m),C(NF.$$.fragment,m),C(A8.$$.fragment,m),C(TT.$$.fragment,m),C(L8.$$.fragment,m),C(y8.$$.fragment,m),C($8.$$.fragment,m),C(ET.$$.fragment,m),C(k8.$$.fragment,m),C(gM.$$.fragment,m),C(S8.$$.fragment,m),C(R8.$$.fragment,m),C(B8.$$.fragment,m),C(uM.$$.fragment,m),C(I8.$$.fragment,m),C(bM.$$.fragment,m),C(N8.$$.fragment,m),C(q8.$$.fragment,m),C(D8.$$.fragment,m),C(FM.$$.fragment,m),C(G8.$$.fragment,m),C(BM.$$.fragment,m),C(O8.$$.fragment,m),C(V8.$$.fragment,m),C(z8.$$.fragment,m),C(NM.$$.fragment,m),C(Q8.$$.fragment,m),C(DM.$$.fragment,m),C(W8.$$.fragment,m),C(H8.$$.fragment,m),C(J8.$$.fragment,m),C(OM.$$.fragment,m),C(Y8.$$.fragment,m),C(zM.$$.fragment,m),C(K8.$$.fragment,m),C(Z8.$$.fragment,m),C(o9.$$.fragment,m),C(WM.$$.fragment,m),C(r9.$$.fragment,m),C(a4.$$.fragment,m),C(t9.$$.fragment,m),C(a9.$$.fragment,m),C(s9.$$.fragment,m),C(s4.$$.fragment,m),C(l9.$$.fragment,m),C(g4.$$.fragment,m),C(i9.$$.fragment,m),C(d9.$$.fragment,m),C(m9.$$.fragment,m),C(u4.$$.fragment,m),C(f9.$$.fragment,m),C(L4.$$.fragment,m),C(g9.$$.fragment,m),C(h9.$$.fragment,m),C(p9.$$.fragment,m),C(x4.$$.fragment,m),C(_9.$$.fragment,m),C(R4.$$.fragment,m),C(v9.$$.fragment,m),C(F9.$$.fragment,m),C(M9.$$.fragment,m),C(B4.$$.fragment,m),C(E9.$$.fragment,m),C(O4.$$.fragment,m),C(C9.$$.fragment,m),C(w9.$$.fragment,m),C(L9.$$.fragment,m),C(X4.$$.fragment,m),C(y9.$$.fragment,m),C(U4.$$.fragment,m),C(x9.$$.fragment,m),C($9.$$.fragment,m),C(S9.$$.fragment,m),C(Y4.$$.fragment,m),C(R9.$$.fragment,m),C(oE.$$.fragment,m),C(B9.$$.fragment,m),C(I9.$$.fragment,m),C(q9.$$.fragment,m),C(tE.$$.fragment,m),C(j9.$$.fragment,m),C(sE.$$.fragment,m),C(D9.$$.fragment,m),C(G9.$$.fragment,m),C(V9.$$.fragment,m),C(iE.$$.fragment,m),C(X9.$$.fragment,m),C(uE.$$.fragment,m),C(z9.$$.fragment,m),C(Q9.$$.fragment,m),C(H9.$$.fragment,m),C(_E.$$.fragment,m),C(U9.$$.fragment,m),C(FE.$$.fragment,m),C(J9.$$.fragment,m),C(Y9.$$.fragment,m),C(Z9.$$.fragment,m),C(ME.$$.fragment,m),C(ex.$$.fragment,m),C(vC.$$.fragment,m),C(ox.$$.fragment,m),C(rx.$$.fragment,m),C(ax.$$.fragment,m),C(TC.$$.fragment,m),C(nx.$$.fragment,m),C(zC.$$.fragment,m),C(sx.$$.fragment,m),C(lx.$$.fragment,m),C(dx.$$.fragment,m),C(WC.$$.fragment,m),C(cx.$$.fragment,m),C(l3.$$.fragment,m),C(mx.$$.fragment,m),C(fx.$$.fragment,m),C(hx.$$.fragment,m),C(d3.$$.fragment,m),C(ux.$$.fragment,m),C(_3.$$.fragment,m),C(px.$$.fragment,m),C(_x.$$.fragment,m),C(vx.$$.fragment,m),C(v3.$$.fragment,m),C(Fx.$$.fragment,m),C(D3.$$.fragment,m),C(Tx.$$.fragment,m),C(Mx.$$.fragment,m),C(Cx.$$.fragment,m),C(O3.$$.fragment,m),C(wx.$$.fragment,m),C(Z3.$$.fragment,m),C(Ax.$$.fragment,m),C(Lx.$$.fragment,m),C(xx.$$.fragment,m),C(o5.$$.fragment,m),C($x.$$.fragment,m),C(y5.$$.fragment,m),C(kx.$$.fragment,m),C(Sx.$$.fragment,m),C(Px.$$.fragment,m),C($5.$$.fragment,m),C(Bx.$$.fragment,m),C(H5.$$.fragment,m),C(Ix.$$.fragment,m),C(Nx.$$.fragment,m),C(jx.$$.fragment,m),C(J5.$$.fragment,m),C(Dx.$$.fragment,m),C(Z5.$$.fragment,m),C(Ox.$$.fragment,m),C(Vx.$$.fragment,m),C(zx.$$.fragment,m),C(o0.$$.fragment,m),C(Qx.$$.fragment,m),C(t0.$$.fragment,m),C(Wx.$$.fragment,m),C(Hx.$$.fragment,m),C(Jx.$$.fragment,m),C(n0.$$.fragment,m),C(Yx.$$.fragment,m),C(A0.$$.fragment,m),C(Kx.$$.fragment,m),C(Zx.$$.fragment,m),C(o$.$$.fragment,m),C(y0.$$.fragment,m),C(r$.$$.fragment,m),C(U0.$$.fragment,m),C(t$.$$.fragment,m),C(a$.$$.fragment,m),C(s$.$$.fragment,m),C(Y0.$$.fragment,m),C(l$.$$.fragment,m),C(Z0.$$.fragment,m),C(i$.$$.fragment,m),C(d$.$$.fragment,m),C(m$.$$.fragment,m),C(ow.$$.fragment,m),C(f$.$$.fragment,m),C(tw.$$.fragment,m),C(g$.$$.fragment,m),C(h$.$$.fragment,m),C(p$.$$.fragment,m),C(nw.$$.fragment,m),C(_$.$$.fragment,m),C(Rw.$$.fragment,m),C(b$.$$.fragment,m),C(v$.$$.fragment,m),C(T$.$$.fragment,m),C(Bw.$$.fragment,m),C(M$.$$.fragment,m),C(Qw.$$.fragment,m),C(E$.$$.fragment,m),C(C$.$$.fragment,m),C(A$.$$.fragment,m),C(Hw.$$.fragment,m),C(L$.$$.fragment,m),C(iA.$$.fragment,m),C(y$.$$.fragment,m),C(x$.$$.fragment,m),C(k$.$$.fragment,m),C(cA.$$.fragment,m),C(S$.$$.fragment,m),C(TA.$$.fragment,m),C(R$.$$.fragment,m),C(P$.$$.fragment,m),C(I$.$$.fragment,m),C(EA.$$.fragment,m),C(N$.$$.fragment,m),C(PA.$$.fragment,m),C(q$.$$.fragment,m),C(j$.$$.fragment,m),C(G$.$$.fragment,m),C(IA.$$.fragment,m),C(O$.$$.fragment,m),C(WA.$$.fragment,m),C(V$.$$.fragment,m),C(X$.$$.fragment,m),C(Q$.$$.fragment,m),C(UA.$$.fragment,m),C(W$.$$.fragment,m),C(s6.$$.fragment,m),C(H$.$$.fragment,m),C(U$.$$.fragment,m),C(Y$.$$.fragment,m),C(i6.$$.fragment,m),C(K$.$$.fragment,m),C(_6.$$.fragment,m),C(Z$.$$.fragment,m),C(ek.$$.fragment,m),C(rk.$$.fragment,m),C(v6.$$.fragment,m),C(tk.$$.fragment,m),C(y6.$$.fragment,m),C(ak.$$.fragment,m),C(nk.$$.fragment,m),C(lk.$$.fragment,m),C($6.$$.fragment,m),C(ik.$$.fragment,m),C(S6.$$.fragment,m),C(dk.$$.fragment,m),C(ck.$$.fragment,m),C(fk.$$.fragment,m),C(P6.$$.fragment,m),C(gk.$$.fragment,m),C(N6.$$.fragment,m),C(uk.$$.fragment,m),C(pk.$$.fragment,m),C(bk.$$.fragment,m),C(j6.$$.fragment,m),C(vk.$$.fragment,m),C(G6.$$.fragment,m),LQe=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(Pm),m&&t(lt),m&&t(Oe),m&&t(We),m&&t(Im),w(Sa,m),m&&t(He),m&&t(Ae),m&&t(Ao),m&&t(Ra),m&&t(MXe),m&&t(Bi),w(cy),m&&t(EXe),m&&t(qn),m&&t(CXe),w(my,m),m&&t(wXe),m&&t(WS),m&&t(AXe),w(jm,m),m&&t(LXe),m&&t(Ii),w(fy),m&&t(yXe),m&&t(Lo),w(gy),w(py),w(Kg),w(_y),m&&t(xXe),m&&t(qi),w(by),m&&t($Xe),m&&t(yo),w(vy),w(My),w(Ph),w(Ey),m&&t(kXe),m&&t(ji),w(Cy),m&&t(SXe),m&&t(xo),w(wy),w(yy),w(_u),w(bu),w(xy),m&&t(RXe),m&&t(Di),w($y),m&&t(PXe),m&&t($o),w(ky),w(Py),w(ju),w(Du),w(By),m&&t(BXe),m&&t(Oi),w(Iy),m&&t(IXe),m&&t(ko),w(Ny),w(jy),w(Vu),w(Dy),w(H_),m&&t(NXe),m&&t(zi),w(Gy),m&&t(qXe),m&&t(So),w(Oy),w(Xy),w(J_),w(zy),w(V2),m&&t(jXe),m&&t(Hi),w(Qy),m&&t(DXe),m&&t(Ro),w(Wy),w(Uy),w(z2),w(Jy),w(Rb),m&&t(GXe),m&&t(Yi),w(Yy),m&&t(OXe),m&&t(Po),w(Ky),w(e8),w(Bb),w(o8),w(Tv),m&&t(VXe),m&&t(ed),w(r8),m&&t(XXe),m&&t(Bo),w(t8),w(n8),w(Ev),w(s8),w(Xv),m&&t(zXe),m&&t(td),w(l8),m&&t(QXe),m&&t(Io),w(i8),w(c8),w(Qv),w(m8),w(z1),m&&t(WXe),m&&t(sd),w(f8),m&&t(HXe),m&&t(No),w(g8),w(u8),w(W1),w(p8),w(wF),m&&t(UXe),m&&t(dd),w(_8),m&&t(JXe),m&&t(qo),w(b8),w(F8),w(LF),w(T8),w(BF),m&&t(YXe),m&&t(fd),w(M8),m&&t(KXe),m&&t(Do),w(E8),w(w8),w(NF),w(A8),w(TT),m&&t(ZXe),m&&t(ud),w(L8),m&&t(eze),m&&t(Go),w(y8),w($8),w(ET),w(k8),w(gM),m&&t(oze),m&&t(bd),w(S8),m&&t(rze),m&&t(Oo),w(R8),w(B8),w(uM),w(I8),w(bM),m&&t(tze),m&&t(Td),w(N8),m&&t(aze),m&&t(Vo),w(q8),w(D8),w(FM),w(G8),w(BM),m&&t(nze),m&&t(Cd),w(O8),m&&t(sze),m&&t(Xo),w(V8),w(z8),w(NM),w(Q8),w(DM),m&&t(lze),m&&t(Ld),w(W8),m&&t(ize),m&&t(zo),w(H8),w(J8),w(OM),w(Y8),w(zM),m&&t(dze),m&&t($d),w(K8),m&&t(cze),m&&t(Qo),w(Z8),w(o9),w(WM),w(r9),w(a4),m&&t(mze),m&&t(Rd),w(t9),m&&t(fze),m&&t(Wo),w(a9),w(s9),w(s4),w(l9),w(g4),m&&t(gze),m&&t(Id),w(i9),m&&t(hze),m&&t(Ho),w(d9),w(m9),w(u4),w(f9),w(L4),m&&t(uze),m&&t(jd),w(g9),m&&t(pze),m&&t(Uo),w(h9),w(p9),w(x4),w(_9),w(R4),m&&t(_ze),m&&t(Od),w(v9),m&&t(bze),m&&t(Jo),w(F9),w(M9),w(B4),w(E9),w(O4),m&&t(vze),m&&t(zd),w(C9),m&&t(Fze),m&&t(Yo),w(w9),w(L9),w(X4),w(y9),w(U4),m&&t(Tze),m&&t(Ud),w(x9),m&&t(Mze),m&&t(Ko),w($9),w(S9),w(Y4),w(R9),w(oE),m&&t(Eze),m&&t(Kd),w(B9),m&&t(Cze),m&&t(Zo),w(I9),w(q9),w(tE),w(j9),w(sE),m&&t(wze),m&&t(oc),w(D9),m&&t(Aze),m&&t(er),w(G9),w(V9),w(iE),w(X9),w(uE),m&&t(Lze),m&&t(ac),w(z9),m&&t(yze),m&&t(or),w(Q9),w(H9),w(_E),w(U9),w(FE),m&&t(xze),m&&t(lc),w(J9),m&&t($ze),m&&t(rr),w(Y9),w(Z9),w(ME),w(ex),w(vC),m&&t(kze),m&&t(cc),w(ox),m&&t(Sze),m&&t(tr),w(rx),w(ax),w(TC),w(nx),w(zC),m&&t(Rze),m&&t(gc),w(sx),m&&t(Pze),m&&t(ar),w(lx),w(dx),w(WC),w(cx),w(l3),m&&t(Bze),m&&t(pc),w(mx),m&&t(Ize),m&&t(nr),w(fx),w(hx),w(d3),w(ux),w(_3),m&&t(Nze),m&&t(vc),w(px),m&&t(qze),m&&t(sr),w(_x),w(vx),w(v3),w(Fx),w(D3),m&&t(jze),m&&t(Mc),w(Tx),m&&t(Dze),m&&t(lr),w(Mx),w(Cx),w(O3),w(wx),w(Z3),m&&t(Gze),m&&t(wc),w(Ax),m&&t(Oze),m&&t(ir),w(Lx),w(xx),w(o5),w($x),w(y5),m&&t(Vze),m&&t(yc),w(kx),m&&t(Xze),m&&t(dr),w(Sx),w(Px),w($5),w(Bx),w(H5),m&&t(zze),m&&t(kc),w(Ix),m&&t(Qze),m&&t(cr),w(Nx),w(jx),w(J5),w(Dx),w(Z5),m&&t(Wze),m&&t(Pc),w(Ox),m&&t(Hze),m&&t(mr),w(Vx),w(zx),w(o0),w(Qx),w(t0),m&&t(Uze),m&&t(Nc),w(Wx),m&&t(Jze),m&&t(fr),w(Hx),w(Jx),w(n0),w(Yx),w(A0),m&&t(Yze),m&&t(Dc),w(Kx),m&&t(Kze),m&&t(gr),w(Zx),w(o$),w(y0),w(r$),w(U0),m&&t(Zze),m&&t(Vc),w(t$),m&&t(eQe),m&&t(hr),w(a$),w(s$),w(Y0),w(l$),w(Z0),m&&t(oQe),m&&t(Qc),w(i$),m&&t(rQe),m&&t(ur),w(d$),w(m$),w(ow),w(f$),w(tw),m&&t(tQe),m&&t(Uc),w(g$),m&&t(aQe),m&&t(pr),w(h$),w(p$),w(nw),w(_$),w(Rw),m&&t(nQe),m&&t(Kc),w(b$),m&&t(sQe),m&&t(_r),w(v$),w(T$),w(Bw),w(M$),w(Qw),m&&t(lQe),m&&t(om),w(E$),m&&t(iQe),m&&t(br),w(C$),w(A$),w(Hw),w(L$),w(iA),m&&t(dQe),m&&t(am),w(y$),m&&t(cQe),m&&t(vr),w(x$),w(k$),w(cA),w(S$),w(TA),m&&t(mQe),m&&t(lm),w(R$),m&&t(fQe),m&&t(Fr),w(P$),w(I$),w(EA),w(N$),w(PA),m&&t(gQe),m&&t(cm),w(q$),m&&t(hQe),m&&t(Tr),w(j$),w(G$),w(IA),w(O$),w(WA),m&&t(uQe),m&&t(gm),w(V$),m&&t(pQe),m&&t(Mr),w(X$),w(Q$),w(UA),w(W$),w(s6),m&&t(_Qe),m&&t(pm),w(H$),m&&t(bQe),m&&t(Er),w(U$),w(Y$),w(i6),w(K$),w(_6),m&&t(vQe),m&&t(vm),w(Z$),m&&t(FQe),m&&t(Cr),w(ek),w(rk),w(v6),w(tk),w(y6),m&&t(TQe),m&&t(Mm),w(ak),m&&t(MQe),m&&t(wr),w(nk),w(lk),w($6),w(ik),w(S6),m&&t(EQe),m&&t(wm),w(dk),m&&t(CQe),m&&t(Ar),w(ck),w(fk),w(P6),w(gk),w(N6),m&&t(wQe),m&&t(ym),w(uk),m&&t(AQe),m&&t(Lr),w(pk),w(bk),w(j6),w(vk),w(G6)}}}const YUt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function KUt($){return JWt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class nJt extends QWt{constructor(g){super();WWt(this,g,KUt,JUt,HWt,{})}}export{nJt as default,YUt as metadata};
