import{S as _Ma,i as bMa,s as vMa,e as a,k as l,w as F,t as o,M as FMa,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as TMa,L as j}from"../../chunks/vendor-hf-doc-builder.js";import{T as b5t}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as B}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as q}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function MMa($){let g,v,u,f,p,d,h,xo,cd,Pf,bt,md,fd,Sx,Bf,Xe,He,gd,ns,Rx,ss,ls,Px,hd,is,Bx,ud,If,Ja;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("~transformer.PretrainedConfig"),xo=o(`, make sure its
`),cd=a("code"),Pf=o("model_type"),bt=o(" attribute is set to the same key you use when registering the config (here "),md=a("code"),fd=o('"new-model"'),Sx=o(")."),Bf=l(),Xe=a("p"),He=o("Likewise, if your "),gd=a("code"),ns=o("NewModel"),Rx=o(" is a subclass of "),ss=a("a"),ls=o("PreTrainedModel"),Px=o(`, make sure its
`),hd=a("code"),is=o("config_class"),Bx=o(` attribute is set to the same class you use when registering the model (here
`),ud=a("code"),If=o("NewModelConfig"),Ja=o(")."),this.h()},l(Je){g=n(Je,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var OI=s(u);f=r(OI,"NewModelConfig"),OI.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var pd=s(d);h=r(pd,"~transformer.PretrainedConfig"),pd.forEach(t),xo=r(Ae,`, make sure its
`),cd=n(Ae,"CODE",{});var VI=s(cd);Pf=r(VI,"model_type"),VI.forEach(t),bt=r(Ae," attribute is set to the same key you use when registering the config (here "),md=n(Ae,"CODE",{});var XI=s(md);fd=r(XI,'"new-model"'),XI.forEach(t),Sx=r(Ae,")."),Ae.forEach(t),Bf=i(Je),Xe=n(Je,"P",{});var $o=s(Xe);He=r($o,"Likewise, if your "),gd=n($o,"CODE",{});var Ya=s(gd);ns=r(Ya,"NewModel"),Ya.forEach(t),Rx=r($o," is a subclass of "),ss=n($o,"A",{href:!0});var zI=s(ss);ls=r(zI,"PreTrainedModel"),zI.forEach(t),Px=r($o,`, make sure its
`),hd=n($o,"CODE",{});var Nf=s(hd);is=r(Nf,"config_class"),Nf.forEach(t),Bx=r($o,` attribute is set to the same class you use when registering the model (here
`),ud=n($o,"CODE",{});var QI=s(ud);If=r(QI,"NewModelConfig"),QI.forEach(t),Ja=r($o,")."),$o.forEach(t),this.h()},h(){c(ss,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(Je,Ae){b(Je,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,xo),e(g,cd),e(cd,Pf),e(g,bt),e(g,md),e(md,fd),e(g,Sx),b(Je,Bf,Ae),b(Je,Xe,Ae),e(Xe,He),e(Xe,gd),e(gd,ns),e(Xe,Rx),e(Xe,ss),e(ss,ls),e(Xe,Px),e(Xe,hd),e(hd,is),e(Xe,Bx),e(Xe,ud),e(ud,If),e(Xe,Ja)},d(Je){Je&&t(g),Je&&t(Bf),Je&&t(Xe)}}}function EMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wMa($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var xo=s(u);f=r(xo,"use_auth_token=True"),xo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function AMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LMa($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var xo=s(u);f=r(xo,"use_auth_token=True"),xo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function yMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Ma($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function IMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function UMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")
model = AutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")

# Update configuration during loading
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/layoutlm_tf_model_config.json")
model = AutoModelForDocumentQuestionAnswering.from_pretrained(
    "./tf_model/layoutlm_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/layoutlm_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/layoutlm_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KMa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Ea($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function TEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function EEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function AEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForZeroShotObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForZeroShotObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForZeroShotObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForZeroShotObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForZeroShotObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForZeroShotObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForZeroShotObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForZeroShotObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForZeroShotObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForZeroShotObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForZeroShotObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForZeroShotObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Ea($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function REa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function IEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function UEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")
model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")

# Update configuration during loading
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/layoutlm_pt_model_config.json")
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
    "./pt_model/layoutlm_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/layoutlm_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/layoutlm_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KEa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function e4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function o4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function r4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function t4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function a4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function n4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function s4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function l4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function i4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function d4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function c4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function m4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function f4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function g4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function h4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function u4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function p4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function b4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function v4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function F4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function T4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function M4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function E4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function C4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function w4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function A4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function L4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function y4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function x4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $4a($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:j,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function k4a($){let g,v,u,f,p,d,h,xo,cd,Pf,bt,md,fd,Sx,Bf,Xe,He,gd,ns,Rx,ss,ls,Px,hd,is,Bx,ud,If,Ja,Je,Ae,OI,pd,VI,XI,$o,Ya,zI,Nf,QI,xso,Hoo,_d,qf,hme,Ix,$so,ume,kso,Joo,ds,Sso,pme,Rso,Pso,_me,Bso,Iso,Yoo,Nx,Zoo,WI,Nso,Koo,jf,ero,bd,Df,bme,qx,qso,vme,jso,oro,ko,jx,Dso,Dx,Gso,UI,Oso,Vso,Xso,Gx,zso,Fme,Qso,Wso,Uso,Ir,Ox,Hso,Tme,Jso,Yso,vd,Zso,Mme,Kso,elo,Eme,olo,rlo,tlo,A,Gf,Cme,alo,nlo,HI,slo,llo,ilo,Of,wme,dlo,clo,JI,mlo,flo,glo,Vf,Ame,hlo,ulo,YI,plo,_lo,blo,Xf,Lme,vlo,Flo,ZI,Tlo,Mlo,Elo,zf,yme,Clo,wlo,KI,Alo,Llo,ylo,Qf,xme,xlo,$lo,eN,klo,Slo,Rlo,Wf,$me,Plo,Blo,oN,Ilo,Nlo,qlo,Uf,kme,jlo,Dlo,rN,Glo,Olo,Vlo,Hf,Sme,Xlo,zlo,tN,Qlo,Wlo,Ulo,Jf,Rme,Hlo,Jlo,aN,Ylo,Zlo,Klo,Yf,Pme,eio,oio,nN,rio,tio,aio,Zf,Bme,nio,sio,sN,lio,iio,dio,Kf,Ime,cio,mio,lN,fio,gio,hio,eg,Nme,uio,pio,iN,_io,bio,vio,og,qme,Fio,Tio,dN,Mio,Eio,Cio,rg,jme,wio,Aio,cN,Lio,yio,xio,tg,Dme,$io,kio,mN,Sio,Rio,Pio,ag,Gme,Bio,Iio,fN,Nio,qio,jio,ng,Ome,Dio,Gio,gN,Oio,Vio,Xio,sg,Vme,zio,Qio,hN,Wio,Uio,Hio,lg,Xme,Jio,Yio,uN,Zio,Kio,edo,ig,zme,odo,rdo,pN,tdo,ado,ndo,dg,Qme,sdo,ldo,_N,ido,ddo,cdo,cg,Wme,mdo,fdo,bN,gdo,hdo,udo,mg,Ume,pdo,_do,vN,bdo,vdo,Fdo,fg,Hme,Tdo,Mdo,FN,Edo,Cdo,wdo,gg,Jme,Ado,Ldo,TN,ydo,xdo,$do,hg,Yme,kdo,Sdo,MN,Rdo,Pdo,Bdo,ug,Zme,Ido,Ndo,EN,qdo,jdo,Ddo,pg,Kme,Gdo,Odo,CN,Vdo,Xdo,zdo,_g,efe,Qdo,Wdo,wN,Udo,Hdo,Jdo,bg,ofe,Ydo,Zdo,AN,Kdo,eco,oco,vg,rfe,rco,tco,LN,aco,nco,sco,Fg,tfe,lco,ico,yN,dco,cco,mco,Tg,afe,fco,gco,xN,hco,uco,pco,Mg,nfe,_co,bco,$N,vco,Fco,Tco,Eg,sfe,Mco,Eco,kN,Cco,wco,Aco,Cg,lfe,Lco,yco,SN,xco,$co,kco,wg,ife,Sco,Rco,RN,Pco,Bco,Ico,Ag,dfe,Nco,qco,PN,jco,Dco,Gco,Lg,cfe,Oco,Vco,BN,Xco,zco,Qco,yg,mfe,Wco,Uco,IN,Hco,Jco,Yco,xg,ffe,Zco,Kco,NN,emo,omo,rmo,$g,gfe,tmo,amo,qN,nmo,smo,lmo,kg,hfe,imo,dmo,jN,cmo,mmo,fmo,Sg,ufe,gmo,hmo,DN,umo,pmo,_mo,Rg,pfe,bmo,vmo,GN,Fmo,Tmo,Mmo,Pg,_fe,Emo,Cmo,ON,wmo,Amo,Lmo,Bg,bfe,ymo,xmo,VN,$mo,kmo,Smo,Ig,vfe,Rmo,Pmo,XN,Bmo,Imo,Nmo,Ng,Ffe,qmo,jmo,zN,Dmo,Gmo,Omo,qg,Tfe,Vmo,Xmo,QN,zmo,Qmo,Wmo,jg,Mfe,Umo,Hmo,WN,Jmo,Ymo,Zmo,Dg,Efe,Kmo,efo,UN,ofo,rfo,tfo,Gg,Cfe,afo,nfo,HN,sfo,lfo,ifo,Og,wfe,dfo,cfo,JN,mfo,ffo,gfo,Vg,Afe,hfo,ufo,YN,pfo,_fo,bfo,Xg,Lfe,vfo,Ffo,ZN,Tfo,Mfo,Efo,zg,yfe,Cfo,wfo,KN,Afo,Lfo,yfo,Qg,xfe,xfo,$fo,eq,kfo,Sfo,Rfo,Wg,$fe,Pfo,Bfo,oq,Ifo,Nfo,qfo,Ug,kfe,jfo,Dfo,rq,Gfo,Ofo,Vfo,Hg,Sfe,Xfo,zfo,tq,Qfo,Wfo,Ufo,Jg,Rfe,Hfo,Jfo,aq,Yfo,Zfo,Kfo,Yg,Pfe,ego,ogo,nq,rgo,tgo,ago,Zg,Bfe,ngo,sgo,sq,lgo,igo,dgo,Kg,Ife,cgo,mgo,lq,fgo,ggo,hgo,eh,Nfe,ugo,pgo,iq,_go,bgo,vgo,oh,qfe,Fgo,Tgo,dq,Mgo,Ego,Cgo,rh,jfe,wgo,Ago,cq,Lgo,ygo,xgo,th,Dfe,$go,kgo,mq,Sgo,Rgo,Pgo,ah,Gfe,Bgo,Igo,fq,Ngo,qgo,jgo,nh,Ofe,Dgo,Ggo,gq,Ogo,Vgo,Xgo,sh,Vfe,zgo,Qgo,hq,Wgo,Ugo,Hgo,lh,Xfe,Jgo,Ygo,uq,Zgo,Kgo,eho,ih,zfe,oho,rho,pq,tho,aho,nho,dh,Qfe,sho,lho,_q,iho,dho,cho,ch,Wfe,mho,fho,bq,gho,hho,uho,mh,Ufe,pho,_ho,vq,bho,vho,Fho,fh,Hfe,Tho,Mho,Fq,Eho,Cho,who,gh,Jfe,Aho,Lho,Tq,yho,xho,$ho,hh,Yfe,kho,Sho,Mq,Rho,Pho,Bho,uh,Zfe,Iho,Nho,Eq,qho,jho,Dho,ph,Kfe,Gho,Oho,Cq,Vho,Xho,zho,_h,ege,Qho,Who,wq,Uho,Hho,Jho,bh,oge,Yho,Zho,Aq,Kho,euo,ouo,vh,rge,ruo,tuo,Lq,auo,nuo,suo,Fh,tge,luo,iuo,yq,duo,cuo,muo,Th,age,fuo,guo,xq,huo,uuo,puo,Mh,nge,_uo,buo,$q,vuo,Fuo,Tuo,Eh,sge,Muo,Euo,kq,Cuo,wuo,Auo,Ch,lge,Luo,yuo,Sq,xuo,$uo,kuo,wh,ige,Suo,Ruo,Rq,Puo,Buo,Iuo,Ah,dge,Nuo,quo,Pq,juo,Duo,Guo,Lh,cge,Ouo,Vuo,Bq,Xuo,zuo,Quo,yh,mge,Wuo,Uuo,Iq,Huo,Juo,Yuo,xh,fge,Zuo,Kuo,Nq,epo,opo,rpo,$h,gge,tpo,apo,qq,npo,spo,lpo,kh,hge,ipo,dpo,jq,cpo,mpo,fpo,Sh,uge,gpo,hpo,Dq,upo,ppo,_po,Rh,pge,bpo,vpo,Gq,Fpo,Tpo,Mpo,Ph,_ge,Epo,Cpo,Oq,wpo,Apo,Lpo,Bh,bge,ypo,xpo,Vq,$po,kpo,Spo,Ih,vge,Rpo,Ppo,Xq,Bpo,Ipo,Npo,Nh,Fge,qpo,jpo,zq,Dpo,Gpo,Opo,qh,Tge,Vpo,Xpo,Qq,zpo,Qpo,Wpo,jh,Mge,Upo,Hpo,Wq,Jpo,Ypo,Zpo,Dh,Ege,Kpo,e_o,Uq,o_o,r_o,t_o,Gh,Cge,a_o,n_o,Hq,s_o,l_o,i_o,Oh,wge,d_o,c_o,Jq,m_o,f_o,g_o,Vh,Age,h_o,u_o,Yq,p_o,__o,b_o,Xh,Lge,v_o,F_o,Zq,T_o,M_o,E_o,zh,yge,C_o,w_o,Kq,A_o,L_o,y_o,Qh,xge,x_o,$_o,ej,k_o,S_o,R_o,Wh,$ge,P_o,B_o,oj,I_o,N_o,q_o,Uh,kge,j_o,D_o,rj,G_o,O_o,V_o,Hh,Sge,X_o,z_o,tj,Q_o,W_o,U_o,Jh,Rge,H_o,J_o,aj,Y_o,Z_o,K_o,Yh,Pge,e1o,o1o,nj,r1o,t1o,a1o,Zh,Bge,n1o,s1o,sj,l1o,i1o,d1o,Kh,Ige,c1o,m1o,lj,f1o,g1o,h1o,eu,Nge,u1o,p1o,ij,_1o,b1o,v1o,ou,qge,F1o,T1o,dj,M1o,E1o,C1o,ru,jge,w1o,A1o,cj,L1o,y1o,x1o,tu,Dge,$1o,k1o,mj,S1o,R1o,P1o,au,Gge,B1o,I1o,fj,N1o,q1o,j1o,nu,Oge,D1o,G1o,gj,O1o,V1o,X1o,su,Vge,z1o,Q1o,hj,W1o,U1o,H1o,lu,Xge,J1o,Y1o,uj,Z1o,K1o,e2o,iu,zge,o2o,r2o,pj,t2o,a2o,n2o,du,Qge,s2o,l2o,_j,i2o,d2o,c2o,cu,Wge,m2o,f2o,bj,g2o,h2o,u2o,mu,Uge,p2o,_2o,vj,b2o,v2o,F2o,fu,Hge,T2o,M2o,Fj,E2o,C2o,w2o,gu,A2o,hu,Vx,L2o,Jge,y2o,rro,Fd,uu,Yge,Xx,x2o,Zge,$2o,tro,So,zx,k2o,Qx,S2o,Tj,R2o,P2o,B2o,Wx,I2o,Kge,N2o,q2o,j2o,Nr,Ux,D2o,ehe,G2o,O2o,Za,V2o,ohe,X2o,z2o,rhe,Q2o,W2o,the,U2o,H2o,J2o,k,cs,ahe,Y2o,Z2o,Mj,K2o,ebo,Ej,obo,rbo,tbo,ms,nhe,abo,nbo,Cj,sbo,lbo,wj,ibo,dbo,cbo,fs,she,mbo,fbo,Aj,gbo,hbo,Lj,ubo,pbo,_bo,pu,lhe,bbo,vbo,yj,Fbo,Tbo,Mbo,gs,ihe,Ebo,Cbo,xj,wbo,Abo,$j,Lbo,ybo,xbo,_u,dhe,$bo,kbo,kj,Sbo,Rbo,Pbo,bu,che,Bbo,Ibo,Sj,Nbo,qbo,jbo,vu,mhe,Dbo,Gbo,Rj,Obo,Vbo,Xbo,hs,fhe,zbo,Qbo,Pj,Wbo,Ubo,Bj,Hbo,Jbo,Ybo,us,ghe,Zbo,Kbo,Ij,evo,ovo,Nj,rvo,tvo,avo,ps,hhe,nvo,svo,qj,lvo,ivo,jj,dvo,cvo,mvo,Fu,uhe,fvo,gvo,Dj,hvo,uvo,pvo,Tu,phe,_vo,bvo,Gj,vvo,Fvo,Tvo,Mu,_he,Mvo,Evo,Oj,Cvo,wvo,Avo,_s,bhe,Lvo,yvo,Vj,xvo,$vo,Xj,kvo,Svo,Rvo,Eu,vhe,Pvo,Bvo,zj,Ivo,Nvo,qvo,bs,Fhe,jvo,Dvo,Qj,Gvo,Ovo,Wj,Vvo,Xvo,zvo,vs,The,Qvo,Wvo,Uj,Uvo,Hvo,Hj,Jvo,Yvo,Zvo,Fs,Mhe,Kvo,eFo,Jj,oFo,rFo,Yj,tFo,aFo,nFo,Ts,Ehe,sFo,lFo,Zj,iFo,dFo,Kj,cFo,mFo,fFo,Cu,Che,gFo,hFo,eD,uFo,pFo,_Fo,Ms,whe,bFo,vFo,oD,FFo,TFo,rD,MFo,EFo,CFo,Es,Ahe,wFo,AFo,tD,LFo,yFo,aD,xFo,$Fo,kFo,Cs,Lhe,SFo,RFo,nD,PFo,BFo,sD,IFo,NFo,qFo,ws,yhe,jFo,DFo,lD,GFo,OFo,iD,VFo,XFo,zFo,As,xhe,QFo,WFo,dD,UFo,HFo,cD,JFo,YFo,ZFo,Ls,$he,KFo,eTo,mD,oTo,rTo,fD,tTo,aTo,nTo,ys,khe,sTo,lTo,gD,iTo,dTo,hD,cTo,mTo,fTo,wu,She,gTo,hTo,uD,uTo,pTo,_To,xs,Rhe,bTo,vTo,pD,FTo,TTo,_D,MTo,ETo,CTo,Au,Phe,wTo,ATo,bD,LTo,yTo,xTo,$s,Bhe,$To,kTo,vD,STo,RTo,FD,PTo,BTo,ITo,ks,Ihe,NTo,qTo,TD,jTo,DTo,MD,GTo,OTo,VTo,Ss,Nhe,XTo,zTo,ED,QTo,WTo,CD,UTo,HTo,JTo,Lu,qhe,YTo,ZTo,wD,KTo,eMo,oMo,yu,jhe,rMo,tMo,AD,aMo,nMo,sMo,Rs,Dhe,lMo,iMo,LD,dMo,cMo,yD,mMo,fMo,gMo,Ps,Ghe,hMo,uMo,xD,pMo,_Mo,$D,bMo,vMo,FMo,Bs,Ohe,TMo,MMo,kD,EMo,CMo,SD,wMo,AMo,LMo,xu,Vhe,yMo,xMo,RD,$Mo,kMo,SMo,Is,Xhe,RMo,PMo,PD,BMo,IMo,BD,NMo,qMo,jMo,Ns,zhe,DMo,GMo,ID,OMo,VMo,ND,XMo,zMo,QMo,qs,Qhe,WMo,UMo,qD,HMo,JMo,jD,YMo,ZMo,KMo,js,Whe,eEo,oEo,DD,rEo,tEo,GD,aEo,nEo,sEo,Ds,Uhe,lEo,iEo,OD,dEo,cEo,VD,mEo,fEo,gEo,Gs,Hhe,hEo,uEo,XD,pEo,_Eo,zD,bEo,vEo,FEo,Os,Jhe,TEo,MEo,QD,EEo,CEo,WD,wEo,AEo,LEo,Vs,Yhe,yEo,xEo,UD,$Eo,kEo,HD,SEo,REo,PEo,Xs,Zhe,BEo,IEo,JD,NEo,qEo,YD,jEo,DEo,GEo,$u,Khe,OEo,VEo,ZD,XEo,zEo,QEo,zs,eue,WEo,UEo,KD,HEo,JEo,eG,YEo,ZEo,KEo,ku,oue,e4o,o4o,oG,r4o,t4o,a4o,Su,rue,n4o,s4o,rG,l4o,i4o,d4o,Qs,tue,c4o,m4o,tG,f4o,g4o,aG,h4o,u4o,p4o,Ws,aue,_4o,b4o,nG,v4o,F4o,sG,T4o,M4o,E4o,Us,nue,C4o,w4o,lG,A4o,L4o,iG,y4o,x4o,$4o,Ru,sue,k4o,S4o,dG,R4o,P4o,B4o,Hs,lue,I4o,N4o,cG,q4o,j4o,mG,D4o,G4o,O4o,Js,iue,V4o,X4o,fG,z4o,Q4o,gG,W4o,U4o,H4o,Ys,due,J4o,Y4o,hG,Z4o,K4o,uG,eCo,oCo,rCo,Zs,cue,tCo,aCo,pG,nCo,sCo,_G,lCo,iCo,dCo,Ks,mue,cCo,mCo,bG,fCo,gCo,vG,hCo,uCo,pCo,el,fue,_Co,bCo,FG,vCo,FCo,TG,TCo,MCo,ECo,ol,gue,CCo,wCo,MG,ACo,LCo,EG,yCo,xCo,$Co,rl,hue,kCo,SCo,CG,RCo,PCo,wG,BCo,ICo,NCo,Pu,uue,qCo,jCo,AG,DCo,GCo,OCo,tl,pue,VCo,XCo,LG,zCo,QCo,yG,WCo,UCo,HCo,al,_ue,JCo,YCo,xG,ZCo,KCo,$G,e3o,o3o,r3o,Bu,bue,t3o,a3o,kG,n3o,s3o,l3o,Iu,vue,i3o,d3o,SG,c3o,m3o,f3o,Nu,Fue,g3o,h3o,RG,u3o,p3o,_3o,qu,Tue,b3o,v3o,PG,F3o,T3o,M3o,nl,Mue,E3o,C3o,BG,w3o,A3o,IG,L3o,y3o,x3o,ju,Eue,$3o,k3o,NG,S3o,R3o,P3o,sl,Cue,B3o,I3o,qG,N3o,q3o,jG,j3o,D3o,G3o,ll,wue,O3o,V3o,DG,X3o,z3o,GG,Q3o,W3o,U3o,il,Aue,H3o,J3o,OG,Y3o,Z3o,VG,K3o,e5o,o5o,dl,Lue,r5o,t5o,XG,a5o,n5o,zG,s5o,l5o,i5o,cl,yue,d5o,c5o,QG,m5o,f5o,WG,g5o,h5o,u5o,ml,xue,p5o,_5o,UG,b5o,v5o,HG,F5o,T5o,M5o,Du,$ue,E5o,C5o,JG,w5o,A5o,L5o,Gu,kue,y5o,x5o,YG,$5o,k5o,S5o,fl,Sue,R5o,P5o,ZG,B5o,I5o,KG,N5o,q5o,j5o,gl,Rue,D5o,G5o,eO,O5o,V5o,oO,X5o,z5o,Q5o,hl,Pue,W5o,U5o,rO,H5o,J5o,tO,Y5o,Z5o,K5o,Ou,Bue,e0o,o0o,aO,r0o,t0o,a0o,Vu,Iue,n0o,s0o,nO,l0o,i0o,d0o,Xu,Nue,c0o,m0o,sO,f0o,g0o,h0o,ul,que,u0o,p0o,lO,_0o,b0o,iO,v0o,F0o,T0o,pl,jue,M0o,E0o,dO,C0o,w0o,cO,A0o,L0o,y0o,zu,Due,x0o,$0o,mO,k0o,S0o,R0o,Qu,Gue,P0o,B0o,fO,I0o,N0o,q0o,Wu,Oue,j0o,D0o,gO,G0o,O0o,V0o,Uu,Vue,X0o,z0o,hO,Q0o,W0o,U0o,_l,Xue,H0o,J0o,uO,Y0o,Z0o,pO,K0o,ewo,owo,bl,zue,rwo,two,_O,awo,nwo,bO,swo,lwo,iwo,Hu,Que,dwo,cwo,vO,mwo,fwo,gwo,Ju,Wue,hwo,uwo,FO,pwo,_wo,bwo,vl,Uue,vwo,Fwo,TO,Two,Mwo,MO,Ewo,Cwo,wwo,Fl,Hue,Awo,Lwo,EO,ywo,xwo,CO,$wo,kwo,Swo,Tl,Jue,Rwo,Pwo,wO,Bwo,Iwo,AO,Nwo,qwo,jwo,Ml,Yue,Dwo,Gwo,LO,Owo,Vwo,yO,Xwo,zwo,Qwo,Yu,Wwo,Zu,Hx,Uwo,Zue,Hwo,aro,Td,Ku,Kue,Jx,Jwo,epe,Ywo,nro,Ro,Yx,Zwo,Zx,Kwo,xO,eAo,oAo,rAo,Kx,tAo,ope,aAo,nAo,sAo,Ye,e$,lAo,rpe,iAo,dAo,Ka,cAo,tpe,mAo,fAo,ape,gAo,hAo,npe,uAo,pAo,_Ao,z,ep,spe,bAo,vAo,$O,FAo,TAo,MAo,op,lpe,EAo,CAo,kO,wAo,AAo,LAo,rp,ipe,yAo,xAo,SO,$Ao,kAo,SAo,tp,dpe,RAo,PAo,RO,BAo,IAo,NAo,ap,cpe,qAo,jAo,PO,DAo,GAo,OAo,np,mpe,VAo,XAo,BO,zAo,QAo,WAo,sp,fpe,UAo,HAo,IO,JAo,YAo,ZAo,lp,gpe,KAo,e6o,NO,o6o,r6o,t6o,ip,hpe,a6o,n6o,qO,s6o,l6o,i6o,dp,upe,d6o,c6o,jO,m6o,f6o,g6o,cp,ppe,h6o,u6o,DO,p6o,_6o,b6o,mp,_pe,v6o,F6o,GO,T6o,M6o,E6o,fp,bpe,C6o,w6o,OO,A6o,L6o,y6o,gp,vpe,x6o,$6o,VO,k6o,S6o,R6o,hp,Fpe,P6o,B6o,XO,I6o,N6o,q6o,up,Tpe,j6o,D6o,zO,G6o,O6o,V6o,pp,Mpe,X6o,z6o,QO,Q6o,W6o,U6o,_p,Epe,H6o,J6o,WO,Y6o,Z6o,K6o,bp,Cpe,e7o,o7o,UO,r7o,t7o,a7o,vp,wpe,n7o,s7o,HO,l7o,i7o,d7o,Fp,Ape,c7o,m7o,JO,f7o,g7o,h7o,Tp,Lpe,u7o,p7o,YO,_7o,b7o,v7o,Mp,ype,F7o,T7o,ZO,M7o,E7o,C7o,Ep,xpe,w7o,A7o,KO,L7o,y7o,x7o,Cp,$pe,$7o,k7o,eV,S7o,R7o,P7o,wp,kpe,B7o,I7o,oV,N7o,q7o,j7o,Ap,Spe,D7o,G7o,rV,O7o,V7o,X7o,Lp,Rpe,z7o,Q7o,tV,W7o,U7o,H7o,yp,Ppe,J7o,Y7o,aV,Z7o,K7o,eLo,xp,Bpe,oLo,rLo,nV,tLo,aLo,nLo,$p,Ipe,sLo,lLo,sV,iLo,dLo,cLo,kp,Npe,mLo,fLo,lV,gLo,hLo,uLo,Sp,qpe,pLo,_Lo,iV,bLo,vLo,FLo,Rp,jpe,TLo,MLo,dV,ELo,CLo,wLo,Pp,Dpe,ALo,LLo,cV,yLo,xLo,$Lo,Bp,Gpe,kLo,SLo,mV,RLo,PLo,BLo,Ip,Ope,ILo,NLo,fV,qLo,jLo,DLo,Np,Vpe,GLo,OLo,gV,VLo,XLo,zLo,qp,Xpe,QLo,WLo,hV,ULo,HLo,JLo,jp,zpe,YLo,ZLo,uV,KLo,e8o,o8o,Dp,Qpe,r8o,t8o,pV,a8o,n8o,s8o,Gp,Wpe,l8o,i8o,_V,d8o,c8o,m8o,Op,Upe,f8o,g8o,bV,h8o,u8o,p8o,Vp,_8o,Xp,b8o,zp,o$,v8o,Hpe,F8o,sro,Md,Qp,Jpe,r$,T8o,Ype,M8o,lro,Po,t$,E8o,a$,C8o,vV,w8o,A8o,L8o,n$,y8o,Zpe,x8o,$8o,k8o,Ze,s$,S8o,Kpe,R8o,P8o,Ed,B8o,e_e,I8o,N8o,o_e,q8o,j8o,D8o,se,Wp,r_e,G8o,O8o,FV,V8o,X8o,z8o,Up,t_e,Q8o,W8o,TV,U8o,H8o,J8o,Hp,a_e,Y8o,Z8o,MV,K8o,eyo,oyo,Jp,n_e,ryo,tyo,EV,ayo,nyo,syo,Yp,s_e,lyo,iyo,CV,dyo,cyo,myo,Zp,l_e,fyo,gyo,wV,hyo,uyo,pyo,Kp,i_e,_yo,byo,AV,vyo,Fyo,Tyo,e_,d_e,Myo,Eyo,LV,Cyo,wyo,Ayo,o_,c_e,Lyo,yyo,yV,xyo,$yo,kyo,r_,m_e,Syo,Ryo,xV,Pyo,Byo,Iyo,t_,f_e,Nyo,qyo,$V,jyo,Dyo,Gyo,a_,g_e,Oyo,Vyo,kV,Xyo,zyo,Qyo,n_,h_e,Wyo,Uyo,SV,Hyo,Jyo,Yyo,s_,u_e,Zyo,Kyo,RV,e9o,o9o,r9o,l_,p_e,t9o,a9o,PV,n9o,s9o,l9o,i_,__e,i9o,d9o,BV,c9o,m9o,f9o,d_,b_e,g9o,h9o,IV,u9o,p9o,_9o,c_,v_e,b9o,v9o,NV,F9o,T9o,M9o,m_,F_e,E9o,C9o,qV,w9o,A9o,L9o,f_,T_e,y9o,x9o,jV,$9o,k9o,S9o,g_,M_e,R9o,P9o,DV,B9o,I9o,N9o,h_,E_e,q9o,j9o,GV,D9o,G9o,O9o,u_,C_e,V9o,X9o,OV,z9o,Q9o,W9o,p_,U9o,__,H9o,b_,l$,J9o,w_e,Y9o,iro,Cd,v_,A_e,i$,Z9o,L_e,K9o,dro,Bo,d$,exo,wd,oxo,VV,rxo,txo,XV,axo,nxo,sxo,c$,lxo,y_e,ixo,dxo,cxo,vt,m$,mxo,x_e,fxo,gxo,Ad,hxo,$_e,uxo,pxo,zV,_xo,bxo,vxo,F_,Fxo,Ke,f$,Txo,k_e,Mxo,Exo,en,Cxo,S_e,wxo,Axo,R_e,Lxo,yxo,P_e,xxo,$xo,kxo,y,T_,B_e,Sxo,Rxo,QV,Pxo,Bxo,Ixo,M_,I_e,Nxo,qxo,WV,jxo,Dxo,Gxo,E_,N_e,Oxo,Vxo,UV,Xxo,zxo,Qxo,C_,q_e,Wxo,Uxo,HV,Hxo,Jxo,Yxo,w_,j_e,Zxo,Kxo,JV,e$o,o$o,r$o,A_,D_e,t$o,a$o,YV,n$o,s$o,l$o,L_,G_e,i$o,d$o,ZV,c$o,m$o,f$o,y_,O_e,g$o,h$o,KV,u$o,p$o,_$o,x_,V_e,b$o,v$o,eX,F$o,T$o,M$o,$_,X_e,E$o,C$o,oX,w$o,A$o,L$o,k_,z_e,y$o,x$o,rX,$$o,k$o,S$o,S_,Q_e,R$o,P$o,tX,B$o,I$o,N$o,R_,W_e,q$o,j$o,aX,D$o,G$o,O$o,P_,U_e,V$o,X$o,nX,z$o,Q$o,W$o,B_,H_e,U$o,H$o,sX,J$o,Y$o,Z$o,I_,J_e,K$o,eko,lX,oko,rko,tko,N_,Y_e,ako,nko,iX,sko,lko,iko,q_,Z_e,dko,cko,dX,mko,fko,gko,j_,K_e,hko,uko,cX,pko,_ko,bko,D_,e1e,vko,Fko,mX,Tko,Mko,Eko,G_,o1e,Cko,wko,fX,Ako,Lko,yko,O_,r1e,xko,$ko,gX,kko,Sko,Rko,V_,t1e,Pko,Bko,hX,Iko,Nko,qko,X_,a1e,jko,Dko,uX,Gko,Oko,Vko,z_,n1e,Xko,zko,pX,Qko,Wko,Uko,Q_,s1e,Hko,Jko,_X,Yko,Zko,Kko,W_,l1e,eSo,oSo,bX,rSo,tSo,aSo,U_,i1e,nSo,sSo,vX,lSo,iSo,dSo,H_,d1e,cSo,mSo,FX,fSo,gSo,hSo,J_,c1e,uSo,pSo,TX,_So,bSo,vSo,Y_,m1e,FSo,TSo,MX,MSo,ESo,CSo,Z_,f1e,wSo,ASo,EX,LSo,ySo,xSo,K_,g1e,$So,kSo,CX,SSo,RSo,PSo,e1,h1e,BSo,ISo,wX,NSo,qSo,jSo,o1,u1e,DSo,GSo,AX,OSo,VSo,XSo,r1,p1e,zSo,QSo,LX,WSo,USo,HSo,t1,_1e,JSo,YSo,yX,ZSo,KSo,eRo,a1,b1e,oRo,rRo,xX,tRo,aRo,nRo,n1,v1e,sRo,lRo,$X,iRo,dRo,cRo,El,F1e,mRo,fRo,kX,gRo,hRo,SX,uRo,pRo,_Ro,s1,T1e,bRo,vRo,RX,FRo,TRo,MRo,l1,M1e,ERo,CRo,PX,wRo,ARo,LRo,i1,E1e,yRo,xRo,BX,$Ro,kRo,SRo,d1,C1e,RRo,PRo,IX,BRo,IRo,NRo,c1,w1e,qRo,jRo,NX,DRo,GRo,ORo,m1,A1e,VRo,XRo,qX,zRo,QRo,WRo,f1,L1e,URo,HRo,jX,JRo,YRo,ZRo,g1,y1e,KRo,ePo,DX,oPo,rPo,tPo,h1,x1e,aPo,nPo,GX,sPo,lPo,iPo,u1,$1e,dPo,cPo,OX,mPo,fPo,gPo,p1,k1e,hPo,uPo,VX,pPo,_Po,bPo,_1,S1e,vPo,FPo,XX,TPo,MPo,EPo,b1,R1e,CPo,wPo,zX,APo,LPo,yPo,v1,P1e,xPo,$Po,QX,kPo,SPo,RPo,F1,B1e,PPo,BPo,WX,IPo,NPo,qPo,T1,I1e,jPo,DPo,UX,GPo,OPo,VPo,M1,N1e,XPo,zPo,HX,QPo,WPo,UPo,E1,q1e,HPo,JPo,JX,YPo,ZPo,KPo,C1,j1e,eBo,oBo,YX,rBo,tBo,aBo,w1,D1e,nBo,sBo,ZX,lBo,iBo,dBo,A1,G1e,cBo,mBo,KX,fBo,gBo,hBo,L1,O1e,uBo,pBo,ez,_Bo,bBo,vBo,y1,V1e,FBo,TBo,oz,MBo,EBo,CBo,x1,X1e,wBo,ABo,rz,LBo,yBo,xBo,$1,z1e,$Bo,kBo,tz,SBo,RBo,PBo,k1,Q1e,BBo,IBo,az,NBo,qBo,jBo,S1,W1e,DBo,GBo,nz,OBo,VBo,XBo,R1,U1e,zBo,QBo,sz,WBo,UBo,HBo,P1,H1e,JBo,YBo,lz,ZBo,KBo,eIo,B1,J1e,oIo,rIo,iz,tIo,aIo,nIo,I1,Y1e,sIo,lIo,dz,iIo,dIo,cIo,N1,Z1e,mIo,fIo,cz,gIo,hIo,uIo,q1,K1e,pIo,_Io,mz,bIo,vIo,FIo,j1,e2e,TIo,MIo,fz,EIo,CIo,wIo,D1,o2e,AIo,LIo,gz,yIo,xIo,$Io,G1,r2e,kIo,SIo,hz,RIo,PIo,BIo,O1,t2e,IIo,NIo,uz,qIo,jIo,DIo,V1,a2e,GIo,OIo,pz,VIo,XIo,zIo,X1,n2e,QIo,WIo,_z,UIo,HIo,JIo,z1,s2e,YIo,ZIo,bz,KIo,eNo,oNo,Q1,l2e,rNo,tNo,vz,aNo,nNo,sNo,W1,i2e,lNo,iNo,Fz,dNo,cNo,mNo,U1,d2e,fNo,gNo,Tz,hNo,uNo,pNo,H1,c2e,_No,bNo,Mz,vNo,FNo,TNo,J1,m2e,MNo,ENo,Ez,CNo,wNo,ANo,Y1,f2e,LNo,yNo,Cz,xNo,$No,kNo,Z1,g2e,SNo,RNo,wz,PNo,BNo,INo,K1,h2e,NNo,qNo,Az,jNo,DNo,GNo,e2,u2e,ONo,VNo,Lz,XNo,zNo,QNo,o2,p2e,WNo,UNo,yz,HNo,JNo,YNo,r2,_2e,ZNo,KNo,xz,eqo,oqo,rqo,t2,b2e,tqo,aqo,$z,nqo,sqo,lqo,a2,v2e,iqo,dqo,kz,cqo,mqo,fqo,n2,F2e,gqo,hqo,Sz,uqo,pqo,_qo,s2,T2e,bqo,vqo,Rz,Fqo,Tqo,Mqo,l2,M2e,Eqo,Cqo,Pz,wqo,Aqo,Lqo,i2,E2e,yqo,xqo,Bz,$qo,kqo,Sqo,d2,C2e,Rqo,Pqo,Iz,Bqo,Iqo,Nqo,c2,w2e,qqo,jqo,Nz,Dqo,Gqo,Oqo,m2,A2e,Vqo,Xqo,qz,zqo,Qqo,Wqo,f2,L2e,Uqo,Hqo,jz,Jqo,Yqo,Zqo,g2,y2e,Kqo,ejo,Dz,ojo,rjo,tjo,h2,x2e,ajo,njo,Gz,sjo,ljo,ijo,u2,$2e,djo,cjo,Oz,mjo,fjo,gjo,p2,k2e,hjo,ujo,Vz,pjo,_jo,bjo,_2,S2e,vjo,Fjo,Xz,Tjo,Mjo,Ejo,b2,R2e,Cjo,wjo,zz,Ajo,Ljo,yjo,v2,P2e,xjo,$jo,Qz,kjo,Sjo,Rjo,F2,B2e,Pjo,Bjo,Wz,Ijo,Njo,qjo,T2,I2e,jjo,Djo,Uz,Gjo,Ojo,Vjo,M2,N2e,Xjo,zjo,Hz,Qjo,Wjo,Ujo,E2,q2e,Hjo,Jjo,Jz,Yjo,Zjo,Kjo,C2,j2e,eDo,oDo,Yz,rDo,tDo,aDo,w2,D2e,nDo,sDo,Zz,lDo,iDo,dDo,A2,G2e,cDo,mDo,Kz,fDo,gDo,hDo,L2,O2e,uDo,pDo,eQ,_Do,bDo,vDo,y2,V2e,FDo,TDo,oQ,MDo,EDo,CDo,x2,X2e,wDo,ADo,rQ,LDo,yDo,xDo,$2,z2e,$Do,kDo,tQ,SDo,RDo,PDo,k2,Q2e,BDo,IDo,aQ,NDo,qDo,jDo,S2,W2e,DDo,GDo,nQ,ODo,VDo,XDo,R2,U2e,zDo,QDo,sQ,WDo,UDo,HDo,P2,H2e,JDo,YDo,lQ,ZDo,KDo,eGo,B2,J2e,oGo,rGo,iQ,tGo,aGo,nGo,I2,Y2e,sGo,lGo,dQ,iGo,dGo,cGo,N2,Z2e,mGo,fGo,cQ,gGo,hGo,uGo,q2,K2e,pGo,_Go,mQ,bGo,vGo,FGo,j2,ebe,TGo,MGo,fQ,EGo,CGo,wGo,D2,AGo,obe,LGo,yGo,rbe,xGo,$Go,G2,cro,Ld,O2,tbe,g$,kGo,abe,SGo,mro,Io,h$,RGo,yd,PGo,gQ,BGo,IGo,hQ,NGo,qGo,jGo,u$,DGo,nbe,GGo,OGo,VGo,Ft,p$,XGo,sbe,zGo,QGo,xd,WGo,lbe,UGo,HGo,uQ,JGo,YGo,ZGo,V2,KGo,eo,_$,eOo,ibe,oOo,rOo,on,tOo,dbe,aOo,nOo,cbe,sOo,lOo,mbe,iOo,dOo,cOo,G,X2,fbe,mOo,fOo,pQ,gOo,hOo,uOo,z2,gbe,pOo,_Oo,_Q,bOo,vOo,FOo,Q2,hbe,TOo,MOo,bQ,EOo,COo,wOo,W2,ube,AOo,LOo,vQ,yOo,xOo,$Oo,U2,pbe,kOo,SOo,FQ,ROo,POo,BOo,H2,_be,IOo,NOo,TQ,qOo,jOo,DOo,J2,bbe,GOo,OOo,MQ,VOo,XOo,zOo,Y2,vbe,QOo,WOo,EQ,UOo,HOo,JOo,Z2,Fbe,YOo,ZOo,CQ,KOo,eVo,oVo,K2,Tbe,rVo,tVo,wQ,aVo,nVo,sVo,eb,Mbe,lVo,iVo,AQ,dVo,cVo,mVo,ob,Ebe,fVo,gVo,LQ,hVo,uVo,pVo,rb,Cbe,_Vo,bVo,yQ,vVo,FVo,TVo,tb,wbe,MVo,EVo,xQ,CVo,wVo,AVo,ab,Abe,LVo,yVo,$Q,xVo,$Vo,kVo,nb,Lbe,SVo,RVo,kQ,PVo,BVo,IVo,sb,ybe,NVo,qVo,SQ,jVo,DVo,GVo,lb,xbe,OVo,VVo,RQ,XVo,zVo,QVo,ib,$be,WVo,UVo,PQ,HVo,JVo,YVo,db,kbe,ZVo,KVo,BQ,eXo,oXo,rXo,cb,Sbe,tXo,aXo,IQ,nXo,sXo,lXo,mb,Rbe,iXo,dXo,NQ,cXo,mXo,fXo,fb,Pbe,gXo,hXo,qQ,uXo,pXo,_Xo,gb,Bbe,bXo,vXo,jQ,FXo,TXo,MXo,hb,Ibe,EXo,CXo,DQ,wXo,AXo,LXo,ub,Nbe,yXo,xXo,GQ,$Xo,kXo,SXo,pb,qbe,RXo,PXo,OQ,BXo,IXo,NXo,_b,jbe,qXo,jXo,VQ,DXo,GXo,OXo,bb,Dbe,VXo,XXo,XQ,zXo,QXo,WXo,vb,Gbe,UXo,HXo,zQ,JXo,YXo,ZXo,Fb,Obe,KXo,ezo,QQ,ozo,rzo,tzo,Tb,Vbe,azo,nzo,WQ,szo,lzo,izo,Mb,Xbe,dzo,czo,UQ,mzo,fzo,gzo,Eb,zbe,hzo,uzo,HQ,pzo,_zo,bzo,Cb,Qbe,vzo,Fzo,JQ,Tzo,Mzo,Ezo,wb,Wbe,Czo,wzo,YQ,Azo,Lzo,yzo,Ab,Ube,xzo,$zo,ZQ,kzo,Szo,Rzo,Lb,Hbe,Pzo,Bzo,KQ,Izo,Nzo,qzo,yb,Jbe,jzo,Dzo,eW,Gzo,Ozo,Vzo,xb,Ybe,Xzo,zzo,oW,Qzo,Wzo,Uzo,$b,Zbe,Hzo,Jzo,rW,Yzo,Zzo,Kzo,kb,Kbe,eQo,oQo,tW,rQo,tQo,aQo,Sb,eve,nQo,sQo,aW,lQo,iQo,dQo,Rb,ove,cQo,mQo,nW,fQo,gQo,hQo,Pb,rve,uQo,pQo,sW,_Qo,bQo,vQo,Bb,tve,FQo,TQo,lW,MQo,EQo,CQo,Ib,ave,wQo,AQo,iW,LQo,yQo,xQo,Nb,nve,$Qo,kQo,dW,SQo,RQo,PQo,qb,BQo,sve,IQo,NQo,lve,qQo,jQo,jb,fro,$d,Db,ive,b$,DQo,dve,GQo,gro,No,v$,OQo,kd,VQo,cW,XQo,zQo,mW,QQo,WQo,UQo,F$,HQo,cve,JQo,YQo,ZQo,Tt,T$,KQo,mve,eWo,oWo,Sd,rWo,fve,tWo,aWo,fW,nWo,sWo,lWo,Gb,iWo,oo,M$,dWo,gve,cWo,mWo,rn,fWo,hve,gWo,hWo,uve,uWo,pWo,pve,_Wo,bWo,vWo,Q,Ob,_ve,FWo,TWo,gW,MWo,EWo,CWo,Vb,bve,wWo,AWo,hW,LWo,yWo,xWo,Xb,vve,$Wo,kWo,uW,SWo,RWo,PWo,zb,Fve,BWo,IWo,pW,NWo,qWo,jWo,Qb,Tve,DWo,GWo,_W,OWo,VWo,XWo,Wb,Mve,zWo,QWo,bW,WWo,UWo,HWo,Ub,Eve,JWo,YWo,vW,ZWo,KWo,eUo,Hb,Cve,oUo,rUo,FW,tUo,aUo,nUo,Jb,wve,sUo,lUo,TW,iUo,dUo,cUo,Yb,Ave,mUo,fUo,MW,gUo,hUo,uUo,Zb,Lve,pUo,_Uo,EW,bUo,vUo,FUo,Kb,yve,TUo,MUo,CW,EUo,CUo,wUo,ev,xve,AUo,LUo,wW,yUo,xUo,$Uo,ov,$ve,kUo,SUo,AW,RUo,PUo,BUo,rv,kve,IUo,NUo,LW,qUo,jUo,DUo,tv,Sve,GUo,OUo,yW,VUo,XUo,zUo,av,Rve,QUo,WUo,xW,UUo,HUo,JUo,nv,Pve,YUo,ZUo,$W,KUo,eHo,oHo,sv,Bve,rHo,tHo,kW,aHo,nHo,sHo,lv,Ive,lHo,iHo,SW,dHo,cHo,mHo,iv,Nve,fHo,gHo,RW,hHo,uHo,pHo,dv,qve,_Ho,bHo,PW,vHo,FHo,THo,cv,jve,MHo,EHo,BW,CHo,wHo,AHo,mv,Dve,LHo,yHo,IW,xHo,$Ho,kHo,fv,Gve,SHo,RHo,NW,PHo,BHo,IHo,gv,Ove,NHo,qHo,qW,jHo,DHo,GHo,hv,Vve,OHo,VHo,jW,XHo,zHo,QHo,uv,Xve,WHo,UHo,DW,HHo,JHo,YHo,pv,zve,ZHo,KHo,GW,eJo,oJo,rJo,_v,Qve,tJo,aJo,OW,nJo,sJo,lJo,bv,Wve,iJo,dJo,VW,cJo,mJo,fJo,vv,Uve,gJo,hJo,XW,uJo,pJo,_Jo,Fv,Hve,bJo,vJo,zW,FJo,TJo,MJo,Tv,Jve,EJo,CJo,QW,wJo,AJo,LJo,Mv,Yve,yJo,xJo,WW,$Jo,kJo,SJo,Ev,Zve,RJo,PJo,UW,BJo,IJo,NJo,Cv,Kve,qJo,jJo,HW,DJo,GJo,OJo,wv,eFe,VJo,XJo,JW,zJo,QJo,WJo,Av,oFe,UJo,HJo,YW,JJo,YJo,ZJo,Lv,rFe,KJo,eYo,ZW,oYo,rYo,tYo,yv,tFe,aYo,nYo,KW,sYo,lYo,iYo,xv,aFe,dYo,cYo,eU,mYo,fYo,gYo,$v,hYo,nFe,uYo,pYo,sFe,_Yo,bYo,kv,hro,Rd,Sv,lFe,E$,vYo,iFe,FYo,uro,qo,C$,TYo,Pd,MYo,oU,EYo,CYo,rU,wYo,AYo,LYo,w$,yYo,dFe,xYo,$Yo,kYo,Mt,A$,SYo,cFe,RYo,PYo,Bd,BYo,mFe,IYo,NYo,tU,qYo,jYo,DYo,Rv,GYo,ro,L$,OYo,fFe,VYo,XYo,tn,zYo,gFe,QYo,WYo,hFe,UYo,HYo,uFe,JYo,YYo,ZYo,Y,Pv,pFe,KYo,eZo,aU,oZo,rZo,tZo,Bv,_Fe,aZo,nZo,nU,sZo,lZo,iZo,Iv,bFe,dZo,cZo,sU,mZo,fZo,gZo,Nv,vFe,hZo,uZo,lU,pZo,_Zo,bZo,qv,FFe,vZo,FZo,iU,TZo,MZo,EZo,jv,TFe,CZo,wZo,dU,AZo,LZo,yZo,Dv,MFe,xZo,$Zo,cU,kZo,SZo,RZo,Gv,EFe,PZo,BZo,mU,IZo,NZo,qZo,Ov,CFe,jZo,DZo,fU,GZo,OZo,VZo,Vv,wFe,XZo,zZo,gU,QZo,WZo,UZo,Xv,AFe,HZo,JZo,hU,YZo,ZZo,KZo,zv,LFe,eKo,oKo,uU,rKo,tKo,aKo,Qv,yFe,nKo,sKo,pU,lKo,iKo,dKo,Wv,xFe,cKo,mKo,_U,fKo,gKo,hKo,Uv,$Fe,uKo,pKo,bU,_Ko,bKo,vKo,Hv,kFe,FKo,TKo,vU,MKo,EKo,CKo,Jv,SFe,wKo,AKo,FU,LKo,yKo,xKo,Yv,RFe,$Ko,kKo,TU,SKo,RKo,PKo,Zv,PFe,BKo,IKo,MU,NKo,qKo,jKo,Kv,BFe,DKo,GKo,EU,OKo,VKo,XKo,eF,IFe,zKo,QKo,CU,WKo,UKo,HKo,oF,NFe,JKo,YKo,wU,ZKo,KKo,eer,rF,qFe,oer,rer,AU,ter,aer,ner,tF,jFe,ser,ler,LU,ier,der,cer,aF,DFe,mer,fer,yU,ger,her,uer,nF,GFe,per,_er,xU,ber,ver,Fer,sF,OFe,Ter,Mer,$U,Eer,Cer,wer,lF,VFe,Aer,Ler,kU,yer,xer,$er,iF,XFe,ker,Ser,SU,Rer,Per,Ber,dF,zFe,Ier,Ner,RU,qer,jer,Der,cF,QFe,Ger,Oer,PU,Ver,Xer,zer,mF,WFe,Qer,Wer,BU,Uer,Her,Jer,fF,UFe,Yer,Zer,IU,Ker,eor,oor,gF,HFe,ror,tor,NU,aor,nor,sor,hF,JFe,lor,ior,YFe,dor,cor,mor,uF,ZFe,gor,hor,qU,uor,por,_or,pF,KFe,bor,vor,jU,For,Tor,Mor,_F,eTe,Eor,Cor,DU,wor,Aor,Lor,bF,oTe,yor,xor,GU,$or,kor,Sor,vF,Ror,rTe,Por,Bor,tTe,Ior,Nor,FF,pro,Id,TF,aTe,y$,qor,nTe,jor,_ro,jo,x$,Dor,Nd,Gor,OU,Oor,Vor,VU,Xor,zor,Qor,$$,Wor,sTe,Uor,Hor,Jor,Et,k$,Yor,lTe,Zor,Kor,qd,err,iTe,orr,rrr,XU,trr,arr,nrr,MF,srr,to,S$,lrr,dTe,irr,drr,an,crr,cTe,mrr,frr,mTe,grr,hrr,fTe,urr,prr,_rr,fe,EF,gTe,brr,vrr,zU,Frr,Trr,Mrr,CF,hTe,Err,Crr,QU,wrr,Arr,Lrr,wF,uTe,yrr,xrr,WU,$rr,krr,Srr,AF,pTe,Rrr,Prr,UU,Brr,Irr,Nrr,LF,_Te,qrr,jrr,HU,Drr,Grr,Orr,yF,bTe,Vrr,Xrr,JU,zrr,Qrr,Wrr,xF,vTe,Urr,Hrr,YU,Jrr,Yrr,Zrr,$F,FTe,Krr,etr,ZU,otr,rtr,ttr,kF,TTe,atr,ntr,KU,str,ltr,itr,SF,MTe,dtr,ctr,eH,mtr,ftr,gtr,RF,ETe,htr,utr,oH,ptr,_tr,btr,PF,CTe,vtr,Ftr,rH,Ttr,Mtr,Etr,BF,wTe,Ctr,wtr,tH,Atr,Ltr,ytr,IF,ATe,xtr,$tr,aH,ktr,Str,Rtr,NF,LTe,Ptr,Btr,nH,Itr,Ntr,qtr,qF,yTe,jtr,Dtr,sH,Gtr,Otr,Vtr,jF,xTe,Xtr,ztr,lH,Qtr,Wtr,Utr,DF,$Te,Htr,Jtr,iH,Ytr,Ztr,Ktr,GF,kTe,ear,oar,dH,rar,tar,aar,OF,STe,nar,sar,cH,lar,iar,dar,VF,car,RTe,mar,far,PTe,gar,har,XF,bro,jd,zF,BTe,R$,uar,ITe,par,vro,Do,P$,_ar,Dd,bar,mH,Far,Tar,fH,Mar,Ear,Car,B$,war,NTe,Aar,Lar,yar,Ct,I$,xar,qTe,$ar,kar,Gd,Sar,jTe,Rar,Par,gH,Bar,Iar,Nar,QF,qar,ao,N$,jar,DTe,Dar,Gar,nn,Oar,GTe,Var,Xar,OTe,zar,Qar,VTe,War,Uar,Har,I,WF,XTe,Jar,Yar,hH,Zar,Kar,enr,UF,zTe,onr,rnr,uH,tnr,anr,nnr,HF,QTe,snr,lnr,pH,inr,dnr,cnr,JF,WTe,mnr,fnr,_H,gnr,hnr,unr,YF,UTe,pnr,_nr,bH,bnr,vnr,Fnr,ZF,HTe,Tnr,Mnr,vH,Enr,Cnr,wnr,KF,JTe,Anr,Lnr,FH,ynr,xnr,$nr,eT,YTe,knr,Snr,TH,Rnr,Pnr,Bnr,oT,ZTe,Inr,Nnr,MH,qnr,jnr,Dnr,rT,KTe,Gnr,Onr,EH,Vnr,Xnr,znr,tT,eMe,Qnr,Wnr,CH,Unr,Hnr,Jnr,aT,oMe,Ynr,Znr,wH,Knr,esr,osr,nT,rMe,rsr,tsr,AH,asr,nsr,ssr,sT,tMe,lsr,isr,LH,dsr,csr,msr,lT,aMe,fsr,gsr,yH,hsr,usr,psr,iT,nMe,_sr,bsr,xH,vsr,Fsr,Tsr,dT,sMe,Msr,Esr,$H,Csr,wsr,Asr,cT,lMe,Lsr,ysr,kH,xsr,$sr,ksr,mT,iMe,Ssr,Rsr,SH,Psr,Bsr,Isr,fT,dMe,Nsr,qsr,RH,jsr,Dsr,Gsr,gT,cMe,Osr,Vsr,PH,Xsr,zsr,Qsr,hT,mMe,Wsr,Usr,BH,Hsr,Jsr,Ysr,uT,fMe,Zsr,Ksr,IH,elr,olr,rlr,pT,gMe,tlr,alr,NH,nlr,slr,llr,_T,hMe,ilr,dlr,qH,clr,mlr,flr,bT,uMe,glr,hlr,jH,ulr,plr,_lr,vT,pMe,blr,vlr,DH,Flr,Tlr,Mlr,FT,_Me,Elr,Clr,GH,wlr,Alr,Llr,TT,bMe,ylr,xlr,OH,$lr,klr,Slr,MT,vMe,Rlr,Plr,VH,Blr,Ilr,Nlr,ET,FMe,qlr,jlr,XH,Dlr,Glr,Olr,CT,TMe,Vlr,Xlr,zH,zlr,Qlr,Wlr,wT,MMe,Ulr,Hlr,QH,Jlr,Ylr,Zlr,AT,EMe,Klr,eir,WH,oir,rir,tir,LT,CMe,air,nir,UH,sir,lir,iir,yT,wMe,dir,cir,HH,mir,fir,gir,xT,AMe,hir,uir,JH,pir,_ir,bir,$T,LMe,vir,Fir,YH,Tir,Mir,Eir,kT,yMe,Cir,wir,ZH,Air,Lir,yir,ST,xMe,xir,$ir,KH,kir,Sir,Rir,RT,$Me,Pir,Bir,eJ,Iir,Nir,qir,PT,kMe,jir,Dir,oJ,Gir,Oir,Vir,BT,SMe,Xir,zir,rJ,Qir,Wir,Uir,IT,RMe,Hir,Jir,tJ,Yir,Zir,Kir,NT,PMe,edr,odr,aJ,rdr,tdr,adr,qT,BMe,ndr,sdr,nJ,ldr,idr,ddr,jT,IMe,cdr,mdr,sJ,fdr,gdr,hdr,DT,NMe,udr,pdr,lJ,_dr,bdr,vdr,GT,qMe,Fdr,Tdr,iJ,Mdr,Edr,Cdr,OT,jMe,wdr,Adr,dJ,Ldr,ydr,xdr,VT,DMe,$dr,kdr,cJ,Sdr,Rdr,Pdr,XT,GMe,Bdr,Idr,mJ,Ndr,qdr,jdr,zT,OMe,Ddr,Gdr,fJ,Odr,Vdr,Xdr,QT,VMe,zdr,Qdr,gJ,Wdr,Udr,Hdr,WT,XMe,Jdr,Ydr,hJ,Zdr,Kdr,ecr,UT,zMe,ocr,rcr,uJ,tcr,acr,ncr,HT,scr,QMe,lcr,icr,WMe,dcr,ccr,JT,Fro,Od,YT,UMe,q$,mcr,HMe,fcr,Tro,Go,j$,gcr,Vd,hcr,pJ,ucr,pcr,_J,_cr,bcr,vcr,D$,Fcr,JMe,Tcr,Mcr,Ecr,wt,G$,Ccr,YMe,wcr,Acr,Xd,Lcr,ZMe,ycr,xcr,bJ,$cr,kcr,Scr,ZT,Rcr,no,O$,Pcr,KMe,Bcr,Icr,sn,Ncr,eEe,qcr,jcr,oEe,Dcr,Gcr,rEe,Ocr,Vcr,Xcr,K,KT,tEe,zcr,Qcr,vJ,Wcr,Ucr,Hcr,eM,aEe,Jcr,Ycr,FJ,Zcr,Kcr,emr,oM,nEe,omr,rmr,TJ,tmr,amr,nmr,rM,sEe,smr,lmr,MJ,imr,dmr,cmr,tM,lEe,mmr,fmr,EJ,gmr,hmr,umr,aM,iEe,pmr,_mr,CJ,bmr,vmr,Fmr,nM,dEe,Tmr,Mmr,wJ,Emr,Cmr,wmr,sM,cEe,Amr,Lmr,AJ,ymr,xmr,$mr,lM,mEe,kmr,Smr,LJ,Rmr,Pmr,Bmr,iM,fEe,Imr,Nmr,yJ,qmr,jmr,Dmr,dM,gEe,Gmr,Omr,xJ,Vmr,Xmr,zmr,cM,hEe,Qmr,Wmr,$J,Umr,Hmr,Jmr,mM,uEe,Ymr,Zmr,kJ,Kmr,efr,ofr,fM,pEe,rfr,tfr,SJ,afr,nfr,sfr,gM,_Ee,lfr,ifr,RJ,dfr,cfr,mfr,hM,bEe,ffr,gfr,PJ,hfr,ufr,pfr,uM,vEe,_fr,bfr,BJ,vfr,Ffr,Tfr,pM,FEe,Mfr,Efr,IJ,Cfr,wfr,Afr,_M,TEe,Lfr,yfr,NJ,xfr,$fr,kfr,bM,MEe,Sfr,Rfr,qJ,Pfr,Bfr,Ifr,vM,EEe,Nfr,qfr,jJ,jfr,Dfr,Gfr,FM,CEe,Ofr,Vfr,DJ,Xfr,zfr,Qfr,TM,wEe,Wfr,Ufr,GJ,Hfr,Jfr,Yfr,MM,AEe,Zfr,Kfr,OJ,egr,ogr,rgr,EM,LEe,tgr,agr,VJ,ngr,sgr,lgr,CM,yEe,igr,dgr,XJ,cgr,mgr,fgr,wM,xEe,ggr,hgr,zJ,ugr,pgr,_gr,AM,$Ee,bgr,vgr,QJ,Fgr,Tgr,Mgr,LM,kEe,Egr,Cgr,WJ,wgr,Agr,Lgr,yM,SEe,ygr,xgr,UJ,$gr,kgr,Sgr,xM,REe,Rgr,Pgr,HJ,Bgr,Igr,Ngr,$M,PEe,qgr,jgr,JJ,Dgr,Ggr,Ogr,kM,Vgr,BEe,Xgr,zgr,IEe,Qgr,Wgr,SM,Mro,zd,RM,NEe,V$,Ugr,qEe,Hgr,Ero,Oo,X$,Jgr,Qd,Ygr,YJ,Zgr,Kgr,ZJ,ehr,ohr,rhr,z$,thr,jEe,ahr,nhr,shr,At,Q$,lhr,DEe,ihr,dhr,Wd,chr,GEe,mhr,fhr,KJ,ghr,hhr,uhr,PM,phr,so,W$,_hr,OEe,bhr,vhr,ln,Fhr,VEe,Thr,Mhr,XEe,Ehr,Chr,zEe,whr,Ahr,Lhr,Ue,BM,QEe,yhr,xhr,eY,$hr,khr,Shr,IM,WEe,Rhr,Phr,oY,Bhr,Ihr,Nhr,NM,UEe,qhr,jhr,rY,Dhr,Ghr,Ohr,qM,HEe,Vhr,Xhr,tY,zhr,Qhr,Whr,jM,JEe,Uhr,Hhr,aY,Jhr,Yhr,Zhr,DM,YEe,Khr,eur,nY,our,rur,tur,GM,ZEe,aur,nur,sY,sur,lur,iur,OM,dur,KEe,cur,mur,e4e,fur,gur,VM,Cro,Ud,XM,o4e,U$,hur,r4e,uur,wro,Vo,H$,pur,Hd,_ur,lY,bur,vur,iY,Fur,Tur,Mur,J$,Eur,t4e,Cur,wur,Aur,Lt,Y$,Lur,a4e,yur,xur,Jd,$ur,n4e,kur,Sur,dY,Rur,Pur,Bur,zM,Iur,lo,Z$,Nur,s4e,qur,jur,dn,Dur,l4e,Gur,Our,i4e,Vur,Xur,d4e,zur,Qur,Wur,U,QM,c4e,Uur,Hur,cY,Jur,Yur,Zur,WM,m4e,Kur,epr,mY,opr,rpr,tpr,UM,f4e,apr,npr,fY,spr,lpr,ipr,HM,g4e,dpr,cpr,gY,mpr,fpr,gpr,JM,h4e,hpr,upr,hY,ppr,_pr,bpr,YM,u4e,vpr,Fpr,uY,Tpr,Mpr,Epr,ZM,p4e,Cpr,wpr,pY,Apr,Lpr,ypr,KM,_4e,xpr,$pr,_Y,kpr,Spr,Rpr,eE,b4e,Ppr,Bpr,bY,Ipr,Npr,qpr,oE,v4e,jpr,Dpr,vY,Gpr,Opr,Vpr,rE,F4e,Xpr,zpr,FY,Qpr,Wpr,Upr,tE,T4e,Hpr,Jpr,TY,Ypr,Zpr,Kpr,aE,M4e,e_r,o_r,MY,r_r,t_r,a_r,nE,E4e,n_r,s_r,EY,l_r,i_r,d_r,sE,C4e,c_r,m_r,CY,f_r,g_r,h_r,lE,w4e,u_r,p_r,wY,__r,b_r,v_r,iE,A4e,F_r,T_r,AY,M_r,E_r,C_r,dE,L4e,w_r,A_r,LY,L_r,y_r,x_r,cE,y4e,$_r,k_r,yY,S_r,R_r,P_r,mE,x4e,B_r,I_r,xY,N_r,q_r,j_r,fE,$4e,D_r,G_r,$Y,O_r,V_r,X_r,gE,k4e,z_r,Q_r,kY,W_r,U_r,H_r,hE,S4e,J_r,Y_r,SY,Z_r,K_r,e1r,uE,R4e,o1r,r1r,RY,t1r,a1r,n1r,pE,P4e,s1r,l1r,PY,i1r,d1r,c1r,_E,B4e,m1r,f1r,BY,g1r,h1r,u1r,bE,I4e,p1r,_1r,IY,b1r,v1r,F1r,vE,N4e,T1r,M1r,NY,E1r,C1r,w1r,FE,q4e,A1r,L1r,qY,y1r,x1r,$1r,TE,j4e,k1r,S1r,jY,R1r,P1r,B1r,ME,D4e,I1r,N1r,DY,q1r,j1r,D1r,EE,G4e,G1r,O1r,GY,V1r,X1r,z1r,CE,O4e,Q1r,W1r,OY,U1r,H1r,J1r,wE,V4e,Y1r,Z1r,VY,K1r,e2r,o2r,AE,X4e,r2r,t2r,XY,a2r,n2r,s2r,LE,z4e,l2r,i2r,zY,d2r,c2r,m2r,yE,Q4e,f2r,g2r,QY,h2r,u2r,p2r,xE,W4e,_2r,b2r,WY,v2r,F2r,T2r,$E,U4e,M2r,E2r,UY,C2r,w2r,A2r,kE,H4e,L2r,y2r,HY,x2r,$2r,k2r,SE,J4e,S2r,R2r,JY,P2r,B2r,I2r,RE,N2r,Y4e,q2r,j2r,Z4e,D2r,G2r,PE,Aro,Yd,BE,K4e,K$,O2r,eCe,V2r,Lro,Xo,ek,X2r,Zd,z2r,YY,Q2r,W2r,ZY,U2r,H2r,J2r,ok,Y2r,oCe,Z2r,K2r,ebr,yt,rk,obr,rCe,rbr,tbr,Kd,abr,tCe,nbr,sbr,KY,lbr,ibr,dbr,IE,cbr,io,tk,mbr,aCe,fbr,gbr,cn,hbr,nCe,ubr,pbr,sCe,_br,bbr,lCe,vbr,Fbr,Tbr,O,NE,iCe,Mbr,Ebr,eZ,Cbr,wbr,Abr,qE,dCe,Lbr,ybr,oZ,xbr,$br,kbr,jE,cCe,Sbr,Rbr,rZ,Pbr,Bbr,Ibr,DE,mCe,Nbr,qbr,tZ,jbr,Dbr,Gbr,GE,fCe,Obr,Vbr,aZ,Xbr,zbr,Qbr,OE,gCe,Wbr,Ubr,nZ,Hbr,Jbr,Ybr,VE,hCe,Zbr,Kbr,sZ,evr,ovr,rvr,XE,uCe,tvr,avr,lZ,nvr,svr,lvr,zE,pCe,ivr,dvr,iZ,cvr,mvr,fvr,QE,_Ce,gvr,hvr,dZ,uvr,pvr,_vr,WE,bCe,bvr,vvr,cZ,Fvr,Tvr,Mvr,UE,vCe,Evr,Cvr,mZ,wvr,Avr,Lvr,HE,FCe,yvr,xvr,fZ,$vr,kvr,Svr,JE,TCe,Rvr,Pvr,gZ,Bvr,Ivr,Nvr,YE,MCe,qvr,jvr,hZ,Dvr,Gvr,Ovr,ZE,ECe,Vvr,Xvr,uZ,zvr,Qvr,Wvr,KE,CCe,Uvr,Hvr,pZ,Jvr,Yvr,Zvr,e4,wCe,Kvr,eFr,_Z,oFr,rFr,tFr,o4,ACe,aFr,nFr,bZ,sFr,lFr,iFr,r4,LCe,dFr,cFr,vZ,mFr,fFr,gFr,t4,yCe,hFr,uFr,FZ,pFr,_Fr,bFr,a4,xCe,vFr,FFr,TZ,TFr,MFr,EFr,n4,$Ce,CFr,wFr,MZ,AFr,LFr,yFr,s4,kCe,xFr,$Fr,EZ,kFr,SFr,RFr,l4,SCe,PFr,BFr,CZ,IFr,NFr,qFr,i4,RCe,jFr,DFr,wZ,GFr,OFr,VFr,d4,PCe,XFr,zFr,AZ,QFr,WFr,UFr,c4,BCe,HFr,JFr,LZ,YFr,ZFr,KFr,m4,ICe,eTr,oTr,yZ,rTr,tTr,aTr,f4,NCe,nTr,sTr,xZ,lTr,iTr,dTr,g4,qCe,cTr,mTr,$Z,fTr,gTr,hTr,h4,jCe,uTr,pTr,kZ,_Tr,bTr,vTr,u4,DCe,FTr,TTr,SZ,MTr,ETr,CTr,p4,GCe,wTr,ATr,RZ,LTr,yTr,xTr,_4,OCe,$Tr,kTr,PZ,STr,RTr,PTr,b4,VCe,BTr,ITr,BZ,NTr,qTr,jTr,v4,XCe,DTr,GTr,IZ,OTr,VTr,XTr,F4,zCe,zTr,QTr,NZ,WTr,UTr,HTr,T4,QCe,JTr,YTr,qZ,ZTr,KTr,eMr,M4,WCe,oMr,rMr,jZ,tMr,aMr,nMr,E4,UCe,sMr,lMr,DZ,iMr,dMr,cMr,C4,HCe,mMr,fMr,GZ,gMr,hMr,uMr,w4,JCe,pMr,_Mr,OZ,bMr,vMr,FMr,A4,YCe,TMr,MMr,VZ,EMr,CMr,wMr,L4,ZCe,AMr,LMr,XZ,yMr,xMr,$Mr,y4,KCe,kMr,SMr,zZ,RMr,PMr,BMr,x4,e3e,IMr,NMr,QZ,qMr,jMr,DMr,$4,o3e,GMr,OMr,WZ,VMr,XMr,zMr,k4,QMr,r3e,WMr,UMr,t3e,HMr,JMr,S4,yro,ec,R4,a3e,ak,YMr,n3e,ZMr,xro,zo,nk,KMr,oc,eEr,UZ,oEr,rEr,HZ,tEr,aEr,nEr,sk,sEr,s3e,lEr,iEr,dEr,xt,lk,cEr,l3e,mEr,fEr,rc,gEr,i3e,hEr,uEr,JZ,pEr,_Er,bEr,P4,vEr,co,ik,FEr,d3e,TEr,MEr,mn,EEr,c3e,CEr,wEr,m3e,AEr,LEr,f3e,yEr,xEr,$Er,g3e,B4,h3e,kEr,SEr,YZ,REr,PEr,BEr,I4,IEr,u3e,NEr,qEr,p3e,jEr,DEr,N4,$ro,tc,q4,_3e,dk,GEr,b3e,OEr,kro,Qo,ck,VEr,ac,XEr,ZZ,zEr,QEr,KZ,WEr,UEr,HEr,mk,JEr,v3e,YEr,ZEr,KEr,$t,fk,e4r,F3e,o4r,r4r,nc,t4r,T3e,a4r,n4r,eK,s4r,l4r,i4r,j4,d4r,mo,gk,c4r,M3e,m4r,f4r,fn,g4r,E3e,h4r,u4r,C3e,p4r,_4r,w3e,b4r,v4r,F4r,sc,D4,A3e,T4r,M4r,oK,E4r,C4r,w4r,G4,L3e,A4r,L4r,rK,y4r,x4r,$4r,O4,y3e,k4r,S4r,tK,R4r,P4r,B4r,V4,I4r,x3e,N4r,q4r,$3e,j4r,D4r,X4,Sro,lc,z4,k3e,hk,G4r,S3e,O4r,Rro,Wo,uk,V4r,ic,X4r,aK,z4r,Q4r,nK,W4r,U4r,H4r,pk,J4r,R3e,Y4r,Z4r,K4r,kt,_k,eCr,P3e,oCr,rCr,dc,tCr,B3e,aCr,nCr,sK,sCr,lCr,iCr,Q4,dCr,fo,bk,cCr,I3e,mCr,fCr,gn,gCr,N3e,hCr,uCr,q3e,pCr,_Cr,j3e,bCr,vCr,FCr,be,W4,D3e,TCr,MCr,lK,ECr,CCr,wCr,U4,G3e,ACr,LCr,iK,yCr,xCr,$Cr,H4,O3e,kCr,SCr,dK,RCr,PCr,BCr,J4,V3e,ICr,NCr,cK,qCr,jCr,DCr,Cl,X3e,GCr,OCr,mK,VCr,XCr,fK,zCr,QCr,WCr,Y4,z3e,UCr,HCr,gK,JCr,YCr,ZCr,wl,Q3e,KCr,e3r,hK,o3r,r3r,uK,t3r,a3r,n3r,Z4,W3e,s3r,l3r,pK,i3r,d3r,c3r,St,U3e,m3r,f3r,_K,g3r,h3r,bK,u3r,p3r,vK,_3r,b3r,v3r,K4,H3e,F3r,T3r,FK,M3r,E3r,C3r,eC,J3e,w3r,A3r,TK,L3r,y3r,x3r,oC,Y3e,$3r,k3r,MK,S3r,R3r,P3r,rC,Z3e,B3r,I3r,EK,N3r,q3r,j3r,tC,K3e,D3r,G3r,CK,O3r,V3r,X3r,aC,e5e,z3r,Q3r,wK,W3r,U3r,H3r,nC,o5e,J3r,Y3r,AK,Z3r,K3r,e5r,sC,r5e,o5r,r5r,LK,t5r,a5r,n5r,lC,t5e,s5r,l5r,yK,i5r,d5r,c5r,iC,m5r,a5e,f5r,g5r,n5e,h5r,u5r,dC,Pro,cc,cC,s5e,vk,p5r,l5e,_5r,Bro,Uo,Fk,b5r,mc,v5r,xK,F5r,T5r,$K,M5r,E5r,C5r,Tk,w5r,i5e,A5r,L5r,y5r,Rt,Mk,x5r,d5e,$5r,k5r,fc,S5r,c5e,R5r,P5r,kK,B5r,I5r,N5r,mC,q5r,go,Ek,j5r,m5e,D5r,G5r,hn,O5r,f5e,V5r,X5r,g5e,z5r,Q5r,h5e,W5r,U5r,H5r,u5e,fC,p5e,J5r,Y5r,SK,Z5r,K5r,e0r,gC,o0r,_5e,r0r,t0r,b5e,a0r,n0r,hC,Iro,gc,uC,v5e,Ck,s0r,F5e,l0r,Nro,Ho,wk,i0r,hc,d0r,RK,c0r,m0r,PK,f0r,g0r,h0r,Ak,u0r,T5e,p0r,_0r,b0r,Pt,Lk,v0r,M5e,F0r,T0r,uc,M0r,E5e,E0r,C0r,BK,w0r,A0r,L0r,pC,y0r,ho,yk,x0r,C5e,$0r,k0r,un,S0r,w5e,R0r,P0r,A5e,B0r,I0r,L5e,N0r,q0r,j0r,y5e,_C,x5e,D0r,G0r,IK,O0r,V0r,X0r,bC,z0r,$5e,Q0r,W0r,k5e,U0r,H0r,vC,qro,pc,FC,S5e,xk,J0r,R5e,Y0r,jro,Jo,$k,Z0r,_c,K0r,NK,ewr,owr,qK,rwr,twr,awr,kk,nwr,P5e,swr,lwr,iwr,Bt,Sk,dwr,B5e,cwr,mwr,bc,fwr,I5e,gwr,hwr,jK,uwr,pwr,_wr,TC,bwr,uo,Rk,vwr,N5e,Fwr,Twr,pn,Mwr,q5e,Ewr,Cwr,j5e,wwr,Awr,D5e,Lwr,ywr,xwr,G5e,MC,O5e,$wr,kwr,DK,Swr,Rwr,Pwr,EC,Bwr,V5e,Iwr,Nwr,X5e,qwr,jwr,CC,Dro,vc,wC,z5e,Pk,Dwr,Q5e,Gwr,Gro,Yo,Bk,Owr,Fc,Vwr,GK,Xwr,zwr,OK,Qwr,Wwr,Uwr,Ik,Hwr,W5e,Jwr,Ywr,Zwr,It,Nk,Kwr,U5e,eAr,oAr,Tc,rAr,H5e,tAr,aAr,VK,nAr,sAr,lAr,AC,iAr,po,qk,dAr,J5e,cAr,mAr,_n,fAr,Y5e,gAr,hAr,Z5e,uAr,pAr,K5e,_Ar,bAr,vAr,Be,LC,e0e,FAr,TAr,XK,MAr,EAr,CAr,yC,o0e,wAr,AAr,zK,LAr,yAr,xAr,xC,r0e,$Ar,kAr,QK,SAr,RAr,PAr,$C,t0e,BAr,IAr,WK,NAr,qAr,jAr,kC,a0e,DAr,GAr,UK,OAr,VAr,XAr,SC,n0e,zAr,QAr,HK,WAr,UAr,HAr,RC,s0e,JAr,YAr,JK,ZAr,KAr,e6r,PC,l0e,o6r,r6r,YK,t6r,a6r,n6r,BC,i0e,s6r,l6r,ZK,i6r,d6r,c6r,IC,m6r,d0e,f6r,g6r,c0e,h6r,u6r,NC,Oro,Mc,qC,m0e,jk,p6r,f0e,_6r,Vro,Zo,Dk,b6r,Ec,v6r,KK,F6r,T6r,eee,M6r,E6r,C6r,Gk,w6r,g0e,A6r,L6r,y6r,Nt,Ok,x6r,h0e,$6r,k6r,Cc,S6r,u0e,R6r,P6r,oee,B6r,I6r,N6r,jC,q6r,_o,Vk,j6r,p0e,D6r,G6r,bn,O6r,_0e,V6r,X6r,b0e,z6r,Q6r,v0e,W6r,U6r,H6r,gt,DC,F0e,J6r,Y6r,ree,Z6r,K6r,e7r,GC,T0e,o7r,r7r,tee,t7r,a7r,n7r,OC,M0e,s7r,l7r,aee,i7r,d7r,c7r,VC,E0e,m7r,f7r,nee,g7r,h7r,u7r,XC,C0e,p7r,_7r,see,b7r,v7r,F7r,zC,T7r,w0e,M7r,E7r,A0e,C7r,w7r,QC,Xro,wc,WC,L0e,Xk,A7r,y0e,L7r,zro,Ko,zk,y7r,Ac,x7r,lee,$7r,k7r,iee,S7r,R7r,P7r,Qk,B7r,x0e,I7r,N7r,q7r,qt,Wk,j7r,$0e,D7r,G7r,Lc,O7r,k0e,V7r,X7r,dee,z7r,Q7r,W7r,UC,U7r,bo,Uk,H7r,S0e,J7r,Y7r,vn,Z7r,R0e,K7r,eLr,P0e,oLr,rLr,B0e,tLr,aLr,nLr,Le,HC,I0e,sLr,lLr,cee,iLr,dLr,cLr,JC,N0e,mLr,fLr,mee,gLr,hLr,uLr,YC,q0e,pLr,_Lr,fee,bLr,vLr,FLr,ZC,j0e,TLr,MLr,gee,ELr,CLr,wLr,KC,D0e,ALr,LLr,hee,yLr,xLr,$Lr,e3,G0e,kLr,SLr,uee,RLr,PLr,BLr,o3,O0e,ILr,NLr,pee,qLr,jLr,DLr,r3,V0e,GLr,OLr,_ee,VLr,XLr,zLr,t3,X0e,QLr,WLr,bee,ULr,HLr,JLr,a3,z0e,YLr,ZLr,vee,KLr,e8r,o8r,n3,r8r,Q0e,t8r,a8r,W0e,n8r,s8r,s3,Qro,yc,l3,U0e,Hk,l8r,H0e,i8r,Wro,er,Jk,d8r,xc,c8r,Fee,m8r,f8r,Tee,g8r,h8r,u8r,Yk,p8r,J0e,_8r,b8r,v8r,jt,Zk,F8r,Y0e,T8r,M8r,$c,E8r,Z0e,C8r,w8r,Mee,A8r,L8r,y8r,i3,x8r,vo,Kk,$8r,K0e,k8r,S8r,Fn,R8r,ewe,P8r,B8r,owe,I8r,N8r,rwe,q8r,j8r,D8r,kc,d3,twe,G8r,O8r,Eee,V8r,X8r,z8r,c3,awe,Q8r,W8r,Cee,U8r,H8r,J8r,m3,nwe,Y8r,Z8r,wee,K8r,eyr,oyr,f3,ryr,swe,tyr,ayr,lwe,nyr,syr,g3,Uro,Sc,h3,iwe,eS,lyr,dwe,iyr,Hro,or,oS,dyr,Rc,cyr,Aee,myr,fyr,Lee,gyr,hyr,uyr,rS,pyr,cwe,_yr,byr,vyr,Dt,tS,Fyr,mwe,Tyr,Myr,Pc,Eyr,fwe,Cyr,wyr,yee,Ayr,Lyr,yyr,u3,xyr,Fo,aS,$yr,gwe,kyr,Syr,Tn,Ryr,hwe,Pyr,Byr,uwe,Iyr,Nyr,pwe,qyr,jyr,Dyr,ht,p3,_we,Gyr,Oyr,xee,Vyr,Xyr,zyr,_3,bwe,Qyr,Wyr,$ee,Uyr,Hyr,Jyr,b3,vwe,Yyr,Zyr,kee,Kyr,e9r,o9r,v3,Fwe,r9r,t9r,See,a9r,n9r,s9r,F3,Twe,l9r,i9r,Ree,d9r,c9r,m9r,T3,f9r,Mwe,g9r,h9r,Ewe,u9r,p9r,M3,Jro,Bc,E3,Cwe,nS,_9r,wwe,b9r,Yro,rr,sS,v9r,Ic,F9r,Pee,T9r,M9r,Bee,E9r,C9r,w9r,lS,A9r,Awe,L9r,y9r,x9r,Gt,iS,$9r,Lwe,k9r,S9r,Nc,R9r,ywe,P9r,B9r,Iee,I9r,N9r,q9r,C3,j9r,To,dS,D9r,xwe,G9r,O9r,Mn,V9r,$we,X9r,z9r,kwe,Q9r,W9r,Swe,U9r,H9r,J9r,En,w3,Rwe,Y9r,Z9r,Nee,K9r,exr,oxr,A3,Pwe,rxr,txr,qee,axr,nxr,sxr,L3,Bwe,lxr,ixr,jee,dxr,cxr,mxr,y3,Iwe,fxr,gxr,Dee,hxr,uxr,pxr,x3,_xr,Nwe,bxr,vxr,qwe,Fxr,Txr,$3,Zro,qc,k3,jwe,cS,Mxr,Dwe,Exr,Kro,tr,mS,Cxr,jc,wxr,Gee,Axr,Lxr,Oee,yxr,xxr,$xr,fS,kxr,Gwe,Sxr,Rxr,Pxr,Ot,gS,Bxr,Owe,Ixr,Nxr,Dc,qxr,Vwe,jxr,Dxr,Vee,Gxr,Oxr,Vxr,S3,Xxr,Mo,hS,zxr,Xwe,Qxr,Wxr,Cn,Uxr,zwe,Hxr,Jxr,Qwe,Yxr,Zxr,Wwe,Kxr,e$r,o$r,wn,R3,Uwe,r$r,t$r,Xee,a$r,n$r,s$r,P3,Hwe,l$r,i$r,zee,d$r,c$r,m$r,B3,Jwe,f$r,g$r,Qee,h$r,u$r,p$r,I3,Ywe,_$r,b$r,Wee,v$r,F$r,T$r,N3,M$r,Zwe,E$r,C$r,Kwe,w$r,A$r,q3,eto,Gc,j3,eAe,uS,L$r,oAe,y$r,oto,ar,pS,x$r,Oc,$$r,Uee,k$r,S$r,Hee,R$r,P$r,B$r,_S,I$r,rAe,N$r,q$r,j$r,Vt,bS,D$r,tAe,G$r,O$r,Vc,V$r,aAe,X$r,z$r,Jee,Q$r,W$r,U$r,D3,H$r,Eo,vS,J$r,nAe,Y$r,Z$r,An,K$r,sAe,ekr,okr,lAe,rkr,tkr,iAe,akr,nkr,skr,dAe,G3,cAe,lkr,ikr,Yee,dkr,ckr,mkr,O3,fkr,mAe,gkr,hkr,fAe,ukr,pkr,V3,rto,Xc,X3,gAe,FS,_kr,hAe,bkr,tto,nr,TS,vkr,zc,Fkr,Zee,Tkr,Mkr,Kee,Ekr,Ckr,wkr,MS,Akr,uAe,Lkr,ykr,xkr,Xt,ES,$kr,pAe,kkr,Skr,Qc,Rkr,_Ae,Pkr,Bkr,eoe,Ikr,Nkr,qkr,z3,jkr,Co,CS,Dkr,bAe,Gkr,Okr,Ln,Vkr,vAe,Xkr,zkr,FAe,Qkr,Wkr,TAe,Ukr,Hkr,Jkr,ut,Q3,MAe,Ykr,Zkr,ooe,Kkr,eSr,oSr,W3,EAe,rSr,tSr,roe,aSr,nSr,sSr,U3,CAe,lSr,iSr,toe,dSr,cSr,mSr,H3,wAe,fSr,gSr,aoe,hSr,uSr,pSr,J3,AAe,_Sr,bSr,noe,vSr,FSr,TSr,Y3,MSr,LAe,ESr,CSr,yAe,wSr,ASr,Z3,ato,Wc,K3,xAe,wS,LSr,$Ae,ySr,nto,sr,AS,xSr,Uc,$Sr,soe,kSr,SSr,loe,RSr,PSr,BSr,LS,ISr,kAe,NSr,qSr,jSr,zt,yS,DSr,SAe,GSr,OSr,Hc,VSr,RAe,XSr,zSr,ioe,QSr,WSr,USr,e5,HSr,wo,xS,JSr,PAe,YSr,ZSr,yn,KSr,BAe,eRr,oRr,IAe,rRr,tRr,NAe,aRr,nRr,sRr,qAe,o5,jAe,lRr,iRr,doe,dRr,cRr,mRr,r5,fRr,DAe,gRr,hRr,GAe,uRr,pRr,t5,sto,Jc,a5,OAe,$S,_Rr,VAe,bRr,lto,lr,kS,vRr,Yc,FRr,coe,TRr,MRr,moe,ERr,CRr,wRr,SS,ARr,XAe,LRr,yRr,xRr,Qt,RS,$Rr,zAe,kRr,SRr,Zc,RRr,QAe,PRr,BRr,foe,IRr,NRr,qRr,n5,jRr,Ao,PS,DRr,WAe,GRr,ORr,xn,VRr,UAe,XRr,zRr,HAe,QRr,WRr,JAe,URr,HRr,JRr,YAe,s5,ZAe,YRr,ZRr,goe,KRr,ePr,oPr,l5,rPr,KAe,tPr,aPr,e6e,nPr,sPr,i5,ito,Kc,d5,o6e,BS,lPr,r6e,iPr,dto,ir,IS,dPr,em,cPr,hoe,mPr,fPr,uoe,gPr,hPr,uPr,NS,pPr,t6e,_Pr,bPr,vPr,Wt,qS,FPr,a6e,TPr,MPr,om,EPr,n6e,CPr,wPr,poe,APr,LPr,yPr,c5,xPr,qr,jS,$Pr,s6e,kPr,SPr,$n,RPr,l6e,PPr,BPr,i6e,IPr,NPr,d6e,qPr,jPr,DPr,P,m5,c6e,GPr,OPr,_oe,VPr,XPr,zPr,f5,m6e,QPr,WPr,boe,UPr,HPr,JPr,g5,f6e,YPr,ZPr,voe,KPr,eBr,oBr,h5,g6e,rBr,tBr,Foe,aBr,nBr,sBr,u5,h6e,lBr,iBr,Toe,dBr,cBr,mBr,p5,u6e,fBr,gBr,Moe,hBr,uBr,pBr,_5,p6e,_Br,bBr,Eoe,vBr,FBr,TBr,b5,_6e,MBr,EBr,Coe,CBr,wBr,ABr,v5,b6e,LBr,yBr,woe,xBr,$Br,kBr,F5,v6e,SBr,RBr,Aoe,PBr,BBr,IBr,T5,F6e,NBr,qBr,Loe,jBr,DBr,GBr,M5,T6e,OBr,VBr,yoe,XBr,zBr,QBr,E5,M6e,WBr,UBr,xoe,HBr,JBr,YBr,C5,E6e,ZBr,KBr,$oe,eIr,oIr,rIr,w5,C6e,tIr,aIr,koe,nIr,sIr,lIr,A5,w6e,iIr,dIr,Soe,cIr,mIr,fIr,L5,A6e,gIr,hIr,Roe,uIr,pIr,_Ir,y5,L6e,bIr,vIr,Poe,FIr,TIr,MIr,x5,y6e,EIr,CIr,Boe,wIr,AIr,LIr,Al,x6e,yIr,xIr,Ioe,$Ir,kIr,Noe,SIr,RIr,PIr,$5,$6e,BIr,IIr,qoe,NIr,qIr,jIr,k5,k6e,DIr,GIr,joe,OIr,VIr,XIr,S5,S6e,zIr,QIr,Doe,WIr,UIr,HIr,R5,R6e,JIr,YIr,Goe,ZIr,KIr,eNr,P5,P6e,oNr,rNr,Ooe,tNr,aNr,nNr,B5,B6e,sNr,lNr,Voe,iNr,dNr,cNr,I5,I6e,mNr,fNr,Xoe,gNr,hNr,uNr,N5,N6e,pNr,_Nr,zoe,bNr,vNr,FNr,q5,q6e,TNr,MNr,Qoe,ENr,CNr,wNr,j5,j6e,ANr,LNr,Woe,yNr,xNr,$Nr,D5,D6e,kNr,SNr,Uoe,RNr,PNr,BNr,G5,G6e,INr,NNr,Hoe,qNr,jNr,DNr,O5,O6e,GNr,ONr,Joe,VNr,XNr,zNr,V5,V6e,QNr,WNr,Yoe,UNr,HNr,JNr,X5,X6e,YNr,ZNr,Zoe,KNr,eqr,oqr,z5,z6e,rqr,tqr,Koe,aqr,nqr,sqr,Q5,Q6e,lqr,iqr,ere,dqr,cqr,mqr,W5,W6e,fqr,gqr,ore,hqr,uqr,pqr,U5,U6e,_qr,bqr,rre,vqr,Fqr,Tqr,H5,H6e,Mqr,Eqr,tre,Cqr,wqr,Aqr,J5,J6e,Lqr,yqr,are,xqr,$qr,kqr,Y5,Y6e,Sqr,Rqr,nre,Pqr,Bqr,Iqr,Z5,Z6e,Nqr,qqr,sre,jqr,Dqr,Gqr,K5,K6e,Oqr,Vqr,lre,Xqr,zqr,Qqr,e0,e7e,Wqr,Uqr,ire,Hqr,Jqr,Yqr,o0,o7e,Zqr,Kqr,dre,ejr,ojr,rjr,r0,r7e,tjr,ajr,cre,njr,sjr,ljr,t0,t7e,ijr,djr,mre,cjr,mjr,fjr,a0,a7e,gjr,hjr,fre,ujr,pjr,_jr,n0,n7e,bjr,vjr,gre,Fjr,Tjr,Mjr,s0,s7e,Ejr,Cjr,hre,wjr,Ajr,Ljr,l0,l7e,yjr,xjr,ure,$jr,kjr,Sjr,i0,i7e,Rjr,Pjr,pre,Bjr,Ijr,Njr,d0,d7e,qjr,jjr,_re,Djr,Gjr,Ojr,c0,c7e,Vjr,Xjr,bre,zjr,Qjr,Wjr,m0,m7e,Ujr,Hjr,vre,Jjr,Yjr,Zjr,f0,f7e,Kjr,eDr,Fre,oDr,rDr,tDr,g0,cto,rm,h0,g7e,DS,aDr,h7e,nDr,mto,dr,GS,sDr,tm,lDr,Tre,iDr,dDr,Mre,cDr,mDr,fDr,OS,gDr,u7e,hDr,uDr,pDr,Ut,VS,_Dr,p7e,bDr,vDr,am,FDr,_7e,TDr,MDr,Ere,EDr,CDr,wDr,u0,ADr,jr,XS,LDr,b7e,yDr,xDr,kn,$Dr,v7e,kDr,SDr,F7e,RDr,PDr,T7e,BDr,IDr,NDr,le,p0,M7e,qDr,jDr,Cre,DDr,GDr,ODr,_0,E7e,VDr,XDr,wre,zDr,QDr,WDr,b0,C7e,UDr,HDr,Are,JDr,YDr,ZDr,v0,w7e,KDr,eGr,Lre,oGr,rGr,tGr,F0,A7e,aGr,nGr,yre,sGr,lGr,iGr,T0,L7e,dGr,cGr,xre,mGr,fGr,gGr,M0,y7e,hGr,uGr,$re,pGr,_Gr,bGr,E0,x7e,vGr,FGr,kre,TGr,MGr,EGr,C0,$7e,CGr,wGr,Sre,AGr,LGr,yGr,w0,k7e,xGr,$Gr,Rre,kGr,SGr,RGr,A0,S7e,PGr,BGr,Pre,IGr,NGr,qGr,L0,R7e,jGr,DGr,Bre,GGr,OGr,VGr,y0,P7e,XGr,zGr,Ire,QGr,WGr,UGr,x0,B7e,HGr,JGr,Nre,YGr,ZGr,KGr,$0,I7e,eOr,oOr,qre,rOr,tOr,aOr,k0,N7e,nOr,sOr,jre,lOr,iOr,dOr,S0,q7e,cOr,mOr,Dre,fOr,gOr,hOr,R0,j7e,uOr,pOr,Gre,_Or,bOr,vOr,P0,D7e,FOr,TOr,Ore,MOr,EOr,COr,B0,G7e,wOr,AOr,Vre,LOr,yOr,xOr,I0,O7e,$Or,kOr,Xre,SOr,ROr,POr,N0,V7e,BOr,IOr,zre,NOr,qOr,jOr,q0,X7e,DOr,GOr,Qre,OOr,VOr,XOr,j0,fto,nm,D0,z7e,zS,zOr,Q7e,QOr,gto,cr,QS,WOr,sm,UOr,Wre,HOr,JOr,Ure,YOr,ZOr,KOr,WS,eVr,W7e,oVr,rVr,tVr,Ht,US,aVr,U7e,nVr,sVr,lm,lVr,H7e,iVr,dVr,Hre,cVr,mVr,fVr,G0,gVr,Dr,HS,hVr,J7e,uVr,pVr,Sn,_Vr,Y7e,bVr,vVr,Z7e,FVr,TVr,K7e,MVr,EVr,CVr,Me,O0,eLe,wVr,AVr,Jre,LVr,yVr,xVr,V0,oLe,$Vr,kVr,Yre,SVr,RVr,PVr,X0,rLe,BVr,IVr,Zre,NVr,qVr,jVr,z0,tLe,DVr,GVr,Kre,OVr,VVr,XVr,Q0,aLe,zVr,QVr,ete,WVr,UVr,HVr,W0,nLe,JVr,YVr,ote,ZVr,KVr,eXr,U0,sLe,oXr,rXr,rte,tXr,aXr,nXr,H0,lLe,sXr,lXr,tte,iXr,dXr,cXr,J0,iLe,mXr,fXr,ate,gXr,hXr,uXr,Y0,dLe,pXr,_Xr,nte,bXr,vXr,FXr,Z0,cLe,TXr,MXr,ste,EXr,CXr,wXr,K0,mLe,AXr,LXr,lte,yXr,xXr,$Xr,ew,fLe,kXr,SXr,ite,RXr,PXr,BXr,ow,gLe,IXr,NXr,dte,qXr,jXr,DXr,rw,hto,im,tw,hLe,JS,GXr,uLe,OXr,uto,mr,YS,VXr,dm,XXr,cte,zXr,QXr,mte,WXr,UXr,HXr,ZS,JXr,pLe,YXr,ZXr,KXr,Jt,KS,ezr,_Le,ozr,rzr,cm,tzr,bLe,azr,nzr,fte,szr,lzr,izr,aw,dzr,Gr,eR,czr,vLe,mzr,fzr,Rn,gzr,FLe,hzr,uzr,TLe,pzr,_zr,MLe,bzr,vzr,Fzr,ye,nw,ELe,Tzr,Mzr,gte,Ezr,Czr,wzr,sw,CLe,Azr,Lzr,hte,yzr,xzr,$zr,lw,wLe,kzr,Szr,ute,Rzr,Pzr,Bzr,Ll,ALe,Izr,Nzr,pte,qzr,jzr,_te,Dzr,Gzr,Ozr,iw,LLe,Vzr,Xzr,bte,zzr,Qzr,Wzr,dw,yLe,Uzr,Hzr,vte,Jzr,Yzr,Zzr,cw,xLe,Kzr,eQr,Fte,oQr,rQr,tQr,mw,$Le,aQr,nQr,Tte,sQr,lQr,iQr,fw,kLe,dQr,cQr,Mte,mQr,fQr,gQr,gw,SLe,hQr,uQr,Ete,pQr,_Qr,bQr,hw,pto,mm,uw,RLe,oR,vQr,PLe,FQr,_to,fr,rR,TQr,fm,MQr,Cte,EQr,CQr,wte,wQr,AQr,LQr,tR,yQr,BLe,xQr,$Qr,kQr,Yt,aR,SQr,ILe,RQr,PQr,gm,BQr,NLe,IQr,NQr,Ate,qQr,jQr,DQr,pw,GQr,Or,nR,OQr,qLe,VQr,XQr,Pn,zQr,jLe,QQr,WQr,DLe,UQr,HQr,GLe,JQr,YQr,ZQr,hm,_w,OLe,KQr,eWr,Lte,oWr,rWr,tWr,bw,VLe,aWr,nWr,yte,sWr,lWr,iWr,vw,XLe,dWr,cWr,xte,mWr,fWr,gWr,Fw,bto,um,Tw,zLe,sR,hWr,QLe,uWr,vto,gr,lR,pWr,pm,_Wr,$te,bWr,vWr,kte,FWr,TWr,MWr,iR,EWr,WLe,CWr,wWr,AWr,Zt,dR,LWr,ULe,yWr,xWr,_m,$Wr,HLe,kWr,SWr,Ste,RWr,PWr,BWr,Mw,IWr,Vr,cR,NWr,JLe,qWr,jWr,Bn,DWr,YLe,GWr,OWr,ZLe,VWr,XWr,KLe,zWr,QWr,WWr,ge,Ew,e8e,UWr,HWr,Rte,JWr,YWr,ZWr,Cw,o8e,KWr,eUr,Pte,oUr,rUr,tUr,ww,r8e,aUr,nUr,Bte,sUr,lUr,iUr,Aw,t8e,dUr,cUr,Ite,mUr,fUr,gUr,Lw,a8e,hUr,uUr,Nte,pUr,_Ur,bUr,yw,n8e,vUr,FUr,qte,TUr,MUr,EUr,xw,s8e,CUr,wUr,jte,AUr,LUr,yUr,$w,l8e,xUr,$Ur,Dte,kUr,SUr,RUr,kw,i8e,PUr,BUr,Gte,IUr,NUr,qUr,Sw,d8e,jUr,DUr,Ote,GUr,OUr,VUr,Rw,c8e,XUr,zUr,Vte,QUr,WUr,UUr,Pw,m8e,HUr,JUr,Xte,YUr,ZUr,KUr,Bw,f8e,eHr,oHr,zte,rHr,tHr,aHr,Iw,g8e,nHr,sHr,Qte,lHr,iHr,dHr,Nw,h8e,cHr,mHr,Wte,fHr,gHr,hHr,qw,u8e,uHr,pHr,Ute,_Hr,bHr,vHr,jw,p8e,FHr,THr,Hte,MHr,EHr,CHr,Dw,_8e,wHr,AHr,Jte,LHr,yHr,xHr,Gw,b8e,$Hr,kHr,Yte,SHr,RHr,PHr,Ow,v8e,BHr,IHr,Zte,NHr,qHr,jHr,Vw,Fto,bm,Xw,F8e,mR,DHr,T8e,GHr,Tto,hr,fR,OHr,vm,VHr,Kte,XHr,zHr,eae,QHr,WHr,UHr,gR,HHr,M8e,JHr,YHr,ZHr,Kt,hR,KHr,E8e,eJr,oJr,Fm,rJr,C8e,tJr,aJr,oae,nJr,sJr,lJr,zw,iJr,Xr,uR,dJr,w8e,cJr,mJr,In,fJr,A8e,gJr,hJr,L8e,uJr,pJr,y8e,_Jr,bJr,vJr,xe,Qw,x8e,FJr,TJr,rae,MJr,EJr,CJr,Ww,$8e,wJr,AJr,tae,LJr,yJr,xJr,Uw,k8e,$Jr,kJr,aae,SJr,RJr,PJr,Hw,S8e,BJr,IJr,nae,NJr,qJr,jJr,Jw,R8e,DJr,GJr,sae,OJr,VJr,XJr,Yw,P8e,zJr,QJr,lae,WJr,UJr,HJr,Zw,B8e,JJr,YJr,iae,ZJr,KJr,eYr,Kw,I8e,oYr,rYr,dae,tYr,aYr,nYr,eA,N8e,sYr,lYr,cae,iYr,dYr,cYr,oA,q8e,mYr,fYr,mae,gYr,hYr,uYr,rA,Mto,Tm,tA,j8e,pR,pYr,D8e,_Yr,Eto,ur,_R,bYr,Mm,vYr,fae,FYr,TYr,gae,MYr,EYr,CYr,bR,wYr,G8e,AYr,LYr,yYr,ea,vR,xYr,O8e,$Yr,kYr,Em,SYr,V8e,RYr,PYr,hae,BYr,IYr,NYr,aA,qYr,zr,FR,jYr,X8e,DYr,GYr,Nn,OYr,z8e,VYr,XYr,Q8e,zYr,QYr,W8e,WYr,UYr,HYr,re,nA,U8e,JYr,YYr,uae,ZYr,KYr,eZr,sA,H8e,oZr,rZr,pae,tZr,aZr,nZr,lA,J8e,sZr,lZr,_ae,iZr,dZr,cZr,iA,Y8e,mZr,fZr,bae,gZr,hZr,uZr,dA,Z8e,pZr,_Zr,vae,bZr,vZr,FZr,cA,K8e,TZr,MZr,Fae,EZr,CZr,wZr,mA,eye,AZr,LZr,Tae,yZr,xZr,$Zr,fA,oye,kZr,SZr,Mae,RZr,PZr,BZr,gA,rye,IZr,NZr,Eae,qZr,jZr,DZr,hA,tye,GZr,OZr,Cae,VZr,XZr,zZr,uA,aye,QZr,WZr,wae,UZr,HZr,JZr,pA,nye,YZr,ZZr,Aae,KZr,eKr,oKr,_A,sye,rKr,tKr,Lae,aKr,nKr,sKr,bA,lye,lKr,iKr,yae,dKr,cKr,mKr,vA,iye,fKr,gKr,xae,hKr,uKr,pKr,FA,dye,_Kr,bKr,$ae,vKr,FKr,TKr,TA,cye,MKr,EKr,kae,CKr,wKr,AKr,MA,mye,LKr,yKr,Sae,xKr,$Kr,kKr,EA,fye,SKr,RKr,Rae,PKr,BKr,IKr,CA,gye,NKr,qKr,Pae,jKr,DKr,GKr,wA,hye,OKr,VKr,Bae,XKr,zKr,QKr,AA,uye,WKr,UKr,Iae,HKr,JKr,YKr,LA,pye,ZKr,KKr,Nae,eet,oet,ret,yA,_ye,tet,aet,qae,net,set,iet,xA,bye,det,cet,jae,met,fet,get,$A,vye,het,uet,Dae,pet,_et,bet,kA,Fye,vet,Fet,Gae,Tet,Met,Eet,SA,Cto,Cm,RA,Tye,TR,Cet,Mye,wet,wto,pr,MR,Aet,wm,Let,Oae,yet,xet,Vae,$et,ket,Set,ER,Ret,Eye,Pet,Bet,Iet,oa,CR,Net,Cye,qet,jet,Am,Det,wye,Get,Oet,Xae,Vet,Xet,zet,PA,Qet,Qr,wR,Wet,Aye,Uet,Het,qn,Jet,Lye,Yet,Zet,yye,Ket,eot,xye,oot,rot,tot,ve,BA,$ye,aot,not,zae,sot,lot,iot,IA,kye,dot,cot,Qae,mot,fot,got,NA,Sye,hot,uot,Wae,pot,_ot,bot,qA,Rye,vot,Fot,Uae,Tot,Mot,Eot,jA,Pye,Cot,wot,Hae,Aot,Lot,yot,DA,Bye,xot,$ot,Jae,kot,Sot,Rot,GA,Iye,Pot,Bot,Yae,Iot,Not,qot,OA,Nye,jot,Dot,Zae,Got,Oot,Vot,VA,qye,Xot,zot,Kae,Qot,Wot,Uot,XA,jye,Hot,Jot,ene,Yot,Zot,Kot,zA,Dye,ert,ort,one,rrt,trt,art,QA,Gye,nrt,srt,rne,lrt,irt,drt,WA,Oye,crt,mrt,tne,frt,grt,hrt,UA,Vye,urt,prt,ane,_rt,brt,vrt,HA,Xye,Frt,Trt,nne,Mrt,Ert,Crt,JA,zye,wrt,Art,sne,Lrt,yrt,xrt,YA,Qye,$rt,krt,lne,Srt,Rrt,Prt,ZA,Ato,Lm,KA,Wye,AR,Brt,Uye,Irt,Lto,_r,LR,Nrt,ym,qrt,ine,jrt,Drt,dne,Grt,Ort,Vrt,yR,Xrt,Hye,zrt,Qrt,Wrt,ra,xR,Urt,Jye,Hrt,Jrt,xm,Yrt,Yye,Zrt,Krt,cne,ett,ott,rtt,e6,ttt,Wr,$R,att,Zye,ntt,stt,jn,ltt,Kye,itt,dtt,e9e,ctt,mtt,o9e,ftt,gtt,htt,kR,o6,r9e,utt,ptt,mne,_tt,btt,vtt,r6,t9e,Ftt,Ttt,fne,Mtt,Ett,Ctt,t6,yto,$m,a6,a9e,SR,wtt,n9e,Att,xto,br,RR,Ltt,km,ytt,gne,xtt,$tt,hne,ktt,Stt,Rtt,PR,Ptt,s9e,Btt,Itt,Ntt,ta,BR,qtt,l9e,jtt,Dtt,Sm,Gtt,i9e,Ott,Vtt,une,Xtt,ztt,Qtt,n6,Wtt,Ur,IR,Utt,d9e,Htt,Jtt,Dn,Ytt,c9e,Ztt,Ktt,m9e,eat,oat,f9e,rat,tat,aat,g9e,s6,h9e,nat,sat,pne,lat,iat,dat,l6,$to,Rm,i6,u9e,NR,cat,p9e,mat,kto,vr,qR,fat,Pm,gat,_ne,hat,uat,bne,pat,_at,bat,jR,vat,_9e,Fat,Tat,Mat,aa,DR,Eat,b9e,Cat,wat,Bm,Aat,v9e,Lat,yat,vne,xat,$at,kat,d6,Sat,Hr,GR,Rat,F9e,Pat,Bat,Gn,Iat,T9e,Nat,qat,M9e,jat,Dat,E9e,Gat,Oat,Vat,C9e,c6,w9e,Xat,zat,Fne,Qat,Wat,Uat,m6,Sto,Im,f6,A9e,OR,Hat,L9e,Jat,Rto,Fr,VR,Yat,Nm,Zat,Tne,Kat,ent,Mne,ont,rnt,tnt,XR,ant,y9e,nnt,snt,lnt,na,zR,int,x9e,dnt,cnt,qm,mnt,$9e,fnt,gnt,Ene,hnt,unt,pnt,g6,_nt,Jr,QR,bnt,k9e,vnt,Fnt,On,Tnt,S9e,Mnt,Ent,R9e,Cnt,wnt,P9e,Ant,Lnt,ynt,ce,h6,B9e,xnt,$nt,Cne,knt,Snt,Rnt,u6,I9e,Pnt,Bnt,wne,Int,Nnt,qnt,p6,N9e,jnt,Dnt,Ane,Gnt,Ont,Vnt,_6,q9e,Xnt,znt,Lne,Qnt,Wnt,Unt,b6,j9e,Hnt,Jnt,yne,Ynt,Znt,Knt,v6,D9e,est,ost,xne,rst,tst,ast,F6,G9e,nst,sst,$ne,lst,ist,dst,T6,O9e,cst,mst,kne,fst,gst,hst,M6,V9e,ust,pst,Sne,_st,bst,vst,E6,X9e,Fst,Tst,Rne,Mst,Est,Cst,C6,z9e,wst,Ast,Pne,Lst,yst,xst,w6,Q9e,$st,kst,Bne,Sst,Rst,Pst,A6,W9e,Bst,Ist,Ine,Nst,qst,jst,L6,U9e,Dst,Gst,Nne,Ost,Vst,Xst,y6,H9e,zst,Qst,qne,Wst,Ust,Hst,x6,J9e,Jst,Yst,jne,Zst,Kst,elt,$6,Y9e,olt,rlt,Dne,tlt,alt,nlt,k6,Z9e,slt,llt,Gne,ilt,dlt,clt,S6,K9e,mlt,flt,One,glt,hlt,ult,R6,exe,plt,_lt,Vne,blt,vlt,Flt,P6,oxe,Tlt,Mlt,Xne,Elt,Clt,wlt,B6,Pto,jm,I6,rxe,WR,Alt,txe,Llt,Bto,Tr,UR,ylt,Dm,xlt,zne,$lt,klt,Qne,Slt,Rlt,Plt,HR,Blt,axe,Ilt,Nlt,qlt,sa,JR,jlt,nxe,Dlt,Glt,Gm,Olt,sxe,Vlt,Xlt,Wne,zlt,Qlt,Wlt,N6,Ult,Yr,YR,Hlt,lxe,Jlt,Ylt,Vn,Zlt,ixe,Klt,eit,dxe,oit,rit,cxe,tit,ait,nit,me,q6,mxe,sit,lit,Une,iit,dit,cit,j6,fxe,mit,fit,Hne,git,hit,uit,D6,gxe,pit,_it,Jne,bit,vit,Fit,G6,hxe,Tit,Mit,Yne,Eit,Cit,wit,O6,uxe,Ait,Lit,Zne,yit,xit,$it,V6,pxe,kit,Sit,Kne,Rit,Pit,Bit,X6,_xe,Iit,Nit,ese,qit,jit,Dit,z6,bxe,Git,Oit,ose,Vit,Xit,zit,Q6,vxe,Qit,Wit,rse,Uit,Hit,Jit,W6,Fxe,Yit,Zit,tse,Kit,edt,odt,U6,Txe,rdt,tdt,ase,adt,ndt,sdt,H6,Mxe,ldt,idt,nse,ddt,cdt,mdt,J6,Exe,fdt,gdt,sse,hdt,udt,pdt,Y6,Cxe,_dt,bdt,lse,vdt,Fdt,Tdt,Z6,wxe,Mdt,Edt,ise,Cdt,wdt,Adt,K6,Axe,Ldt,ydt,dse,xdt,$dt,kdt,e7,Lxe,Sdt,Rdt,cse,Pdt,Bdt,Idt,o7,yxe,Ndt,qdt,mse,jdt,Ddt,Gdt,r7,xxe,Odt,Vdt,fse,Xdt,zdt,Qdt,t7,$xe,Wdt,Udt,gse,Hdt,Jdt,Ydt,a7,kxe,Zdt,Kdt,hse,ect,oct,rct,n7,Ito,Om,s7,Sxe,ZR,tct,Rxe,act,Nto,Mr,KR,nct,Vm,sct,use,lct,ict,pse,dct,cct,mct,eP,fct,Pxe,gct,hct,uct,la,oP,pct,Bxe,_ct,bct,Xm,vct,Ixe,Fct,Tct,_se,Mct,Ect,Cct,l7,wct,Zr,rP,Act,Nxe,Lct,yct,Xn,xct,qxe,$ct,kct,jxe,Sct,Rct,Dxe,Pct,Bct,Ict,Gxe,i7,Oxe,Nct,qct,bse,jct,Dct,Gct,d7,qto,zm,c7,Vxe,tP,Oct,Xxe,Vct,jto,Er,aP,Xct,Qm,zct,vse,Qct,Wct,Fse,Uct,Hct,Jct,nP,Yct,zxe,Zct,Kct,emt,ia,sP,omt,Qxe,rmt,tmt,Wm,amt,Wxe,nmt,smt,Tse,lmt,imt,dmt,m7,cmt,Kr,lP,mmt,Uxe,fmt,gmt,zn,hmt,Hxe,umt,pmt,Jxe,_mt,bmt,Yxe,vmt,Fmt,Tmt,iP,f7,Zxe,Mmt,Emt,Mse,Cmt,wmt,Amt,g7,Kxe,Lmt,ymt,Ese,xmt,$mt,kmt,h7,Dto,Um,u7,e$e,dP,Smt,o$e,Rmt,Gto,Cr,cP,Pmt,Hm,Bmt,Cse,Imt,Nmt,wse,qmt,jmt,Dmt,mP,Gmt,r$e,Omt,Vmt,Xmt,da,fP,zmt,t$e,Qmt,Wmt,Jm,Umt,a$e,Hmt,Jmt,Ase,Ymt,Zmt,Kmt,p7,eft,et,gP,oft,n$e,rft,tft,Qn,aft,s$e,nft,sft,l$e,lft,ift,i$e,dft,cft,mft,te,_7,d$e,fft,gft,Lse,hft,uft,pft,b7,c$e,_ft,bft,yse,vft,Fft,Tft,v7,m$e,Mft,Eft,xse,Cft,wft,Aft,F7,f$e,Lft,yft,$se,xft,$ft,kft,T7,g$e,Sft,Rft,kse,Pft,Bft,Ift,M7,h$e,Nft,qft,Sse,jft,Dft,Gft,E7,u$e,Oft,Vft,Rse,Xft,zft,Qft,C7,p$e,Wft,Uft,Pse,Hft,Jft,Yft,w7,_$e,Zft,Kft,Bse,egt,ogt,rgt,A7,b$e,tgt,agt,Ise,ngt,sgt,lgt,L7,v$e,igt,dgt,Nse,cgt,mgt,fgt,y7,F$e,ggt,hgt,qse,ugt,pgt,_gt,x7,T$e,bgt,vgt,jse,Fgt,Tgt,Mgt,$7,M$e,Egt,Cgt,Dse,wgt,Agt,Lgt,k7,E$e,ygt,xgt,Gse,$gt,kgt,Sgt,S7,C$e,Rgt,Pgt,Ose,Bgt,Igt,Ngt,R7,w$e,qgt,jgt,Vse,Dgt,Ggt,Ogt,P7,A$e,Vgt,Xgt,Xse,zgt,Qgt,Wgt,B7,L$e,Ugt,Hgt,zse,Jgt,Ygt,Zgt,I7,y$e,Kgt,eht,Qse,oht,rht,tht,N7,x$e,aht,nht,Wse,sht,lht,iht,q7,$$e,dht,cht,Use,mht,fht,ght,j7,k$e,hht,uht,Hse,pht,_ht,bht,D7,S$e,vht,Fht,Jse,Tht,Mht,Eht,G7,R$e,Cht,wht,Yse,Aht,Lht,yht,O7,P$e,xht,$ht,Zse,kht,Sht,Rht,V7,B$e,Pht,Bht,Kse,Iht,Nht,qht,X7,Oto,Ym,z7,I$e,hP,jht,N$e,Dht,Vto,wr,uP,Ght,Zm,Oht,ele,Vht,Xht,ole,zht,Qht,Wht,pP,Uht,q$e,Hht,Jht,Yht,ca,_P,Zht,j$e,Kht,eut,Km,out,D$e,rut,tut,rle,aut,nut,sut,Q7,lut,ot,bP,iut,G$e,dut,cut,Wn,mut,O$e,fut,gut,V$e,hut,uut,X$e,put,_ut,but,$e,W7,z$e,vut,Fut,tle,Tut,Mut,Eut,U7,Q$e,Cut,wut,ale,Aut,Lut,yut,H7,W$e,xut,$ut,nle,kut,Sut,Rut,J7,U$e,Put,But,sle,Iut,Nut,qut,Y7,H$e,jut,Dut,lle,Gut,Out,Vut,Z7,J$e,Xut,zut,ile,Qut,Wut,Uut,K7,Y$e,Hut,Jut,dle,Yut,Zut,Kut,eL,Z$e,ept,opt,cle,rpt,tpt,apt,oL,K$e,npt,spt,mle,lpt,ipt,dpt,rL,eke,cpt,mpt,fle,fpt,gpt,hpt,tL,Xto,ef,aL,oke,vP,upt,rke,ppt,zto,Ar,FP,_pt,of,bpt,gle,vpt,Fpt,hle,Tpt,Mpt,Ept,TP,Cpt,tke,wpt,Apt,Lpt,ma,MP,ypt,ake,xpt,$pt,rf,kpt,nke,Spt,Rpt,ule,Ppt,Bpt,Ipt,nL,Npt,rt,EP,qpt,ske,jpt,Dpt,Un,Gpt,lke,Opt,Vpt,ike,Xpt,zpt,dke,Qpt,Wpt,Upt,Ee,sL,cke,Hpt,Jpt,ple,Ypt,Zpt,Kpt,lL,mke,e_t,o_t,_le,r_t,t_t,a_t,iL,fke,n_t,s_t,ble,l_t,i_t,d_t,dL,gke,c_t,m_t,vle,f_t,g_t,h_t,cL,hke,u_t,p_t,Fle,__t,b_t,v_t,mL,uke,F_t,T_t,Tle,M_t,E_t,C_t,fL,pke,w_t,A_t,Mle,L_t,y_t,x_t,gL,_ke,$_t,k_t,Ele,S_t,R_t,P_t,hL,bke,B_t,I_t,Cle,N_t,q_t,j_t,uL,vke,D_t,G_t,wle,O_t,V_t,X_t,pL,Fke,z_t,Q_t,Ale,W_t,U_t,H_t,_L,Tke,J_t,Y_t,Lle,Z_t,K_t,e1t,bL,Mke,o1t,r1t,yle,t1t,a1t,n1t,vL,Qto,tf,FL,Eke,CP,s1t,Cke,l1t,Wto,Lr,wP,i1t,af,d1t,xle,c1t,m1t,$le,f1t,g1t,h1t,AP,u1t,wke,p1t,_1t,b1t,fa,LP,v1t,Ake,F1t,T1t,nf,M1t,Lke,E1t,C1t,kle,w1t,A1t,L1t,TL,y1t,tt,yP,x1t,yke,$1t,k1t,Hn,S1t,xke,R1t,P1t,$ke,B1t,I1t,kke,N1t,q1t,j1t,ke,ML,Ske,D1t,G1t,Sle,O1t,V1t,X1t,EL,Rke,z1t,Q1t,Rle,W1t,U1t,H1t,CL,Pke,J1t,Y1t,Ple,Z1t,K1t,e2t,wL,Bke,o2t,r2t,Ble,t2t,a2t,n2t,AL,Ike,s2t,l2t,Ile,i2t,d2t,c2t,LL,Nke,m2t,f2t,Nle,g2t,h2t,u2t,yL,qke,p2t,_2t,qle,b2t,v2t,F2t,xL,jke,T2t,M2t,jle,E2t,C2t,w2t,$L,Dke,A2t,L2t,Dle,y2t,x2t,$2t,kL,Gke,k2t,S2t,Gle,R2t,P2t,B2t,SL,Uto,sf,RL,Oke,xP,I2t,Vke,N2t,Hto,yr,$P,q2t,lf,j2t,Ole,D2t,G2t,Vle,O2t,V2t,X2t,kP,z2t,Xke,Q2t,W2t,U2t,ga,SP,H2t,zke,J2t,Y2t,df,Z2t,Qke,K2t,ebt,Xle,obt,rbt,tbt,PL,abt,at,RP,nbt,Wke,sbt,lbt,Jn,ibt,Uke,dbt,cbt,Hke,mbt,fbt,Jke,gbt,hbt,ubt,Se,BL,Yke,pbt,_bt,zle,bbt,vbt,Fbt,IL,Zke,Tbt,Mbt,Qle,Ebt,Cbt,wbt,NL,Kke,Abt,Lbt,Wle,ybt,xbt,$bt,qL,eSe,kbt,Sbt,Ule,Rbt,Pbt,Bbt,jL,oSe,Ibt,Nbt,Hle,qbt,jbt,Dbt,DL,rSe,Gbt,Obt,Jle,Vbt,Xbt,zbt,GL,tSe,Qbt,Wbt,Yle,Ubt,Hbt,Jbt,OL,aSe,Ybt,Zbt,Zle,Kbt,evt,ovt,VL,nSe,rvt,tvt,Kle,avt,nvt,svt,XL,sSe,lvt,ivt,eie,dvt,cvt,mvt,zL,Jto,cf,QL,lSe,PP,fvt,iSe,gvt,Yto,xr,BP,hvt,mf,uvt,oie,pvt,_vt,rie,bvt,vvt,Fvt,IP,Tvt,dSe,Mvt,Evt,Cvt,ha,NP,wvt,cSe,Avt,Lvt,ff,yvt,mSe,xvt,$vt,tie,kvt,Svt,Rvt,WL,Pvt,nt,qP,Bvt,fSe,Ivt,Nvt,Yn,qvt,gSe,jvt,Dvt,hSe,Gvt,Ovt,uSe,Vvt,Xvt,zvt,Re,UL,pSe,Qvt,Wvt,aie,Uvt,Hvt,Jvt,HL,_Se,Yvt,Zvt,nie,Kvt,eFt,oFt,JL,bSe,rFt,tFt,sie,aFt,nFt,sFt,YL,vSe,lFt,iFt,lie,dFt,cFt,mFt,ZL,FSe,fFt,gFt,iie,hFt,uFt,pFt,KL,TSe,_Ft,bFt,die,vFt,FFt,TFt,e8,MSe,MFt,EFt,cie,CFt,wFt,AFt,o8,ESe,LFt,yFt,mie,xFt,$Ft,kFt,r8,CSe,SFt,RFt,fie,PFt,BFt,IFt,t8,wSe,NFt,qFt,gie,jFt,DFt,GFt,a8,Zto,gf,n8,ASe,jP,OFt,LSe,VFt,Kto,$r,DP,XFt,hf,zFt,hie,QFt,WFt,uie,UFt,HFt,JFt,GP,YFt,ySe,ZFt,KFt,eTt,ua,OP,oTt,xSe,rTt,tTt,uf,aTt,$Se,nTt,sTt,pie,lTt,iTt,dTt,s8,cTt,st,VP,mTt,kSe,fTt,gTt,Zn,hTt,SSe,uTt,pTt,RSe,_Tt,bTt,PSe,vTt,FTt,TTt,Pe,l8,BSe,MTt,ETt,_ie,CTt,wTt,ATt,i8,ISe,LTt,yTt,bie,xTt,$Tt,kTt,d8,NSe,STt,RTt,vie,PTt,BTt,ITt,c8,qSe,NTt,qTt,Fie,jTt,DTt,GTt,m8,jSe,OTt,VTt,Tie,XTt,zTt,QTt,f8,DSe,WTt,UTt,Mie,HTt,JTt,YTt,g8,GSe,ZTt,KTt,Eie,eMt,oMt,rMt,h8,OSe,tMt,aMt,Cie,nMt,sMt,lMt,u8,VSe,iMt,dMt,wie,cMt,mMt,fMt,p8,XSe,gMt,hMt,Aie,uMt,pMt,_Mt,_8,eao,pf,b8,zSe,XP,bMt,QSe,vMt,oao,kr,zP,FMt,_f,TMt,Lie,MMt,EMt,yie,CMt,wMt,AMt,QP,LMt,WSe,yMt,xMt,$Mt,pa,WP,kMt,USe,SMt,RMt,bf,PMt,HSe,BMt,IMt,xie,NMt,qMt,jMt,v8,DMt,lt,UP,GMt,JSe,OMt,VMt,Kn,XMt,YSe,zMt,QMt,ZSe,WMt,UMt,KSe,HMt,JMt,YMt,ze,F8,eRe,ZMt,KMt,$ie,eEt,oEt,rEt,T8,oRe,tEt,aEt,kie,nEt,sEt,lEt,M8,rRe,iEt,dEt,Sie,cEt,mEt,fEt,E8,tRe,gEt,hEt,Rie,uEt,pEt,_Et,C8,aRe,bEt,vEt,Pie,FEt,TEt,MEt,w8,nRe,EEt,CEt,Bie,wEt,AEt,LEt,A8,sRe,yEt,xEt,Iie,$Et,kEt,SEt,L8,lRe,REt,PEt,Nie,BEt,IEt,NEt,y8,rao,vf,x8,iRe,HP,qEt,dRe,jEt,tao,Sr,JP,DEt,Ff,GEt,qie,OEt,VEt,jie,XEt,zEt,QEt,YP,WEt,cRe,UEt,HEt,JEt,_a,ZP,YEt,mRe,ZEt,KEt,Tf,e4t,fRe,o4t,r4t,Die,t4t,a4t,n4t,$8,s4t,it,KP,l4t,gRe,i4t,d4t,es,c4t,hRe,m4t,f4t,uRe,g4t,h4t,pRe,u4t,p4t,_4t,Qe,k8,_Re,b4t,v4t,Gie,F4t,T4t,M4t,S8,bRe,E4t,C4t,Oie,w4t,A4t,L4t,R8,vRe,y4t,x4t,Vie,$4t,k4t,S4t,P8,FRe,R4t,P4t,Xie,B4t,I4t,N4t,B8,TRe,q4t,j4t,zie,D4t,G4t,O4t,I8,MRe,V4t,X4t,Qie,z4t,Q4t,W4t,N8,ERe,U4t,H4t,Wie,J4t,Y4t,Z4t,q8,CRe,K4t,eCt,Uie,oCt,rCt,tCt,j8,aao,Mf,D8,wRe,eB,aCt,ARe,nCt,nao,Rr,oB,sCt,Ef,lCt,Hie,iCt,dCt,Jie,cCt,mCt,fCt,rB,gCt,LRe,hCt,uCt,pCt,ba,tB,_Ct,yRe,bCt,vCt,Cf,FCt,xRe,TCt,MCt,Yie,ECt,CCt,wCt,G8,ACt,dt,aB,LCt,$Re,yCt,xCt,os,$Ct,kRe,kCt,SCt,SRe,RCt,PCt,RRe,BCt,ICt,NCt,PRe,O8,BRe,qCt,jCt,Zie,DCt,GCt,OCt,V8,sao,wf,X8,IRe,nB,VCt,NRe,XCt,lao,Pr,sB,zCt,Af,QCt,Kie,WCt,UCt,ede,HCt,JCt,YCt,lB,ZCt,qRe,KCt,e3t,o3t,va,iB,r3t,jRe,t3t,a3t,Lf,n3t,DRe,s3t,l3t,ode,i3t,d3t,c3t,z8,m3t,ct,dB,f3t,GRe,g3t,h3t,rs,u3t,ORe,p3t,_3t,VRe,b3t,v3t,XRe,F3t,T3t,M3t,cB,Q8,zRe,E3t,C3t,rde,w3t,A3t,L3t,W8,QRe,y3t,x3t,tde,$3t,k3t,S3t,U8,iao,yf,H8,WRe,mB,R3t,URe,P3t,dao,Br,fB,B3t,xf,I3t,ade,N3t,q3t,nde,j3t,D3t,G3t,gB,O3t,HRe,V3t,X3t,z3t,Fa,hB,Q3t,JRe,W3t,U3t,$f,H3t,YRe,J3t,Y3t,sde,Z3t,K3t,e5t,J8,o5t,mt,uB,r5t,ZRe,t5t,a5t,ts,n5t,KRe,s5t,l5t,ePe,i5t,d5t,oPe,c5t,m5t,f5t,rPe,Y8,tPe,g5t,h5t,lde,u5t,p5t,_5t,Z8,cao;return d=new oe({}),Ja=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Ix=new oe({}),Nx=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),jf=new b5t({props:{warning:!0,$$slots:{default:[MMa]},$$scope:{ctx:$}}}),qx=new oe({}),jx=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L662"}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L685"}}),gu=new q({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[EMa]},$$scope:{ctx:$}}}),Vx=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L808"}}),Xx=new oe({}),zx=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L429"}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L443"}}),Yu=new q({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[CMa]},$$scope:{ctx:$}}}),Hx=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L644"}}),Jx=new oe({}),Yx=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L203"}}),e$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L217"}}),Vp=new b5t({props:{$$slots:{default:[wMa]},$$scope:{ctx:$}}}),Xp=new q({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[AMa]},$$scope:{ctx:$}}}),o$=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L344"}}),r$=new oe({}),t$=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L96"}}),s$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L110"}}),p_=new b5t({props:{$$slots:{default:[LMa]},$$scope:{ctx:$}}}),__=new q({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[yMa]},$$scope:{ctx:$}}}),l$=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L277"}}),i$=new oe({}),d$=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L878"}}),m$=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig">ConditionalDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrModel">ConditionalDetrModel</a> (Conditional DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrModel">DeformableDetrModel</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieModel">ErnieModel</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmModel">EsmModel</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig">GPTNeoXJapaneseConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseModel">GPTNeoXJapaneseModel</a> (GPT NeoX Japanese model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lilt#transformers.LiltConfig">LiltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lilt#transformers.LiltModel">LiltModel</a> (LiLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMModel">MarkupLMModel</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel">PegasusXModel</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerConfig">TimeSeriesTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerModel">TimeSeriesTransformerModel</a> (Time Series Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig">ViTMSNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNModel">ViTMSNModel</a> (ViTMSN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperConfig">WhisperConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperModel">WhisperModel</a> (Whisper model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPConfig">XCLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPModel">XCLIPModel</a> (X-CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),F_=new q({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[xMa]},$$scope:{ctx:$}}}),f$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G2=new q({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[$Ma]},$$scope:{ctx:$}}}),g$=new oe({}),h$=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L885"}}),p$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForPreTraining">ErnieForPreTraining</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V2=new q({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[kMa]},$$scope:{ctx:$}}}),_$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),jb=new q({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[SMa]},$$scope:{ctx:$}}}),b$=new oe({}),v$=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L900"}}),T$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForCausalLM">ErnieForCausalLM</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig">GPTNeoXJapaneseConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseForCausalLM">GPTNeoXJapaneseForCausalLM</a> (GPT NeoX Japanese model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Gb=new q({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[RMa]},$$scope:{ctx:$}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kv=new q({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[PMa]},$$scope:{ctx:$}}}),E$=new oe({}),C$=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L907"}}),A$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMaskedLM">ErnieForMaskedLM</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Rv=new q({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[BMa]},$$scope:{ctx:$}}}),L$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),FF=new q({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[IMa]},$$scope:{ctx:$}}}),y$=new oe({}),x$=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L914"}}),k$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration">PegasusXForConditionalGeneration</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),MF=new q({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[NMa]},$$scope:{ctx:$}}}),S$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),XF=new q({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[qMa]},$$scope:{ctx:$}}}),R$=new oe({}),P$=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L923"}}),I$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForSequenceClassification">ErnieForSequenceClassification</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmForSequenceClassification">EsmForSequenceClassification</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lilt#transformers.LiltConfig">LiltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lilt#transformers.LiltForSequenceClassification">LiltForSequenceClassification</a> (LiLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForSequenceClassification">MarkupLMForSequenceClassification</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),QF=new q({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[jMa]},$$scope:{ctx:$}}}),N$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),JT=new q({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[DMa]},$$scope:{ctx:$}}}),q$=new oe({}),j$=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L979"}}),G$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMultipleChoice">ErnieForMultipleChoice</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ZT=new q({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[GMa]},$$scope:{ctx:$}}}),O$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),SM=new q({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[OMa]},$$scope:{ctx:$}}}),V$=new oe({}),X$=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L986"}}),Q$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForNextSentencePrediction">ErnieForNextSentencePrediction</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),PM=new q({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[VMa]},$$scope:{ctx:$}}}),W$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),VM=new q({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[XMa]},$$scope:{ctx:$}}}),U$=new oe({}),H$=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L972"}}),Y$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForTokenClassification">ErnieForTokenClassification</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmForTokenClassification">EsmForTokenClassification</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lilt#transformers.LiltConfig">LiltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lilt#transformers.LiltForTokenClassification">LiltForTokenClassification</a> (LiLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForTokenClassification">MarkupLMForTokenClassification</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zM=new q({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[zMa]},$$scope:{ctx:$}}}),Z$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),PE=new q({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[QMa]},$$scope:{ctx:$}}}),K$=new oe({}),ek=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L932"}}),rk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForQuestionAnswering">BloomForQuestionAnswering</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForQuestionAnswering">ErnieForQuestionAnswering</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lilt#transformers.LiltConfig">LiltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lilt#transformers.LiltForQuestionAnswering">LiltForQuestionAnswering</a> (LiLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForQuestionAnswering">MarkupLMForQuestionAnswering</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForQuestionAnswering">OPTForQuestionAnswering</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),IE=new q({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[WMa]},$$scope:{ctx:$}}}),tk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),S4=new q({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[UMa]},$$scope:{ctx:$}}}),ak=new oe({}),nk=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L939"}}),lk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),P4=new q({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[HMa]},$$scope:{ctx:$}}}),ik=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),N4=new q({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[JMa]},$$scope:{ctx:$}}}),dk=new oe({}),ck=new R({props:{name:"class transformers.AutoModelForDocumentQuestionAnswering",anchor:"transformers.AutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L961"}}),fk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering">LayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),j4=new q({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[YMa]},$$scope:{ctx:$}}}),gk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),X4=new q({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[ZMa]},$$scope:{ctx:$}}}),hk=new oe({}),uk=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L995"}}),_k=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig">ViTMSNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNForImageClassification">ViTMSNForImageClassification</a> (ViTMSN model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Q4=new q({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[KMa]},$$scope:{ctx:$}}}),bk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),dC=new q({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[eEa]},$$scope:{ctx:$}}}),vk=new oe({}),Fk=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1043"}}),Mk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),mC=new q({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[oEa]},$$scope:{ctx:$}}}),Ek=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new q({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[rEa]},$$scope:{ctx:$}}}),Ck=new oe({}),wk=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1050"}}),Lk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),pC=new q({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[tEa]},$$scope:{ctx:$}}}),yk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vC=new q({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[aEa]},$$scope:{ctx:$}}}),xk=new oe({}),$k=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L950"}}),Sk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),TC=new q({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[nEa]},$$scope:{ctx:$}}}),Rk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),CC=new q({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[sEa]},$$scope:{ctx:$}}}),Pk=new oe({}),Bk=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1057"}}),Nk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),AC=new q({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[lEa]},$$scope:{ctx:$}}}),qk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new q({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[iEa]},$$scope:{ctx:$}}}),jk=new oe({}),Dk=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1080"}}),Ok=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),jC=new q({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[dEa]},$$scope:{ctx:$}}}),Vk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),QC=new q({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[cEa]},$$scope:{ctx:$}}}),Xk=new oe({}),zk=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1064"}}),Wk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),UC=new q({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[mEa]},$$scope:{ctx:$}}}),Uk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),s3=new q({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[fEa]},$$scope:{ctx:$}}}),Hk=new oe({}),Jk=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1071"}}),Zk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperConfig">WhisperConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperForConditionalGeneration">WhisperForConditionalGeneration</a> (Whisper model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),i3=new q({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[gEa]},$$scope:{ctx:$}}}),Kk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),g3=new q({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[hEa]},$$scope:{ctx:$}}}),eS=new oe({}),oS=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1089"}}),tS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),u3=new q({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[uEa]},$$scope:{ctx:$}}}),aS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),M3=new q({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[pEa]},$$scope:{ctx:$}}}),nS=new oe({}),sS=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1096"}}),iS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),C3=new q({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[_Ea]},$$scope:{ctx:$}}}),dS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$3=new q({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[bEa]},$$scope:{ctx:$}}}),cS=new oe({}),mS=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1027"}}),gS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig">ConditionalDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection">ConditionalDetrForObjectDetection</a> (Conditional DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection">DeformableDetrForObjectDetection</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),S3=new q({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[vEa]},$$scope:{ctx:$}}}),hS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),q3=new q({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[FEa]},$$scope:{ctx:$}}}),uS=new oe({}),pS=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1002"}}),bS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),D3=new q({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[TEa]},$$scope:{ctx:$}}}),vS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),V3=new q({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[MEa]},$$scope:{ctx:$}}}),FS=new oe({}),TS=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1009"}}),ES=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),z3=new q({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[EEa]},$$scope:{ctx:$}}}),CS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z3=new q({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[CEa]},$$scope:{ctx:$}}}),wS=new oe({}),AS=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1018"}}),yS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),e5=new q({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[wEa]},$$scope:{ctx:$}}}),xS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),t5=new q({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[AEa]},$$scope:{ctx:$}}}),$S=new oe({}),kS=new R({props:{name:"class transformers.AutoModelForZeroShotObjectDetection",anchor:"transformers.AutoModelForZeroShotObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1034"}}),RS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForZeroShotObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTForObjectDetection">OwlViTForObjectDetection</a> (OWL-ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),n5=new q({props:{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_config.example",$$slots:{default:[LEa]},$$scope:{ctx:$}}}),PS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),i5=new q({props:{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.example",$$slots:{default:[yEa]},$$scope:{ctx:$}}}),BS=new oe({}),IS=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L439"}}),qS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.TFCvtModel">TFCvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.TFGroupViTModel">TFGroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model">TFLayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel">TFMobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperConfig">WhisperConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/whisper#transformers.TFWhisperModel">TFWhisperModel</a> (Whisper model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),c5=new q({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[xEa]},$$scope:{ctx:$}}}),jS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),g0=new q({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[$Ea]},$$scope:{ctx:$}}}),DS=new oe({}),GS=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L446"}}),VS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),u0=new q({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[kEa]},$$scope:{ctx:$}}}),XS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),j0=new q({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[SEa]},$$scope:{ctx:$}}}),zS=new oe({}),QS=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L461"}}),US=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),G0=new q({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[REa]},$$scope:{ctx:$}}}),HS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rw=new q({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[PEa]},$$scope:{ctx:$}}}),JS=new oe({}),YS=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L477"}}),KS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.TFCvtForImageClassification">TFCvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification">TFMobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),aw=new q({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[BEa]},$$scope:{ctx:$}}}),eR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hw=new q({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[IEa]},$$scope:{ctx:$}}}),oR=new oe({}),rR=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L486"}}),aR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation">TFMobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),pw=new q({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[NEa]},$$scope:{ctx:$}}}),nR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Fw=new q({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[qEa]},$$scope:{ctx:$}}}),sR=new oe({}),lR=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),dR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Mw=new q({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[jEa]},$$scope:{ctx:$}}}),cR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Vw=new q({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[DEa]},$$scope:{ctx:$}}}),mR=new oe({}),fR=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),hR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zw=new q({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[GEa]},$$scope:{ctx:$}}}),uR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rA=new q({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[OEa]},$$scope:{ctx:$}}}),pR=new oe({}),_R=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),vR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification">TFLayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),aA=new q({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[VEa]},$$scope:{ctx:$}}}),FR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),SA=new q({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[XEa]},$$scope:{ctx:$}}}),TR=new oe({}),MR=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L565"}}),CR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),PA=new q({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[zEa]},$$scope:{ctx:$}}}),wR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ZA=new q({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[QEa]},$$scope:{ctx:$}}}),AR=new oe({}),LR=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L572"}}),xR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),e6=new q({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[WEa]},$$scope:{ctx:$}}}),$R=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),t6=new q({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[UEa]},$$scope:{ctx:$}}}),SR=new oe({}),RR=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L545"}}),BR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),n6=new q({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[HEa]},$$scope:{ctx:$}}}),IR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l6=new q({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[JEa]},$$scope:{ctx:$}}}),NR=new oe({}),qR=new R({props:{name:"class transformers.TFAutoModelForDocumentQuestionAnswering",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L534"}}),DR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering">TFLayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d6=new q({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[YEa]},$$scope:{ctx:$}}}),GR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),m6=new q({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[ZEa]},$$scope:{ctx:$}}}),OR=new oe({}),VR=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L556"}}),zR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification">TFLayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),g6=new q({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[KEa]},$$scope:{ctx:$}}}),QR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),B6=new q({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[e4a]},$$scope:{ctx:$}}}),WR=new oe({}),UR=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L527"}}),JR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering">TFLayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),N6=new q({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[o4a]},$$scope:{ctx:$}}}),YR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),n7=new q({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[r4a]},$$scope:{ctx:$}}}),ZR=new oe({}),KR=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L495"}}),oP=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),l7=new q({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[t4a]},$$scope:{ctx:$}}}),rP=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d7=new q({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[a4a]},$$scope:{ctx:$}}}),tP=new oe({}),aP=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L581"}}),sP=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperConfig">WhisperConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/whisper#transformers.TFWhisperForConditionalGeneration">TFWhisperForConditionalGeneration</a> (Whisper model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),m7=new q({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[n4a]},$$scope:{ctx:$}}}),lP=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),h7=new q({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[s4a]},$$scope:{ctx:$}}}),dP=new oe({}),cP=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),fP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),p7=new q({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[l4a]},$$scope:{ctx:$}}}),gP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),X7=new q({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[i4a]},$$scope:{ctx:$}}}),hP=new oe({}),uP=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),_P=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Q7=new q({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[d4a]},$$scope:{ctx:$}}}),bP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),tL=new q({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[c4a]},$$scope:{ctx:$}}}),vP=new oe({}),FP=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),MP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),nL=new q({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[m4a]},$$scope:{ctx:$}}}),EP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vL=new q({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[f4a]},$$scope:{ctx:$}}}),CP=new oe({}),wP=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),LP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),TL=new q({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[g4a]},$$scope:{ctx:$}}}),yP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),SL=new q({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[h4a]},$$scope:{ctx:$}}}),xP=new oe({}),$P=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),SP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),PL=new q({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[u4a]},$$scope:{ctx:$}}}),RP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),zL=new q({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[p4a]},$$scope:{ctx:$}}}),PP=new oe({}),BP=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),NP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),WL=new q({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[_4a]},$$scope:{ctx:$}}}),qP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a8=new q({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[b4a]},$$scope:{ctx:$}}}),jP=new oe({}),DP=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),OP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s8=new q({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[v4a]},$$scope:{ctx:$}}}),VP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_8=new q({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[F4a]},$$scope:{ctx:$}}}),XP=new oe({}),zP=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),WP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),v8=new q({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[T4a]},$$scope:{ctx:$}}}),UP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),y8=new q({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[M4a]},$$scope:{ctx:$}}}),HP=new oe({}),JP=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),ZP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$8=new q({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[E4a]},$$scope:{ctx:$}}}),KP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),j8=new q({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[C4a]},$$scope:{ctx:$}}}),eB=new oe({}),oB=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),tB=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),G8=new q({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[w4a]},$$scope:{ctx:$}}}),aB=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),V8=new q({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[A4a]},$$scope:{ctx:$}}}),nB=new oe({}),sB=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),iB=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),z8=new q({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[L4a]},$$scope:{ctx:$}}}),dB=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U8=new q({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[y4a]},$$scope:{ctx:$}}}),mB=new oe({}),fB=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),hB=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J8=new q({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[x4a]},$$scope:{ctx:$}}}),uB=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z8=new q({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[$4a]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),xo=a("span"),cd=o("Auto Classes"),Pf=l(),bt=a("p"),md=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),fd=a("code"),Sx=o("from_pretrained()"),Bf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Xe=l(),He=a("p"),gd=o("Instantiating one of "),ns=a("a"),Rx=o("AutoConfig"),ss=o(", "),ls=a("a"),Px=o("AutoModel"),hd=o(`, and
`),is=a("a"),Bx=o("AutoTokenizer"),ud=o(" will directly create a class of the relevant architecture. For instance"),If=l(),F(Ja.$$.fragment),Je=l(),Ae=a("p"),OI=o("will create a model that is an instance of "),pd=a("a"),VI=o("BertModel"),XI=o("."),$o=l(),Ya=a("p"),zI=o("There is one class of "),Nf=a("code"),QI=o("AutoModel"),xso=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Hoo=l(),_d=a("h2"),qf=a("a"),hme=a("span"),F(Ix.$$.fragment),$so=l(),ume=a("span"),kso=o("Extending the Auto Classes"),Joo=l(),ds=a("p"),Sso=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),pme=a("code"),Rso=o("NewModel"),Pso=o(", make sure you have a "),_me=a("code"),Bso=o("NewModelConfig"),Iso=o(` then you can add those to the auto
classes like this:`),Yoo=l(),F(Nx.$$.fragment),Zoo=l(),WI=a("p"),Nso=o("You will then be able to use the auto classes like you would usually do!"),Koo=l(),F(jf.$$.fragment),ero=l(),bd=a("h2"),Df=a("a"),bme=a("span"),F(qx.$$.fragment),qso=l(),vme=a("span"),jso=o("AutoConfig"),oro=l(),ko=a("div"),F(jx.$$.fragment),Dso=l(),Dx=a("p"),Gso=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),UI=a("a"),Oso=o("from_pretrained()"),Vso=o(" class method."),Xso=l(),Gx=a("p"),zso=o("This class cannot be instantiated directly using "),Fme=a("code"),Qso=o("__init__()"),Wso=o(" (throws an error)."),Uso=l(),Ir=a("div"),F(Ox.$$.fragment),Hso=l(),Tme=a("p"),Jso=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Yso=l(),vd=a("p"),Zso=o("The configuration class to instantiate is selected based on the "),Mme=a("code"),Kso=o("model_type"),elo=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Eme=a("code"),olo=o("pretrained_model_name_or_path"),rlo=o(":"),tlo=l(),A=a("ul"),Gf=a("li"),Cme=a("strong"),alo=o("albert"),nlo=o(" \u2014 "),HI=a("a"),slo=o("AlbertConfig"),llo=o(" (ALBERT model)"),ilo=l(),Of=a("li"),wme=a("strong"),dlo=o("bart"),clo=o(" \u2014 "),JI=a("a"),mlo=o("BartConfig"),flo=o(" (BART model)"),glo=l(),Vf=a("li"),Ame=a("strong"),hlo=o("beit"),ulo=o(" \u2014 "),YI=a("a"),plo=o("BeitConfig"),_lo=o(" (BEiT model)"),blo=l(),Xf=a("li"),Lme=a("strong"),vlo=o("bert"),Flo=o(" \u2014 "),ZI=a("a"),Tlo=o("BertConfig"),Mlo=o(" (BERT model)"),Elo=l(),zf=a("li"),yme=a("strong"),Clo=o("bert-generation"),wlo=o(" \u2014 "),KI=a("a"),Alo=o("BertGenerationConfig"),Llo=o(" (Bert Generation model)"),ylo=l(),Qf=a("li"),xme=a("strong"),xlo=o("big_bird"),$lo=o(" \u2014 "),eN=a("a"),klo=o("BigBirdConfig"),Slo=o(" (BigBird model)"),Rlo=l(),Wf=a("li"),$me=a("strong"),Plo=o("bigbird_pegasus"),Blo=o(" \u2014 "),oN=a("a"),Ilo=o("BigBirdPegasusConfig"),Nlo=o(" (BigBird-Pegasus model)"),qlo=l(),Uf=a("li"),kme=a("strong"),jlo=o("blenderbot"),Dlo=o(" \u2014 "),rN=a("a"),Glo=o("BlenderbotConfig"),Olo=o(" (Blenderbot model)"),Vlo=l(),Hf=a("li"),Sme=a("strong"),Xlo=o("blenderbot-small"),zlo=o(" \u2014 "),tN=a("a"),Qlo=o("BlenderbotSmallConfig"),Wlo=o(" (BlenderbotSmall model)"),Ulo=l(),Jf=a("li"),Rme=a("strong"),Hlo=o("bloom"),Jlo=o(" \u2014 "),aN=a("a"),Ylo=o("BloomConfig"),Zlo=o(" (BLOOM model)"),Klo=l(),Yf=a("li"),Pme=a("strong"),eio=o("camembert"),oio=o(" \u2014 "),nN=a("a"),rio=o("CamembertConfig"),tio=o(" (CamemBERT model)"),aio=l(),Zf=a("li"),Bme=a("strong"),nio=o("canine"),sio=o(" \u2014 "),sN=a("a"),lio=o("CanineConfig"),iio=o(" (CANINE model)"),dio=l(),Kf=a("li"),Ime=a("strong"),cio=o("clip"),mio=o(" \u2014 "),lN=a("a"),fio=o("CLIPConfig"),gio=o(" (CLIP model)"),hio=l(),eg=a("li"),Nme=a("strong"),uio=o("codegen"),pio=o(" \u2014 "),iN=a("a"),_io=o("CodeGenConfig"),bio=o(" (CodeGen model)"),vio=l(),og=a("li"),qme=a("strong"),Fio=o("conditional_detr"),Tio=o(" \u2014 "),dN=a("a"),Mio=o("ConditionalDetrConfig"),Eio=o(" (Conditional DETR model)"),Cio=l(),rg=a("li"),jme=a("strong"),wio=o("convbert"),Aio=o(" \u2014 "),cN=a("a"),Lio=o("ConvBertConfig"),yio=o(" (ConvBERT model)"),xio=l(),tg=a("li"),Dme=a("strong"),$io=o("convnext"),kio=o(" \u2014 "),mN=a("a"),Sio=o("ConvNextConfig"),Rio=o(" (ConvNeXT model)"),Pio=l(),ag=a("li"),Gme=a("strong"),Bio=o("ctrl"),Iio=o(" \u2014 "),fN=a("a"),Nio=o("CTRLConfig"),qio=o(" (CTRL model)"),jio=l(),ng=a("li"),Ome=a("strong"),Dio=o("cvt"),Gio=o(" \u2014 "),gN=a("a"),Oio=o("CvtConfig"),Vio=o(" (CvT model)"),Xio=l(),sg=a("li"),Vme=a("strong"),zio=o("data2vec-audio"),Qio=o(" \u2014 "),hN=a("a"),Wio=o("Data2VecAudioConfig"),Uio=o(" (Data2VecAudio model)"),Hio=l(),lg=a("li"),Xme=a("strong"),Jio=o("data2vec-text"),Yio=o(" \u2014 "),uN=a("a"),Zio=o("Data2VecTextConfig"),Kio=o(" (Data2VecText model)"),edo=l(),ig=a("li"),zme=a("strong"),odo=o("data2vec-vision"),rdo=o(" \u2014 "),pN=a("a"),tdo=o("Data2VecVisionConfig"),ado=o(" (Data2VecVision model)"),ndo=l(),dg=a("li"),Qme=a("strong"),sdo=o("deberta"),ldo=o(" \u2014 "),_N=a("a"),ido=o("DebertaConfig"),ddo=o(" (DeBERTa model)"),cdo=l(),cg=a("li"),Wme=a("strong"),mdo=o("deberta-v2"),fdo=o(" \u2014 "),bN=a("a"),gdo=o("DebertaV2Config"),hdo=o(" (DeBERTa-v2 model)"),udo=l(),mg=a("li"),Ume=a("strong"),pdo=o("decision_transformer"),_do=o(" \u2014 "),vN=a("a"),bdo=o("DecisionTransformerConfig"),vdo=o(" (Decision Transformer model)"),Fdo=l(),fg=a("li"),Hme=a("strong"),Tdo=o("deformable_detr"),Mdo=o(" \u2014 "),FN=a("a"),Edo=o("DeformableDetrConfig"),Cdo=o(" (Deformable DETR model)"),wdo=l(),gg=a("li"),Jme=a("strong"),Ado=o("deit"),Ldo=o(" \u2014 "),TN=a("a"),ydo=o("DeiTConfig"),xdo=o(" (DeiT model)"),$do=l(),hg=a("li"),Yme=a("strong"),kdo=o("detr"),Sdo=o(" \u2014 "),MN=a("a"),Rdo=o("DetrConfig"),Pdo=o(" (DETR model)"),Bdo=l(),ug=a("li"),Zme=a("strong"),Ido=o("distilbert"),Ndo=o(" \u2014 "),EN=a("a"),qdo=o("DistilBertConfig"),jdo=o(" (DistilBERT model)"),Ddo=l(),pg=a("li"),Kme=a("strong"),Gdo=o("donut-swin"),Odo=o(" \u2014 "),CN=a("a"),Vdo=o("DonutSwinConfig"),Xdo=o(" (DonutSwin model)"),zdo=l(),_g=a("li"),efe=a("strong"),Qdo=o("dpr"),Wdo=o(" \u2014 "),wN=a("a"),Udo=o("DPRConfig"),Hdo=o(" (DPR model)"),Jdo=l(),bg=a("li"),ofe=a("strong"),Ydo=o("dpt"),Zdo=o(" \u2014 "),AN=a("a"),Kdo=o("DPTConfig"),eco=o(" (DPT model)"),oco=l(),vg=a("li"),rfe=a("strong"),rco=o("electra"),tco=o(" \u2014 "),LN=a("a"),aco=o("ElectraConfig"),nco=o(" (ELECTRA model)"),sco=l(),Fg=a("li"),tfe=a("strong"),lco=o("encoder-decoder"),ico=o(" \u2014 "),yN=a("a"),dco=o("EncoderDecoderConfig"),cco=o(" (Encoder decoder model)"),mco=l(),Tg=a("li"),afe=a("strong"),fco=o("ernie"),gco=o(" \u2014 "),xN=a("a"),hco=o("ErnieConfig"),uco=o(" (ERNIE model)"),pco=l(),Mg=a("li"),nfe=a("strong"),_co=o("esm"),bco=o(" \u2014 "),$N=a("a"),vco=o("EsmConfig"),Fco=o(" (ESM model)"),Tco=l(),Eg=a("li"),sfe=a("strong"),Mco=o("flaubert"),Eco=o(" \u2014 "),kN=a("a"),Cco=o("FlaubertConfig"),wco=o(" (FlauBERT model)"),Aco=l(),Cg=a("li"),lfe=a("strong"),Lco=o("flava"),yco=o(" \u2014 "),SN=a("a"),xco=o("FlavaConfig"),$co=o(" (FLAVA model)"),kco=l(),wg=a("li"),ife=a("strong"),Sco=o("fnet"),Rco=o(" \u2014 "),RN=a("a"),Pco=o("FNetConfig"),Bco=o(" (FNet model)"),Ico=l(),Ag=a("li"),dfe=a("strong"),Nco=o("fsmt"),qco=o(" \u2014 "),PN=a("a"),jco=o("FSMTConfig"),Dco=o(" (FairSeq Machine-Translation model)"),Gco=l(),Lg=a("li"),cfe=a("strong"),Oco=o("funnel"),Vco=o(" \u2014 "),BN=a("a"),Xco=o("FunnelConfig"),zco=o(" (Funnel Transformer model)"),Qco=l(),yg=a("li"),mfe=a("strong"),Wco=o("glpn"),Uco=o(" \u2014 "),IN=a("a"),Hco=o("GLPNConfig"),Jco=o(" (GLPN model)"),Yco=l(),xg=a("li"),ffe=a("strong"),Zco=o("gpt2"),Kco=o(" \u2014 "),NN=a("a"),emo=o("GPT2Config"),omo=o(" (OpenAI GPT-2 model)"),rmo=l(),$g=a("li"),gfe=a("strong"),tmo=o("gpt_neo"),amo=o(" \u2014 "),qN=a("a"),nmo=o("GPTNeoConfig"),smo=o(" (GPT Neo model)"),lmo=l(),kg=a("li"),hfe=a("strong"),imo=o("gpt_neox"),dmo=o(" \u2014 "),jN=a("a"),cmo=o("GPTNeoXConfig"),mmo=o(" (GPT NeoX model)"),fmo=l(),Sg=a("li"),ufe=a("strong"),gmo=o("gpt_neox_japanese"),hmo=o(" \u2014 "),DN=a("a"),umo=o("GPTNeoXJapaneseConfig"),pmo=o(" (GPT NeoX Japanese model)"),_mo=l(),Rg=a("li"),pfe=a("strong"),bmo=o("gptj"),vmo=o(" \u2014 "),GN=a("a"),Fmo=o("GPTJConfig"),Tmo=o(" (GPT-J model)"),Mmo=l(),Pg=a("li"),_fe=a("strong"),Emo=o("groupvit"),Cmo=o(" \u2014 "),ON=a("a"),wmo=o("GroupViTConfig"),Amo=o(" (GroupViT model)"),Lmo=l(),Bg=a("li"),bfe=a("strong"),ymo=o("hubert"),xmo=o(" \u2014 "),VN=a("a"),$mo=o("HubertConfig"),kmo=o(" (Hubert model)"),Smo=l(),Ig=a("li"),vfe=a("strong"),Rmo=o("ibert"),Pmo=o(" \u2014 "),XN=a("a"),Bmo=o("IBertConfig"),Imo=o(" (I-BERT model)"),Nmo=l(),Ng=a("li"),Ffe=a("strong"),qmo=o("imagegpt"),jmo=o(" \u2014 "),zN=a("a"),Dmo=o("ImageGPTConfig"),Gmo=o(" (ImageGPT model)"),Omo=l(),qg=a("li"),Tfe=a("strong"),Vmo=o("layoutlm"),Xmo=o(" \u2014 "),QN=a("a"),zmo=o("LayoutLMConfig"),Qmo=o(" (LayoutLM model)"),Wmo=l(),jg=a("li"),Mfe=a("strong"),Umo=o("layoutlmv2"),Hmo=o(" \u2014 "),WN=a("a"),Jmo=o("LayoutLMv2Config"),Ymo=o(" (LayoutLMv2 model)"),Zmo=l(),Dg=a("li"),Efe=a("strong"),Kmo=o("layoutlmv3"),efo=o(" \u2014 "),UN=a("a"),ofo=o("LayoutLMv3Config"),rfo=o(" (LayoutLMv3 model)"),tfo=l(),Gg=a("li"),Cfe=a("strong"),afo=o("led"),nfo=o(" \u2014 "),HN=a("a"),sfo=o("LEDConfig"),lfo=o(" (LED model)"),ifo=l(),Og=a("li"),wfe=a("strong"),dfo=o("levit"),cfo=o(" \u2014 "),JN=a("a"),mfo=o("LevitConfig"),ffo=o(" (LeViT model)"),gfo=l(),Vg=a("li"),Afe=a("strong"),hfo=o("lilt"),ufo=o(" \u2014 "),YN=a("a"),pfo=o("LiltConfig"),_fo=o(" (LiLT model)"),bfo=l(),Xg=a("li"),Lfe=a("strong"),vfo=o("longformer"),Ffo=o(" \u2014 "),ZN=a("a"),Tfo=o("LongformerConfig"),Mfo=o(" (Longformer model)"),Efo=l(),zg=a("li"),yfe=a("strong"),Cfo=o("longt5"),wfo=o(" \u2014 "),KN=a("a"),Afo=o("LongT5Config"),Lfo=o(" (LongT5 model)"),yfo=l(),Qg=a("li"),xfe=a("strong"),xfo=o("luke"),$fo=o(" \u2014 "),eq=a("a"),kfo=o("LukeConfig"),Sfo=o(" (LUKE model)"),Rfo=l(),Wg=a("li"),$fe=a("strong"),Pfo=o("lxmert"),Bfo=o(" \u2014 "),oq=a("a"),Ifo=o("LxmertConfig"),Nfo=o(" (LXMERT model)"),qfo=l(),Ug=a("li"),kfe=a("strong"),jfo=o("m2m_100"),Dfo=o(" \u2014 "),rq=a("a"),Gfo=o("M2M100Config"),Ofo=o(" (M2M100 model)"),Vfo=l(),Hg=a("li"),Sfe=a("strong"),Xfo=o("marian"),zfo=o(" \u2014 "),tq=a("a"),Qfo=o("MarianConfig"),Wfo=o(" (Marian model)"),Ufo=l(),Jg=a("li"),Rfe=a("strong"),Hfo=o("markuplm"),Jfo=o(" \u2014 "),aq=a("a"),Yfo=o("MarkupLMConfig"),Zfo=o(" (MarkupLM model)"),Kfo=l(),Yg=a("li"),Pfe=a("strong"),ego=o("maskformer"),ogo=o(" \u2014 "),nq=a("a"),rgo=o("MaskFormerConfig"),tgo=o(" (MaskFormer model)"),ago=l(),Zg=a("li"),Bfe=a("strong"),ngo=o("mbart"),sgo=o(" \u2014 "),sq=a("a"),lgo=o("MBartConfig"),igo=o(" (mBART model)"),dgo=l(),Kg=a("li"),Ife=a("strong"),cgo=o("mctct"),mgo=o(" \u2014 "),lq=a("a"),fgo=o("MCTCTConfig"),ggo=o(" (M-CTC-T model)"),hgo=l(),eh=a("li"),Nfe=a("strong"),ugo=o("megatron-bert"),pgo=o(" \u2014 "),iq=a("a"),_go=o("MegatronBertConfig"),bgo=o(" (Megatron-BERT model)"),vgo=l(),oh=a("li"),qfe=a("strong"),Fgo=o("mobilebert"),Tgo=o(" \u2014 "),dq=a("a"),Mgo=o("MobileBertConfig"),Ego=o(" (MobileBERT model)"),Cgo=l(),rh=a("li"),jfe=a("strong"),wgo=o("mobilevit"),Ago=o(" \u2014 "),cq=a("a"),Lgo=o("MobileViTConfig"),ygo=o(" (MobileViT model)"),xgo=l(),th=a("li"),Dfe=a("strong"),$go=o("mpnet"),kgo=o(" \u2014 "),mq=a("a"),Sgo=o("MPNetConfig"),Rgo=o(" (MPNet model)"),Pgo=l(),ah=a("li"),Gfe=a("strong"),Bgo=o("mt5"),Igo=o(" \u2014 "),fq=a("a"),Ngo=o("MT5Config"),qgo=o(" (MT5 model)"),jgo=l(),nh=a("li"),Ofe=a("strong"),Dgo=o("mvp"),Ggo=o(" \u2014 "),gq=a("a"),Ogo=o("MvpConfig"),Vgo=o(" (MVP model)"),Xgo=l(),sh=a("li"),Vfe=a("strong"),zgo=o("nezha"),Qgo=o(" \u2014 "),hq=a("a"),Wgo=o("NezhaConfig"),Ugo=o(" (Nezha model)"),Hgo=l(),lh=a("li"),Xfe=a("strong"),Jgo=o("nystromformer"),Ygo=o(" \u2014 "),uq=a("a"),Zgo=o("NystromformerConfig"),Kgo=o(" (Nystr\xF6mformer model)"),eho=l(),ih=a("li"),zfe=a("strong"),oho=o("openai-gpt"),rho=o(" \u2014 "),pq=a("a"),tho=o("OpenAIGPTConfig"),aho=o(" (OpenAI GPT model)"),nho=l(),dh=a("li"),Qfe=a("strong"),sho=o("opt"),lho=o(" \u2014 "),_q=a("a"),iho=o("OPTConfig"),dho=o(" (OPT model)"),cho=l(),ch=a("li"),Wfe=a("strong"),mho=o("owlvit"),fho=o(" \u2014 "),bq=a("a"),gho=o("OwlViTConfig"),hho=o(" (OWL-ViT model)"),uho=l(),mh=a("li"),Ufe=a("strong"),pho=o("pegasus"),_ho=o(" \u2014 "),vq=a("a"),bho=o("PegasusConfig"),vho=o(" (Pegasus model)"),Fho=l(),fh=a("li"),Hfe=a("strong"),Tho=o("pegasus_x"),Mho=o(" \u2014 "),Fq=a("a"),Eho=o("PegasusXConfig"),Cho=o(" (PEGASUS-X model)"),who=l(),gh=a("li"),Jfe=a("strong"),Aho=o("perceiver"),Lho=o(" \u2014 "),Tq=a("a"),yho=o("PerceiverConfig"),xho=o(" (Perceiver model)"),$ho=l(),hh=a("li"),Yfe=a("strong"),kho=o("plbart"),Sho=o(" \u2014 "),Mq=a("a"),Rho=o("PLBartConfig"),Pho=o(" (PLBart model)"),Bho=l(),uh=a("li"),Zfe=a("strong"),Iho=o("poolformer"),Nho=o(" \u2014 "),Eq=a("a"),qho=o("PoolFormerConfig"),jho=o(" (PoolFormer model)"),Dho=l(),ph=a("li"),Kfe=a("strong"),Gho=o("prophetnet"),Oho=o(" \u2014 "),Cq=a("a"),Vho=o("ProphetNetConfig"),Xho=o(" (ProphetNet model)"),zho=l(),_h=a("li"),ege=a("strong"),Qho=o("qdqbert"),Who=o(" \u2014 "),wq=a("a"),Uho=o("QDQBertConfig"),Hho=o(" (QDQBert model)"),Jho=l(),bh=a("li"),oge=a("strong"),Yho=o("rag"),Zho=o(" \u2014 "),Aq=a("a"),Kho=o("RagConfig"),euo=o(" (RAG model)"),ouo=l(),vh=a("li"),rge=a("strong"),ruo=o("realm"),tuo=o(" \u2014 "),Lq=a("a"),auo=o("RealmConfig"),nuo=o(" (REALM model)"),suo=l(),Fh=a("li"),tge=a("strong"),luo=o("reformer"),iuo=o(" \u2014 "),yq=a("a"),duo=o("ReformerConfig"),cuo=o(" (Reformer model)"),muo=l(),Th=a("li"),age=a("strong"),fuo=o("regnet"),guo=o(" \u2014 "),xq=a("a"),huo=o("RegNetConfig"),uuo=o(" (RegNet model)"),puo=l(),Mh=a("li"),nge=a("strong"),_uo=o("rembert"),buo=o(" \u2014 "),$q=a("a"),vuo=o("RemBertConfig"),Fuo=o(" (RemBERT model)"),Tuo=l(),Eh=a("li"),sge=a("strong"),Muo=o("resnet"),Euo=o(" \u2014 "),kq=a("a"),Cuo=o("ResNetConfig"),wuo=o(" (ResNet model)"),Auo=l(),Ch=a("li"),lge=a("strong"),Luo=o("retribert"),yuo=o(" \u2014 "),Sq=a("a"),xuo=o("RetriBertConfig"),$uo=o(" (RetriBERT model)"),kuo=l(),wh=a("li"),ige=a("strong"),Suo=o("roberta"),Ruo=o(" \u2014 "),Rq=a("a"),Puo=o("RobertaConfig"),Buo=o(" (RoBERTa model)"),Iuo=l(),Ah=a("li"),dge=a("strong"),Nuo=o("roformer"),quo=o(" \u2014 "),Pq=a("a"),juo=o("RoFormerConfig"),Duo=o(" (RoFormer model)"),Guo=l(),Lh=a("li"),cge=a("strong"),Ouo=o("segformer"),Vuo=o(" \u2014 "),Bq=a("a"),Xuo=o("SegformerConfig"),zuo=o(" (SegFormer model)"),Quo=l(),yh=a("li"),mge=a("strong"),Wuo=o("sew"),Uuo=o(" \u2014 "),Iq=a("a"),Huo=o("SEWConfig"),Juo=o(" (SEW model)"),Yuo=l(),xh=a("li"),fge=a("strong"),Zuo=o("sew-d"),Kuo=o(" \u2014 "),Nq=a("a"),epo=o("SEWDConfig"),opo=o(" (SEW-D model)"),rpo=l(),$h=a("li"),gge=a("strong"),tpo=o("speech-encoder-decoder"),apo=o(" \u2014 "),qq=a("a"),npo=o("SpeechEncoderDecoderConfig"),spo=o(" (Speech Encoder decoder model)"),lpo=l(),kh=a("li"),hge=a("strong"),ipo=o("speech_to_text"),dpo=o(" \u2014 "),jq=a("a"),cpo=o("Speech2TextConfig"),mpo=o(" (Speech2Text model)"),fpo=l(),Sh=a("li"),uge=a("strong"),gpo=o("speech_to_text_2"),hpo=o(" \u2014 "),Dq=a("a"),upo=o("Speech2Text2Config"),ppo=o(" (Speech2Text2 model)"),_po=l(),Rh=a("li"),pge=a("strong"),bpo=o("splinter"),vpo=o(" \u2014 "),Gq=a("a"),Fpo=o("SplinterConfig"),Tpo=o(" (Splinter model)"),Mpo=l(),Ph=a("li"),_ge=a("strong"),Epo=o("squeezebert"),Cpo=o(" \u2014 "),Oq=a("a"),wpo=o("SqueezeBertConfig"),Apo=o(" (SqueezeBERT model)"),Lpo=l(),Bh=a("li"),bge=a("strong"),ypo=o("swin"),xpo=o(" \u2014 "),Vq=a("a"),$po=o("SwinConfig"),kpo=o(" (Swin Transformer model)"),Spo=l(),Ih=a("li"),vge=a("strong"),Rpo=o("swinv2"),Ppo=o(" \u2014 "),Xq=a("a"),Bpo=o("Swinv2Config"),Ipo=o(" (Swin Transformer V2 model)"),Npo=l(),Nh=a("li"),Fge=a("strong"),qpo=o("t5"),jpo=o(" \u2014 "),zq=a("a"),Dpo=o("T5Config"),Gpo=o(" (T5 model)"),Opo=l(),qh=a("li"),Tge=a("strong"),Vpo=o("tapas"),Xpo=o(" \u2014 "),Qq=a("a"),zpo=o("TapasConfig"),Qpo=o(" (TAPAS model)"),Wpo=l(),jh=a("li"),Mge=a("strong"),Upo=o("time_series_transformer"),Hpo=o(" \u2014 "),Wq=a("a"),Jpo=o("TimeSeriesTransformerConfig"),Ypo=o(" (Time Series Transformer model)"),Zpo=l(),Dh=a("li"),Ege=a("strong"),Kpo=o("trajectory_transformer"),e_o=o(" \u2014 "),Uq=a("a"),o_o=o("TrajectoryTransformerConfig"),r_o=o(" (Trajectory Transformer model)"),t_o=l(),Gh=a("li"),Cge=a("strong"),a_o=o("transfo-xl"),n_o=o(" \u2014 "),Hq=a("a"),s_o=o("TransfoXLConfig"),l_o=o(" (Transformer-XL model)"),i_o=l(),Oh=a("li"),wge=a("strong"),d_o=o("trocr"),c_o=o(" \u2014 "),Jq=a("a"),m_o=o("TrOCRConfig"),f_o=o(" (TrOCR model)"),g_o=l(),Vh=a("li"),Age=a("strong"),h_o=o("unispeech"),u_o=o(" \u2014 "),Yq=a("a"),p_o=o("UniSpeechConfig"),__o=o(" (UniSpeech model)"),b_o=l(),Xh=a("li"),Lge=a("strong"),v_o=o("unispeech-sat"),F_o=o(" \u2014 "),Zq=a("a"),T_o=o("UniSpeechSatConfig"),M_o=o(" (UniSpeechSat model)"),E_o=l(),zh=a("li"),yge=a("strong"),C_o=o("van"),w_o=o(" \u2014 "),Kq=a("a"),A_o=o("VanConfig"),L_o=o(" (VAN model)"),y_o=l(),Qh=a("li"),xge=a("strong"),x_o=o("videomae"),$_o=o(" \u2014 "),ej=a("a"),k_o=o("VideoMAEConfig"),S_o=o(" (VideoMAE model)"),R_o=l(),Wh=a("li"),$ge=a("strong"),P_o=o("vilt"),B_o=o(" \u2014 "),oj=a("a"),I_o=o("ViltConfig"),N_o=o(" (ViLT model)"),q_o=l(),Uh=a("li"),kge=a("strong"),j_o=o("vision-encoder-decoder"),D_o=o(" \u2014 "),rj=a("a"),G_o=o("VisionEncoderDecoderConfig"),O_o=o(" (Vision Encoder decoder model)"),V_o=l(),Hh=a("li"),Sge=a("strong"),X_o=o("vision-text-dual-encoder"),z_o=o(" \u2014 "),tj=a("a"),Q_o=o("VisionTextDualEncoderConfig"),W_o=o(" (VisionTextDualEncoder model)"),U_o=l(),Jh=a("li"),Rge=a("strong"),H_o=o("visual_bert"),J_o=o(" \u2014 "),aj=a("a"),Y_o=o("VisualBertConfig"),Z_o=o(" (VisualBERT model)"),K_o=l(),Yh=a("li"),Pge=a("strong"),e1o=o("vit"),o1o=o(" \u2014 "),nj=a("a"),r1o=o("ViTConfig"),t1o=o(" (ViT model)"),a1o=l(),Zh=a("li"),Bge=a("strong"),n1o=o("vit_mae"),s1o=o(" \u2014 "),sj=a("a"),l1o=o("ViTMAEConfig"),i1o=o(" (ViTMAE model)"),d1o=l(),Kh=a("li"),Ige=a("strong"),c1o=o("vit_msn"),m1o=o(" \u2014 "),lj=a("a"),f1o=o("ViTMSNConfig"),g1o=o(" (ViTMSN model)"),h1o=l(),eu=a("li"),Nge=a("strong"),u1o=o("wav2vec2"),p1o=o(" \u2014 "),ij=a("a"),_1o=o("Wav2Vec2Config"),b1o=o(" (Wav2Vec2 model)"),v1o=l(),ou=a("li"),qge=a("strong"),F1o=o("wav2vec2-conformer"),T1o=o(" \u2014 "),dj=a("a"),M1o=o("Wav2Vec2ConformerConfig"),E1o=o(" (Wav2Vec2-Conformer model)"),C1o=l(),ru=a("li"),jge=a("strong"),w1o=o("wavlm"),A1o=o(" \u2014 "),cj=a("a"),L1o=o("WavLMConfig"),y1o=o(" (WavLM model)"),x1o=l(),tu=a("li"),Dge=a("strong"),$1o=o("whisper"),k1o=o(" \u2014 "),mj=a("a"),S1o=o("WhisperConfig"),R1o=o(" (Whisper model)"),P1o=l(),au=a("li"),Gge=a("strong"),B1o=o("xclip"),I1o=o(" \u2014 "),fj=a("a"),N1o=o("XCLIPConfig"),q1o=o(" (X-CLIP model)"),j1o=l(),nu=a("li"),Oge=a("strong"),D1o=o("xglm"),G1o=o(" \u2014 "),gj=a("a"),O1o=o("XGLMConfig"),V1o=o(" (XGLM model)"),X1o=l(),su=a("li"),Vge=a("strong"),z1o=o("xlm"),Q1o=o(" \u2014 "),hj=a("a"),W1o=o("XLMConfig"),U1o=o(" (XLM model)"),H1o=l(),lu=a("li"),Xge=a("strong"),J1o=o("xlm-prophetnet"),Y1o=o(" \u2014 "),uj=a("a"),Z1o=o("XLMProphetNetConfig"),K1o=o(" (XLM-ProphetNet model)"),e2o=l(),iu=a("li"),zge=a("strong"),o2o=o("xlm-roberta"),r2o=o(" \u2014 "),pj=a("a"),t2o=o("XLMRobertaConfig"),a2o=o(" (XLM-RoBERTa model)"),n2o=l(),du=a("li"),Qge=a("strong"),s2o=o("xlm-roberta-xl"),l2o=o(" \u2014 "),_j=a("a"),i2o=o("XLMRobertaXLConfig"),d2o=o(" (XLM-RoBERTa-XL model)"),c2o=l(),cu=a("li"),Wge=a("strong"),m2o=o("xlnet"),f2o=o(" \u2014 "),bj=a("a"),g2o=o("XLNetConfig"),h2o=o(" (XLNet model)"),u2o=l(),mu=a("li"),Uge=a("strong"),p2o=o("yolos"),_2o=o(" \u2014 "),vj=a("a"),b2o=o("YolosConfig"),v2o=o(" (YOLOS model)"),F2o=l(),fu=a("li"),Hge=a("strong"),T2o=o("yoso"),M2o=o(" \u2014 "),Fj=a("a"),E2o=o("YosoConfig"),C2o=o(" (YOSO model)"),w2o=l(),F(gu.$$.fragment),A2o=l(),hu=a("div"),F(Vx.$$.fragment),L2o=l(),Jge=a("p"),y2o=o("Register a new configuration for this class."),rro=l(),Fd=a("h2"),uu=a("a"),Yge=a("span"),F(Xx.$$.fragment),x2o=l(),Zge=a("span"),$2o=o("AutoTokenizer"),tro=l(),So=a("div"),F(zx.$$.fragment),k2o=l(),Qx=a("p"),S2o=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Tj=a("a"),R2o=o("AutoTokenizer.from_pretrained()"),P2o=o(" class method."),B2o=l(),Wx=a("p"),I2o=o("This class cannot be instantiated directly using "),Kge=a("code"),N2o=o("__init__()"),q2o=o(" (throws an error)."),j2o=l(),Nr=a("div"),F(Ux.$$.fragment),D2o=l(),ehe=a("p"),G2o=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),O2o=l(),Za=a("p"),V2o=o("The tokenizer class to instantiate is selected based on the "),ohe=a("code"),X2o=o("model_type"),z2o=o(` property of the config object (either
passed as an argument or loaded from `),rhe=a("code"),Q2o=o("pretrained_model_name_or_path"),W2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=a("code"),U2o=o("pretrained_model_name_or_path"),H2o=o(":"),J2o=l(),k=a("ul"),cs=a("li"),ahe=a("strong"),Y2o=o("albert"),Z2o=o(" \u2014 "),Mj=a("a"),K2o=o("AlbertTokenizer"),ebo=o(" or "),Ej=a("a"),obo=o("AlbertTokenizerFast"),rbo=o(" (ALBERT model)"),tbo=l(),ms=a("li"),nhe=a("strong"),abo=o("bart"),nbo=o(" \u2014 "),Cj=a("a"),sbo=o("BartTokenizer"),lbo=o(" or "),wj=a("a"),ibo=o("BartTokenizerFast"),dbo=o(" (BART model)"),cbo=l(),fs=a("li"),she=a("strong"),mbo=o("barthez"),fbo=o(" \u2014 "),Aj=a("a"),gbo=o("BarthezTokenizer"),hbo=o(" or "),Lj=a("a"),ubo=o("BarthezTokenizerFast"),pbo=o(" (BARThez model)"),_bo=l(),pu=a("li"),lhe=a("strong"),bbo=o("bartpho"),vbo=o(" \u2014 "),yj=a("a"),Fbo=o("BartphoTokenizer"),Tbo=o(" (BARTpho model)"),Mbo=l(),gs=a("li"),ihe=a("strong"),Ebo=o("bert"),Cbo=o(" \u2014 "),xj=a("a"),wbo=o("BertTokenizer"),Abo=o(" or "),$j=a("a"),Lbo=o("BertTokenizerFast"),ybo=o(" (BERT model)"),xbo=l(),_u=a("li"),dhe=a("strong"),$bo=o("bert-generation"),kbo=o(" \u2014 "),kj=a("a"),Sbo=o("BertGenerationTokenizer"),Rbo=o(" (Bert Generation model)"),Pbo=l(),bu=a("li"),che=a("strong"),Bbo=o("bert-japanese"),Ibo=o(" \u2014 "),Sj=a("a"),Nbo=o("BertJapaneseTokenizer"),qbo=o(" (BertJapanese model)"),jbo=l(),vu=a("li"),mhe=a("strong"),Dbo=o("bertweet"),Gbo=o(" \u2014 "),Rj=a("a"),Obo=o("BertweetTokenizer"),Vbo=o(" (BERTweet model)"),Xbo=l(),hs=a("li"),fhe=a("strong"),zbo=o("big_bird"),Qbo=o(" \u2014 "),Pj=a("a"),Wbo=o("BigBirdTokenizer"),Ubo=o(" or "),Bj=a("a"),Hbo=o("BigBirdTokenizerFast"),Jbo=o(" (BigBird model)"),Ybo=l(),us=a("li"),ghe=a("strong"),Zbo=o("bigbird_pegasus"),Kbo=o(" \u2014 "),Ij=a("a"),evo=o("PegasusTokenizer"),ovo=o(" or "),Nj=a("a"),rvo=o("PegasusTokenizerFast"),tvo=o(" (BigBird-Pegasus model)"),avo=l(),ps=a("li"),hhe=a("strong"),nvo=o("blenderbot"),svo=o(" \u2014 "),qj=a("a"),lvo=o("BlenderbotTokenizer"),ivo=o(" or "),jj=a("a"),dvo=o("BlenderbotTokenizerFast"),cvo=o(" (Blenderbot model)"),mvo=l(),Fu=a("li"),uhe=a("strong"),fvo=o("blenderbot-small"),gvo=o(" \u2014 "),Dj=a("a"),hvo=o("BlenderbotSmallTokenizer"),uvo=o(" (BlenderbotSmall model)"),pvo=l(),Tu=a("li"),phe=a("strong"),_vo=o("bloom"),bvo=o(" \u2014 "),Gj=a("a"),vvo=o("BloomTokenizerFast"),Fvo=o(" (BLOOM model)"),Tvo=l(),Mu=a("li"),_he=a("strong"),Mvo=o("byt5"),Evo=o(" \u2014 "),Oj=a("a"),Cvo=o("ByT5Tokenizer"),wvo=o(" (ByT5 model)"),Avo=l(),_s=a("li"),bhe=a("strong"),Lvo=o("camembert"),yvo=o(" \u2014 "),Vj=a("a"),xvo=o("CamembertTokenizer"),$vo=o(" or "),Xj=a("a"),kvo=o("CamembertTokenizerFast"),Svo=o(" (CamemBERT model)"),Rvo=l(),Eu=a("li"),vhe=a("strong"),Pvo=o("canine"),Bvo=o(" \u2014 "),zj=a("a"),Ivo=o("CanineTokenizer"),Nvo=o(" (CANINE model)"),qvo=l(),bs=a("li"),Fhe=a("strong"),jvo=o("clip"),Dvo=o(" \u2014 "),Qj=a("a"),Gvo=o("CLIPTokenizer"),Ovo=o(" or "),Wj=a("a"),Vvo=o("CLIPTokenizerFast"),Xvo=o(" (CLIP model)"),zvo=l(),vs=a("li"),The=a("strong"),Qvo=o("codegen"),Wvo=o(" \u2014 "),Uj=a("a"),Uvo=o("CodeGenTokenizer"),Hvo=o(" or "),Hj=a("a"),Jvo=o("CodeGenTokenizerFast"),Yvo=o(" (CodeGen model)"),Zvo=l(),Fs=a("li"),Mhe=a("strong"),Kvo=o("convbert"),eFo=o(" \u2014 "),Jj=a("a"),oFo=o("ConvBertTokenizer"),rFo=o(" or "),Yj=a("a"),tFo=o("ConvBertTokenizerFast"),aFo=o(" (ConvBERT model)"),nFo=l(),Ts=a("li"),Ehe=a("strong"),sFo=o("cpm"),lFo=o(" \u2014 "),Zj=a("a"),iFo=o("CpmTokenizer"),dFo=o(" or "),Kj=a("a"),cFo=o("CpmTokenizerFast"),mFo=o(" (CPM model)"),fFo=l(),Cu=a("li"),Che=a("strong"),gFo=o("ctrl"),hFo=o(" \u2014 "),eD=a("a"),uFo=o("CTRLTokenizer"),pFo=o(" (CTRL model)"),_Fo=l(),Ms=a("li"),whe=a("strong"),bFo=o("data2vec-text"),vFo=o(" \u2014 "),oD=a("a"),FFo=o("RobertaTokenizer"),TFo=o(" or "),rD=a("a"),MFo=o("RobertaTokenizerFast"),EFo=o(" (Data2VecText model)"),CFo=l(),Es=a("li"),Ahe=a("strong"),wFo=o("deberta"),AFo=o(" \u2014 "),tD=a("a"),LFo=o("DebertaTokenizer"),yFo=o(" or "),aD=a("a"),xFo=o("DebertaTokenizerFast"),$Fo=o(" (DeBERTa model)"),kFo=l(),Cs=a("li"),Lhe=a("strong"),SFo=o("deberta-v2"),RFo=o(" \u2014 "),nD=a("a"),PFo=o("DebertaV2Tokenizer"),BFo=o(" or "),sD=a("a"),IFo=o("DebertaV2TokenizerFast"),NFo=o(" (DeBERTa-v2 model)"),qFo=l(),ws=a("li"),yhe=a("strong"),jFo=o("distilbert"),DFo=o(" \u2014 "),lD=a("a"),GFo=o("DistilBertTokenizer"),OFo=o(" or "),iD=a("a"),VFo=o("DistilBertTokenizerFast"),XFo=o(" (DistilBERT model)"),zFo=l(),As=a("li"),xhe=a("strong"),QFo=o("dpr"),WFo=o(" \u2014 "),dD=a("a"),UFo=o("DPRQuestionEncoderTokenizer"),HFo=o(" or "),cD=a("a"),JFo=o("DPRQuestionEncoderTokenizerFast"),YFo=o(" (DPR model)"),ZFo=l(),Ls=a("li"),$he=a("strong"),KFo=o("electra"),eTo=o(" \u2014 "),mD=a("a"),oTo=o("ElectraTokenizer"),rTo=o(" or "),fD=a("a"),tTo=o("ElectraTokenizerFast"),aTo=o(" (ELECTRA model)"),nTo=l(),ys=a("li"),khe=a("strong"),sTo=o("ernie"),lTo=o(" \u2014 "),gD=a("a"),iTo=o("BertTokenizer"),dTo=o(" or "),hD=a("a"),cTo=o("BertTokenizerFast"),mTo=o(" (ERNIE model)"),fTo=l(),wu=a("li"),She=a("strong"),gTo=o("flaubert"),hTo=o(" \u2014 "),uD=a("a"),uTo=o("FlaubertTokenizer"),pTo=o(" (FlauBERT model)"),_To=l(),xs=a("li"),Rhe=a("strong"),bTo=o("fnet"),vTo=o(" \u2014 "),pD=a("a"),FTo=o("FNetTokenizer"),TTo=o(" or "),_D=a("a"),MTo=o("FNetTokenizerFast"),ETo=o(" (FNet model)"),CTo=l(),Au=a("li"),Phe=a("strong"),wTo=o("fsmt"),ATo=o(" \u2014 "),bD=a("a"),LTo=o("FSMTTokenizer"),yTo=o(" (FairSeq Machine-Translation model)"),xTo=l(),$s=a("li"),Bhe=a("strong"),$To=o("funnel"),kTo=o(" \u2014 "),vD=a("a"),STo=o("FunnelTokenizer"),RTo=o(" or "),FD=a("a"),PTo=o("FunnelTokenizerFast"),BTo=o(" (Funnel Transformer model)"),ITo=l(),ks=a("li"),Ihe=a("strong"),NTo=o("gpt2"),qTo=o(" \u2014 "),TD=a("a"),jTo=o("GPT2Tokenizer"),DTo=o(" or "),MD=a("a"),GTo=o("GPT2TokenizerFast"),OTo=o(" (OpenAI GPT-2 model)"),VTo=l(),Ss=a("li"),Nhe=a("strong"),XTo=o("gpt_neo"),zTo=o(" \u2014 "),ED=a("a"),QTo=o("GPT2Tokenizer"),WTo=o(" or "),CD=a("a"),UTo=o("GPT2TokenizerFast"),HTo=o(" (GPT Neo model)"),JTo=l(),Lu=a("li"),qhe=a("strong"),YTo=o("gpt_neox"),ZTo=o(" \u2014 "),wD=a("a"),KTo=o("GPTNeoXTokenizerFast"),eMo=o(" (GPT NeoX model)"),oMo=l(),yu=a("li"),jhe=a("strong"),rMo=o("gpt_neox_japanese"),tMo=o(" \u2014 "),AD=a("a"),aMo=o("GPTNeoXJapaneseTokenizer"),nMo=o(" (GPT NeoX Japanese model)"),sMo=l(),Rs=a("li"),Dhe=a("strong"),lMo=o("gptj"),iMo=o(" \u2014 "),LD=a("a"),dMo=o("GPT2Tokenizer"),cMo=o(" or "),yD=a("a"),mMo=o("GPT2TokenizerFast"),fMo=o(" (GPT-J model)"),gMo=l(),Ps=a("li"),Ghe=a("strong"),hMo=o("groupvit"),uMo=o(" \u2014 "),xD=a("a"),pMo=o("CLIPTokenizer"),_Mo=o(" or "),$D=a("a"),bMo=o("CLIPTokenizerFast"),vMo=o(" (GroupViT model)"),FMo=l(),Bs=a("li"),Ohe=a("strong"),TMo=o("herbert"),MMo=o(" \u2014 "),kD=a("a"),EMo=o("HerbertTokenizer"),CMo=o(" or "),SD=a("a"),wMo=o("HerbertTokenizerFast"),AMo=o(" (HerBERT model)"),LMo=l(),xu=a("li"),Vhe=a("strong"),yMo=o("hubert"),xMo=o(" \u2014 "),RD=a("a"),$Mo=o("Wav2Vec2CTCTokenizer"),kMo=o(" (Hubert model)"),SMo=l(),Is=a("li"),Xhe=a("strong"),RMo=o("ibert"),PMo=o(" \u2014 "),PD=a("a"),BMo=o("RobertaTokenizer"),IMo=o(" or "),BD=a("a"),NMo=o("RobertaTokenizerFast"),qMo=o(" (I-BERT model)"),jMo=l(),Ns=a("li"),zhe=a("strong"),DMo=o("layoutlm"),GMo=o(" \u2014 "),ID=a("a"),OMo=o("LayoutLMTokenizer"),VMo=o(" or "),ND=a("a"),XMo=o("LayoutLMTokenizerFast"),zMo=o(" (LayoutLM model)"),QMo=l(),qs=a("li"),Qhe=a("strong"),WMo=o("layoutlmv2"),UMo=o(" \u2014 "),qD=a("a"),HMo=o("LayoutLMv2Tokenizer"),JMo=o(" or "),jD=a("a"),YMo=o("LayoutLMv2TokenizerFast"),ZMo=o(" (LayoutLMv2 model)"),KMo=l(),js=a("li"),Whe=a("strong"),eEo=o("layoutlmv3"),oEo=o(" \u2014 "),DD=a("a"),rEo=o("LayoutLMv3Tokenizer"),tEo=o(" or "),GD=a("a"),aEo=o("LayoutLMv3TokenizerFast"),nEo=o(" (LayoutLMv3 model)"),sEo=l(),Ds=a("li"),Uhe=a("strong"),lEo=o("layoutxlm"),iEo=o(" \u2014 "),OD=a("a"),dEo=o("LayoutXLMTokenizer"),cEo=o(" or "),VD=a("a"),mEo=o("LayoutXLMTokenizerFast"),fEo=o(" (LayoutXLM model)"),gEo=l(),Gs=a("li"),Hhe=a("strong"),hEo=o("led"),uEo=o(" \u2014 "),XD=a("a"),pEo=o("LEDTokenizer"),_Eo=o(" or "),zD=a("a"),bEo=o("LEDTokenizerFast"),vEo=o(" (LED model)"),FEo=l(),Os=a("li"),Jhe=a("strong"),TEo=o("lilt"),MEo=o(" \u2014 "),QD=a("a"),EEo=o("LayoutLMv3Tokenizer"),CEo=o(" or "),WD=a("a"),wEo=o("LayoutLMv3TokenizerFast"),AEo=o(" (LiLT model)"),LEo=l(),Vs=a("li"),Yhe=a("strong"),yEo=o("longformer"),xEo=o(" \u2014 "),UD=a("a"),$Eo=o("LongformerTokenizer"),kEo=o(" or "),HD=a("a"),SEo=o("LongformerTokenizerFast"),REo=o(" (Longformer model)"),PEo=l(),Xs=a("li"),Zhe=a("strong"),BEo=o("longt5"),IEo=o(" \u2014 "),JD=a("a"),NEo=o("T5Tokenizer"),qEo=o(" or "),YD=a("a"),jEo=o("T5TokenizerFast"),DEo=o(" (LongT5 model)"),GEo=l(),$u=a("li"),Khe=a("strong"),OEo=o("luke"),VEo=o(" \u2014 "),ZD=a("a"),XEo=o("LukeTokenizer"),zEo=o(" (LUKE model)"),QEo=l(),zs=a("li"),eue=a("strong"),WEo=o("lxmert"),UEo=o(" \u2014 "),KD=a("a"),HEo=o("LxmertTokenizer"),JEo=o(" or "),eG=a("a"),YEo=o("LxmertTokenizerFast"),ZEo=o(" (LXMERT model)"),KEo=l(),ku=a("li"),oue=a("strong"),e4o=o("m2m_100"),o4o=o(" \u2014 "),oG=a("a"),r4o=o("M2M100Tokenizer"),t4o=o(" (M2M100 model)"),a4o=l(),Su=a("li"),rue=a("strong"),n4o=o("marian"),s4o=o(" \u2014 "),rG=a("a"),l4o=o("MarianTokenizer"),i4o=o(" (Marian model)"),d4o=l(),Qs=a("li"),tue=a("strong"),c4o=o("mbart"),m4o=o(" \u2014 "),tG=a("a"),f4o=o("MBartTokenizer"),g4o=o(" or "),aG=a("a"),h4o=o("MBartTokenizerFast"),u4o=o(" (mBART model)"),p4o=l(),Ws=a("li"),aue=a("strong"),_4o=o("mbart50"),b4o=o(" \u2014 "),nG=a("a"),v4o=o("MBart50Tokenizer"),F4o=o(" or "),sG=a("a"),T4o=o("MBart50TokenizerFast"),M4o=o(" (mBART-50 model)"),E4o=l(),Us=a("li"),nue=a("strong"),C4o=o("megatron-bert"),w4o=o(" \u2014 "),lG=a("a"),A4o=o("BertTokenizer"),L4o=o(" or "),iG=a("a"),y4o=o("BertTokenizerFast"),x4o=o(" (Megatron-BERT model)"),$4o=l(),Ru=a("li"),sue=a("strong"),k4o=o("mluke"),S4o=o(" \u2014 "),dG=a("a"),R4o=o("MLukeTokenizer"),P4o=o(" (mLUKE model)"),B4o=l(),Hs=a("li"),lue=a("strong"),I4o=o("mobilebert"),N4o=o(" \u2014 "),cG=a("a"),q4o=o("MobileBertTokenizer"),j4o=o(" or "),mG=a("a"),D4o=o("MobileBertTokenizerFast"),G4o=o(" (MobileBERT model)"),O4o=l(),Js=a("li"),iue=a("strong"),V4o=o("mpnet"),X4o=o(" \u2014 "),fG=a("a"),z4o=o("MPNetTokenizer"),Q4o=o(" or "),gG=a("a"),W4o=o("MPNetTokenizerFast"),U4o=o(" (MPNet model)"),H4o=l(),Ys=a("li"),due=a("strong"),J4o=o("mt5"),Y4o=o(" \u2014 "),hG=a("a"),Z4o=o("MT5Tokenizer"),K4o=o(" or "),uG=a("a"),eCo=o("MT5TokenizerFast"),oCo=o(" (MT5 model)"),rCo=l(),Zs=a("li"),cue=a("strong"),tCo=o("mvp"),aCo=o(" \u2014 "),pG=a("a"),nCo=o("MvpTokenizer"),sCo=o(" or "),_G=a("a"),lCo=o("MvpTokenizerFast"),iCo=o(" (MVP model)"),dCo=l(),Ks=a("li"),mue=a("strong"),cCo=o("nezha"),mCo=o(" \u2014 "),bG=a("a"),fCo=o("BertTokenizer"),gCo=o(" or "),vG=a("a"),hCo=o("BertTokenizerFast"),uCo=o(" (Nezha model)"),pCo=l(),el=a("li"),fue=a("strong"),_Co=o("nllb"),bCo=o(" \u2014 "),FG=a("a"),vCo=o("NllbTokenizer"),FCo=o(" or "),TG=a("a"),TCo=o("NllbTokenizerFast"),MCo=o(" (NLLB model)"),ECo=l(),ol=a("li"),gue=a("strong"),CCo=o("nystromformer"),wCo=o(" \u2014 "),MG=a("a"),ACo=o("AlbertTokenizer"),LCo=o(" or "),EG=a("a"),yCo=o("AlbertTokenizerFast"),xCo=o(" (Nystr\xF6mformer model)"),$Co=l(),rl=a("li"),hue=a("strong"),kCo=o("openai-gpt"),SCo=o(" \u2014 "),CG=a("a"),RCo=o("OpenAIGPTTokenizer"),PCo=o(" or "),wG=a("a"),BCo=o("OpenAIGPTTokenizerFast"),ICo=o(" (OpenAI GPT model)"),NCo=l(),Pu=a("li"),uue=a("strong"),qCo=o("opt"),jCo=o(" \u2014 "),AG=a("a"),DCo=o("GPT2Tokenizer"),GCo=o(" (OPT model)"),OCo=l(),tl=a("li"),pue=a("strong"),VCo=o("owlvit"),XCo=o(" \u2014 "),LG=a("a"),zCo=o("CLIPTokenizer"),QCo=o(" or "),yG=a("a"),WCo=o("CLIPTokenizerFast"),UCo=o(" (OWL-ViT model)"),HCo=l(),al=a("li"),_ue=a("strong"),JCo=o("pegasus"),YCo=o(" \u2014 "),xG=a("a"),ZCo=o("PegasusTokenizer"),KCo=o(" or "),$G=a("a"),e3o=o("PegasusTokenizerFast"),o3o=o(" (Pegasus model)"),r3o=l(),Bu=a("li"),bue=a("strong"),t3o=o("perceiver"),a3o=o(" \u2014 "),kG=a("a"),n3o=o("PerceiverTokenizer"),s3o=o(" (Perceiver model)"),l3o=l(),Iu=a("li"),vue=a("strong"),i3o=o("phobert"),d3o=o(" \u2014 "),SG=a("a"),c3o=o("PhobertTokenizer"),m3o=o(" (PhoBERT model)"),f3o=l(),Nu=a("li"),Fue=a("strong"),g3o=o("plbart"),h3o=o(" \u2014 "),RG=a("a"),u3o=o("PLBartTokenizer"),p3o=o(" (PLBart model)"),_3o=l(),qu=a("li"),Tue=a("strong"),b3o=o("prophetnet"),v3o=o(" \u2014 "),PG=a("a"),F3o=o("ProphetNetTokenizer"),T3o=o(" (ProphetNet model)"),M3o=l(),nl=a("li"),Mue=a("strong"),E3o=o("qdqbert"),C3o=o(" \u2014 "),BG=a("a"),w3o=o("BertTokenizer"),A3o=o(" or "),IG=a("a"),L3o=o("BertTokenizerFast"),y3o=o(" (QDQBert model)"),x3o=l(),ju=a("li"),Eue=a("strong"),$3o=o("rag"),k3o=o(" \u2014 "),NG=a("a"),S3o=o("RagTokenizer"),R3o=o(" (RAG model)"),P3o=l(),sl=a("li"),Cue=a("strong"),B3o=o("realm"),I3o=o(" \u2014 "),qG=a("a"),N3o=o("RealmTokenizer"),q3o=o(" or "),jG=a("a"),j3o=o("RealmTokenizerFast"),D3o=o(" (REALM model)"),G3o=l(),ll=a("li"),wue=a("strong"),O3o=o("reformer"),V3o=o(" \u2014 "),DG=a("a"),X3o=o("ReformerTokenizer"),z3o=o(" or "),GG=a("a"),Q3o=o("ReformerTokenizerFast"),W3o=o(" (Reformer model)"),U3o=l(),il=a("li"),Aue=a("strong"),H3o=o("rembert"),J3o=o(" \u2014 "),OG=a("a"),Y3o=o("RemBertTokenizer"),Z3o=o(" or "),VG=a("a"),K3o=o("RemBertTokenizerFast"),e5o=o(" (RemBERT model)"),o5o=l(),dl=a("li"),Lue=a("strong"),r5o=o("retribert"),t5o=o(" \u2014 "),XG=a("a"),a5o=o("RetriBertTokenizer"),n5o=o(" or "),zG=a("a"),s5o=o("RetriBertTokenizerFast"),l5o=o(" (RetriBERT model)"),i5o=l(),cl=a("li"),yue=a("strong"),d5o=o("roberta"),c5o=o(" \u2014 "),QG=a("a"),m5o=o("RobertaTokenizer"),f5o=o(" or "),WG=a("a"),g5o=o("RobertaTokenizerFast"),h5o=o(" (RoBERTa model)"),u5o=l(),ml=a("li"),xue=a("strong"),p5o=o("roformer"),_5o=o(" \u2014 "),UG=a("a"),b5o=o("RoFormerTokenizer"),v5o=o(" or "),HG=a("a"),F5o=o("RoFormerTokenizerFast"),T5o=o(" (RoFormer model)"),M5o=l(),Du=a("li"),$ue=a("strong"),E5o=o("speech_to_text"),C5o=o(" \u2014 "),JG=a("a"),w5o=o("Speech2TextTokenizer"),A5o=o(" (Speech2Text model)"),L5o=l(),Gu=a("li"),kue=a("strong"),y5o=o("speech_to_text_2"),x5o=o(" \u2014 "),YG=a("a"),$5o=o("Speech2Text2Tokenizer"),k5o=o(" (Speech2Text2 model)"),S5o=l(),fl=a("li"),Sue=a("strong"),R5o=o("splinter"),P5o=o(" \u2014 "),ZG=a("a"),B5o=o("SplinterTokenizer"),I5o=o(" or "),KG=a("a"),N5o=o("SplinterTokenizerFast"),q5o=o(" (Splinter model)"),j5o=l(),gl=a("li"),Rue=a("strong"),D5o=o("squeezebert"),G5o=o(" \u2014 "),eO=a("a"),O5o=o("SqueezeBertTokenizer"),V5o=o(" or "),oO=a("a"),X5o=o("SqueezeBertTokenizerFast"),z5o=o(" (SqueezeBERT model)"),Q5o=l(),hl=a("li"),Pue=a("strong"),W5o=o("t5"),U5o=o(" \u2014 "),rO=a("a"),H5o=o("T5Tokenizer"),J5o=o(" or "),tO=a("a"),Y5o=o("T5TokenizerFast"),Z5o=o(" (T5 model)"),K5o=l(),Ou=a("li"),Bue=a("strong"),e0o=o("tapas"),o0o=o(" \u2014 "),aO=a("a"),r0o=o("TapasTokenizer"),t0o=o(" (TAPAS model)"),a0o=l(),Vu=a("li"),Iue=a("strong"),n0o=o("tapex"),s0o=o(" \u2014 "),nO=a("a"),l0o=o("TapexTokenizer"),i0o=o(" (TAPEX model)"),d0o=l(),Xu=a("li"),Nue=a("strong"),c0o=o("transfo-xl"),m0o=o(" \u2014 "),sO=a("a"),f0o=o("TransfoXLTokenizer"),g0o=o(" (Transformer-XL model)"),h0o=l(),ul=a("li"),que=a("strong"),u0o=o("vilt"),p0o=o(" \u2014 "),lO=a("a"),_0o=o("BertTokenizer"),b0o=o(" or "),iO=a("a"),v0o=o("BertTokenizerFast"),F0o=o(" (ViLT model)"),T0o=l(),pl=a("li"),jue=a("strong"),M0o=o("visual_bert"),E0o=o(" \u2014 "),dO=a("a"),C0o=o("BertTokenizer"),w0o=o(" or "),cO=a("a"),A0o=o("BertTokenizerFast"),L0o=o(" (VisualBERT model)"),y0o=l(),zu=a("li"),Due=a("strong"),x0o=o("wav2vec2"),$0o=o(" \u2014 "),mO=a("a"),k0o=o("Wav2Vec2CTCTokenizer"),S0o=o(" (Wav2Vec2 model)"),R0o=l(),Qu=a("li"),Gue=a("strong"),P0o=o("wav2vec2-conformer"),B0o=o(" \u2014 "),fO=a("a"),I0o=o("Wav2Vec2CTCTokenizer"),N0o=o(" (Wav2Vec2-Conformer model)"),q0o=l(),Wu=a("li"),Oue=a("strong"),j0o=o("wav2vec2_phoneme"),D0o=o(" \u2014 "),gO=a("a"),G0o=o("Wav2Vec2PhonemeCTCTokenizer"),O0o=o(" (Wav2Vec2Phoneme model)"),V0o=l(),Uu=a("li"),Vue=a("strong"),X0o=o("whisper"),z0o=o(" \u2014 "),hO=a("a"),Q0o=o("WhisperTokenizer"),W0o=o(" (Whisper model)"),U0o=l(),_l=a("li"),Xue=a("strong"),H0o=o("xclip"),J0o=o(" \u2014 "),uO=a("a"),Y0o=o("CLIPTokenizer"),Z0o=o(" or "),pO=a("a"),K0o=o("CLIPTokenizerFast"),ewo=o(" (X-CLIP model)"),owo=l(),bl=a("li"),zue=a("strong"),rwo=o("xglm"),two=o(" \u2014 "),_O=a("a"),awo=o("XGLMTokenizer"),nwo=o(" or "),bO=a("a"),swo=o("XGLMTokenizerFast"),lwo=o(" (XGLM model)"),iwo=l(),Hu=a("li"),Que=a("strong"),dwo=o("xlm"),cwo=o(" \u2014 "),vO=a("a"),mwo=o("XLMTokenizer"),fwo=o(" (XLM model)"),gwo=l(),Ju=a("li"),Wue=a("strong"),hwo=o("xlm-prophetnet"),uwo=o(" \u2014 "),FO=a("a"),pwo=o("XLMProphetNetTokenizer"),_wo=o(" (XLM-ProphetNet model)"),bwo=l(),vl=a("li"),Uue=a("strong"),vwo=o("xlm-roberta"),Fwo=o(" \u2014 "),TO=a("a"),Two=o("XLMRobertaTokenizer"),Mwo=o(" or "),MO=a("a"),Ewo=o("XLMRobertaTokenizerFast"),Cwo=o(" (XLM-RoBERTa model)"),wwo=l(),Fl=a("li"),Hue=a("strong"),Awo=o("xlm-roberta-xl"),Lwo=o(" \u2014 "),EO=a("a"),ywo=o("XLMRobertaTokenizer"),xwo=o(" or "),CO=a("a"),$wo=o("XLMRobertaTokenizerFast"),kwo=o(" (XLM-RoBERTa-XL model)"),Swo=l(),Tl=a("li"),Jue=a("strong"),Rwo=o("xlnet"),Pwo=o(" \u2014 "),wO=a("a"),Bwo=o("XLNetTokenizer"),Iwo=o(" or "),AO=a("a"),Nwo=o("XLNetTokenizerFast"),qwo=o(" (XLNet model)"),jwo=l(),Ml=a("li"),Yue=a("strong"),Dwo=o("yoso"),Gwo=o(" \u2014 "),LO=a("a"),Owo=o("AlbertTokenizer"),Vwo=o(" or "),yO=a("a"),Xwo=o("AlbertTokenizerFast"),zwo=o(" (YOSO model)"),Qwo=l(),F(Yu.$$.fragment),Wwo=l(),Zu=a("div"),F(Hx.$$.fragment),Uwo=l(),Zue=a("p"),Hwo=o("Register a new tokenizer in this mapping."),aro=l(),Td=a("h2"),Ku=a("a"),Kue=a("span"),F(Jx.$$.fragment),Jwo=l(),epe=a("span"),Ywo=o("AutoFeatureExtractor"),nro=l(),Ro=a("div"),F(Yx.$$.fragment),Zwo=l(),Zx=a("p"),Kwo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),xO=a("a"),eAo=o("AutoFeatureExtractor.from_pretrained()"),oAo=o(" class method."),rAo=l(),Kx=a("p"),tAo=o("This class cannot be instantiated directly using "),ope=a("code"),aAo=o("__init__()"),nAo=o(" (throws an error)."),sAo=l(),Ye=a("div"),F(e$.$$.fragment),lAo=l(),rpe=a("p"),iAo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),dAo=l(),Ka=a("p"),cAo=o("The feature extractor class to instantiate is selected based on the "),tpe=a("code"),mAo=o("model_type"),fAo=o(` property of the config object
(either passed as an argument or loaded from `),ape=a("code"),gAo=o("pretrained_model_name_or_path"),hAo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),npe=a("code"),uAo=o("pretrained_model_name_or_path"),pAo=o(":"),_Ao=l(),z=a("ul"),ep=a("li"),spe=a("strong"),bAo=o("beit"),vAo=o(" \u2014 "),$O=a("a"),FAo=o("BeitFeatureExtractor"),TAo=o(" (BEiT model)"),MAo=l(),op=a("li"),lpe=a("strong"),EAo=o("clip"),CAo=o(" \u2014 "),kO=a("a"),wAo=o("CLIPFeatureExtractor"),AAo=o(" (CLIP model)"),LAo=l(),rp=a("li"),ipe=a("strong"),yAo=o("conditional_detr"),xAo=o(" \u2014 "),SO=a("a"),$Ao=o("ConditionalDetrFeatureExtractor"),kAo=o(" (Conditional DETR model)"),SAo=l(),tp=a("li"),dpe=a("strong"),RAo=o("convnext"),PAo=o(" \u2014 "),RO=a("a"),BAo=o("ConvNextFeatureExtractor"),IAo=o(" (ConvNeXT model)"),NAo=l(),ap=a("li"),cpe=a("strong"),qAo=o("cvt"),jAo=o(" \u2014 "),PO=a("a"),DAo=o("ConvNextFeatureExtractor"),GAo=o(" (CvT model)"),OAo=l(),np=a("li"),mpe=a("strong"),VAo=o("data2vec-audio"),XAo=o(" \u2014 "),BO=a("a"),zAo=o("Wav2Vec2FeatureExtractor"),QAo=o(" (Data2VecAudio model)"),WAo=l(),sp=a("li"),fpe=a("strong"),UAo=o("data2vec-vision"),HAo=o(" \u2014 "),IO=a("a"),JAo=o("BeitFeatureExtractor"),YAo=o(" (Data2VecVision model)"),ZAo=l(),lp=a("li"),gpe=a("strong"),KAo=o("deformable_detr"),e6o=o(" \u2014 "),NO=a("a"),o6o=o("DeformableDetrFeatureExtractor"),r6o=o(" (Deformable DETR model)"),t6o=l(),ip=a("li"),hpe=a("strong"),a6o=o("deit"),n6o=o(" \u2014 "),qO=a("a"),s6o=o("DeiTFeatureExtractor"),l6o=o(" (DeiT model)"),i6o=l(),dp=a("li"),upe=a("strong"),d6o=o("detr"),c6o=o(" \u2014 "),jO=a("a"),m6o=o("DetrFeatureExtractor"),f6o=o(" (DETR model)"),g6o=l(),cp=a("li"),ppe=a("strong"),h6o=o("donut"),u6o=o(" \u2014 "),DO=a("a"),p6o=o("DonutFeatureExtractor"),_6o=o(" (Donut model)"),b6o=l(),mp=a("li"),_pe=a("strong"),v6o=o("dpt"),F6o=o(" \u2014 "),GO=a("a"),T6o=o("DPTFeatureExtractor"),M6o=o(" (DPT model)"),E6o=l(),fp=a("li"),bpe=a("strong"),C6o=o("flava"),w6o=o(" \u2014 "),OO=a("a"),A6o=o("FlavaFeatureExtractor"),L6o=o(" (FLAVA model)"),y6o=l(),gp=a("li"),vpe=a("strong"),x6o=o("glpn"),$6o=o(" \u2014 "),VO=a("a"),k6o=o("GLPNFeatureExtractor"),S6o=o(" (GLPN model)"),R6o=l(),hp=a("li"),Fpe=a("strong"),P6o=o("groupvit"),B6o=o(" \u2014 "),XO=a("a"),I6o=o("CLIPFeatureExtractor"),N6o=o(" (GroupViT model)"),q6o=l(),up=a("li"),Tpe=a("strong"),j6o=o("hubert"),D6o=o(" \u2014 "),zO=a("a"),G6o=o("Wav2Vec2FeatureExtractor"),O6o=o(" (Hubert model)"),V6o=l(),pp=a("li"),Mpe=a("strong"),X6o=o("imagegpt"),z6o=o(" \u2014 "),QO=a("a"),Q6o=o("ImageGPTFeatureExtractor"),W6o=o(" (ImageGPT model)"),U6o=l(),_p=a("li"),Epe=a("strong"),H6o=o("layoutlmv2"),J6o=o(" \u2014 "),WO=a("a"),Y6o=o("LayoutLMv2FeatureExtractor"),Z6o=o(" (LayoutLMv2 model)"),K6o=l(),bp=a("li"),Cpe=a("strong"),e7o=o("layoutlmv3"),o7o=o(" \u2014 "),UO=a("a"),r7o=o("LayoutLMv3FeatureExtractor"),t7o=o(" (LayoutLMv3 model)"),a7o=l(),vp=a("li"),wpe=a("strong"),n7o=o("levit"),s7o=o(" \u2014 "),HO=a("a"),l7o=o("LevitFeatureExtractor"),i7o=o(" (LeViT model)"),d7o=l(),Fp=a("li"),Ape=a("strong"),c7o=o("maskformer"),m7o=o(" \u2014 "),JO=a("a"),f7o=o("MaskFormerFeatureExtractor"),g7o=o(" (MaskFormer model)"),h7o=l(),Tp=a("li"),Lpe=a("strong"),u7o=o("mctct"),p7o=o(" \u2014 "),YO=a("a"),_7o=o("MCTCTFeatureExtractor"),b7o=o(" (M-CTC-T model)"),v7o=l(),Mp=a("li"),ype=a("strong"),F7o=o("mobilevit"),T7o=o(" \u2014 "),ZO=a("a"),M7o=o("MobileViTFeatureExtractor"),E7o=o(" (MobileViT model)"),C7o=l(),Ep=a("li"),xpe=a("strong"),w7o=o("owlvit"),A7o=o(" \u2014 "),KO=a("a"),L7o=o("OwlViTFeatureExtractor"),y7o=o(" (OWL-ViT model)"),x7o=l(),Cp=a("li"),$pe=a("strong"),$7o=o("perceiver"),k7o=o(" \u2014 "),eV=a("a"),S7o=o("PerceiverFeatureExtractor"),R7o=o(" (Perceiver model)"),P7o=l(),wp=a("li"),kpe=a("strong"),B7o=o("poolformer"),I7o=o(" \u2014 "),oV=a("a"),N7o=o("PoolFormerFeatureExtractor"),q7o=o(" (PoolFormer model)"),j7o=l(),Ap=a("li"),Spe=a("strong"),D7o=o("regnet"),G7o=o(" \u2014 "),rV=a("a"),O7o=o("ConvNextFeatureExtractor"),V7o=o(" (RegNet model)"),X7o=l(),Lp=a("li"),Rpe=a("strong"),z7o=o("resnet"),Q7o=o(" \u2014 "),tV=a("a"),W7o=o("ConvNextFeatureExtractor"),U7o=o(" (ResNet model)"),H7o=l(),yp=a("li"),Ppe=a("strong"),J7o=o("segformer"),Y7o=o(" \u2014 "),aV=a("a"),Z7o=o("SegformerFeatureExtractor"),K7o=o(" (SegFormer model)"),eLo=l(),xp=a("li"),Bpe=a("strong"),oLo=o("speech_to_text"),rLo=o(" \u2014 "),nV=a("a"),tLo=o("Speech2TextFeatureExtractor"),aLo=o(" (Speech2Text model)"),nLo=l(),$p=a("li"),Ipe=a("strong"),sLo=o("swin"),lLo=o(" \u2014 "),sV=a("a"),iLo=o("ViTFeatureExtractor"),dLo=o(" (Swin Transformer model)"),cLo=l(),kp=a("li"),Npe=a("strong"),mLo=o("swinv2"),fLo=o(" \u2014 "),lV=a("a"),gLo=o("ViTFeatureExtractor"),hLo=o(" (Swin Transformer V2 model)"),uLo=l(),Sp=a("li"),qpe=a("strong"),pLo=o("van"),_Lo=o(" \u2014 "),iV=a("a"),bLo=o("ConvNextFeatureExtractor"),vLo=o(" (VAN model)"),FLo=l(),Rp=a("li"),jpe=a("strong"),TLo=o("videomae"),MLo=o(" \u2014 "),dV=a("a"),ELo=o("VideoMAEFeatureExtractor"),CLo=o(" (VideoMAE model)"),wLo=l(),Pp=a("li"),Dpe=a("strong"),ALo=o("vilt"),LLo=o(" \u2014 "),cV=a("a"),yLo=o("ViltFeatureExtractor"),xLo=o(" (ViLT model)"),$Lo=l(),Bp=a("li"),Gpe=a("strong"),kLo=o("vit"),SLo=o(" \u2014 "),mV=a("a"),RLo=o("ViTFeatureExtractor"),PLo=o(" (ViT model)"),BLo=l(),Ip=a("li"),Ope=a("strong"),ILo=o("vit_mae"),NLo=o(" \u2014 "),fV=a("a"),qLo=o("ViTFeatureExtractor"),jLo=o(" (ViTMAE model)"),DLo=l(),Np=a("li"),Vpe=a("strong"),GLo=o("vit_msn"),OLo=o(" \u2014 "),gV=a("a"),VLo=o("ViTFeatureExtractor"),XLo=o(" (ViTMSN model)"),zLo=l(),qp=a("li"),Xpe=a("strong"),QLo=o("wav2vec2"),WLo=o(" \u2014 "),hV=a("a"),ULo=o("Wav2Vec2FeatureExtractor"),HLo=o(" (Wav2Vec2 model)"),JLo=l(),jp=a("li"),zpe=a("strong"),YLo=o("wav2vec2-conformer"),ZLo=o(" \u2014 "),uV=a("a"),KLo=o("Wav2Vec2FeatureExtractor"),e8o=o(" (Wav2Vec2-Conformer model)"),o8o=l(),Dp=a("li"),Qpe=a("strong"),r8o=o("whisper"),t8o=o(" \u2014 "),pV=a("a"),a8o=o("WhisperFeatureExtractor"),n8o=o(" (Whisper model)"),s8o=l(),Gp=a("li"),Wpe=a("strong"),l8o=o("xclip"),i8o=o(" \u2014 "),_V=a("a"),d8o=o("CLIPFeatureExtractor"),c8o=o(" (X-CLIP model)"),m8o=l(),Op=a("li"),Upe=a("strong"),f8o=o("yolos"),g8o=o(" \u2014 "),bV=a("a"),h8o=o("YolosFeatureExtractor"),u8o=o(" (YOLOS model)"),p8o=l(),F(Vp.$$.fragment),_8o=l(),F(Xp.$$.fragment),b8o=l(),zp=a("div"),F(o$.$$.fragment),v8o=l(),Hpe=a("p"),F8o=o("Register a new feature extractor for this class."),sro=l(),Md=a("h2"),Qp=a("a"),Jpe=a("span"),F(r$.$$.fragment),T8o=l(),Ype=a("span"),M8o=o("AutoProcessor"),lro=l(),Po=a("div"),F(t$.$$.fragment),E8o=l(),a$=a("p"),C8o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),vV=a("a"),w8o=o("AutoProcessor.from_pretrained()"),A8o=o(" class method."),L8o=l(),n$=a("p"),y8o=o("This class cannot be instantiated directly using "),Zpe=a("code"),x8o=o("__init__()"),$8o=o(" (throws an error)."),k8o=l(),Ze=a("div"),F(s$.$$.fragment),S8o=l(),Kpe=a("p"),R8o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),P8o=l(),Ed=a("p"),B8o=o("The processor class to instantiate is selected based on the "),e_e=a("code"),I8o=o("model_type"),N8o=o(` property of the config object (either
passed as an argument or loaded from `),o_e=a("code"),q8o=o("pretrained_model_name_or_path"),j8o=o(" if possible):"),D8o=l(),se=a("ul"),Wp=a("li"),r_e=a("strong"),G8o=o("clip"),O8o=o(" \u2014 "),FV=a("a"),V8o=o("CLIPProcessor"),X8o=o(" (CLIP model)"),z8o=l(),Up=a("li"),t_e=a("strong"),Q8o=o("donut"),W8o=o(" \u2014 "),TV=a("a"),U8o=o("DonutProcessor"),H8o=o(" (Donut model)"),J8o=l(),Hp=a("li"),a_e=a("strong"),Y8o=o("flava"),Z8o=o(" \u2014 "),MV=a("a"),K8o=o("FlavaProcessor"),eyo=o(" (FLAVA model)"),oyo=l(),Jp=a("li"),n_e=a("strong"),ryo=o("groupvit"),tyo=o(" \u2014 "),EV=a("a"),ayo=o("CLIPProcessor"),nyo=o(" (GroupViT model)"),syo=l(),Yp=a("li"),s_e=a("strong"),lyo=o("layoutlmv2"),iyo=o(" \u2014 "),CV=a("a"),dyo=o("LayoutLMv2Processor"),cyo=o(" (LayoutLMv2 model)"),myo=l(),Zp=a("li"),l_e=a("strong"),fyo=o("layoutlmv3"),gyo=o(" \u2014 "),wV=a("a"),hyo=o("LayoutLMv3Processor"),uyo=o(" (LayoutLMv3 model)"),pyo=l(),Kp=a("li"),i_e=a("strong"),_yo=o("layoutxlm"),byo=o(" \u2014 "),AV=a("a"),vyo=o("LayoutXLMProcessor"),Fyo=o(" (LayoutXLM model)"),Tyo=l(),e_=a("li"),d_e=a("strong"),Myo=o("markuplm"),Eyo=o(" \u2014 "),LV=a("a"),Cyo=o("MarkupLMProcessor"),wyo=o(" (MarkupLM model)"),Ayo=l(),o_=a("li"),c_e=a("strong"),Lyo=o("owlvit"),yyo=o(" \u2014 "),yV=a("a"),xyo=o("OwlViTProcessor"),$yo=o(" (OWL-ViT model)"),kyo=l(),r_=a("li"),m_e=a("strong"),Syo=o("sew"),Ryo=o(" \u2014 "),xV=a("a"),Pyo=o("Wav2Vec2Processor"),Byo=o(" (SEW model)"),Iyo=l(),t_=a("li"),f_e=a("strong"),Nyo=o("sew-d"),qyo=o(" \u2014 "),$V=a("a"),jyo=o("Wav2Vec2Processor"),Dyo=o(" (SEW-D model)"),Gyo=l(),a_=a("li"),g_e=a("strong"),Oyo=o("speech_to_text"),Vyo=o(" \u2014 "),kV=a("a"),Xyo=o("Speech2TextProcessor"),zyo=o(" (Speech2Text model)"),Qyo=l(),n_=a("li"),h_e=a("strong"),Wyo=o("speech_to_text_2"),Uyo=o(" \u2014 "),SV=a("a"),Hyo=o("Speech2Text2Processor"),Jyo=o(" (Speech2Text2 model)"),Yyo=l(),s_=a("li"),u_e=a("strong"),Zyo=o("trocr"),Kyo=o(" \u2014 "),RV=a("a"),e9o=o("TrOCRProcessor"),o9o=o(" (TrOCR model)"),r9o=l(),l_=a("li"),p_e=a("strong"),t9o=o("unispeech"),a9o=o(" \u2014 "),PV=a("a"),n9o=o("Wav2Vec2Processor"),s9o=o(" (UniSpeech model)"),l9o=l(),i_=a("li"),__e=a("strong"),i9o=o("unispeech-sat"),d9o=o(" \u2014 "),BV=a("a"),c9o=o("Wav2Vec2Processor"),m9o=o(" (UniSpeechSat model)"),f9o=l(),d_=a("li"),b_e=a("strong"),g9o=o("vilt"),h9o=o(" \u2014 "),IV=a("a"),u9o=o("ViltProcessor"),p9o=o(" (ViLT model)"),_9o=l(),c_=a("li"),v_e=a("strong"),b9o=o("vision-text-dual-encoder"),v9o=o(" \u2014 "),NV=a("a"),F9o=o("VisionTextDualEncoderProcessor"),T9o=o(" (VisionTextDualEncoder model)"),M9o=l(),m_=a("li"),F_e=a("strong"),E9o=o("wav2vec2"),C9o=o(" \u2014 "),qV=a("a"),w9o=o("Wav2Vec2Processor"),A9o=o(" (Wav2Vec2 model)"),L9o=l(),f_=a("li"),T_e=a("strong"),y9o=o("wav2vec2-conformer"),x9o=o(" \u2014 "),jV=a("a"),$9o=o("Wav2Vec2Processor"),k9o=o(" (Wav2Vec2-Conformer model)"),S9o=l(),g_=a("li"),M_e=a("strong"),R9o=o("wavlm"),P9o=o(" \u2014 "),DV=a("a"),B9o=o("Wav2Vec2Processor"),I9o=o(" (WavLM model)"),N9o=l(),h_=a("li"),E_e=a("strong"),q9o=o("whisper"),j9o=o(" \u2014 "),GV=a("a"),D9o=o("WhisperProcessor"),G9o=o(" (Whisper model)"),O9o=l(),u_=a("li"),C_e=a("strong"),V9o=o("xclip"),X9o=o(" \u2014 "),OV=a("a"),z9o=o("CLIPProcessor"),Q9o=o(" (X-CLIP model)"),W9o=l(),F(p_.$$.fragment),U9o=l(),F(__.$$.fragment),H9o=l(),b_=a("div"),F(l$.$$.fragment),J9o=l(),w_e=a("p"),Y9o=o("Register a new processor for this class."),iro=l(),Cd=a("h2"),v_=a("a"),A_e=a("span"),F(i$.$$.fragment),Z9o=l(),L_e=a("span"),K9o=o("AutoModel"),dro=l(),Bo=a("div"),F(d$.$$.fragment),exo=l(),wd=a("p"),oxo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VV=a("a"),rxo=o("from_pretrained()"),txo=o(" class method or the "),XV=a("a"),axo=o("from_config()"),nxo=o(` class
method.`),sxo=l(),c$=a("p"),lxo=o("This class cannot be instantiated directly using "),y_e=a("code"),ixo=o("__init__()"),dxo=o(" (throws an error)."),cxo=l(),vt=a("div"),F(m$.$$.fragment),mxo=l(),x_e=a("p"),fxo=o("Instantiates one of the base model classes of the library from a configuration."),gxo=l(),Ad=a("p"),hxo=o(`Note:
Loading a model from its configuration file does `),$_e=a("strong"),uxo=o("not"),pxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=a("a"),_xo=o("from_pretrained()"),bxo=o(" to load the model weights."),vxo=l(),F(F_.$$.fragment),Fxo=l(),Ke=a("div"),F(f$.$$.fragment),Txo=l(),k_e=a("p"),Mxo=o("Instantiate one of the base model classes of the library from a pretrained model."),Exo=l(),en=a("p"),Cxo=o("The model class to instantiate is selected based on the "),S_e=a("code"),wxo=o("model_type"),Axo=o(` property of the config object (either
passed as an argument or loaded from `),R_e=a("code"),Lxo=o("pretrained_model_name_or_path"),yxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P_e=a("code"),xxo=o("pretrained_model_name_or_path"),$xo=o(":"),kxo=l(),y=a("ul"),T_=a("li"),B_e=a("strong"),Sxo=o("albert"),Rxo=o(" \u2014 "),QV=a("a"),Pxo=o("AlbertModel"),Bxo=o(" (ALBERT model)"),Ixo=l(),M_=a("li"),I_e=a("strong"),Nxo=o("bart"),qxo=o(" \u2014 "),WV=a("a"),jxo=o("BartModel"),Dxo=o(" (BART model)"),Gxo=l(),E_=a("li"),N_e=a("strong"),Oxo=o("beit"),Vxo=o(" \u2014 "),UV=a("a"),Xxo=o("BeitModel"),zxo=o(" (BEiT model)"),Qxo=l(),C_=a("li"),q_e=a("strong"),Wxo=o("bert"),Uxo=o(" \u2014 "),HV=a("a"),Hxo=o("BertModel"),Jxo=o(" (BERT model)"),Yxo=l(),w_=a("li"),j_e=a("strong"),Zxo=o("bert-generation"),Kxo=o(" \u2014 "),JV=a("a"),e$o=o("BertGenerationEncoder"),o$o=o(" (Bert Generation model)"),r$o=l(),A_=a("li"),D_e=a("strong"),t$o=o("big_bird"),a$o=o(" \u2014 "),YV=a("a"),n$o=o("BigBirdModel"),s$o=o(" (BigBird model)"),l$o=l(),L_=a("li"),G_e=a("strong"),i$o=o("bigbird_pegasus"),d$o=o(" \u2014 "),ZV=a("a"),c$o=o("BigBirdPegasusModel"),m$o=o(" (BigBird-Pegasus model)"),f$o=l(),y_=a("li"),O_e=a("strong"),g$o=o("blenderbot"),h$o=o(" \u2014 "),KV=a("a"),u$o=o("BlenderbotModel"),p$o=o(" (Blenderbot model)"),_$o=l(),x_=a("li"),V_e=a("strong"),b$o=o("blenderbot-small"),v$o=o(" \u2014 "),eX=a("a"),F$o=o("BlenderbotSmallModel"),T$o=o(" (BlenderbotSmall model)"),M$o=l(),$_=a("li"),X_e=a("strong"),E$o=o("bloom"),C$o=o(" \u2014 "),oX=a("a"),w$o=o("BloomModel"),A$o=o(" (BLOOM model)"),L$o=l(),k_=a("li"),z_e=a("strong"),y$o=o("camembert"),x$o=o(" \u2014 "),rX=a("a"),$$o=o("CamembertModel"),k$o=o(" (CamemBERT model)"),S$o=l(),S_=a("li"),Q_e=a("strong"),R$o=o("canine"),P$o=o(" \u2014 "),tX=a("a"),B$o=o("CanineModel"),I$o=o(" (CANINE model)"),N$o=l(),R_=a("li"),W_e=a("strong"),q$o=o("clip"),j$o=o(" \u2014 "),aX=a("a"),D$o=o("CLIPModel"),G$o=o(" (CLIP model)"),O$o=l(),P_=a("li"),U_e=a("strong"),V$o=o("codegen"),X$o=o(" \u2014 "),nX=a("a"),z$o=o("CodeGenModel"),Q$o=o(" (CodeGen model)"),W$o=l(),B_=a("li"),H_e=a("strong"),U$o=o("conditional_detr"),H$o=o(" \u2014 "),sX=a("a"),J$o=o("ConditionalDetrModel"),Y$o=o(" (Conditional DETR model)"),Z$o=l(),I_=a("li"),J_e=a("strong"),K$o=o("convbert"),eko=o(" \u2014 "),lX=a("a"),oko=o("ConvBertModel"),rko=o(" (ConvBERT model)"),tko=l(),N_=a("li"),Y_e=a("strong"),ako=o("convnext"),nko=o(" \u2014 "),iX=a("a"),sko=o("ConvNextModel"),lko=o(" (ConvNeXT model)"),iko=l(),q_=a("li"),Z_e=a("strong"),dko=o("ctrl"),cko=o(" \u2014 "),dX=a("a"),mko=o("CTRLModel"),fko=o(" (CTRL model)"),gko=l(),j_=a("li"),K_e=a("strong"),hko=o("cvt"),uko=o(" \u2014 "),cX=a("a"),pko=o("CvtModel"),_ko=o(" (CvT model)"),bko=l(),D_=a("li"),e1e=a("strong"),vko=o("data2vec-audio"),Fko=o(" \u2014 "),mX=a("a"),Tko=o("Data2VecAudioModel"),Mko=o(" (Data2VecAudio model)"),Eko=l(),G_=a("li"),o1e=a("strong"),Cko=o("data2vec-text"),wko=o(" \u2014 "),fX=a("a"),Ako=o("Data2VecTextModel"),Lko=o(" (Data2VecText model)"),yko=l(),O_=a("li"),r1e=a("strong"),xko=o("data2vec-vision"),$ko=o(" \u2014 "),gX=a("a"),kko=o("Data2VecVisionModel"),Sko=o(" (Data2VecVision model)"),Rko=l(),V_=a("li"),t1e=a("strong"),Pko=o("deberta"),Bko=o(" \u2014 "),hX=a("a"),Iko=o("DebertaModel"),Nko=o(" (DeBERTa model)"),qko=l(),X_=a("li"),a1e=a("strong"),jko=o("deberta-v2"),Dko=o(" \u2014 "),uX=a("a"),Gko=o("DebertaV2Model"),Oko=o(" (DeBERTa-v2 model)"),Vko=l(),z_=a("li"),n1e=a("strong"),Xko=o("decision_transformer"),zko=o(" \u2014 "),pX=a("a"),Qko=o("DecisionTransformerModel"),Wko=o(" (Decision Transformer model)"),Uko=l(),Q_=a("li"),s1e=a("strong"),Hko=o("deformable_detr"),Jko=o(" \u2014 "),_X=a("a"),Yko=o("DeformableDetrModel"),Zko=o(" (Deformable DETR model)"),Kko=l(),W_=a("li"),l1e=a("strong"),eSo=o("deit"),oSo=o(" \u2014 "),bX=a("a"),rSo=o("DeiTModel"),tSo=o(" (DeiT model)"),aSo=l(),U_=a("li"),i1e=a("strong"),nSo=o("detr"),sSo=o(" \u2014 "),vX=a("a"),lSo=o("DetrModel"),iSo=o(" (DETR model)"),dSo=l(),H_=a("li"),d1e=a("strong"),cSo=o("distilbert"),mSo=o(" \u2014 "),FX=a("a"),fSo=o("DistilBertModel"),gSo=o(" (DistilBERT model)"),hSo=l(),J_=a("li"),c1e=a("strong"),uSo=o("donut-swin"),pSo=o(" \u2014 "),TX=a("a"),_So=o("DonutSwinModel"),bSo=o(" (DonutSwin model)"),vSo=l(),Y_=a("li"),m1e=a("strong"),FSo=o("dpr"),TSo=o(" \u2014 "),MX=a("a"),MSo=o("DPRQuestionEncoder"),ESo=o(" (DPR model)"),CSo=l(),Z_=a("li"),f1e=a("strong"),wSo=o("dpt"),ASo=o(" \u2014 "),EX=a("a"),LSo=o("DPTModel"),ySo=o(" (DPT model)"),xSo=l(),K_=a("li"),g1e=a("strong"),$So=o("electra"),kSo=o(" \u2014 "),CX=a("a"),SSo=o("ElectraModel"),RSo=o(" (ELECTRA model)"),PSo=l(),e1=a("li"),h1e=a("strong"),BSo=o("ernie"),ISo=o(" \u2014 "),wX=a("a"),NSo=o("ErnieModel"),qSo=o(" (ERNIE model)"),jSo=l(),o1=a("li"),u1e=a("strong"),DSo=o("esm"),GSo=o(" \u2014 "),AX=a("a"),OSo=o("EsmModel"),VSo=o(" (ESM model)"),XSo=l(),r1=a("li"),p1e=a("strong"),zSo=o("flaubert"),QSo=o(" \u2014 "),LX=a("a"),WSo=o("FlaubertModel"),USo=o(" (FlauBERT model)"),HSo=l(),t1=a("li"),_1e=a("strong"),JSo=o("flava"),YSo=o(" \u2014 "),yX=a("a"),ZSo=o("FlavaModel"),KSo=o(" (FLAVA model)"),eRo=l(),a1=a("li"),b1e=a("strong"),oRo=o("fnet"),rRo=o(" \u2014 "),xX=a("a"),tRo=o("FNetModel"),aRo=o(" (FNet model)"),nRo=l(),n1=a("li"),v1e=a("strong"),sRo=o("fsmt"),lRo=o(" \u2014 "),$X=a("a"),iRo=o("FSMTModel"),dRo=o(" (FairSeq Machine-Translation model)"),cRo=l(),El=a("li"),F1e=a("strong"),mRo=o("funnel"),fRo=o(" \u2014 "),kX=a("a"),gRo=o("FunnelModel"),hRo=o(" or "),SX=a("a"),uRo=o("FunnelBaseModel"),pRo=o(" (Funnel Transformer model)"),_Ro=l(),s1=a("li"),T1e=a("strong"),bRo=o("glpn"),vRo=o(" \u2014 "),RX=a("a"),FRo=o("GLPNModel"),TRo=o(" (GLPN model)"),MRo=l(),l1=a("li"),M1e=a("strong"),ERo=o("gpt2"),CRo=o(" \u2014 "),PX=a("a"),wRo=o("GPT2Model"),ARo=o(" (OpenAI GPT-2 model)"),LRo=l(),i1=a("li"),E1e=a("strong"),yRo=o("gpt_neo"),xRo=o(" \u2014 "),BX=a("a"),$Ro=o("GPTNeoModel"),kRo=o(" (GPT Neo model)"),SRo=l(),d1=a("li"),C1e=a("strong"),RRo=o("gpt_neox"),PRo=o(" \u2014 "),IX=a("a"),BRo=o("GPTNeoXModel"),IRo=o(" (GPT NeoX model)"),NRo=l(),c1=a("li"),w1e=a("strong"),qRo=o("gpt_neox_japanese"),jRo=o(" \u2014 "),NX=a("a"),DRo=o("GPTNeoXJapaneseModel"),GRo=o(" (GPT NeoX Japanese model)"),ORo=l(),m1=a("li"),A1e=a("strong"),VRo=o("gptj"),XRo=o(" \u2014 "),qX=a("a"),zRo=o("GPTJModel"),QRo=o(" (GPT-J model)"),WRo=l(),f1=a("li"),L1e=a("strong"),URo=o("groupvit"),HRo=o(" \u2014 "),jX=a("a"),JRo=o("GroupViTModel"),YRo=o(" (GroupViT model)"),ZRo=l(),g1=a("li"),y1e=a("strong"),KRo=o("hubert"),ePo=o(" \u2014 "),DX=a("a"),oPo=o("HubertModel"),rPo=o(" (Hubert model)"),tPo=l(),h1=a("li"),x1e=a("strong"),aPo=o("ibert"),nPo=o(" \u2014 "),GX=a("a"),sPo=o("IBertModel"),lPo=o(" (I-BERT model)"),iPo=l(),u1=a("li"),$1e=a("strong"),dPo=o("imagegpt"),cPo=o(" \u2014 "),OX=a("a"),mPo=o("ImageGPTModel"),fPo=o(" (ImageGPT model)"),gPo=l(),p1=a("li"),k1e=a("strong"),hPo=o("layoutlm"),uPo=o(" \u2014 "),VX=a("a"),pPo=o("LayoutLMModel"),_Po=o(" (LayoutLM model)"),bPo=l(),_1=a("li"),S1e=a("strong"),vPo=o("layoutlmv2"),FPo=o(" \u2014 "),XX=a("a"),TPo=o("LayoutLMv2Model"),MPo=o(" (LayoutLMv2 model)"),EPo=l(),b1=a("li"),R1e=a("strong"),CPo=o("layoutlmv3"),wPo=o(" \u2014 "),zX=a("a"),APo=o("LayoutLMv3Model"),LPo=o(" (LayoutLMv3 model)"),yPo=l(),v1=a("li"),P1e=a("strong"),xPo=o("led"),$Po=o(" \u2014 "),QX=a("a"),kPo=o("LEDModel"),SPo=o(" (LED model)"),RPo=l(),F1=a("li"),B1e=a("strong"),PPo=o("levit"),BPo=o(" \u2014 "),WX=a("a"),IPo=o("LevitModel"),NPo=o(" (LeViT model)"),qPo=l(),T1=a("li"),I1e=a("strong"),jPo=o("lilt"),DPo=o(" \u2014 "),UX=a("a"),GPo=o("LiltModel"),OPo=o(" (LiLT model)"),VPo=l(),M1=a("li"),N1e=a("strong"),XPo=o("longformer"),zPo=o(" \u2014 "),HX=a("a"),QPo=o("LongformerModel"),WPo=o(" (Longformer model)"),UPo=l(),E1=a("li"),q1e=a("strong"),HPo=o("longt5"),JPo=o(" \u2014 "),JX=a("a"),YPo=o("LongT5Model"),ZPo=o(" (LongT5 model)"),KPo=l(),C1=a("li"),j1e=a("strong"),eBo=o("luke"),oBo=o(" \u2014 "),YX=a("a"),rBo=o("LukeModel"),tBo=o(" (LUKE model)"),aBo=l(),w1=a("li"),D1e=a("strong"),nBo=o("lxmert"),sBo=o(" \u2014 "),ZX=a("a"),lBo=o("LxmertModel"),iBo=o(" (LXMERT model)"),dBo=l(),A1=a("li"),G1e=a("strong"),cBo=o("m2m_100"),mBo=o(" \u2014 "),KX=a("a"),fBo=o("M2M100Model"),gBo=o(" (M2M100 model)"),hBo=l(),L1=a("li"),O1e=a("strong"),uBo=o("marian"),pBo=o(" \u2014 "),ez=a("a"),_Bo=o("MarianModel"),bBo=o(" (Marian model)"),vBo=l(),y1=a("li"),V1e=a("strong"),FBo=o("markuplm"),TBo=o(" \u2014 "),oz=a("a"),MBo=o("MarkupLMModel"),EBo=o(" (MarkupLM model)"),CBo=l(),x1=a("li"),X1e=a("strong"),wBo=o("maskformer"),ABo=o(" \u2014 "),rz=a("a"),LBo=o("MaskFormerModel"),yBo=o(" (MaskFormer model)"),xBo=l(),$1=a("li"),z1e=a("strong"),$Bo=o("mbart"),kBo=o(" \u2014 "),tz=a("a"),SBo=o("MBartModel"),RBo=o(" (mBART model)"),PBo=l(),k1=a("li"),Q1e=a("strong"),BBo=o("mctct"),IBo=o(" \u2014 "),az=a("a"),NBo=o("MCTCTModel"),qBo=o(" (M-CTC-T model)"),jBo=l(),S1=a("li"),W1e=a("strong"),DBo=o("megatron-bert"),GBo=o(" \u2014 "),nz=a("a"),OBo=o("MegatronBertModel"),VBo=o(" (Megatron-BERT model)"),XBo=l(),R1=a("li"),U1e=a("strong"),zBo=o("mobilebert"),QBo=o(" \u2014 "),sz=a("a"),WBo=o("MobileBertModel"),UBo=o(" (MobileBERT model)"),HBo=l(),P1=a("li"),H1e=a("strong"),JBo=o("mobilevit"),YBo=o(" \u2014 "),lz=a("a"),ZBo=o("MobileViTModel"),KBo=o(" (MobileViT model)"),eIo=l(),B1=a("li"),J1e=a("strong"),oIo=o("mpnet"),rIo=o(" \u2014 "),iz=a("a"),tIo=o("MPNetModel"),aIo=o(" (MPNet model)"),nIo=l(),I1=a("li"),Y1e=a("strong"),sIo=o("mt5"),lIo=o(" \u2014 "),dz=a("a"),iIo=o("MT5Model"),dIo=o(" (MT5 model)"),cIo=l(),N1=a("li"),Z1e=a("strong"),mIo=o("mvp"),fIo=o(" \u2014 "),cz=a("a"),gIo=o("MvpModel"),hIo=o(" (MVP model)"),uIo=l(),q1=a("li"),K1e=a("strong"),pIo=o("nezha"),_Io=o(" \u2014 "),mz=a("a"),bIo=o("NezhaModel"),vIo=o(" (Nezha model)"),FIo=l(),j1=a("li"),e2e=a("strong"),TIo=o("nllb"),MIo=o(" \u2014 "),fz=a("a"),EIo=o("M2M100Model"),CIo=o(" (NLLB model)"),wIo=l(),D1=a("li"),o2e=a("strong"),AIo=o("nystromformer"),LIo=o(" \u2014 "),gz=a("a"),yIo=o("NystromformerModel"),xIo=o(" (Nystr\xF6mformer model)"),$Io=l(),G1=a("li"),r2e=a("strong"),kIo=o("openai-gpt"),SIo=o(" \u2014 "),hz=a("a"),RIo=o("OpenAIGPTModel"),PIo=o(" (OpenAI GPT model)"),BIo=l(),O1=a("li"),t2e=a("strong"),IIo=o("opt"),NIo=o(" \u2014 "),uz=a("a"),qIo=o("OPTModel"),jIo=o(" (OPT model)"),DIo=l(),V1=a("li"),a2e=a("strong"),GIo=o("owlvit"),OIo=o(" \u2014 "),pz=a("a"),VIo=o("OwlViTModel"),XIo=o(" (OWL-ViT model)"),zIo=l(),X1=a("li"),n2e=a("strong"),QIo=o("pegasus"),WIo=o(" \u2014 "),_z=a("a"),UIo=o("PegasusModel"),HIo=o(" (Pegasus model)"),JIo=l(),z1=a("li"),s2e=a("strong"),YIo=o("pegasus_x"),ZIo=o(" \u2014 "),bz=a("a"),KIo=o("PegasusXModel"),eNo=o(" (PEGASUS-X model)"),oNo=l(),Q1=a("li"),l2e=a("strong"),rNo=o("perceiver"),tNo=o(" \u2014 "),vz=a("a"),aNo=o("PerceiverModel"),nNo=o(" (Perceiver model)"),sNo=l(),W1=a("li"),i2e=a("strong"),lNo=o("plbart"),iNo=o(" \u2014 "),Fz=a("a"),dNo=o("PLBartModel"),cNo=o(" (PLBart model)"),mNo=l(),U1=a("li"),d2e=a("strong"),fNo=o("poolformer"),gNo=o(" \u2014 "),Tz=a("a"),hNo=o("PoolFormerModel"),uNo=o(" (PoolFormer model)"),pNo=l(),H1=a("li"),c2e=a("strong"),_No=o("prophetnet"),bNo=o(" \u2014 "),Mz=a("a"),vNo=o("ProphetNetModel"),FNo=o(" (ProphetNet model)"),TNo=l(),J1=a("li"),m2e=a("strong"),MNo=o("qdqbert"),ENo=o(" \u2014 "),Ez=a("a"),CNo=o("QDQBertModel"),wNo=o(" (QDQBert model)"),ANo=l(),Y1=a("li"),f2e=a("strong"),LNo=o("reformer"),yNo=o(" \u2014 "),Cz=a("a"),xNo=o("ReformerModel"),$No=o(" (Reformer model)"),kNo=l(),Z1=a("li"),g2e=a("strong"),SNo=o("regnet"),RNo=o(" \u2014 "),wz=a("a"),PNo=o("RegNetModel"),BNo=o(" (RegNet model)"),INo=l(),K1=a("li"),h2e=a("strong"),NNo=o("rembert"),qNo=o(" \u2014 "),Az=a("a"),jNo=o("RemBertModel"),DNo=o(" (RemBERT model)"),GNo=l(),e2=a("li"),u2e=a("strong"),ONo=o("resnet"),VNo=o(" \u2014 "),Lz=a("a"),XNo=o("ResNetModel"),zNo=o(" (ResNet model)"),QNo=l(),o2=a("li"),p2e=a("strong"),WNo=o("retribert"),UNo=o(" \u2014 "),yz=a("a"),HNo=o("RetriBertModel"),JNo=o(" (RetriBERT model)"),YNo=l(),r2=a("li"),_2e=a("strong"),ZNo=o("roberta"),KNo=o(" \u2014 "),xz=a("a"),eqo=o("RobertaModel"),oqo=o(" (RoBERTa model)"),rqo=l(),t2=a("li"),b2e=a("strong"),tqo=o("roformer"),aqo=o(" \u2014 "),$z=a("a"),nqo=o("RoFormerModel"),sqo=o(" (RoFormer model)"),lqo=l(),a2=a("li"),v2e=a("strong"),iqo=o("segformer"),dqo=o(" \u2014 "),kz=a("a"),cqo=o("SegformerModel"),mqo=o(" (SegFormer model)"),fqo=l(),n2=a("li"),F2e=a("strong"),gqo=o("sew"),hqo=o(" \u2014 "),Sz=a("a"),uqo=o("SEWModel"),pqo=o(" (SEW model)"),_qo=l(),s2=a("li"),T2e=a("strong"),bqo=o("sew-d"),vqo=o(" \u2014 "),Rz=a("a"),Fqo=o("SEWDModel"),Tqo=o(" (SEW-D model)"),Mqo=l(),l2=a("li"),M2e=a("strong"),Eqo=o("speech_to_text"),Cqo=o(" \u2014 "),Pz=a("a"),wqo=o("Speech2TextModel"),Aqo=o(" (Speech2Text model)"),Lqo=l(),i2=a("li"),E2e=a("strong"),yqo=o("splinter"),xqo=o(" \u2014 "),Bz=a("a"),$qo=o("SplinterModel"),kqo=o(" (Splinter model)"),Sqo=l(),d2=a("li"),C2e=a("strong"),Rqo=o("squeezebert"),Pqo=o(" \u2014 "),Iz=a("a"),Bqo=o("SqueezeBertModel"),Iqo=o(" (SqueezeBERT model)"),Nqo=l(),c2=a("li"),w2e=a("strong"),qqo=o("swin"),jqo=o(" \u2014 "),Nz=a("a"),Dqo=o("SwinModel"),Gqo=o(" (Swin Transformer model)"),Oqo=l(),m2=a("li"),A2e=a("strong"),Vqo=o("swinv2"),Xqo=o(" \u2014 "),qz=a("a"),zqo=o("Swinv2Model"),Qqo=o(" (Swin Transformer V2 model)"),Wqo=l(),f2=a("li"),L2e=a("strong"),Uqo=o("t5"),Hqo=o(" \u2014 "),jz=a("a"),Jqo=o("T5Model"),Yqo=o(" (T5 model)"),Zqo=l(),g2=a("li"),y2e=a("strong"),Kqo=o("tapas"),ejo=o(" \u2014 "),Dz=a("a"),ojo=o("TapasModel"),rjo=o(" (TAPAS model)"),tjo=l(),h2=a("li"),x2e=a("strong"),ajo=o("time_series_transformer"),njo=o(" \u2014 "),Gz=a("a"),sjo=o("TimeSeriesTransformerModel"),ljo=o(" (Time Series Transformer model)"),ijo=l(),u2=a("li"),$2e=a("strong"),djo=o("trajectory_transformer"),cjo=o(" \u2014 "),Oz=a("a"),mjo=o("TrajectoryTransformerModel"),fjo=o(" (Trajectory Transformer model)"),gjo=l(),p2=a("li"),k2e=a("strong"),hjo=o("transfo-xl"),ujo=o(" \u2014 "),Vz=a("a"),pjo=o("TransfoXLModel"),_jo=o(" (Transformer-XL model)"),bjo=l(),_2=a("li"),S2e=a("strong"),vjo=o("unispeech"),Fjo=o(" \u2014 "),Xz=a("a"),Tjo=o("UniSpeechModel"),Mjo=o(" (UniSpeech model)"),Ejo=l(),b2=a("li"),R2e=a("strong"),Cjo=o("unispeech-sat"),wjo=o(" \u2014 "),zz=a("a"),Ajo=o("UniSpeechSatModel"),Ljo=o(" (UniSpeechSat model)"),yjo=l(),v2=a("li"),P2e=a("strong"),xjo=o("van"),$jo=o(" \u2014 "),Qz=a("a"),kjo=o("VanModel"),Sjo=o(" (VAN model)"),Rjo=l(),F2=a("li"),B2e=a("strong"),Pjo=o("videomae"),Bjo=o(" \u2014 "),Wz=a("a"),Ijo=o("VideoMAEModel"),Njo=o(" (VideoMAE model)"),qjo=l(),T2=a("li"),I2e=a("strong"),jjo=o("vilt"),Djo=o(" \u2014 "),Uz=a("a"),Gjo=o("ViltModel"),Ojo=o(" (ViLT model)"),Vjo=l(),M2=a("li"),N2e=a("strong"),Xjo=o("vision-text-dual-encoder"),zjo=o(" \u2014 "),Hz=a("a"),Qjo=o("VisionTextDualEncoderModel"),Wjo=o(" (VisionTextDualEncoder model)"),Ujo=l(),E2=a("li"),q2e=a("strong"),Hjo=o("visual_bert"),Jjo=o(" \u2014 "),Jz=a("a"),Yjo=o("VisualBertModel"),Zjo=o(" (VisualBERT model)"),Kjo=l(),C2=a("li"),j2e=a("strong"),eDo=o("vit"),oDo=o(" \u2014 "),Yz=a("a"),rDo=o("ViTModel"),tDo=o(" (ViT model)"),aDo=l(),w2=a("li"),D2e=a("strong"),nDo=o("vit_mae"),sDo=o(" \u2014 "),Zz=a("a"),lDo=o("ViTMAEModel"),iDo=o(" (ViTMAE model)"),dDo=l(),A2=a("li"),G2e=a("strong"),cDo=o("vit_msn"),mDo=o(" \u2014 "),Kz=a("a"),fDo=o("ViTMSNModel"),gDo=o(" (ViTMSN model)"),hDo=l(),L2=a("li"),O2e=a("strong"),uDo=o("wav2vec2"),pDo=o(" \u2014 "),eQ=a("a"),_Do=o("Wav2Vec2Model"),bDo=o(" (Wav2Vec2 model)"),vDo=l(),y2=a("li"),V2e=a("strong"),FDo=o("wav2vec2-conformer"),TDo=o(" \u2014 "),oQ=a("a"),MDo=o("Wav2Vec2ConformerModel"),EDo=o(" (Wav2Vec2-Conformer model)"),CDo=l(),x2=a("li"),X2e=a("strong"),wDo=o("wavlm"),ADo=o(" \u2014 "),rQ=a("a"),LDo=o("WavLMModel"),yDo=o(" (WavLM model)"),xDo=l(),$2=a("li"),z2e=a("strong"),$Do=o("whisper"),kDo=o(" \u2014 "),tQ=a("a"),SDo=o("WhisperModel"),RDo=o(" (Whisper model)"),PDo=l(),k2=a("li"),Q2e=a("strong"),BDo=o("xclip"),IDo=o(" \u2014 "),aQ=a("a"),NDo=o("XCLIPModel"),qDo=o(" (X-CLIP model)"),jDo=l(),S2=a("li"),W2e=a("strong"),DDo=o("xglm"),GDo=o(" \u2014 "),nQ=a("a"),ODo=o("XGLMModel"),VDo=o(" (XGLM model)"),XDo=l(),R2=a("li"),U2e=a("strong"),zDo=o("xlm"),QDo=o(" \u2014 "),sQ=a("a"),WDo=o("XLMModel"),UDo=o(" (XLM model)"),HDo=l(),P2=a("li"),H2e=a("strong"),JDo=o("xlm-prophetnet"),YDo=o(" \u2014 "),lQ=a("a"),ZDo=o("XLMProphetNetModel"),KDo=o(" (XLM-ProphetNet model)"),eGo=l(),B2=a("li"),J2e=a("strong"),oGo=o("xlm-roberta"),rGo=o(" \u2014 "),iQ=a("a"),tGo=o("XLMRobertaModel"),aGo=o(" (XLM-RoBERTa model)"),nGo=l(),I2=a("li"),Y2e=a("strong"),sGo=o("xlm-roberta-xl"),lGo=o(" \u2014 "),dQ=a("a"),iGo=o("XLMRobertaXLModel"),dGo=o(" (XLM-RoBERTa-XL model)"),cGo=l(),N2=a("li"),Z2e=a("strong"),mGo=o("xlnet"),fGo=o(" \u2014 "),cQ=a("a"),gGo=o("XLNetModel"),hGo=o(" (XLNet model)"),uGo=l(),q2=a("li"),K2e=a("strong"),pGo=o("yolos"),_Go=o(" \u2014 "),mQ=a("a"),bGo=o("YolosModel"),vGo=o(" (YOLOS model)"),FGo=l(),j2=a("li"),ebe=a("strong"),TGo=o("yoso"),MGo=o(" \u2014 "),fQ=a("a"),EGo=o("YosoModel"),CGo=o(" (YOSO model)"),wGo=l(),D2=a("p"),AGo=o("The model is set in evaluation mode by default using "),obe=a("code"),LGo=o("model.eval()"),yGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rbe=a("code"),xGo=o("model.train()"),$Go=l(),F(G2.$$.fragment),cro=l(),Ld=a("h2"),O2=a("a"),tbe=a("span"),F(g$.$$.fragment),kGo=l(),abe=a("span"),SGo=o("AutoModelForPreTraining"),mro=l(),Io=a("div"),F(h$.$$.fragment),RGo=l(),yd=a("p"),PGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gQ=a("a"),BGo=o("from_pretrained()"),IGo=o(" class method or the "),hQ=a("a"),NGo=o("from_config()"),qGo=o(` class
method.`),jGo=l(),u$=a("p"),DGo=o("This class cannot be instantiated directly using "),nbe=a("code"),GGo=o("__init__()"),OGo=o(" (throws an error)."),VGo=l(),Ft=a("div"),F(p$.$$.fragment),XGo=l(),sbe=a("p"),zGo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),QGo=l(),xd=a("p"),WGo=o(`Note:
Loading a model from its configuration file does `),lbe=a("strong"),UGo=o("not"),HGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=a("a"),JGo=o("from_pretrained()"),YGo=o(" to load the model weights."),ZGo=l(),F(V2.$$.fragment),KGo=l(),eo=a("div"),F(_$.$$.fragment),eOo=l(),ibe=a("p"),oOo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rOo=l(),on=a("p"),tOo=o("The model class to instantiate is selected based on the "),dbe=a("code"),aOo=o("model_type"),nOo=o(` property of the config object (either
passed as an argument or loaded from `),cbe=a("code"),sOo=o("pretrained_model_name_or_path"),lOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mbe=a("code"),iOo=o("pretrained_model_name_or_path"),dOo=o(":"),cOo=l(),G=a("ul"),X2=a("li"),fbe=a("strong"),mOo=o("albert"),fOo=o(" \u2014 "),pQ=a("a"),gOo=o("AlbertForPreTraining"),hOo=o(" (ALBERT model)"),uOo=l(),z2=a("li"),gbe=a("strong"),pOo=o("bart"),_Oo=o(" \u2014 "),_Q=a("a"),bOo=o("BartForConditionalGeneration"),vOo=o(" (BART model)"),FOo=l(),Q2=a("li"),hbe=a("strong"),TOo=o("bert"),MOo=o(" \u2014 "),bQ=a("a"),EOo=o("BertForPreTraining"),COo=o(" (BERT model)"),wOo=l(),W2=a("li"),ube=a("strong"),AOo=o("big_bird"),LOo=o(" \u2014 "),vQ=a("a"),yOo=o("BigBirdForPreTraining"),xOo=o(" (BigBird model)"),$Oo=l(),U2=a("li"),pbe=a("strong"),kOo=o("bloom"),SOo=o(" \u2014 "),FQ=a("a"),ROo=o("BloomForCausalLM"),POo=o(" (BLOOM model)"),BOo=l(),H2=a("li"),_be=a("strong"),IOo=o("camembert"),NOo=o(" \u2014 "),TQ=a("a"),qOo=o("CamembertForMaskedLM"),jOo=o(" (CamemBERT model)"),DOo=l(),J2=a("li"),bbe=a("strong"),GOo=o("ctrl"),OOo=o(" \u2014 "),MQ=a("a"),VOo=o("CTRLLMHeadModel"),XOo=o(" (CTRL model)"),zOo=l(),Y2=a("li"),vbe=a("strong"),QOo=o("data2vec-text"),WOo=o(" \u2014 "),EQ=a("a"),UOo=o("Data2VecTextForMaskedLM"),HOo=o(" (Data2VecText model)"),JOo=l(),Z2=a("li"),Fbe=a("strong"),YOo=o("deberta"),ZOo=o(" \u2014 "),CQ=a("a"),KOo=o("DebertaForMaskedLM"),eVo=o(" (DeBERTa model)"),oVo=l(),K2=a("li"),Tbe=a("strong"),rVo=o("deberta-v2"),tVo=o(" \u2014 "),wQ=a("a"),aVo=o("DebertaV2ForMaskedLM"),nVo=o(" (DeBERTa-v2 model)"),sVo=l(),eb=a("li"),Mbe=a("strong"),lVo=o("distilbert"),iVo=o(" \u2014 "),AQ=a("a"),dVo=o("DistilBertForMaskedLM"),cVo=o(" (DistilBERT model)"),mVo=l(),ob=a("li"),Ebe=a("strong"),fVo=o("electra"),gVo=o(" \u2014 "),LQ=a("a"),hVo=o("ElectraForPreTraining"),uVo=o(" (ELECTRA model)"),pVo=l(),rb=a("li"),Cbe=a("strong"),_Vo=o("ernie"),bVo=o(" \u2014 "),yQ=a("a"),vVo=o("ErnieForPreTraining"),FVo=o(" (ERNIE model)"),TVo=l(),tb=a("li"),wbe=a("strong"),MVo=o("flaubert"),EVo=o(" \u2014 "),xQ=a("a"),CVo=o("FlaubertWithLMHeadModel"),wVo=o(" (FlauBERT model)"),AVo=l(),ab=a("li"),Abe=a("strong"),LVo=o("flava"),yVo=o(" \u2014 "),$Q=a("a"),xVo=o("FlavaForPreTraining"),$Vo=o(" (FLAVA model)"),kVo=l(),nb=a("li"),Lbe=a("strong"),SVo=o("fnet"),RVo=o(" \u2014 "),kQ=a("a"),PVo=o("FNetForPreTraining"),BVo=o(" (FNet model)"),IVo=l(),sb=a("li"),ybe=a("strong"),NVo=o("fsmt"),qVo=o(" \u2014 "),SQ=a("a"),jVo=o("FSMTForConditionalGeneration"),DVo=o(" (FairSeq Machine-Translation model)"),GVo=l(),lb=a("li"),xbe=a("strong"),OVo=o("funnel"),VVo=o(" \u2014 "),RQ=a("a"),XVo=o("FunnelForPreTraining"),zVo=o(" (Funnel Transformer model)"),QVo=l(),ib=a("li"),$be=a("strong"),WVo=o("gpt2"),UVo=o(" \u2014 "),PQ=a("a"),HVo=o("GPT2LMHeadModel"),JVo=o(" (OpenAI GPT-2 model)"),YVo=l(),db=a("li"),kbe=a("strong"),ZVo=o("ibert"),KVo=o(" \u2014 "),BQ=a("a"),eXo=o("IBertForMaskedLM"),oXo=o(" (I-BERT model)"),rXo=l(),cb=a("li"),Sbe=a("strong"),tXo=o("layoutlm"),aXo=o(" \u2014 "),IQ=a("a"),nXo=o("LayoutLMForMaskedLM"),sXo=o(" (LayoutLM model)"),lXo=l(),mb=a("li"),Rbe=a("strong"),iXo=o("longformer"),dXo=o(" \u2014 "),NQ=a("a"),cXo=o("LongformerForMaskedLM"),mXo=o(" (Longformer model)"),fXo=l(),fb=a("li"),Pbe=a("strong"),gXo=o("luke"),hXo=o(" \u2014 "),qQ=a("a"),uXo=o("LukeForMaskedLM"),pXo=o(" (LUKE model)"),_Xo=l(),gb=a("li"),Bbe=a("strong"),bXo=o("lxmert"),vXo=o(" \u2014 "),jQ=a("a"),FXo=o("LxmertForPreTraining"),TXo=o(" (LXMERT model)"),MXo=l(),hb=a("li"),Ibe=a("strong"),EXo=o("megatron-bert"),CXo=o(" \u2014 "),DQ=a("a"),wXo=o("MegatronBertForPreTraining"),AXo=o(" (Megatron-BERT model)"),LXo=l(),ub=a("li"),Nbe=a("strong"),yXo=o("mobilebert"),xXo=o(" \u2014 "),GQ=a("a"),$Xo=o("MobileBertForPreTraining"),kXo=o(" (MobileBERT model)"),SXo=l(),pb=a("li"),qbe=a("strong"),RXo=o("mpnet"),PXo=o(" \u2014 "),OQ=a("a"),BXo=o("MPNetForMaskedLM"),IXo=o(" (MPNet model)"),NXo=l(),_b=a("li"),jbe=a("strong"),qXo=o("mvp"),jXo=o(" \u2014 "),VQ=a("a"),DXo=o("MvpForConditionalGeneration"),GXo=o(" (MVP model)"),OXo=l(),bb=a("li"),Dbe=a("strong"),VXo=o("nezha"),XXo=o(" \u2014 "),XQ=a("a"),zXo=o("NezhaForPreTraining"),QXo=o(" (Nezha model)"),WXo=l(),vb=a("li"),Gbe=a("strong"),UXo=o("openai-gpt"),HXo=o(" \u2014 "),zQ=a("a"),JXo=o("OpenAIGPTLMHeadModel"),YXo=o(" (OpenAI GPT model)"),ZXo=l(),Fb=a("li"),Obe=a("strong"),KXo=o("retribert"),ezo=o(" \u2014 "),QQ=a("a"),ozo=o("RetriBertModel"),rzo=o(" (RetriBERT model)"),tzo=l(),Tb=a("li"),Vbe=a("strong"),azo=o("roberta"),nzo=o(" \u2014 "),WQ=a("a"),szo=o("RobertaForMaskedLM"),lzo=o(" (RoBERTa model)"),izo=l(),Mb=a("li"),Xbe=a("strong"),dzo=o("splinter"),czo=o(" \u2014 "),UQ=a("a"),mzo=o("SplinterForPreTraining"),fzo=o(" (Splinter model)"),gzo=l(),Eb=a("li"),zbe=a("strong"),hzo=o("squeezebert"),uzo=o(" \u2014 "),HQ=a("a"),pzo=o("SqueezeBertForMaskedLM"),_zo=o(" (SqueezeBERT model)"),bzo=l(),Cb=a("li"),Qbe=a("strong"),vzo=o("t5"),Fzo=o(" \u2014 "),JQ=a("a"),Tzo=o("T5ForConditionalGeneration"),Mzo=o(" (T5 model)"),Ezo=l(),wb=a("li"),Wbe=a("strong"),Czo=o("tapas"),wzo=o(" \u2014 "),YQ=a("a"),Azo=o("TapasForMaskedLM"),Lzo=o(" (TAPAS model)"),yzo=l(),Ab=a("li"),Ube=a("strong"),xzo=o("transfo-xl"),$zo=o(" \u2014 "),ZQ=a("a"),kzo=o("TransfoXLLMHeadModel"),Szo=o(" (Transformer-XL model)"),Rzo=l(),Lb=a("li"),Hbe=a("strong"),Pzo=o("unispeech"),Bzo=o(" \u2014 "),KQ=a("a"),Izo=o("UniSpeechForPreTraining"),Nzo=o(" (UniSpeech model)"),qzo=l(),yb=a("li"),Jbe=a("strong"),jzo=o("unispeech-sat"),Dzo=o(" \u2014 "),eW=a("a"),Gzo=o("UniSpeechSatForPreTraining"),Ozo=o(" (UniSpeechSat model)"),Vzo=l(),xb=a("li"),Ybe=a("strong"),Xzo=o("videomae"),zzo=o(" \u2014 "),oW=a("a"),Qzo=o("VideoMAEForPreTraining"),Wzo=o(" (VideoMAE model)"),Uzo=l(),$b=a("li"),Zbe=a("strong"),Hzo=o("visual_bert"),Jzo=o(" \u2014 "),rW=a("a"),Yzo=o("VisualBertForPreTraining"),Zzo=o(" (VisualBERT model)"),Kzo=l(),kb=a("li"),Kbe=a("strong"),eQo=o("vit_mae"),oQo=o(" \u2014 "),tW=a("a"),rQo=o("ViTMAEForPreTraining"),tQo=o(" (ViTMAE model)"),aQo=l(),Sb=a("li"),eve=a("strong"),nQo=o("wav2vec2"),sQo=o(" \u2014 "),aW=a("a"),lQo=o("Wav2Vec2ForPreTraining"),iQo=o(" (Wav2Vec2 model)"),dQo=l(),Rb=a("li"),ove=a("strong"),cQo=o("wav2vec2-conformer"),mQo=o(" \u2014 "),nW=a("a"),fQo=o("Wav2Vec2ConformerForPreTraining"),gQo=o(" (Wav2Vec2-Conformer model)"),hQo=l(),Pb=a("li"),rve=a("strong"),uQo=o("xlm"),pQo=o(" \u2014 "),sW=a("a"),_Qo=o("XLMWithLMHeadModel"),bQo=o(" (XLM model)"),vQo=l(),Bb=a("li"),tve=a("strong"),FQo=o("xlm-roberta"),TQo=o(" \u2014 "),lW=a("a"),MQo=o("XLMRobertaForMaskedLM"),EQo=o(" (XLM-RoBERTa model)"),CQo=l(),Ib=a("li"),ave=a("strong"),wQo=o("xlm-roberta-xl"),AQo=o(" \u2014 "),iW=a("a"),LQo=o("XLMRobertaXLForMaskedLM"),yQo=o(" (XLM-RoBERTa-XL model)"),xQo=l(),Nb=a("li"),nve=a("strong"),$Qo=o("xlnet"),kQo=o(" \u2014 "),dW=a("a"),SQo=o("XLNetLMHeadModel"),RQo=o(" (XLNet model)"),PQo=l(),qb=a("p"),BQo=o("The model is set in evaluation mode by default using "),sve=a("code"),IQo=o("model.eval()"),NQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lve=a("code"),qQo=o("model.train()"),jQo=l(),F(jb.$$.fragment),fro=l(),$d=a("h2"),Db=a("a"),ive=a("span"),F(b$.$$.fragment),DQo=l(),dve=a("span"),GQo=o("AutoModelForCausalLM"),gro=l(),No=a("div"),F(v$.$$.fragment),OQo=l(),kd=a("p"),VQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),cW=a("a"),XQo=o("from_pretrained()"),zQo=o(" class method or the "),mW=a("a"),QQo=o("from_config()"),WQo=o(` class
method.`),UQo=l(),F$=a("p"),HQo=o("This class cannot be instantiated directly using "),cve=a("code"),JQo=o("__init__()"),YQo=o(" (throws an error)."),ZQo=l(),Tt=a("div"),F(T$.$$.fragment),KQo=l(),mve=a("p"),eWo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),oWo=l(),Sd=a("p"),rWo=o(`Note:
Loading a model from its configuration file does `),fve=a("strong"),tWo=o("not"),aWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=a("a"),nWo=o("from_pretrained()"),sWo=o(" to load the model weights."),lWo=l(),F(Gb.$$.fragment),iWo=l(),oo=a("div"),F(M$.$$.fragment),dWo=l(),gve=a("p"),cWo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mWo=l(),rn=a("p"),fWo=o("The model class to instantiate is selected based on the "),hve=a("code"),gWo=o("model_type"),hWo=o(` property of the config object (either
passed as an argument or loaded from `),uve=a("code"),uWo=o("pretrained_model_name_or_path"),pWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pve=a("code"),_Wo=o("pretrained_model_name_or_path"),bWo=o(":"),vWo=l(),Q=a("ul"),Ob=a("li"),_ve=a("strong"),FWo=o("bart"),TWo=o(" \u2014 "),gW=a("a"),MWo=o("BartForCausalLM"),EWo=o(" (BART model)"),CWo=l(),Vb=a("li"),bve=a("strong"),wWo=o("bert"),AWo=o(" \u2014 "),hW=a("a"),LWo=o("BertLMHeadModel"),yWo=o(" (BERT model)"),xWo=l(),Xb=a("li"),vve=a("strong"),$Wo=o("bert-generation"),kWo=o(" \u2014 "),uW=a("a"),SWo=o("BertGenerationDecoder"),RWo=o(" (Bert Generation model)"),PWo=l(),zb=a("li"),Fve=a("strong"),BWo=o("big_bird"),IWo=o(" \u2014 "),pW=a("a"),NWo=o("BigBirdForCausalLM"),qWo=o(" (BigBird model)"),jWo=l(),Qb=a("li"),Tve=a("strong"),DWo=o("bigbird_pegasus"),GWo=o(" \u2014 "),_W=a("a"),OWo=o("BigBirdPegasusForCausalLM"),VWo=o(" (BigBird-Pegasus model)"),XWo=l(),Wb=a("li"),Mve=a("strong"),zWo=o("blenderbot"),QWo=o(" \u2014 "),bW=a("a"),WWo=o("BlenderbotForCausalLM"),UWo=o(" (Blenderbot model)"),HWo=l(),Ub=a("li"),Eve=a("strong"),JWo=o("blenderbot-small"),YWo=o(" \u2014 "),vW=a("a"),ZWo=o("BlenderbotSmallForCausalLM"),KWo=o(" (BlenderbotSmall model)"),eUo=l(),Hb=a("li"),Cve=a("strong"),oUo=o("bloom"),rUo=o(" \u2014 "),FW=a("a"),tUo=o("BloomForCausalLM"),aUo=o(" (BLOOM model)"),nUo=l(),Jb=a("li"),wve=a("strong"),sUo=o("camembert"),lUo=o(" \u2014 "),TW=a("a"),iUo=o("CamembertForCausalLM"),dUo=o(" (CamemBERT model)"),cUo=l(),Yb=a("li"),Ave=a("strong"),mUo=o("codegen"),fUo=o(" \u2014 "),MW=a("a"),gUo=o("CodeGenForCausalLM"),hUo=o(" (CodeGen model)"),uUo=l(),Zb=a("li"),Lve=a("strong"),pUo=o("ctrl"),_Uo=o(" \u2014 "),EW=a("a"),bUo=o("CTRLLMHeadModel"),vUo=o(" (CTRL model)"),FUo=l(),Kb=a("li"),yve=a("strong"),TUo=o("data2vec-text"),MUo=o(" \u2014 "),CW=a("a"),EUo=o("Data2VecTextForCausalLM"),CUo=o(" (Data2VecText model)"),wUo=l(),ev=a("li"),xve=a("strong"),AUo=o("electra"),LUo=o(" \u2014 "),wW=a("a"),yUo=o("ElectraForCausalLM"),xUo=o(" (ELECTRA model)"),$Uo=l(),ov=a("li"),$ve=a("strong"),kUo=o("ernie"),SUo=o(" \u2014 "),AW=a("a"),RUo=o("ErnieForCausalLM"),PUo=o(" (ERNIE model)"),BUo=l(),rv=a("li"),kve=a("strong"),IUo=o("gpt2"),NUo=o(" \u2014 "),LW=a("a"),qUo=o("GPT2LMHeadModel"),jUo=o(" (OpenAI GPT-2 model)"),DUo=l(),tv=a("li"),Sve=a("strong"),GUo=o("gpt_neo"),OUo=o(" \u2014 "),yW=a("a"),VUo=o("GPTNeoForCausalLM"),XUo=o(" (GPT Neo model)"),zUo=l(),av=a("li"),Rve=a("strong"),QUo=o("gpt_neox"),WUo=o(" \u2014 "),xW=a("a"),UUo=o("GPTNeoXForCausalLM"),HUo=o(" (GPT NeoX model)"),JUo=l(),nv=a("li"),Pve=a("strong"),YUo=o("gpt_neox_japanese"),ZUo=o(" \u2014 "),$W=a("a"),KUo=o("GPTNeoXJapaneseForCausalLM"),eHo=o(" (GPT NeoX Japanese model)"),oHo=l(),sv=a("li"),Bve=a("strong"),rHo=o("gptj"),tHo=o(" \u2014 "),kW=a("a"),aHo=o("GPTJForCausalLM"),nHo=o(" (GPT-J model)"),sHo=l(),lv=a("li"),Ive=a("strong"),lHo=o("marian"),iHo=o(" \u2014 "),SW=a("a"),dHo=o("MarianForCausalLM"),cHo=o(" (Marian model)"),mHo=l(),iv=a("li"),Nve=a("strong"),fHo=o("mbart"),gHo=o(" \u2014 "),RW=a("a"),hHo=o("MBartForCausalLM"),uHo=o(" (mBART model)"),pHo=l(),dv=a("li"),qve=a("strong"),_Ho=o("megatron-bert"),bHo=o(" \u2014 "),PW=a("a"),vHo=o("MegatronBertForCausalLM"),FHo=o(" (Megatron-BERT model)"),THo=l(),cv=a("li"),jve=a("strong"),MHo=o("mvp"),EHo=o(" \u2014 "),BW=a("a"),CHo=o("MvpForCausalLM"),wHo=o(" (MVP model)"),AHo=l(),mv=a("li"),Dve=a("strong"),LHo=o("openai-gpt"),yHo=o(" \u2014 "),IW=a("a"),xHo=o("OpenAIGPTLMHeadModel"),$Ho=o(" (OpenAI GPT model)"),kHo=l(),fv=a("li"),Gve=a("strong"),SHo=o("opt"),RHo=o(" \u2014 "),NW=a("a"),PHo=o("OPTForCausalLM"),BHo=o(" (OPT model)"),IHo=l(),gv=a("li"),Ove=a("strong"),NHo=o("pegasus"),qHo=o(" \u2014 "),qW=a("a"),jHo=o("PegasusForCausalLM"),DHo=o(" (Pegasus model)"),GHo=l(),hv=a("li"),Vve=a("strong"),OHo=o("plbart"),VHo=o(" \u2014 "),jW=a("a"),XHo=o("PLBartForCausalLM"),zHo=o(" (PLBart model)"),QHo=l(),uv=a("li"),Xve=a("strong"),WHo=o("prophetnet"),UHo=o(" \u2014 "),DW=a("a"),HHo=o("ProphetNetForCausalLM"),JHo=o(" (ProphetNet model)"),YHo=l(),pv=a("li"),zve=a("strong"),ZHo=o("qdqbert"),KHo=o(" \u2014 "),GW=a("a"),eJo=o("QDQBertLMHeadModel"),oJo=o(" (QDQBert model)"),rJo=l(),_v=a("li"),Qve=a("strong"),tJo=o("reformer"),aJo=o(" \u2014 "),OW=a("a"),nJo=o("ReformerModelWithLMHead"),sJo=o(" (Reformer model)"),lJo=l(),bv=a("li"),Wve=a("strong"),iJo=o("rembert"),dJo=o(" \u2014 "),VW=a("a"),cJo=o("RemBertForCausalLM"),mJo=o(" (RemBERT model)"),fJo=l(),vv=a("li"),Uve=a("strong"),gJo=o("roberta"),hJo=o(" \u2014 "),XW=a("a"),uJo=o("RobertaForCausalLM"),pJo=o(" (RoBERTa model)"),_Jo=l(),Fv=a("li"),Hve=a("strong"),bJo=o("roformer"),vJo=o(" \u2014 "),zW=a("a"),FJo=o("RoFormerForCausalLM"),TJo=o(" (RoFormer model)"),MJo=l(),Tv=a("li"),Jve=a("strong"),EJo=o("speech_to_text_2"),CJo=o(" \u2014 "),QW=a("a"),wJo=o("Speech2Text2ForCausalLM"),AJo=o(" (Speech2Text2 model)"),LJo=l(),Mv=a("li"),Yve=a("strong"),yJo=o("transfo-xl"),xJo=o(" \u2014 "),WW=a("a"),$Jo=o("TransfoXLLMHeadModel"),kJo=o(" (Transformer-XL model)"),SJo=l(),Ev=a("li"),Zve=a("strong"),RJo=o("trocr"),PJo=o(" \u2014 "),UW=a("a"),BJo=o("TrOCRForCausalLM"),IJo=o(" (TrOCR model)"),NJo=l(),Cv=a("li"),Kve=a("strong"),qJo=o("xglm"),jJo=o(" \u2014 "),HW=a("a"),DJo=o("XGLMForCausalLM"),GJo=o(" (XGLM model)"),OJo=l(),wv=a("li"),eFe=a("strong"),VJo=o("xlm"),XJo=o(" \u2014 "),JW=a("a"),zJo=o("XLMWithLMHeadModel"),QJo=o(" (XLM model)"),WJo=l(),Av=a("li"),oFe=a("strong"),UJo=o("xlm-prophetnet"),HJo=o(" \u2014 "),YW=a("a"),JJo=o("XLMProphetNetForCausalLM"),YJo=o(" (XLM-ProphetNet model)"),ZJo=l(),Lv=a("li"),rFe=a("strong"),KJo=o("xlm-roberta"),eYo=o(" \u2014 "),ZW=a("a"),oYo=o("XLMRobertaForCausalLM"),rYo=o(" (XLM-RoBERTa model)"),tYo=l(),yv=a("li"),tFe=a("strong"),aYo=o("xlm-roberta-xl"),nYo=o(" \u2014 "),KW=a("a"),sYo=o("XLMRobertaXLForCausalLM"),lYo=o(" (XLM-RoBERTa-XL model)"),iYo=l(),xv=a("li"),aFe=a("strong"),dYo=o("xlnet"),cYo=o(" \u2014 "),eU=a("a"),mYo=o("XLNetLMHeadModel"),fYo=o(" (XLNet model)"),gYo=l(),$v=a("p"),hYo=o("The model is set in evaluation mode by default using "),nFe=a("code"),uYo=o("model.eval()"),pYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sFe=a("code"),_Yo=o("model.train()"),bYo=l(),F(kv.$$.fragment),hro=l(),Rd=a("h2"),Sv=a("a"),lFe=a("span"),F(E$.$$.fragment),vYo=l(),iFe=a("span"),FYo=o("AutoModelForMaskedLM"),uro=l(),qo=a("div"),F(C$.$$.fragment),TYo=l(),Pd=a("p"),MYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),oU=a("a"),EYo=o("from_pretrained()"),CYo=o(" class method or the "),rU=a("a"),wYo=o("from_config()"),AYo=o(` class
method.`),LYo=l(),w$=a("p"),yYo=o("This class cannot be instantiated directly using "),dFe=a("code"),xYo=o("__init__()"),$Yo=o(" (throws an error)."),kYo=l(),Mt=a("div"),F(A$.$$.fragment),SYo=l(),cFe=a("p"),RYo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),PYo=l(),Bd=a("p"),BYo=o(`Note:
Loading a model from its configuration file does `),mFe=a("strong"),IYo=o("not"),NYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=a("a"),qYo=o("from_pretrained()"),jYo=o(" to load the model weights."),DYo=l(),F(Rv.$$.fragment),GYo=l(),ro=a("div"),F(L$.$$.fragment),OYo=l(),fFe=a("p"),VYo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),XYo=l(),tn=a("p"),zYo=o("The model class to instantiate is selected based on the "),gFe=a("code"),QYo=o("model_type"),WYo=o(` property of the config object (either
passed as an argument or loaded from `),hFe=a("code"),UYo=o("pretrained_model_name_or_path"),HYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uFe=a("code"),JYo=o("pretrained_model_name_or_path"),YYo=o(":"),ZYo=l(),Y=a("ul"),Pv=a("li"),pFe=a("strong"),KYo=o("albert"),eZo=o(" \u2014 "),aU=a("a"),oZo=o("AlbertForMaskedLM"),rZo=o(" (ALBERT model)"),tZo=l(),Bv=a("li"),_Fe=a("strong"),aZo=o("bart"),nZo=o(" \u2014 "),nU=a("a"),sZo=o("BartForConditionalGeneration"),lZo=o(" (BART model)"),iZo=l(),Iv=a("li"),bFe=a("strong"),dZo=o("bert"),cZo=o(" \u2014 "),sU=a("a"),mZo=o("BertForMaskedLM"),fZo=o(" (BERT model)"),gZo=l(),Nv=a("li"),vFe=a("strong"),hZo=o("big_bird"),uZo=o(" \u2014 "),lU=a("a"),pZo=o("BigBirdForMaskedLM"),_Zo=o(" (BigBird model)"),bZo=l(),qv=a("li"),FFe=a("strong"),vZo=o("camembert"),FZo=o(" \u2014 "),iU=a("a"),TZo=o("CamembertForMaskedLM"),MZo=o(" (CamemBERT model)"),EZo=l(),jv=a("li"),TFe=a("strong"),CZo=o("convbert"),wZo=o(" \u2014 "),dU=a("a"),AZo=o("ConvBertForMaskedLM"),LZo=o(" (ConvBERT model)"),yZo=l(),Dv=a("li"),MFe=a("strong"),xZo=o("data2vec-text"),$Zo=o(" \u2014 "),cU=a("a"),kZo=o("Data2VecTextForMaskedLM"),SZo=o(" (Data2VecText model)"),RZo=l(),Gv=a("li"),EFe=a("strong"),PZo=o("deberta"),BZo=o(" \u2014 "),mU=a("a"),IZo=o("DebertaForMaskedLM"),NZo=o(" (DeBERTa model)"),qZo=l(),Ov=a("li"),CFe=a("strong"),jZo=o("deberta-v2"),DZo=o(" \u2014 "),fU=a("a"),GZo=o("DebertaV2ForMaskedLM"),OZo=o(" (DeBERTa-v2 model)"),VZo=l(),Vv=a("li"),wFe=a("strong"),XZo=o("distilbert"),zZo=o(" \u2014 "),gU=a("a"),QZo=o("DistilBertForMaskedLM"),WZo=o(" (DistilBERT model)"),UZo=l(),Xv=a("li"),AFe=a("strong"),HZo=o("electra"),JZo=o(" \u2014 "),hU=a("a"),YZo=o("ElectraForMaskedLM"),ZZo=o(" (ELECTRA model)"),KZo=l(),zv=a("li"),LFe=a("strong"),eKo=o("ernie"),oKo=o(" \u2014 "),uU=a("a"),rKo=o("ErnieForMaskedLM"),tKo=o(" (ERNIE model)"),aKo=l(),Qv=a("li"),yFe=a("strong"),nKo=o("flaubert"),sKo=o(" \u2014 "),pU=a("a"),lKo=o("FlaubertWithLMHeadModel"),iKo=o(" (FlauBERT model)"),dKo=l(),Wv=a("li"),xFe=a("strong"),cKo=o("fnet"),mKo=o(" \u2014 "),_U=a("a"),fKo=o("FNetForMaskedLM"),gKo=o(" (FNet model)"),hKo=l(),Uv=a("li"),$Fe=a("strong"),uKo=o("funnel"),pKo=o(" \u2014 "),bU=a("a"),_Ko=o("FunnelForMaskedLM"),bKo=o(" (Funnel Transformer model)"),vKo=l(),Hv=a("li"),kFe=a("strong"),FKo=o("ibert"),TKo=o(" \u2014 "),vU=a("a"),MKo=o("IBertForMaskedLM"),EKo=o(" (I-BERT model)"),CKo=l(),Jv=a("li"),SFe=a("strong"),wKo=o("layoutlm"),AKo=o(" \u2014 "),FU=a("a"),LKo=o("LayoutLMForMaskedLM"),yKo=o(" (LayoutLM model)"),xKo=l(),Yv=a("li"),RFe=a("strong"),$Ko=o("longformer"),kKo=o(" \u2014 "),TU=a("a"),SKo=o("LongformerForMaskedLM"),RKo=o(" (Longformer model)"),PKo=l(),Zv=a("li"),PFe=a("strong"),BKo=o("luke"),IKo=o(" \u2014 "),MU=a("a"),NKo=o("LukeForMaskedLM"),qKo=o(" (LUKE model)"),jKo=l(),Kv=a("li"),BFe=a("strong"),DKo=o("mbart"),GKo=o(" \u2014 "),EU=a("a"),OKo=o("MBartForConditionalGeneration"),VKo=o(" (mBART model)"),XKo=l(),eF=a("li"),IFe=a("strong"),zKo=o("megatron-bert"),QKo=o(" \u2014 "),CU=a("a"),WKo=o("MegatronBertForMaskedLM"),UKo=o(" (Megatron-BERT model)"),HKo=l(),oF=a("li"),NFe=a("strong"),JKo=o("mobilebert"),YKo=o(" \u2014 "),wU=a("a"),ZKo=o("MobileBertForMaskedLM"),KKo=o(" (MobileBERT model)"),eer=l(),rF=a("li"),qFe=a("strong"),oer=o("mpnet"),rer=o(" \u2014 "),AU=a("a"),ter=o("MPNetForMaskedLM"),aer=o(" (MPNet model)"),ner=l(),tF=a("li"),jFe=a("strong"),ser=o("mvp"),ler=o(" \u2014 "),LU=a("a"),ier=o("MvpForConditionalGeneration"),der=o(" (MVP model)"),cer=l(),aF=a("li"),DFe=a("strong"),mer=o("nezha"),fer=o(" \u2014 "),yU=a("a"),ger=o("NezhaForMaskedLM"),her=o(" (Nezha model)"),uer=l(),nF=a("li"),GFe=a("strong"),per=o("nystromformer"),_er=o(" \u2014 "),xU=a("a"),ber=o("NystromformerForMaskedLM"),ver=o(" (Nystr\xF6mformer model)"),Fer=l(),sF=a("li"),OFe=a("strong"),Ter=o("perceiver"),Mer=o(" \u2014 "),$U=a("a"),Eer=o("PerceiverForMaskedLM"),Cer=o(" (Perceiver model)"),wer=l(),lF=a("li"),VFe=a("strong"),Aer=o("qdqbert"),Ler=o(" \u2014 "),kU=a("a"),yer=o("QDQBertForMaskedLM"),xer=o(" (QDQBert model)"),$er=l(),iF=a("li"),XFe=a("strong"),ker=o("reformer"),Ser=o(" \u2014 "),SU=a("a"),Rer=o("ReformerForMaskedLM"),Per=o(" (Reformer model)"),Ber=l(),dF=a("li"),zFe=a("strong"),Ier=o("rembert"),Ner=o(" \u2014 "),RU=a("a"),qer=o("RemBertForMaskedLM"),jer=o(" (RemBERT model)"),Der=l(),cF=a("li"),QFe=a("strong"),Ger=o("roberta"),Oer=o(" \u2014 "),PU=a("a"),Ver=o("RobertaForMaskedLM"),Xer=o(" (RoBERTa model)"),zer=l(),mF=a("li"),WFe=a("strong"),Qer=o("roformer"),Wer=o(" \u2014 "),BU=a("a"),Uer=o("RoFormerForMaskedLM"),Her=o(" (RoFormer model)"),Jer=l(),fF=a("li"),UFe=a("strong"),Yer=o("squeezebert"),Zer=o(" \u2014 "),IU=a("a"),Ker=o("SqueezeBertForMaskedLM"),eor=o(" (SqueezeBERT model)"),oor=l(),gF=a("li"),HFe=a("strong"),ror=o("tapas"),tor=o(" \u2014 "),NU=a("a"),aor=o("TapasForMaskedLM"),nor=o(" (TAPAS model)"),sor=l(),hF=a("li"),JFe=a("strong"),lor=o("wav2vec2"),ior=o(" \u2014 "),YFe=a("code"),dor=o("Wav2Vec2ForMaskedLM"),cor=o(" (Wav2Vec2 model)"),mor=l(),uF=a("li"),ZFe=a("strong"),gor=o("xlm"),hor=o(" \u2014 "),qU=a("a"),uor=o("XLMWithLMHeadModel"),por=o(" (XLM model)"),_or=l(),pF=a("li"),KFe=a("strong"),bor=o("xlm-roberta"),vor=o(" \u2014 "),jU=a("a"),For=o("XLMRobertaForMaskedLM"),Tor=o(" (XLM-RoBERTa model)"),Mor=l(),_F=a("li"),eTe=a("strong"),Eor=o("xlm-roberta-xl"),Cor=o(" \u2014 "),DU=a("a"),wor=o("XLMRobertaXLForMaskedLM"),Aor=o(" (XLM-RoBERTa-XL model)"),Lor=l(),bF=a("li"),oTe=a("strong"),yor=o("yoso"),xor=o(" \u2014 "),GU=a("a"),$or=o("YosoForMaskedLM"),kor=o(" (YOSO model)"),Sor=l(),vF=a("p"),Ror=o("The model is set in evaluation mode by default using "),rTe=a("code"),Por=o("model.eval()"),Bor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tTe=a("code"),Ior=o("model.train()"),Nor=l(),F(FF.$$.fragment),pro=l(),Id=a("h2"),TF=a("a"),aTe=a("span"),F(y$.$$.fragment),qor=l(),nTe=a("span"),jor=o("AutoModelForSeq2SeqLM"),_ro=l(),jo=a("div"),F(x$.$$.fragment),Dor=l(),Nd=a("p"),Gor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),OU=a("a"),Oor=o("from_pretrained()"),Vor=o(" class method or the "),VU=a("a"),Xor=o("from_config()"),zor=o(` class
method.`),Qor=l(),$$=a("p"),Wor=o("This class cannot be instantiated directly using "),sTe=a("code"),Uor=o("__init__()"),Hor=o(" (throws an error)."),Jor=l(),Et=a("div"),F(k$.$$.fragment),Yor=l(),lTe=a("p"),Zor=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Kor=l(),qd=a("p"),err=o(`Note:
Loading a model from its configuration file does `),iTe=a("strong"),orr=o("not"),rrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XU=a("a"),trr=o("from_pretrained()"),arr=o(" to load the model weights."),nrr=l(),F(MF.$$.fragment),srr=l(),to=a("div"),F(S$.$$.fragment),lrr=l(),dTe=a("p"),irr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),drr=l(),an=a("p"),crr=o("The model class to instantiate is selected based on the "),cTe=a("code"),mrr=o("model_type"),frr=o(` property of the config object (either
passed as an argument or loaded from `),mTe=a("code"),grr=o("pretrained_model_name_or_path"),hrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=a("code"),urr=o("pretrained_model_name_or_path"),prr=o(":"),_rr=l(),fe=a("ul"),EF=a("li"),gTe=a("strong"),brr=o("bart"),vrr=o(" \u2014 "),zU=a("a"),Frr=o("BartForConditionalGeneration"),Trr=o(" (BART model)"),Mrr=l(),CF=a("li"),hTe=a("strong"),Err=o("bigbird_pegasus"),Crr=o(" \u2014 "),QU=a("a"),wrr=o("BigBirdPegasusForConditionalGeneration"),Arr=o(" (BigBird-Pegasus model)"),Lrr=l(),wF=a("li"),uTe=a("strong"),yrr=o("blenderbot"),xrr=o(" \u2014 "),WU=a("a"),$rr=o("BlenderbotForConditionalGeneration"),krr=o(" (Blenderbot model)"),Srr=l(),AF=a("li"),pTe=a("strong"),Rrr=o("blenderbot-small"),Prr=o(" \u2014 "),UU=a("a"),Brr=o("BlenderbotSmallForConditionalGeneration"),Irr=o(" (BlenderbotSmall model)"),Nrr=l(),LF=a("li"),_Te=a("strong"),qrr=o("encoder-decoder"),jrr=o(" \u2014 "),HU=a("a"),Drr=o("EncoderDecoderModel"),Grr=o(" (Encoder decoder model)"),Orr=l(),yF=a("li"),bTe=a("strong"),Vrr=o("fsmt"),Xrr=o(" \u2014 "),JU=a("a"),zrr=o("FSMTForConditionalGeneration"),Qrr=o(" (FairSeq Machine-Translation model)"),Wrr=l(),xF=a("li"),vTe=a("strong"),Urr=o("led"),Hrr=o(" \u2014 "),YU=a("a"),Jrr=o("LEDForConditionalGeneration"),Yrr=o(" (LED model)"),Zrr=l(),$F=a("li"),FTe=a("strong"),Krr=o("longt5"),etr=o(" \u2014 "),ZU=a("a"),otr=o("LongT5ForConditionalGeneration"),rtr=o(" (LongT5 model)"),ttr=l(),kF=a("li"),TTe=a("strong"),atr=o("m2m_100"),ntr=o(" \u2014 "),KU=a("a"),str=o("M2M100ForConditionalGeneration"),ltr=o(" (M2M100 model)"),itr=l(),SF=a("li"),MTe=a("strong"),dtr=o("marian"),ctr=o(" \u2014 "),eH=a("a"),mtr=o("MarianMTModel"),ftr=o(" (Marian model)"),gtr=l(),RF=a("li"),ETe=a("strong"),htr=o("mbart"),utr=o(" \u2014 "),oH=a("a"),ptr=o("MBartForConditionalGeneration"),_tr=o(" (mBART model)"),btr=l(),PF=a("li"),CTe=a("strong"),vtr=o("mt5"),Ftr=o(" \u2014 "),rH=a("a"),Ttr=o("MT5ForConditionalGeneration"),Mtr=o(" (MT5 model)"),Etr=l(),BF=a("li"),wTe=a("strong"),Ctr=o("mvp"),wtr=o(" \u2014 "),tH=a("a"),Atr=o("MvpForConditionalGeneration"),Ltr=o(" (MVP model)"),ytr=l(),IF=a("li"),ATe=a("strong"),xtr=o("nllb"),$tr=o(" \u2014 "),aH=a("a"),ktr=o("M2M100ForConditionalGeneration"),Str=o(" (NLLB model)"),Rtr=l(),NF=a("li"),LTe=a("strong"),Ptr=o("pegasus"),Btr=o(" \u2014 "),nH=a("a"),Itr=o("PegasusForConditionalGeneration"),Ntr=o(" (Pegasus model)"),qtr=l(),qF=a("li"),yTe=a("strong"),jtr=o("pegasus_x"),Dtr=o(" \u2014 "),sH=a("a"),Gtr=o("PegasusXForConditionalGeneration"),Otr=o(" (PEGASUS-X model)"),Vtr=l(),jF=a("li"),xTe=a("strong"),Xtr=o("plbart"),ztr=o(" \u2014 "),lH=a("a"),Qtr=o("PLBartForConditionalGeneration"),Wtr=o(" (PLBart model)"),Utr=l(),DF=a("li"),$Te=a("strong"),Htr=o("prophetnet"),Jtr=o(" \u2014 "),iH=a("a"),Ytr=o("ProphetNetForConditionalGeneration"),Ztr=o(" (ProphetNet model)"),Ktr=l(),GF=a("li"),kTe=a("strong"),ear=o("t5"),oar=o(" \u2014 "),dH=a("a"),rar=o("T5ForConditionalGeneration"),tar=o(" (T5 model)"),aar=l(),OF=a("li"),STe=a("strong"),nar=o("xlm-prophetnet"),sar=o(" \u2014 "),cH=a("a"),lar=o("XLMProphetNetForConditionalGeneration"),iar=o(" (XLM-ProphetNet model)"),dar=l(),VF=a("p"),car=o("The model is set in evaluation mode by default using "),RTe=a("code"),mar=o("model.eval()"),far=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PTe=a("code"),gar=o("model.train()"),har=l(),F(XF.$$.fragment),bro=l(),jd=a("h2"),zF=a("a"),BTe=a("span"),F(R$.$$.fragment),uar=l(),ITe=a("span"),par=o("AutoModelForSequenceClassification"),vro=l(),Do=a("div"),F(P$.$$.fragment),_ar=l(),Dd=a("p"),bar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mH=a("a"),Far=o("from_pretrained()"),Tar=o(" class method or the "),fH=a("a"),Mar=o("from_config()"),Ear=o(` class
method.`),Car=l(),B$=a("p"),war=o("This class cannot be instantiated directly using "),NTe=a("code"),Aar=o("__init__()"),Lar=o(" (throws an error)."),yar=l(),Ct=a("div"),F(I$.$$.fragment),xar=l(),qTe=a("p"),$ar=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kar=l(),Gd=a("p"),Sar=o(`Note:
Loading a model from its configuration file does `),jTe=a("strong"),Rar=o("not"),Par=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=a("a"),Bar=o("from_pretrained()"),Iar=o(" to load the model weights."),Nar=l(),F(QF.$$.fragment),qar=l(),ao=a("div"),F(N$.$$.fragment),jar=l(),DTe=a("p"),Dar=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Gar=l(),nn=a("p"),Oar=o("The model class to instantiate is selected based on the "),GTe=a("code"),Var=o("model_type"),Xar=o(` property of the config object (either
passed as an argument or loaded from `),OTe=a("code"),zar=o("pretrained_model_name_or_path"),Qar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=a("code"),War=o("pretrained_model_name_or_path"),Uar=o(":"),Har=l(),I=a("ul"),WF=a("li"),XTe=a("strong"),Jar=o("albert"),Yar=o(" \u2014 "),hH=a("a"),Zar=o("AlbertForSequenceClassification"),Kar=o(" (ALBERT model)"),enr=l(),UF=a("li"),zTe=a("strong"),onr=o("bart"),rnr=o(" \u2014 "),uH=a("a"),tnr=o("BartForSequenceClassification"),anr=o(" (BART model)"),nnr=l(),HF=a("li"),QTe=a("strong"),snr=o("bert"),lnr=o(" \u2014 "),pH=a("a"),inr=o("BertForSequenceClassification"),dnr=o(" (BERT model)"),cnr=l(),JF=a("li"),WTe=a("strong"),mnr=o("big_bird"),fnr=o(" \u2014 "),_H=a("a"),gnr=o("BigBirdForSequenceClassification"),hnr=o(" (BigBird model)"),unr=l(),YF=a("li"),UTe=a("strong"),pnr=o("bigbird_pegasus"),_nr=o(" \u2014 "),bH=a("a"),bnr=o("BigBirdPegasusForSequenceClassification"),vnr=o(" (BigBird-Pegasus model)"),Fnr=l(),ZF=a("li"),HTe=a("strong"),Tnr=o("bloom"),Mnr=o(" \u2014 "),vH=a("a"),Enr=o("BloomForSequenceClassification"),Cnr=o(" (BLOOM model)"),wnr=l(),KF=a("li"),JTe=a("strong"),Anr=o("camembert"),Lnr=o(" \u2014 "),FH=a("a"),ynr=o("CamembertForSequenceClassification"),xnr=o(" (CamemBERT model)"),$nr=l(),eT=a("li"),YTe=a("strong"),knr=o("canine"),Snr=o(" \u2014 "),TH=a("a"),Rnr=o("CanineForSequenceClassification"),Pnr=o(" (CANINE model)"),Bnr=l(),oT=a("li"),ZTe=a("strong"),Inr=o("convbert"),Nnr=o(" \u2014 "),MH=a("a"),qnr=o("ConvBertForSequenceClassification"),jnr=o(" (ConvBERT model)"),Dnr=l(),rT=a("li"),KTe=a("strong"),Gnr=o("ctrl"),Onr=o(" \u2014 "),EH=a("a"),Vnr=o("CTRLForSequenceClassification"),Xnr=o(" (CTRL model)"),znr=l(),tT=a("li"),eMe=a("strong"),Qnr=o("data2vec-text"),Wnr=o(" \u2014 "),CH=a("a"),Unr=o("Data2VecTextForSequenceClassification"),Hnr=o(" (Data2VecText model)"),Jnr=l(),aT=a("li"),oMe=a("strong"),Ynr=o("deberta"),Znr=o(" \u2014 "),wH=a("a"),Knr=o("DebertaForSequenceClassification"),esr=o(" (DeBERTa model)"),osr=l(),nT=a("li"),rMe=a("strong"),rsr=o("deberta-v2"),tsr=o(" \u2014 "),AH=a("a"),asr=o("DebertaV2ForSequenceClassification"),nsr=o(" (DeBERTa-v2 model)"),ssr=l(),sT=a("li"),tMe=a("strong"),lsr=o("distilbert"),isr=o(" \u2014 "),LH=a("a"),dsr=o("DistilBertForSequenceClassification"),csr=o(" (DistilBERT model)"),msr=l(),lT=a("li"),aMe=a("strong"),fsr=o("electra"),gsr=o(" \u2014 "),yH=a("a"),hsr=o("ElectraForSequenceClassification"),usr=o(" (ELECTRA model)"),psr=l(),iT=a("li"),nMe=a("strong"),_sr=o("ernie"),bsr=o(" \u2014 "),xH=a("a"),vsr=o("ErnieForSequenceClassification"),Fsr=o(" (ERNIE model)"),Tsr=l(),dT=a("li"),sMe=a("strong"),Msr=o("esm"),Esr=o(" \u2014 "),$H=a("a"),Csr=o("EsmForSequenceClassification"),wsr=o(" (ESM model)"),Asr=l(),cT=a("li"),lMe=a("strong"),Lsr=o("flaubert"),ysr=o(" \u2014 "),kH=a("a"),xsr=o("FlaubertForSequenceClassification"),$sr=o(" (FlauBERT model)"),ksr=l(),mT=a("li"),iMe=a("strong"),Ssr=o("fnet"),Rsr=o(" \u2014 "),SH=a("a"),Psr=o("FNetForSequenceClassification"),Bsr=o(" (FNet model)"),Isr=l(),fT=a("li"),dMe=a("strong"),Nsr=o("funnel"),qsr=o(" \u2014 "),RH=a("a"),jsr=o("FunnelForSequenceClassification"),Dsr=o(" (Funnel Transformer model)"),Gsr=l(),gT=a("li"),cMe=a("strong"),Osr=o("gpt2"),Vsr=o(" \u2014 "),PH=a("a"),Xsr=o("GPT2ForSequenceClassification"),zsr=o(" (OpenAI GPT-2 model)"),Qsr=l(),hT=a("li"),mMe=a("strong"),Wsr=o("gpt_neo"),Usr=o(" \u2014 "),BH=a("a"),Hsr=o("GPTNeoForSequenceClassification"),Jsr=o(" (GPT Neo model)"),Ysr=l(),uT=a("li"),fMe=a("strong"),Zsr=o("gptj"),Ksr=o(" \u2014 "),IH=a("a"),elr=o("GPTJForSequenceClassification"),olr=o(" (GPT-J model)"),rlr=l(),pT=a("li"),gMe=a("strong"),tlr=o("ibert"),alr=o(" \u2014 "),NH=a("a"),nlr=o("IBertForSequenceClassification"),slr=o(" (I-BERT model)"),llr=l(),_T=a("li"),hMe=a("strong"),ilr=o("layoutlm"),dlr=o(" \u2014 "),qH=a("a"),clr=o("LayoutLMForSequenceClassification"),mlr=o(" (LayoutLM model)"),flr=l(),bT=a("li"),uMe=a("strong"),glr=o("layoutlmv2"),hlr=o(" \u2014 "),jH=a("a"),ulr=o("LayoutLMv2ForSequenceClassification"),plr=o(" (LayoutLMv2 model)"),_lr=l(),vT=a("li"),pMe=a("strong"),blr=o("layoutlmv3"),vlr=o(" \u2014 "),DH=a("a"),Flr=o("LayoutLMv3ForSequenceClassification"),Tlr=o(" (LayoutLMv3 model)"),Mlr=l(),FT=a("li"),_Me=a("strong"),Elr=o("led"),Clr=o(" \u2014 "),GH=a("a"),wlr=o("LEDForSequenceClassification"),Alr=o(" (LED model)"),Llr=l(),TT=a("li"),bMe=a("strong"),ylr=o("lilt"),xlr=o(" \u2014 "),OH=a("a"),$lr=o("LiltForSequenceClassification"),klr=o(" (LiLT model)"),Slr=l(),MT=a("li"),vMe=a("strong"),Rlr=o("longformer"),Plr=o(" \u2014 "),VH=a("a"),Blr=o("LongformerForSequenceClassification"),Ilr=o(" (Longformer model)"),Nlr=l(),ET=a("li"),FMe=a("strong"),qlr=o("luke"),jlr=o(" \u2014 "),XH=a("a"),Dlr=o("LukeForSequenceClassification"),Glr=o(" (LUKE model)"),Olr=l(),CT=a("li"),TMe=a("strong"),Vlr=o("markuplm"),Xlr=o(" \u2014 "),zH=a("a"),zlr=o("MarkupLMForSequenceClassification"),Qlr=o(" (MarkupLM model)"),Wlr=l(),wT=a("li"),MMe=a("strong"),Ulr=o("mbart"),Hlr=o(" \u2014 "),QH=a("a"),Jlr=o("MBartForSequenceClassification"),Ylr=o(" (mBART model)"),Zlr=l(),AT=a("li"),EMe=a("strong"),Klr=o("megatron-bert"),eir=o(" \u2014 "),WH=a("a"),oir=o("MegatronBertForSequenceClassification"),rir=o(" (Megatron-BERT model)"),tir=l(),LT=a("li"),CMe=a("strong"),air=o("mobilebert"),nir=o(" \u2014 "),UH=a("a"),sir=o("MobileBertForSequenceClassification"),lir=o(" (MobileBERT model)"),iir=l(),yT=a("li"),wMe=a("strong"),dir=o("mpnet"),cir=o(" \u2014 "),HH=a("a"),mir=o("MPNetForSequenceClassification"),fir=o(" (MPNet model)"),gir=l(),xT=a("li"),AMe=a("strong"),hir=o("mvp"),uir=o(" \u2014 "),JH=a("a"),pir=o("MvpForSequenceClassification"),_ir=o(" (MVP model)"),bir=l(),$T=a("li"),LMe=a("strong"),vir=o("nezha"),Fir=o(" \u2014 "),YH=a("a"),Tir=o("NezhaForSequenceClassification"),Mir=o(" (Nezha model)"),Eir=l(),kT=a("li"),yMe=a("strong"),Cir=o("nystromformer"),wir=o(" \u2014 "),ZH=a("a"),Air=o("NystromformerForSequenceClassification"),Lir=o(" (Nystr\xF6mformer model)"),yir=l(),ST=a("li"),xMe=a("strong"),xir=o("openai-gpt"),$ir=o(" \u2014 "),KH=a("a"),kir=o("OpenAIGPTForSequenceClassification"),Sir=o(" (OpenAI GPT model)"),Rir=l(),RT=a("li"),$Me=a("strong"),Pir=o("opt"),Bir=o(" \u2014 "),eJ=a("a"),Iir=o("OPTForSequenceClassification"),Nir=o(" (OPT model)"),qir=l(),PT=a("li"),kMe=a("strong"),jir=o("perceiver"),Dir=o(" \u2014 "),oJ=a("a"),Gir=o("PerceiverForSequenceClassification"),Oir=o(" (Perceiver model)"),Vir=l(),BT=a("li"),SMe=a("strong"),Xir=o("plbart"),zir=o(" \u2014 "),rJ=a("a"),Qir=o("PLBartForSequenceClassification"),Wir=o(" (PLBart model)"),Uir=l(),IT=a("li"),RMe=a("strong"),Hir=o("qdqbert"),Jir=o(" \u2014 "),tJ=a("a"),Yir=o("QDQBertForSequenceClassification"),Zir=o(" (QDQBert model)"),Kir=l(),NT=a("li"),PMe=a("strong"),edr=o("reformer"),odr=o(" \u2014 "),aJ=a("a"),rdr=o("ReformerForSequenceClassification"),tdr=o(" (Reformer model)"),adr=l(),qT=a("li"),BMe=a("strong"),ndr=o("rembert"),sdr=o(" \u2014 "),nJ=a("a"),ldr=o("RemBertForSequenceClassification"),idr=o(" (RemBERT model)"),ddr=l(),jT=a("li"),IMe=a("strong"),cdr=o("roberta"),mdr=o(" \u2014 "),sJ=a("a"),fdr=o("RobertaForSequenceClassification"),gdr=o(" (RoBERTa model)"),hdr=l(),DT=a("li"),NMe=a("strong"),udr=o("roformer"),pdr=o(" \u2014 "),lJ=a("a"),_dr=o("RoFormerForSequenceClassification"),bdr=o(" (RoFormer model)"),vdr=l(),GT=a("li"),qMe=a("strong"),Fdr=o("squeezebert"),Tdr=o(" \u2014 "),iJ=a("a"),Mdr=o("SqueezeBertForSequenceClassification"),Edr=o(" (SqueezeBERT model)"),Cdr=l(),OT=a("li"),jMe=a("strong"),wdr=o("tapas"),Adr=o(" \u2014 "),dJ=a("a"),Ldr=o("TapasForSequenceClassification"),ydr=o(" (TAPAS model)"),xdr=l(),VT=a("li"),DMe=a("strong"),$dr=o("transfo-xl"),kdr=o(" \u2014 "),cJ=a("a"),Sdr=o("TransfoXLForSequenceClassification"),Rdr=o(" (Transformer-XL model)"),Pdr=l(),XT=a("li"),GMe=a("strong"),Bdr=o("xlm"),Idr=o(" \u2014 "),mJ=a("a"),Ndr=o("XLMForSequenceClassification"),qdr=o(" (XLM model)"),jdr=l(),zT=a("li"),OMe=a("strong"),Ddr=o("xlm-roberta"),Gdr=o(" \u2014 "),fJ=a("a"),Odr=o("XLMRobertaForSequenceClassification"),Vdr=o(" (XLM-RoBERTa model)"),Xdr=l(),QT=a("li"),VMe=a("strong"),zdr=o("xlm-roberta-xl"),Qdr=o(" \u2014 "),gJ=a("a"),Wdr=o("XLMRobertaXLForSequenceClassification"),Udr=o(" (XLM-RoBERTa-XL model)"),Hdr=l(),WT=a("li"),XMe=a("strong"),Jdr=o("xlnet"),Ydr=o(" \u2014 "),hJ=a("a"),Zdr=o("XLNetForSequenceClassification"),Kdr=o(" (XLNet model)"),ecr=l(),UT=a("li"),zMe=a("strong"),ocr=o("yoso"),rcr=o(" \u2014 "),uJ=a("a"),tcr=o("YosoForSequenceClassification"),acr=o(" (YOSO model)"),ncr=l(),HT=a("p"),scr=o("The model is set in evaluation mode by default using "),QMe=a("code"),lcr=o("model.eval()"),icr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),WMe=a("code"),dcr=o("model.train()"),ccr=l(),F(JT.$$.fragment),Fro=l(),Od=a("h2"),YT=a("a"),UMe=a("span"),F(q$.$$.fragment),mcr=l(),HMe=a("span"),fcr=o("AutoModelForMultipleChoice"),Tro=l(),Go=a("div"),F(j$.$$.fragment),gcr=l(),Vd=a("p"),hcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pJ=a("a"),ucr=o("from_pretrained()"),pcr=o(" class method or the "),_J=a("a"),_cr=o("from_config()"),bcr=o(` class
method.`),vcr=l(),D$=a("p"),Fcr=o("This class cannot be instantiated directly using "),JMe=a("code"),Tcr=o("__init__()"),Mcr=o(" (throws an error)."),Ecr=l(),wt=a("div"),F(G$.$$.fragment),Ccr=l(),YMe=a("p"),wcr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Acr=l(),Xd=a("p"),Lcr=o(`Note:
Loading a model from its configuration file does `),ZMe=a("strong"),ycr=o("not"),xcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=a("a"),$cr=o("from_pretrained()"),kcr=o(" to load the model weights."),Scr=l(),F(ZT.$$.fragment),Rcr=l(),no=a("div"),F(O$.$$.fragment),Pcr=l(),KMe=a("p"),Bcr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Icr=l(),sn=a("p"),Ncr=o("The model class to instantiate is selected based on the "),eEe=a("code"),qcr=o("model_type"),jcr=o(` property of the config object (either
passed as an argument or loaded from `),oEe=a("code"),Dcr=o("pretrained_model_name_or_path"),Gcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rEe=a("code"),Ocr=o("pretrained_model_name_or_path"),Vcr=o(":"),Xcr=l(),K=a("ul"),KT=a("li"),tEe=a("strong"),zcr=o("albert"),Qcr=o(" \u2014 "),vJ=a("a"),Wcr=o("AlbertForMultipleChoice"),Ucr=o(" (ALBERT model)"),Hcr=l(),eM=a("li"),aEe=a("strong"),Jcr=o("bert"),Ycr=o(" \u2014 "),FJ=a("a"),Zcr=o("BertForMultipleChoice"),Kcr=o(" (BERT model)"),emr=l(),oM=a("li"),nEe=a("strong"),omr=o("big_bird"),rmr=o(" \u2014 "),TJ=a("a"),tmr=o("BigBirdForMultipleChoice"),amr=o(" (BigBird model)"),nmr=l(),rM=a("li"),sEe=a("strong"),smr=o("camembert"),lmr=o(" \u2014 "),MJ=a("a"),imr=o("CamembertForMultipleChoice"),dmr=o(" (CamemBERT model)"),cmr=l(),tM=a("li"),lEe=a("strong"),mmr=o("canine"),fmr=o(" \u2014 "),EJ=a("a"),gmr=o("CanineForMultipleChoice"),hmr=o(" (CANINE model)"),umr=l(),aM=a("li"),iEe=a("strong"),pmr=o("convbert"),_mr=o(" \u2014 "),CJ=a("a"),bmr=o("ConvBertForMultipleChoice"),vmr=o(" (ConvBERT model)"),Fmr=l(),nM=a("li"),dEe=a("strong"),Tmr=o("data2vec-text"),Mmr=o(" \u2014 "),wJ=a("a"),Emr=o("Data2VecTextForMultipleChoice"),Cmr=o(" (Data2VecText model)"),wmr=l(),sM=a("li"),cEe=a("strong"),Amr=o("deberta-v2"),Lmr=o(" \u2014 "),AJ=a("a"),ymr=o("DebertaV2ForMultipleChoice"),xmr=o(" (DeBERTa-v2 model)"),$mr=l(),lM=a("li"),mEe=a("strong"),kmr=o("distilbert"),Smr=o(" \u2014 "),LJ=a("a"),Rmr=o("DistilBertForMultipleChoice"),Pmr=o(" (DistilBERT model)"),Bmr=l(),iM=a("li"),fEe=a("strong"),Imr=o("electra"),Nmr=o(" \u2014 "),yJ=a("a"),qmr=o("ElectraForMultipleChoice"),jmr=o(" (ELECTRA model)"),Dmr=l(),dM=a("li"),gEe=a("strong"),Gmr=o("ernie"),Omr=o(" \u2014 "),xJ=a("a"),Vmr=o("ErnieForMultipleChoice"),Xmr=o(" (ERNIE model)"),zmr=l(),cM=a("li"),hEe=a("strong"),Qmr=o("flaubert"),Wmr=o(" \u2014 "),$J=a("a"),Umr=o("FlaubertForMultipleChoice"),Hmr=o(" (FlauBERT model)"),Jmr=l(),mM=a("li"),uEe=a("strong"),Ymr=o("fnet"),Zmr=o(" \u2014 "),kJ=a("a"),Kmr=o("FNetForMultipleChoice"),efr=o(" (FNet model)"),ofr=l(),fM=a("li"),pEe=a("strong"),rfr=o("funnel"),tfr=o(" \u2014 "),SJ=a("a"),afr=o("FunnelForMultipleChoice"),nfr=o(" (Funnel Transformer model)"),sfr=l(),gM=a("li"),_Ee=a("strong"),lfr=o("ibert"),ifr=o(" \u2014 "),RJ=a("a"),dfr=o("IBertForMultipleChoice"),cfr=o(" (I-BERT model)"),mfr=l(),hM=a("li"),bEe=a("strong"),ffr=o("longformer"),gfr=o(" \u2014 "),PJ=a("a"),hfr=o("LongformerForMultipleChoice"),ufr=o(" (Longformer model)"),pfr=l(),uM=a("li"),vEe=a("strong"),_fr=o("luke"),bfr=o(" \u2014 "),BJ=a("a"),vfr=o("LukeForMultipleChoice"),Ffr=o(" (LUKE model)"),Tfr=l(),pM=a("li"),FEe=a("strong"),Mfr=o("megatron-bert"),Efr=o(" \u2014 "),IJ=a("a"),Cfr=o("MegatronBertForMultipleChoice"),wfr=o(" (Megatron-BERT model)"),Afr=l(),_M=a("li"),TEe=a("strong"),Lfr=o("mobilebert"),yfr=o(" \u2014 "),NJ=a("a"),xfr=o("MobileBertForMultipleChoice"),$fr=o(" (MobileBERT model)"),kfr=l(),bM=a("li"),MEe=a("strong"),Sfr=o("mpnet"),Rfr=o(" \u2014 "),qJ=a("a"),Pfr=o("MPNetForMultipleChoice"),Bfr=o(" (MPNet model)"),Ifr=l(),vM=a("li"),EEe=a("strong"),Nfr=o("nezha"),qfr=o(" \u2014 "),jJ=a("a"),jfr=o("NezhaForMultipleChoice"),Dfr=o(" (Nezha model)"),Gfr=l(),FM=a("li"),CEe=a("strong"),Ofr=o("nystromformer"),Vfr=o(" \u2014 "),DJ=a("a"),Xfr=o("NystromformerForMultipleChoice"),zfr=o(" (Nystr\xF6mformer model)"),Qfr=l(),TM=a("li"),wEe=a("strong"),Wfr=o("qdqbert"),Ufr=o(" \u2014 "),GJ=a("a"),Hfr=o("QDQBertForMultipleChoice"),Jfr=o(" (QDQBert model)"),Yfr=l(),MM=a("li"),AEe=a("strong"),Zfr=o("rembert"),Kfr=o(" \u2014 "),OJ=a("a"),egr=o("RemBertForMultipleChoice"),ogr=o(" (RemBERT model)"),rgr=l(),EM=a("li"),LEe=a("strong"),tgr=o("roberta"),agr=o(" \u2014 "),VJ=a("a"),ngr=o("RobertaForMultipleChoice"),sgr=o(" (RoBERTa model)"),lgr=l(),CM=a("li"),yEe=a("strong"),igr=o("roformer"),dgr=o(" \u2014 "),XJ=a("a"),cgr=o("RoFormerForMultipleChoice"),mgr=o(" (RoFormer model)"),fgr=l(),wM=a("li"),xEe=a("strong"),ggr=o("squeezebert"),hgr=o(" \u2014 "),zJ=a("a"),ugr=o("SqueezeBertForMultipleChoice"),pgr=o(" (SqueezeBERT model)"),_gr=l(),AM=a("li"),$Ee=a("strong"),bgr=o("xlm"),vgr=o(" \u2014 "),QJ=a("a"),Fgr=o("XLMForMultipleChoice"),Tgr=o(" (XLM model)"),Mgr=l(),LM=a("li"),kEe=a("strong"),Egr=o("xlm-roberta"),Cgr=o(" \u2014 "),WJ=a("a"),wgr=o("XLMRobertaForMultipleChoice"),Agr=o(" (XLM-RoBERTa model)"),Lgr=l(),yM=a("li"),SEe=a("strong"),ygr=o("xlm-roberta-xl"),xgr=o(" \u2014 "),UJ=a("a"),$gr=o("XLMRobertaXLForMultipleChoice"),kgr=o(" (XLM-RoBERTa-XL model)"),Sgr=l(),xM=a("li"),REe=a("strong"),Rgr=o("xlnet"),Pgr=o(" \u2014 "),HJ=a("a"),Bgr=o("XLNetForMultipleChoice"),Igr=o(" (XLNet model)"),Ngr=l(),$M=a("li"),PEe=a("strong"),qgr=o("yoso"),jgr=o(" \u2014 "),JJ=a("a"),Dgr=o("YosoForMultipleChoice"),Ggr=o(" (YOSO model)"),Ogr=l(),kM=a("p"),Vgr=o("The model is set in evaluation mode by default using "),BEe=a("code"),Xgr=o("model.eval()"),zgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),IEe=a("code"),Qgr=o("model.train()"),Wgr=l(),F(SM.$$.fragment),Mro=l(),zd=a("h2"),RM=a("a"),NEe=a("span"),F(V$.$$.fragment),Ugr=l(),qEe=a("span"),Hgr=o("AutoModelForNextSentencePrediction"),Ero=l(),Oo=a("div"),F(X$.$$.fragment),Jgr=l(),Qd=a("p"),Ygr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YJ=a("a"),Zgr=o("from_pretrained()"),Kgr=o(" class method or the "),ZJ=a("a"),ehr=o("from_config()"),ohr=o(` class
method.`),rhr=l(),z$=a("p"),thr=o("This class cannot be instantiated directly using "),jEe=a("code"),ahr=o("__init__()"),nhr=o(" (throws an error)."),shr=l(),At=a("div"),F(Q$.$$.fragment),lhr=l(),DEe=a("p"),ihr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dhr=l(),Wd=a("p"),chr=o(`Note:
Loading a model from its configuration file does `),GEe=a("strong"),mhr=o("not"),fhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=a("a"),ghr=o("from_pretrained()"),hhr=o(" to load the model weights."),uhr=l(),F(PM.$$.fragment),phr=l(),so=a("div"),F(W$.$$.fragment),_hr=l(),OEe=a("p"),bhr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),vhr=l(),ln=a("p"),Fhr=o("The model class to instantiate is selected based on the "),VEe=a("code"),Thr=o("model_type"),Mhr=o(` property of the config object (either
passed as an argument or loaded from `),XEe=a("code"),Ehr=o("pretrained_model_name_or_path"),Chr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zEe=a("code"),whr=o("pretrained_model_name_or_path"),Ahr=o(":"),Lhr=l(),Ue=a("ul"),BM=a("li"),QEe=a("strong"),yhr=o("bert"),xhr=o(" \u2014 "),eY=a("a"),$hr=o("BertForNextSentencePrediction"),khr=o(" (BERT model)"),Shr=l(),IM=a("li"),WEe=a("strong"),Rhr=o("ernie"),Phr=o(" \u2014 "),oY=a("a"),Bhr=o("ErnieForNextSentencePrediction"),Ihr=o(" (ERNIE model)"),Nhr=l(),NM=a("li"),UEe=a("strong"),qhr=o("fnet"),jhr=o(" \u2014 "),rY=a("a"),Dhr=o("FNetForNextSentencePrediction"),Ghr=o(" (FNet model)"),Ohr=l(),qM=a("li"),HEe=a("strong"),Vhr=o("megatron-bert"),Xhr=o(" \u2014 "),tY=a("a"),zhr=o("MegatronBertForNextSentencePrediction"),Qhr=o(" (Megatron-BERT model)"),Whr=l(),jM=a("li"),JEe=a("strong"),Uhr=o("mobilebert"),Hhr=o(" \u2014 "),aY=a("a"),Jhr=o("MobileBertForNextSentencePrediction"),Yhr=o(" (MobileBERT model)"),Zhr=l(),DM=a("li"),YEe=a("strong"),Khr=o("nezha"),eur=o(" \u2014 "),nY=a("a"),our=o("NezhaForNextSentencePrediction"),rur=o(" (Nezha model)"),tur=l(),GM=a("li"),ZEe=a("strong"),aur=o("qdqbert"),nur=o(" \u2014 "),sY=a("a"),sur=o("QDQBertForNextSentencePrediction"),lur=o(" (QDQBert model)"),iur=l(),OM=a("p"),dur=o("The model is set in evaluation mode by default using "),KEe=a("code"),cur=o("model.eval()"),mur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e4e=a("code"),fur=o("model.train()"),gur=l(),F(VM.$$.fragment),Cro=l(),Ud=a("h2"),XM=a("a"),o4e=a("span"),F(U$.$$.fragment),hur=l(),r4e=a("span"),uur=o("AutoModelForTokenClassification"),wro=l(),Vo=a("div"),F(H$.$$.fragment),pur=l(),Hd=a("p"),_ur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lY=a("a"),bur=o("from_pretrained()"),vur=o(" class method or the "),iY=a("a"),Fur=o("from_config()"),Tur=o(` class
method.`),Mur=l(),J$=a("p"),Eur=o("This class cannot be instantiated directly using "),t4e=a("code"),Cur=o("__init__()"),wur=o(" (throws an error)."),Aur=l(),Lt=a("div"),F(Y$.$$.fragment),Lur=l(),a4e=a("p"),yur=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),xur=l(),Jd=a("p"),$ur=o(`Note:
Loading a model from its configuration file does `),n4e=a("strong"),kur=o("not"),Sur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=a("a"),Rur=o("from_pretrained()"),Pur=o(" to load the model weights."),Bur=l(),F(zM.$$.fragment),Iur=l(),lo=a("div"),F(Z$.$$.fragment),Nur=l(),s4e=a("p"),qur=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jur=l(),dn=a("p"),Dur=o("The model class to instantiate is selected based on the "),l4e=a("code"),Gur=o("model_type"),Our=o(` property of the config object (either
passed as an argument or loaded from `),i4e=a("code"),Vur=o("pretrained_model_name_or_path"),Xur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d4e=a("code"),zur=o("pretrained_model_name_or_path"),Qur=o(":"),Wur=l(),U=a("ul"),QM=a("li"),c4e=a("strong"),Uur=o("albert"),Hur=o(" \u2014 "),cY=a("a"),Jur=o("AlbertForTokenClassification"),Yur=o(" (ALBERT model)"),Zur=l(),WM=a("li"),m4e=a("strong"),Kur=o("bert"),epr=o(" \u2014 "),mY=a("a"),opr=o("BertForTokenClassification"),rpr=o(" (BERT model)"),tpr=l(),UM=a("li"),f4e=a("strong"),apr=o("big_bird"),npr=o(" \u2014 "),fY=a("a"),spr=o("BigBirdForTokenClassification"),lpr=o(" (BigBird model)"),ipr=l(),HM=a("li"),g4e=a("strong"),dpr=o("bloom"),cpr=o(" \u2014 "),gY=a("a"),mpr=o("BloomForTokenClassification"),fpr=o(" (BLOOM model)"),gpr=l(),JM=a("li"),h4e=a("strong"),hpr=o("camembert"),upr=o(" \u2014 "),hY=a("a"),ppr=o("CamembertForTokenClassification"),_pr=o(" (CamemBERT model)"),bpr=l(),YM=a("li"),u4e=a("strong"),vpr=o("canine"),Fpr=o(" \u2014 "),uY=a("a"),Tpr=o("CanineForTokenClassification"),Mpr=o(" (CANINE model)"),Epr=l(),ZM=a("li"),p4e=a("strong"),Cpr=o("convbert"),wpr=o(" \u2014 "),pY=a("a"),Apr=o("ConvBertForTokenClassification"),Lpr=o(" (ConvBERT model)"),ypr=l(),KM=a("li"),_4e=a("strong"),xpr=o("data2vec-text"),$pr=o(" \u2014 "),_Y=a("a"),kpr=o("Data2VecTextForTokenClassification"),Spr=o(" (Data2VecText model)"),Rpr=l(),eE=a("li"),b4e=a("strong"),Ppr=o("deberta"),Bpr=o(" \u2014 "),bY=a("a"),Ipr=o("DebertaForTokenClassification"),Npr=o(" (DeBERTa model)"),qpr=l(),oE=a("li"),v4e=a("strong"),jpr=o("deberta-v2"),Dpr=o(" \u2014 "),vY=a("a"),Gpr=o("DebertaV2ForTokenClassification"),Opr=o(" (DeBERTa-v2 model)"),Vpr=l(),rE=a("li"),F4e=a("strong"),Xpr=o("distilbert"),zpr=o(" \u2014 "),FY=a("a"),Qpr=o("DistilBertForTokenClassification"),Wpr=o(" (DistilBERT model)"),Upr=l(),tE=a("li"),T4e=a("strong"),Hpr=o("electra"),Jpr=o(" \u2014 "),TY=a("a"),Ypr=o("ElectraForTokenClassification"),Zpr=o(" (ELECTRA model)"),Kpr=l(),aE=a("li"),M4e=a("strong"),e_r=o("ernie"),o_r=o(" \u2014 "),MY=a("a"),r_r=o("ErnieForTokenClassification"),t_r=o(" (ERNIE model)"),a_r=l(),nE=a("li"),E4e=a("strong"),n_r=o("esm"),s_r=o(" \u2014 "),EY=a("a"),l_r=o("EsmForTokenClassification"),i_r=o(" (ESM model)"),d_r=l(),sE=a("li"),C4e=a("strong"),c_r=o("flaubert"),m_r=o(" \u2014 "),CY=a("a"),f_r=o("FlaubertForTokenClassification"),g_r=o(" (FlauBERT model)"),h_r=l(),lE=a("li"),w4e=a("strong"),u_r=o("fnet"),p_r=o(" \u2014 "),wY=a("a"),__r=o("FNetForTokenClassification"),b_r=o(" (FNet model)"),v_r=l(),iE=a("li"),A4e=a("strong"),F_r=o("funnel"),T_r=o(" \u2014 "),AY=a("a"),M_r=o("FunnelForTokenClassification"),E_r=o(" (Funnel Transformer model)"),C_r=l(),dE=a("li"),L4e=a("strong"),w_r=o("gpt2"),A_r=o(" \u2014 "),LY=a("a"),L_r=o("GPT2ForTokenClassification"),y_r=o(" (OpenAI GPT-2 model)"),x_r=l(),cE=a("li"),y4e=a("strong"),$_r=o("ibert"),k_r=o(" \u2014 "),yY=a("a"),S_r=o("IBertForTokenClassification"),R_r=o(" (I-BERT model)"),P_r=l(),mE=a("li"),x4e=a("strong"),B_r=o("layoutlm"),I_r=o(" \u2014 "),xY=a("a"),N_r=o("LayoutLMForTokenClassification"),q_r=o(" (LayoutLM model)"),j_r=l(),fE=a("li"),$4e=a("strong"),D_r=o("layoutlmv2"),G_r=o(" \u2014 "),$Y=a("a"),O_r=o("LayoutLMv2ForTokenClassification"),V_r=o(" (LayoutLMv2 model)"),X_r=l(),gE=a("li"),k4e=a("strong"),z_r=o("layoutlmv3"),Q_r=o(" \u2014 "),kY=a("a"),W_r=o("LayoutLMv3ForTokenClassification"),U_r=o(" (LayoutLMv3 model)"),H_r=l(),hE=a("li"),S4e=a("strong"),J_r=o("lilt"),Y_r=o(" \u2014 "),SY=a("a"),Z_r=o("LiltForTokenClassification"),K_r=o(" (LiLT model)"),e1r=l(),uE=a("li"),R4e=a("strong"),o1r=o("longformer"),r1r=o(" \u2014 "),RY=a("a"),t1r=o("LongformerForTokenClassification"),a1r=o(" (Longformer model)"),n1r=l(),pE=a("li"),P4e=a("strong"),s1r=o("luke"),l1r=o(" \u2014 "),PY=a("a"),i1r=o("LukeForTokenClassification"),d1r=o(" (LUKE model)"),c1r=l(),_E=a("li"),B4e=a("strong"),m1r=o("markuplm"),f1r=o(" \u2014 "),BY=a("a"),g1r=o("MarkupLMForTokenClassification"),h1r=o(" (MarkupLM model)"),u1r=l(),bE=a("li"),I4e=a("strong"),p1r=o("megatron-bert"),_1r=o(" \u2014 "),IY=a("a"),b1r=o("MegatronBertForTokenClassification"),v1r=o(" (Megatron-BERT model)"),F1r=l(),vE=a("li"),N4e=a("strong"),T1r=o("mobilebert"),M1r=o(" \u2014 "),NY=a("a"),E1r=o("MobileBertForTokenClassification"),C1r=o(" (MobileBERT model)"),w1r=l(),FE=a("li"),q4e=a("strong"),A1r=o("mpnet"),L1r=o(" \u2014 "),qY=a("a"),y1r=o("MPNetForTokenClassification"),x1r=o(" (MPNet model)"),$1r=l(),TE=a("li"),j4e=a("strong"),k1r=o("nezha"),S1r=o(" \u2014 "),jY=a("a"),R1r=o("NezhaForTokenClassification"),P1r=o(" (Nezha model)"),B1r=l(),ME=a("li"),D4e=a("strong"),I1r=o("nystromformer"),N1r=o(" \u2014 "),DY=a("a"),q1r=o("NystromformerForTokenClassification"),j1r=o(" (Nystr\xF6mformer model)"),D1r=l(),EE=a("li"),G4e=a("strong"),G1r=o("qdqbert"),O1r=o(" \u2014 "),GY=a("a"),V1r=o("QDQBertForTokenClassification"),X1r=o(" (QDQBert model)"),z1r=l(),CE=a("li"),O4e=a("strong"),Q1r=o("rembert"),W1r=o(" \u2014 "),OY=a("a"),U1r=o("RemBertForTokenClassification"),H1r=o(" (RemBERT model)"),J1r=l(),wE=a("li"),V4e=a("strong"),Y1r=o("roberta"),Z1r=o(" \u2014 "),VY=a("a"),K1r=o("RobertaForTokenClassification"),e2r=o(" (RoBERTa model)"),o2r=l(),AE=a("li"),X4e=a("strong"),r2r=o("roformer"),t2r=o(" \u2014 "),XY=a("a"),a2r=o("RoFormerForTokenClassification"),n2r=o(" (RoFormer model)"),s2r=l(),LE=a("li"),z4e=a("strong"),l2r=o("squeezebert"),i2r=o(" \u2014 "),zY=a("a"),d2r=o("SqueezeBertForTokenClassification"),c2r=o(" (SqueezeBERT model)"),m2r=l(),yE=a("li"),Q4e=a("strong"),f2r=o("xlm"),g2r=o(" \u2014 "),QY=a("a"),h2r=o("XLMForTokenClassification"),u2r=o(" (XLM model)"),p2r=l(),xE=a("li"),W4e=a("strong"),_2r=o("xlm-roberta"),b2r=o(" \u2014 "),WY=a("a"),v2r=o("XLMRobertaForTokenClassification"),F2r=o(" (XLM-RoBERTa model)"),T2r=l(),$E=a("li"),U4e=a("strong"),M2r=o("xlm-roberta-xl"),E2r=o(" \u2014 "),UY=a("a"),C2r=o("XLMRobertaXLForTokenClassification"),w2r=o(" (XLM-RoBERTa-XL model)"),A2r=l(),kE=a("li"),H4e=a("strong"),L2r=o("xlnet"),y2r=o(" \u2014 "),HY=a("a"),x2r=o("XLNetForTokenClassification"),$2r=o(" (XLNet model)"),k2r=l(),SE=a("li"),J4e=a("strong"),S2r=o("yoso"),R2r=o(" \u2014 "),JY=a("a"),P2r=o("YosoForTokenClassification"),B2r=o(" (YOSO model)"),I2r=l(),RE=a("p"),N2r=o("The model is set in evaluation mode by default using "),Y4e=a("code"),q2r=o("model.eval()"),j2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z4e=a("code"),D2r=o("model.train()"),G2r=l(),F(PE.$$.fragment),Aro=l(),Yd=a("h2"),BE=a("a"),K4e=a("span"),F(K$.$$.fragment),O2r=l(),eCe=a("span"),V2r=o("AutoModelForQuestionAnswering"),Lro=l(),Xo=a("div"),F(ek.$$.fragment),X2r=l(),Zd=a("p"),z2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),YY=a("a"),Q2r=o("from_pretrained()"),W2r=o(" class method or the "),ZY=a("a"),U2r=o("from_config()"),H2r=o(` class
method.`),J2r=l(),ok=a("p"),Y2r=o("This class cannot be instantiated directly using "),oCe=a("code"),Z2r=o("__init__()"),K2r=o(" (throws an error)."),ebr=l(),yt=a("div"),F(rk.$$.fragment),obr=l(),rCe=a("p"),rbr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),tbr=l(),Kd=a("p"),abr=o(`Note:
Loading a model from its configuration file does `),tCe=a("strong"),nbr=o("not"),sbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=a("a"),lbr=o("from_pretrained()"),ibr=o(" to load the model weights."),dbr=l(),F(IE.$$.fragment),cbr=l(),io=a("div"),F(tk.$$.fragment),mbr=l(),aCe=a("p"),fbr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gbr=l(),cn=a("p"),hbr=o("The model class to instantiate is selected based on the "),nCe=a("code"),ubr=o("model_type"),pbr=o(` property of the config object (either
passed as an argument or loaded from `),sCe=a("code"),_br=o("pretrained_model_name_or_path"),bbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lCe=a("code"),vbr=o("pretrained_model_name_or_path"),Fbr=o(":"),Tbr=l(),O=a("ul"),NE=a("li"),iCe=a("strong"),Mbr=o("albert"),Ebr=o(" \u2014 "),eZ=a("a"),Cbr=o("AlbertForQuestionAnswering"),wbr=o(" (ALBERT model)"),Abr=l(),qE=a("li"),dCe=a("strong"),Lbr=o("bart"),ybr=o(" \u2014 "),oZ=a("a"),xbr=o("BartForQuestionAnswering"),$br=o(" (BART model)"),kbr=l(),jE=a("li"),cCe=a("strong"),Sbr=o("bert"),Rbr=o(" \u2014 "),rZ=a("a"),Pbr=o("BertForQuestionAnswering"),Bbr=o(" (BERT model)"),Ibr=l(),DE=a("li"),mCe=a("strong"),Nbr=o("big_bird"),qbr=o(" \u2014 "),tZ=a("a"),jbr=o("BigBirdForQuestionAnswering"),Dbr=o(" (BigBird model)"),Gbr=l(),GE=a("li"),fCe=a("strong"),Obr=o("bigbird_pegasus"),Vbr=o(" \u2014 "),aZ=a("a"),Xbr=o("BigBirdPegasusForQuestionAnswering"),zbr=o(" (BigBird-Pegasus model)"),Qbr=l(),OE=a("li"),gCe=a("strong"),Wbr=o("bloom"),Ubr=o(" \u2014 "),nZ=a("a"),Hbr=o("BloomForQuestionAnswering"),Jbr=o(" (BLOOM model)"),Ybr=l(),VE=a("li"),hCe=a("strong"),Zbr=o("camembert"),Kbr=o(" \u2014 "),sZ=a("a"),evr=o("CamembertForQuestionAnswering"),ovr=o(" (CamemBERT model)"),rvr=l(),XE=a("li"),uCe=a("strong"),tvr=o("canine"),avr=o(" \u2014 "),lZ=a("a"),nvr=o("CanineForQuestionAnswering"),svr=o(" (CANINE model)"),lvr=l(),zE=a("li"),pCe=a("strong"),ivr=o("convbert"),dvr=o(" \u2014 "),iZ=a("a"),cvr=o("ConvBertForQuestionAnswering"),mvr=o(" (ConvBERT model)"),fvr=l(),QE=a("li"),_Ce=a("strong"),gvr=o("data2vec-text"),hvr=o(" \u2014 "),dZ=a("a"),uvr=o("Data2VecTextForQuestionAnswering"),pvr=o(" (Data2VecText model)"),_vr=l(),WE=a("li"),bCe=a("strong"),bvr=o("deberta"),vvr=o(" \u2014 "),cZ=a("a"),Fvr=o("DebertaForQuestionAnswering"),Tvr=o(" (DeBERTa model)"),Mvr=l(),UE=a("li"),vCe=a("strong"),Evr=o("deberta-v2"),Cvr=o(" \u2014 "),mZ=a("a"),wvr=o("DebertaV2ForQuestionAnswering"),Avr=o(" (DeBERTa-v2 model)"),Lvr=l(),HE=a("li"),FCe=a("strong"),yvr=o("distilbert"),xvr=o(" \u2014 "),fZ=a("a"),$vr=o("DistilBertForQuestionAnswering"),kvr=o(" (DistilBERT model)"),Svr=l(),JE=a("li"),TCe=a("strong"),Rvr=o("electra"),Pvr=o(" \u2014 "),gZ=a("a"),Bvr=o("ElectraForQuestionAnswering"),Ivr=o(" (ELECTRA model)"),Nvr=l(),YE=a("li"),MCe=a("strong"),qvr=o("ernie"),jvr=o(" \u2014 "),hZ=a("a"),Dvr=o("ErnieForQuestionAnswering"),Gvr=o(" (ERNIE model)"),Ovr=l(),ZE=a("li"),ECe=a("strong"),Vvr=o("flaubert"),Xvr=o(" \u2014 "),uZ=a("a"),zvr=o("FlaubertForQuestionAnsweringSimple"),Qvr=o(" (FlauBERT model)"),Wvr=l(),KE=a("li"),CCe=a("strong"),Uvr=o("fnet"),Hvr=o(" \u2014 "),pZ=a("a"),Jvr=o("FNetForQuestionAnswering"),Yvr=o(" (FNet model)"),Zvr=l(),e4=a("li"),wCe=a("strong"),Kvr=o("funnel"),eFr=o(" \u2014 "),_Z=a("a"),oFr=o("FunnelForQuestionAnswering"),rFr=o(" (Funnel Transformer model)"),tFr=l(),o4=a("li"),ACe=a("strong"),aFr=o("gptj"),nFr=o(" \u2014 "),bZ=a("a"),sFr=o("GPTJForQuestionAnswering"),lFr=o(" (GPT-J model)"),iFr=l(),r4=a("li"),LCe=a("strong"),dFr=o("ibert"),cFr=o(" \u2014 "),vZ=a("a"),mFr=o("IBertForQuestionAnswering"),fFr=o(" (I-BERT model)"),gFr=l(),t4=a("li"),yCe=a("strong"),hFr=o("layoutlmv2"),uFr=o(" \u2014 "),FZ=a("a"),pFr=o("LayoutLMv2ForQuestionAnswering"),_Fr=o(" (LayoutLMv2 model)"),bFr=l(),a4=a("li"),xCe=a("strong"),vFr=o("layoutlmv3"),FFr=o(" \u2014 "),TZ=a("a"),TFr=o("LayoutLMv3ForQuestionAnswering"),MFr=o(" (LayoutLMv3 model)"),EFr=l(),n4=a("li"),$Ce=a("strong"),CFr=o("led"),wFr=o(" \u2014 "),MZ=a("a"),AFr=o("LEDForQuestionAnswering"),LFr=o(" (LED model)"),yFr=l(),s4=a("li"),kCe=a("strong"),xFr=o("lilt"),$Fr=o(" \u2014 "),EZ=a("a"),kFr=o("LiltForQuestionAnswering"),SFr=o(" (LiLT model)"),RFr=l(),l4=a("li"),SCe=a("strong"),PFr=o("longformer"),BFr=o(" \u2014 "),CZ=a("a"),IFr=o("LongformerForQuestionAnswering"),NFr=o(" (Longformer model)"),qFr=l(),i4=a("li"),RCe=a("strong"),jFr=o("luke"),DFr=o(" \u2014 "),wZ=a("a"),GFr=o("LukeForQuestionAnswering"),OFr=o(" (LUKE model)"),VFr=l(),d4=a("li"),PCe=a("strong"),XFr=o("lxmert"),zFr=o(" \u2014 "),AZ=a("a"),QFr=o("LxmertForQuestionAnswering"),WFr=o(" (LXMERT model)"),UFr=l(),c4=a("li"),BCe=a("strong"),HFr=o("markuplm"),JFr=o(" \u2014 "),LZ=a("a"),YFr=o("MarkupLMForQuestionAnswering"),ZFr=o(" (MarkupLM model)"),KFr=l(),m4=a("li"),ICe=a("strong"),eTr=o("mbart"),oTr=o(" \u2014 "),yZ=a("a"),rTr=o("MBartForQuestionAnswering"),tTr=o(" (mBART model)"),aTr=l(),f4=a("li"),NCe=a("strong"),nTr=o("megatron-bert"),sTr=o(" \u2014 "),xZ=a("a"),lTr=o("MegatronBertForQuestionAnswering"),iTr=o(" (Megatron-BERT model)"),dTr=l(),g4=a("li"),qCe=a("strong"),cTr=o("mobilebert"),mTr=o(" \u2014 "),$Z=a("a"),fTr=o("MobileBertForQuestionAnswering"),gTr=o(" (MobileBERT model)"),hTr=l(),h4=a("li"),jCe=a("strong"),uTr=o("mpnet"),pTr=o(" \u2014 "),kZ=a("a"),_Tr=o("MPNetForQuestionAnswering"),bTr=o(" (MPNet model)"),vTr=l(),u4=a("li"),DCe=a("strong"),FTr=o("mvp"),TTr=o(" \u2014 "),SZ=a("a"),MTr=o("MvpForQuestionAnswering"),ETr=o(" (MVP model)"),CTr=l(),p4=a("li"),GCe=a("strong"),wTr=o("nezha"),ATr=o(" \u2014 "),RZ=a("a"),LTr=o("NezhaForQuestionAnswering"),yTr=o(" (Nezha model)"),xTr=l(),_4=a("li"),OCe=a("strong"),$Tr=o("nystromformer"),kTr=o(" \u2014 "),PZ=a("a"),STr=o("NystromformerForQuestionAnswering"),RTr=o(" (Nystr\xF6mformer model)"),PTr=l(),b4=a("li"),VCe=a("strong"),BTr=o("opt"),ITr=o(" \u2014 "),BZ=a("a"),NTr=o("OPTForQuestionAnswering"),qTr=o(" (OPT model)"),jTr=l(),v4=a("li"),XCe=a("strong"),DTr=o("qdqbert"),GTr=o(" \u2014 "),IZ=a("a"),OTr=o("QDQBertForQuestionAnswering"),VTr=o(" (QDQBert model)"),XTr=l(),F4=a("li"),zCe=a("strong"),zTr=o("reformer"),QTr=o(" \u2014 "),NZ=a("a"),WTr=o("ReformerForQuestionAnswering"),UTr=o(" (Reformer model)"),HTr=l(),T4=a("li"),QCe=a("strong"),JTr=o("rembert"),YTr=o(" \u2014 "),qZ=a("a"),ZTr=o("RemBertForQuestionAnswering"),KTr=o(" (RemBERT model)"),eMr=l(),M4=a("li"),WCe=a("strong"),oMr=o("roberta"),rMr=o(" \u2014 "),jZ=a("a"),tMr=o("RobertaForQuestionAnswering"),aMr=o(" (RoBERTa model)"),nMr=l(),E4=a("li"),UCe=a("strong"),sMr=o("roformer"),lMr=o(" \u2014 "),DZ=a("a"),iMr=o("RoFormerForQuestionAnswering"),dMr=o(" (RoFormer model)"),cMr=l(),C4=a("li"),HCe=a("strong"),mMr=o("splinter"),fMr=o(" \u2014 "),GZ=a("a"),gMr=o("SplinterForQuestionAnswering"),hMr=o(" (Splinter model)"),uMr=l(),w4=a("li"),JCe=a("strong"),pMr=o("squeezebert"),_Mr=o(" \u2014 "),OZ=a("a"),bMr=o("SqueezeBertForQuestionAnswering"),vMr=o(" (SqueezeBERT model)"),FMr=l(),A4=a("li"),YCe=a("strong"),TMr=o("xlm"),MMr=o(" \u2014 "),VZ=a("a"),EMr=o("XLMForQuestionAnsweringSimple"),CMr=o(" (XLM model)"),wMr=l(),L4=a("li"),ZCe=a("strong"),AMr=o("xlm-roberta"),LMr=o(" \u2014 "),XZ=a("a"),yMr=o("XLMRobertaForQuestionAnswering"),xMr=o(" (XLM-RoBERTa model)"),$Mr=l(),y4=a("li"),KCe=a("strong"),kMr=o("xlm-roberta-xl"),SMr=o(" \u2014 "),zZ=a("a"),RMr=o("XLMRobertaXLForQuestionAnswering"),PMr=o(" (XLM-RoBERTa-XL model)"),BMr=l(),x4=a("li"),e3e=a("strong"),IMr=o("xlnet"),NMr=o(" \u2014 "),QZ=a("a"),qMr=o("XLNetForQuestionAnsweringSimple"),jMr=o(" (XLNet model)"),DMr=l(),$4=a("li"),o3e=a("strong"),GMr=o("yoso"),OMr=o(" \u2014 "),WZ=a("a"),VMr=o("YosoForQuestionAnswering"),XMr=o(" (YOSO model)"),zMr=l(),k4=a("p"),QMr=o("The model is set in evaluation mode by default using "),r3e=a("code"),WMr=o("model.eval()"),UMr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t3e=a("code"),HMr=o("model.train()"),JMr=l(),F(S4.$$.fragment),yro=l(),ec=a("h2"),R4=a("a"),a3e=a("span"),F(ak.$$.fragment),YMr=l(),n3e=a("span"),ZMr=o("AutoModelForTableQuestionAnswering"),xro=l(),zo=a("div"),F(nk.$$.fragment),KMr=l(),oc=a("p"),eEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),UZ=a("a"),oEr=o("from_pretrained()"),rEr=o(" class method or the "),HZ=a("a"),tEr=o("from_config()"),aEr=o(` class
method.`),nEr=l(),sk=a("p"),sEr=o("This class cannot be instantiated directly using "),s3e=a("code"),lEr=o("__init__()"),iEr=o(" (throws an error)."),dEr=l(),xt=a("div"),F(lk.$$.fragment),cEr=l(),l3e=a("p"),mEr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fEr=l(),rc=a("p"),gEr=o(`Note:
Loading a model from its configuration file does `),i3e=a("strong"),hEr=o("not"),uEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JZ=a("a"),pEr=o("from_pretrained()"),_Er=o(" to load the model weights."),bEr=l(),F(P4.$$.fragment),vEr=l(),co=a("div"),F(ik.$$.fragment),FEr=l(),d3e=a("p"),TEr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),MEr=l(),mn=a("p"),EEr=o("The model class to instantiate is selected based on the "),c3e=a("code"),CEr=o("model_type"),wEr=o(` property of the config object (either
passed as an argument or loaded from `),m3e=a("code"),AEr=o("pretrained_model_name_or_path"),LEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f3e=a("code"),yEr=o("pretrained_model_name_or_path"),xEr=o(":"),$Er=l(),g3e=a("ul"),B4=a("li"),h3e=a("strong"),kEr=o("tapas"),SEr=o(" \u2014 "),YZ=a("a"),REr=o("TapasForQuestionAnswering"),PEr=o(" (TAPAS model)"),BEr=l(),I4=a("p"),IEr=o("The model is set in evaluation mode by default using "),u3e=a("code"),NEr=o("model.eval()"),qEr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p3e=a("code"),jEr=o("model.train()"),DEr=l(),F(N4.$$.fragment),$ro=l(),tc=a("h2"),q4=a("a"),_3e=a("span"),F(dk.$$.fragment),GEr=l(),b3e=a("span"),OEr=o("AutoModelForDocumentQuestionAnswering"),kro=l(),Qo=a("div"),F(ck.$$.fragment),VEr=l(),ac=a("p"),XEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),ZZ=a("a"),zEr=o("from_pretrained()"),QEr=o(" class method or the "),KZ=a("a"),WEr=o("from_config()"),UEr=o(` class
method.`),HEr=l(),mk=a("p"),JEr=o("This class cannot be instantiated directly using "),v3e=a("code"),YEr=o("__init__()"),ZEr=o(" (throws an error)."),KEr=l(),$t=a("div"),F(fk.$$.fragment),e4r=l(),F3e=a("p"),o4r=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),r4r=l(),nc=a("p"),t4r=o(`Note:
Loading a model from its configuration file does `),T3e=a("strong"),a4r=o("not"),n4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=a("a"),s4r=o("from_pretrained()"),l4r=o(" to load the model weights."),i4r=l(),F(j4.$$.fragment),d4r=l(),mo=a("div"),F(gk.$$.fragment),c4r=l(),M3e=a("p"),m4r=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),f4r=l(),fn=a("p"),g4r=o("The model class to instantiate is selected based on the "),E3e=a("code"),h4r=o("model_type"),u4r=o(` property of the config object (either
passed as an argument or loaded from `),C3e=a("code"),p4r=o("pretrained_model_name_or_path"),_4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w3e=a("code"),b4r=o("pretrained_model_name_or_path"),v4r=o(":"),F4r=l(),sc=a("ul"),D4=a("li"),A3e=a("strong"),T4r=o("layoutlm"),M4r=o(" \u2014 "),oK=a("a"),E4r=o("LayoutLMForQuestionAnswering"),C4r=o(" (LayoutLM model)"),w4r=l(),G4=a("li"),L3e=a("strong"),A4r=o("layoutlmv2"),L4r=o(" \u2014 "),rK=a("a"),y4r=o("LayoutLMv2ForQuestionAnswering"),x4r=o(" (LayoutLMv2 model)"),$4r=l(),O4=a("li"),y3e=a("strong"),k4r=o("layoutlmv3"),S4r=o(" \u2014 "),tK=a("a"),R4r=o("LayoutLMv3ForQuestionAnswering"),P4r=o(" (LayoutLMv3 model)"),B4r=l(),V4=a("p"),I4r=o("The model is set in evaluation mode by default using "),x3e=a("code"),N4r=o("model.eval()"),q4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$3e=a("code"),j4r=o("model.train()"),D4r=l(),F(X4.$$.fragment),Sro=l(),lc=a("h2"),z4=a("a"),k3e=a("span"),F(hk.$$.fragment),G4r=l(),S3e=a("span"),O4r=o("AutoModelForImageClassification"),Rro=l(),Wo=a("div"),F(uk.$$.fragment),V4r=l(),ic=a("p"),X4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aK=a("a"),z4r=o("from_pretrained()"),Q4r=o(" class method or the "),nK=a("a"),W4r=o("from_config()"),U4r=o(` class
method.`),H4r=l(),pk=a("p"),J4r=o("This class cannot be instantiated directly using "),R3e=a("code"),Y4r=o("__init__()"),Z4r=o(" (throws an error)."),K4r=l(),kt=a("div"),F(_k.$$.fragment),eCr=l(),P3e=a("p"),oCr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rCr=l(),dc=a("p"),tCr=o(`Note:
Loading a model from its configuration file does `),B3e=a("strong"),aCr=o("not"),nCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=a("a"),sCr=o("from_pretrained()"),lCr=o(" to load the model weights."),iCr=l(),F(Q4.$$.fragment),dCr=l(),fo=a("div"),F(bk.$$.fragment),cCr=l(),I3e=a("p"),mCr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fCr=l(),gn=a("p"),gCr=o("The model class to instantiate is selected based on the "),N3e=a("code"),hCr=o("model_type"),uCr=o(` property of the config object (either
passed as an argument or loaded from `),q3e=a("code"),pCr=o("pretrained_model_name_or_path"),_Cr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j3e=a("code"),bCr=o("pretrained_model_name_or_path"),vCr=o(":"),FCr=l(),be=a("ul"),W4=a("li"),D3e=a("strong"),TCr=o("beit"),MCr=o(" \u2014 "),lK=a("a"),ECr=o("BeitForImageClassification"),CCr=o(" (BEiT model)"),wCr=l(),U4=a("li"),G3e=a("strong"),ACr=o("convnext"),LCr=o(" \u2014 "),iK=a("a"),yCr=o("ConvNextForImageClassification"),xCr=o(" (ConvNeXT model)"),$Cr=l(),H4=a("li"),O3e=a("strong"),kCr=o("cvt"),SCr=o(" \u2014 "),dK=a("a"),RCr=o("CvtForImageClassification"),PCr=o(" (CvT model)"),BCr=l(),J4=a("li"),V3e=a("strong"),ICr=o("data2vec-vision"),NCr=o(" \u2014 "),cK=a("a"),qCr=o("Data2VecVisionForImageClassification"),jCr=o(" (Data2VecVision model)"),DCr=l(),Cl=a("li"),X3e=a("strong"),GCr=o("deit"),OCr=o(" \u2014 "),mK=a("a"),VCr=o("DeiTForImageClassification"),XCr=o(" or "),fK=a("a"),zCr=o("DeiTForImageClassificationWithTeacher"),QCr=o(" (DeiT model)"),WCr=l(),Y4=a("li"),z3e=a("strong"),UCr=o("imagegpt"),HCr=o(" \u2014 "),gK=a("a"),JCr=o("ImageGPTForImageClassification"),YCr=o(" (ImageGPT model)"),ZCr=l(),wl=a("li"),Q3e=a("strong"),KCr=o("levit"),e3r=o(" \u2014 "),hK=a("a"),o3r=o("LevitForImageClassification"),r3r=o(" or "),uK=a("a"),t3r=o("LevitForImageClassificationWithTeacher"),a3r=o(" (LeViT model)"),n3r=l(),Z4=a("li"),W3e=a("strong"),s3r=o("mobilevit"),l3r=o(" \u2014 "),pK=a("a"),i3r=o("MobileViTForImageClassification"),d3r=o(" (MobileViT model)"),c3r=l(),St=a("li"),U3e=a("strong"),m3r=o("perceiver"),f3r=o(" \u2014 "),_K=a("a"),g3r=o("PerceiverForImageClassificationLearned"),h3r=o(" or "),bK=a("a"),u3r=o("PerceiverForImageClassificationFourier"),p3r=o(" or "),vK=a("a"),_3r=o("PerceiverForImageClassificationConvProcessing"),b3r=o(" (Perceiver model)"),v3r=l(),K4=a("li"),H3e=a("strong"),F3r=o("poolformer"),T3r=o(" \u2014 "),FK=a("a"),M3r=o("PoolFormerForImageClassification"),E3r=o(" (PoolFormer model)"),C3r=l(),eC=a("li"),J3e=a("strong"),w3r=o("regnet"),A3r=o(" \u2014 "),TK=a("a"),L3r=o("RegNetForImageClassification"),y3r=o(" (RegNet model)"),x3r=l(),oC=a("li"),Y3e=a("strong"),$3r=o("resnet"),k3r=o(" \u2014 "),MK=a("a"),S3r=o("ResNetForImageClassification"),R3r=o(" (ResNet model)"),P3r=l(),rC=a("li"),Z3e=a("strong"),B3r=o("segformer"),I3r=o(" \u2014 "),EK=a("a"),N3r=o("SegformerForImageClassification"),q3r=o(" (SegFormer model)"),j3r=l(),tC=a("li"),K3e=a("strong"),D3r=o("swin"),G3r=o(" \u2014 "),CK=a("a"),O3r=o("SwinForImageClassification"),V3r=o(" (Swin Transformer model)"),X3r=l(),aC=a("li"),e5e=a("strong"),z3r=o("swinv2"),Q3r=o(" \u2014 "),wK=a("a"),W3r=o("Swinv2ForImageClassification"),U3r=o(" (Swin Transformer V2 model)"),H3r=l(),nC=a("li"),o5e=a("strong"),J3r=o("van"),Y3r=o(" \u2014 "),AK=a("a"),Z3r=o("VanForImageClassification"),K3r=o(" (VAN model)"),e5r=l(),sC=a("li"),r5e=a("strong"),o5r=o("vit"),r5r=o(" \u2014 "),LK=a("a"),t5r=o("ViTForImageClassification"),a5r=o(" (ViT model)"),n5r=l(),lC=a("li"),t5e=a("strong"),s5r=o("vit_msn"),l5r=o(" \u2014 "),yK=a("a"),i5r=o("ViTMSNForImageClassification"),d5r=o(" (ViTMSN model)"),c5r=l(),iC=a("p"),m5r=o("The model is set in evaluation mode by default using "),a5e=a("code"),f5r=o("model.eval()"),g5r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n5e=a("code"),h5r=o("model.train()"),u5r=l(),F(dC.$$.fragment),Pro=l(),cc=a("h2"),cC=a("a"),s5e=a("span"),F(vk.$$.fragment),p5r=l(),l5e=a("span"),_5r=o("AutoModelForVideoClassification"),Bro=l(),Uo=a("div"),F(Fk.$$.fragment),b5r=l(),mc=a("p"),v5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),xK=a("a"),F5r=o("from_pretrained()"),T5r=o(" class method or the "),$K=a("a"),M5r=o("from_config()"),E5r=o(` class
method.`),C5r=l(),Tk=a("p"),w5r=o("This class cannot be instantiated directly using "),i5e=a("code"),A5r=o("__init__()"),L5r=o(" (throws an error)."),y5r=l(),Rt=a("div"),F(Mk.$$.fragment),x5r=l(),d5e=a("p"),$5r=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),k5r=l(),fc=a("p"),S5r=o(`Note:
Loading a model from its configuration file does `),c5e=a("strong"),R5r=o("not"),P5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kK=a("a"),B5r=o("from_pretrained()"),I5r=o(" to load the model weights."),N5r=l(),F(mC.$$.fragment),q5r=l(),go=a("div"),F(Ek.$$.fragment),j5r=l(),m5e=a("p"),D5r=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),G5r=l(),hn=a("p"),O5r=o("The model class to instantiate is selected based on the "),f5e=a("code"),V5r=o("model_type"),X5r=o(` property of the config object (either
passed as an argument or loaded from `),g5e=a("code"),z5r=o("pretrained_model_name_or_path"),Q5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h5e=a("code"),W5r=o("pretrained_model_name_or_path"),U5r=o(":"),H5r=l(),u5e=a("ul"),fC=a("li"),p5e=a("strong"),J5r=o("videomae"),Y5r=o(" \u2014 "),SK=a("a"),Z5r=o("VideoMAEForVideoClassification"),K5r=o(" (VideoMAE model)"),e0r=l(),gC=a("p"),o0r=o("The model is set in evaluation mode by default using "),_5e=a("code"),r0r=o("model.eval()"),t0r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b5e=a("code"),a0r=o("model.train()"),n0r=l(),F(hC.$$.fragment),Iro=l(),gc=a("h2"),uC=a("a"),v5e=a("span"),F(Ck.$$.fragment),s0r=l(),F5e=a("span"),l0r=o("AutoModelForVision2Seq"),Nro=l(),Ho=a("div"),F(wk.$$.fragment),i0r=l(),hc=a("p"),d0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),RK=a("a"),c0r=o("from_pretrained()"),m0r=o(" class method or the "),PK=a("a"),f0r=o("from_config()"),g0r=o(` class
method.`),h0r=l(),Ak=a("p"),u0r=o("This class cannot be instantiated directly using "),T5e=a("code"),p0r=o("__init__()"),_0r=o(" (throws an error)."),b0r=l(),Pt=a("div"),F(Lk.$$.fragment),v0r=l(),M5e=a("p"),F0r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),T0r=l(),uc=a("p"),M0r=o(`Note:
Loading a model from its configuration file does `),E5e=a("strong"),E0r=o("not"),C0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=a("a"),w0r=o("from_pretrained()"),A0r=o(" to load the model weights."),L0r=l(),F(pC.$$.fragment),y0r=l(),ho=a("div"),F(yk.$$.fragment),x0r=l(),C5e=a("p"),$0r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),k0r=l(),un=a("p"),S0r=o("The model class to instantiate is selected based on the "),w5e=a("code"),R0r=o("model_type"),P0r=o(` property of the config object (either
passed as an argument or loaded from `),A5e=a("code"),B0r=o("pretrained_model_name_or_path"),I0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L5e=a("code"),N0r=o("pretrained_model_name_or_path"),q0r=o(":"),j0r=l(),y5e=a("ul"),_C=a("li"),x5e=a("strong"),D0r=o("vision-encoder-decoder"),G0r=o(" \u2014 "),IK=a("a"),O0r=o("VisionEncoderDecoderModel"),V0r=o(" (Vision Encoder decoder model)"),X0r=l(),bC=a("p"),z0r=o("The model is set in evaluation mode by default using "),$5e=a("code"),Q0r=o("model.eval()"),W0r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k5e=a("code"),U0r=o("model.train()"),H0r=l(),F(vC.$$.fragment),qro=l(),pc=a("h2"),FC=a("a"),S5e=a("span"),F(xk.$$.fragment),J0r=l(),R5e=a("span"),Y0r=o("AutoModelForVisualQuestionAnswering"),jro=l(),Jo=a("div"),F($k.$$.fragment),Z0r=l(),_c=a("p"),K0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),NK=a("a"),ewr=o("from_pretrained()"),owr=o(" class method or the "),qK=a("a"),rwr=o("from_config()"),twr=o(` class
method.`),awr=l(),kk=a("p"),nwr=o("This class cannot be instantiated directly using "),P5e=a("code"),swr=o("__init__()"),lwr=o(" (throws an error)."),iwr=l(),Bt=a("div"),F(Sk.$$.fragment),dwr=l(),B5e=a("p"),cwr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),mwr=l(),bc=a("p"),fwr=o(`Note:
Loading a model from its configuration file does `),I5e=a("strong"),gwr=o("not"),hwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("a"),uwr=o("from_pretrained()"),pwr=o(" to load the model weights."),_wr=l(),F(TC.$$.fragment),bwr=l(),uo=a("div"),F(Rk.$$.fragment),vwr=l(),N5e=a("p"),Fwr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Twr=l(),pn=a("p"),Mwr=o("The model class to instantiate is selected based on the "),q5e=a("code"),Ewr=o("model_type"),Cwr=o(` property of the config object (either
passed as an argument or loaded from `),j5e=a("code"),wwr=o("pretrained_model_name_or_path"),Awr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D5e=a("code"),Lwr=o("pretrained_model_name_or_path"),ywr=o(":"),xwr=l(),G5e=a("ul"),MC=a("li"),O5e=a("strong"),$wr=o("vilt"),kwr=o(" \u2014 "),DK=a("a"),Swr=o("ViltForQuestionAnswering"),Rwr=o(" (ViLT model)"),Pwr=l(),EC=a("p"),Bwr=o("The model is set in evaluation mode by default using "),V5e=a("code"),Iwr=o("model.eval()"),Nwr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X5e=a("code"),qwr=o("model.train()"),jwr=l(),F(CC.$$.fragment),Dro=l(),vc=a("h2"),wC=a("a"),z5e=a("span"),F(Pk.$$.fragment),Dwr=l(),Q5e=a("span"),Gwr=o("AutoModelForAudioClassification"),Gro=l(),Yo=a("div"),F(Bk.$$.fragment),Owr=l(),Fc=a("p"),Vwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),GK=a("a"),Xwr=o("from_pretrained()"),zwr=o(" class method or the "),OK=a("a"),Qwr=o("from_config()"),Wwr=o(` class
method.`),Uwr=l(),Ik=a("p"),Hwr=o("This class cannot be instantiated directly using "),W5e=a("code"),Jwr=o("__init__()"),Ywr=o(" (throws an error)."),Zwr=l(),It=a("div"),F(Nk.$$.fragment),Kwr=l(),U5e=a("p"),eAr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),oAr=l(),Tc=a("p"),rAr=o(`Note:
Loading a model from its configuration file does `),H5e=a("strong"),tAr=o("not"),aAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=a("a"),nAr=o("from_pretrained()"),sAr=o(" to load the model weights."),lAr=l(),F(AC.$$.fragment),iAr=l(),po=a("div"),F(qk.$$.fragment),dAr=l(),J5e=a("p"),cAr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),mAr=l(),_n=a("p"),fAr=o("The model class to instantiate is selected based on the "),Y5e=a("code"),gAr=o("model_type"),hAr=o(` property of the config object (either
passed as an argument or loaded from `),Z5e=a("code"),uAr=o("pretrained_model_name_or_path"),pAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K5e=a("code"),_Ar=o("pretrained_model_name_or_path"),bAr=o(":"),vAr=l(),Be=a("ul"),LC=a("li"),e0e=a("strong"),FAr=o("data2vec-audio"),TAr=o(" \u2014 "),XK=a("a"),MAr=o("Data2VecAudioForSequenceClassification"),EAr=o(" (Data2VecAudio model)"),CAr=l(),yC=a("li"),o0e=a("strong"),wAr=o("hubert"),AAr=o(" \u2014 "),zK=a("a"),LAr=o("HubertForSequenceClassification"),yAr=o(" (Hubert model)"),xAr=l(),xC=a("li"),r0e=a("strong"),$Ar=o("sew"),kAr=o(" \u2014 "),QK=a("a"),SAr=o("SEWForSequenceClassification"),RAr=o(" (SEW model)"),PAr=l(),$C=a("li"),t0e=a("strong"),BAr=o("sew-d"),IAr=o(" \u2014 "),WK=a("a"),NAr=o("SEWDForSequenceClassification"),qAr=o(" (SEW-D model)"),jAr=l(),kC=a("li"),a0e=a("strong"),DAr=o("unispeech"),GAr=o(" \u2014 "),UK=a("a"),OAr=o("UniSpeechForSequenceClassification"),VAr=o(" (UniSpeech model)"),XAr=l(),SC=a("li"),n0e=a("strong"),zAr=o("unispeech-sat"),QAr=o(" \u2014 "),HK=a("a"),WAr=o("UniSpeechSatForSequenceClassification"),UAr=o(" (UniSpeechSat model)"),HAr=l(),RC=a("li"),s0e=a("strong"),JAr=o("wav2vec2"),YAr=o(" \u2014 "),JK=a("a"),ZAr=o("Wav2Vec2ForSequenceClassification"),KAr=o(" (Wav2Vec2 model)"),e6r=l(),PC=a("li"),l0e=a("strong"),o6r=o("wav2vec2-conformer"),r6r=o(" \u2014 "),YK=a("a"),t6r=o("Wav2Vec2ConformerForSequenceClassification"),a6r=o(" (Wav2Vec2-Conformer model)"),n6r=l(),BC=a("li"),i0e=a("strong"),s6r=o("wavlm"),l6r=o(" \u2014 "),ZK=a("a"),i6r=o("WavLMForSequenceClassification"),d6r=o(" (WavLM model)"),c6r=l(),IC=a("p"),m6r=o("The model is set in evaluation mode by default using "),d0e=a("code"),f6r=o("model.eval()"),g6r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c0e=a("code"),h6r=o("model.train()"),u6r=l(),F(NC.$$.fragment),Oro=l(),Mc=a("h2"),qC=a("a"),m0e=a("span"),F(jk.$$.fragment),p6r=l(),f0e=a("span"),_6r=o("AutoModelForAudioFrameClassification"),Vro=l(),Zo=a("div"),F(Dk.$$.fragment),b6r=l(),Ec=a("p"),v6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),KK=a("a"),F6r=o("from_pretrained()"),T6r=o(" class method or the "),eee=a("a"),M6r=o("from_config()"),E6r=o(` class
method.`),C6r=l(),Gk=a("p"),w6r=o("This class cannot be instantiated directly using "),g0e=a("code"),A6r=o("__init__()"),L6r=o(" (throws an error)."),y6r=l(),Nt=a("div"),F(Ok.$$.fragment),x6r=l(),h0e=a("p"),$6r=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),k6r=l(),Cc=a("p"),S6r=o(`Note:
Loading a model from its configuration file does `),u0e=a("strong"),R6r=o("not"),P6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=a("a"),B6r=o("from_pretrained()"),I6r=o(" to load the model weights."),N6r=l(),F(jC.$$.fragment),q6r=l(),_o=a("div"),F(Vk.$$.fragment),j6r=l(),p0e=a("p"),D6r=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),G6r=l(),bn=a("p"),O6r=o("The model class to instantiate is selected based on the "),_0e=a("code"),V6r=o("model_type"),X6r=o(` property of the config object (either
passed as an argument or loaded from `),b0e=a("code"),z6r=o("pretrained_model_name_or_path"),Q6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v0e=a("code"),W6r=o("pretrained_model_name_or_path"),U6r=o(":"),H6r=l(),gt=a("ul"),DC=a("li"),F0e=a("strong"),J6r=o("data2vec-audio"),Y6r=o(" \u2014 "),ree=a("a"),Z6r=o("Data2VecAudioForAudioFrameClassification"),K6r=o(" (Data2VecAudio model)"),e7r=l(),GC=a("li"),T0e=a("strong"),o7r=o("unispeech-sat"),r7r=o(" \u2014 "),tee=a("a"),t7r=o("UniSpeechSatForAudioFrameClassification"),a7r=o(" (UniSpeechSat model)"),n7r=l(),OC=a("li"),M0e=a("strong"),s7r=o("wav2vec2"),l7r=o(" \u2014 "),aee=a("a"),i7r=o("Wav2Vec2ForAudioFrameClassification"),d7r=o(" (Wav2Vec2 model)"),c7r=l(),VC=a("li"),E0e=a("strong"),m7r=o("wav2vec2-conformer"),f7r=o(" \u2014 "),nee=a("a"),g7r=o("Wav2Vec2ConformerForAudioFrameClassification"),h7r=o(" (Wav2Vec2-Conformer model)"),u7r=l(),XC=a("li"),C0e=a("strong"),p7r=o("wavlm"),_7r=o(" \u2014 "),see=a("a"),b7r=o("WavLMForAudioFrameClassification"),v7r=o(" (WavLM model)"),F7r=l(),zC=a("p"),T7r=o("The model is set in evaluation mode by default using "),w0e=a("code"),M7r=o("model.eval()"),E7r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A0e=a("code"),C7r=o("model.train()"),w7r=l(),F(QC.$$.fragment),Xro=l(),wc=a("h2"),WC=a("a"),L0e=a("span"),F(Xk.$$.fragment),A7r=l(),y0e=a("span"),L7r=o("AutoModelForCTC"),zro=l(),Ko=a("div"),F(zk.$$.fragment),y7r=l(),Ac=a("p"),x7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),lee=a("a"),$7r=o("from_pretrained()"),k7r=o(" class method or the "),iee=a("a"),S7r=o("from_config()"),R7r=o(` class
method.`),P7r=l(),Qk=a("p"),B7r=o("This class cannot be instantiated directly using "),x0e=a("code"),I7r=o("__init__()"),N7r=o(" (throws an error)."),q7r=l(),qt=a("div"),F(Wk.$$.fragment),j7r=l(),$0e=a("p"),D7r=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),G7r=l(),Lc=a("p"),O7r=o(`Note:
Loading a model from its configuration file does `),k0e=a("strong"),V7r=o("not"),X7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dee=a("a"),z7r=o("from_pretrained()"),Q7r=o(" to load the model weights."),W7r=l(),F(UC.$$.fragment),U7r=l(),bo=a("div"),F(Uk.$$.fragment),H7r=l(),S0e=a("p"),J7r=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Y7r=l(),vn=a("p"),Z7r=o("The model class to instantiate is selected based on the "),R0e=a("code"),K7r=o("model_type"),eLr=o(` property of the config object (either
passed as an argument or loaded from `),P0e=a("code"),oLr=o("pretrained_model_name_or_path"),rLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B0e=a("code"),tLr=o("pretrained_model_name_or_path"),aLr=o(":"),nLr=l(),Le=a("ul"),HC=a("li"),I0e=a("strong"),sLr=o("data2vec-audio"),lLr=o(" \u2014 "),cee=a("a"),iLr=o("Data2VecAudioForCTC"),dLr=o(" (Data2VecAudio model)"),cLr=l(),JC=a("li"),N0e=a("strong"),mLr=o("hubert"),fLr=o(" \u2014 "),mee=a("a"),gLr=o("HubertForCTC"),hLr=o(" (Hubert model)"),uLr=l(),YC=a("li"),q0e=a("strong"),pLr=o("mctct"),_Lr=o(" \u2014 "),fee=a("a"),bLr=o("MCTCTForCTC"),vLr=o(" (M-CTC-T model)"),FLr=l(),ZC=a("li"),j0e=a("strong"),TLr=o("sew"),MLr=o(" \u2014 "),gee=a("a"),ELr=o("SEWForCTC"),CLr=o(" (SEW model)"),wLr=l(),KC=a("li"),D0e=a("strong"),ALr=o("sew-d"),LLr=o(" \u2014 "),hee=a("a"),yLr=o("SEWDForCTC"),xLr=o(" (SEW-D model)"),$Lr=l(),e3=a("li"),G0e=a("strong"),kLr=o("unispeech"),SLr=o(" \u2014 "),uee=a("a"),RLr=o("UniSpeechForCTC"),PLr=o(" (UniSpeech model)"),BLr=l(),o3=a("li"),O0e=a("strong"),ILr=o("unispeech-sat"),NLr=o(" \u2014 "),pee=a("a"),qLr=o("UniSpeechSatForCTC"),jLr=o(" (UniSpeechSat model)"),DLr=l(),r3=a("li"),V0e=a("strong"),GLr=o("wav2vec2"),OLr=o(" \u2014 "),_ee=a("a"),VLr=o("Wav2Vec2ForCTC"),XLr=o(" (Wav2Vec2 model)"),zLr=l(),t3=a("li"),X0e=a("strong"),QLr=o("wav2vec2-conformer"),WLr=o(" \u2014 "),bee=a("a"),ULr=o("Wav2Vec2ConformerForCTC"),HLr=o(" (Wav2Vec2-Conformer model)"),JLr=l(),a3=a("li"),z0e=a("strong"),YLr=o("wavlm"),ZLr=o(" \u2014 "),vee=a("a"),KLr=o("WavLMForCTC"),e8r=o(" (WavLM model)"),o8r=l(),n3=a("p"),r8r=o("The model is set in evaluation mode by default using "),Q0e=a("code"),t8r=o("model.eval()"),a8r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W0e=a("code"),n8r=o("model.train()"),s8r=l(),F(s3.$$.fragment),Qro=l(),yc=a("h2"),l3=a("a"),U0e=a("span"),F(Hk.$$.fragment),l8r=l(),H0e=a("span"),i8r=o("AutoModelForSpeechSeq2Seq"),Wro=l(),er=a("div"),F(Jk.$$.fragment),d8r=l(),xc=a("p"),c8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Fee=a("a"),m8r=o("from_pretrained()"),f8r=o(" class method or the "),Tee=a("a"),g8r=o("from_config()"),h8r=o(` class
method.`),u8r=l(),Yk=a("p"),p8r=o("This class cannot be instantiated directly using "),J0e=a("code"),_8r=o("__init__()"),b8r=o(" (throws an error)."),v8r=l(),jt=a("div"),F(Zk.$$.fragment),F8r=l(),Y0e=a("p"),T8r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),M8r=l(),$c=a("p"),E8r=o(`Note:
Loading a model from its configuration file does `),Z0e=a("strong"),C8r=o("not"),w8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mee=a("a"),A8r=o("from_pretrained()"),L8r=o(" to load the model weights."),y8r=l(),F(i3.$$.fragment),x8r=l(),vo=a("div"),F(Kk.$$.fragment),$8r=l(),K0e=a("p"),k8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),S8r=l(),Fn=a("p"),R8r=o("The model class to instantiate is selected based on the "),ewe=a("code"),P8r=o("model_type"),B8r=o(` property of the config object (either
passed as an argument or loaded from `),owe=a("code"),I8r=o("pretrained_model_name_or_path"),N8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rwe=a("code"),q8r=o("pretrained_model_name_or_path"),j8r=o(":"),D8r=l(),kc=a("ul"),d3=a("li"),twe=a("strong"),G8r=o("speech-encoder-decoder"),O8r=o(" \u2014 "),Eee=a("a"),V8r=o("SpeechEncoderDecoderModel"),X8r=o(" (Speech Encoder decoder model)"),z8r=l(),c3=a("li"),awe=a("strong"),Q8r=o("speech_to_text"),W8r=o(" \u2014 "),Cee=a("a"),U8r=o("Speech2TextForConditionalGeneration"),H8r=o(" (Speech2Text model)"),J8r=l(),m3=a("li"),nwe=a("strong"),Y8r=o("whisper"),Z8r=o(" \u2014 "),wee=a("a"),K8r=o("WhisperForConditionalGeneration"),eyr=o(" (Whisper model)"),oyr=l(),f3=a("p"),ryr=o("The model is set in evaluation mode by default using "),swe=a("code"),tyr=o("model.eval()"),ayr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lwe=a("code"),nyr=o("model.train()"),syr=l(),F(g3.$$.fragment),Uro=l(),Sc=a("h2"),h3=a("a"),iwe=a("span"),F(eS.$$.fragment),lyr=l(),dwe=a("span"),iyr=o("AutoModelForAudioXVector"),Hro=l(),or=a("div"),F(oS.$$.fragment),dyr=l(),Rc=a("p"),cyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Aee=a("a"),myr=o("from_pretrained()"),fyr=o(" class method or the "),Lee=a("a"),gyr=o("from_config()"),hyr=o(` class
method.`),uyr=l(),rS=a("p"),pyr=o("This class cannot be instantiated directly using "),cwe=a("code"),_yr=o("__init__()"),byr=o(" (throws an error)."),vyr=l(),Dt=a("div"),F(tS.$$.fragment),Fyr=l(),mwe=a("p"),Tyr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Myr=l(),Pc=a("p"),Eyr=o(`Note:
Loading a model from its configuration file does `),fwe=a("strong"),Cyr=o("not"),wyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yee=a("a"),Ayr=o("from_pretrained()"),Lyr=o(" to load the model weights."),yyr=l(),F(u3.$$.fragment),xyr=l(),Fo=a("div"),F(aS.$$.fragment),$yr=l(),gwe=a("p"),kyr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Syr=l(),Tn=a("p"),Ryr=o("The model class to instantiate is selected based on the "),hwe=a("code"),Pyr=o("model_type"),Byr=o(` property of the config object (either
passed as an argument or loaded from `),uwe=a("code"),Iyr=o("pretrained_model_name_or_path"),Nyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pwe=a("code"),qyr=o("pretrained_model_name_or_path"),jyr=o(":"),Dyr=l(),ht=a("ul"),p3=a("li"),_we=a("strong"),Gyr=o("data2vec-audio"),Oyr=o(" \u2014 "),xee=a("a"),Vyr=o("Data2VecAudioForXVector"),Xyr=o(" (Data2VecAudio model)"),zyr=l(),_3=a("li"),bwe=a("strong"),Qyr=o("unispeech-sat"),Wyr=o(" \u2014 "),$ee=a("a"),Uyr=o("UniSpeechSatForXVector"),Hyr=o(" (UniSpeechSat model)"),Jyr=l(),b3=a("li"),vwe=a("strong"),Yyr=o("wav2vec2"),Zyr=o(" \u2014 "),kee=a("a"),Kyr=o("Wav2Vec2ForXVector"),e9r=o(" (Wav2Vec2 model)"),o9r=l(),v3=a("li"),Fwe=a("strong"),r9r=o("wav2vec2-conformer"),t9r=o(" \u2014 "),See=a("a"),a9r=o("Wav2Vec2ConformerForXVector"),n9r=o(" (Wav2Vec2-Conformer model)"),s9r=l(),F3=a("li"),Twe=a("strong"),l9r=o("wavlm"),i9r=o(" \u2014 "),Ree=a("a"),d9r=o("WavLMForXVector"),c9r=o(" (WavLM model)"),m9r=l(),T3=a("p"),f9r=o("The model is set in evaluation mode by default using "),Mwe=a("code"),g9r=o("model.eval()"),h9r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ewe=a("code"),u9r=o("model.train()"),p9r=l(),F(M3.$$.fragment),Jro=l(),Bc=a("h2"),E3=a("a"),Cwe=a("span"),F(nS.$$.fragment),_9r=l(),wwe=a("span"),b9r=o("AutoModelForMaskedImageModeling"),Yro=l(),rr=a("div"),F(sS.$$.fragment),v9r=l(),Ic=a("p"),F9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Pee=a("a"),T9r=o("from_pretrained()"),M9r=o(" class method or the "),Bee=a("a"),E9r=o("from_config()"),C9r=o(` class
method.`),w9r=l(),lS=a("p"),A9r=o("This class cannot be instantiated directly using "),Awe=a("code"),L9r=o("__init__()"),y9r=o(" (throws an error)."),x9r=l(),Gt=a("div"),F(iS.$$.fragment),$9r=l(),Lwe=a("p"),k9r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),S9r=l(),Nc=a("p"),R9r=o(`Note:
Loading a model from its configuration file does `),ywe=a("strong"),P9r=o("not"),B9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iee=a("a"),I9r=o("from_pretrained()"),N9r=o(" to load the model weights."),q9r=l(),F(C3.$$.fragment),j9r=l(),To=a("div"),F(dS.$$.fragment),D9r=l(),xwe=a("p"),G9r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),O9r=l(),Mn=a("p"),V9r=o("The model class to instantiate is selected based on the "),$we=a("code"),X9r=o("model_type"),z9r=o(` property of the config object (either
passed as an argument or loaded from `),kwe=a("code"),Q9r=o("pretrained_model_name_or_path"),W9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Swe=a("code"),U9r=o("pretrained_model_name_or_path"),H9r=o(":"),J9r=l(),En=a("ul"),w3=a("li"),Rwe=a("strong"),Y9r=o("deit"),Z9r=o(" \u2014 "),Nee=a("a"),K9r=o("DeiTForMaskedImageModeling"),exr=o(" (DeiT model)"),oxr=l(),A3=a("li"),Pwe=a("strong"),rxr=o("swin"),txr=o(" \u2014 "),qee=a("a"),axr=o("SwinForMaskedImageModeling"),nxr=o(" (Swin Transformer model)"),sxr=l(),L3=a("li"),Bwe=a("strong"),lxr=o("swinv2"),ixr=o(" \u2014 "),jee=a("a"),dxr=o("Swinv2ForMaskedImageModeling"),cxr=o(" (Swin Transformer V2 model)"),mxr=l(),y3=a("li"),Iwe=a("strong"),fxr=o("vit"),gxr=o(" \u2014 "),Dee=a("a"),hxr=o("ViTForMaskedImageModeling"),uxr=o(" (ViT model)"),pxr=l(),x3=a("p"),_xr=o("The model is set in evaluation mode by default using "),Nwe=a("code"),bxr=o("model.eval()"),vxr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qwe=a("code"),Fxr=o("model.train()"),Txr=l(),F($3.$$.fragment),Zro=l(),qc=a("h2"),k3=a("a"),jwe=a("span"),F(cS.$$.fragment),Mxr=l(),Dwe=a("span"),Exr=o("AutoModelForObjectDetection"),Kro=l(),tr=a("div"),F(mS.$$.fragment),Cxr=l(),jc=a("p"),wxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Gee=a("a"),Axr=o("from_pretrained()"),Lxr=o(" class method or the "),Oee=a("a"),yxr=o("from_config()"),xxr=o(` class
method.`),$xr=l(),fS=a("p"),kxr=o("This class cannot be instantiated directly using "),Gwe=a("code"),Sxr=o("__init__()"),Rxr=o(" (throws an error)."),Pxr=l(),Ot=a("div"),F(gS.$$.fragment),Bxr=l(),Owe=a("p"),Ixr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Nxr=l(),Dc=a("p"),qxr=o(`Note:
Loading a model from its configuration file does `),Vwe=a("strong"),jxr=o("not"),Dxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vee=a("a"),Gxr=o("from_pretrained()"),Oxr=o(" to load the model weights."),Vxr=l(),F(S3.$$.fragment),Xxr=l(),Mo=a("div"),F(hS.$$.fragment),zxr=l(),Xwe=a("p"),Qxr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Wxr=l(),Cn=a("p"),Uxr=o("The model class to instantiate is selected based on the "),zwe=a("code"),Hxr=o("model_type"),Jxr=o(` property of the config object (either
passed as an argument or loaded from `),Qwe=a("code"),Yxr=o("pretrained_model_name_or_path"),Zxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wwe=a("code"),Kxr=o("pretrained_model_name_or_path"),e$r=o(":"),o$r=l(),wn=a("ul"),R3=a("li"),Uwe=a("strong"),r$r=o("conditional_detr"),t$r=o(" \u2014 "),Xee=a("a"),a$r=o("ConditionalDetrForObjectDetection"),n$r=o(" (Conditional DETR model)"),s$r=l(),P3=a("li"),Hwe=a("strong"),l$r=o("deformable_detr"),i$r=o(" \u2014 "),zee=a("a"),d$r=o("DeformableDetrForObjectDetection"),c$r=o(" (Deformable DETR model)"),m$r=l(),B3=a("li"),Jwe=a("strong"),f$r=o("detr"),g$r=o(" \u2014 "),Qee=a("a"),h$r=o("DetrForObjectDetection"),u$r=o(" (DETR model)"),p$r=l(),I3=a("li"),Ywe=a("strong"),_$r=o("yolos"),b$r=o(" \u2014 "),Wee=a("a"),v$r=o("YolosForObjectDetection"),F$r=o(" (YOLOS model)"),T$r=l(),N3=a("p"),M$r=o("The model is set in evaluation mode by default using "),Zwe=a("code"),E$r=o("model.eval()"),C$r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kwe=a("code"),w$r=o("model.train()"),A$r=l(),F(q3.$$.fragment),eto=l(),Gc=a("h2"),j3=a("a"),eAe=a("span"),F(uS.$$.fragment),L$r=l(),oAe=a("span"),y$r=o("AutoModelForImageSegmentation"),oto=l(),ar=a("div"),F(pS.$$.fragment),x$r=l(),Oc=a("p"),$$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Uee=a("a"),k$r=o("from_pretrained()"),S$r=o(" class method or the "),Hee=a("a"),R$r=o("from_config()"),P$r=o(` class
method.`),B$r=l(),_S=a("p"),I$r=o("This class cannot be instantiated directly using "),rAe=a("code"),N$r=o("__init__()"),q$r=o(" (throws an error)."),j$r=l(),Vt=a("div"),F(bS.$$.fragment),D$r=l(),tAe=a("p"),G$r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),O$r=l(),Vc=a("p"),V$r=o(`Note:
Loading a model from its configuration file does `),aAe=a("strong"),X$r=o("not"),z$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jee=a("a"),Q$r=o("from_pretrained()"),W$r=o(" to load the model weights."),U$r=l(),F(D3.$$.fragment),H$r=l(),Eo=a("div"),F(vS.$$.fragment),J$r=l(),nAe=a("p"),Y$r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Z$r=l(),An=a("p"),K$r=o("The model class to instantiate is selected based on the "),sAe=a("code"),ekr=o("model_type"),okr=o(` property of the config object (either
passed as an argument or loaded from `),lAe=a("code"),rkr=o("pretrained_model_name_or_path"),tkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iAe=a("code"),akr=o("pretrained_model_name_or_path"),nkr=o(":"),skr=l(),dAe=a("ul"),G3=a("li"),cAe=a("strong"),lkr=o("detr"),ikr=o(" \u2014 "),Yee=a("a"),dkr=o("DetrForSegmentation"),ckr=o(" (DETR model)"),mkr=l(),O3=a("p"),fkr=o("The model is set in evaluation mode by default using "),mAe=a("code"),gkr=o("model.eval()"),hkr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fAe=a("code"),ukr=o("model.train()"),pkr=l(),F(V3.$$.fragment),rto=l(),Xc=a("h2"),X3=a("a"),gAe=a("span"),F(FS.$$.fragment),_kr=l(),hAe=a("span"),bkr=o("AutoModelForSemanticSegmentation"),tto=l(),nr=a("div"),F(TS.$$.fragment),vkr=l(),zc=a("p"),Fkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Zee=a("a"),Tkr=o("from_pretrained()"),Mkr=o(" class method or the "),Kee=a("a"),Ekr=o("from_config()"),Ckr=o(` class
method.`),wkr=l(),MS=a("p"),Akr=o("This class cannot be instantiated directly using "),uAe=a("code"),Lkr=o("__init__()"),ykr=o(" (throws an error)."),xkr=l(),Xt=a("div"),F(ES.$$.fragment),$kr=l(),pAe=a("p"),kkr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Skr=l(),Qc=a("p"),Rkr=o(`Note:
Loading a model from its configuration file does `),_Ae=a("strong"),Pkr=o("not"),Bkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eoe=a("a"),Ikr=o("from_pretrained()"),Nkr=o(" to load the model weights."),qkr=l(),F(z3.$$.fragment),jkr=l(),Co=a("div"),F(CS.$$.fragment),Dkr=l(),bAe=a("p"),Gkr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Okr=l(),Ln=a("p"),Vkr=o("The model class to instantiate is selected based on the "),vAe=a("code"),Xkr=o("model_type"),zkr=o(` property of the config object (either
passed as an argument or loaded from `),FAe=a("code"),Qkr=o("pretrained_model_name_or_path"),Wkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TAe=a("code"),Ukr=o("pretrained_model_name_or_path"),Hkr=o(":"),Jkr=l(),ut=a("ul"),Q3=a("li"),MAe=a("strong"),Ykr=o("beit"),Zkr=o(" \u2014 "),ooe=a("a"),Kkr=o("BeitForSemanticSegmentation"),eSr=o(" (BEiT model)"),oSr=l(),W3=a("li"),EAe=a("strong"),rSr=o("data2vec-vision"),tSr=o(" \u2014 "),roe=a("a"),aSr=o("Data2VecVisionForSemanticSegmentation"),nSr=o(" (Data2VecVision model)"),sSr=l(),U3=a("li"),CAe=a("strong"),lSr=o("dpt"),iSr=o(" \u2014 "),toe=a("a"),dSr=o("DPTForSemanticSegmentation"),cSr=o(" (DPT model)"),mSr=l(),H3=a("li"),wAe=a("strong"),fSr=o("mobilevit"),gSr=o(" \u2014 "),aoe=a("a"),hSr=o("MobileViTForSemanticSegmentation"),uSr=o(" (MobileViT model)"),pSr=l(),J3=a("li"),AAe=a("strong"),_Sr=o("segformer"),bSr=o(" \u2014 "),noe=a("a"),vSr=o("SegformerForSemanticSegmentation"),FSr=o(" (SegFormer model)"),TSr=l(),Y3=a("p"),MSr=o("The model is set in evaluation mode by default using "),LAe=a("code"),ESr=o("model.eval()"),CSr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yAe=a("code"),wSr=o("model.train()"),ASr=l(),F(Z3.$$.fragment),ato=l(),Wc=a("h2"),K3=a("a"),xAe=a("span"),F(wS.$$.fragment),LSr=l(),$Ae=a("span"),ySr=o("AutoModelForInstanceSegmentation"),nto=l(),sr=a("div"),F(AS.$$.fragment),xSr=l(),Uc=a("p"),$Sr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),soe=a("a"),kSr=o("from_pretrained()"),SSr=o(" class method or the "),loe=a("a"),RSr=o("from_config()"),PSr=o(` class
method.`),BSr=l(),LS=a("p"),ISr=o("This class cannot be instantiated directly using "),kAe=a("code"),NSr=o("__init__()"),qSr=o(" (throws an error)."),jSr=l(),zt=a("div"),F(yS.$$.fragment),DSr=l(),SAe=a("p"),GSr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),OSr=l(),Hc=a("p"),VSr=o(`Note:
Loading a model from its configuration file does `),RAe=a("strong"),XSr=o("not"),zSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ioe=a("a"),QSr=o("from_pretrained()"),WSr=o(" to load the model weights."),USr=l(),F(e5.$$.fragment),HSr=l(),wo=a("div"),F(xS.$$.fragment),JSr=l(),PAe=a("p"),YSr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ZSr=l(),yn=a("p"),KSr=o("The model class to instantiate is selected based on the "),BAe=a("code"),eRr=o("model_type"),oRr=o(` property of the config object (either
passed as an argument or loaded from `),IAe=a("code"),rRr=o("pretrained_model_name_or_path"),tRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NAe=a("code"),aRr=o("pretrained_model_name_or_path"),nRr=o(":"),sRr=l(),qAe=a("ul"),o5=a("li"),jAe=a("strong"),lRr=o("maskformer"),iRr=o(" \u2014 "),doe=a("a"),dRr=o("MaskFormerForInstanceSegmentation"),cRr=o(" (MaskFormer model)"),mRr=l(),r5=a("p"),fRr=o("The model is set in evaluation mode by default using "),DAe=a("code"),gRr=o("model.eval()"),hRr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),GAe=a("code"),uRr=o("model.train()"),pRr=l(),F(t5.$$.fragment),sto=l(),Jc=a("h2"),a5=a("a"),OAe=a("span"),F($S.$$.fragment),_Rr=l(),VAe=a("span"),bRr=o("AutoModelForZeroShotObjectDetection"),lto=l(),lr=a("div"),F(kS.$$.fragment),vRr=l(),Yc=a("p"),FRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a zero-shot object detection head) when created
with the `),coe=a("a"),TRr=o("from_pretrained()"),MRr=o(" class method or the "),moe=a("a"),ERr=o("from_config()"),CRr=o(` class
method.`),wRr=l(),SS=a("p"),ARr=o("This class cannot be instantiated directly using "),XAe=a("code"),LRr=o("__init__()"),yRr=o(" (throws an error)."),xRr=l(),Qt=a("div"),F(RS.$$.fragment),$Rr=l(),zAe=a("p"),kRr=o("Instantiates one of the model classes of the library (with a zero-shot object detection head) from a configuration."),SRr=l(),Zc=a("p"),RRr=o(`Note:
Loading a model from its configuration file does `),QAe=a("strong"),PRr=o("not"),BRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),foe=a("a"),IRr=o("from_pretrained()"),NRr=o(" to load the model weights."),qRr=l(),F(n5.$$.fragment),jRr=l(),Ao=a("div"),F(PS.$$.fragment),DRr=l(),WAe=a("p"),GRr=o("Instantiate one of the model classes of the library (with a zero-shot object detection head) from a pretrained model."),ORr=l(),xn=a("p"),VRr=o("The model class to instantiate is selected based on the "),UAe=a("code"),XRr=o("model_type"),zRr=o(` property of the config object (either
passed as an argument or loaded from `),HAe=a("code"),QRr=o("pretrained_model_name_or_path"),WRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JAe=a("code"),URr=o("pretrained_model_name_or_path"),HRr=o(":"),JRr=l(),YAe=a("ul"),s5=a("li"),ZAe=a("strong"),YRr=o("owlvit"),ZRr=o(" \u2014 "),goe=a("a"),KRr=o("OwlViTForObjectDetection"),ePr=o(" (OWL-ViT model)"),oPr=l(),l5=a("p"),rPr=o("The model is set in evaluation mode by default using "),KAe=a("code"),tPr=o("model.eval()"),aPr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e6e=a("code"),nPr=o("model.train()"),sPr=l(),F(i5.$$.fragment),ito=l(),Kc=a("h2"),d5=a("a"),o6e=a("span"),F(BS.$$.fragment),lPr=l(),r6e=a("span"),iPr=o("TFAutoModel"),dto=l(),ir=a("div"),F(IS.$$.fragment),dPr=l(),em=a("p"),cPr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hoe=a("a"),mPr=o("from_pretrained()"),fPr=o(" class method or the "),uoe=a("a"),gPr=o("from_config()"),hPr=o(` class
method.`),uPr=l(),NS=a("p"),pPr=o("This class cannot be instantiated directly using "),t6e=a("code"),_Pr=o("__init__()"),bPr=o(" (throws an error)."),vPr=l(),Wt=a("div"),F(qS.$$.fragment),FPr=l(),a6e=a("p"),TPr=o("Instantiates one of the base model classes of the library from a configuration."),MPr=l(),om=a("p"),EPr=o(`Note:
Loading a model from its configuration file does `),n6e=a("strong"),CPr=o("not"),wPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),poe=a("a"),APr=o("from_pretrained()"),LPr=o(" to load the model weights."),yPr=l(),F(c5.$$.fragment),xPr=l(),qr=a("div"),F(jS.$$.fragment),$Pr=l(),s6e=a("p"),kPr=o("Instantiate one of the base model classes of the library from a pretrained model."),SPr=l(),$n=a("p"),RPr=o("The model class to instantiate is selected based on the "),l6e=a("code"),PPr=o("model_type"),BPr=o(` property of the config object (either
passed as an argument or loaded from `),i6e=a("code"),IPr=o("pretrained_model_name_or_path"),NPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d6e=a("code"),qPr=o("pretrained_model_name_or_path"),jPr=o(":"),DPr=l(),P=a("ul"),m5=a("li"),c6e=a("strong"),GPr=o("albert"),OPr=o(" \u2014 "),_oe=a("a"),VPr=o("TFAlbertModel"),XPr=o(" (ALBERT model)"),zPr=l(),f5=a("li"),m6e=a("strong"),QPr=o("bart"),WPr=o(" \u2014 "),boe=a("a"),UPr=o("TFBartModel"),HPr=o(" (BART model)"),JPr=l(),g5=a("li"),f6e=a("strong"),YPr=o("bert"),ZPr=o(" \u2014 "),voe=a("a"),KPr=o("TFBertModel"),eBr=o(" (BERT model)"),oBr=l(),h5=a("li"),g6e=a("strong"),rBr=o("blenderbot"),tBr=o(" \u2014 "),Foe=a("a"),aBr=o("TFBlenderbotModel"),nBr=o(" (Blenderbot model)"),sBr=l(),u5=a("li"),h6e=a("strong"),lBr=o("blenderbot-small"),iBr=o(" \u2014 "),Toe=a("a"),dBr=o("TFBlenderbotSmallModel"),cBr=o(" (BlenderbotSmall model)"),mBr=l(),p5=a("li"),u6e=a("strong"),fBr=o("camembert"),gBr=o(" \u2014 "),Moe=a("a"),hBr=o("TFCamembertModel"),uBr=o(" (CamemBERT model)"),pBr=l(),_5=a("li"),p6e=a("strong"),_Br=o("clip"),bBr=o(" \u2014 "),Eoe=a("a"),vBr=o("TFCLIPModel"),FBr=o(" (CLIP model)"),TBr=l(),b5=a("li"),_6e=a("strong"),MBr=o("convbert"),EBr=o(" \u2014 "),Coe=a("a"),CBr=o("TFConvBertModel"),wBr=o(" (ConvBERT model)"),ABr=l(),v5=a("li"),b6e=a("strong"),LBr=o("convnext"),yBr=o(" \u2014 "),woe=a("a"),xBr=o("TFConvNextModel"),$Br=o(" (ConvNeXT model)"),kBr=l(),F5=a("li"),v6e=a("strong"),SBr=o("ctrl"),RBr=o(" \u2014 "),Aoe=a("a"),PBr=o("TFCTRLModel"),BBr=o(" (CTRL model)"),IBr=l(),T5=a("li"),F6e=a("strong"),NBr=o("cvt"),qBr=o(" \u2014 "),Loe=a("a"),jBr=o("TFCvtModel"),DBr=o(" (CvT model)"),GBr=l(),M5=a("li"),T6e=a("strong"),OBr=o("data2vec-vision"),VBr=o(" \u2014 "),yoe=a("a"),XBr=o("TFData2VecVisionModel"),zBr=o(" (Data2VecVision model)"),QBr=l(),E5=a("li"),M6e=a("strong"),WBr=o("deberta"),UBr=o(" \u2014 "),xoe=a("a"),HBr=o("TFDebertaModel"),JBr=o(" (DeBERTa model)"),YBr=l(),C5=a("li"),E6e=a("strong"),ZBr=o("deberta-v2"),KBr=o(" \u2014 "),$oe=a("a"),eIr=o("TFDebertaV2Model"),oIr=o(" (DeBERTa-v2 model)"),rIr=l(),w5=a("li"),C6e=a("strong"),tIr=o("deit"),aIr=o(" \u2014 "),koe=a("a"),nIr=o("TFDeiTModel"),sIr=o(" (DeiT model)"),lIr=l(),A5=a("li"),w6e=a("strong"),iIr=o("distilbert"),dIr=o(" \u2014 "),Soe=a("a"),cIr=o("TFDistilBertModel"),mIr=o(" (DistilBERT model)"),fIr=l(),L5=a("li"),A6e=a("strong"),gIr=o("dpr"),hIr=o(" \u2014 "),Roe=a("a"),uIr=o("TFDPRQuestionEncoder"),pIr=o(" (DPR model)"),_Ir=l(),y5=a("li"),L6e=a("strong"),bIr=o("electra"),vIr=o(" \u2014 "),Poe=a("a"),FIr=o("TFElectraModel"),TIr=o(" (ELECTRA model)"),MIr=l(),x5=a("li"),y6e=a("strong"),EIr=o("flaubert"),CIr=o(" \u2014 "),Boe=a("a"),wIr=o("TFFlaubertModel"),AIr=o(" (FlauBERT model)"),LIr=l(),Al=a("li"),x6e=a("strong"),yIr=o("funnel"),xIr=o(" \u2014 "),Ioe=a("a"),$Ir=o("TFFunnelModel"),kIr=o(" or "),Noe=a("a"),SIr=o("TFFunnelBaseModel"),RIr=o(" (Funnel Transformer model)"),PIr=l(),$5=a("li"),$6e=a("strong"),BIr=o("gpt2"),IIr=o(" \u2014 "),qoe=a("a"),NIr=o("TFGPT2Model"),qIr=o(" (OpenAI GPT-2 model)"),jIr=l(),k5=a("li"),k6e=a("strong"),DIr=o("gptj"),GIr=o(" \u2014 "),joe=a("a"),OIr=o("TFGPTJModel"),VIr=o(" (GPT-J model)"),XIr=l(),S5=a("li"),S6e=a("strong"),zIr=o("groupvit"),QIr=o(" \u2014 "),Doe=a("a"),WIr=o("TFGroupViTModel"),UIr=o(" (GroupViT model)"),HIr=l(),R5=a("li"),R6e=a("strong"),JIr=o("hubert"),YIr=o(" \u2014 "),Goe=a("a"),ZIr=o("TFHubertModel"),KIr=o(" (Hubert model)"),eNr=l(),P5=a("li"),P6e=a("strong"),oNr=o("layoutlm"),rNr=o(" \u2014 "),Ooe=a("a"),tNr=o("TFLayoutLMModel"),aNr=o(" (LayoutLM model)"),nNr=l(),B5=a("li"),B6e=a("strong"),sNr=o("layoutlmv3"),lNr=o(" \u2014 "),Voe=a("a"),iNr=o("TFLayoutLMv3Model"),dNr=o(" (LayoutLMv3 model)"),cNr=l(),I5=a("li"),I6e=a("strong"),mNr=o("led"),fNr=o(" \u2014 "),Xoe=a("a"),gNr=o("TFLEDModel"),hNr=o(" (LED model)"),uNr=l(),N5=a("li"),N6e=a("strong"),pNr=o("longformer"),_Nr=o(" \u2014 "),zoe=a("a"),bNr=o("TFLongformerModel"),vNr=o(" (Longformer model)"),FNr=l(),q5=a("li"),q6e=a("strong"),TNr=o("lxmert"),MNr=o(" \u2014 "),Qoe=a("a"),ENr=o("TFLxmertModel"),CNr=o(" (LXMERT model)"),wNr=l(),j5=a("li"),j6e=a("strong"),ANr=o("marian"),LNr=o(" \u2014 "),Woe=a("a"),yNr=o("TFMarianModel"),xNr=o(" (Marian model)"),$Nr=l(),D5=a("li"),D6e=a("strong"),kNr=o("mbart"),SNr=o(" \u2014 "),Uoe=a("a"),RNr=o("TFMBartModel"),PNr=o(" (mBART model)"),BNr=l(),G5=a("li"),G6e=a("strong"),INr=o("mobilebert"),NNr=o(" \u2014 "),Hoe=a("a"),qNr=o("TFMobileBertModel"),jNr=o(" (MobileBERT model)"),DNr=l(),O5=a("li"),O6e=a("strong"),GNr=o("mobilevit"),ONr=o(" \u2014 "),Joe=a("a"),VNr=o("TFMobileViTModel"),XNr=o(" (MobileViT model)"),zNr=l(),V5=a("li"),V6e=a("strong"),QNr=o("mpnet"),WNr=o(" \u2014 "),Yoe=a("a"),UNr=o("TFMPNetModel"),HNr=o(" (MPNet model)"),JNr=l(),X5=a("li"),X6e=a("strong"),YNr=o("mt5"),ZNr=o(" \u2014 "),Zoe=a("a"),KNr=o("TFMT5Model"),eqr=o(" (MT5 model)"),oqr=l(),z5=a("li"),z6e=a("strong"),rqr=o("openai-gpt"),tqr=o(" \u2014 "),Koe=a("a"),aqr=o("TFOpenAIGPTModel"),nqr=o(" (OpenAI GPT model)"),sqr=l(),Q5=a("li"),Q6e=a("strong"),lqr=o("opt"),iqr=o(" \u2014 "),ere=a("a"),dqr=o("TFOPTModel"),cqr=o(" (OPT model)"),mqr=l(),W5=a("li"),W6e=a("strong"),fqr=o("pegasus"),gqr=o(" \u2014 "),ore=a("a"),hqr=o("TFPegasusModel"),uqr=o(" (Pegasus model)"),pqr=l(),U5=a("li"),U6e=a("strong"),_qr=o("regnet"),bqr=o(" \u2014 "),rre=a("a"),vqr=o("TFRegNetModel"),Fqr=o(" (RegNet model)"),Tqr=l(),H5=a("li"),H6e=a("strong"),Mqr=o("rembert"),Eqr=o(" \u2014 "),tre=a("a"),Cqr=o("TFRemBertModel"),wqr=o(" (RemBERT model)"),Aqr=l(),J5=a("li"),J6e=a("strong"),Lqr=o("resnet"),yqr=o(" \u2014 "),are=a("a"),xqr=o("TFResNetModel"),$qr=o(" (ResNet model)"),kqr=l(),Y5=a("li"),Y6e=a("strong"),Sqr=o("roberta"),Rqr=o(" \u2014 "),nre=a("a"),Pqr=o("TFRobertaModel"),Bqr=o(" (RoBERTa model)"),Iqr=l(),Z5=a("li"),Z6e=a("strong"),Nqr=o("roformer"),qqr=o(" \u2014 "),sre=a("a"),jqr=o("TFRoFormerModel"),Dqr=o(" (RoFormer model)"),Gqr=l(),K5=a("li"),K6e=a("strong"),Oqr=o("segformer"),Vqr=o(" \u2014 "),lre=a("a"),Xqr=o("TFSegformerModel"),zqr=o(" (SegFormer model)"),Qqr=l(),e0=a("li"),e7e=a("strong"),Wqr=o("speech_to_text"),Uqr=o(" \u2014 "),ire=a("a"),Hqr=o("TFSpeech2TextModel"),Jqr=o(" (Speech2Text model)"),Yqr=l(),o0=a("li"),o7e=a("strong"),Zqr=o("swin"),Kqr=o(" \u2014 "),dre=a("a"),ejr=o("TFSwinModel"),ojr=o(" (Swin Transformer model)"),rjr=l(),r0=a("li"),r7e=a("strong"),tjr=o("t5"),ajr=o(" \u2014 "),cre=a("a"),njr=o("TFT5Model"),sjr=o(" (T5 model)"),ljr=l(),t0=a("li"),t7e=a("strong"),ijr=o("tapas"),djr=o(" \u2014 "),mre=a("a"),cjr=o("TFTapasModel"),mjr=o(" (TAPAS model)"),fjr=l(),a0=a("li"),a7e=a("strong"),gjr=o("transfo-xl"),hjr=o(" \u2014 "),fre=a("a"),ujr=o("TFTransfoXLModel"),pjr=o(" (Transformer-XL model)"),_jr=l(),n0=a("li"),n7e=a("strong"),bjr=o("vit"),vjr=o(" \u2014 "),gre=a("a"),Fjr=o("TFViTModel"),Tjr=o(" (ViT model)"),Mjr=l(),s0=a("li"),s7e=a("strong"),Ejr=o("vit_mae"),Cjr=o(" \u2014 "),hre=a("a"),wjr=o("TFViTMAEModel"),Ajr=o(" (ViTMAE model)"),Ljr=l(),l0=a("li"),l7e=a("strong"),yjr=o("wav2vec2"),xjr=o(" \u2014 "),ure=a("a"),$jr=o("TFWav2Vec2Model"),kjr=o(" (Wav2Vec2 model)"),Sjr=l(),i0=a("li"),i7e=a("strong"),Rjr=o("whisper"),Pjr=o(" \u2014 "),pre=a("a"),Bjr=o("TFWhisperModel"),Ijr=o(" (Whisper model)"),Njr=l(),d0=a("li"),d7e=a("strong"),qjr=o("xglm"),jjr=o(" \u2014 "),_re=a("a"),Djr=o("TFXGLMModel"),Gjr=o(" (XGLM model)"),Ojr=l(),c0=a("li"),c7e=a("strong"),Vjr=o("xlm"),Xjr=o(" \u2014 "),bre=a("a"),zjr=o("TFXLMModel"),Qjr=o(" (XLM model)"),Wjr=l(),m0=a("li"),m7e=a("strong"),Ujr=o("xlm-roberta"),Hjr=o(" \u2014 "),vre=a("a"),Jjr=o("TFXLMRobertaModel"),Yjr=o(" (XLM-RoBERTa model)"),Zjr=l(),f0=a("li"),f7e=a("strong"),Kjr=o("xlnet"),eDr=o(" \u2014 "),Fre=a("a"),oDr=o("TFXLNetModel"),rDr=o(" (XLNet model)"),tDr=l(),F(g0.$$.fragment),cto=l(),rm=a("h2"),h0=a("a"),g7e=a("span"),F(DS.$$.fragment),aDr=l(),h7e=a("span"),nDr=o("TFAutoModelForPreTraining"),mto=l(),dr=a("div"),F(GS.$$.fragment),sDr=l(),tm=a("p"),lDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Tre=a("a"),iDr=o("from_pretrained()"),dDr=o(" class method or the "),Mre=a("a"),cDr=o("from_config()"),mDr=o(` class
method.`),fDr=l(),OS=a("p"),gDr=o("This class cannot be instantiated directly using "),u7e=a("code"),hDr=o("__init__()"),uDr=o(" (throws an error)."),pDr=l(),Ut=a("div"),F(VS.$$.fragment),_Dr=l(),p7e=a("p"),bDr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vDr=l(),am=a("p"),FDr=o(`Note:
Loading a model from its configuration file does `),_7e=a("strong"),TDr=o("not"),MDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ere=a("a"),EDr=o("from_pretrained()"),CDr=o(" to load the model weights."),wDr=l(),F(u0.$$.fragment),ADr=l(),jr=a("div"),F(XS.$$.fragment),LDr=l(),b7e=a("p"),yDr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xDr=l(),kn=a("p"),$Dr=o("The model class to instantiate is selected based on the "),v7e=a("code"),kDr=o("model_type"),SDr=o(` property of the config object (either
passed as an argument or loaded from `),F7e=a("code"),RDr=o("pretrained_model_name_or_path"),PDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T7e=a("code"),BDr=o("pretrained_model_name_or_path"),IDr=o(":"),NDr=l(),le=a("ul"),p0=a("li"),M7e=a("strong"),qDr=o("albert"),jDr=o(" \u2014 "),Cre=a("a"),DDr=o("TFAlbertForPreTraining"),GDr=o(" (ALBERT model)"),ODr=l(),_0=a("li"),E7e=a("strong"),VDr=o("bart"),XDr=o(" \u2014 "),wre=a("a"),zDr=o("TFBartForConditionalGeneration"),QDr=o(" (BART model)"),WDr=l(),b0=a("li"),C7e=a("strong"),UDr=o("bert"),HDr=o(" \u2014 "),Are=a("a"),JDr=o("TFBertForPreTraining"),YDr=o(" (BERT model)"),ZDr=l(),v0=a("li"),w7e=a("strong"),KDr=o("camembert"),eGr=o(" \u2014 "),Lre=a("a"),oGr=o("TFCamembertForMaskedLM"),rGr=o(" (CamemBERT model)"),tGr=l(),F0=a("li"),A7e=a("strong"),aGr=o("ctrl"),nGr=o(" \u2014 "),yre=a("a"),sGr=o("TFCTRLLMHeadModel"),lGr=o(" (CTRL model)"),iGr=l(),T0=a("li"),L7e=a("strong"),dGr=o("distilbert"),cGr=o(" \u2014 "),xre=a("a"),mGr=o("TFDistilBertForMaskedLM"),fGr=o(" (DistilBERT model)"),gGr=l(),M0=a("li"),y7e=a("strong"),hGr=o("electra"),uGr=o(" \u2014 "),$re=a("a"),pGr=o("TFElectraForPreTraining"),_Gr=o(" (ELECTRA model)"),bGr=l(),E0=a("li"),x7e=a("strong"),vGr=o("flaubert"),FGr=o(" \u2014 "),kre=a("a"),TGr=o("TFFlaubertWithLMHeadModel"),MGr=o(" (FlauBERT model)"),EGr=l(),C0=a("li"),$7e=a("strong"),CGr=o("funnel"),wGr=o(" \u2014 "),Sre=a("a"),AGr=o("TFFunnelForPreTraining"),LGr=o(" (Funnel Transformer model)"),yGr=l(),w0=a("li"),k7e=a("strong"),xGr=o("gpt2"),$Gr=o(" \u2014 "),Rre=a("a"),kGr=o("TFGPT2LMHeadModel"),SGr=o(" (OpenAI GPT-2 model)"),RGr=l(),A0=a("li"),S7e=a("strong"),PGr=o("layoutlm"),BGr=o(" \u2014 "),Pre=a("a"),IGr=o("TFLayoutLMForMaskedLM"),NGr=o(" (LayoutLM model)"),qGr=l(),L0=a("li"),R7e=a("strong"),jGr=o("lxmert"),DGr=o(" \u2014 "),Bre=a("a"),GGr=o("TFLxmertForPreTraining"),OGr=o(" (LXMERT model)"),VGr=l(),y0=a("li"),P7e=a("strong"),XGr=o("mobilebert"),zGr=o(" \u2014 "),Ire=a("a"),QGr=o("TFMobileBertForPreTraining"),WGr=o(" (MobileBERT model)"),UGr=l(),x0=a("li"),B7e=a("strong"),HGr=o("mpnet"),JGr=o(" \u2014 "),Nre=a("a"),YGr=o("TFMPNetForMaskedLM"),ZGr=o(" (MPNet model)"),KGr=l(),$0=a("li"),I7e=a("strong"),eOr=o("openai-gpt"),oOr=o(" \u2014 "),qre=a("a"),rOr=o("TFOpenAIGPTLMHeadModel"),tOr=o(" (OpenAI GPT model)"),aOr=l(),k0=a("li"),N7e=a("strong"),nOr=o("roberta"),sOr=o(" \u2014 "),jre=a("a"),lOr=o("TFRobertaForMaskedLM"),iOr=o(" (RoBERTa model)"),dOr=l(),S0=a("li"),q7e=a("strong"),cOr=o("t5"),mOr=o(" \u2014 "),Dre=a("a"),fOr=o("TFT5ForConditionalGeneration"),gOr=o(" (T5 model)"),hOr=l(),R0=a("li"),j7e=a("strong"),uOr=o("tapas"),pOr=o(" \u2014 "),Gre=a("a"),_Or=o("TFTapasForMaskedLM"),bOr=o(" (TAPAS model)"),vOr=l(),P0=a("li"),D7e=a("strong"),FOr=o("transfo-xl"),TOr=o(" \u2014 "),Ore=a("a"),MOr=o("TFTransfoXLLMHeadModel"),EOr=o(" (Transformer-XL model)"),COr=l(),B0=a("li"),G7e=a("strong"),wOr=o("vit_mae"),AOr=o(" \u2014 "),Vre=a("a"),LOr=o("TFViTMAEForPreTraining"),yOr=o(" (ViTMAE model)"),xOr=l(),I0=a("li"),O7e=a("strong"),$Or=o("xlm"),kOr=o(" \u2014 "),Xre=a("a"),SOr=o("TFXLMWithLMHeadModel"),ROr=o(" (XLM model)"),POr=l(),N0=a("li"),V7e=a("strong"),BOr=o("xlm-roberta"),IOr=o(" \u2014 "),zre=a("a"),NOr=o("TFXLMRobertaForMaskedLM"),qOr=o(" (XLM-RoBERTa model)"),jOr=l(),q0=a("li"),X7e=a("strong"),DOr=o("xlnet"),GOr=o(" \u2014 "),Qre=a("a"),OOr=o("TFXLNetLMHeadModel"),VOr=o(" (XLNet model)"),XOr=l(),F(j0.$$.fragment),fto=l(),nm=a("h2"),D0=a("a"),z7e=a("span"),F(zS.$$.fragment),zOr=l(),Q7e=a("span"),QOr=o("TFAutoModelForCausalLM"),gto=l(),cr=a("div"),F(QS.$$.fragment),WOr=l(),sm=a("p"),UOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Wre=a("a"),HOr=o("from_pretrained()"),JOr=o(" class method or the "),Ure=a("a"),YOr=o("from_config()"),ZOr=o(` class
method.`),KOr=l(),WS=a("p"),eVr=o("This class cannot be instantiated directly using "),W7e=a("code"),oVr=o("__init__()"),rVr=o(" (throws an error)."),tVr=l(),Ht=a("div"),F(US.$$.fragment),aVr=l(),U7e=a("p"),nVr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),sVr=l(),lm=a("p"),lVr=o(`Note:
Loading a model from its configuration file does `),H7e=a("strong"),iVr=o("not"),dVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hre=a("a"),cVr=o("from_pretrained()"),mVr=o(" to load the model weights."),fVr=l(),F(G0.$$.fragment),gVr=l(),Dr=a("div"),F(HS.$$.fragment),hVr=l(),J7e=a("p"),uVr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),pVr=l(),Sn=a("p"),_Vr=o("The model class to instantiate is selected based on the "),Y7e=a("code"),bVr=o("model_type"),vVr=o(` property of the config object (either
passed as an argument or loaded from `),Z7e=a("code"),FVr=o("pretrained_model_name_or_path"),TVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K7e=a("code"),MVr=o("pretrained_model_name_or_path"),EVr=o(":"),CVr=l(),Me=a("ul"),O0=a("li"),eLe=a("strong"),wVr=o("bert"),AVr=o(" \u2014 "),Jre=a("a"),LVr=o("TFBertLMHeadModel"),yVr=o(" (BERT model)"),xVr=l(),V0=a("li"),oLe=a("strong"),$Vr=o("camembert"),kVr=o(" \u2014 "),Yre=a("a"),SVr=o("TFCamembertForCausalLM"),RVr=o(" (CamemBERT model)"),PVr=l(),X0=a("li"),rLe=a("strong"),BVr=o("ctrl"),IVr=o(" \u2014 "),Zre=a("a"),NVr=o("TFCTRLLMHeadModel"),qVr=o(" (CTRL model)"),jVr=l(),z0=a("li"),tLe=a("strong"),DVr=o("gpt2"),GVr=o(" \u2014 "),Kre=a("a"),OVr=o("TFGPT2LMHeadModel"),VVr=o(" (OpenAI GPT-2 model)"),XVr=l(),Q0=a("li"),aLe=a("strong"),zVr=o("gptj"),QVr=o(" \u2014 "),ete=a("a"),WVr=o("TFGPTJForCausalLM"),UVr=o(" (GPT-J model)"),HVr=l(),W0=a("li"),nLe=a("strong"),JVr=o("openai-gpt"),YVr=o(" \u2014 "),ote=a("a"),ZVr=o("TFOpenAIGPTLMHeadModel"),KVr=o(" (OpenAI GPT model)"),eXr=l(),U0=a("li"),sLe=a("strong"),oXr=o("opt"),rXr=o(" \u2014 "),rte=a("a"),tXr=o("TFOPTForCausalLM"),aXr=o(" (OPT model)"),nXr=l(),H0=a("li"),lLe=a("strong"),sXr=o("rembert"),lXr=o(" \u2014 "),tte=a("a"),iXr=o("TFRemBertForCausalLM"),dXr=o(" (RemBERT model)"),cXr=l(),J0=a("li"),iLe=a("strong"),mXr=o("roberta"),fXr=o(" \u2014 "),ate=a("a"),gXr=o("TFRobertaForCausalLM"),hXr=o(" (RoBERTa model)"),uXr=l(),Y0=a("li"),dLe=a("strong"),pXr=o("roformer"),_Xr=o(" \u2014 "),nte=a("a"),bXr=o("TFRoFormerForCausalLM"),vXr=o(" (RoFormer model)"),FXr=l(),Z0=a("li"),cLe=a("strong"),TXr=o("transfo-xl"),MXr=o(" \u2014 "),ste=a("a"),EXr=o("TFTransfoXLLMHeadModel"),CXr=o(" (Transformer-XL model)"),wXr=l(),K0=a("li"),mLe=a("strong"),AXr=o("xglm"),LXr=o(" \u2014 "),lte=a("a"),yXr=o("TFXGLMForCausalLM"),xXr=o(" (XGLM model)"),$Xr=l(),ew=a("li"),fLe=a("strong"),kXr=o("xlm"),SXr=o(" \u2014 "),ite=a("a"),RXr=o("TFXLMWithLMHeadModel"),PXr=o(" (XLM model)"),BXr=l(),ow=a("li"),gLe=a("strong"),IXr=o("xlnet"),NXr=o(" \u2014 "),dte=a("a"),qXr=o("TFXLNetLMHeadModel"),jXr=o(" (XLNet model)"),DXr=l(),F(rw.$$.fragment),hto=l(),im=a("h2"),tw=a("a"),hLe=a("span"),F(JS.$$.fragment),GXr=l(),uLe=a("span"),OXr=o("TFAutoModelForImageClassification"),uto=l(),mr=a("div"),F(YS.$$.fragment),VXr=l(),dm=a("p"),XXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cte=a("a"),zXr=o("from_pretrained()"),QXr=o(" class method or the "),mte=a("a"),WXr=o("from_config()"),UXr=o(` class
method.`),HXr=l(),ZS=a("p"),JXr=o("This class cannot be instantiated directly using "),pLe=a("code"),YXr=o("__init__()"),ZXr=o(" (throws an error)."),KXr=l(),Jt=a("div"),F(KS.$$.fragment),ezr=l(),_Le=a("p"),ozr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rzr=l(),cm=a("p"),tzr=o(`Note:
Loading a model from its configuration file does `),bLe=a("strong"),azr=o("not"),nzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fte=a("a"),szr=o("from_pretrained()"),lzr=o(" to load the model weights."),izr=l(),F(aw.$$.fragment),dzr=l(),Gr=a("div"),F(eR.$$.fragment),czr=l(),vLe=a("p"),mzr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fzr=l(),Rn=a("p"),gzr=o("The model class to instantiate is selected based on the "),FLe=a("code"),hzr=o("model_type"),uzr=o(` property of the config object (either
passed as an argument or loaded from `),TLe=a("code"),pzr=o("pretrained_model_name_or_path"),_zr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MLe=a("code"),bzr=o("pretrained_model_name_or_path"),vzr=o(":"),Fzr=l(),ye=a("ul"),nw=a("li"),ELe=a("strong"),Tzr=o("convnext"),Mzr=o(" \u2014 "),gte=a("a"),Ezr=o("TFConvNextForImageClassification"),Czr=o(" (ConvNeXT model)"),wzr=l(),sw=a("li"),CLe=a("strong"),Azr=o("cvt"),Lzr=o(" \u2014 "),hte=a("a"),yzr=o("TFCvtForImageClassification"),xzr=o(" (CvT model)"),$zr=l(),lw=a("li"),wLe=a("strong"),kzr=o("data2vec-vision"),Szr=o(" \u2014 "),ute=a("a"),Rzr=o("TFData2VecVisionForImageClassification"),Pzr=o(" (Data2VecVision model)"),Bzr=l(),Ll=a("li"),ALe=a("strong"),Izr=o("deit"),Nzr=o(" \u2014 "),pte=a("a"),qzr=o("TFDeiTForImageClassification"),jzr=o(" or "),_te=a("a"),Dzr=o("TFDeiTForImageClassificationWithTeacher"),Gzr=o(" (DeiT model)"),Ozr=l(),iw=a("li"),LLe=a("strong"),Vzr=o("mobilevit"),Xzr=o(" \u2014 "),bte=a("a"),zzr=o("TFMobileViTForImageClassification"),Qzr=o(" (MobileViT model)"),Wzr=l(),dw=a("li"),yLe=a("strong"),Uzr=o("regnet"),Hzr=o(" \u2014 "),vte=a("a"),Jzr=o("TFRegNetForImageClassification"),Yzr=o(" (RegNet model)"),Zzr=l(),cw=a("li"),xLe=a("strong"),Kzr=o("resnet"),eQr=o(" \u2014 "),Fte=a("a"),oQr=o("TFResNetForImageClassification"),rQr=o(" (ResNet model)"),tQr=l(),mw=a("li"),$Le=a("strong"),aQr=o("segformer"),nQr=o(" \u2014 "),Tte=a("a"),sQr=o("TFSegformerForImageClassification"),lQr=o(" (SegFormer model)"),iQr=l(),fw=a("li"),kLe=a("strong"),dQr=o("swin"),cQr=o(" \u2014 "),Mte=a("a"),mQr=o("TFSwinForImageClassification"),fQr=o(" (Swin Transformer model)"),gQr=l(),gw=a("li"),SLe=a("strong"),hQr=o("vit"),uQr=o(" \u2014 "),Ete=a("a"),pQr=o("TFViTForImageClassification"),_Qr=o(" (ViT model)"),bQr=l(),F(hw.$$.fragment),pto=l(),mm=a("h2"),uw=a("a"),RLe=a("span"),F(oR.$$.fragment),vQr=l(),PLe=a("span"),FQr=o("TFAutoModelForSemanticSegmentation"),_to=l(),fr=a("div"),F(rR.$$.fragment),TQr=l(),fm=a("p"),MQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Cte=a("a"),EQr=o("from_pretrained()"),CQr=o(" class method or the "),wte=a("a"),wQr=o("from_config()"),AQr=o(` class
method.`),LQr=l(),tR=a("p"),yQr=o("This class cannot be instantiated directly using "),BLe=a("code"),xQr=o("__init__()"),$Qr=o(" (throws an error)."),kQr=l(),Yt=a("div"),F(aR.$$.fragment),SQr=l(),ILe=a("p"),RQr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),PQr=l(),gm=a("p"),BQr=o(`Note:
Loading a model from its configuration file does `),NLe=a("strong"),IQr=o("not"),NQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ate=a("a"),qQr=o("from_pretrained()"),jQr=o(" to load the model weights."),DQr=l(),F(pw.$$.fragment),GQr=l(),Or=a("div"),F(nR.$$.fragment),OQr=l(),qLe=a("p"),VQr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),XQr=l(),Pn=a("p"),zQr=o("The model class to instantiate is selected based on the "),jLe=a("code"),QQr=o("model_type"),WQr=o(` property of the config object (either
passed as an argument or loaded from `),DLe=a("code"),UQr=o("pretrained_model_name_or_path"),HQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GLe=a("code"),JQr=o("pretrained_model_name_or_path"),YQr=o(":"),ZQr=l(),hm=a("ul"),_w=a("li"),OLe=a("strong"),KQr=o("data2vec-vision"),eWr=o(" \u2014 "),Lte=a("a"),oWr=o("TFData2VecVisionForSemanticSegmentation"),rWr=o(" (Data2VecVision model)"),tWr=l(),bw=a("li"),VLe=a("strong"),aWr=o("mobilevit"),nWr=o(" \u2014 "),yte=a("a"),sWr=o("TFMobileViTForSemanticSegmentation"),lWr=o(" (MobileViT model)"),iWr=l(),vw=a("li"),XLe=a("strong"),dWr=o("segformer"),cWr=o(" \u2014 "),xte=a("a"),mWr=o("TFSegformerForSemanticSegmentation"),fWr=o(" (SegFormer model)"),gWr=l(),F(Fw.$$.fragment),bto=l(),um=a("h2"),Tw=a("a"),zLe=a("span"),F(sR.$$.fragment),hWr=l(),QLe=a("span"),uWr=o("TFAutoModelForMaskedLM"),vto=l(),gr=a("div"),F(lR.$$.fragment),pWr=l(),pm=a("p"),_Wr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$te=a("a"),bWr=o("from_pretrained()"),vWr=o(" class method or the "),kte=a("a"),FWr=o("from_config()"),TWr=o(` class
method.`),MWr=l(),iR=a("p"),EWr=o("This class cannot be instantiated directly using "),WLe=a("code"),CWr=o("__init__()"),wWr=o(" (throws an error)."),AWr=l(),Zt=a("div"),F(dR.$$.fragment),LWr=l(),ULe=a("p"),yWr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xWr=l(),_m=a("p"),$Wr=o(`Note:
Loading a model from its configuration file does `),HLe=a("strong"),kWr=o("not"),SWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ste=a("a"),RWr=o("from_pretrained()"),PWr=o(" to load the model weights."),BWr=l(),F(Mw.$$.fragment),IWr=l(),Vr=a("div"),F(cR.$$.fragment),NWr=l(),JLe=a("p"),qWr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jWr=l(),Bn=a("p"),DWr=o("The model class to instantiate is selected based on the "),YLe=a("code"),GWr=o("model_type"),OWr=o(` property of the config object (either
passed as an argument or loaded from `),ZLe=a("code"),VWr=o("pretrained_model_name_or_path"),XWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KLe=a("code"),zWr=o("pretrained_model_name_or_path"),QWr=o(":"),WWr=l(),ge=a("ul"),Ew=a("li"),e8e=a("strong"),UWr=o("albert"),HWr=o(" \u2014 "),Rte=a("a"),JWr=o("TFAlbertForMaskedLM"),YWr=o(" (ALBERT model)"),ZWr=l(),Cw=a("li"),o8e=a("strong"),KWr=o("bert"),eUr=o(" \u2014 "),Pte=a("a"),oUr=o("TFBertForMaskedLM"),rUr=o(" (BERT model)"),tUr=l(),ww=a("li"),r8e=a("strong"),aUr=o("camembert"),nUr=o(" \u2014 "),Bte=a("a"),sUr=o("TFCamembertForMaskedLM"),lUr=o(" (CamemBERT model)"),iUr=l(),Aw=a("li"),t8e=a("strong"),dUr=o("convbert"),cUr=o(" \u2014 "),Ite=a("a"),mUr=o("TFConvBertForMaskedLM"),fUr=o(" (ConvBERT model)"),gUr=l(),Lw=a("li"),a8e=a("strong"),hUr=o("deberta"),uUr=o(" \u2014 "),Nte=a("a"),pUr=o("TFDebertaForMaskedLM"),_Ur=o(" (DeBERTa model)"),bUr=l(),yw=a("li"),n8e=a("strong"),vUr=o("deberta-v2"),FUr=o(" \u2014 "),qte=a("a"),TUr=o("TFDebertaV2ForMaskedLM"),MUr=o(" (DeBERTa-v2 model)"),EUr=l(),xw=a("li"),s8e=a("strong"),CUr=o("distilbert"),wUr=o(" \u2014 "),jte=a("a"),AUr=o("TFDistilBertForMaskedLM"),LUr=o(" (DistilBERT model)"),yUr=l(),$w=a("li"),l8e=a("strong"),xUr=o("electra"),$Ur=o(" \u2014 "),Dte=a("a"),kUr=o("TFElectraForMaskedLM"),SUr=o(" (ELECTRA model)"),RUr=l(),kw=a("li"),i8e=a("strong"),PUr=o("flaubert"),BUr=o(" \u2014 "),Gte=a("a"),IUr=o("TFFlaubertWithLMHeadModel"),NUr=o(" (FlauBERT model)"),qUr=l(),Sw=a("li"),d8e=a("strong"),jUr=o("funnel"),DUr=o(" \u2014 "),Ote=a("a"),GUr=o("TFFunnelForMaskedLM"),OUr=o(" (Funnel Transformer model)"),VUr=l(),Rw=a("li"),c8e=a("strong"),XUr=o("layoutlm"),zUr=o(" \u2014 "),Vte=a("a"),QUr=o("TFLayoutLMForMaskedLM"),WUr=o(" (LayoutLM model)"),UUr=l(),Pw=a("li"),m8e=a("strong"),HUr=o("longformer"),JUr=o(" \u2014 "),Xte=a("a"),YUr=o("TFLongformerForMaskedLM"),ZUr=o(" (Longformer model)"),KUr=l(),Bw=a("li"),f8e=a("strong"),eHr=o("mobilebert"),oHr=o(" \u2014 "),zte=a("a"),rHr=o("TFMobileBertForMaskedLM"),tHr=o(" (MobileBERT model)"),aHr=l(),Iw=a("li"),g8e=a("strong"),nHr=o("mpnet"),sHr=o(" \u2014 "),Qte=a("a"),lHr=o("TFMPNetForMaskedLM"),iHr=o(" (MPNet model)"),dHr=l(),Nw=a("li"),h8e=a("strong"),cHr=o("rembert"),mHr=o(" \u2014 "),Wte=a("a"),fHr=o("TFRemBertForMaskedLM"),gHr=o(" (RemBERT model)"),hHr=l(),qw=a("li"),u8e=a("strong"),uHr=o("roberta"),pHr=o(" \u2014 "),Ute=a("a"),_Hr=o("TFRobertaForMaskedLM"),bHr=o(" (RoBERTa model)"),vHr=l(),jw=a("li"),p8e=a("strong"),FHr=o("roformer"),THr=o(" \u2014 "),Hte=a("a"),MHr=o("TFRoFormerForMaskedLM"),EHr=o(" (RoFormer model)"),CHr=l(),Dw=a("li"),_8e=a("strong"),wHr=o("tapas"),AHr=o(" \u2014 "),Jte=a("a"),LHr=o("TFTapasForMaskedLM"),yHr=o(" (TAPAS model)"),xHr=l(),Gw=a("li"),b8e=a("strong"),$Hr=o("xlm"),kHr=o(" \u2014 "),Yte=a("a"),SHr=o("TFXLMWithLMHeadModel"),RHr=o(" (XLM model)"),PHr=l(),Ow=a("li"),v8e=a("strong"),BHr=o("xlm-roberta"),IHr=o(" \u2014 "),Zte=a("a"),NHr=o("TFXLMRobertaForMaskedLM"),qHr=o(" (XLM-RoBERTa model)"),jHr=l(),F(Vw.$$.fragment),Fto=l(),bm=a("h2"),Xw=a("a"),F8e=a("span"),F(mR.$$.fragment),DHr=l(),T8e=a("span"),GHr=o("TFAutoModelForSeq2SeqLM"),Tto=l(),hr=a("div"),F(fR.$$.fragment),OHr=l(),vm=a("p"),VHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Kte=a("a"),XHr=o("from_pretrained()"),zHr=o(" class method or the "),eae=a("a"),QHr=o("from_config()"),WHr=o(` class
method.`),UHr=l(),gR=a("p"),HHr=o("This class cannot be instantiated directly using "),M8e=a("code"),JHr=o("__init__()"),YHr=o(" (throws an error)."),ZHr=l(),Kt=a("div"),F(hR.$$.fragment),KHr=l(),E8e=a("p"),eJr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),oJr=l(),Fm=a("p"),rJr=o(`Note:
Loading a model from its configuration file does `),C8e=a("strong"),tJr=o("not"),aJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oae=a("a"),nJr=o("from_pretrained()"),sJr=o(" to load the model weights."),lJr=l(),F(zw.$$.fragment),iJr=l(),Xr=a("div"),F(uR.$$.fragment),dJr=l(),w8e=a("p"),cJr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mJr=l(),In=a("p"),fJr=o("The model class to instantiate is selected based on the "),A8e=a("code"),gJr=o("model_type"),hJr=o(` property of the config object (either
passed as an argument or loaded from `),L8e=a("code"),uJr=o("pretrained_model_name_or_path"),pJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y8e=a("code"),_Jr=o("pretrained_model_name_or_path"),bJr=o(":"),vJr=l(),xe=a("ul"),Qw=a("li"),x8e=a("strong"),FJr=o("bart"),TJr=o(" \u2014 "),rae=a("a"),MJr=o("TFBartForConditionalGeneration"),EJr=o(" (BART model)"),CJr=l(),Ww=a("li"),$8e=a("strong"),wJr=o("blenderbot"),AJr=o(" \u2014 "),tae=a("a"),LJr=o("TFBlenderbotForConditionalGeneration"),yJr=o(" (Blenderbot model)"),xJr=l(),Uw=a("li"),k8e=a("strong"),$Jr=o("blenderbot-small"),kJr=o(" \u2014 "),aae=a("a"),SJr=o("TFBlenderbotSmallForConditionalGeneration"),RJr=o(" (BlenderbotSmall model)"),PJr=l(),Hw=a("li"),S8e=a("strong"),BJr=o("encoder-decoder"),IJr=o(" \u2014 "),nae=a("a"),NJr=o("TFEncoderDecoderModel"),qJr=o(" (Encoder decoder model)"),jJr=l(),Jw=a("li"),R8e=a("strong"),DJr=o("led"),GJr=o(" \u2014 "),sae=a("a"),OJr=o("TFLEDForConditionalGeneration"),VJr=o(" (LED model)"),XJr=l(),Yw=a("li"),P8e=a("strong"),zJr=o("marian"),QJr=o(" \u2014 "),lae=a("a"),WJr=o("TFMarianMTModel"),UJr=o(" (Marian model)"),HJr=l(),Zw=a("li"),B8e=a("strong"),JJr=o("mbart"),YJr=o(" \u2014 "),iae=a("a"),ZJr=o("TFMBartForConditionalGeneration"),KJr=o(" (mBART model)"),eYr=l(),Kw=a("li"),I8e=a("strong"),oYr=o("mt5"),rYr=o(" \u2014 "),dae=a("a"),tYr=o("TFMT5ForConditionalGeneration"),aYr=o(" (MT5 model)"),nYr=l(),eA=a("li"),N8e=a("strong"),sYr=o("pegasus"),lYr=o(" \u2014 "),cae=a("a"),iYr=o("TFPegasusForConditionalGeneration"),dYr=o(" (Pegasus model)"),cYr=l(),oA=a("li"),q8e=a("strong"),mYr=o("t5"),fYr=o(" \u2014 "),mae=a("a"),gYr=o("TFT5ForConditionalGeneration"),hYr=o(" (T5 model)"),uYr=l(),F(rA.$$.fragment),Mto=l(),Tm=a("h2"),tA=a("a"),j8e=a("span"),F(pR.$$.fragment),pYr=l(),D8e=a("span"),_Yr=o("TFAutoModelForSequenceClassification"),Eto=l(),ur=a("div"),F(_R.$$.fragment),bYr=l(),Mm=a("p"),vYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fae=a("a"),FYr=o("from_pretrained()"),TYr=o(" class method or the "),gae=a("a"),MYr=o("from_config()"),EYr=o(` class
method.`),CYr=l(),bR=a("p"),wYr=o("This class cannot be instantiated directly using "),G8e=a("code"),AYr=o("__init__()"),LYr=o(" (throws an error)."),yYr=l(),ea=a("div"),F(vR.$$.fragment),xYr=l(),O8e=a("p"),$Yr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kYr=l(),Em=a("p"),SYr=o(`Note:
Loading a model from its configuration file does `),V8e=a("strong"),RYr=o("not"),PYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hae=a("a"),BYr=o("from_pretrained()"),IYr=o(" to load the model weights."),NYr=l(),F(aA.$$.fragment),qYr=l(),zr=a("div"),F(FR.$$.fragment),jYr=l(),X8e=a("p"),DYr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),GYr=l(),Nn=a("p"),OYr=o("The model class to instantiate is selected based on the "),z8e=a("code"),VYr=o("model_type"),XYr=o(` property of the config object (either
passed as an argument or loaded from `),Q8e=a("code"),zYr=o("pretrained_model_name_or_path"),QYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W8e=a("code"),WYr=o("pretrained_model_name_or_path"),UYr=o(":"),HYr=l(),re=a("ul"),nA=a("li"),U8e=a("strong"),JYr=o("albert"),YYr=o(" \u2014 "),uae=a("a"),ZYr=o("TFAlbertForSequenceClassification"),KYr=o(" (ALBERT model)"),eZr=l(),sA=a("li"),H8e=a("strong"),oZr=o("bert"),rZr=o(" \u2014 "),pae=a("a"),tZr=o("TFBertForSequenceClassification"),aZr=o(" (BERT model)"),nZr=l(),lA=a("li"),J8e=a("strong"),sZr=o("camembert"),lZr=o(" \u2014 "),_ae=a("a"),iZr=o("TFCamembertForSequenceClassification"),dZr=o(" (CamemBERT model)"),cZr=l(),iA=a("li"),Y8e=a("strong"),mZr=o("convbert"),fZr=o(" \u2014 "),bae=a("a"),gZr=o("TFConvBertForSequenceClassification"),hZr=o(" (ConvBERT model)"),uZr=l(),dA=a("li"),Z8e=a("strong"),pZr=o("ctrl"),_Zr=o(" \u2014 "),vae=a("a"),bZr=o("TFCTRLForSequenceClassification"),vZr=o(" (CTRL model)"),FZr=l(),cA=a("li"),K8e=a("strong"),TZr=o("deberta"),MZr=o(" \u2014 "),Fae=a("a"),EZr=o("TFDebertaForSequenceClassification"),CZr=o(" (DeBERTa model)"),wZr=l(),mA=a("li"),eye=a("strong"),AZr=o("deberta-v2"),LZr=o(" \u2014 "),Tae=a("a"),yZr=o("TFDebertaV2ForSequenceClassification"),xZr=o(" (DeBERTa-v2 model)"),$Zr=l(),fA=a("li"),oye=a("strong"),kZr=o("distilbert"),SZr=o(" \u2014 "),Mae=a("a"),RZr=o("TFDistilBertForSequenceClassification"),PZr=o(" (DistilBERT model)"),BZr=l(),gA=a("li"),rye=a("strong"),IZr=o("electra"),NZr=o(" \u2014 "),Eae=a("a"),qZr=o("TFElectraForSequenceClassification"),jZr=o(" (ELECTRA model)"),DZr=l(),hA=a("li"),tye=a("strong"),GZr=o("flaubert"),OZr=o(" \u2014 "),Cae=a("a"),VZr=o("TFFlaubertForSequenceClassification"),XZr=o(" (FlauBERT model)"),zZr=l(),uA=a("li"),aye=a("strong"),QZr=o("funnel"),WZr=o(" \u2014 "),wae=a("a"),UZr=o("TFFunnelForSequenceClassification"),HZr=o(" (Funnel Transformer model)"),JZr=l(),pA=a("li"),nye=a("strong"),YZr=o("gpt2"),ZZr=o(" \u2014 "),Aae=a("a"),KZr=o("TFGPT2ForSequenceClassification"),eKr=o(" (OpenAI GPT-2 model)"),oKr=l(),_A=a("li"),sye=a("strong"),rKr=o("gptj"),tKr=o(" \u2014 "),Lae=a("a"),aKr=o("TFGPTJForSequenceClassification"),nKr=o(" (GPT-J model)"),sKr=l(),bA=a("li"),lye=a("strong"),lKr=o("layoutlm"),iKr=o(" \u2014 "),yae=a("a"),dKr=o("TFLayoutLMForSequenceClassification"),cKr=o(" (LayoutLM model)"),mKr=l(),vA=a("li"),iye=a("strong"),fKr=o("layoutlmv3"),gKr=o(" \u2014 "),xae=a("a"),hKr=o("TFLayoutLMv3ForSequenceClassification"),uKr=o(" (LayoutLMv3 model)"),pKr=l(),FA=a("li"),dye=a("strong"),_Kr=o("longformer"),bKr=o(" \u2014 "),$ae=a("a"),vKr=o("TFLongformerForSequenceClassification"),FKr=o(" (Longformer model)"),TKr=l(),TA=a("li"),cye=a("strong"),MKr=o("mobilebert"),EKr=o(" \u2014 "),kae=a("a"),CKr=o("TFMobileBertForSequenceClassification"),wKr=o(" (MobileBERT model)"),AKr=l(),MA=a("li"),mye=a("strong"),LKr=o("mpnet"),yKr=o(" \u2014 "),Sae=a("a"),xKr=o("TFMPNetForSequenceClassification"),$Kr=o(" (MPNet model)"),kKr=l(),EA=a("li"),fye=a("strong"),SKr=o("openai-gpt"),RKr=o(" \u2014 "),Rae=a("a"),PKr=o("TFOpenAIGPTForSequenceClassification"),BKr=o(" (OpenAI GPT model)"),IKr=l(),CA=a("li"),gye=a("strong"),NKr=o("rembert"),qKr=o(" \u2014 "),Pae=a("a"),jKr=o("TFRemBertForSequenceClassification"),DKr=o(" (RemBERT model)"),GKr=l(),wA=a("li"),hye=a("strong"),OKr=o("roberta"),VKr=o(" \u2014 "),Bae=a("a"),XKr=o("TFRobertaForSequenceClassification"),zKr=o(" (RoBERTa model)"),QKr=l(),AA=a("li"),uye=a("strong"),WKr=o("roformer"),UKr=o(" \u2014 "),Iae=a("a"),HKr=o("TFRoFormerForSequenceClassification"),JKr=o(" (RoFormer model)"),YKr=l(),LA=a("li"),pye=a("strong"),ZKr=o("tapas"),KKr=o(" \u2014 "),Nae=a("a"),eet=o("TFTapasForSequenceClassification"),oet=o(" (TAPAS model)"),ret=l(),yA=a("li"),_ye=a("strong"),tet=o("transfo-xl"),aet=o(" \u2014 "),qae=a("a"),net=o("TFTransfoXLForSequenceClassification"),set=o(" (Transformer-XL model)"),iet=l(),xA=a("li"),bye=a("strong"),det=o("xlm"),cet=o(" \u2014 "),jae=a("a"),met=o("TFXLMForSequenceClassification"),fet=o(" (XLM model)"),get=l(),$A=a("li"),vye=a("strong"),het=o("xlm-roberta"),uet=o(" \u2014 "),Dae=a("a"),pet=o("TFXLMRobertaForSequenceClassification"),_et=o(" (XLM-RoBERTa model)"),bet=l(),kA=a("li"),Fye=a("strong"),vet=o("xlnet"),Fet=o(" \u2014 "),Gae=a("a"),Tet=o("TFXLNetForSequenceClassification"),Met=o(" (XLNet model)"),Eet=l(),F(SA.$$.fragment),Cto=l(),Cm=a("h2"),RA=a("a"),Tye=a("span"),F(TR.$$.fragment),Cet=l(),Mye=a("span"),wet=o("TFAutoModelForMultipleChoice"),wto=l(),pr=a("div"),F(MR.$$.fragment),Aet=l(),wm=a("p"),Let=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Oae=a("a"),yet=o("from_pretrained()"),xet=o(" class method or the "),Vae=a("a"),$et=o("from_config()"),ket=o(` class
method.`),Set=l(),ER=a("p"),Ret=o("This class cannot be instantiated directly using "),Eye=a("code"),Pet=o("__init__()"),Bet=o(" (throws an error)."),Iet=l(),oa=a("div"),F(CR.$$.fragment),Net=l(),Cye=a("p"),qet=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),jet=l(),Am=a("p"),Det=o(`Note:
Loading a model from its configuration file does `),wye=a("strong"),Get=o("not"),Oet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xae=a("a"),Vet=o("from_pretrained()"),Xet=o(" to load the model weights."),zet=l(),F(PA.$$.fragment),Qet=l(),Qr=a("div"),F(wR.$$.fragment),Wet=l(),Aye=a("p"),Uet=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Het=l(),qn=a("p"),Jet=o("The model class to instantiate is selected based on the "),Lye=a("code"),Yet=o("model_type"),Zet=o(` property of the config object (either
passed as an argument or loaded from `),yye=a("code"),Ket=o("pretrained_model_name_or_path"),eot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xye=a("code"),oot=o("pretrained_model_name_or_path"),rot=o(":"),tot=l(),ve=a("ul"),BA=a("li"),$ye=a("strong"),aot=o("albert"),not=o(" \u2014 "),zae=a("a"),sot=o("TFAlbertForMultipleChoice"),lot=o(" (ALBERT model)"),iot=l(),IA=a("li"),kye=a("strong"),dot=o("bert"),cot=o(" \u2014 "),Qae=a("a"),mot=o("TFBertForMultipleChoice"),fot=o(" (BERT model)"),got=l(),NA=a("li"),Sye=a("strong"),hot=o("camembert"),uot=o(" \u2014 "),Wae=a("a"),pot=o("TFCamembertForMultipleChoice"),_ot=o(" (CamemBERT model)"),bot=l(),qA=a("li"),Rye=a("strong"),vot=o("convbert"),Fot=o(" \u2014 "),Uae=a("a"),Tot=o("TFConvBertForMultipleChoice"),Mot=o(" (ConvBERT model)"),Eot=l(),jA=a("li"),Pye=a("strong"),Cot=o("distilbert"),wot=o(" \u2014 "),Hae=a("a"),Aot=o("TFDistilBertForMultipleChoice"),Lot=o(" (DistilBERT model)"),yot=l(),DA=a("li"),Bye=a("strong"),xot=o("electra"),$ot=o(" \u2014 "),Jae=a("a"),kot=o("TFElectraForMultipleChoice"),Sot=o(" (ELECTRA model)"),Rot=l(),GA=a("li"),Iye=a("strong"),Pot=o("flaubert"),Bot=o(" \u2014 "),Yae=a("a"),Iot=o("TFFlaubertForMultipleChoice"),Not=o(" (FlauBERT model)"),qot=l(),OA=a("li"),Nye=a("strong"),jot=o("funnel"),Dot=o(" \u2014 "),Zae=a("a"),Got=o("TFFunnelForMultipleChoice"),Oot=o(" (Funnel Transformer model)"),Vot=l(),VA=a("li"),qye=a("strong"),Xot=o("longformer"),zot=o(" \u2014 "),Kae=a("a"),Qot=o("TFLongformerForMultipleChoice"),Wot=o(" (Longformer model)"),Uot=l(),XA=a("li"),jye=a("strong"),Hot=o("mobilebert"),Jot=o(" \u2014 "),ene=a("a"),Yot=o("TFMobileBertForMultipleChoice"),Zot=o(" (MobileBERT model)"),Kot=l(),zA=a("li"),Dye=a("strong"),ert=o("mpnet"),ort=o(" \u2014 "),one=a("a"),rrt=o("TFMPNetForMultipleChoice"),trt=o(" (MPNet model)"),art=l(),QA=a("li"),Gye=a("strong"),nrt=o("rembert"),srt=o(" \u2014 "),rne=a("a"),lrt=o("TFRemBertForMultipleChoice"),irt=o(" (RemBERT model)"),drt=l(),WA=a("li"),Oye=a("strong"),crt=o("roberta"),mrt=o(" \u2014 "),tne=a("a"),frt=o("TFRobertaForMultipleChoice"),grt=o(" (RoBERTa model)"),hrt=l(),UA=a("li"),Vye=a("strong"),urt=o("roformer"),prt=o(" \u2014 "),ane=a("a"),_rt=o("TFRoFormerForMultipleChoice"),brt=o(" (RoFormer model)"),vrt=l(),HA=a("li"),Xye=a("strong"),Frt=o("xlm"),Trt=o(" \u2014 "),nne=a("a"),Mrt=o("TFXLMForMultipleChoice"),Ert=o(" (XLM model)"),Crt=l(),JA=a("li"),zye=a("strong"),wrt=o("xlm-roberta"),Art=o(" \u2014 "),sne=a("a"),Lrt=o("TFXLMRobertaForMultipleChoice"),yrt=o(" (XLM-RoBERTa model)"),xrt=l(),YA=a("li"),Qye=a("strong"),$rt=o("xlnet"),krt=o(" \u2014 "),lne=a("a"),Srt=o("TFXLNetForMultipleChoice"),Rrt=o(" (XLNet model)"),Prt=l(),F(ZA.$$.fragment),Ato=l(),Lm=a("h2"),KA=a("a"),Wye=a("span"),F(AR.$$.fragment),Brt=l(),Uye=a("span"),Irt=o("TFAutoModelForNextSentencePrediction"),Lto=l(),_r=a("div"),F(LR.$$.fragment),Nrt=l(),ym=a("p"),qrt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ine=a("a"),jrt=o("from_pretrained()"),Drt=o(" class method or the "),dne=a("a"),Grt=o("from_config()"),Ort=o(` class
method.`),Vrt=l(),yR=a("p"),Xrt=o("This class cannot be instantiated directly using "),Hye=a("code"),zrt=o("__init__()"),Qrt=o(" (throws an error)."),Wrt=l(),ra=a("div"),F(xR.$$.fragment),Urt=l(),Jye=a("p"),Hrt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Jrt=l(),xm=a("p"),Yrt=o(`Note:
Loading a model from its configuration file does `),Yye=a("strong"),Zrt=o("not"),Krt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cne=a("a"),ett=o("from_pretrained()"),ott=o(" to load the model weights."),rtt=l(),F(e6.$$.fragment),ttt=l(),Wr=a("div"),F($R.$$.fragment),att=l(),Zye=a("p"),ntt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),stt=l(),jn=a("p"),ltt=o("The model class to instantiate is selected based on the "),Kye=a("code"),itt=o("model_type"),dtt=o(` property of the config object (either
passed as an argument or loaded from `),e9e=a("code"),ctt=o("pretrained_model_name_or_path"),mtt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o9e=a("code"),ftt=o("pretrained_model_name_or_path"),gtt=o(":"),htt=l(),kR=a("ul"),o6=a("li"),r9e=a("strong"),utt=o("bert"),ptt=o(" \u2014 "),mne=a("a"),_tt=o("TFBertForNextSentencePrediction"),btt=o(" (BERT model)"),vtt=l(),r6=a("li"),t9e=a("strong"),Ftt=o("mobilebert"),Ttt=o(" \u2014 "),fne=a("a"),Mtt=o("TFMobileBertForNextSentencePrediction"),Ett=o(" (MobileBERT model)"),Ctt=l(),F(t6.$$.fragment),yto=l(),$m=a("h2"),a6=a("a"),a9e=a("span"),F(SR.$$.fragment),wtt=l(),n9e=a("span"),Att=o("TFAutoModelForTableQuestionAnswering"),xto=l(),br=a("div"),F(RR.$$.fragment),Ltt=l(),km=a("p"),ytt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gne=a("a"),xtt=o("from_pretrained()"),$tt=o(" class method or the "),hne=a("a"),ktt=o("from_config()"),Stt=o(` class
method.`),Rtt=l(),PR=a("p"),Ptt=o("This class cannot be instantiated directly using "),s9e=a("code"),Btt=o("__init__()"),Itt=o(" (throws an error)."),Ntt=l(),ta=a("div"),F(BR.$$.fragment),qtt=l(),l9e=a("p"),jtt=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Dtt=l(),Sm=a("p"),Gtt=o(`Note:
Loading a model from its configuration file does `),i9e=a("strong"),Ott=o("not"),Vtt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),une=a("a"),Xtt=o("from_pretrained()"),ztt=o(" to load the model weights."),Qtt=l(),F(n6.$$.fragment),Wtt=l(),Ur=a("div"),F(IR.$$.fragment),Utt=l(),d9e=a("p"),Htt=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Jtt=l(),Dn=a("p"),Ytt=o("The model class to instantiate is selected based on the "),c9e=a("code"),Ztt=o("model_type"),Ktt=o(` property of the config object (either
passed as an argument or loaded from `),m9e=a("code"),eat=o("pretrained_model_name_or_path"),oat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f9e=a("code"),rat=o("pretrained_model_name_or_path"),tat=o(":"),aat=l(),g9e=a("ul"),s6=a("li"),h9e=a("strong"),nat=o("tapas"),sat=o(" \u2014 "),pne=a("a"),lat=o("TFTapasForQuestionAnswering"),iat=o(" (TAPAS model)"),dat=l(),F(l6.$$.fragment),$to=l(),Rm=a("h2"),i6=a("a"),u9e=a("span"),F(NR.$$.fragment),cat=l(),p9e=a("span"),mat=o("TFAutoModelForDocumentQuestionAnswering"),kto=l(),vr=a("div"),F(qR.$$.fragment),fat=l(),Pm=a("p"),gat=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),_ne=a("a"),hat=o("from_pretrained()"),uat=o(" class method or the "),bne=a("a"),pat=o("from_config()"),_at=o(` class
method.`),bat=l(),jR=a("p"),vat=o("This class cannot be instantiated directly using "),_9e=a("code"),Fat=o("__init__()"),Tat=o(" (throws an error)."),Mat=l(),aa=a("div"),F(DR.$$.fragment),Eat=l(),b9e=a("p"),Cat=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),wat=l(),Bm=a("p"),Aat=o(`Note:
Loading a model from its configuration file does `),v9e=a("strong"),Lat=o("not"),yat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vne=a("a"),xat=o("from_pretrained()"),$at=o(" to load the model weights."),kat=l(),F(d6.$$.fragment),Sat=l(),Hr=a("div"),F(GR.$$.fragment),Rat=l(),F9e=a("p"),Pat=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),Bat=l(),Gn=a("p"),Iat=o("The model class to instantiate is selected based on the "),T9e=a("code"),Nat=o("model_type"),qat=o(` property of the config object (either
passed as an argument or loaded from `),M9e=a("code"),jat=o("pretrained_model_name_or_path"),Dat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E9e=a("code"),Gat=o("pretrained_model_name_or_path"),Oat=o(":"),Vat=l(),C9e=a("ul"),c6=a("li"),w9e=a("strong"),Xat=o("layoutlm"),zat=o(" \u2014 "),Fne=a("a"),Qat=o("TFLayoutLMForQuestionAnswering"),Wat=o(" (LayoutLM model)"),Uat=l(),F(m6.$$.fragment),Sto=l(),Im=a("h2"),f6=a("a"),A9e=a("span"),F(OR.$$.fragment),Hat=l(),L9e=a("span"),Jat=o("TFAutoModelForTokenClassification"),Rto=l(),Fr=a("div"),F(VR.$$.fragment),Yat=l(),Nm=a("p"),Zat=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Tne=a("a"),Kat=o("from_pretrained()"),ent=o(" class method or the "),Mne=a("a"),ont=o("from_config()"),rnt=o(` class
method.`),tnt=l(),XR=a("p"),ant=o("This class cannot be instantiated directly using "),y9e=a("code"),nnt=o("__init__()"),snt=o(" (throws an error)."),lnt=l(),na=a("div"),F(zR.$$.fragment),int=l(),x9e=a("p"),dnt=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),cnt=l(),qm=a("p"),mnt=o(`Note:
Loading a model from its configuration file does `),$9e=a("strong"),fnt=o("not"),gnt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ene=a("a"),hnt=o("from_pretrained()"),unt=o(" to load the model weights."),pnt=l(),F(g6.$$.fragment),_nt=l(),Jr=a("div"),F(QR.$$.fragment),bnt=l(),k9e=a("p"),vnt=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Fnt=l(),On=a("p"),Tnt=o("The model class to instantiate is selected based on the "),S9e=a("code"),Mnt=o("model_type"),Ent=o(` property of the config object (either
passed as an argument or loaded from `),R9e=a("code"),Cnt=o("pretrained_model_name_or_path"),wnt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P9e=a("code"),Ant=o("pretrained_model_name_or_path"),Lnt=o(":"),ynt=l(),ce=a("ul"),h6=a("li"),B9e=a("strong"),xnt=o("albert"),$nt=o(" \u2014 "),Cne=a("a"),knt=o("TFAlbertForTokenClassification"),Snt=o(" (ALBERT model)"),Rnt=l(),u6=a("li"),I9e=a("strong"),Pnt=o("bert"),Bnt=o(" \u2014 "),wne=a("a"),Int=o("TFBertForTokenClassification"),Nnt=o(" (BERT model)"),qnt=l(),p6=a("li"),N9e=a("strong"),jnt=o("camembert"),Dnt=o(" \u2014 "),Ane=a("a"),Gnt=o("TFCamembertForTokenClassification"),Ont=o(" (CamemBERT model)"),Vnt=l(),_6=a("li"),q9e=a("strong"),Xnt=o("convbert"),znt=o(" \u2014 "),Lne=a("a"),Qnt=o("TFConvBertForTokenClassification"),Wnt=o(" (ConvBERT model)"),Unt=l(),b6=a("li"),j9e=a("strong"),Hnt=o("deberta"),Jnt=o(" \u2014 "),yne=a("a"),Ynt=o("TFDebertaForTokenClassification"),Znt=o(" (DeBERTa model)"),Knt=l(),v6=a("li"),D9e=a("strong"),est=o("deberta-v2"),ost=o(" \u2014 "),xne=a("a"),rst=o("TFDebertaV2ForTokenClassification"),tst=o(" (DeBERTa-v2 model)"),ast=l(),F6=a("li"),G9e=a("strong"),nst=o("distilbert"),sst=o(" \u2014 "),$ne=a("a"),lst=o("TFDistilBertForTokenClassification"),ist=o(" (DistilBERT model)"),dst=l(),T6=a("li"),O9e=a("strong"),cst=o("electra"),mst=o(" \u2014 "),kne=a("a"),fst=o("TFElectraForTokenClassification"),gst=o(" (ELECTRA model)"),hst=l(),M6=a("li"),V9e=a("strong"),ust=o("flaubert"),pst=o(" \u2014 "),Sne=a("a"),_st=o("TFFlaubertForTokenClassification"),bst=o(" (FlauBERT model)"),vst=l(),E6=a("li"),X9e=a("strong"),Fst=o("funnel"),Tst=o(" \u2014 "),Rne=a("a"),Mst=o("TFFunnelForTokenClassification"),Est=o(" (Funnel Transformer model)"),Cst=l(),C6=a("li"),z9e=a("strong"),wst=o("layoutlm"),Ast=o(" \u2014 "),Pne=a("a"),Lst=o("TFLayoutLMForTokenClassification"),yst=o(" (LayoutLM model)"),xst=l(),w6=a("li"),Q9e=a("strong"),$st=o("layoutlmv3"),kst=o(" \u2014 "),Bne=a("a"),Sst=o("TFLayoutLMv3ForTokenClassification"),Rst=o(" (LayoutLMv3 model)"),Pst=l(),A6=a("li"),W9e=a("strong"),Bst=o("longformer"),Ist=o(" \u2014 "),Ine=a("a"),Nst=o("TFLongformerForTokenClassification"),qst=o(" (Longformer model)"),jst=l(),L6=a("li"),U9e=a("strong"),Dst=o("mobilebert"),Gst=o(" \u2014 "),Nne=a("a"),Ost=o("TFMobileBertForTokenClassification"),Vst=o(" (MobileBERT model)"),Xst=l(),y6=a("li"),H9e=a("strong"),zst=o("mpnet"),Qst=o(" \u2014 "),qne=a("a"),Wst=o("TFMPNetForTokenClassification"),Ust=o(" (MPNet model)"),Hst=l(),x6=a("li"),J9e=a("strong"),Jst=o("rembert"),Yst=o(" \u2014 "),jne=a("a"),Zst=o("TFRemBertForTokenClassification"),Kst=o(" (RemBERT model)"),elt=l(),$6=a("li"),Y9e=a("strong"),olt=o("roberta"),rlt=o(" \u2014 "),Dne=a("a"),tlt=o("TFRobertaForTokenClassification"),alt=o(" (RoBERTa model)"),nlt=l(),k6=a("li"),Z9e=a("strong"),slt=o("roformer"),llt=o(" \u2014 "),Gne=a("a"),ilt=o("TFRoFormerForTokenClassification"),dlt=o(" (RoFormer model)"),clt=l(),S6=a("li"),K9e=a("strong"),mlt=o("xlm"),flt=o(" \u2014 "),One=a("a"),glt=o("TFXLMForTokenClassification"),hlt=o(" (XLM model)"),ult=l(),R6=a("li"),exe=a("strong"),plt=o("xlm-roberta"),_lt=o(" \u2014 "),Vne=a("a"),blt=o("TFXLMRobertaForTokenClassification"),vlt=o(" (XLM-RoBERTa model)"),Flt=l(),P6=a("li"),oxe=a("strong"),Tlt=o("xlnet"),Mlt=o(" \u2014 "),Xne=a("a"),Elt=o("TFXLNetForTokenClassification"),Clt=o(" (XLNet model)"),wlt=l(),F(B6.$$.fragment),Pto=l(),jm=a("h2"),I6=a("a"),rxe=a("span"),F(WR.$$.fragment),Alt=l(),txe=a("span"),Llt=o("TFAutoModelForQuestionAnswering"),Bto=l(),Tr=a("div"),F(UR.$$.fragment),ylt=l(),Dm=a("p"),xlt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zne=a("a"),$lt=o("from_pretrained()"),klt=o(" class method or the "),Qne=a("a"),Slt=o("from_config()"),Rlt=o(` class
method.`),Plt=l(),HR=a("p"),Blt=o("This class cannot be instantiated directly using "),axe=a("code"),Ilt=o("__init__()"),Nlt=o(" (throws an error)."),qlt=l(),sa=a("div"),F(JR.$$.fragment),jlt=l(),nxe=a("p"),Dlt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Glt=l(),Gm=a("p"),Olt=o(`Note:
Loading a model from its configuration file does `),sxe=a("strong"),Vlt=o("not"),Xlt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wne=a("a"),zlt=o("from_pretrained()"),Qlt=o(" to load the model weights."),Wlt=l(),F(N6.$$.fragment),Ult=l(),Yr=a("div"),F(YR.$$.fragment),Hlt=l(),lxe=a("p"),Jlt=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ylt=l(),Vn=a("p"),Zlt=o("The model class to instantiate is selected based on the "),ixe=a("code"),Klt=o("model_type"),eit=o(` property of the config object (either
passed as an argument or loaded from `),dxe=a("code"),oit=o("pretrained_model_name_or_path"),rit=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cxe=a("code"),tit=o("pretrained_model_name_or_path"),ait=o(":"),nit=l(),me=a("ul"),q6=a("li"),mxe=a("strong"),sit=o("albert"),lit=o(" \u2014 "),Une=a("a"),iit=o("TFAlbertForQuestionAnswering"),dit=o(" (ALBERT model)"),cit=l(),j6=a("li"),fxe=a("strong"),mit=o("bert"),fit=o(" \u2014 "),Hne=a("a"),git=o("TFBertForQuestionAnswering"),hit=o(" (BERT model)"),uit=l(),D6=a("li"),gxe=a("strong"),pit=o("camembert"),_it=o(" \u2014 "),Jne=a("a"),bit=o("TFCamembertForQuestionAnswering"),vit=o(" (CamemBERT model)"),Fit=l(),G6=a("li"),hxe=a("strong"),Tit=o("convbert"),Mit=o(" \u2014 "),Yne=a("a"),Eit=o("TFConvBertForQuestionAnswering"),Cit=o(" (ConvBERT model)"),wit=l(),O6=a("li"),uxe=a("strong"),Ait=o("deberta"),Lit=o(" \u2014 "),Zne=a("a"),yit=o("TFDebertaForQuestionAnswering"),xit=o(" (DeBERTa model)"),$it=l(),V6=a("li"),pxe=a("strong"),kit=o("deberta-v2"),Sit=o(" \u2014 "),Kne=a("a"),Rit=o("TFDebertaV2ForQuestionAnswering"),Pit=o(" (DeBERTa-v2 model)"),Bit=l(),X6=a("li"),_xe=a("strong"),Iit=o("distilbert"),Nit=o(" \u2014 "),ese=a("a"),qit=o("TFDistilBertForQuestionAnswering"),jit=o(" (DistilBERT model)"),Dit=l(),z6=a("li"),bxe=a("strong"),Git=o("electra"),Oit=o(" \u2014 "),ose=a("a"),Vit=o("TFElectraForQuestionAnswering"),Xit=o(" (ELECTRA model)"),zit=l(),Q6=a("li"),vxe=a("strong"),Qit=o("flaubert"),Wit=o(" \u2014 "),rse=a("a"),Uit=o("TFFlaubertForQuestionAnsweringSimple"),Hit=o(" (FlauBERT model)"),Jit=l(),W6=a("li"),Fxe=a("strong"),Yit=o("funnel"),Zit=o(" \u2014 "),tse=a("a"),Kit=o("TFFunnelForQuestionAnswering"),edt=o(" (Funnel Transformer model)"),odt=l(),U6=a("li"),Txe=a("strong"),rdt=o("gptj"),tdt=o(" \u2014 "),ase=a("a"),adt=o("TFGPTJForQuestionAnswering"),ndt=o(" (GPT-J model)"),sdt=l(),H6=a("li"),Mxe=a("strong"),ldt=o("layoutlmv3"),idt=o(" \u2014 "),nse=a("a"),ddt=o("TFLayoutLMv3ForQuestionAnswering"),cdt=o(" (LayoutLMv3 model)"),mdt=l(),J6=a("li"),Exe=a("strong"),fdt=o("longformer"),gdt=o(" \u2014 "),sse=a("a"),hdt=o("TFLongformerForQuestionAnswering"),udt=o(" (Longformer model)"),pdt=l(),Y6=a("li"),Cxe=a("strong"),_dt=o("mobilebert"),bdt=o(" \u2014 "),lse=a("a"),vdt=o("TFMobileBertForQuestionAnswering"),Fdt=o(" (MobileBERT model)"),Tdt=l(),Z6=a("li"),wxe=a("strong"),Mdt=o("mpnet"),Edt=o(" \u2014 "),ise=a("a"),Cdt=o("TFMPNetForQuestionAnswering"),wdt=o(" (MPNet model)"),Adt=l(),K6=a("li"),Axe=a("strong"),Ldt=o("rembert"),ydt=o(" \u2014 "),dse=a("a"),xdt=o("TFRemBertForQuestionAnswering"),$dt=o(" (RemBERT model)"),kdt=l(),e7=a("li"),Lxe=a("strong"),Sdt=o("roberta"),Rdt=o(" \u2014 "),cse=a("a"),Pdt=o("TFRobertaForQuestionAnswering"),Bdt=o(" (RoBERTa model)"),Idt=l(),o7=a("li"),yxe=a("strong"),Ndt=o("roformer"),qdt=o(" \u2014 "),mse=a("a"),jdt=o("TFRoFormerForQuestionAnswering"),Ddt=o(" (RoFormer model)"),Gdt=l(),r7=a("li"),xxe=a("strong"),Odt=o("xlm"),Vdt=o(" \u2014 "),fse=a("a"),Xdt=o("TFXLMForQuestionAnsweringSimple"),zdt=o(" (XLM model)"),Qdt=l(),t7=a("li"),$xe=a("strong"),Wdt=o("xlm-roberta"),Udt=o(" \u2014 "),gse=a("a"),Hdt=o("TFXLMRobertaForQuestionAnswering"),Jdt=o(" (XLM-RoBERTa model)"),Ydt=l(),a7=a("li"),kxe=a("strong"),Zdt=o("xlnet"),Kdt=o(" \u2014 "),hse=a("a"),ect=o("TFXLNetForQuestionAnsweringSimple"),oct=o(" (XLNet model)"),rct=l(),F(n7.$$.fragment),Ito=l(),Om=a("h2"),s7=a("a"),Sxe=a("span"),F(ZR.$$.fragment),tct=l(),Rxe=a("span"),act=o("TFAutoModelForVision2Seq"),Nto=l(),Mr=a("div"),F(KR.$$.fragment),nct=l(),Vm=a("p"),sct=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),use=a("a"),lct=o("from_pretrained()"),ict=o(" class method or the "),pse=a("a"),dct=o("from_config()"),cct=o(` class
method.`),mct=l(),eP=a("p"),fct=o("This class cannot be instantiated directly using "),Pxe=a("code"),gct=o("__init__()"),hct=o(" (throws an error)."),uct=l(),la=a("div"),F(oP.$$.fragment),pct=l(),Bxe=a("p"),_ct=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bct=l(),Xm=a("p"),vct=o(`Note:
Loading a model from its configuration file does `),Ixe=a("strong"),Fct=o("not"),Tct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_se=a("a"),Mct=o("from_pretrained()"),Ect=o(" to load the model weights."),Cct=l(),F(l7.$$.fragment),wct=l(),Zr=a("div"),F(rP.$$.fragment),Act=l(),Nxe=a("p"),Lct=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),yct=l(),Xn=a("p"),xct=o("The model class to instantiate is selected based on the "),qxe=a("code"),$ct=o("model_type"),kct=o(` property of the config object (either
passed as an argument or loaded from `),jxe=a("code"),Sct=o("pretrained_model_name_or_path"),Rct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dxe=a("code"),Pct=o("pretrained_model_name_or_path"),Bct=o(":"),Ict=l(),Gxe=a("ul"),i7=a("li"),Oxe=a("strong"),Nct=o("vision-encoder-decoder"),qct=o(" \u2014 "),bse=a("a"),jct=o("TFVisionEncoderDecoderModel"),Dct=o(" (Vision Encoder decoder model)"),Gct=l(),F(d7.$$.fragment),qto=l(),zm=a("h2"),c7=a("a"),Vxe=a("span"),F(tP.$$.fragment),Oct=l(),Xxe=a("span"),Vct=o("TFAutoModelForSpeechSeq2Seq"),jto=l(),Er=a("div"),F(aP.$$.fragment),Xct=l(),Qm=a("p"),zct=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),vse=a("a"),Qct=o("from_pretrained()"),Wct=o(" class method or the "),Fse=a("a"),Uct=o("from_config()"),Hct=o(` class
method.`),Jct=l(),nP=a("p"),Yct=o("This class cannot be instantiated directly using "),zxe=a("code"),Zct=o("__init__()"),Kct=o(" (throws an error)."),emt=l(),ia=a("div"),F(sP.$$.fragment),omt=l(),Qxe=a("p"),rmt=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),tmt=l(),Wm=a("p"),amt=o(`Note:
Loading a model from its configuration file does `),Wxe=a("strong"),nmt=o("not"),smt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tse=a("a"),lmt=o("from_pretrained()"),imt=o(" to load the model weights."),dmt=l(),F(m7.$$.fragment),cmt=l(),Kr=a("div"),F(lP.$$.fragment),mmt=l(),Uxe=a("p"),fmt=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),gmt=l(),zn=a("p"),hmt=o("The model class to instantiate is selected based on the "),Hxe=a("code"),umt=o("model_type"),pmt=o(` property of the config object (either
passed as an argument or loaded from `),Jxe=a("code"),_mt=o("pretrained_model_name_or_path"),bmt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yxe=a("code"),vmt=o("pretrained_model_name_or_path"),Fmt=o(":"),Tmt=l(),iP=a("ul"),f7=a("li"),Zxe=a("strong"),Mmt=o("speech_to_text"),Emt=o(" \u2014 "),Mse=a("a"),Cmt=o("TFSpeech2TextForConditionalGeneration"),wmt=o(" (Speech2Text model)"),Amt=l(),g7=a("li"),Kxe=a("strong"),Lmt=o("whisper"),ymt=o(" \u2014 "),Ese=a("a"),xmt=o("TFWhisperForConditionalGeneration"),$mt=o(" (Whisper model)"),kmt=l(),F(h7.$$.fragment),Dto=l(),Um=a("h2"),u7=a("a"),e$e=a("span"),F(dP.$$.fragment),Smt=l(),o$e=a("span"),Rmt=o("FlaxAutoModel"),Gto=l(),Cr=a("div"),F(cP.$$.fragment),Pmt=l(),Hm=a("p"),Bmt=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Cse=a("a"),Imt=o("from_pretrained()"),Nmt=o(" class method or the "),wse=a("a"),qmt=o("from_config()"),jmt=o(` class
method.`),Dmt=l(),mP=a("p"),Gmt=o("This class cannot be instantiated directly using "),r$e=a("code"),Omt=o("__init__()"),Vmt=o(" (throws an error)."),Xmt=l(),da=a("div"),F(fP.$$.fragment),zmt=l(),t$e=a("p"),Qmt=o("Instantiates one of the base model classes of the library from a configuration."),Wmt=l(),Jm=a("p"),Umt=o(`Note:
Loading a model from its configuration file does `),a$e=a("strong"),Hmt=o("not"),Jmt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ase=a("a"),Ymt=o("from_pretrained()"),Zmt=o(" to load the model weights."),Kmt=l(),F(p7.$$.fragment),eft=l(),et=a("div"),F(gP.$$.fragment),oft=l(),n$e=a("p"),rft=o("Instantiate one of the base model classes of the library from a pretrained model."),tft=l(),Qn=a("p"),aft=o("The model class to instantiate is selected based on the "),s$e=a("code"),nft=o("model_type"),sft=o(` property of the config object (either
passed as an argument or loaded from `),l$e=a("code"),lft=o("pretrained_model_name_or_path"),ift=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i$e=a("code"),dft=o("pretrained_model_name_or_path"),cft=o(":"),mft=l(),te=a("ul"),_7=a("li"),d$e=a("strong"),fft=o("albert"),gft=o(" \u2014 "),Lse=a("a"),hft=o("FlaxAlbertModel"),uft=o(" (ALBERT model)"),pft=l(),b7=a("li"),c$e=a("strong"),_ft=o("bart"),bft=o(" \u2014 "),yse=a("a"),vft=o("FlaxBartModel"),Fft=o(" (BART model)"),Tft=l(),v7=a("li"),m$e=a("strong"),Mft=o("beit"),Eft=o(" \u2014 "),xse=a("a"),Cft=o("FlaxBeitModel"),wft=o(" (BEiT model)"),Aft=l(),F7=a("li"),f$e=a("strong"),Lft=o("bert"),yft=o(" \u2014 "),$se=a("a"),xft=o("FlaxBertModel"),$ft=o(" (BERT model)"),kft=l(),T7=a("li"),g$e=a("strong"),Sft=o("big_bird"),Rft=o(" \u2014 "),kse=a("a"),Pft=o("FlaxBigBirdModel"),Bft=o(" (BigBird model)"),Ift=l(),M7=a("li"),h$e=a("strong"),Nft=o("blenderbot"),qft=o(" \u2014 "),Sse=a("a"),jft=o("FlaxBlenderbotModel"),Dft=o(" (Blenderbot model)"),Gft=l(),E7=a("li"),u$e=a("strong"),Oft=o("blenderbot-small"),Vft=o(" \u2014 "),Rse=a("a"),Xft=o("FlaxBlenderbotSmallModel"),zft=o(" (BlenderbotSmall model)"),Qft=l(),C7=a("li"),p$e=a("strong"),Wft=o("clip"),Uft=o(" \u2014 "),Pse=a("a"),Hft=o("FlaxCLIPModel"),Jft=o(" (CLIP model)"),Yft=l(),w7=a("li"),_$e=a("strong"),Zft=o("distilbert"),Kft=o(" \u2014 "),Bse=a("a"),egt=o("FlaxDistilBertModel"),ogt=o(" (DistilBERT model)"),rgt=l(),A7=a("li"),b$e=a("strong"),tgt=o("electra"),agt=o(" \u2014 "),Ise=a("a"),ngt=o("FlaxElectraModel"),sgt=o(" (ELECTRA model)"),lgt=l(),L7=a("li"),v$e=a("strong"),igt=o("gpt2"),dgt=o(" \u2014 "),Nse=a("a"),cgt=o("FlaxGPT2Model"),mgt=o(" (OpenAI GPT-2 model)"),fgt=l(),y7=a("li"),F$e=a("strong"),ggt=o("gpt_neo"),hgt=o(" \u2014 "),qse=a("a"),ugt=o("FlaxGPTNeoModel"),pgt=o(" (GPT Neo model)"),_gt=l(),x7=a("li"),T$e=a("strong"),bgt=o("gptj"),vgt=o(" \u2014 "),jse=a("a"),Fgt=o("FlaxGPTJModel"),Tgt=o(" (GPT-J model)"),Mgt=l(),$7=a("li"),M$e=a("strong"),Egt=o("longt5"),Cgt=o(" \u2014 "),Dse=a("a"),wgt=o("FlaxLongT5Model"),Agt=o(" (LongT5 model)"),Lgt=l(),k7=a("li"),E$e=a("strong"),ygt=o("marian"),xgt=o(" \u2014 "),Gse=a("a"),$gt=o("FlaxMarianModel"),kgt=o(" (Marian model)"),Sgt=l(),S7=a("li"),C$e=a("strong"),Rgt=o("mbart"),Pgt=o(" \u2014 "),Ose=a("a"),Bgt=o("FlaxMBartModel"),Igt=o(" (mBART model)"),Ngt=l(),R7=a("li"),w$e=a("strong"),qgt=o("mt5"),jgt=o(" \u2014 "),Vse=a("a"),Dgt=o("FlaxMT5Model"),Ggt=o(" (MT5 model)"),Ogt=l(),P7=a("li"),A$e=a("strong"),Vgt=o("opt"),Xgt=o(" \u2014 "),Xse=a("a"),zgt=o("FlaxOPTModel"),Qgt=o(" (OPT model)"),Wgt=l(),B7=a("li"),L$e=a("strong"),Ugt=o("pegasus"),Hgt=o(" \u2014 "),zse=a("a"),Jgt=o("FlaxPegasusModel"),Ygt=o(" (Pegasus model)"),Zgt=l(),I7=a("li"),y$e=a("strong"),Kgt=o("roberta"),eht=o(" \u2014 "),Qse=a("a"),oht=o("FlaxRobertaModel"),rht=o(" (RoBERTa model)"),tht=l(),N7=a("li"),x$e=a("strong"),aht=o("roformer"),nht=o(" \u2014 "),Wse=a("a"),sht=o("FlaxRoFormerModel"),lht=o(" (RoFormer model)"),iht=l(),q7=a("li"),$$e=a("strong"),dht=o("t5"),cht=o(" \u2014 "),Use=a("a"),mht=o("FlaxT5Model"),fht=o(" (T5 model)"),ght=l(),j7=a("li"),k$e=a("strong"),hht=o("vision-text-dual-encoder"),uht=o(" \u2014 "),Hse=a("a"),pht=o("FlaxVisionTextDualEncoderModel"),_ht=o(" (VisionTextDualEncoder model)"),bht=l(),D7=a("li"),S$e=a("strong"),vht=o("vit"),Fht=o(" \u2014 "),Jse=a("a"),Tht=o("FlaxViTModel"),Mht=o(" (ViT model)"),Eht=l(),G7=a("li"),R$e=a("strong"),Cht=o("wav2vec2"),wht=o(" \u2014 "),Yse=a("a"),Aht=o("FlaxWav2Vec2Model"),Lht=o(" (Wav2Vec2 model)"),yht=l(),O7=a("li"),P$e=a("strong"),xht=o("xglm"),$ht=o(" \u2014 "),Zse=a("a"),kht=o("FlaxXGLMModel"),Sht=o(" (XGLM model)"),Rht=l(),V7=a("li"),B$e=a("strong"),Pht=o("xlm-roberta"),Bht=o(" \u2014 "),Kse=a("a"),Iht=o("FlaxXLMRobertaModel"),Nht=o(" (XLM-RoBERTa model)"),qht=l(),F(X7.$$.fragment),Oto=l(),Ym=a("h2"),z7=a("a"),I$e=a("span"),F(hP.$$.fragment),jht=l(),N$e=a("span"),Dht=o("FlaxAutoModelForCausalLM"),Vto=l(),wr=a("div"),F(uP.$$.fragment),Ght=l(),Zm=a("p"),Oht=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ele=a("a"),Vht=o("from_pretrained()"),Xht=o(" class method or the "),ole=a("a"),zht=o("from_config()"),Qht=o(` class
method.`),Wht=l(),pP=a("p"),Uht=o("This class cannot be instantiated directly using "),q$e=a("code"),Hht=o("__init__()"),Jht=o(" (throws an error)."),Yht=l(),ca=a("div"),F(_P.$$.fragment),Zht=l(),j$e=a("p"),Kht=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),eut=l(),Km=a("p"),out=o(`Note:
Loading a model from its configuration file does `),D$e=a("strong"),rut=o("not"),tut=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rle=a("a"),aut=o("from_pretrained()"),nut=o(" to load the model weights."),sut=l(),F(Q7.$$.fragment),lut=l(),ot=a("div"),F(bP.$$.fragment),iut=l(),G$e=a("p"),dut=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),cut=l(),Wn=a("p"),mut=o("The model class to instantiate is selected based on the "),O$e=a("code"),fut=o("model_type"),gut=o(` property of the config object (either
passed as an argument or loaded from `),V$e=a("code"),hut=o("pretrained_model_name_or_path"),uut=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X$e=a("code"),put=o("pretrained_model_name_or_path"),_ut=o(":"),but=l(),$e=a("ul"),W7=a("li"),z$e=a("strong"),vut=o("bart"),Fut=o(" \u2014 "),tle=a("a"),Tut=o("FlaxBartForCausalLM"),Mut=o(" (BART model)"),Eut=l(),U7=a("li"),Q$e=a("strong"),Cut=o("bert"),wut=o(" \u2014 "),ale=a("a"),Aut=o("FlaxBertForCausalLM"),Lut=o(" (BERT model)"),yut=l(),H7=a("li"),W$e=a("strong"),xut=o("big_bird"),$ut=o(" \u2014 "),nle=a("a"),kut=o("FlaxBigBirdForCausalLM"),Sut=o(" (BigBird model)"),Rut=l(),J7=a("li"),U$e=a("strong"),Put=o("electra"),But=o(" \u2014 "),sle=a("a"),Iut=o("FlaxElectraForCausalLM"),Nut=o(" (ELECTRA model)"),qut=l(),Y7=a("li"),H$e=a("strong"),jut=o("gpt2"),Dut=o(" \u2014 "),lle=a("a"),Gut=o("FlaxGPT2LMHeadModel"),Out=o(" (OpenAI GPT-2 model)"),Vut=l(),Z7=a("li"),J$e=a("strong"),Xut=o("gpt_neo"),zut=o(" \u2014 "),ile=a("a"),Qut=o("FlaxGPTNeoForCausalLM"),Wut=o(" (GPT Neo model)"),Uut=l(),K7=a("li"),Y$e=a("strong"),Hut=o("gptj"),Jut=o(" \u2014 "),dle=a("a"),Yut=o("FlaxGPTJForCausalLM"),Zut=o(" (GPT-J model)"),Kut=l(),eL=a("li"),Z$e=a("strong"),ept=o("opt"),opt=o(" \u2014 "),cle=a("a"),rpt=o("FlaxOPTForCausalLM"),tpt=o(" (OPT model)"),apt=l(),oL=a("li"),K$e=a("strong"),npt=o("roberta"),spt=o(" \u2014 "),mle=a("a"),lpt=o("FlaxRobertaForCausalLM"),ipt=o(" (RoBERTa model)"),dpt=l(),rL=a("li"),eke=a("strong"),cpt=o("xglm"),mpt=o(" \u2014 "),fle=a("a"),fpt=o("FlaxXGLMForCausalLM"),gpt=o(" (XGLM model)"),hpt=l(),F(tL.$$.fragment),Xto=l(),ef=a("h2"),aL=a("a"),oke=a("span"),F(vP.$$.fragment),upt=l(),rke=a("span"),ppt=o("FlaxAutoModelForPreTraining"),zto=l(),Ar=a("div"),F(FP.$$.fragment),_pt=l(),of=a("p"),bpt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gle=a("a"),vpt=o("from_pretrained()"),Fpt=o(" class method or the "),hle=a("a"),Tpt=o("from_config()"),Mpt=o(` class
method.`),Ept=l(),TP=a("p"),Cpt=o("This class cannot be instantiated directly using "),tke=a("code"),wpt=o("__init__()"),Apt=o(" (throws an error)."),Lpt=l(),ma=a("div"),F(MP.$$.fragment),ypt=l(),ake=a("p"),xpt=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$pt=l(),rf=a("p"),kpt=o(`Note:
Loading a model from its configuration file does `),nke=a("strong"),Spt=o("not"),Rpt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ule=a("a"),Ppt=o("from_pretrained()"),Bpt=o(" to load the model weights."),Ipt=l(),F(nL.$$.fragment),Npt=l(),rt=a("div"),F(EP.$$.fragment),qpt=l(),ske=a("p"),jpt=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Dpt=l(),Un=a("p"),Gpt=o("The model class to instantiate is selected based on the "),lke=a("code"),Opt=o("model_type"),Vpt=o(` property of the config object (either
passed as an argument or loaded from `),ike=a("code"),Xpt=o("pretrained_model_name_or_path"),zpt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dke=a("code"),Qpt=o("pretrained_model_name_or_path"),Wpt=o(":"),Upt=l(),Ee=a("ul"),sL=a("li"),cke=a("strong"),Hpt=o("albert"),Jpt=o(" \u2014 "),ple=a("a"),Ypt=o("FlaxAlbertForPreTraining"),Zpt=o(" (ALBERT model)"),Kpt=l(),lL=a("li"),mke=a("strong"),e_t=o("bart"),o_t=o(" \u2014 "),_le=a("a"),r_t=o("FlaxBartForConditionalGeneration"),t_t=o(" (BART model)"),a_t=l(),iL=a("li"),fke=a("strong"),n_t=o("bert"),s_t=o(" \u2014 "),ble=a("a"),l_t=o("FlaxBertForPreTraining"),i_t=o(" (BERT model)"),d_t=l(),dL=a("li"),gke=a("strong"),c_t=o("big_bird"),m_t=o(" \u2014 "),vle=a("a"),f_t=o("FlaxBigBirdForPreTraining"),g_t=o(" (BigBird model)"),h_t=l(),cL=a("li"),hke=a("strong"),u_t=o("electra"),p_t=o(" \u2014 "),Fle=a("a"),__t=o("FlaxElectraForPreTraining"),b_t=o(" (ELECTRA model)"),v_t=l(),mL=a("li"),uke=a("strong"),F_t=o("longt5"),T_t=o(" \u2014 "),Tle=a("a"),M_t=o("FlaxLongT5ForConditionalGeneration"),E_t=o(" (LongT5 model)"),C_t=l(),fL=a("li"),pke=a("strong"),w_t=o("mbart"),A_t=o(" \u2014 "),Mle=a("a"),L_t=o("FlaxMBartForConditionalGeneration"),y_t=o(" (mBART model)"),x_t=l(),gL=a("li"),_ke=a("strong"),$_t=o("mt5"),k_t=o(" \u2014 "),Ele=a("a"),S_t=o("FlaxMT5ForConditionalGeneration"),R_t=o(" (MT5 model)"),P_t=l(),hL=a("li"),bke=a("strong"),B_t=o("roberta"),I_t=o(" \u2014 "),Cle=a("a"),N_t=o("FlaxRobertaForMaskedLM"),q_t=o(" (RoBERTa model)"),j_t=l(),uL=a("li"),vke=a("strong"),D_t=o("roformer"),G_t=o(" \u2014 "),wle=a("a"),O_t=o("FlaxRoFormerForMaskedLM"),V_t=o(" (RoFormer model)"),X_t=l(),pL=a("li"),Fke=a("strong"),z_t=o("t5"),Q_t=o(" \u2014 "),Ale=a("a"),W_t=o("FlaxT5ForConditionalGeneration"),U_t=o(" (T5 model)"),H_t=l(),_L=a("li"),Tke=a("strong"),J_t=o("wav2vec2"),Y_t=o(" \u2014 "),Lle=a("a"),Z_t=o("FlaxWav2Vec2ForPreTraining"),K_t=o(" (Wav2Vec2 model)"),e1t=l(),bL=a("li"),Mke=a("strong"),o1t=o("xlm-roberta"),r1t=o(" \u2014 "),yle=a("a"),t1t=o("FlaxXLMRobertaForMaskedLM"),a1t=o(" (XLM-RoBERTa model)"),n1t=l(),F(vL.$$.fragment),Qto=l(),tf=a("h2"),FL=a("a"),Eke=a("span"),F(CP.$$.fragment),s1t=l(),Cke=a("span"),l1t=o("FlaxAutoModelForMaskedLM"),Wto=l(),Lr=a("div"),F(wP.$$.fragment),i1t=l(),af=a("p"),d1t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xle=a("a"),c1t=o("from_pretrained()"),m1t=o(" class method or the "),$le=a("a"),f1t=o("from_config()"),g1t=o(` class
method.`),h1t=l(),AP=a("p"),u1t=o("This class cannot be instantiated directly using "),wke=a("code"),p1t=o("__init__()"),_1t=o(" (throws an error)."),b1t=l(),fa=a("div"),F(LP.$$.fragment),v1t=l(),Ake=a("p"),F1t=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),T1t=l(),nf=a("p"),M1t=o(`Note:
Loading a model from its configuration file does `),Lke=a("strong"),E1t=o("not"),C1t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kle=a("a"),w1t=o("from_pretrained()"),A1t=o(" to load the model weights."),L1t=l(),F(TL.$$.fragment),y1t=l(),tt=a("div"),F(yP.$$.fragment),x1t=l(),yke=a("p"),$1t=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),k1t=l(),Hn=a("p"),S1t=o("The model class to instantiate is selected based on the "),xke=a("code"),R1t=o("model_type"),P1t=o(` property of the config object (either
passed as an argument or loaded from `),$ke=a("code"),B1t=o("pretrained_model_name_or_path"),I1t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kke=a("code"),N1t=o("pretrained_model_name_or_path"),q1t=o(":"),j1t=l(),ke=a("ul"),ML=a("li"),Ske=a("strong"),D1t=o("albert"),G1t=o(" \u2014 "),Sle=a("a"),O1t=o("FlaxAlbertForMaskedLM"),V1t=o(" (ALBERT model)"),X1t=l(),EL=a("li"),Rke=a("strong"),z1t=o("bart"),Q1t=o(" \u2014 "),Rle=a("a"),W1t=o("FlaxBartForConditionalGeneration"),U1t=o(" (BART model)"),H1t=l(),CL=a("li"),Pke=a("strong"),J1t=o("bert"),Y1t=o(" \u2014 "),Ple=a("a"),Z1t=o("FlaxBertForMaskedLM"),K1t=o(" (BERT model)"),e2t=l(),wL=a("li"),Bke=a("strong"),o2t=o("big_bird"),r2t=o(" \u2014 "),Ble=a("a"),t2t=o("FlaxBigBirdForMaskedLM"),a2t=o(" (BigBird model)"),n2t=l(),AL=a("li"),Ike=a("strong"),s2t=o("distilbert"),l2t=o(" \u2014 "),Ile=a("a"),i2t=o("FlaxDistilBertForMaskedLM"),d2t=o(" (DistilBERT model)"),c2t=l(),LL=a("li"),Nke=a("strong"),m2t=o("electra"),f2t=o(" \u2014 "),Nle=a("a"),g2t=o("FlaxElectraForMaskedLM"),h2t=o(" (ELECTRA model)"),u2t=l(),yL=a("li"),qke=a("strong"),p2t=o("mbart"),_2t=o(" \u2014 "),qle=a("a"),b2t=o("FlaxMBartForConditionalGeneration"),v2t=o(" (mBART model)"),F2t=l(),xL=a("li"),jke=a("strong"),T2t=o("roberta"),M2t=o(" \u2014 "),jle=a("a"),E2t=o("FlaxRobertaForMaskedLM"),C2t=o(" (RoBERTa model)"),w2t=l(),$L=a("li"),Dke=a("strong"),A2t=o("roformer"),L2t=o(" \u2014 "),Dle=a("a"),y2t=o("FlaxRoFormerForMaskedLM"),x2t=o(" (RoFormer model)"),$2t=l(),kL=a("li"),Gke=a("strong"),k2t=o("xlm-roberta"),S2t=o(" \u2014 "),Gle=a("a"),R2t=o("FlaxXLMRobertaForMaskedLM"),P2t=o(" (XLM-RoBERTa model)"),B2t=l(),F(SL.$$.fragment),Uto=l(),sf=a("h2"),RL=a("a"),Oke=a("span"),F(xP.$$.fragment),I2t=l(),Vke=a("span"),N2t=o("FlaxAutoModelForSeq2SeqLM"),Hto=l(),yr=a("div"),F($P.$$.fragment),q2t=l(),lf=a("p"),j2t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ole=a("a"),D2t=o("from_pretrained()"),G2t=o(" class method or the "),Vle=a("a"),O2t=o("from_config()"),V2t=o(` class
method.`),X2t=l(),kP=a("p"),z2t=o("This class cannot be instantiated directly using "),Xke=a("code"),Q2t=o("__init__()"),W2t=o(" (throws an error)."),U2t=l(),ga=a("div"),F(SP.$$.fragment),H2t=l(),zke=a("p"),J2t=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Y2t=l(),df=a("p"),Z2t=o(`Note:
Loading a model from its configuration file does `),Qke=a("strong"),K2t=o("not"),ebt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xle=a("a"),obt=o("from_pretrained()"),rbt=o(" to load the model weights."),tbt=l(),F(PL.$$.fragment),abt=l(),at=a("div"),F(RP.$$.fragment),nbt=l(),Wke=a("p"),sbt=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),lbt=l(),Jn=a("p"),ibt=o("The model class to instantiate is selected based on the "),Uke=a("code"),dbt=o("model_type"),cbt=o(` property of the config object (either
passed as an argument or loaded from `),Hke=a("code"),mbt=o("pretrained_model_name_or_path"),fbt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jke=a("code"),gbt=o("pretrained_model_name_or_path"),hbt=o(":"),ubt=l(),Se=a("ul"),BL=a("li"),Yke=a("strong"),pbt=o("bart"),_bt=o(" \u2014 "),zle=a("a"),bbt=o("FlaxBartForConditionalGeneration"),vbt=o(" (BART model)"),Fbt=l(),IL=a("li"),Zke=a("strong"),Tbt=o("blenderbot"),Mbt=o(" \u2014 "),Qle=a("a"),Ebt=o("FlaxBlenderbotForConditionalGeneration"),Cbt=o(" (Blenderbot model)"),wbt=l(),NL=a("li"),Kke=a("strong"),Abt=o("blenderbot-small"),Lbt=o(" \u2014 "),Wle=a("a"),ybt=o("FlaxBlenderbotSmallForConditionalGeneration"),xbt=o(" (BlenderbotSmall model)"),$bt=l(),qL=a("li"),eSe=a("strong"),kbt=o("encoder-decoder"),Sbt=o(" \u2014 "),Ule=a("a"),Rbt=o("FlaxEncoderDecoderModel"),Pbt=o(" (Encoder decoder model)"),Bbt=l(),jL=a("li"),oSe=a("strong"),Ibt=o("longt5"),Nbt=o(" \u2014 "),Hle=a("a"),qbt=o("FlaxLongT5ForConditionalGeneration"),jbt=o(" (LongT5 model)"),Dbt=l(),DL=a("li"),rSe=a("strong"),Gbt=o("marian"),Obt=o(" \u2014 "),Jle=a("a"),Vbt=o("FlaxMarianMTModel"),Xbt=o(" (Marian model)"),zbt=l(),GL=a("li"),tSe=a("strong"),Qbt=o("mbart"),Wbt=o(" \u2014 "),Yle=a("a"),Ubt=o("FlaxMBartForConditionalGeneration"),Hbt=o(" (mBART model)"),Jbt=l(),OL=a("li"),aSe=a("strong"),Ybt=o("mt5"),Zbt=o(" \u2014 "),Zle=a("a"),Kbt=o("FlaxMT5ForConditionalGeneration"),evt=o(" (MT5 model)"),ovt=l(),VL=a("li"),nSe=a("strong"),rvt=o("pegasus"),tvt=o(" \u2014 "),Kle=a("a"),avt=o("FlaxPegasusForConditionalGeneration"),nvt=o(" (Pegasus model)"),svt=l(),XL=a("li"),sSe=a("strong"),lvt=o("t5"),ivt=o(" \u2014 "),eie=a("a"),dvt=o("FlaxT5ForConditionalGeneration"),cvt=o(" (T5 model)"),mvt=l(),F(zL.$$.fragment),Jto=l(),cf=a("h2"),QL=a("a"),lSe=a("span"),F(PP.$$.fragment),fvt=l(),iSe=a("span"),gvt=o("FlaxAutoModelForSequenceClassification"),Yto=l(),xr=a("div"),F(BP.$$.fragment),hvt=l(),mf=a("p"),uvt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),oie=a("a"),pvt=o("from_pretrained()"),_vt=o(" class method or the "),rie=a("a"),bvt=o("from_config()"),vvt=o(` class
method.`),Fvt=l(),IP=a("p"),Tvt=o("This class cannot be instantiated directly using "),dSe=a("code"),Mvt=o("__init__()"),Evt=o(" (throws an error)."),Cvt=l(),ha=a("div"),F(NP.$$.fragment),wvt=l(),cSe=a("p"),Avt=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Lvt=l(),ff=a("p"),yvt=o(`Note:
Loading a model from its configuration file does `),mSe=a("strong"),xvt=o("not"),$vt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tie=a("a"),kvt=o("from_pretrained()"),Svt=o(" to load the model weights."),Rvt=l(),F(WL.$$.fragment),Pvt=l(),nt=a("div"),F(qP.$$.fragment),Bvt=l(),fSe=a("p"),Ivt=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Nvt=l(),Yn=a("p"),qvt=o("The model class to instantiate is selected based on the "),gSe=a("code"),jvt=o("model_type"),Dvt=o(` property of the config object (either
passed as an argument or loaded from `),hSe=a("code"),Gvt=o("pretrained_model_name_or_path"),Ovt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uSe=a("code"),Vvt=o("pretrained_model_name_or_path"),Xvt=o(":"),zvt=l(),Re=a("ul"),UL=a("li"),pSe=a("strong"),Qvt=o("albert"),Wvt=o(" \u2014 "),aie=a("a"),Uvt=o("FlaxAlbertForSequenceClassification"),Hvt=o(" (ALBERT model)"),Jvt=l(),HL=a("li"),_Se=a("strong"),Yvt=o("bart"),Zvt=o(" \u2014 "),nie=a("a"),Kvt=o("FlaxBartForSequenceClassification"),eFt=o(" (BART model)"),oFt=l(),JL=a("li"),bSe=a("strong"),rFt=o("bert"),tFt=o(" \u2014 "),sie=a("a"),aFt=o("FlaxBertForSequenceClassification"),nFt=o(" (BERT model)"),sFt=l(),YL=a("li"),vSe=a("strong"),lFt=o("big_bird"),iFt=o(" \u2014 "),lie=a("a"),dFt=o("FlaxBigBirdForSequenceClassification"),cFt=o(" (BigBird model)"),mFt=l(),ZL=a("li"),FSe=a("strong"),fFt=o("distilbert"),gFt=o(" \u2014 "),iie=a("a"),hFt=o("FlaxDistilBertForSequenceClassification"),uFt=o(" (DistilBERT model)"),pFt=l(),KL=a("li"),TSe=a("strong"),_Ft=o("electra"),bFt=o(" \u2014 "),die=a("a"),vFt=o("FlaxElectraForSequenceClassification"),FFt=o(" (ELECTRA model)"),TFt=l(),e8=a("li"),MSe=a("strong"),MFt=o("mbart"),EFt=o(" \u2014 "),cie=a("a"),CFt=o("FlaxMBartForSequenceClassification"),wFt=o(" (mBART model)"),AFt=l(),o8=a("li"),ESe=a("strong"),LFt=o("roberta"),yFt=o(" \u2014 "),mie=a("a"),xFt=o("FlaxRobertaForSequenceClassification"),$Ft=o(" (RoBERTa model)"),kFt=l(),r8=a("li"),CSe=a("strong"),SFt=o("roformer"),RFt=o(" \u2014 "),fie=a("a"),PFt=o("FlaxRoFormerForSequenceClassification"),BFt=o(" (RoFormer model)"),IFt=l(),t8=a("li"),wSe=a("strong"),NFt=o("xlm-roberta"),qFt=o(" \u2014 "),gie=a("a"),jFt=o("FlaxXLMRobertaForSequenceClassification"),DFt=o(" (XLM-RoBERTa model)"),GFt=l(),F(a8.$$.fragment),Zto=l(),gf=a("h2"),n8=a("a"),ASe=a("span"),F(jP.$$.fragment),OFt=l(),LSe=a("span"),VFt=o("FlaxAutoModelForQuestionAnswering"),Kto=l(),$r=a("div"),F(DP.$$.fragment),XFt=l(),hf=a("p"),zFt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hie=a("a"),QFt=o("from_pretrained()"),WFt=o(" class method or the "),uie=a("a"),UFt=o("from_config()"),HFt=o(` class
method.`),JFt=l(),GP=a("p"),YFt=o("This class cannot be instantiated directly using "),ySe=a("code"),ZFt=o("__init__()"),KFt=o(" (throws an error)."),eTt=l(),ua=a("div"),F(OP.$$.fragment),oTt=l(),xSe=a("p"),rTt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),tTt=l(),uf=a("p"),aTt=o(`Note:
Loading a model from its configuration file does `),$Se=a("strong"),nTt=o("not"),sTt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pie=a("a"),lTt=o("from_pretrained()"),iTt=o(" to load the model weights."),dTt=l(),F(s8.$$.fragment),cTt=l(),st=a("div"),F(VP.$$.fragment),mTt=l(),kSe=a("p"),fTt=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gTt=l(),Zn=a("p"),hTt=o("The model class to instantiate is selected based on the "),SSe=a("code"),uTt=o("model_type"),pTt=o(` property of the config object (either
passed as an argument or loaded from `),RSe=a("code"),_Tt=o("pretrained_model_name_or_path"),bTt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PSe=a("code"),vTt=o("pretrained_model_name_or_path"),FTt=o(":"),TTt=l(),Pe=a("ul"),l8=a("li"),BSe=a("strong"),MTt=o("albert"),ETt=o(" \u2014 "),_ie=a("a"),CTt=o("FlaxAlbertForQuestionAnswering"),wTt=o(" (ALBERT model)"),ATt=l(),i8=a("li"),ISe=a("strong"),LTt=o("bart"),yTt=o(" \u2014 "),bie=a("a"),xTt=o("FlaxBartForQuestionAnswering"),$Tt=o(" (BART model)"),kTt=l(),d8=a("li"),NSe=a("strong"),STt=o("bert"),RTt=o(" \u2014 "),vie=a("a"),PTt=o("FlaxBertForQuestionAnswering"),BTt=o(" (BERT model)"),ITt=l(),c8=a("li"),qSe=a("strong"),NTt=o("big_bird"),qTt=o(" \u2014 "),Fie=a("a"),jTt=o("FlaxBigBirdForQuestionAnswering"),DTt=o(" (BigBird model)"),GTt=l(),m8=a("li"),jSe=a("strong"),OTt=o("distilbert"),VTt=o(" \u2014 "),Tie=a("a"),XTt=o("FlaxDistilBertForQuestionAnswering"),zTt=o(" (DistilBERT model)"),QTt=l(),f8=a("li"),DSe=a("strong"),WTt=o("electra"),UTt=o(" \u2014 "),Mie=a("a"),HTt=o("FlaxElectraForQuestionAnswering"),JTt=o(" (ELECTRA model)"),YTt=l(),g8=a("li"),GSe=a("strong"),ZTt=o("mbart"),KTt=o(" \u2014 "),Eie=a("a"),eMt=o("FlaxMBartForQuestionAnswering"),oMt=o(" (mBART model)"),rMt=l(),h8=a("li"),OSe=a("strong"),tMt=o("roberta"),aMt=o(" \u2014 "),Cie=a("a"),nMt=o("FlaxRobertaForQuestionAnswering"),sMt=o(" (RoBERTa model)"),lMt=l(),u8=a("li"),VSe=a("strong"),iMt=o("roformer"),dMt=o(" \u2014 "),wie=a("a"),cMt=o("FlaxRoFormerForQuestionAnswering"),mMt=o(" (RoFormer model)"),fMt=l(),p8=a("li"),XSe=a("strong"),gMt=o("xlm-roberta"),hMt=o(" \u2014 "),Aie=a("a"),uMt=o("FlaxXLMRobertaForQuestionAnswering"),pMt=o(" (XLM-RoBERTa model)"),_Mt=l(),F(_8.$$.fragment),eao=l(),pf=a("h2"),b8=a("a"),zSe=a("span"),F(XP.$$.fragment),bMt=l(),QSe=a("span"),vMt=o("FlaxAutoModelForTokenClassification"),oao=l(),kr=a("div"),F(zP.$$.fragment),FMt=l(),_f=a("p"),TMt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Lie=a("a"),MMt=o("from_pretrained()"),EMt=o(" class method or the "),yie=a("a"),CMt=o("from_config()"),wMt=o(` class
method.`),AMt=l(),QP=a("p"),LMt=o("This class cannot be instantiated directly using "),WSe=a("code"),yMt=o("__init__()"),xMt=o(" (throws an error)."),$Mt=l(),pa=a("div"),F(WP.$$.fragment),kMt=l(),USe=a("p"),SMt=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),RMt=l(),bf=a("p"),PMt=o(`Note:
Loading a model from its configuration file does `),HSe=a("strong"),BMt=o("not"),IMt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xie=a("a"),NMt=o("from_pretrained()"),qMt=o(" to load the model weights."),jMt=l(),F(v8.$$.fragment),DMt=l(),lt=a("div"),F(UP.$$.fragment),GMt=l(),JSe=a("p"),OMt=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),VMt=l(),Kn=a("p"),XMt=o("The model class to instantiate is selected based on the "),YSe=a("code"),zMt=o("model_type"),QMt=o(` property of the config object (either
passed as an argument or loaded from `),ZSe=a("code"),WMt=o("pretrained_model_name_or_path"),UMt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KSe=a("code"),HMt=o("pretrained_model_name_or_path"),JMt=o(":"),YMt=l(),ze=a("ul"),F8=a("li"),eRe=a("strong"),ZMt=o("albert"),KMt=o(" \u2014 "),$ie=a("a"),eEt=o("FlaxAlbertForTokenClassification"),oEt=o(" (ALBERT model)"),rEt=l(),T8=a("li"),oRe=a("strong"),tEt=o("bert"),aEt=o(" \u2014 "),kie=a("a"),nEt=o("FlaxBertForTokenClassification"),sEt=o(" (BERT model)"),lEt=l(),M8=a("li"),rRe=a("strong"),iEt=o("big_bird"),dEt=o(" \u2014 "),Sie=a("a"),cEt=o("FlaxBigBirdForTokenClassification"),mEt=o(" (BigBird model)"),fEt=l(),E8=a("li"),tRe=a("strong"),gEt=o("distilbert"),hEt=o(" \u2014 "),Rie=a("a"),uEt=o("FlaxDistilBertForTokenClassification"),pEt=o(" (DistilBERT model)"),_Et=l(),C8=a("li"),aRe=a("strong"),bEt=o("electra"),vEt=o(" \u2014 "),Pie=a("a"),FEt=o("FlaxElectraForTokenClassification"),TEt=o(" (ELECTRA model)"),MEt=l(),w8=a("li"),nRe=a("strong"),EEt=o("roberta"),CEt=o(" \u2014 "),Bie=a("a"),wEt=o("FlaxRobertaForTokenClassification"),AEt=o(" (RoBERTa model)"),LEt=l(),A8=a("li"),sRe=a("strong"),yEt=o("roformer"),xEt=o(" \u2014 "),Iie=a("a"),$Et=o("FlaxRoFormerForTokenClassification"),kEt=o(" (RoFormer model)"),SEt=l(),L8=a("li"),lRe=a("strong"),REt=o("xlm-roberta"),PEt=o(" \u2014 "),Nie=a("a"),BEt=o("FlaxXLMRobertaForTokenClassification"),IEt=o(" (XLM-RoBERTa model)"),NEt=l(),F(y8.$$.fragment),rao=l(),vf=a("h2"),x8=a("a"),iRe=a("span"),F(HP.$$.fragment),qEt=l(),dRe=a("span"),jEt=o("FlaxAutoModelForMultipleChoice"),tao=l(),Sr=a("div"),F(JP.$$.fragment),DEt=l(),Ff=a("p"),GEt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),qie=a("a"),OEt=o("from_pretrained()"),VEt=o(" class method or the "),jie=a("a"),XEt=o("from_config()"),zEt=o(` class
method.`),QEt=l(),YP=a("p"),WEt=o("This class cannot be instantiated directly using "),cRe=a("code"),UEt=o("__init__()"),HEt=o(" (throws an error)."),JEt=l(),_a=a("div"),F(ZP.$$.fragment),YEt=l(),mRe=a("p"),ZEt=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),KEt=l(),Tf=a("p"),e4t=o(`Note:
Loading a model from its configuration file does `),fRe=a("strong"),o4t=o("not"),r4t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Die=a("a"),t4t=o("from_pretrained()"),a4t=o(" to load the model weights."),n4t=l(),F($8.$$.fragment),s4t=l(),it=a("div"),F(KP.$$.fragment),l4t=l(),gRe=a("p"),i4t=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),d4t=l(),es=a("p"),c4t=o("The model class to instantiate is selected based on the "),hRe=a("code"),m4t=o("model_type"),f4t=o(` property of the config object (either
passed as an argument or loaded from `),uRe=a("code"),g4t=o("pretrained_model_name_or_path"),h4t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pRe=a("code"),u4t=o("pretrained_model_name_or_path"),p4t=o(":"),_4t=l(),Qe=a("ul"),k8=a("li"),_Re=a("strong"),b4t=o("albert"),v4t=o(" \u2014 "),Gie=a("a"),F4t=o("FlaxAlbertForMultipleChoice"),T4t=o(" (ALBERT model)"),M4t=l(),S8=a("li"),bRe=a("strong"),E4t=o("bert"),C4t=o(" \u2014 "),Oie=a("a"),w4t=o("FlaxBertForMultipleChoice"),A4t=o(" (BERT model)"),L4t=l(),R8=a("li"),vRe=a("strong"),y4t=o("big_bird"),x4t=o(" \u2014 "),Vie=a("a"),$4t=o("FlaxBigBirdForMultipleChoice"),k4t=o(" (BigBird model)"),S4t=l(),P8=a("li"),FRe=a("strong"),R4t=o("distilbert"),P4t=o(" \u2014 "),Xie=a("a"),B4t=o("FlaxDistilBertForMultipleChoice"),I4t=o(" (DistilBERT model)"),N4t=l(),B8=a("li"),TRe=a("strong"),q4t=o("electra"),j4t=o(" \u2014 "),zie=a("a"),D4t=o("FlaxElectraForMultipleChoice"),G4t=o(" (ELECTRA model)"),O4t=l(),I8=a("li"),MRe=a("strong"),V4t=o("roberta"),X4t=o(" \u2014 "),Qie=a("a"),z4t=o("FlaxRobertaForMultipleChoice"),Q4t=o(" (RoBERTa model)"),W4t=l(),N8=a("li"),ERe=a("strong"),U4t=o("roformer"),H4t=o(" \u2014 "),Wie=a("a"),J4t=o("FlaxRoFormerForMultipleChoice"),Y4t=o(" (RoFormer model)"),Z4t=l(),q8=a("li"),CRe=a("strong"),K4t=o("xlm-roberta"),eCt=o(" \u2014 "),Uie=a("a"),oCt=o("FlaxXLMRobertaForMultipleChoice"),rCt=o(" (XLM-RoBERTa model)"),tCt=l(),F(j8.$$.fragment),aao=l(),Mf=a("h2"),D8=a("a"),wRe=a("span"),F(eB.$$.fragment),aCt=l(),ARe=a("span"),nCt=o("FlaxAutoModelForNextSentencePrediction"),nao=l(),Rr=a("div"),F(oB.$$.fragment),sCt=l(),Ef=a("p"),lCt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Hie=a("a"),iCt=o("from_pretrained()"),dCt=o(" class method or the "),Jie=a("a"),cCt=o("from_config()"),mCt=o(` class
method.`),fCt=l(),rB=a("p"),gCt=o("This class cannot be instantiated directly using "),LRe=a("code"),hCt=o("__init__()"),uCt=o(" (throws an error)."),pCt=l(),ba=a("div"),F(tB.$$.fragment),_Ct=l(),yRe=a("p"),bCt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vCt=l(),Cf=a("p"),FCt=o(`Note:
Loading a model from its configuration file does `),xRe=a("strong"),TCt=o("not"),MCt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yie=a("a"),ECt=o("from_pretrained()"),CCt=o(" to load the model weights."),wCt=l(),F(G8.$$.fragment),ACt=l(),dt=a("div"),F(aB.$$.fragment),LCt=l(),$Re=a("p"),yCt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xCt=l(),os=a("p"),$Ct=o("The model class to instantiate is selected based on the "),kRe=a("code"),kCt=o("model_type"),SCt=o(` property of the config object (either
passed as an argument or loaded from `),SRe=a("code"),RCt=o("pretrained_model_name_or_path"),PCt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RRe=a("code"),BCt=o("pretrained_model_name_or_path"),ICt=o(":"),NCt=l(),PRe=a("ul"),O8=a("li"),BRe=a("strong"),qCt=o("bert"),jCt=o(" \u2014 "),Zie=a("a"),DCt=o("FlaxBertForNextSentencePrediction"),GCt=o(" (BERT model)"),OCt=l(),F(V8.$$.fragment),sao=l(),wf=a("h2"),X8=a("a"),IRe=a("span"),F(nB.$$.fragment),VCt=l(),NRe=a("span"),XCt=o("FlaxAutoModelForImageClassification"),lao=l(),Pr=a("div"),F(sB.$$.fragment),zCt=l(),Af=a("p"),QCt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Kie=a("a"),WCt=o("from_pretrained()"),UCt=o(" class method or the "),ede=a("a"),HCt=o("from_config()"),JCt=o(` class
method.`),YCt=l(),lB=a("p"),ZCt=o("This class cannot be instantiated directly using "),qRe=a("code"),KCt=o("__init__()"),e3t=o(" (throws an error)."),o3t=l(),va=a("div"),F(iB.$$.fragment),r3t=l(),jRe=a("p"),t3t=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),a3t=l(),Lf=a("p"),n3t=o(`Note:
Loading a model from its configuration file does `),DRe=a("strong"),s3t=o("not"),l3t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ode=a("a"),i3t=o("from_pretrained()"),d3t=o(" to load the model weights."),c3t=l(),F(z8.$$.fragment),m3t=l(),ct=a("div"),F(dB.$$.fragment),f3t=l(),GRe=a("p"),g3t=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),h3t=l(),rs=a("p"),u3t=o("The model class to instantiate is selected based on the "),ORe=a("code"),p3t=o("model_type"),_3t=o(` property of the config object (either
passed as an argument or loaded from `),VRe=a("code"),b3t=o("pretrained_model_name_or_path"),v3t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XRe=a("code"),F3t=o("pretrained_model_name_or_path"),T3t=o(":"),M3t=l(),cB=a("ul"),Q8=a("li"),zRe=a("strong"),E3t=o("beit"),C3t=o(" \u2014 "),rde=a("a"),w3t=o("FlaxBeitForImageClassification"),A3t=o(" (BEiT model)"),L3t=l(),W8=a("li"),QRe=a("strong"),y3t=o("vit"),x3t=o(" \u2014 "),tde=a("a"),$3t=o("FlaxViTForImageClassification"),k3t=o(" (ViT model)"),S3t=l(),F(U8.$$.fragment),iao=l(),yf=a("h2"),H8=a("a"),WRe=a("span"),F(mB.$$.fragment),R3t=l(),URe=a("span"),P3t=o("FlaxAutoModelForVision2Seq"),dao=l(),Br=a("div"),F(fB.$$.fragment),B3t=l(),xf=a("p"),I3t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ade=a("a"),N3t=o("from_pretrained()"),q3t=o(" class method or the "),nde=a("a"),j3t=o("from_config()"),D3t=o(` class
method.`),G3t=l(),gB=a("p"),O3t=o("This class cannot be instantiated directly using "),HRe=a("code"),V3t=o("__init__()"),X3t=o(" (throws an error)."),z3t=l(),Fa=a("div"),F(hB.$$.fragment),Q3t=l(),JRe=a("p"),W3t=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),U3t=l(),$f=a("p"),H3t=o(`Note:
Loading a model from its configuration file does `),YRe=a("strong"),J3t=o("not"),Y3t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sde=a("a"),Z3t=o("from_pretrained()"),K3t=o(" to load the model weights."),e5t=l(),F(J8.$$.fragment),o5t=l(),mt=a("div"),F(uB.$$.fragment),r5t=l(),ZRe=a("p"),t5t=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),a5t=l(),ts=a("p"),n5t=o("The model class to instantiate is selected based on the "),KRe=a("code"),s5t=o("model_type"),l5t=o(` property of the config object (either
passed as an argument or loaded from `),ePe=a("code"),i5t=o("pretrained_model_name_or_path"),d5t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oPe=a("code"),c5t=o("pretrained_model_name_or_path"),m5t=o(":"),f5t=l(),rPe=a("ul"),Y8=a("li"),tPe=a("strong"),g5t=o("vision-encoder-decoder"),h5t=o(" \u2014 "),lde=a("a"),u5t=o("FlaxVisionEncoderDecoderModel"),p5t=o(" (Vision Encoder decoder model)"),_5t=l(),F(Z8.$$.fragment),this.h()},l(m){const _=FMa('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var pB=s(u);f=n(pB,"A",{id:!0,class:!0,href:!0});var aPe=s(f);p=n(aPe,"SPAN",{});var nPe=s(p);T(d.$$.fragment,nPe),nPe.forEach(t),aPe.forEach(t),h=i(pB),xo=n(pB,"SPAN",{});var sPe=s(xo);cd=r(sPe,"Auto Classes"),sPe.forEach(t),pB.forEach(t),Pf=i(m),bt=n(m,"P",{});var _B=s(bt);md=r(_B,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),fd=n(_B,"CODE",{});var lPe=s(fd);Sx=r(lPe,"from_pretrained()"),lPe.forEach(t),Bf=r(_B,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),_B.forEach(t),Xe=i(m),He=n(m,"P",{});var as=s(He);gd=r(as,"Instantiating one of "),ns=n(as,"A",{href:!0});var iPe=s(ns);Rx=r(iPe,"AutoConfig"),iPe.forEach(t),ss=r(as,", "),ls=n(as,"A",{href:!0});var dPe=s(ls);Px=r(dPe,"AutoModel"),dPe.forEach(t),hd=r(as,`, and
`),is=n(as,"A",{href:!0});var cPe=s(is);Bx=r(cPe,"AutoTokenizer"),cPe.forEach(t),ud=r(as," will directly create a class of the relevant architecture. For instance"),as.forEach(t),If=i(m),T(Ja.$$.fragment,m),Je=i(m),Ae=n(m,"P",{});var bB=s(Ae);OI=r(bB,"will create a model that is an instance of "),pd=n(bB,"A",{href:!0});var mPe=s(pd);VI=r(mPe,"BertModel"),mPe.forEach(t),XI=r(bB,"."),bB.forEach(t),$o=i(m),Ya=n(m,"P",{});var vB=s(Ya);zI=r(vB,"There is one class of "),Nf=n(vB,"CODE",{});var fPe=s(Nf);QI=r(fPe,"AutoModel"),fPe.forEach(t),xso=r(vB," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),vB.forEach(t),Hoo=i(m),_d=n(m,"H2",{class:!0});var FB=s(_d);qf=n(FB,"A",{id:!0,class:!0,href:!0});var gPe=s(qf);hme=n(gPe,"SPAN",{});var hPe=s(hme);T(Ix.$$.fragment,hPe),hPe.forEach(t),gPe.forEach(t),$so=i(FB),ume=n(FB,"SPAN",{});var uPe=s(ume);kso=r(uPe,"Extending the Auto Classes"),uPe.forEach(t),FB.forEach(t),Joo=i(m),ds=n(m,"P",{});var kf=s(ds);Sso=r(kf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),pme=n(kf,"CODE",{});var pPe=s(pme);Rso=r(pPe,"NewModel"),pPe.forEach(t),Pso=r(kf,", make sure you have a "),_me=n(kf,"CODE",{});var _Pe=s(_me);Bso=r(_Pe,"NewModelConfig"),_Pe.forEach(t),Iso=r(kf,` then you can add those to the auto
classes like this:`),kf.forEach(t),Yoo=i(m),T(Nx.$$.fragment,m),Zoo=i(m),WI=n(m,"P",{});var bPe=s(WI);Nso=r(bPe,"You will then be able to use the auto classes like you would usually do!"),bPe.forEach(t),Koo=i(m),T(jf.$$.fragment,m),ero=i(m),bd=n(m,"H2",{class:!0});var TB=s(bd);Df=n(TB,"A",{id:!0,class:!0,href:!0});var vPe=s(Df);bme=n(vPe,"SPAN",{});var FPe=s(bme);T(qx.$$.fragment,FPe),FPe.forEach(t),vPe.forEach(t),qso=i(TB),vme=n(TB,"SPAN",{});var TPe=s(vme);jso=r(TPe,"AutoConfig"),TPe.forEach(t),TB.forEach(t),oro=i(m),ko=n(m,"DIV",{class:!0});var pt=s(ko);T(jx.$$.fragment,pt),Dso=i(pt),Dx=n(pt,"P",{});var MB=s(Dx);Gso=r(MB,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),UI=n(MB,"A",{href:!0});var MPe=s(UI);Oso=r(MPe,"from_pretrained()"),MPe.forEach(t),Vso=r(MB," class method."),MB.forEach(t),Xso=i(pt),Gx=n(pt,"P",{});var EB=s(Gx);zso=r(EB,"This class cannot be instantiated directly using "),Fme=n(EB,"CODE",{});var EPe=s(Fme);Qso=r(EPe,"__init__()"),EPe.forEach(t),Wso=r(EB," (throws an error)."),EB.forEach(t),Uso=i(pt),Ir=n(pt,"DIV",{class:!0});var _t=s(Ir);T(Ox.$$.fragment,_t),Hso=i(_t),Tme=n(_t,"P",{});var CPe=s(Tme);Jso=r(CPe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),CPe.forEach(t),Yso=i(_t),vd=n(_t,"P",{});var Sf=s(vd);Zso=r(Sf,"The configuration class to instantiate is selected based on the "),Mme=n(Sf,"CODE",{});var wPe=s(Mme);Kso=r(wPe,"model_type"),wPe.forEach(t),elo=r(Sf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Eme=n(Sf,"CODE",{});var APe=s(Eme);olo=r(APe,"pretrained_model_name_or_path"),APe.forEach(t),rlo=r(Sf,":"),Sf.forEach(t),tlo=i(_t),A=n(_t,"UL",{});var L=s(A);Gf=n(L,"LI",{});var K8=s(Gf);Cme=n(K8,"STRONG",{});var LPe=s(Cme);alo=r(LPe,"albert"),LPe.forEach(t),nlo=r(K8," \u2014 "),HI=n(K8,"A",{href:!0});var yPe=s(HI);slo=r(yPe,"AlbertConfig"),yPe.forEach(t),llo=r(K8," (ALBERT model)"),K8.forEach(t),ilo=i(L),Of=n(L,"LI",{});var ey=s(Of);wme=n(ey,"STRONG",{});var xPe=s(wme);dlo=r(xPe,"bart"),xPe.forEach(t),clo=r(ey," \u2014 "),JI=n(ey,"A",{href:!0});var $Pe=s(JI);mlo=r($Pe,"BartConfig"),$Pe.forEach(t),flo=r(ey," (BART model)"),ey.forEach(t),glo=i(L),Vf=n(L,"LI",{});var oy=s(Vf);Ame=n(oy,"STRONG",{});var kPe=s(Ame);hlo=r(kPe,"beit"),kPe.forEach(t),ulo=r(oy," \u2014 "),YI=n(oy,"A",{href:!0});var SPe=s(YI);plo=r(SPe,"BeitConfig"),SPe.forEach(t),_lo=r(oy," (BEiT model)"),oy.forEach(t),blo=i(L),Xf=n(L,"LI",{});var ry=s(Xf);Lme=n(ry,"STRONG",{});var RPe=s(Lme);vlo=r(RPe,"bert"),RPe.forEach(t),Flo=r(ry," \u2014 "),ZI=n(ry,"A",{href:!0});var PPe=s(ZI);Tlo=r(PPe,"BertConfig"),PPe.forEach(t),Mlo=r(ry," (BERT model)"),ry.forEach(t),Elo=i(L),zf=n(L,"LI",{});var ty=s(zf);yme=n(ty,"STRONG",{});var BPe=s(yme);Clo=r(BPe,"bert-generation"),BPe.forEach(t),wlo=r(ty," \u2014 "),KI=n(ty,"A",{href:!0});var IPe=s(KI);Alo=r(IPe,"BertGenerationConfig"),IPe.forEach(t),Llo=r(ty," (Bert Generation model)"),ty.forEach(t),ylo=i(L),Qf=n(L,"LI",{});var ay=s(Qf);xme=n(ay,"STRONG",{});var NPe=s(xme);xlo=r(NPe,"big_bird"),NPe.forEach(t),$lo=r(ay," \u2014 "),eN=n(ay,"A",{href:!0});var qPe=s(eN);klo=r(qPe,"BigBirdConfig"),qPe.forEach(t),Slo=r(ay," (BigBird model)"),ay.forEach(t),Rlo=i(L),Wf=n(L,"LI",{});var ny=s(Wf);$me=n(ny,"STRONG",{});var jPe=s($me);Plo=r(jPe,"bigbird_pegasus"),jPe.forEach(t),Blo=r(ny," \u2014 "),oN=n(ny,"A",{href:!0});var DPe=s(oN);Ilo=r(DPe,"BigBirdPegasusConfig"),DPe.forEach(t),Nlo=r(ny," (BigBird-Pegasus model)"),ny.forEach(t),qlo=i(L),Uf=n(L,"LI",{});var sy=s(Uf);kme=n(sy,"STRONG",{});var GPe=s(kme);jlo=r(GPe,"blenderbot"),GPe.forEach(t),Dlo=r(sy," \u2014 "),rN=n(sy,"A",{href:!0});var OPe=s(rN);Glo=r(OPe,"BlenderbotConfig"),OPe.forEach(t),Olo=r(sy," (Blenderbot model)"),sy.forEach(t),Vlo=i(L),Hf=n(L,"LI",{});var ly=s(Hf);Sme=n(ly,"STRONG",{});var VPe=s(Sme);Xlo=r(VPe,"blenderbot-small"),VPe.forEach(t),zlo=r(ly," \u2014 "),tN=n(ly,"A",{href:!0});var XPe=s(tN);Qlo=r(XPe,"BlenderbotSmallConfig"),XPe.forEach(t),Wlo=r(ly," (BlenderbotSmall model)"),ly.forEach(t),Ulo=i(L),Jf=n(L,"LI",{});var iy=s(Jf);Rme=n(iy,"STRONG",{});var zPe=s(Rme);Hlo=r(zPe,"bloom"),zPe.forEach(t),Jlo=r(iy," \u2014 "),aN=n(iy,"A",{href:!0});var QPe=s(aN);Ylo=r(QPe,"BloomConfig"),QPe.forEach(t),Zlo=r(iy," (BLOOM model)"),iy.forEach(t),Klo=i(L),Yf=n(L,"LI",{});var dy=s(Yf);Pme=n(dy,"STRONG",{});var WPe=s(Pme);eio=r(WPe,"camembert"),WPe.forEach(t),oio=r(dy," \u2014 "),nN=n(dy,"A",{href:!0});var UPe=s(nN);rio=r(UPe,"CamembertConfig"),UPe.forEach(t),tio=r(dy," (CamemBERT model)"),dy.forEach(t),aio=i(L),Zf=n(L,"LI",{});var cy=s(Zf);Bme=n(cy,"STRONG",{});var HPe=s(Bme);nio=r(HPe,"canine"),HPe.forEach(t),sio=r(cy," \u2014 "),sN=n(cy,"A",{href:!0});var JPe=s(sN);lio=r(JPe,"CanineConfig"),JPe.forEach(t),iio=r(cy," (CANINE model)"),cy.forEach(t),dio=i(L),Kf=n(L,"LI",{});var my=s(Kf);Ime=n(my,"STRONG",{});var YPe=s(Ime);cio=r(YPe,"clip"),YPe.forEach(t),mio=r(my," \u2014 "),lN=n(my,"A",{href:!0});var ZPe=s(lN);fio=r(ZPe,"CLIPConfig"),ZPe.forEach(t),gio=r(my," (CLIP model)"),my.forEach(t),hio=i(L),eg=n(L,"LI",{});var fy=s(eg);Nme=n(fy,"STRONG",{});var KPe=s(Nme);uio=r(KPe,"codegen"),KPe.forEach(t),pio=r(fy," \u2014 "),iN=n(fy,"A",{href:!0});var eBe=s(iN);_io=r(eBe,"CodeGenConfig"),eBe.forEach(t),bio=r(fy," (CodeGen model)"),fy.forEach(t),vio=i(L),og=n(L,"LI",{});var gy=s(og);qme=n(gy,"STRONG",{});var oBe=s(qme);Fio=r(oBe,"conditional_detr"),oBe.forEach(t),Tio=r(gy," \u2014 "),dN=n(gy,"A",{href:!0});var rBe=s(dN);Mio=r(rBe,"ConditionalDetrConfig"),rBe.forEach(t),Eio=r(gy," (Conditional DETR model)"),gy.forEach(t),Cio=i(L),rg=n(L,"LI",{});var hy=s(rg);jme=n(hy,"STRONG",{});var tBe=s(jme);wio=r(tBe,"convbert"),tBe.forEach(t),Aio=r(hy," \u2014 "),cN=n(hy,"A",{href:!0});var aBe=s(cN);Lio=r(aBe,"ConvBertConfig"),aBe.forEach(t),yio=r(hy," (ConvBERT model)"),hy.forEach(t),xio=i(L),tg=n(L,"LI",{});var uy=s(tg);Dme=n(uy,"STRONG",{});var nBe=s(Dme);$io=r(nBe,"convnext"),nBe.forEach(t),kio=r(uy," \u2014 "),mN=n(uy,"A",{href:!0});var sBe=s(mN);Sio=r(sBe,"ConvNextConfig"),sBe.forEach(t),Rio=r(uy," (ConvNeXT model)"),uy.forEach(t),Pio=i(L),ag=n(L,"LI",{});var py=s(ag);Gme=n(py,"STRONG",{});var lBe=s(Gme);Bio=r(lBe,"ctrl"),lBe.forEach(t),Iio=r(py," \u2014 "),fN=n(py,"A",{href:!0});var iBe=s(fN);Nio=r(iBe,"CTRLConfig"),iBe.forEach(t),qio=r(py," (CTRL model)"),py.forEach(t),jio=i(L),ng=n(L,"LI",{});var _y=s(ng);Ome=n(_y,"STRONG",{});var dBe=s(Ome);Dio=r(dBe,"cvt"),dBe.forEach(t),Gio=r(_y," \u2014 "),gN=n(_y,"A",{href:!0});var cBe=s(gN);Oio=r(cBe,"CvtConfig"),cBe.forEach(t),Vio=r(_y," (CvT model)"),_y.forEach(t),Xio=i(L),sg=n(L,"LI",{});var by=s(sg);Vme=n(by,"STRONG",{});var mBe=s(Vme);zio=r(mBe,"data2vec-audio"),mBe.forEach(t),Qio=r(by," \u2014 "),hN=n(by,"A",{href:!0});var fBe=s(hN);Wio=r(fBe,"Data2VecAudioConfig"),fBe.forEach(t),Uio=r(by," (Data2VecAudio model)"),by.forEach(t),Hio=i(L),lg=n(L,"LI",{});var vy=s(lg);Xme=n(vy,"STRONG",{});var gBe=s(Xme);Jio=r(gBe,"data2vec-text"),gBe.forEach(t),Yio=r(vy," \u2014 "),uN=n(vy,"A",{href:!0});var hBe=s(uN);Zio=r(hBe,"Data2VecTextConfig"),hBe.forEach(t),Kio=r(vy," (Data2VecText model)"),vy.forEach(t),edo=i(L),ig=n(L,"LI",{});var Fy=s(ig);zme=n(Fy,"STRONG",{});var uBe=s(zme);odo=r(uBe,"data2vec-vision"),uBe.forEach(t),rdo=r(Fy," \u2014 "),pN=n(Fy,"A",{href:!0});var pBe=s(pN);tdo=r(pBe,"Data2VecVisionConfig"),pBe.forEach(t),ado=r(Fy," (Data2VecVision model)"),Fy.forEach(t),ndo=i(L),dg=n(L,"LI",{});var Ty=s(dg);Qme=n(Ty,"STRONG",{});var _Be=s(Qme);sdo=r(_Be,"deberta"),_Be.forEach(t),ldo=r(Ty," \u2014 "),_N=n(Ty,"A",{href:!0});var bBe=s(_N);ido=r(bBe,"DebertaConfig"),bBe.forEach(t),ddo=r(Ty," (DeBERTa model)"),Ty.forEach(t),cdo=i(L),cg=n(L,"LI",{});var My=s(cg);Wme=n(My,"STRONG",{});var vBe=s(Wme);mdo=r(vBe,"deberta-v2"),vBe.forEach(t),fdo=r(My," \u2014 "),bN=n(My,"A",{href:!0});var FBe=s(bN);gdo=r(FBe,"DebertaV2Config"),FBe.forEach(t),hdo=r(My," (DeBERTa-v2 model)"),My.forEach(t),udo=i(L),mg=n(L,"LI",{});var Ey=s(mg);Ume=n(Ey,"STRONG",{});var TBe=s(Ume);pdo=r(TBe,"decision_transformer"),TBe.forEach(t),_do=r(Ey," \u2014 "),vN=n(Ey,"A",{href:!0});var MBe=s(vN);bdo=r(MBe,"DecisionTransformerConfig"),MBe.forEach(t),vdo=r(Ey," (Decision Transformer model)"),Ey.forEach(t),Fdo=i(L),fg=n(L,"LI",{});var Cy=s(fg);Hme=n(Cy,"STRONG",{});var EBe=s(Hme);Tdo=r(EBe,"deformable_detr"),EBe.forEach(t),Mdo=r(Cy," \u2014 "),FN=n(Cy,"A",{href:!0});var CBe=s(FN);Edo=r(CBe,"DeformableDetrConfig"),CBe.forEach(t),Cdo=r(Cy," (Deformable DETR model)"),Cy.forEach(t),wdo=i(L),gg=n(L,"LI",{});var wy=s(gg);Jme=n(wy,"STRONG",{});var wBe=s(Jme);Ado=r(wBe,"deit"),wBe.forEach(t),Ldo=r(wy," \u2014 "),TN=n(wy,"A",{href:!0});var v5t=s(TN);ydo=r(v5t,"DeiTConfig"),v5t.forEach(t),xdo=r(wy," (DeiT model)"),wy.forEach(t),$do=i(L),hg=n(L,"LI",{});var ABe=s(hg);Yme=n(ABe,"STRONG",{});var F5t=s(Yme);kdo=r(F5t,"detr"),F5t.forEach(t),Sdo=r(ABe," \u2014 "),MN=n(ABe,"A",{href:!0});var T5t=s(MN);Rdo=r(T5t,"DetrConfig"),T5t.forEach(t),Pdo=r(ABe," (DETR model)"),ABe.forEach(t),Bdo=i(L),ug=n(L,"LI",{});var LBe=s(ug);Zme=n(LBe,"STRONG",{});var M5t=s(Zme);Ido=r(M5t,"distilbert"),M5t.forEach(t),Ndo=r(LBe," \u2014 "),EN=n(LBe,"A",{href:!0});var E5t=s(EN);qdo=r(E5t,"DistilBertConfig"),E5t.forEach(t),jdo=r(LBe," (DistilBERT model)"),LBe.forEach(t),Ddo=i(L),pg=n(L,"LI",{});var yBe=s(pg);Kme=n(yBe,"STRONG",{});var C5t=s(Kme);Gdo=r(C5t,"donut-swin"),C5t.forEach(t),Odo=r(yBe," \u2014 "),CN=n(yBe,"A",{href:!0});var w5t=s(CN);Vdo=r(w5t,"DonutSwinConfig"),w5t.forEach(t),Xdo=r(yBe," (DonutSwin model)"),yBe.forEach(t),zdo=i(L),_g=n(L,"LI",{});var xBe=s(_g);efe=n(xBe,"STRONG",{});var A5t=s(efe);Qdo=r(A5t,"dpr"),A5t.forEach(t),Wdo=r(xBe," \u2014 "),wN=n(xBe,"A",{href:!0});var L5t=s(wN);Udo=r(L5t,"DPRConfig"),L5t.forEach(t),Hdo=r(xBe," (DPR model)"),xBe.forEach(t),Jdo=i(L),bg=n(L,"LI",{});var $Be=s(bg);ofe=n($Be,"STRONG",{});var y5t=s(ofe);Ydo=r(y5t,"dpt"),y5t.forEach(t),Zdo=r($Be," \u2014 "),AN=n($Be,"A",{href:!0});var x5t=s(AN);Kdo=r(x5t,"DPTConfig"),x5t.forEach(t),eco=r($Be," (DPT model)"),$Be.forEach(t),oco=i(L),vg=n(L,"LI",{});var kBe=s(vg);rfe=n(kBe,"STRONG",{});var $5t=s(rfe);rco=r($5t,"electra"),$5t.forEach(t),tco=r(kBe," \u2014 "),LN=n(kBe,"A",{href:!0});var k5t=s(LN);aco=r(k5t,"ElectraConfig"),k5t.forEach(t),nco=r(kBe," (ELECTRA model)"),kBe.forEach(t),sco=i(L),Fg=n(L,"LI",{});var SBe=s(Fg);tfe=n(SBe,"STRONG",{});var S5t=s(tfe);lco=r(S5t,"encoder-decoder"),S5t.forEach(t),ico=r(SBe," \u2014 "),yN=n(SBe,"A",{href:!0});var R5t=s(yN);dco=r(R5t,"EncoderDecoderConfig"),R5t.forEach(t),cco=r(SBe," (Encoder decoder model)"),SBe.forEach(t),mco=i(L),Tg=n(L,"LI",{});var RBe=s(Tg);afe=n(RBe,"STRONG",{});var P5t=s(afe);fco=r(P5t,"ernie"),P5t.forEach(t),gco=r(RBe," \u2014 "),xN=n(RBe,"A",{href:!0});var B5t=s(xN);hco=r(B5t,"ErnieConfig"),B5t.forEach(t),uco=r(RBe," (ERNIE model)"),RBe.forEach(t),pco=i(L),Mg=n(L,"LI",{});var PBe=s(Mg);nfe=n(PBe,"STRONG",{});var I5t=s(nfe);_co=r(I5t,"esm"),I5t.forEach(t),bco=r(PBe," \u2014 "),$N=n(PBe,"A",{href:!0});var N5t=s($N);vco=r(N5t,"EsmConfig"),N5t.forEach(t),Fco=r(PBe," (ESM model)"),PBe.forEach(t),Tco=i(L),Eg=n(L,"LI",{});var BBe=s(Eg);sfe=n(BBe,"STRONG",{});var q5t=s(sfe);Mco=r(q5t,"flaubert"),q5t.forEach(t),Eco=r(BBe," \u2014 "),kN=n(BBe,"A",{href:!0});var j5t=s(kN);Cco=r(j5t,"FlaubertConfig"),j5t.forEach(t),wco=r(BBe," (FlauBERT model)"),BBe.forEach(t),Aco=i(L),Cg=n(L,"LI",{});var IBe=s(Cg);lfe=n(IBe,"STRONG",{});var D5t=s(lfe);Lco=r(D5t,"flava"),D5t.forEach(t),yco=r(IBe," \u2014 "),SN=n(IBe,"A",{href:!0});var G5t=s(SN);xco=r(G5t,"FlavaConfig"),G5t.forEach(t),$co=r(IBe," (FLAVA model)"),IBe.forEach(t),kco=i(L),wg=n(L,"LI",{});var NBe=s(wg);ife=n(NBe,"STRONG",{});var O5t=s(ife);Sco=r(O5t,"fnet"),O5t.forEach(t),Rco=r(NBe," \u2014 "),RN=n(NBe,"A",{href:!0});var V5t=s(RN);Pco=r(V5t,"FNetConfig"),V5t.forEach(t),Bco=r(NBe," (FNet model)"),NBe.forEach(t),Ico=i(L),Ag=n(L,"LI",{});var qBe=s(Ag);dfe=n(qBe,"STRONG",{});var X5t=s(dfe);Nco=r(X5t,"fsmt"),X5t.forEach(t),qco=r(qBe," \u2014 "),PN=n(qBe,"A",{href:!0});var z5t=s(PN);jco=r(z5t,"FSMTConfig"),z5t.forEach(t),Dco=r(qBe," (FairSeq Machine-Translation model)"),qBe.forEach(t),Gco=i(L),Lg=n(L,"LI",{});var jBe=s(Lg);cfe=n(jBe,"STRONG",{});var Q5t=s(cfe);Oco=r(Q5t,"funnel"),Q5t.forEach(t),Vco=r(jBe," \u2014 "),BN=n(jBe,"A",{href:!0});var W5t=s(BN);Xco=r(W5t,"FunnelConfig"),W5t.forEach(t),zco=r(jBe," (Funnel Transformer model)"),jBe.forEach(t),Qco=i(L),yg=n(L,"LI",{});var DBe=s(yg);mfe=n(DBe,"STRONG",{});var U5t=s(mfe);Wco=r(U5t,"glpn"),U5t.forEach(t),Uco=r(DBe," \u2014 "),IN=n(DBe,"A",{href:!0});var H5t=s(IN);Hco=r(H5t,"GLPNConfig"),H5t.forEach(t),Jco=r(DBe," (GLPN model)"),DBe.forEach(t),Yco=i(L),xg=n(L,"LI",{});var GBe=s(xg);ffe=n(GBe,"STRONG",{});var J5t=s(ffe);Zco=r(J5t,"gpt2"),J5t.forEach(t),Kco=r(GBe," \u2014 "),NN=n(GBe,"A",{href:!0});var Y5t=s(NN);emo=r(Y5t,"GPT2Config"),Y5t.forEach(t),omo=r(GBe," (OpenAI GPT-2 model)"),GBe.forEach(t),rmo=i(L),$g=n(L,"LI",{});var OBe=s($g);gfe=n(OBe,"STRONG",{});var Z5t=s(gfe);tmo=r(Z5t,"gpt_neo"),Z5t.forEach(t),amo=r(OBe," \u2014 "),qN=n(OBe,"A",{href:!0});var K5t=s(qN);nmo=r(K5t,"GPTNeoConfig"),K5t.forEach(t),smo=r(OBe," (GPT Neo model)"),OBe.forEach(t),lmo=i(L),kg=n(L,"LI",{});var VBe=s(kg);hfe=n(VBe,"STRONG",{});var e0t=s(hfe);imo=r(e0t,"gpt_neox"),e0t.forEach(t),dmo=r(VBe," \u2014 "),jN=n(VBe,"A",{href:!0});var o0t=s(jN);cmo=r(o0t,"GPTNeoXConfig"),o0t.forEach(t),mmo=r(VBe," (GPT NeoX model)"),VBe.forEach(t),fmo=i(L),Sg=n(L,"LI",{});var XBe=s(Sg);ufe=n(XBe,"STRONG",{});var r0t=s(ufe);gmo=r(r0t,"gpt_neox_japanese"),r0t.forEach(t),hmo=r(XBe," \u2014 "),DN=n(XBe,"A",{href:!0});var t0t=s(DN);umo=r(t0t,"GPTNeoXJapaneseConfig"),t0t.forEach(t),pmo=r(XBe," (GPT NeoX Japanese model)"),XBe.forEach(t),_mo=i(L),Rg=n(L,"LI",{});var zBe=s(Rg);pfe=n(zBe,"STRONG",{});var a0t=s(pfe);bmo=r(a0t,"gptj"),a0t.forEach(t),vmo=r(zBe," \u2014 "),GN=n(zBe,"A",{href:!0});var n0t=s(GN);Fmo=r(n0t,"GPTJConfig"),n0t.forEach(t),Tmo=r(zBe," (GPT-J model)"),zBe.forEach(t),Mmo=i(L),Pg=n(L,"LI",{});var QBe=s(Pg);_fe=n(QBe,"STRONG",{});var s0t=s(_fe);Emo=r(s0t,"groupvit"),s0t.forEach(t),Cmo=r(QBe," \u2014 "),ON=n(QBe,"A",{href:!0});var l0t=s(ON);wmo=r(l0t,"GroupViTConfig"),l0t.forEach(t),Amo=r(QBe," (GroupViT model)"),QBe.forEach(t),Lmo=i(L),Bg=n(L,"LI",{});var WBe=s(Bg);bfe=n(WBe,"STRONG",{});var i0t=s(bfe);ymo=r(i0t,"hubert"),i0t.forEach(t),xmo=r(WBe," \u2014 "),VN=n(WBe,"A",{href:!0});var d0t=s(VN);$mo=r(d0t,"HubertConfig"),d0t.forEach(t),kmo=r(WBe," (Hubert model)"),WBe.forEach(t),Smo=i(L),Ig=n(L,"LI",{});var UBe=s(Ig);vfe=n(UBe,"STRONG",{});var c0t=s(vfe);Rmo=r(c0t,"ibert"),c0t.forEach(t),Pmo=r(UBe," \u2014 "),XN=n(UBe,"A",{href:!0});var m0t=s(XN);Bmo=r(m0t,"IBertConfig"),m0t.forEach(t),Imo=r(UBe," (I-BERT model)"),UBe.forEach(t),Nmo=i(L),Ng=n(L,"LI",{});var HBe=s(Ng);Ffe=n(HBe,"STRONG",{});var f0t=s(Ffe);qmo=r(f0t,"imagegpt"),f0t.forEach(t),jmo=r(HBe," \u2014 "),zN=n(HBe,"A",{href:!0});var g0t=s(zN);Dmo=r(g0t,"ImageGPTConfig"),g0t.forEach(t),Gmo=r(HBe," (ImageGPT model)"),HBe.forEach(t),Omo=i(L),qg=n(L,"LI",{});var JBe=s(qg);Tfe=n(JBe,"STRONG",{});var h0t=s(Tfe);Vmo=r(h0t,"layoutlm"),h0t.forEach(t),Xmo=r(JBe," \u2014 "),QN=n(JBe,"A",{href:!0});var u0t=s(QN);zmo=r(u0t,"LayoutLMConfig"),u0t.forEach(t),Qmo=r(JBe," (LayoutLM model)"),JBe.forEach(t),Wmo=i(L),jg=n(L,"LI",{});var YBe=s(jg);Mfe=n(YBe,"STRONG",{});var p0t=s(Mfe);Umo=r(p0t,"layoutlmv2"),p0t.forEach(t),Hmo=r(YBe," \u2014 "),WN=n(YBe,"A",{href:!0});var _0t=s(WN);Jmo=r(_0t,"LayoutLMv2Config"),_0t.forEach(t),Ymo=r(YBe," (LayoutLMv2 model)"),YBe.forEach(t),Zmo=i(L),Dg=n(L,"LI",{});var ZBe=s(Dg);Efe=n(ZBe,"STRONG",{});var b0t=s(Efe);Kmo=r(b0t,"layoutlmv3"),b0t.forEach(t),efo=r(ZBe," \u2014 "),UN=n(ZBe,"A",{href:!0});var v0t=s(UN);ofo=r(v0t,"LayoutLMv3Config"),v0t.forEach(t),rfo=r(ZBe," (LayoutLMv3 model)"),ZBe.forEach(t),tfo=i(L),Gg=n(L,"LI",{});var KBe=s(Gg);Cfe=n(KBe,"STRONG",{});var F0t=s(Cfe);afo=r(F0t,"led"),F0t.forEach(t),nfo=r(KBe," \u2014 "),HN=n(KBe,"A",{href:!0});var T0t=s(HN);sfo=r(T0t,"LEDConfig"),T0t.forEach(t),lfo=r(KBe," (LED model)"),KBe.forEach(t),ifo=i(L),Og=n(L,"LI",{});var eIe=s(Og);wfe=n(eIe,"STRONG",{});var M0t=s(wfe);dfo=r(M0t,"levit"),M0t.forEach(t),cfo=r(eIe," \u2014 "),JN=n(eIe,"A",{href:!0});var E0t=s(JN);mfo=r(E0t,"LevitConfig"),E0t.forEach(t),ffo=r(eIe," (LeViT model)"),eIe.forEach(t),gfo=i(L),Vg=n(L,"LI",{});var oIe=s(Vg);Afe=n(oIe,"STRONG",{});var C0t=s(Afe);hfo=r(C0t,"lilt"),C0t.forEach(t),ufo=r(oIe," \u2014 "),YN=n(oIe,"A",{href:!0});var w0t=s(YN);pfo=r(w0t,"LiltConfig"),w0t.forEach(t),_fo=r(oIe," (LiLT model)"),oIe.forEach(t),bfo=i(L),Xg=n(L,"LI",{});var rIe=s(Xg);Lfe=n(rIe,"STRONG",{});var A0t=s(Lfe);vfo=r(A0t,"longformer"),A0t.forEach(t),Ffo=r(rIe," \u2014 "),ZN=n(rIe,"A",{href:!0});var L0t=s(ZN);Tfo=r(L0t,"LongformerConfig"),L0t.forEach(t),Mfo=r(rIe," (Longformer model)"),rIe.forEach(t),Efo=i(L),zg=n(L,"LI",{});var tIe=s(zg);yfe=n(tIe,"STRONG",{});var y0t=s(yfe);Cfo=r(y0t,"longt5"),y0t.forEach(t),wfo=r(tIe," \u2014 "),KN=n(tIe,"A",{href:!0});var x0t=s(KN);Afo=r(x0t,"LongT5Config"),x0t.forEach(t),Lfo=r(tIe," (LongT5 model)"),tIe.forEach(t),yfo=i(L),Qg=n(L,"LI",{});var aIe=s(Qg);xfe=n(aIe,"STRONG",{});var $0t=s(xfe);xfo=r($0t,"luke"),$0t.forEach(t),$fo=r(aIe," \u2014 "),eq=n(aIe,"A",{href:!0});var k0t=s(eq);kfo=r(k0t,"LukeConfig"),k0t.forEach(t),Sfo=r(aIe," (LUKE model)"),aIe.forEach(t),Rfo=i(L),Wg=n(L,"LI",{});var nIe=s(Wg);$fe=n(nIe,"STRONG",{});var S0t=s($fe);Pfo=r(S0t,"lxmert"),S0t.forEach(t),Bfo=r(nIe," \u2014 "),oq=n(nIe,"A",{href:!0});var R0t=s(oq);Ifo=r(R0t,"LxmertConfig"),R0t.forEach(t),Nfo=r(nIe," (LXMERT model)"),nIe.forEach(t),qfo=i(L),Ug=n(L,"LI",{});var sIe=s(Ug);kfe=n(sIe,"STRONG",{});var P0t=s(kfe);jfo=r(P0t,"m2m_100"),P0t.forEach(t),Dfo=r(sIe," \u2014 "),rq=n(sIe,"A",{href:!0});var B0t=s(rq);Gfo=r(B0t,"M2M100Config"),B0t.forEach(t),Ofo=r(sIe," (M2M100 model)"),sIe.forEach(t),Vfo=i(L),Hg=n(L,"LI",{});var lIe=s(Hg);Sfe=n(lIe,"STRONG",{});var I0t=s(Sfe);Xfo=r(I0t,"marian"),I0t.forEach(t),zfo=r(lIe," \u2014 "),tq=n(lIe,"A",{href:!0});var N0t=s(tq);Qfo=r(N0t,"MarianConfig"),N0t.forEach(t),Wfo=r(lIe," (Marian model)"),lIe.forEach(t),Ufo=i(L),Jg=n(L,"LI",{});var iIe=s(Jg);Rfe=n(iIe,"STRONG",{});var q0t=s(Rfe);Hfo=r(q0t,"markuplm"),q0t.forEach(t),Jfo=r(iIe," \u2014 "),aq=n(iIe,"A",{href:!0});var j0t=s(aq);Yfo=r(j0t,"MarkupLMConfig"),j0t.forEach(t),Zfo=r(iIe," (MarkupLM model)"),iIe.forEach(t),Kfo=i(L),Yg=n(L,"LI",{});var dIe=s(Yg);Pfe=n(dIe,"STRONG",{});var D0t=s(Pfe);ego=r(D0t,"maskformer"),D0t.forEach(t),ogo=r(dIe," \u2014 "),nq=n(dIe,"A",{href:!0});var G0t=s(nq);rgo=r(G0t,"MaskFormerConfig"),G0t.forEach(t),tgo=r(dIe," (MaskFormer model)"),dIe.forEach(t),ago=i(L),Zg=n(L,"LI",{});var cIe=s(Zg);Bfe=n(cIe,"STRONG",{});var O0t=s(Bfe);ngo=r(O0t,"mbart"),O0t.forEach(t),sgo=r(cIe," \u2014 "),sq=n(cIe,"A",{href:!0});var V0t=s(sq);lgo=r(V0t,"MBartConfig"),V0t.forEach(t),igo=r(cIe," (mBART model)"),cIe.forEach(t),dgo=i(L),Kg=n(L,"LI",{});var mIe=s(Kg);Ife=n(mIe,"STRONG",{});var X0t=s(Ife);cgo=r(X0t,"mctct"),X0t.forEach(t),mgo=r(mIe," \u2014 "),lq=n(mIe,"A",{href:!0});var z0t=s(lq);fgo=r(z0t,"MCTCTConfig"),z0t.forEach(t),ggo=r(mIe," (M-CTC-T model)"),mIe.forEach(t),hgo=i(L),eh=n(L,"LI",{});var fIe=s(eh);Nfe=n(fIe,"STRONG",{});var Q0t=s(Nfe);ugo=r(Q0t,"megatron-bert"),Q0t.forEach(t),pgo=r(fIe," \u2014 "),iq=n(fIe,"A",{href:!0});var W0t=s(iq);_go=r(W0t,"MegatronBertConfig"),W0t.forEach(t),bgo=r(fIe," (Megatron-BERT model)"),fIe.forEach(t),vgo=i(L),oh=n(L,"LI",{});var gIe=s(oh);qfe=n(gIe,"STRONG",{});var U0t=s(qfe);Fgo=r(U0t,"mobilebert"),U0t.forEach(t),Tgo=r(gIe," \u2014 "),dq=n(gIe,"A",{href:!0});var H0t=s(dq);Mgo=r(H0t,"MobileBertConfig"),H0t.forEach(t),Ego=r(gIe," (MobileBERT model)"),gIe.forEach(t),Cgo=i(L),rh=n(L,"LI",{});var hIe=s(rh);jfe=n(hIe,"STRONG",{});var J0t=s(jfe);wgo=r(J0t,"mobilevit"),J0t.forEach(t),Ago=r(hIe," \u2014 "),cq=n(hIe,"A",{href:!0});var Y0t=s(cq);Lgo=r(Y0t,"MobileViTConfig"),Y0t.forEach(t),ygo=r(hIe," (MobileViT model)"),hIe.forEach(t),xgo=i(L),th=n(L,"LI",{});var uIe=s(th);Dfe=n(uIe,"STRONG",{});var Z0t=s(Dfe);$go=r(Z0t,"mpnet"),Z0t.forEach(t),kgo=r(uIe," \u2014 "),mq=n(uIe,"A",{href:!0});var K0t=s(mq);Sgo=r(K0t,"MPNetConfig"),K0t.forEach(t),Rgo=r(uIe," (MPNet model)"),uIe.forEach(t),Pgo=i(L),ah=n(L,"LI",{});var pIe=s(ah);Gfe=n(pIe,"STRONG",{});var ewt=s(Gfe);Bgo=r(ewt,"mt5"),ewt.forEach(t),Igo=r(pIe," \u2014 "),fq=n(pIe,"A",{href:!0});var owt=s(fq);Ngo=r(owt,"MT5Config"),owt.forEach(t),qgo=r(pIe," (MT5 model)"),pIe.forEach(t),jgo=i(L),nh=n(L,"LI",{});var _Ie=s(nh);Ofe=n(_Ie,"STRONG",{});var rwt=s(Ofe);Dgo=r(rwt,"mvp"),rwt.forEach(t),Ggo=r(_Ie," \u2014 "),gq=n(_Ie,"A",{href:!0});var twt=s(gq);Ogo=r(twt,"MvpConfig"),twt.forEach(t),Vgo=r(_Ie," (MVP model)"),_Ie.forEach(t),Xgo=i(L),sh=n(L,"LI",{});var bIe=s(sh);Vfe=n(bIe,"STRONG",{});var awt=s(Vfe);zgo=r(awt,"nezha"),awt.forEach(t),Qgo=r(bIe," \u2014 "),hq=n(bIe,"A",{href:!0});var nwt=s(hq);Wgo=r(nwt,"NezhaConfig"),nwt.forEach(t),Ugo=r(bIe," (Nezha model)"),bIe.forEach(t),Hgo=i(L),lh=n(L,"LI",{});var vIe=s(lh);Xfe=n(vIe,"STRONG",{});var swt=s(Xfe);Jgo=r(swt,"nystromformer"),swt.forEach(t),Ygo=r(vIe," \u2014 "),uq=n(vIe,"A",{href:!0});var lwt=s(uq);Zgo=r(lwt,"NystromformerConfig"),lwt.forEach(t),Kgo=r(vIe," (Nystr\xF6mformer model)"),vIe.forEach(t),eho=i(L),ih=n(L,"LI",{});var FIe=s(ih);zfe=n(FIe,"STRONG",{});var iwt=s(zfe);oho=r(iwt,"openai-gpt"),iwt.forEach(t),rho=r(FIe," \u2014 "),pq=n(FIe,"A",{href:!0});var dwt=s(pq);tho=r(dwt,"OpenAIGPTConfig"),dwt.forEach(t),aho=r(FIe," (OpenAI GPT model)"),FIe.forEach(t),nho=i(L),dh=n(L,"LI",{});var TIe=s(dh);Qfe=n(TIe,"STRONG",{});var cwt=s(Qfe);sho=r(cwt,"opt"),cwt.forEach(t),lho=r(TIe," \u2014 "),_q=n(TIe,"A",{href:!0});var mwt=s(_q);iho=r(mwt,"OPTConfig"),mwt.forEach(t),dho=r(TIe," (OPT model)"),TIe.forEach(t),cho=i(L),ch=n(L,"LI",{});var MIe=s(ch);Wfe=n(MIe,"STRONG",{});var fwt=s(Wfe);mho=r(fwt,"owlvit"),fwt.forEach(t),fho=r(MIe," \u2014 "),bq=n(MIe,"A",{href:!0});var gwt=s(bq);gho=r(gwt,"OwlViTConfig"),gwt.forEach(t),hho=r(MIe," (OWL-ViT model)"),MIe.forEach(t),uho=i(L),mh=n(L,"LI",{});var EIe=s(mh);Ufe=n(EIe,"STRONG",{});var hwt=s(Ufe);pho=r(hwt,"pegasus"),hwt.forEach(t),_ho=r(EIe," \u2014 "),vq=n(EIe,"A",{href:!0});var uwt=s(vq);bho=r(uwt,"PegasusConfig"),uwt.forEach(t),vho=r(EIe," (Pegasus model)"),EIe.forEach(t),Fho=i(L),fh=n(L,"LI",{});var CIe=s(fh);Hfe=n(CIe,"STRONG",{});var pwt=s(Hfe);Tho=r(pwt,"pegasus_x"),pwt.forEach(t),Mho=r(CIe," \u2014 "),Fq=n(CIe,"A",{href:!0});var _wt=s(Fq);Eho=r(_wt,"PegasusXConfig"),_wt.forEach(t),Cho=r(CIe," (PEGASUS-X model)"),CIe.forEach(t),who=i(L),gh=n(L,"LI",{});var wIe=s(gh);Jfe=n(wIe,"STRONG",{});var bwt=s(Jfe);Aho=r(bwt,"perceiver"),bwt.forEach(t),Lho=r(wIe," \u2014 "),Tq=n(wIe,"A",{href:!0});var vwt=s(Tq);yho=r(vwt,"PerceiverConfig"),vwt.forEach(t),xho=r(wIe," (Perceiver model)"),wIe.forEach(t),$ho=i(L),hh=n(L,"LI",{});var AIe=s(hh);Yfe=n(AIe,"STRONG",{});var Fwt=s(Yfe);kho=r(Fwt,"plbart"),Fwt.forEach(t),Sho=r(AIe," \u2014 "),Mq=n(AIe,"A",{href:!0});var Twt=s(Mq);Rho=r(Twt,"PLBartConfig"),Twt.forEach(t),Pho=r(AIe," (PLBart model)"),AIe.forEach(t),Bho=i(L),uh=n(L,"LI",{});var LIe=s(uh);Zfe=n(LIe,"STRONG",{});var Mwt=s(Zfe);Iho=r(Mwt,"poolformer"),Mwt.forEach(t),Nho=r(LIe," \u2014 "),Eq=n(LIe,"A",{href:!0});var Ewt=s(Eq);qho=r(Ewt,"PoolFormerConfig"),Ewt.forEach(t),jho=r(LIe," (PoolFormer model)"),LIe.forEach(t),Dho=i(L),ph=n(L,"LI",{});var yIe=s(ph);Kfe=n(yIe,"STRONG",{});var Cwt=s(Kfe);Gho=r(Cwt,"prophetnet"),Cwt.forEach(t),Oho=r(yIe," \u2014 "),Cq=n(yIe,"A",{href:!0});var wwt=s(Cq);Vho=r(wwt,"ProphetNetConfig"),wwt.forEach(t),Xho=r(yIe," (ProphetNet model)"),yIe.forEach(t),zho=i(L),_h=n(L,"LI",{});var xIe=s(_h);ege=n(xIe,"STRONG",{});var Awt=s(ege);Qho=r(Awt,"qdqbert"),Awt.forEach(t),Who=r(xIe," \u2014 "),wq=n(xIe,"A",{href:!0});var Lwt=s(wq);Uho=r(Lwt,"QDQBertConfig"),Lwt.forEach(t),Hho=r(xIe," (QDQBert model)"),xIe.forEach(t),Jho=i(L),bh=n(L,"LI",{});var $Ie=s(bh);oge=n($Ie,"STRONG",{});var ywt=s(oge);Yho=r(ywt,"rag"),ywt.forEach(t),Zho=r($Ie," \u2014 "),Aq=n($Ie,"A",{href:!0});var xwt=s(Aq);Kho=r(xwt,"RagConfig"),xwt.forEach(t),euo=r($Ie," (RAG model)"),$Ie.forEach(t),ouo=i(L),vh=n(L,"LI",{});var kIe=s(vh);rge=n(kIe,"STRONG",{});var $wt=s(rge);ruo=r($wt,"realm"),$wt.forEach(t),tuo=r(kIe," \u2014 "),Lq=n(kIe,"A",{href:!0});var kwt=s(Lq);auo=r(kwt,"RealmConfig"),kwt.forEach(t),nuo=r(kIe," (REALM model)"),kIe.forEach(t),suo=i(L),Fh=n(L,"LI",{});var SIe=s(Fh);tge=n(SIe,"STRONG",{});var Swt=s(tge);luo=r(Swt,"reformer"),Swt.forEach(t),iuo=r(SIe," \u2014 "),yq=n(SIe,"A",{href:!0});var Rwt=s(yq);duo=r(Rwt,"ReformerConfig"),Rwt.forEach(t),cuo=r(SIe," (Reformer model)"),SIe.forEach(t),muo=i(L),Th=n(L,"LI",{});var RIe=s(Th);age=n(RIe,"STRONG",{});var Pwt=s(age);fuo=r(Pwt,"regnet"),Pwt.forEach(t),guo=r(RIe," \u2014 "),xq=n(RIe,"A",{href:!0});var Bwt=s(xq);huo=r(Bwt,"RegNetConfig"),Bwt.forEach(t),uuo=r(RIe," (RegNet model)"),RIe.forEach(t),puo=i(L),Mh=n(L,"LI",{});var PIe=s(Mh);nge=n(PIe,"STRONG",{});var Iwt=s(nge);_uo=r(Iwt,"rembert"),Iwt.forEach(t),buo=r(PIe," \u2014 "),$q=n(PIe,"A",{href:!0});var Nwt=s($q);vuo=r(Nwt,"RemBertConfig"),Nwt.forEach(t),Fuo=r(PIe," (RemBERT model)"),PIe.forEach(t),Tuo=i(L),Eh=n(L,"LI",{});var BIe=s(Eh);sge=n(BIe,"STRONG",{});var qwt=s(sge);Muo=r(qwt,"resnet"),qwt.forEach(t),Euo=r(BIe," \u2014 "),kq=n(BIe,"A",{href:!0});var jwt=s(kq);Cuo=r(jwt,"ResNetConfig"),jwt.forEach(t),wuo=r(BIe," (ResNet model)"),BIe.forEach(t),Auo=i(L),Ch=n(L,"LI",{});var IIe=s(Ch);lge=n(IIe,"STRONG",{});var Dwt=s(lge);Luo=r(Dwt,"retribert"),Dwt.forEach(t),yuo=r(IIe," \u2014 "),Sq=n(IIe,"A",{href:!0});var Gwt=s(Sq);xuo=r(Gwt,"RetriBertConfig"),Gwt.forEach(t),$uo=r(IIe," (RetriBERT model)"),IIe.forEach(t),kuo=i(L),wh=n(L,"LI",{});var NIe=s(wh);ige=n(NIe,"STRONG",{});var Owt=s(ige);Suo=r(Owt,"roberta"),Owt.forEach(t),Ruo=r(NIe," \u2014 "),Rq=n(NIe,"A",{href:!0});var Vwt=s(Rq);Puo=r(Vwt,"RobertaConfig"),Vwt.forEach(t),Buo=r(NIe," (RoBERTa model)"),NIe.forEach(t),Iuo=i(L),Ah=n(L,"LI",{});var qIe=s(Ah);dge=n(qIe,"STRONG",{});var Xwt=s(dge);Nuo=r(Xwt,"roformer"),Xwt.forEach(t),quo=r(qIe," \u2014 "),Pq=n(qIe,"A",{href:!0});var zwt=s(Pq);juo=r(zwt,"RoFormerConfig"),zwt.forEach(t),Duo=r(qIe," (RoFormer model)"),qIe.forEach(t),Guo=i(L),Lh=n(L,"LI",{});var jIe=s(Lh);cge=n(jIe,"STRONG",{});var Qwt=s(cge);Ouo=r(Qwt,"segformer"),Qwt.forEach(t),Vuo=r(jIe," \u2014 "),Bq=n(jIe,"A",{href:!0});var Wwt=s(Bq);Xuo=r(Wwt,"SegformerConfig"),Wwt.forEach(t),zuo=r(jIe," (SegFormer model)"),jIe.forEach(t),Quo=i(L),yh=n(L,"LI",{});var DIe=s(yh);mge=n(DIe,"STRONG",{});var Uwt=s(mge);Wuo=r(Uwt,"sew"),Uwt.forEach(t),Uuo=r(DIe," \u2014 "),Iq=n(DIe,"A",{href:!0});var Hwt=s(Iq);Huo=r(Hwt,"SEWConfig"),Hwt.forEach(t),Juo=r(DIe," (SEW model)"),DIe.forEach(t),Yuo=i(L),xh=n(L,"LI",{});var GIe=s(xh);fge=n(GIe,"STRONG",{});var Jwt=s(fge);Zuo=r(Jwt,"sew-d"),Jwt.forEach(t),Kuo=r(GIe," \u2014 "),Nq=n(GIe,"A",{href:!0});var Ywt=s(Nq);epo=r(Ywt,"SEWDConfig"),Ywt.forEach(t),opo=r(GIe," (SEW-D model)"),GIe.forEach(t),rpo=i(L),$h=n(L,"LI",{});var OIe=s($h);gge=n(OIe,"STRONG",{});var Zwt=s(gge);tpo=r(Zwt,"speech-encoder-decoder"),Zwt.forEach(t),apo=r(OIe," \u2014 "),qq=n(OIe,"A",{href:!0});var Kwt=s(qq);npo=r(Kwt,"SpeechEncoderDecoderConfig"),Kwt.forEach(t),spo=r(OIe," (Speech Encoder decoder model)"),OIe.forEach(t),lpo=i(L),kh=n(L,"LI",{});var VIe=s(kh);hge=n(VIe,"STRONG",{});var eAt=s(hge);ipo=r(eAt,"speech_to_text"),eAt.forEach(t),dpo=r(VIe," \u2014 "),jq=n(VIe,"A",{href:!0});var oAt=s(jq);cpo=r(oAt,"Speech2TextConfig"),oAt.forEach(t),mpo=r(VIe," (Speech2Text model)"),VIe.forEach(t),fpo=i(L),Sh=n(L,"LI",{});var XIe=s(Sh);uge=n(XIe,"STRONG",{});var rAt=s(uge);gpo=r(rAt,"speech_to_text_2"),rAt.forEach(t),hpo=r(XIe," \u2014 "),Dq=n(XIe,"A",{href:!0});var tAt=s(Dq);upo=r(tAt,"Speech2Text2Config"),tAt.forEach(t),ppo=r(XIe," (Speech2Text2 model)"),XIe.forEach(t),_po=i(L),Rh=n(L,"LI",{});var zIe=s(Rh);pge=n(zIe,"STRONG",{});var aAt=s(pge);bpo=r(aAt,"splinter"),aAt.forEach(t),vpo=r(zIe," \u2014 "),Gq=n(zIe,"A",{href:!0});var nAt=s(Gq);Fpo=r(nAt,"SplinterConfig"),nAt.forEach(t),Tpo=r(zIe," (Splinter model)"),zIe.forEach(t),Mpo=i(L),Ph=n(L,"LI",{});var QIe=s(Ph);_ge=n(QIe,"STRONG",{});var sAt=s(_ge);Epo=r(sAt,"squeezebert"),sAt.forEach(t),Cpo=r(QIe," \u2014 "),Oq=n(QIe,"A",{href:!0});var lAt=s(Oq);wpo=r(lAt,"SqueezeBertConfig"),lAt.forEach(t),Apo=r(QIe," (SqueezeBERT model)"),QIe.forEach(t),Lpo=i(L),Bh=n(L,"LI",{});var WIe=s(Bh);bge=n(WIe,"STRONG",{});var iAt=s(bge);ypo=r(iAt,"swin"),iAt.forEach(t),xpo=r(WIe," \u2014 "),Vq=n(WIe,"A",{href:!0});var dAt=s(Vq);$po=r(dAt,"SwinConfig"),dAt.forEach(t),kpo=r(WIe," (Swin Transformer model)"),WIe.forEach(t),Spo=i(L),Ih=n(L,"LI",{});var UIe=s(Ih);vge=n(UIe,"STRONG",{});var cAt=s(vge);Rpo=r(cAt,"swinv2"),cAt.forEach(t),Ppo=r(UIe," \u2014 "),Xq=n(UIe,"A",{href:!0});var mAt=s(Xq);Bpo=r(mAt,"Swinv2Config"),mAt.forEach(t),Ipo=r(UIe," (Swin Transformer V2 model)"),UIe.forEach(t),Npo=i(L),Nh=n(L,"LI",{});var HIe=s(Nh);Fge=n(HIe,"STRONG",{});var fAt=s(Fge);qpo=r(fAt,"t5"),fAt.forEach(t),jpo=r(HIe," \u2014 "),zq=n(HIe,"A",{href:!0});var gAt=s(zq);Dpo=r(gAt,"T5Config"),gAt.forEach(t),Gpo=r(HIe," (T5 model)"),HIe.forEach(t),Opo=i(L),qh=n(L,"LI",{});var JIe=s(qh);Tge=n(JIe,"STRONG",{});var hAt=s(Tge);Vpo=r(hAt,"tapas"),hAt.forEach(t),Xpo=r(JIe," \u2014 "),Qq=n(JIe,"A",{href:!0});var uAt=s(Qq);zpo=r(uAt,"TapasConfig"),uAt.forEach(t),Qpo=r(JIe," (TAPAS model)"),JIe.forEach(t),Wpo=i(L),jh=n(L,"LI",{});var YIe=s(jh);Mge=n(YIe,"STRONG",{});var pAt=s(Mge);Upo=r(pAt,"time_series_transformer"),pAt.forEach(t),Hpo=r(YIe," \u2014 "),Wq=n(YIe,"A",{href:!0});var _At=s(Wq);Jpo=r(_At,"TimeSeriesTransformerConfig"),_At.forEach(t),Ypo=r(YIe," (Time Series Transformer model)"),YIe.forEach(t),Zpo=i(L),Dh=n(L,"LI",{});var ZIe=s(Dh);Ege=n(ZIe,"STRONG",{});var bAt=s(Ege);Kpo=r(bAt,"trajectory_transformer"),bAt.forEach(t),e_o=r(ZIe," \u2014 "),Uq=n(ZIe,"A",{href:!0});var vAt=s(Uq);o_o=r(vAt,"TrajectoryTransformerConfig"),vAt.forEach(t),r_o=r(ZIe," (Trajectory Transformer model)"),ZIe.forEach(t),t_o=i(L),Gh=n(L,"LI",{});var KIe=s(Gh);Cge=n(KIe,"STRONG",{});var FAt=s(Cge);a_o=r(FAt,"transfo-xl"),FAt.forEach(t),n_o=r(KIe," \u2014 "),Hq=n(KIe,"A",{href:!0});var TAt=s(Hq);s_o=r(TAt,"TransfoXLConfig"),TAt.forEach(t),l_o=r(KIe," (Transformer-XL model)"),KIe.forEach(t),i_o=i(L),Oh=n(L,"LI",{});var eNe=s(Oh);wge=n(eNe,"STRONG",{});var MAt=s(wge);d_o=r(MAt,"trocr"),MAt.forEach(t),c_o=r(eNe," \u2014 "),Jq=n(eNe,"A",{href:!0});var EAt=s(Jq);m_o=r(EAt,"TrOCRConfig"),EAt.forEach(t),f_o=r(eNe," (TrOCR model)"),eNe.forEach(t),g_o=i(L),Vh=n(L,"LI",{});var oNe=s(Vh);Age=n(oNe,"STRONG",{});var CAt=s(Age);h_o=r(CAt,"unispeech"),CAt.forEach(t),u_o=r(oNe," \u2014 "),Yq=n(oNe,"A",{href:!0});var wAt=s(Yq);p_o=r(wAt,"UniSpeechConfig"),wAt.forEach(t),__o=r(oNe," (UniSpeech model)"),oNe.forEach(t),b_o=i(L),Xh=n(L,"LI",{});var rNe=s(Xh);Lge=n(rNe,"STRONG",{});var AAt=s(Lge);v_o=r(AAt,"unispeech-sat"),AAt.forEach(t),F_o=r(rNe," \u2014 "),Zq=n(rNe,"A",{href:!0});var LAt=s(Zq);T_o=r(LAt,"UniSpeechSatConfig"),LAt.forEach(t),M_o=r(rNe," (UniSpeechSat model)"),rNe.forEach(t),E_o=i(L),zh=n(L,"LI",{});var tNe=s(zh);yge=n(tNe,"STRONG",{});var yAt=s(yge);C_o=r(yAt,"van"),yAt.forEach(t),w_o=r(tNe," \u2014 "),Kq=n(tNe,"A",{href:!0});var xAt=s(Kq);A_o=r(xAt,"VanConfig"),xAt.forEach(t),L_o=r(tNe," (VAN model)"),tNe.forEach(t),y_o=i(L),Qh=n(L,"LI",{});var aNe=s(Qh);xge=n(aNe,"STRONG",{});var $At=s(xge);x_o=r($At,"videomae"),$At.forEach(t),$_o=r(aNe," \u2014 "),ej=n(aNe,"A",{href:!0});var kAt=s(ej);k_o=r(kAt,"VideoMAEConfig"),kAt.forEach(t),S_o=r(aNe," (VideoMAE model)"),aNe.forEach(t),R_o=i(L),Wh=n(L,"LI",{});var nNe=s(Wh);$ge=n(nNe,"STRONG",{});var SAt=s($ge);P_o=r(SAt,"vilt"),SAt.forEach(t),B_o=r(nNe," \u2014 "),oj=n(nNe,"A",{href:!0});var RAt=s(oj);I_o=r(RAt,"ViltConfig"),RAt.forEach(t),N_o=r(nNe," (ViLT model)"),nNe.forEach(t),q_o=i(L),Uh=n(L,"LI",{});var sNe=s(Uh);kge=n(sNe,"STRONG",{});var PAt=s(kge);j_o=r(PAt,"vision-encoder-decoder"),PAt.forEach(t),D_o=r(sNe," \u2014 "),rj=n(sNe,"A",{href:!0});var BAt=s(rj);G_o=r(BAt,"VisionEncoderDecoderConfig"),BAt.forEach(t),O_o=r(sNe," (Vision Encoder decoder model)"),sNe.forEach(t),V_o=i(L),Hh=n(L,"LI",{});var lNe=s(Hh);Sge=n(lNe,"STRONG",{});var IAt=s(Sge);X_o=r(IAt,"vision-text-dual-encoder"),IAt.forEach(t),z_o=r(lNe," \u2014 "),tj=n(lNe,"A",{href:!0});var NAt=s(tj);Q_o=r(NAt,"VisionTextDualEncoderConfig"),NAt.forEach(t),W_o=r(lNe," (VisionTextDualEncoder model)"),lNe.forEach(t),U_o=i(L),Jh=n(L,"LI",{});var iNe=s(Jh);Rge=n(iNe,"STRONG",{});var qAt=s(Rge);H_o=r(qAt,"visual_bert"),qAt.forEach(t),J_o=r(iNe," \u2014 "),aj=n(iNe,"A",{href:!0});var jAt=s(aj);Y_o=r(jAt,"VisualBertConfig"),jAt.forEach(t),Z_o=r(iNe," (VisualBERT model)"),iNe.forEach(t),K_o=i(L),Yh=n(L,"LI",{});var dNe=s(Yh);Pge=n(dNe,"STRONG",{});var DAt=s(Pge);e1o=r(DAt,"vit"),DAt.forEach(t),o1o=r(dNe," \u2014 "),nj=n(dNe,"A",{href:!0});var GAt=s(nj);r1o=r(GAt,"ViTConfig"),GAt.forEach(t),t1o=r(dNe," (ViT model)"),dNe.forEach(t),a1o=i(L),Zh=n(L,"LI",{});var cNe=s(Zh);Bge=n(cNe,"STRONG",{});var OAt=s(Bge);n1o=r(OAt,"vit_mae"),OAt.forEach(t),s1o=r(cNe," \u2014 "),sj=n(cNe,"A",{href:!0});var VAt=s(sj);l1o=r(VAt,"ViTMAEConfig"),VAt.forEach(t),i1o=r(cNe," (ViTMAE model)"),cNe.forEach(t),d1o=i(L),Kh=n(L,"LI",{});var mNe=s(Kh);Ige=n(mNe,"STRONG",{});var XAt=s(Ige);c1o=r(XAt,"vit_msn"),XAt.forEach(t),m1o=r(mNe," \u2014 "),lj=n(mNe,"A",{href:!0});var zAt=s(lj);f1o=r(zAt,"ViTMSNConfig"),zAt.forEach(t),g1o=r(mNe," (ViTMSN model)"),mNe.forEach(t),h1o=i(L),eu=n(L,"LI",{});var fNe=s(eu);Nge=n(fNe,"STRONG",{});var QAt=s(Nge);u1o=r(QAt,"wav2vec2"),QAt.forEach(t),p1o=r(fNe," \u2014 "),ij=n(fNe,"A",{href:!0});var WAt=s(ij);_1o=r(WAt,"Wav2Vec2Config"),WAt.forEach(t),b1o=r(fNe," (Wav2Vec2 model)"),fNe.forEach(t),v1o=i(L),ou=n(L,"LI",{});var gNe=s(ou);qge=n(gNe,"STRONG",{});var UAt=s(qge);F1o=r(UAt,"wav2vec2-conformer"),UAt.forEach(t),T1o=r(gNe," \u2014 "),dj=n(gNe,"A",{href:!0});var HAt=s(dj);M1o=r(HAt,"Wav2Vec2ConformerConfig"),HAt.forEach(t),E1o=r(gNe," (Wav2Vec2-Conformer model)"),gNe.forEach(t),C1o=i(L),ru=n(L,"LI",{});var hNe=s(ru);jge=n(hNe,"STRONG",{});var JAt=s(jge);w1o=r(JAt,"wavlm"),JAt.forEach(t),A1o=r(hNe," \u2014 "),cj=n(hNe,"A",{href:!0});var YAt=s(cj);L1o=r(YAt,"WavLMConfig"),YAt.forEach(t),y1o=r(hNe," (WavLM model)"),hNe.forEach(t),x1o=i(L),tu=n(L,"LI",{});var uNe=s(tu);Dge=n(uNe,"STRONG",{});var ZAt=s(Dge);$1o=r(ZAt,"whisper"),ZAt.forEach(t),k1o=r(uNe," \u2014 "),mj=n(uNe,"A",{href:!0});var KAt=s(mj);S1o=r(KAt,"WhisperConfig"),KAt.forEach(t),R1o=r(uNe," (Whisper model)"),uNe.forEach(t),P1o=i(L),au=n(L,"LI",{});var pNe=s(au);Gge=n(pNe,"STRONG",{});var e6t=s(Gge);B1o=r(e6t,"xclip"),e6t.forEach(t),I1o=r(pNe," \u2014 "),fj=n(pNe,"A",{href:!0});var o6t=s(fj);N1o=r(o6t,"XCLIPConfig"),o6t.forEach(t),q1o=r(pNe," (X-CLIP model)"),pNe.forEach(t),j1o=i(L),nu=n(L,"LI",{});var _Ne=s(nu);Oge=n(_Ne,"STRONG",{});var r6t=s(Oge);D1o=r(r6t,"xglm"),r6t.forEach(t),G1o=r(_Ne," \u2014 "),gj=n(_Ne,"A",{href:!0});var t6t=s(gj);O1o=r(t6t,"XGLMConfig"),t6t.forEach(t),V1o=r(_Ne," (XGLM model)"),_Ne.forEach(t),X1o=i(L),su=n(L,"LI",{});var bNe=s(su);Vge=n(bNe,"STRONG",{});var a6t=s(Vge);z1o=r(a6t,"xlm"),a6t.forEach(t),Q1o=r(bNe," \u2014 "),hj=n(bNe,"A",{href:!0});var n6t=s(hj);W1o=r(n6t,"XLMConfig"),n6t.forEach(t),U1o=r(bNe," (XLM model)"),bNe.forEach(t),H1o=i(L),lu=n(L,"LI",{});var vNe=s(lu);Xge=n(vNe,"STRONG",{});var s6t=s(Xge);J1o=r(s6t,"xlm-prophetnet"),s6t.forEach(t),Y1o=r(vNe," \u2014 "),uj=n(vNe,"A",{href:!0});var l6t=s(uj);Z1o=r(l6t,"XLMProphetNetConfig"),l6t.forEach(t),K1o=r(vNe," (XLM-ProphetNet model)"),vNe.forEach(t),e2o=i(L),iu=n(L,"LI",{});var FNe=s(iu);zge=n(FNe,"STRONG",{});var i6t=s(zge);o2o=r(i6t,"xlm-roberta"),i6t.forEach(t),r2o=r(FNe," \u2014 "),pj=n(FNe,"A",{href:!0});var d6t=s(pj);t2o=r(d6t,"XLMRobertaConfig"),d6t.forEach(t),a2o=r(FNe," (XLM-RoBERTa model)"),FNe.forEach(t),n2o=i(L),du=n(L,"LI",{});var TNe=s(du);Qge=n(TNe,"STRONG",{});var c6t=s(Qge);s2o=r(c6t,"xlm-roberta-xl"),c6t.forEach(t),l2o=r(TNe," \u2014 "),_j=n(TNe,"A",{href:!0});var m6t=s(_j);i2o=r(m6t,"XLMRobertaXLConfig"),m6t.forEach(t),d2o=r(TNe," (XLM-RoBERTa-XL model)"),TNe.forEach(t),c2o=i(L),cu=n(L,"LI",{});var MNe=s(cu);Wge=n(MNe,"STRONG",{});var f6t=s(Wge);m2o=r(f6t,"xlnet"),f6t.forEach(t),f2o=r(MNe," \u2014 "),bj=n(MNe,"A",{href:!0});var g6t=s(bj);g2o=r(g6t,"XLNetConfig"),g6t.forEach(t),h2o=r(MNe," (XLNet model)"),MNe.forEach(t),u2o=i(L),mu=n(L,"LI",{});var ENe=s(mu);Uge=n(ENe,"STRONG",{});var h6t=s(Uge);p2o=r(h6t,"yolos"),h6t.forEach(t),_2o=r(ENe," \u2014 "),vj=n(ENe,"A",{href:!0});var u6t=s(vj);b2o=r(u6t,"YolosConfig"),u6t.forEach(t),v2o=r(ENe," (YOLOS model)"),ENe.forEach(t),F2o=i(L),fu=n(L,"LI",{});var CNe=s(fu);Hge=n(CNe,"STRONG",{});var p6t=s(Hge);T2o=r(p6t,"yoso"),p6t.forEach(t),M2o=r(CNe," \u2014 "),Fj=n(CNe,"A",{href:!0});var _6t=s(Fj);E2o=r(_6t,"YosoConfig"),_6t.forEach(t),C2o=r(CNe," (YOSO model)"),CNe.forEach(t),L.forEach(t),w2o=i(_t),T(gu.$$.fragment,_t),_t.forEach(t),A2o=i(pt),hu=n(pt,"DIV",{class:!0});var mao=s(hu);T(Vx.$$.fragment,mao),L2o=i(mao),Jge=n(mao,"P",{});var b6t=s(Jge);y2o=r(b6t,"Register a new configuration for this class."),b6t.forEach(t),mao.forEach(t),pt.forEach(t),rro=i(m),Fd=n(m,"H2",{class:!0});var fao=s(Fd);uu=n(fao,"A",{id:!0,class:!0,href:!0});var v6t=s(uu);Yge=n(v6t,"SPAN",{});var F6t=s(Yge);T(Xx.$$.fragment,F6t),F6t.forEach(t),v6t.forEach(t),x2o=i(fao),Zge=n(fao,"SPAN",{});var T6t=s(Zge);$2o=r(T6t,"AutoTokenizer"),T6t.forEach(t),fao.forEach(t),tro=i(m),So=n(m,"DIV",{class:!0});var yl=s(So);T(zx.$$.fragment,yl),k2o=i(yl),Qx=n(yl,"P",{});var gao=s(Qx);S2o=r(gao,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Tj=n(gao,"A",{href:!0});var M6t=s(Tj);R2o=r(M6t,"AutoTokenizer.from_pretrained()"),M6t.forEach(t),P2o=r(gao," class method."),gao.forEach(t),B2o=i(yl),Wx=n(yl,"P",{});var hao=s(Wx);I2o=r(hao,"This class cannot be instantiated directly using "),Kge=n(hao,"CODE",{});var E6t=s(Kge);N2o=r(E6t,"__init__()"),E6t.forEach(t),q2o=r(hao," (throws an error)."),hao.forEach(t),j2o=i(yl),Nr=n(yl,"DIV",{class:!0});var xl=s(Nr);T(Ux.$$.fragment,xl),D2o=i(xl),ehe=n(xl,"P",{});var C6t=s(ehe);G2o=r(C6t,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),C6t.forEach(t),O2o=i(xl),Za=n(xl,"P",{});var Ay=s(Za);V2o=r(Ay,"The tokenizer class to instantiate is selected based on the "),ohe=n(Ay,"CODE",{});var w6t=s(ohe);X2o=r(w6t,"model_type"),w6t.forEach(t),z2o=r(Ay,` property of the config object (either
passed as an argument or loaded from `),rhe=n(Ay,"CODE",{});var A6t=s(rhe);Q2o=r(A6t,"pretrained_model_name_or_path"),A6t.forEach(t),W2o=r(Ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=n(Ay,"CODE",{});var L6t=s(the);U2o=r(L6t,"pretrained_model_name_or_path"),L6t.forEach(t),H2o=r(Ay,":"),Ay.forEach(t),J2o=i(xl),k=n(xl,"UL",{});var S=s(k);cs=n(S,"LI",{});var CB=s(cs);ahe=n(CB,"STRONG",{});var y6t=s(ahe);Y2o=r(y6t,"albert"),y6t.forEach(t),Z2o=r(CB," \u2014 "),Mj=n(CB,"A",{href:!0});var x6t=s(Mj);K2o=r(x6t,"AlbertTokenizer"),x6t.forEach(t),ebo=r(CB," or "),Ej=n(CB,"A",{href:!0});var $6t=s(Ej);obo=r($6t,"AlbertTokenizerFast"),$6t.forEach(t),rbo=r(CB," (ALBERT model)"),CB.forEach(t),tbo=i(S),ms=n(S,"LI",{});var wB=s(ms);nhe=n(wB,"STRONG",{});var k6t=s(nhe);abo=r(k6t,"bart"),k6t.forEach(t),nbo=r(wB," \u2014 "),Cj=n(wB,"A",{href:!0});var S6t=s(Cj);sbo=r(S6t,"BartTokenizer"),S6t.forEach(t),lbo=r(wB," or "),wj=n(wB,"A",{href:!0});var R6t=s(wj);ibo=r(R6t,"BartTokenizerFast"),R6t.forEach(t),dbo=r(wB," (BART model)"),wB.forEach(t),cbo=i(S),fs=n(S,"LI",{});var AB=s(fs);she=n(AB,"STRONG",{});var P6t=s(she);mbo=r(P6t,"barthez"),P6t.forEach(t),fbo=r(AB," \u2014 "),Aj=n(AB,"A",{href:!0});var B6t=s(Aj);gbo=r(B6t,"BarthezTokenizer"),B6t.forEach(t),hbo=r(AB," or "),Lj=n(AB,"A",{href:!0});var I6t=s(Lj);ubo=r(I6t,"BarthezTokenizerFast"),I6t.forEach(t),pbo=r(AB," (BARThez model)"),AB.forEach(t),_bo=i(S),pu=n(S,"LI",{});var wNe=s(pu);lhe=n(wNe,"STRONG",{});var N6t=s(lhe);bbo=r(N6t,"bartpho"),N6t.forEach(t),vbo=r(wNe," \u2014 "),yj=n(wNe,"A",{href:!0});var q6t=s(yj);Fbo=r(q6t,"BartphoTokenizer"),q6t.forEach(t),Tbo=r(wNe," (BARTpho model)"),wNe.forEach(t),Mbo=i(S),gs=n(S,"LI",{});var LB=s(gs);ihe=n(LB,"STRONG",{});var j6t=s(ihe);Ebo=r(j6t,"bert"),j6t.forEach(t),Cbo=r(LB," \u2014 "),xj=n(LB,"A",{href:!0});var D6t=s(xj);wbo=r(D6t,"BertTokenizer"),D6t.forEach(t),Abo=r(LB," or "),$j=n(LB,"A",{href:!0});var G6t=s($j);Lbo=r(G6t,"BertTokenizerFast"),G6t.forEach(t),ybo=r(LB," (BERT model)"),LB.forEach(t),xbo=i(S),_u=n(S,"LI",{});var ANe=s(_u);dhe=n(ANe,"STRONG",{});var O6t=s(dhe);$bo=r(O6t,"bert-generation"),O6t.forEach(t),kbo=r(ANe," \u2014 "),kj=n(ANe,"A",{href:!0});var V6t=s(kj);Sbo=r(V6t,"BertGenerationTokenizer"),V6t.forEach(t),Rbo=r(ANe," (Bert Generation model)"),ANe.forEach(t),Pbo=i(S),bu=n(S,"LI",{});var LNe=s(bu);che=n(LNe,"STRONG",{});var X6t=s(che);Bbo=r(X6t,"bert-japanese"),X6t.forEach(t),Ibo=r(LNe," \u2014 "),Sj=n(LNe,"A",{href:!0});var z6t=s(Sj);Nbo=r(z6t,"BertJapaneseTokenizer"),z6t.forEach(t),qbo=r(LNe," (BertJapanese model)"),LNe.forEach(t),jbo=i(S),vu=n(S,"LI",{});var yNe=s(vu);mhe=n(yNe,"STRONG",{});var Q6t=s(mhe);Dbo=r(Q6t,"bertweet"),Q6t.forEach(t),Gbo=r(yNe," \u2014 "),Rj=n(yNe,"A",{href:!0});var W6t=s(Rj);Obo=r(W6t,"BertweetTokenizer"),W6t.forEach(t),Vbo=r(yNe," (BERTweet model)"),yNe.forEach(t),Xbo=i(S),hs=n(S,"LI",{});var yB=s(hs);fhe=n(yB,"STRONG",{});var U6t=s(fhe);zbo=r(U6t,"big_bird"),U6t.forEach(t),Qbo=r(yB," \u2014 "),Pj=n(yB,"A",{href:!0});var H6t=s(Pj);Wbo=r(H6t,"BigBirdTokenizer"),H6t.forEach(t),Ubo=r(yB," or "),Bj=n(yB,"A",{href:!0});var J6t=s(Bj);Hbo=r(J6t,"BigBirdTokenizerFast"),J6t.forEach(t),Jbo=r(yB," (BigBird model)"),yB.forEach(t),Ybo=i(S),us=n(S,"LI",{});var xB=s(us);ghe=n(xB,"STRONG",{});var Y6t=s(ghe);Zbo=r(Y6t,"bigbird_pegasus"),Y6t.forEach(t),Kbo=r(xB," \u2014 "),Ij=n(xB,"A",{href:!0});var Z6t=s(Ij);evo=r(Z6t,"PegasusTokenizer"),Z6t.forEach(t),ovo=r(xB," or "),Nj=n(xB,"A",{href:!0});var K6t=s(Nj);rvo=r(K6t,"PegasusTokenizerFast"),K6t.forEach(t),tvo=r(xB," (BigBird-Pegasus model)"),xB.forEach(t),avo=i(S),ps=n(S,"LI",{});var $B=s(ps);hhe=n($B,"STRONG",{});var e7t=s(hhe);nvo=r(e7t,"blenderbot"),e7t.forEach(t),svo=r($B," \u2014 "),qj=n($B,"A",{href:!0});var o7t=s(qj);lvo=r(o7t,"BlenderbotTokenizer"),o7t.forEach(t),ivo=r($B," or "),jj=n($B,"A",{href:!0});var r7t=s(jj);dvo=r(r7t,"BlenderbotTokenizerFast"),r7t.forEach(t),cvo=r($B," (Blenderbot model)"),$B.forEach(t),mvo=i(S),Fu=n(S,"LI",{});var xNe=s(Fu);uhe=n(xNe,"STRONG",{});var t7t=s(uhe);fvo=r(t7t,"blenderbot-small"),t7t.forEach(t),gvo=r(xNe," \u2014 "),Dj=n(xNe,"A",{href:!0});var a7t=s(Dj);hvo=r(a7t,"BlenderbotSmallTokenizer"),a7t.forEach(t),uvo=r(xNe," (BlenderbotSmall model)"),xNe.forEach(t),pvo=i(S),Tu=n(S,"LI",{});var $Ne=s(Tu);phe=n($Ne,"STRONG",{});var n7t=s(phe);_vo=r(n7t,"bloom"),n7t.forEach(t),bvo=r($Ne," \u2014 "),Gj=n($Ne,"A",{href:!0});var s7t=s(Gj);vvo=r(s7t,"BloomTokenizerFast"),s7t.forEach(t),Fvo=r($Ne," (BLOOM model)"),$Ne.forEach(t),Tvo=i(S),Mu=n(S,"LI",{});var kNe=s(Mu);_he=n(kNe,"STRONG",{});var l7t=s(_he);Mvo=r(l7t,"byt5"),l7t.forEach(t),Evo=r(kNe," \u2014 "),Oj=n(kNe,"A",{href:!0});var i7t=s(Oj);Cvo=r(i7t,"ByT5Tokenizer"),i7t.forEach(t),wvo=r(kNe," (ByT5 model)"),kNe.forEach(t),Avo=i(S),_s=n(S,"LI",{});var kB=s(_s);bhe=n(kB,"STRONG",{});var d7t=s(bhe);Lvo=r(d7t,"camembert"),d7t.forEach(t),yvo=r(kB," \u2014 "),Vj=n(kB,"A",{href:!0});var c7t=s(Vj);xvo=r(c7t,"CamembertTokenizer"),c7t.forEach(t),$vo=r(kB," or "),Xj=n(kB,"A",{href:!0});var m7t=s(Xj);kvo=r(m7t,"CamembertTokenizerFast"),m7t.forEach(t),Svo=r(kB," (CamemBERT model)"),kB.forEach(t),Rvo=i(S),Eu=n(S,"LI",{});var SNe=s(Eu);vhe=n(SNe,"STRONG",{});var f7t=s(vhe);Pvo=r(f7t,"canine"),f7t.forEach(t),Bvo=r(SNe," \u2014 "),zj=n(SNe,"A",{href:!0});var g7t=s(zj);Ivo=r(g7t,"CanineTokenizer"),g7t.forEach(t),Nvo=r(SNe," (CANINE model)"),SNe.forEach(t),qvo=i(S),bs=n(S,"LI",{});var SB=s(bs);Fhe=n(SB,"STRONG",{});var h7t=s(Fhe);jvo=r(h7t,"clip"),h7t.forEach(t),Dvo=r(SB," \u2014 "),Qj=n(SB,"A",{href:!0});var u7t=s(Qj);Gvo=r(u7t,"CLIPTokenizer"),u7t.forEach(t),Ovo=r(SB," or "),Wj=n(SB,"A",{href:!0});var p7t=s(Wj);Vvo=r(p7t,"CLIPTokenizerFast"),p7t.forEach(t),Xvo=r(SB," (CLIP model)"),SB.forEach(t),zvo=i(S),vs=n(S,"LI",{});var RB=s(vs);The=n(RB,"STRONG",{});var _7t=s(The);Qvo=r(_7t,"codegen"),_7t.forEach(t),Wvo=r(RB," \u2014 "),Uj=n(RB,"A",{href:!0});var b7t=s(Uj);Uvo=r(b7t,"CodeGenTokenizer"),b7t.forEach(t),Hvo=r(RB," or "),Hj=n(RB,"A",{href:!0});var v7t=s(Hj);Jvo=r(v7t,"CodeGenTokenizerFast"),v7t.forEach(t),Yvo=r(RB," (CodeGen model)"),RB.forEach(t),Zvo=i(S),Fs=n(S,"LI",{});var PB=s(Fs);Mhe=n(PB,"STRONG",{});var F7t=s(Mhe);Kvo=r(F7t,"convbert"),F7t.forEach(t),eFo=r(PB," \u2014 "),Jj=n(PB,"A",{href:!0});var T7t=s(Jj);oFo=r(T7t,"ConvBertTokenizer"),T7t.forEach(t),rFo=r(PB," or "),Yj=n(PB,"A",{href:!0});var M7t=s(Yj);tFo=r(M7t,"ConvBertTokenizerFast"),M7t.forEach(t),aFo=r(PB," (ConvBERT model)"),PB.forEach(t),nFo=i(S),Ts=n(S,"LI",{});var BB=s(Ts);Ehe=n(BB,"STRONG",{});var E7t=s(Ehe);sFo=r(E7t,"cpm"),E7t.forEach(t),lFo=r(BB," \u2014 "),Zj=n(BB,"A",{href:!0});var C7t=s(Zj);iFo=r(C7t,"CpmTokenizer"),C7t.forEach(t),dFo=r(BB," or "),Kj=n(BB,"A",{href:!0});var w7t=s(Kj);cFo=r(w7t,"CpmTokenizerFast"),w7t.forEach(t),mFo=r(BB," (CPM model)"),BB.forEach(t),fFo=i(S),Cu=n(S,"LI",{});var RNe=s(Cu);Che=n(RNe,"STRONG",{});var A7t=s(Che);gFo=r(A7t,"ctrl"),A7t.forEach(t),hFo=r(RNe," \u2014 "),eD=n(RNe,"A",{href:!0});var L7t=s(eD);uFo=r(L7t,"CTRLTokenizer"),L7t.forEach(t),pFo=r(RNe," (CTRL model)"),RNe.forEach(t),_Fo=i(S),Ms=n(S,"LI",{});var IB=s(Ms);whe=n(IB,"STRONG",{});var y7t=s(whe);bFo=r(y7t,"data2vec-text"),y7t.forEach(t),vFo=r(IB," \u2014 "),oD=n(IB,"A",{href:!0});var x7t=s(oD);FFo=r(x7t,"RobertaTokenizer"),x7t.forEach(t),TFo=r(IB," or "),rD=n(IB,"A",{href:!0});var $7t=s(rD);MFo=r($7t,"RobertaTokenizerFast"),$7t.forEach(t),EFo=r(IB," (Data2VecText model)"),IB.forEach(t),CFo=i(S),Es=n(S,"LI",{});var NB=s(Es);Ahe=n(NB,"STRONG",{});var k7t=s(Ahe);wFo=r(k7t,"deberta"),k7t.forEach(t),AFo=r(NB," \u2014 "),tD=n(NB,"A",{href:!0});var S7t=s(tD);LFo=r(S7t,"DebertaTokenizer"),S7t.forEach(t),yFo=r(NB," or "),aD=n(NB,"A",{href:!0});var R7t=s(aD);xFo=r(R7t,"DebertaTokenizerFast"),R7t.forEach(t),$Fo=r(NB," (DeBERTa model)"),NB.forEach(t),kFo=i(S),Cs=n(S,"LI",{});var qB=s(Cs);Lhe=n(qB,"STRONG",{});var P7t=s(Lhe);SFo=r(P7t,"deberta-v2"),P7t.forEach(t),RFo=r(qB," \u2014 "),nD=n(qB,"A",{href:!0});var B7t=s(nD);PFo=r(B7t,"DebertaV2Tokenizer"),B7t.forEach(t),BFo=r(qB," or "),sD=n(qB,"A",{href:!0});var I7t=s(sD);IFo=r(I7t,"DebertaV2TokenizerFast"),I7t.forEach(t),NFo=r(qB," (DeBERTa-v2 model)"),qB.forEach(t),qFo=i(S),ws=n(S,"LI",{});var jB=s(ws);yhe=n(jB,"STRONG",{});var N7t=s(yhe);jFo=r(N7t,"distilbert"),N7t.forEach(t),DFo=r(jB," \u2014 "),lD=n(jB,"A",{href:!0});var q7t=s(lD);GFo=r(q7t,"DistilBertTokenizer"),q7t.forEach(t),OFo=r(jB," or "),iD=n(jB,"A",{href:!0});var j7t=s(iD);VFo=r(j7t,"DistilBertTokenizerFast"),j7t.forEach(t),XFo=r(jB," (DistilBERT model)"),jB.forEach(t),zFo=i(S),As=n(S,"LI",{});var DB=s(As);xhe=n(DB,"STRONG",{});var D7t=s(xhe);QFo=r(D7t,"dpr"),D7t.forEach(t),WFo=r(DB," \u2014 "),dD=n(DB,"A",{href:!0});var G7t=s(dD);UFo=r(G7t,"DPRQuestionEncoderTokenizer"),G7t.forEach(t),HFo=r(DB," or "),cD=n(DB,"A",{href:!0});var O7t=s(cD);JFo=r(O7t,"DPRQuestionEncoderTokenizerFast"),O7t.forEach(t),YFo=r(DB," (DPR model)"),DB.forEach(t),ZFo=i(S),Ls=n(S,"LI",{});var GB=s(Ls);$he=n(GB,"STRONG",{});var V7t=s($he);KFo=r(V7t,"electra"),V7t.forEach(t),eTo=r(GB," \u2014 "),mD=n(GB,"A",{href:!0});var X7t=s(mD);oTo=r(X7t,"ElectraTokenizer"),X7t.forEach(t),rTo=r(GB," or "),fD=n(GB,"A",{href:!0});var z7t=s(fD);tTo=r(z7t,"ElectraTokenizerFast"),z7t.forEach(t),aTo=r(GB," (ELECTRA model)"),GB.forEach(t),nTo=i(S),ys=n(S,"LI",{});var OB=s(ys);khe=n(OB,"STRONG",{});var Q7t=s(khe);sTo=r(Q7t,"ernie"),Q7t.forEach(t),lTo=r(OB," \u2014 "),gD=n(OB,"A",{href:!0});var W7t=s(gD);iTo=r(W7t,"BertTokenizer"),W7t.forEach(t),dTo=r(OB," or "),hD=n(OB,"A",{href:!0});var U7t=s(hD);cTo=r(U7t,"BertTokenizerFast"),U7t.forEach(t),mTo=r(OB," (ERNIE model)"),OB.forEach(t),fTo=i(S),wu=n(S,"LI",{});var PNe=s(wu);She=n(PNe,"STRONG",{});var H7t=s(She);gTo=r(H7t,"flaubert"),H7t.forEach(t),hTo=r(PNe," \u2014 "),uD=n(PNe,"A",{href:!0});var J7t=s(uD);uTo=r(J7t,"FlaubertTokenizer"),J7t.forEach(t),pTo=r(PNe," (FlauBERT model)"),PNe.forEach(t),_To=i(S),xs=n(S,"LI",{});var VB=s(xs);Rhe=n(VB,"STRONG",{});var Y7t=s(Rhe);bTo=r(Y7t,"fnet"),Y7t.forEach(t),vTo=r(VB," \u2014 "),pD=n(VB,"A",{href:!0});var Z7t=s(pD);FTo=r(Z7t,"FNetTokenizer"),Z7t.forEach(t),TTo=r(VB," or "),_D=n(VB,"A",{href:!0});var K7t=s(_D);MTo=r(K7t,"FNetTokenizerFast"),K7t.forEach(t),ETo=r(VB," (FNet model)"),VB.forEach(t),CTo=i(S),Au=n(S,"LI",{});var BNe=s(Au);Phe=n(BNe,"STRONG",{});var eLt=s(Phe);wTo=r(eLt,"fsmt"),eLt.forEach(t),ATo=r(BNe," \u2014 "),bD=n(BNe,"A",{href:!0});var oLt=s(bD);LTo=r(oLt,"FSMTTokenizer"),oLt.forEach(t),yTo=r(BNe," (FairSeq Machine-Translation model)"),BNe.forEach(t),xTo=i(S),$s=n(S,"LI",{});var XB=s($s);Bhe=n(XB,"STRONG",{});var rLt=s(Bhe);$To=r(rLt,"funnel"),rLt.forEach(t),kTo=r(XB," \u2014 "),vD=n(XB,"A",{href:!0});var tLt=s(vD);STo=r(tLt,"FunnelTokenizer"),tLt.forEach(t),RTo=r(XB," or "),FD=n(XB,"A",{href:!0});var aLt=s(FD);PTo=r(aLt,"FunnelTokenizerFast"),aLt.forEach(t),BTo=r(XB," (Funnel Transformer model)"),XB.forEach(t),ITo=i(S),ks=n(S,"LI",{});var zB=s(ks);Ihe=n(zB,"STRONG",{});var nLt=s(Ihe);NTo=r(nLt,"gpt2"),nLt.forEach(t),qTo=r(zB," \u2014 "),TD=n(zB,"A",{href:!0});var sLt=s(TD);jTo=r(sLt,"GPT2Tokenizer"),sLt.forEach(t),DTo=r(zB," or "),MD=n(zB,"A",{href:!0});var lLt=s(MD);GTo=r(lLt,"GPT2TokenizerFast"),lLt.forEach(t),OTo=r(zB," (OpenAI GPT-2 model)"),zB.forEach(t),VTo=i(S),Ss=n(S,"LI",{});var QB=s(Ss);Nhe=n(QB,"STRONG",{});var iLt=s(Nhe);XTo=r(iLt,"gpt_neo"),iLt.forEach(t),zTo=r(QB," \u2014 "),ED=n(QB,"A",{href:!0});var dLt=s(ED);QTo=r(dLt,"GPT2Tokenizer"),dLt.forEach(t),WTo=r(QB," or "),CD=n(QB,"A",{href:!0});var cLt=s(CD);UTo=r(cLt,"GPT2TokenizerFast"),cLt.forEach(t),HTo=r(QB," (GPT Neo model)"),QB.forEach(t),JTo=i(S),Lu=n(S,"LI",{});var INe=s(Lu);qhe=n(INe,"STRONG",{});var mLt=s(qhe);YTo=r(mLt,"gpt_neox"),mLt.forEach(t),ZTo=r(INe," \u2014 "),wD=n(INe,"A",{href:!0});var fLt=s(wD);KTo=r(fLt,"GPTNeoXTokenizerFast"),fLt.forEach(t),eMo=r(INe," (GPT NeoX model)"),INe.forEach(t),oMo=i(S),yu=n(S,"LI",{});var NNe=s(yu);jhe=n(NNe,"STRONG",{});var gLt=s(jhe);rMo=r(gLt,"gpt_neox_japanese"),gLt.forEach(t),tMo=r(NNe," \u2014 "),AD=n(NNe,"A",{href:!0});var hLt=s(AD);aMo=r(hLt,"GPTNeoXJapaneseTokenizer"),hLt.forEach(t),nMo=r(NNe," (GPT NeoX Japanese model)"),NNe.forEach(t),sMo=i(S),Rs=n(S,"LI",{});var WB=s(Rs);Dhe=n(WB,"STRONG",{});var uLt=s(Dhe);lMo=r(uLt,"gptj"),uLt.forEach(t),iMo=r(WB," \u2014 "),LD=n(WB,"A",{href:!0});var pLt=s(LD);dMo=r(pLt,"GPT2Tokenizer"),pLt.forEach(t),cMo=r(WB," or "),yD=n(WB,"A",{href:!0});var _Lt=s(yD);mMo=r(_Lt,"GPT2TokenizerFast"),_Lt.forEach(t),fMo=r(WB," (GPT-J model)"),WB.forEach(t),gMo=i(S),Ps=n(S,"LI",{});var UB=s(Ps);Ghe=n(UB,"STRONG",{});var bLt=s(Ghe);hMo=r(bLt,"groupvit"),bLt.forEach(t),uMo=r(UB," \u2014 "),xD=n(UB,"A",{href:!0});var vLt=s(xD);pMo=r(vLt,"CLIPTokenizer"),vLt.forEach(t),_Mo=r(UB," or "),$D=n(UB,"A",{href:!0});var FLt=s($D);bMo=r(FLt,"CLIPTokenizerFast"),FLt.forEach(t),vMo=r(UB," (GroupViT model)"),UB.forEach(t),FMo=i(S),Bs=n(S,"LI",{});var HB=s(Bs);Ohe=n(HB,"STRONG",{});var TLt=s(Ohe);TMo=r(TLt,"herbert"),TLt.forEach(t),MMo=r(HB," \u2014 "),kD=n(HB,"A",{href:!0});var MLt=s(kD);EMo=r(MLt,"HerbertTokenizer"),MLt.forEach(t),CMo=r(HB," or "),SD=n(HB,"A",{href:!0});var ELt=s(SD);wMo=r(ELt,"HerbertTokenizerFast"),ELt.forEach(t),AMo=r(HB," (HerBERT model)"),HB.forEach(t),LMo=i(S),xu=n(S,"LI",{});var qNe=s(xu);Vhe=n(qNe,"STRONG",{});var CLt=s(Vhe);yMo=r(CLt,"hubert"),CLt.forEach(t),xMo=r(qNe," \u2014 "),RD=n(qNe,"A",{href:!0});var wLt=s(RD);$Mo=r(wLt,"Wav2Vec2CTCTokenizer"),wLt.forEach(t),kMo=r(qNe," (Hubert model)"),qNe.forEach(t),SMo=i(S),Is=n(S,"LI",{});var JB=s(Is);Xhe=n(JB,"STRONG",{});var ALt=s(Xhe);RMo=r(ALt,"ibert"),ALt.forEach(t),PMo=r(JB," \u2014 "),PD=n(JB,"A",{href:!0});var LLt=s(PD);BMo=r(LLt,"RobertaTokenizer"),LLt.forEach(t),IMo=r(JB," or "),BD=n(JB,"A",{href:!0});var yLt=s(BD);NMo=r(yLt,"RobertaTokenizerFast"),yLt.forEach(t),qMo=r(JB," (I-BERT model)"),JB.forEach(t),jMo=i(S),Ns=n(S,"LI",{});var YB=s(Ns);zhe=n(YB,"STRONG",{});var xLt=s(zhe);DMo=r(xLt,"layoutlm"),xLt.forEach(t),GMo=r(YB," \u2014 "),ID=n(YB,"A",{href:!0});var $Lt=s(ID);OMo=r($Lt,"LayoutLMTokenizer"),$Lt.forEach(t),VMo=r(YB," or "),ND=n(YB,"A",{href:!0});var kLt=s(ND);XMo=r(kLt,"LayoutLMTokenizerFast"),kLt.forEach(t),zMo=r(YB," (LayoutLM model)"),YB.forEach(t),QMo=i(S),qs=n(S,"LI",{});var ZB=s(qs);Qhe=n(ZB,"STRONG",{});var SLt=s(Qhe);WMo=r(SLt,"layoutlmv2"),SLt.forEach(t),UMo=r(ZB," \u2014 "),qD=n(ZB,"A",{href:!0});var RLt=s(qD);HMo=r(RLt,"LayoutLMv2Tokenizer"),RLt.forEach(t),JMo=r(ZB," or "),jD=n(ZB,"A",{href:!0});var PLt=s(jD);YMo=r(PLt,"LayoutLMv2TokenizerFast"),PLt.forEach(t),ZMo=r(ZB," (LayoutLMv2 model)"),ZB.forEach(t),KMo=i(S),js=n(S,"LI",{});var KB=s(js);Whe=n(KB,"STRONG",{});var BLt=s(Whe);eEo=r(BLt,"layoutlmv3"),BLt.forEach(t),oEo=r(KB," \u2014 "),DD=n(KB,"A",{href:!0});var ILt=s(DD);rEo=r(ILt,"LayoutLMv3Tokenizer"),ILt.forEach(t),tEo=r(KB," or "),GD=n(KB,"A",{href:!0});var NLt=s(GD);aEo=r(NLt,"LayoutLMv3TokenizerFast"),NLt.forEach(t),nEo=r(KB," (LayoutLMv3 model)"),KB.forEach(t),sEo=i(S),Ds=n(S,"LI",{});var eI=s(Ds);Uhe=n(eI,"STRONG",{});var qLt=s(Uhe);lEo=r(qLt,"layoutxlm"),qLt.forEach(t),iEo=r(eI," \u2014 "),OD=n(eI,"A",{href:!0});var jLt=s(OD);dEo=r(jLt,"LayoutXLMTokenizer"),jLt.forEach(t),cEo=r(eI," or "),VD=n(eI,"A",{href:!0});var DLt=s(VD);mEo=r(DLt,"LayoutXLMTokenizerFast"),DLt.forEach(t),fEo=r(eI," (LayoutXLM model)"),eI.forEach(t),gEo=i(S),Gs=n(S,"LI",{});var oI=s(Gs);Hhe=n(oI,"STRONG",{});var GLt=s(Hhe);hEo=r(GLt,"led"),GLt.forEach(t),uEo=r(oI," \u2014 "),XD=n(oI,"A",{href:!0});var OLt=s(XD);pEo=r(OLt,"LEDTokenizer"),OLt.forEach(t),_Eo=r(oI," or "),zD=n(oI,"A",{href:!0});var VLt=s(zD);bEo=r(VLt,"LEDTokenizerFast"),VLt.forEach(t),vEo=r(oI," (LED model)"),oI.forEach(t),FEo=i(S),Os=n(S,"LI",{});var rI=s(Os);Jhe=n(rI,"STRONG",{});var XLt=s(Jhe);TEo=r(XLt,"lilt"),XLt.forEach(t),MEo=r(rI," \u2014 "),QD=n(rI,"A",{href:!0});var zLt=s(QD);EEo=r(zLt,"LayoutLMv3Tokenizer"),zLt.forEach(t),CEo=r(rI," or "),WD=n(rI,"A",{href:!0});var QLt=s(WD);wEo=r(QLt,"LayoutLMv3TokenizerFast"),QLt.forEach(t),AEo=r(rI," (LiLT model)"),rI.forEach(t),LEo=i(S),Vs=n(S,"LI",{});var tI=s(Vs);Yhe=n(tI,"STRONG",{});var WLt=s(Yhe);yEo=r(WLt,"longformer"),WLt.forEach(t),xEo=r(tI," \u2014 "),UD=n(tI,"A",{href:!0});var ULt=s(UD);$Eo=r(ULt,"LongformerTokenizer"),ULt.forEach(t),kEo=r(tI," or "),HD=n(tI,"A",{href:!0});var HLt=s(HD);SEo=r(HLt,"LongformerTokenizerFast"),HLt.forEach(t),REo=r(tI," (Longformer model)"),tI.forEach(t),PEo=i(S),Xs=n(S,"LI",{});var aI=s(Xs);Zhe=n(aI,"STRONG",{});var JLt=s(Zhe);BEo=r(JLt,"longt5"),JLt.forEach(t),IEo=r(aI," \u2014 "),JD=n(aI,"A",{href:!0});var YLt=s(JD);NEo=r(YLt,"T5Tokenizer"),YLt.forEach(t),qEo=r(aI," or "),YD=n(aI,"A",{href:!0});var ZLt=s(YD);jEo=r(ZLt,"T5TokenizerFast"),ZLt.forEach(t),DEo=r(aI," (LongT5 model)"),aI.forEach(t),GEo=i(S),$u=n(S,"LI",{});var jNe=s($u);Khe=n(jNe,"STRONG",{});var KLt=s(Khe);OEo=r(KLt,"luke"),KLt.forEach(t),VEo=r(jNe," \u2014 "),ZD=n(jNe,"A",{href:!0});var e8t=s(ZD);XEo=r(e8t,"LukeTokenizer"),e8t.forEach(t),zEo=r(jNe," (LUKE model)"),jNe.forEach(t),QEo=i(S),zs=n(S,"LI",{});var nI=s(zs);eue=n(nI,"STRONG",{});var o8t=s(eue);WEo=r(o8t,"lxmert"),o8t.forEach(t),UEo=r(nI," \u2014 "),KD=n(nI,"A",{href:!0});var r8t=s(KD);HEo=r(r8t,"LxmertTokenizer"),r8t.forEach(t),JEo=r(nI," or "),eG=n(nI,"A",{href:!0});var t8t=s(eG);YEo=r(t8t,"LxmertTokenizerFast"),t8t.forEach(t),ZEo=r(nI," (LXMERT model)"),nI.forEach(t),KEo=i(S),ku=n(S,"LI",{});var DNe=s(ku);oue=n(DNe,"STRONG",{});var a8t=s(oue);e4o=r(a8t,"m2m_100"),a8t.forEach(t),o4o=r(DNe," \u2014 "),oG=n(DNe,"A",{href:!0});var n8t=s(oG);r4o=r(n8t,"M2M100Tokenizer"),n8t.forEach(t),t4o=r(DNe," (M2M100 model)"),DNe.forEach(t),a4o=i(S),Su=n(S,"LI",{});var GNe=s(Su);rue=n(GNe,"STRONG",{});var s8t=s(rue);n4o=r(s8t,"marian"),s8t.forEach(t),s4o=r(GNe," \u2014 "),rG=n(GNe,"A",{href:!0});var l8t=s(rG);l4o=r(l8t,"MarianTokenizer"),l8t.forEach(t),i4o=r(GNe," (Marian model)"),GNe.forEach(t),d4o=i(S),Qs=n(S,"LI",{});var sI=s(Qs);tue=n(sI,"STRONG",{});var i8t=s(tue);c4o=r(i8t,"mbart"),i8t.forEach(t),m4o=r(sI," \u2014 "),tG=n(sI,"A",{href:!0});var d8t=s(tG);f4o=r(d8t,"MBartTokenizer"),d8t.forEach(t),g4o=r(sI," or "),aG=n(sI,"A",{href:!0});var c8t=s(aG);h4o=r(c8t,"MBartTokenizerFast"),c8t.forEach(t),u4o=r(sI," (mBART model)"),sI.forEach(t),p4o=i(S),Ws=n(S,"LI",{});var lI=s(Ws);aue=n(lI,"STRONG",{});var m8t=s(aue);_4o=r(m8t,"mbart50"),m8t.forEach(t),b4o=r(lI," \u2014 "),nG=n(lI,"A",{href:!0});var f8t=s(nG);v4o=r(f8t,"MBart50Tokenizer"),f8t.forEach(t),F4o=r(lI," or "),sG=n(lI,"A",{href:!0});var g8t=s(sG);T4o=r(g8t,"MBart50TokenizerFast"),g8t.forEach(t),M4o=r(lI," (mBART-50 model)"),lI.forEach(t),E4o=i(S),Us=n(S,"LI",{});var iI=s(Us);nue=n(iI,"STRONG",{});var h8t=s(nue);C4o=r(h8t,"megatron-bert"),h8t.forEach(t),w4o=r(iI," \u2014 "),lG=n(iI,"A",{href:!0});var u8t=s(lG);A4o=r(u8t,"BertTokenizer"),u8t.forEach(t),L4o=r(iI," or "),iG=n(iI,"A",{href:!0});var p8t=s(iG);y4o=r(p8t,"BertTokenizerFast"),p8t.forEach(t),x4o=r(iI," (Megatron-BERT model)"),iI.forEach(t),$4o=i(S),Ru=n(S,"LI",{});var ONe=s(Ru);sue=n(ONe,"STRONG",{});var _8t=s(sue);k4o=r(_8t,"mluke"),_8t.forEach(t),S4o=r(ONe," \u2014 "),dG=n(ONe,"A",{href:!0});var b8t=s(dG);R4o=r(b8t,"MLukeTokenizer"),b8t.forEach(t),P4o=r(ONe," (mLUKE model)"),ONe.forEach(t),B4o=i(S),Hs=n(S,"LI",{});var dI=s(Hs);lue=n(dI,"STRONG",{});var v8t=s(lue);I4o=r(v8t,"mobilebert"),v8t.forEach(t),N4o=r(dI," \u2014 "),cG=n(dI,"A",{href:!0});var F8t=s(cG);q4o=r(F8t,"MobileBertTokenizer"),F8t.forEach(t),j4o=r(dI," or "),mG=n(dI,"A",{href:!0});var T8t=s(mG);D4o=r(T8t,"MobileBertTokenizerFast"),T8t.forEach(t),G4o=r(dI," (MobileBERT model)"),dI.forEach(t),O4o=i(S),Js=n(S,"LI",{});var cI=s(Js);iue=n(cI,"STRONG",{});var M8t=s(iue);V4o=r(M8t,"mpnet"),M8t.forEach(t),X4o=r(cI," \u2014 "),fG=n(cI,"A",{href:!0});var E8t=s(fG);z4o=r(E8t,"MPNetTokenizer"),E8t.forEach(t),Q4o=r(cI," or "),gG=n(cI,"A",{href:!0});var C8t=s(gG);W4o=r(C8t,"MPNetTokenizerFast"),C8t.forEach(t),U4o=r(cI," (MPNet model)"),cI.forEach(t),H4o=i(S),Ys=n(S,"LI",{});var mI=s(Ys);due=n(mI,"STRONG",{});var w8t=s(due);J4o=r(w8t,"mt5"),w8t.forEach(t),Y4o=r(mI," \u2014 "),hG=n(mI,"A",{href:!0});var A8t=s(hG);Z4o=r(A8t,"MT5Tokenizer"),A8t.forEach(t),K4o=r(mI," or "),uG=n(mI,"A",{href:!0});var L8t=s(uG);eCo=r(L8t,"MT5TokenizerFast"),L8t.forEach(t),oCo=r(mI," (MT5 model)"),mI.forEach(t),rCo=i(S),Zs=n(S,"LI",{});var fI=s(Zs);cue=n(fI,"STRONG",{});var y8t=s(cue);tCo=r(y8t,"mvp"),y8t.forEach(t),aCo=r(fI," \u2014 "),pG=n(fI,"A",{href:!0});var x8t=s(pG);nCo=r(x8t,"MvpTokenizer"),x8t.forEach(t),sCo=r(fI," or "),_G=n(fI,"A",{href:!0});var $8t=s(_G);lCo=r($8t,"MvpTokenizerFast"),$8t.forEach(t),iCo=r(fI," (MVP model)"),fI.forEach(t),dCo=i(S),Ks=n(S,"LI",{});var gI=s(Ks);mue=n(gI,"STRONG",{});var k8t=s(mue);cCo=r(k8t,"nezha"),k8t.forEach(t),mCo=r(gI," \u2014 "),bG=n(gI,"A",{href:!0});var S8t=s(bG);fCo=r(S8t,"BertTokenizer"),S8t.forEach(t),gCo=r(gI," or "),vG=n(gI,"A",{href:!0});var R8t=s(vG);hCo=r(R8t,"BertTokenizerFast"),R8t.forEach(t),uCo=r(gI," (Nezha model)"),gI.forEach(t),pCo=i(S),el=n(S,"LI",{});var hI=s(el);fue=n(hI,"STRONG",{});var P8t=s(fue);_Co=r(P8t,"nllb"),P8t.forEach(t),bCo=r(hI," \u2014 "),FG=n(hI,"A",{href:!0});var B8t=s(FG);vCo=r(B8t,"NllbTokenizer"),B8t.forEach(t),FCo=r(hI," or "),TG=n(hI,"A",{href:!0});var I8t=s(TG);TCo=r(I8t,"NllbTokenizerFast"),I8t.forEach(t),MCo=r(hI," (NLLB model)"),hI.forEach(t),ECo=i(S),ol=n(S,"LI",{});var uI=s(ol);gue=n(uI,"STRONG",{});var N8t=s(gue);CCo=r(N8t,"nystromformer"),N8t.forEach(t),wCo=r(uI," \u2014 "),MG=n(uI,"A",{href:!0});var q8t=s(MG);ACo=r(q8t,"AlbertTokenizer"),q8t.forEach(t),LCo=r(uI," or "),EG=n(uI,"A",{href:!0});var j8t=s(EG);yCo=r(j8t,"AlbertTokenizerFast"),j8t.forEach(t),xCo=r(uI," (Nystr\xF6mformer model)"),uI.forEach(t),$Co=i(S),rl=n(S,"LI",{});var pI=s(rl);hue=n(pI,"STRONG",{});var D8t=s(hue);kCo=r(D8t,"openai-gpt"),D8t.forEach(t),SCo=r(pI," \u2014 "),CG=n(pI,"A",{href:!0});var G8t=s(CG);RCo=r(G8t,"OpenAIGPTTokenizer"),G8t.forEach(t),PCo=r(pI," or "),wG=n(pI,"A",{href:!0});var O8t=s(wG);BCo=r(O8t,"OpenAIGPTTokenizerFast"),O8t.forEach(t),ICo=r(pI," (OpenAI GPT model)"),pI.forEach(t),NCo=i(S),Pu=n(S,"LI",{});var VNe=s(Pu);uue=n(VNe,"STRONG",{});var V8t=s(uue);qCo=r(V8t,"opt"),V8t.forEach(t),jCo=r(VNe," \u2014 "),AG=n(VNe,"A",{href:!0});var X8t=s(AG);DCo=r(X8t,"GPT2Tokenizer"),X8t.forEach(t),GCo=r(VNe," (OPT model)"),VNe.forEach(t),OCo=i(S),tl=n(S,"LI",{});var _I=s(tl);pue=n(_I,"STRONG",{});var z8t=s(pue);VCo=r(z8t,"owlvit"),z8t.forEach(t),XCo=r(_I," \u2014 "),LG=n(_I,"A",{href:!0});var Q8t=s(LG);zCo=r(Q8t,"CLIPTokenizer"),Q8t.forEach(t),QCo=r(_I," or "),yG=n(_I,"A",{href:!0});var W8t=s(yG);WCo=r(W8t,"CLIPTokenizerFast"),W8t.forEach(t),UCo=r(_I," (OWL-ViT model)"),_I.forEach(t),HCo=i(S),al=n(S,"LI",{});var bI=s(al);_ue=n(bI,"STRONG",{});var U8t=s(_ue);JCo=r(U8t,"pegasus"),U8t.forEach(t),YCo=r(bI," \u2014 "),xG=n(bI,"A",{href:!0});var H8t=s(xG);ZCo=r(H8t,"PegasusTokenizer"),H8t.forEach(t),KCo=r(bI," or "),$G=n(bI,"A",{href:!0});var J8t=s($G);e3o=r(J8t,"PegasusTokenizerFast"),J8t.forEach(t),o3o=r(bI," (Pegasus model)"),bI.forEach(t),r3o=i(S),Bu=n(S,"LI",{});var XNe=s(Bu);bue=n(XNe,"STRONG",{});var Y8t=s(bue);t3o=r(Y8t,"perceiver"),Y8t.forEach(t),a3o=r(XNe," \u2014 "),kG=n(XNe,"A",{href:!0});var Z8t=s(kG);n3o=r(Z8t,"PerceiverTokenizer"),Z8t.forEach(t),s3o=r(XNe," (Perceiver model)"),XNe.forEach(t),l3o=i(S),Iu=n(S,"LI",{});var zNe=s(Iu);vue=n(zNe,"STRONG",{});var K8t=s(vue);i3o=r(K8t,"phobert"),K8t.forEach(t),d3o=r(zNe," \u2014 "),SG=n(zNe,"A",{href:!0});var eyt=s(SG);c3o=r(eyt,"PhobertTokenizer"),eyt.forEach(t),m3o=r(zNe," (PhoBERT model)"),zNe.forEach(t),f3o=i(S),Nu=n(S,"LI",{});var QNe=s(Nu);Fue=n(QNe,"STRONG",{});var oyt=s(Fue);g3o=r(oyt,"plbart"),oyt.forEach(t),h3o=r(QNe," \u2014 "),RG=n(QNe,"A",{href:!0});var ryt=s(RG);u3o=r(ryt,"PLBartTokenizer"),ryt.forEach(t),p3o=r(QNe," (PLBart model)"),QNe.forEach(t),_3o=i(S),qu=n(S,"LI",{});var WNe=s(qu);Tue=n(WNe,"STRONG",{});var tyt=s(Tue);b3o=r(tyt,"prophetnet"),tyt.forEach(t),v3o=r(WNe," \u2014 "),PG=n(WNe,"A",{href:!0});var ayt=s(PG);F3o=r(ayt,"ProphetNetTokenizer"),ayt.forEach(t),T3o=r(WNe," (ProphetNet model)"),WNe.forEach(t),M3o=i(S),nl=n(S,"LI",{});var vI=s(nl);Mue=n(vI,"STRONG",{});var nyt=s(Mue);E3o=r(nyt,"qdqbert"),nyt.forEach(t),C3o=r(vI," \u2014 "),BG=n(vI,"A",{href:!0});var syt=s(BG);w3o=r(syt,"BertTokenizer"),syt.forEach(t),A3o=r(vI," or "),IG=n(vI,"A",{href:!0});var lyt=s(IG);L3o=r(lyt,"BertTokenizerFast"),lyt.forEach(t),y3o=r(vI," (QDQBert model)"),vI.forEach(t),x3o=i(S),ju=n(S,"LI",{});var UNe=s(ju);Eue=n(UNe,"STRONG",{});var iyt=s(Eue);$3o=r(iyt,"rag"),iyt.forEach(t),k3o=r(UNe," \u2014 "),NG=n(UNe,"A",{href:!0});var dyt=s(NG);S3o=r(dyt,"RagTokenizer"),dyt.forEach(t),R3o=r(UNe," (RAG model)"),UNe.forEach(t),P3o=i(S),sl=n(S,"LI",{});var FI=s(sl);Cue=n(FI,"STRONG",{});var cyt=s(Cue);B3o=r(cyt,"realm"),cyt.forEach(t),I3o=r(FI," \u2014 "),qG=n(FI,"A",{href:!0});var myt=s(qG);N3o=r(myt,"RealmTokenizer"),myt.forEach(t),q3o=r(FI," or "),jG=n(FI,"A",{href:!0});var fyt=s(jG);j3o=r(fyt,"RealmTokenizerFast"),fyt.forEach(t),D3o=r(FI," (REALM model)"),FI.forEach(t),G3o=i(S),ll=n(S,"LI",{});var TI=s(ll);wue=n(TI,"STRONG",{});var gyt=s(wue);O3o=r(gyt,"reformer"),gyt.forEach(t),V3o=r(TI," \u2014 "),DG=n(TI,"A",{href:!0});var hyt=s(DG);X3o=r(hyt,"ReformerTokenizer"),hyt.forEach(t),z3o=r(TI," or "),GG=n(TI,"A",{href:!0});var uyt=s(GG);Q3o=r(uyt,"ReformerTokenizerFast"),uyt.forEach(t),W3o=r(TI," (Reformer model)"),TI.forEach(t),U3o=i(S),il=n(S,"LI",{});var MI=s(il);Aue=n(MI,"STRONG",{});var pyt=s(Aue);H3o=r(pyt,"rembert"),pyt.forEach(t),J3o=r(MI," \u2014 "),OG=n(MI,"A",{href:!0});var _yt=s(OG);Y3o=r(_yt,"RemBertTokenizer"),_yt.forEach(t),Z3o=r(MI," or "),VG=n(MI,"A",{href:!0});var byt=s(VG);K3o=r(byt,"RemBertTokenizerFast"),byt.forEach(t),e5o=r(MI," (RemBERT model)"),MI.forEach(t),o5o=i(S),dl=n(S,"LI",{});var EI=s(dl);Lue=n(EI,"STRONG",{});var vyt=s(Lue);r5o=r(vyt,"retribert"),vyt.forEach(t),t5o=r(EI," \u2014 "),XG=n(EI,"A",{href:!0});var Fyt=s(XG);a5o=r(Fyt,"RetriBertTokenizer"),Fyt.forEach(t),n5o=r(EI," or "),zG=n(EI,"A",{href:!0});var Tyt=s(zG);s5o=r(Tyt,"RetriBertTokenizerFast"),Tyt.forEach(t),l5o=r(EI," (RetriBERT model)"),EI.forEach(t),i5o=i(S),cl=n(S,"LI",{});var CI=s(cl);yue=n(CI,"STRONG",{});var Myt=s(yue);d5o=r(Myt,"roberta"),Myt.forEach(t),c5o=r(CI," \u2014 "),QG=n(CI,"A",{href:!0});var Eyt=s(QG);m5o=r(Eyt,"RobertaTokenizer"),Eyt.forEach(t),f5o=r(CI," or "),WG=n(CI,"A",{href:!0});var Cyt=s(WG);g5o=r(Cyt,"RobertaTokenizerFast"),Cyt.forEach(t),h5o=r(CI," (RoBERTa model)"),CI.forEach(t),u5o=i(S),ml=n(S,"LI",{});var wI=s(ml);xue=n(wI,"STRONG",{});var wyt=s(xue);p5o=r(wyt,"roformer"),wyt.forEach(t),_5o=r(wI," \u2014 "),UG=n(wI,"A",{href:!0});var Ayt=s(UG);b5o=r(Ayt,"RoFormerTokenizer"),Ayt.forEach(t),v5o=r(wI," or "),HG=n(wI,"A",{href:!0});var Lyt=s(HG);F5o=r(Lyt,"RoFormerTokenizerFast"),Lyt.forEach(t),T5o=r(wI," (RoFormer model)"),wI.forEach(t),M5o=i(S),Du=n(S,"LI",{});var HNe=s(Du);$ue=n(HNe,"STRONG",{});var yyt=s($ue);E5o=r(yyt,"speech_to_text"),yyt.forEach(t),C5o=r(HNe," \u2014 "),JG=n(HNe,"A",{href:!0});var xyt=s(JG);w5o=r(xyt,"Speech2TextTokenizer"),xyt.forEach(t),A5o=r(HNe," (Speech2Text model)"),HNe.forEach(t),L5o=i(S),Gu=n(S,"LI",{});var JNe=s(Gu);kue=n(JNe,"STRONG",{});var $yt=s(kue);y5o=r($yt,"speech_to_text_2"),$yt.forEach(t),x5o=r(JNe," \u2014 "),YG=n(JNe,"A",{href:!0});var kyt=s(YG);$5o=r(kyt,"Speech2Text2Tokenizer"),kyt.forEach(t),k5o=r(JNe," (Speech2Text2 model)"),JNe.forEach(t),S5o=i(S),fl=n(S,"LI",{});var AI=s(fl);Sue=n(AI,"STRONG",{});var Syt=s(Sue);R5o=r(Syt,"splinter"),Syt.forEach(t),P5o=r(AI," \u2014 "),ZG=n(AI,"A",{href:!0});var Ryt=s(ZG);B5o=r(Ryt,"SplinterTokenizer"),Ryt.forEach(t),I5o=r(AI," or "),KG=n(AI,"A",{href:!0});var Pyt=s(KG);N5o=r(Pyt,"SplinterTokenizerFast"),Pyt.forEach(t),q5o=r(AI," (Splinter model)"),AI.forEach(t),j5o=i(S),gl=n(S,"LI",{});var LI=s(gl);Rue=n(LI,"STRONG",{});var Byt=s(Rue);D5o=r(Byt,"squeezebert"),Byt.forEach(t),G5o=r(LI," \u2014 "),eO=n(LI,"A",{href:!0});var Iyt=s(eO);O5o=r(Iyt,"SqueezeBertTokenizer"),Iyt.forEach(t),V5o=r(LI," or "),oO=n(LI,"A",{href:!0});var Nyt=s(oO);X5o=r(Nyt,"SqueezeBertTokenizerFast"),Nyt.forEach(t),z5o=r(LI," (SqueezeBERT model)"),LI.forEach(t),Q5o=i(S),hl=n(S,"LI",{});var yI=s(hl);Pue=n(yI,"STRONG",{});var qyt=s(Pue);W5o=r(qyt,"t5"),qyt.forEach(t),U5o=r(yI," \u2014 "),rO=n(yI,"A",{href:!0});var jyt=s(rO);H5o=r(jyt,"T5Tokenizer"),jyt.forEach(t),J5o=r(yI," or "),tO=n(yI,"A",{href:!0});var Dyt=s(tO);Y5o=r(Dyt,"T5TokenizerFast"),Dyt.forEach(t),Z5o=r(yI," (T5 model)"),yI.forEach(t),K5o=i(S),Ou=n(S,"LI",{});var YNe=s(Ou);Bue=n(YNe,"STRONG",{});var Gyt=s(Bue);e0o=r(Gyt,"tapas"),Gyt.forEach(t),o0o=r(YNe," \u2014 "),aO=n(YNe,"A",{href:!0});var Oyt=s(aO);r0o=r(Oyt,"TapasTokenizer"),Oyt.forEach(t),t0o=r(YNe," (TAPAS model)"),YNe.forEach(t),a0o=i(S),Vu=n(S,"LI",{});var ZNe=s(Vu);Iue=n(ZNe,"STRONG",{});var Vyt=s(Iue);n0o=r(Vyt,"tapex"),Vyt.forEach(t),s0o=r(ZNe," \u2014 "),nO=n(ZNe,"A",{href:!0});var Xyt=s(nO);l0o=r(Xyt,"TapexTokenizer"),Xyt.forEach(t),i0o=r(ZNe," (TAPEX model)"),ZNe.forEach(t),d0o=i(S),Xu=n(S,"LI",{});var KNe=s(Xu);Nue=n(KNe,"STRONG",{});var zyt=s(Nue);c0o=r(zyt,"transfo-xl"),zyt.forEach(t),m0o=r(KNe," \u2014 "),sO=n(KNe,"A",{href:!0});var Qyt=s(sO);f0o=r(Qyt,"TransfoXLTokenizer"),Qyt.forEach(t),g0o=r(KNe," (Transformer-XL model)"),KNe.forEach(t),h0o=i(S),ul=n(S,"LI",{});var xI=s(ul);que=n(xI,"STRONG",{});var Wyt=s(que);u0o=r(Wyt,"vilt"),Wyt.forEach(t),p0o=r(xI," \u2014 "),lO=n(xI,"A",{href:!0});var Uyt=s(lO);_0o=r(Uyt,"BertTokenizer"),Uyt.forEach(t),b0o=r(xI," or "),iO=n(xI,"A",{href:!0});var Hyt=s(iO);v0o=r(Hyt,"BertTokenizerFast"),Hyt.forEach(t),F0o=r(xI," (ViLT model)"),xI.forEach(t),T0o=i(S),pl=n(S,"LI",{});var $I=s(pl);jue=n($I,"STRONG",{});var Jyt=s(jue);M0o=r(Jyt,"visual_bert"),Jyt.forEach(t),E0o=r($I," \u2014 "),dO=n($I,"A",{href:!0});var Yyt=s(dO);C0o=r(Yyt,"BertTokenizer"),Yyt.forEach(t),w0o=r($I," or "),cO=n($I,"A",{href:!0});var Zyt=s(cO);A0o=r(Zyt,"BertTokenizerFast"),Zyt.forEach(t),L0o=r($I," (VisualBERT model)"),$I.forEach(t),y0o=i(S),zu=n(S,"LI",{});var eqe=s(zu);Due=n(eqe,"STRONG",{});var Kyt=s(Due);x0o=r(Kyt,"wav2vec2"),Kyt.forEach(t),$0o=r(eqe," \u2014 "),mO=n(eqe,"A",{href:!0});var e9t=s(mO);k0o=r(e9t,"Wav2Vec2CTCTokenizer"),e9t.forEach(t),S0o=r(eqe," (Wav2Vec2 model)"),eqe.forEach(t),R0o=i(S),Qu=n(S,"LI",{});var oqe=s(Qu);Gue=n(oqe,"STRONG",{});var o9t=s(Gue);P0o=r(o9t,"wav2vec2-conformer"),o9t.forEach(t),B0o=r(oqe," \u2014 "),fO=n(oqe,"A",{href:!0});var r9t=s(fO);I0o=r(r9t,"Wav2Vec2CTCTokenizer"),r9t.forEach(t),N0o=r(oqe," (Wav2Vec2-Conformer model)"),oqe.forEach(t),q0o=i(S),Wu=n(S,"LI",{});var rqe=s(Wu);Oue=n(rqe,"STRONG",{});var t9t=s(Oue);j0o=r(t9t,"wav2vec2_phoneme"),t9t.forEach(t),D0o=r(rqe," \u2014 "),gO=n(rqe,"A",{href:!0});var a9t=s(gO);G0o=r(a9t,"Wav2Vec2PhonemeCTCTokenizer"),a9t.forEach(t),O0o=r(rqe," (Wav2Vec2Phoneme model)"),rqe.forEach(t),V0o=i(S),Uu=n(S,"LI",{});var tqe=s(Uu);Vue=n(tqe,"STRONG",{});var n9t=s(Vue);X0o=r(n9t,"whisper"),n9t.forEach(t),z0o=r(tqe," \u2014 "),hO=n(tqe,"A",{href:!0});var s9t=s(hO);Q0o=r(s9t,"WhisperTokenizer"),s9t.forEach(t),W0o=r(tqe," (Whisper model)"),tqe.forEach(t),U0o=i(S),_l=n(S,"LI",{});var kI=s(_l);Xue=n(kI,"STRONG",{});var l9t=s(Xue);H0o=r(l9t,"xclip"),l9t.forEach(t),J0o=r(kI," \u2014 "),uO=n(kI,"A",{href:!0});var i9t=s(uO);Y0o=r(i9t,"CLIPTokenizer"),i9t.forEach(t),Z0o=r(kI," or "),pO=n(kI,"A",{href:!0});var d9t=s(pO);K0o=r(d9t,"CLIPTokenizerFast"),d9t.forEach(t),ewo=r(kI," (X-CLIP model)"),kI.forEach(t),owo=i(S),bl=n(S,"LI",{});var SI=s(bl);zue=n(SI,"STRONG",{});var c9t=s(zue);rwo=r(c9t,"xglm"),c9t.forEach(t),two=r(SI," \u2014 "),_O=n(SI,"A",{href:!0});var m9t=s(_O);awo=r(m9t,"XGLMTokenizer"),m9t.forEach(t),nwo=r(SI," or "),bO=n(SI,"A",{href:!0});var f9t=s(bO);swo=r(f9t,"XGLMTokenizerFast"),f9t.forEach(t),lwo=r(SI," (XGLM model)"),SI.forEach(t),iwo=i(S),Hu=n(S,"LI",{});var aqe=s(Hu);Que=n(aqe,"STRONG",{});var g9t=s(Que);dwo=r(g9t,"xlm"),g9t.forEach(t),cwo=r(aqe," \u2014 "),vO=n(aqe,"A",{href:!0});var h9t=s(vO);mwo=r(h9t,"XLMTokenizer"),h9t.forEach(t),fwo=r(aqe," (XLM model)"),aqe.forEach(t),gwo=i(S),Ju=n(S,"LI",{});var nqe=s(Ju);Wue=n(nqe,"STRONG",{});var u9t=s(Wue);hwo=r(u9t,"xlm-prophetnet"),u9t.forEach(t),uwo=r(nqe," \u2014 "),FO=n(nqe,"A",{href:!0});var p9t=s(FO);pwo=r(p9t,"XLMProphetNetTokenizer"),p9t.forEach(t),_wo=r(nqe," (XLM-ProphetNet model)"),nqe.forEach(t),bwo=i(S),vl=n(S,"LI",{});var RI=s(vl);Uue=n(RI,"STRONG",{});var _9t=s(Uue);vwo=r(_9t,"xlm-roberta"),_9t.forEach(t),Fwo=r(RI," \u2014 "),TO=n(RI,"A",{href:!0});var b9t=s(TO);Two=r(b9t,"XLMRobertaTokenizer"),b9t.forEach(t),Mwo=r(RI," or "),MO=n(RI,"A",{href:!0});var v9t=s(MO);Ewo=r(v9t,"XLMRobertaTokenizerFast"),v9t.forEach(t),Cwo=r(RI," (XLM-RoBERTa model)"),RI.forEach(t),wwo=i(S),Fl=n(S,"LI",{});var PI=s(Fl);Hue=n(PI,"STRONG",{});var F9t=s(Hue);Awo=r(F9t,"xlm-roberta-xl"),F9t.forEach(t),Lwo=r(PI," \u2014 "),EO=n(PI,"A",{href:!0});var T9t=s(EO);ywo=r(T9t,"XLMRobertaTokenizer"),T9t.forEach(t),xwo=r(PI," or "),CO=n(PI,"A",{href:!0});var M9t=s(CO);$wo=r(M9t,"XLMRobertaTokenizerFast"),M9t.forEach(t),kwo=r(PI," (XLM-RoBERTa-XL model)"),PI.forEach(t),Swo=i(S),Tl=n(S,"LI",{});var BI=s(Tl);Jue=n(BI,"STRONG",{});var E9t=s(Jue);Rwo=r(E9t,"xlnet"),E9t.forEach(t),Pwo=r(BI," \u2014 "),wO=n(BI,"A",{href:!0});var C9t=s(wO);Bwo=r(C9t,"XLNetTokenizer"),C9t.forEach(t),Iwo=r(BI," or "),AO=n(BI,"A",{href:!0});var w9t=s(AO);Nwo=r(w9t,"XLNetTokenizerFast"),w9t.forEach(t),qwo=r(BI," (XLNet model)"),BI.forEach(t),jwo=i(S),Ml=n(S,"LI",{});var II=s(Ml);Yue=n(II,"STRONG",{});var A9t=s(Yue);Dwo=r(A9t,"yoso"),A9t.forEach(t),Gwo=r(II," \u2014 "),LO=n(II,"A",{href:!0});var L9t=s(LO);Owo=r(L9t,"AlbertTokenizer"),L9t.forEach(t),Vwo=r(II," or "),yO=n(II,"A",{href:!0});var y9t=s(yO);Xwo=r(y9t,"AlbertTokenizerFast"),y9t.forEach(t),zwo=r(II," (YOSO model)"),II.forEach(t),S.forEach(t),Qwo=i(xl),T(Yu.$$.fragment,xl),xl.forEach(t),Wwo=i(yl),Zu=n(yl,"DIV",{class:!0});var uao=s(Zu);T(Hx.$$.fragment,uao),Uwo=i(uao),Zue=n(uao,"P",{});var x9t=s(Zue);Hwo=r(x9t,"Register a new tokenizer in this mapping."),x9t.forEach(t),uao.forEach(t),yl.forEach(t),aro=i(m),Td=n(m,"H2",{class:!0});var pao=s(Td);Ku=n(pao,"A",{id:!0,class:!0,href:!0});var $9t=s(Ku);Kue=n($9t,"SPAN",{});var k9t=s(Kue);T(Jx.$$.fragment,k9t),k9t.forEach(t),$9t.forEach(t),Jwo=i(pao),epe=n(pao,"SPAN",{});var S9t=s(epe);Ywo=r(S9t,"AutoFeatureExtractor"),S9t.forEach(t),pao.forEach(t),nro=i(m),Ro=n(m,"DIV",{class:!0});var $l=s(Ro);T(Yx.$$.fragment,$l),Zwo=i($l),Zx=n($l,"P",{});var _ao=s(Zx);Kwo=r(_ao,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),xO=n(_ao,"A",{href:!0});var R9t=s(xO);eAo=r(R9t,"AutoFeatureExtractor.from_pretrained()"),R9t.forEach(t),oAo=r(_ao," class method."),_ao.forEach(t),rAo=i($l),Kx=n($l,"P",{});var bao=s(Kx);tAo=r(bao,"This class cannot be instantiated directly using "),ope=n(bao,"CODE",{});var P9t=s(ope);aAo=r(P9t,"__init__()"),P9t.forEach(t),nAo=r(bao," (throws an error)."),bao.forEach(t),sAo=i($l),Ye=n($l,"DIV",{class:!0});var Ta=s(Ye);T(e$.$$.fragment,Ta),lAo=i(Ta),rpe=n(Ta,"P",{});var B9t=s(rpe);iAo=r(B9t,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),B9t.forEach(t),dAo=i(Ta),Ka=n(Ta,"P",{});var Ly=s(Ka);cAo=r(Ly,"The feature extractor class to instantiate is selected based on the "),tpe=n(Ly,"CODE",{});var I9t=s(tpe);mAo=r(I9t,"model_type"),I9t.forEach(t),fAo=r(Ly,` property of the config object
(either passed as an argument or loaded from `),ape=n(Ly,"CODE",{});var N9t=s(ape);gAo=r(N9t,"pretrained_model_name_or_path"),N9t.forEach(t),hAo=r(Ly,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),npe=n(Ly,"CODE",{});var q9t=s(npe);uAo=r(q9t,"pretrained_model_name_or_path"),q9t.forEach(t),pAo=r(Ly,":"),Ly.forEach(t),_Ao=i(Ta),z=n(Ta,"UL",{});var W=s(z);ep=n(W,"LI",{});var sqe=s(ep);spe=n(sqe,"STRONG",{});var j9t=s(spe);bAo=r(j9t,"beit"),j9t.forEach(t),vAo=r(sqe," \u2014 "),$O=n(sqe,"A",{href:!0});var D9t=s($O);FAo=r(D9t,"BeitFeatureExtractor"),D9t.forEach(t),TAo=r(sqe," (BEiT model)"),sqe.forEach(t),MAo=i(W),op=n(W,"LI",{});var lqe=s(op);lpe=n(lqe,"STRONG",{});var G9t=s(lpe);EAo=r(G9t,"clip"),G9t.forEach(t),CAo=r(lqe," \u2014 "),kO=n(lqe,"A",{href:!0});var O9t=s(kO);wAo=r(O9t,"CLIPFeatureExtractor"),O9t.forEach(t),AAo=r(lqe," (CLIP model)"),lqe.forEach(t),LAo=i(W),rp=n(W,"LI",{});var iqe=s(rp);ipe=n(iqe,"STRONG",{});var V9t=s(ipe);yAo=r(V9t,"conditional_detr"),V9t.forEach(t),xAo=r(iqe," \u2014 "),SO=n(iqe,"A",{href:!0});var X9t=s(SO);$Ao=r(X9t,"ConditionalDetrFeatureExtractor"),X9t.forEach(t),kAo=r(iqe," (Conditional DETR model)"),iqe.forEach(t),SAo=i(W),tp=n(W,"LI",{});var dqe=s(tp);dpe=n(dqe,"STRONG",{});var z9t=s(dpe);RAo=r(z9t,"convnext"),z9t.forEach(t),PAo=r(dqe," \u2014 "),RO=n(dqe,"A",{href:!0});var Q9t=s(RO);BAo=r(Q9t,"ConvNextFeatureExtractor"),Q9t.forEach(t),IAo=r(dqe," (ConvNeXT model)"),dqe.forEach(t),NAo=i(W),ap=n(W,"LI",{});var cqe=s(ap);cpe=n(cqe,"STRONG",{});var W9t=s(cpe);qAo=r(W9t,"cvt"),W9t.forEach(t),jAo=r(cqe," \u2014 "),PO=n(cqe,"A",{href:!0});var U9t=s(PO);DAo=r(U9t,"ConvNextFeatureExtractor"),U9t.forEach(t),GAo=r(cqe," (CvT model)"),cqe.forEach(t),OAo=i(W),np=n(W,"LI",{});var mqe=s(np);mpe=n(mqe,"STRONG",{});var H9t=s(mpe);VAo=r(H9t,"data2vec-audio"),H9t.forEach(t),XAo=r(mqe," \u2014 "),BO=n(mqe,"A",{href:!0});var J9t=s(BO);zAo=r(J9t,"Wav2Vec2FeatureExtractor"),J9t.forEach(t),QAo=r(mqe," (Data2VecAudio model)"),mqe.forEach(t),WAo=i(W),sp=n(W,"LI",{});var fqe=s(sp);fpe=n(fqe,"STRONG",{});var Y9t=s(fpe);UAo=r(Y9t,"data2vec-vision"),Y9t.forEach(t),HAo=r(fqe," \u2014 "),IO=n(fqe,"A",{href:!0});var Z9t=s(IO);JAo=r(Z9t,"BeitFeatureExtractor"),Z9t.forEach(t),YAo=r(fqe," (Data2VecVision model)"),fqe.forEach(t),ZAo=i(W),lp=n(W,"LI",{});var gqe=s(lp);gpe=n(gqe,"STRONG",{});var K9t=s(gpe);KAo=r(K9t,"deformable_detr"),K9t.forEach(t),e6o=r(gqe," \u2014 "),NO=n(gqe,"A",{href:!0});var ext=s(NO);o6o=r(ext,"DeformableDetrFeatureExtractor"),ext.forEach(t),r6o=r(gqe," (Deformable DETR model)"),gqe.forEach(t),t6o=i(W),ip=n(W,"LI",{});var hqe=s(ip);hpe=n(hqe,"STRONG",{});var oxt=s(hpe);a6o=r(oxt,"deit"),oxt.forEach(t),n6o=r(hqe," \u2014 "),qO=n(hqe,"A",{href:!0});var rxt=s(qO);s6o=r(rxt,"DeiTFeatureExtractor"),rxt.forEach(t),l6o=r(hqe," (DeiT model)"),hqe.forEach(t),i6o=i(W),dp=n(W,"LI",{});var uqe=s(dp);upe=n(uqe,"STRONG",{});var txt=s(upe);d6o=r(txt,"detr"),txt.forEach(t),c6o=r(uqe," \u2014 "),jO=n(uqe,"A",{href:!0});var axt=s(jO);m6o=r(axt,"DetrFeatureExtractor"),axt.forEach(t),f6o=r(uqe," (DETR model)"),uqe.forEach(t),g6o=i(W),cp=n(W,"LI",{});var pqe=s(cp);ppe=n(pqe,"STRONG",{});var nxt=s(ppe);h6o=r(nxt,"donut"),nxt.forEach(t),u6o=r(pqe," \u2014 "),DO=n(pqe,"A",{href:!0});var sxt=s(DO);p6o=r(sxt,"DonutFeatureExtractor"),sxt.forEach(t),_6o=r(pqe," (Donut model)"),pqe.forEach(t),b6o=i(W),mp=n(W,"LI",{});var _qe=s(mp);_pe=n(_qe,"STRONG",{});var lxt=s(_pe);v6o=r(lxt,"dpt"),lxt.forEach(t),F6o=r(_qe," \u2014 "),GO=n(_qe,"A",{href:!0});var ixt=s(GO);T6o=r(ixt,"DPTFeatureExtractor"),ixt.forEach(t),M6o=r(_qe," (DPT model)"),_qe.forEach(t),E6o=i(W),fp=n(W,"LI",{});var bqe=s(fp);bpe=n(bqe,"STRONG",{});var dxt=s(bpe);C6o=r(dxt,"flava"),dxt.forEach(t),w6o=r(bqe," \u2014 "),OO=n(bqe,"A",{href:!0});var cxt=s(OO);A6o=r(cxt,"FlavaFeatureExtractor"),cxt.forEach(t),L6o=r(bqe," (FLAVA model)"),bqe.forEach(t),y6o=i(W),gp=n(W,"LI",{});var vqe=s(gp);vpe=n(vqe,"STRONG",{});var mxt=s(vpe);x6o=r(mxt,"glpn"),mxt.forEach(t),$6o=r(vqe," \u2014 "),VO=n(vqe,"A",{href:!0});var fxt=s(VO);k6o=r(fxt,"GLPNFeatureExtractor"),fxt.forEach(t),S6o=r(vqe," (GLPN model)"),vqe.forEach(t),R6o=i(W),hp=n(W,"LI",{});var Fqe=s(hp);Fpe=n(Fqe,"STRONG",{});var gxt=s(Fpe);P6o=r(gxt,"groupvit"),gxt.forEach(t),B6o=r(Fqe," \u2014 "),XO=n(Fqe,"A",{href:!0});var hxt=s(XO);I6o=r(hxt,"CLIPFeatureExtractor"),hxt.forEach(t),N6o=r(Fqe," (GroupViT model)"),Fqe.forEach(t),q6o=i(W),up=n(W,"LI",{});var Tqe=s(up);Tpe=n(Tqe,"STRONG",{});var uxt=s(Tpe);j6o=r(uxt,"hubert"),uxt.forEach(t),D6o=r(Tqe," \u2014 "),zO=n(Tqe,"A",{href:!0});var pxt=s(zO);G6o=r(pxt,"Wav2Vec2FeatureExtractor"),pxt.forEach(t),O6o=r(Tqe," (Hubert model)"),Tqe.forEach(t),V6o=i(W),pp=n(W,"LI",{});var Mqe=s(pp);Mpe=n(Mqe,"STRONG",{});var _xt=s(Mpe);X6o=r(_xt,"imagegpt"),_xt.forEach(t),z6o=r(Mqe," \u2014 "),QO=n(Mqe,"A",{href:!0});var bxt=s(QO);Q6o=r(bxt,"ImageGPTFeatureExtractor"),bxt.forEach(t),W6o=r(Mqe," (ImageGPT model)"),Mqe.forEach(t),U6o=i(W),_p=n(W,"LI",{});var Eqe=s(_p);Epe=n(Eqe,"STRONG",{});var vxt=s(Epe);H6o=r(vxt,"layoutlmv2"),vxt.forEach(t),J6o=r(Eqe," \u2014 "),WO=n(Eqe,"A",{href:!0});var Fxt=s(WO);Y6o=r(Fxt,"LayoutLMv2FeatureExtractor"),Fxt.forEach(t),Z6o=r(Eqe," (LayoutLMv2 model)"),Eqe.forEach(t),K6o=i(W),bp=n(W,"LI",{});var Cqe=s(bp);Cpe=n(Cqe,"STRONG",{});var Txt=s(Cpe);e7o=r(Txt,"layoutlmv3"),Txt.forEach(t),o7o=r(Cqe," \u2014 "),UO=n(Cqe,"A",{href:!0});var Mxt=s(UO);r7o=r(Mxt,"LayoutLMv3FeatureExtractor"),Mxt.forEach(t),t7o=r(Cqe," (LayoutLMv3 model)"),Cqe.forEach(t),a7o=i(W),vp=n(W,"LI",{});var wqe=s(vp);wpe=n(wqe,"STRONG",{});var Ext=s(wpe);n7o=r(Ext,"levit"),Ext.forEach(t),s7o=r(wqe," \u2014 "),HO=n(wqe,"A",{href:!0});var Cxt=s(HO);l7o=r(Cxt,"LevitFeatureExtractor"),Cxt.forEach(t),i7o=r(wqe," (LeViT model)"),wqe.forEach(t),d7o=i(W),Fp=n(W,"LI",{});var Aqe=s(Fp);Ape=n(Aqe,"STRONG",{});var wxt=s(Ape);c7o=r(wxt,"maskformer"),wxt.forEach(t),m7o=r(Aqe," \u2014 "),JO=n(Aqe,"A",{href:!0});var Axt=s(JO);f7o=r(Axt,"MaskFormerFeatureExtractor"),Axt.forEach(t),g7o=r(Aqe," (MaskFormer model)"),Aqe.forEach(t),h7o=i(W),Tp=n(W,"LI",{});var Lqe=s(Tp);Lpe=n(Lqe,"STRONG",{});var Lxt=s(Lpe);u7o=r(Lxt,"mctct"),Lxt.forEach(t),p7o=r(Lqe," \u2014 "),YO=n(Lqe,"A",{href:!0});var yxt=s(YO);_7o=r(yxt,"MCTCTFeatureExtractor"),yxt.forEach(t),b7o=r(Lqe," (M-CTC-T model)"),Lqe.forEach(t),v7o=i(W),Mp=n(W,"LI",{});var yqe=s(Mp);ype=n(yqe,"STRONG",{});var xxt=s(ype);F7o=r(xxt,"mobilevit"),xxt.forEach(t),T7o=r(yqe," \u2014 "),ZO=n(yqe,"A",{href:!0});var $xt=s(ZO);M7o=r($xt,"MobileViTFeatureExtractor"),$xt.forEach(t),E7o=r(yqe," (MobileViT model)"),yqe.forEach(t),C7o=i(W),Ep=n(W,"LI",{});var xqe=s(Ep);xpe=n(xqe,"STRONG",{});var kxt=s(xpe);w7o=r(kxt,"owlvit"),kxt.forEach(t),A7o=r(xqe," \u2014 "),KO=n(xqe,"A",{href:!0});var Sxt=s(KO);L7o=r(Sxt,"OwlViTFeatureExtractor"),Sxt.forEach(t),y7o=r(xqe," (OWL-ViT model)"),xqe.forEach(t),x7o=i(W),Cp=n(W,"LI",{});var $qe=s(Cp);$pe=n($qe,"STRONG",{});var Rxt=s($pe);$7o=r(Rxt,"perceiver"),Rxt.forEach(t),k7o=r($qe," \u2014 "),eV=n($qe,"A",{href:!0});var Pxt=s(eV);S7o=r(Pxt,"PerceiverFeatureExtractor"),Pxt.forEach(t),R7o=r($qe," (Perceiver model)"),$qe.forEach(t),P7o=i(W),wp=n(W,"LI",{});var kqe=s(wp);kpe=n(kqe,"STRONG",{});var Bxt=s(kpe);B7o=r(Bxt,"poolformer"),Bxt.forEach(t),I7o=r(kqe," \u2014 "),oV=n(kqe,"A",{href:!0});var Ixt=s(oV);N7o=r(Ixt,"PoolFormerFeatureExtractor"),Ixt.forEach(t),q7o=r(kqe," (PoolFormer model)"),kqe.forEach(t),j7o=i(W),Ap=n(W,"LI",{});var Sqe=s(Ap);Spe=n(Sqe,"STRONG",{});var Nxt=s(Spe);D7o=r(Nxt,"regnet"),Nxt.forEach(t),G7o=r(Sqe," \u2014 "),rV=n(Sqe,"A",{href:!0});var qxt=s(rV);O7o=r(qxt,"ConvNextFeatureExtractor"),qxt.forEach(t),V7o=r(Sqe," (RegNet model)"),Sqe.forEach(t),X7o=i(W),Lp=n(W,"LI",{});var Rqe=s(Lp);Rpe=n(Rqe,"STRONG",{});var jxt=s(Rpe);z7o=r(jxt,"resnet"),jxt.forEach(t),Q7o=r(Rqe," \u2014 "),tV=n(Rqe,"A",{href:!0});var Dxt=s(tV);W7o=r(Dxt,"ConvNextFeatureExtractor"),Dxt.forEach(t),U7o=r(Rqe," (ResNet model)"),Rqe.forEach(t),H7o=i(W),yp=n(W,"LI",{});var Pqe=s(yp);Ppe=n(Pqe,"STRONG",{});var Gxt=s(Ppe);J7o=r(Gxt,"segformer"),Gxt.forEach(t),Y7o=r(Pqe," \u2014 "),aV=n(Pqe,"A",{href:!0});var Oxt=s(aV);Z7o=r(Oxt,"SegformerFeatureExtractor"),Oxt.forEach(t),K7o=r(Pqe," (SegFormer model)"),Pqe.forEach(t),eLo=i(W),xp=n(W,"LI",{});var Bqe=s(xp);Bpe=n(Bqe,"STRONG",{});var Vxt=s(Bpe);oLo=r(Vxt,"speech_to_text"),Vxt.forEach(t),rLo=r(Bqe," \u2014 "),nV=n(Bqe,"A",{href:!0});var Xxt=s(nV);tLo=r(Xxt,"Speech2TextFeatureExtractor"),Xxt.forEach(t),aLo=r(Bqe," (Speech2Text model)"),Bqe.forEach(t),nLo=i(W),$p=n(W,"LI",{});var Iqe=s($p);Ipe=n(Iqe,"STRONG",{});var zxt=s(Ipe);sLo=r(zxt,"swin"),zxt.forEach(t),lLo=r(Iqe," \u2014 "),sV=n(Iqe,"A",{href:!0});var Qxt=s(sV);iLo=r(Qxt,"ViTFeatureExtractor"),Qxt.forEach(t),dLo=r(Iqe," (Swin Transformer model)"),Iqe.forEach(t),cLo=i(W),kp=n(W,"LI",{});var Nqe=s(kp);Npe=n(Nqe,"STRONG",{});var Wxt=s(Npe);mLo=r(Wxt,"swinv2"),Wxt.forEach(t),fLo=r(Nqe," \u2014 "),lV=n(Nqe,"A",{href:!0});var Uxt=s(lV);gLo=r(Uxt,"ViTFeatureExtractor"),Uxt.forEach(t),hLo=r(Nqe," (Swin Transformer V2 model)"),Nqe.forEach(t),uLo=i(W),Sp=n(W,"LI",{});var qqe=s(Sp);qpe=n(qqe,"STRONG",{});var Hxt=s(qpe);pLo=r(Hxt,"van"),Hxt.forEach(t),_Lo=r(qqe," \u2014 "),iV=n(qqe,"A",{href:!0});var Jxt=s(iV);bLo=r(Jxt,"ConvNextFeatureExtractor"),Jxt.forEach(t),vLo=r(qqe," (VAN model)"),qqe.forEach(t),FLo=i(W),Rp=n(W,"LI",{});var jqe=s(Rp);jpe=n(jqe,"STRONG",{});var Yxt=s(jpe);TLo=r(Yxt,"videomae"),Yxt.forEach(t),MLo=r(jqe," \u2014 "),dV=n(jqe,"A",{href:!0});var Zxt=s(dV);ELo=r(Zxt,"VideoMAEFeatureExtractor"),Zxt.forEach(t),CLo=r(jqe," (VideoMAE model)"),jqe.forEach(t),wLo=i(W),Pp=n(W,"LI",{});var Dqe=s(Pp);Dpe=n(Dqe,"STRONG",{});var Kxt=s(Dpe);ALo=r(Kxt,"vilt"),Kxt.forEach(t),LLo=r(Dqe," \u2014 "),cV=n(Dqe,"A",{href:!0});var e$t=s(cV);yLo=r(e$t,"ViltFeatureExtractor"),e$t.forEach(t),xLo=r(Dqe," (ViLT model)"),Dqe.forEach(t),$Lo=i(W),Bp=n(W,"LI",{});var Gqe=s(Bp);Gpe=n(Gqe,"STRONG",{});var o$t=s(Gpe);kLo=r(o$t,"vit"),o$t.forEach(t),SLo=r(Gqe," \u2014 "),mV=n(Gqe,"A",{href:!0});var r$t=s(mV);RLo=r(r$t,"ViTFeatureExtractor"),r$t.forEach(t),PLo=r(Gqe," (ViT model)"),Gqe.forEach(t),BLo=i(W),Ip=n(W,"LI",{});var Oqe=s(Ip);Ope=n(Oqe,"STRONG",{});var t$t=s(Ope);ILo=r(t$t,"vit_mae"),t$t.forEach(t),NLo=r(Oqe," \u2014 "),fV=n(Oqe,"A",{href:!0});var a$t=s(fV);qLo=r(a$t,"ViTFeatureExtractor"),a$t.forEach(t),jLo=r(Oqe," (ViTMAE model)"),Oqe.forEach(t),DLo=i(W),Np=n(W,"LI",{});var Vqe=s(Np);Vpe=n(Vqe,"STRONG",{});var n$t=s(Vpe);GLo=r(n$t,"vit_msn"),n$t.forEach(t),OLo=r(Vqe," \u2014 "),gV=n(Vqe,"A",{href:!0});var s$t=s(gV);VLo=r(s$t,"ViTFeatureExtractor"),s$t.forEach(t),XLo=r(Vqe," (ViTMSN model)"),Vqe.forEach(t),zLo=i(W),qp=n(W,"LI",{});var Xqe=s(qp);Xpe=n(Xqe,"STRONG",{});var l$t=s(Xpe);QLo=r(l$t,"wav2vec2"),l$t.forEach(t),WLo=r(Xqe," \u2014 "),hV=n(Xqe,"A",{href:!0});var i$t=s(hV);ULo=r(i$t,"Wav2Vec2FeatureExtractor"),i$t.forEach(t),HLo=r(Xqe," (Wav2Vec2 model)"),Xqe.forEach(t),JLo=i(W),jp=n(W,"LI",{});var zqe=s(jp);zpe=n(zqe,"STRONG",{});var d$t=s(zpe);YLo=r(d$t,"wav2vec2-conformer"),d$t.forEach(t),ZLo=r(zqe," \u2014 "),uV=n(zqe,"A",{href:!0});var c$t=s(uV);KLo=r(c$t,"Wav2Vec2FeatureExtractor"),c$t.forEach(t),e8o=r(zqe," (Wav2Vec2-Conformer model)"),zqe.forEach(t),o8o=i(W),Dp=n(W,"LI",{});var Qqe=s(Dp);Qpe=n(Qqe,"STRONG",{});var m$t=s(Qpe);r8o=r(m$t,"whisper"),m$t.forEach(t),t8o=r(Qqe," \u2014 "),pV=n(Qqe,"A",{href:!0});var f$t=s(pV);a8o=r(f$t,"WhisperFeatureExtractor"),f$t.forEach(t),n8o=r(Qqe," (Whisper model)"),Qqe.forEach(t),s8o=i(W),Gp=n(W,"LI",{});var Wqe=s(Gp);Wpe=n(Wqe,"STRONG",{});var g$t=s(Wpe);l8o=r(g$t,"xclip"),g$t.forEach(t),i8o=r(Wqe," \u2014 "),_V=n(Wqe,"A",{href:!0});var h$t=s(_V);d8o=r(h$t,"CLIPFeatureExtractor"),h$t.forEach(t),c8o=r(Wqe," (X-CLIP model)"),Wqe.forEach(t),m8o=i(W),Op=n(W,"LI",{});var Uqe=s(Op);Upe=n(Uqe,"STRONG",{});var u$t=s(Upe);f8o=r(u$t,"yolos"),u$t.forEach(t),g8o=r(Uqe," \u2014 "),bV=n(Uqe,"A",{href:!0});var p$t=s(bV);h8o=r(p$t,"YolosFeatureExtractor"),p$t.forEach(t),u8o=r(Uqe," (YOLOS model)"),Uqe.forEach(t),W.forEach(t),p8o=i(Ta),T(Vp.$$.fragment,Ta),_8o=i(Ta),T(Xp.$$.fragment,Ta),Ta.forEach(t),b8o=i($l),zp=n($l,"DIV",{class:!0});var vao=s(zp);T(o$.$$.fragment,vao),v8o=i(vao),Hpe=n(vao,"P",{});var _$t=s(Hpe);F8o=r(_$t,"Register a new feature extractor for this class."),_$t.forEach(t),vao.forEach(t),$l.forEach(t),sro=i(m),Md=n(m,"H2",{class:!0});var Fao=s(Md);Qp=n(Fao,"A",{id:!0,class:!0,href:!0});var b$t=s(Qp);Jpe=n(b$t,"SPAN",{});var v$t=s(Jpe);T(r$.$$.fragment,v$t),v$t.forEach(t),b$t.forEach(t),T8o=i(Fao),Ype=n(Fao,"SPAN",{});var F$t=s(Ype);M8o=r(F$t,"AutoProcessor"),F$t.forEach(t),Fao.forEach(t),lro=i(m),Po=n(m,"DIV",{class:!0});var kl=s(Po);T(t$.$$.fragment,kl),E8o=i(kl),a$=n(kl,"P",{});var Tao=s(a$);C8o=r(Tao,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),vV=n(Tao,"A",{href:!0});var T$t=s(vV);w8o=r(T$t,"AutoProcessor.from_pretrained()"),T$t.forEach(t),A8o=r(Tao," class method."),Tao.forEach(t),L8o=i(kl),n$=n(kl,"P",{});var Mao=s(n$);y8o=r(Mao,"This class cannot be instantiated directly using "),Zpe=n(Mao,"CODE",{});var M$t=s(Zpe);x8o=r(M$t,"__init__()"),M$t.forEach(t),$8o=r(Mao," (throws an error)."),Mao.forEach(t),k8o=i(kl),Ze=n(kl,"DIV",{class:!0});var Ma=s(Ze);T(s$.$$.fragment,Ma),S8o=i(Ma),Kpe=n(Ma,"P",{});var E$t=s(Kpe);R8o=r(E$t,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),E$t.forEach(t),P8o=i(Ma),Ed=n(Ma,"P",{});var ide=s(Ed);B8o=r(ide,"The processor class to instantiate is selected based on the "),e_e=n(ide,"CODE",{});var C$t=s(e_e);I8o=r(C$t,"model_type"),C$t.forEach(t),N8o=r(ide,` property of the config object (either
passed as an argument or loaded from `),o_e=n(ide,"CODE",{});var w$t=s(o_e);q8o=r(w$t,"pretrained_model_name_or_path"),w$t.forEach(t),j8o=r(ide," if possible):"),ide.forEach(t),D8o=i(Ma),se=n(Ma,"UL",{});var ie=s(se);Wp=n(ie,"LI",{});var Hqe=s(Wp);r_e=n(Hqe,"STRONG",{});var A$t=s(r_e);G8o=r(A$t,"clip"),A$t.forEach(t),O8o=r(Hqe," \u2014 "),FV=n(Hqe,"A",{href:!0});var L$t=s(FV);V8o=r(L$t,"CLIPProcessor"),L$t.forEach(t),X8o=r(Hqe," (CLIP model)"),Hqe.forEach(t),z8o=i(ie),Up=n(ie,"LI",{});var Jqe=s(Up);t_e=n(Jqe,"STRONG",{});var y$t=s(t_e);Q8o=r(y$t,"donut"),y$t.forEach(t),W8o=r(Jqe," \u2014 "),TV=n(Jqe,"A",{href:!0});var x$t=s(TV);U8o=r(x$t,"DonutProcessor"),x$t.forEach(t),H8o=r(Jqe," (Donut model)"),Jqe.forEach(t),J8o=i(ie),Hp=n(ie,"LI",{});var Yqe=s(Hp);a_e=n(Yqe,"STRONG",{});var $$t=s(a_e);Y8o=r($$t,"flava"),$$t.forEach(t),Z8o=r(Yqe," \u2014 "),MV=n(Yqe,"A",{href:!0});var k$t=s(MV);K8o=r(k$t,"FlavaProcessor"),k$t.forEach(t),eyo=r(Yqe," (FLAVA model)"),Yqe.forEach(t),oyo=i(ie),Jp=n(ie,"LI",{});var Zqe=s(Jp);n_e=n(Zqe,"STRONG",{});var S$t=s(n_e);ryo=r(S$t,"groupvit"),S$t.forEach(t),tyo=r(Zqe," \u2014 "),EV=n(Zqe,"A",{href:!0});var R$t=s(EV);ayo=r(R$t,"CLIPProcessor"),R$t.forEach(t),nyo=r(Zqe," (GroupViT model)"),Zqe.forEach(t),syo=i(ie),Yp=n(ie,"LI",{});var Kqe=s(Yp);s_e=n(Kqe,"STRONG",{});var P$t=s(s_e);lyo=r(P$t,"layoutlmv2"),P$t.forEach(t),iyo=r(Kqe," \u2014 "),CV=n(Kqe,"A",{href:!0});var B$t=s(CV);dyo=r(B$t,"LayoutLMv2Processor"),B$t.forEach(t),cyo=r(Kqe," (LayoutLMv2 model)"),Kqe.forEach(t),myo=i(ie),Zp=n(ie,"LI",{});var eje=s(Zp);l_e=n(eje,"STRONG",{});var I$t=s(l_e);fyo=r(I$t,"layoutlmv3"),I$t.forEach(t),gyo=r(eje," \u2014 "),wV=n(eje,"A",{href:!0});var N$t=s(wV);hyo=r(N$t,"LayoutLMv3Processor"),N$t.forEach(t),uyo=r(eje," (LayoutLMv3 model)"),eje.forEach(t),pyo=i(ie),Kp=n(ie,"LI",{});var oje=s(Kp);i_e=n(oje,"STRONG",{});var q$t=s(i_e);_yo=r(q$t,"layoutxlm"),q$t.forEach(t),byo=r(oje," \u2014 "),AV=n(oje,"A",{href:!0});var j$t=s(AV);vyo=r(j$t,"LayoutXLMProcessor"),j$t.forEach(t),Fyo=r(oje," (LayoutXLM model)"),oje.forEach(t),Tyo=i(ie),e_=n(ie,"LI",{});var rje=s(e_);d_e=n(rje,"STRONG",{});var D$t=s(d_e);Myo=r(D$t,"markuplm"),D$t.forEach(t),Eyo=r(rje," \u2014 "),LV=n(rje,"A",{href:!0});var G$t=s(LV);Cyo=r(G$t,"MarkupLMProcessor"),G$t.forEach(t),wyo=r(rje," (MarkupLM model)"),rje.forEach(t),Ayo=i(ie),o_=n(ie,"LI",{});var tje=s(o_);c_e=n(tje,"STRONG",{});var O$t=s(c_e);Lyo=r(O$t,"owlvit"),O$t.forEach(t),yyo=r(tje," \u2014 "),yV=n(tje,"A",{href:!0});var V$t=s(yV);xyo=r(V$t,"OwlViTProcessor"),V$t.forEach(t),$yo=r(tje," (OWL-ViT model)"),tje.forEach(t),kyo=i(ie),r_=n(ie,"LI",{});var aje=s(r_);m_e=n(aje,"STRONG",{});var X$t=s(m_e);Syo=r(X$t,"sew"),X$t.forEach(t),Ryo=r(aje," \u2014 "),xV=n(aje,"A",{href:!0});var z$t=s(xV);Pyo=r(z$t,"Wav2Vec2Processor"),z$t.forEach(t),Byo=r(aje," (SEW model)"),aje.forEach(t),Iyo=i(ie),t_=n(ie,"LI",{});var nje=s(t_);f_e=n(nje,"STRONG",{});var Q$t=s(f_e);Nyo=r(Q$t,"sew-d"),Q$t.forEach(t),qyo=r(nje," \u2014 "),$V=n(nje,"A",{href:!0});var W$t=s($V);jyo=r(W$t,"Wav2Vec2Processor"),W$t.forEach(t),Dyo=r(nje," (SEW-D model)"),nje.forEach(t),Gyo=i(ie),a_=n(ie,"LI",{});var sje=s(a_);g_e=n(sje,"STRONG",{});var U$t=s(g_e);Oyo=r(U$t,"speech_to_text"),U$t.forEach(t),Vyo=r(sje," \u2014 "),kV=n(sje,"A",{href:!0});var H$t=s(kV);Xyo=r(H$t,"Speech2TextProcessor"),H$t.forEach(t),zyo=r(sje," (Speech2Text model)"),sje.forEach(t),Qyo=i(ie),n_=n(ie,"LI",{});var lje=s(n_);h_e=n(lje,"STRONG",{});var J$t=s(h_e);Wyo=r(J$t,"speech_to_text_2"),J$t.forEach(t),Uyo=r(lje," \u2014 "),SV=n(lje,"A",{href:!0});var Y$t=s(SV);Hyo=r(Y$t,"Speech2Text2Processor"),Y$t.forEach(t),Jyo=r(lje," (Speech2Text2 model)"),lje.forEach(t),Yyo=i(ie),s_=n(ie,"LI",{});var ije=s(s_);u_e=n(ije,"STRONG",{});var Z$t=s(u_e);Zyo=r(Z$t,"trocr"),Z$t.forEach(t),Kyo=r(ije," \u2014 "),RV=n(ije,"A",{href:!0});var K$t=s(RV);e9o=r(K$t,"TrOCRProcessor"),K$t.forEach(t),o9o=r(ije," (TrOCR model)"),ije.forEach(t),r9o=i(ie),l_=n(ie,"LI",{});var dje=s(l_);p_e=n(dje,"STRONG",{});var ekt=s(p_e);t9o=r(ekt,"unispeech"),ekt.forEach(t),a9o=r(dje," \u2014 "),PV=n(dje,"A",{href:!0});var okt=s(PV);n9o=r(okt,"Wav2Vec2Processor"),okt.forEach(t),s9o=r(dje," (UniSpeech model)"),dje.forEach(t),l9o=i(ie),i_=n(ie,"LI",{});var cje=s(i_);__e=n(cje,"STRONG",{});var rkt=s(__e);i9o=r(rkt,"unispeech-sat"),rkt.forEach(t),d9o=r(cje," \u2014 "),BV=n(cje,"A",{href:!0});var tkt=s(BV);c9o=r(tkt,"Wav2Vec2Processor"),tkt.forEach(t),m9o=r(cje," (UniSpeechSat model)"),cje.forEach(t),f9o=i(ie),d_=n(ie,"LI",{});var mje=s(d_);b_e=n(mje,"STRONG",{});var akt=s(b_e);g9o=r(akt,"vilt"),akt.forEach(t),h9o=r(mje," \u2014 "),IV=n(mje,"A",{href:!0});var nkt=s(IV);u9o=r(nkt,"ViltProcessor"),nkt.forEach(t),p9o=r(mje," (ViLT model)"),mje.forEach(t),_9o=i(ie),c_=n(ie,"LI",{});var fje=s(c_);v_e=n(fje,"STRONG",{});var skt=s(v_e);b9o=r(skt,"vision-text-dual-encoder"),skt.forEach(t),v9o=r(fje," \u2014 "),NV=n(fje,"A",{href:!0});var lkt=s(NV);F9o=r(lkt,"VisionTextDualEncoderProcessor"),lkt.forEach(t),T9o=r(fje," (VisionTextDualEncoder model)"),fje.forEach(t),M9o=i(ie),m_=n(ie,"LI",{});var gje=s(m_);F_e=n(gje,"STRONG",{});var ikt=s(F_e);E9o=r(ikt,"wav2vec2"),ikt.forEach(t),C9o=r(gje," \u2014 "),qV=n(gje,"A",{href:!0});var dkt=s(qV);w9o=r(dkt,"Wav2Vec2Processor"),dkt.forEach(t),A9o=r(gje," (Wav2Vec2 model)"),gje.forEach(t),L9o=i(ie),f_=n(ie,"LI",{});var hje=s(f_);T_e=n(hje,"STRONG",{});var ckt=s(T_e);y9o=r(ckt,"wav2vec2-conformer"),ckt.forEach(t),x9o=r(hje," \u2014 "),jV=n(hje,"A",{href:!0});var mkt=s(jV);$9o=r(mkt,"Wav2Vec2Processor"),mkt.forEach(t),k9o=r(hje," (Wav2Vec2-Conformer model)"),hje.forEach(t),S9o=i(ie),g_=n(ie,"LI",{});var uje=s(g_);M_e=n(uje,"STRONG",{});var fkt=s(M_e);R9o=r(fkt,"wavlm"),fkt.forEach(t),P9o=r(uje," \u2014 "),DV=n(uje,"A",{href:!0});var gkt=s(DV);B9o=r(gkt,"Wav2Vec2Processor"),gkt.forEach(t),I9o=r(uje," (WavLM model)"),uje.forEach(t),N9o=i(ie),h_=n(ie,"LI",{});var pje=s(h_);E_e=n(pje,"STRONG",{});var hkt=s(E_e);q9o=r(hkt,"whisper"),hkt.forEach(t),j9o=r(pje," \u2014 "),GV=n(pje,"A",{href:!0});var ukt=s(GV);D9o=r(ukt,"WhisperProcessor"),ukt.forEach(t),G9o=r(pje," (Whisper model)"),pje.forEach(t),O9o=i(ie),u_=n(ie,"LI",{});var _je=s(u_);C_e=n(_je,"STRONG",{});var pkt=s(C_e);V9o=r(pkt,"xclip"),pkt.forEach(t),X9o=r(_je," \u2014 "),OV=n(_je,"A",{href:!0});var _kt=s(OV);z9o=r(_kt,"CLIPProcessor"),_kt.forEach(t),Q9o=r(_je," (X-CLIP model)"),_je.forEach(t),ie.forEach(t),W9o=i(Ma),T(p_.$$.fragment,Ma),U9o=i(Ma),T(__.$$.fragment,Ma),Ma.forEach(t),H9o=i(kl),b_=n(kl,"DIV",{class:!0});var Eao=s(b_);T(l$.$$.fragment,Eao),J9o=i(Eao),w_e=n(Eao,"P",{});var bkt=s(w_e);Y9o=r(bkt,"Register a new processor for this class."),bkt.forEach(t),Eao.forEach(t),kl.forEach(t),iro=i(m),Cd=n(m,"H2",{class:!0});var Cao=s(Cd);v_=n(Cao,"A",{id:!0,class:!0,href:!0});var vkt=s(v_);A_e=n(vkt,"SPAN",{});var Fkt=s(A_e);T(i$.$$.fragment,Fkt),Fkt.forEach(t),vkt.forEach(t),Z9o=i(Cao),L_e=n(Cao,"SPAN",{});var Tkt=s(L_e);K9o=r(Tkt,"AutoModel"),Tkt.forEach(t),Cao.forEach(t),dro=i(m),Bo=n(m,"DIV",{class:!0});var Sl=s(Bo);T(d$.$$.fragment,Sl),exo=i(Sl),wd=n(Sl,"P",{});var dde=s(wd);oxo=r(dde,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VV=n(dde,"A",{href:!0});var Mkt=s(VV);rxo=r(Mkt,"from_pretrained()"),Mkt.forEach(t),txo=r(dde," class method or the "),XV=n(dde,"A",{href:!0});var Ekt=s(XV);axo=r(Ekt,"from_config()"),Ekt.forEach(t),nxo=r(dde,` class
method.`),dde.forEach(t),sxo=i(Sl),c$=n(Sl,"P",{});var wao=s(c$);lxo=r(wao,"This class cannot be instantiated directly using "),y_e=n(wao,"CODE",{});var Ckt=s(y_e);ixo=r(Ckt,"__init__()"),Ckt.forEach(t),dxo=r(wao," (throws an error)."),wao.forEach(t),cxo=i(Sl),vt=n(Sl,"DIV",{class:!0});var yy=s(vt);T(m$.$$.fragment,yy),mxo=i(yy),x_e=n(yy,"P",{});var wkt=s(x_e);fxo=r(wkt,"Instantiates one of the base model classes of the library from a configuration."),wkt.forEach(t),gxo=i(yy),Ad=n(yy,"P",{});var cde=s(Ad);hxo=r(cde,`Note:
Loading a model from its configuration file does `),$_e=n(cde,"STRONG",{});var Akt=s($_e);uxo=r(Akt,"not"),Akt.forEach(t),pxo=r(cde,` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=n(cde,"A",{href:!0});var Lkt=s(zV);_xo=r(Lkt,"from_pretrained()"),Lkt.forEach(t),bxo=r(cde," to load the model weights."),cde.forEach(t),vxo=i(yy),T(F_.$$.fragment,yy),yy.forEach(t),Fxo=i(Sl),Ke=n(Sl,"DIV",{class:!0});var Ea=s(Ke);T(f$.$$.fragment,Ea),Txo=i(Ea),k_e=n(Ea,"P",{});var ykt=s(k_e);Mxo=r(ykt,"Instantiate one of the base model classes of the library from a pretrained model."),ykt.forEach(t),Exo=i(Ea),en=n(Ea,"P",{});var xy=s(en);Cxo=r(xy,"The model class to instantiate is selected based on the "),S_e=n(xy,"CODE",{});var xkt=s(S_e);wxo=r(xkt,"model_type"),xkt.forEach(t),Axo=r(xy,` property of the config object (either
passed as an argument or loaded from `),R_e=n(xy,"CODE",{});var $kt=s(R_e);Lxo=r($kt,"pretrained_model_name_or_path"),$kt.forEach(t),yxo=r(xy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P_e=n(xy,"CODE",{});var kkt=s(P_e);xxo=r(kkt,"pretrained_model_name_or_path"),kkt.forEach(t),$xo=r(xy,":"),xy.forEach(t),kxo=i(Ea),y=n(Ea,"UL",{});var x=s(y);T_=n(x,"LI",{});var bje=s(T_);B_e=n(bje,"STRONG",{});var Skt=s(B_e);Sxo=r(Skt,"albert"),Skt.forEach(t),Rxo=r(bje," \u2014 "),QV=n(bje,"A",{href:!0});var Rkt=s(QV);Pxo=r(Rkt,"AlbertModel"),Rkt.forEach(t),Bxo=r(bje," (ALBERT model)"),bje.forEach(t),Ixo=i(x),M_=n(x,"LI",{});var vje=s(M_);I_e=n(vje,"STRONG",{});var Pkt=s(I_e);Nxo=r(Pkt,"bart"),Pkt.forEach(t),qxo=r(vje," \u2014 "),WV=n(vje,"A",{href:!0});var Bkt=s(WV);jxo=r(Bkt,"BartModel"),Bkt.forEach(t),Dxo=r(vje," (BART model)"),vje.forEach(t),Gxo=i(x),E_=n(x,"LI",{});var Fje=s(E_);N_e=n(Fje,"STRONG",{});var Ikt=s(N_e);Oxo=r(Ikt,"beit"),Ikt.forEach(t),Vxo=r(Fje," \u2014 "),UV=n(Fje,"A",{href:!0});var Nkt=s(UV);Xxo=r(Nkt,"BeitModel"),Nkt.forEach(t),zxo=r(Fje," (BEiT model)"),Fje.forEach(t),Qxo=i(x),C_=n(x,"LI",{});var Tje=s(C_);q_e=n(Tje,"STRONG",{});var qkt=s(q_e);Wxo=r(qkt,"bert"),qkt.forEach(t),Uxo=r(Tje," \u2014 "),HV=n(Tje,"A",{href:!0});var jkt=s(HV);Hxo=r(jkt,"BertModel"),jkt.forEach(t),Jxo=r(Tje," (BERT model)"),Tje.forEach(t),Yxo=i(x),w_=n(x,"LI",{});var Mje=s(w_);j_e=n(Mje,"STRONG",{});var Dkt=s(j_e);Zxo=r(Dkt,"bert-generation"),Dkt.forEach(t),Kxo=r(Mje," \u2014 "),JV=n(Mje,"A",{href:!0});var Gkt=s(JV);e$o=r(Gkt,"BertGenerationEncoder"),Gkt.forEach(t),o$o=r(Mje," (Bert Generation model)"),Mje.forEach(t),r$o=i(x),A_=n(x,"LI",{});var Eje=s(A_);D_e=n(Eje,"STRONG",{});var Okt=s(D_e);t$o=r(Okt,"big_bird"),Okt.forEach(t),a$o=r(Eje," \u2014 "),YV=n(Eje,"A",{href:!0});var Vkt=s(YV);n$o=r(Vkt,"BigBirdModel"),Vkt.forEach(t),s$o=r(Eje," (BigBird model)"),Eje.forEach(t),l$o=i(x),L_=n(x,"LI",{});var Cje=s(L_);G_e=n(Cje,"STRONG",{});var Xkt=s(G_e);i$o=r(Xkt,"bigbird_pegasus"),Xkt.forEach(t),d$o=r(Cje," \u2014 "),ZV=n(Cje,"A",{href:!0});var zkt=s(ZV);c$o=r(zkt,"BigBirdPegasusModel"),zkt.forEach(t),m$o=r(Cje," (BigBird-Pegasus model)"),Cje.forEach(t),f$o=i(x),y_=n(x,"LI",{});var wje=s(y_);O_e=n(wje,"STRONG",{});var Qkt=s(O_e);g$o=r(Qkt,"blenderbot"),Qkt.forEach(t),h$o=r(wje," \u2014 "),KV=n(wje,"A",{href:!0});var Wkt=s(KV);u$o=r(Wkt,"BlenderbotModel"),Wkt.forEach(t),p$o=r(wje," (Blenderbot model)"),wje.forEach(t),_$o=i(x),x_=n(x,"LI",{});var Aje=s(x_);V_e=n(Aje,"STRONG",{});var Ukt=s(V_e);b$o=r(Ukt,"blenderbot-small"),Ukt.forEach(t),v$o=r(Aje," \u2014 "),eX=n(Aje,"A",{href:!0});var Hkt=s(eX);F$o=r(Hkt,"BlenderbotSmallModel"),Hkt.forEach(t),T$o=r(Aje," (BlenderbotSmall model)"),Aje.forEach(t),M$o=i(x),$_=n(x,"LI",{});var Lje=s($_);X_e=n(Lje,"STRONG",{});var Jkt=s(X_e);E$o=r(Jkt,"bloom"),Jkt.forEach(t),C$o=r(Lje," \u2014 "),oX=n(Lje,"A",{href:!0});var Ykt=s(oX);w$o=r(Ykt,"BloomModel"),Ykt.forEach(t),A$o=r(Lje," (BLOOM model)"),Lje.forEach(t),L$o=i(x),k_=n(x,"LI",{});var yje=s(k_);z_e=n(yje,"STRONG",{});var Zkt=s(z_e);y$o=r(Zkt,"camembert"),Zkt.forEach(t),x$o=r(yje," \u2014 "),rX=n(yje,"A",{href:!0});var Kkt=s(rX);$$o=r(Kkt,"CamembertModel"),Kkt.forEach(t),k$o=r(yje," (CamemBERT model)"),yje.forEach(t),S$o=i(x),S_=n(x,"LI",{});var xje=s(S_);Q_e=n(xje,"STRONG",{});var eSt=s(Q_e);R$o=r(eSt,"canine"),eSt.forEach(t),P$o=r(xje," \u2014 "),tX=n(xje,"A",{href:!0});var oSt=s(tX);B$o=r(oSt,"CanineModel"),oSt.forEach(t),I$o=r(xje," (CANINE model)"),xje.forEach(t),N$o=i(x),R_=n(x,"LI",{});var $je=s(R_);W_e=n($je,"STRONG",{});var rSt=s(W_e);q$o=r(rSt,"clip"),rSt.forEach(t),j$o=r($je," \u2014 "),aX=n($je,"A",{href:!0});var tSt=s(aX);D$o=r(tSt,"CLIPModel"),tSt.forEach(t),G$o=r($je," (CLIP model)"),$je.forEach(t),O$o=i(x),P_=n(x,"LI",{});var kje=s(P_);U_e=n(kje,"STRONG",{});var aSt=s(U_e);V$o=r(aSt,"codegen"),aSt.forEach(t),X$o=r(kje," \u2014 "),nX=n(kje,"A",{href:!0});var nSt=s(nX);z$o=r(nSt,"CodeGenModel"),nSt.forEach(t),Q$o=r(kje," (CodeGen model)"),kje.forEach(t),W$o=i(x),B_=n(x,"LI",{});var Sje=s(B_);H_e=n(Sje,"STRONG",{});var sSt=s(H_e);U$o=r(sSt,"conditional_detr"),sSt.forEach(t),H$o=r(Sje," \u2014 "),sX=n(Sje,"A",{href:!0});var lSt=s(sX);J$o=r(lSt,"ConditionalDetrModel"),lSt.forEach(t),Y$o=r(Sje," (Conditional DETR model)"),Sje.forEach(t),Z$o=i(x),I_=n(x,"LI",{});var Rje=s(I_);J_e=n(Rje,"STRONG",{});var iSt=s(J_e);K$o=r(iSt,"convbert"),iSt.forEach(t),eko=r(Rje," \u2014 "),lX=n(Rje,"A",{href:!0});var dSt=s(lX);oko=r(dSt,"ConvBertModel"),dSt.forEach(t),rko=r(Rje," (ConvBERT model)"),Rje.forEach(t),tko=i(x),N_=n(x,"LI",{});var Pje=s(N_);Y_e=n(Pje,"STRONG",{});var cSt=s(Y_e);ako=r(cSt,"convnext"),cSt.forEach(t),nko=r(Pje," \u2014 "),iX=n(Pje,"A",{href:!0});var mSt=s(iX);sko=r(mSt,"ConvNextModel"),mSt.forEach(t),lko=r(Pje," (ConvNeXT model)"),Pje.forEach(t),iko=i(x),q_=n(x,"LI",{});var Bje=s(q_);Z_e=n(Bje,"STRONG",{});var fSt=s(Z_e);dko=r(fSt,"ctrl"),fSt.forEach(t),cko=r(Bje," \u2014 "),dX=n(Bje,"A",{href:!0});var gSt=s(dX);mko=r(gSt,"CTRLModel"),gSt.forEach(t),fko=r(Bje," (CTRL model)"),Bje.forEach(t),gko=i(x),j_=n(x,"LI",{});var Ije=s(j_);K_e=n(Ije,"STRONG",{});var hSt=s(K_e);hko=r(hSt,"cvt"),hSt.forEach(t),uko=r(Ije," \u2014 "),cX=n(Ije,"A",{href:!0});var uSt=s(cX);pko=r(uSt,"CvtModel"),uSt.forEach(t),_ko=r(Ije," (CvT model)"),Ije.forEach(t),bko=i(x),D_=n(x,"LI",{});var Nje=s(D_);e1e=n(Nje,"STRONG",{});var pSt=s(e1e);vko=r(pSt,"data2vec-audio"),pSt.forEach(t),Fko=r(Nje," \u2014 "),mX=n(Nje,"A",{href:!0});var _St=s(mX);Tko=r(_St,"Data2VecAudioModel"),_St.forEach(t),Mko=r(Nje," (Data2VecAudio model)"),Nje.forEach(t),Eko=i(x),G_=n(x,"LI",{});var qje=s(G_);o1e=n(qje,"STRONG",{});var bSt=s(o1e);Cko=r(bSt,"data2vec-text"),bSt.forEach(t),wko=r(qje," \u2014 "),fX=n(qje,"A",{href:!0});var vSt=s(fX);Ako=r(vSt,"Data2VecTextModel"),vSt.forEach(t),Lko=r(qje," (Data2VecText model)"),qje.forEach(t),yko=i(x),O_=n(x,"LI",{});var jje=s(O_);r1e=n(jje,"STRONG",{});var FSt=s(r1e);xko=r(FSt,"data2vec-vision"),FSt.forEach(t),$ko=r(jje," \u2014 "),gX=n(jje,"A",{href:!0});var TSt=s(gX);kko=r(TSt,"Data2VecVisionModel"),TSt.forEach(t),Sko=r(jje," (Data2VecVision model)"),jje.forEach(t),Rko=i(x),V_=n(x,"LI",{});var Dje=s(V_);t1e=n(Dje,"STRONG",{});var MSt=s(t1e);Pko=r(MSt,"deberta"),MSt.forEach(t),Bko=r(Dje," \u2014 "),hX=n(Dje,"A",{href:!0});var ESt=s(hX);Iko=r(ESt,"DebertaModel"),ESt.forEach(t),Nko=r(Dje," (DeBERTa model)"),Dje.forEach(t),qko=i(x),X_=n(x,"LI",{});var Gje=s(X_);a1e=n(Gje,"STRONG",{});var CSt=s(a1e);jko=r(CSt,"deberta-v2"),CSt.forEach(t),Dko=r(Gje," \u2014 "),uX=n(Gje,"A",{href:!0});var wSt=s(uX);Gko=r(wSt,"DebertaV2Model"),wSt.forEach(t),Oko=r(Gje," (DeBERTa-v2 model)"),Gje.forEach(t),Vko=i(x),z_=n(x,"LI",{});var Oje=s(z_);n1e=n(Oje,"STRONG",{});var ASt=s(n1e);Xko=r(ASt,"decision_transformer"),ASt.forEach(t),zko=r(Oje," \u2014 "),pX=n(Oje,"A",{href:!0});var LSt=s(pX);Qko=r(LSt,"DecisionTransformerModel"),LSt.forEach(t),Wko=r(Oje," (Decision Transformer model)"),Oje.forEach(t),Uko=i(x),Q_=n(x,"LI",{});var Vje=s(Q_);s1e=n(Vje,"STRONG",{});var ySt=s(s1e);Hko=r(ySt,"deformable_detr"),ySt.forEach(t),Jko=r(Vje," \u2014 "),_X=n(Vje,"A",{href:!0});var xSt=s(_X);Yko=r(xSt,"DeformableDetrModel"),xSt.forEach(t),Zko=r(Vje," (Deformable DETR model)"),Vje.forEach(t),Kko=i(x),W_=n(x,"LI",{});var Xje=s(W_);l1e=n(Xje,"STRONG",{});var $St=s(l1e);eSo=r($St,"deit"),$St.forEach(t),oSo=r(Xje," \u2014 "),bX=n(Xje,"A",{href:!0});var kSt=s(bX);rSo=r(kSt,"DeiTModel"),kSt.forEach(t),tSo=r(Xje," (DeiT model)"),Xje.forEach(t),aSo=i(x),U_=n(x,"LI",{});var zje=s(U_);i1e=n(zje,"STRONG",{});var SSt=s(i1e);nSo=r(SSt,"detr"),SSt.forEach(t),sSo=r(zje," \u2014 "),vX=n(zje,"A",{href:!0});var RSt=s(vX);lSo=r(RSt,"DetrModel"),RSt.forEach(t),iSo=r(zje," (DETR model)"),zje.forEach(t),dSo=i(x),H_=n(x,"LI",{});var Qje=s(H_);d1e=n(Qje,"STRONG",{});var PSt=s(d1e);cSo=r(PSt,"distilbert"),PSt.forEach(t),mSo=r(Qje," \u2014 "),FX=n(Qje,"A",{href:!0});var BSt=s(FX);fSo=r(BSt,"DistilBertModel"),BSt.forEach(t),gSo=r(Qje," (DistilBERT model)"),Qje.forEach(t),hSo=i(x),J_=n(x,"LI",{});var Wje=s(J_);c1e=n(Wje,"STRONG",{});var ISt=s(c1e);uSo=r(ISt,"donut-swin"),ISt.forEach(t),pSo=r(Wje," \u2014 "),TX=n(Wje,"A",{href:!0});var NSt=s(TX);_So=r(NSt,"DonutSwinModel"),NSt.forEach(t),bSo=r(Wje," (DonutSwin model)"),Wje.forEach(t),vSo=i(x),Y_=n(x,"LI",{});var Uje=s(Y_);m1e=n(Uje,"STRONG",{});var qSt=s(m1e);FSo=r(qSt,"dpr"),qSt.forEach(t),TSo=r(Uje," \u2014 "),MX=n(Uje,"A",{href:!0});var jSt=s(MX);MSo=r(jSt,"DPRQuestionEncoder"),jSt.forEach(t),ESo=r(Uje," (DPR model)"),Uje.forEach(t),CSo=i(x),Z_=n(x,"LI",{});var Hje=s(Z_);f1e=n(Hje,"STRONG",{});var DSt=s(f1e);wSo=r(DSt,"dpt"),DSt.forEach(t),ASo=r(Hje," \u2014 "),EX=n(Hje,"A",{href:!0});var GSt=s(EX);LSo=r(GSt,"DPTModel"),GSt.forEach(t),ySo=r(Hje," (DPT model)"),Hje.forEach(t),xSo=i(x),K_=n(x,"LI",{});var Jje=s(K_);g1e=n(Jje,"STRONG",{});var OSt=s(g1e);$So=r(OSt,"electra"),OSt.forEach(t),kSo=r(Jje," \u2014 "),CX=n(Jje,"A",{href:!0});var VSt=s(CX);SSo=r(VSt,"ElectraModel"),VSt.forEach(t),RSo=r(Jje," (ELECTRA model)"),Jje.forEach(t),PSo=i(x),e1=n(x,"LI",{});var Yje=s(e1);h1e=n(Yje,"STRONG",{});var XSt=s(h1e);BSo=r(XSt,"ernie"),XSt.forEach(t),ISo=r(Yje," \u2014 "),wX=n(Yje,"A",{href:!0});var zSt=s(wX);NSo=r(zSt,"ErnieModel"),zSt.forEach(t),qSo=r(Yje," (ERNIE model)"),Yje.forEach(t),jSo=i(x),o1=n(x,"LI",{});var Zje=s(o1);u1e=n(Zje,"STRONG",{});var QSt=s(u1e);DSo=r(QSt,"esm"),QSt.forEach(t),GSo=r(Zje," \u2014 "),AX=n(Zje,"A",{href:!0});var WSt=s(AX);OSo=r(WSt,"EsmModel"),WSt.forEach(t),VSo=r(Zje," (ESM model)"),Zje.forEach(t),XSo=i(x),r1=n(x,"LI",{});var Kje=s(r1);p1e=n(Kje,"STRONG",{});var USt=s(p1e);zSo=r(USt,"flaubert"),USt.forEach(t),QSo=r(Kje," \u2014 "),LX=n(Kje,"A",{href:!0});var HSt=s(LX);WSo=r(HSt,"FlaubertModel"),HSt.forEach(t),USo=r(Kje," (FlauBERT model)"),Kje.forEach(t),HSo=i(x),t1=n(x,"LI",{});var eDe=s(t1);_1e=n(eDe,"STRONG",{});var JSt=s(_1e);JSo=r(JSt,"flava"),JSt.forEach(t),YSo=r(eDe," \u2014 "),yX=n(eDe,"A",{href:!0});var YSt=s(yX);ZSo=r(YSt,"FlavaModel"),YSt.forEach(t),KSo=r(eDe," (FLAVA model)"),eDe.forEach(t),eRo=i(x),a1=n(x,"LI",{});var oDe=s(a1);b1e=n(oDe,"STRONG",{});var ZSt=s(b1e);oRo=r(ZSt,"fnet"),ZSt.forEach(t),rRo=r(oDe," \u2014 "),xX=n(oDe,"A",{href:!0});var KSt=s(xX);tRo=r(KSt,"FNetModel"),KSt.forEach(t),aRo=r(oDe," (FNet model)"),oDe.forEach(t),nRo=i(x),n1=n(x,"LI",{});var rDe=s(n1);v1e=n(rDe,"STRONG",{});var eRt=s(v1e);sRo=r(eRt,"fsmt"),eRt.forEach(t),lRo=r(rDe," \u2014 "),$X=n(rDe,"A",{href:!0});var oRt=s($X);iRo=r(oRt,"FSMTModel"),oRt.forEach(t),dRo=r(rDe," (FairSeq Machine-Translation model)"),rDe.forEach(t),cRo=i(x),El=n(x,"LI",{});var NI=s(El);F1e=n(NI,"STRONG",{});var rRt=s(F1e);mRo=r(rRt,"funnel"),rRt.forEach(t),fRo=r(NI," \u2014 "),kX=n(NI,"A",{href:!0});var tRt=s(kX);gRo=r(tRt,"FunnelModel"),tRt.forEach(t),hRo=r(NI," or "),SX=n(NI,"A",{href:!0});var aRt=s(SX);uRo=r(aRt,"FunnelBaseModel"),aRt.forEach(t),pRo=r(NI," (Funnel Transformer model)"),NI.forEach(t),_Ro=i(x),s1=n(x,"LI",{});var tDe=s(s1);T1e=n(tDe,"STRONG",{});var nRt=s(T1e);bRo=r(nRt,"glpn"),nRt.forEach(t),vRo=r(tDe," \u2014 "),RX=n(tDe,"A",{href:!0});var sRt=s(RX);FRo=r(sRt,"GLPNModel"),sRt.forEach(t),TRo=r(tDe," (GLPN model)"),tDe.forEach(t),MRo=i(x),l1=n(x,"LI",{});var aDe=s(l1);M1e=n(aDe,"STRONG",{});var lRt=s(M1e);ERo=r(lRt,"gpt2"),lRt.forEach(t),CRo=r(aDe," \u2014 "),PX=n(aDe,"A",{href:!0});var iRt=s(PX);wRo=r(iRt,"GPT2Model"),iRt.forEach(t),ARo=r(aDe," (OpenAI GPT-2 model)"),aDe.forEach(t),LRo=i(x),i1=n(x,"LI",{});var nDe=s(i1);E1e=n(nDe,"STRONG",{});var dRt=s(E1e);yRo=r(dRt,"gpt_neo"),dRt.forEach(t),xRo=r(nDe," \u2014 "),BX=n(nDe,"A",{href:!0});var cRt=s(BX);$Ro=r(cRt,"GPTNeoModel"),cRt.forEach(t),kRo=r(nDe," (GPT Neo model)"),nDe.forEach(t),SRo=i(x),d1=n(x,"LI",{});var sDe=s(d1);C1e=n(sDe,"STRONG",{});var mRt=s(C1e);RRo=r(mRt,"gpt_neox"),mRt.forEach(t),PRo=r(sDe," \u2014 "),IX=n(sDe,"A",{href:!0});var fRt=s(IX);BRo=r(fRt,"GPTNeoXModel"),fRt.forEach(t),IRo=r(sDe," (GPT NeoX model)"),sDe.forEach(t),NRo=i(x),c1=n(x,"LI",{});var lDe=s(c1);w1e=n(lDe,"STRONG",{});var gRt=s(w1e);qRo=r(gRt,"gpt_neox_japanese"),gRt.forEach(t),jRo=r(lDe," \u2014 "),NX=n(lDe,"A",{href:!0});var hRt=s(NX);DRo=r(hRt,"GPTNeoXJapaneseModel"),hRt.forEach(t),GRo=r(lDe," (GPT NeoX Japanese model)"),lDe.forEach(t),ORo=i(x),m1=n(x,"LI",{});var iDe=s(m1);A1e=n(iDe,"STRONG",{});var uRt=s(A1e);VRo=r(uRt,"gptj"),uRt.forEach(t),XRo=r(iDe," \u2014 "),qX=n(iDe,"A",{href:!0});var pRt=s(qX);zRo=r(pRt,"GPTJModel"),pRt.forEach(t),QRo=r(iDe," (GPT-J model)"),iDe.forEach(t),WRo=i(x),f1=n(x,"LI",{});var dDe=s(f1);L1e=n(dDe,"STRONG",{});var _Rt=s(L1e);URo=r(_Rt,"groupvit"),_Rt.forEach(t),HRo=r(dDe," \u2014 "),jX=n(dDe,"A",{href:!0});var bRt=s(jX);JRo=r(bRt,"GroupViTModel"),bRt.forEach(t),YRo=r(dDe," (GroupViT model)"),dDe.forEach(t),ZRo=i(x),g1=n(x,"LI",{});var cDe=s(g1);y1e=n(cDe,"STRONG",{});var vRt=s(y1e);KRo=r(vRt,"hubert"),vRt.forEach(t),ePo=r(cDe," \u2014 "),DX=n(cDe,"A",{href:!0});var FRt=s(DX);oPo=r(FRt,"HubertModel"),FRt.forEach(t),rPo=r(cDe," (Hubert model)"),cDe.forEach(t),tPo=i(x),h1=n(x,"LI",{});var mDe=s(h1);x1e=n(mDe,"STRONG",{});var TRt=s(x1e);aPo=r(TRt,"ibert"),TRt.forEach(t),nPo=r(mDe," \u2014 "),GX=n(mDe,"A",{href:!0});var MRt=s(GX);sPo=r(MRt,"IBertModel"),MRt.forEach(t),lPo=r(mDe," (I-BERT model)"),mDe.forEach(t),iPo=i(x),u1=n(x,"LI",{});var fDe=s(u1);$1e=n(fDe,"STRONG",{});var ERt=s($1e);dPo=r(ERt,"imagegpt"),ERt.forEach(t),cPo=r(fDe," \u2014 "),OX=n(fDe,"A",{href:!0});var CRt=s(OX);mPo=r(CRt,"ImageGPTModel"),CRt.forEach(t),fPo=r(fDe," (ImageGPT model)"),fDe.forEach(t),gPo=i(x),p1=n(x,"LI",{});var gDe=s(p1);k1e=n(gDe,"STRONG",{});var wRt=s(k1e);hPo=r(wRt,"layoutlm"),wRt.forEach(t),uPo=r(gDe," \u2014 "),VX=n(gDe,"A",{href:!0});var ARt=s(VX);pPo=r(ARt,"LayoutLMModel"),ARt.forEach(t),_Po=r(gDe," (LayoutLM model)"),gDe.forEach(t),bPo=i(x),_1=n(x,"LI",{});var hDe=s(_1);S1e=n(hDe,"STRONG",{});var LRt=s(S1e);vPo=r(LRt,"layoutlmv2"),LRt.forEach(t),FPo=r(hDe," \u2014 "),XX=n(hDe,"A",{href:!0});var yRt=s(XX);TPo=r(yRt,"LayoutLMv2Model"),yRt.forEach(t),MPo=r(hDe," (LayoutLMv2 model)"),hDe.forEach(t),EPo=i(x),b1=n(x,"LI",{});var uDe=s(b1);R1e=n(uDe,"STRONG",{});var xRt=s(R1e);CPo=r(xRt,"layoutlmv3"),xRt.forEach(t),wPo=r(uDe," \u2014 "),zX=n(uDe,"A",{href:!0});var $Rt=s(zX);APo=r($Rt,"LayoutLMv3Model"),$Rt.forEach(t),LPo=r(uDe," (LayoutLMv3 model)"),uDe.forEach(t),yPo=i(x),v1=n(x,"LI",{});var pDe=s(v1);P1e=n(pDe,"STRONG",{});var kRt=s(P1e);xPo=r(kRt,"led"),kRt.forEach(t),$Po=r(pDe," \u2014 "),QX=n(pDe,"A",{href:!0});var SRt=s(QX);kPo=r(SRt,"LEDModel"),SRt.forEach(t),SPo=r(pDe," (LED model)"),pDe.forEach(t),RPo=i(x),F1=n(x,"LI",{});var _De=s(F1);B1e=n(_De,"STRONG",{});var RRt=s(B1e);PPo=r(RRt,"levit"),RRt.forEach(t),BPo=r(_De," \u2014 "),WX=n(_De,"A",{href:!0});var PRt=s(WX);IPo=r(PRt,"LevitModel"),PRt.forEach(t),NPo=r(_De," (LeViT model)"),_De.forEach(t),qPo=i(x),T1=n(x,"LI",{});var bDe=s(T1);I1e=n(bDe,"STRONG",{});var BRt=s(I1e);jPo=r(BRt,"lilt"),BRt.forEach(t),DPo=r(bDe," \u2014 "),UX=n(bDe,"A",{href:!0});var IRt=s(UX);GPo=r(IRt,"LiltModel"),IRt.forEach(t),OPo=r(bDe," (LiLT model)"),bDe.forEach(t),VPo=i(x),M1=n(x,"LI",{});var vDe=s(M1);N1e=n(vDe,"STRONG",{});var NRt=s(N1e);XPo=r(NRt,"longformer"),NRt.forEach(t),zPo=r(vDe," \u2014 "),HX=n(vDe,"A",{href:!0});var qRt=s(HX);QPo=r(qRt,"LongformerModel"),qRt.forEach(t),WPo=r(vDe," (Longformer model)"),vDe.forEach(t),UPo=i(x),E1=n(x,"LI",{});var FDe=s(E1);q1e=n(FDe,"STRONG",{});var jRt=s(q1e);HPo=r(jRt,"longt5"),jRt.forEach(t),JPo=r(FDe," \u2014 "),JX=n(FDe,"A",{href:!0});var DRt=s(JX);YPo=r(DRt,"LongT5Model"),DRt.forEach(t),ZPo=r(FDe," (LongT5 model)"),FDe.forEach(t),KPo=i(x),C1=n(x,"LI",{});var TDe=s(C1);j1e=n(TDe,"STRONG",{});var GRt=s(j1e);eBo=r(GRt,"luke"),GRt.forEach(t),oBo=r(TDe," \u2014 "),YX=n(TDe,"A",{href:!0});var ORt=s(YX);rBo=r(ORt,"LukeModel"),ORt.forEach(t),tBo=r(TDe," (LUKE model)"),TDe.forEach(t),aBo=i(x),w1=n(x,"LI",{});var MDe=s(w1);D1e=n(MDe,"STRONG",{});var VRt=s(D1e);nBo=r(VRt,"lxmert"),VRt.forEach(t),sBo=r(MDe," \u2014 "),ZX=n(MDe,"A",{href:!0});var XRt=s(ZX);lBo=r(XRt,"LxmertModel"),XRt.forEach(t),iBo=r(MDe," (LXMERT model)"),MDe.forEach(t),dBo=i(x),A1=n(x,"LI",{});var EDe=s(A1);G1e=n(EDe,"STRONG",{});var zRt=s(G1e);cBo=r(zRt,"m2m_100"),zRt.forEach(t),mBo=r(EDe," \u2014 "),KX=n(EDe,"A",{href:!0});var QRt=s(KX);fBo=r(QRt,"M2M100Model"),QRt.forEach(t),gBo=r(EDe," (M2M100 model)"),EDe.forEach(t),hBo=i(x),L1=n(x,"LI",{});var CDe=s(L1);O1e=n(CDe,"STRONG",{});var WRt=s(O1e);uBo=r(WRt,"marian"),WRt.forEach(t),pBo=r(CDe," \u2014 "),ez=n(CDe,"A",{href:!0});var URt=s(ez);_Bo=r(URt,"MarianModel"),URt.forEach(t),bBo=r(CDe," (Marian model)"),CDe.forEach(t),vBo=i(x),y1=n(x,"LI",{});var wDe=s(y1);V1e=n(wDe,"STRONG",{});var HRt=s(V1e);FBo=r(HRt,"markuplm"),HRt.forEach(t),TBo=r(wDe," \u2014 "),oz=n(wDe,"A",{href:!0});var JRt=s(oz);MBo=r(JRt,"MarkupLMModel"),JRt.forEach(t),EBo=r(wDe," (MarkupLM model)"),wDe.forEach(t),CBo=i(x),x1=n(x,"LI",{});var ADe=s(x1);X1e=n(ADe,"STRONG",{});var YRt=s(X1e);wBo=r(YRt,"maskformer"),YRt.forEach(t),ABo=r(ADe," \u2014 "),rz=n(ADe,"A",{href:!0});var ZRt=s(rz);LBo=r(ZRt,"MaskFormerModel"),ZRt.forEach(t),yBo=r(ADe," (MaskFormer model)"),ADe.forEach(t),xBo=i(x),$1=n(x,"LI",{});var LDe=s($1);z1e=n(LDe,"STRONG",{});var KRt=s(z1e);$Bo=r(KRt,"mbart"),KRt.forEach(t),kBo=r(LDe," \u2014 "),tz=n(LDe,"A",{href:!0});var ePt=s(tz);SBo=r(ePt,"MBartModel"),ePt.forEach(t),RBo=r(LDe," (mBART model)"),LDe.forEach(t),PBo=i(x),k1=n(x,"LI",{});var yDe=s(k1);Q1e=n(yDe,"STRONG",{});var oPt=s(Q1e);BBo=r(oPt,"mctct"),oPt.forEach(t),IBo=r(yDe," \u2014 "),az=n(yDe,"A",{href:!0});var rPt=s(az);NBo=r(rPt,"MCTCTModel"),rPt.forEach(t),qBo=r(yDe," (M-CTC-T model)"),yDe.forEach(t),jBo=i(x),S1=n(x,"LI",{});var xDe=s(S1);W1e=n(xDe,"STRONG",{});var tPt=s(W1e);DBo=r(tPt,"megatron-bert"),tPt.forEach(t),GBo=r(xDe," \u2014 "),nz=n(xDe,"A",{href:!0});var aPt=s(nz);OBo=r(aPt,"MegatronBertModel"),aPt.forEach(t),VBo=r(xDe," (Megatron-BERT model)"),xDe.forEach(t),XBo=i(x),R1=n(x,"LI",{});var $De=s(R1);U1e=n($De,"STRONG",{});var nPt=s(U1e);zBo=r(nPt,"mobilebert"),nPt.forEach(t),QBo=r($De," \u2014 "),sz=n($De,"A",{href:!0});var sPt=s(sz);WBo=r(sPt,"MobileBertModel"),sPt.forEach(t),UBo=r($De," (MobileBERT model)"),$De.forEach(t),HBo=i(x),P1=n(x,"LI",{});var kDe=s(P1);H1e=n(kDe,"STRONG",{});var lPt=s(H1e);JBo=r(lPt,"mobilevit"),lPt.forEach(t),YBo=r(kDe," \u2014 "),lz=n(kDe,"A",{href:!0});var iPt=s(lz);ZBo=r(iPt,"MobileViTModel"),iPt.forEach(t),KBo=r(kDe," (MobileViT model)"),kDe.forEach(t),eIo=i(x),B1=n(x,"LI",{});var SDe=s(B1);J1e=n(SDe,"STRONG",{});var dPt=s(J1e);oIo=r(dPt,"mpnet"),dPt.forEach(t),rIo=r(SDe," \u2014 "),iz=n(SDe,"A",{href:!0});var cPt=s(iz);tIo=r(cPt,"MPNetModel"),cPt.forEach(t),aIo=r(SDe," (MPNet model)"),SDe.forEach(t),nIo=i(x),I1=n(x,"LI",{});var RDe=s(I1);Y1e=n(RDe,"STRONG",{});var mPt=s(Y1e);sIo=r(mPt,"mt5"),mPt.forEach(t),lIo=r(RDe," \u2014 "),dz=n(RDe,"A",{href:!0});var fPt=s(dz);iIo=r(fPt,"MT5Model"),fPt.forEach(t),dIo=r(RDe," (MT5 model)"),RDe.forEach(t),cIo=i(x),N1=n(x,"LI",{});var PDe=s(N1);Z1e=n(PDe,"STRONG",{});var gPt=s(Z1e);mIo=r(gPt,"mvp"),gPt.forEach(t),fIo=r(PDe," \u2014 "),cz=n(PDe,"A",{href:!0});var hPt=s(cz);gIo=r(hPt,"MvpModel"),hPt.forEach(t),hIo=r(PDe," (MVP model)"),PDe.forEach(t),uIo=i(x),q1=n(x,"LI",{});var BDe=s(q1);K1e=n(BDe,"STRONG",{});var uPt=s(K1e);pIo=r(uPt,"nezha"),uPt.forEach(t),_Io=r(BDe," \u2014 "),mz=n(BDe,"A",{href:!0});var pPt=s(mz);bIo=r(pPt,"NezhaModel"),pPt.forEach(t),vIo=r(BDe," (Nezha model)"),BDe.forEach(t),FIo=i(x),j1=n(x,"LI",{});var IDe=s(j1);e2e=n(IDe,"STRONG",{});var _Pt=s(e2e);TIo=r(_Pt,"nllb"),_Pt.forEach(t),MIo=r(IDe," \u2014 "),fz=n(IDe,"A",{href:!0});var bPt=s(fz);EIo=r(bPt,"M2M100Model"),bPt.forEach(t),CIo=r(IDe," (NLLB model)"),IDe.forEach(t),wIo=i(x),D1=n(x,"LI",{});var NDe=s(D1);o2e=n(NDe,"STRONG",{});var vPt=s(o2e);AIo=r(vPt,"nystromformer"),vPt.forEach(t),LIo=r(NDe," \u2014 "),gz=n(NDe,"A",{href:!0});var FPt=s(gz);yIo=r(FPt,"NystromformerModel"),FPt.forEach(t),xIo=r(NDe," (Nystr\xF6mformer model)"),NDe.forEach(t),$Io=i(x),G1=n(x,"LI",{});var qDe=s(G1);r2e=n(qDe,"STRONG",{});var TPt=s(r2e);kIo=r(TPt,"openai-gpt"),TPt.forEach(t),SIo=r(qDe," \u2014 "),hz=n(qDe,"A",{href:!0});var MPt=s(hz);RIo=r(MPt,"OpenAIGPTModel"),MPt.forEach(t),PIo=r(qDe," (OpenAI GPT model)"),qDe.forEach(t),BIo=i(x),O1=n(x,"LI",{});var jDe=s(O1);t2e=n(jDe,"STRONG",{});var EPt=s(t2e);IIo=r(EPt,"opt"),EPt.forEach(t),NIo=r(jDe," \u2014 "),uz=n(jDe,"A",{href:!0});var CPt=s(uz);qIo=r(CPt,"OPTModel"),CPt.forEach(t),jIo=r(jDe," (OPT model)"),jDe.forEach(t),DIo=i(x),V1=n(x,"LI",{});var DDe=s(V1);a2e=n(DDe,"STRONG",{});var wPt=s(a2e);GIo=r(wPt,"owlvit"),wPt.forEach(t),OIo=r(DDe," \u2014 "),pz=n(DDe,"A",{href:!0});var APt=s(pz);VIo=r(APt,"OwlViTModel"),APt.forEach(t),XIo=r(DDe," (OWL-ViT model)"),DDe.forEach(t),zIo=i(x),X1=n(x,"LI",{});var GDe=s(X1);n2e=n(GDe,"STRONG",{});var LPt=s(n2e);QIo=r(LPt,"pegasus"),LPt.forEach(t),WIo=r(GDe," \u2014 "),_z=n(GDe,"A",{href:!0});var yPt=s(_z);UIo=r(yPt,"PegasusModel"),yPt.forEach(t),HIo=r(GDe," (Pegasus model)"),GDe.forEach(t),JIo=i(x),z1=n(x,"LI",{});var ODe=s(z1);s2e=n(ODe,"STRONG",{});var xPt=s(s2e);YIo=r(xPt,"pegasus_x"),xPt.forEach(t),ZIo=r(ODe," \u2014 "),bz=n(ODe,"A",{href:!0});var $Pt=s(bz);KIo=r($Pt,"PegasusXModel"),$Pt.forEach(t),eNo=r(ODe," (PEGASUS-X model)"),ODe.forEach(t),oNo=i(x),Q1=n(x,"LI",{});var VDe=s(Q1);l2e=n(VDe,"STRONG",{});var kPt=s(l2e);rNo=r(kPt,"perceiver"),kPt.forEach(t),tNo=r(VDe," \u2014 "),vz=n(VDe,"A",{href:!0});var SPt=s(vz);aNo=r(SPt,"PerceiverModel"),SPt.forEach(t),nNo=r(VDe," (Perceiver model)"),VDe.forEach(t),sNo=i(x),W1=n(x,"LI",{});var XDe=s(W1);i2e=n(XDe,"STRONG",{});var RPt=s(i2e);lNo=r(RPt,"plbart"),RPt.forEach(t),iNo=r(XDe," \u2014 "),Fz=n(XDe,"A",{href:!0});var PPt=s(Fz);dNo=r(PPt,"PLBartModel"),PPt.forEach(t),cNo=r(XDe," (PLBart model)"),XDe.forEach(t),mNo=i(x),U1=n(x,"LI",{});var zDe=s(U1);d2e=n(zDe,"STRONG",{});var BPt=s(d2e);fNo=r(BPt,"poolformer"),BPt.forEach(t),gNo=r(zDe," \u2014 "),Tz=n(zDe,"A",{href:!0});var IPt=s(Tz);hNo=r(IPt,"PoolFormerModel"),IPt.forEach(t),uNo=r(zDe," (PoolFormer model)"),zDe.forEach(t),pNo=i(x),H1=n(x,"LI",{});var QDe=s(H1);c2e=n(QDe,"STRONG",{});var NPt=s(c2e);_No=r(NPt,"prophetnet"),NPt.forEach(t),bNo=r(QDe," \u2014 "),Mz=n(QDe,"A",{href:!0});var qPt=s(Mz);vNo=r(qPt,"ProphetNetModel"),qPt.forEach(t),FNo=r(QDe," (ProphetNet model)"),QDe.forEach(t),TNo=i(x),J1=n(x,"LI",{});var WDe=s(J1);m2e=n(WDe,"STRONG",{});var jPt=s(m2e);MNo=r(jPt,"qdqbert"),jPt.forEach(t),ENo=r(WDe," \u2014 "),Ez=n(WDe,"A",{href:!0});var DPt=s(Ez);CNo=r(DPt,"QDQBertModel"),DPt.forEach(t),wNo=r(WDe," (QDQBert model)"),WDe.forEach(t),ANo=i(x),Y1=n(x,"LI",{});var UDe=s(Y1);f2e=n(UDe,"STRONG",{});var GPt=s(f2e);LNo=r(GPt,"reformer"),GPt.forEach(t),yNo=r(UDe," \u2014 "),Cz=n(UDe,"A",{href:!0});var OPt=s(Cz);xNo=r(OPt,"ReformerModel"),OPt.forEach(t),$No=r(UDe," (Reformer model)"),UDe.forEach(t),kNo=i(x),Z1=n(x,"LI",{});var HDe=s(Z1);g2e=n(HDe,"STRONG",{});var VPt=s(g2e);SNo=r(VPt,"regnet"),VPt.forEach(t),RNo=r(HDe," \u2014 "),wz=n(HDe,"A",{href:!0});var XPt=s(wz);PNo=r(XPt,"RegNetModel"),XPt.forEach(t),BNo=r(HDe," (RegNet model)"),HDe.forEach(t),INo=i(x),K1=n(x,"LI",{});var JDe=s(K1);h2e=n(JDe,"STRONG",{});var zPt=s(h2e);NNo=r(zPt,"rembert"),zPt.forEach(t),qNo=r(JDe," \u2014 "),Az=n(JDe,"A",{href:!0});var QPt=s(Az);jNo=r(QPt,"RemBertModel"),QPt.forEach(t),DNo=r(JDe," (RemBERT model)"),JDe.forEach(t),GNo=i(x),e2=n(x,"LI",{});var YDe=s(e2);u2e=n(YDe,"STRONG",{});var WPt=s(u2e);ONo=r(WPt,"resnet"),WPt.forEach(t),VNo=r(YDe," \u2014 "),Lz=n(YDe,"A",{href:!0});var UPt=s(Lz);XNo=r(UPt,"ResNetModel"),UPt.forEach(t),zNo=r(YDe," (ResNet model)"),YDe.forEach(t),QNo=i(x),o2=n(x,"LI",{});var ZDe=s(o2);p2e=n(ZDe,"STRONG",{});var HPt=s(p2e);WNo=r(HPt,"retribert"),HPt.forEach(t),UNo=r(ZDe," \u2014 "),yz=n(ZDe,"A",{href:!0});var JPt=s(yz);HNo=r(JPt,"RetriBertModel"),JPt.forEach(t),JNo=r(ZDe," (RetriBERT model)"),ZDe.forEach(t),YNo=i(x),r2=n(x,"LI",{});var KDe=s(r2);_2e=n(KDe,"STRONG",{});var YPt=s(_2e);ZNo=r(YPt,"roberta"),YPt.forEach(t),KNo=r(KDe," \u2014 "),xz=n(KDe,"A",{href:!0});var ZPt=s(xz);eqo=r(ZPt,"RobertaModel"),ZPt.forEach(t),oqo=r(KDe," (RoBERTa model)"),KDe.forEach(t),rqo=i(x),t2=n(x,"LI",{});var eGe=s(t2);b2e=n(eGe,"STRONG",{});var KPt=s(b2e);tqo=r(KPt,"roformer"),KPt.forEach(t),aqo=r(eGe," \u2014 "),$z=n(eGe,"A",{href:!0});var eBt=s($z);nqo=r(eBt,"RoFormerModel"),eBt.forEach(t),sqo=r(eGe," (RoFormer model)"),eGe.forEach(t),lqo=i(x),a2=n(x,"LI",{});var oGe=s(a2);v2e=n(oGe,"STRONG",{});var oBt=s(v2e);iqo=r(oBt,"segformer"),oBt.forEach(t),dqo=r(oGe," \u2014 "),kz=n(oGe,"A",{href:!0});var rBt=s(kz);cqo=r(rBt,"SegformerModel"),rBt.forEach(t),mqo=r(oGe," (SegFormer model)"),oGe.forEach(t),fqo=i(x),n2=n(x,"LI",{});var rGe=s(n2);F2e=n(rGe,"STRONG",{});var tBt=s(F2e);gqo=r(tBt,"sew"),tBt.forEach(t),hqo=r(rGe," \u2014 "),Sz=n(rGe,"A",{href:!0});var aBt=s(Sz);uqo=r(aBt,"SEWModel"),aBt.forEach(t),pqo=r(rGe," (SEW model)"),rGe.forEach(t),_qo=i(x),s2=n(x,"LI",{});var tGe=s(s2);T2e=n(tGe,"STRONG",{});var nBt=s(T2e);bqo=r(nBt,"sew-d"),nBt.forEach(t),vqo=r(tGe," \u2014 "),Rz=n(tGe,"A",{href:!0});var sBt=s(Rz);Fqo=r(sBt,"SEWDModel"),sBt.forEach(t),Tqo=r(tGe," (SEW-D model)"),tGe.forEach(t),Mqo=i(x),l2=n(x,"LI",{});var aGe=s(l2);M2e=n(aGe,"STRONG",{});var lBt=s(M2e);Eqo=r(lBt,"speech_to_text"),lBt.forEach(t),Cqo=r(aGe," \u2014 "),Pz=n(aGe,"A",{href:!0});var iBt=s(Pz);wqo=r(iBt,"Speech2TextModel"),iBt.forEach(t),Aqo=r(aGe," (Speech2Text model)"),aGe.forEach(t),Lqo=i(x),i2=n(x,"LI",{});var nGe=s(i2);E2e=n(nGe,"STRONG",{});var dBt=s(E2e);yqo=r(dBt,"splinter"),dBt.forEach(t),xqo=r(nGe," \u2014 "),Bz=n(nGe,"A",{href:!0});var cBt=s(Bz);$qo=r(cBt,"SplinterModel"),cBt.forEach(t),kqo=r(nGe," (Splinter model)"),nGe.forEach(t),Sqo=i(x),d2=n(x,"LI",{});var sGe=s(d2);C2e=n(sGe,"STRONG",{});var mBt=s(C2e);Rqo=r(mBt,"squeezebert"),mBt.forEach(t),Pqo=r(sGe," \u2014 "),Iz=n(sGe,"A",{href:!0});var fBt=s(Iz);Bqo=r(fBt,"SqueezeBertModel"),fBt.forEach(t),Iqo=r(sGe," (SqueezeBERT model)"),sGe.forEach(t),Nqo=i(x),c2=n(x,"LI",{});var lGe=s(c2);w2e=n(lGe,"STRONG",{});var gBt=s(w2e);qqo=r(gBt,"swin"),gBt.forEach(t),jqo=r(lGe," \u2014 "),Nz=n(lGe,"A",{href:!0});var hBt=s(Nz);Dqo=r(hBt,"SwinModel"),hBt.forEach(t),Gqo=r(lGe," (Swin Transformer model)"),lGe.forEach(t),Oqo=i(x),m2=n(x,"LI",{});var iGe=s(m2);A2e=n(iGe,"STRONG",{});var uBt=s(A2e);Vqo=r(uBt,"swinv2"),uBt.forEach(t),Xqo=r(iGe," \u2014 "),qz=n(iGe,"A",{href:!0});var pBt=s(qz);zqo=r(pBt,"Swinv2Model"),pBt.forEach(t),Qqo=r(iGe," (Swin Transformer V2 model)"),iGe.forEach(t),Wqo=i(x),f2=n(x,"LI",{});var dGe=s(f2);L2e=n(dGe,"STRONG",{});var _Bt=s(L2e);Uqo=r(_Bt,"t5"),_Bt.forEach(t),Hqo=r(dGe," \u2014 "),jz=n(dGe,"A",{href:!0});var bBt=s(jz);Jqo=r(bBt,"T5Model"),bBt.forEach(t),Yqo=r(dGe," (T5 model)"),dGe.forEach(t),Zqo=i(x),g2=n(x,"LI",{});var cGe=s(g2);y2e=n(cGe,"STRONG",{});var vBt=s(y2e);Kqo=r(vBt,"tapas"),vBt.forEach(t),ejo=r(cGe," \u2014 "),Dz=n(cGe,"A",{href:!0});var FBt=s(Dz);ojo=r(FBt,"TapasModel"),FBt.forEach(t),rjo=r(cGe," (TAPAS model)"),cGe.forEach(t),tjo=i(x),h2=n(x,"LI",{});var mGe=s(h2);x2e=n(mGe,"STRONG",{});var TBt=s(x2e);ajo=r(TBt,"time_series_transformer"),TBt.forEach(t),njo=r(mGe," \u2014 "),Gz=n(mGe,"A",{href:!0});var MBt=s(Gz);sjo=r(MBt,"TimeSeriesTransformerModel"),MBt.forEach(t),ljo=r(mGe," (Time Series Transformer model)"),mGe.forEach(t),ijo=i(x),u2=n(x,"LI",{});var fGe=s(u2);$2e=n(fGe,"STRONG",{});var EBt=s($2e);djo=r(EBt,"trajectory_transformer"),EBt.forEach(t),cjo=r(fGe," \u2014 "),Oz=n(fGe,"A",{href:!0});var CBt=s(Oz);mjo=r(CBt,"TrajectoryTransformerModel"),CBt.forEach(t),fjo=r(fGe," (Trajectory Transformer model)"),fGe.forEach(t),gjo=i(x),p2=n(x,"LI",{});var gGe=s(p2);k2e=n(gGe,"STRONG",{});var wBt=s(k2e);hjo=r(wBt,"transfo-xl"),wBt.forEach(t),ujo=r(gGe," \u2014 "),Vz=n(gGe,"A",{href:!0});var ABt=s(Vz);pjo=r(ABt,"TransfoXLModel"),ABt.forEach(t),_jo=r(gGe," (Transformer-XL model)"),gGe.forEach(t),bjo=i(x),_2=n(x,"LI",{});var hGe=s(_2);S2e=n(hGe,"STRONG",{});var LBt=s(S2e);vjo=r(LBt,"unispeech"),LBt.forEach(t),Fjo=r(hGe," \u2014 "),Xz=n(hGe,"A",{href:!0});var yBt=s(Xz);Tjo=r(yBt,"UniSpeechModel"),yBt.forEach(t),Mjo=r(hGe," (UniSpeech model)"),hGe.forEach(t),Ejo=i(x),b2=n(x,"LI",{});var uGe=s(b2);R2e=n(uGe,"STRONG",{});var xBt=s(R2e);Cjo=r(xBt,"unispeech-sat"),xBt.forEach(t),wjo=r(uGe," \u2014 "),zz=n(uGe,"A",{href:!0});var $Bt=s(zz);Ajo=r($Bt,"UniSpeechSatModel"),$Bt.forEach(t),Ljo=r(uGe," (UniSpeechSat model)"),uGe.forEach(t),yjo=i(x),v2=n(x,"LI",{});var pGe=s(v2);P2e=n(pGe,"STRONG",{});var kBt=s(P2e);xjo=r(kBt,"van"),kBt.forEach(t),$jo=r(pGe," \u2014 "),Qz=n(pGe,"A",{href:!0});var SBt=s(Qz);kjo=r(SBt,"VanModel"),SBt.forEach(t),Sjo=r(pGe," (VAN model)"),pGe.forEach(t),Rjo=i(x),F2=n(x,"LI",{});var _Ge=s(F2);B2e=n(_Ge,"STRONG",{});var RBt=s(B2e);Pjo=r(RBt,"videomae"),RBt.forEach(t),Bjo=r(_Ge," \u2014 "),Wz=n(_Ge,"A",{href:!0});var PBt=s(Wz);Ijo=r(PBt,"VideoMAEModel"),PBt.forEach(t),Njo=r(_Ge," (VideoMAE model)"),_Ge.forEach(t),qjo=i(x),T2=n(x,"LI",{});var bGe=s(T2);I2e=n(bGe,"STRONG",{});var BBt=s(I2e);jjo=r(BBt,"vilt"),BBt.forEach(t),Djo=r(bGe," \u2014 "),Uz=n(bGe,"A",{href:!0});var IBt=s(Uz);Gjo=r(IBt,"ViltModel"),IBt.forEach(t),Ojo=r(bGe," (ViLT model)"),bGe.forEach(t),Vjo=i(x),M2=n(x,"LI",{});var vGe=s(M2);N2e=n(vGe,"STRONG",{});var NBt=s(N2e);Xjo=r(NBt,"vision-text-dual-encoder"),NBt.forEach(t),zjo=r(vGe," \u2014 "),Hz=n(vGe,"A",{href:!0});var qBt=s(Hz);Qjo=r(qBt,"VisionTextDualEncoderModel"),qBt.forEach(t),Wjo=r(vGe," (VisionTextDualEncoder model)"),vGe.forEach(t),Ujo=i(x),E2=n(x,"LI",{});var FGe=s(E2);q2e=n(FGe,"STRONG",{});var jBt=s(q2e);Hjo=r(jBt,"visual_bert"),jBt.forEach(t),Jjo=r(FGe," \u2014 "),Jz=n(FGe,"A",{href:!0});var DBt=s(Jz);Yjo=r(DBt,"VisualBertModel"),DBt.forEach(t),Zjo=r(FGe," (VisualBERT model)"),FGe.forEach(t),Kjo=i(x),C2=n(x,"LI",{});var TGe=s(C2);j2e=n(TGe,"STRONG",{});var GBt=s(j2e);eDo=r(GBt,"vit"),GBt.forEach(t),oDo=r(TGe," \u2014 "),Yz=n(TGe,"A",{href:!0});var OBt=s(Yz);rDo=r(OBt,"ViTModel"),OBt.forEach(t),tDo=r(TGe," (ViT model)"),TGe.forEach(t),aDo=i(x),w2=n(x,"LI",{});var MGe=s(w2);D2e=n(MGe,"STRONG",{});var VBt=s(D2e);nDo=r(VBt,"vit_mae"),VBt.forEach(t),sDo=r(MGe," \u2014 "),Zz=n(MGe,"A",{href:!0});var XBt=s(Zz);lDo=r(XBt,"ViTMAEModel"),XBt.forEach(t),iDo=r(MGe," (ViTMAE model)"),MGe.forEach(t),dDo=i(x),A2=n(x,"LI",{});var EGe=s(A2);G2e=n(EGe,"STRONG",{});var zBt=s(G2e);cDo=r(zBt,"vit_msn"),zBt.forEach(t),mDo=r(EGe," \u2014 "),Kz=n(EGe,"A",{href:!0});var QBt=s(Kz);fDo=r(QBt,"ViTMSNModel"),QBt.forEach(t),gDo=r(EGe," (ViTMSN model)"),EGe.forEach(t),hDo=i(x),L2=n(x,"LI",{});var CGe=s(L2);O2e=n(CGe,"STRONG",{});var WBt=s(O2e);uDo=r(WBt,"wav2vec2"),WBt.forEach(t),pDo=r(CGe," \u2014 "),eQ=n(CGe,"A",{href:!0});var UBt=s(eQ);_Do=r(UBt,"Wav2Vec2Model"),UBt.forEach(t),bDo=r(CGe," (Wav2Vec2 model)"),CGe.forEach(t),vDo=i(x),y2=n(x,"LI",{});var wGe=s(y2);V2e=n(wGe,"STRONG",{});var HBt=s(V2e);FDo=r(HBt,"wav2vec2-conformer"),HBt.forEach(t),TDo=r(wGe," \u2014 "),oQ=n(wGe,"A",{href:!0});var JBt=s(oQ);MDo=r(JBt,"Wav2Vec2ConformerModel"),JBt.forEach(t),EDo=r(wGe," (Wav2Vec2-Conformer model)"),wGe.forEach(t),CDo=i(x),x2=n(x,"LI",{});var AGe=s(x2);X2e=n(AGe,"STRONG",{});var YBt=s(X2e);wDo=r(YBt,"wavlm"),YBt.forEach(t),ADo=r(AGe," \u2014 "),rQ=n(AGe,"A",{href:!0});var ZBt=s(rQ);LDo=r(ZBt,"WavLMModel"),ZBt.forEach(t),yDo=r(AGe," (WavLM model)"),AGe.forEach(t),xDo=i(x),$2=n(x,"LI",{});var LGe=s($2);z2e=n(LGe,"STRONG",{});var KBt=s(z2e);$Do=r(KBt,"whisper"),KBt.forEach(t),kDo=r(LGe," \u2014 "),tQ=n(LGe,"A",{href:!0});var eIt=s(tQ);SDo=r(eIt,"WhisperModel"),eIt.forEach(t),RDo=r(LGe," (Whisper model)"),LGe.forEach(t),PDo=i(x),k2=n(x,"LI",{});var yGe=s(k2);Q2e=n(yGe,"STRONG",{});var oIt=s(Q2e);BDo=r(oIt,"xclip"),oIt.forEach(t),IDo=r(yGe," \u2014 "),aQ=n(yGe,"A",{href:!0});var rIt=s(aQ);NDo=r(rIt,"XCLIPModel"),rIt.forEach(t),qDo=r(yGe," (X-CLIP model)"),yGe.forEach(t),jDo=i(x),S2=n(x,"LI",{});var xGe=s(S2);W2e=n(xGe,"STRONG",{});var tIt=s(W2e);DDo=r(tIt,"xglm"),tIt.forEach(t),GDo=r(xGe," \u2014 "),nQ=n(xGe,"A",{href:!0});var aIt=s(nQ);ODo=r(aIt,"XGLMModel"),aIt.forEach(t),VDo=r(xGe," (XGLM model)"),xGe.forEach(t),XDo=i(x),R2=n(x,"LI",{});var $Ge=s(R2);U2e=n($Ge,"STRONG",{});var nIt=s(U2e);zDo=r(nIt,"xlm"),nIt.forEach(t),QDo=r($Ge," \u2014 "),sQ=n($Ge,"A",{href:!0});var sIt=s(sQ);WDo=r(sIt,"XLMModel"),sIt.forEach(t),UDo=r($Ge," (XLM model)"),$Ge.forEach(t),HDo=i(x),P2=n(x,"LI",{});var kGe=s(P2);H2e=n(kGe,"STRONG",{});var lIt=s(H2e);JDo=r(lIt,"xlm-prophetnet"),lIt.forEach(t),YDo=r(kGe," \u2014 "),lQ=n(kGe,"A",{href:!0});var iIt=s(lQ);ZDo=r(iIt,"XLMProphetNetModel"),iIt.forEach(t),KDo=r(kGe," (XLM-ProphetNet model)"),kGe.forEach(t),eGo=i(x),B2=n(x,"LI",{});var SGe=s(B2);J2e=n(SGe,"STRONG",{});var dIt=s(J2e);oGo=r(dIt,"xlm-roberta"),dIt.forEach(t),rGo=r(SGe," \u2014 "),iQ=n(SGe,"A",{href:!0});var cIt=s(iQ);tGo=r(cIt,"XLMRobertaModel"),cIt.forEach(t),aGo=r(SGe," (XLM-RoBERTa model)"),SGe.forEach(t),nGo=i(x),I2=n(x,"LI",{});var RGe=s(I2);Y2e=n(RGe,"STRONG",{});var mIt=s(Y2e);sGo=r(mIt,"xlm-roberta-xl"),mIt.forEach(t),lGo=r(RGe," \u2014 "),dQ=n(RGe,"A",{href:!0});var fIt=s(dQ);iGo=r(fIt,"XLMRobertaXLModel"),fIt.forEach(t),dGo=r(RGe," (XLM-RoBERTa-XL model)"),RGe.forEach(t),cGo=i(x),N2=n(x,"LI",{});var PGe=s(N2);Z2e=n(PGe,"STRONG",{});var gIt=s(Z2e);mGo=r(gIt,"xlnet"),gIt.forEach(t),fGo=r(PGe," \u2014 "),cQ=n(PGe,"A",{href:!0});var hIt=s(cQ);gGo=r(hIt,"XLNetModel"),hIt.forEach(t),hGo=r(PGe," (XLNet model)"),PGe.forEach(t),uGo=i(x),q2=n(x,"LI",{});var BGe=s(q2);K2e=n(BGe,"STRONG",{});var uIt=s(K2e);pGo=r(uIt,"yolos"),uIt.forEach(t),_Go=r(BGe," \u2014 "),mQ=n(BGe,"A",{href:!0});var pIt=s(mQ);bGo=r(pIt,"YolosModel"),pIt.forEach(t),vGo=r(BGe," (YOLOS model)"),BGe.forEach(t),FGo=i(x),j2=n(x,"LI",{});var IGe=s(j2);ebe=n(IGe,"STRONG",{});var _It=s(ebe);TGo=r(_It,"yoso"),_It.forEach(t),MGo=r(IGe," \u2014 "),fQ=n(IGe,"A",{href:!0});var bIt=s(fQ);EGo=r(bIt,"YosoModel"),bIt.forEach(t),CGo=r(IGe," (YOSO model)"),IGe.forEach(t),x.forEach(t),wGo=i(Ea),D2=n(Ea,"P",{});var NGe=s(D2);AGo=r(NGe,"The model is set in evaluation mode by default using "),obe=n(NGe,"CODE",{});var vIt=s(obe);LGo=r(vIt,"model.eval()"),vIt.forEach(t),yGo=r(NGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rbe=n(NGe,"CODE",{});var FIt=s(rbe);xGo=r(FIt,"model.train()"),FIt.forEach(t),NGe.forEach(t),$Go=i(Ea),T(G2.$$.fragment,Ea),Ea.forEach(t),Sl.forEach(t),cro=i(m),Ld=n(m,"H2",{class:!0});var Aao=s(Ld);O2=n(Aao,"A",{id:!0,class:!0,href:!0});var TIt=s(O2);tbe=n(TIt,"SPAN",{});var MIt=s(tbe);T(g$.$$.fragment,MIt),MIt.forEach(t),TIt.forEach(t),kGo=i(Aao),abe=n(Aao,"SPAN",{});var EIt=s(abe);SGo=r(EIt,"AutoModelForPreTraining"),EIt.forEach(t),Aao.forEach(t),mro=i(m),Io=n(m,"DIV",{class:!0});var Rl=s(Io);T(h$.$$.fragment,Rl),RGo=i(Rl),yd=n(Rl,"P",{});var mde=s(yd);PGo=r(mde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gQ=n(mde,"A",{href:!0});var CIt=s(gQ);BGo=r(CIt,"from_pretrained()"),CIt.forEach(t),IGo=r(mde," class method or the "),hQ=n(mde,"A",{href:!0});var wIt=s(hQ);NGo=r(wIt,"from_config()"),wIt.forEach(t),qGo=r(mde,` class
method.`),mde.forEach(t),jGo=i(Rl),u$=n(Rl,"P",{});var Lao=s(u$);DGo=r(Lao,"This class cannot be instantiated directly using "),nbe=n(Lao,"CODE",{});var AIt=s(nbe);GGo=r(AIt,"__init__()"),AIt.forEach(t),OGo=r(Lao," (throws an error)."),Lao.forEach(t),VGo=i(Rl),Ft=n(Rl,"DIV",{class:!0});var $y=s(Ft);T(p$.$$.fragment,$y),XGo=i($y),sbe=n($y,"P",{});var LIt=s(sbe);zGo=r(LIt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),LIt.forEach(t),QGo=i($y),xd=n($y,"P",{});var fde=s(xd);WGo=r(fde,`Note:
Loading a model from its configuration file does `),lbe=n(fde,"STRONG",{});var yIt=s(lbe);UGo=r(yIt,"not"),yIt.forEach(t),HGo=r(fde,` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=n(fde,"A",{href:!0});var xIt=s(uQ);JGo=r(xIt,"from_pretrained()"),xIt.forEach(t),YGo=r(fde," to load the model weights."),fde.forEach(t),ZGo=i($y),T(V2.$$.fragment,$y),$y.forEach(t),KGo=i(Rl),eo=n(Rl,"DIV",{class:!0});var Ca=s(eo);T(_$.$$.fragment,Ca),eOo=i(Ca),ibe=n(Ca,"P",{});var $It=s(ibe);oOo=r($It,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$It.forEach(t),rOo=i(Ca),on=n(Ca,"P",{});var ky=s(on);tOo=r(ky,"The model class to instantiate is selected based on the "),dbe=n(ky,"CODE",{});var kIt=s(dbe);aOo=r(kIt,"model_type"),kIt.forEach(t),nOo=r(ky,` property of the config object (either
passed as an argument or loaded from `),cbe=n(ky,"CODE",{});var SIt=s(cbe);sOo=r(SIt,"pretrained_model_name_or_path"),SIt.forEach(t),lOo=r(ky,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mbe=n(ky,"CODE",{});var RIt=s(mbe);iOo=r(RIt,"pretrained_model_name_or_path"),RIt.forEach(t),dOo=r(ky,":"),ky.forEach(t),cOo=i(Ca),G=n(Ca,"UL",{});var V=s(G);X2=n(V,"LI",{});var qGe=s(X2);fbe=n(qGe,"STRONG",{});var PIt=s(fbe);mOo=r(PIt,"albert"),PIt.forEach(t),fOo=r(qGe," \u2014 "),pQ=n(qGe,"A",{href:!0});var BIt=s(pQ);gOo=r(BIt,"AlbertForPreTraining"),BIt.forEach(t),hOo=r(qGe," (ALBERT model)"),qGe.forEach(t),uOo=i(V),z2=n(V,"LI",{});var jGe=s(z2);gbe=n(jGe,"STRONG",{});var IIt=s(gbe);pOo=r(IIt,"bart"),IIt.forEach(t),_Oo=r(jGe," \u2014 "),_Q=n(jGe,"A",{href:!0});var NIt=s(_Q);bOo=r(NIt,"BartForConditionalGeneration"),NIt.forEach(t),vOo=r(jGe," (BART model)"),jGe.forEach(t),FOo=i(V),Q2=n(V,"LI",{});var DGe=s(Q2);hbe=n(DGe,"STRONG",{});var qIt=s(hbe);TOo=r(qIt,"bert"),qIt.forEach(t),MOo=r(DGe," \u2014 "),bQ=n(DGe,"A",{href:!0});var jIt=s(bQ);EOo=r(jIt,"BertForPreTraining"),jIt.forEach(t),COo=r(DGe," (BERT model)"),DGe.forEach(t),wOo=i(V),W2=n(V,"LI",{});var GGe=s(W2);ube=n(GGe,"STRONG",{});var DIt=s(ube);AOo=r(DIt,"big_bird"),DIt.forEach(t),LOo=r(GGe," \u2014 "),vQ=n(GGe,"A",{href:!0});var GIt=s(vQ);yOo=r(GIt,"BigBirdForPreTraining"),GIt.forEach(t),xOo=r(GGe," (BigBird model)"),GGe.forEach(t),$Oo=i(V),U2=n(V,"LI",{});var OGe=s(U2);pbe=n(OGe,"STRONG",{});var OIt=s(pbe);kOo=r(OIt,"bloom"),OIt.forEach(t),SOo=r(OGe," \u2014 "),FQ=n(OGe,"A",{href:!0});var VIt=s(FQ);ROo=r(VIt,"BloomForCausalLM"),VIt.forEach(t),POo=r(OGe," (BLOOM model)"),OGe.forEach(t),BOo=i(V),H2=n(V,"LI",{});var VGe=s(H2);_be=n(VGe,"STRONG",{});var XIt=s(_be);IOo=r(XIt,"camembert"),XIt.forEach(t),NOo=r(VGe," \u2014 "),TQ=n(VGe,"A",{href:!0});var zIt=s(TQ);qOo=r(zIt,"CamembertForMaskedLM"),zIt.forEach(t),jOo=r(VGe," (CamemBERT model)"),VGe.forEach(t),DOo=i(V),J2=n(V,"LI",{});var XGe=s(J2);bbe=n(XGe,"STRONG",{});var QIt=s(bbe);GOo=r(QIt,"ctrl"),QIt.forEach(t),OOo=r(XGe," \u2014 "),MQ=n(XGe,"A",{href:!0});var WIt=s(MQ);VOo=r(WIt,"CTRLLMHeadModel"),WIt.forEach(t),XOo=r(XGe," (CTRL model)"),XGe.forEach(t),zOo=i(V),Y2=n(V,"LI",{});var zGe=s(Y2);vbe=n(zGe,"STRONG",{});var UIt=s(vbe);QOo=r(UIt,"data2vec-text"),UIt.forEach(t),WOo=r(zGe," \u2014 "),EQ=n(zGe,"A",{href:!0});var HIt=s(EQ);UOo=r(HIt,"Data2VecTextForMaskedLM"),HIt.forEach(t),HOo=r(zGe," (Data2VecText model)"),zGe.forEach(t),JOo=i(V),Z2=n(V,"LI",{});var QGe=s(Z2);Fbe=n(QGe,"STRONG",{});var JIt=s(Fbe);YOo=r(JIt,"deberta"),JIt.forEach(t),ZOo=r(QGe," \u2014 "),CQ=n(QGe,"A",{href:!0});var YIt=s(CQ);KOo=r(YIt,"DebertaForMaskedLM"),YIt.forEach(t),eVo=r(QGe," (DeBERTa model)"),QGe.forEach(t),oVo=i(V),K2=n(V,"LI",{});var WGe=s(K2);Tbe=n(WGe,"STRONG",{});var ZIt=s(Tbe);rVo=r(ZIt,"deberta-v2"),ZIt.forEach(t),tVo=r(WGe," \u2014 "),wQ=n(WGe,"A",{href:!0});var KIt=s(wQ);aVo=r(KIt,"DebertaV2ForMaskedLM"),KIt.forEach(t),nVo=r(WGe," (DeBERTa-v2 model)"),WGe.forEach(t),sVo=i(V),eb=n(V,"LI",{});var UGe=s(eb);Mbe=n(UGe,"STRONG",{});var eNt=s(Mbe);lVo=r(eNt,"distilbert"),eNt.forEach(t),iVo=r(UGe," \u2014 "),AQ=n(UGe,"A",{href:!0});var oNt=s(AQ);dVo=r(oNt,"DistilBertForMaskedLM"),oNt.forEach(t),cVo=r(UGe," (DistilBERT model)"),UGe.forEach(t),mVo=i(V),ob=n(V,"LI",{});var HGe=s(ob);Ebe=n(HGe,"STRONG",{});var rNt=s(Ebe);fVo=r(rNt,"electra"),rNt.forEach(t),gVo=r(HGe," \u2014 "),LQ=n(HGe,"A",{href:!0});var tNt=s(LQ);hVo=r(tNt,"ElectraForPreTraining"),tNt.forEach(t),uVo=r(HGe," (ELECTRA model)"),HGe.forEach(t),pVo=i(V),rb=n(V,"LI",{});var JGe=s(rb);Cbe=n(JGe,"STRONG",{});var aNt=s(Cbe);_Vo=r(aNt,"ernie"),aNt.forEach(t),bVo=r(JGe," \u2014 "),yQ=n(JGe,"A",{href:!0});var nNt=s(yQ);vVo=r(nNt,"ErnieForPreTraining"),nNt.forEach(t),FVo=r(JGe," (ERNIE model)"),JGe.forEach(t),TVo=i(V),tb=n(V,"LI",{});var YGe=s(tb);wbe=n(YGe,"STRONG",{});var sNt=s(wbe);MVo=r(sNt,"flaubert"),sNt.forEach(t),EVo=r(YGe," \u2014 "),xQ=n(YGe,"A",{href:!0});var lNt=s(xQ);CVo=r(lNt,"FlaubertWithLMHeadModel"),lNt.forEach(t),wVo=r(YGe," (FlauBERT model)"),YGe.forEach(t),AVo=i(V),ab=n(V,"LI",{});var ZGe=s(ab);Abe=n(ZGe,"STRONG",{});var iNt=s(Abe);LVo=r(iNt,"flava"),iNt.forEach(t),yVo=r(ZGe," \u2014 "),$Q=n(ZGe,"A",{href:!0});var dNt=s($Q);xVo=r(dNt,"FlavaForPreTraining"),dNt.forEach(t),$Vo=r(ZGe," (FLAVA model)"),ZGe.forEach(t),kVo=i(V),nb=n(V,"LI",{});var KGe=s(nb);Lbe=n(KGe,"STRONG",{});var cNt=s(Lbe);SVo=r(cNt,"fnet"),cNt.forEach(t),RVo=r(KGe," \u2014 "),kQ=n(KGe,"A",{href:!0});var mNt=s(kQ);PVo=r(mNt,"FNetForPreTraining"),mNt.forEach(t),BVo=r(KGe," (FNet model)"),KGe.forEach(t),IVo=i(V),sb=n(V,"LI",{});var eOe=s(sb);ybe=n(eOe,"STRONG",{});var fNt=s(ybe);NVo=r(fNt,"fsmt"),fNt.forEach(t),qVo=r(eOe," \u2014 "),SQ=n(eOe,"A",{href:!0});var gNt=s(SQ);jVo=r(gNt,"FSMTForConditionalGeneration"),gNt.forEach(t),DVo=r(eOe," (FairSeq Machine-Translation model)"),eOe.forEach(t),GVo=i(V),lb=n(V,"LI",{});var oOe=s(lb);xbe=n(oOe,"STRONG",{});var hNt=s(xbe);OVo=r(hNt,"funnel"),hNt.forEach(t),VVo=r(oOe," \u2014 "),RQ=n(oOe,"A",{href:!0});var uNt=s(RQ);XVo=r(uNt,"FunnelForPreTraining"),uNt.forEach(t),zVo=r(oOe," (Funnel Transformer model)"),oOe.forEach(t),QVo=i(V),ib=n(V,"LI",{});var rOe=s(ib);$be=n(rOe,"STRONG",{});var pNt=s($be);WVo=r(pNt,"gpt2"),pNt.forEach(t),UVo=r(rOe," \u2014 "),PQ=n(rOe,"A",{href:!0});var _Nt=s(PQ);HVo=r(_Nt,"GPT2LMHeadModel"),_Nt.forEach(t),JVo=r(rOe," (OpenAI GPT-2 model)"),rOe.forEach(t),YVo=i(V),db=n(V,"LI",{});var tOe=s(db);kbe=n(tOe,"STRONG",{});var bNt=s(kbe);ZVo=r(bNt,"ibert"),bNt.forEach(t),KVo=r(tOe," \u2014 "),BQ=n(tOe,"A",{href:!0});var vNt=s(BQ);eXo=r(vNt,"IBertForMaskedLM"),vNt.forEach(t),oXo=r(tOe," (I-BERT model)"),tOe.forEach(t),rXo=i(V),cb=n(V,"LI",{});var aOe=s(cb);Sbe=n(aOe,"STRONG",{});var FNt=s(Sbe);tXo=r(FNt,"layoutlm"),FNt.forEach(t),aXo=r(aOe," \u2014 "),IQ=n(aOe,"A",{href:!0});var TNt=s(IQ);nXo=r(TNt,"LayoutLMForMaskedLM"),TNt.forEach(t),sXo=r(aOe," (LayoutLM model)"),aOe.forEach(t),lXo=i(V),mb=n(V,"LI",{});var nOe=s(mb);Rbe=n(nOe,"STRONG",{});var MNt=s(Rbe);iXo=r(MNt,"longformer"),MNt.forEach(t),dXo=r(nOe," \u2014 "),NQ=n(nOe,"A",{href:!0});var ENt=s(NQ);cXo=r(ENt,"LongformerForMaskedLM"),ENt.forEach(t),mXo=r(nOe," (Longformer model)"),nOe.forEach(t),fXo=i(V),fb=n(V,"LI",{});var sOe=s(fb);Pbe=n(sOe,"STRONG",{});var CNt=s(Pbe);gXo=r(CNt,"luke"),CNt.forEach(t),hXo=r(sOe," \u2014 "),qQ=n(sOe,"A",{href:!0});var wNt=s(qQ);uXo=r(wNt,"LukeForMaskedLM"),wNt.forEach(t),pXo=r(sOe," (LUKE model)"),sOe.forEach(t),_Xo=i(V),gb=n(V,"LI",{});var lOe=s(gb);Bbe=n(lOe,"STRONG",{});var ANt=s(Bbe);bXo=r(ANt,"lxmert"),ANt.forEach(t),vXo=r(lOe," \u2014 "),jQ=n(lOe,"A",{href:!0});var LNt=s(jQ);FXo=r(LNt,"LxmertForPreTraining"),LNt.forEach(t),TXo=r(lOe," (LXMERT model)"),lOe.forEach(t),MXo=i(V),hb=n(V,"LI",{});var iOe=s(hb);Ibe=n(iOe,"STRONG",{});var yNt=s(Ibe);EXo=r(yNt,"megatron-bert"),yNt.forEach(t),CXo=r(iOe," \u2014 "),DQ=n(iOe,"A",{href:!0});var xNt=s(DQ);wXo=r(xNt,"MegatronBertForPreTraining"),xNt.forEach(t),AXo=r(iOe," (Megatron-BERT model)"),iOe.forEach(t),LXo=i(V),ub=n(V,"LI",{});var dOe=s(ub);Nbe=n(dOe,"STRONG",{});var $Nt=s(Nbe);yXo=r($Nt,"mobilebert"),$Nt.forEach(t),xXo=r(dOe," \u2014 "),GQ=n(dOe,"A",{href:!0});var kNt=s(GQ);$Xo=r(kNt,"MobileBertForPreTraining"),kNt.forEach(t),kXo=r(dOe," (MobileBERT model)"),dOe.forEach(t),SXo=i(V),pb=n(V,"LI",{});var cOe=s(pb);qbe=n(cOe,"STRONG",{});var SNt=s(qbe);RXo=r(SNt,"mpnet"),SNt.forEach(t),PXo=r(cOe," \u2014 "),OQ=n(cOe,"A",{href:!0});var RNt=s(OQ);BXo=r(RNt,"MPNetForMaskedLM"),RNt.forEach(t),IXo=r(cOe," (MPNet model)"),cOe.forEach(t),NXo=i(V),_b=n(V,"LI",{});var mOe=s(_b);jbe=n(mOe,"STRONG",{});var PNt=s(jbe);qXo=r(PNt,"mvp"),PNt.forEach(t),jXo=r(mOe," \u2014 "),VQ=n(mOe,"A",{href:!0});var BNt=s(VQ);DXo=r(BNt,"MvpForConditionalGeneration"),BNt.forEach(t),GXo=r(mOe," (MVP model)"),mOe.forEach(t),OXo=i(V),bb=n(V,"LI",{});var fOe=s(bb);Dbe=n(fOe,"STRONG",{});var INt=s(Dbe);VXo=r(INt,"nezha"),INt.forEach(t),XXo=r(fOe," \u2014 "),XQ=n(fOe,"A",{href:!0});var NNt=s(XQ);zXo=r(NNt,"NezhaForPreTraining"),NNt.forEach(t),QXo=r(fOe," (Nezha model)"),fOe.forEach(t),WXo=i(V),vb=n(V,"LI",{});var gOe=s(vb);Gbe=n(gOe,"STRONG",{});var qNt=s(Gbe);UXo=r(qNt,"openai-gpt"),qNt.forEach(t),HXo=r(gOe," \u2014 "),zQ=n(gOe,"A",{href:!0});var jNt=s(zQ);JXo=r(jNt,"OpenAIGPTLMHeadModel"),jNt.forEach(t),YXo=r(gOe," (OpenAI GPT model)"),gOe.forEach(t),ZXo=i(V),Fb=n(V,"LI",{});var hOe=s(Fb);Obe=n(hOe,"STRONG",{});var DNt=s(Obe);KXo=r(DNt,"retribert"),DNt.forEach(t),ezo=r(hOe," \u2014 "),QQ=n(hOe,"A",{href:!0});var GNt=s(QQ);ozo=r(GNt,"RetriBertModel"),GNt.forEach(t),rzo=r(hOe," (RetriBERT model)"),hOe.forEach(t),tzo=i(V),Tb=n(V,"LI",{});var uOe=s(Tb);Vbe=n(uOe,"STRONG",{});var ONt=s(Vbe);azo=r(ONt,"roberta"),ONt.forEach(t),nzo=r(uOe," \u2014 "),WQ=n(uOe,"A",{href:!0});var VNt=s(WQ);szo=r(VNt,"RobertaForMaskedLM"),VNt.forEach(t),lzo=r(uOe," (RoBERTa model)"),uOe.forEach(t),izo=i(V),Mb=n(V,"LI",{});var pOe=s(Mb);Xbe=n(pOe,"STRONG",{});var XNt=s(Xbe);dzo=r(XNt,"splinter"),XNt.forEach(t),czo=r(pOe," \u2014 "),UQ=n(pOe,"A",{href:!0});var zNt=s(UQ);mzo=r(zNt,"SplinterForPreTraining"),zNt.forEach(t),fzo=r(pOe," (Splinter model)"),pOe.forEach(t),gzo=i(V),Eb=n(V,"LI",{});var _Oe=s(Eb);zbe=n(_Oe,"STRONG",{});var QNt=s(zbe);hzo=r(QNt,"squeezebert"),QNt.forEach(t),uzo=r(_Oe," \u2014 "),HQ=n(_Oe,"A",{href:!0});var WNt=s(HQ);pzo=r(WNt,"SqueezeBertForMaskedLM"),WNt.forEach(t),_zo=r(_Oe," (SqueezeBERT model)"),_Oe.forEach(t),bzo=i(V),Cb=n(V,"LI",{});var bOe=s(Cb);Qbe=n(bOe,"STRONG",{});var UNt=s(Qbe);vzo=r(UNt,"t5"),UNt.forEach(t),Fzo=r(bOe," \u2014 "),JQ=n(bOe,"A",{href:!0});var HNt=s(JQ);Tzo=r(HNt,"T5ForConditionalGeneration"),HNt.forEach(t),Mzo=r(bOe," (T5 model)"),bOe.forEach(t),Ezo=i(V),wb=n(V,"LI",{});var vOe=s(wb);Wbe=n(vOe,"STRONG",{});var JNt=s(Wbe);Czo=r(JNt,"tapas"),JNt.forEach(t),wzo=r(vOe," \u2014 "),YQ=n(vOe,"A",{href:!0});var YNt=s(YQ);Azo=r(YNt,"TapasForMaskedLM"),YNt.forEach(t),Lzo=r(vOe," (TAPAS model)"),vOe.forEach(t),yzo=i(V),Ab=n(V,"LI",{});var FOe=s(Ab);Ube=n(FOe,"STRONG",{});var ZNt=s(Ube);xzo=r(ZNt,"transfo-xl"),ZNt.forEach(t),$zo=r(FOe," \u2014 "),ZQ=n(FOe,"A",{href:!0});var KNt=s(ZQ);kzo=r(KNt,"TransfoXLLMHeadModel"),KNt.forEach(t),Szo=r(FOe," (Transformer-XL model)"),FOe.forEach(t),Rzo=i(V),Lb=n(V,"LI",{});var TOe=s(Lb);Hbe=n(TOe,"STRONG",{});var eqt=s(Hbe);Pzo=r(eqt,"unispeech"),eqt.forEach(t),Bzo=r(TOe," \u2014 "),KQ=n(TOe,"A",{href:!0});var oqt=s(KQ);Izo=r(oqt,"UniSpeechForPreTraining"),oqt.forEach(t),Nzo=r(TOe," (UniSpeech model)"),TOe.forEach(t),qzo=i(V),yb=n(V,"LI",{});var MOe=s(yb);Jbe=n(MOe,"STRONG",{});var rqt=s(Jbe);jzo=r(rqt,"unispeech-sat"),rqt.forEach(t),Dzo=r(MOe," \u2014 "),eW=n(MOe,"A",{href:!0});var tqt=s(eW);Gzo=r(tqt,"UniSpeechSatForPreTraining"),tqt.forEach(t),Ozo=r(MOe," (UniSpeechSat model)"),MOe.forEach(t),Vzo=i(V),xb=n(V,"LI",{});var EOe=s(xb);Ybe=n(EOe,"STRONG",{});var aqt=s(Ybe);Xzo=r(aqt,"videomae"),aqt.forEach(t),zzo=r(EOe," \u2014 "),oW=n(EOe,"A",{href:!0});var nqt=s(oW);Qzo=r(nqt,"VideoMAEForPreTraining"),nqt.forEach(t),Wzo=r(EOe," (VideoMAE model)"),EOe.forEach(t),Uzo=i(V),$b=n(V,"LI",{});var COe=s($b);Zbe=n(COe,"STRONG",{});var sqt=s(Zbe);Hzo=r(sqt,"visual_bert"),sqt.forEach(t),Jzo=r(COe," \u2014 "),rW=n(COe,"A",{href:!0});var lqt=s(rW);Yzo=r(lqt,"VisualBertForPreTraining"),lqt.forEach(t),Zzo=r(COe," (VisualBERT model)"),COe.forEach(t),Kzo=i(V),kb=n(V,"LI",{});var wOe=s(kb);Kbe=n(wOe,"STRONG",{});var iqt=s(Kbe);eQo=r(iqt,"vit_mae"),iqt.forEach(t),oQo=r(wOe," \u2014 "),tW=n(wOe,"A",{href:!0});var dqt=s(tW);rQo=r(dqt,"ViTMAEForPreTraining"),dqt.forEach(t),tQo=r(wOe," (ViTMAE model)"),wOe.forEach(t),aQo=i(V),Sb=n(V,"LI",{});var AOe=s(Sb);eve=n(AOe,"STRONG",{});var cqt=s(eve);nQo=r(cqt,"wav2vec2"),cqt.forEach(t),sQo=r(AOe," \u2014 "),aW=n(AOe,"A",{href:!0});var mqt=s(aW);lQo=r(mqt,"Wav2Vec2ForPreTraining"),mqt.forEach(t),iQo=r(AOe," (Wav2Vec2 model)"),AOe.forEach(t),dQo=i(V),Rb=n(V,"LI",{});var LOe=s(Rb);ove=n(LOe,"STRONG",{});var fqt=s(ove);cQo=r(fqt,"wav2vec2-conformer"),fqt.forEach(t),mQo=r(LOe," \u2014 "),nW=n(LOe,"A",{href:!0});var gqt=s(nW);fQo=r(gqt,"Wav2Vec2ConformerForPreTraining"),gqt.forEach(t),gQo=r(LOe," (Wav2Vec2-Conformer model)"),LOe.forEach(t),hQo=i(V),Pb=n(V,"LI",{});var yOe=s(Pb);rve=n(yOe,"STRONG",{});var hqt=s(rve);uQo=r(hqt,"xlm"),hqt.forEach(t),pQo=r(yOe," \u2014 "),sW=n(yOe,"A",{href:!0});var uqt=s(sW);_Qo=r(uqt,"XLMWithLMHeadModel"),uqt.forEach(t),bQo=r(yOe," (XLM model)"),yOe.forEach(t),vQo=i(V),Bb=n(V,"LI",{});var xOe=s(Bb);tve=n(xOe,"STRONG",{});var pqt=s(tve);FQo=r(pqt,"xlm-roberta"),pqt.forEach(t),TQo=r(xOe," \u2014 "),lW=n(xOe,"A",{href:!0});var _qt=s(lW);MQo=r(_qt,"XLMRobertaForMaskedLM"),_qt.forEach(t),EQo=r(xOe," (XLM-RoBERTa model)"),xOe.forEach(t),CQo=i(V),Ib=n(V,"LI",{});var $Oe=s(Ib);ave=n($Oe,"STRONG",{});var bqt=s(ave);wQo=r(bqt,"xlm-roberta-xl"),bqt.forEach(t),AQo=r($Oe," \u2014 "),iW=n($Oe,"A",{href:!0});var vqt=s(iW);LQo=r(vqt,"XLMRobertaXLForMaskedLM"),vqt.forEach(t),yQo=r($Oe," (XLM-RoBERTa-XL model)"),$Oe.forEach(t),xQo=i(V),Nb=n(V,"LI",{});var kOe=s(Nb);nve=n(kOe,"STRONG",{});var Fqt=s(nve);$Qo=r(Fqt,"xlnet"),Fqt.forEach(t),kQo=r(kOe," \u2014 "),dW=n(kOe,"A",{href:!0});var Tqt=s(dW);SQo=r(Tqt,"XLNetLMHeadModel"),Tqt.forEach(t),RQo=r(kOe," (XLNet model)"),kOe.forEach(t),V.forEach(t),PQo=i(Ca),qb=n(Ca,"P",{});var SOe=s(qb);BQo=r(SOe,"The model is set in evaluation mode by default using "),sve=n(SOe,"CODE",{});var Mqt=s(sve);IQo=r(Mqt,"model.eval()"),Mqt.forEach(t),NQo=r(SOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lve=n(SOe,"CODE",{});var Eqt=s(lve);qQo=r(Eqt,"model.train()"),Eqt.forEach(t),SOe.forEach(t),jQo=i(Ca),T(jb.$$.fragment,Ca),Ca.forEach(t),Rl.forEach(t),fro=i(m),$d=n(m,"H2",{class:!0});var yao=s($d);Db=n(yao,"A",{id:!0,class:!0,href:!0});var Cqt=s(Db);ive=n(Cqt,"SPAN",{});var wqt=s(ive);T(b$.$$.fragment,wqt),wqt.forEach(t),Cqt.forEach(t),DQo=i(yao),dve=n(yao,"SPAN",{});var Aqt=s(dve);GQo=r(Aqt,"AutoModelForCausalLM"),Aqt.forEach(t),yao.forEach(t),gro=i(m),No=n(m,"DIV",{class:!0});var Pl=s(No);T(v$.$$.fragment,Pl),OQo=i(Pl),kd=n(Pl,"P",{});var gde=s(kd);VQo=r(gde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),cW=n(gde,"A",{href:!0});var Lqt=s(cW);XQo=r(Lqt,"from_pretrained()"),Lqt.forEach(t),zQo=r(gde," class method or the "),mW=n(gde,"A",{href:!0});var yqt=s(mW);QQo=r(yqt,"from_config()"),yqt.forEach(t),WQo=r(gde,` class
method.`),gde.forEach(t),UQo=i(Pl),F$=n(Pl,"P",{});var xao=s(F$);HQo=r(xao,"This class cannot be instantiated directly using "),cve=n(xao,"CODE",{});var xqt=s(cve);JQo=r(xqt,"__init__()"),xqt.forEach(t),YQo=r(xao," (throws an error)."),xao.forEach(t),ZQo=i(Pl),Tt=n(Pl,"DIV",{class:!0});var Sy=s(Tt);T(T$.$$.fragment,Sy),KQo=i(Sy),mve=n(Sy,"P",{});var $qt=s(mve);eWo=r($qt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$qt.forEach(t),oWo=i(Sy),Sd=n(Sy,"P",{});var hde=s(Sd);rWo=r(hde,`Note:
Loading a model from its configuration file does `),fve=n(hde,"STRONG",{});var kqt=s(fve);tWo=r(kqt,"not"),kqt.forEach(t),aWo=r(hde,` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=n(hde,"A",{href:!0});var Sqt=s(fW);nWo=r(Sqt,"from_pretrained()"),Sqt.forEach(t),sWo=r(hde," to load the model weights."),hde.forEach(t),lWo=i(Sy),T(Gb.$$.fragment,Sy),Sy.forEach(t),iWo=i(Pl),oo=n(Pl,"DIV",{class:!0});var wa=s(oo);T(M$.$$.fragment,wa),dWo=i(wa),gve=n(wa,"P",{});var Rqt=s(gve);cWo=r(Rqt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Rqt.forEach(t),mWo=i(wa),rn=n(wa,"P",{});var Ry=s(rn);fWo=r(Ry,"The model class to instantiate is selected based on the "),hve=n(Ry,"CODE",{});var Pqt=s(hve);gWo=r(Pqt,"model_type"),Pqt.forEach(t),hWo=r(Ry,` property of the config object (either
passed as an argument or loaded from `),uve=n(Ry,"CODE",{});var Bqt=s(uve);uWo=r(Bqt,"pretrained_model_name_or_path"),Bqt.forEach(t),pWo=r(Ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pve=n(Ry,"CODE",{});var Iqt=s(pve);_Wo=r(Iqt,"pretrained_model_name_or_path"),Iqt.forEach(t),bWo=r(Ry,":"),Ry.forEach(t),vWo=i(wa),Q=n(wa,"UL",{});var H=s(Q);Ob=n(H,"LI",{});var ROe=s(Ob);_ve=n(ROe,"STRONG",{});var Nqt=s(_ve);FWo=r(Nqt,"bart"),Nqt.forEach(t),TWo=r(ROe," \u2014 "),gW=n(ROe,"A",{href:!0});var qqt=s(gW);MWo=r(qqt,"BartForCausalLM"),qqt.forEach(t),EWo=r(ROe," (BART model)"),ROe.forEach(t),CWo=i(H),Vb=n(H,"LI",{});var POe=s(Vb);bve=n(POe,"STRONG",{});var jqt=s(bve);wWo=r(jqt,"bert"),jqt.forEach(t),AWo=r(POe," \u2014 "),hW=n(POe,"A",{href:!0});var Dqt=s(hW);LWo=r(Dqt,"BertLMHeadModel"),Dqt.forEach(t),yWo=r(POe," (BERT model)"),POe.forEach(t),xWo=i(H),Xb=n(H,"LI",{});var BOe=s(Xb);vve=n(BOe,"STRONG",{});var Gqt=s(vve);$Wo=r(Gqt,"bert-generation"),Gqt.forEach(t),kWo=r(BOe," \u2014 "),uW=n(BOe,"A",{href:!0});var Oqt=s(uW);SWo=r(Oqt,"BertGenerationDecoder"),Oqt.forEach(t),RWo=r(BOe," (Bert Generation model)"),BOe.forEach(t),PWo=i(H),zb=n(H,"LI",{});var IOe=s(zb);Fve=n(IOe,"STRONG",{});var Vqt=s(Fve);BWo=r(Vqt,"big_bird"),Vqt.forEach(t),IWo=r(IOe," \u2014 "),pW=n(IOe,"A",{href:!0});var Xqt=s(pW);NWo=r(Xqt,"BigBirdForCausalLM"),Xqt.forEach(t),qWo=r(IOe," (BigBird model)"),IOe.forEach(t),jWo=i(H),Qb=n(H,"LI",{});var NOe=s(Qb);Tve=n(NOe,"STRONG",{});var zqt=s(Tve);DWo=r(zqt,"bigbird_pegasus"),zqt.forEach(t),GWo=r(NOe," \u2014 "),_W=n(NOe,"A",{href:!0});var Qqt=s(_W);OWo=r(Qqt,"BigBirdPegasusForCausalLM"),Qqt.forEach(t),VWo=r(NOe," (BigBird-Pegasus model)"),NOe.forEach(t),XWo=i(H),Wb=n(H,"LI",{});var qOe=s(Wb);Mve=n(qOe,"STRONG",{});var Wqt=s(Mve);zWo=r(Wqt,"blenderbot"),Wqt.forEach(t),QWo=r(qOe," \u2014 "),bW=n(qOe,"A",{href:!0});var Uqt=s(bW);WWo=r(Uqt,"BlenderbotForCausalLM"),Uqt.forEach(t),UWo=r(qOe," (Blenderbot model)"),qOe.forEach(t),HWo=i(H),Ub=n(H,"LI",{});var jOe=s(Ub);Eve=n(jOe,"STRONG",{});var Hqt=s(Eve);JWo=r(Hqt,"blenderbot-small"),Hqt.forEach(t),YWo=r(jOe," \u2014 "),vW=n(jOe,"A",{href:!0});var Jqt=s(vW);ZWo=r(Jqt,"BlenderbotSmallForCausalLM"),Jqt.forEach(t),KWo=r(jOe," (BlenderbotSmall model)"),jOe.forEach(t),eUo=i(H),Hb=n(H,"LI",{});var DOe=s(Hb);Cve=n(DOe,"STRONG",{});var Yqt=s(Cve);oUo=r(Yqt,"bloom"),Yqt.forEach(t),rUo=r(DOe," \u2014 "),FW=n(DOe,"A",{href:!0});var Zqt=s(FW);tUo=r(Zqt,"BloomForCausalLM"),Zqt.forEach(t),aUo=r(DOe," (BLOOM model)"),DOe.forEach(t),nUo=i(H),Jb=n(H,"LI",{});var GOe=s(Jb);wve=n(GOe,"STRONG",{});var Kqt=s(wve);sUo=r(Kqt,"camembert"),Kqt.forEach(t),lUo=r(GOe," \u2014 "),TW=n(GOe,"A",{href:!0});var ejt=s(TW);iUo=r(ejt,"CamembertForCausalLM"),ejt.forEach(t),dUo=r(GOe," (CamemBERT model)"),GOe.forEach(t),cUo=i(H),Yb=n(H,"LI",{});var OOe=s(Yb);Ave=n(OOe,"STRONG",{});var ojt=s(Ave);mUo=r(ojt,"codegen"),ojt.forEach(t),fUo=r(OOe," \u2014 "),MW=n(OOe,"A",{href:!0});var rjt=s(MW);gUo=r(rjt,"CodeGenForCausalLM"),rjt.forEach(t),hUo=r(OOe," (CodeGen model)"),OOe.forEach(t),uUo=i(H),Zb=n(H,"LI",{});var VOe=s(Zb);Lve=n(VOe,"STRONG",{});var tjt=s(Lve);pUo=r(tjt,"ctrl"),tjt.forEach(t),_Uo=r(VOe," \u2014 "),EW=n(VOe,"A",{href:!0});var ajt=s(EW);bUo=r(ajt,"CTRLLMHeadModel"),ajt.forEach(t),vUo=r(VOe," (CTRL model)"),VOe.forEach(t),FUo=i(H),Kb=n(H,"LI",{});var XOe=s(Kb);yve=n(XOe,"STRONG",{});var njt=s(yve);TUo=r(njt,"data2vec-text"),njt.forEach(t),MUo=r(XOe," \u2014 "),CW=n(XOe,"A",{href:!0});var sjt=s(CW);EUo=r(sjt,"Data2VecTextForCausalLM"),sjt.forEach(t),CUo=r(XOe," (Data2VecText model)"),XOe.forEach(t),wUo=i(H),ev=n(H,"LI",{});var zOe=s(ev);xve=n(zOe,"STRONG",{});var ljt=s(xve);AUo=r(ljt,"electra"),ljt.forEach(t),LUo=r(zOe," \u2014 "),wW=n(zOe,"A",{href:!0});var ijt=s(wW);yUo=r(ijt,"ElectraForCausalLM"),ijt.forEach(t),xUo=r(zOe," (ELECTRA model)"),zOe.forEach(t),$Uo=i(H),ov=n(H,"LI",{});var QOe=s(ov);$ve=n(QOe,"STRONG",{});var djt=s($ve);kUo=r(djt,"ernie"),djt.forEach(t),SUo=r(QOe," \u2014 "),AW=n(QOe,"A",{href:!0});var cjt=s(AW);RUo=r(cjt,"ErnieForCausalLM"),cjt.forEach(t),PUo=r(QOe," (ERNIE model)"),QOe.forEach(t),BUo=i(H),rv=n(H,"LI",{});var WOe=s(rv);kve=n(WOe,"STRONG",{});var mjt=s(kve);IUo=r(mjt,"gpt2"),mjt.forEach(t),NUo=r(WOe," \u2014 "),LW=n(WOe,"A",{href:!0});var fjt=s(LW);qUo=r(fjt,"GPT2LMHeadModel"),fjt.forEach(t),jUo=r(WOe," (OpenAI GPT-2 model)"),WOe.forEach(t),DUo=i(H),tv=n(H,"LI",{});var UOe=s(tv);Sve=n(UOe,"STRONG",{});var gjt=s(Sve);GUo=r(gjt,"gpt_neo"),gjt.forEach(t),OUo=r(UOe," \u2014 "),yW=n(UOe,"A",{href:!0});var hjt=s(yW);VUo=r(hjt,"GPTNeoForCausalLM"),hjt.forEach(t),XUo=r(UOe," (GPT Neo model)"),UOe.forEach(t),zUo=i(H),av=n(H,"LI",{});var HOe=s(av);Rve=n(HOe,"STRONG",{});var ujt=s(Rve);QUo=r(ujt,"gpt_neox"),ujt.forEach(t),WUo=r(HOe," \u2014 "),xW=n(HOe,"A",{href:!0});var pjt=s(xW);UUo=r(pjt,"GPTNeoXForCausalLM"),pjt.forEach(t),HUo=r(HOe," (GPT NeoX model)"),HOe.forEach(t),JUo=i(H),nv=n(H,"LI",{});var JOe=s(nv);Pve=n(JOe,"STRONG",{});var _jt=s(Pve);YUo=r(_jt,"gpt_neox_japanese"),_jt.forEach(t),ZUo=r(JOe," \u2014 "),$W=n(JOe,"A",{href:!0});var bjt=s($W);KUo=r(bjt,"GPTNeoXJapaneseForCausalLM"),bjt.forEach(t),eHo=r(JOe," (GPT NeoX Japanese model)"),JOe.forEach(t),oHo=i(H),sv=n(H,"LI",{});var YOe=s(sv);Bve=n(YOe,"STRONG",{});var vjt=s(Bve);rHo=r(vjt,"gptj"),vjt.forEach(t),tHo=r(YOe," \u2014 "),kW=n(YOe,"A",{href:!0});var Fjt=s(kW);aHo=r(Fjt,"GPTJForCausalLM"),Fjt.forEach(t),nHo=r(YOe," (GPT-J model)"),YOe.forEach(t),sHo=i(H),lv=n(H,"LI",{});var ZOe=s(lv);Ive=n(ZOe,"STRONG",{});var Tjt=s(Ive);lHo=r(Tjt,"marian"),Tjt.forEach(t),iHo=r(ZOe," \u2014 "),SW=n(ZOe,"A",{href:!0});var Mjt=s(SW);dHo=r(Mjt,"MarianForCausalLM"),Mjt.forEach(t),cHo=r(ZOe," (Marian model)"),ZOe.forEach(t),mHo=i(H),iv=n(H,"LI",{});var KOe=s(iv);Nve=n(KOe,"STRONG",{});var Ejt=s(Nve);fHo=r(Ejt,"mbart"),Ejt.forEach(t),gHo=r(KOe," \u2014 "),RW=n(KOe,"A",{href:!0});var Cjt=s(RW);hHo=r(Cjt,"MBartForCausalLM"),Cjt.forEach(t),uHo=r(KOe," (mBART model)"),KOe.forEach(t),pHo=i(H),dv=n(H,"LI",{});var eVe=s(dv);qve=n(eVe,"STRONG",{});var wjt=s(qve);_Ho=r(wjt,"megatron-bert"),wjt.forEach(t),bHo=r(eVe," \u2014 "),PW=n(eVe,"A",{href:!0});var Ajt=s(PW);vHo=r(Ajt,"MegatronBertForCausalLM"),Ajt.forEach(t),FHo=r(eVe," (Megatron-BERT model)"),eVe.forEach(t),THo=i(H),cv=n(H,"LI",{});var oVe=s(cv);jve=n(oVe,"STRONG",{});var Ljt=s(jve);MHo=r(Ljt,"mvp"),Ljt.forEach(t),EHo=r(oVe," \u2014 "),BW=n(oVe,"A",{href:!0});var yjt=s(BW);CHo=r(yjt,"MvpForCausalLM"),yjt.forEach(t),wHo=r(oVe," (MVP model)"),oVe.forEach(t),AHo=i(H),mv=n(H,"LI",{});var rVe=s(mv);Dve=n(rVe,"STRONG",{});var xjt=s(Dve);LHo=r(xjt,"openai-gpt"),xjt.forEach(t),yHo=r(rVe," \u2014 "),IW=n(rVe,"A",{href:!0});var $jt=s(IW);xHo=r($jt,"OpenAIGPTLMHeadModel"),$jt.forEach(t),$Ho=r(rVe," (OpenAI GPT model)"),rVe.forEach(t),kHo=i(H),fv=n(H,"LI",{});var tVe=s(fv);Gve=n(tVe,"STRONG",{});var kjt=s(Gve);SHo=r(kjt,"opt"),kjt.forEach(t),RHo=r(tVe," \u2014 "),NW=n(tVe,"A",{href:!0});var Sjt=s(NW);PHo=r(Sjt,"OPTForCausalLM"),Sjt.forEach(t),BHo=r(tVe," (OPT model)"),tVe.forEach(t),IHo=i(H),gv=n(H,"LI",{});var aVe=s(gv);Ove=n(aVe,"STRONG",{});var Rjt=s(Ove);NHo=r(Rjt,"pegasus"),Rjt.forEach(t),qHo=r(aVe," \u2014 "),qW=n(aVe,"A",{href:!0});var Pjt=s(qW);jHo=r(Pjt,"PegasusForCausalLM"),Pjt.forEach(t),DHo=r(aVe," (Pegasus model)"),aVe.forEach(t),GHo=i(H),hv=n(H,"LI",{});var nVe=s(hv);Vve=n(nVe,"STRONG",{});var Bjt=s(Vve);OHo=r(Bjt,"plbart"),Bjt.forEach(t),VHo=r(nVe," \u2014 "),jW=n(nVe,"A",{href:!0});var Ijt=s(jW);XHo=r(Ijt,"PLBartForCausalLM"),Ijt.forEach(t),zHo=r(nVe," (PLBart model)"),nVe.forEach(t),QHo=i(H),uv=n(H,"LI",{});var sVe=s(uv);Xve=n(sVe,"STRONG",{});var Njt=s(Xve);WHo=r(Njt,"prophetnet"),Njt.forEach(t),UHo=r(sVe," \u2014 "),DW=n(sVe,"A",{href:!0});var qjt=s(DW);HHo=r(qjt,"ProphetNetForCausalLM"),qjt.forEach(t),JHo=r(sVe," (ProphetNet model)"),sVe.forEach(t),YHo=i(H),pv=n(H,"LI",{});var lVe=s(pv);zve=n(lVe,"STRONG",{});var jjt=s(zve);ZHo=r(jjt,"qdqbert"),jjt.forEach(t),KHo=r(lVe," \u2014 "),GW=n(lVe,"A",{href:!0});var Djt=s(GW);eJo=r(Djt,"QDQBertLMHeadModel"),Djt.forEach(t),oJo=r(lVe," (QDQBert model)"),lVe.forEach(t),rJo=i(H),_v=n(H,"LI",{});var iVe=s(_v);Qve=n(iVe,"STRONG",{});var Gjt=s(Qve);tJo=r(Gjt,"reformer"),Gjt.forEach(t),aJo=r(iVe," \u2014 "),OW=n(iVe,"A",{href:!0});var Ojt=s(OW);nJo=r(Ojt,"ReformerModelWithLMHead"),Ojt.forEach(t),sJo=r(iVe," (Reformer model)"),iVe.forEach(t),lJo=i(H),bv=n(H,"LI",{});var dVe=s(bv);Wve=n(dVe,"STRONG",{});var Vjt=s(Wve);iJo=r(Vjt,"rembert"),Vjt.forEach(t),dJo=r(dVe," \u2014 "),VW=n(dVe,"A",{href:!0});var Xjt=s(VW);cJo=r(Xjt,"RemBertForCausalLM"),Xjt.forEach(t),mJo=r(dVe," (RemBERT model)"),dVe.forEach(t),fJo=i(H),vv=n(H,"LI",{});var cVe=s(vv);Uve=n(cVe,"STRONG",{});var zjt=s(Uve);gJo=r(zjt,"roberta"),zjt.forEach(t),hJo=r(cVe," \u2014 "),XW=n(cVe,"A",{href:!0});var Qjt=s(XW);uJo=r(Qjt,"RobertaForCausalLM"),Qjt.forEach(t),pJo=r(cVe," (RoBERTa model)"),cVe.forEach(t),_Jo=i(H),Fv=n(H,"LI",{});var mVe=s(Fv);Hve=n(mVe,"STRONG",{});var Wjt=s(Hve);bJo=r(Wjt,"roformer"),Wjt.forEach(t),vJo=r(mVe," \u2014 "),zW=n(mVe,"A",{href:!0});var Ujt=s(zW);FJo=r(Ujt,"RoFormerForCausalLM"),Ujt.forEach(t),TJo=r(mVe," (RoFormer model)"),mVe.forEach(t),MJo=i(H),Tv=n(H,"LI",{});var fVe=s(Tv);Jve=n(fVe,"STRONG",{});var Hjt=s(Jve);EJo=r(Hjt,"speech_to_text_2"),Hjt.forEach(t),CJo=r(fVe," \u2014 "),QW=n(fVe,"A",{href:!0});var Jjt=s(QW);wJo=r(Jjt,"Speech2Text2ForCausalLM"),Jjt.forEach(t),AJo=r(fVe," (Speech2Text2 model)"),fVe.forEach(t),LJo=i(H),Mv=n(H,"LI",{});var gVe=s(Mv);Yve=n(gVe,"STRONG",{});var Yjt=s(Yve);yJo=r(Yjt,"transfo-xl"),Yjt.forEach(t),xJo=r(gVe," \u2014 "),WW=n(gVe,"A",{href:!0});var Zjt=s(WW);$Jo=r(Zjt,"TransfoXLLMHeadModel"),Zjt.forEach(t),kJo=r(gVe," (Transformer-XL model)"),gVe.forEach(t),SJo=i(H),Ev=n(H,"LI",{});var hVe=s(Ev);Zve=n(hVe,"STRONG",{});var Kjt=s(Zve);RJo=r(Kjt,"trocr"),Kjt.forEach(t),PJo=r(hVe," \u2014 "),UW=n(hVe,"A",{href:!0});var eDt=s(UW);BJo=r(eDt,"TrOCRForCausalLM"),eDt.forEach(t),IJo=r(hVe," (TrOCR model)"),hVe.forEach(t),NJo=i(H),Cv=n(H,"LI",{});var uVe=s(Cv);Kve=n(uVe,"STRONG",{});var oDt=s(Kve);qJo=r(oDt,"xglm"),oDt.forEach(t),jJo=r(uVe," \u2014 "),HW=n(uVe,"A",{href:!0});var rDt=s(HW);DJo=r(rDt,"XGLMForCausalLM"),rDt.forEach(t),GJo=r(uVe," (XGLM model)"),uVe.forEach(t),OJo=i(H),wv=n(H,"LI",{});var pVe=s(wv);eFe=n(pVe,"STRONG",{});var tDt=s(eFe);VJo=r(tDt,"xlm"),tDt.forEach(t),XJo=r(pVe," \u2014 "),JW=n(pVe,"A",{href:!0});var aDt=s(JW);zJo=r(aDt,"XLMWithLMHeadModel"),aDt.forEach(t),QJo=r(pVe," (XLM model)"),pVe.forEach(t),WJo=i(H),Av=n(H,"LI",{});var _Ve=s(Av);oFe=n(_Ve,"STRONG",{});var nDt=s(oFe);UJo=r(nDt,"xlm-prophetnet"),nDt.forEach(t),HJo=r(_Ve," \u2014 "),YW=n(_Ve,"A",{href:!0});var sDt=s(YW);JJo=r(sDt,"XLMProphetNetForCausalLM"),sDt.forEach(t),YJo=r(_Ve," (XLM-ProphetNet model)"),_Ve.forEach(t),ZJo=i(H),Lv=n(H,"LI",{});var bVe=s(Lv);rFe=n(bVe,"STRONG",{});var lDt=s(rFe);KJo=r(lDt,"xlm-roberta"),lDt.forEach(t),eYo=r(bVe," \u2014 "),ZW=n(bVe,"A",{href:!0});var iDt=s(ZW);oYo=r(iDt,"XLMRobertaForCausalLM"),iDt.forEach(t),rYo=r(bVe," (XLM-RoBERTa model)"),bVe.forEach(t),tYo=i(H),yv=n(H,"LI",{});var vVe=s(yv);tFe=n(vVe,"STRONG",{});var dDt=s(tFe);aYo=r(dDt,"xlm-roberta-xl"),dDt.forEach(t),nYo=r(vVe," \u2014 "),KW=n(vVe,"A",{href:!0});var cDt=s(KW);sYo=r(cDt,"XLMRobertaXLForCausalLM"),cDt.forEach(t),lYo=r(vVe," (XLM-RoBERTa-XL model)"),vVe.forEach(t),iYo=i(H),xv=n(H,"LI",{});var FVe=s(xv);aFe=n(FVe,"STRONG",{});var mDt=s(aFe);dYo=r(mDt,"xlnet"),mDt.forEach(t),cYo=r(FVe," \u2014 "),eU=n(FVe,"A",{href:!0});var fDt=s(eU);mYo=r(fDt,"XLNetLMHeadModel"),fDt.forEach(t),fYo=r(FVe," (XLNet model)"),FVe.forEach(t),H.forEach(t),gYo=i(wa),$v=n(wa,"P",{});var TVe=s($v);hYo=r(TVe,"The model is set in evaluation mode by default using "),nFe=n(TVe,"CODE",{});var gDt=s(nFe);uYo=r(gDt,"model.eval()"),gDt.forEach(t),pYo=r(TVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sFe=n(TVe,"CODE",{});var hDt=s(sFe);_Yo=r(hDt,"model.train()"),hDt.forEach(t),TVe.forEach(t),bYo=i(wa),T(kv.$$.fragment,wa),wa.forEach(t),Pl.forEach(t),hro=i(m),Rd=n(m,"H2",{class:!0});var $ao=s(Rd);Sv=n($ao,"A",{id:!0,class:!0,href:!0});var uDt=s(Sv);lFe=n(uDt,"SPAN",{});var pDt=s(lFe);T(E$.$$.fragment,pDt),pDt.forEach(t),uDt.forEach(t),vYo=i($ao),iFe=n($ao,"SPAN",{});var _Dt=s(iFe);FYo=r(_Dt,"AutoModelForMaskedLM"),_Dt.forEach(t),$ao.forEach(t),uro=i(m),qo=n(m,"DIV",{class:!0});var Bl=s(qo);T(C$.$$.fragment,Bl),TYo=i(Bl),Pd=n(Bl,"P",{});var ude=s(Pd);MYo=r(ude,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),oU=n(ude,"A",{href:!0});var bDt=s(oU);EYo=r(bDt,"from_pretrained()"),bDt.forEach(t),CYo=r(ude," class method or the "),rU=n(ude,"A",{href:!0});var vDt=s(rU);wYo=r(vDt,"from_config()"),vDt.forEach(t),AYo=r(ude,` class
method.`),ude.forEach(t),LYo=i(Bl),w$=n(Bl,"P",{});var kao=s(w$);yYo=r(kao,"This class cannot be instantiated directly using "),dFe=n(kao,"CODE",{});var FDt=s(dFe);xYo=r(FDt,"__init__()"),FDt.forEach(t),$Yo=r(kao," (throws an error)."),kao.forEach(t),kYo=i(Bl),Mt=n(Bl,"DIV",{class:!0});var Py=s(Mt);T(A$.$$.fragment,Py),SYo=i(Py),cFe=n(Py,"P",{});var TDt=s(cFe);RYo=r(TDt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),TDt.forEach(t),PYo=i(Py),Bd=n(Py,"P",{});var pde=s(Bd);BYo=r(pde,`Note:
Loading a model from its configuration file does `),mFe=n(pde,"STRONG",{});var MDt=s(mFe);IYo=r(MDt,"not"),MDt.forEach(t),NYo=r(pde,` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=n(pde,"A",{href:!0});var EDt=s(tU);qYo=r(EDt,"from_pretrained()"),EDt.forEach(t),jYo=r(pde," to load the model weights."),pde.forEach(t),DYo=i(Py),T(Rv.$$.fragment,Py),Py.forEach(t),GYo=i(Bl),ro=n(Bl,"DIV",{class:!0});var Aa=s(ro);T(L$.$$.fragment,Aa),OYo=i(Aa),fFe=n(Aa,"P",{});var CDt=s(fFe);VYo=r(CDt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),CDt.forEach(t),XYo=i(Aa),tn=n(Aa,"P",{});var By=s(tn);zYo=r(By,"The model class to instantiate is selected based on the "),gFe=n(By,"CODE",{});var wDt=s(gFe);QYo=r(wDt,"model_type"),wDt.forEach(t),WYo=r(By,` property of the config object (either
passed as an argument or loaded from `),hFe=n(By,"CODE",{});var ADt=s(hFe);UYo=r(ADt,"pretrained_model_name_or_path"),ADt.forEach(t),HYo=r(By,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uFe=n(By,"CODE",{});var LDt=s(uFe);JYo=r(LDt,"pretrained_model_name_or_path"),LDt.forEach(t),YYo=r(By,":"),By.forEach(t),ZYo=i(Aa),Y=n(Aa,"UL",{});var Z=s(Y);Pv=n(Z,"LI",{});var MVe=s(Pv);pFe=n(MVe,"STRONG",{});var yDt=s(pFe);KYo=r(yDt,"albert"),yDt.forEach(t),eZo=r(MVe," \u2014 "),aU=n(MVe,"A",{href:!0});var xDt=s(aU);oZo=r(xDt,"AlbertForMaskedLM"),xDt.forEach(t),rZo=r(MVe," (ALBERT model)"),MVe.forEach(t),tZo=i(Z),Bv=n(Z,"LI",{});var EVe=s(Bv);_Fe=n(EVe,"STRONG",{});var $Dt=s(_Fe);aZo=r($Dt,"bart"),$Dt.forEach(t),nZo=r(EVe," \u2014 "),nU=n(EVe,"A",{href:!0});var kDt=s(nU);sZo=r(kDt,"BartForConditionalGeneration"),kDt.forEach(t),lZo=r(EVe," (BART model)"),EVe.forEach(t),iZo=i(Z),Iv=n(Z,"LI",{});var CVe=s(Iv);bFe=n(CVe,"STRONG",{});var SDt=s(bFe);dZo=r(SDt,"bert"),SDt.forEach(t),cZo=r(CVe," \u2014 "),sU=n(CVe,"A",{href:!0});var RDt=s(sU);mZo=r(RDt,"BertForMaskedLM"),RDt.forEach(t),fZo=r(CVe," (BERT model)"),CVe.forEach(t),gZo=i(Z),Nv=n(Z,"LI",{});var wVe=s(Nv);vFe=n(wVe,"STRONG",{});var PDt=s(vFe);hZo=r(PDt,"big_bird"),PDt.forEach(t),uZo=r(wVe," \u2014 "),lU=n(wVe,"A",{href:!0});var BDt=s(lU);pZo=r(BDt,"BigBirdForMaskedLM"),BDt.forEach(t),_Zo=r(wVe," (BigBird model)"),wVe.forEach(t),bZo=i(Z),qv=n(Z,"LI",{});var AVe=s(qv);FFe=n(AVe,"STRONG",{});var IDt=s(FFe);vZo=r(IDt,"camembert"),IDt.forEach(t),FZo=r(AVe," \u2014 "),iU=n(AVe,"A",{href:!0});var NDt=s(iU);TZo=r(NDt,"CamembertForMaskedLM"),NDt.forEach(t),MZo=r(AVe," (CamemBERT model)"),AVe.forEach(t),EZo=i(Z),jv=n(Z,"LI",{});var LVe=s(jv);TFe=n(LVe,"STRONG",{});var qDt=s(TFe);CZo=r(qDt,"convbert"),qDt.forEach(t),wZo=r(LVe," \u2014 "),dU=n(LVe,"A",{href:!0});var jDt=s(dU);AZo=r(jDt,"ConvBertForMaskedLM"),jDt.forEach(t),LZo=r(LVe," (ConvBERT model)"),LVe.forEach(t),yZo=i(Z),Dv=n(Z,"LI",{});var yVe=s(Dv);MFe=n(yVe,"STRONG",{});var DDt=s(MFe);xZo=r(DDt,"data2vec-text"),DDt.forEach(t),$Zo=r(yVe," \u2014 "),cU=n(yVe,"A",{href:!0});var GDt=s(cU);kZo=r(GDt,"Data2VecTextForMaskedLM"),GDt.forEach(t),SZo=r(yVe," (Data2VecText model)"),yVe.forEach(t),RZo=i(Z),Gv=n(Z,"LI",{});var xVe=s(Gv);EFe=n(xVe,"STRONG",{});var ODt=s(EFe);PZo=r(ODt,"deberta"),ODt.forEach(t),BZo=r(xVe," \u2014 "),mU=n(xVe,"A",{href:!0});var VDt=s(mU);IZo=r(VDt,"DebertaForMaskedLM"),VDt.forEach(t),NZo=r(xVe," (DeBERTa model)"),xVe.forEach(t),qZo=i(Z),Ov=n(Z,"LI",{});var $Ve=s(Ov);CFe=n($Ve,"STRONG",{});var XDt=s(CFe);jZo=r(XDt,"deberta-v2"),XDt.forEach(t),DZo=r($Ve," \u2014 "),fU=n($Ve,"A",{href:!0});var zDt=s(fU);GZo=r(zDt,"DebertaV2ForMaskedLM"),zDt.forEach(t),OZo=r($Ve," (DeBERTa-v2 model)"),$Ve.forEach(t),VZo=i(Z),Vv=n(Z,"LI",{});var kVe=s(Vv);wFe=n(kVe,"STRONG",{});var QDt=s(wFe);XZo=r(QDt,"distilbert"),QDt.forEach(t),zZo=r(kVe," \u2014 "),gU=n(kVe,"A",{href:!0});var WDt=s(gU);QZo=r(WDt,"DistilBertForMaskedLM"),WDt.forEach(t),WZo=r(kVe," (DistilBERT model)"),kVe.forEach(t),UZo=i(Z),Xv=n(Z,"LI",{});var SVe=s(Xv);AFe=n(SVe,"STRONG",{});var UDt=s(AFe);HZo=r(UDt,"electra"),UDt.forEach(t),JZo=r(SVe," \u2014 "),hU=n(SVe,"A",{href:!0});var HDt=s(hU);YZo=r(HDt,"ElectraForMaskedLM"),HDt.forEach(t),ZZo=r(SVe," (ELECTRA model)"),SVe.forEach(t),KZo=i(Z),zv=n(Z,"LI",{});var RVe=s(zv);LFe=n(RVe,"STRONG",{});var JDt=s(LFe);eKo=r(JDt,"ernie"),JDt.forEach(t),oKo=r(RVe," \u2014 "),uU=n(RVe,"A",{href:!0});var YDt=s(uU);rKo=r(YDt,"ErnieForMaskedLM"),YDt.forEach(t),tKo=r(RVe," (ERNIE model)"),RVe.forEach(t),aKo=i(Z),Qv=n(Z,"LI",{});var PVe=s(Qv);yFe=n(PVe,"STRONG",{});var ZDt=s(yFe);nKo=r(ZDt,"flaubert"),ZDt.forEach(t),sKo=r(PVe," \u2014 "),pU=n(PVe,"A",{href:!0});var KDt=s(pU);lKo=r(KDt,"FlaubertWithLMHeadModel"),KDt.forEach(t),iKo=r(PVe," (FlauBERT model)"),PVe.forEach(t),dKo=i(Z),Wv=n(Z,"LI",{});var BVe=s(Wv);xFe=n(BVe,"STRONG",{});var eGt=s(xFe);cKo=r(eGt,"fnet"),eGt.forEach(t),mKo=r(BVe," \u2014 "),_U=n(BVe,"A",{href:!0});var oGt=s(_U);fKo=r(oGt,"FNetForMaskedLM"),oGt.forEach(t),gKo=r(BVe," (FNet model)"),BVe.forEach(t),hKo=i(Z),Uv=n(Z,"LI",{});var IVe=s(Uv);$Fe=n(IVe,"STRONG",{});var rGt=s($Fe);uKo=r(rGt,"funnel"),rGt.forEach(t),pKo=r(IVe," \u2014 "),bU=n(IVe,"A",{href:!0});var tGt=s(bU);_Ko=r(tGt,"FunnelForMaskedLM"),tGt.forEach(t),bKo=r(IVe," (Funnel Transformer model)"),IVe.forEach(t),vKo=i(Z),Hv=n(Z,"LI",{});var NVe=s(Hv);kFe=n(NVe,"STRONG",{});var aGt=s(kFe);FKo=r(aGt,"ibert"),aGt.forEach(t),TKo=r(NVe," \u2014 "),vU=n(NVe,"A",{href:!0});var nGt=s(vU);MKo=r(nGt,"IBertForMaskedLM"),nGt.forEach(t),EKo=r(NVe," (I-BERT model)"),NVe.forEach(t),CKo=i(Z),Jv=n(Z,"LI",{});var qVe=s(Jv);SFe=n(qVe,"STRONG",{});var sGt=s(SFe);wKo=r(sGt,"layoutlm"),sGt.forEach(t),AKo=r(qVe," \u2014 "),FU=n(qVe,"A",{href:!0});var lGt=s(FU);LKo=r(lGt,"LayoutLMForMaskedLM"),lGt.forEach(t),yKo=r(qVe," (LayoutLM model)"),qVe.forEach(t),xKo=i(Z),Yv=n(Z,"LI",{});var jVe=s(Yv);RFe=n(jVe,"STRONG",{});var iGt=s(RFe);$Ko=r(iGt,"longformer"),iGt.forEach(t),kKo=r(jVe," \u2014 "),TU=n(jVe,"A",{href:!0});var dGt=s(TU);SKo=r(dGt,"LongformerForMaskedLM"),dGt.forEach(t),RKo=r(jVe," (Longformer model)"),jVe.forEach(t),PKo=i(Z),Zv=n(Z,"LI",{});var DVe=s(Zv);PFe=n(DVe,"STRONG",{});var cGt=s(PFe);BKo=r(cGt,"luke"),cGt.forEach(t),IKo=r(DVe," \u2014 "),MU=n(DVe,"A",{href:!0});var mGt=s(MU);NKo=r(mGt,"LukeForMaskedLM"),mGt.forEach(t),qKo=r(DVe," (LUKE model)"),DVe.forEach(t),jKo=i(Z),Kv=n(Z,"LI",{});var GVe=s(Kv);BFe=n(GVe,"STRONG",{});var fGt=s(BFe);DKo=r(fGt,"mbart"),fGt.forEach(t),GKo=r(GVe," \u2014 "),EU=n(GVe,"A",{href:!0});var gGt=s(EU);OKo=r(gGt,"MBartForConditionalGeneration"),gGt.forEach(t),VKo=r(GVe," (mBART model)"),GVe.forEach(t),XKo=i(Z),eF=n(Z,"LI",{});var OVe=s(eF);IFe=n(OVe,"STRONG",{});var hGt=s(IFe);zKo=r(hGt,"megatron-bert"),hGt.forEach(t),QKo=r(OVe," \u2014 "),CU=n(OVe,"A",{href:!0});var uGt=s(CU);WKo=r(uGt,"MegatronBertForMaskedLM"),uGt.forEach(t),UKo=r(OVe," (Megatron-BERT model)"),OVe.forEach(t),HKo=i(Z),oF=n(Z,"LI",{});var VVe=s(oF);NFe=n(VVe,"STRONG",{});var pGt=s(NFe);JKo=r(pGt,"mobilebert"),pGt.forEach(t),YKo=r(VVe," \u2014 "),wU=n(VVe,"A",{href:!0});var _Gt=s(wU);ZKo=r(_Gt,"MobileBertForMaskedLM"),_Gt.forEach(t),KKo=r(VVe," (MobileBERT model)"),VVe.forEach(t),eer=i(Z),rF=n(Z,"LI",{});var XVe=s(rF);qFe=n(XVe,"STRONG",{});var bGt=s(qFe);oer=r(bGt,"mpnet"),bGt.forEach(t),rer=r(XVe," \u2014 "),AU=n(XVe,"A",{href:!0});var vGt=s(AU);ter=r(vGt,"MPNetForMaskedLM"),vGt.forEach(t),aer=r(XVe," (MPNet model)"),XVe.forEach(t),ner=i(Z),tF=n(Z,"LI",{});var zVe=s(tF);jFe=n(zVe,"STRONG",{});var FGt=s(jFe);ser=r(FGt,"mvp"),FGt.forEach(t),ler=r(zVe," \u2014 "),LU=n(zVe,"A",{href:!0});var TGt=s(LU);ier=r(TGt,"MvpForConditionalGeneration"),TGt.forEach(t),der=r(zVe," (MVP model)"),zVe.forEach(t),cer=i(Z),aF=n(Z,"LI",{});var QVe=s(aF);DFe=n(QVe,"STRONG",{});var MGt=s(DFe);mer=r(MGt,"nezha"),MGt.forEach(t),fer=r(QVe," \u2014 "),yU=n(QVe,"A",{href:!0});var EGt=s(yU);ger=r(EGt,"NezhaForMaskedLM"),EGt.forEach(t),her=r(QVe," (Nezha model)"),QVe.forEach(t),uer=i(Z),nF=n(Z,"LI",{});var WVe=s(nF);GFe=n(WVe,"STRONG",{});var CGt=s(GFe);per=r(CGt,"nystromformer"),CGt.forEach(t),_er=r(WVe," \u2014 "),xU=n(WVe,"A",{href:!0});var wGt=s(xU);ber=r(wGt,"NystromformerForMaskedLM"),wGt.forEach(t),ver=r(WVe," (Nystr\xF6mformer model)"),WVe.forEach(t),Fer=i(Z),sF=n(Z,"LI",{});var UVe=s(sF);OFe=n(UVe,"STRONG",{});var AGt=s(OFe);Ter=r(AGt,"perceiver"),AGt.forEach(t),Mer=r(UVe," \u2014 "),$U=n(UVe,"A",{href:!0});var LGt=s($U);Eer=r(LGt,"PerceiverForMaskedLM"),LGt.forEach(t),Cer=r(UVe," (Perceiver model)"),UVe.forEach(t),wer=i(Z),lF=n(Z,"LI",{});var HVe=s(lF);VFe=n(HVe,"STRONG",{});var yGt=s(VFe);Aer=r(yGt,"qdqbert"),yGt.forEach(t),Ler=r(HVe," \u2014 "),kU=n(HVe,"A",{href:!0});var xGt=s(kU);yer=r(xGt,"QDQBertForMaskedLM"),xGt.forEach(t),xer=r(HVe," (QDQBert model)"),HVe.forEach(t),$er=i(Z),iF=n(Z,"LI",{});var JVe=s(iF);XFe=n(JVe,"STRONG",{});var $Gt=s(XFe);ker=r($Gt,"reformer"),$Gt.forEach(t),Ser=r(JVe," \u2014 "),SU=n(JVe,"A",{href:!0});var kGt=s(SU);Rer=r(kGt,"ReformerForMaskedLM"),kGt.forEach(t),Per=r(JVe," (Reformer model)"),JVe.forEach(t),Ber=i(Z),dF=n(Z,"LI",{});var YVe=s(dF);zFe=n(YVe,"STRONG",{});var SGt=s(zFe);Ier=r(SGt,"rembert"),SGt.forEach(t),Ner=r(YVe," \u2014 "),RU=n(YVe,"A",{href:!0});var RGt=s(RU);qer=r(RGt,"RemBertForMaskedLM"),RGt.forEach(t),jer=r(YVe," (RemBERT model)"),YVe.forEach(t),Der=i(Z),cF=n(Z,"LI",{});var ZVe=s(cF);QFe=n(ZVe,"STRONG",{});var PGt=s(QFe);Ger=r(PGt,"roberta"),PGt.forEach(t),Oer=r(ZVe," \u2014 "),PU=n(ZVe,"A",{href:!0});var BGt=s(PU);Ver=r(BGt,"RobertaForMaskedLM"),BGt.forEach(t),Xer=r(ZVe," (RoBERTa model)"),ZVe.forEach(t),zer=i(Z),mF=n(Z,"LI",{});var KVe=s(mF);WFe=n(KVe,"STRONG",{});var IGt=s(WFe);Qer=r(IGt,"roformer"),IGt.forEach(t),Wer=r(KVe," \u2014 "),BU=n(KVe,"A",{href:!0});var NGt=s(BU);Uer=r(NGt,"RoFormerForMaskedLM"),NGt.forEach(t),Her=r(KVe," (RoFormer model)"),KVe.forEach(t),Jer=i(Z),fF=n(Z,"LI",{});var eXe=s(fF);UFe=n(eXe,"STRONG",{});var qGt=s(UFe);Yer=r(qGt,"squeezebert"),qGt.forEach(t),Zer=r(eXe," \u2014 "),IU=n(eXe,"A",{href:!0});var jGt=s(IU);Ker=r(jGt,"SqueezeBertForMaskedLM"),jGt.forEach(t),eor=r(eXe," (SqueezeBERT model)"),eXe.forEach(t),oor=i(Z),gF=n(Z,"LI",{});var oXe=s(gF);HFe=n(oXe,"STRONG",{});var DGt=s(HFe);ror=r(DGt,"tapas"),DGt.forEach(t),tor=r(oXe," \u2014 "),NU=n(oXe,"A",{href:!0});var GGt=s(NU);aor=r(GGt,"TapasForMaskedLM"),GGt.forEach(t),nor=r(oXe," (TAPAS model)"),oXe.forEach(t),sor=i(Z),hF=n(Z,"LI",{});var rXe=s(hF);JFe=n(rXe,"STRONG",{});var OGt=s(JFe);lor=r(OGt,"wav2vec2"),OGt.forEach(t),ior=r(rXe," \u2014 "),YFe=n(rXe,"CODE",{});var VGt=s(YFe);dor=r(VGt,"Wav2Vec2ForMaskedLM"),VGt.forEach(t),cor=r(rXe," (Wav2Vec2 model)"),rXe.forEach(t),mor=i(Z),uF=n(Z,"LI",{});var tXe=s(uF);ZFe=n(tXe,"STRONG",{});var XGt=s(ZFe);gor=r(XGt,"xlm"),XGt.forEach(t),hor=r(tXe," \u2014 "),qU=n(tXe,"A",{href:!0});var zGt=s(qU);uor=r(zGt,"XLMWithLMHeadModel"),zGt.forEach(t),por=r(tXe," (XLM model)"),tXe.forEach(t),_or=i(Z),pF=n(Z,"LI",{});var aXe=s(pF);KFe=n(aXe,"STRONG",{});var QGt=s(KFe);bor=r(QGt,"xlm-roberta"),QGt.forEach(t),vor=r(aXe," \u2014 "),jU=n(aXe,"A",{href:!0});var WGt=s(jU);For=r(WGt,"XLMRobertaForMaskedLM"),WGt.forEach(t),Tor=r(aXe," (XLM-RoBERTa model)"),aXe.forEach(t),Mor=i(Z),_F=n(Z,"LI",{});var nXe=s(_F);eTe=n(nXe,"STRONG",{});var UGt=s(eTe);Eor=r(UGt,"xlm-roberta-xl"),UGt.forEach(t),Cor=r(nXe," \u2014 "),DU=n(nXe,"A",{href:!0});var HGt=s(DU);wor=r(HGt,"XLMRobertaXLForMaskedLM"),HGt.forEach(t),Aor=r(nXe," (XLM-RoBERTa-XL model)"),nXe.forEach(t),Lor=i(Z),bF=n(Z,"LI",{});var sXe=s(bF);oTe=n(sXe,"STRONG",{});var JGt=s(oTe);yor=r(JGt,"yoso"),JGt.forEach(t),xor=r(sXe," \u2014 "),GU=n(sXe,"A",{href:!0});var YGt=s(GU);$or=r(YGt,"YosoForMaskedLM"),YGt.forEach(t),kor=r(sXe," (YOSO model)"),sXe.forEach(t),Z.forEach(t),Sor=i(Aa),vF=n(Aa,"P",{});var lXe=s(vF);Ror=r(lXe,"The model is set in evaluation mode by default using "),rTe=n(lXe,"CODE",{});var ZGt=s(rTe);Por=r(ZGt,"model.eval()"),ZGt.forEach(t),Bor=r(lXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tTe=n(lXe,"CODE",{});var KGt=s(tTe);Ior=r(KGt,"model.train()"),KGt.forEach(t),lXe.forEach(t),Nor=i(Aa),T(FF.$$.fragment,Aa),Aa.forEach(t),Bl.forEach(t),pro=i(m),Id=n(m,"H2",{class:!0});var Sao=s(Id);TF=n(Sao,"A",{id:!0,class:!0,href:!0});var eOt=s(TF);aTe=n(eOt,"SPAN",{});var oOt=s(aTe);T(y$.$$.fragment,oOt),oOt.forEach(t),eOt.forEach(t),qor=i(Sao),nTe=n(Sao,"SPAN",{});var rOt=s(nTe);jor=r(rOt,"AutoModelForSeq2SeqLM"),rOt.forEach(t),Sao.forEach(t),_ro=i(m),jo=n(m,"DIV",{class:!0});var Il=s(jo);T(x$.$$.fragment,Il),Dor=i(Il),Nd=n(Il,"P",{});var _de=s(Nd);Gor=r(_de,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),OU=n(_de,"A",{href:!0});var tOt=s(OU);Oor=r(tOt,"from_pretrained()"),tOt.forEach(t),Vor=r(_de," class method or the "),VU=n(_de,"A",{href:!0});var aOt=s(VU);Xor=r(aOt,"from_config()"),aOt.forEach(t),zor=r(_de,` class
method.`),_de.forEach(t),Qor=i(Il),$$=n(Il,"P",{});var Rao=s($$);Wor=r(Rao,"This class cannot be instantiated directly using "),sTe=n(Rao,"CODE",{});var nOt=s(sTe);Uor=r(nOt,"__init__()"),nOt.forEach(t),Hor=r(Rao," (throws an error)."),Rao.forEach(t),Jor=i(Il),Et=n(Il,"DIV",{class:!0});var Iy=s(Et);T(k$.$$.fragment,Iy),Yor=i(Iy),lTe=n(Iy,"P",{});var sOt=s(lTe);Zor=r(sOt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),sOt.forEach(t),Kor=i(Iy),qd=n(Iy,"P",{});var bde=s(qd);err=r(bde,`Note:
Loading a model from its configuration file does `),iTe=n(bde,"STRONG",{});var lOt=s(iTe);orr=r(lOt,"not"),lOt.forEach(t),rrr=r(bde,` load the model weights. It only affects the
model\u2019s configuration. Use `),XU=n(bde,"A",{href:!0});var iOt=s(XU);trr=r(iOt,"from_pretrained()"),iOt.forEach(t),arr=r(bde," to load the model weights."),bde.forEach(t),nrr=i(Iy),T(MF.$$.fragment,Iy),Iy.forEach(t),srr=i(Il),to=n(Il,"DIV",{class:!0});var La=s(to);T(S$.$$.fragment,La),lrr=i(La),dTe=n(La,"P",{});var dOt=s(dTe);irr=r(dOt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dOt.forEach(t),drr=i(La),an=n(La,"P",{});var Ny=s(an);crr=r(Ny,"The model class to instantiate is selected based on the "),cTe=n(Ny,"CODE",{});var cOt=s(cTe);mrr=r(cOt,"model_type"),cOt.forEach(t),frr=r(Ny,` property of the config object (either
passed as an argument or loaded from `),mTe=n(Ny,"CODE",{});var mOt=s(mTe);grr=r(mOt,"pretrained_model_name_or_path"),mOt.forEach(t),hrr=r(Ny,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=n(Ny,"CODE",{});var fOt=s(fTe);urr=r(fOt,"pretrained_model_name_or_path"),fOt.forEach(t),prr=r(Ny,":"),Ny.forEach(t),_rr=i(La),fe=n(La,"UL",{});var pe=s(fe);EF=n(pe,"LI",{});var iXe=s(EF);gTe=n(iXe,"STRONG",{});var gOt=s(gTe);brr=r(gOt,"bart"),gOt.forEach(t),vrr=r(iXe," \u2014 "),zU=n(iXe,"A",{href:!0});var hOt=s(zU);Frr=r(hOt,"BartForConditionalGeneration"),hOt.forEach(t),Trr=r(iXe," (BART model)"),iXe.forEach(t),Mrr=i(pe),CF=n(pe,"LI",{});var dXe=s(CF);hTe=n(dXe,"STRONG",{});var uOt=s(hTe);Err=r(uOt,"bigbird_pegasus"),uOt.forEach(t),Crr=r(dXe," \u2014 "),QU=n(dXe,"A",{href:!0});var pOt=s(QU);wrr=r(pOt,"BigBirdPegasusForConditionalGeneration"),pOt.forEach(t),Arr=r(dXe," (BigBird-Pegasus model)"),dXe.forEach(t),Lrr=i(pe),wF=n(pe,"LI",{});var cXe=s(wF);uTe=n(cXe,"STRONG",{});var _Ot=s(uTe);yrr=r(_Ot,"blenderbot"),_Ot.forEach(t),xrr=r(cXe," \u2014 "),WU=n(cXe,"A",{href:!0});var bOt=s(WU);$rr=r(bOt,"BlenderbotForConditionalGeneration"),bOt.forEach(t),krr=r(cXe," (Blenderbot model)"),cXe.forEach(t),Srr=i(pe),AF=n(pe,"LI",{});var mXe=s(AF);pTe=n(mXe,"STRONG",{});var vOt=s(pTe);Rrr=r(vOt,"blenderbot-small"),vOt.forEach(t),Prr=r(mXe," \u2014 "),UU=n(mXe,"A",{href:!0});var FOt=s(UU);Brr=r(FOt,"BlenderbotSmallForConditionalGeneration"),FOt.forEach(t),Irr=r(mXe," (BlenderbotSmall model)"),mXe.forEach(t),Nrr=i(pe),LF=n(pe,"LI",{});var fXe=s(LF);_Te=n(fXe,"STRONG",{});var TOt=s(_Te);qrr=r(TOt,"encoder-decoder"),TOt.forEach(t),jrr=r(fXe," \u2014 "),HU=n(fXe,"A",{href:!0});var MOt=s(HU);Drr=r(MOt,"EncoderDecoderModel"),MOt.forEach(t),Grr=r(fXe," (Encoder decoder model)"),fXe.forEach(t),Orr=i(pe),yF=n(pe,"LI",{});var gXe=s(yF);bTe=n(gXe,"STRONG",{});var EOt=s(bTe);Vrr=r(EOt,"fsmt"),EOt.forEach(t),Xrr=r(gXe," \u2014 "),JU=n(gXe,"A",{href:!0});var COt=s(JU);zrr=r(COt,"FSMTForConditionalGeneration"),COt.forEach(t),Qrr=r(gXe," (FairSeq Machine-Translation model)"),gXe.forEach(t),Wrr=i(pe),xF=n(pe,"LI",{});var hXe=s(xF);vTe=n(hXe,"STRONG",{});var wOt=s(vTe);Urr=r(wOt,"led"),wOt.forEach(t),Hrr=r(hXe," \u2014 "),YU=n(hXe,"A",{href:!0});var AOt=s(YU);Jrr=r(AOt,"LEDForConditionalGeneration"),AOt.forEach(t),Yrr=r(hXe," (LED model)"),hXe.forEach(t),Zrr=i(pe),$F=n(pe,"LI",{});var uXe=s($F);FTe=n(uXe,"STRONG",{});var LOt=s(FTe);Krr=r(LOt,"longt5"),LOt.forEach(t),etr=r(uXe," \u2014 "),ZU=n(uXe,"A",{href:!0});var yOt=s(ZU);otr=r(yOt,"LongT5ForConditionalGeneration"),yOt.forEach(t),rtr=r(uXe," (LongT5 model)"),uXe.forEach(t),ttr=i(pe),kF=n(pe,"LI",{});var pXe=s(kF);TTe=n(pXe,"STRONG",{});var xOt=s(TTe);atr=r(xOt,"m2m_100"),xOt.forEach(t),ntr=r(pXe," \u2014 "),KU=n(pXe,"A",{href:!0});var $Ot=s(KU);str=r($Ot,"M2M100ForConditionalGeneration"),$Ot.forEach(t),ltr=r(pXe," (M2M100 model)"),pXe.forEach(t),itr=i(pe),SF=n(pe,"LI",{});var _Xe=s(SF);MTe=n(_Xe,"STRONG",{});var kOt=s(MTe);dtr=r(kOt,"marian"),kOt.forEach(t),ctr=r(_Xe," \u2014 "),eH=n(_Xe,"A",{href:!0});var SOt=s(eH);mtr=r(SOt,"MarianMTModel"),SOt.forEach(t),ftr=r(_Xe," (Marian model)"),_Xe.forEach(t),gtr=i(pe),RF=n(pe,"LI",{});var bXe=s(RF);ETe=n(bXe,"STRONG",{});var ROt=s(ETe);htr=r(ROt,"mbart"),ROt.forEach(t),utr=r(bXe," \u2014 "),oH=n(bXe,"A",{href:!0});var POt=s(oH);ptr=r(POt,"MBartForConditionalGeneration"),POt.forEach(t),_tr=r(bXe," (mBART model)"),bXe.forEach(t),btr=i(pe),PF=n(pe,"LI",{});var vXe=s(PF);CTe=n(vXe,"STRONG",{});var BOt=s(CTe);vtr=r(BOt,"mt5"),BOt.forEach(t),Ftr=r(vXe," \u2014 "),rH=n(vXe,"A",{href:!0});var IOt=s(rH);Ttr=r(IOt,"MT5ForConditionalGeneration"),IOt.forEach(t),Mtr=r(vXe," (MT5 model)"),vXe.forEach(t),Etr=i(pe),BF=n(pe,"LI",{});var FXe=s(BF);wTe=n(FXe,"STRONG",{});var NOt=s(wTe);Ctr=r(NOt,"mvp"),NOt.forEach(t),wtr=r(FXe," \u2014 "),tH=n(FXe,"A",{href:!0});var qOt=s(tH);Atr=r(qOt,"MvpForConditionalGeneration"),qOt.forEach(t),Ltr=r(FXe," (MVP model)"),FXe.forEach(t),ytr=i(pe),IF=n(pe,"LI",{});var TXe=s(IF);ATe=n(TXe,"STRONG",{});var jOt=s(ATe);xtr=r(jOt,"nllb"),jOt.forEach(t),$tr=r(TXe," \u2014 "),aH=n(TXe,"A",{href:!0});var DOt=s(aH);ktr=r(DOt,"M2M100ForConditionalGeneration"),DOt.forEach(t),Str=r(TXe," (NLLB model)"),TXe.forEach(t),Rtr=i(pe),NF=n(pe,"LI",{});var MXe=s(NF);LTe=n(MXe,"STRONG",{});var GOt=s(LTe);Ptr=r(GOt,"pegasus"),GOt.forEach(t),Btr=r(MXe," \u2014 "),nH=n(MXe,"A",{href:!0});var OOt=s(nH);Itr=r(OOt,"PegasusForConditionalGeneration"),OOt.forEach(t),Ntr=r(MXe," (Pegasus model)"),MXe.forEach(t),qtr=i(pe),qF=n(pe,"LI",{});var EXe=s(qF);yTe=n(EXe,"STRONG",{});var VOt=s(yTe);jtr=r(VOt,"pegasus_x"),VOt.forEach(t),Dtr=r(EXe," \u2014 "),sH=n(EXe,"A",{href:!0});var XOt=s(sH);Gtr=r(XOt,"PegasusXForConditionalGeneration"),XOt.forEach(t),Otr=r(EXe," (PEGASUS-X model)"),EXe.forEach(t),Vtr=i(pe),jF=n(pe,"LI",{});var CXe=s(jF);xTe=n(CXe,"STRONG",{});var zOt=s(xTe);Xtr=r(zOt,"plbart"),zOt.forEach(t),ztr=r(CXe," \u2014 "),lH=n(CXe,"A",{href:!0});var QOt=s(lH);Qtr=r(QOt,"PLBartForConditionalGeneration"),QOt.forEach(t),Wtr=r(CXe," (PLBart model)"),CXe.forEach(t),Utr=i(pe),DF=n(pe,"LI",{});var wXe=s(DF);$Te=n(wXe,"STRONG",{});var WOt=s($Te);Htr=r(WOt,"prophetnet"),WOt.forEach(t),Jtr=r(wXe," \u2014 "),iH=n(wXe,"A",{href:!0});var UOt=s(iH);Ytr=r(UOt,"ProphetNetForConditionalGeneration"),UOt.forEach(t),Ztr=r(wXe," (ProphetNet model)"),wXe.forEach(t),Ktr=i(pe),GF=n(pe,"LI",{});var AXe=s(GF);kTe=n(AXe,"STRONG",{});var HOt=s(kTe);ear=r(HOt,"t5"),HOt.forEach(t),oar=r(AXe," \u2014 "),dH=n(AXe,"A",{href:!0});var JOt=s(dH);rar=r(JOt,"T5ForConditionalGeneration"),JOt.forEach(t),tar=r(AXe," (T5 model)"),AXe.forEach(t),aar=i(pe),OF=n(pe,"LI",{});var LXe=s(OF);STe=n(LXe,"STRONG",{});var YOt=s(STe);nar=r(YOt,"xlm-prophetnet"),YOt.forEach(t),sar=r(LXe," \u2014 "),cH=n(LXe,"A",{href:!0});var ZOt=s(cH);lar=r(ZOt,"XLMProphetNetForConditionalGeneration"),ZOt.forEach(t),iar=r(LXe," (XLM-ProphetNet model)"),LXe.forEach(t),pe.forEach(t),dar=i(La),VF=n(La,"P",{});var yXe=s(VF);car=r(yXe,"The model is set in evaluation mode by default using "),RTe=n(yXe,"CODE",{});var KOt=s(RTe);mar=r(KOt,"model.eval()"),KOt.forEach(t),far=r(yXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PTe=n(yXe,"CODE",{});var eVt=s(PTe);gar=r(eVt,"model.train()"),eVt.forEach(t),yXe.forEach(t),har=i(La),T(XF.$$.fragment,La),La.forEach(t),Il.forEach(t),bro=i(m),jd=n(m,"H2",{class:!0});var Pao=s(jd);zF=n(Pao,"A",{id:!0,class:!0,href:!0});var oVt=s(zF);BTe=n(oVt,"SPAN",{});var rVt=s(BTe);T(R$.$$.fragment,rVt),rVt.forEach(t),oVt.forEach(t),uar=i(Pao),ITe=n(Pao,"SPAN",{});var tVt=s(ITe);par=r(tVt,"AutoModelForSequenceClassification"),tVt.forEach(t),Pao.forEach(t),vro=i(m),Do=n(m,"DIV",{class:!0});var Nl=s(Do);T(P$.$$.fragment,Nl),_ar=i(Nl),Dd=n(Nl,"P",{});var vde=s(Dd);bar=r(vde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mH=n(vde,"A",{href:!0});var aVt=s(mH);Far=r(aVt,"from_pretrained()"),aVt.forEach(t),Tar=r(vde," class method or the "),fH=n(vde,"A",{href:!0});var nVt=s(fH);Mar=r(nVt,"from_config()"),nVt.forEach(t),Ear=r(vde,` class
method.`),vde.forEach(t),Car=i(Nl),B$=n(Nl,"P",{});var Bao=s(B$);war=r(Bao,"This class cannot be instantiated directly using "),NTe=n(Bao,"CODE",{});var sVt=s(NTe);Aar=r(sVt,"__init__()"),sVt.forEach(t),Lar=r(Bao," (throws an error)."),Bao.forEach(t),yar=i(Nl),Ct=n(Nl,"DIV",{class:!0});var qy=s(Ct);T(I$.$$.fragment,qy),xar=i(qy),qTe=n(qy,"P",{});var lVt=s(qTe);$ar=r(lVt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lVt.forEach(t),kar=i(qy),Gd=n(qy,"P",{});var Fde=s(Gd);Sar=r(Fde,`Note:
Loading a model from its configuration file does `),jTe=n(Fde,"STRONG",{});var iVt=s(jTe);Rar=r(iVt,"not"),iVt.forEach(t),Par=r(Fde,` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=n(Fde,"A",{href:!0});var dVt=s(gH);Bar=r(dVt,"from_pretrained()"),dVt.forEach(t),Iar=r(Fde," to load the model weights."),Fde.forEach(t),Nar=i(qy),T(QF.$$.fragment,qy),qy.forEach(t),qar=i(Nl),ao=n(Nl,"DIV",{class:!0});var ya=s(ao);T(N$.$$.fragment,ya),jar=i(ya),DTe=n(ya,"P",{});var cVt=s(DTe);Dar=r(cVt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cVt.forEach(t),Gar=i(ya),nn=n(ya,"P",{});var jy=s(nn);Oar=r(jy,"The model class to instantiate is selected based on the "),GTe=n(jy,"CODE",{});var mVt=s(GTe);Var=r(mVt,"model_type"),mVt.forEach(t),Xar=r(jy,` property of the config object (either
passed as an argument or loaded from `),OTe=n(jy,"CODE",{});var fVt=s(OTe);zar=r(fVt,"pretrained_model_name_or_path"),fVt.forEach(t),Qar=r(jy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=n(jy,"CODE",{});var gVt=s(VTe);War=r(gVt,"pretrained_model_name_or_path"),gVt.forEach(t),Uar=r(jy,":"),jy.forEach(t),Har=i(ya),I=n(ya,"UL",{});var D=s(I);WF=n(D,"LI",{});var xXe=s(WF);XTe=n(xXe,"STRONG",{});var hVt=s(XTe);Jar=r(hVt,"albert"),hVt.forEach(t),Yar=r(xXe," \u2014 "),hH=n(xXe,"A",{href:!0});var uVt=s(hH);Zar=r(uVt,"AlbertForSequenceClassification"),uVt.forEach(t),Kar=r(xXe," (ALBERT model)"),xXe.forEach(t),enr=i(D),UF=n(D,"LI",{});var $Xe=s(UF);zTe=n($Xe,"STRONG",{});var pVt=s(zTe);onr=r(pVt,"bart"),pVt.forEach(t),rnr=r($Xe," \u2014 "),uH=n($Xe,"A",{href:!0});var _Vt=s(uH);tnr=r(_Vt,"BartForSequenceClassification"),_Vt.forEach(t),anr=r($Xe," (BART model)"),$Xe.forEach(t),nnr=i(D),HF=n(D,"LI",{});var kXe=s(HF);QTe=n(kXe,"STRONG",{});var bVt=s(QTe);snr=r(bVt,"bert"),bVt.forEach(t),lnr=r(kXe," \u2014 "),pH=n(kXe,"A",{href:!0});var vVt=s(pH);inr=r(vVt,"BertForSequenceClassification"),vVt.forEach(t),dnr=r(kXe," (BERT model)"),kXe.forEach(t),cnr=i(D),JF=n(D,"LI",{});var SXe=s(JF);WTe=n(SXe,"STRONG",{});var FVt=s(WTe);mnr=r(FVt,"big_bird"),FVt.forEach(t),fnr=r(SXe," \u2014 "),_H=n(SXe,"A",{href:!0});var TVt=s(_H);gnr=r(TVt,"BigBirdForSequenceClassification"),TVt.forEach(t),hnr=r(SXe," (BigBird model)"),SXe.forEach(t),unr=i(D),YF=n(D,"LI",{});var RXe=s(YF);UTe=n(RXe,"STRONG",{});var MVt=s(UTe);pnr=r(MVt,"bigbird_pegasus"),MVt.forEach(t),_nr=r(RXe," \u2014 "),bH=n(RXe,"A",{href:!0});var EVt=s(bH);bnr=r(EVt,"BigBirdPegasusForSequenceClassification"),EVt.forEach(t),vnr=r(RXe," (BigBird-Pegasus model)"),RXe.forEach(t),Fnr=i(D),ZF=n(D,"LI",{});var PXe=s(ZF);HTe=n(PXe,"STRONG",{});var CVt=s(HTe);Tnr=r(CVt,"bloom"),CVt.forEach(t),Mnr=r(PXe," \u2014 "),vH=n(PXe,"A",{href:!0});var wVt=s(vH);Enr=r(wVt,"BloomForSequenceClassification"),wVt.forEach(t),Cnr=r(PXe," (BLOOM model)"),PXe.forEach(t),wnr=i(D),KF=n(D,"LI",{});var BXe=s(KF);JTe=n(BXe,"STRONG",{});var AVt=s(JTe);Anr=r(AVt,"camembert"),AVt.forEach(t),Lnr=r(BXe," \u2014 "),FH=n(BXe,"A",{href:!0});var LVt=s(FH);ynr=r(LVt,"CamembertForSequenceClassification"),LVt.forEach(t),xnr=r(BXe," (CamemBERT model)"),BXe.forEach(t),$nr=i(D),eT=n(D,"LI",{});var IXe=s(eT);YTe=n(IXe,"STRONG",{});var yVt=s(YTe);knr=r(yVt,"canine"),yVt.forEach(t),Snr=r(IXe," \u2014 "),TH=n(IXe,"A",{href:!0});var xVt=s(TH);Rnr=r(xVt,"CanineForSequenceClassification"),xVt.forEach(t),Pnr=r(IXe," (CANINE model)"),IXe.forEach(t),Bnr=i(D),oT=n(D,"LI",{});var NXe=s(oT);ZTe=n(NXe,"STRONG",{});var $Vt=s(ZTe);Inr=r($Vt,"convbert"),$Vt.forEach(t),Nnr=r(NXe," \u2014 "),MH=n(NXe,"A",{href:!0});var kVt=s(MH);qnr=r(kVt,"ConvBertForSequenceClassification"),kVt.forEach(t),jnr=r(NXe," (ConvBERT model)"),NXe.forEach(t),Dnr=i(D),rT=n(D,"LI",{});var qXe=s(rT);KTe=n(qXe,"STRONG",{});var SVt=s(KTe);Gnr=r(SVt,"ctrl"),SVt.forEach(t),Onr=r(qXe," \u2014 "),EH=n(qXe,"A",{href:!0});var RVt=s(EH);Vnr=r(RVt,"CTRLForSequenceClassification"),RVt.forEach(t),Xnr=r(qXe," (CTRL model)"),qXe.forEach(t),znr=i(D),tT=n(D,"LI",{});var jXe=s(tT);eMe=n(jXe,"STRONG",{});var PVt=s(eMe);Qnr=r(PVt,"data2vec-text"),PVt.forEach(t),Wnr=r(jXe," \u2014 "),CH=n(jXe,"A",{href:!0});var BVt=s(CH);Unr=r(BVt,"Data2VecTextForSequenceClassification"),BVt.forEach(t),Hnr=r(jXe," (Data2VecText model)"),jXe.forEach(t),Jnr=i(D),aT=n(D,"LI",{});var DXe=s(aT);oMe=n(DXe,"STRONG",{});var IVt=s(oMe);Ynr=r(IVt,"deberta"),IVt.forEach(t),Znr=r(DXe," \u2014 "),wH=n(DXe,"A",{href:!0});var NVt=s(wH);Knr=r(NVt,"DebertaForSequenceClassification"),NVt.forEach(t),esr=r(DXe," (DeBERTa model)"),DXe.forEach(t),osr=i(D),nT=n(D,"LI",{});var GXe=s(nT);rMe=n(GXe,"STRONG",{});var qVt=s(rMe);rsr=r(qVt,"deberta-v2"),qVt.forEach(t),tsr=r(GXe," \u2014 "),AH=n(GXe,"A",{href:!0});var jVt=s(AH);asr=r(jVt,"DebertaV2ForSequenceClassification"),jVt.forEach(t),nsr=r(GXe," (DeBERTa-v2 model)"),GXe.forEach(t),ssr=i(D),sT=n(D,"LI",{});var OXe=s(sT);tMe=n(OXe,"STRONG",{});var DVt=s(tMe);lsr=r(DVt,"distilbert"),DVt.forEach(t),isr=r(OXe," \u2014 "),LH=n(OXe,"A",{href:!0});var GVt=s(LH);dsr=r(GVt,"DistilBertForSequenceClassification"),GVt.forEach(t),csr=r(OXe," (DistilBERT model)"),OXe.forEach(t),msr=i(D),lT=n(D,"LI",{});var VXe=s(lT);aMe=n(VXe,"STRONG",{});var OVt=s(aMe);fsr=r(OVt,"electra"),OVt.forEach(t),gsr=r(VXe," \u2014 "),yH=n(VXe,"A",{href:!0});var VVt=s(yH);hsr=r(VVt,"ElectraForSequenceClassification"),VVt.forEach(t),usr=r(VXe," (ELECTRA model)"),VXe.forEach(t),psr=i(D),iT=n(D,"LI",{});var XXe=s(iT);nMe=n(XXe,"STRONG",{});var XVt=s(nMe);_sr=r(XVt,"ernie"),XVt.forEach(t),bsr=r(XXe," \u2014 "),xH=n(XXe,"A",{href:!0});var zVt=s(xH);vsr=r(zVt,"ErnieForSequenceClassification"),zVt.forEach(t),Fsr=r(XXe," (ERNIE model)"),XXe.forEach(t),Tsr=i(D),dT=n(D,"LI",{});var zXe=s(dT);sMe=n(zXe,"STRONG",{});var QVt=s(sMe);Msr=r(QVt,"esm"),QVt.forEach(t),Esr=r(zXe," \u2014 "),$H=n(zXe,"A",{href:!0});var WVt=s($H);Csr=r(WVt,"EsmForSequenceClassification"),WVt.forEach(t),wsr=r(zXe," (ESM model)"),zXe.forEach(t),Asr=i(D),cT=n(D,"LI",{});var QXe=s(cT);lMe=n(QXe,"STRONG",{});var UVt=s(lMe);Lsr=r(UVt,"flaubert"),UVt.forEach(t),ysr=r(QXe," \u2014 "),kH=n(QXe,"A",{href:!0});var HVt=s(kH);xsr=r(HVt,"FlaubertForSequenceClassification"),HVt.forEach(t),$sr=r(QXe," (FlauBERT model)"),QXe.forEach(t),ksr=i(D),mT=n(D,"LI",{});var WXe=s(mT);iMe=n(WXe,"STRONG",{});var JVt=s(iMe);Ssr=r(JVt,"fnet"),JVt.forEach(t),Rsr=r(WXe," \u2014 "),SH=n(WXe,"A",{href:!0});var YVt=s(SH);Psr=r(YVt,"FNetForSequenceClassification"),YVt.forEach(t),Bsr=r(WXe," (FNet model)"),WXe.forEach(t),Isr=i(D),fT=n(D,"LI",{});var UXe=s(fT);dMe=n(UXe,"STRONG",{});var ZVt=s(dMe);Nsr=r(ZVt,"funnel"),ZVt.forEach(t),qsr=r(UXe," \u2014 "),RH=n(UXe,"A",{href:!0});var KVt=s(RH);jsr=r(KVt,"FunnelForSequenceClassification"),KVt.forEach(t),Dsr=r(UXe," (Funnel Transformer model)"),UXe.forEach(t),Gsr=i(D),gT=n(D,"LI",{});var HXe=s(gT);cMe=n(HXe,"STRONG",{});var eXt=s(cMe);Osr=r(eXt,"gpt2"),eXt.forEach(t),Vsr=r(HXe," \u2014 "),PH=n(HXe,"A",{href:!0});var oXt=s(PH);Xsr=r(oXt,"GPT2ForSequenceClassification"),oXt.forEach(t),zsr=r(HXe," (OpenAI GPT-2 model)"),HXe.forEach(t),Qsr=i(D),hT=n(D,"LI",{});var JXe=s(hT);mMe=n(JXe,"STRONG",{});var rXt=s(mMe);Wsr=r(rXt,"gpt_neo"),rXt.forEach(t),Usr=r(JXe," \u2014 "),BH=n(JXe,"A",{href:!0});var tXt=s(BH);Hsr=r(tXt,"GPTNeoForSequenceClassification"),tXt.forEach(t),Jsr=r(JXe," (GPT Neo model)"),JXe.forEach(t),Ysr=i(D),uT=n(D,"LI",{});var YXe=s(uT);fMe=n(YXe,"STRONG",{});var aXt=s(fMe);Zsr=r(aXt,"gptj"),aXt.forEach(t),Ksr=r(YXe," \u2014 "),IH=n(YXe,"A",{href:!0});var nXt=s(IH);elr=r(nXt,"GPTJForSequenceClassification"),nXt.forEach(t),olr=r(YXe," (GPT-J model)"),YXe.forEach(t),rlr=i(D),pT=n(D,"LI",{});var ZXe=s(pT);gMe=n(ZXe,"STRONG",{});var sXt=s(gMe);tlr=r(sXt,"ibert"),sXt.forEach(t),alr=r(ZXe," \u2014 "),NH=n(ZXe,"A",{href:!0});var lXt=s(NH);nlr=r(lXt,"IBertForSequenceClassification"),lXt.forEach(t),slr=r(ZXe," (I-BERT model)"),ZXe.forEach(t),llr=i(D),_T=n(D,"LI",{});var KXe=s(_T);hMe=n(KXe,"STRONG",{});var iXt=s(hMe);ilr=r(iXt,"layoutlm"),iXt.forEach(t),dlr=r(KXe," \u2014 "),qH=n(KXe,"A",{href:!0});var dXt=s(qH);clr=r(dXt,"LayoutLMForSequenceClassification"),dXt.forEach(t),mlr=r(KXe," (LayoutLM model)"),KXe.forEach(t),flr=i(D),bT=n(D,"LI",{});var eze=s(bT);uMe=n(eze,"STRONG",{});var cXt=s(uMe);glr=r(cXt,"layoutlmv2"),cXt.forEach(t),hlr=r(eze," \u2014 "),jH=n(eze,"A",{href:!0});var mXt=s(jH);ulr=r(mXt,"LayoutLMv2ForSequenceClassification"),mXt.forEach(t),plr=r(eze," (LayoutLMv2 model)"),eze.forEach(t),_lr=i(D),vT=n(D,"LI",{});var oze=s(vT);pMe=n(oze,"STRONG",{});var fXt=s(pMe);blr=r(fXt,"layoutlmv3"),fXt.forEach(t),vlr=r(oze," \u2014 "),DH=n(oze,"A",{href:!0});var gXt=s(DH);Flr=r(gXt,"LayoutLMv3ForSequenceClassification"),gXt.forEach(t),Tlr=r(oze," (LayoutLMv3 model)"),oze.forEach(t),Mlr=i(D),FT=n(D,"LI",{});var rze=s(FT);_Me=n(rze,"STRONG",{});var hXt=s(_Me);Elr=r(hXt,"led"),hXt.forEach(t),Clr=r(rze," \u2014 "),GH=n(rze,"A",{href:!0});var uXt=s(GH);wlr=r(uXt,"LEDForSequenceClassification"),uXt.forEach(t),Alr=r(rze," (LED model)"),rze.forEach(t),Llr=i(D),TT=n(D,"LI",{});var tze=s(TT);bMe=n(tze,"STRONG",{});var pXt=s(bMe);ylr=r(pXt,"lilt"),pXt.forEach(t),xlr=r(tze," \u2014 "),OH=n(tze,"A",{href:!0});var _Xt=s(OH);$lr=r(_Xt,"LiltForSequenceClassification"),_Xt.forEach(t),klr=r(tze," (LiLT model)"),tze.forEach(t),Slr=i(D),MT=n(D,"LI",{});var aze=s(MT);vMe=n(aze,"STRONG",{});var bXt=s(vMe);Rlr=r(bXt,"longformer"),bXt.forEach(t),Plr=r(aze," \u2014 "),VH=n(aze,"A",{href:!0});var vXt=s(VH);Blr=r(vXt,"LongformerForSequenceClassification"),vXt.forEach(t),Ilr=r(aze," (Longformer model)"),aze.forEach(t),Nlr=i(D),ET=n(D,"LI",{});var nze=s(ET);FMe=n(nze,"STRONG",{});var FXt=s(FMe);qlr=r(FXt,"luke"),FXt.forEach(t),jlr=r(nze," \u2014 "),XH=n(nze,"A",{href:!0});var TXt=s(XH);Dlr=r(TXt,"LukeForSequenceClassification"),TXt.forEach(t),Glr=r(nze," (LUKE model)"),nze.forEach(t),Olr=i(D),CT=n(D,"LI",{});var sze=s(CT);TMe=n(sze,"STRONG",{});var MXt=s(TMe);Vlr=r(MXt,"markuplm"),MXt.forEach(t),Xlr=r(sze," \u2014 "),zH=n(sze,"A",{href:!0});var EXt=s(zH);zlr=r(EXt,"MarkupLMForSequenceClassification"),EXt.forEach(t),Qlr=r(sze," (MarkupLM model)"),sze.forEach(t),Wlr=i(D),wT=n(D,"LI",{});var lze=s(wT);MMe=n(lze,"STRONG",{});var CXt=s(MMe);Ulr=r(CXt,"mbart"),CXt.forEach(t),Hlr=r(lze," \u2014 "),QH=n(lze,"A",{href:!0});var wXt=s(QH);Jlr=r(wXt,"MBartForSequenceClassification"),wXt.forEach(t),Ylr=r(lze," (mBART model)"),lze.forEach(t),Zlr=i(D),AT=n(D,"LI",{});var ize=s(AT);EMe=n(ize,"STRONG",{});var AXt=s(EMe);Klr=r(AXt,"megatron-bert"),AXt.forEach(t),eir=r(ize," \u2014 "),WH=n(ize,"A",{href:!0});var LXt=s(WH);oir=r(LXt,"MegatronBertForSequenceClassification"),LXt.forEach(t),rir=r(ize," (Megatron-BERT model)"),ize.forEach(t),tir=i(D),LT=n(D,"LI",{});var dze=s(LT);CMe=n(dze,"STRONG",{});var yXt=s(CMe);air=r(yXt,"mobilebert"),yXt.forEach(t),nir=r(dze," \u2014 "),UH=n(dze,"A",{href:!0});var xXt=s(UH);sir=r(xXt,"MobileBertForSequenceClassification"),xXt.forEach(t),lir=r(dze," (MobileBERT model)"),dze.forEach(t),iir=i(D),yT=n(D,"LI",{});var cze=s(yT);wMe=n(cze,"STRONG",{});var $Xt=s(wMe);dir=r($Xt,"mpnet"),$Xt.forEach(t),cir=r(cze," \u2014 "),HH=n(cze,"A",{href:!0});var kXt=s(HH);mir=r(kXt,"MPNetForSequenceClassification"),kXt.forEach(t),fir=r(cze," (MPNet model)"),cze.forEach(t),gir=i(D),xT=n(D,"LI",{});var mze=s(xT);AMe=n(mze,"STRONG",{});var SXt=s(AMe);hir=r(SXt,"mvp"),SXt.forEach(t),uir=r(mze," \u2014 "),JH=n(mze,"A",{href:!0});var RXt=s(JH);pir=r(RXt,"MvpForSequenceClassification"),RXt.forEach(t),_ir=r(mze," (MVP model)"),mze.forEach(t),bir=i(D),$T=n(D,"LI",{});var fze=s($T);LMe=n(fze,"STRONG",{});var PXt=s(LMe);vir=r(PXt,"nezha"),PXt.forEach(t),Fir=r(fze," \u2014 "),YH=n(fze,"A",{href:!0});var BXt=s(YH);Tir=r(BXt,"NezhaForSequenceClassification"),BXt.forEach(t),Mir=r(fze," (Nezha model)"),fze.forEach(t),Eir=i(D),kT=n(D,"LI",{});var gze=s(kT);yMe=n(gze,"STRONG",{});var IXt=s(yMe);Cir=r(IXt,"nystromformer"),IXt.forEach(t),wir=r(gze," \u2014 "),ZH=n(gze,"A",{href:!0});var NXt=s(ZH);Air=r(NXt,"NystromformerForSequenceClassification"),NXt.forEach(t),Lir=r(gze," (Nystr\xF6mformer model)"),gze.forEach(t),yir=i(D),ST=n(D,"LI",{});var hze=s(ST);xMe=n(hze,"STRONG",{});var qXt=s(xMe);xir=r(qXt,"openai-gpt"),qXt.forEach(t),$ir=r(hze," \u2014 "),KH=n(hze,"A",{href:!0});var jXt=s(KH);kir=r(jXt,"OpenAIGPTForSequenceClassification"),jXt.forEach(t),Sir=r(hze," (OpenAI GPT model)"),hze.forEach(t),Rir=i(D),RT=n(D,"LI",{});var uze=s(RT);$Me=n(uze,"STRONG",{});var DXt=s($Me);Pir=r(DXt,"opt"),DXt.forEach(t),Bir=r(uze," \u2014 "),eJ=n(uze,"A",{href:!0});var GXt=s(eJ);Iir=r(GXt,"OPTForSequenceClassification"),GXt.forEach(t),Nir=r(uze," (OPT model)"),uze.forEach(t),qir=i(D),PT=n(D,"LI",{});var pze=s(PT);kMe=n(pze,"STRONG",{});var OXt=s(kMe);jir=r(OXt,"perceiver"),OXt.forEach(t),Dir=r(pze," \u2014 "),oJ=n(pze,"A",{href:!0});var VXt=s(oJ);Gir=r(VXt,"PerceiverForSequenceClassification"),VXt.forEach(t),Oir=r(pze," (Perceiver model)"),pze.forEach(t),Vir=i(D),BT=n(D,"LI",{});var _ze=s(BT);SMe=n(_ze,"STRONG",{});var XXt=s(SMe);Xir=r(XXt,"plbart"),XXt.forEach(t),zir=r(_ze," \u2014 "),rJ=n(_ze,"A",{href:!0});var zXt=s(rJ);Qir=r(zXt,"PLBartForSequenceClassification"),zXt.forEach(t),Wir=r(_ze," (PLBart model)"),_ze.forEach(t),Uir=i(D),IT=n(D,"LI",{});var bze=s(IT);RMe=n(bze,"STRONG",{});var QXt=s(RMe);Hir=r(QXt,"qdqbert"),QXt.forEach(t),Jir=r(bze," \u2014 "),tJ=n(bze,"A",{href:!0});var WXt=s(tJ);Yir=r(WXt,"QDQBertForSequenceClassification"),WXt.forEach(t),Zir=r(bze," (QDQBert model)"),bze.forEach(t),Kir=i(D),NT=n(D,"LI",{});var vze=s(NT);PMe=n(vze,"STRONG",{});var UXt=s(PMe);edr=r(UXt,"reformer"),UXt.forEach(t),odr=r(vze," \u2014 "),aJ=n(vze,"A",{href:!0});var HXt=s(aJ);rdr=r(HXt,"ReformerForSequenceClassification"),HXt.forEach(t),tdr=r(vze," (Reformer model)"),vze.forEach(t),adr=i(D),qT=n(D,"LI",{});var Fze=s(qT);BMe=n(Fze,"STRONG",{});var JXt=s(BMe);ndr=r(JXt,"rembert"),JXt.forEach(t),sdr=r(Fze," \u2014 "),nJ=n(Fze,"A",{href:!0});var YXt=s(nJ);ldr=r(YXt,"RemBertForSequenceClassification"),YXt.forEach(t),idr=r(Fze," (RemBERT model)"),Fze.forEach(t),ddr=i(D),jT=n(D,"LI",{});var Tze=s(jT);IMe=n(Tze,"STRONG",{});var ZXt=s(IMe);cdr=r(ZXt,"roberta"),ZXt.forEach(t),mdr=r(Tze," \u2014 "),sJ=n(Tze,"A",{href:!0});var KXt=s(sJ);fdr=r(KXt,"RobertaForSequenceClassification"),KXt.forEach(t),gdr=r(Tze," (RoBERTa model)"),Tze.forEach(t),hdr=i(D),DT=n(D,"LI",{});var Mze=s(DT);NMe=n(Mze,"STRONG",{});var ezt=s(NMe);udr=r(ezt,"roformer"),ezt.forEach(t),pdr=r(Mze," \u2014 "),lJ=n(Mze,"A",{href:!0});var ozt=s(lJ);_dr=r(ozt,"RoFormerForSequenceClassification"),ozt.forEach(t),bdr=r(Mze," (RoFormer model)"),Mze.forEach(t),vdr=i(D),GT=n(D,"LI",{});var Eze=s(GT);qMe=n(Eze,"STRONG",{});var rzt=s(qMe);Fdr=r(rzt,"squeezebert"),rzt.forEach(t),Tdr=r(Eze," \u2014 "),iJ=n(Eze,"A",{href:!0});var tzt=s(iJ);Mdr=r(tzt,"SqueezeBertForSequenceClassification"),tzt.forEach(t),Edr=r(Eze," (SqueezeBERT model)"),Eze.forEach(t),Cdr=i(D),OT=n(D,"LI",{});var Cze=s(OT);jMe=n(Cze,"STRONG",{});var azt=s(jMe);wdr=r(azt,"tapas"),azt.forEach(t),Adr=r(Cze," \u2014 "),dJ=n(Cze,"A",{href:!0});var nzt=s(dJ);Ldr=r(nzt,"TapasForSequenceClassification"),nzt.forEach(t),ydr=r(Cze," (TAPAS model)"),Cze.forEach(t),xdr=i(D),VT=n(D,"LI",{});var wze=s(VT);DMe=n(wze,"STRONG",{});var szt=s(DMe);$dr=r(szt,"transfo-xl"),szt.forEach(t),kdr=r(wze," \u2014 "),cJ=n(wze,"A",{href:!0});var lzt=s(cJ);Sdr=r(lzt,"TransfoXLForSequenceClassification"),lzt.forEach(t),Rdr=r(wze," (Transformer-XL model)"),wze.forEach(t),Pdr=i(D),XT=n(D,"LI",{});var Aze=s(XT);GMe=n(Aze,"STRONG",{});var izt=s(GMe);Bdr=r(izt,"xlm"),izt.forEach(t),Idr=r(Aze," \u2014 "),mJ=n(Aze,"A",{href:!0});var dzt=s(mJ);Ndr=r(dzt,"XLMForSequenceClassification"),dzt.forEach(t),qdr=r(Aze," (XLM model)"),Aze.forEach(t),jdr=i(D),zT=n(D,"LI",{});var Lze=s(zT);OMe=n(Lze,"STRONG",{});var czt=s(OMe);Ddr=r(czt,"xlm-roberta"),czt.forEach(t),Gdr=r(Lze," \u2014 "),fJ=n(Lze,"A",{href:!0});var mzt=s(fJ);Odr=r(mzt,"XLMRobertaForSequenceClassification"),mzt.forEach(t),Vdr=r(Lze," (XLM-RoBERTa model)"),Lze.forEach(t),Xdr=i(D),QT=n(D,"LI",{});var yze=s(QT);VMe=n(yze,"STRONG",{});var fzt=s(VMe);zdr=r(fzt,"xlm-roberta-xl"),fzt.forEach(t),Qdr=r(yze," \u2014 "),gJ=n(yze,"A",{href:!0});var gzt=s(gJ);Wdr=r(gzt,"XLMRobertaXLForSequenceClassification"),gzt.forEach(t),Udr=r(yze," (XLM-RoBERTa-XL model)"),yze.forEach(t),Hdr=i(D),WT=n(D,"LI",{});var xze=s(WT);XMe=n(xze,"STRONG",{});var hzt=s(XMe);Jdr=r(hzt,"xlnet"),hzt.forEach(t),Ydr=r(xze," \u2014 "),hJ=n(xze,"A",{href:!0});var uzt=s(hJ);Zdr=r(uzt,"XLNetForSequenceClassification"),uzt.forEach(t),Kdr=r(xze," (XLNet model)"),xze.forEach(t),ecr=i(D),UT=n(D,"LI",{});var $ze=s(UT);zMe=n($ze,"STRONG",{});var pzt=s(zMe);ocr=r(pzt,"yoso"),pzt.forEach(t),rcr=r($ze," \u2014 "),uJ=n($ze,"A",{href:!0});var _zt=s(uJ);tcr=r(_zt,"YosoForSequenceClassification"),_zt.forEach(t),acr=r($ze," (YOSO model)"),$ze.forEach(t),D.forEach(t),ncr=i(ya),HT=n(ya,"P",{});var kze=s(HT);scr=r(kze,"The model is set in evaluation mode by default using "),QMe=n(kze,"CODE",{});var bzt=s(QMe);lcr=r(bzt,"model.eval()"),bzt.forEach(t),icr=r(kze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),WMe=n(kze,"CODE",{});var vzt=s(WMe);dcr=r(vzt,"model.train()"),vzt.forEach(t),kze.forEach(t),ccr=i(ya),T(JT.$$.fragment,ya),ya.forEach(t),Nl.forEach(t),Fro=i(m),Od=n(m,"H2",{class:!0});var Iao=s(Od);YT=n(Iao,"A",{id:!0,class:!0,href:!0});var Fzt=s(YT);UMe=n(Fzt,"SPAN",{});var Tzt=s(UMe);T(q$.$$.fragment,Tzt),Tzt.forEach(t),Fzt.forEach(t),mcr=i(Iao),HMe=n(Iao,"SPAN",{});var Mzt=s(HMe);fcr=r(Mzt,"AutoModelForMultipleChoice"),Mzt.forEach(t),Iao.forEach(t),Tro=i(m),Go=n(m,"DIV",{class:!0});var ql=s(Go);T(j$.$$.fragment,ql),gcr=i(ql),Vd=n(ql,"P",{});var Tde=s(Vd);hcr=r(Tde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pJ=n(Tde,"A",{href:!0});var Ezt=s(pJ);ucr=r(Ezt,"from_pretrained()"),Ezt.forEach(t),pcr=r(Tde," class method or the "),_J=n(Tde,"A",{href:!0});var Czt=s(_J);_cr=r(Czt,"from_config()"),Czt.forEach(t),bcr=r(Tde,` class
method.`),Tde.forEach(t),vcr=i(ql),D$=n(ql,"P",{});var Nao=s(D$);Fcr=r(Nao,"This class cannot be instantiated directly using "),JMe=n(Nao,"CODE",{});var wzt=s(JMe);Tcr=r(wzt,"__init__()"),wzt.forEach(t),Mcr=r(Nao," (throws an error)."),Nao.forEach(t),Ecr=i(ql),wt=n(ql,"DIV",{class:!0});var Dy=s(wt);T(G$.$$.fragment,Dy),Ccr=i(Dy),YMe=n(Dy,"P",{});var Azt=s(YMe);wcr=r(Azt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Azt.forEach(t),Acr=i(Dy),Xd=n(Dy,"P",{});var Mde=s(Xd);Lcr=r(Mde,`Note:
Loading a model from its configuration file does `),ZMe=n(Mde,"STRONG",{});var Lzt=s(ZMe);ycr=r(Lzt,"not"),Lzt.forEach(t),xcr=r(Mde,` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=n(Mde,"A",{href:!0});var yzt=s(bJ);$cr=r(yzt,"from_pretrained()"),yzt.forEach(t),kcr=r(Mde," to load the model weights."),Mde.forEach(t),Scr=i(Dy),T(ZT.$$.fragment,Dy),Dy.forEach(t),Rcr=i(ql),no=n(ql,"DIV",{class:!0});var xa=s(no);T(O$.$$.fragment,xa),Pcr=i(xa),KMe=n(xa,"P",{});var xzt=s(KMe);Bcr=r(xzt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xzt.forEach(t),Icr=i(xa),sn=n(xa,"P",{});var Gy=s(sn);Ncr=r(Gy,"The model class to instantiate is selected based on the "),eEe=n(Gy,"CODE",{});var $zt=s(eEe);qcr=r($zt,"model_type"),$zt.forEach(t),jcr=r(Gy,` property of the config object (either
passed as an argument or loaded from `),oEe=n(Gy,"CODE",{});var kzt=s(oEe);Dcr=r(kzt,"pretrained_model_name_or_path"),kzt.forEach(t),Gcr=r(Gy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rEe=n(Gy,"CODE",{});var Szt=s(rEe);Ocr=r(Szt,"pretrained_model_name_or_path"),Szt.forEach(t),Vcr=r(Gy,":"),Gy.forEach(t),Xcr=i(xa),K=n(xa,"UL",{});var ee=s(K);KT=n(ee,"LI",{});var Sze=s(KT);tEe=n(Sze,"STRONG",{});var Rzt=s(tEe);zcr=r(Rzt,"albert"),Rzt.forEach(t),Qcr=r(Sze," \u2014 "),vJ=n(Sze,"A",{href:!0});var Pzt=s(vJ);Wcr=r(Pzt,"AlbertForMultipleChoice"),Pzt.forEach(t),Ucr=r(Sze," (ALBERT model)"),Sze.forEach(t),Hcr=i(ee),eM=n(ee,"LI",{});var Rze=s(eM);aEe=n(Rze,"STRONG",{});var Bzt=s(aEe);Jcr=r(Bzt,"bert"),Bzt.forEach(t),Ycr=r(Rze," \u2014 "),FJ=n(Rze,"A",{href:!0});var Izt=s(FJ);Zcr=r(Izt,"BertForMultipleChoice"),Izt.forEach(t),Kcr=r(Rze," (BERT model)"),Rze.forEach(t),emr=i(ee),oM=n(ee,"LI",{});var Pze=s(oM);nEe=n(Pze,"STRONG",{});var Nzt=s(nEe);omr=r(Nzt,"big_bird"),Nzt.forEach(t),rmr=r(Pze," \u2014 "),TJ=n(Pze,"A",{href:!0});var qzt=s(TJ);tmr=r(qzt,"BigBirdForMultipleChoice"),qzt.forEach(t),amr=r(Pze," (BigBird model)"),Pze.forEach(t),nmr=i(ee),rM=n(ee,"LI",{});var Bze=s(rM);sEe=n(Bze,"STRONG",{});var jzt=s(sEe);smr=r(jzt,"camembert"),jzt.forEach(t),lmr=r(Bze," \u2014 "),MJ=n(Bze,"A",{href:!0});var Dzt=s(MJ);imr=r(Dzt,"CamembertForMultipleChoice"),Dzt.forEach(t),dmr=r(Bze," (CamemBERT model)"),Bze.forEach(t),cmr=i(ee),tM=n(ee,"LI",{});var Ize=s(tM);lEe=n(Ize,"STRONG",{});var Gzt=s(lEe);mmr=r(Gzt,"canine"),Gzt.forEach(t),fmr=r(Ize," \u2014 "),EJ=n(Ize,"A",{href:!0});var Ozt=s(EJ);gmr=r(Ozt,"CanineForMultipleChoice"),Ozt.forEach(t),hmr=r(Ize," (CANINE model)"),Ize.forEach(t),umr=i(ee),aM=n(ee,"LI",{});var Nze=s(aM);iEe=n(Nze,"STRONG",{});var Vzt=s(iEe);pmr=r(Vzt,"convbert"),Vzt.forEach(t),_mr=r(Nze," \u2014 "),CJ=n(Nze,"A",{href:!0});var Xzt=s(CJ);bmr=r(Xzt,"ConvBertForMultipleChoice"),Xzt.forEach(t),vmr=r(Nze," (ConvBERT model)"),Nze.forEach(t),Fmr=i(ee),nM=n(ee,"LI",{});var qze=s(nM);dEe=n(qze,"STRONG",{});var zzt=s(dEe);Tmr=r(zzt,"data2vec-text"),zzt.forEach(t),Mmr=r(qze," \u2014 "),wJ=n(qze,"A",{href:!0});var Qzt=s(wJ);Emr=r(Qzt,"Data2VecTextForMultipleChoice"),Qzt.forEach(t),Cmr=r(qze," (Data2VecText model)"),qze.forEach(t),wmr=i(ee),sM=n(ee,"LI",{});var jze=s(sM);cEe=n(jze,"STRONG",{});var Wzt=s(cEe);Amr=r(Wzt,"deberta-v2"),Wzt.forEach(t),Lmr=r(jze," \u2014 "),AJ=n(jze,"A",{href:!0});var Uzt=s(AJ);ymr=r(Uzt,"DebertaV2ForMultipleChoice"),Uzt.forEach(t),xmr=r(jze," (DeBERTa-v2 model)"),jze.forEach(t),$mr=i(ee),lM=n(ee,"LI",{});var Dze=s(lM);mEe=n(Dze,"STRONG",{});var Hzt=s(mEe);kmr=r(Hzt,"distilbert"),Hzt.forEach(t),Smr=r(Dze," \u2014 "),LJ=n(Dze,"A",{href:!0});var Jzt=s(LJ);Rmr=r(Jzt,"DistilBertForMultipleChoice"),Jzt.forEach(t),Pmr=r(Dze," (DistilBERT model)"),Dze.forEach(t),Bmr=i(ee),iM=n(ee,"LI",{});var Gze=s(iM);fEe=n(Gze,"STRONG",{});var Yzt=s(fEe);Imr=r(Yzt,"electra"),Yzt.forEach(t),Nmr=r(Gze," \u2014 "),yJ=n(Gze,"A",{href:!0});var Zzt=s(yJ);qmr=r(Zzt,"ElectraForMultipleChoice"),Zzt.forEach(t),jmr=r(Gze," (ELECTRA model)"),Gze.forEach(t),Dmr=i(ee),dM=n(ee,"LI",{});var Oze=s(dM);gEe=n(Oze,"STRONG",{});var Kzt=s(gEe);Gmr=r(Kzt,"ernie"),Kzt.forEach(t),Omr=r(Oze," \u2014 "),xJ=n(Oze,"A",{href:!0});var eQt=s(xJ);Vmr=r(eQt,"ErnieForMultipleChoice"),eQt.forEach(t),Xmr=r(Oze," (ERNIE model)"),Oze.forEach(t),zmr=i(ee),cM=n(ee,"LI",{});var Vze=s(cM);hEe=n(Vze,"STRONG",{});var oQt=s(hEe);Qmr=r(oQt,"flaubert"),oQt.forEach(t),Wmr=r(Vze," \u2014 "),$J=n(Vze,"A",{href:!0});var rQt=s($J);Umr=r(rQt,"FlaubertForMultipleChoice"),rQt.forEach(t),Hmr=r(Vze," (FlauBERT model)"),Vze.forEach(t),Jmr=i(ee),mM=n(ee,"LI",{});var Xze=s(mM);uEe=n(Xze,"STRONG",{});var tQt=s(uEe);Ymr=r(tQt,"fnet"),tQt.forEach(t),Zmr=r(Xze," \u2014 "),kJ=n(Xze,"A",{href:!0});var aQt=s(kJ);Kmr=r(aQt,"FNetForMultipleChoice"),aQt.forEach(t),efr=r(Xze," (FNet model)"),Xze.forEach(t),ofr=i(ee),fM=n(ee,"LI",{});var zze=s(fM);pEe=n(zze,"STRONG",{});var nQt=s(pEe);rfr=r(nQt,"funnel"),nQt.forEach(t),tfr=r(zze," \u2014 "),SJ=n(zze,"A",{href:!0});var sQt=s(SJ);afr=r(sQt,"FunnelForMultipleChoice"),sQt.forEach(t),nfr=r(zze," (Funnel Transformer model)"),zze.forEach(t),sfr=i(ee),gM=n(ee,"LI",{});var Qze=s(gM);_Ee=n(Qze,"STRONG",{});var lQt=s(_Ee);lfr=r(lQt,"ibert"),lQt.forEach(t),ifr=r(Qze," \u2014 "),RJ=n(Qze,"A",{href:!0});var iQt=s(RJ);dfr=r(iQt,"IBertForMultipleChoice"),iQt.forEach(t),cfr=r(Qze," (I-BERT model)"),Qze.forEach(t),mfr=i(ee),hM=n(ee,"LI",{});var Wze=s(hM);bEe=n(Wze,"STRONG",{});var dQt=s(bEe);ffr=r(dQt,"longformer"),dQt.forEach(t),gfr=r(Wze," \u2014 "),PJ=n(Wze,"A",{href:!0});var cQt=s(PJ);hfr=r(cQt,"LongformerForMultipleChoice"),cQt.forEach(t),ufr=r(Wze," (Longformer model)"),Wze.forEach(t),pfr=i(ee),uM=n(ee,"LI",{});var Uze=s(uM);vEe=n(Uze,"STRONG",{});var mQt=s(vEe);_fr=r(mQt,"luke"),mQt.forEach(t),bfr=r(Uze," \u2014 "),BJ=n(Uze,"A",{href:!0});var fQt=s(BJ);vfr=r(fQt,"LukeForMultipleChoice"),fQt.forEach(t),Ffr=r(Uze," (LUKE model)"),Uze.forEach(t),Tfr=i(ee),pM=n(ee,"LI",{});var Hze=s(pM);FEe=n(Hze,"STRONG",{});var gQt=s(FEe);Mfr=r(gQt,"megatron-bert"),gQt.forEach(t),Efr=r(Hze," \u2014 "),IJ=n(Hze,"A",{href:!0});var hQt=s(IJ);Cfr=r(hQt,"MegatronBertForMultipleChoice"),hQt.forEach(t),wfr=r(Hze," (Megatron-BERT model)"),Hze.forEach(t),Afr=i(ee),_M=n(ee,"LI",{});var Jze=s(_M);TEe=n(Jze,"STRONG",{});var uQt=s(TEe);Lfr=r(uQt,"mobilebert"),uQt.forEach(t),yfr=r(Jze," \u2014 "),NJ=n(Jze,"A",{href:!0});var pQt=s(NJ);xfr=r(pQt,"MobileBertForMultipleChoice"),pQt.forEach(t),$fr=r(Jze," (MobileBERT model)"),Jze.forEach(t),kfr=i(ee),bM=n(ee,"LI",{});var Yze=s(bM);MEe=n(Yze,"STRONG",{});var _Qt=s(MEe);Sfr=r(_Qt,"mpnet"),_Qt.forEach(t),Rfr=r(Yze," \u2014 "),qJ=n(Yze,"A",{href:!0});var bQt=s(qJ);Pfr=r(bQt,"MPNetForMultipleChoice"),bQt.forEach(t),Bfr=r(Yze," (MPNet model)"),Yze.forEach(t),Ifr=i(ee),vM=n(ee,"LI",{});var Zze=s(vM);EEe=n(Zze,"STRONG",{});var vQt=s(EEe);Nfr=r(vQt,"nezha"),vQt.forEach(t),qfr=r(Zze," \u2014 "),jJ=n(Zze,"A",{href:!0});var FQt=s(jJ);jfr=r(FQt,"NezhaForMultipleChoice"),FQt.forEach(t),Dfr=r(Zze," (Nezha model)"),Zze.forEach(t),Gfr=i(ee),FM=n(ee,"LI",{});var Kze=s(FM);CEe=n(Kze,"STRONG",{});var TQt=s(CEe);Ofr=r(TQt,"nystromformer"),TQt.forEach(t),Vfr=r(Kze," \u2014 "),DJ=n(Kze,"A",{href:!0});var MQt=s(DJ);Xfr=r(MQt,"NystromformerForMultipleChoice"),MQt.forEach(t),zfr=r(Kze," (Nystr\xF6mformer model)"),Kze.forEach(t),Qfr=i(ee),TM=n(ee,"LI",{});var eQe=s(TM);wEe=n(eQe,"STRONG",{});var EQt=s(wEe);Wfr=r(EQt,"qdqbert"),EQt.forEach(t),Ufr=r(eQe," \u2014 "),GJ=n(eQe,"A",{href:!0});var CQt=s(GJ);Hfr=r(CQt,"QDQBertForMultipleChoice"),CQt.forEach(t),Jfr=r(eQe," (QDQBert model)"),eQe.forEach(t),Yfr=i(ee),MM=n(ee,"LI",{});var oQe=s(MM);AEe=n(oQe,"STRONG",{});var wQt=s(AEe);Zfr=r(wQt,"rembert"),wQt.forEach(t),Kfr=r(oQe," \u2014 "),OJ=n(oQe,"A",{href:!0});var AQt=s(OJ);egr=r(AQt,"RemBertForMultipleChoice"),AQt.forEach(t),ogr=r(oQe," (RemBERT model)"),oQe.forEach(t),rgr=i(ee),EM=n(ee,"LI",{});var rQe=s(EM);LEe=n(rQe,"STRONG",{});var LQt=s(LEe);tgr=r(LQt,"roberta"),LQt.forEach(t),agr=r(rQe," \u2014 "),VJ=n(rQe,"A",{href:!0});var yQt=s(VJ);ngr=r(yQt,"RobertaForMultipleChoice"),yQt.forEach(t),sgr=r(rQe," (RoBERTa model)"),rQe.forEach(t),lgr=i(ee),CM=n(ee,"LI",{});var tQe=s(CM);yEe=n(tQe,"STRONG",{});var xQt=s(yEe);igr=r(xQt,"roformer"),xQt.forEach(t),dgr=r(tQe," \u2014 "),XJ=n(tQe,"A",{href:!0});var $Qt=s(XJ);cgr=r($Qt,"RoFormerForMultipleChoice"),$Qt.forEach(t),mgr=r(tQe," (RoFormer model)"),tQe.forEach(t),fgr=i(ee),wM=n(ee,"LI",{});var aQe=s(wM);xEe=n(aQe,"STRONG",{});var kQt=s(xEe);ggr=r(kQt,"squeezebert"),kQt.forEach(t),hgr=r(aQe," \u2014 "),zJ=n(aQe,"A",{href:!0});var SQt=s(zJ);ugr=r(SQt,"SqueezeBertForMultipleChoice"),SQt.forEach(t),pgr=r(aQe," (SqueezeBERT model)"),aQe.forEach(t),_gr=i(ee),AM=n(ee,"LI",{});var nQe=s(AM);$Ee=n(nQe,"STRONG",{});var RQt=s($Ee);bgr=r(RQt,"xlm"),RQt.forEach(t),vgr=r(nQe," \u2014 "),QJ=n(nQe,"A",{href:!0});var PQt=s(QJ);Fgr=r(PQt,"XLMForMultipleChoice"),PQt.forEach(t),Tgr=r(nQe," (XLM model)"),nQe.forEach(t),Mgr=i(ee),LM=n(ee,"LI",{});var sQe=s(LM);kEe=n(sQe,"STRONG",{});var BQt=s(kEe);Egr=r(BQt,"xlm-roberta"),BQt.forEach(t),Cgr=r(sQe," \u2014 "),WJ=n(sQe,"A",{href:!0});var IQt=s(WJ);wgr=r(IQt,"XLMRobertaForMultipleChoice"),IQt.forEach(t),Agr=r(sQe," (XLM-RoBERTa model)"),sQe.forEach(t),Lgr=i(ee),yM=n(ee,"LI",{});var lQe=s(yM);SEe=n(lQe,"STRONG",{});var NQt=s(SEe);ygr=r(NQt,"xlm-roberta-xl"),NQt.forEach(t),xgr=r(lQe," \u2014 "),UJ=n(lQe,"A",{href:!0});var qQt=s(UJ);$gr=r(qQt,"XLMRobertaXLForMultipleChoice"),qQt.forEach(t),kgr=r(lQe," (XLM-RoBERTa-XL model)"),lQe.forEach(t),Sgr=i(ee),xM=n(ee,"LI",{});var iQe=s(xM);REe=n(iQe,"STRONG",{});var jQt=s(REe);Rgr=r(jQt,"xlnet"),jQt.forEach(t),Pgr=r(iQe," \u2014 "),HJ=n(iQe,"A",{href:!0});var DQt=s(HJ);Bgr=r(DQt,"XLNetForMultipleChoice"),DQt.forEach(t),Igr=r(iQe," (XLNet model)"),iQe.forEach(t),Ngr=i(ee),$M=n(ee,"LI",{});var dQe=s($M);PEe=n(dQe,"STRONG",{});var GQt=s(PEe);qgr=r(GQt,"yoso"),GQt.forEach(t),jgr=r(dQe," \u2014 "),JJ=n(dQe,"A",{href:!0});var OQt=s(JJ);Dgr=r(OQt,"YosoForMultipleChoice"),OQt.forEach(t),Ggr=r(dQe," (YOSO model)"),dQe.forEach(t),ee.forEach(t),Ogr=i(xa),kM=n(xa,"P",{});var cQe=s(kM);Vgr=r(cQe,"The model is set in evaluation mode by default using "),BEe=n(cQe,"CODE",{});var VQt=s(BEe);Xgr=r(VQt,"model.eval()"),VQt.forEach(t),zgr=r(cQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),IEe=n(cQe,"CODE",{});var XQt=s(IEe);Qgr=r(XQt,"model.train()"),XQt.forEach(t),cQe.forEach(t),Wgr=i(xa),T(SM.$$.fragment,xa),xa.forEach(t),ql.forEach(t),Mro=i(m),zd=n(m,"H2",{class:!0});var qao=s(zd);RM=n(qao,"A",{id:!0,class:!0,href:!0});var zQt=s(RM);NEe=n(zQt,"SPAN",{});var QQt=s(NEe);T(V$.$$.fragment,QQt),QQt.forEach(t),zQt.forEach(t),Ugr=i(qao),qEe=n(qao,"SPAN",{});var WQt=s(qEe);Hgr=r(WQt,"AutoModelForNextSentencePrediction"),WQt.forEach(t),qao.forEach(t),Ero=i(m),Oo=n(m,"DIV",{class:!0});var jl=s(Oo);T(X$.$$.fragment,jl),Jgr=i(jl),Qd=n(jl,"P",{});var Ede=s(Qd);Ygr=r(Ede,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YJ=n(Ede,"A",{href:!0});var UQt=s(YJ);Zgr=r(UQt,"from_pretrained()"),UQt.forEach(t),Kgr=r(Ede," class method or the "),ZJ=n(Ede,"A",{href:!0});var HQt=s(ZJ);ehr=r(HQt,"from_config()"),HQt.forEach(t),ohr=r(Ede,` class
method.`),Ede.forEach(t),rhr=i(jl),z$=n(jl,"P",{});var jao=s(z$);thr=r(jao,"This class cannot be instantiated directly using "),jEe=n(jao,"CODE",{});var JQt=s(jEe);ahr=r(JQt,"__init__()"),JQt.forEach(t),nhr=r(jao," (throws an error)."),jao.forEach(t),shr=i(jl),At=n(jl,"DIV",{class:!0});var Oy=s(At);T(Q$.$$.fragment,Oy),lhr=i(Oy),DEe=n(Oy,"P",{});var YQt=s(DEe);ihr=r(YQt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),YQt.forEach(t),dhr=i(Oy),Wd=n(Oy,"P",{});var Cde=s(Wd);chr=r(Cde,`Note:
Loading a model from its configuration file does `),GEe=n(Cde,"STRONG",{});var ZQt=s(GEe);mhr=r(ZQt,"not"),ZQt.forEach(t),fhr=r(Cde,` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=n(Cde,"A",{href:!0});var KQt=s(KJ);ghr=r(KQt,"from_pretrained()"),KQt.forEach(t),hhr=r(Cde," to load the model weights."),Cde.forEach(t),uhr=i(Oy),T(PM.$$.fragment,Oy),Oy.forEach(t),phr=i(jl),so=n(jl,"DIV",{class:!0});var $a=s(so);T(W$.$$.fragment,$a),_hr=i($a),OEe=n($a,"P",{});var eWt=s(OEe);bhr=r(eWt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),eWt.forEach(t),vhr=i($a),ln=n($a,"P",{});var Vy=s(ln);Fhr=r(Vy,"The model class to instantiate is selected based on the "),VEe=n(Vy,"CODE",{});var oWt=s(VEe);Thr=r(oWt,"model_type"),oWt.forEach(t),Mhr=r(Vy,` property of the config object (either
passed as an argument or loaded from `),XEe=n(Vy,"CODE",{});var rWt=s(XEe);Ehr=r(rWt,"pretrained_model_name_or_path"),rWt.forEach(t),Chr=r(Vy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zEe=n(Vy,"CODE",{});var tWt=s(zEe);whr=r(tWt,"pretrained_model_name_or_path"),tWt.forEach(t),Ahr=r(Vy,":"),Vy.forEach(t),Lhr=i($a),Ue=n($a,"UL",{});var ft=s(Ue);BM=n(ft,"LI",{});var mQe=s(BM);QEe=n(mQe,"STRONG",{});var aWt=s(QEe);yhr=r(aWt,"bert"),aWt.forEach(t),xhr=r(mQe," \u2014 "),eY=n(mQe,"A",{href:!0});var nWt=s(eY);$hr=r(nWt,"BertForNextSentencePrediction"),nWt.forEach(t),khr=r(mQe," (BERT model)"),mQe.forEach(t),Shr=i(ft),IM=n(ft,"LI",{});var fQe=s(IM);WEe=n(fQe,"STRONG",{});var sWt=s(WEe);Rhr=r(sWt,"ernie"),sWt.forEach(t),Phr=r(fQe," \u2014 "),oY=n(fQe,"A",{href:!0});var lWt=s(oY);Bhr=r(lWt,"ErnieForNextSentencePrediction"),lWt.forEach(t),Ihr=r(fQe," (ERNIE model)"),fQe.forEach(t),Nhr=i(ft),NM=n(ft,"LI",{});var gQe=s(NM);UEe=n(gQe,"STRONG",{});var iWt=s(UEe);qhr=r(iWt,"fnet"),iWt.forEach(t),jhr=r(gQe," \u2014 "),rY=n(gQe,"A",{href:!0});var dWt=s(rY);Dhr=r(dWt,"FNetForNextSentencePrediction"),dWt.forEach(t),Ghr=r(gQe," (FNet model)"),gQe.forEach(t),Ohr=i(ft),qM=n(ft,"LI",{});var hQe=s(qM);HEe=n(hQe,"STRONG",{});var cWt=s(HEe);Vhr=r(cWt,"megatron-bert"),cWt.forEach(t),Xhr=r(hQe," \u2014 "),tY=n(hQe,"A",{href:!0});var mWt=s(tY);zhr=r(mWt,"MegatronBertForNextSentencePrediction"),mWt.forEach(t),Qhr=r(hQe," (Megatron-BERT model)"),hQe.forEach(t),Whr=i(ft),jM=n(ft,"LI",{});var uQe=s(jM);JEe=n(uQe,"STRONG",{});var fWt=s(JEe);Uhr=r(fWt,"mobilebert"),fWt.forEach(t),Hhr=r(uQe," \u2014 "),aY=n(uQe,"A",{href:!0});var gWt=s(aY);Jhr=r(gWt,"MobileBertForNextSentencePrediction"),gWt.forEach(t),Yhr=r(uQe," (MobileBERT model)"),uQe.forEach(t),Zhr=i(ft),DM=n(ft,"LI",{});var pQe=s(DM);YEe=n(pQe,"STRONG",{});var hWt=s(YEe);Khr=r(hWt,"nezha"),hWt.forEach(t),eur=r(pQe," \u2014 "),nY=n(pQe,"A",{href:!0});var uWt=s(nY);our=r(uWt,"NezhaForNextSentencePrediction"),uWt.forEach(t),rur=r(pQe," (Nezha model)"),pQe.forEach(t),tur=i(ft),GM=n(ft,"LI",{});var _Qe=s(GM);ZEe=n(_Qe,"STRONG",{});var pWt=s(ZEe);aur=r(pWt,"qdqbert"),pWt.forEach(t),nur=r(_Qe," \u2014 "),sY=n(_Qe,"A",{href:!0});var _Wt=s(sY);sur=r(_Wt,"QDQBertForNextSentencePrediction"),_Wt.forEach(t),lur=r(_Qe," (QDQBert model)"),_Qe.forEach(t),ft.forEach(t),iur=i($a),OM=n($a,"P",{});var bQe=s(OM);dur=r(bQe,"The model is set in evaluation mode by default using "),KEe=n(bQe,"CODE",{});var bWt=s(KEe);cur=r(bWt,"model.eval()"),bWt.forEach(t),mur=r(bQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e4e=n(bQe,"CODE",{});var vWt=s(e4e);fur=r(vWt,"model.train()"),vWt.forEach(t),bQe.forEach(t),gur=i($a),T(VM.$$.fragment,$a),$a.forEach(t),jl.forEach(t),Cro=i(m),Ud=n(m,"H2",{class:!0});var Dao=s(Ud);XM=n(Dao,"A",{id:!0,class:!0,href:!0});var FWt=s(XM);o4e=n(FWt,"SPAN",{});var TWt=s(o4e);T(U$.$$.fragment,TWt),TWt.forEach(t),FWt.forEach(t),hur=i(Dao),r4e=n(Dao,"SPAN",{});var MWt=s(r4e);uur=r(MWt,"AutoModelForTokenClassification"),MWt.forEach(t),Dao.forEach(t),wro=i(m),Vo=n(m,"DIV",{class:!0});var Dl=s(Vo);T(H$.$$.fragment,Dl),pur=i(Dl),Hd=n(Dl,"P",{});var wde=s(Hd);_ur=r(wde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lY=n(wde,"A",{href:!0});var EWt=s(lY);bur=r(EWt,"from_pretrained()"),EWt.forEach(t),vur=r(wde," class method or the "),iY=n(wde,"A",{href:!0});var CWt=s(iY);Fur=r(CWt,"from_config()"),CWt.forEach(t),Tur=r(wde,` class
method.`),wde.forEach(t),Mur=i(Dl),J$=n(Dl,"P",{});var Gao=s(J$);Eur=r(Gao,"This class cannot be instantiated directly using "),t4e=n(Gao,"CODE",{});var wWt=s(t4e);Cur=r(wWt,"__init__()"),wWt.forEach(t),wur=r(Gao," (throws an error)."),Gao.forEach(t),Aur=i(Dl),Lt=n(Dl,"DIV",{class:!0});var Xy=s(Lt);T(Y$.$$.fragment,Xy),Lur=i(Xy),a4e=n(Xy,"P",{});var AWt=s(a4e);yur=r(AWt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),AWt.forEach(t),xur=i(Xy),Jd=n(Xy,"P",{});var Ade=s(Jd);$ur=r(Ade,`Note:
Loading a model from its configuration file does `),n4e=n(Ade,"STRONG",{});var LWt=s(n4e);kur=r(LWt,"not"),LWt.forEach(t),Sur=r(Ade,` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=n(Ade,"A",{href:!0});var yWt=s(dY);Rur=r(yWt,"from_pretrained()"),yWt.forEach(t),Pur=r(Ade," to load the model weights."),Ade.forEach(t),Bur=i(Xy),T(zM.$$.fragment,Xy),Xy.forEach(t),Iur=i(Dl),lo=n(Dl,"DIV",{class:!0});var ka=s(lo);T(Z$.$$.fragment,ka),Nur=i(ka),s4e=n(ka,"P",{});var xWt=s(s4e);qur=r(xWt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xWt.forEach(t),jur=i(ka),dn=n(ka,"P",{});var zy=s(dn);Dur=r(zy,"The model class to instantiate is selected based on the "),l4e=n(zy,"CODE",{});var $Wt=s(l4e);Gur=r($Wt,"model_type"),$Wt.forEach(t),Our=r(zy,` property of the config object (either
passed as an argument or loaded from `),i4e=n(zy,"CODE",{});var kWt=s(i4e);Vur=r(kWt,"pretrained_model_name_or_path"),kWt.forEach(t),Xur=r(zy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d4e=n(zy,"CODE",{});var SWt=s(d4e);zur=r(SWt,"pretrained_model_name_or_path"),SWt.forEach(t),Qur=r(zy,":"),zy.forEach(t),Wur=i(ka),U=n(ka,"UL",{});var J=s(U);QM=n(J,"LI",{});var vQe=s(QM);c4e=n(vQe,"STRONG",{});var RWt=s(c4e);Uur=r(RWt,"albert"),RWt.forEach(t),Hur=r(vQe," \u2014 "),cY=n(vQe,"A",{href:!0});var PWt=s(cY);Jur=r(PWt,"AlbertForTokenClassification"),PWt.forEach(t),Yur=r(vQe," (ALBERT model)"),vQe.forEach(t),Zur=i(J),WM=n(J,"LI",{});var FQe=s(WM);m4e=n(FQe,"STRONG",{});var BWt=s(m4e);Kur=r(BWt,"bert"),BWt.forEach(t),epr=r(FQe," \u2014 "),mY=n(FQe,"A",{href:!0});var IWt=s(mY);opr=r(IWt,"BertForTokenClassification"),IWt.forEach(t),rpr=r(FQe," (BERT model)"),FQe.forEach(t),tpr=i(J),UM=n(J,"LI",{});var TQe=s(UM);f4e=n(TQe,"STRONG",{});var NWt=s(f4e);apr=r(NWt,"big_bird"),NWt.forEach(t),npr=r(TQe," \u2014 "),fY=n(TQe,"A",{href:!0});var qWt=s(fY);spr=r(qWt,"BigBirdForTokenClassification"),qWt.forEach(t),lpr=r(TQe," (BigBird model)"),TQe.forEach(t),ipr=i(J),HM=n(J,"LI",{});var MQe=s(HM);g4e=n(MQe,"STRONG",{});var jWt=s(g4e);dpr=r(jWt,"bloom"),jWt.forEach(t),cpr=r(MQe," \u2014 "),gY=n(MQe,"A",{href:!0});var DWt=s(gY);mpr=r(DWt,"BloomForTokenClassification"),DWt.forEach(t),fpr=r(MQe," (BLOOM model)"),MQe.forEach(t),gpr=i(J),JM=n(J,"LI",{});var EQe=s(JM);h4e=n(EQe,"STRONG",{});var GWt=s(h4e);hpr=r(GWt,"camembert"),GWt.forEach(t),upr=r(EQe," \u2014 "),hY=n(EQe,"A",{href:!0});var OWt=s(hY);ppr=r(OWt,"CamembertForTokenClassification"),OWt.forEach(t),_pr=r(EQe," (CamemBERT model)"),EQe.forEach(t),bpr=i(J),YM=n(J,"LI",{});var CQe=s(YM);u4e=n(CQe,"STRONG",{});var VWt=s(u4e);vpr=r(VWt,"canine"),VWt.forEach(t),Fpr=r(CQe," \u2014 "),uY=n(CQe,"A",{href:!0});var XWt=s(uY);Tpr=r(XWt,"CanineForTokenClassification"),XWt.forEach(t),Mpr=r(CQe," (CANINE model)"),CQe.forEach(t),Epr=i(J),ZM=n(J,"LI",{});var wQe=s(ZM);p4e=n(wQe,"STRONG",{});var zWt=s(p4e);Cpr=r(zWt,"convbert"),zWt.forEach(t),wpr=r(wQe," \u2014 "),pY=n(wQe,"A",{href:!0});var QWt=s(pY);Apr=r(QWt,"ConvBertForTokenClassification"),QWt.forEach(t),Lpr=r(wQe," (ConvBERT model)"),wQe.forEach(t),ypr=i(J),KM=n(J,"LI",{});var AQe=s(KM);_4e=n(AQe,"STRONG",{});var WWt=s(_4e);xpr=r(WWt,"data2vec-text"),WWt.forEach(t),$pr=r(AQe," \u2014 "),_Y=n(AQe,"A",{href:!0});var UWt=s(_Y);kpr=r(UWt,"Data2VecTextForTokenClassification"),UWt.forEach(t),Spr=r(AQe," (Data2VecText model)"),AQe.forEach(t),Rpr=i(J),eE=n(J,"LI",{});var LQe=s(eE);b4e=n(LQe,"STRONG",{});var HWt=s(b4e);Ppr=r(HWt,"deberta"),HWt.forEach(t),Bpr=r(LQe," \u2014 "),bY=n(LQe,"A",{href:!0});var JWt=s(bY);Ipr=r(JWt,"DebertaForTokenClassification"),JWt.forEach(t),Npr=r(LQe," (DeBERTa model)"),LQe.forEach(t),qpr=i(J),oE=n(J,"LI",{});var yQe=s(oE);v4e=n(yQe,"STRONG",{});var YWt=s(v4e);jpr=r(YWt,"deberta-v2"),YWt.forEach(t),Dpr=r(yQe," \u2014 "),vY=n(yQe,"A",{href:!0});var ZWt=s(vY);Gpr=r(ZWt,"DebertaV2ForTokenClassification"),ZWt.forEach(t),Opr=r(yQe," (DeBERTa-v2 model)"),yQe.forEach(t),Vpr=i(J),rE=n(J,"LI",{});var xQe=s(rE);F4e=n(xQe,"STRONG",{});var KWt=s(F4e);Xpr=r(KWt,"distilbert"),KWt.forEach(t),zpr=r(xQe," \u2014 "),FY=n(xQe,"A",{href:!0});var eUt=s(FY);Qpr=r(eUt,"DistilBertForTokenClassification"),eUt.forEach(t),Wpr=r(xQe," (DistilBERT model)"),xQe.forEach(t),Upr=i(J),tE=n(J,"LI",{});var $Qe=s(tE);T4e=n($Qe,"STRONG",{});var oUt=s(T4e);Hpr=r(oUt,"electra"),oUt.forEach(t),Jpr=r($Qe," \u2014 "),TY=n($Qe,"A",{href:!0});var rUt=s(TY);Ypr=r(rUt,"ElectraForTokenClassification"),rUt.forEach(t),Zpr=r($Qe," (ELECTRA model)"),$Qe.forEach(t),Kpr=i(J),aE=n(J,"LI",{});var kQe=s(aE);M4e=n(kQe,"STRONG",{});var tUt=s(M4e);e_r=r(tUt,"ernie"),tUt.forEach(t),o_r=r(kQe," \u2014 "),MY=n(kQe,"A",{href:!0});var aUt=s(MY);r_r=r(aUt,"ErnieForTokenClassification"),aUt.forEach(t),t_r=r(kQe," (ERNIE model)"),kQe.forEach(t),a_r=i(J),nE=n(J,"LI",{});var SQe=s(nE);E4e=n(SQe,"STRONG",{});var nUt=s(E4e);n_r=r(nUt,"esm"),nUt.forEach(t),s_r=r(SQe," \u2014 "),EY=n(SQe,"A",{href:!0});var sUt=s(EY);l_r=r(sUt,"EsmForTokenClassification"),sUt.forEach(t),i_r=r(SQe," (ESM model)"),SQe.forEach(t),d_r=i(J),sE=n(J,"LI",{});var RQe=s(sE);C4e=n(RQe,"STRONG",{});var lUt=s(C4e);c_r=r(lUt,"flaubert"),lUt.forEach(t),m_r=r(RQe," \u2014 "),CY=n(RQe,"A",{href:!0});var iUt=s(CY);f_r=r(iUt,"FlaubertForTokenClassification"),iUt.forEach(t),g_r=r(RQe," (FlauBERT model)"),RQe.forEach(t),h_r=i(J),lE=n(J,"LI",{});var PQe=s(lE);w4e=n(PQe,"STRONG",{});var dUt=s(w4e);u_r=r(dUt,"fnet"),dUt.forEach(t),p_r=r(PQe," \u2014 "),wY=n(PQe,"A",{href:!0});var cUt=s(wY);__r=r(cUt,"FNetForTokenClassification"),cUt.forEach(t),b_r=r(PQe," (FNet model)"),PQe.forEach(t),v_r=i(J),iE=n(J,"LI",{});var BQe=s(iE);A4e=n(BQe,"STRONG",{});var mUt=s(A4e);F_r=r(mUt,"funnel"),mUt.forEach(t),T_r=r(BQe," \u2014 "),AY=n(BQe,"A",{href:!0});var fUt=s(AY);M_r=r(fUt,"FunnelForTokenClassification"),fUt.forEach(t),E_r=r(BQe," (Funnel Transformer model)"),BQe.forEach(t),C_r=i(J),dE=n(J,"LI",{});var IQe=s(dE);L4e=n(IQe,"STRONG",{});var gUt=s(L4e);w_r=r(gUt,"gpt2"),gUt.forEach(t),A_r=r(IQe," \u2014 "),LY=n(IQe,"A",{href:!0});var hUt=s(LY);L_r=r(hUt,"GPT2ForTokenClassification"),hUt.forEach(t),y_r=r(IQe," (OpenAI GPT-2 model)"),IQe.forEach(t),x_r=i(J),cE=n(J,"LI",{});var NQe=s(cE);y4e=n(NQe,"STRONG",{});var uUt=s(y4e);$_r=r(uUt,"ibert"),uUt.forEach(t),k_r=r(NQe," \u2014 "),yY=n(NQe,"A",{href:!0});var pUt=s(yY);S_r=r(pUt,"IBertForTokenClassification"),pUt.forEach(t),R_r=r(NQe," (I-BERT model)"),NQe.forEach(t),P_r=i(J),mE=n(J,"LI",{});var qQe=s(mE);x4e=n(qQe,"STRONG",{});var _Ut=s(x4e);B_r=r(_Ut,"layoutlm"),_Ut.forEach(t),I_r=r(qQe," \u2014 "),xY=n(qQe,"A",{href:!0});var bUt=s(xY);N_r=r(bUt,"LayoutLMForTokenClassification"),bUt.forEach(t),q_r=r(qQe," (LayoutLM model)"),qQe.forEach(t),j_r=i(J),fE=n(J,"LI",{});var jQe=s(fE);$4e=n(jQe,"STRONG",{});var vUt=s($4e);D_r=r(vUt,"layoutlmv2"),vUt.forEach(t),G_r=r(jQe," \u2014 "),$Y=n(jQe,"A",{href:!0});var FUt=s($Y);O_r=r(FUt,"LayoutLMv2ForTokenClassification"),FUt.forEach(t),V_r=r(jQe," (LayoutLMv2 model)"),jQe.forEach(t),X_r=i(J),gE=n(J,"LI",{});var DQe=s(gE);k4e=n(DQe,"STRONG",{});var TUt=s(k4e);z_r=r(TUt,"layoutlmv3"),TUt.forEach(t),Q_r=r(DQe," \u2014 "),kY=n(DQe,"A",{href:!0});var MUt=s(kY);W_r=r(MUt,"LayoutLMv3ForTokenClassification"),MUt.forEach(t),U_r=r(DQe," (LayoutLMv3 model)"),DQe.forEach(t),H_r=i(J),hE=n(J,"LI",{});var GQe=s(hE);S4e=n(GQe,"STRONG",{});var EUt=s(S4e);J_r=r(EUt,"lilt"),EUt.forEach(t),Y_r=r(GQe," \u2014 "),SY=n(GQe,"A",{href:!0});var CUt=s(SY);Z_r=r(CUt,"LiltForTokenClassification"),CUt.forEach(t),K_r=r(GQe," (LiLT model)"),GQe.forEach(t),e1r=i(J),uE=n(J,"LI",{});var OQe=s(uE);R4e=n(OQe,"STRONG",{});var wUt=s(R4e);o1r=r(wUt,"longformer"),wUt.forEach(t),r1r=r(OQe," \u2014 "),RY=n(OQe,"A",{href:!0});var AUt=s(RY);t1r=r(AUt,"LongformerForTokenClassification"),AUt.forEach(t),a1r=r(OQe," (Longformer model)"),OQe.forEach(t),n1r=i(J),pE=n(J,"LI",{});var VQe=s(pE);P4e=n(VQe,"STRONG",{});var LUt=s(P4e);s1r=r(LUt,"luke"),LUt.forEach(t),l1r=r(VQe," \u2014 "),PY=n(VQe,"A",{href:!0});var yUt=s(PY);i1r=r(yUt,"LukeForTokenClassification"),yUt.forEach(t),d1r=r(VQe," (LUKE model)"),VQe.forEach(t),c1r=i(J),_E=n(J,"LI",{});var XQe=s(_E);B4e=n(XQe,"STRONG",{});var xUt=s(B4e);m1r=r(xUt,"markuplm"),xUt.forEach(t),f1r=r(XQe," \u2014 "),BY=n(XQe,"A",{href:!0});var $Ut=s(BY);g1r=r($Ut,"MarkupLMForTokenClassification"),$Ut.forEach(t),h1r=r(XQe," (MarkupLM model)"),XQe.forEach(t),u1r=i(J),bE=n(J,"LI",{});var zQe=s(bE);I4e=n(zQe,"STRONG",{});var kUt=s(I4e);p1r=r(kUt,"megatron-bert"),kUt.forEach(t),_1r=r(zQe," \u2014 "),IY=n(zQe,"A",{href:!0});var SUt=s(IY);b1r=r(SUt,"MegatronBertForTokenClassification"),SUt.forEach(t),v1r=r(zQe," (Megatron-BERT model)"),zQe.forEach(t),F1r=i(J),vE=n(J,"LI",{});var QQe=s(vE);N4e=n(QQe,"STRONG",{});var RUt=s(N4e);T1r=r(RUt,"mobilebert"),RUt.forEach(t),M1r=r(QQe," \u2014 "),NY=n(QQe,"A",{href:!0});var PUt=s(NY);E1r=r(PUt,"MobileBertForTokenClassification"),PUt.forEach(t),C1r=r(QQe," (MobileBERT model)"),QQe.forEach(t),w1r=i(J),FE=n(J,"LI",{});var WQe=s(FE);q4e=n(WQe,"STRONG",{});var BUt=s(q4e);A1r=r(BUt,"mpnet"),BUt.forEach(t),L1r=r(WQe," \u2014 "),qY=n(WQe,"A",{href:!0});var IUt=s(qY);y1r=r(IUt,"MPNetForTokenClassification"),IUt.forEach(t),x1r=r(WQe," (MPNet model)"),WQe.forEach(t),$1r=i(J),TE=n(J,"LI",{});var UQe=s(TE);j4e=n(UQe,"STRONG",{});var NUt=s(j4e);k1r=r(NUt,"nezha"),NUt.forEach(t),S1r=r(UQe," \u2014 "),jY=n(UQe,"A",{href:!0});var qUt=s(jY);R1r=r(qUt,"NezhaForTokenClassification"),qUt.forEach(t),P1r=r(UQe," (Nezha model)"),UQe.forEach(t),B1r=i(J),ME=n(J,"LI",{});var HQe=s(ME);D4e=n(HQe,"STRONG",{});var jUt=s(D4e);I1r=r(jUt,"nystromformer"),jUt.forEach(t),N1r=r(HQe," \u2014 "),DY=n(HQe,"A",{href:!0});var DUt=s(DY);q1r=r(DUt,"NystromformerForTokenClassification"),DUt.forEach(t),j1r=r(HQe," (Nystr\xF6mformer model)"),HQe.forEach(t),D1r=i(J),EE=n(J,"LI",{});var JQe=s(EE);G4e=n(JQe,"STRONG",{});var GUt=s(G4e);G1r=r(GUt,"qdqbert"),GUt.forEach(t),O1r=r(JQe," \u2014 "),GY=n(JQe,"A",{href:!0});var OUt=s(GY);V1r=r(OUt,"QDQBertForTokenClassification"),OUt.forEach(t),X1r=r(JQe," (QDQBert model)"),JQe.forEach(t),z1r=i(J),CE=n(J,"LI",{});var YQe=s(CE);O4e=n(YQe,"STRONG",{});var VUt=s(O4e);Q1r=r(VUt,"rembert"),VUt.forEach(t),W1r=r(YQe," \u2014 "),OY=n(YQe,"A",{href:!0});var XUt=s(OY);U1r=r(XUt,"RemBertForTokenClassification"),XUt.forEach(t),H1r=r(YQe," (RemBERT model)"),YQe.forEach(t),J1r=i(J),wE=n(J,"LI",{});var ZQe=s(wE);V4e=n(ZQe,"STRONG",{});var zUt=s(V4e);Y1r=r(zUt,"roberta"),zUt.forEach(t),Z1r=r(ZQe," \u2014 "),VY=n(ZQe,"A",{href:!0});var QUt=s(VY);K1r=r(QUt,"RobertaForTokenClassification"),QUt.forEach(t),e2r=r(ZQe," (RoBERTa model)"),ZQe.forEach(t),o2r=i(J),AE=n(J,"LI",{});var KQe=s(AE);X4e=n(KQe,"STRONG",{});var WUt=s(X4e);r2r=r(WUt,"roformer"),WUt.forEach(t),t2r=r(KQe," \u2014 "),XY=n(KQe,"A",{href:!0});var UUt=s(XY);a2r=r(UUt,"RoFormerForTokenClassification"),UUt.forEach(t),n2r=r(KQe," (RoFormer model)"),KQe.forEach(t),s2r=i(J),LE=n(J,"LI",{});var eWe=s(LE);z4e=n(eWe,"STRONG",{});var HUt=s(z4e);l2r=r(HUt,"squeezebert"),HUt.forEach(t),i2r=r(eWe," \u2014 "),zY=n(eWe,"A",{href:!0});var JUt=s(zY);d2r=r(JUt,"SqueezeBertForTokenClassification"),JUt.forEach(t),c2r=r(eWe," (SqueezeBERT model)"),eWe.forEach(t),m2r=i(J),yE=n(J,"LI",{});var oWe=s(yE);Q4e=n(oWe,"STRONG",{});var YUt=s(Q4e);f2r=r(YUt,"xlm"),YUt.forEach(t),g2r=r(oWe," \u2014 "),QY=n(oWe,"A",{href:!0});var ZUt=s(QY);h2r=r(ZUt,"XLMForTokenClassification"),ZUt.forEach(t),u2r=r(oWe," (XLM model)"),oWe.forEach(t),p2r=i(J),xE=n(J,"LI",{});var rWe=s(xE);W4e=n(rWe,"STRONG",{});var KUt=s(W4e);_2r=r(KUt,"xlm-roberta"),KUt.forEach(t),b2r=r(rWe," \u2014 "),WY=n(rWe,"A",{href:!0});var eHt=s(WY);v2r=r(eHt,"XLMRobertaForTokenClassification"),eHt.forEach(t),F2r=r(rWe," (XLM-RoBERTa model)"),rWe.forEach(t),T2r=i(J),$E=n(J,"LI",{});var tWe=s($E);U4e=n(tWe,"STRONG",{});var oHt=s(U4e);M2r=r(oHt,"xlm-roberta-xl"),oHt.forEach(t),E2r=r(tWe," \u2014 "),UY=n(tWe,"A",{href:!0});var rHt=s(UY);C2r=r(rHt,"XLMRobertaXLForTokenClassification"),rHt.forEach(t),w2r=r(tWe," (XLM-RoBERTa-XL model)"),tWe.forEach(t),A2r=i(J),kE=n(J,"LI",{});var aWe=s(kE);H4e=n(aWe,"STRONG",{});var tHt=s(H4e);L2r=r(tHt,"xlnet"),tHt.forEach(t),y2r=r(aWe," \u2014 "),HY=n(aWe,"A",{href:!0});var aHt=s(HY);x2r=r(aHt,"XLNetForTokenClassification"),aHt.forEach(t),$2r=r(aWe," (XLNet model)"),aWe.forEach(t),k2r=i(J),SE=n(J,"LI",{});var nWe=s(SE);J4e=n(nWe,"STRONG",{});var nHt=s(J4e);S2r=r(nHt,"yoso"),nHt.forEach(t),R2r=r(nWe," \u2014 "),JY=n(nWe,"A",{href:!0});var sHt=s(JY);P2r=r(sHt,"YosoForTokenClassification"),sHt.forEach(t),B2r=r(nWe," (YOSO model)"),nWe.forEach(t),J.forEach(t),I2r=i(ka),RE=n(ka,"P",{});var sWe=s(RE);N2r=r(sWe,"The model is set in evaluation mode by default using "),Y4e=n(sWe,"CODE",{});var lHt=s(Y4e);q2r=r(lHt,"model.eval()"),lHt.forEach(t),j2r=r(sWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z4e=n(sWe,"CODE",{});var iHt=s(Z4e);D2r=r(iHt,"model.train()"),iHt.forEach(t),sWe.forEach(t),G2r=i(ka),T(PE.$$.fragment,ka),ka.forEach(t),Dl.forEach(t),Aro=i(m),Yd=n(m,"H2",{class:!0});var Oao=s(Yd);BE=n(Oao,"A",{id:!0,class:!0,href:!0});var dHt=s(BE);K4e=n(dHt,"SPAN",{});var cHt=s(K4e);T(K$.$$.fragment,cHt),cHt.forEach(t),dHt.forEach(t),O2r=i(Oao),eCe=n(Oao,"SPAN",{});var mHt=s(eCe);V2r=r(mHt,"AutoModelForQuestionAnswering"),mHt.forEach(t),Oao.forEach(t),Lro=i(m),Xo=n(m,"DIV",{class:!0});var Gl=s(Xo);T(ek.$$.fragment,Gl),X2r=i(Gl),Zd=n(Gl,"P",{});var Lde=s(Zd);z2r=r(Lde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),YY=n(Lde,"A",{href:!0});var fHt=s(YY);Q2r=r(fHt,"from_pretrained()"),fHt.forEach(t),W2r=r(Lde," class method or the "),ZY=n(Lde,"A",{href:!0});var gHt=s(ZY);U2r=r(gHt,"from_config()"),gHt.forEach(t),H2r=r(Lde,` class
method.`),Lde.forEach(t),J2r=i(Gl),ok=n(Gl,"P",{});var Vao=s(ok);Y2r=r(Vao,"This class cannot be instantiated directly using "),oCe=n(Vao,"CODE",{});var hHt=s(oCe);Z2r=r(hHt,"__init__()"),hHt.forEach(t),K2r=r(Vao," (throws an error)."),Vao.forEach(t),ebr=i(Gl),yt=n(Gl,"DIV",{class:!0});var Qy=s(yt);T(rk.$$.fragment,Qy),obr=i(Qy),rCe=n(Qy,"P",{});var uHt=s(rCe);rbr=r(uHt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uHt.forEach(t),tbr=i(Qy),Kd=n(Qy,"P",{});var yde=s(Kd);abr=r(yde,`Note:
Loading a model from its configuration file does `),tCe=n(yde,"STRONG",{});var pHt=s(tCe);nbr=r(pHt,"not"),pHt.forEach(t),sbr=r(yde,` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=n(yde,"A",{href:!0});var _Ht=s(KY);lbr=r(_Ht,"from_pretrained()"),_Ht.forEach(t),ibr=r(yde," to load the model weights."),yde.forEach(t),dbr=i(Qy),T(IE.$$.fragment,Qy),Qy.forEach(t),cbr=i(Gl),io=n(Gl,"DIV",{class:!0});var Sa=s(io);T(tk.$$.fragment,Sa),mbr=i(Sa),aCe=n(Sa,"P",{});var bHt=s(aCe);fbr=r(bHt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),bHt.forEach(t),gbr=i(Sa),cn=n(Sa,"P",{});var Wy=s(cn);hbr=r(Wy,"The model class to instantiate is selected based on the "),nCe=n(Wy,"CODE",{});var vHt=s(nCe);ubr=r(vHt,"model_type"),vHt.forEach(t),pbr=r(Wy,` property of the config object (either
passed as an argument or loaded from `),sCe=n(Wy,"CODE",{});var FHt=s(sCe);_br=r(FHt,"pretrained_model_name_or_path"),FHt.forEach(t),bbr=r(Wy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lCe=n(Wy,"CODE",{});var THt=s(lCe);vbr=r(THt,"pretrained_model_name_or_path"),THt.forEach(t),Fbr=r(Wy,":"),Wy.forEach(t),Tbr=i(Sa),O=n(Sa,"UL",{});var X=s(O);NE=n(X,"LI",{});var lWe=s(NE);iCe=n(lWe,"STRONG",{});var MHt=s(iCe);Mbr=r(MHt,"albert"),MHt.forEach(t),Ebr=r(lWe," \u2014 "),eZ=n(lWe,"A",{href:!0});var EHt=s(eZ);Cbr=r(EHt,"AlbertForQuestionAnswering"),EHt.forEach(t),wbr=r(lWe," (ALBERT model)"),lWe.forEach(t),Abr=i(X),qE=n(X,"LI",{});var iWe=s(qE);dCe=n(iWe,"STRONG",{});var CHt=s(dCe);Lbr=r(CHt,"bart"),CHt.forEach(t),ybr=r(iWe," \u2014 "),oZ=n(iWe,"A",{href:!0});var wHt=s(oZ);xbr=r(wHt,"BartForQuestionAnswering"),wHt.forEach(t),$br=r(iWe," (BART model)"),iWe.forEach(t),kbr=i(X),jE=n(X,"LI",{});var dWe=s(jE);cCe=n(dWe,"STRONG",{});var AHt=s(cCe);Sbr=r(AHt,"bert"),AHt.forEach(t),Rbr=r(dWe," \u2014 "),rZ=n(dWe,"A",{href:!0});var LHt=s(rZ);Pbr=r(LHt,"BertForQuestionAnswering"),LHt.forEach(t),Bbr=r(dWe," (BERT model)"),dWe.forEach(t),Ibr=i(X),DE=n(X,"LI",{});var cWe=s(DE);mCe=n(cWe,"STRONG",{});var yHt=s(mCe);Nbr=r(yHt,"big_bird"),yHt.forEach(t),qbr=r(cWe," \u2014 "),tZ=n(cWe,"A",{href:!0});var xHt=s(tZ);jbr=r(xHt,"BigBirdForQuestionAnswering"),xHt.forEach(t),Dbr=r(cWe," (BigBird model)"),cWe.forEach(t),Gbr=i(X),GE=n(X,"LI",{});var mWe=s(GE);fCe=n(mWe,"STRONG",{});var $Ht=s(fCe);Obr=r($Ht,"bigbird_pegasus"),$Ht.forEach(t),Vbr=r(mWe," \u2014 "),aZ=n(mWe,"A",{href:!0});var kHt=s(aZ);Xbr=r(kHt,"BigBirdPegasusForQuestionAnswering"),kHt.forEach(t),zbr=r(mWe," (BigBird-Pegasus model)"),mWe.forEach(t),Qbr=i(X),OE=n(X,"LI",{});var fWe=s(OE);gCe=n(fWe,"STRONG",{});var SHt=s(gCe);Wbr=r(SHt,"bloom"),SHt.forEach(t),Ubr=r(fWe," \u2014 "),nZ=n(fWe,"A",{href:!0});var RHt=s(nZ);Hbr=r(RHt,"BloomForQuestionAnswering"),RHt.forEach(t),Jbr=r(fWe," (BLOOM model)"),fWe.forEach(t),Ybr=i(X),VE=n(X,"LI",{});var gWe=s(VE);hCe=n(gWe,"STRONG",{});var PHt=s(hCe);Zbr=r(PHt,"camembert"),PHt.forEach(t),Kbr=r(gWe," \u2014 "),sZ=n(gWe,"A",{href:!0});var BHt=s(sZ);evr=r(BHt,"CamembertForQuestionAnswering"),BHt.forEach(t),ovr=r(gWe," (CamemBERT model)"),gWe.forEach(t),rvr=i(X),XE=n(X,"LI",{});var hWe=s(XE);uCe=n(hWe,"STRONG",{});var IHt=s(uCe);tvr=r(IHt,"canine"),IHt.forEach(t),avr=r(hWe," \u2014 "),lZ=n(hWe,"A",{href:!0});var NHt=s(lZ);nvr=r(NHt,"CanineForQuestionAnswering"),NHt.forEach(t),svr=r(hWe," (CANINE model)"),hWe.forEach(t),lvr=i(X),zE=n(X,"LI",{});var uWe=s(zE);pCe=n(uWe,"STRONG",{});var qHt=s(pCe);ivr=r(qHt,"convbert"),qHt.forEach(t),dvr=r(uWe," \u2014 "),iZ=n(uWe,"A",{href:!0});var jHt=s(iZ);cvr=r(jHt,"ConvBertForQuestionAnswering"),jHt.forEach(t),mvr=r(uWe," (ConvBERT model)"),uWe.forEach(t),fvr=i(X),QE=n(X,"LI",{});var pWe=s(QE);_Ce=n(pWe,"STRONG",{});var DHt=s(_Ce);gvr=r(DHt,"data2vec-text"),DHt.forEach(t),hvr=r(pWe," \u2014 "),dZ=n(pWe,"A",{href:!0});var GHt=s(dZ);uvr=r(GHt,"Data2VecTextForQuestionAnswering"),GHt.forEach(t),pvr=r(pWe," (Data2VecText model)"),pWe.forEach(t),_vr=i(X),WE=n(X,"LI",{});var _We=s(WE);bCe=n(_We,"STRONG",{});var OHt=s(bCe);bvr=r(OHt,"deberta"),OHt.forEach(t),vvr=r(_We," \u2014 "),cZ=n(_We,"A",{href:!0});var VHt=s(cZ);Fvr=r(VHt,"DebertaForQuestionAnswering"),VHt.forEach(t),Tvr=r(_We," (DeBERTa model)"),_We.forEach(t),Mvr=i(X),UE=n(X,"LI",{});var bWe=s(UE);vCe=n(bWe,"STRONG",{});var XHt=s(vCe);Evr=r(XHt,"deberta-v2"),XHt.forEach(t),Cvr=r(bWe," \u2014 "),mZ=n(bWe,"A",{href:!0});var zHt=s(mZ);wvr=r(zHt,"DebertaV2ForQuestionAnswering"),zHt.forEach(t),Avr=r(bWe," (DeBERTa-v2 model)"),bWe.forEach(t),Lvr=i(X),HE=n(X,"LI",{});var vWe=s(HE);FCe=n(vWe,"STRONG",{});var QHt=s(FCe);yvr=r(QHt,"distilbert"),QHt.forEach(t),xvr=r(vWe," \u2014 "),fZ=n(vWe,"A",{href:!0});var WHt=s(fZ);$vr=r(WHt,"DistilBertForQuestionAnswering"),WHt.forEach(t),kvr=r(vWe," (DistilBERT model)"),vWe.forEach(t),Svr=i(X),JE=n(X,"LI",{});var FWe=s(JE);TCe=n(FWe,"STRONG",{});var UHt=s(TCe);Rvr=r(UHt,"electra"),UHt.forEach(t),Pvr=r(FWe," \u2014 "),gZ=n(FWe,"A",{href:!0});var HHt=s(gZ);Bvr=r(HHt,"ElectraForQuestionAnswering"),HHt.forEach(t),Ivr=r(FWe," (ELECTRA model)"),FWe.forEach(t),Nvr=i(X),YE=n(X,"LI",{});var TWe=s(YE);MCe=n(TWe,"STRONG",{});var JHt=s(MCe);qvr=r(JHt,"ernie"),JHt.forEach(t),jvr=r(TWe," \u2014 "),hZ=n(TWe,"A",{href:!0});var YHt=s(hZ);Dvr=r(YHt,"ErnieForQuestionAnswering"),YHt.forEach(t),Gvr=r(TWe," (ERNIE model)"),TWe.forEach(t),Ovr=i(X),ZE=n(X,"LI",{});var MWe=s(ZE);ECe=n(MWe,"STRONG",{});var ZHt=s(ECe);Vvr=r(ZHt,"flaubert"),ZHt.forEach(t),Xvr=r(MWe," \u2014 "),uZ=n(MWe,"A",{href:!0});var KHt=s(uZ);zvr=r(KHt,"FlaubertForQuestionAnsweringSimple"),KHt.forEach(t),Qvr=r(MWe," (FlauBERT model)"),MWe.forEach(t),Wvr=i(X),KE=n(X,"LI",{});var EWe=s(KE);CCe=n(EWe,"STRONG",{});var eJt=s(CCe);Uvr=r(eJt,"fnet"),eJt.forEach(t),Hvr=r(EWe," \u2014 "),pZ=n(EWe,"A",{href:!0});var oJt=s(pZ);Jvr=r(oJt,"FNetForQuestionAnswering"),oJt.forEach(t),Yvr=r(EWe," (FNet model)"),EWe.forEach(t),Zvr=i(X),e4=n(X,"LI",{});var CWe=s(e4);wCe=n(CWe,"STRONG",{});var rJt=s(wCe);Kvr=r(rJt,"funnel"),rJt.forEach(t),eFr=r(CWe," \u2014 "),_Z=n(CWe,"A",{href:!0});var tJt=s(_Z);oFr=r(tJt,"FunnelForQuestionAnswering"),tJt.forEach(t),rFr=r(CWe," (Funnel Transformer model)"),CWe.forEach(t),tFr=i(X),o4=n(X,"LI",{});var wWe=s(o4);ACe=n(wWe,"STRONG",{});var aJt=s(ACe);aFr=r(aJt,"gptj"),aJt.forEach(t),nFr=r(wWe," \u2014 "),bZ=n(wWe,"A",{href:!0});var nJt=s(bZ);sFr=r(nJt,"GPTJForQuestionAnswering"),nJt.forEach(t),lFr=r(wWe," (GPT-J model)"),wWe.forEach(t),iFr=i(X),r4=n(X,"LI",{});var AWe=s(r4);LCe=n(AWe,"STRONG",{});var sJt=s(LCe);dFr=r(sJt,"ibert"),sJt.forEach(t),cFr=r(AWe," \u2014 "),vZ=n(AWe,"A",{href:!0});var lJt=s(vZ);mFr=r(lJt,"IBertForQuestionAnswering"),lJt.forEach(t),fFr=r(AWe," (I-BERT model)"),AWe.forEach(t),gFr=i(X),t4=n(X,"LI",{});var LWe=s(t4);yCe=n(LWe,"STRONG",{});var iJt=s(yCe);hFr=r(iJt,"layoutlmv2"),iJt.forEach(t),uFr=r(LWe," \u2014 "),FZ=n(LWe,"A",{href:!0});var dJt=s(FZ);pFr=r(dJt,"LayoutLMv2ForQuestionAnswering"),dJt.forEach(t),_Fr=r(LWe," (LayoutLMv2 model)"),LWe.forEach(t),bFr=i(X),a4=n(X,"LI",{});var yWe=s(a4);xCe=n(yWe,"STRONG",{});var cJt=s(xCe);vFr=r(cJt,"layoutlmv3"),cJt.forEach(t),FFr=r(yWe," \u2014 "),TZ=n(yWe,"A",{href:!0});var mJt=s(TZ);TFr=r(mJt,"LayoutLMv3ForQuestionAnswering"),mJt.forEach(t),MFr=r(yWe," (LayoutLMv3 model)"),yWe.forEach(t),EFr=i(X),n4=n(X,"LI",{});var xWe=s(n4);$Ce=n(xWe,"STRONG",{});var fJt=s($Ce);CFr=r(fJt,"led"),fJt.forEach(t),wFr=r(xWe," \u2014 "),MZ=n(xWe,"A",{href:!0});var gJt=s(MZ);AFr=r(gJt,"LEDForQuestionAnswering"),gJt.forEach(t),LFr=r(xWe," (LED model)"),xWe.forEach(t),yFr=i(X),s4=n(X,"LI",{});var $We=s(s4);kCe=n($We,"STRONG",{});var hJt=s(kCe);xFr=r(hJt,"lilt"),hJt.forEach(t),$Fr=r($We," \u2014 "),EZ=n($We,"A",{href:!0});var uJt=s(EZ);kFr=r(uJt,"LiltForQuestionAnswering"),uJt.forEach(t),SFr=r($We," (LiLT model)"),$We.forEach(t),RFr=i(X),l4=n(X,"LI",{});var kWe=s(l4);SCe=n(kWe,"STRONG",{});var pJt=s(SCe);PFr=r(pJt,"longformer"),pJt.forEach(t),BFr=r(kWe," \u2014 "),CZ=n(kWe,"A",{href:!0});var _Jt=s(CZ);IFr=r(_Jt,"LongformerForQuestionAnswering"),_Jt.forEach(t),NFr=r(kWe," (Longformer model)"),kWe.forEach(t),qFr=i(X),i4=n(X,"LI",{});var SWe=s(i4);RCe=n(SWe,"STRONG",{});var bJt=s(RCe);jFr=r(bJt,"luke"),bJt.forEach(t),DFr=r(SWe," \u2014 "),wZ=n(SWe,"A",{href:!0});var vJt=s(wZ);GFr=r(vJt,"LukeForQuestionAnswering"),vJt.forEach(t),OFr=r(SWe," (LUKE model)"),SWe.forEach(t),VFr=i(X),d4=n(X,"LI",{});var RWe=s(d4);PCe=n(RWe,"STRONG",{});var FJt=s(PCe);XFr=r(FJt,"lxmert"),FJt.forEach(t),zFr=r(RWe," \u2014 "),AZ=n(RWe,"A",{href:!0});var TJt=s(AZ);QFr=r(TJt,"LxmertForQuestionAnswering"),TJt.forEach(t),WFr=r(RWe," (LXMERT model)"),RWe.forEach(t),UFr=i(X),c4=n(X,"LI",{});var PWe=s(c4);BCe=n(PWe,"STRONG",{});var MJt=s(BCe);HFr=r(MJt,"markuplm"),MJt.forEach(t),JFr=r(PWe," \u2014 "),LZ=n(PWe,"A",{href:!0});var EJt=s(LZ);YFr=r(EJt,"MarkupLMForQuestionAnswering"),EJt.forEach(t),ZFr=r(PWe," (MarkupLM model)"),PWe.forEach(t),KFr=i(X),m4=n(X,"LI",{});var BWe=s(m4);ICe=n(BWe,"STRONG",{});var CJt=s(ICe);eTr=r(CJt,"mbart"),CJt.forEach(t),oTr=r(BWe," \u2014 "),yZ=n(BWe,"A",{href:!0});var wJt=s(yZ);rTr=r(wJt,"MBartForQuestionAnswering"),wJt.forEach(t),tTr=r(BWe," (mBART model)"),BWe.forEach(t),aTr=i(X),f4=n(X,"LI",{});var IWe=s(f4);NCe=n(IWe,"STRONG",{});var AJt=s(NCe);nTr=r(AJt,"megatron-bert"),AJt.forEach(t),sTr=r(IWe," \u2014 "),xZ=n(IWe,"A",{href:!0});var LJt=s(xZ);lTr=r(LJt,"MegatronBertForQuestionAnswering"),LJt.forEach(t),iTr=r(IWe," (Megatron-BERT model)"),IWe.forEach(t),dTr=i(X),g4=n(X,"LI",{});var NWe=s(g4);qCe=n(NWe,"STRONG",{});var yJt=s(qCe);cTr=r(yJt,"mobilebert"),yJt.forEach(t),mTr=r(NWe," \u2014 "),$Z=n(NWe,"A",{href:!0});var xJt=s($Z);fTr=r(xJt,"MobileBertForQuestionAnswering"),xJt.forEach(t),gTr=r(NWe," (MobileBERT model)"),NWe.forEach(t),hTr=i(X),h4=n(X,"LI",{});var qWe=s(h4);jCe=n(qWe,"STRONG",{});var $Jt=s(jCe);uTr=r($Jt,"mpnet"),$Jt.forEach(t),pTr=r(qWe," \u2014 "),kZ=n(qWe,"A",{href:!0});var kJt=s(kZ);_Tr=r(kJt,"MPNetForQuestionAnswering"),kJt.forEach(t),bTr=r(qWe," (MPNet model)"),qWe.forEach(t),vTr=i(X),u4=n(X,"LI",{});var jWe=s(u4);DCe=n(jWe,"STRONG",{});var SJt=s(DCe);FTr=r(SJt,"mvp"),SJt.forEach(t),TTr=r(jWe," \u2014 "),SZ=n(jWe,"A",{href:!0});var RJt=s(SZ);MTr=r(RJt,"MvpForQuestionAnswering"),RJt.forEach(t),ETr=r(jWe," (MVP model)"),jWe.forEach(t),CTr=i(X),p4=n(X,"LI",{});var DWe=s(p4);GCe=n(DWe,"STRONG",{});var PJt=s(GCe);wTr=r(PJt,"nezha"),PJt.forEach(t),ATr=r(DWe," \u2014 "),RZ=n(DWe,"A",{href:!0});var BJt=s(RZ);LTr=r(BJt,"NezhaForQuestionAnswering"),BJt.forEach(t),yTr=r(DWe," (Nezha model)"),DWe.forEach(t),xTr=i(X),_4=n(X,"LI",{});var GWe=s(_4);OCe=n(GWe,"STRONG",{});var IJt=s(OCe);$Tr=r(IJt,"nystromformer"),IJt.forEach(t),kTr=r(GWe," \u2014 "),PZ=n(GWe,"A",{href:!0});var NJt=s(PZ);STr=r(NJt,"NystromformerForQuestionAnswering"),NJt.forEach(t),RTr=r(GWe," (Nystr\xF6mformer model)"),GWe.forEach(t),PTr=i(X),b4=n(X,"LI",{});var OWe=s(b4);VCe=n(OWe,"STRONG",{});var qJt=s(VCe);BTr=r(qJt,"opt"),qJt.forEach(t),ITr=r(OWe," \u2014 "),BZ=n(OWe,"A",{href:!0});var jJt=s(BZ);NTr=r(jJt,"OPTForQuestionAnswering"),jJt.forEach(t),qTr=r(OWe," (OPT model)"),OWe.forEach(t),jTr=i(X),v4=n(X,"LI",{});var VWe=s(v4);XCe=n(VWe,"STRONG",{});var DJt=s(XCe);DTr=r(DJt,"qdqbert"),DJt.forEach(t),GTr=r(VWe," \u2014 "),IZ=n(VWe,"A",{href:!0});var GJt=s(IZ);OTr=r(GJt,"QDQBertForQuestionAnswering"),GJt.forEach(t),VTr=r(VWe," (QDQBert model)"),VWe.forEach(t),XTr=i(X),F4=n(X,"LI",{});var XWe=s(F4);zCe=n(XWe,"STRONG",{});var OJt=s(zCe);zTr=r(OJt,"reformer"),OJt.forEach(t),QTr=r(XWe," \u2014 "),NZ=n(XWe,"A",{href:!0});var VJt=s(NZ);WTr=r(VJt,"ReformerForQuestionAnswering"),VJt.forEach(t),UTr=r(XWe," (Reformer model)"),XWe.forEach(t),HTr=i(X),T4=n(X,"LI",{});var zWe=s(T4);QCe=n(zWe,"STRONG",{});var XJt=s(QCe);JTr=r(XJt,"rembert"),XJt.forEach(t),YTr=r(zWe," \u2014 "),qZ=n(zWe,"A",{href:!0});var zJt=s(qZ);ZTr=r(zJt,"RemBertForQuestionAnswering"),zJt.forEach(t),KTr=r(zWe," (RemBERT model)"),zWe.forEach(t),eMr=i(X),M4=n(X,"LI",{});var QWe=s(M4);WCe=n(QWe,"STRONG",{});var QJt=s(WCe);oMr=r(QJt,"roberta"),QJt.forEach(t),rMr=r(QWe," \u2014 "),jZ=n(QWe,"A",{href:!0});var WJt=s(jZ);tMr=r(WJt,"RobertaForQuestionAnswering"),WJt.forEach(t),aMr=r(QWe," (RoBERTa model)"),QWe.forEach(t),nMr=i(X),E4=n(X,"LI",{});var WWe=s(E4);UCe=n(WWe,"STRONG",{});var UJt=s(UCe);sMr=r(UJt,"roformer"),UJt.forEach(t),lMr=r(WWe," \u2014 "),DZ=n(WWe,"A",{href:!0});var HJt=s(DZ);iMr=r(HJt,"RoFormerForQuestionAnswering"),HJt.forEach(t),dMr=r(WWe," (RoFormer model)"),WWe.forEach(t),cMr=i(X),C4=n(X,"LI",{});var UWe=s(C4);HCe=n(UWe,"STRONG",{});var JJt=s(HCe);mMr=r(JJt,"splinter"),JJt.forEach(t),fMr=r(UWe," \u2014 "),GZ=n(UWe,"A",{href:!0});var YJt=s(GZ);gMr=r(YJt,"SplinterForQuestionAnswering"),YJt.forEach(t),hMr=r(UWe," (Splinter model)"),UWe.forEach(t),uMr=i(X),w4=n(X,"LI",{});var HWe=s(w4);JCe=n(HWe,"STRONG",{});var ZJt=s(JCe);pMr=r(ZJt,"squeezebert"),ZJt.forEach(t),_Mr=r(HWe," \u2014 "),OZ=n(HWe,"A",{href:!0});var KJt=s(OZ);bMr=r(KJt,"SqueezeBertForQuestionAnswering"),KJt.forEach(t),vMr=r(HWe," (SqueezeBERT model)"),HWe.forEach(t),FMr=i(X),A4=n(X,"LI",{});var JWe=s(A4);YCe=n(JWe,"STRONG",{});var eYt=s(YCe);TMr=r(eYt,"xlm"),eYt.forEach(t),MMr=r(JWe," \u2014 "),VZ=n(JWe,"A",{href:!0});var oYt=s(VZ);EMr=r(oYt,"XLMForQuestionAnsweringSimple"),oYt.forEach(t),CMr=r(JWe," (XLM model)"),JWe.forEach(t),wMr=i(X),L4=n(X,"LI",{});var YWe=s(L4);ZCe=n(YWe,"STRONG",{});var rYt=s(ZCe);AMr=r(rYt,"xlm-roberta"),rYt.forEach(t),LMr=r(YWe," \u2014 "),XZ=n(YWe,"A",{href:!0});var tYt=s(XZ);yMr=r(tYt,"XLMRobertaForQuestionAnswering"),tYt.forEach(t),xMr=r(YWe," (XLM-RoBERTa model)"),YWe.forEach(t),$Mr=i(X),y4=n(X,"LI",{});var ZWe=s(y4);KCe=n(ZWe,"STRONG",{});var aYt=s(KCe);kMr=r(aYt,"xlm-roberta-xl"),aYt.forEach(t),SMr=r(ZWe," \u2014 "),zZ=n(ZWe,"A",{href:!0});var nYt=s(zZ);RMr=r(nYt,"XLMRobertaXLForQuestionAnswering"),nYt.forEach(t),PMr=r(ZWe," (XLM-RoBERTa-XL model)"),ZWe.forEach(t),BMr=i(X),x4=n(X,"LI",{});var KWe=s(x4);e3e=n(KWe,"STRONG",{});var sYt=s(e3e);IMr=r(sYt,"xlnet"),sYt.forEach(t),NMr=r(KWe," \u2014 "),QZ=n(KWe,"A",{href:!0});var lYt=s(QZ);qMr=r(lYt,"XLNetForQuestionAnsweringSimple"),lYt.forEach(t),jMr=r(KWe," (XLNet model)"),KWe.forEach(t),DMr=i(X),$4=n(X,"LI",{});var eUe=s($4);o3e=n(eUe,"STRONG",{});var iYt=s(o3e);GMr=r(iYt,"yoso"),iYt.forEach(t),OMr=r(eUe," \u2014 "),WZ=n(eUe,"A",{href:!0});var dYt=s(WZ);VMr=r(dYt,"YosoForQuestionAnswering"),dYt.forEach(t),XMr=r(eUe," (YOSO model)"),eUe.forEach(t),X.forEach(t),zMr=i(Sa),k4=n(Sa,"P",{});var oUe=s(k4);QMr=r(oUe,"The model is set in evaluation mode by default using "),r3e=n(oUe,"CODE",{});var cYt=s(r3e);WMr=r(cYt,"model.eval()"),cYt.forEach(t),UMr=r(oUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t3e=n(oUe,"CODE",{});var mYt=s(t3e);HMr=r(mYt,"model.train()"),mYt.forEach(t),oUe.forEach(t),JMr=i(Sa),T(S4.$$.fragment,Sa),Sa.forEach(t),Gl.forEach(t),yro=i(m),ec=n(m,"H2",{class:!0});var Xao=s(ec);R4=n(Xao,"A",{id:!0,class:!0,href:!0});var fYt=s(R4);a3e=n(fYt,"SPAN",{});var gYt=s(a3e);T(ak.$$.fragment,gYt),gYt.forEach(t),fYt.forEach(t),YMr=i(Xao),n3e=n(Xao,"SPAN",{});var hYt=s(n3e);ZMr=r(hYt,"AutoModelForTableQuestionAnswering"),hYt.forEach(t),Xao.forEach(t),xro=i(m),zo=n(m,"DIV",{class:!0});var Ol=s(zo);T(nk.$$.fragment,Ol),KMr=i(Ol),oc=n(Ol,"P",{});var xde=s(oc);eEr=r(xde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),UZ=n(xde,"A",{href:!0});var uYt=s(UZ);oEr=r(uYt,"from_pretrained()"),uYt.forEach(t),rEr=r(xde," class method or the "),HZ=n(xde,"A",{href:!0});var pYt=s(HZ);tEr=r(pYt,"from_config()"),pYt.forEach(t),aEr=r(xde,` class
method.`),xde.forEach(t),nEr=i(Ol),sk=n(Ol,"P",{});var zao=s(sk);sEr=r(zao,"This class cannot be instantiated directly using "),s3e=n(zao,"CODE",{});var _Yt=s(s3e);lEr=r(_Yt,"__init__()"),_Yt.forEach(t),iEr=r(zao," (throws an error)."),zao.forEach(t),dEr=i(Ol),xt=n(Ol,"DIV",{class:!0});var Uy=s(xt);T(lk.$$.fragment,Uy),cEr=i(Uy),l3e=n(Uy,"P",{});var bYt=s(l3e);mEr=r(bYt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),bYt.forEach(t),fEr=i(Uy),rc=n(Uy,"P",{});var $de=s(rc);gEr=r($de,`Note:
Loading a model from its configuration file does `),i3e=n($de,"STRONG",{});var vYt=s(i3e);hEr=r(vYt,"not"),vYt.forEach(t),uEr=r($de,` load the model weights. It only affects the
model\u2019s configuration. Use `),JZ=n($de,"A",{href:!0});var FYt=s(JZ);pEr=r(FYt,"from_pretrained()"),FYt.forEach(t),_Er=r($de," to load the model weights."),$de.forEach(t),bEr=i(Uy),T(P4.$$.fragment,Uy),Uy.forEach(t),vEr=i(Ol),co=n(Ol,"DIV",{class:!0});var Ra=s(co);T(ik.$$.fragment,Ra),FEr=i(Ra),d3e=n(Ra,"P",{});var TYt=s(d3e);TEr=r(TYt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),TYt.forEach(t),MEr=i(Ra),mn=n(Ra,"P",{});var Hy=s(mn);EEr=r(Hy,"The model class to instantiate is selected based on the "),c3e=n(Hy,"CODE",{});var MYt=s(c3e);CEr=r(MYt,"model_type"),MYt.forEach(t),wEr=r(Hy,` property of the config object (either
passed as an argument or loaded from `),m3e=n(Hy,"CODE",{});var EYt=s(m3e);AEr=r(EYt,"pretrained_model_name_or_path"),EYt.forEach(t),LEr=r(Hy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f3e=n(Hy,"CODE",{});var CYt=s(f3e);yEr=r(CYt,"pretrained_model_name_or_path"),CYt.forEach(t),xEr=r(Hy,":"),Hy.forEach(t),$Er=i(Ra),g3e=n(Ra,"UL",{});var wYt=s(g3e);B4=n(wYt,"LI",{});var rUe=s(B4);h3e=n(rUe,"STRONG",{});var AYt=s(h3e);kEr=r(AYt,"tapas"),AYt.forEach(t),SEr=r(rUe," \u2014 "),YZ=n(rUe,"A",{href:!0});var LYt=s(YZ);REr=r(LYt,"TapasForQuestionAnswering"),LYt.forEach(t),PEr=r(rUe," (TAPAS model)"),rUe.forEach(t),wYt.forEach(t),BEr=i(Ra),I4=n(Ra,"P",{});var tUe=s(I4);IEr=r(tUe,"The model is set in evaluation mode by default using "),u3e=n(tUe,"CODE",{});var yYt=s(u3e);NEr=r(yYt,"model.eval()"),yYt.forEach(t),qEr=r(tUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p3e=n(tUe,"CODE",{});var xYt=s(p3e);jEr=r(xYt,"model.train()"),xYt.forEach(t),tUe.forEach(t),DEr=i(Ra),T(N4.$$.fragment,Ra),Ra.forEach(t),Ol.forEach(t),$ro=i(m),tc=n(m,"H2",{class:!0});var Qao=s(tc);q4=n(Qao,"A",{id:!0,class:!0,href:!0});var $Yt=s(q4);_3e=n($Yt,"SPAN",{});var kYt=s(_3e);T(dk.$$.fragment,kYt),kYt.forEach(t),$Yt.forEach(t),GEr=i(Qao),b3e=n(Qao,"SPAN",{});var SYt=s(b3e);OEr=r(SYt,"AutoModelForDocumentQuestionAnswering"),SYt.forEach(t),Qao.forEach(t),kro=i(m),Qo=n(m,"DIV",{class:!0});var Vl=s(Qo);T(ck.$$.fragment,Vl),VEr=i(Vl),ac=n(Vl,"P",{});var kde=s(ac);XEr=r(kde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),ZZ=n(kde,"A",{href:!0});var RYt=s(ZZ);zEr=r(RYt,"from_pretrained()"),RYt.forEach(t),QEr=r(kde," class method or the "),KZ=n(kde,"A",{href:!0});var PYt=s(KZ);WEr=r(PYt,"from_config()"),PYt.forEach(t),UEr=r(kde,` class
method.`),kde.forEach(t),HEr=i(Vl),mk=n(Vl,"P",{});var Wao=s(mk);JEr=r(Wao,"This class cannot be instantiated directly using "),v3e=n(Wao,"CODE",{});var BYt=s(v3e);YEr=r(BYt,"__init__()"),BYt.forEach(t),ZEr=r(Wao," (throws an error)."),Wao.forEach(t),KEr=i(Vl),$t=n(Vl,"DIV",{class:!0});var Jy=s($t);T(fk.$$.fragment,Jy),e4r=i(Jy),F3e=n(Jy,"P",{});var IYt=s(F3e);o4r=r(IYt,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),IYt.forEach(t),r4r=i(Jy),nc=n(Jy,"P",{});var Sde=s(nc);t4r=r(Sde,`Note:
Loading a model from its configuration file does `),T3e=n(Sde,"STRONG",{});var NYt=s(T3e);a4r=r(NYt,"not"),NYt.forEach(t),n4r=r(Sde,` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=n(Sde,"A",{href:!0});var qYt=s(eK);s4r=r(qYt,"from_pretrained()"),qYt.forEach(t),l4r=r(Sde," to load the model weights."),Sde.forEach(t),i4r=i(Jy),T(j4.$$.fragment,Jy),Jy.forEach(t),d4r=i(Vl),mo=n(Vl,"DIV",{class:!0});var Pa=s(mo);T(gk.$$.fragment,Pa),c4r=i(Pa),M3e=n(Pa,"P",{});var jYt=s(M3e);m4r=r(jYt,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),jYt.forEach(t),f4r=i(Pa),fn=n(Pa,"P",{});var Yy=s(fn);g4r=r(Yy,"The model class to instantiate is selected based on the "),E3e=n(Yy,"CODE",{});var DYt=s(E3e);h4r=r(DYt,"model_type"),DYt.forEach(t),u4r=r(Yy,` property of the config object (either
passed as an argument or loaded from `),C3e=n(Yy,"CODE",{});var GYt=s(C3e);p4r=r(GYt,"pretrained_model_name_or_path"),GYt.forEach(t),_4r=r(Yy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w3e=n(Yy,"CODE",{});var OYt=s(w3e);b4r=r(OYt,"pretrained_model_name_or_path"),OYt.forEach(t),v4r=r(Yy,":"),Yy.forEach(t),F4r=i(Pa),sc=n(Pa,"UL",{});var Rde=s(sc);D4=n(Rde,"LI",{});var aUe=s(D4);A3e=n(aUe,"STRONG",{});var VYt=s(A3e);T4r=r(VYt,"layoutlm"),VYt.forEach(t),M4r=r(aUe," \u2014 "),oK=n(aUe,"A",{href:!0});var XYt=s(oK);E4r=r(XYt,"LayoutLMForQuestionAnswering"),XYt.forEach(t),C4r=r(aUe," (LayoutLM model)"),aUe.forEach(t),w4r=i(Rde),G4=n(Rde,"LI",{});var nUe=s(G4);L3e=n(nUe,"STRONG",{});var zYt=s(L3e);A4r=r(zYt,"layoutlmv2"),zYt.forEach(t),L4r=r(nUe," \u2014 "),rK=n(nUe,"A",{href:!0});var QYt=s(rK);y4r=r(QYt,"LayoutLMv2ForQuestionAnswering"),QYt.forEach(t),x4r=r(nUe," (LayoutLMv2 model)"),nUe.forEach(t),$4r=i(Rde),O4=n(Rde,"LI",{});var sUe=s(O4);y3e=n(sUe,"STRONG",{});var WYt=s(y3e);k4r=r(WYt,"layoutlmv3"),WYt.forEach(t),S4r=r(sUe," \u2014 "),tK=n(sUe,"A",{href:!0});var UYt=s(tK);R4r=r(UYt,"LayoutLMv3ForQuestionAnswering"),UYt.forEach(t),P4r=r(sUe," (LayoutLMv3 model)"),sUe.forEach(t),Rde.forEach(t),B4r=i(Pa),V4=n(Pa,"P",{});var lUe=s(V4);I4r=r(lUe,"The model is set in evaluation mode by default using "),x3e=n(lUe,"CODE",{});var HYt=s(x3e);N4r=r(HYt,"model.eval()"),HYt.forEach(t),q4r=r(lUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$3e=n(lUe,"CODE",{});var JYt=s($3e);j4r=r(JYt,"model.train()"),JYt.forEach(t),lUe.forEach(t),D4r=i(Pa),T(X4.$$.fragment,Pa),Pa.forEach(t),Vl.forEach(t),Sro=i(m),lc=n(m,"H2",{class:!0});var Uao=s(lc);z4=n(Uao,"A",{id:!0,class:!0,href:!0});var YYt=s(z4);k3e=n(YYt,"SPAN",{});var ZYt=s(k3e);T(hk.$$.fragment,ZYt),ZYt.forEach(t),YYt.forEach(t),G4r=i(Uao),S3e=n(Uao,"SPAN",{});var KYt=s(S3e);O4r=r(KYt,"AutoModelForImageClassification"),KYt.forEach(t),Uao.forEach(t),Rro=i(m),Wo=n(m,"DIV",{class:!0});var Xl=s(Wo);T(uk.$$.fragment,Xl),V4r=i(Xl),ic=n(Xl,"P",{});var Pde=s(ic);X4r=r(Pde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aK=n(Pde,"A",{href:!0});var eZt=s(aK);z4r=r(eZt,"from_pretrained()"),eZt.forEach(t),Q4r=r(Pde," class method or the "),nK=n(Pde,"A",{href:!0});var oZt=s(nK);W4r=r(oZt,"from_config()"),oZt.forEach(t),U4r=r(Pde,` class
method.`),Pde.forEach(t),H4r=i(Xl),pk=n(Xl,"P",{});var Hao=s(pk);J4r=r(Hao,"This class cannot be instantiated directly using "),R3e=n(Hao,"CODE",{});var rZt=s(R3e);Y4r=r(rZt,"__init__()"),rZt.forEach(t),Z4r=r(Hao," (throws an error)."),Hao.forEach(t),K4r=i(Xl),kt=n(Xl,"DIV",{class:!0});var Zy=s(kt);T(_k.$$.fragment,Zy),eCr=i(Zy),P3e=n(Zy,"P",{});var tZt=s(P3e);oCr=r(tZt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),tZt.forEach(t),rCr=i(Zy),dc=n(Zy,"P",{});var Bde=s(dc);tCr=r(Bde,`Note:
Loading a model from its configuration file does `),B3e=n(Bde,"STRONG",{});var aZt=s(B3e);aCr=r(aZt,"not"),aZt.forEach(t),nCr=r(Bde,` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=n(Bde,"A",{href:!0});var nZt=s(sK);sCr=r(nZt,"from_pretrained()"),nZt.forEach(t),lCr=r(Bde," to load the model weights."),Bde.forEach(t),iCr=i(Zy),T(Q4.$$.fragment,Zy),Zy.forEach(t),dCr=i(Xl),fo=n(Xl,"DIV",{class:!0});var Ba=s(fo);T(bk.$$.fragment,Ba),cCr=i(Ba),I3e=n(Ba,"P",{});var sZt=s(I3e);mCr=r(sZt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),sZt.forEach(t),fCr=i(Ba),gn=n(Ba,"P",{});var Ky=s(gn);gCr=r(Ky,"The model class to instantiate is selected based on the "),N3e=n(Ky,"CODE",{});var lZt=s(N3e);hCr=r(lZt,"model_type"),lZt.forEach(t),uCr=r(Ky,` property of the config object (either
passed as an argument or loaded from `),q3e=n(Ky,"CODE",{});var iZt=s(q3e);pCr=r(iZt,"pretrained_model_name_or_path"),iZt.forEach(t),_Cr=r(Ky,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j3e=n(Ky,"CODE",{});var dZt=s(j3e);bCr=r(dZt,"pretrained_model_name_or_path"),dZt.forEach(t),vCr=r(Ky,":"),Ky.forEach(t),FCr=i(Ba),be=n(Ba,"UL",{});var Fe=s(be);W4=n(Fe,"LI",{});var iUe=s(W4);D3e=n(iUe,"STRONG",{});var cZt=s(D3e);TCr=r(cZt,"beit"),cZt.forEach(t),MCr=r(iUe," \u2014 "),lK=n(iUe,"A",{href:!0});var mZt=s(lK);ECr=r(mZt,"BeitForImageClassification"),mZt.forEach(t),CCr=r(iUe," (BEiT model)"),iUe.forEach(t),wCr=i(Fe),U4=n(Fe,"LI",{});var dUe=s(U4);G3e=n(dUe,"STRONG",{});var fZt=s(G3e);ACr=r(fZt,"convnext"),fZt.forEach(t),LCr=r(dUe," \u2014 "),iK=n(dUe,"A",{href:!0});var gZt=s(iK);yCr=r(gZt,"ConvNextForImageClassification"),gZt.forEach(t),xCr=r(dUe," (ConvNeXT model)"),dUe.forEach(t),$Cr=i(Fe),H4=n(Fe,"LI",{});var cUe=s(H4);O3e=n(cUe,"STRONG",{});var hZt=s(O3e);kCr=r(hZt,"cvt"),hZt.forEach(t),SCr=r(cUe," \u2014 "),dK=n(cUe,"A",{href:!0});var uZt=s(dK);RCr=r(uZt,"CvtForImageClassification"),uZt.forEach(t),PCr=r(cUe," (CvT model)"),cUe.forEach(t),BCr=i(Fe),J4=n(Fe,"LI",{});var mUe=s(J4);V3e=n(mUe,"STRONG",{});var pZt=s(V3e);ICr=r(pZt,"data2vec-vision"),pZt.forEach(t),NCr=r(mUe," \u2014 "),cK=n(mUe,"A",{href:!0});var _Zt=s(cK);qCr=r(_Zt,"Data2VecVisionForImageClassification"),_Zt.forEach(t),jCr=r(mUe," (Data2VecVision model)"),mUe.forEach(t),DCr=i(Fe),Cl=n(Fe,"LI",{});var qI=s(Cl);X3e=n(qI,"STRONG",{});var bZt=s(X3e);GCr=r(bZt,"deit"),bZt.forEach(t),OCr=r(qI," \u2014 "),mK=n(qI,"A",{href:!0});var vZt=s(mK);VCr=r(vZt,"DeiTForImageClassification"),vZt.forEach(t),XCr=r(qI," or "),fK=n(qI,"A",{href:!0});var FZt=s(fK);zCr=r(FZt,"DeiTForImageClassificationWithTeacher"),FZt.forEach(t),QCr=r(qI," (DeiT model)"),qI.forEach(t),WCr=i(Fe),Y4=n(Fe,"LI",{});var fUe=s(Y4);z3e=n(fUe,"STRONG",{});var TZt=s(z3e);UCr=r(TZt,"imagegpt"),TZt.forEach(t),HCr=r(fUe," \u2014 "),gK=n(fUe,"A",{href:!0});var MZt=s(gK);JCr=r(MZt,"ImageGPTForImageClassification"),MZt.forEach(t),YCr=r(fUe," (ImageGPT model)"),fUe.forEach(t),ZCr=i(Fe),wl=n(Fe,"LI",{});var jI=s(wl);Q3e=n(jI,"STRONG",{});var EZt=s(Q3e);KCr=r(EZt,"levit"),EZt.forEach(t),e3r=r(jI," \u2014 "),hK=n(jI,"A",{href:!0});var CZt=s(hK);o3r=r(CZt,"LevitForImageClassification"),CZt.forEach(t),r3r=r(jI," or "),uK=n(jI,"A",{href:!0});var wZt=s(uK);t3r=r(wZt,"LevitForImageClassificationWithTeacher"),wZt.forEach(t),a3r=r(jI," (LeViT model)"),jI.forEach(t),n3r=i(Fe),Z4=n(Fe,"LI",{});var gUe=s(Z4);W3e=n(gUe,"STRONG",{});var AZt=s(W3e);s3r=r(AZt,"mobilevit"),AZt.forEach(t),l3r=r(gUe," \u2014 "),pK=n(gUe,"A",{href:!0});var LZt=s(pK);i3r=r(LZt,"MobileViTForImageClassification"),LZt.forEach(t),d3r=r(gUe," (MobileViT model)"),gUe.forEach(t),c3r=i(Fe),St=n(Fe,"LI",{});var Rf=s(St);U3e=n(Rf,"STRONG",{});var yZt=s(U3e);m3r=r(yZt,"perceiver"),yZt.forEach(t),f3r=r(Rf," \u2014 "),_K=n(Rf,"A",{href:!0});var xZt=s(_K);g3r=r(xZt,"PerceiverForImageClassificationLearned"),xZt.forEach(t),h3r=r(Rf," or "),bK=n(Rf,"A",{href:!0});var $Zt=s(bK);u3r=r($Zt,"PerceiverForImageClassificationFourier"),$Zt.forEach(t),p3r=r(Rf," or "),vK=n(Rf,"A",{href:!0});var kZt=s(vK);_3r=r(kZt,"PerceiverForImageClassificationConvProcessing"),kZt.forEach(t),b3r=r(Rf," (Perceiver model)"),Rf.forEach(t),v3r=i(Fe),K4=n(Fe,"LI",{});var hUe=s(K4);H3e=n(hUe,"STRONG",{});var SZt=s(H3e);F3r=r(SZt,"poolformer"),SZt.forEach(t),T3r=r(hUe," \u2014 "),FK=n(hUe,"A",{href:!0});var RZt=s(FK);M3r=r(RZt,"PoolFormerForImageClassification"),RZt.forEach(t),E3r=r(hUe," (PoolFormer model)"),hUe.forEach(t),C3r=i(Fe),eC=n(Fe,"LI",{});var uUe=s(eC);J3e=n(uUe,"STRONG",{});var PZt=s(J3e);w3r=r(PZt,"regnet"),PZt.forEach(t),A3r=r(uUe," \u2014 "),TK=n(uUe,"A",{href:!0});var BZt=s(TK);L3r=r(BZt,"RegNetForImageClassification"),BZt.forEach(t),y3r=r(uUe," (RegNet model)"),uUe.forEach(t),x3r=i(Fe),oC=n(Fe,"LI",{});var pUe=s(oC);Y3e=n(pUe,"STRONG",{});var IZt=s(Y3e);$3r=r(IZt,"resnet"),IZt.forEach(t),k3r=r(pUe," \u2014 "),MK=n(pUe,"A",{href:!0});var NZt=s(MK);S3r=r(NZt,"ResNetForImageClassification"),NZt.forEach(t),R3r=r(pUe," (ResNet model)"),pUe.forEach(t),P3r=i(Fe),rC=n(Fe,"LI",{});var _Ue=s(rC);Z3e=n(_Ue,"STRONG",{});var qZt=s(Z3e);B3r=r(qZt,"segformer"),qZt.forEach(t),I3r=r(_Ue," \u2014 "),EK=n(_Ue,"A",{href:!0});var jZt=s(EK);N3r=r(jZt,"SegformerForImageClassification"),jZt.forEach(t),q3r=r(_Ue," (SegFormer model)"),_Ue.forEach(t),j3r=i(Fe),tC=n(Fe,"LI",{});var bUe=s(tC);K3e=n(bUe,"STRONG",{});var DZt=s(K3e);D3r=r(DZt,"swin"),DZt.forEach(t),G3r=r(bUe," \u2014 "),CK=n(bUe,"A",{href:!0});var GZt=s(CK);O3r=r(GZt,"SwinForImageClassification"),GZt.forEach(t),V3r=r(bUe," (Swin Transformer model)"),bUe.forEach(t),X3r=i(Fe),aC=n(Fe,"LI",{});var vUe=s(aC);e5e=n(vUe,"STRONG",{});var OZt=s(e5e);z3r=r(OZt,"swinv2"),OZt.forEach(t),Q3r=r(vUe," \u2014 "),wK=n(vUe,"A",{href:!0});var VZt=s(wK);W3r=r(VZt,"Swinv2ForImageClassification"),VZt.forEach(t),U3r=r(vUe," (Swin Transformer V2 model)"),vUe.forEach(t),H3r=i(Fe),nC=n(Fe,"LI",{});var FUe=s(nC);o5e=n(FUe,"STRONG",{});var XZt=s(o5e);J3r=r(XZt,"van"),XZt.forEach(t),Y3r=r(FUe," \u2014 "),AK=n(FUe,"A",{href:!0});var zZt=s(AK);Z3r=r(zZt,"VanForImageClassification"),zZt.forEach(t),K3r=r(FUe," (VAN model)"),FUe.forEach(t),e5r=i(Fe),sC=n(Fe,"LI",{});var TUe=s(sC);r5e=n(TUe,"STRONG",{});var QZt=s(r5e);o5r=r(QZt,"vit"),QZt.forEach(t),r5r=r(TUe," \u2014 "),LK=n(TUe,"A",{href:!0});var WZt=s(LK);t5r=r(WZt,"ViTForImageClassification"),WZt.forEach(t),a5r=r(TUe," (ViT model)"),TUe.forEach(t),n5r=i(Fe),lC=n(Fe,"LI",{});var MUe=s(lC);t5e=n(MUe,"STRONG",{});var UZt=s(t5e);s5r=r(UZt,"vit_msn"),UZt.forEach(t),l5r=r(MUe," \u2014 "),yK=n(MUe,"A",{href:!0});var HZt=s(yK);i5r=r(HZt,"ViTMSNForImageClassification"),HZt.forEach(t),d5r=r(MUe," (ViTMSN model)"),MUe.forEach(t),Fe.forEach(t),c5r=i(Ba),iC=n(Ba,"P",{});var EUe=s(iC);m5r=r(EUe,"The model is set in evaluation mode by default using "),a5e=n(EUe,"CODE",{});var JZt=s(a5e);f5r=r(JZt,"model.eval()"),JZt.forEach(t),g5r=r(EUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n5e=n(EUe,"CODE",{});var YZt=s(n5e);h5r=r(YZt,"model.train()"),YZt.forEach(t),EUe.forEach(t),u5r=i(Ba),T(dC.$$.fragment,Ba),Ba.forEach(t),Xl.forEach(t),Pro=i(m),cc=n(m,"H2",{class:!0});var Jao=s(cc);cC=n(Jao,"A",{id:!0,class:!0,href:!0});var ZZt=s(cC);s5e=n(ZZt,"SPAN",{});var KZt=s(s5e);T(vk.$$.fragment,KZt),KZt.forEach(t),ZZt.forEach(t),p5r=i(Jao),l5e=n(Jao,"SPAN",{});var eKt=s(l5e);_5r=r(eKt,"AutoModelForVideoClassification"),eKt.forEach(t),Jao.forEach(t),Bro=i(m),Uo=n(m,"DIV",{class:!0});var zl=s(Uo);T(Fk.$$.fragment,zl),b5r=i(zl),mc=n(zl,"P",{});var Ide=s(mc);v5r=r(Ide,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),xK=n(Ide,"A",{href:!0});var oKt=s(xK);F5r=r(oKt,"from_pretrained()"),oKt.forEach(t),T5r=r(Ide," class method or the "),$K=n(Ide,"A",{href:!0});var rKt=s($K);M5r=r(rKt,"from_config()"),rKt.forEach(t),E5r=r(Ide,` class
method.`),Ide.forEach(t),C5r=i(zl),Tk=n(zl,"P",{});var Yao=s(Tk);w5r=r(Yao,"This class cannot be instantiated directly using "),i5e=n(Yao,"CODE",{});var tKt=s(i5e);A5r=r(tKt,"__init__()"),tKt.forEach(t),L5r=r(Yao," (throws an error)."),Yao.forEach(t),y5r=i(zl),Rt=n(zl,"DIV",{class:!0});var e9=s(Rt);T(Mk.$$.fragment,e9),x5r=i(e9),d5e=n(e9,"P",{});var aKt=s(d5e);$5r=r(aKt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),aKt.forEach(t),k5r=i(e9),fc=n(e9,"P",{});var Nde=s(fc);S5r=r(Nde,`Note:
Loading a model from its configuration file does `),c5e=n(Nde,"STRONG",{});var nKt=s(c5e);R5r=r(nKt,"not"),nKt.forEach(t),P5r=r(Nde,` load the model weights. It only affects the
model\u2019s configuration. Use `),kK=n(Nde,"A",{href:!0});var sKt=s(kK);B5r=r(sKt,"from_pretrained()"),sKt.forEach(t),I5r=r(Nde," to load the model weights."),Nde.forEach(t),N5r=i(e9),T(mC.$$.fragment,e9),e9.forEach(t),q5r=i(zl),go=n(zl,"DIV",{class:!0});var Ia=s(go);T(Ek.$$.fragment,Ia),j5r=i(Ia),m5e=n(Ia,"P",{});var lKt=s(m5e);D5r=r(lKt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),lKt.forEach(t),G5r=i(Ia),hn=n(Ia,"P",{});var o9=s(hn);O5r=r(o9,"The model class to instantiate is selected based on the "),f5e=n(o9,"CODE",{});var iKt=s(f5e);V5r=r(iKt,"model_type"),iKt.forEach(t),X5r=r(o9,` property of the config object (either
passed as an argument or loaded from `),g5e=n(o9,"CODE",{});var dKt=s(g5e);z5r=r(dKt,"pretrained_model_name_or_path"),dKt.forEach(t),Q5r=r(o9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h5e=n(o9,"CODE",{});var cKt=s(h5e);W5r=r(cKt,"pretrained_model_name_or_path"),cKt.forEach(t),U5r=r(o9,":"),o9.forEach(t),H5r=i(Ia),u5e=n(Ia,"UL",{});var mKt=s(u5e);fC=n(mKt,"LI",{});var CUe=s(fC);p5e=n(CUe,"STRONG",{});var fKt=s(p5e);J5r=r(fKt,"videomae"),fKt.forEach(t),Y5r=r(CUe," \u2014 "),SK=n(CUe,"A",{href:!0});var gKt=s(SK);Z5r=r(gKt,"VideoMAEForVideoClassification"),gKt.forEach(t),K5r=r(CUe," (VideoMAE model)"),CUe.forEach(t),mKt.forEach(t),e0r=i(Ia),gC=n(Ia,"P",{});var wUe=s(gC);o0r=r(wUe,"The model is set in evaluation mode by default using "),_5e=n(wUe,"CODE",{});var hKt=s(_5e);r0r=r(hKt,"model.eval()"),hKt.forEach(t),t0r=r(wUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b5e=n(wUe,"CODE",{});var uKt=s(b5e);a0r=r(uKt,"model.train()"),uKt.forEach(t),wUe.forEach(t),n0r=i(Ia),T(hC.$$.fragment,Ia),Ia.forEach(t),zl.forEach(t),Iro=i(m),gc=n(m,"H2",{class:!0});var Zao=s(gc);uC=n(Zao,"A",{id:!0,class:!0,href:!0});var pKt=s(uC);v5e=n(pKt,"SPAN",{});var _Kt=s(v5e);T(Ck.$$.fragment,_Kt),_Kt.forEach(t),pKt.forEach(t),s0r=i(Zao),F5e=n(Zao,"SPAN",{});var bKt=s(F5e);l0r=r(bKt,"AutoModelForVision2Seq"),bKt.forEach(t),Zao.forEach(t),Nro=i(m),Ho=n(m,"DIV",{class:!0});var Ql=s(Ho);T(wk.$$.fragment,Ql),i0r=i(Ql),hc=n(Ql,"P",{});var qde=s(hc);d0r=r(qde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),RK=n(qde,"A",{href:!0});var vKt=s(RK);c0r=r(vKt,"from_pretrained()"),vKt.forEach(t),m0r=r(qde," class method or the "),PK=n(qde,"A",{href:!0});var FKt=s(PK);f0r=r(FKt,"from_config()"),FKt.forEach(t),g0r=r(qde,` class
method.`),qde.forEach(t),h0r=i(Ql),Ak=n(Ql,"P",{});var Kao=s(Ak);u0r=r(Kao,"This class cannot be instantiated directly using "),T5e=n(Kao,"CODE",{});var TKt=s(T5e);p0r=r(TKt,"__init__()"),TKt.forEach(t),_0r=r(Kao," (throws an error)."),Kao.forEach(t),b0r=i(Ql),Pt=n(Ql,"DIV",{class:!0});var r9=s(Pt);T(Lk.$$.fragment,r9),v0r=i(r9),M5e=n(r9,"P",{});var MKt=s(M5e);F0r=r(MKt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),MKt.forEach(t),T0r=i(r9),uc=n(r9,"P",{});var jde=s(uc);M0r=r(jde,`Note:
Loading a model from its configuration file does `),E5e=n(jde,"STRONG",{});var EKt=s(E5e);E0r=r(EKt,"not"),EKt.forEach(t),C0r=r(jde,` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=n(jde,"A",{href:!0});var CKt=s(BK);w0r=r(CKt,"from_pretrained()"),CKt.forEach(t),A0r=r(jde," to load the model weights."),jde.forEach(t),L0r=i(r9),T(pC.$$.fragment,r9),r9.forEach(t),y0r=i(Ql),ho=n(Ql,"DIV",{class:!0});var Na=s(ho);T(yk.$$.fragment,Na),x0r=i(Na),C5e=n(Na,"P",{});var wKt=s(C5e);$0r=r(wKt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wKt.forEach(t),k0r=i(Na),un=n(Na,"P",{});var t9=s(un);S0r=r(t9,"The model class to instantiate is selected based on the "),w5e=n(t9,"CODE",{});var AKt=s(w5e);R0r=r(AKt,"model_type"),AKt.forEach(t),P0r=r(t9,` property of the config object (either
passed as an argument or loaded from `),A5e=n(t9,"CODE",{});var LKt=s(A5e);B0r=r(LKt,"pretrained_model_name_or_path"),LKt.forEach(t),I0r=r(t9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L5e=n(t9,"CODE",{});var yKt=s(L5e);N0r=r(yKt,"pretrained_model_name_or_path"),yKt.forEach(t),q0r=r(t9,":"),t9.forEach(t),j0r=i(Na),y5e=n(Na,"UL",{});var xKt=s(y5e);_C=n(xKt,"LI",{});var AUe=s(_C);x5e=n(AUe,"STRONG",{});var $Kt=s(x5e);D0r=r($Kt,"vision-encoder-decoder"),$Kt.forEach(t),G0r=r(AUe," \u2014 "),IK=n(AUe,"A",{href:!0});var kKt=s(IK);O0r=r(kKt,"VisionEncoderDecoderModel"),kKt.forEach(t),V0r=r(AUe," (Vision Encoder decoder model)"),AUe.forEach(t),xKt.forEach(t),X0r=i(Na),bC=n(Na,"P",{});var LUe=s(bC);z0r=r(LUe,"The model is set in evaluation mode by default using "),$5e=n(LUe,"CODE",{});var SKt=s($5e);Q0r=r(SKt,"model.eval()"),SKt.forEach(t),W0r=r(LUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k5e=n(LUe,"CODE",{});var RKt=s(k5e);U0r=r(RKt,"model.train()"),RKt.forEach(t),LUe.forEach(t),H0r=i(Na),T(vC.$$.fragment,Na),Na.forEach(t),Ql.forEach(t),qro=i(m),pc=n(m,"H2",{class:!0});var eno=s(pc);FC=n(eno,"A",{id:!0,class:!0,href:!0});var PKt=s(FC);S5e=n(PKt,"SPAN",{});var BKt=s(S5e);T(xk.$$.fragment,BKt),BKt.forEach(t),PKt.forEach(t),J0r=i(eno),R5e=n(eno,"SPAN",{});var IKt=s(R5e);Y0r=r(IKt,"AutoModelForVisualQuestionAnswering"),IKt.forEach(t),eno.forEach(t),jro=i(m),Jo=n(m,"DIV",{class:!0});var Wl=s(Jo);T($k.$$.fragment,Wl),Z0r=i(Wl),_c=n(Wl,"P",{});var Dde=s(_c);K0r=r(Dde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),NK=n(Dde,"A",{href:!0});var NKt=s(NK);ewr=r(NKt,"from_pretrained()"),NKt.forEach(t),owr=r(Dde," class method or the "),qK=n(Dde,"A",{href:!0});var qKt=s(qK);rwr=r(qKt,"from_config()"),qKt.forEach(t),twr=r(Dde,` class
method.`),Dde.forEach(t),awr=i(Wl),kk=n(Wl,"P",{});var ono=s(kk);nwr=r(ono,"This class cannot be instantiated directly using "),P5e=n(ono,"CODE",{});var jKt=s(P5e);swr=r(jKt,"__init__()"),jKt.forEach(t),lwr=r(ono," (throws an error)."),ono.forEach(t),iwr=i(Wl),Bt=n(Wl,"DIV",{class:!0});var a9=s(Bt);T(Sk.$$.fragment,a9),dwr=i(a9),B5e=n(a9,"P",{});var DKt=s(B5e);cwr=r(DKt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),DKt.forEach(t),mwr=i(a9),bc=n(a9,"P",{});var Gde=s(bc);fwr=r(Gde,`Note:
Loading a model from its configuration file does `),I5e=n(Gde,"STRONG",{});var GKt=s(I5e);gwr=r(GKt,"not"),GKt.forEach(t),hwr=r(Gde,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(Gde,"A",{href:!0});var OKt=s(jK);uwr=r(OKt,"from_pretrained()"),OKt.forEach(t),pwr=r(Gde," to load the model weights."),Gde.forEach(t),_wr=i(a9),T(TC.$$.fragment,a9),a9.forEach(t),bwr=i(Wl),uo=n(Wl,"DIV",{class:!0});var qa=s(uo);T(Rk.$$.fragment,qa),vwr=i(qa),N5e=n(qa,"P",{});var VKt=s(N5e);Fwr=r(VKt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),VKt.forEach(t),Twr=i(qa),pn=n(qa,"P",{});var n9=s(pn);Mwr=r(n9,"The model class to instantiate is selected based on the "),q5e=n(n9,"CODE",{});var XKt=s(q5e);Ewr=r(XKt,"model_type"),XKt.forEach(t),Cwr=r(n9,` property of the config object (either
passed as an argument or loaded from `),j5e=n(n9,"CODE",{});var zKt=s(j5e);wwr=r(zKt,"pretrained_model_name_or_path"),zKt.forEach(t),Awr=r(n9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D5e=n(n9,"CODE",{});var QKt=s(D5e);Lwr=r(QKt,"pretrained_model_name_or_path"),QKt.forEach(t),ywr=r(n9,":"),n9.forEach(t),xwr=i(qa),G5e=n(qa,"UL",{});var WKt=s(G5e);MC=n(WKt,"LI",{});var yUe=s(MC);O5e=n(yUe,"STRONG",{});var UKt=s(O5e);$wr=r(UKt,"vilt"),UKt.forEach(t),kwr=r(yUe," \u2014 "),DK=n(yUe,"A",{href:!0});var HKt=s(DK);Swr=r(HKt,"ViltForQuestionAnswering"),HKt.forEach(t),Rwr=r(yUe," (ViLT model)"),yUe.forEach(t),WKt.forEach(t),Pwr=i(qa),EC=n(qa,"P",{});var xUe=s(EC);Bwr=r(xUe,"The model is set in evaluation mode by default using "),V5e=n(xUe,"CODE",{});var JKt=s(V5e);Iwr=r(JKt,"model.eval()"),JKt.forEach(t),Nwr=r(xUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X5e=n(xUe,"CODE",{});var YKt=s(X5e);qwr=r(YKt,"model.train()"),YKt.forEach(t),xUe.forEach(t),jwr=i(qa),T(CC.$$.fragment,qa),qa.forEach(t),Wl.forEach(t),Dro=i(m),vc=n(m,"H2",{class:!0});var rno=s(vc);wC=n(rno,"A",{id:!0,class:!0,href:!0});var ZKt=s(wC);z5e=n(ZKt,"SPAN",{});var KKt=s(z5e);T(Pk.$$.fragment,KKt),KKt.forEach(t),ZKt.forEach(t),Dwr=i(rno),Q5e=n(rno,"SPAN",{});var eea=s(Q5e);Gwr=r(eea,"AutoModelForAudioClassification"),eea.forEach(t),rno.forEach(t),Gro=i(m),Yo=n(m,"DIV",{class:!0});var Ul=s(Yo);T(Bk.$$.fragment,Ul),Owr=i(Ul),Fc=n(Ul,"P",{});var Ode=s(Fc);Vwr=r(Ode,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),GK=n(Ode,"A",{href:!0});var oea=s(GK);Xwr=r(oea,"from_pretrained()"),oea.forEach(t),zwr=r(Ode," class method or the "),OK=n(Ode,"A",{href:!0});var rea=s(OK);Qwr=r(rea,"from_config()"),rea.forEach(t),Wwr=r(Ode,` class
method.`),Ode.forEach(t),Uwr=i(Ul),Ik=n(Ul,"P",{});var tno=s(Ik);Hwr=r(tno,"This class cannot be instantiated directly using "),W5e=n(tno,"CODE",{});var tea=s(W5e);Jwr=r(tea,"__init__()"),tea.forEach(t),Ywr=r(tno," (throws an error)."),tno.forEach(t),Zwr=i(Ul),It=n(Ul,"DIV",{class:!0});var s9=s(It);T(Nk.$$.fragment,s9),Kwr=i(s9),U5e=n(s9,"P",{});var aea=s(U5e);eAr=r(aea,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),aea.forEach(t),oAr=i(s9),Tc=n(s9,"P",{});var Vde=s(Tc);rAr=r(Vde,`Note:
Loading a model from its configuration file does `),H5e=n(Vde,"STRONG",{});var nea=s(H5e);tAr=r(nea,"not"),nea.forEach(t),aAr=r(Vde,` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=n(Vde,"A",{href:!0});var sea=s(VK);nAr=r(sea,"from_pretrained()"),sea.forEach(t),sAr=r(Vde," to load the model weights."),Vde.forEach(t),lAr=i(s9),T(AC.$$.fragment,s9),s9.forEach(t),iAr=i(Ul),po=n(Ul,"DIV",{class:!0});var ja=s(po);T(qk.$$.fragment,ja),dAr=i(ja),J5e=n(ja,"P",{});var lea=s(J5e);cAr=r(lea,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),lea.forEach(t),mAr=i(ja),_n=n(ja,"P",{});var l9=s(_n);fAr=r(l9,"The model class to instantiate is selected based on the "),Y5e=n(l9,"CODE",{});var iea=s(Y5e);gAr=r(iea,"model_type"),iea.forEach(t),hAr=r(l9,` property of the config object (either
passed as an argument or loaded from `),Z5e=n(l9,"CODE",{});var dea=s(Z5e);uAr=r(dea,"pretrained_model_name_or_path"),dea.forEach(t),pAr=r(l9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K5e=n(l9,"CODE",{});var cea=s(K5e);_Ar=r(cea,"pretrained_model_name_or_path"),cea.forEach(t),bAr=r(l9,":"),l9.forEach(t),vAr=i(ja),Be=n(ja,"UL",{});var We=s(Be);LC=n(We,"LI",{});var $Ue=s(LC);e0e=n($Ue,"STRONG",{});var mea=s(e0e);FAr=r(mea,"data2vec-audio"),mea.forEach(t),TAr=r($Ue," \u2014 "),XK=n($Ue,"A",{href:!0});var fea=s(XK);MAr=r(fea,"Data2VecAudioForSequenceClassification"),fea.forEach(t),EAr=r($Ue," (Data2VecAudio model)"),$Ue.forEach(t),CAr=i(We),yC=n(We,"LI",{});var kUe=s(yC);o0e=n(kUe,"STRONG",{});var gea=s(o0e);wAr=r(gea,"hubert"),gea.forEach(t),AAr=r(kUe," \u2014 "),zK=n(kUe,"A",{href:!0});var hea=s(zK);LAr=r(hea,"HubertForSequenceClassification"),hea.forEach(t),yAr=r(kUe," (Hubert model)"),kUe.forEach(t),xAr=i(We),xC=n(We,"LI",{});var SUe=s(xC);r0e=n(SUe,"STRONG",{});var uea=s(r0e);$Ar=r(uea,"sew"),uea.forEach(t),kAr=r(SUe," \u2014 "),QK=n(SUe,"A",{href:!0});var pea=s(QK);SAr=r(pea,"SEWForSequenceClassification"),pea.forEach(t),RAr=r(SUe," (SEW model)"),SUe.forEach(t),PAr=i(We),$C=n(We,"LI",{});var RUe=s($C);t0e=n(RUe,"STRONG",{});var _ea=s(t0e);BAr=r(_ea,"sew-d"),_ea.forEach(t),IAr=r(RUe," \u2014 "),WK=n(RUe,"A",{href:!0});var bea=s(WK);NAr=r(bea,"SEWDForSequenceClassification"),bea.forEach(t),qAr=r(RUe," (SEW-D model)"),RUe.forEach(t),jAr=i(We),kC=n(We,"LI",{});var PUe=s(kC);a0e=n(PUe,"STRONG",{});var vea=s(a0e);DAr=r(vea,"unispeech"),vea.forEach(t),GAr=r(PUe," \u2014 "),UK=n(PUe,"A",{href:!0});var Fea=s(UK);OAr=r(Fea,"UniSpeechForSequenceClassification"),Fea.forEach(t),VAr=r(PUe," (UniSpeech model)"),PUe.forEach(t),XAr=i(We),SC=n(We,"LI",{});var BUe=s(SC);n0e=n(BUe,"STRONG",{});var Tea=s(n0e);zAr=r(Tea,"unispeech-sat"),Tea.forEach(t),QAr=r(BUe," \u2014 "),HK=n(BUe,"A",{href:!0});var Mea=s(HK);WAr=r(Mea,"UniSpeechSatForSequenceClassification"),Mea.forEach(t),UAr=r(BUe," (UniSpeechSat model)"),BUe.forEach(t),HAr=i(We),RC=n(We,"LI",{});var IUe=s(RC);s0e=n(IUe,"STRONG",{});var Eea=s(s0e);JAr=r(Eea,"wav2vec2"),Eea.forEach(t),YAr=r(IUe," \u2014 "),JK=n(IUe,"A",{href:!0});var Cea=s(JK);ZAr=r(Cea,"Wav2Vec2ForSequenceClassification"),Cea.forEach(t),KAr=r(IUe," (Wav2Vec2 model)"),IUe.forEach(t),e6r=i(We),PC=n(We,"LI",{});var NUe=s(PC);l0e=n(NUe,"STRONG",{});var wea=s(l0e);o6r=r(wea,"wav2vec2-conformer"),wea.forEach(t),r6r=r(NUe," \u2014 "),YK=n(NUe,"A",{href:!0});var Aea=s(YK);t6r=r(Aea,"Wav2Vec2ConformerForSequenceClassification"),Aea.forEach(t),a6r=r(NUe," (Wav2Vec2-Conformer model)"),NUe.forEach(t),n6r=i(We),BC=n(We,"LI",{});var qUe=s(BC);i0e=n(qUe,"STRONG",{});var Lea=s(i0e);s6r=r(Lea,"wavlm"),Lea.forEach(t),l6r=r(qUe," \u2014 "),ZK=n(qUe,"A",{href:!0});var yea=s(ZK);i6r=r(yea,"WavLMForSequenceClassification"),yea.forEach(t),d6r=r(qUe," (WavLM model)"),qUe.forEach(t),We.forEach(t),c6r=i(ja),IC=n(ja,"P",{});var jUe=s(IC);m6r=r(jUe,"The model is set in evaluation mode by default using "),d0e=n(jUe,"CODE",{});var xea=s(d0e);f6r=r(xea,"model.eval()"),xea.forEach(t),g6r=r(jUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c0e=n(jUe,"CODE",{});var $ea=s(c0e);h6r=r($ea,"model.train()"),$ea.forEach(t),jUe.forEach(t),u6r=i(ja),T(NC.$$.fragment,ja),ja.forEach(t),Ul.forEach(t),Oro=i(m),Mc=n(m,"H2",{class:!0});var ano=s(Mc);qC=n(ano,"A",{id:!0,class:!0,href:!0});var kea=s(qC);m0e=n(kea,"SPAN",{});var Sea=s(m0e);T(jk.$$.fragment,Sea),Sea.forEach(t),kea.forEach(t),p6r=i(ano),f0e=n(ano,"SPAN",{});var Rea=s(f0e);_6r=r(Rea,"AutoModelForAudioFrameClassification"),Rea.forEach(t),ano.forEach(t),Vro=i(m),Zo=n(m,"DIV",{class:!0});var Hl=s(Zo);T(Dk.$$.fragment,Hl),b6r=i(Hl),Ec=n(Hl,"P",{});var Xde=s(Ec);v6r=r(Xde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),KK=n(Xde,"A",{href:!0});var Pea=s(KK);F6r=r(Pea,"from_pretrained()"),Pea.forEach(t),T6r=r(Xde," class method or the "),eee=n(Xde,"A",{href:!0});var Bea=s(eee);M6r=r(Bea,"from_config()"),Bea.forEach(t),E6r=r(Xde,` class
method.`),Xde.forEach(t),C6r=i(Hl),Gk=n(Hl,"P",{});var nno=s(Gk);w6r=r(nno,"This class cannot be instantiated directly using "),g0e=n(nno,"CODE",{});var Iea=s(g0e);A6r=r(Iea,"__init__()"),Iea.forEach(t),L6r=r(nno," (throws an error)."),nno.forEach(t),y6r=i(Hl),Nt=n(Hl,"DIV",{class:!0});var i9=s(Nt);T(Ok.$$.fragment,i9),x6r=i(i9),h0e=n(i9,"P",{});var Nea=s(h0e);$6r=r(Nea,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Nea.forEach(t),k6r=i(i9),Cc=n(i9,"P",{});var zde=s(Cc);S6r=r(zde,`Note:
Loading a model from its configuration file does `),u0e=n(zde,"STRONG",{});var qea=s(u0e);R6r=r(qea,"not"),qea.forEach(t),P6r=r(zde,` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=n(zde,"A",{href:!0});var jea=s(oee);B6r=r(jea,"from_pretrained()"),jea.forEach(t),I6r=r(zde," to load the model weights."),zde.forEach(t),N6r=i(i9),T(jC.$$.fragment,i9),i9.forEach(t),q6r=i(Hl),_o=n(Hl,"DIV",{class:!0});var Da=s(_o);T(Vk.$$.fragment,Da),j6r=i(Da),p0e=n(Da,"P",{});var Dea=s(p0e);D6r=r(Dea,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Dea.forEach(t),G6r=i(Da),bn=n(Da,"P",{});var d9=s(bn);O6r=r(d9,"The model class to instantiate is selected based on the "),_0e=n(d9,"CODE",{});var Gea=s(_0e);V6r=r(Gea,"model_type"),Gea.forEach(t),X6r=r(d9,` property of the config object (either
passed as an argument or loaded from `),b0e=n(d9,"CODE",{});var Oea=s(b0e);z6r=r(Oea,"pretrained_model_name_or_path"),Oea.forEach(t),Q6r=r(d9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v0e=n(d9,"CODE",{});var Vea=s(v0e);W6r=r(Vea,"pretrained_model_name_or_path"),Vea.forEach(t),U6r=r(d9,":"),d9.forEach(t),H6r=i(Da),gt=n(Da,"UL",{});var Jl=s(gt);DC=n(Jl,"LI",{});var DUe=s(DC);F0e=n(DUe,"STRONG",{});var Xea=s(F0e);J6r=r(Xea,"data2vec-audio"),Xea.forEach(t),Y6r=r(DUe," \u2014 "),ree=n(DUe,"A",{href:!0});var zea=s(ree);Z6r=r(zea,"Data2VecAudioForAudioFrameClassification"),zea.forEach(t),K6r=r(DUe," (Data2VecAudio model)"),DUe.forEach(t),e7r=i(Jl),GC=n(Jl,"LI",{});var GUe=s(GC);T0e=n(GUe,"STRONG",{});var Qea=s(T0e);o7r=r(Qea,"unispeech-sat"),Qea.forEach(t),r7r=r(GUe," \u2014 "),tee=n(GUe,"A",{href:!0});var Wea=s(tee);t7r=r(Wea,"UniSpeechSatForAudioFrameClassification"),Wea.forEach(t),a7r=r(GUe," (UniSpeechSat model)"),GUe.forEach(t),n7r=i(Jl),OC=n(Jl,"LI",{});var OUe=s(OC);M0e=n(OUe,"STRONG",{});var Uea=s(M0e);s7r=r(Uea,"wav2vec2"),Uea.forEach(t),l7r=r(OUe," \u2014 "),aee=n(OUe,"A",{href:!0});var Hea=s(aee);i7r=r(Hea,"Wav2Vec2ForAudioFrameClassification"),Hea.forEach(t),d7r=r(OUe," (Wav2Vec2 model)"),OUe.forEach(t),c7r=i(Jl),VC=n(Jl,"LI",{});var VUe=s(VC);E0e=n(VUe,"STRONG",{});var Jea=s(E0e);m7r=r(Jea,"wav2vec2-conformer"),Jea.forEach(t),f7r=r(VUe," \u2014 "),nee=n(VUe,"A",{href:!0});var Yea=s(nee);g7r=r(Yea,"Wav2Vec2ConformerForAudioFrameClassification"),Yea.forEach(t),h7r=r(VUe," (Wav2Vec2-Conformer model)"),VUe.forEach(t),u7r=i(Jl),XC=n(Jl,"LI",{});var XUe=s(XC);C0e=n(XUe,"STRONG",{});var Zea=s(C0e);p7r=r(Zea,"wavlm"),Zea.forEach(t),_7r=r(XUe," \u2014 "),see=n(XUe,"A",{href:!0});var Kea=s(see);b7r=r(Kea,"WavLMForAudioFrameClassification"),Kea.forEach(t),v7r=r(XUe," (WavLM model)"),XUe.forEach(t),Jl.forEach(t),F7r=i(Da),zC=n(Da,"P",{});var zUe=s(zC);T7r=r(zUe,"The model is set in evaluation mode by default using "),w0e=n(zUe,"CODE",{});var eoa=s(w0e);M7r=r(eoa,"model.eval()"),eoa.forEach(t),E7r=r(zUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A0e=n(zUe,"CODE",{});var ooa=s(A0e);C7r=r(ooa,"model.train()"),ooa.forEach(t),zUe.forEach(t),w7r=i(Da),T(QC.$$.fragment,Da),Da.forEach(t),Hl.forEach(t),Xro=i(m),wc=n(m,"H2",{class:!0});var sno=s(wc);WC=n(sno,"A",{id:!0,class:!0,href:!0});var roa=s(WC);L0e=n(roa,"SPAN",{});var toa=s(L0e);T(Xk.$$.fragment,toa),toa.forEach(t),roa.forEach(t),A7r=i(sno),y0e=n(sno,"SPAN",{});var aoa=s(y0e);L7r=r(aoa,"AutoModelForCTC"),aoa.forEach(t),sno.forEach(t),zro=i(m),Ko=n(m,"DIV",{class:!0});var Yl=s(Ko);T(zk.$$.fragment,Yl),y7r=i(Yl),Ac=n(Yl,"P",{});var Qde=s(Ac);x7r=r(Qde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),lee=n(Qde,"A",{href:!0});var noa=s(lee);$7r=r(noa,"from_pretrained()"),noa.forEach(t),k7r=r(Qde," class method or the "),iee=n(Qde,"A",{href:!0});var soa=s(iee);S7r=r(soa,"from_config()"),soa.forEach(t),R7r=r(Qde,` class
method.`),Qde.forEach(t),P7r=i(Yl),Qk=n(Yl,"P",{});var lno=s(Qk);B7r=r(lno,"This class cannot be instantiated directly using "),x0e=n(lno,"CODE",{});var loa=s(x0e);I7r=r(loa,"__init__()"),loa.forEach(t),N7r=r(lno," (throws an error)."),lno.forEach(t),q7r=i(Yl),qt=n(Yl,"DIV",{class:!0});var c9=s(qt);T(Wk.$$.fragment,c9),j7r=i(c9),$0e=n(c9,"P",{});var ioa=s($0e);D7r=r(ioa,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ioa.forEach(t),G7r=i(c9),Lc=n(c9,"P",{});var Wde=s(Lc);O7r=r(Wde,`Note:
Loading a model from its configuration file does `),k0e=n(Wde,"STRONG",{});var doa=s(k0e);V7r=r(doa,"not"),doa.forEach(t),X7r=r(Wde,` load the model weights. It only affects the
model\u2019s configuration. Use `),dee=n(Wde,"A",{href:!0});var coa=s(dee);z7r=r(coa,"from_pretrained()"),coa.forEach(t),Q7r=r(Wde," to load the model weights."),Wde.forEach(t),W7r=i(c9),T(UC.$$.fragment,c9),c9.forEach(t),U7r=i(Yl),bo=n(Yl,"DIV",{class:!0});var Ga=s(bo);T(Uk.$$.fragment,Ga),H7r=i(Ga),S0e=n(Ga,"P",{});var moa=s(S0e);J7r=r(moa,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),moa.forEach(t),Y7r=i(Ga),vn=n(Ga,"P",{});var m9=s(vn);Z7r=r(m9,"The model class to instantiate is selected based on the "),R0e=n(m9,"CODE",{});var foa=s(R0e);K7r=r(foa,"model_type"),foa.forEach(t),eLr=r(m9,` property of the config object (either
passed as an argument or loaded from `),P0e=n(m9,"CODE",{});var goa=s(P0e);oLr=r(goa,"pretrained_model_name_or_path"),goa.forEach(t),rLr=r(m9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B0e=n(m9,"CODE",{});var hoa=s(B0e);tLr=r(hoa,"pretrained_model_name_or_path"),hoa.forEach(t),aLr=r(m9,":"),m9.forEach(t),nLr=i(Ga),Le=n(Ga,"UL",{});var Ie=s(Le);HC=n(Ie,"LI",{});var QUe=s(HC);I0e=n(QUe,"STRONG",{});var uoa=s(I0e);sLr=r(uoa,"data2vec-audio"),uoa.forEach(t),lLr=r(QUe," \u2014 "),cee=n(QUe,"A",{href:!0});var poa=s(cee);iLr=r(poa,"Data2VecAudioForCTC"),poa.forEach(t),dLr=r(QUe," (Data2VecAudio model)"),QUe.forEach(t),cLr=i(Ie),JC=n(Ie,"LI",{});var WUe=s(JC);N0e=n(WUe,"STRONG",{});var _oa=s(N0e);mLr=r(_oa,"hubert"),_oa.forEach(t),fLr=r(WUe," \u2014 "),mee=n(WUe,"A",{href:!0});var boa=s(mee);gLr=r(boa,"HubertForCTC"),boa.forEach(t),hLr=r(WUe," (Hubert model)"),WUe.forEach(t),uLr=i(Ie),YC=n(Ie,"LI",{});var UUe=s(YC);q0e=n(UUe,"STRONG",{});var voa=s(q0e);pLr=r(voa,"mctct"),voa.forEach(t),_Lr=r(UUe," \u2014 "),fee=n(UUe,"A",{href:!0});var Foa=s(fee);bLr=r(Foa,"MCTCTForCTC"),Foa.forEach(t),vLr=r(UUe," (M-CTC-T model)"),UUe.forEach(t),FLr=i(Ie),ZC=n(Ie,"LI",{});var HUe=s(ZC);j0e=n(HUe,"STRONG",{});var Toa=s(j0e);TLr=r(Toa,"sew"),Toa.forEach(t),MLr=r(HUe," \u2014 "),gee=n(HUe,"A",{href:!0});var Moa=s(gee);ELr=r(Moa,"SEWForCTC"),Moa.forEach(t),CLr=r(HUe," (SEW model)"),HUe.forEach(t),wLr=i(Ie),KC=n(Ie,"LI",{});var JUe=s(KC);D0e=n(JUe,"STRONG",{});var Eoa=s(D0e);ALr=r(Eoa,"sew-d"),Eoa.forEach(t),LLr=r(JUe," \u2014 "),hee=n(JUe,"A",{href:!0});var Coa=s(hee);yLr=r(Coa,"SEWDForCTC"),Coa.forEach(t),xLr=r(JUe," (SEW-D model)"),JUe.forEach(t),$Lr=i(Ie),e3=n(Ie,"LI",{});var YUe=s(e3);G0e=n(YUe,"STRONG",{});var woa=s(G0e);kLr=r(woa,"unispeech"),woa.forEach(t),SLr=r(YUe," \u2014 "),uee=n(YUe,"A",{href:!0});var Aoa=s(uee);RLr=r(Aoa,"UniSpeechForCTC"),Aoa.forEach(t),PLr=r(YUe," (UniSpeech model)"),YUe.forEach(t),BLr=i(Ie),o3=n(Ie,"LI",{});var ZUe=s(o3);O0e=n(ZUe,"STRONG",{});var Loa=s(O0e);ILr=r(Loa,"unispeech-sat"),Loa.forEach(t),NLr=r(ZUe," \u2014 "),pee=n(ZUe,"A",{href:!0});var yoa=s(pee);qLr=r(yoa,"UniSpeechSatForCTC"),yoa.forEach(t),jLr=r(ZUe," (UniSpeechSat model)"),ZUe.forEach(t),DLr=i(Ie),r3=n(Ie,"LI",{});var KUe=s(r3);V0e=n(KUe,"STRONG",{});var xoa=s(V0e);GLr=r(xoa,"wav2vec2"),xoa.forEach(t),OLr=r(KUe," \u2014 "),_ee=n(KUe,"A",{href:!0});var $oa=s(_ee);VLr=r($oa,"Wav2Vec2ForCTC"),$oa.forEach(t),XLr=r(KUe," (Wav2Vec2 model)"),KUe.forEach(t),zLr=i(Ie),t3=n(Ie,"LI",{});var eHe=s(t3);X0e=n(eHe,"STRONG",{});var koa=s(X0e);QLr=r(koa,"wav2vec2-conformer"),koa.forEach(t),WLr=r(eHe," \u2014 "),bee=n(eHe,"A",{href:!0});var Soa=s(bee);ULr=r(Soa,"Wav2Vec2ConformerForCTC"),Soa.forEach(t),HLr=r(eHe," (Wav2Vec2-Conformer model)"),eHe.forEach(t),JLr=i(Ie),a3=n(Ie,"LI",{});var oHe=s(a3);z0e=n(oHe,"STRONG",{});var Roa=s(z0e);YLr=r(Roa,"wavlm"),Roa.forEach(t),ZLr=r(oHe," \u2014 "),vee=n(oHe,"A",{href:!0});var Poa=s(vee);KLr=r(Poa,"WavLMForCTC"),Poa.forEach(t),e8r=r(oHe," (WavLM model)"),oHe.forEach(t),Ie.forEach(t),o8r=i(Ga),n3=n(Ga,"P",{});var rHe=s(n3);r8r=r(rHe,"The model is set in evaluation mode by default using "),Q0e=n(rHe,"CODE",{});var Boa=s(Q0e);t8r=r(Boa,"model.eval()"),Boa.forEach(t),a8r=r(rHe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W0e=n(rHe,"CODE",{});var Ioa=s(W0e);n8r=r(Ioa,"model.train()"),Ioa.forEach(t),rHe.forEach(t),s8r=i(Ga),T(s3.$$.fragment,Ga),Ga.forEach(t),Yl.forEach(t),Qro=i(m),yc=n(m,"H2",{class:!0});var ino=s(yc);l3=n(ino,"A",{id:!0,class:!0,href:!0});var Noa=s(l3);U0e=n(Noa,"SPAN",{});var qoa=s(U0e);T(Hk.$$.fragment,qoa),qoa.forEach(t),Noa.forEach(t),l8r=i(ino),H0e=n(ino,"SPAN",{});var joa=s(H0e);i8r=r(joa,"AutoModelForSpeechSeq2Seq"),joa.forEach(t),ino.forEach(t),Wro=i(m),er=n(m,"DIV",{class:!0});var Zl=s(er);T(Jk.$$.fragment,Zl),d8r=i(Zl),xc=n(Zl,"P",{});var Ude=s(xc);c8r=r(Ude,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Fee=n(Ude,"A",{href:!0});var Doa=s(Fee);m8r=r(Doa,"from_pretrained()"),Doa.forEach(t),f8r=r(Ude," class method or the "),Tee=n(Ude,"A",{href:!0});var Goa=s(Tee);g8r=r(Goa,"from_config()"),Goa.forEach(t),h8r=r(Ude,` class
method.`),Ude.forEach(t),u8r=i(Zl),Yk=n(Zl,"P",{});var dno=s(Yk);p8r=r(dno,"This class cannot be instantiated directly using "),J0e=n(dno,"CODE",{});var Ooa=s(J0e);_8r=r(Ooa,"__init__()"),Ooa.forEach(t),b8r=r(dno," (throws an error)."),dno.forEach(t),v8r=i(Zl),jt=n(Zl,"DIV",{class:!0});var f9=s(jt);T(Zk.$$.fragment,f9),F8r=i(f9),Y0e=n(f9,"P",{});var Voa=s(Y0e);T8r=r(Voa,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Voa.forEach(t),M8r=i(f9),$c=n(f9,"P",{});var Hde=s($c);E8r=r(Hde,`Note:
Loading a model from its configuration file does `),Z0e=n(Hde,"STRONG",{});var Xoa=s(Z0e);C8r=r(Xoa,"not"),Xoa.forEach(t),w8r=r(Hde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mee=n(Hde,"A",{href:!0});var zoa=s(Mee);A8r=r(zoa,"from_pretrained()"),zoa.forEach(t),L8r=r(Hde," to load the model weights."),Hde.forEach(t),y8r=i(f9),T(i3.$$.fragment,f9),f9.forEach(t),x8r=i(Zl),vo=n(Zl,"DIV",{class:!0});var Oa=s(vo);T(Kk.$$.fragment,Oa),$8r=i(Oa),K0e=n(Oa,"P",{});var Qoa=s(K0e);k8r=r(Qoa,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Qoa.forEach(t),S8r=i(Oa),Fn=n(Oa,"P",{});var g9=s(Fn);R8r=r(g9,"The model class to instantiate is selected based on the "),ewe=n(g9,"CODE",{});var Woa=s(ewe);P8r=r(Woa,"model_type"),Woa.forEach(t),B8r=r(g9,` property of the config object (either
passed as an argument or loaded from `),owe=n(g9,"CODE",{});var Uoa=s(owe);I8r=r(Uoa,"pretrained_model_name_or_path"),Uoa.forEach(t),N8r=r(g9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rwe=n(g9,"CODE",{});var Hoa=s(rwe);q8r=r(Hoa,"pretrained_model_name_or_path"),Hoa.forEach(t),j8r=r(g9,":"),g9.forEach(t),D8r=i(Oa),kc=n(Oa,"UL",{});var Jde=s(kc);d3=n(Jde,"LI",{});var tHe=s(d3);twe=n(tHe,"STRONG",{});var Joa=s(twe);G8r=r(Joa,"speech-encoder-decoder"),Joa.forEach(t),O8r=r(tHe," \u2014 "),Eee=n(tHe,"A",{href:!0});var Yoa=s(Eee);V8r=r(Yoa,"SpeechEncoderDecoderModel"),Yoa.forEach(t),X8r=r(tHe," (Speech Encoder decoder model)"),tHe.forEach(t),z8r=i(Jde),c3=n(Jde,"LI",{});var aHe=s(c3);awe=n(aHe,"STRONG",{});var Zoa=s(awe);Q8r=r(Zoa,"speech_to_text"),Zoa.forEach(t),W8r=r(aHe," \u2014 "),Cee=n(aHe,"A",{href:!0});var Koa=s(Cee);U8r=r(Koa,"Speech2TextForConditionalGeneration"),Koa.forEach(t),H8r=r(aHe," (Speech2Text model)"),aHe.forEach(t),J8r=i(Jde),m3=n(Jde,"LI",{});var nHe=s(m3);nwe=n(nHe,"STRONG",{});var era=s(nwe);Y8r=r(era,"whisper"),era.forEach(t),Z8r=r(nHe," \u2014 "),wee=n(nHe,"A",{href:!0});var ora=s(wee);K8r=r(ora,"WhisperForConditionalGeneration"),ora.forEach(t),eyr=r(nHe," (Whisper model)"),nHe.forEach(t),Jde.forEach(t),oyr=i(Oa),f3=n(Oa,"P",{});var sHe=s(f3);ryr=r(sHe,"The model is set in evaluation mode by default using "),swe=n(sHe,"CODE",{});var rra=s(swe);tyr=r(rra,"model.eval()"),rra.forEach(t),ayr=r(sHe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lwe=n(sHe,"CODE",{});var tra=s(lwe);nyr=r(tra,"model.train()"),tra.forEach(t),sHe.forEach(t),syr=i(Oa),T(g3.$$.fragment,Oa),Oa.forEach(t),Zl.forEach(t),Uro=i(m),Sc=n(m,"H2",{class:!0});var cno=s(Sc);h3=n(cno,"A",{id:!0,class:!0,href:!0});var ara=s(h3);iwe=n(ara,"SPAN",{});var nra=s(iwe);T(eS.$$.fragment,nra),nra.forEach(t),ara.forEach(t),lyr=i(cno),dwe=n(cno,"SPAN",{});var sra=s(dwe);iyr=r(sra,"AutoModelForAudioXVector"),sra.forEach(t),cno.forEach(t),Hro=i(m),or=n(m,"DIV",{class:!0});var Kl=s(or);T(oS.$$.fragment,Kl),dyr=i(Kl),Rc=n(Kl,"P",{});var Yde=s(Rc);cyr=r(Yde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Aee=n(Yde,"A",{href:!0});var lra=s(Aee);myr=r(lra,"from_pretrained()"),lra.forEach(t),fyr=r(Yde," class method or the "),Lee=n(Yde,"A",{href:!0});var ira=s(Lee);gyr=r(ira,"from_config()"),ira.forEach(t),hyr=r(Yde,` class
method.`),Yde.forEach(t),uyr=i(Kl),rS=n(Kl,"P",{});var mno=s(rS);pyr=r(mno,"This class cannot be instantiated directly using "),cwe=n(mno,"CODE",{});var dra=s(cwe);_yr=r(dra,"__init__()"),dra.forEach(t),byr=r(mno," (throws an error)."),mno.forEach(t),vyr=i(Kl),Dt=n(Kl,"DIV",{class:!0});var h9=s(Dt);T(tS.$$.fragment,h9),Fyr=i(h9),mwe=n(h9,"P",{});var cra=s(mwe);Tyr=r(cra,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),cra.forEach(t),Myr=i(h9),Pc=n(h9,"P",{});var Zde=s(Pc);Eyr=r(Zde,`Note:
Loading a model from its configuration file does `),fwe=n(Zde,"STRONG",{});var mra=s(fwe);Cyr=r(mra,"not"),mra.forEach(t),wyr=r(Zde,` load the model weights. It only affects the
model\u2019s configuration. Use `),yee=n(Zde,"A",{href:!0});var fra=s(yee);Ayr=r(fra,"from_pretrained()"),fra.forEach(t),Lyr=r(Zde," to load the model weights."),Zde.forEach(t),yyr=i(h9),T(u3.$$.fragment,h9),h9.forEach(t),xyr=i(Kl),Fo=n(Kl,"DIV",{class:!0});var Va=s(Fo);T(aS.$$.fragment,Va),$yr=i(Va),gwe=n(Va,"P",{});var gra=s(gwe);kyr=r(gra,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),gra.forEach(t),Syr=i(Va),Tn=n(Va,"P",{});var u9=s(Tn);Ryr=r(u9,"The model class to instantiate is selected based on the "),hwe=n(u9,"CODE",{});var hra=s(hwe);Pyr=r(hra,"model_type"),hra.forEach(t),Byr=r(u9,` property of the config object (either
passed as an argument or loaded from `),uwe=n(u9,"CODE",{});var ura=s(uwe);Iyr=r(ura,"pretrained_model_name_or_path"),ura.forEach(t),Nyr=r(u9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pwe=n(u9,"CODE",{});var pra=s(pwe);qyr=r(pra,"pretrained_model_name_or_path"),pra.forEach(t),jyr=r(u9,":"),u9.forEach(t),Dyr=i(Va),ht=n(Va,"UL",{});var ei=s(ht);p3=n(ei,"LI",{});var lHe=s(p3);_we=n(lHe,"STRONG",{});var _ra=s(_we);Gyr=r(_ra,"data2vec-audio"),_ra.forEach(t),Oyr=r(lHe," \u2014 "),xee=n(lHe,"A",{href:!0});var bra=s(xee);Vyr=r(bra,"Data2VecAudioForXVector"),bra.forEach(t),Xyr=r(lHe," (Data2VecAudio model)"),lHe.forEach(t),zyr=i(ei),_3=n(ei,"LI",{});var iHe=s(_3);bwe=n(iHe,"STRONG",{});var vra=s(bwe);Qyr=r(vra,"unispeech-sat"),vra.forEach(t),Wyr=r(iHe," \u2014 "),$ee=n(iHe,"A",{href:!0});var Fra=s($ee);Uyr=r(Fra,"UniSpeechSatForXVector"),Fra.forEach(t),Hyr=r(iHe," (UniSpeechSat model)"),iHe.forEach(t),Jyr=i(ei),b3=n(ei,"LI",{});var dHe=s(b3);vwe=n(dHe,"STRONG",{});var Tra=s(vwe);Yyr=r(Tra,"wav2vec2"),Tra.forEach(t),Zyr=r(dHe," \u2014 "),kee=n(dHe,"A",{href:!0});var Mra=s(kee);Kyr=r(Mra,"Wav2Vec2ForXVector"),Mra.forEach(t),e9r=r(dHe," (Wav2Vec2 model)"),dHe.forEach(t),o9r=i(ei),v3=n(ei,"LI",{});var cHe=s(v3);Fwe=n(cHe,"STRONG",{});var Era=s(Fwe);r9r=r(Era,"wav2vec2-conformer"),Era.forEach(t),t9r=r(cHe," \u2014 "),See=n(cHe,"A",{href:!0});var Cra=s(See);a9r=r(Cra,"Wav2Vec2ConformerForXVector"),Cra.forEach(t),n9r=r(cHe," (Wav2Vec2-Conformer model)"),cHe.forEach(t),s9r=i(ei),F3=n(ei,"LI",{});var mHe=s(F3);Twe=n(mHe,"STRONG",{});var wra=s(Twe);l9r=r(wra,"wavlm"),wra.forEach(t),i9r=r(mHe," \u2014 "),Ree=n(mHe,"A",{href:!0});var Ara=s(Ree);d9r=r(Ara,"WavLMForXVector"),Ara.forEach(t),c9r=r(mHe," (WavLM model)"),mHe.forEach(t),ei.forEach(t),m9r=i(Va),T3=n(Va,"P",{});var fHe=s(T3);f9r=r(fHe,"The model is set in evaluation mode by default using "),Mwe=n(fHe,"CODE",{});var Lra=s(Mwe);g9r=r(Lra,"model.eval()"),Lra.forEach(t),h9r=r(fHe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ewe=n(fHe,"CODE",{});var yra=s(Ewe);u9r=r(yra,"model.train()"),yra.forEach(t),fHe.forEach(t),p9r=i(Va),T(M3.$$.fragment,Va),Va.forEach(t),Kl.forEach(t),Jro=i(m),Bc=n(m,"H2",{class:!0});var fno=s(Bc);E3=n(fno,"A",{id:!0,class:!0,href:!0});var xra=s(E3);Cwe=n(xra,"SPAN",{});var $ra=s(Cwe);T(nS.$$.fragment,$ra),$ra.forEach(t),xra.forEach(t),_9r=i(fno),wwe=n(fno,"SPAN",{});var kra=s(wwe);b9r=r(kra,"AutoModelForMaskedImageModeling"),kra.forEach(t),fno.forEach(t),Yro=i(m),rr=n(m,"DIV",{class:!0});var oi=s(rr);T(sS.$$.fragment,oi),v9r=i(oi),Ic=n(oi,"P",{});var Kde=s(Ic);F9r=r(Kde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Pee=n(Kde,"A",{href:!0});var Sra=s(Pee);T9r=r(Sra,"from_pretrained()"),Sra.forEach(t),M9r=r(Kde," class method or the "),Bee=n(Kde,"A",{href:!0});var Rra=s(Bee);E9r=r(Rra,"from_config()"),Rra.forEach(t),C9r=r(Kde,` class
method.`),Kde.forEach(t),w9r=i(oi),lS=n(oi,"P",{});var gno=s(lS);A9r=r(gno,"This class cannot be instantiated directly using "),Awe=n(gno,"CODE",{});var Pra=s(Awe);L9r=r(Pra,"__init__()"),Pra.forEach(t),y9r=r(gno," (throws an error)."),gno.forEach(t),x9r=i(oi),Gt=n(oi,"DIV",{class:!0});var p9=s(Gt);T(iS.$$.fragment,p9),$9r=i(p9),Lwe=n(p9,"P",{});var Bra=s(Lwe);k9r=r(Bra,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Bra.forEach(t),S9r=i(p9),Nc=n(p9,"P",{});var ece=s(Nc);R9r=r(ece,`Note:
Loading a model from its configuration file does `),ywe=n(ece,"STRONG",{});var Ira=s(ywe);P9r=r(Ira,"not"),Ira.forEach(t),B9r=r(ece,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iee=n(ece,"A",{href:!0});var Nra=s(Iee);I9r=r(Nra,"from_pretrained()"),Nra.forEach(t),N9r=r(ece," to load the model weights."),ece.forEach(t),q9r=i(p9),T(C3.$$.fragment,p9),p9.forEach(t),j9r=i(oi),To=n(oi,"DIV",{class:!0});var Xa=s(To);T(dS.$$.fragment,Xa),D9r=i(Xa),xwe=n(Xa,"P",{});var qra=s(xwe);G9r=r(qra,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),qra.forEach(t),O9r=i(Xa),Mn=n(Xa,"P",{});var _9=s(Mn);V9r=r(_9,"The model class to instantiate is selected based on the "),$we=n(_9,"CODE",{});var jra=s($we);X9r=r(jra,"model_type"),jra.forEach(t),z9r=r(_9,` property of the config object (either
passed as an argument or loaded from `),kwe=n(_9,"CODE",{});var Dra=s(kwe);Q9r=r(Dra,"pretrained_model_name_or_path"),Dra.forEach(t),W9r=r(_9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Swe=n(_9,"CODE",{});var Gra=s(Swe);U9r=r(Gra,"pretrained_model_name_or_path"),Gra.forEach(t),H9r=r(_9,":"),_9.forEach(t),J9r=i(Xa),En=n(Xa,"UL",{});var b9=s(En);w3=n(b9,"LI",{});var gHe=s(w3);Rwe=n(gHe,"STRONG",{});var Ora=s(Rwe);Y9r=r(Ora,"deit"),Ora.forEach(t),Z9r=r(gHe," \u2014 "),Nee=n(gHe,"A",{href:!0});var Vra=s(Nee);K9r=r(Vra,"DeiTForMaskedImageModeling"),Vra.forEach(t),exr=r(gHe," (DeiT model)"),gHe.forEach(t),oxr=i(b9),A3=n(b9,"LI",{});var hHe=s(A3);Pwe=n(hHe,"STRONG",{});var Xra=s(Pwe);rxr=r(Xra,"swin"),Xra.forEach(t),txr=r(hHe," \u2014 "),qee=n(hHe,"A",{href:!0});var zra=s(qee);axr=r(zra,"SwinForMaskedImageModeling"),zra.forEach(t),nxr=r(hHe," (Swin Transformer model)"),hHe.forEach(t),sxr=i(b9),L3=n(b9,"LI",{});var uHe=s(L3);Bwe=n(uHe,"STRONG",{});var Qra=s(Bwe);lxr=r(Qra,"swinv2"),Qra.forEach(t),ixr=r(uHe," \u2014 "),jee=n(uHe,"A",{href:!0});var Wra=s(jee);dxr=r(Wra,"Swinv2ForMaskedImageModeling"),Wra.forEach(t),cxr=r(uHe," (Swin Transformer V2 model)"),uHe.forEach(t),mxr=i(b9),y3=n(b9,"LI",{});var pHe=s(y3);Iwe=n(pHe,"STRONG",{});var Ura=s(Iwe);fxr=r(Ura,"vit"),Ura.forEach(t),gxr=r(pHe," \u2014 "),Dee=n(pHe,"A",{href:!0});var Hra=s(Dee);hxr=r(Hra,"ViTForMaskedImageModeling"),Hra.forEach(t),uxr=r(pHe," (ViT model)"),pHe.forEach(t),b9.forEach(t),pxr=i(Xa),x3=n(Xa,"P",{});var _He=s(x3);_xr=r(_He,"The model is set in evaluation mode by default using "),Nwe=n(_He,"CODE",{});var Jra=s(Nwe);bxr=r(Jra,"model.eval()"),Jra.forEach(t),vxr=r(_He,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qwe=n(_He,"CODE",{});var Yra=s(qwe);Fxr=r(Yra,"model.train()"),Yra.forEach(t),_He.forEach(t),Txr=i(Xa),T($3.$$.fragment,Xa),Xa.forEach(t),oi.forEach(t),Zro=i(m),qc=n(m,"H2",{class:!0});var hno=s(qc);k3=n(hno,"A",{id:!0,class:!0,href:!0});var Zra=s(k3);jwe=n(Zra,"SPAN",{});var Kra=s(jwe);T(cS.$$.fragment,Kra),Kra.forEach(t),Zra.forEach(t),Mxr=i(hno),Dwe=n(hno,"SPAN",{});var eta=s(Dwe);Exr=r(eta,"AutoModelForObjectDetection"),eta.forEach(t),hno.forEach(t),Kro=i(m),tr=n(m,"DIV",{class:!0});var ri=s(tr);T(mS.$$.fragment,ri),Cxr=i(ri),jc=n(ri,"P",{});var oce=s(jc);wxr=r(oce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Gee=n(oce,"A",{href:!0});var ota=s(Gee);Axr=r(ota,"from_pretrained()"),ota.forEach(t),Lxr=r(oce," class method or the "),Oee=n(oce,"A",{href:!0});var rta=s(Oee);yxr=r(rta,"from_config()"),rta.forEach(t),xxr=r(oce,` class
method.`),oce.forEach(t),$xr=i(ri),fS=n(ri,"P",{});var uno=s(fS);kxr=r(uno,"This class cannot be instantiated directly using "),Gwe=n(uno,"CODE",{});var tta=s(Gwe);Sxr=r(tta,"__init__()"),tta.forEach(t),Rxr=r(uno," (throws an error)."),uno.forEach(t),Pxr=i(ri),Ot=n(ri,"DIV",{class:!0});var v9=s(Ot);T(gS.$$.fragment,v9),Bxr=i(v9),Owe=n(v9,"P",{});var ata=s(Owe);Ixr=r(ata,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),ata.forEach(t),Nxr=i(v9),Dc=n(v9,"P",{});var rce=s(Dc);qxr=r(rce,`Note:
Loading a model from its configuration file does `),Vwe=n(rce,"STRONG",{});var nta=s(Vwe);jxr=r(nta,"not"),nta.forEach(t),Dxr=r(rce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vee=n(rce,"A",{href:!0});var sta=s(Vee);Gxr=r(sta,"from_pretrained()"),sta.forEach(t),Oxr=r(rce," to load the model weights."),rce.forEach(t),Vxr=i(v9),T(S3.$$.fragment,v9),v9.forEach(t),Xxr=i(ri),Mo=n(ri,"DIV",{class:!0});var za=s(Mo);T(hS.$$.fragment,za),zxr=i(za),Xwe=n(za,"P",{});var lta=s(Xwe);Qxr=r(lta,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),lta.forEach(t),Wxr=i(za),Cn=n(za,"P",{});var F9=s(Cn);Uxr=r(F9,"The model class to instantiate is selected based on the "),zwe=n(F9,"CODE",{});var ita=s(zwe);Hxr=r(ita,"model_type"),ita.forEach(t),Jxr=r(F9,` property of the config object (either
passed as an argument or loaded from `),Qwe=n(F9,"CODE",{});var dta=s(Qwe);Yxr=r(dta,"pretrained_model_name_or_path"),dta.forEach(t),Zxr=r(F9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wwe=n(F9,"CODE",{});var cta=s(Wwe);Kxr=r(cta,"pretrained_model_name_or_path"),cta.forEach(t),e$r=r(F9,":"),F9.forEach(t),o$r=i(za),wn=n(za,"UL",{});var T9=s(wn);R3=n(T9,"LI",{});var bHe=s(R3);Uwe=n(bHe,"STRONG",{});var mta=s(Uwe);r$r=r(mta,"conditional_detr"),mta.forEach(t),t$r=r(bHe," \u2014 "),Xee=n(bHe,"A",{href:!0});var fta=s(Xee);a$r=r(fta,"ConditionalDetrForObjectDetection"),fta.forEach(t),n$r=r(bHe," (Conditional DETR model)"),bHe.forEach(t),s$r=i(T9),P3=n(T9,"LI",{});var vHe=s(P3);Hwe=n(vHe,"STRONG",{});var gta=s(Hwe);l$r=r(gta,"deformable_detr"),gta.forEach(t),i$r=r(vHe," \u2014 "),zee=n(vHe,"A",{href:!0});var hta=s(zee);d$r=r(hta,"DeformableDetrForObjectDetection"),hta.forEach(t),c$r=r(vHe," (Deformable DETR model)"),vHe.forEach(t),m$r=i(T9),B3=n(T9,"LI",{});var FHe=s(B3);Jwe=n(FHe,"STRONG",{});var uta=s(Jwe);f$r=r(uta,"detr"),uta.forEach(t),g$r=r(FHe," \u2014 "),Qee=n(FHe,"A",{href:!0});var pta=s(Qee);h$r=r(pta,"DetrForObjectDetection"),pta.forEach(t),u$r=r(FHe," (DETR model)"),FHe.forEach(t),p$r=i(T9),I3=n(T9,"LI",{});var THe=s(I3);Ywe=n(THe,"STRONG",{});var _ta=s(Ywe);_$r=r(_ta,"yolos"),_ta.forEach(t),b$r=r(THe," \u2014 "),Wee=n(THe,"A",{href:!0});var bta=s(Wee);v$r=r(bta,"YolosForObjectDetection"),bta.forEach(t),F$r=r(THe," (YOLOS model)"),THe.forEach(t),T9.forEach(t),T$r=i(za),N3=n(za,"P",{});var MHe=s(N3);M$r=r(MHe,"The model is set in evaluation mode by default using "),Zwe=n(MHe,"CODE",{});var vta=s(Zwe);E$r=r(vta,"model.eval()"),vta.forEach(t),C$r=r(MHe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kwe=n(MHe,"CODE",{});var Fta=s(Kwe);w$r=r(Fta,"model.train()"),Fta.forEach(t),MHe.forEach(t),A$r=i(za),T(q3.$$.fragment,za),za.forEach(t),ri.forEach(t),eto=i(m),Gc=n(m,"H2",{class:!0});var pno=s(Gc);j3=n(pno,"A",{id:!0,class:!0,href:!0});var Tta=s(j3);eAe=n(Tta,"SPAN",{});var Mta=s(eAe);T(uS.$$.fragment,Mta),Mta.forEach(t),Tta.forEach(t),L$r=i(pno),oAe=n(pno,"SPAN",{});var Eta=s(oAe);y$r=r(Eta,"AutoModelForImageSegmentation"),Eta.forEach(t),pno.forEach(t),oto=i(m),ar=n(m,"DIV",{class:!0});var ti=s(ar);T(pS.$$.fragment,ti),x$r=i(ti),Oc=n(ti,"P",{});var tce=s(Oc);$$r=r(tce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Uee=n(tce,"A",{href:!0});var Cta=s(Uee);k$r=r(Cta,"from_pretrained()"),Cta.forEach(t),S$r=r(tce," class method or the "),Hee=n(tce,"A",{href:!0});var wta=s(Hee);R$r=r(wta,"from_config()"),wta.forEach(t),P$r=r(tce,` class
method.`),tce.forEach(t),B$r=i(ti),_S=n(ti,"P",{});var _no=s(_S);I$r=r(_no,"This class cannot be instantiated directly using "),rAe=n(_no,"CODE",{});var Ata=s(rAe);N$r=r(Ata,"__init__()"),Ata.forEach(t),q$r=r(_no," (throws an error)."),_no.forEach(t),j$r=i(ti),Vt=n(ti,"DIV",{class:!0});var M9=s(Vt);T(bS.$$.fragment,M9),D$r=i(M9),tAe=n(M9,"P",{});var Lta=s(tAe);G$r=r(Lta,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Lta.forEach(t),O$r=i(M9),Vc=n(M9,"P",{});var ace=s(Vc);V$r=r(ace,`Note:
Loading a model from its configuration file does `),aAe=n(ace,"STRONG",{});var yta=s(aAe);X$r=r(yta,"not"),yta.forEach(t),z$r=r(ace,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jee=n(ace,"A",{href:!0});var xta=s(Jee);Q$r=r(xta,"from_pretrained()"),xta.forEach(t),W$r=r(ace," to load the model weights."),ace.forEach(t),U$r=i(M9),T(D3.$$.fragment,M9),M9.forEach(t),H$r=i(ti),Eo=n(ti,"DIV",{class:!0});var Qa=s(Eo);T(vS.$$.fragment,Qa),J$r=i(Qa),nAe=n(Qa,"P",{});var $ta=s(nAe);Y$r=r($ta,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),$ta.forEach(t),Z$r=i(Qa),An=n(Qa,"P",{});var E9=s(An);K$r=r(E9,"The model class to instantiate is selected based on the "),sAe=n(E9,"CODE",{});var kta=s(sAe);ekr=r(kta,"model_type"),kta.forEach(t),okr=r(E9,` property of the config object (either
passed as an argument or loaded from `),lAe=n(E9,"CODE",{});var Sta=s(lAe);rkr=r(Sta,"pretrained_model_name_or_path"),Sta.forEach(t),tkr=r(E9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iAe=n(E9,"CODE",{});var Rta=s(iAe);akr=r(Rta,"pretrained_model_name_or_path"),Rta.forEach(t),nkr=r(E9,":"),E9.forEach(t),skr=i(Qa),dAe=n(Qa,"UL",{});var Pta=s(dAe);G3=n(Pta,"LI",{});var EHe=s(G3);cAe=n(EHe,"STRONG",{});var Bta=s(cAe);lkr=r(Bta,"detr"),Bta.forEach(t),ikr=r(EHe," \u2014 "),Yee=n(EHe,"A",{href:!0});var Ita=s(Yee);dkr=r(Ita,"DetrForSegmentation"),Ita.forEach(t),ckr=r(EHe," (DETR model)"),EHe.forEach(t),Pta.forEach(t),mkr=i(Qa),O3=n(Qa,"P",{});var CHe=s(O3);fkr=r(CHe,"The model is set in evaluation mode by default using "),mAe=n(CHe,"CODE",{});var Nta=s(mAe);gkr=r(Nta,"model.eval()"),Nta.forEach(t),hkr=r(CHe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fAe=n(CHe,"CODE",{});var qta=s(fAe);ukr=r(qta,"model.train()"),qta.forEach(t),CHe.forEach(t),pkr=i(Qa),T(V3.$$.fragment,Qa),Qa.forEach(t),ti.forEach(t),rto=i(m),Xc=n(m,"H2",{class:!0});var bno=s(Xc);X3=n(bno,"A",{id:!0,class:!0,href:!0});var jta=s(X3);gAe=n(jta,"SPAN",{});var Dta=s(gAe);T(FS.$$.fragment,Dta),Dta.forEach(t),jta.forEach(t),_kr=i(bno),hAe=n(bno,"SPAN",{});var Gta=s(hAe);bkr=r(Gta,"AutoModelForSemanticSegmentation"),Gta.forEach(t),bno.forEach(t),tto=i(m),nr=n(m,"DIV",{class:!0});var ai=s(nr);T(TS.$$.fragment,ai),vkr=i(ai),zc=n(ai,"P",{});var nce=s(zc);Fkr=r(nce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Zee=n(nce,"A",{href:!0});var Ota=s(Zee);Tkr=r(Ota,"from_pretrained()"),Ota.forEach(t),Mkr=r(nce," class method or the "),Kee=n(nce,"A",{href:!0});var Vta=s(Kee);Ekr=r(Vta,"from_config()"),Vta.forEach(t),Ckr=r(nce,` class
method.`),nce.forEach(t),wkr=i(ai),MS=n(ai,"P",{});var vno=s(MS);Akr=r(vno,"This class cannot be instantiated directly using "),uAe=n(vno,"CODE",{});var Xta=s(uAe);Lkr=r(Xta,"__init__()"),Xta.forEach(t),ykr=r(vno," (throws an error)."),vno.forEach(t),xkr=i(ai),Xt=n(ai,"DIV",{class:!0});var C9=s(Xt);T(ES.$$.fragment,C9),$kr=i(C9),pAe=n(C9,"P",{});var zta=s(pAe);kkr=r(zta,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),zta.forEach(t),Skr=i(C9),Qc=n(C9,"P",{});var sce=s(Qc);Rkr=r(sce,`Note:
Loading a model from its configuration file does `),_Ae=n(sce,"STRONG",{});var Qta=s(_Ae);Pkr=r(Qta,"not"),Qta.forEach(t),Bkr=r(sce,` load the model weights. It only affects the
model\u2019s configuration. Use `),eoe=n(sce,"A",{href:!0});var Wta=s(eoe);Ikr=r(Wta,"from_pretrained()"),Wta.forEach(t),Nkr=r(sce," to load the model weights."),sce.forEach(t),qkr=i(C9),T(z3.$$.fragment,C9),C9.forEach(t),jkr=i(ai),Co=n(ai,"DIV",{class:!0});var Wa=s(Co);T(CS.$$.fragment,Wa),Dkr=i(Wa),bAe=n(Wa,"P",{});var Uta=s(bAe);Gkr=r(Uta,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Uta.forEach(t),Okr=i(Wa),Ln=n(Wa,"P",{});var w9=s(Ln);Vkr=r(w9,"The model class to instantiate is selected based on the "),vAe=n(w9,"CODE",{});var Hta=s(vAe);Xkr=r(Hta,"model_type"),Hta.forEach(t),zkr=r(w9,` property of the config object (either
passed as an argument or loaded from `),FAe=n(w9,"CODE",{});var Jta=s(FAe);Qkr=r(Jta,"pretrained_model_name_or_path"),Jta.forEach(t),Wkr=r(w9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TAe=n(w9,"CODE",{});var Yta=s(TAe);Ukr=r(Yta,"pretrained_model_name_or_path"),Yta.forEach(t),Hkr=r(w9,":"),w9.forEach(t),Jkr=i(Wa),ut=n(Wa,"UL",{});var ni=s(ut);Q3=n(ni,"LI",{});var wHe=s(Q3);MAe=n(wHe,"STRONG",{});var Zta=s(MAe);Ykr=r(Zta,"beit"),Zta.forEach(t),Zkr=r(wHe," \u2014 "),ooe=n(wHe,"A",{href:!0});var Kta=s(ooe);Kkr=r(Kta,"BeitForSemanticSegmentation"),Kta.forEach(t),eSr=r(wHe," (BEiT model)"),wHe.forEach(t),oSr=i(ni),W3=n(ni,"LI",{});var AHe=s(W3);EAe=n(AHe,"STRONG",{});var eaa=s(EAe);rSr=r(eaa,"data2vec-vision"),eaa.forEach(t),tSr=r(AHe," \u2014 "),roe=n(AHe,"A",{href:!0});var oaa=s(roe);aSr=r(oaa,"Data2VecVisionForSemanticSegmentation"),oaa.forEach(t),nSr=r(AHe," (Data2VecVision model)"),AHe.forEach(t),sSr=i(ni),U3=n(ni,"LI",{});var LHe=s(U3);CAe=n(LHe,"STRONG",{});var raa=s(CAe);lSr=r(raa,"dpt"),raa.forEach(t),iSr=r(LHe," \u2014 "),toe=n(LHe,"A",{href:!0});var taa=s(toe);dSr=r(taa,"DPTForSemanticSegmentation"),taa.forEach(t),cSr=r(LHe," (DPT model)"),LHe.forEach(t),mSr=i(ni),H3=n(ni,"LI",{});var yHe=s(H3);wAe=n(yHe,"STRONG",{});var aaa=s(wAe);fSr=r(aaa,"mobilevit"),aaa.forEach(t),gSr=r(yHe," \u2014 "),aoe=n(yHe,"A",{href:!0});var naa=s(aoe);hSr=r(naa,"MobileViTForSemanticSegmentation"),naa.forEach(t),uSr=r(yHe," (MobileViT model)"),yHe.forEach(t),pSr=i(ni),J3=n(ni,"LI",{});var xHe=s(J3);AAe=n(xHe,"STRONG",{});var saa=s(AAe);_Sr=r(saa,"segformer"),saa.forEach(t),bSr=r(xHe," \u2014 "),noe=n(xHe,"A",{href:!0});var laa=s(noe);vSr=r(laa,"SegformerForSemanticSegmentation"),laa.forEach(t),FSr=r(xHe," (SegFormer model)"),xHe.forEach(t),ni.forEach(t),TSr=i(Wa),Y3=n(Wa,"P",{});var $He=s(Y3);MSr=r($He,"The model is set in evaluation mode by default using "),LAe=n($He,"CODE",{});var iaa=s(LAe);ESr=r(iaa,"model.eval()"),iaa.forEach(t),CSr=r($He,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yAe=n($He,"CODE",{});var daa=s(yAe);wSr=r(daa,"model.train()"),daa.forEach(t),$He.forEach(t),ASr=i(Wa),T(Z3.$$.fragment,Wa),Wa.forEach(t),ai.forEach(t),ato=i(m),Wc=n(m,"H2",{class:!0});var Fno=s(Wc);K3=n(Fno,"A",{id:!0,class:!0,href:!0});var caa=s(K3);xAe=n(caa,"SPAN",{});var maa=s(xAe);T(wS.$$.fragment,maa),maa.forEach(t),caa.forEach(t),LSr=i(Fno),$Ae=n(Fno,"SPAN",{});var faa=s($Ae);ySr=r(faa,"AutoModelForInstanceSegmentation"),faa.forEach(t),Fno.forEach(t),nto=i(m),sr=n(m,"DIV",{class:!0});var si=s(sr);T(AS.$$.fragment,si),xSr=i(si),Uc=n(si,"P",{});var lce=s(Uc);$Sr=r(lce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),soe=n(lce,"A",{href:!0});var gaa=s(soe);kSr=r(gaa,"from_pretrained()"),gaa.forEach(t),SSr=r(lce," class method or the "),loe=n(lce,"A",{href:!0});var haa=s(loe);RSr=r(haa,"from_config()"),haa.forEach(t),PSr=r(lce,` class
method.`),lce.forEach(t),BSr=i(si),LS=n(si,"P",{});var Tno=s(LS);ISr=r(Tno,"This class cannot be instantiated directly using "),kAe=n(Tno,"CODE",{});var uaa=s(kAe);NSr=r(uaa,"__init__()"),uaa.forEach(t),qSr=r(Tno," (throws an error)."),Tno.forEach(t),jSr=i(si),zt=n(si,"DIV",{class:!0});var A9=s(zt);T(yS.$$.fragment,A9),DSr=i(A9),SAe=n(A9,"P",{});var paa=s(SAe);GSr=r(paa,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),paa.forEach(t),OSr=i(A9),Hc=n(A9,"P",{});var ice=s(Hc);VSr=r(ice,`Note:
Loading a model from its configuration file does `),RAe=n(ice,"STRONG",{});var _aa=s(RAe);XSr=r(_aa,"not"),_aa.forEach(t),zSr=r(ice,` load the model weights. It only affects the
model\u2019s configuration. Use `),ioe=n(ice,"A",{href:!0});var baa=s(ioe);QSr=r(baa,"from_pretrained()"),baa.forEach(t),WSr=r(ice," to load the model weights."),ice.forEach(t),USr=i(A9),T(e5.$$.fragment,A9),A9.forEach(t),HSr=i(si),wo=n(si,"DIV",{class:!0});var Ua=s(wo);T(xS.$$.fragment,Ua),JSr=i(Ua),PAe=n(Ua,"P",{});var vaa=s(PAe);YSr=r(vaa,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),vaa.forEach(t),ZSr=i(Ua),yn=n(Ua,"P",{});var L9=s(yn);KSr=r(L9,"The model class to instantiate is selected based on the "),BAe=n(L9,"CODE",{});var Faa=s(BAe);eRr=r(Faa,"model_type"),Faa.forEach(t),oRr=r(L9,` property of the config object (either
passed as an argument or loaded from `),IAe=n(L9,"CODE",{});var Taa=s(IAe);rRr=r(Taa,"pretrained_model_name_or_path"),Taa.forEach(t),tRr=r(L9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NAe=n(L9,"CODE",{});var Maa=s(NAe);aRr=r(Maa,"pretrained_model_name_or_path"),Maa.forEach(t),nRr=r(L9,":"),L9.forEach(t),sRr=i(Ua),qAe=n(Ua,"UL",{});var Eaa=s(qAe);o5=n(Eaa,"LI",{});var kHe=s(o5);jAe=n(kHe,"STRONG",{});var Caa=s(jAe);lRr=r(Caa,"maskformer"),Caa.forEach(t),iRr=r(kHe," \u2014 "),doe=n(kHe,"A",{href:!0});var waa=s(doe);dRr=r(waa,"MaskFormerForInstanceSegmentation"),waa.forEach(t),cRr=r(kHe," (MaskFormer model)"),kHe.forEach(t),Eaa.forEach(t),mRr=i(Ua),r5=n(Ua,"P",{});var SHe=s(r5);fRr=r(SHe,"The model is set in evaluation mode by default using "),DAe=n(SHe,"CODE",{});var Aaa=s(DAe);gRr=r(Aaa,"model.eval()"),Aaa.forEach(t),hRr=r(SHe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),GAe=n(SHe,"CODE",{});var Laa=s(GAe);uRr=r(Laa,"model.train()"),Laa.forEach(t),SHe.forEach(t),pRr=i(Ua),T(t5.$$.fragment,Ua),Ua.forEach(t),si.forEach(t),sto=i(m),Jc=n(m,"H2",{class:!0});var Mno=s(Jc);a5=n(Mno,"A",{id:!0,class:!0,href:!0});var yaa=s(a5);OAe=n(yaa,"SPAN",{});var xaa=s(OAe);T($S.$$.fragment,xaa),xaa.forEach(t),yaa.forEach(t),_Rr=i(Mno),VAe=n(Mno,"SPAN",{});var $aa=s(VAe);bRr=r($aa,"AutoModelForZeroShotObjectDetection"),$aa.forEach(t),Mno.forEach(t),lto=i(m),lr=n(m,"DIV",{class:!0});var li=s(lr);T(kS.$$.fragment,li),vRr=i(li),Yc=n(li,"P",{});var dce=s(Yc);FRr=r(dce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a zero-shot object detection head) when created
with the `),coe=n(dce,"A",{href:!0});var kaa=s(coe);TRr=r(kaa,"from_pretrained()"),kaa.forEach(t),MRr=r(dce," class method or the "),moe=n(dce,"A",{href:!0});var Saa=s(moe);ERr=r(Saa,"from_config()"),Saa.forEach(t),CRr=r(dce,` class
method.`),dce.forEach(t),wRr=i(li),SS=n(li,"P",{});var Eno=s(SS);ARr=r(Eno,"This class cannot be instantiated directly using "),XAe=n(Eno,"CODE",{});var Raa=s(XAe);LRr=r(Raa,"__init__()"),Raa.forEach(t),yRr=r(Eno," (throws an error)."),Eno.forEach(t),xRr=i(li),Qt=n(li,"DIV",{class:!0});var y9=s(Qt);T(RS.$$.fragment,y9),$Rr=i(y9),zAe=n(y9,"P",{});var Paa=s(zAe);kRr=r(Paa,"Instantiates one of the model classes of the library (with a zero-shot object detection head) from a configuration."),Paa.forEach(t),SRr=i(y9),Zc=n(y9,"P",{});var cce=s(Zc);RRr=r(cce,`Note:
Loading a model from its configuration file does `),QAe=n(cce,"STRONG",{});var Baa=s(QAe);PRr=r(Baa,"not"),Baa.forEach(t),BRr=r(cce,` load the model weights. It only affects the
model\u2019s configuration. Use `),foe=n(cce,"A",{href:!0});var Iaa=s(foe);IRr=r(Iaa,"from_pretrained()"),Iaa.forEach(t),NRr=r(cce," to load the model weights."),cce.forEach(t),qRr=i(y9),T(n5.$$.fragment,y9),y9.forEach(t),jRr=i(li),Ao=n(li,"DIV",{class:!0});var Ha=s(Ao);T(PS.$$.fragment,Ha),DRr=i(Ha),WAe=n(Ha,"P",{});var Naa=s(WAe);GRr=r(Naa,"Instantiate one of the model classes of the library (with a zero-shot object detection head) from a pretrained model."),Naa.forEach(t),ORr=i(Ha),xn=n(Ha,"P",{});var x9=s(xn);VRr=r(x9,"The model class to instantiate is selected based on the "),UAe=n(x9,"CODE",{});var qaa=s(UAe);XRr=r(qaa,"model_type"),qaa.forEach(t),zRr=r(x9,` property of the config object (either
passed as an argument or loaded from `),HAe=n(x9,"CODE",{});var jaa=s(HAe);QRr=r(jaa,"pretrained_model_name_or_path"),jaa.forEach(t),WRr=r(x9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JAe=n(x9,"CODE",{});var Daa=s(JAe);URr=r(Daa,"pretrained_model_name_or_path"),Daa.forEach(t),HRr=r(x9,":"),x9.forEach(t),JRr=i(Ha),YAe=n(Ha,"UL",{});var Gaa=s(YAe);s5=n(Gaa,"LI",{});var RHe=s(s5);ZAe=n(RHe,"STRONG",{});var Oaa=s(ZAe);YRr=r(Oaa,"owlvit"),Oaa.forEach(t),ZRr=r(RHe," \u2014 "),goe=n(RHe,"A",{href:!0});var Vaa=s(goe);KRr=r(Vaa,"OwlViTForObjectDetection"),Vaa.forEach(t),ePr=r(RHe," (OWL-ViT model)"),RHe.forEach(t),Gaa.forEach(t),oPr=i(Ha),l5=n(Ha,"P",{});var PHe=s(l5);rPr=r(PHe,"The model is set in evaluation mode by default using "),KAe=n(PHe,"CODE",{});var Xaa=s(KAe);tPr=r(Xaa,"model.eval()"),Xaa.forEach(t),aPr=r(PHe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e6e=n(PHe,"CODE",{});var zaa=s(e6e);nPr=r(zaa,"model.train()"),zaa.forEach(t),PHe.forEach(t),sPr=i(Ha),T(i5.$$.fragment,Ha),Ha.forEach(t),li.forEach(t),ito=i(m),Kc=n(m,"H2",{class:!0});var Cno=s(Kc);d5=n(Cno,"A",{id:!0,class:!0,href:!0});var Qaa=s(d5);o6e=n(Qaa,"SPAN",{});var Waa=s(o6e);T(BS.$$.fragment,Waa),Waa.forEach(t),Qaa.forEach(t),lPr=i(Cno),r6e=n(Cno,"SPAN",{});var Uaa=s(r6e);iPr=r(Uaa,"TFAutoModel"),Uaa.forEach(t),Cno.forEach(t),dto=i(m),ir=n(m,"DIV",{class:!0});var ii=s(ir);T(IS.$$.fragment,ii),dPr=i(ii),em=n(ii,"P",{});var mce=s(em);cPr=r(mce,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hoe=n(mce,"A",{href:!0});var Haa=s(hoe);mPr=r(Haa,"from_pretrained()"),Haa.forEach(t),fPr=r(mce," class method or the "),uoe=n(mce,"A",{href:!0});var Jaa=s(uoe);gPr=r(Jaa,"from_config()"),Jaa.forEach(t),hPr=r(mce,` class
method.`),mce.forEach(t),uPr=i(ii),NS=n(ii,"P",{});var wno=s(NS);pPr=r(wno,"This class cannot be instantiated directly using "),t6e=n(wno,"CODE",{});var Yaa=s(t6e);_Pr=r(Yaa,"__init__()"),Yaa.forEach(t),bPr=r(wno," (throws an error)."),wno.forEach(t),vPr=i(ii),Wt=n(ii,"DIV",{class:!0});var $9=s(Wt);T(qS.$$.fragment,$9),FPr=i($9),a6e=n($9,"P",{});var Zaa=s(a6e);TPr=r(Zaa,"Instantiates one of the base model classes of the library from a configuration."),Zaa.forEach(t),MPr=i($9),om=n($9,"P",{});var fce=s(om);EPr=r(fce,`Note:
Loading a model from its configuration file does `),n6e=n(fce,"STRONG",{});var Kaa=s(n6e);CPr=r(Kaa,"not"),Kaa.forEach(t),wPr=r(fce,` load the model weights. It only affects the
model\u2019s configuration. Use `),poe=n(fce,"A",{href:!0});var ena=s(poe);APr=r(ena,"from_pretrained()"),ena.forEach(t),LPr=r(fce," to load the model weights."),fce.forEach(t),yPr=i($9),T(c5.$$.fragment,$9),$9.forEach(t),xPr=i(ii),qr=n(ii,"DIV",{class:!0});var di=s(qr);T(jS.$$.fragment,di),$Pr=i(di),s6e=n(di,"P",{});var ona=s(s6e);kPr=r(ona,"Instantiate one of the base model classes of the library from a pretrained model."),ona.forEach(t),SPr=i(di),$n=n(di,"P",{});var k9=s($n);RPr=r(k9,"The model class to instantiate is selected based on the "),l6e=n(k9,"CODE",{});var rna=s(l6e);PPr=r(rna,"model_type"),rna.forEach(t),BPr=r(k9,` property of the config object (either
passed as an argument or loaded from `),i6e=n(k9,"CODE",{});var tna=s(i6e);IPr=r(tna,"pretrained_model_name_or_path"),tna.forEach(t),NPr=r(k9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d6e=n(k9,"CODE",{});var ana=s(d6e);qPr=r(ana,"pretrained_model_name_or_path"),ana.forEach(t),jPr=r(k9,":"),k9.forEach(t),DPr=i(di),P=n(di,"UL",{});var N=s(P);m5=n(N,"LI",{});var BHe=s(m5);c6e=n(BHe,"STRONG",{});var nna=s(c6e);GPr=r(nna,"albert"),nna.forEach(t),OPr=r(BHe," \u2014 "),_oe=n(BHe,"A",{href:!0});var sna=s(_oe);VPr=r(sna,"TFAlbertModel"),sna.forEach(t),XPr=r(BHe," (ALBERT model)"),BHe.forEach(t),zPr=i(N),f5=n(N,"LI",{});var IHe=s(f5);m6e=n(IHe,"STRONG",{});var lna=s(m6e);QPr=r(lna,"bart"),lna.forEach(t),WPr=r(IHe," \u2014 "),boe=n(IHe,"A",{href:!0});var ina=s(boe);UPr=r(ina,"TFBartModel"),ina.forEach(t),HPr=r(IHe," (BART model)"),IHe.forEach(t),JPr=i(N),g5=n(N,"LI",{});var NHe=s(g5);f6e=n(NHe,"STRONG",{});var dna=s(f6e);YPr=r(dna,"bert"),dna.forEach(t),ZPr=r(NHe," \u2014 "),voe=n(NHe,"A",{href:!0});var cna=s(voe);KPr=r(cna,"TFBertModel"),cna.forEach(t),eBr=r(NHe," (BERT model)"),NHe.forEach(t),oBr=i(N),h5=n(N,"LI",{});var qHe=s(h5);g6e=n(qHe,"STRONG",{});var mna=s(g6e);rBr=r(mna,"blenderbot"),mna.forEach(t),tBr=r(qHe," \u2014 "),Foe=n(qHe,"A",{href:!0});var fna=s(Foe);aBr=r(fna,"TFBlenderbotModel"),fna.forEach(t),nBr=r(qHe," (Blenderbot model)"),qHe.forEach(t),sBr=i(N),u5=n(N,"LI",{});var jHe=s(u5);h6e=n(jHe,"STRONG",{});var gna=s(h6e);lBr=r(gna,"blenderbot-small"),gna.forEach(t),iBr=r(jHe," \u2014 "),Toe=n(jHe,"A",{href:!0});var hna=s(Toe);dBr=r(hna,"TFBlenderbotSmallModel"),hna.forEach(t),cBr=r(jHe," (BlenderbotSmall model)"),jHe.forEach(t),mBr=i(N),p5=n(N,"LI",{});var DHe=s(p5);u6e=n(DHe,"STRONG",{});var una=s(u6e);fBr=r(una,"camembert"),una.forEach(t),gBr=r(DHe," \u2014 "),Moe=n(DHe,"A",{href:!0});var pna=s(Moe);hBr=r(pna,"TFCamembertModel"),pna.forEach(t),uBr=r(DHe," (CamemBERT model)"),DHe.forEach(t),pBr=i(N),_5=n(N,"LI",{});var GHe=s(_5);p6e=n(GHe,"STRONG",{});var _na=s(p6e);_Br=r(_na,"clip"),_na.forEach(t),bBr=r(GHe," \u2014 "),Eoe=n(GHe,"A",{href:!0});var bna=s(Eoe);vBr=r(bna,"TFCLIPModel"),bna.forEach(t),FBr=r(GHe," (CLIP model)"),GHe.forEach(t),TBr=i(N),b5=n(N,"LI",{});var OHe=s(b5);_6e=n(OHe,"STRONG",{});var vna=s(_6e);MBr=r(vna,"convbert"),vna.forEach(t),EBr=r(OHe," \u2014 "),Coe=n(OHe,"A",{href:!0});var Fna=s(Coe);CBr=r(Fna,"TFConvBertModel"),Fna.forEach(t),wBr=r(OHe," (ConvBERT model)"),OHe.forEach(t),ABr=i(N),v5=n(N,"LI",{});var VHe=s(v5);b6e=n(VHe,"STRONG",{});var Tna=s(b6e);LBr=r(Tna,"convnext"),Tna.forEach(t),yBr=r(VHe," \u2014 "),woe=n(VHe,"A",{href:!0});var Mna=s(woe);xBr=r(Mna,"TFConvNextModel"),Mna.forEach(t),$Br=r(VHe," (ConvNeXT model)"),VHe.forEach(t),kBr=i(N),F5=n(N,"LI",{});var XHe=s(F5);v6e=n(XHe,"STRONG",{});var Ena=s(v6e);SBr=r(Ena,"ctrl"),Ena.forEach(t),RBr=r(XHe," \u2014 "),Aoe=n(XHe,"A",{href:!0});var Cna=s(Aoe);PBr=r(Cna,"TFCTRLModel"),Cna.forEach(t),BBr=r(XHe," (CTRL model)"),XHe.forEach(t),IBr=i(N),T5=n(N,"LI",{});var zHe=s(T5);F6e=n(zHe,"STRONG",{});var wna=s(F6e);NBr=r(wna,"cvt"),wna.forEach(t),qBr=r(zHe," \u2014 "),Loe=n(zHe,"A",{href:!0});var Ana=s(Loe);jBr=r(Ana,"TFCvtModel"),Ana.forEach(t),DBr=r(zHe," (CvT model)"),zHe.forEach(t),GBr=i(N),M5=n(N,"LI",{});var QHe=s(M5);T6e=n(QHe,"STRONG",{});var Lna=s(T6e);OBr=r(Lna,"data2vec-vision"),Lna.forEach(t),VBr=r(QHe," \u2014 "),yoe=n(QHe,"A",{href:!0});var yna=s(yoe);XBr=r(yna,"TFData2VecVisionModel"),yna.forEach(t),zBr=r(QHe," (Data2VecVision model)"),QHe.forEach(t),QBr=i(N),E5=n(N,"LI",{});var WHe=s(E5);M6e=n(WHe,"STRONG",{});var xna=s(M6e);WBr=r(xna,"deberta"),xna.forEach(t),UBr=r(WHe," \u2014 "),xoe=n(WHe,"A",{href:!0});var $na=s(xoe);HBr=r($na,"TFDebertaModel"),$na.forEach(t),JBr=r(WHe," (DeBERTa model)"),WHe.forEach(t),YBr=i(N),C5=n(N,"LI",{});var UHe=s(C5);E6e=n(UHe,"STRONG",{});var kna=s(E6e);ZBr=r(kna,"deberta-v2"),kna.forEach(t),KBr=r(UHe," \u2014 "),$oe=n(UHe,"A",{href:!0});var Sna=s($oe);eIr=r(Sna,"TFDebertaV2Model"),Sna.forEach(t),oIr=r(UHe," (DeBERTa-v2 model)"),UHe.forEach(t),rIr=i(N),w5=n(N,"LI",{});var HHe=s(w5);C6e=n(HHe,"STRONG",{});var Rna=s(C6e);tIr=r(Rna,"deit"),Rna.forEach(t),aIr=r(HHe," \u2014 "),koe=n(HHe,"A",{href:!0});var Pna=s(koe);nIr=r(Pna,"TFDeiTModel"),Pna.forEach(t),sIr=r(HHe," (DeiT model)"),HHe.forEach(t),lIr=i(N),A5=n(N,"LI",{});var JHe=s(A5);w6e=n(JHe,"STRONG",{});var Bna=s(w6e);iIr=r(Bna,"distilbert"),Bna.forEach(t),dIr=r(JHe," \u2014 "),Soe=n(JHe,"A",{href:!0});var Ina=s(Soe);cIr=r(Ina,"TFDistilBertModel"),Ina.forEach(t),mIr=r(JHe," (DistilBERT model)"),JHe.forEach(t),fIr=i(N),L5=n(N,"LI",{});var YHe=s(L5);A6e=n(YHe,"STRONG",{});var Nna=s(A6e);gIr=r(Nna,"dpr"),Nna.forEach(t),hIr=r(YHe," \u2014 "),Roe=n(YHe,"A",{href:!0});var qna=s(Roe);uIr=r(qna,"TFDPRQuestionEncoder"),qna.forEach(t),pIr=r(YHe," (DPR model)"),YHe.forEach(t),_Ir=i(N),y5=n(N,"LI",{});var ZHe=s(y5);L6e=n(ZHe,"STRONG",{});var jna=s(L6e);bIr=r(jna,"electra"),jna.forEach(t),vIr=r(ZHe," \u2014 "),Poe=n(ZHe,"A",{href:!0});var Dna=s(Poe);FIr=r(Dna,"TFElectraModel"),Dna.forEach(t),TIr=r(ZHe," (ELECTRA model)"),ZHe.forEach(t),MIr=i(N),x5=n(N,"LI",{});var KHe=s(x5);y6e=n(KHe,"STRONG",{});var Gna=s(y6e);EIr=r(Gna,"flaubert"),Gna.forEach(t),CIr=r(KHe," \u2014 "),Boe=n(KHe,"A",{href:!0});var Ona=s(Boe);wIr=r(Ona,"TFFlaubertModel"),Ona.forEach(t),AIr=r(KHe," (FlauBERT model)"),KHe.forEach(t),LIr=i(N),Al=n(N,"LI",{});var DI=s(Al);x6e=n(DI,"STRONG",{});var Vna=s(x6e);yIr=r(Vna,"funnel"),Vna.forEach(t),xIr=r(DI," \u2014 "),Ioe=n(DI,"A",{href:!0});var Xna=s(Ioe);$Ir=r(Xna,"TFFunnelModel"),Xna.forEach(t),kIr=r(DI," or "),Noe=n(DI,"A",{href:!0});var zna=s(Noe);SIr=r(zna,"TFFunnelBaseModel"),zna.forEach(t),RIr=r(DI," (Funnel Transformer model)"),DI.forEach(t),PIr=i(N),$5=n(N,"LI",{});var eJe=s($5);$6e=n(eJe,"STRONG",{});var Qna=s($6e);BIr=r(Qna,"gpt2"),Qna.forEach(t),IIr=r(eJe," \u2014 "),qoe=n(eJe,"A",{href:!0});var Wna=s(qoe);NIr=r(Wna,"TFGPT2Model"),Wna.forEach(t),qIr=r(eJe," (OpenAI GPT-2 model)"),eJe.forEach(t),jIr=i(N),k5=n(N,"LI",{});var oJe=s(k5);k6e=n(oJe,"STRONG",{});var Una=s(k6e);DIr=r(Una,"gptj"),Una.forEach(t),GIr=r(oJe," \u2014 "),joe=n(oJe,"A",{href:!0});var Hna=s(joe);OIr=r(Hna,"TFGPTJModel"),Hna.forEach(t),VIr=r(oJe," (GPT-J model)"),oJe.forEach(t),XIr=i(N),S5=n(N,"LI",{});var rJe=s(S5);S6e=n(rJe,"STRONG",{});var Jna=s(S6e);zIr=r(Jna,"groupvit"),Jna.forEach(t),QIr=r(rJe," \u2014 "),Doe=n(rJe,"A",{href:!0});var Yna=s(Doe);WIr=r(Yna,"TFGroupViTModel"),Yna.forEach(t),UIr=r(rJe," (GroupViT model)"),rJe.forEach(t),HIr=i(N),R5=n(N,"LI",{});var tJe=s(R5);R6e=n(tJe,"STRONG",{});var Zna=s(R6e);JIr=r(Zna,"hubert"),Zna.forEach(t),YIr=r(tJe," \u2014 "),Goe=n(tJe,"A",{href:!0});var Kna=s(Goe);ZIr=r(Kna,"TFHubertModel"),Kna.forEach(t),KIr=r(tJe," (Hubert model)"),tJe.forEach(t),eNr=i(N),P5=n(N,"LI",{});var aJe=s(P5);P6e=n(aJe,"STRONG",{});var esa=s(P6e);oNr=r(esa,"layoutlm"),esa.forEach(t),rNr=r(aJe," \u2014 "),Ooe=n(aJe,"A",{href:!0});var osa=s(Ooe);tNr=r(osa,"TFLayoutLMModel"),osa.forEach(t),aNr=r(aJe," (LayoutLM model)"),aJe.forEach(t),nNr=i(N),B5=n(N,"LI",{});var nJe=s(B5);B6e=n(nJe,"STRONG",{});var rsa=s(B6e);sNr=r(rsa,"layoutlmv3"),rsa.forEach(t),lNr=r(nJe," \u2014 "),Voe=n(nJe,"A",{href:!0});var tsa=s(Voe);iNr=r(tsa,"TFLayoutLMv3Model"),tsa.forEach(t),dNr=r(nJe," (LayoutLMv3 model)"),nJe.forEach(t),cNr=i(N),I5=n(N,"LI",{});var sJe=s(I5);I6e=n(sJe,"STRONG",{});var asa=s(I6e);mNr=r(asa,"led"),asa.forEach(t),fNr=r(sJe," \u2014 "),Xoe=n(sJe,"A",{href:!0});var nsa=s(Xoe);gNr=r(nsa,"TFLEDModel"),nsa.forEach(t),hNr=r(sJe," (LED model)"),sJe.forEach(t),uNr=i(N),N5=n(N,"LI",{});var lJe=s(N5);N6e=n(lJe,"STRONG",{});var ssa=s(N6e);pNr=r(ssa,"longformer"),ssa.forEach(t),_Nr=r(lJe," \u2014 "),zoe=n(lJe,"A",{href:!0});var lsa=s(zoe);bNr=r(lsa,"TFLongformerModel"),lsa.forEach(t),vNr=r(lJe," (Longformer model)"),lJe.forEach(t),FNr=i(N),q5=n(N,"LI",{});var iJe=s(q5);q6e=n(iJe,"STRONG",{});var isa=s(q6e);TNr=r(isa,"lxmert"),isa.forEach(t),MNr=r(iJe," \u2014 "),Qoe=n(iJe,"A",{href:!0});var dsa=s(Qoe);ENr=r(dsa,"TFLxmertModel"),dsa.forEach(t),CNr=r(iJe," (LXMERT model)"),iJe.forEach(t),wNr=i(N),j5=n(N,"LI",{});var dJe=s(j5);j6e=n(dJe,"STRONG",{});var csa=s(j6e);ANr=r(csa,"marian"),csa.forEach(t),LNr=r(dJe," \u2014 "),Woe=n(dJe,"A",{href:!0});var msa=s(Woe);yNr=r(msa,"TFMarianModel"),msa.forEach(t),xNr=r(dJe," (Marian model)"),dJe.forEach(t),$Nr=i(N),D5=n(N,"LI",{});var cJe=s(D5);D6e=n(cJe,"STRONG",{});var fsa=s(D6e);kNr=r(fsa,"mbart"),fsa.forEach(t),SNr=r(cJe," \u2014 "),Uoe=n(cJe,"A",{href:!0});var gsa=s(Uoe);RNr=r(gsa,"TFMBartModel"),gsa.forEach(t),PNr=r(cJe," (mBART model)"),cJe.forEach(t),BNr=i(N),G5=n(N,"LI",{});var mJe=s(G5);G6e=n(mJe,"STRONG",{});var hsa=s(G6e);INr=r(hsa,"mobilebert"),hsa.forEach(t),NNr=r(mJe," \u2014 "),Hoe=n(mJe,"A",{href:!0});var usa=s(Hoe);qNr=r(usa,"TFMobileBertModel"),usa.forEach(t),jNr=r(mJe," (MobileBERT model)"),mJe.forEach(t),DNr=i(N),O5=n(N,"LI",{});var fJe=s(O5);O6e=n(fJe,"STRONG",{});var psa=s(O6e);GNr=r(psa,"mobilevit"),psa.forEach(t),ONr=r(fJe," \u2014 "),Joe=n(fJe,"A",{href:!0});var _sa=s(Joe);VNr=r(_sa,"TFMobileViTModel"),_sa.forEach(t),XNr=r(fJe," (MobileViT model)"),fJe.forEach(t),zNr=i(N),V5=n(N,"LI",{});var gJe=s(V5);V6e=n(gJe,"STRONG",{});var bsa=s(V6e);QNr=r(bsa,"mpnet"),bsa.forEach(t),WNr=r(gJe," \u2014 "),Yoe=n(gJe,"A",{href:!0});var vsa=s(Yoe);UNr=r(vsa,"TFMPNetModel"),vsa.forEach(t),HNr=r(gJe," (MPNet model)"),gJe.forEach(t),JNr=i(N),X5=n(N,"LI",{});var hJe=s(X5);X6e=n(hJe,"STRONG",{});var Fsa=s(X6e);YNr=r(Fsa,"mt5"),Fsa.forEach(t),ZNr=r(hJe," \u2014 "),Zoe=n(hJe,"A",{href:!0});var Tsa=s(Zoe);KNr=r(Tsa,"TFMT5Model"),Tsa.forEach(t),eqr=r(hJe," (MT5 model)"),hJe.forEach(t),oqr=i(N),z5=n(N,"LI",{});var uJe=s(z5);z6e=n(uJe,"STRONG",{});var Msa=s(z6e);rqr=r(Msa,"openai-gpt"),Msa.forEach(t),tqr=r(uJe," \u2014 "),Koe=n(uJe,"A",{href:!0});var Esa=s(Koe);aqr=r(Esa,"TFOpenAIGPTModel"),Esa.forEach(t),nqr=r(uJe," (OpenAI GPT model)"),uJe.forEach(t),sqr=i(N),Q5=n(N,"LI",{});var pJe=s(Q5);Q6e=n(pJe,"STRONG",{});var Csa=s(Q6e);lqr=r(Csa,"opt"),Csa.forEach(t),iqr=r(pJe," \u2014 "),ere=n(pJe,"A",{href:!0});var wsa=s(ere);dqr=r(wsa,"TFOPTModel"),wsa.forEach(t),cqr=r(pJe," (OPT model)"),pJe.forEach(t),mqr=i(N),W5=n(N,"LI",{});var _Je=s(W5);W6e=n(_Je,"STRONG",{});var Asa=s(W6e);fqr=r(Asa,"pegasus"),Asa.forEach(t),gqr=r(_Je," \u2014 "),ore=n(_Je,"A",{href:!0});var Lsa=s(ore);hqr=r(Lsa,"TFPegasusModel"),Lsa.forEach(t),uqr=r(_Je," (Pegasus model)"),_Je.forEach(t),pqr=i(N),U5=n(N,"LI",{});var bJe=s(U5);U6e=n(bJe,"STRONG",{});var ysa=s(U6e);_qr=r(ysa,"regnet"),ysa.forEach(t),bqr=r(bJe," \u2014 "),rre=n(bJe,"A",{href:!0});var xsa=s(rre);vqr=r(xsa,"TFRegNetModel"),xsa.forEach(t),Fqr=r(bJe," (RegNet model)"),bJe.forEach(t),Tqr=i(N),H5=n(N,"LI",{});var vJe=s(H5);H6e=n(vJe,"STRONG",{});var $sa=s(H6e);Mqr=r($sa,"rembert"),$sa.forEach(t),Eqr=r(vJe," \u2014 "),tre=n(vJe,"A",{href:!0});var ksa=s(tre);Cqr=r(ksa,"TFRemBertModel"),ksa.forEach(t),wqr=r(vJe," (RemBERT model)"),vJe.forEach(t),Aqr=i(N),J5=n(N,"LI",{});var FJe=s(J5);J6e=n(FJe,"STRONG",{});var Ssa=s(J6e);Lqr=r(Ssa,"resnet"),Ssa.forEach(t),yqr=r(FJe," \u2014 "),are=n(FJe,"A",{href:!0});var Rsa=s(are);xqr=r(Rsa,"TFResNetModel"),Rsa.forEach(t),$qr=r(FJe," (ResNet model)"),FJe.forEach(t),kqr=i(N),Y5=n(N,"LI",{});var TJe=s(Y5);Y6e=n(TJe,"STRONG",{});var Psa=s(Y6e);Sqr=r(Psa,"roberta"),Psa.forEach(t),Rqr=r(TJe," \u2014 "),nre=n(TJe,"A",{href:!0});var Bsa=s(nre);Pqr=r(Bsa,"TFRobertaModel"),Bsa.forEach(t),Bqr=r(TJe," (RoBERTa model)"),TJe.forEach(t),Iqr=i(N),Z5=n(N,"LI",{});var MJe=s(Z5);Z6e=n(MJe,"STRONG",{});var Isa=s(Z6e);Nqr=r(Isa,"roformer"),Isa.forEach(t),qqr=r(MJe," \u2014 "),sre=n(MJe,"A",{href:!0});var Nsa=s(sre);jqr=r(Nsa,"TFRoFormerModel"),Nsa.forEach(t),Dqr=r(MJe," (RoFormer model)"),MJe.forEach(t),Gqr=i(N),K5=n(N,"LI",{});var EJe=s(K5);K6e=n(EJe,"STRONG",{});var qsa=s(K6e);Oqr=r(qsa,"segformer"),qsa.forEach(t),Vqr=r(EJe," \u2014 "),lre=n(EJe,"A",{href:!0});var jsa=s(lre);Xqr=r(jsa,"TFSegformerModel"),jsa.forEach(t),zqr=r(EJe," (SegFormer model)"),EJe.forEach(t),Qqr=i(N),e0=n(N,"LI",{});var CJe=s(e0);e7e=n(CJe,"STRONG",{});var Dsa=s(e7e);Wqr=r(Dsa,"speech_to_text"),Dsa.forEach(t),Uqr=r(CJe," \u2014 "),ire=n(CJe,"A",{href:!0});var Gsa=s(ire);Hqr=r(Gsa,"TFSpeech2TextModel"),Gsa.forEach(t),Jqr=r(CJe," (Speech2Text model)"),CJe.forEach(t),Yqr=i(N),o0=n(N,"LI",{});var wJe=s(o0);o7e=n(wJe,"STRONG",{});var Osa=s(o7e);Zqr=r(Osa,"swin"),Osa.forEach(t),Kqr=r(wJe," \u2014 "),dre=n(wJe,"A",{href:!0});var Vsa=s(dre);ejr=r(Vsa,"TFSwinModel"),Vsa.forEach(t),ojr=r(wJe," (Swin Transformer model)"),wJe.forEach(t),rjr=i(N),r0=n(N,"LI",{});var AJe=s(r0);r7e=n(AJe,"STRONG",{});var Xsa=s(r7e);tjr=r(Xsa,"t5"),Xsa.forEach(t),ajr=r(AJe," \u2014 "),cre=n(AJe,"A",{href:!0});var zsa=s(cre);njr=r(zsa,"TFT5Model"),zsa.forEach(t),sjr=r(AJe," (T5 model)"),AJe.forEach(t),ljr=i(N),t0=n(N,"LI",{});var LJe=s(t0);t7e=n(LJe,"STRONG",{});var Qsa=s(t7e);ijr=r(Qsa,"tapas"),Qsa.forEach(t),djr=r(LJe," \u2014 "),mre=n(LJe,"A",{href:!0});var Wsa=s(mre);cjr=r(Wsa,"TFTapasModel"),Wsa.forEach(t),mjr=r(LJe," (TAPAS model)"),LJe.forEach(t),fjr=i(N),a0=n(N,"LI",{});var yJe=s(a0);a7e=n(yJe,"STRONG",{});var Usa=s(a7e);gjr=r(Usa,"transfo-xl"),Usa.forEach(t),hjr=r(yJe," \u2014 "),fre=n(yJe,"A",{href:!0});var Hsa=s(fre);ujr=r(Hsa,"TFTransfoXLModel"),Hsa.forEach(t),pjr=r(yJe," (Transformer-XL model)"),yJe.forEach(t),_jr=i(N),n0=n(N,"LI",{});var xJe=s(n0);n7e=n(xJe,"STRONG",{});var Jsa=s(n7e);bjr=r(Jsa,"vit"),Jsa.forEach(t),vjr=r(xJe," \u2014 "),gre=n(xJe,"A",{href:!0});var Ysa=s(gre);Fjr=r(Ysa,"TFViTModel"),Ysa.forEach(t),Tjr=r(xJe," (ViT model)"),xJe.forEach(t),Mjr=i(N),s0=n(N,"LI",{});var $Je=s(s0);s7e=n($Je,"STRONG",{});var Zsa=s(s7e);Ejr=r(Zsa,"vit_mae"),Zsa.forEach(t),Cjr=r($Je," \u2014 "),hre=n($Je,"A",{href:!0});var Ksa=s(hre);wjr=r(Ksa,"TFViTMAEModel"),Ksa.forEach(t),Ajr=r($Je," (ViTMAE model)"),$Je.forEach(t),Ljr=i(N),l0=n(N,"LI",{});var kJe=s(l0);l7e=n(kJe,"STRONG",{});var ela=s(l7e);yjr=r(ela,"wav2vec2"),ela.forEach(t),xjr=r(kJe," \u2014 "),ure=n(kJe,"A",{href:!0});var ola=s(ure);$jr=r(ola,"TFWav2Vec2Model"),ola.forEach(t),kjr=r(kJe," (Wav2Vec2 model)"),kJe.forEach(t),Sjr=i(N),i0=n(N,"LI",{});var SJe=s(i0);i7e=n(SJe,"STRONG",{});var rla=s(i7e);Rjr=r(rla,"whisper"),rla.forEach(t),Pjr=r(SJe," \u2014 "),pre=n(SJe,"A",{href:!0});var tla=s(pre);Bjr=r(tla,"TFWhisperModel"),tla.forEach(t),Ijr=r(SJe," (Whisper model)"),SJe.forEach(t),Njr=i(N),d0=n(N,"LI",{});var RJe=s(d0);d7e=n(RJe,"STRONG",{});var ala=s(d7e);qjr=r(ala,"xglm"),ala.forEach(t),jjr=r(RJe," \u2014 "),_re=n(RJe,"A",{href:!0});var nla=s(_re);Djr=r(nla,"TFXGLMModel"),nla.forEach(t),Gjr=r(RJe," (XGLM model)"),RJe.forEach(t),Ojr=i(N),c0=n(N,"LI",{});var PJe=s(c0);c7e=n(PJe,"STRONG",{});var sla=s(c7e);Vjr=r(sla,"xlm"),sla.forEach(t),Xjr=r(PJe," \u2014 "),bre=n(PJe,"A",{href:!0});var lla=s(bre);zjr=r(lla,"TFXLMModel"),lla.forEach(t),Qjr=r(PJe," (XLM model)"),PJe.forEach(t),Wjr=i(N),m0=n(N,"LI",{});var BJe=s(m0);m7e=n(BJe,"STRONG",{});var ila=s(m7e);Ujr=r(ila,"xlm-roberta"),ila.forEach(t),Hjr=r(BJe," \u2014 "),vre=n(BJe,"A",{href:!0});var dla=s(vre);Jjr=r(dla,"TFXLMRobertaModel"),dla.forEach(t),Yjr=r(BJe," (XLM-RoBERTa model)"),BJe.forEach(t),Zjr=i(N),f0=n(N,"LI",{});var IJe=s(f0);f7e=n(IJe,"STRONG",{});var cla=s(f7e);Kjr=r(cla,"xlnet"),cla.forEach(t),eDr=r(IJe," \u2014 "),Fre=n(IJe,"A",{href:!0});var mla=s(Fre);oDr=r(mla,"TFXLNetModel"),mla.forEach(t),rDr=r(IJe," (XLNet model)"),IJe.forEach(t),N.forEach(t),tDr=i(di),T(g0.$$.fragment,di),di.forEach(t),ii.forEach(t),cto=i(m),rm=n(m,"H2",{class:!0});var Ano=s(rm);h0=n(Ano,"A",{id:!0,class:!0,href:!0});var fla=s(h0);g7e=n(fla,"SPAN",{});var gla=s(g7e);T(DS.$$.fragment,gla),gla.forEach(t),fla.forEach(t),aDr=i(Ano),h7e=n(Ano,"SPAN",{});var hla=s(h7e);nDr=r(hla,"TFAutoModelForPreTraining"),hla.forEach(t),Ano.forEach(t),mto=i(m),dr=n(m,"DIV",{class:!0});var ci=s(dr);T(GS.$$.fragment,ci),sDr=i(ci),tm=n(ci,"P",{});var gce=s(tm);lDr=r(gce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Tre=n(gce,"A",{href:!0});var ula=s(Tre);iDr=r(ula,"from_pretrained()"),ula.forEach(t),dDr=r(gce," class method or the "),Mre=n(gce,"A",{href:!0});var pla=s(Mre);cDr=r(pla,"from_config()"),pla.forEach(t),mDr=r(gce,` class
method.`),gce.forEach(t),fDr=i(ci),OS=n(ci,"P",{});var Lno=s(OS);gDr=r(Lno,"This class cannot be instantiated directly using "),u7e=n(Lno,"CODE",{});var _la=s(u7e);hDr=r(_la,"__init__()"),_la.forEach(t),uDr=r(Lno," (throws an error)."),Lno.forEach(t),pDr=i(ci),Ut=n(ci,"DIV",{class:!0});var S9=s(Ut);T(VS.$$.fragment,S9),_Dr=i(S9),p7e=n(S9,"P",{});var bla=s(p7e);bDr=r(bla,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),bla.forEach(t),vDr=i(S9),am=n(S9,"P",{});var hce=s(am);FDr=r(hce,`Note:
Loading a model from its configuration file does `),_7e=n(hce,"STRONG",{});var vla=s(_7e);TDr=r(vla,"not"),vla.forEach(t),MDr=r(hce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ere=n(hce,"A",{href:!0});var Fla=s(Ere);EDr=r(Fla,"from_pretrained()"),Fla.forEach(t),CDr=r(hce," to load the model weights."),hce.forEach(t),wDr=i(S9),T(u0.$$.fragment,S9),S9.forEach(t),ADr=i(ci),jr=n(ci,"DIV",{class:!0});var mi=s(jr);T(XS.$$.fragment,mi),LDr=i(mi),b7e=n(mi,"P",{});var Tla=s(b7e);yDr=r(Tla,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Tla.forEach(t),xDr=i(mi),kn=n(mi,"P",{});var R9=s(kn);$Dr=r(R9,"The model class to instantiate is selected based on the "),v7e=n(R9,"CODE",{});var Mla=s(v7e);kDr=r(Mla,"model_type"),Mla.forEach(t),SDr=r(R9,` property of the config object (either
passed as an argument or loaded from `),F7e=n(R9,"CODE",{});var Ela=s(F7e);RDr=r(Ela,"pretrained_model_name_or_path"),Ela.forEach(t),PDr=r(R9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T7e=n(R9,"CODE",{});var Cla=s(T7e);BDr=r(Cla,"pretrained_model_name_or_path"),Cla.forEach(t),IDr=r(R9,":"),R9.forEach(t),NDr=i(mi),le=n(mi,"UL",{});var de=s(le);p0=n(de,"LI",{});var NJe=s(p0);M7e=n(NJe,"STRONG",{});var wla=s(M7e);qDr=r(wla,"albert"),wla.forEach(t),jDr=r(NJe," \u2014 "),Cre=n(NJe,"A",{href:!0});var Ala=s(Cre);DDr=r(Ala,"TFAlbertForPreTraining"),Ala.forEach(t),GDr=r(NJe," (ALBERT model)"),NJe.forEach(t),ODr=i(de),_0=n(de,"LI",{});var qJe=s(_0);E7e=n(qJe,"STRONG",{});var Lla=s(E7e);VDr=r(Lla,"bart"),Lla.forEach(t),XDr=r(qJe," \u2014 "),wre=n(qJe,"A",{href:!0});var yla=s(wre);zDr=r(yla,"TFBartForConditionalGeneration"),yla.forEach(t),QDr=r(qJe," (BART model)"),qJe.forEach(t),WDr=i(de),b0=n(de,"LI",{});var jJe=s(b0);C7e=n(jJe,"STRONG",{});var xla=s(C7e);UDr=r(xla,"bert"),xla.forEach(t),HDr=r(jJe," \u2014 "),Are=n(jJe,"A",{href:!0});var $la=s(Are);JDr=r($la,"TFBertForPreTraining"),$la.forEach(t),YDr=r(jJe," (BERT model)"),jJe.forEach(t),ZDr=i(de),v0=n(de,"LI",{});var DJe=s(v0);w7e=n(DJe,"STRONG",{});var kla=s(w7e);KDr=r(kla,"camembert"),kla.forEach(t),eGr=r(DJe," \u2014 "),Lre=n(DJe,"A",{href:!0});var Sla=s(Lre);oGr=r(Sla,"TFCamembertForMaskedLM"),Sla.forEach(t),rGr=r(DJe," (CamemBERT model)"),DJe.forEach(t),tGr=i(de),F0=n(de,"LI",{});var GJe=s(F0);A7e=n(GJe,"STRONG",{});var Rla=s(A7e);aGr=r(Rla,"ctrl"),Rla.forEach(t),nGr=r(GJe," \u2014 "),yre=n(GJe,"A",{href:!0});var Pla=s(yre);sGr=r(Pla,"TFCTRLLMHeadModel"),Pla.forEach(t),lGr=r(GJe," (CTRL model)"),GJe.forEach(t),iGr=i(de),T0=n(de,"LI",{});var OJe=s(T0);L7e=n(OJe,"STRONG",{});var Bla=s(L7e);dGr=r(Bla,"distilbert"),Bla.forEach(t),cGr=r(OJe," \u2014 "),xre=n(OJe,"A",{href:!0});var Ila=s(xre);mGr=r(Ila,"TFDistilBertForMaskedLM"),Ila.forEach(t),fGr=r(OJe," (DistilBERT model)"),OJe.forEach(t),gGr=i(de),M0=n(de,"LI",{});var VJe=s(M0);y7e=n(VJe,"STRONG",{});var Nla=s(y7e);hGr=r(Nla,"electra"),Nla.forEach(t),uGr=r(VJe," \u2014 "),$re=n(VJe,"A",{href:!0});var qla=s($re);pGr=r(qla,"TFElectraForPreTraining"),qla.forEach(t),_Gr=r(VJe," (ELECTRA model)"),VJe.forEach(t),bGr=i(de),E0=n(de,"LI",{});var XJe=s(E0);x7e=n(XJe,"STRONG",{});var jla=s(x7e);vGr=r(jla,"flaubert"),jla.forEach(t),FGr=r(XJe," \u2014 "),kre=n(XJe,"A",{href:!0});var Dla=s(kre);TGr=r(Dla,"TFFlaubertWithLMHeadModel"),Dla.forEach(t),MGr=r(XJe," (FlauBERT model)"),XJe.forEach(t),EGr=i(de),C0=n(de,"LI",{});var zJe=s(C0);$7e=n(zJe,"STRONG",{});var Gla=s($7e);CGr=r(Gla,"funnel"),Gla.forEach(t),wGr=r(zJe," \u2014 "),Sre=n(zJe,"A",{href:!0});var Ola=s(Sre);AGr=r(Ola,"TFFunnelForPreTraining"),Ola.forEach(t),LGr=r(zJe," (Funnel Transformer model)"),zJe.forEach(t),yGr=i(de),w0=n(de,"LI",{});var QJe=s(w0);k7e=n(QJe,"STRONG",{});var Vla=s(k7e);xGr=r(Vla,"gpt2"),Vla.forEach(t),$Gr=r(QJe," \u2014 "),Rre=n(QJe,"A",{href:!0});var Xla=s(Rre);kGr=r(Xla,"TFGPT2LMHeadModel"),Xla.forEach(t),SGr=r(QJe," (OpenAI GPT-2 model)"),QJe.forEach(t),RGr=i(de),A0=n(de,"LI",{});var WJe=s(A0);S7e=n(WJe,"STRONG",{});var zla=s(S7e);PGr=r(zla,"layoutlm"),zla.forEach(t),BGr=r(WJe," \u2014 "),Pre=n(WJe,"A",{href:!0});var Qla=s(Pre);IGr=r(Qla,"TFLayoutLMForMaskedLM"),Qla.forEach(t),NGr=r(WJe," (LayoutLM model)"),WJe.forEach(t),qGr=i(de),L0=n(de,"LI",{});var UJe=s(L0);R7e=n(UJe,"STRONG",{});var Wla=s(R7e);jGr=r(Wla,"lxmert"),Wla.forEach(t),DGr=r(UJe," \u2014 "),Bre=n(UJe,"A",{href:!0});var Ula=s(Bre);GGr=r(Ula,"TFLxmertForPreTraining"),Ula.forEach(t),OGr=r(UJe," (LXMERT model)"),UJe.forEach(t),VGr=i(de),y0=n(de,"LI",{});var HJe=s(y0);P7e=n(HJe,"STRONG",{});var Hla=s(P7e);XGr=r(Hla,"mobilebert"),Hla.forEach(t),zGr=r(HJe," \u2014 "),Ire=n(HJe,"A",{href:!0});var Jla=s(Ire);QGr=r(Jla,"TFMobileBertForPreTraining"),Jla.forEach(t),WGr=r(HJe," (MobileBERT model)"),HJe.forEach(t),UGr=i(de),x0=n(de,"LI",{});var JJe=s(x0);B7e=n(JJe,"STRONG",{});var Yla=s(B7e);HGr=r(Yla,"mpnet"),Yla.forEach(t),JGr=r(JJe," \u2014 "),Nre=n(JJe,"A",{href:!0});var Zla=s(Nre);YGr=r(Zla,"TFMPNetForMaskedLM"),Zla.forEach(t),ZGr=r(JJe," (MPNet model)"),JJe.forEach(t),KGr=i(de),$0=n(de,"LI",{});var YJe=s($0);I7e=n(YJe,"STRONG",{});var Kla=s(I7e);eOr=r(Kla,"openai-gpt"),Kla.forEach(t),oOr=r(YJe," \u2014 "),qre=n(YJe,"A",{href:!0});var eia=s(qre);rOr=r(eia,"TFOpenAIGPTLMHeadModel"),eia.forEach(t),tOr=r(YJe," (OpenAI GPT model)"),YJe.forEach(t),aOr=i(de),k0=n(de,"LI",{});var ZJe=s(k0);N7e=n(ZJe,"STRONG",{});var oia=s(N7e);nOr=r(oia,"roberta"),oia.forEach(t),sOr=r(ZJe," \u2014 "),jre=n(ZJe,"A",{href:!0});var ria=s(jre);lOr=r(ria,"TFRobertaForMaskedLM"),ria.forEach(t),iOr=r(ZJe," (RoBERTa model)"),ZJe.forEach(t),dOr=i(de),S0=n(de,"LI",{});var KJe=s(S0);q7e=n(KJe,"STRONG",{});var tia=s(q7e);cOr=r(tia,"t5"),tia.forEach(t),mOr=r(KJe," \u2014 "),Dre=n(KJe,"A",{href:!0});var aia=s(Dre);fOr=r(aia,"TFT5ForConditionalGeneration"),aia.forEach(t),gOr=r(KJe," (T5 model)"),KJe.forEach(t),hOr=i(de),R0=n(de,"LI",{});var eYe=s(R0);j7e=n(eYe,"STRONG",{});var nia=s(j7e);uOr=r(nia,"tapas"),nia.forEach(t),pOr=r(eYe," \u2014 "),Gre=n(eYe,"A",{href:!0});var sia=s(Gre);_Or=r(sia,"TFTapasForMaskedLM"),sia.forEach(t),bOr=r(eYe," (TAPAS model)"),eYe.forEach(t),vOr=i(de),P0=n(de,"LI",{});var oYe=s(P0);D7e=n(oYe,"STRONG",{});var lia=s(D7e);FOr=r(lia,"transfo-xl"),lia.forEach(t),TOr=r(oYe," \u2014 "),Ore=n(oYe,"A",{href:!0});var iia=s(Ore);MOr=r(iia,"TFTransfoXLLMHeadModel"),iia.forEach(t),EOr=r(oYe," (Transformer-XL model)"),oYe.forEach(t),COr=i(de),B0=n(de,"LI",{});var rYe=s(B0);G7e=n(rYe,"STRONG",{});var dia=s(G7e);wOr=r(dia,"vit_mae"),dia.forEach(t),AOr=r(rYe," \u2014 "),Vre=n(rYe,"A",{href:!0});var cia=s(Vre);LOr=r(cia,"TFViTMAEForPreTraining"),cia.forEach(t),yOr=r(rYe," (ViTMAE model)"),rYe.forEach(t),xOr=i(de),I0=n(de,"LI",{});var tYe=s(I0);O7e=n(tYe,"STRONG",{});var mia=s(O7e);$Or=r(mia,"xlm"),mia.forEach(t),kOr=r(tYe," \u2014 "),Xre=n(tYe,"A",{href:!0});var fia=s(Xre);SOr=r(fia,"TFXLMWithLMHeadModel"),fia.forEach(t),ROr=r(tYe," (XLM model)"),tYe.forEach(t),POr=i(de),N0=n(de,"LI",{});var aYe=s(N0);V7e=n(aYe,"STRONG",{});var gia=s(V7e);BOr=r(gia,"xlm-roberta"),gia.forEach(t),IOr=r(aYe," \u2014 "),zre=n(aYe,"A",{href:!0});var hia=s(zre);NOr=r(hia,"TFXLMRobertaForMaskedLM"),hia.forEach(t),qOr=r(aYe," (XLM-RoBERTa model)"),aYe.forEach(t),jOr=i(de),q0=n(de,"LI",{});var nYe=s(q0);X7e=n(nYe,"STRONG",{});var uia=s(X7e);DOr=r(uia,"xlnet"),uia.forEach(t),GOr=r(nYe," \u2014 "),Qre=n(nYe,"A",{href:!0});var pia=s(Qre);OOr=r(pia,"TFXLNetLMHeadModel"),pia.forEach(t),VOr=r(nYe," (XLNet model)"),nYe.forEach(t),de.forEach(t),XOr=i(mi),T(j0.$$.fragment,mi),mi.forEach(t),ci.forEach(t),fto=i(m),nm=n(m,"H2",{class:!0});var yno=s(nm);D0=n(yno,"A",{id:!0,class:!0,href:!0});var _ia=s(D0);z7e=n(_ia,"SPAN",{});var bia=s(z7e);T(zS.$$.fragment,bia),bia.forEach(t),_ia.forEach(t),zOr=i(yno),Q7e=n(yno,"SPAN",{});var via=s(Q7e);QOr=r(via,"TFAutoModelForCausalLM"),via.forEach(t),yno.forEach(t),gto=i(m),cr=n(m,"DIV",{class:!0});var fi=s(cr);T(QS.$$.fragment,fi),WOr=i(fi),sm=n(fi,"P",{});var uce=s(sm);UOr=r(uce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Wre=n(uce,"A",{href:!0});var Fia=s(Wre);HOr=r(Fia,"from_pretrained()"),Fia.forEach(t),JOr=r(uce," class method or the "),Ure=n(uce,"A",{href:!0});var Tia=s(Ure);YOr=r(Tia,"from_config()"),Tia.forEach(t),ZOr=r(uce,` class
method.`),uce.forEach(t),KOr=i(fi),WS=n(fi,"P",{});var xno=s(WS);eVr=r(xno,"This class cannot be instantiated directly using "),W7e=n(xno,"CODE",{});var Mia=s(W7e);oVr=r(Mia,"__init__()"),Mia.forEach(t),rVr=r(xno," (throws an error)."),xno.forEach(t),tVr=i(fi),Ht=n(fi,"DIV",{class:!0});var P9=s(Ht);T(US.$$.fragment,P9),aVr=i(P9),U7e=n(P9,"P",{});var Eia=s(U7e);nVr=r(Eia,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Eia.forEach(t),sVr=i(P9),lm=n(P9,"P",{});var pce=s(lm);lVr=r(pce,`Note:
Loading a model from its configuration file does `),H7e=n(pce,"STRONG",{});var Cia=s(H7e);iVr=r(Cia,"not"),Cia.forEach(t),dVr=r(pce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hre=n(pce,"A",{href:!0});var wia=s(Hre);cVr=r(wia,"from_pretrained()"),wia.forEach(t),mVr=r(pce," to load the model weights."),pce.forEach(t),fVr=i(P9),T(G0.$$.fragment,P9),P9.forEach(t),gVr=i(fi),Dr=n(fi,"DIV",{class:!0});var gi=s(Dr);T(HS.$$.fragment,gi),hVr=i(gi),J7e=n(gi,"P",{});var Aia=s(J7e);uVr=r(Aia,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Aia.forEach(t),pVr=i(gi),Sn=n(gi,"P",{});var B9=s(Sn);_Vr=r(B9,"The model class to instantiate is selected based on the "),Y7e=n(B9,"CODE",{});var Lia=s(Y7e);bVr=r(Lia,"model_type"),Lia.forEach(t),vVr=r(B9,` property of the config object (either
passed as an argument or loaded from `),Z7e=n(B9,"CODE",{});var yia=s(Z7e);FVr=r(yia,"pretrained_model_name_or_path"),yia.forEach(t),TVr=r(B9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K7e=n(B9,"CODE",{});var xia=s(K7e);MVr=r(xia,"pretrained_model_name_or_path"),xia.forEach(t),EVr=r(B9,":"),B9.forEach(t),CVr=i(gi),Me=n(gi,"UL",{});var Ce=s(Me);O0=n(Ce,"LI",{});var sYe=s(O0);eLe=n(sYe,"STRONG",{});var $ia=s(eLe);wVr=r($ia,"bert"),$ia.forEach(t),AVr=r(sYe," \u2014 "),Jre=n(sYe,"A",{href:!0});var kia=s(Jre);LVr=r(kia,"TFBertLMHeadModel"),kia.forEach(t),yVr=r(sYe," (BERT model)"),sYe.forEach(t),xVr=i(Ce),V0=n(Ce,"LI",{});var lYe=s(V0);oLe=n(lYe,"STRONG",{});var Sia=s(oLe);$Vr=r(Sia,"camembert"),Sia.forEach(t),kVr=r(lYe," \u2014 "),Yre=n(lYe,"A",{href:!0});var Ria=s(Yre);SVr=r(Ria,"TFCamembertForCausalLM"),Ria.forEach(t),RVr=r(lYe," (CamemBERT model)"),lYe.forEach(t),PVr=i(Ce),X0=n(Ce,"LI",{});var iYe=s(X0);rLe=n(iYe,"STRONG",{});var Pia=s(rLe);BVr=r(Pia,"ctrl"),Pia.forEach(t),IVr=r(iYe," \u2014 "),Zre=n(iYe,"A",{href:!0});var Bia=s(Zre);NVr=r(Bia,"TFCTRLLMHeadModel"),Bia.forEach(t),qVr=r(iYe," (CTRL model)"),iYe.forEach(t),jVr=i(Ce),z0=n(Ce,"LI",{});var dYe=s(z0);tLe=n(dYe,"STRONG",{});var Iia=s(tLe);DVr=r(Iia,"gpt2"),Iia.forEach(t),GVr=r(dYe," \u2014 "),Kre=n(dYe,"A",{href:!0});var Nia=s(Kre);OVr=r(Nia,"TFGPT2LMHeadModel"),Nia.forEach(t),VVr=r(dYe," (OpenAI GPT-2 model)"),dYe.forEach(t),XVr=i(Ce),Q0=n(Ce,"LI",{});var cYe=s(Q0);aLe=n(cYe,"STRONG",{});var qia=s(aLe);zVr=r(qia,"gptj"),qia.forEach(t),QVr=r(cYe," \u2014 "),ete=n(cYe,"A",{href:!0});var jia=s(ete);WVr=r(jia,"TFGPTJForCausalLM"),jia.forEach(t),UVr=r(cYe," (GPT-J model)"),cYe.forEach(t),HVr=i(Ce),W0=n(Ce,"LI",{});var mYe=s(W0);nLe=n(mYe,"STRONG",{});var Dia=s(nLe);JVr=r(Dia,"openai-gpt"),Dia.forEach(t),YVr=r(mYe," \u2014 "),ote=n(mYe,"A",{href:!0});var Gia=s(ote);ZVr=r(Gia,"TFOpenAIGPTLMHeadModel"),Gia.forEach(t),KVr=r(mYe," (OpenAI GPT model)"),mYe.forEach(t),eXr=i(Ce),U0=n(Ce,"LI",{});var fYe=s(U0);sLe=n(fYe,"STRONG",{});var Oia=s(sLe);oXr=r(Oia,"opt"),Oia.forEach(t),rXr=r(fYe," \u2014 "),rte=n(fYe,"A",{href:!0});var Via=s(rte);tXr=r(Via,"TFOPTForCausalLM"),Via.forEach(t),aXr=r(fYe," (OPT model)"),fYe.forEach(t),nXr=i(Ce),H0=n(Ce,"LI",{});var gYe=s(H0);lLe=n(gYe,"STRONG",{});var Xia=s(lLe);sXr=r(Xia,"rembert"),Xia.forEach(t),lXr=r(gYe," \u2014 "),tte=n(gYe,"A",{href:!0});var zia=s(tte);iXr=r(zia,"TFRemBertForCausalLM"),zia.forEach(t),dXr=r(gYe," (RemBERT model)"),gYe.forEach(t),cXr=i(Ce),J0=n(Ce,"LI",{});var hYe=s(J0);iLe=n(hYe,"STRONG",{});var Qia=s(iLe);mXr=r(Qia,"roberta"),Qia.forEach(t),fXr=r(hYe," \u2014 "),ate=n(hYe,"A",{href:!0});var Wia=s(ate);gXr=r(Wia,"TFRobertaForCausalLM"),Wia.forEach(t),hXr=r(hYe," (RoBERTa model)"),hYe.forEach(t),uXr=i(Ce),Y0=n(Ce,"LI",{});var uYe=s(Y0);dLe=n(uYe,"STRONG",{});var Uia=s(dLe);pXr=r(Uia,"roformer"),Uia.forEach(t),_Xr=r(uYe," \u2014 "),nte=n(uYe,"A",{href:!0});var Hia=s(nte);bXr=r(Hia,"TFRoFormerForCausalLM"),Hia.forEach(t),vXr=r(uYe," (RoFormer model)"),uYe.forEach(t),FXr=i(Ce),Z0=n(Ce,"LI",{});var pYe=s(Z0);cLe=n(pYe,"STRONG",{});var Jia=s(cLe);TXr=r(Jia,"transfo-xl"),Jia.forEach(t),MXr=r(pYe," \u2014 "),ste=n(pYe,"A",{href:!0});var Yia=s(ste);EXr=r(Yia,"TFTransfoXLLMHeadModel"),Yia.forEach(t),CXr=r(pYe," (Transformer-XL model)"),pYe.forEach(t),wXr=i(Ce),K0=n(Ce,"LI",{});var _Ye=s(K0);mLe=n(_Ye,"STRONG",{});var Zia=s(mLe);AXr=r(Zia,"xglm"),Zia.forEach(t),LXr=r(_Ye," \u2014 "),lte=n(_Ye,"A",{href:!0});var Kia=s(lte);yXr=r(Kia,"TFXGLMForCausalLM"),Kia.forEach(t),xXr=r(_Ye," (XGLM model)"),_Ye.forEach(t),$Xr=i(Ce),ew=n(Ce,"LI",{});var bYe=s(ew);fLe=n(bYe,"STRONG",{});var eda=s(fLe);kXr=r(eda,"xlm"),eda.forEach(t),SXr=r(bYe," \u2014 "),ite=n(bYe,"A",{href:!0});var oda=s(ite);RXr=r(oda,"TFXLMWithLMHeadModel"),oda.forEach(t),PXr=r(bYe," (XLM model)"),bYe.forEach(t),BXr=i(Ce),ow=n(Ce,"LI",{});var vYe=s(ow);gLe=n(vYe,"STRONG",{});var rda=s(gLe);IXr=r(rda,"xlnet"),rda.forEach(t),NXr=r(vYe," \u2014 "),dte=n(vYe,"A",{href:!0});var tda=s(dte);qXr=r(tda,"TFXLNetLMHeadModel"),tda.forEach(t),jXr=r(vYe," (XLNet model)"),vYe.forEach(t),Ce.forEach(t),DXr=i(gi),T(rw.$$.fragment,gi),gi.forEach(t),fi.forEach(t),hto=i(m),im=n(m,"H2",{class:!0});var $no=s(im);tw=n($no,"A",{id:!0,class:!0,href:!0});var ada=s(tw);hLe=n(ada,"SPAN",{});var nda=s(hLe);T(JS.$$.fragment,nda),nda.forEach(t),ada.forEach(t),GXr=i($no),uLe=n($no,"SPAN",{});var sda=s(uLe);OXr=r(sda,"TFAutoModelForImageClassification"),sda.forEach(t),$no.forEach(t),uto=i(m),mr=n(m,"DIV",{class:!0});var hi=s(mr);T(YS.$$.fragment,hi),VXr=i(hi),dm=n(hi,"P",{});var _ce=s(dm);XXr=r(_ce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cte=n(_ce,"A",{href:!0});var lda=s(cte);zXr=r(lda,"from_pretrained()"),lda.forEach(t),QXr=r(_ce," class method or the "),mte=n(_ce,"A",{href:!0});var ida=s(mte);WXr=r(ida,"from_config()"),ida.forEach(t),UXr=r(_ce,` class
method.`),_ce.forEach(t),HXr=i(hi),ZS=n(hi,"P",{});var kno=s(ZS);JXr=r(kno,"This class cannot be instantiated directly using "),pLe=n(kno,"CODE",{});var dda=s(pLe);YXr=r(dda,"__init__()"),dda.forEach(t),ZXr=r(kno," (throws an error)."),kno.forEach(t),KXr=i(hi),Jt=n(hi,"DIV",{class:!0});var I9=s(Jt);T(KS.$$.fragment,I9),ezr=i(I9),_Le=n(I9,"P",{});var cda=s(_Le);ozr=r(cda,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cda.forEach(t),rzr=i(I9),cm=n(I9,"P",{});var bce=s(cm);tzr=r(bce,`Note:
Loading a model from its configuration file does `),bLe=n(bce,"STRONG",{});var mda=s(bLe);azr=r(mda,"not"),mda.forEach(t),nzr=r(bce,` load the model weights. It only affects the
model\u2019s configuration. Use `),fte=n(bce,"A",{href:!0});var fda=s(fte);szr=r(fda,"from_pretrained()"),fda.forEach(t),lzr=r(bce," to load the model weights."),bce.forEach(t),izr=i(I9),T(aw.$$.fragment,I9),I9.forEach(t),dzr=i(hi),Gr=n(hi,"DIV",{class:!0});var ui=s(Gr);T(eR.$$.fragment,ui),czr=i(ui),vLe=n(ui,"P",{});var gda=s(vLe);mzr=r(gda,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gda.forEach(t),fzr=i(ui),Rn=n(ui,"P",{});var N9=s(Rn);gzr=r(N9,"The model class to instantiate is selected based on the "),FLe=n(N9,"CODE",{});var hda=s(FLe);hzr=r(hda,"model_type"),hda.forEach(t),uzr=r(N9,` property of the config object (either
passed as an argument or loaded from `),TLe=n(N9,"CODE",{});var uda=s(TLe);pzr=r(uda,"pretrained_model_name_or_path"),uda.forEach(t),_zr=r(N9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MLe=n(N9,"CODE",{});var pda=s(MLe);bzr=r(pda,"pretrained_model_name_or_path"),pda.forEach(t),vzr=r(N9,":"),N9.forEach(t),Fzr=i(ui),ye=n(ui,"UL",{});var Ne=s(ye);nw=n(Ne,"LI",{});var FYe=s(nw);ELe=n(FYe,"STRONG",{});var _da=s(ELe);Tzr=r(_da,"convnext"),_da.forEach(t),Mzr=r(FYe," \u2014 "),gte=n(FYe,"A",{href:!0});var bda=s(gte);Ezr=r(bda,"TFConvNextForImageClassification"),bda.forEach(t),Czr=r(FYe," (ConvNeXT model)"),FYe.forEach(t),wzr=i(Ne),sw=n(Ne,"LI",{});var TYe=s(sw);CLe=n(TYe,"STRONG",{});var vda=s(CLe);Azr=r(vda,"cvt"),vda.forEach(t),Lzr=r(TYe," \u2014 "),hte=n(TYe,"A",{href:!0});var Fda=s(hte);yzr=r(Fda,"TFCvtForImageClassification"),Fda.forEach(t),xzr=r(TYe," (CvT model)"),TYe.forEach(t),$zr=i(Ne),lw=n(Ne,"LI",{});var MYe=s(lw);wLe=n(MYe,"STRONG",{});var Tda=s(wLe);kzr=r(Tda,"data2vec-vision"),Tda.forEach(t),Szr=r(MYe," \u2014 "),ute=n(MYe,"A",{href:!0});var Mda=s(ute);Rzr=r(Mda,"TFData2VecVisionForImageClassification"),Mda.forEach(t),Pzr=r(MYe," (Data2VecVision model)"),MYe.forEach(t),Bzr=i(Ne),Ll=n(Ne,"LI",{});var GI=s(Ll);ALe=n(GI,"STRONG",{});var Eda=s(ALe);Izr=r(Eda,"deit"),Eda.forEach(t),Nzr=r(GI," \u2014 "),pte=n(GI,"A",{href:!0});var Cda=s(pte);qzr=r(Cda,"TFDeiTForImageClassification"),Cda.forEach(t),jzr=r(GI," or "),_te=n(GI,"A",{href:!0});var wda=s(_te);Dzr=r(wda,"TFDeiTForImageClassificationWithTeacher"),wda.forEach(t),Gzr=r(GI," (DeiT model)"),GI.forEach(t),Ozr=i(Ne),iw=n(Ne,"LI",{});var EYe=s(iw);LLe=n(EYe,"STRONG",{});var Ada=s(LLe);Vzr=r(Ada,"mobilevit"),Ada.forEach(t),Xzr=r(EYe," \u2014 "),bte=n(EYe,"A",{href:!0});var Lda=s(bte);zzr=r(Lda,"TFMobileViTForImageClassification"),Lda.forEach(t),Qzr=r(EYe," (MobileViT model)"),EYe.forEach(t),Wzr=i(Ne),dw=n(Ne,"LI",{});var CYe=s(dw);yLe=n(CYe,"STRONG",{});var yda=s(yLe);Uzr=r(yda,"regnet"),yda.forEach(t),Hzr=r(CYe," \u2014 "),vte=n(CYe,"A",{href:!0});var xda=s(vte);Jzr=r(xda,"TFRegNetForImageClassification"),xda.forEach(t),Yzr=r(CYe," (RegNet model)"),CYe.forEach(t),Zzr=i(Ne),cw=n(Ne,"LI",{});var wYe=s(cw);xLe=n(wYe,"STRONG",{});var $da=s(xLe);Kzr=r($da,"resnet"),$da.forEach(t),eQr=r(wYe," \u2014 "),Fte=n(wYe,"A",{href:!0});var kda=s(Fte);oQr=r(kda,"TFResNetForImageClassification"),kda.forEach(t),rQr=r(wYe," (ResNet model)"),wYe.forEach(t),tQr=i(Ne),mw=n(Ne,"LI",{});var AYe=s(mw);$Le=n(AYe,"STRONG",{});var Sda=s($Le);aQr=r(Sda,"segformer"),Sda.forEach(t),nQr=r(AYe," \u2014 "),Tte=n(AYe,"A",{href:!0});var Rda=s(Tte);sQr=r(Rda,"TFSegformerForImageClassification"),Rda.forEach(t),lQr=r(AYe," (SegFormer model)"),AYe.forEach(t),iQr=i(Ne),fw=n(Ne,"LI",{});var LYe=s(fw);kLe=n(LYe,"STRONG",{});var Pda=s(kLe);dQr=r(Pda,"swin"),Pda.forEach(t),cQr=r(LYe," \u2014 "),Mte=n(LYe,"A",{href:!0});var Bda=s(Mte);mQr=r(Bda,"TFSwinForImageClassification"),Bda.forEach(t),fQr=r(LYe," (Swin Transformer model)"),LYe.forEach(t),gQr=i(Ne),gw=n(Ne,"LI",{});var yYe=s(gw);SLe=n(yYe,"STRONG",{});var Ida=s(SLe);hQr=r(Ida,"vit"),Ida.forEach(t),uQr=r(yYe," \u2014 "),Ete=n(yYe,"A",{href:!0});var Nda=s(Ete);pQr=r(Nda,"TFViTForImageClassification"),Nda.forEach(t),_Qr=r(yYe," (ViT model)"),yYe.forEach(t),Ne.forEach(t),bQr=i(ui),T(hw.$$.fragment,ui),ui.forEach(t),hi.forEach(t),pto=i(m),mm=n(m,"H2",{class:!0});var Sno=s(mm);uw=n(Sno,"A",{id:!0,class:!0,href:!0});var qda=s(uw);RLe=n(qda,"SPAN",{});var jda=s(RLe);T(oR.$$.fragment,jda),jda.forEach(t),qda.forEach(t),vQr=i(Sno),PLe=n(Sno,"SPAN",{});var Dda=s(PLe);FQr=r(Dda,"TFAutoModelForSemanticSegmentation"),Dda.forEach(t),Sno.forEach(t),_to=i(m),fr=n(m,"DIV",{class:!0});var pi=s(fr);T(rR.$$.fragment,pi),TQr=i(pi),fm=n(pi,"P",{});var vce=s(fm);MQr=r(vce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Cte=n(vce,"A",{href:!0});var Gda=s(Cte);EQr=r(Gda,"from_pretrained()"),Gda.forEach(t),CQr=r(vce," class method or the "),wte=n(vce,"A",{href:!0});var Oda=s(wte);wQr=r(Oda,"from_config()"),Oda.forEach(t),AQr=r(vce,` class
method.`),vce.forEach(t),LQr=i(pi),tR=n(pi,"P",{});var Rno=s(tR);yQr=r(Rno,"This class cannot be instantiated directly using "),BLe=n(Rno,"CODE",{});var Vda=s(BLe);xQr=r(Vda,"__init__()"),Vda.forEach(t),$Qr=r(Rno," (throws an error)."),Rno.forEach(t),kQr=i(pi),Yt=n(pi,"DIV",{class:!0});var q9=s(Yt);T(aR.$$.fragment,q9),SQr=i(q9),ILe=n(q9,"P",{});var Xda=s(ILe);RQr=r(Xda,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Xda.forEach(t),PQr=i(q9),gm=n(q9,"P",{});var Fce=s(gm);BQr=r(Fce,`Note:
Loading a model from its configuration file does `),NLe=n(Fce,"STRONG",{});var zda=s(NLe);IQr=r(zda,"not"),zda.forEach(t),NQr=r(Fce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ate=n(Fce,"A",{href:!0});var Qda=s(Ate);qQr=r(Qda,"from_pretrained()"),Qda.forEach(t),jQr=r(Fce," to load the model weights."),Fce.forEach(t),DQr=i(q9),T(pw.$$.fragment,q9),q9.forEach(t),GQr=i(pi),Or=n(pi,"DIV",{class:!0});var _i=s(Or);T(nR.$$.fragment,_i),OQr=i(_i),qLe=n(_i,"P",{});var Wda=s(qLe);VQr=r(Wda,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Wda.forEach(t),XQr=i(_i),Pn=n(_i,"P",{});var j9=s(Pn);zQr=r(j9,"The model class to instantiate is selected based on the "),jLe=n(j9,"CODE",{});var Uda=s(jLe);QQr=r(Uda,"model_type"),Uda.forEach(t),WQr=r(j9,` property of the config object (either
passed as an argument or loaded from `),DLe=n(j9,"CODE",{});var Hda=s(DLe);UQr=r(Hda,"pretrained_model_name_or_path"),Hda.forEach(t),HQr=r(j9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GLe=n(j9,"CODE",{});var Jda=s(GLe);JQr=r(Jda,"pretrained_model_name_or_path"),Jda.forEach(t),YQr=r(j9,":"),j9.forEach(t),ZQr=i(_i),hm=n(_i,"UL",{});var Tce=s(hm);_w=n(Tce,"LI",{});var xYe=s(_w);OLe=n(xYe,"STRONG",{});var Yda=s(OLe);KQr=r(Yda,"data2vec-vision"),Yda.forEach(t),eWr=r(xYe," \u2014 "),Lte=n(xYe,"A",{href:!0});var Zda=s(Lte);oWr=r(Zda,"TFData2VecVisionForSemanticSegmentation"),Zda.forEach(t),rWr=r(xYe," (Data2VecVision model)"),xYe.forEach(t),tWr=i(Tce),bw=n(Tce,"LI",{});var $Ye=s(bw);VLe=n($Ye,"STRONG",{});var Kda=s(VLe);aWr=r(Kda,"mobilevit"),Kda.forEach(t),nWr=r($Ye," \u2014 "),yte=n($Ye,"A",{href:!0});var eca=s(yte);sWr=r(eca,"TFMobileViTForSemanticSegmentation"),eca.forEach(t),lWr=r($Ye," (MobileViT model)"),$Ye.forEach(t),iWr=i(Tce),vw=n(Tce,"LI",{});var kYe=s(vw);XLe=n(kYe,"STRONG",{});var oca=s(XLe);dWr=r(oca,"segformer"),oca.forEach(t),cWr=r(kYe," \u2014 "),xte=n(kYe,"A",{href:!0});var rca=s(xte);mWr=r(rca,"TFSegformerForSemanticSegmentation"),rca.forEach(t),fWr=r(kYe," (SegFormer model)"),kYe.forEach(t),Tce.forEach(t),gWr=i(_i),T(Fw.$$.fragment,_i),_i.forEach(t),pi.forEach(t),bto=i(m),um=n(m,"H2",{class:!0});var Pno=s(um);Tw=n(Pno,"A",{id:!0,class:!0,href:!0});var tca=s(Tw);zLe=n(tca,"SPAN",{});var aca=s(zLe);T(sR.$$.fragment,aca),aca.forEach(t),tca.forEach(t),hWr=i(Pno),QLe=n(Pno,"SPAN",{});var nca=s(QLe);uWr=r(nca,"TFAutoModelForMaskedLM"),nca.forEach(t),Pno.forEach(t),vto=i(m),gr=n(m,"DIV",{class:!0});var bi=s(gr);T(lR.$$.fragment,bi),pWr=i(bi),pm=n(bi,"P",{});var Mce=s(pm);_Wr=r(Mce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$te=n(Mce,"A",{href:!0});var sca=s($te);bWr=r(sca,"from_pretrained()"),sca.forEach(t),vWr=r(Mce," class method or the "),kte=n(Mce,"A",{href:!0});var lca=s(kte);FWr=r(lca,"from_config()"),lca.forEach(t),TWr=r(Mce,` class
method.`),Mce.forEach(t),MWr=i(bi),iR=n(bi,"P",{});var Bno=s(iR);EWr=r(Bno,"This class cannot be instantiated directly using "),WLe=n(Bno,"CODE",{});var ica=s(WLe);CWr=r(ica,"__init__()"),ica.forEach(t),wWr=r(Bno," (throws an error)."),Bno.forEach(t),AWr=i(bi),Zt=n(bi,"DIV",{class:!0});var D9=s(Zt);T(dR.$$.fragment,D9),LWr=i(D9),ULe=n(D9,"P",{});var dca=s(ULe);yWr=r(dca,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),dca.forEach(t),xWr=i(D9),_m=n(D9,"P",{});var Ece=s(_m);$Wr=r(Ece,`Note:
Loading a model from its configuration file does `),HLe=n(Ece,"STRONG",{});var cca=s(HLe);kWr=r(cca,"not"),cca.forEach(t),SWr=r(Ece,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ste=n(Ece,"A",{href:!0});var mca=s(Ste);RWr=r(mca,"from_pretrained()"),mca.forEach(t),PWr=r(Ece," to load the model weights."),Ece.forEach(t),BWr=i(D9),T(Mw.$$.fragment,D9),D9.forEach(t),IWr=i(bi),Vr=n(bi,"DIV",{class:!0});var vi=s(Vr);T(cR.$$.fragment,vi),NWr=i(vi),JLe=n(vi,"P",{});var fca=s(JLe);qWr=r(fca,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),fca.forEach(t),jWr=i(vi),Bn=n(vi,"P",{});var G9=s(Bn);DWr=r(G9,"The model class to instantiate is selected based on the "),YLe=n(G9,"CODE",{});var gca=s(YLe);GWr=r(gca,"model_type"),gca.forEach(t),OWr=r(G9,` property of the config object (either
passed as an argument or loaded from `),ZLe=n(G9,"CODE",{});var hca=s(ZLe);VWr=r(hca,"pretrained_model_name_or_path"),hca.forEach(t),XWr=r(G9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KLe=n(G9,"CODE",{});var uca=s(KLe);zWr=r(uca,"pretrained_model_name_or_path"),uca.forEach(t),QWr=r(G9,":"),G9.forEach(t),WWr=i(vi),ge=n(vi,"UL",{});var _e=s(ge);Ew=n(_e,"LI",{});var SYe=s(Ew);e8e=n(SYe,"STRONG",{});var pca=s(e8e);UWr=r(pca,"albert"),pca.forEach(t),HWr=r(SYe," \u2014 "),Rte=n(SYe,"A",{href:!0});var _ca=s(Rte);JWr=r(_ca,"TFAlbertForMaskedLM"),_ca.forEach(t),YWr=r(SYe," (ALBERT model)"),SYe.forEach(t),ZWr=i(_e),Cw=n(_e,"LI",{});var RYe=s(Cw);o8e=n(RYe,"STRONG",{});var bca=s(o8e);KWr=r(bca,"bert"),bca.forEach(t),eUr=r(RYe," \u2014 "),Pte=n(RYe,"A",{href:!0});var vca=s(Pte);oUr=r(vca,"TFBertForMaskedLM"),vca.forEach(t),rUr=r(RYe," (BERT model)"),RYe.forEach(t),tUr=i(_e),ww=n(_e,"LI",{});var PYe=s(ww);r8e=n(PYe,"STRONG",{});var Fca=s(r8e);aUr=r(Fca,"camembert"),Fca.forEach(t),nUr=r(PYe," \u2014 "),Bte=n(PYe,"A",{href:!0});var Tca=s(Bte);sUr=r(Tca,"TFCamembertForMaskedLM"),Tca.forEach(t),lUr=r(PYe," (CamemBERT model)"),PYe.forEach(t),iUr=i(_e),Aw=n(_e,"LI",{});var BYe=s(Aw);t8e=n(BYe,"STRONG",{});var Mca=s(t8e);dUr=r(Mca,"convbert"),Mca.forEach(t),cUr=r(BYe," \u2014 "),Ite=n(BYe,"A",{href:!0});var Eca=s(Ite);mUr=r(Eca,"TFConvBertForMaskedLM"),Eca.forEach(t),fUr=r(BYe," (ConvBERT model)"),BYe.forEach(t),gUr=i(_e),Lw=n(_e,"LI",{});var IYe=s(Lw);a8e=n(IYe,"STRONG",{});var Cca=s(a8e);hUr=r(Cca,"deberta"),Cca.forEach(t),uUr=r(IYe," \u2014 "),Nte=n(IYe,"A",{href:!0});var wca=s(Nte);pUr=r(wca,"TFDebertaForMaskedLM"),wca.forEach(t),_Ur=r(IYe," (DeBERTa model)"),IYe.forEach(t),bUr=i(_e),yw=n(_e,"LI",{});var NYe=s(yw);n8e=n(NYe,"STRONG",{});var Aca=s(n8e);vUr=r(Aca,"deberta-v2"),Aca.forEach(t),FUr=r(NYe," \u2014 "),qte=n(NYe,"A",{href:!0});var Lca=s(qte);TUr=r(Lca,"TFDebertaV2ForMaskedLM"),Lca.forEach(t),MUr=r(NYe," (DeBERTa-v2 model)"),NYe.forEach(t),EUr=i(_e),xw=n(_e,"LI",{});var qYe=s(xw);s8e=n(qYe,"STRONG",{});var yca=s(s8e);CUr=r(yca,"distilbert"),yca.forEach(t),wUr=r(qYe," \u2014 "),jte=n(qYe,"A",{href:!0});var xca=s(jte);AUr=r(xca,"TFDistilBertForMaskedLM"),xca.forEach(t),LUr=r(qYe," (DistilBERT model)"),qYe.forEach(t),yUr=i(_e),$w=n(_e,"LI",{});var jYe=s($w);l8e=n(jYe,"STRONG",{});var $ca=s(l8e);xUr=r($ca,"electra"),$ca.forEach(t),$Ur=r(jYe," \u2014 "),Dte=n(jYe,"A",{href:!0});var kca=s(Dte);kUr=r(kca,"TFElectraForMaskedLM"),kca.forEach(t),SUr=r(jYe," (ELECTRA model)"),jYe.forEach(t),RUr=i(_e),kw=n(_e,"LI",{});var DYe=s(kw);i8e=n(DYe,"STRONG",{});var Sca=s(i8e);PUr=r(Sca,"flaubert"),Sca.forEach(t),BUr=r(DYe," \u2014 "),Gte=n(DYe,"A",{href:!0});var Rca=s(Gte);IUr=r(Rca,"TFFlaubertWithLMHeadModel"),Rca.forEach(t),NUr=r(DYe," (FlauBERT model)"),DYe.forEach(t),qUr=i(_e),Sw=n(_e,"LI",{});var GYe=s(Sw);d8e=n(GYe,"STRONG",{});var Pca=s(d8e);jUr=r(Pca,"funnel"),Pca.forEach(t),DUr=r(GYe," \u2014 "),Ote=n(GYe,"A",{href:!0});var Bca=s(Ote);GUr=r(Bca,"TFFunnelForMaskedLM"),Bca.forEach(t),OUr=r(GYe," (Funnel Transformer model)"),GYe.forEach(t),VUr=i(_e),Rw=n(_e,"LI",{});var OYe=s(Rw);c8e=n(OYe,"STRONG",{});var Ica=s(c8e);XUr=r(Ica,"layoutlm"),Ica.forEach(t),zUr=r(OYe," \u2014 "),Vte=n(OYe,"A",{href:!0});var Nca=s(Vte);QUr=r(Nca,"TFLayoutLMForMaskedLM"),Nca.forEach(t),WUr=r(OYe," (LayoutLM model)"),OYe.forEach(t),UUr=i(_e),Pw=n(_e,"LI",{});var VYe=s(Pw);m8e=n(VYe,"STRONG",{});var qca=s(m8e);HUr=r(qca,"longformer"),qca.forEach(t),JUr=r(VYe," \u2014 "),Xte=n(VYe,"A",{href:!0});var jca=s(Xte);YUr=r(jca,"TFLongformerForMaskedLM"),jca.forEach(t),ZUr=r(VYe," (Longformer model)"),VYe.forEach(t),KUr=i(_e),Bw=n(_e,"LI",{});var XYe=s(Bw);f8e=n(XYe,"STRONG",{});var Dca=s(f8e);eHr=r(Dca,"mobilebert"),Dca.forEach(t),oHr=r(XYe," \u2014 "),zte=n(XYe,"A",{href:!0});var Gca=s(zte);rHr=r(Gca,"TFMobileBertForMaskedLM"),Gca.forEach(t),tHr=r(XYe," (MobileBERT model)"),XYe.forEach(t),aHr=i(_e),Iw=n(_e,"LI",{});var zYe=s(Iw);g8e=n(zYe,"STRONG",{});var Oca=s(g8e);nHr=r(Oca,"mpnet"),Oca.forEach(t),sHr=r(zYe," \u2014 "),Qte=n(zYe,"A",{href:!0});var Vca=s(Qte);lHr=r(Vca,"TFMPNetForMaskedLM"),Vca.forEach(t),iHr=r(zYe," (MPNet model)"),zYe.forEach(t),dHr=i(_e),Nw=n(_e,"LI",{});var QYe=s(Nw);h8e=n(QYe,"STRONG",{});var Xca=s(h8e);cHr=r(Xca,"rembert"),Xca.forEach(t),mHr=r(QYe," \u2014 "),Wte=n(QYe,"A",{href:!0});var zca=s(Wte);fHr=r(zca,"TFRemBertForMaskedLM"),zca.forEach(t),gHr=r(QYe," (RemBERT model)"),QYe.forEach(t),hHr=i(_e),qw=n(_e,"LI",{});var WYe=s(qw);u8e=n(WYe,"STRONG",{});var Qca=s(u8e);uHr=r(Qca,"roberta"),Qca.forEach(t),pHr=r(WYe," \u2014 "),Ute=n(WYe,"A",{href:!0});var Wca=s(Ute);_Hr=r(Wca,"TFRobertaForMaskedLM"),Wca.forEach(t),bHr=r(WYe," (RoBERTa model)"),WYe.forEach(t),vHr=i(_e),jw=n(_e,"LI",{});var UYe=s(jw);p8e=n(UYe,"STRONG",{});var Uca=s(p8e);FHr=r(Uca,"roformer"),Uca.forEach(t),THr=r(UYe," \u2014 "),Hte=n(UYe,"A",{href:!0});var Hca=s(Hte);MHr=r(Hca,"TFRoFormerForMaskedLM"),Hca.forEach(t),EHr=r(UYe," (RoFormer model)"),UYe.forEach(t),CHr=i(_e),Dw=n(_e,"LI",{});var HYe=s(Dw);_8e=n(HYe,"STRONG",{});var Jca=s(_8e);wHr=r(Jca,"tapas"),Jca.forEach(t),AHr=r(HYe," \u2014 "),Jte=n(HYe,"A",{href:!0});var Yca=s(Jte);LHr=r(Yca,"TFTapasForMaskedLM"),Yca.forEach(t),yHr=r(HYe," (TAPAS model)"),HYe.forEach(t),xHr=i(_e),Gw=n(_e,"LI",{});var JYe=s(Gw);b8e=n(JYe,"STRONG",{});var Zca=s(b8e);$Hr=r(Zca,"xlm"),Zca.forEach(t),kHr=r(JYe," \u2014 "),Yte=n(JYe,"A",{href:!0});var Kca=s(Yte);SHr=r(Kca,"TFXLMWithLMHeadModel"),Kca.forEach(t),RHr=r(JYe," (XLM model)"),JYe.forEach(t),PHr=i(_e),Ow=n(_e,"LI",{});var YYe=s(Ow);v8e=n(YYe,"STRONG",{});var ema=s(v8e);BHr=r(ema,"xlm-roberta"),ema.forEach(t),IHr=r(YYe," \u2014 "),Zte=n(YYe,"A",{href:!0});var oma=s(Zte);NHr=r(oma,"TFXLMRobertaForMaskedLM"),oma.forEach(t),qHr=r(YYe," (XLM-RoBERTa model)"),YYe.forEach(t),_e.forEach(t),jHr=i(vi),T(Vw.$$.fragment,vi),vi.forEach(t),bi.forEach(t),Fto=i(m),bm=n(m,"H2",{class:!0});var Ino=s(bm);Xw=n(Ino,"A",{id:!0,class:!0,href:!0});var rma=s(Xw);F8e=n(rma,"SPAN",{});var tma=s(F8e);T(mR.$$.fragment,tma),tma.forEach(t),rma.forEach(t),DHr=i(Ino),T8e=n(Ino,"SPAN",{});var ama=s(T8e);GHr=r(ama,"TFAutoModelForSeq2SeqLM"),ama.forEach(t),Ino.forEach(t),Tto=i(m),hr=n(m,"DIV",{class:!0});var Fi=s(hr);T(fR.$$.fragment,Fi),OHr=i(Fi),vm=n(Fi,"P",{});var Cce=s(vm);VHr=r(Cce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Kte=n(Cce,"A",{href:!0});var nma=s(Kte);XHr=r(nma,"from_pretrained()"),nma.forEach(t),zHr=r(Cce," class method or the "),eae=n(Cce,"A",{href:!0});var sma=s(eae);QHr=r(sma,"from_config()"),sma.forEach(t),WHr=r(Cce,` class
method.`),Cce.forEach(t),UHr=i(Fi),gR=n(Fi,"P",{});var Nno=s(gR);HHr=r(Nno,"This class cannot be instantiated directly using "),M8e=n(Nno,"CODE",{});var lma=s(M8e);JHr=r(lma,"__init__()"),lma.forEach(t),YHr=r(Nno," (throws an error)."),Nno.forEach(t),ZHr=i(Fi),Kt=n(Fi,"DIV",{class:!0});var O9=s(Kt);T(hR.$$.fragment,O9),KHr=i(O9),E8e=n(O9,"P",{});var ima=s(E8e);eJr=r(ima,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ima.forEach(t),oJr=i(O9),Fm=n(O9,"P",{});var wce=s(Fm);rJr=r(wce,`Note:
Loading a model from its configuration file does `),C8e=n(wce,"STRONG",{});var dma=s(C8e);tJr=r(dma,"not"),dma.forEach(t),aJr=r(wce,` load the model weights. It only affects the
model\u2019s configuration. Use `),oae=n(wce,"A",{href:!0});var cma=s(oae);nJr=r(cma,"from_pretrained()"),cma.forEach(t),sJr=r(wce," to load the model weights."),wce.forEach(t),lJr=i(O9),T(zw.$$.fragment,O9),O9.forEach(t),iJr=i(Fi),Xr=n(Fi,"DIV",{class:!0});var Ti=s(Xr);T(uR.$$.fragment,Ti),dJr=i(Ti),w8e=n(Ti,"P",{});var mma=s(w8e);cJr=r(mma,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mma.forEach(t),mJr=i(Ti),In=n(Ti,"P",{});var V9=s(In);fJr=r(V9,"The model class to instantiate is selected based on the "),A8e=n(V9,"CODE",{});var fma=s(A8e);gJr=r(fma,"model_type"),fma.forEach(t),hJr=r(V9,` property of the config object (either
passed as an argument or loaded from `),L8e=n(V9,"CODE",{});var gma=s(L8e);uJr=r(gma,"pretrained_model_name_or_path"),gma.forEach(t),pJr=r(V9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y8e=n(V9,"CODE",{});var hma=s(y8e);_Jr=r(hma,"pretrained_model_name_or_path"),hma.forEach(t),bJr=r(V9,":"),V9.forEach(t),vJr=i(Ti),xe=n(Ti,"UL",{});var qe=s(xe);Qw=n(qe,"LI",{});var ZYe=s(Qw);x8e=n(ZYe,"STRONG",{});var uma=s(x8e);FJr=r(uma,"bart"),uma.forEach(t),TJr=r(ZYe," \u2014 "),rae=n(ZYe,"A",{href:!0});var pma=s(rae);MJr=r(pma,"TFBartForConditionalGeneration"),pma.forEach(t),EJr=r(ZYe," (BART model)"),ZYe.forEach(t),CJr=i(qe),Ww=n(qe,"LI",{});var KYe=s(Ww);$8e=n(KYe,"STRONG",{});var _ma=s($8e);wJr=r(_ma,"blenderbot"),_ma.forEach(t),AJr=r(KYe," \u2014 "),tae=n(KYe,"A",{href:!0});var bma=s(tae);LJr=r(bma,"TFBlenderbotForConditionalGeneration"),bma.forEach(t),yJr=r(KYe," (Blenderbot model)"),KYe.forEach(t),xJr=i(qe),Uw=n(qe,"LI",{});var eZe=s(Uw);k8e=n(eZe,"STRONG",{});var vma=s(k8e);$Jr=r(vma,"blenderbot-small"),vma.forEach(t),kJr=r(eZe," \u2014 "),aae=n(eZe,"A",{href:!0});var Fma=s(aae);SJr=r(Fma,"TFBlenderbotSmallForConditionalGeneration"),Fma.forEach(t),RJr=r(eZe," (BlenderbotSmall model)"),eZe.forEach(t),PJr=i(qe),Hw=n(qe,"LI",{});var oZe=s(Hw);S8e=n(oZe,"STRONG",{});var Tma=s(S8e);BJr=r(Tma,"encoder-decoder"),Tma.forEach(t),IJr=r(oZe," \u2014 "),nae=n(oZe,"A",{href:!0});var Mma=s(nae);NJr=r(Mma,"TFEncoderDecoderModel"),Mma.forEach(t),qJr=r(oZe," (Encoder decoder model)"),oZe.forEach(t),jJr=i(qe),Jw=n(qe,"LI",{});var rZe=s(Jw);R8e=n(rZe,"STRONG",{});var Ema=s(R8e);DJr=r(Ema,"led"),Ema.forEach(t),GJr=r(rZe," \u2014 "),sae=n(rZe,"A",{href:!0});var Cma=s(sae);OJr=r(Cma,"TFLEDForConditionalGeneration"),Cma.forEach(t),VJr=r(rZe," (LED model)"),rZe.forEach(t),XJr=i(qe),Yw=n(qe,"LI",{});var tZe=s(Yw);P8e=n(tZe,"STRONG",{});var wma=s(P8e);zJr=r(wma,"marian"),wma.forEach(t),QJr=r(tZe," \u2014 "),lae=n(tZe,"A",{href:!0});var Ama=s(lae);WJr=r(Ama,"TFMarianMTModel"),Ama.forEach(t),UJr=r(tZe," (Marian model)"),tZe.forEach(t),HJr=i(qe),Zw=n(qe,"LI",{});var aZe=s(Zw);B8e=n(aZe,"STRONG",{});var Lma=s(B8e);JJr=r(Lma,"mbart"),Lma.forEach(t),YJr=r(aZe," \u2014 "),iae=n(aZe,"A",{href:!0});var yma=s(iae);ZJr=r(yma,"TFMBartForConditionalGeneration"),yma.forEach(t),KJr=r(aZe," (mBART model)"),aZe.forEach(t),eYr=i(qe),Kw=n(qe,"LI",{});var nZe=s(Kw);I8e=n(nZe,"STRONG",{});var xma=s(I8e);oYr=r(xma,"mt5"),xma.forEach(t),rYr=r(nZe," \u2014 "),dae=n(nZe,"A",{href:!0});var $ma=s(dae);tYr=r($ma,"TFMT5ForConditionalGeneration"),$ma.forEach(t),aYr=r(nZe," (MT5 model)"),nZe.forEach(t),nYr=i(qe),eA=n(qe,"LI",{});var sZe=s(eA);N8e=n(sZe,"STRONG",{});var kma=s(N8e);sYr=r(kma,"pegasus"),kma.forEach(t),lYr=r(sZe," \u2014 "),cae=n(sZe,"A",{href:!0});var Sma=s(cae);iYr=r(Sma,"TFPegasusForConditionalGeneration"),Sma.forEach(t),dYr=r(sZe," (Pegasus model)"),sZe.forEach(t),cYr=i(qe),oA=n(qe,"LI",{});var lZe=s(oA);q8e=n(lZe,"STRONG",{});var Rma=s(q8e);mYr=r(Rma,"t5"),Rma.forEach(t),fYr=r(lZe," \u2014 "),mae=n(lZe,"A",{href:!0});var Pma=s(mae);gYr=r(Pma,"TFT5ForConditionalGeneration"),Pma.forEach(t),hYr=r(lZe," (T5 model)"),lZe.forEach(t),qe.forEach(t),uYr=i(Ti),T(rA.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),Mto=i(m),Tm=n(m,"H2",{class:!0});var qno=s(Tm);tA=n(qno,"A",{id:!0,class:!0,href:!0});var Bma=s(tA);j8e=n(Bma,"SPAN",{});var Ima=s(j8e);T(pR.$$.fragment,Ima),Ima.forEach(t),Bma.forEach(t),pYr=i(qno),D8e=n(qno,"SPAN",{});var Nma=s(D8e);_Yr=r(Nma,"TFAutoModelForSequenceClassification"),Nma.forEach(t),qno.forEach(t),Eto=i(m),ur=n(m,"DIV",{class:!0});var Mi=s(ur);T(_R.$$.fragment,Mi),bYr=i(Mi),Mm=n(Mi,"P",{});var Ace=s(Mm);vYr=r(Ace,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fae=n(Ace,"A",{href:!0});var qma=s(fae);FYr=r(qma,"from_pretrained()"),qma.forEach(t),TYr=r(Ace," class method or the "),gae=n(Ace,"A",{href:!0});var jma=s(gae);MYr=r(jma,"from_config()"),jma.forEach(t),EYr=r(Ace,` class
method.`),Ace.forEach(t),CYr=i(Mi),bR=n(Mi,"P",{});var jno=s(bR);wYr=r(jno,"This class cannot be instantiated directly using "),G8e=n(jno,"CODE",{});var Dma=s(G8e);AYr=r(Dma,"__init__()"),Dma.forEach(t),LYr=r(jno," (throws an error)."),jno.forEach(t),yYr=i(Mi),ea=n(Mi,"DIV",{class:!0});var X9=s(ea);T(vR.$$.fragment,X9),xYr=i(X9),O8e=n(X9,"P",{});var Gma=s(O8e);$Yr=r(Gma,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Gma.forEach(t),kYr=i(X9),Em=n(X9,"P",{});var Lce=s(Em);SYr=r(Lce,`Note:
Loading a model from its configuration file does `),V8e=n(Lce,"STRONG",{});var Oma=s(V8e);RYr=r(Oma,"not"),Oma.forEach(t),PYr=r(Lce,` load the model weights. It only affects the
model\u2019s configuration. Use `),hae=n(Lce,"A",{href:!0});var Vma=s(hae);BYr=r(Vma,"from_pretrained()"),Vma.forEach(t),IYr=r(Lce," to load the model weights."),Lce.forEach(t),NYr=i(X9),T(aA.$$.fragment,X9),X9.forEach(t),qYr=i(Mi),zr=n(Mi,"DIV",{class:!0});var Ei=s(zr);T(FR.$$.fragment,Ei),jYr=i(Ei),X8e=n(Ei,"P",{});var Xma=s(X8e);DYr=r(Xma,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Xma.forEach(t),GYr=i(Ei),Nn=n(Ei,"P",{});var z9=s(Nn);OYr=r(z9,"The model class to instantiate is selected based on the "),z8e=n(z9,"CODE",{});var zma=s(z8e);VYr=r(zma,"model_type"),zma.forEach(t),XYr=r(z9,` property of the config object (either
passed as an argument or loaded from `),Q8e=n(z9,"CODE",{});var Qma=s(Q8e);zYr=r(Qma,"pretrained_model_name_or_path"),Qma.forEach(t),QYr=r(z9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W8e=n(z9,"CODE",{});var Wma=s(W8e);WYr=r(Wma,"pretrained_model_name_or_path"),Wma.forEach(t),UYr=r(z9,":"),z9.forEach(t),HYr=i(Ei),re=n(Ei,"UL",{});var ae=s(re);nA=n(ae,"LI",{});var iZe=s(nA);U8e=n(iZe,"STRONG",{});var Uma=s(U8e);JYr=r(Uma,"albert"),Uma.forEach(t),YYr=r(iZe," \u2014 "),uae=n(iZe,"A",{href:!0});var Hma=s(uae);ZYr=r(Hma,"TFAlbertForSequenceClassification"),Hma.forEach(t),KYr=r(iZe," (ALBERT model)"),iZe.forEach(t),eZr=i(ae),sA=n(ae,"LI",{});var dZe=s(sA);H8e=n(dZe,"STRONG",{});var Jma=s(H8e);oZr=r(Jma,"bert"),Jma.forEach(t),rZr=r(dZe," \u2014 "),pae=n(dZe,"A",{href:!0});var Yma=s(pae);tZr=r(Yma,"TFBertForSequenceClassification"),Yma.forEach(t),aZr=r(dZe," (BERT model)"),dZe.forEach(t),nZr=i(ae),lA=n(ae,"LI",{});var cZe=s(lA);J8e=n(cZe,"STRONG",{});var Zma=s(J8e);sZr=r(Zma,"camembert"),Zma.forEach(t),lZr=r(cZe," \u2014 "),_ae=n(cZe,"A",{href:!0});var Kma=s(_ae);iZr=r(Kma,"TFCamembertForSequenceClassification"),Kma.forEach(t),dZr=r(cZe," (CamemBERT model)"),cZe.forEach(t),cZr=i(ae),iA=n(ae,"LI",{});var mZe=s(iA);Y8e=n(mZe,"STRONG",{});var efa=s(Y8e);mZr=r(efa,"convbert"),efa.forEach(t),fZr=r(mZe," \u2014 "),bae=n(mZe,"A",{href:!0});var ofa=s(bae);gZr=r(ofa,"TFConvBertForSequenceClassification"),ofa.forEach(t),hZr=r(mZe," (ConvBERT model)"),mZe.forEach(t),uZr=i(ae),dA=n(ae,"LI",{});var fZe=s(dA);Z8e=n(fZe,"STRONG",{});var rfa=s(Z8e);pZr=r(rfa,"ctrl"),rfa.forEach(t),_Zr=r(fZe," \u2014 "),vae=n(fZe,"A",{href:!0});var tfa=s(vae);bZr=r(tfa,"TFCTRLForSequenceClassification"),tfa.forEach(t),vZr=r(fZe," (CTRL model)"),fZe.forEach(t),FZr=i(ae),cA=n(ae,"LI",{});var gZe=s(cA);K8e=n(gZe,"STRONG",{});var afa=s(K8e);TZr=r(afa,"deberta"),afa.forEach(t),MZr=r(gZe," \u2014 "),Fae=n(gZe,"A",{href:!0});var nfa=s(Fae);EZr=r(nfa,"TFDebertaForSequenceClassification"),nfa.forEach(t),CZr=r(gZe," (DeBERTa model)"),gZe.forEach(t),wZr=i(ae),mA=n(ae,"LI",{});var hZe=s(mA);eye=n(hZe,"STRONG",{});var sfa=s(eye);AZr=r(sfa,"deberta-v2"),sfa.forEach(t),LZr=r(hZe," \u2014 "),Tae=n(hZe,"A",{href:!0});var lfa=s(Tae);yZr=r(lfa,"TFDebertaV2ForSequenceClassification"),lfa.forEach(t),xZr=r(hZe," (DeBERTa-v2 model)"),hZe.forEach(t),$Zr=i(ae),fA=n(ae,"LI",{});var uZe=s(fA);oye=n(uZe,"STRONG",{});var ifa=s(oye);kZr=r(ifa,"distilbert"),ifa.forEach(t),SZr=r(uZe," \u2014 "),Mae=n(uZe,"A",{href:!0});var dfa=s(Mae);RZr=r(dfa,"TFDistilBertForSequenceClassification"),dfa.forEach(t),PZr=r(uZe," (DistilBERT model)"),uZe.forEach(t),BZr=i(ae),gA=n(ae,"LI",{});var pZe=s(gA);rye=n(pZe,"STRONG",{});var cfa=s(rye);IZr=r(cfa,"electra"),cfa.forEach(t),NZr=r(pZe," \u2014 "),Eae=n(pZe,"A",{href:!0});var mfa=s(Eae);qZr=r(mfa,"TFElectraForSequenceClassification"),mfa.forEach(t),jZr=r(pZe," (ELECTRA model)"),pZe.forEach(t),DZr=i(ae),hA=n(ae,"LI",{});var _Ze=s(hA);tye=n(_Ze,"STRONG",{});var ffa=s(tye);GZr=r(ffa,"flaubert"),ffa.forEach(t),OZr=r(_Ze," \u2014 "),Cae=n(_Ze,"A",{href:!0});var gfa=s(Cae);VZr=r(gfa,"TFFlaubertForSequenceClassification"),gfa.forEach(t),XZr=r(_Ze," (FlauBERT model)"),_Ze.forEach(t),zZr=i(ae),uA=n(ae,"LI",{});var bZe=s(uA);aye=n(bZe,"STRONG",{});var hfa=s(aye);QZr=r(hfa,"funnel"),hfa.forEach(t),WZr=r(bZe," \u2014 "),wae=n(bZe,"A",{href:!0});var ufa=s(wae);UZr=r(ufa,"TFFunnelForSequenceClassification"),ufa.forEach(t),HZr=r(bZe," (Funnel Transformer model)"),bZe.forEach(t),JZr=i(ae),pA=n(ae,"LI",{});var vZe=s(pA);nye=n(vZe,"STRONG",{});var pfa=s(nye);YZr=r(pfa,"gpt2"),pfa.forEach(t),ZZr=r(vZe," \u2014 "),Aae=n(vZe,"A",{href:!0});var _fa=s(Aae);KZr=r(_fa,"TFGPT2ForSequenceClassification"),_fa.forEach(t),eKr=r(vZe," (OpenAI GPT-2 model)"),vZe.forEach(t),oKr=i(ae),_A=n(ae,"LI",{});var FZe=s(_A);sye=n(FZe,"STRONG",{});var bfa=s(sye);rKr=r(bfa,"gptj"),bfa.forEach(t),tKr=r(FZe," \u2014 "),Lae=n(FZe,"A",{href:!0});var vfa=s(Lae);aKr=r(vfa,"TFGPTJForSequenceClassification"),vfa.forEach(t),nKr=r(FZe," (GPT-J model)"),FZe.forEach(t),sKr=i(ae),bA=n(ae,"LI",{});var TZe=s(bA);lye=n(TZe,"STRONG",{});var Ffa=s(lye);lKr=r(Ffa,"layoutlm"),Ffa.forEach(t),iKr=r(TZe," \u2014 "),yae=n(TZe,"A",{href:!0});var Tfa=s(yae);dKr=r(Tfa,"TFLayoutLMForSequenceClassification"),Tfa.forEach(t),cKr=r(TZe," (LayoutLM model)"),TZe.forEach(t),mKr=i(ae),vA=n(ae,"LI",{});var MZe=s(vA);iye=n(MZe,"STRONG",{});var Mfa=s(iye);fKr=r(Mfa,"layoutlmv3"),Mfa.forEach(t),gKr=r(MZe," \u2014 "),xae=n(MZe,"A",{href:!0});var Efa=s(xae);hKr=r(Efa,"TFLayoutLMv3ForSequenceClassification"),Efa.forEach(t),uKr=r(MZe," (LayoutLMv3 model)"),MZe.forEach(t),pKr=i(ae),FA=n(ae,"LI",{});var EZe=s(FA);dye=n(EZe,"STRONG",{});var Cfa=s(dye);_Kr=r(Cfa,"longformer"),Cfa.forEach(t),bKr=r(EZe," \u2014 "),$ae=n(EZe,"A",{href:!0});var wfa=s($ae);vKr=r(wfa,"TFLongformerForSequenceClassification"),wfa.forEach(t),FKr=r(EZe," (Longformer model)"),EZe.forEach(t),TKr=i(ae),TA=n(ae,"LI",{});var CZe=s(TA);cye=n(CZe,"STRONG",{});var Afa=s(cye);MKr=r(Afa,"mobilebert"),Afa.forEach(t),EKr=r(CZe," \u2014 "),kae=n(CZe,"A",{href:!0});var Lfa=s(kae);CKr=r(Lfa,"TFMobileBertForSequenceClassification"),Lfa.forEach(t),wKr=r(CZe," (MobileBERT model)"),CZe.forEach(t),AKr=i(ae),MA=n(ae,"LI",{});var wZe=s(MA);mye=n(wZe,"STRONG",{});var yfa=s(mye);LKr=r(yfa,"mpnet"),yfa.forEach(t),yKr=r(wZe," \u2014 "),Sae=n(wZe,"A",{href:!0});var xfa=s(Sae);xKr=r(xfa,"TFMPNetForSequenceClassification"),xfa.forEach(t),$Kr=r(wZe," (MPNet model)"),wZe.forEach(t),kKr=i(ae),EA=n(ae,"LI",{});var AZe=s(EA);fye=n(AZe,"STRONG",{});var $fa=s(fye);SKr=r($fa,"openai-gpt"),$fa.forEach(t),RKr=r(AZe," \u2014 "),Rae=n(AZe,"A",{href:!0});var kfa=s(Rae);PKr=r(kfa,"TFOpenAIGPTForSequenceClassification"),kfa.forEach(t),BKr=r(AZe," (OpenAI GPT model)"),AZe.forEach(t),IKr=i(ae),CA=n(ae,"LI",{});var LZe=s(CA);gye=n(LZe,"STRONG",{});var Sfa=s(gye);NKr=r(Sfa,"rembert"),Sfa.forEach(t),qKr=r(LZe," \u2014 "),Pae=n(LZe,"A",{href:!0});var Rfa=s(Pae);jKr=r(Rfa,"TFRemBertForSequenceClassification"),Rfa.forEach(t),DKr=r(LZe," (RemBERT model)"),LZe.forEach(t),GKr=i(ae),wA=n(ae,"LI",{});var yZe=s(wA);hye=n(yZe,"STRONG",{});var Pfa=s(hye);OKr=r(Pfa,"roberta"),Pfa.forEach(t),VKr=r(yZe," \u2014 "),Bae=n(yZe,"A",{href:!0});var Bfa=s(Bae);XKr=r(Bfa,"TFRobertaForSequenceClassification"),Bfa.forEach(t),zKr=r(yZe," (RoBERTa model)"),yZe.forEach(t),QKr=i(ae),AA=n(ae,"LI",{});var xZe=s(AA);uye=n(xZe,"STRONG",{});var Ifa=s(uye);WKr=r(Ifa,"roformer"),Ifa.forEach(t),UKr=r(xZe," \u2014 "),Iae=n(xZe,"A",{href:!0});var Nfa=s(Iae);HKr=r(Nfa,"TFRoFormerForSequenceClassification"),Nfa.forEach(t),JKr=r(xZe," (RoFormer model)"),xZe.forEach(t),YKr=i(ae),LA=n(ae,"LI",{});var $Ze=s(LA);pye=n($Ze,"STRONG",{});var qfa=s(pye);ZKr=r(qfa,"tapas"),qfa.forEach(t),KKr=r($Ze," \u2014 "),Nae=n($Ze,"A",{href:!0});var jfa=s(Nae);eet=r(jfa,"TFTapasForSequenceClassification"),jfa.forEach(t),oet=r($Ze," (TAPAS model)"),$Ze.forEach(t),ret=i(ae),yA=n(ae,"LI",{});var kZe=s(yA);_ye=n(kZe,"STRONG",{});var Dfa=s(_ye);tet=r(Dfa,"transfo-xl"),Dfa.forEach(t),aet=r(kZe," \u2014 "),qae=n(kZe,"A",{href:!0});var Gfa=s(qae);net=r(Gfa,"TFTransfoXLForSequenceClassification"),Gfa.forEach(t),set=r(kZe," (Transformer-XL model)"),kZe.forEach(t),iet=i(ae),xA=n(ae,"LI",{});var SZe=s(xA);bye=n(SZe,"STRONG",{});var Ofa=s(bye);det=r(Ofa,"xlm"),Ofa.forEach(t),cet=r(SZe," \u2014 "),jae=n(SZe,"A",{href:!0});var Vfa=s(jae);met=r(Vfa,"TFXLMForSequenceClassification"),Vfa.forEach(t),fet=r(SZe," (XLM model)"),SZe.forEach(t),get=i(ae),$A=n(ae,"LI",{});var RZe=s($A);vye=n(RZe,"STRONG",{});var Xfa=s(vye);het=r(Xfa,"xlm-roberta"),Xfa.forEach(t),uet=r(RZe," \u2014 "),Dae=n(RZe,"A",{href:!0});var zfa=s(Dae);pet=r(zfa,"TFXLMRobertaForSequenceClassification"),zfa.forEach(t),_et=r(RZe," (XLM-RoBERTa model)"),RZe.forEach(t),bet=i(ae),kA=n(ae,"LI",{});var PZe=s(kA);Fye=n(PZe,"STRONG",{});var Qfa=s(Fye);vet=r(Qfa,"xlnet"),Qfa.forEach(t),Fet=r(PZe," \u2014 "),Gae=n(PZe,"A",{href:!0});var Wfa=s(Gae);Tet=r(Wfa,"TFXLNetForSequenceClassification"),Wfa.forEach(t),Met=r(PZe," (XLNet model)"),PZe.forEach(t),ae.forEach(t),Eet=i(Ei),T(SA.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),Cto=i(m),Cm=n(m,"H2",{class:!0});var Dno=s(Cm);RA=n(Dno,"A",{id:!0,class:!0,href:!0});var Ufa=s(RA);Tye=n(Ufa,"SPAN",{});var Hfa=s(Tye);T(TR.$$.fragment,Hfa),Hfa.forEach(t),Ufa.forEach(t),Cet=i(Dno),Mye=n(Dno,"SPAN",{});var Jfa=s(Mye);wet=r(Jfa,"TFAutoModelForMultipleChoice"),Jfa.forEach(t),Dno.forEach(t),wto=i(m),pr=n(m,"DIV",{class:!0});var Ci=s(pr);T(MR.$$.fragment,Ci),Aet=i(Ci),wm=n(Ci,"P",{});var yce=s(wm);Let=r(yce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Oae=n(yce,"A",{href:!0});var Yfa=s(Oae);yet=r(Yfa,"from_pretrained()"),Yfa.forEach(t),xet=r(yce," class method or the "),Vae=n(yce,"A",{href:!0});var Zfa=s(Vae);$et=r(Zfa,"from_config()"),Zfa.forEach(t),ket=r(yce,` class
method.`),yce.forEach(t),Set=i(Ci),ER=n(Ci,"P",{});var Gno=s(ER);Ret=r(Gno,"This class cannot be instantiated directly using "),Eye=n(Gno,"CODE",{});var Kfa=s(Eye);Pet=r(Kfa,"__init__()"),Kfa.forEach(t),Bet=r(Gno," (throws an error)."),Gno.forEach(t),Iet=i(Ci),oa=n(Ci,"DIV",{class:!0});var Q9=s(oa);T(CR.$$.fragment,Q9),Net=i(Q9),Cye=n(Q9,"P",{});var ega=s(Cye);qet=r(ega,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ega.forEach(t),jet=i(Q9),Am=n(Q9,"P",{});var xce=s(Am);Det=r(xce,`Note:
Loading a model from its configuration file does `),wye=n(xce,"STRONG",{});var oga=s(wye);Get=r(oga,"not"),oga.forEach(t),Oet=r(xce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xae=n(xce,"A",{href:!0});var rga=s(Xae);Vet=r(rga,"from_pretrained()"),rga.forEach(t),Xet=r(xce," to load the model weights."),xce.forEach(t),zet=i(Q9),T(PA.$$.fragment,Q9),Q9.forEach(t),Qet=i(Ci),Qr=n(Ci,"DIV",{class:!0});var wi=s(Qr);T(wR.$$.fragment,wi),Wet=i(wi),Aye=n(wi,"P",{});var tga=s(Aye);Uet=r(tga,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tga.forEach(t),Het=i(wi),qn=n(wi,"P",{});var W9=s(qn);Jet=r(W9,"The model class to instantiate is selected based on the "),Lye=n(W9,"CODE",{});var aga=s(Lye);Yet=r(aga,"model_type"),aga.forEach(t),Zet=r(W9,` property of the config object (either
passed as an argument or loaded from `),yye=n(W9,"CODE",{});var nga=s(yye);Ket=r(nga,"pretrained_model_name_or_path"),nga.forEach(t),eot=r(W9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xye=n(W9,"CODE",{});var sga=s(xye);oot=r(sga,"pretrained_model_name_or_path"),sga.forEach(t),rot=r(W9,":"),W9.forEach(t),tot=i(wi),ve=n(wi,"UL",{});var Te=s(ve);BA=n(Te,"LI",{});var BZe=s(BA);$ye=n(BZe,"STRONG",{});var lga=s($ye);aot=r(lga,"albert"),lga.forEach(t),not=r(BZe," \u2014 "),zae=n(BZe,"A",{href:!0});var iga=s(zae);sot=r(iga,"TFAlbertForMultipleChoice"),iga.forEach(t),lot=r(BZe," (ALBERT model)"),BZe.forEach(t),iot=i(Te),IA=n(Te,"LI",{});var IZe=s(IA);kye=n(IZe,"STRONG",{});var dga=s(kye);dot=r(dga,"bert"),dga.forEach(t),cot=r(IZe," \u2014 "),Qae=n(IZe,"A",{href:!0});var cga=s(Qae);mot=r(cga,"TFBertForMultipleChoice"),cga.forEach(t),fot=r(IZe," (BERT model)"),IZe.forEach(t),got=i(Te),NA=n(Te,"LI",{});var NZe=s(NA);Sye=n(NZe,"STRONG",{});var mga=s(Sye);hot=r(mga,"camembert"),mga.forEach(t),uot=r(NZe," \u2014 "),Wae=n(NZe,"A",{href:!0});var fga=s(Wae);pot=r(fga,"TFCamembertForMultipleChoice"),fga.forEach(t),_ot=r(NZe," (CamemBERT model)"),NZe.forEach(t),bot=i(Te),qA=n(Te,"LI",{});var qZe=s(qA);Rye=n(qZe,"STRONG",{});var gga=s(Rye);vot=r(gga,"convbert"),gga.forEach(t),Fot=r(qZe," \u2014 "),Uae=n(qZe,"A",{href:!0});var hga=s(Uae);Tot=r(hga,"TFConvBertForMultipleChoice"),hga.forEach(t),Mot=r(qZe," (ConvBERT model)"),qZe.forEach(t),Eot=i(Te),jA=n(Te,"LI",{});var jZe=s(jA);Pye=n(jZe,"STRONG",{});var uga=s(Pye);Cot=r(uga,"distilbert"),uga.forEach(t),wot=r(jZe," \u2014 "),Hae=n(jZe,"A",{href:!0});var pga=s(Hae);Aot=r(pga,"TFDistilBertForMultipleChoice"),pga.forEach(t),Lot=r(jZe," (DistilBERT model)"),jZe.forEach(t),yot=i(Te),DA=n(Te,"LI",{});var DZe=s(DA);Bye=n(DZe,"STRONG",{});var _ga=s(Bye);xot=r(_ga,"electra"),_ga.forEach(t),$ot=r(DZe," \u2014 "),Jae=n(DZe,"A",{href:!0});var bga=s(Jae);kot=r(bga,"TFElectraForMultipleChoice"),bga.forEach(t),Sot=r(DZe," (ELECTRA model)"),DZe.forEach(t),Rot=i(Te),GA=n(Te,"LI",{});var GZe=s(GA);Iye=n(GZe,"STRONG",{});var vga=s(Iye);Pot=r(vga,"flaubert"),vga.forEach(t),Bot=r(GZe," \u2014 "),Yae=n(GZe,"A",{href:!0});var Fga=s(Yae);Iot=r(Fga,"TFFlaubertForMultipleChoice"),Fga.forEach(t),Not=r(GZe," (FlauBERT model)"),GZe.forEach(t),qot=i(Te),OA=n(Te,"LI",{});var OZe=s(OA);Nye=n(OZe,"STRONG",{});var Tga=s(Nye);jot=r(Tga,"funnel"),Tga.forEach(t),Dot=r(OZe," \u2014 "),Zae=n(OZe,"A",{href:!0});var Mga=s(Zae);Got=r(Mga,"TFFunnelForMultipleChoice"),Mga.forEach(t),Oot=r(OZe," (Funnel Transformer model)"),OZe.forEach(t),Vot=i(Te),VA=n(Te,"LI",{});var VZe=s(VA);qye=n(VZe,"STRONG",{});var Ega=s(qye);Xot=r(Ega,"longformer"),Ega.forEach(t),zot=r(VZe," \u2014 "),Kae=n(VZe,"A",{href:!0});var Cga=s(Kae);Qot=r(Cga,"TFLongformerForMultipleChoice"),Cga.forEach(t),Wot=r(VZe," (Longformer model)"),VZe.forEach(t),Uot=i(Te),XA=n(Te,"LI",{});var XZe=s(XA);jye=n(XZe,"STRONG",{});var wga=s(jye);Hot=r(wga,"mobilebert"),wga.forEach(t),Jot=r(XZe," \u2014 "),ene=n(XZe,"A",{href:!0});var Aga=s(ene);Yot=r(Aga,"TFMobileBertForMultipleChoice"),Aga.forEach(t),Zot=r(XZe," (MobileBERT model)"),XZe.forEach(t),Kot=i(Te),zA=n(Te,"LI",{});var zZe=s(zA);Dye=n(zZe,"STRONG",{});var Lga=s(Dye);ert=r(Lga,"mpnet"),Lga.forEach(t),ort=r(zZe," \u2014 "),one=n(zZe,"A",{href:!0});var yga=s(one);rrt=r(yga,"TFMPNetForMultipleChoice"),yga.forEach(t),trt=r(zZe," (MPNet model)"),zZe.forEach(t),art=i(Te),QA=n(Te,"LI",{});var QZe=s(QA);Gye=n(QZe,"STRONG",{});var xga=s(Gye);nrt=r(xga,"rembert"),xga.forEach(t),srt=r(QZe," \u2014 "),rne=n(QZe,"A",{href:!0});var $ga=s(rne);lrt=r($ga,"TFRemBertForMultipleChoice"),$ga.forEach(t),irt=r(QZe," (RemBERT model)"),QZe.forEach(t),drt=i(Te),WA=n(Te,"LI",{});var WZe=s(WA);Oye=n(WZe,"STRONG",{});var kga=s(Oye);crt=r(kga,"roberta"),kga.forEach(t),mrt=r(WZe," \u2014 "),tne=n(WZe,"A",{href:!0});var Sga=s(tne);frt=r(Sga,"TFRobertaForMultipleChoice"),Sga.forEach(t),grt=r(WZe," (RoBERTa model)"),WZe.forEach(t),hrt=i(Te),UA=n(Te,"LI",{});var UZe=s(UA);Vye=n(UZe,"STRONG",{});var Rga=s(Vye);urt=r(Rga,"roformer"),Rga.forEach(t),prt=r(UZe," \u2014 "),ane=n(UZe,"A",{href:!0});var Pga=s(ane);_rt=r(Pga,"TFRoFormerForMultipleChoice"),Pga.forEach(t),brt=r(UZe," (RoFormer model)"),UZe.forEach(t),vrt=i(Te),HA=n(Te,"LI",{});var HZe=s(HA);Xye=n(HZe,"STRONG",{});var Bga=s(Xye);Frt=r(Bga,"xlm"),Bga.forEach(t),Trt=r(HZe," \u2014 "),nne=n(HZe,"A",{href:!0});var Iga=s(nne);Mrt=r(Iga,"TFXLMForMultipleChoice"),Iga.forEach(t),Ert=r(HZe," (XLM model)"),HZe.forEach(t),Crt=i(Te),JA=n(Te,"LI",{});var JZe=s(JA);zye=n(JZe,"STRONG",{});var Nga=s(zye);wrt=r(Nga,"xlm-roberta"),Nga.forEach(t),Art=r(JZe," \u2014 "),sne=n(JZe,"A",{href:!0});var qga=s(sne);Lrt=r(qga,"TFXLMRobertaForMultipleChoice"),qga.forEach(t),yrt=r(JZe," (XLM-RoBERTa model)"),JZe.forEach(t),xrt=i(Te),YA=n(Te,"LI",{});var YZe=s(YA);Qye=n(YZe,"STRONG",{});var jga=s(Qye);$rt=r(jga,"xlnet"),jga.forEach(t),krt=r(YZe," \u2014 "),lne=n(YZe,"A",{href:!0});var Dga=s(lne);Srt=r(Dga,"TFXLNetForMultipleChoice"),Dga.forEach(t),Rrt=r(YZe," (XLNet model)"),YZe.forEach(t),Te.forEach(t),Prt=i(wi),T(ZA.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),Ato=i(m),Lm=n(m,"H2",{class:!0});var Ono=s(Lm);KA=n(Ono,"A",{id:!0,class:!0,href:!0});var Gga=s(KA);Wye=n(Gga,"SPAN",{});var Oga=s(Wye);T(AR.$$.fragment,Oga),Oga.forEach(t),Gga.forEach(t),Brt=i(Ono),Uye=n(Ono,"SPAN",{});var Vga=s(Uye);Irt=r(Vga,"TFAutoModelForNextSentencePrediction"),Vga.forEach(t),Ono.forEach(t),Lto=i(m),_r=n(m,"DIV",{class:!0});var Ai=s(_r);T(LR.$$.fragment,Ai),Nrt=i(Ai),ym=n(Ai,"P",{});var $ce=s(ym);qrt=r($ce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ine=n($ce,"A",{href:!0});var Xga=s(ine);jrt=r(Xga,"from_pretrained()"),Xga.forEach(t),Drt=r($ce," class method or the "),dne=n($ce,"A",{href:!0});var zga=s(dne);Grt=r(zga,"from_config()"),zga.forEach(t),Ort=r($ce,` class
method.`),$ce.forEach(t),Vrt=i(Ai),yR=n(Ai,"P",{});var Vno=s(yR);Xrt=r(Vno,"This class cannot be instantiated directly using "),Hye=n(Vno,"CODE",{});var Qga=s(Hye);zrt=r(Qga,"__init__()"),Qga.forEach(t),Qrt=r(Vno," (throws an error)."),Vno.forEach(t),Wrt=i(Ai),ra=n(Ai,"DIV",{class:!0});var U9=s(ra);T(xR.$$.fragment,U9),Urt=i(U9),Jye=n(U9,"P",{});var Wga=s(Jye);Hrt=r(Wga,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Wga.forEach(t),Jrt=i(U9),xm=n(U9,"P",{});var kce=s(xm);Yrt=r(kce,`Note:
Loading a model from its configuration file does `),Yye=n(kce,"STRONG",{});var Uga=s(Yye);Zrt=r(Uga,"not"),Uga.forEach(t),Krt=r(kce,` load the model weights. It only affects the
model\u2019s configuration. Use `),cne=n(kce,"A",{href:!0});var Hga=s(cne);ett=r(Hga,"from_pretrained()"),Hga.forEach(t),ott=r(kce," to load the model weights."),kce.forEach(t),rtt=i(U9),T(e6.$$.fragment,U9),U9.forEach(t),ttt=i(Ai),Wr=n(Ai,"DIV",{class:!0});var Li=s(Wr);T($R.$$.fragment,Li),att=i(Li),Zye=n(Li,"P",{});var Jga=s(Zye);ntt=r(Jga,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Jga.forEach(t),stt=i(Li),jn=n(Li,"P",{});var H9=s(jn);ltt=r(H9,"The model class to instantiate is selected based on the "),Kye=n(H9,"CODE",{});var Yga=s(Kye);itt=r(Yga,"model_type"),Yga.forEach(t),dtt=r(H9,` property of the config object (either
passed as an argument or loaded from `),e9e=n(H9,"CODE",{});var Zga=s(e9e);ctt=r(Zga,"pretrained_model_name_or_path"),Zga.forEach(t),mtt=r(H9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o9e=n(H9,"CODE",{});var Kga=s(o9e);ftt=r(Kga,"pretrained_model_name_or_path"),Kga.forEach(t),gtt=r(H9,":"),H9.forEach(t),htt=i(Li),kR=n(Li,"UL",{});var Xno=s(kR);o6=n(Xno,"LI",{});var ZZe=s(o6);r9e=n(ZZe,"STRONG",{});var eha=s(r9e);utt=r(eha,"bert"),eha.forEach(t),ptt=r(ZZe," \u2014 "),mne=n(ZZe,"A",{href:!0});var oha=s(mne);_tt=r(oha,"TFBertForNextSentencePrediction"),oha.forEach(t),btt=r(ZZe," (BERT model)"),ZZe.forEach(t),vtt=i(Xno),r6=n(Xno,"LI",{});var KZe=s(r6);t9e=n(KZe,"STRONG",{});var rha=s(t9e);Ftt=r(rha,"mobilebert"),rha.forEach(t),Ttt=r(KZe," \u2014 "),fne=n(KZe,"A",{href:!0});var tha=s(fne);Mtt=r(tha,"TFMobileBertForNextSentencePrediction"),tha.forEach(t),Ett=r(KZe," (MobileBERT model)"),KZe.forEach(t),Xno.forEach(t),Ctt=i(Li),T(t6.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),yto=i(m),$m=n(m,"H2",{class:!0});var zno=s($m);a6=n(zno,"A",{id:!0,class:!0,href:!0});var aha=s(a6);a9e=n(aha,"SPAN",{});var nha=s(a9e);T(SR.$$.fragment,nha),nha.forEach(t),aha.forEach(t),wtt=i(zno),n9e=n(zno,"SPAN",{});var sha=s(n9e);Att=r(sha,"TFAutoModelForTableQuestionAnswering"),sha.forEach(t),zno.forEach(t),xto=i(m),br=n(m,"DIV",{class:!0});var yi=s(br);T(RR.$$.fragment,yi),Ltt=i(yi),km=n(yi,"P",{});var Sce=s(km);ytt=r(Sce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gne=n(Sce,"A",{href:!0});var lha=s(gne);xtt=r(lha,"from_pretrained()"),lha.forEach(t),$tt=r(Sce," class method or the "),hne=n(Sce,"A",{href:!0});var iha=s(hne);ktt=r(iha,"from_config()"),iha.forEach(t),Stt=r(Sce,` class
method.`),Sce.forEach(t),Rtt=i(yi),PR=n(yi,"P",{});var Qno=s(PR);Ptt=r(Qno,"This class cannot be instantiated directly using "),s9e=n(Qno,"CODE",{});var dha=s(s9e);Btt=r(dha,"__init__()"),dha.forEach(t),Itt=r(Qno," (throws an error)."),Qno.forEach(t),Ntt=i(yi),ta=n(yi,"DIV",{class:!0});var J9=s(ta);T(BR.$$.fragment,J9),qtt=i(J9),l9e=n(J9,"P",{});var cha=s(l9e);jtt=r(cha,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),cha.forEach(t),Dtt=i(J9),Sm=n(J9,"P",{});var Rce=s(Sm);Gtt=r(Rce,`Note:
Loading a model from its configuration file does `),i9e=n(Rce,"STRONG",{});var mha=s(i9e);Ott=r(mha,"not"),mha.forEach(t),Vtt=r(Rce,` load the model weights. It only affects the
model\u2019s configuration. Use `),une=n(Rce,"A",{href:!0});var fha=s(une);Xtt=r(fha,"from_pretrained()"),fha.forEach(t),ztt=r(Rce," to load the model weights."),Rce.forEach(t),Qtt=i(J9),T(n6.$$.fragment,J9),J9.forEach(t),Wtt=i(yi),Ur=n(yi,"DIV",{class:!0});var xi=s(Ur);T(IR.$$.fragment,xi),Utt=i(xi),d9e=n(xi,"P",{});var gha=s(d9e);Htt=r(gha,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),gha.forEach(t),Jtt=i(xi),Dn=n(xi,"P",{});var Y9=s(Dn);Ytt=r(Y9,"The model class to instantiate is selected based on the "),c9e=n(Y9,"CODE",{});var hha=s(c9e);Ztt=r(hha,"model_type"),hha.forEach(t),Ktt=r(Y9,` property of the config object (either
passed as an argument or loaded from `),m9e=n(Y9,"CODE",{});var uha=s(m9e);eat=r(uha,"pretrained_model_name_or_path"),uha.forEach(t),oat=r(Y9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f9e=n(Y9,"CODE",{});var pha=s(f9e);rat=r(pha,"pretrained_model_name_or_path"),pha.forEach(t),tat=r(Y9,":"),Y9.forEach(t),aat=i(xi),g9e=n(xi,"UL",{});var _ha=s(g9e);s6=n(_ha,"LI",{});var eKe=s(s6);h9e=n(eKe,"STRONG",{});var bha=s(h9e);nat=r(bha,"tapas"),bha.forEach(t),sat=r(eKe," \u2014 "),pne=n(eKe,"A",{href:!0});var vha=s(pne);lat=r(vha,"TFTapasForQuestionAnswering"),vha.forEach(t),iat=r(eKe," (TAPAS model)"),eKe.forEach(t),_ha.forEach(t),dat=i(xi),T(l6.$$.fragment,xi),xi.forEach(t),yi.forEach(t),$to=i(m),Rm=n(m,"H2",{class:!0});var Wno=s(Rm);i6=n(Wno,"A",{id:!0,class:!0,href:!0});var Fha=s(i6);u9e=n(Fha,"SPAN",{});var Tha=s(u9e);T(NR.$$.fragment,Tha),Tha.forEach(t),Fha.forEach(t),cat=i(Wno),p9e=n(Wno,"SPAN",{});var Mha=s(p9e);mat=r(Mha,"TFAutoModelForDocumentQuestionAnswering"),Mha.forEach(t),Wno.forEach(t),kto=i(m),vr=n(m,"DIV",{class:!0});var $i=s(vr);T(qR.$$.fragment,$i),fat=i($i),Pm=n($i,"P",{});var Pce=s(Pm);gat=r(Pce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),_ne=n(Pce,"A",{href:!0});var Eha=s(_ne);hat=r(Eha,"from_pretrained()"),Eha.forEach(t),uat=r(Pce," class method or the "),bne=n(Pce,"A",{href:!0});var Cha=s(bne);pat=r(Cha,"from_config()"),Cha.forEach(t),_at=r(Pce,` class
method.`),Pce.forEach(t),bat=i($i),jR=n($i,"P",{});var Uno=s(jR);vat=r(Uno,"This class cannot be instantiated directly using "),_9e=n(Uno,"CODE",{});var wha=s(_9e);Fat=r(wha,"__init__()"),wha.forEach(t),Tat=r(Uno," (throws an error)."),Uno.forEach(t),Mat=i($i),aa=n($i,"DIV",{class:!0});var Z9=s(aa);T(DR.$$.fragment,Z9),Eat=i(Z9),b9e=n(Z9,"P",{});var Aha=s(b9e);Cat=r(Aha,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),Aha.forEach(t),wat=i(Z9),Bm=n(Z9,"P",{});var Bce=s(Bm);Aat=r(Bce,`Note:
Loading a model from its configuration file does `),v9e=n(Bce,"STRONG",{});var Lha=s(v9e);Lat=r(Lha,"not"),Lha.forEach(t),yat=r(Bce,` load the model weights. It only affects the
model\u2019s configuration. Use `),vne=n(Bce,"A",{href:!0});var yha=s(vne);xat=r(yha,"from_pretrained()"),yha.forEach(t),$at=r(Bce," to load the model weights."),Bce.forEach(t),kat=i(Z9),T(d6.$$.fragment,Z9),Z9.forEach(t),Sat=i($i),Hr=n($i,"DIV",{class:!0});var ki=s(Hr);T(GR.$$.fragment,ki),Rat=i(ki),F9e=n(ki,"P",{});var xha=s(F9e);Pat=r(xha,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),xha.forEach(t),Bat=i(ki),Gn=n(ki,"P",{});var K9=s(Gn);Iat=r(K9,"The model class to instantiate is selected based on the "),T9e=n(K9,"CODE",{});var $ha=s(T9e);Nat=r($ha,"model_type"),$ha.forEach(t),qat=r(K9,` property of the config object (either
passed as an argument or loaded from `),M9e=n(K9,"CODE",{});var kha=s(M9e);jat=r(kha,"pretrained_model_name_or_path"),kha.forEach(t),Dat=r(K9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E9e=n(K9,"CODE",{});var Sha=s(E9e);Gat=r(Sha,"pretrained_model_name_or_path"),Sha.forEach(t),Oat=r(K9,":"),K9.forEach(t),Vat=i(ki),C9e=n(ki,"UL",{});var Rha=s(C9e);c6=n(Rha,"LI",{});var oKe=s(c6);w9e=n(oKe,"STRONG",{});var Pha=s(w9e);Xat=r(Pha,"layoutlm"),Pha.forEach(t),zat=r(oKe," \u2014 "),Fne=n(oKe,"A",{href:!0});var Bha=s(Fne);Qat=r(Bha,"TFLayoutLMForQuestionAnswering"),Bha.forEach(t),Wat=r(oKe," (LayoutLM model)"),oKe.forEach(t),Rha.forEach(t),Uat=i(ki),T(m6.$$.fragment,ki),ki.forEach(t),$i.forEach(t),Sto=i(m),Im=n(m,"H2",{class:!0});var Hno=s(Im);f6=n(Hno,"A",{id:!0,class:!0,href:!0});var Iha=s(f6);A9e=n(Iha,"SPAN",{});var Nha=s(A9e);T(OR.$$.fragment,Nha),Nha.forEach(t),Iha.forEach(t),Hat=i(Hno),L9e=n(Hno,"SPAN",{});var qha=s(L9e);Jat=r(qha,"TFAutoModelForTokenClassification"),qha.forEach(t),Hno.forEach(t),Rto=i(m),Fr=n(m,"DIV",{class:!0});var Si=s(Fr);T(VR.$$.fragment,Si),Yat=i(Si),Nm=n(Si,"P",{});var Ice=s(Nm);Zat=r(Ice,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Tne=n(Ice,"A",{href:!0});var jha=s(Tne);Kat=r(jha,"from_pretrained()"),jha.forEach(t),ent=r(Ice," class method or the "),Mne=n(Ice,"A",{href:!0});var Dha=s(Mne);ont=r(Dha,"from_config()"),Dha.forEach(t),rnt=r(Ice,` class
method.`),Ice.forEach(t),tnt=i(Si),XR=n(Si,"P",{});var Jno=s(XR);ant=r(Jno,"This class cannot be instantiated directly using "),y9e=n(Jno,"CODE",{});var Gha=s(y9e);nnt=r(Gha,"__init__()"),Gha.forEach(t),snt=r(Jno," (throws an error)."),Jno.forEach(t),lnt=i(Si),na=n(Si,"DIV",{class:!0});var ex=s(na);T(zR.$$.fragment,ex),int=i(ex),x9e=n(ex,"P",{});var Oha=s(x9e);dnt=r(Oha,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Oha.forEach(t),cnt=i(ex),qm=n(ex,"P",{});var Nce=s(qm);mnt=r(Nce,`Note:
Loading a model from its configuration file does `),$9e=n(Nce,"STRONG",{});var Vha=s($9e);fnt=r(Vha,"not"),Vha.forEach(t),gnt=r(Nce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ene=n(Nce,"A",{href:!0});var Xha=s(Ene);hnt=r(Xha,"from_pretrained()"),Xha.forEach(t),unt=r(Nce," to load the model weights."),Nce.forEach(t),pnt=i(ex),T(g6.$$.fragment,ex),ex.forEach(t),_nt=i(Si),Jr=n(Si,"DIV",{class:!0});var Ri=s(Jr);T(QR.$$.fragment,Ri),bnt=i(Ri),k9e=n(Ri,"P",{});var zha=s(k9e);vnt=r(zha,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zha.forEach(t),Fnt=i(Ri),On=n(Ri,"P",{});var ox=s(On);Tnt=r(ox,"The model class to instantiate is selected based on the "),S9e=n(ox,"CODE",{});var Qha=s(S9e);Mnt=r(Qha,"model_type"),Qha.forEach(t),Ent=r(ox,` property of the config object (either
passed as an argument or loaded from `),R9e=n(ox,"CODE",{});var Wha=s(R9e);Cnt=r(Wha,"pretrained_model_name_or_path"),Wha.forEach(t),wnt=r(ox,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P9e=n(ox,"CODE",{});var Uha=s(P9e);Ant=r(Uha,"pretrained_model_name_or_path"),Uha.forEach(t),Lnt=r(ox,":"),ox.forEach(t),ynt=i(Ri),ce=n(Ri,"UL",{});var he=s(ce);h6=n(he,"LI",{});var rKe=s(h6);B9e=n(rKe,"STRONG",{});var Hha=s(B9e);xnt=r(Hha,"albert"),Hha.forEach(t),$nt=r(rKe," \u2014 "),Cne=n(rKe,"A",{href:!0});var Jha=s(Cne);knt=r(Jha,"TFAlbertForTokenClassification"),Jha.forEach(t),Snt=r(rKe," (ALBERT model)"),rKe.forEach(t),Rnt=i(he),u6=n(he,"LI",{});var tKe=s(u6);I9e=n(tKe,"STRONG",{});var Yha=s(I9e);Pnt=r(Yha,"bert"),Yha.forEach(t),Bnt=r(tKe," \u2014 "),wne=n(tKe,"A",{href:!0});var Zha=s(wne);Int=r(Zha,"TFBertForTokenClassification"),Zha.forEach(t),Nnt=r(tKe," (BERT model)"),tKe.forEach(t),qnt=i(he),p6=n(he,"LI",{});var aKe=s(p6);N9e=n(aKe,"STRONG",{});var Kha=s(N9e);jnt=r(Kha,"camembert"),Kha.forEach(t),Dnt=r(aKe," \u2014 "),Ane=n(aKe,"A",{href:!0});var eua=s(Ane);Gnt=r(eua,"TFCamembertForTokenClassification"),eua.forEach(t),Ont=r(aKe," (CamemBERT model)"),aKe.forEach(t),Vnt=i(he),_6=n(he,"LI",{});var nKe=s(_6);q9e=n(nKe,"STRONG",{});var oua=s(q9e);Xnt=r(oua,"convbert"),oua.forEach(t),znt=r(nKe," \u2014 "),Lne=n(nKe,"A",{href:!0});var rua=s(Lne);Qnt=r(rua,"TFConvBertForTokenClassification"),rua.forEach(t),Wnt=r(nKe," (ConvBERT model)"),nKe.forEach(t),Unt=i(he),b6=n(he,"LI",{});var sKe=s(b6);j9e=n(sKe,"STRONG",{});var tua=s(j9e);Hnt=r(tua,"deberta"),tua.forEach(t),Jnt=r(sKe," \u2014 "),yne=n(sKe,"A",{href:!0});var aua=s(yne);Ynt=r(aua,"TFDebertaForTokenClassification"),aua.forEach(t),Znt=r(sKe," (DeBERTa model)"),sKe.forEach(t),Knt=i(he),v6=n(he,"LI",{});var lKe=s(v6);D9e=n(lKe,"STRONG",{});var nua=s(D9e);est=r(nua,"deberta-v2"),nua.forEach(t),ost=r(lKe," \u2014 "),xne=n(lKe,"A",{href:!0});var sua=s(xne);rst=r(sua,"TFDebertaV2ForTokenClassification"),sua.forEach(t),tst=r(lKe," (DeBERTa-v2 model)"),lKe.forEach(t),ast=i(he),F6=n(he,"LI",{});var iKe=s(F6);G9e=n(iKe,"STRONG",{});var lua=s(G9e);nst=r(lua,"distilbert"),lua.forEach(t),sst=r(iKe," \u2014 "),$ne=n(iKe,"A",{href:!0});var iua=s($ne);lst=r(iua,"TFDistilBertForTokenClassification"),iua.forEach(t),ist=r(iKe," (DistilBERT model)"),iKe.forEach(t),dst=i(he),T6=n(he,"LI",{});var dKe=s(T6);O9e=n(dKe,"STRONG",{});var dua=s(O9e);cst=r(dua,"electra"),dua.forEach(t),mst=r(dKe," \u2014 "),kne=n(dKe,"A",{href:!0});var cua=s(kne);fst=r(cua,"TFElectraForTokenClassification"),cua.forEach(t),gst=r(dKe," (ELECTRA model)"),dKe.forEach(t),hst=i(he),M6=n(he,"LI",{});var cKe=s(M6);V9e=n(cKe,"STRONG",{});var mua=s(V9e);ust=r(mua,"flaubert"),mua.forEach(t),pst=r(cKe," \u2014 "),Sne=n(cKe,"A",{href:!0});var fua=s(Sne);_st=r(fua,"TFFlaubertForTokenClassification"),fua.forEach(t),bst=r(cKe," (FlauBERT model)"),cKe.forEach(t),vst=i(he),E6=n(he,"LI",{});var mKe=s(E6);X9e=n(mKe,"STRONG",{});var gua=s(X9e);Fst=r(gua,"funnel"),gua.forEach(t),Tst=r(mKe," \u2014 "),Rne=n(mKe,"A",{href:!0});var hua=s(Rne);Mst=r(hua,"TFFunnelForTokenClassification"),hua.forEach(t),Est=r(mKe," (Funnel Transformer model)"),mKe.forEach(t),Cst=i(he),C6=n(he,"LI",{});var fKe=s(C6);z9e=n(fKe,"STRONG",{});var uua=s(z9e);wst=r(uua,"layoutlm"),uua.forEach(t),Ast=r(fKe," \u2014 "),Pne=n(fKe,"A",{href:!0});var pua=s(Pne);Lst=r(pua,"TFLayoutLMForTokenClassification"),pua.forEach(t),yst=r(fKe," (LayoutLM model)"),fKe.forEach(t),xst=i(he),w6=n(he,"LI",{});var gKe=s(w6);Q9e=n(gKe,"STRONG",{});var _ua=s(Q9e);$st=r(_ua,"layoutlmv3"),_ua.forEach(t),kst=r(gKe," \u2014 "),Bne=n(gKe,"A",{href:!0});var bua=s(Bne);Sst=r(bua,"TFLayoutLMv3ForTokenClassification"),bua.forEach(t),Rst=r(gKe," (LayoutLMv3 model)"),gKe.forEach(t),Pst=i(he),A6=n(he,"LI",{});var hKe=s(A6);W9e=n(hKe,"STRONG",{});var vua=s(W9e);Bst=r(vua,"longformer"),vua.forEach(t),Ist=r(hKe," \u2014 "),Ine=n(hKe,"A",{href:!0});var Fua=s(Ine);Nst=r(Fua,"TFLongformerForTokenClassification"),Fua.forEach(t),qst=r(hKe," (Longformer model)"),hKe.forEach(t),jst=i(he),L6=n(he,"LI",{});var uKe=s(L6);U9e=n(uKe,"STRONG",{});var Tua=s(U9e);Dst=r(Tua,"mobilebert"),Tua.forEach(t),Gst=r(uKe," \u2014 "),Nne=n(uKe,"A",{href:!0});var Mua=s(Nne);Ost=r(Mua,"TFMobileBertForTokenClassification"),Mua.forEach(t),Vst=r(uKe," (MobileBERT model)"),uKe.forEach(t),Xst=i(he),y6=n(he,"LI",{});var pKe=s(y6);H9e=n(pKe,"STRONG",{});var Eua=s(H9e);zst=r(Eua,"mpnet"),Eua.forEach(t),Qst=r(pKe," \u2014 "),qne=n(pKe,"A",{href:!0});var Cua=s(qne);Wst=r(Cua,"TFMPNetForTokenClassification"),Cua.forEach(t),Ust=r(pKe," (MPNet model)"),pKe.forEach(t),Hst=i(he),x6=n(he,"LI",{});var _Ke=s(x6);J9e=n(_Ke,"STRONG",{});var wua=s(J9e);Jst=r(wua,"rembert"),wua.forEach(t),Yst=r(_Ke," \u2014 "),jne=n(_Ke,"A",{href:!0});var Aua=s(jne);Zst=r(Aua,"TFRemBertForTokenClassification"),Aua.forEach(t),Kst=r(_Ke," (RemBERT model)"),_Ke.forEach(t),elt=i(he),$6=n(he,"LI",{});var bKe=s($6);Y9e=n(bKe,"STRONG",{});var Lua=s(Y9e);olt=r(Lua,"roberta"),Lua.forEach(t),rlt=r(bKe," \u2014 "),Dne=n(bKe,"A",{href:!0});var yua=s(Dne);tlt=r(yua,"TFRobertaForTokenClassification"),yua.forEach(t),alt=r(bKe," (RoBERTa model)"),bKe.forEach(t),nlt=i(he),k6=n(he,"LI",{});var vKe=s(k6);Z9e=n(vKe,"STRONG",{});var xua=s(Z9e);slt=r(xua,"roformer"),xua.forEach(t),llt=r(vKe," \u2014 "),Gne=n(vKe,"A",{href:!0});var $ua=s(Gne);ilt=r($ua,"TFRoFormerForTokenClassification"),$ua.forEach(t),dlt=r(vKe," (RoFormer model)"),vKe.forEach(t),clt=i(he),S6=n(he,"LI",{});var FKe=s(S6);K9e=n(FKe,"STRONG",{});var kua=s(K9e);mlt=r(kua,"xlm"),kua.forEach(t),flt=r(FKe," \u2014 "),One=n(FKe,"A",{href:!0});var Sua=s(One);glt=r(Sua,"TFXLMForTokenClassification"),Sua.forEach(t),hlt=r(FKe," (XLM model)"),FKe.forEach(t),ult=i(he),R6=n(he,"LI",{});var TKe=s(R6);exe=n(TKe,"STRONG",{});var Rua=s(exe);plt=r(Rua,"xlm-roberta"),Rua.forEach(t),_lt=r(TKe," \u2014 "),Vne=n(TKe,"A",{href:!0});var Pua=s(Vne);blt=r(Pua,"TFXLMRobertaForTokenClassification"),Pua.forEach(t),vlt=r(TKe," (XLM-RoBERTa model)"),TKe.forEach(t),Flt=i(he),P6=n(he,"LI",{});var MKe=s(P6);oxe=n(MKe,"STRONG",{});var Bua=s(oxe);Tlt=r(Bua,"xlnet"),Bua.forEach(t),Mlt=r(MKe," \u2014 "),Xne=n(MKe,"A",{href:!0});var Iua=s(Xne);Elt=r(Iua,"TFXLNetForTokenClassification"),Iua.forEach(t),Clt=r(MKe," (XLNet model)"),MKe.forEach(t),he.forEach(t),wlt=i(Ri),T(B6.$$.fragment,Ri),Ri.forEach(t),Si.forEach(t),Pto=i(m),jm=n(m,"H2",{class:!0});var Yno=s(jm);I6=n(Yno,"A",{id:!0,class:!0,href:!0});var Nua=s(I6);rxe=n(Nua,"SPAN",{});var qua=s(rxe);T(WR.$$.fragment,qua),qua.forEach(t),Nua.forEach(t),Alt=i(Yno),txe=n(Yno,"SPAN",{});var jua=s(txe);Llt=r(jua,"TFAutoModelForQuestionAnswering"),jua.forEach(t),Yno.forEach(t),Bto=i(m),Tr=n(m,"DIV",{class:!0});var Pi=s(Tr);T(UR.$$.fragment,Pi),ylt=i(Pi),Dm=n(Pi,"P",{});var qce=s(Dm);xlt=r(qce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zne=n(qce,"A",{href:!0});var Dua=s(zne);$lt=r(Dua,"from_pretrained()"),Dua.forEach(t),klt=r(qce," class method or the "),Qne=n(qce,"A",{href:!0});var Gua=s(Qne);Slt=r(Gua,"from_config()"),Gua.forEach(t),Rlt=r(qce,` class
method.`),qce.forEach(t),Plt=i(Pi),HR=n(Pi,"P",{});var Zno=s(HR);Blt=r(Zno,"This class cannot be instantiated directly using "),axe=n(Zno,"CODE",{});var Oua=s(axe);Ilt=r(Oua,"__init__()"),Oua.forEach(t),Nlt=r(Zno," (throws an error)."),Zno.forEach(t),qlt=i(Pi),sa=n(Pi,"DIV",{class:!0});var rx=s(sa);T(JR.$$.fragment,rx),jlt=i(rx),nxe=n(rx,"P",{});var Vua=s(nxe);Dlt=r(Vua,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Vua.forEach(t),Glt=i(rx),Gm=n(rx,"P",{});var jce=s(Gm);Olt=r(jce,`Note:
Loading a model from its configuration file does `),sxe=n(jce,"STRONG",{});var Xua=s(sxe);Vlt=r(Xua,"not"),Xua.forEach(t),Xlt=r(jce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wne=n(jce,"A",{href:!0});var zua=s(Wne);zlt=r(zua,"from_pretrained()"),zua.forEach(t),Qlt=r(jce," to load the model weights."),jce.forEach(t),Wlt=i(rx),T(N6.$$.fragment,rx),rx.forEach(t),Ult=i(Pi),Yr=n(Pi,"DIV",{class:!0});var Bi=s(Yr);T(YR.$$.fragment,Bi),Hlt=i(Bi),lxe=n(Bi,"P",{});var Qua=s(lxe);Jlt=r(Qua,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Qua.forEach(t),Ylt=i(Bi),Vn=n(Bi,"P",{});var tx=s(Vn);Zlt=r(tx,"The model class to instantiate is selected based on the "),ixe=n(tx,"CODE",{});var Wua=s(ixe);Klt=r(Wua,"model_type"),Wua.forEach(t),eit=r(tx,` property of the config object (either
passed as an argument or loaded from `),dxe=n(tx,"CODE",{});var Uua=s(dxe);oit=r(Uua,"pretrained_model_name_or_path"),Uua.forEach(t),rit=r(tx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cxe=n(tx,"CODE",{});var Hua=s(cxe);tit=r(Hua,"pretrained_model_name_or_path"),Hua.forEach(t),ait=r(tx,":"),tx.forEach(t),nit=i(Bi),me=n(Bi,"UL",{});var ue=s(me);q6=n(ue,"LI",{});var EKe=s(q6);mxe=n(EKe,"STRONG",{});var Jua=s(mxe);sit=r(Jua,"albert"),Jua.forEach(t),lit=r(EKe," \u2014 "),Une=n(EKe,"A",{href:!0});var Yua=s(Une);iit=r(Yua,"TFAlbertForQuestionAnswering"),Yua.forEach(t),dit=r(EKe," (ALBERT model)"),EKe.forEach(t),cit=i(ue),j6=n(ue,"LI",{});var CKe=s(j6);fxe=n(CKe,"STRONG",{});var Zua=s(fxe);mit=r(Zua,"bert"),Zua.forEach(t),fit=r(CKe," \u2014 "),Hne=n(CKe,"A",{href:!0});var Kua=s(Hne);git=r(Kua,"TFBertForQuestionAnswering"),Kua.forEach(t),hit=r(CKe," (BERT model)"),CKe.forEach(t),uit=i(ue),D6=n(ue,"LI",{});var wKe=s(D6);gxe=n(wKe,"STRONG",{});var epa=s(gxe);pit=r(epa,"camembert"),epa.forEach(t),_it=r(wKe," \u2014 "),Jne=n(wKe,"A",{href:!0});var opa=s(Jne);bit=r(opa,"TFCamembertForQuestionAnswering"),opa.forEach(t),vit=r(wKe," (CamemBERT model)"),wKe.forEach(t),Fit=i(ue),G6=n(ue,"LI",{});var AKe=s(G6);hxe=n(AKe,"STRONG",{});var rpa=s(hxe);Tit=r(rpa,"convbert"),rpa.forEach(t),Mit=r(AKe," \u2014 "),Yne=n(AKe,"A",{href:!0});var tpa=s(Yne);Eit=r(tpa,"TFConvBertForQuestionAnswering"),tpa.forEach(t),Cit=r(AKe," (ConvBERT model)"),AKe.forEach(t),wit=i(ue),O6=n(ue,"LI",{});var LKe=s(O6);uxe=n(LKe,"STRONG",{});var apa=s(uxe);Ait=r(apa,"deberta"),apa.forEach(t),Lit=r(LKe," \u2014 "),Zne=n(LKe,"A",{href:!0});var npa=s(Zne);yit=r(npa,"TFDebertaForQuestionAnswering"),npa.forEach(t),xit=r(LKe," (DeBERTa model)"),LKe.forEach(t),$it=i(ue),V6=n(ue,"LI",{});var yKe=s(V6);pxe=n(yKe,"STRONG",{});var spa=s(pxe);kit=r(spa,"deberta-v2"),spa.forEach(t),Sit=r(yKe," \u2014 "),Kne=n(yKe,"A",{href:!0});var lpa=s(Kne);Rit=r(lpa,"TFDebertaV2ForQuestionAnswering"),lpa.forEach(t),Pit=r(yKe," (DeBERTa-v2 model)"),yKe.forEach(t),Bit=i(ue),X6=n(ue,"LI",{});var xKe=s(X6);_xe=n(xKe,"STRONG",{});var ipa=s(_xe);Iit=r(ipa,"distilbert"),ipa.forEach(t),Nit=r(xKe," \u2014 "),ese=n(xKe,"A",{href:!0});var dpa=s(ese);qit=r(dpa,"TFDistilBertForQuestionAnswering"),dpa.forEach(t),jit=r(xKe," (DistilBERT model)"),xKe.forEach(t),Dit=i(ue),z6=n(ue,"LI",{});var $Ke=s(z6);bxe=n($Ke,"STRONG",{});var cpa=s(bxe);Git=r(cpa,"electra"),cpa.forEach(t),Oit=r($Ke," \u2014 "),ose=n($Ke,"A",{href:!0});var mpa=s(ose);Vit=r(mpa,"TFElectraForQuestionAnswering"),mpa.forEach(t),Xit=r($Ke," (ELECTRA model)"),$Ke.forEach(t),zit=i(ue),Q6=n(ue,"LI",{});var kKe=s(Q6);vxe=n(kKe,"STRONG",{});var fpa=s(vxe);Qit=r(fpa,"flaubert"),fpa.forEach(t),Wit=r(kKe," \u2014 "),rse=n(kKe,"A",{href:!0});var gpa=s(rse);Uit=r(gpa,"TFFlaubertForQuestionAnsweringSimple"),gpa.forEach(t),Hit=r(kKe," (FlauBERT model)"),kKe.forEach(t),Jit=i(ue),W6=n(ue,"LI",{});var SKe=s(W6);Fxe=n(SKe,"STRONG",{});var hpa=s(Fxe);Yit=r(hpa,"funnel"),hpa.forEach(t),Zit=r(SKe," \u2014 "),tse=n(SKe,"A",{href:!0});var upa=s(tse);Kit=r(upa,"TFFunnelForQuestionAnswering"),upa.forEach(t),edt=r(SKe," (Funnel Transformer model)"),SKe.forEach(t),odt=i(ue),U6=n(ue,"LI",{});var RKe=s(U6);Txe=n(RKe,"STRONG",{});var ppa=s(Txe);rdt=r(ppa,"gptj"),ppa.forEach(t),tdt=r(RKe," \u2014 "),ase=n(RKe,"A",{href:!0});var _pa=s(ase);adt=r(_pa,"TFGPTJForQuestionAnswering"),_pa.forEach(t),ndt=r(RKe," (GPT-J model)"),RKe.forEach(t),sdt=i(ue),H6=n(ue,"LI",{});var PKe=s(H6);Mxe=n(PKe,"STRONG",{});var bpa=s(Mxe);ldt=r(bpa,"layoutlmv3"),bpa.forEach(t),idt=r(PKe," \u2014 "),nse=n(PKe,"A",{href:!0});var vpa=s(nse);ddt=r(vpa,"TFLayoutLMv3ForQuestionAnswering"),vpa.forEach(t),cdt=r(PKe," (LayoutLMv3 model)"),PKe.forEach(t),mdt=i(ue),J6=n(ue,"LI",{});var BKe=s(J6);Exe=n(BKe,"STRONG",{});var Fpa=s(Exe);fdt=r(Fpa,"longformer"),Fpa.forEach(t),gdt=r(BKe," \u2014 "),sse=n(BKe,"A",{href:!0});var Tpa=s(sse);hdt=r(Tpa,"TFLongformerForQuestionAnswering"),Tpa.forEach(t),udt=r(BKe," (Longformer model)"),BKe.forEach(t),pdt=i(ue),Y6=n(ue,"LI",{});var IKe=s(Y6);Cxe=n(IKe,"STRONG",{});var Mpa=s(Cxe);_dt=r(Mpa,"mobilebert"),Mpa.forEach(t),bdt=r(IKe," \u2014 "),lse=n(IKe,"A",{href:!0});var Epa=s(lse);vdt=r(Epa,"TFMobileBertForQuestionAnswering"),Epa.forEach(t),Fdt=r(IKe," (MobileBERT model)"),IKe.forEach(t),Tdt=i(ue),Z6=n(ue,"LI",{});var NKe=s(Z6);wxe=n(NKe,"STRONG",{});var Cpa=s(wxe);Mdt=r(Cpa,"mpnet"),Cpa.forEach(t),Edt=r(NKe," \u2014 "),ise=n(NKe,"A",{href:!0});var wpa=s(ise);Cdt=r(wpa,"TFMPNetForQuestionAnswering"),wpa.forEach(t),wdt=r(NKe," (MPNet model)"),NKe.forEach(t),Adt=i(ue),K6=n(ue,"LI",{});var qKe=s(K6);Axe=n(qKe,"STRONG",{});var Apa=s(Axe);Ldt=r(Apa,"rembert"),Apa.forEach(t),ydt=r(qKe," \u2014 "),dse=n(qKe,"A",{href:!0});var Lpa=s(dse);xdt=r(Lpa,"TFRemBertForQuestionAnswering"),Lpa.forEach(t),$dt=r(qKe," (RemBERT model)"),qKe.forEach(t),kdt=i(ue),e7=n(ue,"LI",{});var jKe=s(e7);Lxe=n(jKe,"STRONG",{});var ypa=s(Lxe);Sdt=r(ypa,"roberta"),ypa.forEach(t),Rdt=r(jKe," \u2014 "),cse=n(jKe,"A",{href:!0});var xpa=s(cse);Pdt=r(xpa,"TFRobertaForQuestionAnswering"),xpa.forEach(t),Bdt=r(jKe," (RoBERTa model)"),jKe.forEach(t),Idt=i(ue),o7=n(ue,"LI",{});var DKe=s(o7);yxe=n(DKe,"STRONG",{});var $pa=s(yxe);Ndt=r($pa,"roformer"),$pa.forEach(t),qdt=r(DKe," \u2014 "),mse=n(DKe,"A",{href:!0});var kpa=s(mse);jdt=r(kpa,"TFRoFormerForQuestionAnswering"),kpa.forEach(t),Ddt=r(DKe," (RoFormer model)"),DKe.forEach(t),Gdt=i(ue),r7=n(ue,"LI",{});var GKe=s(r7);xxe=n(GKe,"STRONG",{});var Spa=s(xxe);Odt=r(Spa,"xlm"),Spa.forEach(t),Vdt=r(GKe," \u2014 "),fse=n(GKe,"A",{href:!0});var Rpa=s(fse);Xdt=r(Rpa,"TFXLMForQuestionAnsweringSimple"),Rpa.forEach(t),zdt=r(GKe," (XLM model)"),GKe.forEach(t),Qdt=i(ue),t7=n(ue,"LI",{});var OKe=s(t7);$xe=n(OKe,"STRONG",{});var Ppa=s($xe);Wdt=r(Ppa,"xlm-roberta"),Ppa.forEach(t),Udt=r(OKe," \u2014 "),gse=n(OKe,"A",{href:!0});var Bpa=s(gse);Hdt=r(Bpa,"TFXLMRobertaForQuestionAnswering"),Bpa.forEach(t),Jdt=r(OKe," (XLM-RoBERTa model)"),OKe.forEach(t),Ydt=i(ue),a7=n(ue,"LI",{});var VKe=s(a7);kxe=n(VKe,"STRONG",{});var Ipa=s(kxe);Zdt=r(Ipa,"xlnet"),Ipa.forEach(t),Kdt=r(VKe," \u2014 "),hse=n(VKe,"A",{href:!0});var Npa=s(hse);ect=r(Npa,"TFXLNetForQuestionAnsweringSimple"),Npa.forEach(t),oct=r(VKe," (XLNet model)"),VKe.forEach(t),ue.forEach(t),rct=i(Bi),T(n7.$$.fragment,Bi),Bi.forEach(t),Pi.forEach(t),Ito=i(m),Om=n(m,"H2",{class:!0});var Kno=s(Om);s7=n(Kno,"A",{id:!0,class:!0,href:!0});var qpa=s(s7);Sxe=n(qpa,"SPAN",{});var jpa=s(Sxe);T(ZR.$$.fragment,jpa),jpa.forEach(t),qpa.forEach(t),tct=i(Kno),Rxe=n(Kno,"SPAN",{});var Dpa=s(Rxe);act=r(Dpa,"TFAutoModelForVision2Seq"),Dpa.forEach(t),Kno.forEach(t),Nto=i(m),Mr=n(m,"DIV",{class:!0});var Ii=s(Mr);T(KR.$$.fragment,Ii),nct=i(Ii),Vm=n(Ii,"P",{});var Dce=s(Vm);sct=r(Dce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),use=n(Dce,"A",{href:!0});var Gpa=s(use);lct=r(Gpa,"from_pretrained()"),Gpa.forEach(t),ict=r(Dce," class method or the "),pse=n(Dce,"A",{href:!0});var Opa=s(pse);dct=r(Opa,"from_config()"),Opa.forEach(t),cct=r(Dce,` class
method.`),Dce.forEach(t),mct=i(Ii),eP=n(Ii,"P",{});var eso=s(eP);fct=r(eso,"This class cannot be instantiated directly using "),Pxe=n(eso,"CODE",{});var Vpa=s(Pxe);gct=r(Vpa,"__init__()"),Vpa.forEach(t),hct=r(eso," (throws an error)."),eso.forEach(t),uct=i(Ii),la=n(Ii,"DIV",{class:!0});var ax=s(la);T(oP.$$.fragment,ax),pct=i(ax),Bxe=n(ax,"P",{});var Xpa=s(Bxe);_ct=r(Xpa,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Xpa.forEach(t),bct=i(ax),Xm=n(ax,"P",{});var Gce=s(Xm);vct=r(Gce,`Note:
Loading a model from its configuration file does `),Ixe=n(Gce,"STRONG",{});var zpa=s(Ixe);Fct=r(zpa,"not"),zpa.forEach(t),Tct=r(Gce,` load the model weights. It only affects the
model\u2019s configuration. Use `),_se=n(Gce,"A",{href:!0});var Qpa=s(_se);Mct=r(Qpa,"from_pretrained()"),Qpa.forEach(t),Ect=r(Gce," to load the model weights."),Gce.forEach(t),Cct=i(ax),T(l7.$$.fragment,ax),ax.forEach(t),wct=i(Ii),Zr=n(Ii,"DIV",{class:!0});var Ni=s(Zr);T(rP.$$.fragment,Ni),Act=i(Ni),Nxe=n(Ni,"P",{});var Wpa=s(Nxe);Lct=r(Wpa,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Wpa.forEach(t),yct=i(Ni),Xn=n(Ni,"P",{});var nx=s(Xn);xct=r(nx,"The model class to instantiate is selected based on the "),qxe=n(nx,"CODE",{});var Upa=s(qxe);$ct=r(Upa,"model_type"),Upa.forEach(t),kct=r(nx,` property of the config object (either
passed as an argument or loaded from `),jxe=n(nx,"CODE",{});var Hpa=s(jxe);Sct=r(Hpa,"pretrained_model_name_or_path"),Hpa.forEach(t),Rct=r(nx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dxe=n(nx,"CODE",{});var Jpa=s(Dxe);Pct=r(Jpa,"pretrained_model_name_or_path"),Jpa.forEach(t),Bct=r(nx,":"),nx.forEach(t),Ict=i(Ni),Gxe=n(Ni,"UL",{});var Ypa=s(Gxe);i7=n(Ypa,"LI",{});var XKe=s(i7);Oxe=n(XKe,"STRONG",{});var Zpa=s(Oxe);Nct=r(Zpa,"vision-encoder-decoder"),Zpa.forEach(t),qct=r(XKe," \u2014 "),bse=n(XKe,"A",{href:!0});var Kpa=s(bse);jct=r(Kpa,"TFVisionEncoderDecoderModel"),Kpa.forEach(t),Dct=r(XKe," (Vision Encoder decoder model)"),XKe.forEach(t),Ypa.forEach(t),Gct=i(Ni),T(d7.$$.fragment,Ni),Ni.forEach(t),Ii.forEach(t),qto=i(m),zm=n(m,"H2",{class:!0});var oso=s(zm);c7=n(oso,"A",{id:!0,class:!0,href:!0});var e_a=s(c7);Vxe=n(e_a,"SPAN",{});var o_a=s(Vxe);T(tP.$$.fragment,o_a),o_a.forEach(t),e_a.forEach(t),Oct=i(oso),Xxe=n(oso,"SPAN",{});var r_a=s(Xxe);Vct=r(r_a,"TFAutoModelForSpeechSeq2Seq"),r_a.forEach(t),oso.forEach(t),jto=i(m),Er=n(m,"DIV",{class:!0});var qi=s(Er);T(aP.$$.fragment,qi),Xct=i(qi),Qm=n(qi,"P",{});var Oce=s(Qm);zct=r(Oce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),vse=n(Oce,"A",{href:!0});var t_a=s(vse);Qct=r(t_a,"from_pretrained()"),t_a.forEach(t),Wct=r(Oce," class method or the "),Fse=n(Oce,"A",{href:!0});var a_a=s(Fse);Uct=r(a_a,"from_config()"),a_a.forEach(t),Hct=r(Oce,` class
method.`),Oce.forEach(t),Jct=i(qi),nP=n(qi,"P",{});var rso=s(nP);Yct=r(rso,"This class cannot be instantiated directly using "),zxe=n(rso,"CODE",{});var n_a=s(zxe);Zct=r(n_a,"__init__()"),n_a.forEach(t),Kct=r(rso," (throws an error)."),rso.forEach(t),emt=i(qi),ia=n(qi,"DIV",{class:!0});var sx=s(ia);T(sP.$$.fragment,sx),omt=i(sx),Qxe=n(sx,"P",{});var s_a=s(Qxe);rmt=r(s_a,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),s_a.forEach(t),tmt=i(sx),Wm=n(sx,"P",{});var Vce=s(Wm);amt=r(Vce,`Note:
Loading a model from its configuration file does `),Wxe=n(Vce,"STRONG",{});var l_a=s(Wxe);nmt=r(l_a,"not"),l_a.forEach(t),smt=r(Vce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tse=n(Vce,"A",{href:!0});var i_a=s(Tse);lmt=r(i_a,"from_pretrained()"),i_a.forEach(t),imt=r(Vce," to load the model weights."),Vce.forEach(t),dmt=i(sx),T(m7.$$.fragment,sx),sx.forEach(t),cmt=i(qi),Kr=n(qi,"DIV",{class:!0});var ji=s(Kr);T(lP.$$.fragment,ji),mmt=i(ji),Uxe=n(ji,"P",{});var d_a=s(Uxe);fmt=r(d_a,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),d_a.forEach(t),gmt=i(ji),zn=n(ji,"P",{});var lx=s(zn);hmt=r(lx,"The model class to instantiate is selected based on the "),Hxe=n(lx,"CODE",{});var c_a=s(Hxe);umt=r(c_a,"model_type"),c_a.forEach(t),pmt=r(lx,` property of the config object (either
passed as an argument or loaded from `),Jxe=n(lx,"CODE",{});var m_a=s(Jxe);_mt=r(m_a,"pretrained_model_name_or_path"),m_a.forEach(t),bmt=r(lx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yxe=n(lx,"CODE",{});var f_a=s(Yxe);vmt=r(f_a,"pretrained_model_name_or_path"),f_a.forEach(t),Fmt=r(lx,":"),lx.forEach(t),Tmt=i(ji),iP=n(ji,"UL",{});var tso=s(iP);f7=n(tso,"LI",{});var zKe=s(f7);Zxe=n(zKe,"STRONG",{});var g_a=s(Zxe);Mmt=r(g_a,"speech_to_text"),g_a.forEach(t),Emt=r(zKe," \u2014 "),Mse=n(zKe,"A",{href:!0});var h_a=s(Mse);Cmt=r(h_a,"TFSpeech2TextForConditionalGeneration"),h_a.forEach(t),wmt=r(zKe," (Speech2Text model)"),zKe.forEach(t),Amt=i(tso),g7=n(tso,"LI",{});var QKe=s(g7);Kxe=n(QKe,"STRONG",{});var u_a=s(Kxe);Lmt=r(u_a,"whisper"),u_a.forEach(t),ymt=r(QKe," \u2014 "),Ese=n(QKe,"A",{href:!0});var p_a=s(Ese);xmt=r(p_a,"TFWhisperForConditionalGeneration"),p_a.forEach(t),$mt=r(QKe," (Whisper model)"),QKe.forEach(t),tso.forEach(t),kmt=i(ji),T(h7.$$.fragment,ji),ji.forEach(t),qi.forEach(t),Dto=i(m),Um=n(m,"H2",{class:!0});var aso=s(Um);u7=n(aso,"A",{id:!0,class:!0,href:!0});var __a=s(u7);e$e=n(__a,"SPAN",{});var b_a=s(e$e);T(dP.$$.fragment,b_a),b_a.forEach(t),__a.forEach(t),Smt=i(aso),o$e=n(aso,"SPAN",{});var v_a=s(o$e);Rmt=r(v_a,"FlaxAutoModel"),v_a.forEach(t),aso.forEach(t),Gto=i(m),Cr=n(m,"DIV",{class:!0});var Di=s(Cr);T(cP.$$.fragment,Di),Pmt=i(Di),Hm=n(Di,"P",{});var Xce=s(Hm);Bmt=r(Xce,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Cse=n(Xce,"A",{href:!0});var F_a=s(Cse);Imt=r(F_a,"from_pretrained()"),F_a.forEach(t),Nmt=r(Xce," class method or the "),wse=n(Xce,"A",{href:!0});var T_a=s(wse);qmt=r(T_a,"from_config()"),T_a.forEach(t),jmt=r(Xce,` class
method.`),Xce.forEach(t),Dmt=i(Di),mP=n(Di,"P",{});var nso=s(mP);Gmt=r(nso,"This class cannot be instantiated directly using "),r$e=n(nso,"CODE",{});var M_a=s(r$e);Omt=r(M_a,"__init__()"),M_a.forEach(t),Vmt=r(nso," (throws an error)."),nso.forEach(t),Xmt=i(Di),da=n(Di,"DIV",{class:!0});var ix=s(da);T(fP.$$.fragment,ix),zmt=i(ix),t$e=n(ix,"P",{});var E_a=s(t$e);Qmt=r(E_a,"Instantiates one of the base model classes of the library from a configuration."),E_a.forEach(t),Wmt=i(ix),Jm=n(ix,"P",{});var zce=s(Jm);Umt=r(zce,`Note:
Loading a model from its configuration file does `),a$e=n(zce,"STRONG",{});var C_a=s(a$e);Hmt=r(C_a,"not"),C_a.forEach(t),Jmt=r(zce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ase=n(zce,"A",{href:!0});var w_a=s(Ase);Ymt=r(w_a,"from_pretrained()"),w_a.forEach(t),Zmt=r(zce," to load the model weights."),zce.forEach(t),Kmt=i(ix),T(p7.$$.fragment,ix),ix.forEach(t),eft=i(Di),et=n(Di,"DIV",{class:!0});var Gi=s(et);T(gP.$$.fragment,Gi),oft=i(Gi),n$e=n(Gi,"P",{});var A_a=s(n$e);rft=r(A_a,"Instantiate one of the base model classes of the library from a pretrained model."),A_a.forEach(t),tft=i(Gi),Qn=n(Gi,"P",{});var dx=s(Qn);aft=r(dx,"The model class to instantiate is selected based on the "),s$e=n(dx,"CODE",{});var L_a=s(s$e);nft=r(L_a,"model_type"),L_a.forEach(t),sft=r(dx,` property of the config object (either
passed as an argument or loaded from `),l$e=n(dx,"CODE",{});var y_a=s(l$e);lft=r(y_a,"pretrained_model_name_or_path"),y_a.forEach(t),ift=r(dx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i$e=n(dx,"CODE",{});var x_a=s(i$e);dft=r(x_a,"pretrained_model_name_or_path"),x_a.forEach(t),cft=r(dx,":"),dx.forEach(t),mft=i(Gi),te=n(Gi,"UL",{});var ne=s(te);_7=n(ne,"LI",{});var WKe=s(_7);d$e=n(WKe,"STRONG",{});var $_a=s(d$e);fft=r($_a,"albert"),$_a.forEach(t),gft=r(WKe," \u2014 "),Lse=n(WKe,"A",{href:!0});var k_a=s(Lse);hft=r(k_a,"FlaxAlbertModel"),k_a.forEach(t),uft=r(WKe," (ALBERT model)"),WKe.forEach(t),pft=i(ne),b7=n(ne,"LI",{});var UKe=s(b7);c$e=n(UKe,"STRONG",{});var S_a=s(c$e);_ft=r(S_a,"bart"),S_a.forEach(t),bft=r(UKe," \u2014 "),yse=n(UKe,"A",{href:!0});var R_a=s(yse);vft=r(R_a,"FlaxBartModel"),R_a.forEach(t),Fft=r(UKe," (BART model)"),UKe.forEach(t),Tft=i(ne),v7=n(ne,"LI",{});var HKe=s(v7);m$e=n(HKe,"STRONG",{});var P_a=s(m$e);Mft=r(P_a,"beit"),P_a.forEach(t),Eft=r(HKe," \u2014 "),xse=n(HKe,"A",{href:!0});var B_a=s(xse);Cft=r(B_a,"FlaxBeitModel"),B_a.forEach(t),wft=r(HKe," (BEiT model)"),HKe.forEach(t),Aft=i(ne),F7=n(ne,"LI",{});var JKe=s(F7);f$e=n(JKe,"STRONG",{});var I_a=s(f$e);Lft=r(I_a,"bert"),I_a.forEach(t),yft=r(JKe," \u2014 "),$se=n(JKe,"A",{href:!0});var N_a=s($se);xft=r(N_a,"FlaxBertModel"),N_a.forEach(t),$ft=r(JKe," (BERT model)"),JKe.forEach(t),kft=i(ne),T7=n(ne,"LI",{});var YKe=s(T7);g$e=n(YKe,"STRONG",{});var q_a=s(g$e);Sft=r(q_a,"big_bird"),q_a.forEach(t),Rft=r(YKe," \u2014 "),kse=n(YKe,"A",{href:!0});var j_a=s(kse);Pft=r(j_a,"FlaxBigBirdModel"),j_a.forEach(t),Bft=r(YKe," (BigBird model)"),YKe.forEach(t),Ift=i(ne),M7=n(ne,"LI",{});var ZKe=s(M7);h$e=n(ZKe,"STRONG",{});var D_a=s(h$e);Nft=r(D_a,"blenderbot"),D_a.forEach(t),qft=r(ZKe," \u2014 "),Sse=n(ZKe,"A",{href:!0});var G_a=s(Sse);jft=r(G_a,"FlaxBlenderbotModel"),G_a.forEach(t),Dft=r(ZKe," (Blenderbot model)"),ZKe.forEach(t),Gft=i(ne),E7=n(ne,"LI",{});var KKe=s(E7);u$e=n(KKe,"STRONG",{});var O_a=s(u$e);Oft=r(O_a,"blenderbot-small"),O_a.forEach(t),Vft=r(KKe," \u2014 "),Rse=n(KKe,"A",{href:!0});var V_a=s(Rse);Xft=r(V_a,"FlaxBlenderbotSmallModel"),V_a.forEach(t),zft=r(KKe," (BlenderbotSmall model)"),KKe.forEach(t),Qft=i(ne),C7=n(ne,"LI",{});var eeo=s(C7);p$e=n(eeo,"STRONG",{});var X_a=s(p$e);Wft=r(X_a,"clip"),X_a.forEach(t),Uft=r(eeo," \u2014 "),Pse=n(eeo,"A",{href:!0});var z_a=s(Pse);Hft=r(z_a,"FlaxCLIPModel"),z_a.forEach(t),Jft=r(eeo," (CLIP model)"),eeo.forEach(t),Yft=i(ne),w7=n(ne,"LI",{});var oeo=s(w7);_$e=n(oeo,"STRONG",{});var Q_a=s(_$e);Zft=r(Q_a,"distilbert"),Q_a.forEach(t),Kft=r(oeo," \u2014 "),Bse=n(oeo,"A",{href:!0});var W_a=s(Bse);egt=r(W_a,"FlaxDistilBertModel"),W_a.forEach(t),ogt=r(oeo," (DistilBERT model)"),oeo.forEach(t),rgt=i(ne),A7=n(ne,"LI",{});var reo=s(A7);b$e=n(reo,"STRONG",{});var U_a=s(b$e);tgt=r(U_a,"electra"),U_a.forEach(t),agt=r(reo," \u2014 "),Ise=n(reo,"A",{href:!0});var H_a=s(Ise);ngt=r(H_a,"FlaxElectraModel"),H_a.forEach(t),sgt=r(reo," (ELECTRA model)"),reo.forEach(t),lgt=i(ne),L7=n(ne,"LI",{});var teo=s(L7);v$e=n(teo,"STRONG",{});var J_a=s(v$e);igt=r(J_a,"gpt2"),J_a.forEach(t),dgt=r(teo," \u2014 "),Nse=n(teo,"A",{href:!0});var Y_a=s(Nse);cgt=r(Y_a,"FlaxGPT2Model"),Y_a.forEach(t),mgt=r(teo," (OpenAI GPT-2 model)"),teo.forEach(t),fgt=i(ne),y7=n(ne,"LI",{});var aeo=s(y7);F$e=n(aeo,"STRONG",{});var Z_a=s(F$e);ggt=r(Z_a,"gpt_neo"),Z_a.forEach(t),hgt=r(aeo," \u2014 "),qse=n(aeo,"A",{href:!0});var K_a=s(qse);ugt=r(K_a,"FlaxGPTNeoModel"),K_a.forEach(t),pgt=r(aeo," (GPT Neo model)"),aeo.forEach(t),_gt=i(ne),x7=n(ne,"LI",{});var neo=s(x7);T$e=n(neo,"STRONG",{});var e1a=s(T$e);bgt=r(e1a,"gptj"),e1a.forEach(t),vgt=r(neo," \u2014 "),jse=n(neo,"A",{href:!0});var o1a=s(jse);Fgt=r(o1a,"FlaxGPTJModel"),o1a.forEach(t),Tgt=r(neo," (GPT-J model)"),neo.forEach(t),Mgt=i(ne),$7=n(ne,"LI",{});var seo=s($7);M$e=n(seo,"STRONG",{});var r1a=s(M$e);Egt=r(r1a,"longt5"),r1a.forEach(t),Cgt=r(seo," \u2014 "),Dse=n(seo,"A",{href:!0});var t1a=s(Dse);wgt=r(t1a,"FlaxLongT5Model"),t1a.forEach(t),Agt=r(seo," (LongT5 model)"),seo.forEach(t),Lgt=i(ne),k7=n(ne,"LI",{});var leo=s(k7);E$e=n(leo,"STRONG",{});var a1a=s(E$e);ygt=r(a1a,"marian"),a1a.forEach(t),xgt=r(leo," \u2014 "),Gse=n(leo,"A",{href:!0});var n1a=s(Gse);$gt=r(n1a,"FlaxMarianModel"),n1a.forEach(t),kgt=r(leo," (Marian model)"),leo.forEach(t),Sgt=i(ne),S7=n(ne,"LI",{});var ieo=s(S7);C$e=n(ieo,"STRONG",{});var s1a=s(C$e);Rgt=r(s1a,"mbart"),s1a.forEach(t),Pgt=r(ieo," \u2014 "),Ose=n(ieo,"A",{href:!0});var l1a=s(Ose);Bgt=r(l1a,"FlaxMBartModel"),l1a.forEach(t),Igt=r(ieo," (mBART model)"),ieo.forEach(t),Ngt=i(ne),R7=n(ne,"LI",{});var deo=s(R7);w$e=n(deo,"STRONG",{});var i1a=s(w$e);qgt=r(i1a,"mt5"),i1a.forEach(t),jgt=r(deo," \u2014 "),Vse=n(deo,"A",{href:!0});var d1a=s(Vse);Dgt=r(d1a,"FlaxMT5Model"),d1a.forEach(t),Ggt=r(deo," (MT5 model)"),deo.forEach(t),Ogt=i(ne),P7=n(ne,"LI",{});var ceo=s(P7);A$e=n(ceo,"STRONG",{});var c1a=s(A$e);Vgt=r(c1a,"opt"),c1a.forEach(t),Xgt=r(ceo," \u2014 "),Xse=n(ceo,"A",{href:!0});var m1a=s(Xse);zgt=r(m1a,"FlaxOPTModel"),m1a.forEach(t),Qgt=r(ceo," (OPT model)"),ceo.forEach(t),Wgt=i(ne),B7=n(ne,"LI",{});var meo=s(B7);L$e=n(meo,"STRONG",{});var f1a=s(L$e);Ugt=r(f1a,"pegasus"),f1a.forEach(t),Hgt=r(meo," \u2014 "),zse=n(meo,"A",{href:!0});var g1a=s(zse);Jgt=r(g1a,"FlaxPegasusModel"),g1a.forEach(t),Ygt=r(meo," (Pegasus model)"),meo.forEach(t),Zgt=i(ne),I7=n(ne,"LI",{});var feo=s(I7);y$e=n(feo,"STRONG",{});var h1a=s(y$e);Kgt=r(h1a,"roberta"),h1a.forEach(t),eht=r(feo," \u2014 "),Qse=n(feo,"A",{href:!0});var u1a=s(Qse);oht=r(u1a,"FlaxRobertaModel"),u1a.forEach(t),rht=r(feo," (RoBERTa model)"),feo.forEach(t),tht=i(ne),N7=n(ne,"LI",{});var geo=s(N7);x$e=n(geo,"STRONG",{});var p1a=s(x$e);aht=r(p1a,"roformer"),p1a.forEach(t),nht=r(geo," \u2014 "),Wse=n(geo,"A",{href:!0});var _1a=s(Wse);sht=r(_1a,"FlaxRoFormerModel"),_1a.forEach(t),lht=r(geo," (RoFormer model)"),geo.forEach(t),iht=i(ne),q7=n(ne,"LI",{});var heo=s(q7);$$e=n(heo,"STRONG",{});var b1a=s($$e);dht=r(b1a,"t5"),b1a.forEach(t),cht=r(heo," \u2014 "),Use=n(heo,"A",{href:!0});var v1a=s(Use);mht=r(v1a,"FlaxT5Model"),v1a.forEach(t),fht=r(heo," (T5 model)"),heo.forEach(t),ght=i(ne),j7=n(ne,"LI",{});var ueo=s(j7);k$e=n(ueo,"STRONG",{});var F1a=s(k$e);hht=r(F1a,"vision-text-dual-encoder"),F1a.forEach(t),uht=r(ueo," \u2014 "),Hse=n(ueo,"A",{href:!0});var T1a=s(Hse);pht=r(T1a,"FlaxVisionTextDualEncoderModel"),T1a.forEach(t),_ht=r(ueo," (VisionTextDualEncoder model)"),ueo.forEach(t),bht=i(ne),D7=n(ne,"LI",{});var peo=s(D7);S$e=n(peo,"STRONG",{});var M1a=s(S$e);vht=r(M1a,"vit"),M1a.forEach(t),Fht=r(peo," \u2014 "),Jse=n(peo,"A",{href:!0});var E1a=s(Jse);Tht=r(E1a,"FlaxViTModel"),E1a.forEach(t),Mht=r(peo," (ViT model)"),peo.forEach(t),Eht=i(ne),G7=n(ne,"LI",{});var _eo=s(G7);R$e=n(_eo,"STRONG",{});var C1a=s(R$e);Cht=r(C1a,"wav2vec2"),C1a.forEach(t),wht=r(_eo," \u2014 "),Yse=n(_eo,"A",{href:!0});var w1a=s(Yse);Aht=r(w1a,"FlaxWav2Vec2Model"),w1a.forEach(t),Lht=r(_eo," (Wav2Vec2 model)"),_eo.forEach(t),yht=i(ne),O7=n(ne,"LI",{});var beo=s(O7);P$e=n(beo,"STRONG",{});var A1a=s(P$e);xht=r(A1a,"xglm"),A1a.forEach(t),$ht=r(beo," \u2014 "),Zse=n(beo,"A",{href:!0});var L1a=s(Zse);kht=r(L1a,"FlaxXGLMModel"),L1a.forEach(t),Sht=r(beo," (XGLM model)"),beo.forEach(t),Rht=i(ne),V7=n(ne,"LI",{});var veo=s(V7);B$e=n(veo,"STRONG",{});var y1a=s(B$e);Pht=r(y1a,"xlm-roberta"),y1a.forEach(t),Bht=r(veo," \u2014 "),Kse=n(veo,"A",{href:!0});var x1a=s(Kse);Iht=r(x1a,"FlaxXLMRobertaModel"),x1a.forEach(t),Nht=r(veo," (XLM-RoBERTa model)"),veo.forEach(t),ne.forEach(t),qht=i(Gi),T(X7.$$.fragment,Gi),Gi.forEach(t),Di.forEach(t),Oto=i(m),Ym=n(m,"H2",{class:!0});var sso=s(Ym);z7=n(sso,"A",{id:!0,class:!0,href:!0});var $1a=s(z7);I$e=n($1a,"SPAN",{});var k1a=s(I$e);T(hP.$$.fragment,k1a),k1a.forEach(t),$1a.forEach(t),jht=i(sso),N$e=n(sso,"SPAN",{});var S1a=s(N$e);Dht=r(S1a,"FlaxAutoModelForCausalLM"),S1a.forEach(t),sso.forEach(t),Vto=i(m),wr=n(m,"DIV",{class:!0});var Oi=s(wr);T(uP.$$.fragment,Oi),Ght=i(Oi),Zm=n(Oi,"P",{});var Qce=s(Zm);Oht=r(Qce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ele=n(Qce,"A",{href:!0});var R1a=s(ele);Vht=r(R1a,"from_pretrained()"),R1a.forEach(t),Xht=r(Qce," class method or the "),ole=n(Qce,"A",{href:!0});var P1a=s(ole);zht=r(P1a,"from_config()"),P1a.forEach(t),Qht=r(Qce,` class
method.`),Qce.forEach(t),Wht=i(Oi),pP=n(Oi,"P",{});var lso=s(pP);Uht=r(lso,"This class cannot be instantiated directly using "),q$e=n(lso,"CODE",{});var B1a=s(q$e);Hht=r(B1a,"__init__()"),B1a.forEach(t),Jht=r(lso," (throws an error)."),lso.forEach(t),Yht=i(Oi),ca=n(Oi,"DIV",{class:!0});var cx=s(ca);T(_P.$$.fragment,cx),Zht=i(cx),j$e=n(cx,"P",{});var I1a=s(j$e);Kht=r(I1a,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),I1a.forEach(t),eut=i(cx),Km=n(cx,"P",{});var Wce=s(Km);out=r(Wce,`Note:
Loading a model from its configuration file does `),D$e=n(Wce,"STRONG",{});var N1a=s(D$e);rut=r(N1a,"not"),N1a.forEach(t),tut=r(Wce,` load the model weights. It only affects the
model\u2019s configuration. Use `),rle=n(Wce,"A",{href:!0});var q1a=s(rle);aut=r(q1a,"from_pretrained()"),q1a.forEach(t),nut=r(Wce," to load the model weights."),Wce.forEach(t),sut=i(cx),T(Q7.$$.fragment,cx),cx.forEach(t),lut=i(Oi),ot=n(Oi,"DIV",{class:!0});var Vi=s(ot);T(bP.$$.fragment,Vi),iut=i(Vi),G$e=n(Vi,"P",{});var j1a=s(G$e);dut=r(j1a,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),j1a.forEach(t),cut=i(Vi),Wn=n(Vi,"P",{});var mx=s(Wn);mut=r(mx,"The model class to instantiate is selected based on the "),O$e=n(mx,"CODE",{});var D1a=s(O$e);fut=r(D1a,"model_type"),D1a.forEach(t),gut=r(mx,` property of the config object (either
passed as an argument or loaded from `),V$e=n(mx,"CODE",{});var G1a=s(V$e);hut=r(G1a,"pretrained_model_name_or_path"),G1a.forEach(t),uut=r(mx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X$e=n(mx,"CODE",{});var O1a=s(X$e);put=r(O1a,"pretrained_model_name_or_path"),O1a.forEach(t),_ut=r(mx,":"),mx.forEach(t),but=i(Vi),$e=n(Vi,"UL",{});var je=s($e);W7=n(je,"LI",{});var Feo=s(W7);z$e=n(Feo,"STRONG",{});var V1a=s(z$e);vut=r(V1a,"bart"),V1a.forEach(t),Fut=r(Feo," \u2014 "),tle=n(Feo,"A",{href:!0});var X1a=s(tle);Tut=r(X1a,"FlaxBartForCausalLM"),X1a.forEach(t),Mut=r(Feo," (BART model)"),Feo.forEach(t),Eut=i(je),U7=n(je,"LI",{});var Teo=s(U7);Q$e=n(Teo,"STRONG",{});var z1a=s(Q$e);Cut=r(z1a,"bert"),z1a.forEach(t),wut=r(Teo," \u2014 "),ale=n(Teo,"A",{href:!0});var Q1a=s(ale);Aut=r(Q1a,"FlaxBertForCausalLM"),Q1a.forEach(t),Lut=r(Teo," (BERT model)"),Teo.forEach(t),yut=i(je),H7=n(je,"LI",{});var Meo=s(H7);W$e=n(Meo,"STRONG",{});var W1a=s(W$e);xut=r(W1a,"big_bird"),W1a.forEach(t),$ut=r(Meo," \u2014 "),nle=n(Meo,"A",{href:!0});var U1a=s(nle);kut=r(U1a,"FlaxBigBirdForCausalLM"),U1a.forEach(t),Sut=r(Meo," (BigBird model)"),Meo.forEach(t),Rut=i(je),J7=n(je,"LI",{});var Eeo=s(J7);U$e=n(Eeo,"STRONG",{});var H1a=s(U$e);Put=r(H1a,"electra"),H1a.forEach(t),But=r(Eeo," \u2014 "),sle=n(Eeo,"A",{href:!0});var J1a=s(sle);Iut=r(J1a,"FlaxElectraForCausalLM"),J1a.forEach(t),Nut=r(Eeo," (ELECTRA model)"),Eeo.forEach(t),qut=i(je),Y7=n(je,"LI",{});var Ceo=s(Y7);H$e=n(Ceo,"STRONG",{});var Y1a=s(H$e);jut=r(Y1a,"gpt2"),Y1a.forEach(t),Dut=r(Ceo," \u2014 "),lle=n(Ceo,"A",{href:!0});var Z1a=s(lle);Gut=r(Z1a,"FlaxGPT2LMHeadModel"),Z1a.forEach(t),Out=r(Ceo," (OpenAI GPT-2 model)"),Ceo.forEach(t),Vut=i(je),Z7=n(je,"LI",{});var weo=s(Z7);J$e=n(weo,"STRONG",{});var K1a=s(J$e);Xut=r(K1a,"gpt_neo"),K1a.forEach(t),zut=r(weo," \u2014 "),ile=n(weo,"A",{href:!0});var e2a=s(ile);Qut=r(e2a,"FlaxGPTNeoForCausalLM"),e2a.forEach(t),Wut=r(weo," (GPT Neo model)"),weo.forEach(t),Uut=i(je),K7=n(je,"LI",{});var Aeo=s(K7);Y$e=n(Aeo,"STRONG",{});var o2a=s(Y$e);Hut=r(o2a,"gptj"),o2a.forEach(t),Jut=r(Aeo," \u2014 "),dle=n(Aeo,"A",{href:!0});var r2a=s(dle);Yut=r(r2a,"FlaxGPTJForCausalLM"),r2a.forEach(t),Zut=r(Aeo," (GPT-J model)"),Aeo.forEach(t),Kut=i(je),eL=n(je,"LI",{});var Leo=s(eL);Z$e=n(Leo,"STRONG",{});var t2a=s(Z$e);ept=r(t2a,"opt"),t2a.forEach(t),opt=r(Leo," \u2014 "),cle=n(Leo,"A",{href:!0});var a2a=s(cle);rpt=r(a2a,"FlaxOPTForCausalLM"),a2a.forEach(t),tpt=r(Leo," (OPT model)"),Leo.forEach(t),apt=i(je),oL=n(je,"LI",{});var yeo=s(oL);K$e=n(yeo,"STRONG",{});var n2a=s(K$e);npt=r(n2a,"roberta"),n2a.forEach(t),spt=r(yeo," \u2014 "),mle=n(yeo,"A",{href:!0});var s2a=s(mle);lpt=r(s2a,"FlaxRobertaForCausalLM"),s2a.forEach(t),ipt=r(yeo," (RoBERTa model)"),yeo.forEach(t),dpt=i(je),rL=n(je,"LI",{});var xeo=s(rL);eke=n(xeo,"STRONG",{});var l2a=s(eke);cpt=r(l2a,"xglm"),l2a.forEach(t),mpt=r(xeo," \u2014 "),fle=n(xeo,"A",{href:!0});var i2a=s(fle);fpt=r(i2a,"FlaxXGLMForCausalLM"),i2a.forEach(t),gpt=r(xeo," (XGLM model)"),xeo.forEach(t),je.forEach(t),hpt=i(Vi),T(tL.$$.fragment,Vi),Vi.forEach(t),Oi.forEach(t),Xto=i(m),ef=n(m,"H2",{class:!0});var iso=s(ef);aL=n(iso,"A",{id:!0,class:!0,href:!0});var d2a=s(aL);oke=n(d2a,"SPAN",{});var c2a=s(oke);T(vP.$$.fragment,c2a),c2a.forEach(t),d2a.forEach(t),upt=i(iso),rke=n(iso,"SPAN",{});var m2a=s(rke);ppt=r(m2a,"FlaxAutoModelForPreTraining"),m2a.forEach(t),iso.forEach(t),zto=i(m),Ar=n(m,"DIV",{class:!0});var Xi=s(Ar);T(FP.$$.fragment,Xi),_pt=i(Xi),of=n(Xi,"P",{});var Uce=s(of);bpt=r(Uce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gle=n(Uce,"A",{href:!0});var f2a=s(gle);vpt=r(f2a,"from_pretrained()"),f2a.forEach(t),Fpt=r(Uce," class method or the "),hle=n(Uce,"A",{href:!0});var g2a=s(hle);Tpt=r(g2a,"from_config()"),g2a.forEach(t),Mpt=r(Uce,` class
method.`),Uce.forEach(t),Ept=i(Xi),TP=n(Xi,"P",{});var dso=s(TP);Cpt=r(dso,"This class cannot be instantiated directly using "),tke=n(dso,"CODE",{});var h2a=s(tke);wpt=r(h2a,"__init__()"),h2a.forEach(t),Apt=r(dso," (throws an error)."),dso.forEach(t),Lpt=i(Xi),ma=n(Xi,"DIV",{class:!0});var fx=s(ma);T(MP.$$.fragment,fx),ypt=i(fx),ake=n(fx,"P",{});var u2a=s(ake);xpt=r(u2a,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),u2a.forEach(t),$pt=i(fx),rf=n(fx,"P",{});var Hce=s(rf);kpt=r(Hce,`Note:
Loading a model from its configuration file does `),nke=n(Hce,"STRONG",{});var p2a=s(nke);Spt=r(p2a,"not"),p2a.forEach(t),Rpt=r(Hce,` load the model weights. It only affects the
model\u2019s configuration. Use `),ule=n(Hce,"A",{href:!0});var _2a=s(ule);Ppt=r(_2a,"from_pretrained()"),_2a.forEach(t),Bpt=r(Hce," to load the model weights."),Hce.forEach(t),Ipt=i(fx),T(nL.$$.fragment,fx),fx.forEach(t),Npt=i(Xi),rt=n(Xi,"DIV",{class:!0});var zi=s(rt);T(EP.$$.fragment,zi),qpt=i(zi),ske=n(zi,"P",{});var b2a=s(ske);jpt=r(b2a,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),b2a.forEach(t),Dpt=i(zi),Un=n(zi,"P",{});var gx=s(Un);Gpt=r(gx,"The model class to instantiate is selected based on the "),lke=n(gx,"CODE",{});var v2a=s(lke);Opt=r(v2a,"model_type"),v2a.forEach(t),Vpt=r(gx,` property of the config object (either
passed as an argument or loaded from `),ike=n(gx,"CODE",{});var F2a=s(ike);Xpt=r(F2a,"pretrained_model_name_or_path"),F2a.forEach(t),zpt=r(gx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dke=n(gx,"CODE",{});var T2a=s(dke);Qpt=r(T2a,"pretrained_model_name_or_path"),T2a.forEach(t),Wpt=r(gx,":"),gx.forEach(t),Upt=i(zi),Ee=n(zi,"UL",{});var we=s(Ee);sL=n(we,"LI",{});var $eo=s(sL);cke=n($eo,"STRONG",{});var M2a=s(cke);Hpt=r(M2a,"albert"),M2a.forEach(t),Jpt=r($eo," \u2014 "),ple=n($eo,"A",{href:!0});var E2a=s(ple);Ypt=r(E2a,"FlaxAlbertForPreTraining"),E2a.forEach(t),Zpt=r($eo," (ALBERT model)"),$eo.forEach(t),Kpt=i(we),lL=n(we,"LI",{});var keo=s(lL);mke=n(keo,"STRONG",{});var C2a=s(mke);e_t=r(C2a,"bart"),C2a.forEach(t),o_t=r(keo," \u2014 "),_le=n(keo,"A",{href:!0});var w2a=s(_le);r_t=r(w2a,"FlaxBartForConditionalGeneration"),w2a.forEach(t),t_t=r(keo," (BART model)"),keo.forEach(t),a_t=i(we),iL=n(we,"LI",{});var Seo=s(iL);fke=n(Seo,"STRONG",{});var A2a=s(fke);n_t=r(A2a,"bert"),A2a.forEach(t),s_t=r(Seo," \u2014 "),ble=n(Seo,"A",{href:!0});var L2a=s(ble);l_t=r(L2a,"FlaxBertForPreTraining"),L2a.forEach(t),i_t=r(Seo," (BERT model)"),Seo.forEach(t),d_t=i(we),dL=n(we,"LI",{});var Reo=s(dL);gke=n(Reo,"STRONG",{});var y2a=s(gke);c_t=r(y2a,"big_bird"),y2a.forEach(t),m_t=r(Reo," \u2014 "),vle=n(Reo,"A",{href:!0});var x2a=s(vle);f_t=r(x2a,"FlaxBigBirdForPreTraining"),x2a.forEach(t),g_t=r(Reo," (BigBird model)"),Reo.forEach(t),h_t=i(we),cL=n(we,"LI",{});var Peo=s(cL);hke=n(Peo,"STRONG",{});var $2a=s(hke);u_t=r($2a,"electra"),$2a.forEach(t),p_t=r(Peo," \u2014 "),Fle=n(Peo,"A",{href:!0});var k2a=s(Fle);__t=r(k2a,"FlaxElectraForPreTraining"),k2a.forEach(t),b_t=r(Peo," (ELECTRA model)"),Peo.forEach(t),v_t=i(we),mL=n(we,"LI",{});var Beo=s(mL);uke=n(Beo,"STRONG",{});var S2a=s(uke);F_t=r(S2a,"longt5"),S2a.forEach(t),T_t=r(Beo," \u2014 "),Tle=n(Beo,"A",{href:!0});var R2a=s(Tle);M_t=r(R2a,"FlaxLongT5ForConditionalGeneration"),R2a.forEach(t),E_t=r(Beo," (LongT5 model)"),Beo.forEach(t),C_t=i(we),fL=n(we,"LI",{});var Ieo=s(fL);pke=n(Ieo,"STRONG",{});var P2a=s(pke);w_t=r(P2a,"mbart"),P2a.forEach(t),A_t=r(Ieo," \u2014 "),Mle=n(Ieo,"A",{href:!0});var B2a=s(Mle);L_t=r(B2a,"FlaxMBartForConditionalGeneration"),B2a.forEach(t),y_t=r(Ieo," (mBART model)"),Ieo.forEach(t),x_t=i(we),gL=n(we,"LI",{});var Neo=s(gL);_ke=n(Neo,"STRONG",{});var I2a=s(_ke);$_t=r(I2a,"mt5"),I2a.forEach(t),k_t=r(Neo," \u2014 "),Ele=n(Neo,"A",{href:!0});var N2a=s(Ele);S_t=r(N2a,"FlaxMT5ForConditionalGeneration"),N2a.forEach(t),R_t=r(Neo," (MT5 model)"),Neo.forEach(t),P_t=i(we),hL=n(we,"LI",{});var qeo=s(hL);bke=n(qeo,"STRONG",{});var q2a=s(bke);B_t=r(q2a,"roberta"),q2a.forEach(t),I_t=r(qeo," \u2014 "),Cle=n(qeo,"A",{href:!0});var j2a=s(Cle);N_t=r(j2a,"FlaxRobertaForMaskedLM"),j2a.forEach(t),q_t=r(qeo," (RoBERTa model)"),qeo.forEach(t),j_t=i(we),uL=n(we,"LI",{});var jeo=s(uL);vke=n(jeo,"STRONG",{});var D2a=s(vke);D_t=r(D2a,"roformer"),D2a.forEach(t),G_t=r(jeo," \u2014 "),wle=n(jeo,"A",{href:!0});var G2a=s(wle);O_t=r(G2a,"FlaxRoFormerForMaskedLM"),G2a.forEach(t),V_t=r(jeo," (RoFormer model)"),jeo.forEach(t),X_t=i(we),pL=n(we,"LI",{});var Deo=s(pL);Fke=n(Deo,"STRONG",{});var O2a=s(Fke);z_t=r(O2a,"t5"),O2a.forEach(t),Q_t=r(Deo," \u2014 "),Ale=n(Deo,"A",{href:!0});var V2a=s(Ale);W_t=r(V2a,"FlaxT5ForConditionalGeneration"),V2a.forEach(t),U_t=r(Deo," (T5 model)"),Deo.forEach(t),H_t=i(we),_L=n(we,"LI",{});var Geo=s(_L);Tke=n(Geo,"STRONG",{});var X2a=s(Tke);J_t=r(X2a,"wav2vec2"),X2a.forEach(t),Y_t=r(Geo," \u2014 "),Lle=n(Geo,"A",{href:!0});var z2a=s(Lle);Z_t=r(z2a,"FlaxWav2Vec2ForPreTraining"),z2a.forEach(t),K_t=r(Geo," (Wav2Vec2 model)"),Geo.forEach(t),e1t=i(we),bL=n(we,"LI",{});var Oeo=s(bL);Mke=n(Oeo,"STRONG",{});var Q2a=s(Mke);o1t=r(Q2a,"xlm-roberta"),Q2a.forEach(t),r1t=r(Oeo," \u2014 "),yle=n(Oeo,"A",{href:!0});var W2a=s(yle);t1t=r(W2a,"FlaxXLMRobertaForMaskedLM"),W2a.forEach(t),a1t=r(Oeo," (XLM-RoBERTa model)"),Oeo.forEach(t),we.forEach(t),n1t=i(zi),T(vL.$$.fragment,zi),zi.forEach(t),Xi.forEach(t),Qto=i(m),tf=n(m,"H2",{class:!0});var cso=s(tf);FL=n(cso,"A",{id:!0,class:!0,href:!0});var U2a=s(FL);Eke=n(U2a,"SPAN",{});var H2a=s(Eke);T(CP.$$.fragment,H2a),H2a.forEach(t),U2a.forEach(t),s1t=i(cso),Cke=n(cso,"SPAN",{});var J2a=s(Cke);l1t=r(J2a,"FlaxAutoModelForMaskedLM"),J2a.forEach(t),cso.forEach(t),Wto=i(m),Lr=n(m,"DIV",{class:!0});var Qi=s(Lr);T(wP.$$.fragment,Qi),i1t=i(Qi),af=n(Qi,"P",{});var Jce=s(af);d1t=r(Jce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xle=n(Jce,"A",{href:!0});var Y2a=s(xle);c1t=r(Y2a,"from_pretrained()"),Y2a.forEach(t),m1t=r(Jce," class method or the "),$le=n(Jce,"A",{href:!0});var Z2a=s($le);f1t=r(Z2a,"from_config()"),Z2a.forEach(t),g1t=r(Jce,` class
method.`),Jce.forEach(t),h1t=i(Qi),AP=n(Qi,"P",{});var mso=s(AP);u1t=r(mso,"This class cannot be instantiated directly using "),wke=n(mso,"CODE",{});var K2a=s(wke);p1t=r(K2a,"__init__()"),K2a.forEach(t),_1t=r(mso," (throws an error)."),mso.forEach(t),b1t=i(Qi),fa=n(Qi,"DIV",{class:!0});var hx=s(fa);T(LP.$$.fragment,hx),v1t=i(hx),Ake=n(hx,"P",{});var eba=s(Ake);F1t=r(eba,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),eba.forEach(t),T1t=i(hx),nf=n(hx,"P",{});var Yce=s(nf);M1t=r(Yce,`Note:
Loading a model from its configuration file does `),Lke=n(Yce,"STRONG",{});var oba=s(Lke);E1t=r(oba,"not"),oba.forEach(t),C1t=r(Yce,` load the model weights. It only affects the
model\u2019s configuration. Use `),kle=n(Yce,"A",{href:!0});var rba=s(kle);w1t=r(rba,"from_pretrained()"),rba.forEach(t),A1t=r(Yce," to load the model weights."),Yce.forEach(t),L1t=i(hx),T(TL.$$.fragment,hx),hx.forEach(t),y1t=i(Qi),tt=n(Qi,"DIV",{class:!0});var Wi=s(tt);T(yP.$$.fragment,Wi),x1t=i(Wi),yke=n(Wi,"P",{});var tba=s(yke);$1t=r(tba,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),tba.forEach(t),k1t=i(Wi),Hn=n(Wi,"P",{});var ux=s(Hn);S1t=r(ux,"The model class to instantiate is selected based on the "),xke=n(ux,"CODE",{});var aba=s(xke);R1t=r(aba,"model_type"),aba.forEach(t),P1t=r(ux,` property of the config object (either
passed as an argument or loaded from `),$ke=n(ux,"CODE",{});var nba=s($ke);B1t=r(nba,"pretrained_model_name_or_path"),nba.forEach(t),I1t=r(ux,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kke=n(ux,"CODE",{});var sba=s(kke);N1t=r(sba,"pretrained_model_name_or_path"),sba.forEach(t),q1t=r(ux,":"),ux.forEach(t),j1t=i(Wi),ke=n(Wi,"UL",{});var De=s(ke);ML=n(De,"LI",{});var Veo=s(ML);Ske=n(Veo,"STRONG",{});var lba=s(Ske);D1t=r(lba,"albert"),lba.forEach(t),G1t=r(Veo," \u2014 "),Sle=n(Veo,"A",{href:!0});var iba=s(Sle);O1t=r(iba,"FlaxAlbertForMaskedLM"),iba.forEach(t),V1t=r(Veo," (ALBERT model)"),Veo.forEach(t),X1t=i(De),EL=n(De,"LI",{});var Xeo=s(EL);Rke=n(Xeo,"STRONG",{});var dba=s(Rke);z1t=r(dba,"bart"),dba.forEach(t),Q1t=r(Xeo," \u2014 "),Rle=n(Xeo,"A",{href:!0});var cba=s(Rle);W1t=r(cba,"FlaxBartForConditionalGeneration"),cba.forEach(t),U1t=r(Xeo," (BART model)"),Xeo.forEach(t),H1t=i(De),CL=n(De,"LI",{});var zeo=s(CL);Pke=n(zeo,"STRONG",{});var mba=s(Pke);J1t=r(mba,"bert"),mba.forEach(t),Y1t=r(zeo," \u2014 "),Ple=n(zeo,"A",{href:!0});var fba=s(Ple);Z1t=r(fba,"FlaxBertForMaskedLM"),fba.forEach(t),K1t=r(zeo," (BERT model)"),zeo.forEach(t),e2t=i(De),wL=n(De,"LI",{});var Qeo=s(wL);Bke=n(Qeo,"STRONG",{});var gba=s(Bke);o2t=r(gba,"big_bird"),gba.forEach(t),r2t=r(Qeo," \u2014 "),Ble=n(Qeo,"A",{href:!0});var hba=s(Ble);t2t=r(hba,"FlaxBigBirdForMaskedLM"),hba.forEach(t),a2t=r(Qeo," (BigBird model)"),Qeo.forEach(t),n2t=i(De),AL=n(De,"LI",{});var Weo=s(AL);Ike=n(Weo,"STRONG",{});var uba=s(Ike);s2t=r(uba,"distilbert"),uba.forEach(t),l2t=r(Weo," \u2014 "),Ile=n(Weo,"A",{href:!0});var pba=s(Ile);i2t=r(pba,"FlaxDistilBertForMaskedLM"),pba.forEach(t),d2t=r(Weo," (DistilBERT model)"),Weo.forEach(t),c2t=i(De),LL=n(De,"LI",{});var Ueo=s(LL);Nke=n(Ueo,"STRONG",{});var _ba=s(Nke);m2t=r(_ba,"electra"),_ba.forEach(t),f2t=r(Ueo," \u2014 "),Nle=n(Ueo,"A",{href:!0});var bba=s(Nle);g2t=r(bba,"FlaxElectraForMaskedLM"),bba.forEach(t),h2t=r(Ueo," (ELECTRA model)"),Ueo.forEach(t),u2t=i(De),yL=n(De,"LI",{});var Heo=s(yL);qke=n(Heo,"STRONG",{});var vba=s(qke);p2t=r(vba,"mbart"),vba.forEach(t),_2t=r(Heo," \u2014 "),qle=n(Heo,"A",{href:!0});var Fba=s(qle);b2t=r(Fba,"FlaxMBartForConditionalGeneration"),Fba.forEach(t),v2t=r(Heo," (mBART model)"),Heo.forEach(t),F2t=i(De),xL=n(De,"LI",{});var Jeo=s(xL);jke=n(Jeo,"STRONG",{});var Tba=s(jke);T2t=r(Tba,"roberta"),Tba.forEach(t),M2t=r(Jeo," \u2014 "),jle=n(Jeo,"A",{href:!0});var Mba=s(jle);E2t=r(Mba,"FlaxRobertaForMaskedLM"),Mba.forEach(t),C2t=r(Jeo," (RoBERTa model)"),Jeo.forEach(t),w2t=i(De),$L=n(De,"LI",{});var Yeo=s($L);Dke=n(Yeo,"STRONG",{});var Eba=s(Dke);A2t=r(Eba,"roformer"),Eba.forEach(t),L2t=r(Yeo," \u2014 "),Dle=n(Yeo,"A",{href:!0});var Cba=s(Dle);y2t=r(Cba,"FlaxRoFormerForMaskedLM"),Cba.forEach(t),x2t=r(Yeo," (RoFormer model)"),Yeo.forEach(t),$2t=i(De),kL=n(De,"LI",{});var Zeo=s(kL);Gke=n(Zeo,"STRONG",{});var wba=s(Gke);k2t=r(wba,"xlm-roberta"),wba.forEach(t),S2t=r(Zeo," \u2014 "),Gle=n(Zeo,"A",{href:!0});var Aba=s(Gle);R2t=r(Aba,"FlaxXLMRobertaForMaskedLM"),Aba.forEach(t),P2t=r(Zeo," (XLM-RoBERTa model)"),Zeo.forEach(t),De.forEach(t),B2t=i(Wi),T(SL.$$.fragment,Wi),Wi.forEach(t),Qi.forEach(t),Uto=i(m),sf=n(m,"H2",{class:!0});var fso=s(sf);RL=n(fso,"A",{id:!0,class:!0,href:!0});var Lba=s(RL);Oke=n(Lba,"SPAN",{});var yba=s(Oke);T(xP.$$.fragment,yba),yba.forEach(t),Lba.forEach(t),I2t=i(fso),Vke=n(fso,"SPAN",{});var xba=s(Vke);N2t=r(xba,"FlaxAutoModelForSeq2SeqLM"),xba.forEach(t),fso.forEach(t),Hto=i(m),yr=n(m,"DIV",{class:!0});var Ui=s(yr);T($P.$$.fragment,Ui),q2t=i(Ui),lf=n(Ui,"P",{});var Zce=s(lf);j2t=r(Zce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ole=n(Zce,"A",{href:!0});var $ba=s(Ole);D2t=r($ba,"from_pretrained()"),$ba.forEach(t),G2t=r(Zce," class method or the "),Vle=n(Zce,"A",{href:!0});var kba=s(Vle);O2t=r(kba,"from_config()"),kba.forEach(t),V2t=r(Zce,` class
method.`),Zce.forEach(t),X2t=i(Ui),kP=n(Ui,"P",{});var gso=s(kP);z2t=r(gso,"This class cannot be instantiated directly using "),Xke=n(gso,"CODE",{});var Sba=s(Xke);Q2t=r(Sba,"__init__()"),Sba.forEach(t),W2t=r(gso," (throws an error)."),gso.forEach(t),U2t=i(Ui),ga=n(Ui,"DIV",{class:!0});var px=s(ga);T(SP.$$.fragment,px),H2t=i(px),zke=n(px,"P",{});var Rba=s(zke);J2t=r(Rba,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Rba.forEach(t),Y2t=i(px),df=n(px,"P",{});var Kce=s(df);Z2t=r(Kce,`Note:
Loading a model from its configuration file does `),Qke=n(Kce,"STRONG",{});var Pba=s(Qke);K2t=r(Pba,"not"),Pba.forEach(t),ebt=r(Kce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xle=n(Kce,"A",{href:!0});var Bba=s(Xle);obt=r(Bba,"from_pretrained()"),Bba.forEach(t),rbt=r(Kce," to load the model weights."),Kce.forEach(t),tbt=i(px),T(PL.$$.fragment,px),px.forEach(t),abt=i(Ui),at=n(Ui,"DIV",{class:!0});var Hi=s(at);T(RP.$$.fragment,Hi),nbt=i(Hi),Wke=n(Hi,"P",{});var Iba=s(Wke);sbt=r(Iba,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Iba.forEach(t),lbt=i(Hi),Jn=n(Hi,"P",{});var _x=s(Jn);ibt=r(_x,"The model class to instantiate is selected based on the "),Uke=n(_x,"CODE",{});var Nba=s(Uke);dbt=r(Nba,"model_type"),Nba.forEach(t),cbt=r(_x,` property of the config object (either
passed as an argument or loaded from `),Hke=n(_x,"CODE",{});var qba=s(Hke);mbt=r(qba,"pretrained_model_name_or_path"),qba.forEach(t),fbt=r(_x,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jke=n(_x,"CODE",{});var jba=s(Jke);gbt=r(jba,"pretrained_model_name_or_path"),jba.forEach(t),hbt=r(_x,":"),_x.forEach(t),ubt=i(Hi),Se=n(Hi,"UL",{});var Ge=s(Se);BL=n(Ge,"LI",{});var Keo=s(BL);Yke=n(Keo,"STRONG",{});var Dba=s(Yke);pbt=r(Dba,"bart"),Dba.forEach(t),_bt=r(Keo," \u2014 "),zle=n(Keo,"A",{href:!0});var Gba=s(zle);bbt=r(Gba,"FlaxBartForConditionalGeneration"),Gba.forEach(t),vbt=r(Keo," (BART model)"),Keo.forEach(t),Fbt=i(Ge),IL=n(Ge,"LI",{});var eoo=s(IL);Zke=n(eoo,"STRONG",{});var Oba=s(Zke);Tbt=r(Oba,"blenderbot"),Oba.forEach(t),Mbt=r(eoo," \u2014 "),Qle=n(eoo,"A",{href:!0});var Vba=s(Qle);Ebt=r(Vba,"FlaxBlenderbotForConditionalGeneration"),Vba.forEach(t),Cbt=r(eoo," (Blenderbot model)"),eoo.forEach(t),wbt=i(Ge),NL=n(Ge,"LI",{});var ooo=s(NL);Kke=n(ooo,"STRONG",{});var Xba=s(Kke);Abt=r(Xba,"blenderbot-small"),Xba.forEach(t),Lbt=r(ooo," \u2014 "),Wle=n(ooo,"A",{href:!0});var zba=s(Wle);ybt=r(zba,"FlaxBlenderbotSmallForConditionalGeneration"),zba.forEach(t),xbt=r(ooo," (BlenderbotSmall model)"),ooo.forEach(t),$bt=i(Ge),qL=n(Ge,"LI",{});var roo=s(qL);eSe=n(roo,"STRONG",{});var Qba=s(eSe);kbt=r(Qba,"encoder-decoder"),Qba.forEach(t),Sbt=r(roo," \u2014 "),Ule=n(roo,"A",{href:!0});var Wba=s(Ule);Rbt=r(Wba,"FlaxEncoderDecoderModel"),Wba.forEach(t),Pbt=r(roo," (Encoder decoder model)"),roo.forEach(t),Bbt=i(Ge),jL=n(Ge,"LI",{});var too=s(jL);oSe=n(too,"STRONG",{});var Uba=s(oSe);Ibt=r(Uba,"longt5"),Uba.forEach(t),Nbt=r(too," \u2014 "),Hle=n(too,"A",{href:!0});var Hba=s(Hle);qbt=r(Hba,"FlaxLongT5ForConditionalGeneration"),Hba.forEach(t),jbt=r(too," (LongT5 model)"),too.forEach(t),Dbt=i(Ge),DL=n(Ge,"LI",{});var aoo=s(DL);rSe=n(aoo,"STRONG",{});var Jba=s(rSe);Gbt=r(Jba,"marian"),Jba.forEach(t),Obt=r(aoo," \u2014 "),Jle=n(aoo,"A",{href:!0});var Yba=s(Jle);Vbt=r(Yba,"FlaxMarianMTModel"),Yba.forEach(t),Xbt=r(aoo," (Marian model)"),aoo.forEach(t),zbt=i(Ge),GL=n(Ge,"LI",{});var noo=s(GL);tSe=n(noo,"STRONG",{});var Zba=s(tSe);Qbt=r(Zba,"mbart"),Zba.forEach(t),Wbt=r(noo," \u2014 "),Yle=n(noo,"A",{href:!0});var Kba=s(Yle);Ubt=r(Kba,"FlaxMBartForConditionalGeneration"),Kba.forEach(t),Hbt=r(noo," (mBART model)"),noo.forEach(t),Jbt=i(Ge),OL=n(Ge,"LI",{});var soo=s(OL);aSe=n(soo,"STRONG",{});var eva=s(aSe);Ybt=r(eva,"mt5"),eva.forEach(t),Zbt=r(soo," \u2014 "),Zle=n(soo,"A",{href:!0});var ova=s(Zle);Kbt=r(ova,"FlaxMT5ForConditionalGeneration"),ova.forEach(t),evt=r(soo," (MT5 model)"),soo.forEach(t),ovt=i(Ge),VL=n(Ge,"LI",{});var loo=s(VL);nSe=n(loo,"STRONG",{});var rva=s(nSe);rvt=r(rva,"pegasus"),rva.forEach(t),tvt=r(loo," \u2014 "),Kle=n(loo,"A",{href:!0});var tva=s(Kle);avt=r(tva,"FlaxPegasusForConditionalGeneration"),tva.forEach(t),nvt=r(loo," (Pegasus model)"),loo.forEach(t),svt=i(Ge),XL=n(Ge,"LI",{});var ioo=s(XL);sSe=n(ioo,"STRONG",{});var ava=s(sSe);lvt=r(ava,"t5"),ava.forEach(t),ivt=r(ioo," \u2014 "),eie=n(ioo,"A",{href:!0});var nva=s(eie);dvt=r(nva,"FlaxT5ForConditionalGeneration"),nva.forEach(t),cvt=r(ioo," (T5 model)"),ioo.forEach(t),Ge.forEach(t),mvt=i(Hi),T(zL.$$.fragment,Hi),Hi.forEach(t),Ui.forEach(t),Jto=i(m),cf=n(m,"H2",{class:!0});var hso=s(cf);QL=n(hso,"A",{id:!0,class:!0,href:!0});var sva=s(QL);lSe=n(sva,"SPAN",{});var lva=s(lSe);T(PP.$$.fragment,lva),lva.forEach(t),sva.forEach(t),fvt=i(hso),iSe=n(hso,"SPAN",{});var iva=s(iSe);gvt=r(iva,"FlaxAutoModelForSequenceClassification"),iva.forEach(t),hso.forEach(t),Yto=i(m),xr=n(m,"DIV",{class:!0});var Ji=s(xr);T(BP.$$.fragment,Ji),hvt=i(Ji),mf=n(Ji,"P",{});var eme=s(mf);uvt=r(eme,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),oie=n(eme,"A",{href:!0});var dva=s(oie);pvt=r(dva,"from_pretrained()"),dva.forEach(t),_vt=r(eme," class method or the "),rie=n(eme,"A",{href:!0});var cva=s(rie);bvt=r(cva,"from_config()"),cva.forEach(t),vvt=r(eme,` class
method.`),eme.forEach(t),Fvt=i(Ji),IP=n(Ji,"P",{});var uso=s(IP);Tvt=r(uso,"This class cannot be instantiated directly using "),dSe=n(uso,"CODE",{});var mva=s(dSe);Mvt=r(mva,"__init__()"),mva.forEach(t),Evt=r(uso," (throws an error)."),uso.forEach(t),Cvt=i(Ji),ha=n(Ji,"DIV",{class:!0});var bx=s(ha);T(NP.$$.fragment,bx),wvt=i(bx),cSe=n(bx,"P",{});var fva=s(cSe);Avt=r(fva,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),fva.forEach(t),Lvt=i(bx),ff=n(bx,"P",{});var ome=s(ff);yvt=r(ome,`Note:
Loading a model from its configuration file does `),mSe=n(ome,"STRONG",{});var gva=s(mSe);xvt=r(gva,"not"),gva.forEach(t),$vt=r(ome,` load the model weights. It only affects the
model\u2019s configuration. Use `),tie=n(ome,"A",{href:!0});var hva=s(tie);kvt=r(hva,"from_pretrained()"),hva.forEach(t),Svt=r(ome," to load the model weights."),ome.forEach(t),Rvt=i(bx),T(WL.$$.fragment,bx),bx.forEach(t),Pvt=i(Ji),nt=n(Ji,"DIV",{class:!0});var Yi=s(nt);T(qP.$$.fragment,Yi),Bvt=i(Yi),fSe=n(Yi,"P",{});var uva=s(fSe);Ivt=r(uva,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),uva.forEach(t),Nvt=i(Yi),Yn=n(Yi,"P",{});var vx=s(Yn);qvt=r(vx,"The model class to instantiate is selected based on the "),gSe=n(vx,"CODE",{});var pva=s(gSe);jvt=r(pva,"model_type"),pva.forEach(t),Dvt=r(vx,` property of the config object (either
passed as an argument or loaded from `),hSe=n(vx,"CODE",{});var _va=s(hSe);Gvt=r(_va,"pretrained_model_name_or_path"),_va.forEach(t),Ovt=r(vx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uSe=n(vx,"CODE",{});var bva=s(uSe);Vvt=r(bva,"pretrained_model_name_or_path"),bva.forEach(t),Xvt=r(vx,":"),vx.forEach(t),zvt=i(Yi),Re=n(Yi,"UL",{});var Oe=s(Re);UL=n(Oe,"LI",{});var doo=s(UL);pSe=n(doo,"STRONG",{});var vva=s(pSe);Qvt=r(vva,"albert"),vva.forEach(t),Wvt=r(doo," \u2014 "),aie=n(doo,"A",{href:!0});var Fva=s(aie);Uvt=r(Fva,"FlaxAlbertForSequenceClassification"),Fva.forEach(t),Hvt=r(doo," (ALBERT model)"),doo.forEach(t),Jvt=i(Oe),HL=n(Oe,"LI",{});var coo=s(HL);_Se=n(coo,"STRONG",{});var Tva=s(_Se);Yvt=r(Tva,"bart"),Tva.forEach(t),Zvt=r(coo," \u2014 "),nie=n(coo,"A",{href:!0});var Mva=s(nie);Kvt=r(Mva,"FlaxBartForSequenceClassification"),Mva.forEach(t),eFt=r(coo," (BART model)"),coo.forEach(t),oFt=i(Oe),JL=n(Oe,"LI",{});var moo=s(JL);bSe=n(moo,"STRONG",{});var Eva=s(bSe);rFt=r(Eva,"bert"),Eva.forEach(t),tFt=r(moo," \u2014 "),sie=n(moo,"A",{href:!0});var Cva=s(sie);aFt=r(Cva,"FlaxBertForSequenceClassification"),Cva.forEach(t),nFt=r(moo," (BERT model)"),moo.forEach(t),sFt=i(Oe),YL=n(Oe,"LI",{});var foo=s(YL);vSe=n(foo,"STRONG",{});var wva=s(vSe);lFt=r(wva,"big_bird"),wva.forEach(t),iFt=r(foo," \u2014 "),lie=n(foo,"A",{href:!0});var Ava=s(lie);dFt=r(Ava,"FlaxBigBirdForSequenceClassification"),Ava.forEach(t),cFt=r(foo," (BigBird model)"),foo.forEach(t),mFt=i(Oe),ZL=n(Oe,"LI",{});var goo=s(ZL);FSe=n(goo,"STRONG",{});var Lva=s(FSe);fFt=r(Lva,"distilbert"),Lva.forEach(t),gFt=r(goo," \u2014 "),iie=n(goo,"A",{href:!0});var yva=s(iie);hFt=r(yva,"FlaxDistilBertForSequenceClassification"),yva.forEach(t),uFt=r(goo," (DistilBERT model)"),goo.forEach(t),pFt=i(Oe),KL=n(Oe,"LI",{});var hoo=s(KL);TSe=n(hoo,"STRONG",{});var xva=s(TSe);_Ft=r(xva,"electra"),xva.forEach(t),bFt=r(hoo," \u2014 "),die=n(hoo,"A",{href:!0});var $va=s(die);vFt=r($va,"FlaxElectraForSequenceClassification"),$va.forEach(t),FFt=r(hoo," (ELECTRA model)"),hoo.forEach(t),TFt=i(Oe),e8=n(Oe,"LI",{});var uoo=s(e8);MSe=n(uoo,"STRONG",{});var kva=s(MSe);MFt=r(kva,"mbart"),kva.forEach(t),EFt=r(uoo," \u2014 "),cie=n(uoo,"A",{href:!0});var Sva=s(cie);CFt=r(Sva,"FlaxMBartForSequenceClassification"),Sva.forEach(t),wFt=r(uoo," (mBART model)"),uoo.forEach(t),AFt=i(Oe),o8=n(Oe,"LI",{});var poo=s(o8);ESe=n(poo,"STRONG",{});var Rva=s(ESe);LFt=r(Rva,"roberta"),Rva.forEach(t),yFt=r(poo," \u2014 "),mie=n(poo,"A",{href:!0});var Pva=s(mie);xFt=r(Pva,"FlaxRobertaForSequenceClassification"),Pva.forEach(t),$Ft=r(poo," (RoBERTa model)"),poo.forEach(t),kFt=i(Oe),r8=n(Oe,"LI",{});var _oo=s(r8);CSe=n(_oo,"STRONG",{});var Bva=s(CSe);SFt=r(Bva,"roformer"),Bva.forEach(t),RFt=r(_oo," \u2014 "),fie=n(_oo,"A",{href:!0});var Iva=s(fie);PFt=r(Iva,"FlaxRoFormerForSequenceClassification"),Iva.forEach(t),BFt=r(_oo," (RoFormer model)"),_oo.forEach(t),IFt=i(Oe),t8=n(Oe,"LI",{});var boo=s(t8);wSe=n(boo,"STRONG",{});var Nva=s(wSe);NFt=r(Nva,"xlm-roberta"),Nva.forEach(t),qFt=r(boo," \u2014 "),gie=n(boo,"A",{href:!0});var qva=s(gie);jFt=r(qva,"FlaxXLMRobertaForSequenceClassification"),qva.forEach(t),DFt=r(boo," (XLM-RoBERTa model)"),boo.forEach(t),Oe.forEach(t),GFt=i(Yi),T(a8.$$.fragment,Yi),Yi.forEach(t),Ji.forEach(t),Zto=i(m),gf=n(m,"H2",{class:!0});var pso=s(gf);n8=n(pso,"A",{id:!0,class:!0,href:!0});var jva=s(n8);ASe=n(jva,"SPAN",{});var Dva=s(ASe);T(jP.$$.fragment,Dva),Dva.forEach(t),jva.forEach(t),OFt=i(pso),LSe=n(pso,"SPAN",{});var Gva=s(LSe);VFt=r(Gva,"FlaxAutoModelForQuestionAnswering"),Gva.forEach(t),pso.forEach(t),Kto=i(m),$r=n(m,"DIV",{class:!0});var Zi=s($r);T(DP.$$.fragment,Zi),XFt=i(Zi),hf=n(Zi,"P",{});var rme=s(hf);zFt=r(rme,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hie=n(rme,"A",{href:!0});var Ova=s(hie);QFt=r(Ova,"from_pretrained()"),Ova.forEach(t),WFt=r(rme," class method or the "),uie=n(rme,"A",{href:!0});var Vva=s(uie);UFt=r(Vva,"from_config()"),Vva.forEach(t),HFt=r(rme,` class
method.`),rme.forEach(t),JFt=i(Zi),GP=n(Zi,"P",{});var _so=s(GP);YFt=r(_so,"This class cannot be instantiated directly using "),ySe=n(_so,"CODE",{});var Xva=s(ySe);ZFt=r(Xva,"__init__()"),Xva.forEach(t),KFt=r(_so," (throws an error)."),_so.forEach(t),eTt=i(Zi),ua=n(Zi,"DIV",{class:!0});var Fx=s(ua);T(OP.$$.fragment,Fx),oTt=i(Fx),xSe=n(Fx,"P",{});var zva=s(xSe);rTt=r(zva,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zva.forEach(t),tTt=i(Fx),uf=n(Fx,"P",{});var tme=s(uf);aTt=r(tme,`Note:
Loading a model from its configuration file does `),$Se=n(tme,"STRONG",{});var Qva=s($Se);nTt=r(Qva,"not"),Qva.forEach(t),sTt=r(tme,` load the model weights. It only affects the
model\u2019s configuration. Use `),pie=n(tme,"A",{href:!0});var Wva=s(pie);lTt=r(Wva,"from_pretrained()"),Wva.forEach(t),iTt=r(tme," to load the model weights."),tme.forEach(t),dTt=i(Fx),T(s8.$$.fragment,Fx),Fx.forEach(t),cTt=i(Zi),st=n(Zi,"DIV",{class:!0});var Ki=s(st);T(VP.$$.fragment,Ki),mTt=i(Ki),kSe=n(Ki,"P",{});var Uva=s(kSe);fTt=r(Uva,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Uva.forEach(t),gTt=i(Ki),Zn=n(Ki,"P",{});var Tx=s(Zn);hTt=r(Tx,"The model class to instantiate is selected based on the "),SSe=n(Tx,"CODE",{});var Hva=s(SSe);uTt=r(Hva,"model_type"),Hva.forEach(t),pTt=r(Tx,` property of the config object (either
passed as an argument or loaded from `),RSe=n(Tx,"CODE",{});var Jva=s(RSe);_Tt=r(Jva,"pretrained_model_name_or_path"),Jva.forEach(t),bTt=r(Tx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PSe=n(Tx,"CODE",{});var Yva=s(PSe);vTt=r(Yva,"pretrained_model_name_or_path"),Yva.forEach(t),FTt=r(Tx,":"),Tx.forEach(t),TTt=i(Ki),Pe=n(Ki,"UL",{});var Ve=s(Pe);l8=n(Ve,"LI",{});var voo=s(l8);BSe=n(voo,"STRONG",{});var Zva=s(BSe);MTt=r(Zva,"albert"),Zva.forEach(t),ETt=r(voo," \u2014 "),_ie=n(voo,"A",{href:!0});var Kva=s(_ie);CTt=r(Kva,"FlaxAlbertForQuestionAnswering"),Kva.forEach(t),wTt=r(voo," (ALBERT model)"),voo.forEach(t),ATt=i(Ve),i8=n(Ve,"LI",{});var Foo=s(i8);ISe=n(Foo,"STRONG",{});var eFa=s(ISe);LTt=r(eFa,"bart"),eFa.forEach(t),yTt=r(Foo," \u2014 "),bie=n(Foo,"A",{href:!0});var oFa=s(bie);xTt=r(oFa,"FlaxBartForQuestionAnswering"),oFa.forEach(t),$Tt=r(Foo," (BART model)"),Foo.forEach(t),kTt=i(Ve),d8=n(Ve,"LI",{});var Too=s(d8);NSe=n(Too,"STRONG",{});var rFa=s(NSe);STt=r(rFa,"bert"),rFa.forEach(t),RTt=r(Too," \u2014 "),vie=n(Too,"A",{href:!0});var tFa=s(vie);PTt=r(tFa,"FlaxBertForQuestionAnswering"),tFa.forEach(t),BTt=r(Too," (BERT model)"),Too.forEach(t),ITt=i(Ve),c8=n(Ve,"LI",{});var Moo=s(c8);qSe=n(Moo,"STRONG",{});var aFa=s(qSe);NTt=r(aFa,"big_bird"),aFa.forEach(t),qTt=r(Moo," \u2014 "),Fie=n(Moo,"A",{href:!0});var nFa=s(Fie);jTt=r(nFa,"FlaxBigBirdForQuestionAnswering"),nFa.forEach(t),DTt=r(Moo," (BigBird model)"),Moo.forEach(t),GTt=i(Ve),m8=n(Ve,"LI",{});var Eoo=s(m8);jSe=n(Eoo,"STRONG",{});var sFa=s(jSe);OTt=r(sFa,"distilbert"),sFa.forEach(t),VTt=r(Eoo," \u2014 "),Tie=n(Eoo,"A",{href:!0});var lFa=s(Tie);XTt=r(lFa,"FlaxDistilBertForQuestionAnswering"),lFa.forEach(t),zTt=r(Eoo," (DistilBERT model)"),Eoo.forEach(t),QTt=i(Ve),f8=n(Ve,"LI",{});var Coo=s(f8);DSe=n(Coo,"STRONG",{});var iFa=s(DSe);WTt=r(iFa,"electra"),iFa.forEach(t),UTt=r(Coo," \u2014 "),Mie=n(Coo,"A",{href:!0});var dFa=s(Mie);HTt=r(dFa,"FlaxElectraForQuestionAnswering"),dFa.forEach(t),JTt=r(Coo," (ELECTRA model)"),Coo.forEach(t),YTt=i(Ve),g8=n(Ve,"LI",{});var woo=s(g8);GSe=n(woo,"STRONG",{});var cFa=s(GSe);ZTt=r(cFa,"mbart"),cFa.forEach(t),KTt=r(woo," \u2014 "),Eie=n(woo,"A",{href:!0});var mFa=s(Eie);eMt=r(mFa,"FlaxMBartForQuestionAnswering"),mFa.forEach(t),oMt=r(woo," (mBART model)"),woo.forEach(t),rMt=i(Ve),h8=n(Ve,"LI",{});var Aoo=s(h8);OSe=n(Aoo,"STRONG",{});var fFa=s(OSe);tMt=r(fFa,"roberta"),fFa.forEach(t),aMt=r(Aoo," \u2014 "),Cie=n(Aoo,"A",{href:!0});var gFa=s(Cie);nMt=r(gFa,"FlaxRobertaForQuestionAnswering"),gFa.forEach(t),sMt=r(Aoo," (RoBERTa model)"),Aoo.forEach(t),lMt=i(Ve),u8=n(Ve,"LI",{});var Loo=s(u8);VSe=n(Loo,"STRONG",{});var hFa=s(VSe);iMt=r(hFa,"roformer"),hFa.forEach(t),dMt=r(Loo," \u2014 "),wie=n(Loo,"A",{href:!0});var uFa=s(wie);cMt=r(uFa,"FlaxRoFormerForQuestionAnswering"),uFa.forEach(t),mMt=r(Loo," (RoFormer model)"),Loo.forEach(t),fMt=i(Ve),p8=n(Ve,"LI",{});var yoo=s(p8);XSe=n(yoo,"STRONG",{});var pFa=s(XSe);gMt=r(pFa,"xlm-roberta"),pFa.forEach(t),hMt=r(yoo," \u2014 "),Aie=n(yoo,"A",{href:!0});var _Fa=s(Aie);uMt=r(_Fa,"FlaxXLMRobertaForQuestionAnswering"),_Fa.forEach(t),pMt=r(yoo," (XLM-RoBERTa model)"),yoo.forEach(t),Ve.forEach(t),_Mt=i(Ki),T(_8.$$.fragment,Ki),Ki.forEach(t),Zi.forEach(t),eao=i(m),pf=n(m,"H2",{class:!0});var bso=s(pf);b8=n(bso,"A",{id:!0,class:!0,href:!0});var bFa=s(b8);zSe=n(bFa,"SPAN",{});var vFa=s(zSe);T(XP.$$.fragment,vFa),vFa.forEach(t),bFa.forEach(t),bMt=i(bso),QSe=n(bso,"SPAN",{});var FFa=s(QSe);vMt=r(FFa,"FlaxAutoModelForTokenClassification"),FFa.forEach(t),bso.forEach(t),oao=i(m),kr=n(m,"DIV",{class:!0});var ed=s(kr);T(zP.$$.fragment,ed),FMt=i(ed),_f=n(ed,"P",{});var ame=s(_f);TMt=r(ame,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Lie=n(ame,"A",{href:!0});var TFa=s(Lie);MMt=r(TFa,"from_pretrained()"),TFa.forEach(t),EMt=r(ame," class method or the "),yie=n(ame,"A",{href:!0});var MFa=s(yie);CMt=r(MFa,"from_config()"),MFa.forEach(t),wMt=r(ame,` class
method.`),ame.forEach(t),AMt=i(ed),QP=n(ed,"P",{});var vso=s(QP);LMt=r(vso,"This class cannot be instantiated directly using "),WSe=n(vso,"CODE",{});var EFa=s(WSe);yMt=r(EFa,"__init__()"),EFa.forEach(t),xMt=r(vso," (throws an error)."),vso.forEach(t),$Mt=i(ed),pa=n(ed,"DIV",{class:!0});var Mx=s(pa);T(WP.$$.fragment,Mx),kMt=i(Mx),USe=n(Mx,"P",{});var CFa=s(USe);SMt=r(CFa,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),CFa.forEach(t),RMt=i(Mx),bf=n(Mx,"P",{});var nme=s(bf);PMt=r(nme,`Note:
Loading a model from its configuration file does `),HSe=n(nme,"STRONG",{});var wFa=s(HSe);BMt=r(wFa,"not"),wFa.forEach(t),IMt=r(nme,` load the model weights. It only affects the
model\u2019s configuration. Use `),xie=n(nme,"A",{href:!0});var AFa=s(xie);NMt=r(AFa,"from_pretrained()"),AFa.forEach(t),qMt=r(nme," to load the model weights."),nme.forEach(t),jMt=i(Mx),T(v8.$$.fragment,Mx),Mx.forEach(t),DMt=i(ed),lt=n(ed,"DIV",{class:!0});var od=s(lt);T(UP.$$.fragment,od),GMt=i(od),JSe=n(od,"P",{});var LFa=s(JSe);OMt=r(LFa,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),LFa.forEach(t),VMt=i(od),Kn=n(od,"P",{});var Ex=s(Kn);XMt=r(Ex,"The model class to instantiate is selected based on the "),YSe=n(Ex,"CODE",{});var yFa=s(YSe);zMt=r(yFa,"model_type"),yFa.forEach(t),QMt=r(Ex,` property of the config object (either
passed as an argument or loaded from `),ZSe=n(Ex,"CODE",{});var xFa=s(ZSe);WMt=r(xFa,"pretrained_model_name_or_path"),xFa.forEach(t),UMt=r(Ex,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KSe=n(Ex,"CODE",{});var $Fa=s(KSe);HMt=r($Fa,"pretrained_model_name_or_path"),$Fa.forEach(t),JMt=r(Ex,":"),Ex.forEach(t),YMt=i(od),ze=n(od,"UL",{});var Lo=s(ze);F8=n(Lo,"LI",{});var xoo=s(F8);eRe=n(xoo,"STRONG",{});var kFa=s(eRe);ZMt=r(kFa,"albert"),kFa.forEach(t),KMt=r(xoo," \u2014 "),$ie=n(xoo,"A",{href:!0});var SFa=s($ie);eEt=r(SFa,"FlaxAlbertForTokenClassification"),SFa.forEach(t),oEt=r(xoo," (ALBERT model)"),xoo.forEach(t),rEt=i(Lo),T8=n(Lo,"LI",{});var $oo=s(T8);oRe=n($oo,"STRONG",{});var RFa=s(oRe);tEt=r(RFa,"bert"),RFa.forEach(t),aEt=r($oo," \u2014 "),kie=n($oo,"A",{href:!0});var PFa=s(kie);nEt=r(PFa,"FlaxBertForTokenClassification"),PFa.forEach(t),sEt=r($oo," (BERT model)"),$oo.forEach(t),lEt=i(Lo),M8=n(Lo,"LI",{});var koo=s(M8);rRe=n(koo,"STRONG",{});var BFa=s(rRe);iEt=r(BFa,"big_bird"),BFa.forEach(t),dEt=r(koo," \u2014 "),Sie=n(koo,"A",{href:!0});var IFa=s(Sie);cEt=r(IFa,"FlaxBigBirdForTokenClassification"),IFa.forEach(t),mEt=r(koo," (BigBird model)"),koo.forEach(t),fEt=i(Lo),E8=n(Lo,"LI",{});var Soo=s(E8);tRe=n(Soo,"STRONG",{});var NFa=s(tRe);gEt=r(NFa,"distilbert"),NFa.forEach(t),hEt=r(Soo," \u2014 "),Rie=n(Soo,"A",{href:!0});var qFa=s(Rie);uEt=r(qFa,"FlaxDistilBertForTokenClassification"),qFa.forEach(t),pEt=r(Soo," (DistilBERT model)"),Soo.forEach(t),_Et=i(Lo),C8=n(Lo,"LI",{});var Roo=s(C8);aRe=n(Roo,"STRONG",{});var jFa=s(aRe);bEt=r(jFa,"electra"),jFa.forEach(t),vEt=r(Roo," \u2014 "),Pie=n(Roo,"A",{href:!0});var DFa=s(Pie);FEt=r(DFa,"FlaxElectraForTokenClassification"),DFa.forEach(t),TEt=r(Roo," (ELECTRA model)"),Roo.forEach(t),MEt=i(Lo),w8=n(Lo,"LI",{});var Poo=s(w8);nRe=n(Poo,"STRONG",{});var GFa=s(nRe);EEt=r(GFa,"roberta"),GFa.forEach(t),CEt=r(Poo," \u2014 "),Bie=n(Poo,"A",{href:!0});var OFa=s(Bie);wEt=r(OFa,"FlaxRobertaForTokenClassification"),OFa.forEach(t),AEt=r(Poo," (RoBERTa model)"),Poo.forEach(t),LEt=i(Lo),A8=n(Lo,"LI",{});var Boo=s(A8);sRe=n(Boo,"STRONG",{});var VFa=s(sRe);yEt=r(VFa,"roformer"),VFa.forEach(t),xEt=r(Boo," \u2014 "),Iie=n(Boo,"A",{href:!0});var XFa=s(Iie);$Et=r(XFa,"FlaxRoFormerForTokenClassification"),XFa.forEach(t),kEt=r(Boo," (RoFormer model)"),Boo.forEach(t),SEt=i(Lo),L8=n(Lo,"LI",{});var Ioo=s(L8);lRe=n(Ioo,"STRONG",{});var zFa=s(lRe);REt=r(zFa,"xlm-roberta"),zFa.forEach(t),PEt=r(Ioo," \u2014 "),Nie=n(Ioo,"A",{href:!0});var QFa=s(Nie);BEt=r(QFa,"FlaxXLMRobertaForTokenClassification"),QFa.forEach(t),IEt=r(Ioo," (XLM-RoBERTa model)"),Ioo.forEach(t),Lo.forEach(t),NEt=i(od),T(y8.$$.fragment,od),od.forEach(t),ed.forEach(t),rao=i(m),vf=n(m,"H2",{class:!0});var Fso=s(vf);x8=n(Fso,"A",{id:!0,class:!0,href:!0});var WFa=s(x8);iRe=n(WFa,"SPAN",{});var UFa=s(iRe);T(HP.$$.fragment,UFa),UFa.forEach(t),WFa.forEach(t),qEt=i(Fso),dRe=n(Fso,"SPAN",{});var HFa=s(dRe);jEt=r(HFa,"FlaxAutoModelForMultipleChoice"),HFa.forEach(t),Fso.forEach(t),tao=i(m),Sr=n(m,"DIV",{class:!0});var rd=s(Sr);T(JP.$$.fragment,rd),DEt=i(rd),Ff=n(rd,"P",{});var sme=s(Ff);GEt=r(sme,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),qie=n(sme,"A",{href:!0});var JFa=s(qie);OEt=r(JFa,"from_pretrained()"),JFa.forEach(t),VEt=r(sme," class method or the "),jie=n(sme,"A",{href:!0});var YFa=s(jie);XEt=r(YFa,"from_config()"),YFa.forEach(t),zEt=r(sme,` class
method.`),sme.forEach(t),QEt=i(rd),YP=n(rd,"P",{});var Tso=s(YP);WEt=r(Tso,"This class cannot be instantiated directly using "),cRe=n(Tso,"CODE",{});var ZFa=s(cRe);UEt=r(ZFa,"__init__()"),ZFa.forEach(t),HEt=r(Tso," (throws an error)."),Tso.forEach(t),JEt=i(rd),_a=n(rd,"DIV",{class:!0});var Cx=s(_a);T(ZP.$$.fragment,Cx),YEt=i(Cx),mRe=n(Cx,"P",{});var KFa=s(mRe);ZEt=r(KFa,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),KFa.forEach(t),KEt=i(Cx),Tf=n(Cx,"P",{});var lme=s(Tf);e4t=r(lme,`Note:
Loading a model from its configuration file does `),fRe=n(lme,"STRONG",{});var eTa=s(fRe);o4t=r(eTa,"not"),eTa.forEach(t),r4t=r(lme,` load the model weights. It only affects the
model\u2019s configuration. Use `),Die=n(lme,"A",{href:!0});var oTa=s(Die);t4t=r(oTa,"from_pretrained()"),oTa.forEach(t),a4t=r(lme," to load the model weights."),lme.forEach(t),n4t=i(Cx),T($8.$$.fragment,Cx),Cx.forEach(t),s4t=i(rd),it=n(rd,"DIV",{class:!0});var td=s(it);T(KP.$$.fragment,td),l4t=i(td),gRe=n(td,"P",{});var rTa=s(gRe);i4t=r(rTa,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rTa.forEach(t),d4t=i(td),es=n(td,"P",{});var wx=s(es);c4t=r(wx,"The model class to instantiate is selected based on the "),hRe=n(wx,"CODE",{});var tTa=s(hRe);m4t=r(tTa,"model_type"),tTa.forEach(t),f4t=r(wx,` property of the config object (either
passed as an argument or loaded from `),uRe=n(wx,"CODE",{});var aTa=s(uRe);g4t=r(aTa,"pretrained_model_name_or_path"),aTa.forEach(t),h4t=r(wx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pRe=n(wx,"CODE",{});var nTa=s(pRe);u4t=r(nTa,"pretrained_model_name_or_path"),nTa.forEach(t),p4t=r(wx,":"),wx.forEach(t),_4t=i(td),Qe=n(td,"UL",{});var yo=s(Qe);k8=n(yo,"LI",{});var Noo=s(k8);_Re=n(Noo,"STRONG",{});var sTa=s(_Re);b4t=r(sTa,"albert"),sTa.forEach(t),v4t=r(Noo," \u2014 "),Gie=n(Noo,"A",{href:!0});var lTa=s(Gie);F4t=r(lTa,"FlaxAlbertForMultipleChoice"),lTa.forEach(t),T4t=r(Noo," (ALBERT model)"),Noo.forEach(t),M4t=i(yo),S8=n(yo,"LI",{});var qoo=s(S8);bRe=n(qoo,"STRONG",{});var iTa=s(bRe);E4t=r(iTa,"bert"),iTa.forEach(t),C4t=r(qoo," \u2014 "),Oie=n(qoo,"A",{href:!0});var dTa=s(Oie);w4t=r(dTa,"FlaxBertForMultipleChoice"),dTa.forEach(t),A4t=r(qoo," (BERT model)"),qoo.forEach(t),L4t=i(yo),R8=n(yo,"LI",{});var joo=s(R8);vRe=n(joo,"STRONG",{});var cTa=s(vRe);y4t=r(cTa,"big_bird"),cTa.forEach(t),x4t=r(joo," \u2014 "),Vie=n(joo,"A",{href:!0});var mTa=s(Vie);$4t=r(mTa,"FlaxBigBirdForMultipleChoice"),mTa.forEach(t),k4t=r(joo," (BigBird model)"),joo.forEach(t),S4t=i(yo),P8=n(yo,"LI",{});var Doo=s(P8);FRe=n(Doo,"STRONG",{});var fTa=s(FRe);R4t=r(fTa,"distilbert"),fTa.forEach(t),P4t=r(Doo," \u2014 "),Xie=n(Doo,"A",{href:!0});var gTa=s(Xie);B4t=r(gTa,"FlaxDistilBertForMultipleChoice"),gTa.forEach(t),I4t=r(Doo," (DistilBERT model)"),Doo.forEach(t),N4t=i(yo),B8=n(yo,"LI",{});var Goo=s(B8);TRe=n(Goo,"STRONG",{});var hTa=s(TRe);q4t=r(hTa,"electra"),hTa.forEach(t),j4t=r(Goo," \u2014 "),zie=n(Goo,"A",{href:!0});var uTa=s(zie);D4t=r(uTa,"FlaxElectraForMultipleChoice"),uTa.forEach(t),G4t=r(Goo," (ELECTRA model)"),Goo.forEach(t),O4t=i(yo),I8=n(yo,"LI",{});var Ooo=s(I8);MRe=n(Ooo,"STRONG",{});var pTa=s(MRe);V4t=r(pTa,"roberta"),pTa.forEach(t),X4t=r(Ooo," \u2014 "),Qie=n(Ooo,"A",{href:!0});var _Ta=s(Qie);z4t=r(_Ta,"FlaxRobertaForMultipleChoice"),_Ta.forEach(t),Q4t=r(Ooo," (RoBERTa model)"),Ooo.forEach(t),W4t=i(yo),N8=n(yo,"LI",{});var Voo=s(N8);ERe=n(Voo,"STRONG",{});var bTa=s(ERe);U4t=r(bTa,"roformer"),bTa.forEach(t),H4t=r(Voo," \u2014 "),Wie=n(Voo,"A",{href:!0});var vTa=s(Wie);J4t=r(vTa,"FlaxRoFormerForMultipleChoice"),vTa.forEach(t),Y4t=r(Voo," (RoFormer model)"),Voo.forEach(t),Z4t=i(yo),q8=n(yo,"LI",{});var Xoo=s(q8);CRe=n(Xoo,"STRONG",{});var FTa=s(CRe);K4t=r(FTa,"xlm-roberta"),FTa.forEach(t),eCt=r(Xoo," \u2014 "),Uie=n(Xoo,"A",{href:!0});var TTa=s(Uie);oCt=r(TTa,"FlaxXLMRobertaForMultipleChoice"),TTa.forEach(t),rCt=r(Xoo," (XLM-RoBERTa model)"),Xoo.forEach(t),yo.forEach(t),tCt=i(td),T(j8.$$.fragment,td),td.forEach(t),rd.forEach(t),aao=i(m),Mf=n(m,"H2",{class:!0});var Mso=s(Mf);D8=n(Mso,"A",{id:!0,class:!0,href:!0});var MTa=s(D8);wRe=n(MTa,"SPAN",{});var ETa=s(wRe);T(eB.$$.fragment,ETa),ETa.forEach(t),MTa.forEach(t),aCt=i(Mso),ARe=n(Mso,"SPAN",{});var CTa=s(ARe);nCt=r(CTa,"FlaxAutoModelForNextSentencePrediction"),CTa.forEach(t),Mso.forEach(t),nao=i(m),Rr=n(m,"DIV",{class:!0});var ad=s(Rr);T(oB.$$.fragment,ad),sCt=i(ad),Ef=n(ad,"P",{});var ime=s(Ef);lCt=r(ime,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Hie=n(ime,"A",{href:!0});var wTa=s(Hie);iCt=r(wTa,"from_pretrained()"),wTa.forEach(t),dCt=r(ime," class method or the "),Jie=n(ime,"A",{href:!0});var ATa=s(Jie);cCt=r(ATa,"from_config()"),ATa.forEach(t),mCt=r(ime,` class
method.`),ime.forEach(t),fCt=i(ad),rB=n(ad,"P",{});var Eso=s(rB);gCt=r(Eso,"This class cannot be instantiated directly using "),LRe=n(Eso,"CODE",{});var LTa=s(LRe);hCt=r(LTa,"__init__()"),LTa.forEach(t),uCt=r(Eso," (throws an error)."),Eso.forEach(t),pCt=i(ad),ba=n(ad,"DIV",{class:!0});var Ax=s(ba);T(tB.$$.fragment,Ax),_Ct=i(Ax),yRe=n(Ax,"P",{});var yTa=s(yRe);bCt=r(yTa,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),yTa.forEach(t),vCt=i(Ax),Cf=n(Ax,"P",{});var dme=s(Cf);FCt=r(dme,`Note:
Loading a model from its configuration file does `),xRe=n(dme,"STRONG",{});var xTa=s(xRe);TCt=r(xTa,"not"),xTa.forEach(t),MCt=r(dme,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yie=n(dme,"A",{href:!0});var $Ta=s(Yie);ECt=r($Ta,"from_pretrained()"),$Ta.forEach(t),CCt=r(dme," to load the model weights."),dme.forEach(t),wCt=i(Ax),T(G8.$$.fragment,Ax),Ax.forEach(t),ACt=i(ad),dt=n(ad,"DIV",{class:!0});var nd=s(dt);T(aB.$$.fragment,nd),LCt=i(nd),$Re=n(nd,"P",{});var kTa=s($Re);yCt=r(kTa,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kTa.forEach(t),xCt=i(nd),os=n(nd,"P",{});var Lx=s(os);$Ct=r(Lx,"The model class to instantiate is selected based on the "),kRe=n(Lx,"CODE",{});var STa=s(kRe);kCt=r(STa,"model_type"),STa.forEach(t),SCt=r(Lx,` property of the config object (either
passed as an argument or loaded from `),SRe=n(Lx,"CODE",{});var RTa=s(SRe);RCt=r(RTa,"pretrained_model_name_or_path"),RTa.forEach(t),PCt=r(Lx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RRe=n(Lx,"CODE",{});var PTa=s(RRe);BCt=r(PTa,"pretrained_model_name_or_path"),PTa.forEach(t),ICt=r(Lx,":"),Lx.forEach(t),NCt=i(nd),PRe=n(nd,"UL",{});var BTa=s(PRe);O8=n(BTa,"LI",{});var zoo=s(O8);BRe=n(zoo,"STRONG",{});var ITa=s(BRe);qCt=r(ITa,"bert"),ITa.forEach(t),jCt=r(zoo," \u2014 "),Zie=n(zoo,"A",{href:!0});var NTa=s(Zie);DCt=r(NTa,"FlaxBertForNextSentencePrediction"),NTa.forEach(t),GCt=r(zoo," (BERT model)"),zoo.forEach(t),BTa.forEach(t),OCt=i(nd),T(V8.$$.fragment,nd),nd.forEach(t),ad.forEach(t),sao=i(m),wf=n(m,"H2",{class:!0});var Cso=s(wf);X8=n(Cso,"A",{id:!0,class:!0,href:!0});var qTa=s(X8);IRe=n(qTa,"SPAN",{});var jTa=s(IRe);T(nB.$$.fragment,jTa),jTa.forEach(t),qTa.forEach(t),VCt=i(Cso),NRe=n(Cso,"SPAN",{});var DTa=s(NRe);XCt=r(DTa,"FlaxAutoModelForImageClassification"),DTa.forEach(t),Cso.forEach(t),lao=i(m),Pr=n(m,"DIV",{class:!0});var sd=s(Pr);T(sB.$$.fragment,sd),zCt=i(sd),Af=n(sd,"P",{});var cme=s(Af);QCt=r(cme,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Kie=n(cme,"A",{href:!0});var GTa=s(Kie);WCt=r(GTa,"from_pretrained()"),GTa.forEach(t),UCt=r(cme," class method or the "),ede=n(cme,"A",{href:!0});var OTa=s(ede);HCt=r(OTa,"from_config()"),OTa.forEach(t),JCt=r(cme,` class
method.`),cme.forEach(t),YCt=i(sd),lB=n(sd,"P",{});var wso=s(lB);ZCt=r(wso,"This class cannot be instantiated directly using "),qRe=n(wso,"CODE",{});var VTa=s(qRe);KCt=r(VTa,"__init__()"),VTa.forEach(t),e3t=r(wso," (throws an error)."),wso.forEach(t),o3t=i(sd),va=n(sd,"DIV",{class:!0});var yx=s(va);T(iB.$$.fragment,yx),r3t=i(yx),jRe=n(yx,"P",{});var XTa=s(jRe);t3t=r(XTa,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),XTa.forEach(t),a3t=i(yx),Lf=n(yx,"P",{});var mme=s(Lf);n3t=r(mme,`Note:
Loading a model from its configuration file does `),DRe=n(mme,"STRONG",{});var zTa=s(DRe);s3t=r(zTa,"not"),zTa.forEach(t),l3t=r(mme,` load the model weights. It only affects the
model\u2019s configuration. Use `),ode=n(mme,"A",{href:!0});var QTa=s(ode);i3t=r(QTa,"from_pretrained()"),QTa.forEach(t),d3t=r(mme," to load the model weights."),mme.forEach(t),c3t=i(yx),T(z8.$$.fragment,yx),yx.forEach(t),m3t=i(sd),ct=n(sd,"DIV",{class:!0});var ld=s(ct);T(dB.$$.fragment,ld),f3t=i(ld),GRe=n(ld,"P",{});var WTa=s(GRe);g3t=r(WTa,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),WTa.forEach(t),h3t=i(ld),rs=n(ld,"P",{});var xx=s(rs);u3t=r(xx,"The model class to instantiate is selected based on the "),ORe=n(xx,"CODE",{});var UTa=s(ORe);p3t=r(UTa,"model_type"),UTa.forEach(t),_3t=r(xx,` property of the config object (either
passed as an argument or loaded from `),VRe=n(xx,"CODE",{});var HTa=s(VRe);b3t=r(HTa,"pretrained_model_name_or_path"),HTa.forEach(t),v3t=r(xx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XRe=n(xx,"CODE",{});var JTa=s(XRe);F3t=r(JTa,"pretrained_model_name_or_path"),JTa.forEach(t),T3t=r(xx,":"),xx.forEach(t),M3t=i(ld),cB=n(ld,"UL",{});var Aso=s(cB);Q8=n(Aso,"LI",{});var Qoo=s(Q8);zRe=n(Qoo,"STRONG",{});var YTa=s(zRe);E3t=r(YTa,"beit"),YTa.forEach(t),C3t=r(Qoo," \u2014 "),rde=n(Qoo,"A",{href:!0});var ZTa=s(rde);w3t=r(ZTa,"FlaxBeitForImageClassification"),ZTa.forEach(t),A3t=r(Qoo," (BEiT model)"),Qoo.forEach(t),L3t=i(Aso),W8=n(Aso,"LI",{});var Woo=s(W8);QRe=n(Woo,"STRONG",{});var KTa=s(QRe);y3t=r(KTa,"vit"),KTa.forEach(t),x3t=r(Woo," \u2014 "),tde=n(Woo,"A",{href:!0});var eMa=s(tde);$3t=r(eMa,"FlaxViTForImageClassification"),eMa.forEach(t),k3t=r(Woo," (ViT model)"),Woo.forEach(t),Aso.forEach(t),S3t=i(ld),T(U8.$$.fragment,ld),ld.forEach(t),sd.forEach(t),iao=i(m),yf=n(m,"H2",{class:!0});var Lso=s(yf);H8=n(Lso,"A",{id:!0,class:!0,href:!0});var oMa=s(H8);WRe=n(oMa,"SPAN",{});var rMa=s(WRe);T(mB.$$.fragment,rMa),rMa.forEach(t),oMa.forEach(t),R3t=i(Lso),URe=n(Lso,"SPAN",{});var tMa=s(URe);P3t=r(tMa,"FlaxAutoModelForVision2Seq"),tMa.forEach(t),Lso.forEach(t),dao=i(m),Br=n(m,"DIV",{class:!0});var id=s(Br);T(fB.$$.fragment,id),B3t=i(id),xf=n(id,"P",{});var fme=s(xf);I3t=r(fme,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ade=n(fme,"A",{href:!0});var aMa=s(ade);N3t=r(aMa,"from_pretrained()"),aMa.forEach(t),q3t=r(fme," class method or the "),nde=n(fme,"A",{href:!0});var nMa=s(nde);j3t=r(nMa,"from_config()"),nMa.forEach(t),D3t=r(fme,` class
method.`),fme.forEach(t),G3t=i(id),gB=n(id,"P",{});var yso=s(gB);O3t=r(yso,"This class cannot be instantiated directly using "),HRe=n(yso,"CODE",{});var sMa=s(HRe);V3t=r(sMa,"__init__()"),sMa.forEach(t),X3t=r(yso," (throws an error)."),yso.forEach(t),z3t=i(id),Fa=n(id,"DIV",{class:!0});var $x=s(Fa);T(hB.$$.fragment,$x),Q3t=i($x),JRe=n($x,"P",{});var lMa=s(JRe);W3t=r(lMa,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lMa.forEach(t),U3t=i($x),$f=n($x,"P",{});var gme=s($f);H3t=r(gme,`Note:
Loading a model from its configuration file does `),YRe=n(gme,"STRONG",{});var iMa=s(YRe);J3t=r(iMa,"not"),iMa.forEach(t),Y3t=r(gme,` load the model weights. It only affects the
model\u2019s configuration. Use `),sde=n(gme,"A",{href:!0});var dMa=s(sde);Z3t=r(dMa,"from_pretrained()"),dMa.forEach(t),K3t=r(gme," to load the model weights."),gme.forEach(t),e5t=i($x),T(J8.$$.fragment,$x),$x.forEach(t),o5t=i(id),mt=n(id,"DIV",{class:!0});var dd=s(mt);T(uB.$$.fragment,dd),r5t=i(dd),ZRe=n(dd,"P",{});var cMa=s(ZRe);t5t=r(cMa,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cMa.forEach(t),a5t=i(dd),ts=n(dd,"P",{});var kx=s(ts);n5t=r(kx,"The model class to instantiate is selected based on the "),KRe=n(kx,"CODE",{});var mMa=s(KRe);s5t=r(mMa,"model_type"),mMa.forEach(t),l5t=r(kx,` property of the config object (either
passed as an argument or loaded from `),ePe=n(kx,"CODE",{});var fMa=s(ePe);i5t=r(fMa,"pretrained_model_name_or_path"),fMa.forEach(t),d5t=r(kx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oPe=n(kx,"CODE",{});var gMa=s(oPe);c5t=r(gMa,"pretrained_model_name_or_path"),gMa.forEach(t),m5t=r(kx,":"),kx.forEach(t),f5t=i(dd),rPe=n(dd,"UL",{});var hMa=s(rPe);Y8=n(hMa,"LI",{});var Uoo=s(Y8);tPe=n(Uoo,"STRONG",{});var uMa=s(tPe);g5t=r(uMa,"vision-encoder-decoder"),uMa.forEach(t),h5t=r(Uoo," \u2014 "),lde=n(Uoo,"A",{href:!0});var pMa=s(lde);u5t=r(pMa,"FlaxVisionEncoderDecoderModel"),pMa.forEach(t),p5t=r(Uoo," (Vision Encoder decoder model)"),Uoo.forEach(t),hMa.forEach(t),_5t=i(dd),T(Z8.$$.fragment,dd),dd.forEach(t),id.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(S4a)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(ns,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(ls,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(is,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(pd,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(qf,"id","extending-the-auto-classes"),c(qf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qf,"href","#extending-the-auto-classes"),c(_d,"class","relative group"),c(Df,"id","transformers.AutoConfig"),c(Df,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Df,"href","#transformers.AutoConfig"),c(bd,"class","relative group"),c(UI,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(HI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(JI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(YI,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(ZI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(KI,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(eN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(oN,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(rN,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(tN,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(aN,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),c(nN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(sN,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(lN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(iN,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),c(dN,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig"),c(cN,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(mN,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(fN,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(gN,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(hN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(uN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(pN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(_N,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(bN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(vN,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(FN,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig"),c(TN,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(MN,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(EN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(CN,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig"),c(wN,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(AN,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(LN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(yN,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(xN,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig"),c($N,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig"),c(kN,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(SN,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(RN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(PN,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(BN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(IN,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(NN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(qN,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(jN,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(DN,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig"),c(GN,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(ON,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),c(VN,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(XN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(zN,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(QN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(WN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(UN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(HN,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(JN,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),c(YN,"href","/docs/transformers/main/en/model_doc/lilt#transformers.LiltConfig"),c(ZN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(KN,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),c(eq,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(oq,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(rq,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(tq,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(aq,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig"),c(nq,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(sq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(lq,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),c(iq,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(dq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(cq,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(mq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(fq,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(gq,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig"),c(hq,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),c(uq,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(pq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(_q,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(bq,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig"),c(vq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(Fq,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig"),c(Tq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Mq,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(Eq,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Cq,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(wq,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Aq,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(Lq,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(yq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(xq,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c($q,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(kq,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(Sq,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(Rq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(Pq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(Bq,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(Iq,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(Nq,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(qq,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(jq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Dq,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Gq,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(Oq,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Vq,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(Xq,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config"),c(zq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(Qq,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(Wq,"href","/docs/transformers/main/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerConfig"),c(Uq,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(Hq,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Jq,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(Yq,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Zq,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(Kq,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(ej,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig"),c(oj,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(rj,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(tj,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(aj,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(nj,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(sj,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(lj,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig"),c(ij,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(dj,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(cj,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(mj,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperConfig"),c(fj,"href","/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPConfig"),c(gj,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(hj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(uj,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(pj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(_j,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(bj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(vj,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(Fj,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uu,"id","transformers.AutoTokenizer"),c(uu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uu,"href","#transformers.AutoTokenizer"),c(Fd,"class","relative group"),c(Tj,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(Mj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(Ej,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(wj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(Aj,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(Lj,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(yj,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(xj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c($j,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(kj,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(Sj,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(Rj,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(Pj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(Bj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(Ij,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Nj,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(qj,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(jj,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(Dj,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(Gj,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(Oj,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(Vj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(Xj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(zj,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(Qj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(Wj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Uj,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(Hj,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(Jj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(Yj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(Zj,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(Kj,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(eD,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(oD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(rD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(tD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(aD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(nD,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(sD,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(lD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(iD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(dD,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(cD,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(mD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(fD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(gD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(hD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(uD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(pD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(_D,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(bD,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(vD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(FD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(TD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(MD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(ED,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(CD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(wD,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(AD,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseTokenizer"),c(LD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(xD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c($D,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(kD,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(SD,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(RD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(PD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(BD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(ID,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(ND,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(qD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(jD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(DD,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(GD,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(OD,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(VD,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(XD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(zD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(QD,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(WD,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(UD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(HD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(JD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(YD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(ZD,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(KD,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(eG,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(oG,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(rG,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(tG,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(aG,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(nG,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(sG,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(lG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(iG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(dG,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(cG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(mG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(fG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(gG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(hG,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(uG,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(pG,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizer"),c(_G,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(bG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(vG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(FG,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizer"),c(TG,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(MG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(EG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(CG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(wG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(AG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(LG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(yG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(xG,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c($G,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(kG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(SG,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(RG,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(PG,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(BG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(IG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(NG,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(qG,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(jG,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(DG,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(GG,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(OG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(VG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(XG,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(zG,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(QG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(WG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(UG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(HG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(JG,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(YG,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(ZG,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(KG,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(eO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(oO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(rO,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(tO,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(aO,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(nO,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(sO,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(lO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(iO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(dO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(cO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(mO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(fO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(gO,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(hO,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperTokenizer"),c(uO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(pO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(_O,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(bO,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(vO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(FO,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(TO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(MO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(EO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(CO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(wO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(AO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(LO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(yO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ku,"id","transformers.AutoFeatureExtractor"),c(Ku,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ku,"href","#transformers.AutoFeatureExtractor"),c(Td,"class","relative group"),c(xO,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c($O,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(kO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(SO,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrFeatureExtractor"),c(RO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(PO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(BO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(IO,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(NO,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrFeatureExtractor"),c(qO,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(jO,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(DO,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutFeatureExtractor"),c(GO,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(OO,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(VO,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(XO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(zO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(QO,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(WO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(UO,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(HO,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(JO,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(YO,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(ZO,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(KO,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(eV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(oV,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(rV,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(tV,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(aV,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(nV,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(sV,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(lV,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(iV,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(dV,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEFeatureExtractor"),c(cV,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(mV,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(fV,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(gV,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(hV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(uV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(pV,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperFeatureExtractor"),c(_V,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(bV,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qp,"id","transformers.AutoProcessor"),c(Qp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qp,"href","#transformers.AutoProcessor"),c(Md,"class","relative group"),c(vV,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(FV,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(TV,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutProcessor"),c(MV,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaProcessor"),c(EV,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(CV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(wV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(AV,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(LV,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMProcessor"),c(yV,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(xV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($V,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kV,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(SV,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(RV,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(PV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(IV,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(NV,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(qV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(GV,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperProcessor"),c(OV,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v_,"id","transformers.AutoModel"),c(v_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v_,"href","#transformers.AutoModel"),c(Cd,"class","relative group"),c(VV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(WV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(UV,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(HV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(JV,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(YV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(ZV,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(KV,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(eX,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(oX,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),c(rX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(tX,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(aX,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(nX,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),c(sX,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrModel"),c(lX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(iX,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(dX,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(cX,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(mX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(fX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(gX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(hX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(uX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(pX,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(_X,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrModel"),c(bX,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(vX,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(FX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(TX,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel"),c(MX,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(EX,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(CX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(wX,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieModel"),c(AX,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmModel"),c(LX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(yX,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(xX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c($X,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(kX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(SX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(RX,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(PX,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(BX,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(IX,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(NX,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseModel"),c(qX,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(jX,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),c(DX,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(GX,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(OX,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(VX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(XX,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(zX,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(QX,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(WX,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(UX,"href","/docs/transformers/main/en/model_doc/lilt#transformers.LiltModel"),c(HX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(JX,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),c(YX,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(ZX,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(KX,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(ez,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(oz,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMModel"),c(rz,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(tz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(az,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),c(nz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(sz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(lz,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),c(iz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(dz,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(cz,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel"),c(mz,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),c(fz,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(gz,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(hz,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(uz,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(pz,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel"),c(_z,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(bz,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel"),c(vz,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(Fz,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(Tz,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Mz,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Ez,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Cz,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(wz,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(Az,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(Lz,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(yz,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(xz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c($z,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(kz,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(Sz,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(Rz,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(Pz,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Bz,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(Iz,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Nz,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(qz,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model"),c(jz,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(Dz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(Gz,"href","/docs/transformers/main/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerModel"),c(Oz,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Vz,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Xz,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(zz,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Qz,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(Wz,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel"),c(Uz,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(Hz,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Jz,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Yz,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(Zz,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Kz,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNModel"),c(eQ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(oQ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(rQ,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(tQ,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperModel"),c(aQ,"href","/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPModel"),c(nQ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(sQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(lQ,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(iQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(dQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(cQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(mQ,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(fQ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O2,"id","transformers.AutoModelForPreTraining"),c(O2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O2,"href","#transformers.AutoModelForPreTraining"),c(Ld,"class","relative group"),c(gQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(_Q,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(bQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(vQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(FQ,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(TQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(MQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(EQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(CQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(wQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(AQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(LQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(yQ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForPreTraining"),c(xQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c($Q,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(kQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(SQ,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(RQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(PQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(BQ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(IQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(NQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(qQ,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(jQ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(DQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(GQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(OQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(VQ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(XQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(zQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(QQ,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(WQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(UQ,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(HQ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(JQ,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(YQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(ZQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(KQ,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(eW,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(oW,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(rW,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(tW,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(aW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(nW,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(sW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(lW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(iW,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(dW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Db,"id","transformers.AutoModelForCausalLM"),c(Db,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Db,"href","#transformers.AutoModelForCausalLM"),c($d,"class","relative group"),c(cW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gW,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(hW,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(uW,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(pW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(_W,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(bW,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(vW,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(FW,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(TW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(MW,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(EW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(CW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(wW,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(AW,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForCausalLM"),c(LW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(yW,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(xW,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c($W,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseForCausalLM"),c(kW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(SW,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(RW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(PW,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(BW,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM"),c(IW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(NW,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(qW,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(jW,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(DW,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(GW,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(OW,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(VW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(XW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(zW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(QW,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(WW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(UW,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(HW,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(JW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(YW,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(ZW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(KW,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(eU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sv,"id","transformers.AutoModelForMaskedLM"),c(Sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sv,"href","#transformers.AutoModelForMaskedLM"),c(Rd,"class","relative group"),c(oU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aU,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(nU,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(sU,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(lU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(iU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(dU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(cU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(mU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(fU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(gU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(hU,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(uU,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMaskedLM"),c(pU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(_U,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(bU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(vU,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(FU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(TU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(MU,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(EU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(CU,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(wU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(AU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(LU,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(yU,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(xU,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c($U,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(kU,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(SU,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(RU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(PU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(BU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(IU,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(NU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(qU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(jU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(DU,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(GU,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TF,"id","transformers.AutoModelForSeq2SeqLM"),c(TF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TF,"href","#transformers.AutoModelForSeq2SeqLM"),c(Id,"class","relative group"),c(OU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zU,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(QU,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(WU,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(UU,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(HU,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(JU,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(YU,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(ZU,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(KU,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(eH,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(oH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(rH,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(tH,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(aH,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(nH,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(sH,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration"),c(lH,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(iH,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(dH,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(cH,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zF,"id","transformers.AutoModelForSequenceClassification"),c(zF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zF,"href","#transformers.AutoModelForSequenceClassification"),c(jd,"class","relative group"),c(mH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hH,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(uH,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(pH,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(_H,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(bH,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(vH,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(FH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(TH,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(MH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(EH,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(CH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(wH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(AH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(LH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(yH,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(xH,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForSequenceClassification"),c($H,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmForSequenceClassification"),c(kH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(SH,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(RH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(PH,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(BH,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(IH,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(NH,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(qH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(jH,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(DH,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(GH,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(OH,"href","/docs/transformers/main/en/model_doc/lilt#transformers.LiltForSequenceClassification"),c(VH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(XH,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(zH,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForSequenceClassification"),c(QH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(WH,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(UH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(HH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(JH,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(YH,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(ZH,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(KH,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(eJ,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(oJ,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(rJ,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(tJ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(aJ,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(nJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(sJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(lJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(iJ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(dJ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(cJ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(mJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(fJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(gJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(hJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(uJ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YT,"id","transformers.AutoModelForMultipleChoice"),c(YT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YT,"href","#transformers.AutoModelForMultipleChoice"),c(Od,"class","relative group"),c(pJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_J,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(FJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(TJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(MJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(EJ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(CJ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(wJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(AJ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(LJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(yJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(xJ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMultipleChoice"),c($J,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(kJ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(SJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(RJ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(PJ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(BJ,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(IJ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(NJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(qJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(jJ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(DJ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(GJ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(OJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(VJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(XJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(zJ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(QJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(WJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(UJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(HJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(JJ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RM,"id","transformers.AutoModelForNextSentencePrediction"),c(RM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RM,"href","#transformers.AutoModelForNextSentencePrediction"),c(zd,"class","relative group"),c(YJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eY,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(oY,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForNextSentencePrediction"),c(rY,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(tY,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(aY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(nY,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(sY,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XM,"id","transformers.AutoModelForTokenClassification"),c(XM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XM,"href","#transformers.AutoModelForTokenClassification"),c(Ud,"class","relative group"),c(lY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cY,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(mY,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(fY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(gY,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(hY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(uY,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(pY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(_Y,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(bY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(vY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(FY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(TY,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(MY,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForTokenClassification"),c(EY,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmForTokenClassification"),c(CY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(wY,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(AY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(LY,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(yY,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(xY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c($Y,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(kY,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(SY,"href","/docs/transformers/main/en/model_doc/lilt#transformers.LiltForTokenClassification"),c(RY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(PY,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification"),c(BY,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForTokenClassification"),c(IY,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(NY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(qY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(jY,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(DY,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(GY,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(OY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(VY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(XY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(zY,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(QY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(WY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(UY,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(HY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(JY,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BE,"id","transformers.AutoModelForQuestionAnswering"),c(BE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BE,"href","#transformers.AutoModelForQuestionAnswering"),c(Yd,"class","relative group"),c(YY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(oZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(rZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(tZ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(aZ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(nZ,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForQuestionAnswering"),c(sZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(lZ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(iZ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(dZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(cZ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(mZ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(fZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(gZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(hZ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForQuestionAnswering"),c(uZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(pZ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(_Z,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(bZ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(vZ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(FZ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(TZ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(MZ,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(EZ,"href","/docs/transformers/main/en/model_doc/lilt#transformers.LiltForQuestionAnswering"),c(CZ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(wZ,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(AZ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(LZ,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForQuestionAnswering"),c(yZ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(xZ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c($Z,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(kZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(SZ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(RZ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(PZ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(BZ,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForQuestionAnswering"),c(IZ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(NZ,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(qZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(jZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(DZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(GZ,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(OZ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(VZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(XZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(zZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(QZ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(WZ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R4,"id","transformers.AutoModelForTableQuestionAnswering"),c(R4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R4,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ec,"class","relative group"),c(UZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YZ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q4,"id","transformers.AutoModelForDocumentQuestionAnswering"),c(q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q4,"href","#transformers.AutoModelForDocumentQuestionAnswering"),c(tc,"class","relative group"),c(ZZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oK,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering"),c(rK,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(tK,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z4,"id","transformers.AutoModelForImageClassification"),c(z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z4,"href","#transformers.AutoModelForImageClassification"),c(lc,"class","relative group"),c(aK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lK,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(iK,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(dK,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(cK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(mK,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(fK,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(gK,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(hK,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(uK,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(pK,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(_K,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(bK,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(vK,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(FK,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(TK,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(MK,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(EK,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(CK,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(wK,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(AK,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(LK,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(yK,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNForImageClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cC,"id","transformers.AutoModelForVideoClassification"),c(cC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cC,"href","#transformers.AutoModelForVideoClassification"),c(cc,"class","relative group"),c(xK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($K,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SK,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uC,"id","transformers.AutoModelForVision2Seq"),c(uC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uC,"href","#transformers.AutoModelForVision2Seq"),c(gc,"class","relative group"),c(RK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IK,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FC,"id","transformers.AutoModelForVisualQuestionAnswering"),c(FC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FC,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(pc,"class","relative group"),c(NK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DK,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wC,"id","transformers.AutoModelForAudioClassification"),c(wC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wC,"href","#transformers.AutoModelForAudioClassification"),c(vc,"class","relative group"),c(GK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(zK,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(QK,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(WK,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(UK,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(HK,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(JK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(YK,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(ZK,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qC,"id","transformers.AutoModelForAudioFrameClassification"),c(qC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qC,"href","#transformers.AutoModelForAudioFrameClassification"),c(Mc,"class","relative group"),c(KK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ree,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(tee,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(aee,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(nee,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(see,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WC,"id","transformers.AutoModelForCTC"),c(WC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WC,"href","#transformers.AutoModelForCTC"),c(wc,"class","relative group"),c(lee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cee,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(mee,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(fee,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),c(gee,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(hee,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(uee,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(pee,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(_ee,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(bee,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(vee,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l3,"id","transformers.AutoModelForSpeechSeq2Seq"),c(l3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l3,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(yc,"class","relative group"),c(Fee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eee,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Cee,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(wee,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperForConditionalGeneration"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h3,"id","transformers.AutoModelForAudioXVector"),c(h3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h3,"href","#transformers.AutoModelForAudioXVector"),c(Sc,"class","relative group"),c(Aee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xee,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c($ee,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(kee,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(See,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Ree,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E3,"id","transformers.AutoModelForMaskedImageModeling"),c(E3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E3,"href","#transformers.AutoModelForMaskedImageModeling"),c(Bc,"class","relative group"),c(Pee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nee,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(qee,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(jee,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(Dee,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k3,"id","transformers.AutoModelForObjectDetection"),c(k3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k3,"href","#transformers.AutoModelForObjectDetection"),c(qc,"class","relative group"),c(Gee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xee,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection"),c(zee,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection"),c(Qee,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Wee,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j3,"id","transformers.AutoModelForImageSegmentation"),c(j3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j3,"href","#transformers.AutoModelForImageSegmentation"),c(Gc,"class","relative group"),c(Uee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yee,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X3,"id","transformers.AutoModelForSemanticSegmentation"),c(X3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X3,"href","#transformers.AutoModelForSemanticSegmentation"),c(Xc,"class","relative group"),c(Zee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ooe,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(roe,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(toe,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(aoe,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(noe,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K3,"id","transformers.AutoModelForInstanceSegmentation"),c(K3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K3,"href","#transformers.AutoModelForInstanceSegmentation"),c(Wc,"class","relative group"),c(soe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(loe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ioe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(doe,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a5,"id","transformers.AutoModelForZeroShotObjectDetection"),c(a5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a5,"href","#transformers.AutoModelForZeroShotObjectDetection"),c(Jc,"class","relative group"),c(coe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(moe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(foe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(goe,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTForObjectDetection"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d5,"id","transformers.TFAutoModel"),c(d5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d5,"href","#transformers.TFAutoModel"),c(Kc,"class","relative group"),c(hoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(poe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_oe,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(boe,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(voe,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(Foe,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Toe,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(Moe,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(Eoe,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(Coe,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(woe,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(Aoe,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Loe,"href","/docs/transformers/main/en/model_doc/cvt#transformers.TFCvtModel"),c(yoe,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(xoe,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c($oe,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(koe,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel"),c(Soe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Roe,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Poe,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(Boe,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(Ioe,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(Noe,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(qoe,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(joe,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(Doe,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.TFGroupViTModel"),c(Goe,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(Ooe,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Voe,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model"),c(Xoe,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(zoe,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(Qoe,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Woe,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(Uoe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(Hoe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Joe,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel"),c(Yoe,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Zoe,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(Koe,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(ere,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(ore,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(rre,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),c(tre,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(are,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel"),c(nre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(sre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(lre,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel"),c(ire,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(dre,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(cre,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(mre,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(fre,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(gre,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(hre,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(ure,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(pre,"href","/docs/transformers/main/en/model_doc/whisper#transformers.TFWhisperModel"),c(_re,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel"),c(bre,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(vre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Fre,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h0,"id","transformers.TFAutoModelForPreTraining"),c(h0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h0,"href","#transformers.TFAutoModelForPreTraining"),c(rm,"class","relative group"),c(Tre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ere,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cre,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(wre,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Are,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Lre,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(yre,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(xre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c($re,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(kre,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Sre,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Rre,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Pre,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Bre,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(Ire,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(Nre,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(qre,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(jre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Dre,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Gre,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Ore,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Vre,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(Xre,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Qre,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D0,"id","transformers.TFAutoModelForCausalLM"),c(D0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D0,"href","#transformers.TFAutoModelForCausalLM"),c(nm,"class","relative group"),c(Wre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ure,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jre,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(Yre,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(Zre,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Kre,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(ete,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(ote,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(rte,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(tte,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(ate,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(nte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(ste,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(lte,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),c(ite,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(dte,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tw,"id","transformers.TFAutoModelForImageClassification"),c(tw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tw,"href","#transformers.TFAutoModelForImageClassification"),c(im,"class","relative group"),c(cte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gte,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(hte,"href","/docs/transformers/main/en/model_doc/cvt#transformers.TFCvtForImageClassification"),c(ute,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(pte,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(_te,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(bte,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification"),c(vte,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(Fte,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(Tte,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(Mte,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(Ete,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uw,"id","transformers.TFAutoModelForSemanticSegmentation"),c(uw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uw,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(mm,"class","relative group"),c(Cte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ate,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lte,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(yte,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation"),c(xte,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tw,"id","transformers.TFAutoModelForMaskedLM"),c(Tw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tw,"href","#transformers.TFAutoModelForMaskedLM"),c(um,"class","relative group"),c($te,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ste,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rte,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(Pte,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(Bte,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Ite,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(Nte,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(qte,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(jte,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Dte,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(Gte,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Ote,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(Vte,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Xte,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(zte,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(Qte,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Wte,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(Ute,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Hte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(Jte,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Yte,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Zte,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xw,"id","transformers.TFAutoModelForSeq2SeqLM"),c(Xw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xw,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(bm,"class","relative group"),c(Kte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rae,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(tae,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(aae,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(nae,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(sae,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(lae,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(iae,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(dae,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(cae,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(mae,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tA,"id","transformers.TFAutoModelForSequenceClassification"),c(tA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tA,"href","#transformers.TFAutoModelForSequenceClassification"),c(Tm,"class","relative group"),c(fae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uae,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(pae,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(_ae,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(bae,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(vae,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(Fae,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(Tae,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(Mae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(Eae,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(Cae,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(wae,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(Aae,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(Lae,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(yae,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(xae,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification"),c($ae,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(kae,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(Sae,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(Rae,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(Pae,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(Bae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Iae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(Nae,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(qae,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(jae,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(Dae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(Gae,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RA,"id","transformers.TFAutoModelForMultipleChoice"),c(RA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RA,"href","#transformers.TFAutoModelForMultipleChoice"),c(Cm,"class","relative group"),c(Oae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zae,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(Qae,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(Wae,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(Uae,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(Hae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(Jae,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(Yae,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(Zae,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(Kae,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(ene,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(one,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(rne,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(tne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(ane,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(nne,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(sne,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(lne,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KA,"id","transformers.TFAutoModelForNextSentencePrediction"),c(KA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KA,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Lm,"class","relative group"),c(ine,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mne,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(fne,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a6,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(a6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a6,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c($m,"class","relative group"),c(gne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(une,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pne,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i6,"id","transformers.TFAutoModelForDocumentQuestionAnswering"),c(i6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i6,"href","#transformers.TFAutoModelForDocumentQuestionAnswering"),c(Rm,"class","relative group"),c(_ne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fne,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f6,"id","transformers.TFAutoModelForTokenClassification"),c(f6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f6,"href","#transformers.TFAutoModelForTokenClassification"),c(Im,"class","relative group"),c(Tne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ene,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cne,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(wne,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(Ane,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(Lne,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(yne,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(xne,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c($ne,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(kne,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(Sne,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(Rne,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(Pne,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(Bne,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification"),c(Ine,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(Nne,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(qne,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(jne,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(Dne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Gne,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(One,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(Vne,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(Xne,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I6,"id","transformers.TFAutoModelForQuestionAnswering"),c(I6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I6,"href","#transformers.TFAutoModelForQuestionAnswering"),c(jm,"class","relative group"),c(zne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Une,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(Hne,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(Jne,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(Yne,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(Zne,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(Kne,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(ese,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(ose,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(rse,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(tse,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(ase,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(nse,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering"),c(sse,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(lse,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(ise,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(dse,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(cse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(mse,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(fse,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(gse,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(hse,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s7,"id","transformers.TFAutoModelForVision2Seq"),c(s7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s7,"href","#transformers.TFAutoModelForVision2Seq"),c(Om,"class","relative group"),c(use,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_se,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bse,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c7,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(c7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c7,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(zm,"class","relative group"),c(vse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mse,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Ese,"href","/docs/transformers/main/en/model_doc/whisper#transformers.TFWhisperForConditionalGeneration"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u7,"id","transformers.FlaxAutoModel"),c(u7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u7,"href","#transformers.FlaxAutoModel"),c(Um,"class","relative group"),c(Cse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ase,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lse,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(yse,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(xse,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c($se,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(kse,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(Sse,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(Rse,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(Pse,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(Bse,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(Ise,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(Nse,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(qse,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(jse,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(Dse,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(Gse,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(Ose,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(Vse,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Xse,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(zse,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(Qse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(Wse,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(Use,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(Hse,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(Jse,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(Yse,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Zse,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Kse,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z7,"id","transformers.FlaxAutoModelForCausalLM"),c(z7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z7,"href","#transformers.FlaxAutoModelForCausalLM"),c(Ym,"class","relative group"),c(ele,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ole,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tle,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(ale,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(nle,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(sle,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(lle,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(ile,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(dle,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(cle,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(mle,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(fle,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aL,"id","transformers.FlaxAutoModelForPreTraining"),c(aL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aL,"href","#transformers.FlaxAutoModelForPreTraining"),c(ef,"class","relative group"),c(gle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ule,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ple,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(_le,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ble,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(vle,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Fle,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Tle,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Mle,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Ele,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Cle,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(wle,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Ale,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Lle,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(yle,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FL,"id","transformers.FlaxAutoModelForMaskedLM"),c(FL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FL,"href","#transformers.FlaxAutoModelForMaskedLM"),c(tf,"class","relative group"),c(xle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($le,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sle,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(Rle,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Ple,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(Ble,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(Ile,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(Nle,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(qle,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(jle,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Dle,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Gle,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RL,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(RL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RL,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(sf,"class","relative group"),c(Ole,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zle,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Qle,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Wle,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Ule,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Hle,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Jle,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Yle,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Zle,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Kle,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(eie,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QL,"id","transformers.FlaxAutoModelForSequenceClassification"),c(QL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QL,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(cf,"class","relative group"),c(oie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aie,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(nie,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(sie,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(lie,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(iie,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(die,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(cie,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(mie,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(fie,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(gie,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n8,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(n8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n8,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(gf,"class","relative group"),c(hie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_ie,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(bie,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(vie,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Fie,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Tie,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Mie,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Eie,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Cie,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(wie,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Aie,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b8,"id","transformers.FlaxAutoModelForTokenClassification"),c(b8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b8,"href","#transformers.FlaxAutoModelForTokenClassification"),c(pf,"class","relative group"),c(Lie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($ie,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(kie,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Sie,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Rie,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Pie,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Bie,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Iie,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Nie,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x8,"id","transformers.FlaxAutoModelForMultipleChoice"),c(x8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x8,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(vf,"class","relative group"),c(qie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Die,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gie,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Oie,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Vie,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Xie,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(zie,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Qie,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Wie,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Uie,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D8,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(D8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D8,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Mf,"class","relative group"),c(Hie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ba,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zie,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X8,"id","transformers.FlaxAutoModelForImageClassification"),c(X8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X8,"href","#transformers.FlaxAutoModelForImageClassification"),c(wf,"class","relative group"),c(Kie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ede,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ode,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rde,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(tde,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H8,"id","transformers.FlaxAutoModelForVision2Seq"),c(H8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H8,"href","#transformers.FlaxAutoModelForVision2Seq"),c(yf,"class","relative group"),c(ade,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nde,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sde,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lde,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,xo),e(xo,cd),b(m,Pf,_),b(m,bt,_),e(bt,md),e(bt,fd),e(fd,Sx),e(bt,Bf),b(m,Xe,_),b(m,He,_),e(He,gd),e(He,ns),e(ns,Rx),e(He,ss),e(He,ls),e(ls,Px),e(He,hd),e(He,is),e(is,Bx),e(He,ud),b(m,If,_),M(Ja,m,_),b(m,Je,_),b(m,Ae,_),e(Ae,OI),e(Ae,pd),e(pd,VI),e(Ae,XI),b(m,$o,_),b(m,Ya,_),e(Ya,zI),e(Ya,Nf),e(Nf,QI),e(Ya,xso),b(m,Hoo,_),b(m,_d,_),e(_d,qf),e(qf,hme),M(Ix,hme,null),e(_d,$so),e(_d,ume),e(ume,kso),b(m,Joo,_),b(m,ds,_),e(ds,Sso),e(ds,pme),e(pme,Rso),e(ds,Pso),e(ds,_me),e(_me,Bso),e(ds,Iso),b(m,Yoo,_),M(Nx,m,_),b(m,Zoo,_),b(m,WI,_),e(WI,Nso),b(m,Koo,_),M(jf,m,_),b(m,ero,_),b(m,bd,_),e(bd,Df),e(Df,bme),M(qx,bme,null),e(bd,qso),e(bd,vme),e(vme,jso),b(m,oro,_),b(m,ko,_),M(jx,ko,null),e(ko,Dso),e(ko,Dx),e(Dx,Gso),e(Dx,UI),e(UI,Oso),e(Dx,Vso),e(ko,Xso),e(ko,Gx),e(Gx,zso),e(Gx,Fme),e(Fme,Qso),e(Gx,Wso),e(ko,Uso),e(ko,Ir),M(Ox,Ir,null),e(Ir,Hso),e(Ir,Tme),e(Tme,Jso),e(Ir,Yso),e(Ir,vd),e(vd,Zso),e(vd,Mme),e(Mme,Kso),e(vd,elo),e(vd,Eme),e(Eme,olo),e(vd,rlo),e(Ir,tlo),e(Ir,A),e(A,Gf),e(Gf,Cme),e(Cme,alo),e(Gf,nlo),e(Gf,HI),e(HI,slo),e(Gf,llo),e(A,ilo),e(A,Of),e(Of,wme),e(wme,dlo),e(Of,clo),e(Of,JI),e(JI,mlo),e(Of,flo),e(A,glo),e(A,Vf),e(Vf,Ame),e(Ame,hlo),e(Vf,ulo),e(Vf,YI),e(YI,plo),e(Vf,_lo),e(A,blo),e(A,Xf),e(Xf,Lme),e(Lme,vlo),e(Xf,Flo),e(Xf,ZI),e(ZI,Tlo),e(Xf,Mlo),e(A,Elo),e(A,zf),e(zf,yme),e(yme,Clo),e(zf,wlo),e(zf,KI),e(KI,Alo),e(zf,Llo),e(A,ylo),e(A,Qf),e(Qf,xme),e(xme,xlo),e(Qf,$lo),e(Qf,eN),e(eN,klo),e(Qf,Slo),e(A,Rlo),e(A,Wf),e(Wf,$me),e($me,Plo),e(Wf,Blo),e(Wf,oN),e(oN,Ilo),e(Wf,Nlo),e(A,qlo),e(A,Uf),e(Uf,kme),e(kme,jlo),e(Uf,Dlo),e(Uf,rN),e(rN,Glo),e(Uf,Olo),e(A,Vlo),e(A,Hf),e(Hf,Sme),e(Sme,Xlo),e(Hf,zlo),e(Hf,tN),e(tN,Qlo),e(Hf,Wlo),e(A,Ulo),e(A,Jf),e(Jf,Rme),e(Rme,Hlo),e(Jf,Jlo),e(Jf,aN),e(aN,Ylo),e(Jf,Zlo),e(A,Klo),e(A,Yf),e(Yf,Pme),e(Pme,eio),e(Yf,oio),e(Yf,nN),e(nN,rio),e(Yf,tio),e(A,aio),e(A,Zf),e(Zf,Bme),e(Bme,nio),e(Zf,sio),e(Zf,sN),e(sN,lio),e(Zf,iio),e(A,dio),e(A,Kf),e(Kf,Ime),e(Ime,cio),e(Kf,mio),e(Kf,lN),e(lN,fio),e(Kf,gio),e(A,hio),e(A,eg),e(eg,Nme),e(Nme,uio),e(eg,pio),e(eg,iN),e(iN,_io),e(eg,bio),e(A,vio),e(A,og),e(og,qme),e(qme,Fio),e(og,Tio),e(og,dN),e(dN,Mio),e(og,Eio),e(A,Cio),e(A,rg),e(rg,jme),e(jme,wio),e(rg,Aio),e(rg,cN),e(cN,Lio),e(rg,yio),e(A,xio),e(A,tg),e(tg,Dme),e(Dme,$io),e(tg,kio),e(tg,mN),e(mN,Sio),e(tg,Rio),e(A,Pio),e(A,ag),e(ag,Gme),e(Gme,Bio),e(ag,Iio),e(ag,fN),e(fN,Nio),e(ag,qio),e(A,jio),e(A,ng),e(ng,Ome),e(Ome,Dio),e(ng,Gio),e(ng,gN),e(gN,Oio),e(ng,Vio),e(A,Xio),e(A,sg),e(sg,Vme),e(Vme,zio),e(sg,Qio),e(sg,hN),e(hN,Wio),e(sg,Uio),e(A,Hio),e(A,lg),e(lg,Xme),e(Xme,Jio),e(lg,Yio),e(lg,uN),e(uN,Zio),e(lg,Kio),e(A,edo),e(A,ig),e(ig,zme),e(zme,odo),e(ig,rdo),e(ig,pN),e(pN,tdo),e(ig,ado),e(A,ndo),e(A,dg),e(dg,Qme),e(Qme,sdo),e(dg,ldo),e(dg,_N),e(_N,ido),e(dg,ddo),e(A,cdo),e(A,cg),e(cg,Wme),e(Wme,mdo),e(cg,fdo),e(cg,bN),e(bN,gdo),e(cg,hdo),e(A,udo),e(A,mg),e(mg,Ume),e(Ume,pdo),e(mg,_do),e(mg,vN),e(vN,bdo),e(mg,vdo),e(A,Fdo),e(A,fg),e(fg,Hme),e(Hme,Tdo),e(fg,Mdo),e(fg,FN),e(FN,Edo),e(fg,Cdo),e(A,wdo),e(A,gg),e(gg,Jme),e(Jme,Ado),e(gg,Ldo),e(gg,TN),e(TN,ydo),e(gg,xdo),e(A,$do),e(A,hg),e(hg,Yme),e(Yme,kdo),e(hg,Sdo),e(hg,MN),e(MN,Rdo),e(hg,Pdo),e(A,Bdo),e(A,ug),e(ug,Zme),e(Zme,Ido),e(ug,Ndo),e(ug,EN),e(EN,qdo),e(ug,jdo),e(A,Ddo),e(A,pg),e(pg,Kme),e(Kme,Gdo),e(pg,Odo),e(pg,CN),e(CN,Vdo),e(pg,Xdo),e(A,zdo),e(A,_g),e(_g,efe),e(efe,Qdo),e(_g,Wdo),e(_g,wN),e(wN,Udo),e(_g,Hdo),e(A,Jdo),e(A,bg),e(bg,ofe),e(ofe,Ydo),e(bg,Zdo),e(bg,AN),e(AN,Kdo),e(bg,eco),e(A,oco),e(A,vg),e(vg,rfe),e(rfe,rco),e(vg,tco),e(vg,LN),e(LN,aco),e(vg,nco),e(A,sco),e(A,Fg),e(Fg,tfe),e(tfe,lco),e(Fg,ico),e(Fg,yN),e(yN,dco),e(Fg,cco),e(A,mco),e(A,Tg),e(Tg,afe),e(afe,fco),e(Tg,gco),e(Tg,xN),e(xN,hco),e(Tg,uco),e(A,pco),e(A,Mg),e(Mg,nfe),e(nfe,_co),e(Mg,bco),e(Mg,$N),e($N,vco),e(Mg,Fco),e(A,Tco),e(A,Eg),e(Eg,sfe),e(sfe,Mco),e(Eg,Eco),e(Eg,kN),e(kN,Cco),e(Eg,wco),e(A,Aco),e(A,Cg),e(Cg,lfe),e(lfe,Lco),e(Cg,yco),e(Cg,SN),e(SN,xco),e(Cg,$co),e(A,kco),e(A,wg),e(wg,ife),e(ife,Sco),e(wg,Rco),e(wg,RN),e(RN,Pco),e(wg,Bco),e(A,Ico),e(A,Ag),e(Ag,dfe),e(dfe,Nco),e(Ag,qco),e(Ag,PN),e(PN,jco),e(Ag,Dco),e(A,Gco),e(A,Lg),e(Lg,cfe),e(cfe,Oco),e(Lg,Vco),e(Lg,BN),e(BN,Xco),e(Lg,zco),e(A,Qco),e(A,yg),e(yg,mfe),e(mfe,Wco),e(yg,Uco),e(yg,IN),e(IN,Hco),e(yg,Jco),e(A,Yco),e(A,xg),e(xg,ffe),e(ffe,Zco),e(xg,Kco),e(xg,NN),e(NN,emo),e(xg,omo),e(A,rmo),e(A,$g),e($g,gfe),e(gfe,tmo),e($g,amo),e($g,qN),e(qN,nmo),e($g,smo),e(A,lmo),e(A,kg),e(kg,hfe),e(hfe,imo),e(kg,dmo),e(kg,jN),e(jN,cmo),e(kg,mmo),e(A,fmo),e(A,Sg),e(Sg,ufe),e(ufe,gmo),e(Sg,hmo),e(Sg,DN),e(DN,umo),e(Sg,pmo),e(A,_mo),e(A,Rg),e(Rg,pfe),e(pfe,bmo),e(Rg,vmo),e(Rg,GN),e(GN,Fmo),e(Rg,Tmo),e(A,Mmo),e(A,Pg),e(Pg,_fe),e(_fe,Emo),e(Pg,Cmo),e(Pg,ON),e(ON,wmo),e(Pg,Amo),e(A,Lmo),e(A,Bg),e(Bg,bfe),e(bfe,ymo),e(Bg,xmo),e(Bg,VN),e(VN,$mo),e(Bg,kmo),e(A,Smo),e(A,Ig),e(Ig,vfe),e(vfe,Rmo),e(Ig,Pmo),e(Ig,XN),e(XN,Bmo),e(Ig,Imo),e(A,Nmo),e(A,Ng),e(Ng,Ffe),e(Ffe,qmo),e(Ng,jmo),e(Ng,zN),e(zN,Dmo),e(Ng,Gmo),e(A,Omo),e(A,qg),e(qg,Tfe),e(Tfe,Vmo),e(qg,Xmo),e(qg,QN),e(QN,zmo),e(qg,Qmo),e(A,Wmo),e(A,jg),e(jg,Mfe),e(Mfe,Umo),e(jg,Hmo),e(jg,WN),e(WN,Jmo),e(jg,Ymo),e(A,Zmo),e(A,Dg),e(Dg,Efe),e(Efe,Kmo),e(Dg,efo),e(Dg,UN),e(UN,ofo),e(Dg,rfo),e(A,tfo),e(A,Gg),e(Gg,Cfe),e(Cfe,afo),e(Gg,nfo),e(Gg,HN),e(HN,sfo),e(Gg,lfo),e(A,ifo),e(A,Og),e(Og,wfe),e(wfe,dfo),e(Og,cfo),e(Og,JN),e(JN,mfo),e(Og,ffo),e(A,gfo),e(A,Vg),e(Vg,Afe),e(Afe,hfo),e(Vg,ufo),e(Vg,YN),e(YN,pfo),e(Vg,_fo),e(A,bfo),e(A,Xg),e(Xg,Lfe),e(Lfe,vfo),e(Xg,Ffo),e(Xg,ZN),e(ZN,Tfo),e(Xg,Mfo),e(A,Efo),e(A,zg),e(zg,yfe),e(yfe,Cfo),e(zg,wfo),e(zg,KN),e(KN,Afo),e(zg,Lfo),e(A,yfo),e(A,Qg),e(Qg,xfe),e(xfe,xfo),e(Qg,$fo),e(Qg,eq),e(eq,kfo),e(Qg,Sfo),e(A,Rfo),e(A,Wg),e(Wg,$fe),e($fe,Pfo),e(Wg,Bfo),e(Wg,oq),e(oq,Ifo),e(Wg,Nfo),e(A,qfo),e(A,Ug),e(Ug,kfe),e(kfe,jfo),e(Ug,Dfo),e(Ug,rq),e(rq,Gfo),e(Ug,Ofo),e(A,Vfo),e(A,Hg),e(Hg,Sfe),e(Sfe,Xfo),e(Hg,zfo),e(Hg,tq),e(tq,Qfo),e(Hg,Wfo),e(A,Ufo),e(A,Jg),e(Jg,Rfe),e(Rfe,Hfo),e(Jg,Jfo),e(Jg,aq),e(aq,Yfo),e(Jg,Zfo),e(A,Kfo),e(A,Yg),e(Yg,Pfe),e(Pfe,ego),e(Yg,ogo),e(Yg,nq),e(nq,rgo),e(Yg,tgo),e(A,ago),e(A,Zg),e(Zg,Bfe),e(Bfe,ngo),e(Zg,sgo),e(Zg,sq),e(sq,lgo),e(Zg,igo),e(A,dgo),e(A,Kg),e(Kg,Ife),e(Ife,cgo),e(Kg,mgo),e(Kg,lq),e(lq,fgo),e(Kg,ggo),e(A,hgo),e(A,eh),e(eh,Nfe),e(Nfe,ugo),e(eh,pgo),e(eh,iq),e(iq,_go),e(eh,bgo),e(A,vgo),e(A,oh),e(oh,qfe),e(qfe,Fgo),e(oh,Tgo),e(oh,dq),e(dq,Mgo),e(oh,Ego),e(A,Cgo),e(A,rh),e(rh,jfe),e(jfe,wgo),e(rh,Ago),e(rh,cq),e(cq,Lgo),e(rh,ygo),e(A,xgo),e(A,th),e(th,Dfe),e(Dfe,$go),e(th,kgo),e(th,mq),e(mq,Sgo),e(th,Rgo),e(A,Pgo),e(A,ah),e(ah,Gfe),e(Gfe,Bgo),e(ah,Igo),e(ah,fq),e(fq,Ngo),e(ah,qgo),e(A,jgo),e(A,nh),e(nh,Ofe),e(Ofe,Dgo),e(nh,Ggo),e(nh,gq),e(gq,Ogo),e(nh,Vgo),e(A,Xgo),e(A,sh),e(sh,Vfe),e(Vfe,zgo),e(sh,Qgo),e(sh,hq),e(hq,Wgo),e(sh,Ugo),e(A,Hgo),e(A,lh),e(lh,Xfe),e(Xfe,Jgo),e(lh,Ygo),e(lh,uq),e(uq,Zgo),e(lh,Kgo),e(A,eho),e(A,ih),e(ih,zfe),e(zfe,oho),e(ih,rho),e(ih,pq),e(pq,tho),e(ih,aho),e(A,nho),e(A,dh),e(dh,Qfe),e(Qfe,sho),e(dh,lho),e(dh,_q),e(_q,iho),e(dh,dho),e(A,cho),e(A,ch),e(ch,Wfe),e(Wfe,mho),e(ch,fho),e(ch,bq),e(bq,gho),e(ch,hho),e(A,uho),e(A,mh),e(mh,Ufe),e(Ufe,pho),e(mh,_ho),e(mh,vq),e(vq,bho),e(mh,vho),e(A,Fho),e(A,fh),e(fh,Hfe),e(Hfe,Tho),e(fh,Mho),e(fh,Fq),e(Fq,Eho),e(fh,Cho),e(A,who),e(A,gh),e(gh,Jfe),e(Jfe,Aho),e(gh,Lho),e(gh,Tq),e(Tq,yho),e(gh,xho),e(A,$ho),e(A,hh),e(hh,Yfe),e(Yfe,kho),e(hh,Sho),e(hh,Mq),e(Mq,Rho),e(hh,Pho),e(A,Bho),e(A,uh),e(uh,Zfe),e(Zfe,Iho),e(uh,Nho),e(uh,Eq),e(Eq,qho),e(uh,jho),e(A,Dho),e(A,ph),e(ph,Kfe),e(Kfe,Gho),e(ph,Oho),e(ph,Cq),e(Cq,Vho),e(ph,Xho),e(A,zho),e(A,_h),e(_h,ege),e(ege,Qho),e(_h,Who),e(_h,wq),e(wq,Uho),e(_h,Hho),e(A,Jho),e(A,bh),e(bh,oge),e(oge,Yho),e(bh,Zho),e(bh,Aq),e(Aq,Kho),e(bh,euo),e(A,ouo),e(A,vh),e(vh,rge),e(rge,ruo),e(vh,tuo),e(vh,Lq),e(Lq,auo),e(vh,nuo),e(A,suo),e(A,Fh),e(Fh,tge),e(tge,luo),e(Fh,iuo),e(Fh,yq),e(yq,duo),e(Fh,cuo),e(A,muo),e(A,Th),e(Th,age),e(age,fuo),e(Th,guo),e(Th,xq),e(xq,huo),e(Th,uuo),e(A,puo),e(A,Mh),e(Mh,nge),e(nge,_uo),e(Mh,buo),e(Mh,$q),e($q,vuo),e(Mh,Fuo),e(A,Tuo),e(A,Eh),e(Eh,sge),e(sge,Muo),e(Eh,Euo),e(Eh,kq),e(kq,Cuo),e(Eh,wuo),e(A,Auo),e(A,Ch),e(Ch,lge),e(lge,Luo),e(Ch,yuo),e(Ch,Sq),e(Sq,xuo),e(Ch,$uo),e(A,kuo),e(A,wh),e(wh,ige),e(ige,Suo),e(wh,Ruo),e(wh,Rq),e(Rq,Puo),e(wh,Buo),e(A,Iuo),e(A,Ah),e(Ah,dge),e(dge,Nuo),e(Ah,quo),e(Ah,Pq),e(Pq,juo),e(Ah,Duo),e(A,Guo),e(A,Lh),e(Lh,cge),e(cge,Ouo),e(Lh,Vuo),e(Lh,Bq),e(Bq,Xuo),e(Lh,zuo),e(A,Quo),e(A,yh),e(yh,mge),e(mge,Wuo),e(yh,Uuo),e(yh,Iq),e(Iq,Huo),e(yh,Juo),e(A,Yuo),e(A,xh),e(xh,fge),e(fge,Zuo),e(xh,Kuo),e(xh,Nq),e(Nq,epo),e(xh,opo),e(A,rpo),e(A,$h),e($h,gge),e(gge,tpo),e($h,apo),e($h,qq),e(qq,npo),e($h,spo),e(A,lpo),e(A,kh),e(kh,hge),e(hge,ipo),e(kh,dpo),e(kh,jq),e(jq,cpo),e(kh,mpo),e(A,fpo),e(A,Sh),e(Sh,uge),e(uge,gpo),e(Sh,hpo),e(Sh,Dq),e(Dq,upo),e(Sh,ppo),e(A,_po),e(A,Rh),e(Rh,pge),e(pge,bpo),e(Rh,vpo),e(Rh,Gq),e(Gq,Fpo),e(Rh,Tpo),e(A,Mpo),e(A,Ph),e(Ph,_ge),e(_ge,Epo),e(Ph,Cpo),e(Ph,Oq),e(Oq,wpo),e(Ph,Apo),e(A,Lpo),e(A,Bh),e(Bh,bge),e(bge,ypo),e(Bh,xpo),e(Bh,Vq),e(Vq,$po),e(Bh,kpo),e(A,Spo),e(A,Ih),e(Ih,vge),e(vge,Rpo),e(Ih,Ppo),e(Ih,Xq),e(Xq,Bpo),e(Ih,Ipo),e(A,Npo),e(A,Nh),e(Nh,Fge),e(Fge,qpo),e(Nh,jpo),e(Nh,zq),e(zq,Dpo),e(Nh,Gpo),e(A,Opo),e(A,qh),e(qh,Tge),e(Tge,Vpo),e(qh,Xpo),e(qh,Qq),e(Qq,zpo),e(qh,Qpo),e(A,Wpo),e(A,jh),e(jh,Mge),e(Mge,Upo),e(jh,Hpo),e(jh,Wq),e(Wq,Jpo),e(jh,Ypo),e(A,Zpo),e(A,Dh),e(Dh,Ege),e(Ege,Kpo),e(Dh,e_o),e(Dh,Uq),e(Uq,o_o),e(Dh,r_o),e(A,t_o),e(A,Gh),e(Gh,Cge),e(Cge,a_o),e(Gh,n_o),e(Gh,Hq),e(Hq,s_o),e(Gh,l_o),e(A,i_o),e(A,Oh),e(Oh,wge),e(wge,d_o),e(Oh,c_o),e(Oh,Jq),e(Jq,m_o),e(Oh,f_o),e(A,g_o),e(A,Vh),e(Vh,Age),e(Age,h_o),e(Vh,u_o),e(Vh,Yq),e(Yq,p_o),e(Vh,__o),e(A,b_o),e(A,Xh),e(Xh,Lge),e(Lge,v_o),e(Xh,F_o),e(Xh,Zq),e(Zq,T_o),e(Xh,M_o),e(A,E_o),e(A,zh),e(zh,yge),e(yge,C_o),e(zh,w_o),e(zh,Kq),e(Kq,A_o),e(zh,L_o),e(A,y_o),e(A,Qh),e(Qh,xge),e(xge,x_o),e(Qh,$_o),e(Qh,ej),e(ej,k_o),e(Qh,S_o),e(A,R_o),e(A,Wh),e(Wh,$ge),e($ge,P_o),e(Wh,B_o),e(Wh,oj),e(oj,I_o),e(Wh,N_o),e(A,q_o),e(A,Uh),e(Uh,kge),e(kge,j_o),e(Uh,D_o),e(Uh,rj),e(rj,G_o),e(Uh,O_o),e(A,V_o),e(A,Hh),e(Hh,Sge),e(Sge,X_o),e(Hh,z_o),e(Hh,tj),e(tj,Q_o),e(Hh,W_o),e(A,U_o),e(A,Jh),e(Jh,Rge),e(Rge,H_o),e(Jh,J_o),e(Jh,aj),e(aj,Y_o),e(Jh,Z_o),e(A,K_o),e(A,Yh),e(Yh,Pge),e(Pge,e1o),e(Yh,o1o),e(Yh,nj),e(nj,r1o),e(Yh,t1o),e(A,a1o),e(A,Zh),e(Zh,Bge),e(Bge,n1o),e(Zh,s1o),e(Zh,sj),e(sj,l1o),e(Zh,i1o),e(A,d1o),e(A,Kh),e(Kh,Ige),e(Ige,c1o),e(Kh,m1o),e(Kh,lj),e(lj,f1o),e(Kh,g1o),e(A,h1o),e(A,eu),e(eu,Nge),e(Nge,u1o),e(eu,p1o),e(eu,ij),e(ij,_1o),e(eu,b1o),e(A,v1o),e(A,ou),e(ou,qge),e(qge,F1o),e(ou,T1o),e(ou,dj),e(dj,M1o),e(ou,E1o),e(A,C1o),e(A,ru),e(ru,jge),e(jge,w1o),e(ru,A1o),e(ru,cj),e(cj,L1o),e(ru,y1o),e(A,x1o),e(A,tu),e(tu,Dge),e(Dge,$1o),e(tu,k1o),e(tu,mj),e(mj,S1o),e(tu,R1o),e(A,P1o),e(A,au),e(au,Gge),e(Gge,B1o),e(au,I1o),e(au,fj),e(fj,N1o),e(au,q1o),e(A,j1o),e(A,nu),e(nu,Oge),e(Oge,D1o),e(nu,G1o),e(nu,gj),e(gj,O1o),e(nu,V1o),e(A,X1o),e(A,su),e(su,Vge),e(Vge,z1o),e(su,Q1o),e(su,hj),e(hj,W1o),e(su,U1o),e(A,H1o),e(A,lu),e(lu,Xge),e(Xge,J1o),e(lu,Y1o),e(lu,uj),e(uj,Z1o),e(lu,K1o),e(A,e2o),e(A,iu),e(iu,zge),e(zge,o2o),e(iu,r2o),e(iu,pj),e(pj,t2o),e(iu,a2o),e(A,n2o),e(A,du),e(du,Qge),e(Qge,s2o),e(du,l2o),e(du,_j),e(_j,i2o),e(du,d2o),e(A,c2o),e(A,cu),e(cu,Wge),e(Wge,m2o),e(cu,f2o),e(cu,bj),e(bj,g2o),e(cu,h2o),e(A,u2o),e(A,mu),e(mu,Uge),e(Uge,p2o),e(mu,_2o),e(mu,vj),e(vj,b2o),e(mu,v2o),e(A,F2o),e(A,fu),e(fu,Hge),e(Hge,T2o),e(fu,M2o),e(fu,Fj),e(Fj,E2o),e(fu,C2o),e(Ir,w2o),M(gu,Ir,null),e(ko,A2o),e(ko,hu),M(Vx,hu,null),e(hu,L2o),e(hu,Jge),e(Jge,y2o),b(m,rro,_),b(m,Fd,_),e(Fd,uu),e(uu,Yge),M(Xx,Yge,null),e(Fd,x2o),e(Fd,Zge),e(Zge,$2o),b(m,tro,_),b(m,So,_),M(zx,So,null),e(So,k2o),e(So,Qx),e(Qx,S2o),e(Qx,Tj),e(Tj,R2o),e(Qx,P2o),e(So,B2o),e(So,Wx),e(Wx,I2o),e(Wx,Kge),e(Kge,N2o),e(Wx,q2o),e(So,j2o),e(So,Nr),M(Ux,Nr,null),e(Nr,D2o),e(Nr,ehe),e(ehe,G2o),e(Nr,O2o),e(Nr,Za),e(Za,V2o),e(Za,ohe),e(ohe,X2o),e(Za,z2o),e(Za,rhe),e(rhe,Q2o),e(Za,W2o),e(Za,the),e(the,U2o),e(Za,H2o),e(Nr,J2o),e(Nr,k),e(k,cs),e(cs,ahe),e(ahe,Y2o),e(cs,Z2o),e(cs,Mj),e(Mj,K2o),e(cs,ebo),e(cs,Ej),e(Ej,obo),e(cs,rbo),e(k,tbo),e(k,ms),e(ms,nhe),e(nhe,abo),e(ms,nbo),e(ms,Cj),e(Cj,sbo),e(ms,lbo),e(ms,wj),e(wj,ibo),e(ms,dbo),e(k,cbo),e(k,fs),e(fs,she),e(she,mbo),e(fs,fbo),e(fs,Aj),e(Aj,gbo),e(fs,hbo),e(fs,Lj),e(Lj,ubo),e(fs,pbo),e(k,_bo),e(k,pu),e(pu,lhe),e(lhe,bbo),e(pu,vbo),e(pu,yj),e(yj,Fbo),e(pu,Tbo),e(k,Mbo),e(k,gs),e(gs,ihe),e(ihe,Ebo),e(gs,Cbo),e(gs,xj),e(xj,wbo),e(gs,Abo),e(gs,$j),e($j,Lbo),e(gs,ybo),e(k,xbo),e(k,_u),e(_u,dhe),e(dhe,$bo),e(_u,kbo),e(_u,kj),e(kj,Sbo),e(_u,Rbo),e(k,Pbo),e(k,bu),e(bu,che),e(che,Bbo),e(bu,Ibo),e(bu,Sj),e(Sj,Nbo),e(bu,qbo),e(k,jbo),e(k,vu),e(vu,mhe),e(mhe,Dbo),e(vu,Gbo),e(vu,Rj),e(Rj,Obo),e(vu,Vbo),e(k,Xbo),e(k,hs),e(hs,fhe),e(fhe,zbo),e(hs,Qbo),e(hs,Pj),e(Pj,Wbo),e(hs,Ubo),e(hs,Bj),e(Bj,Hbo),e(hs,Jbo),e(k,Ybo),e(k,us),e(us,ghe),e(ghe,Zbo),e(us,Kbo),e(us,Ij),e(Ij,evo),e(us,ovo),e(us,Nj),e(Nj,rvo),e(us,tvo),e(k,avo),e(k,ps),e(ps,hhe),e(hhe,nvo),e(ps,svo),e(ps,qj),e(qj,lvo),e(ps,ivo),e(ps,jj),e(jj,dvo),e(ps,cvo),e(k,mvo),e(k,Fu),e(Fu,uhe),e(uhe,fvo),e(Fu,gvo),e(Fu,Dj),e(Dj,hvo),e(Fu,uvo),e(k,pvo),e(k,Tu),e(Tu,phe),e(phe,_vo),e(Tu,bvo),e(Tu,Gj),e(Gj,vvo),e(Tu,Fvo),e(k,Tvo),e(k,Mu),e(Mu,_he),e(_he,Mvo),e(Mu,Evo),e(Mu,Oj),e(Oj,Cvo),e(Mu,wvo),e(k,Avo),e(k,_s),e(_s,bhe),e(bhe,Lvo),e(_s,yvo),e(_s,Vj),e(Vj,xvo),e(_s,$vo),e(_s,Xj),e(Xj,kvo),e(_s,Svo),e(k,Rvo),e(k,Eu),e(Eu,vhe),e(vhe,Pvo),e(Eu,Bvo),e(Eu,zj),e(zj,Ivo),e(Eu,Nvo),e(k,qvo),e(k,bs),e(bs,Fhe),e(Fhe,jvo),e(bs,Dvo),e(bs,Qj),e(Qj,Gvo),e(bs,Ovo),e(bs,Wj),e(Wj,Vvo),e(bs,Xvo),e(k,zvo),e(k,vs),e(vs,The),e(The,Qvo),e(vs,Wvo),e(vs,Uj),e(Uj,Uvo),e(vs,Hvo),e(vs,Hj),e(Hj,Jvo),e(vs,Yvo),e(k,Zvo),e(k,Fs),e(Fs,Mhe),e(Mhe,Kvo),e(Fs,eFo),e(Fs,Jj),e(Jj,oFo),e(Fs,rFo),e(Fs,Yj),e(Yj,tFo),e(Fs,aFo),e(k,nFo),e(k,Ts),e(Ts,Ehe),e(Ehe,sFo),e(Ts,lFo),e(Ts,Zj),e(Zj,iFo),e(Ts,dFo),e(Ts,Kj),e(Kj,cFo),e(Ts,mFo),e(k,fFo),e(k,Cu),e(Cu,Che),e(Che,gFo),e(Cu,hFo),e(Cu,eD),e(eD,uFo),e(Cu,pFo),e(k,_Fo),e(k,Ms),e(Ms,whe),e(whe,bFo),e(Ms,vFo),e(Ms,oD),e(oD,FFo),e(Ms,TFo),e(Ms,rD),e(rD,MFo),e(Ms,EFo),e(k,CFo),e(k,Es),e(Es,Ahe),e(Ahe,wFo),e(Es,AFo),e(Es,tD),e(tD,LFo),e(Es,yFo),e(Es,aD),e(aD,xFo),e(Es,$Fo),e(k,kFo),e(k,Cs),e(Cs,Lhe),e(Lhe,SFo),e(Cs,RFo),e(Cs,nD),e(nD,PFo),e(Cs,BFo),e(Cs,sD),e(sD,IFo),e(Cs,NFo),e(k,qFo),e(k,ws),e(ws,yhe),e(yhe,jFo),e(ws,DFo),e(ws,lD),e(lD,GFo),e(ws,OFo),e(ws,iD),e(iD,VFo),e(ws,XFo),e(k,zFo),e(k,As),e(As,xhe),e(xhe,QFo),e(As,WFo),e(As,dD),e(dD,UFo),e(As,HFo),e(As,cD),e(cD,JFo),e(As,YFo),e(k,ZFo),e(k,Ls),e(Ls,$he),e($he,KFo),e(Ls,eTo),e(Ls,mD),e(mD,oTo),e(Ls,rTo),e(Ls,fD),e(fD,tTo),e(Ls,aTo),e(k,nTo),e(k,ys),e(ys,khe),e(khe,sTo),e(ys,lTo),e(ys,gD),e(gD,iTo),e(ys,dTo),e(ys,hD),e(hD,cTo),e(ys,mTo),e(k,fTo),e(k,wu),e(wu,She),e(She,gTo),e(wu,hTo),e(wu,uD),e(uD,uTo),e(wu,pTo),e(k,_To),e(k,xs),e(xs,Rhe),e(Rhe,bTo),e(xs,vTo),e(xs,pD),e(pD,FTo),e(xs,TTo),e(xs,_D),e(_D,MTo),e(xs,ETo),e(k,CTo),e(k,Au),e(Au,Phe),e(Phe,wTo),e(Au,ATo),e(Au,bD),e(bD,LTo),e(Au,yTo),e(k,xTo),e(k,$s),e($s,Bhe),e(Bhe,$To),e($s,kTo),e($s,vD),e(vD,STo),e($s,RTo),e($s,FD),e(FD,PTo),e($s,BTo),e(k,ITo),e(k,ks),e(ks,Ihe),e(Ihe,NTo),e(ks,qTo),e(ks,TD),e(TD,jTo),e(ks,DTo),e(ks,MD),e(MD,GTo),e(ks,OTo),e(k,VTo),e(k,Ss),e(Ss,Nhe),e(Nhe,XTo),e(Ss,zTo),e(Ss,ED),e(ED,QTo),e(Ss,WTo),e(Ss,CD),e(CD,UTo),e(Ss,HTo),e(k,JTo),e(k,Lu),e(Lu,qhe),e(qhe,YTo),e(Lu,ZTo),e(Lu,wD),e(wD,KTo),e(Lu,eMo),e(k,oMo),e(k,yu),e(yu,jhe),e(jhe,rMo),e(yu,tMo),e(yu,AD),e(AD,aMo),e(yu,nMo),e(k,sMo),e(k,Rs),e(Rs,Dhe),e(Dhe,lMo),e(Rs,iMo),e(Rs,LD),e(LD,dMo),e(Rs,cMo),e(Rs,yD),e(yD,mMo),e(Rs,fMo),e(k,gMo),e(k,Ps),e(Ps,Ghe),e(Ghe,hMo),e(Ps,uMo),e(Ps,xD),e(xD,pMo),e(Ps,_Mo),e(Ps,$D),e($D,bMo),e(Ps,vMo),e(k,FMo),e(k,Bs),e(Bs,Ohe),e(Ohe,TMo),e(Bs,MMo),e(Bs,kD),e(kD,EMo),e(Bs,CMo),e(Bs,SD),e(SD,wMo),e(Bs,AMo),e(k,LMo),e(k,xu),e(xu,Vhe),e(Vhe,yMo),e(xu,xMo),e(xu,RD),e(RD,$Mo),e(xu,kMo),e(k,SMo),e(k,Is),e(Is,Xhe),e(Xhe,RMo),e(Is,PMo),e(Is,PD),e(PD,BMo),e(Is,IMo),e(Is,BD),e(BD,NMo),e(Is,qMo),e(k,jMo),e(k,Ns),e(Ns,zhe),e(zhe,DMo),e(Ns,GMo),e(Ns,ID),e(ID,OMo),e(Ns,VMo),e(Ns,ND),e(ND,XMo),e(Ns,zMo),e(k,QMo),e(k,qs),e(qs,Qhe),e(Qhe,WMo),e(qs,UMo),e(qs,qD),e(qD,HMo),e(qs,JMo),e(qs,jD),e(jD,YMo),e(qs,ZMo),e(k,KMo),e(k,js),e(js,Whe),e(Whe,eEo),e(js,oEo),e(js,DD),e(DD,rEo),e(js,tEo),e(js,GD),e(GD,aEo),e(js,nEo),e(k,sEo),e(k,Ds),e(Ds,Uhe),e(Uhe,lEo),e(Ds,iEo),e(Ds,OD),e(OD,dEo),e(Ds,cEo),e(Ds,VD),e(VD,mEo),e(Ds,fEo),e(k,gEo),e(k,Gs),e(Gs,Hhe),e(Hhe,hEo),e(Gs,uEo),e(Gs,XD),e(XD,pEo),e(Gs,_Eo),e(Gs,zD),e(zD,bEo),e(Gs,vEo),e(k,FEo),e(k,Os),e(Os,Jhe),e(Jhe,TEo),e(Os,MEo),e(Os,QD),e(QD,EEo),e(Os,CEo),e(Os,WD),e(WD,wEo),e(Os,AEo),e(k,LEo),e(k,Vs),e(Vs,Yhe),e(Yhe,yEo),e(Vs,xEo),e(Vs,UD),e(UD,$Eo),e(Vs,kEo),e(Vs,HD),e(HD,SEo),e(Vs,REo),e(k,PEo),e(k,Xs),e(Xs,Zhe),e(Zhe,BEo),e(Xs,IEo),e(Xs,JD),e(JD,NEo),e(Xs,qEo),e(Xs,YD),e(YD,jEo),e(Xs,DEo),e(k,GEo),e(k,$u),e($u,Khe),e(Khe,OEo),e($u,VEo),e($u,ZD),e(ZD,XEo),e($u,zEo),e(k,QEo),e(k,zs),e(zs,eue),e(eue,WEo),e(zs,UEo),e(zs,KD),e(KD,HEo),e(zs,JEo),e(zs,eG),e(eG,YEo),e(zs,ZEo),e(k,KEo),e(k,ku),e(ku,oue),e(oue,e4o),e(ku,o4o),e(ku,oG),e(oG,r4o),e(ku,t4o),e(k,a4o),e(k,Su),e(Su,rue),e(rue,n4o),e(Su,s4o),e(Su,rG),e(rG,l4o),e(Su,i4o),e(k,d4o),e(k,Qs),e(Qs,tue),e(tue,c4o),e(Qs,m4o),e(Qs,tG),e(tG,f4o),e(Qs,g4o),e(Qs,aG),e(aG,h4o),e(Qs,u4o),e(k,p4o),e(k,Ws),e(Ws,aue),e(aue,_4o),e(Ws,b4o),e(Ws,nG),e(nG,v4o),e(Ws,F4o),e(Ws,sG),e(sG,T4o),e(Ws,M4o),e(k,E4o),e(k,Us),e(Us,nue),e(nue,C4o),e(Us,w4o),e(Us,lG),e(lG,A4o),e(Us,L4o),e(Us,iG),e(iG,y4o),e(Us,x4o),e(k,$4o),e(k,Ru),e(Ru,sue),e(sue,k4o),e(Ru,S4o),e(Ru,dG),e(dG,R4o),e(Ru,P4o),e(k,B4o),e(k,Hs),e(Hs,lue),e(lue,I4o),e(Hs,N4o),e(Hs,cG),e(cG,q4o),e(Hs,j4o),e(Hs,mG),e(mG,D4o),e(Hs,G4o),e(k,O4o),e(k,Js),e(Js,iue),e(iue,V4o),e(Js,X4o),e(Js,fG),e(fG,z4o),e(Js,Q4o),e(Js,gG),e(gG,W4o),e(Js,U4o),e(k,H4o),e(k,Ys),e(Ys,due),e(due,J4o),e(Ys,Y4o),e(Ys,hG),e(hG,Z4o),e(Ys,K4o),e(Ys,uG),e(uG,eCo),e(Ys,oCo),e(k,rCo),e(k,Zs),e(Zs,cue),e(cue,tCo),e(Zs,aCo),e(Zs,pG),e(pG,nCo),e(Zs,sCo),e(Zs,_G),e(_G,lCo),e(Zs,iCo),e(k,dCo),e(k,Ks),e(Ks,mue),e(mue,cCo),e(Ks,mCo),e(Ks,bG),e(bG,fCo),e(Ks,gCo),e(Ks,vG),e(vG,hCo),e(Ks,uCo),e(k,pCo),e(k,el),e(el,fue),e(fue,_Co),e(el,bCo),e(el,FG),e(FG,vCo),e(el,FCo),e(el,TG),e(TG,TCo),e(el,MCo),e(k,ECo),e(k,ol),e(ol,gue),e(gue,CCo),e(ol,wCo),e(ol,MG),e(MG,ACo),e(ol,LCo),e(ol,EG),e(EG,yCo),e(ol,xCo),e(k,$Co),e(k,rl),e(rl,hue),e(hue,kCo),e(rl,SCo),e(rl,CG),e(CG,RCo),e(rl,PCo),e(rl,wG),e(wG,BCo),e(rl,ICo),e(k,NCo),e(k,Pu),e(Pu,uue),e(uue,qCo),e(Pu,jCo),e(Pu,AG),e(AG,DCo),e(Pu,GCo),e(k,OCo),e(k,tl),e(tl,pue),e(pue,VCo),e(tl,XCo),e(tl,LG),e(LG,zCo),e(tl,QCo),e(tl,yG),e(yG,WCo),e(tl,UCo),e(k,HCo),e(k,al),e(al,_ue),e(_ue,JCo),e(al,YCo),e(al,xG),e(xG,ZCo),e(al,KCo),e(al,$G),e($G,e3o),e(al,o3o),e(k,r3o),e(k,Bu),e(Bu,bue),e(bue,t3o),e(Bu,a3o),e(Bu,kG),e(kG,n3o),e(Bu,s3o),e(k,l3o),e(k,Iu),e(Iu,vue),e(vue,i3o),e(Iu,d3o),e(Iu,SG),e(SG,c3o),e(Iu,m3o),e(k,f3o),e(k,Nu),e(Nu,Fue),e(Fue,g3o),e(Nu,h3o),e(Nu,RG),e(RG,u3o),e(Nu,p3o),e(k,_3o),e(k,qu),e(qu,Tue),e(Tue,b3o),e(qu,v3o),e(qu,PG),e(PG,F3o),e(qu,T3o),e(k,M3o),e(k,nl),e(nl,Mue),e(Mue,E3o),e(nl,C3o),e(nl,BG),e(BG,w3o),e(nl,A3o),e(nl,IG),e(IG,L3o),e(nl,y3o),e(k,x3o),e(k,ju),e(ju,Eue),e(Eue,$3o),e(ju,k3o),e(ju,NG),e(NG,S3o),e(ju,R3o),e(k,P3o),e(k,sl),e(sl,Cue),e(Cue,B3o),e(sl,I3o),e(sl,qG),e(qG,N3o),e(sl,q3o),e(sl,jG),e(jG,j3o),e(sl,D3o),e(k,G3o),e(k,ll),e(ll,wue),e(wue,O3o),e(ll,V3o),e(ll,DG),e(DG,X3o),e(ll,z3o),e(ll,GG),e(GG,Q3o),e(ll,W3o),e(k,U3o),e(k,il),e(il,Aue),e(Aue,H3o),e(il,J3o),e(il,OG),e(OG,Y3o),e(il,Z3o),e(il,VG),e(VG,K3o),e(il,e5o),e(k,o5o),e(k,dl),e(dl,Lue),e(Lue,r5o),e(dl,t5o),e(dl,XG),e(XG,a5o),e(dl,n5o),e(dl,zG),e(zG,s5o),e(dl,l5o),e(k,i5o),e(k,cl),e(cl,yue),e(yue,d5o),e(cl,c5o),e(cl,QG),e(QG,m5o),e(cl,f5o),e(cl,WG),e(WG,g5o),e(cl,h5o),e(k,u5o),e(k,ml),e(ml,xue),e(xue,p5o),e(ml,_5o),e(ml,UG),e(UG,b5o),e(ml,v5o),e(ml,HG),e(HG,F5o),e(ml,T5o),e(k,M5o),e(k,Du),e(Du,$ue),e($ue,E5o),e(Du,C5o),e(Du,JG),e(JG,w5o),e(Du,A5o),e(k,L5o),e(k,Gu),e(Gu,kue),e(kue,y5o),e(Gu,x5o),e(Gu,YG),e(YG,$5o),e(Gu,k5o),e(k,S5o),e(k,fl),e(fl,Sue),e(Sue,R5o),e(fl,P5o),e(fl,ZG),e(ZG,B5o),e(fl,I5o),e(fl,KG),e(KG,N5o),e(fl,q5o),e(k,j5o),e(k,gl),e(gl,Rue),e(Rue,D5o),e(gl,G5o),e(gl,eO),e(eO,O5o),e(gl,V5o),e(gl,oO),e(oO,X5o),e(gl,z5o),e(k,Q5o),e(k,hl),e(hl,Pue),e(Pue,W5o),e(hl,U5o),e(hl,rO),e(rO,H5o),e(hl,J5o),e(hl,tO),e(tO,Y5o),e(hl,Z5o),e(k,K5o),e(k,Ou),e(Ou,Bue),e(Bue,e0o),e(Ou,o0o),e(Ou,aO),e(aO,r0o),e(Ou,t0o),e(k,a0o),e(k,Vu),e(Vu,Iue),e(Iue,n0o),e(Vu,s0o),e(Vu,nO),e(nO,l0o),e(Vu,i0o),e(k,d0o),e(k,Xu),e(Xu,Nue),e(Nue,c0o),e(Xu,m0o),e(Xu,sO),e(sO,f0o),e(Xu,g0o),e(k,h0o),e(k,ul),e(ul,que),e(que,u0o),e(ul,p0o),e(ul,lO),e(lO,_0o),e(ul,b0o),e(ul,iO),e(iO,v0o),e(ul,F0o),e(k,T0o),e(k,pl),e(pl,jue),e(jue,M0o),e(pl,E0o),e(pl,dO),e(dO,C0o),e(pl,w0o),e(pl,cO),e(cO,A0o),e(pl,L0o),e(k,y0o),e(k,zu),e(zu,Due),e(Due,x0o),e(zu,$0o),e(zu,mO),e(mO,k0o),e(zu,S0o),e(k,R0o),e(k,Qu),e(Qu,Gue),e(Gue,P0o),e(Qu,B0o),e(Qu,fO),e(fO,I0o),e(Qu,N0o),e(k,q0o),e(k,Wu),e(Wu,Oue),e(Oue,j0o),e(Wu,D0o),e(Wu,gO),e(gO,G0o),e(Wu,O0o),e(k,V0o),e(k,Uu),e(Uu,Vue),e(Vue,X0o),e(Uu,z0o),e(Uu,hO),e(hO,Q0o),e(Uu,W0o),e(k,U0o),e(k,_l),e(_l,Xue),e(Xue,H0o),e(_l,J0o),e(_l,uO),e(uO,Y0o),e(_l,Z0o),e(_l,pO),e(pO,K0o),e(_l,ewo),e(k,owo),e(k,bl),e(bl,zue),e(zue,rwo),e(bl,two),e(bl,_O),e(_O,awo),e(bl,nwo),e(bl,bO),e(bO,swo),e(bl,lwo),e(k,iwo),e(k,Hu),e(Hu,Que),e(Que,dwo),e(Hu,cwo),e(Hu,vO),e(vO,mwo),e(Hu,fwo),e(k,gwo),e(k,Ju),e(Ju,Wue),e(Wue,hwo),e(Ju,uwo),e(Ju,FO),e(FO,pwo),e(Ju,_wo),e(k,bwo),e(k,vl),e(vl,Uue),e(Uue,vwo),e(vl,Fwo),e(vl,TO),e(TO,Two),e(vl,Mwo),e(vl,MO),e(MO,Ewo),e(vl,Cwo),e(k,wwo),e(k,Fl),e(Fl,Hue),e(Hue,Awo),e(Fl,Lwo),e(Fl,EO),e(EO,ywo),e(Fl,xwo),e(Fl,CO),e(CO,$wo),e(Fl,kwo),e(k,Swo),e(k,Tl),e(Tl,Jue),e(Jue,Rwo),e(Tl,Pwo),e(Tl,wO),e(wO,Bwo),e(Tl,Iwo),e(Tl,AO),e(AO,Nwo),e(Tl,qwo),e(k,jwo),e(k,Ml),e(Ml,Yue),e(Yue,Dwo),e(Ml,Gwo),e(Ml,LO),e(LO,Owo),e(Ml,Vwo),e(Ml,yO),e(yO,Xwo),e(Ml,zwo),e(Nr,Qwo),M(Yu,Nr,null),e(So,Wwo),e(So,Zu),M(Hx,Zu,null),e(Zu,Uwo),e(Zu,Zue),e(Zue,Hwo),b(m,aro,_),b(m,Td,_),e(Td,Ku),e(Ku,Kue),M(Jx,Kue,null),e(Td,Jwo),e(Td,epe),e(epe,Ywo),b(m,nro,_),b(m,Ro,_),M(Yx,Ro,null),e(Ro,Zwo),e(Ro,Zx),e(Zx,Kwo),e(Zx,xO),e(xO,eAo),e(Zx,oAo),e(Ro,rAo),e(Ro,Kx),e(Kx,tAo),e(Kx,ope),e(ope,aAo),e(Kx,nAo),e(Ro,sAo),e(Ro,Ye),M(e$,Ye,null),e(Ye,lAo),e(Ye,rpe),e(rpe,iAo),e(Ye,dAo),e(Ye,Ka),e(Ka,cAo),e(Ka,tpe),e(tpe,mAo),e(Ka,fAo),e(Ka,ape),e(ape,gAo),e(Ka,hAo),e(Ka,npe),e(npe,uAo),e(Ka,pAo),e(Ye,_Ao),e(Ye,z),e(z,ep),e(ep,spe),e(spe,bAo),e(ep,vAo),e(ep,$O),e($O,FAo),e(ep,TAo),e(z,MAo),e(z,op),e(op,lpe),e(lpe,EAo),e(op,CAo),e(op,kO),e(kO,wAo),e(op,AAo),e(z,LAo),e(z,rp),e(rp,ipe),e(ipe,yAo),e(rp,xAo),e(rp,SO),e(SO,$Ao),e(rp,kAo),e(z,SAo),e(z,tp),e(tp,dpe),e(dpe,RAo),e(tp,PAo),e(tp,RO),e(RO,BAo),e(tp,IAo),e(z,NAo),e(z,ap),e(ap,cpe),e(cpe,qAo),e(ap,jAo),e(ap,PO),e(PO,DAo),e(ap,GAo),e(z,OAo),e(z,np),e(np,mpe),e(mpe,VAo),e(np,XAo),e(np,BO),e(BO,zAo),e(np,QAo),e(z,WAo),e(z,sp),e(sp,fpe),e(fpe,UAo),e(sp,HAo),e(sp,IO),e(IO,JAo),e(sp,YAo),e(z,ZAo),e(z,lp),e(lp,gpe),e(gpe,KAo),e(lp,e6o),e(lp,NO),e(NO,o6o),e(lp,r6o),e(z,t6o),e(z,ip),e(ip,hpe),e(hpe,a6o),e(ip,n6o),e(ip,qO),e(qO,s6o),e(ip,l6o),e(z,i6o),e(z,dp),e(dp,upe),e(upe,d6o),e(dp,c6o),e(dp,jO),e(jO,m6o),e(dp,f6o),e(z,g6o),e(z,cp),e(cp,ppe),e(ppe,h6o),e(cp,u6o),e(cp,DO),e(DO,p6o),e(cp,_6o),e(z,b6o),e(z,mp),e(mp,_pe),e(_pe,v6o),e(mp,F6o),e(mp,GO),e(GO,T6o),e(mp,M6o),e(z,E6o),e(z,fp),e(fp,bpe),e(bpe,C6o),e(fp,w6o),e(fp,OO),e(OO,A6o),e(fp,L6o),e(z,y6o),e(z,gp),e(gp,vpe),e(vpe,x6o),e(gp,$6o),e(gp,VO),e(VO,k6o),e(gp,S6o),e(z,R6o),e(z,hp),e(hp,Fpe),e(Fpe,P6o),e(hp,B6o),e(hp,XO),e(XO,I6o),e(hp,N6o),e(z,q6o),e(z,up),e(up,Tpe),e(Tpe,j6o),e(up,D6o),e(up,zO),e(zO,G6o),e(up,O6o),e(z,V6o),e(z,pp),e(pp,Mpe),e(Mpe,X6o),e(pp,z6o),e(pp,QO),e(QO,Q6o),e(pp,W6o),e(z,U6o),e(z,_p),e(_p,Epe),e(Epe,H6o),e(_p,J6o),e(_p,WO),e(WO,Y6o),e(_p,Z6o),e(z,K6o),e(z,bp),e(bp,Cpe),e(Cpe,e7o),e(bp,o7o),e(bp,UO),e(UO,r7o),e(bp,t7o),e(z,a7o),e(z,vp),e(vp,wpe),e(wpe,n7o),e(vp,s7o),e(vp,HO),e(HO,l7o),e(vp,i7o),e(z,d7o),e(z,Fp),e(Fp,Ape),e(Ape,c7o),e(Fp,m7o),e(Fp,JO),e(JO,f7o),e(Fp,g7o),e(z,h7o),e(z,Tp),e(Tp,Lpe),e(Lpe,u7o),e(Tp,p7o),e(Tp,YO),e(YO,_7o),e(Tp,b7o),e(z,v7o),e(z,Mp),e(Mp,ype),e(ype,F7o),e(Mp,T7o),e(Mp,ZO),e(ZO,M7o),e(Mp,E7o),e(z,C7o),e(z,Ep),e(Ep,xpe),e(xpe,w7o),e(Ep,A7o),e(Ep,KO),e(KO,L7o),e(Ep,y7o),e(z,x7o),e(z,Cp),e(Cp,$pe),e($pe,$7o),e(Cp,k7o),e(Cp,eV),e(eV,S7o),e(Cp,R7o),e(z,P7o),e(z,wp),e(wp,kpe),e(kpe,B7o),e(wp,I7o),e(wp,oV),e(oV,N7o),e(wp,q7o),e(z,j7o),e(z,Ap),e(Ap,Spe),e(Spe,D7o),e(Ap,G7o),e(Ap,rV),e(rV,O7o),e(Ap,V7o),e(z,X7o),e(z,Lp),e(Lp,Rpe),e(Rpe,z7o),e(Lp,Q7o),e(Lp,tV),e(tV,W7o),e(Lp,U7o),e(z,H7o),e(z,yp),e(yp,Ppe),e(Ppe,J7o),e(yp,Y7o),e(yp,aV),e(aV,Z7o),e(yp,K7o),e(z,eLo),e(z,xp),e(xp,Bpe),e(Bpe,oLo),e(xp,rLo),e(xp,nV),e(nV,tLo),e(xp,aLo),e(z,nLo),e(z,$p),e($p,Ipe),e(Ipe,sLo),e($p,lLo),e($p,sV),e(sV,iLo),e($p,dLo),e(z,cLo),e(z,kp),e(kp,Npe),e(Npe,mLo),e(kp,fLo),e(kp,lV),e(lV,gLo),e(kp,hLo),e(z,uLo),e(z,Sp),e(Sp,qpe),e(qpe,pLo),e(Sp,_Lo),e(Sp,iV),e(iV,bLo),e(Sp,vLo),e(z,FLo),e(z,Rp),e(Rp,jpe),e(jpe,TLo),e(Rp,MLo),e(Rp,dV),e(dV,ELo),e(Rp,CLo),e(z,wLo),e(z,Pp),e(Pp,Dpe),e(Dpe,ALo),e(Pp,LLo),e(Pp,cV),e(cV,yLo),e(Pp,xLo),e(z,$Lo),e(z,Bp),e(Bp,Gpe),e(Gpe,kLo),e(Bp,SLo),e(Bp,mV),e(mV,RLo),e(Bp,PLo),e(z,BLo),e(z,Ip),e(Ip,Ope),e(Ope,ILo),e(Ip,NLo),e(Ip,fV),e(fV,qLo),e(Ip,jLo),e(z,DLo),e(z,Np),e(Np,Vpe),e(Vpe,GLo),e(Np,OLo),e(Np,gV),e(gV,VLo),e(Np,XLo),e(z,zLo),e(z,qp),e(qp,Xpe),e(Xpe,QLo),e(qp,WLo),e(qp,hV),e(hV,ULo),e(qp,HLo),e(z,JLo),e(z,jp),e(jp,zpe),e(zpe,YLo),e(jp,ZLo),e(jp,uV),e(uV,KLo),e(jp,e8o),e(z,o8o),e(z,Dp),e(Dp,Qpe),e(Qpe,r8o),e(Dp,t8o),e(Dp,pV),e(pV,a8o),e(Dp,n8o),e(z,s8o),e(z,Gp),e(Gp,Wpe),e(Wpe,l8o),e(Gp,i8o),e(Gp,_V),e(_V,d8o),e(Gp,c8o),e(z,m8o),e(z,Op),e(Op,Upe),e(Upe,f8o),e(Op,g8o),e(Op,bV),e(bV,h8o),e(Op,u8o),e(Ye,p8o),M(Vp,Ye,null),e(Ye,_8o),M(Xp,Ye,null),e(Ro,b8o),e(Ro,zp),M(o$,zp,null),e(zp,v8o),e(zp,Hpe),e(Hpe,F8o),b(m,sro,_),b(m,Md,_),e(Md,Qp),e(Qp,Jpe),M(r$,Jpe,null),e(Md,T8o),e(Md,Ype),e(Ype,M8o),b(m,lro,_),b(m,Po,_),M(t$,Po,null),e(Po,E8o),e(Po,a$),e(a$,C8o),e(a$,vV),e(vV,w8o),e(a$,A8o),e(Po,L8o),e(Po,n$),e(n$,y8o),e(n$,Zpe),e(Zpe,x8o),e(n$,$8o),e(Po,k8o),e(Po,Ze),M(s$,Ze,null),e(Ze,S8o),e(Ze,Kpe),e(Kpe,R8o),e(Ze,P8o),e(Ze,Ed),e(Ed,B8o),e(Ed,e_e),e(e_e,I8o),e(Ed,N8o),e(Ed,o_e),e(o_e,q8o),e(Ed,j8o),e(Ze,D8o),e(Ze,se),e(se,Wp),e(Wp,r_e),e(r_e,G8o),e(Wp,O8o),e(Wp,FV),e(FV,V8o),e(Wp,X8o),e(se,z8o),e(se,Up),e(Up,t_e),e(t_e,Q8o),e(Up,W8o),e(Up,TV),e(TV,U8o),e(Up,H8o),e(se,J8o),e(se,Hp),e(Hp,a_e),e(a_e,Y8o),e(Hp,Z8o),e(Hp,MV),e(MV,K8o),e(Hp,eyo),e(se,oyo),e(se,Jp),e(Jp,n_e),e(n_e,ryo),e(Jp,tyo),e(Jp,EV),e(EV,ayo),e(Jp,nyo),e(se,syo),e(se,Yp),e(Yp,s_e),e(s_e,lyo),e(Yp,iyo),e(Yp,CV),e(CV,dyo),e(Yp,cyo),e(se,myo),e(se,Zp),e(Zp,l_e),e(l_e,fyo),e(Zp,gyo),e(Zp,wV),e(wV,hyo),e(Zp,uyo),e(se,pyo),e(se,Kp),e(Kp,i_e),e(i_e,_yo),e(Kp,byo),e(Kp,AV),e(AV,vyo),e(Kp,Fyo),e(se,Tyo),e(se,e_),e(e_,d_e),e(d_e,Myo),e(e_,Eyo),e(e_,LV),e(LV,Cyo),e(e_,wyo),e(se,Ayo),e(se,o_),e(o_,c_e),e(c_e,Lyo),e(o_,yyo),e(o_,yV),e(yV,xyo),e(o_,$yo),e(se,kyo),e(se,r_),e(r_,m_e),e(m_e,Syo),e(r_,Ryo),e(r_,xV),e(xV,Pyo),e(r_,Byo),e(se,Iyo),e(se,t_),e(t_,f_e),e(f_e,Nyo),e(t_,qyo),e(t_,$V),e($V,jyo),e(t_,Dyo),e(se,Gyo),e(se,a_),e(a_,g_e),e(g_e,Oyo),e(a_,Vyo),e(a_,kV),e(kV,Xyo),e(a_,zyo),e(se,Qyo),e(se,n_),e(n_,h_e),e(h_e,Wyo),e(n_,Uyo),e(n_,SV),e(SV,Hyo),e(n_,Jyo),e(se,Yyo),e(se,s_),e(s_,u_e),e(u_e,Zyo),e(s_,Kyo),e(s_,RV),e(RV,e9o),e(s_,o9o),e(se,r9o),e(se,l_),e(l_,p_e),e(p_e,t9o),e(l_,a9o),e(l_,PV),e(PV,n9o),e(l_,s9o),e(se,l9o),e(se,i_),e(i_,__e),e(__e,i9o),e(i_,d9o),e(i_,BV),e(BV,c9o),e(i_,m9o),e(se,f9o),e(se,d_),e(d_,b_e),e(b_e,g9o),e(d_,h9o),e(d_,IV),e(IV,u9o),e(d_,p9o),e(se,_9o),e(se,c_),e(c_,v_e),e(v_e,b9o),e(c_,v9o),e(c_,NV),e(NV,F9o),e(c_,T9o),e(se,M9o),e(se,m_),e(m_,F_e),e(F_e,E9o),e(m_,C9o),e(m_,qV),e(qV,w9o),e(m_,A9o),e(se,L9o),e(se,f_),e(f_,T_e),e(T_e,y9o),e(f_,x9o),e(f_,jV),e(jV,$9o),e(f_,k9o),e(se,S9o),e(se,g_),e(g_,M_e),e(M_e,R9o),e(g_,P9o),e(g_,DV),e(DV,B9o),e(g_,I9o),e(se,N9o),e(se,h_),e(h_,E_e),e(E_e,q9o),e(h_,j9o),e(h_,GV),e(GV,D9o),e(h_,G9o),e(se,O9o),e(se,u_),e(u_,C_e),e(C_e,V9o),e(u_,X9o),e(u_,OV),e(OV,z9o),e(u_,Q9o),e(Ze,W9o),M(p_,Ze,null),e(Ze,U9o),M(__,Ze,null),e(Po,H9o),e(Po,b_),M(l$,b_,null),e(b_,J9o),e(b_,w_e),e(w_e,Y9o),b(m,iro,_),b(m,Cd,_),e(Cd,v_),e(v_,A_e),M(i$,A_e,null),e(Cd,Z9o),e(Cd,L_e),e(L_e,K9o),b(m,dro,_),b(m,Bo,_),M(d$,Bo,null),e(Bo,exo),e(Bo,wd),e(wd,oxo),e(wd,VV),e(VV,rxo),e(wd,txo),e(wd,XV),e(XV,axo),e(wd,nxo),e(Bo,sxo),e(Bo,c$),e(c$,lxo),e(c$,y_e),e(y_e,ixo),e(c$,dxo),e(Bo,cxo),e(Bo,vt),M(m$,vt,null),e(vt,mxo),e(vt,x_e),e(x_e,fxo),e(vt,gxo),e(vt,Ad),e(Ad,hxo),e(Ad,$_e),e($_e,uxo),e(Ad,pxo),e(Ad,zV),e(zV,_xo),e(Ad,bxo),e(vt,vxo),M(F_,vt,null),e(Bo,Fxo),e(Bo,Ke),M(f$,Ke,null),e(Ke,Txo),e(Ke,k_e),e(k_e,Mxo),e(Ke,Exo),e(Ke,en),e(en,Cxo),e(en,S_e),e(S_e,wxo),e(en,Axo),e(en,R_e),e(R_e,Lxo),e(en,yxo),e(en,P_e),e(P_e,xxo),e(en,$xo),e(Ke,kxo),e(Ke,y),e(y,T_),e(T_,B_e),e(B_e,Sxo),e(T_,Rxo),e(T_,QV),e(QV,Pxo),e(T_,Bxo),e(y,Ixo),e(y,M_),e(M_,I_e),e(I_e,Nxo),e(M_,qxo),e(M_,WV),e(WV,jxo),e(M_,Dxo),e(y,Gxo),e(y,E_),e(E_,N_e),e(N_e,Oxo),e(E_,Vxo),e(E_,UV),e(UV,Xxo),e(E_,zxo),e(y,Qxo),e(y,C_),e(C_,q_e),e(q_e,Wxo),e(C_,Uxo),e(C_,HV),e(HV,Hxo),e(C_,Jxo),e(y,Yxo),e(y,w_),e(w_,j_e),e(j_e,Zxo),e(w_,Kxo),e(w_,JV),e(JV,e$o),e(w_,o$o),e(y,r$o),e(y,A_),e(A_,D_e),e(D_e,t$o),e(A_,a$o),e(A_,YV),e(YV,n$o),e(A_,s$o),e(y,l$o),e(y,L_),e(L_,G_e),e(G_e,i$o),e(L_,d$o),e(L_,ZV),e(ZV,c$o),e(L_,m$o),e(y,f$o),e(y,y_),e(y_,O_e),e(O_e,g$o),e(y_,h$o),e(y_,KV),e(KV,u$o),e(y_,p$o),e(y,_$o),e(y,x_),e(x_,V_e),e(V_e,b$o),e(x_,v$o),e(x_,eX),e(eX,F$o),e(x_,T$o),e(y,M$o),e(y,$_),e($_,X_e),e(X_e,E$o),e($_,C$o),e($_,oX),e(oX,w$o),e($_,A$o),e(y,L$o),e(y,k_),e(k_,z_e),e(z_e,y$o),e(k_,x$o),e(k_,rX),e(rX,$$o),e(k_,k$o),e(y,S$o),e(y,S_),e(S_,Q_e),e(Q_e,R$o),e(S_,P$o),e(S_,tX),e(tX,B$o),e(S_,I$o),e(y,N$o),e(y,R_),e(R_,W_e),e(W_e,q$o),e(R_,j$o),e(R_,aX),e(aX,D$o),e(R_,G$o),e(y,O$o),e(y,P_),e(P_,U_e),e(U_e,V$o),e(P_,X$o),e(P_,nX),e(nX,z$o),e(P_,Q$o),e(y,W$o),e(y,B_),e(B_,H_e),e(H_e,U$o),e(B_,H$o),e(B_,sX),e(sX,J$o),e(B_,Y$o),e(y,Z$o),e(y,I_),e(I_,J_e),e(J_e,K$o),e(I_,eko),e(I_,lX),e(lX,oko),e(I_,rko),e(y,tko),e(y,N_),e(N_,Y_e),e(Y_e,ako),e(N_,nko),e(N_,iX),e(iX,sko),e(N_,lko),e(y,iko),e(y,q_),e(q_,Z_e),e(Z_e,dko),e(q_,cko),e(q_,dX),e(dX,mko),e(q_,fko),e(y,gko),e(y,j_),e(j_,K_e),e(K_e,hko),e(j_,uko),e(j_,cX),e(cX,pko),e(j_,_ko),e(y,bko),e(y,D_),e(D_,e1e),e(e1e,vko),e(D_,Fko),e(D_,mX),e(mX,Tko),e(D_,Mko),e(y,Eko),e(y,G_),e(G_,o1e),e(o1e,Cko),e(G_,wko),e(G_,fX),e(fX,Ako),e(G_,Lko),e(y,yko),e(y,O_),e(O_,r1e),e(r1e,xko),e(O_,$ko),e(O_,gX),e(gX,kko),e(O_,Sko),e(y,Rko),e(y,V_),e(V_,t1e),e(t1e,Pko),e(V_,Bko),e(V_,hX),e(hX,Iko),e(V_,Nko),e(y,qko),e(y,X_),e(X_,a1e),e(a1e,jko),e(X_,Dko),e(X_,uX),e(uX,Gko),e(X_,Oko),e(y,Vko),e(y,z_),e(z_,n1e),e(n1e,Xko),e(z_,zko),e(z_,pX),e(pX,Qko),e(z_,Wko),e(y,Uko),e(y,Q_),e(Q_,s1e),e(s1e,Hko),e(Q_,Jko),e(Q_,_X),e(_X,Yko),e(Q_,Zko),e(y,Kko),e(y,W_),e(W_,l1e),e(l1e,eSo),e(W_,oSo),e(W_,bX),e(bX,rSo),e(W_,tSo),e(y,aSo),e(y,U_),e(U_,i1e),e(i1e,nSo),e(U_,sSo),e(U_,vX),e(vX,lSo),e(U_,iSo),e(y,dSo),e(y,H_),e(H_,d1e),e(d1e,cSo),e(H_,mSo),e(H_,FX),e(FX,fSo),e(H_,gSo),e(y,hSo),e(y,J_),e(J_,c1e),e(c1e,uSo),e(J_,pSo),e(J_,TX),e(TX,_So),e(J_,bSo),e(y,vSo),e(y,Y_),e(Y_,m1e),e(m1e,FSo),e(Y_,TSo),e(Y_,MX),e(MX,MSo),e(Y_,ESo),e(y,CSo),e(y,Z_),e(Z_,f1e),e(f1e,wSo),e(Z_,ASo),e(Z_,EX),e(EX,LSo),e(Z_,ySo),e(y,xSo),e(y,K_),e(K_,g1e),e(g1e,$So),e(K_,kSo),e(K_,CX),e(CX,SSo),e(K_,RSo),e(y,PSo),e(y,e1),e(e1,h1e),e(h1e,BSo),e(e1,ISo),e(e1,wX),e(wX,NSo),e(e1,qSo),e(y,jSo),e(y,o1),e(o1,u1e),e(u1e,DSo),e(o1,GSo),e(o1,AX),e(AX,OSo),e(o1,VSo),e(y,XSo),e(y,r1),e(r1,p1e),e(p1e,zSo),e(r1,QSo),e(r1,LX),e(LX,WSo),e(r1,USo),e(y,HSo),e(y,t1),e(t1,_1e),e(_1e,JSo),e(t1,YSo),e(t1,yX),e(yX,ZSo),e(t1,KSo),e(y,eRo),e(y,a1),e(a1,b1e),e(b1e,oRo),e(a1,rRo),e(a1,xX),e(xX,tRo),e(a1,aRo),e(y,nRo),e(y,n1),e(n1,v1e),e(v1e,sRo),e(n1,lRo),e(n1,$X),e($X,iRo),e(n1,dRo),e(y,cRo),e(y,El),e(El,F1e),e(F1e,mRo),e(El,fRo),e(El,kX),e(kX,gRo),e(El,hRo),e(El,SX),e(SX,uRo),e(El,pRo),e(y,_Ro),e(y,s1),e(s1,T1e),e(T1e,bRo),e(s1,vRo),e(s1,RX),e(RX,FRo),e(s1,TRo),e(y,MRo),e(y,l1),e(l1,M1e),e(M1e,ERo),e(l1,CRo),e(l1,PX),e(PX,wRo),e(l1,ARo),e(y,LRo),e(y,i1),e(i1,E1e),e(E1e,yRo),e(i1,xRo),e(i1,BX),e(BX,$Ro),e(i1,kRo),e(y,SRo),e(y,d1),e(d1,C1e),e(C1e,RRo),e(d1,PRo),e(d1,IX),e(IX,BRo),e(d1,IRo),e(y,NRo),e(y,c1),e(c1,w1e),e(w1e,qRo),e(c1,jRo),e(c1,NX),e(NX,DRo),e(c1,GRo),e(y,ORo),e(y,m1),e(m1,A1e),e(A1e,VRo),e(m1,XRo),e(m1,qX),e(qX,zRo),e(m1,QRo),e(y,WRo),e(y,f1),e(f1,L1e),e(L1e,URo),e(f1,HRo),e(f1,jX),e(jX,JRo),e(f1,YRo),e(y,ZRo),e(y,g1),e(g1,y1e),e(y1e,KRo),e(g1,ePo),e(g1,DX),e(DX,oPo),e(g1,rPo),e(y,tPo),e(y,h1),e(h1,x1e),e(x1e,aPo),e(h1,nPo),e(h1,GX),e(GX,sPo),e(h1,lPo),e(y,iPo),e(y,u1),e(u1,$1e),e($1e,dPo),e(u1,cPo),e(u1,OX),e(OX,mPo),e(u1,fPo),e(y,gPo),e(y,p1),e(p1,k1e),e(k1e,hPo),e(p1,uPo),e(p1,VX),e(VX,pPo),e(p1,_Po),e(y,bPo),e(y,_1),e(_1,S1e),e(S1e,vPo),e(_1,FPo),e(_1,XX),e(XX,TPo),e(_1,MPo),e(y,EPo),e(y,b1),e(b1,R1e),e(R1e,CPo),e(b1,wPo),e(b1,zX),e(zX,APo),e(b1,LPo),e(y,yPo),e(y,v1),e(v1,P1e),e(P1e,xPo),e(v1,$Po),e(v1,QX),e(QX,kPo),e(v1,SPo),e(y,RPo),e(y,F1),e(F1,B1e),e(B1e,PPo),e(F1,BPo),e(F1,WX),e(WX,IPo),e(F1,NPo),e(y,qPo),e(y,T1),e(T1,I1e),e(I1e,jPo),e(T1,DPo),e(T1,UX),e(UX,GPo),e(T1,OPo),e(y,VPo),e(y,M1),e(M1,N1e),e(N1e,XPo),e(M1,zPo),e(M1,HX),e(HX,QPo),e(M1,WPo),e(y,UPo),e(y,E1),e(E1,q1e),e(q1e,HPo),e(E1,JPo),e(E1,JX),e(JX,YPo),e(E1,ZPo),e(y,KPo),e(y,C1),e(C1,j1e),e(j1e,eBo),e(C1,oBo),e(C1,YX),e(YX,rBo),e(C1,tBo),e(y,aBo),e(y,w1),e(w1,D1e),e(D1e,nBo),e(w1,sBo),e(w1,ZX),e(ZX,lBo),e(w1,iBo),e(y,dBo),e(y,A1),e(A1,G1e),e(G1e,cBo),e(A1,mBo),e(A1,KX),e(KX,fBo),e(A1,gBo),e(y,hBo),e(y,L1),e(L1,O1e),e(O1e,uBo),e(L1,pBo),e(L1,ez),e(ez,_Bo),e(L1,bBo),e(y,vBo),e(y,y1),e(y1,V1e),e(V1e,FBo),e(y1,TBo),e(y1,oz),e(oz,MBo),e(y1,EBo),e(y,CBo),e(y,x1),e(x1,X1e),e(X1e,wBo),e(x1,ABo),e(x1,rz),e(rz,LBo),e(x1,yBo),e(y,xBo),e(y,$1),e($1,z1e),e(z1e,$Bo),e($1,kBo),e($1,tz),e(tz,SBo),e($1,RBo),e(y,PBo),e(y,k1),e(k1,Q1e),e(Q1e,BBo),e(k1,IBo),e(k1,az),e(az,NBo),e(k1,qBo),e(y,jBo),e(y,S1),e(S1,W1e),e(W1e,DBo),e(S1,GBo),e(S1,nz),e(nz,OBo),e(S1,VBo),e(y,XBo),e(y,R1),e(R1,U1e),e(U1e,zBo),e(R1,QBo),e(R1,sz),e(sz,WBo),e(R1,UBo),e(y,HBo),e(y,P1),e(P1,H1e),e(H1e,JBo),e(P1,YBo),e(P1,lz),e(lz,ZBo),e(P1,KBo),e(y,eIo),e(y,B1),e(B1,J1e),e(J1e,oIo),e(B1,rIo),e(B1,iz),e(iz,tIo),e(B1,aIo),e(y,nIo),e(y,I1),e(I1,Y1e),e(Y1e,sIo),e(I1,lIo),e(I1,dz),e(dz,iIo),e(I1,dIo),e(y,cIo),e(y,N1),e(N1,Z1e),e(Z1e,mIo),e(N1,fIo),e(N1,cz),e(cz,gIo),e(N1,hIo),e(y,uIo),e(y,q1),e(q1,K1e),e(K1e,pIo),e(q1,_Io),e(q1,mz),e(mz,bIo),e(q1,vIo),e(y,FIo),e(y,j1),e(j1,e2e),e(e2e,TIo),e(j1,MIo),e(j1,fz),e(fz,EIo),e(j1,CIo),e(y,wIo),e(y,D1),e(D1,o2e),e(o2e,AIo),e(D1,LIo),e(D1,gz),e(gz,yIo),e(D1,xIo),e(y,$Io),e(y,G1),e(G1,r2e),e(r2e,kIo),e(G1,SIo),e(G1,hz),e(hz,RIo),e(G1,PIo),e(y,BIo),e(y,O1),e(O1,t2e),e(t2e,IIo),e(O1,NIo),e(O1,uz),e(uz,qIo),e(O1,jIo),e(y,DIo),e(y,V1),e(V1,a2e),e(a2e,GIo),e(V1,OIo),e(V1,pz),e(pz,VIo),e(V1,XIo),e(y,zIo),e(y,X1),e(X1,n2e),e(n2e,QIo),e(X1,WIo),e(X1,_z),e(_z,UIo),e(X1,HIo),e(y,JIo),e(y,z1),e(z1,s2e),e(s2e,YIo),e(z1,ZIo),e(z1,bz),e(bz,KIo),e(z1,eNo),e(y,oNo),e(y,Q1),e(Q1,l2e),e(l2e,rNo),e(Q1,tNo),e(Q1,vz),e(vz,aNo),e(Q1,nNo),e(y,sNo),e(y,W1),e(W1,i2e),e(i2e,lNo),e(W1,iNo),e(W1,Fz),e(Fz,dNo),e(W1,cNo),e(y,mNo),e(y,U1),e(U1,d2e),e(d2e,fNo),e(U1,gNo),e(U1,Tz),e(Tz,hNo),e(U1,uNo),e(y,pNo),e(y,H1),e(H1,c2e),e(c2e,_No),e(H1,bNo),e(H1,Mz),e(Mz,vNo),e(H1,FNo),e(y,TNo),e(y,J1),e(J1,m2e),e(m2e,MNo),e(J1,ENo),e(J1,Ez),e(Ez,CNo),e(J1,wNo),e(y,ANo),e(y,Y1),e(Y1,f2e),e(f2e,LNo),e(Y1,yNo),e(Y1,Cz),e(Cz,xNo),e(Y1,$No),e(y,kNo),e(y,Z1),e(Z1,g2e),e(g2e,SNo),e(Z1,RNo),e(Z1,wz),e(wz,PNo),e(Z1,BNo),e(y,INo),e(y,K1),e(K1,h2e),e(h2e,NNo),e(K1,qNo),e(K1,Az),e(Az,jNo),e(K1,DNo),e(y,GNo),e(y,e2),e(e2,u2e),e(u2e,ONo),e(e2,VNo),e(e2,Lz),e(Lz,XNo),e(e2,zNo),e(y,QNo),e(y,o2),e(o2,p2e),e(p2e,WNo),e(o2,UNo),e(o2,yz),e(yz,HNo),e(o2,JNo),e(y,YNo),e(y,r2),e(r2,_2e),e(_2e,ZNo),e(r2,KNo),e(r2,xz),e(xz,eqo),e(r2,oqo),e(y,rqo),e(y,t2),e(t2,b2e),e(b2e,tqo),e(t2,aqo),e(t2,$z),e($z,nqo),e(t2,sqo),e(y,lqo),e(y,a2),e(a2,v2e),e(v2e,iqo),e(a2,dqo),e(a2,kz),e(kz,cqo),e(a2,mqo),e(y,fqo),e(y,n2),e(n2,F2e),e(F2e,gqo),e(n2,hqo),e(n2,Sz),e(Sz,uqo),e(n2,pqo),e(y,_qo),e(y,s2),e(s2,T2e),e(T2e,bqo),e(s2,vqo),e(s2,Rz),e(Rz,Fqo),e(s2,Tqo),e(y,Mqo),e(y,l2),e(l2,M2e),e(M2e,Eqo),e(l2,Cqo),e(l2,Pz),e(Pz,wqo),e(l2,Aqo),e(y,Lqo),e(y,i2),e(i2,E2e),e(E2e,yqo),e(i2,xqo),e(i2,Bz),e(Bz,$qo),e(i2,kqo),e(y,Sqo),e(y,d2),e(d2,C2e),e(C2e,Rqo),e(d2,Pqo),e(d2,Iz),e(Iz,Bqo),e(d2,Iqo),e(y,Nqo),e(y,c2),e(c2,w2e),e(w2e,qqo),e(c2,jqo),e(c2,Nz),e(Nz,Dqo),e(c2,Gqo),e(y,Oqo),e(y,m2),e(m2,A2e),e(A2e,Vqo),e(m2,Xqo),e(m2,qz),e(qz,zqo),e(m2,Qqo),e(y,Wqo),e(y,f2),e(f2,L2e),e(L2e,Uqo),e(f2,Hqo),e(f2,jz),e(jz,Jqo),e(f2,Yqo),e(y,Zqo),e(y,g2),e(g2,y2e),e(y2e,Kqo),e(g2,ejo),e(g2,Dz),e(Dz,ojo),e(g2,rjo),e(y,tjo),e(y,h2),e(h2,x2e),e(x2e,ajo),e(h2,njo),e(h2,Gz),e(Gz,sjo),e(h2,ljo),e(y,ijo),e(y,u2),e(u2,$2e),e($2e,djo),e(u2,cjo),e(u2,Oz),e(Oz,mjo),e(u2,fjo),e(y,gjo),e(y,p2),e(p2,k2e),e(k2e,hjo),e(p2,ujo),e(p2,Vz),e(Vz,pjo),e(p2,_jo),e(y,bjo),e(y,_2),e(_2,S2e),e(S2e,vjo),e(_2,Fjo),e(_2,Xz),e(Xz,Tjo),e(_2,Mjo),e(y,Ejo),e(y,b2),e(b2,R2e),e(R2e,Cjo),e(b2,wjo),e(b2,zz),e(zz,Ajo),e(b2,Ljo),e(y,yjo),e(y,v2),e(v2,P2e),e(P2e,xjo),e(v2,$jo),e(v2,Qz),e(Qz,kjo),e(v2,Sjo),e(y,Rjo),e(y,F2),e(F2,B2e),e(B2e,Pjo),e(F2,Bjo),e(F2,Wz),e(Wz,Ijo),e(F2,Njo),e(y,qjo),e(y,T2),e(T2,I2e),e(I2e,jjo),e(T2,Djo),e(T2,Uz),e(Uz,Gjo),e(T2,Ojo),e(y,Vjo),e(y,M2),e(M2,N2e),e(N2e,Xjo),e(M2,zjo),e(M2,Hz),e(Hz,Qjo),e(M2,Wjo),e(y,Ujo),e(y,E2),e(E2,q2e),e(q2e,Hjo),e(E2,Jjo),e(E2,Jz),e(Jz,Yjo),e(E2,Zjo),e(y,Kjo),e(y,C2),e(C2,j2e),e(j2e,eDo),e(C2,oDo),e(C2,Yz),e(Yz,rDo),e(C2,tDo),e(y,aDo),e(y,w2),e(w2,D2e),e(D2e,nDo),e(w2,sDo),e(w2,Zz),e(Zz,lDo),e(w2,iDo),e(y,dDo),e(y,A2),e(A2,G2e),e(G2e,cDo),e(A2,mDo),e(A2,Kz),e(Kz,fDo),e(A2,gDo),e(y,hDo),e(y,L2),e(L2,O2e),e(O2e,uDo),e(L2,pDo),e(L2,eQ),e(eQ,_Do),e(L2,bDo),e(y,vDo),e(y,y2),e(y2,V2e),e(V2e,FDo),e(y2,TDo),e(y2,oQ),e(oQ,MDo),e(y2,EDo),e(y,CDo),e(y,x2),e(x2,X2e),e(X2e,wDo),e(x2,ADo),e(x2,rQ),e(rQ,LDo),e(x2,yDo),e(y,xDo),e(y,$2),e($2,z2e),e(z2e,$Do),e($2,kDo),e($2,tQ),e(tQ,SDo),e($2,RDo),e(y,PDo),e(y,k2),e(k2,Q2e),e(Q2e,BDo),e(k2,IDo),e(k2,aQ),e(aQ,NDo),e(k2,qDo),e(y,jDo),e(y,S2),e(S2,W2e),e(W2e,DDo),e(S2,GDo),e(S2,nQ),e(nQ,ODo),e(S2,VDo),e(y,XDo),e(y,R2),e(R2,U2e),e(U2e,zDo),e(R2,QDo),e(R2,sQ),e(sQ,WDo),e(R2,UDo),e(y,HDo),e(y,P2),e(P2,H2e),e(H2e,JDo),e(P2,YDo),e(P2,lQ),e(lQ,ZDo),e(P2,KDo),e(y,eGo),e(y,B2),e(B2,J2e),e(J2e,oGo),e(B2,rGo),e(B2,iQ),e(iQ,tGo),e(B2,aGo),e(y,nGo),e(y,I2),e(I2,Y2e),e(Y2e,sGo),e(I2,lGo),e(I2,dQ),e(dQ,iGo),e(I2,dGo),e(y,cGo),e(y,N2),e(N2,Z2e),e(Z2e,mGo),e(N2,fGo),e(N2,cQ),e(cQ,gGo),e(N2,hGo),e(y,uGo),e(y,q2),e(q2,K2e),e(K2e,pGo),e(q2,_Go),e(q2,mQ),e(mQ,bGo),e(q2,vGo),e(y,FGo),e(y,j2),e(j2,ebe),e(ebe,TGo),e(j2,MGo),e(j2,fQ),e(fQ,EGo),e(j2,CGo),e(Ke,wGo),e(Ke,D2),e(D2,AGo),e(D2,obe),e(obe,LGo),e(D2,yGo),e(D2,rbe),e(rbe,xGo),e(Ke,$Go),M(G2,Ke,null),b(m,cro,_),b(m,Ld,_),e(Ld,O2),e(O2,tbe),M(g$,tbe,null),e(Ld,kGo),e(Ld,abe),e(abe,SGo),b(m,mro,_),b(m,Io,_),M(h$,Io,null),e(Io,RGo),e(Io,yd),e(yd,PGo),e(yd,gQ),e(gQ,BGo),e(yd,IGo),e(yd,hQ),e(hQ,NGo),e(yd,qGo),e(Io,jGo),e(Io,u$),e(u$,DGo),e(u$,nbe),e(nbe,GGo),e(u$,OGo),e(Io,VGo),e(Io,Ft),M(p$,Ft,null),e(Ft,XGo),e(Ft,sbe),e(sbe,zGo),e(Ft,QGo),e(Ft,xd),e(xd,WGo),e(xd,lbe),e(lbe,UGo),e(xd,HGo),e(xd,uQ),e(uQ,JGo),e(xd,YGo),e(Ft,ZGo),M(V2,Ft,null),e(Io,KGo),e(Io,eo),M(_$,eo,null),e(eo,eOo),e(eo,ibe),e(ibe,oOo),e(eo,rOo),e(eo,on),e(on,tOo),e(on,dbe),e(dbe,aOo),e(on,nOo),e(on,cbe),e(cbe,sOo),e(on,lOo),e(on,mbe),e(mbe,iOo),e(on,dOo),e(eo,cOo),e(eo,G),e(G,X2),e(X2,fbe),e(fbe,mOo),e(X2,fOo),e(X2,pQ),e(pQ,gOo),e(X2,hOo),e(G,uOo),e(G,z2),e(z2,gbe),e(gbe,pOo),e(z2,_Oo),e(z2,_Q),e(_Q,bOo),e(z2,vOo),e(G,FOo),e(G,Q2),e(Q2,hbe),e(hbe,TOo),e(Q2,MOo),e(Q2,bQ),e(bQ,EOo),e(Q2,COo),e(G,wOo),e(G,W2),e(W2,ube),e(ube,AOo),e(W2,LOo),e(W2,vQ),e(vQ,yOo),e(W2,xOo),e(G,$Oo),e(G,U2),e(U2,pbe),e(pbe,kOo),e(U2,SOo),e(U2,FQ),e(FQ,ROo),e(U2,POo),e(G,BOo),e(G,H2),e(H2,_be),e(_be,IOo),e(H2,NOo),e(H2,TQ),e(TQ,qOo),e(H2,jOo),e(G,DOo),e(G,J2),e(J2,bbe),e(bbe,GOo),e(J2,OOo),e(J2,MQ),e(MQ,VOo),e(J2,XOo),e(G,zOo),e(G,Y2),e(Y2,vbe),e(vbe,QOo),e(Y2,WOo),e(Y2,EQ),e(EQ,UOo),e(Y2,HOo),e(G,JOo),e(G,Z2),e(Z2,Fbe),e(Fbe,YOo),e(Z2,ZOo),e(Z2,CQ),e(CQ,KOo),e(Z2,eVo),e(G,oVo),e(G,K2),e(K2,Tbe),e(Tbe,rVo),e(K2,tVo),e(K2,wQ),e(wQ,aVo),e(K2,nVo),e(G,sVo),e(G,eb),e(eb,Mbe),e(Mbe,lVo),e(eb,iVo),e(eb,AQ),e(AQ,dVo),e(eb,cVo),e(G,mVo),e(G,ob),e(ob,Ebe),e(Ebe,fVo),e(ob,gVo),e(ob,LQ),e(LQ,hVo),e(ob,uVo),e(G,pVo),e(G,rb),e(rb,Cbe),e(Cbe,_Vo),e(rb,bVo),e(rb,yQ),e(yQ,vVo),e(rb,FVo),e(G,TVo),e(G,tb),e(tb,wbe),e(wbe,MVo),e(tb,EVo),e(tb,xQ),e(xQ,CVo),e(tb,wVo),e(G,AVo),e(G,ab),e(ab,Abe),e(Abe,LVo),e(ab,yVo),e(ab,$Q),e($Q,xVo),e(ab,$Vo),e(G,kVo),e(G,nb),e(nb,Lbe),e(Lbe,SVo),e(nb,RVo),e(nb,kQ),e(kQ,PVo),e(nb,BVo),e(G,IVo),e(G,sb),e(sb,ybe),e(ybe,NVo),e(sb,qVo),e(sb,SQ),e(SQ,jVo),e(sb,DVo),e(G,GVo),e(G,lb),e(lb,xbe),e(xbe,OVo),e(lb,VVo),e(lb,RQ),e(RQ,XVo),e(lb,zVo),e(G,QVo),e(G,ib),e(ib,$be),e($be,WVo),e(ib,UVo),e(ib,PQ),e(PQ,HVo),e(ib,JVo),e(G,YVo),e(G,db),e(db,kbe),e(kbe,ZVo),e(db,KVo),e(db,BQ),e(BQ,eXo),e(db,oXo),e(G,rXo),e(G,cb),e(cb,Sbe),e(Sbe,tXo),e(cb,aXo),e(cb,IQ),e(IQ,nXo),e(cb,sXo),e(G,lXo),e(G,mb),e(mb,Rbe),e(Rbe,iXo),e(mb,dXo),e(mb,NQ),e(NQ,cXo),e(mb,mXo),e(G,fXo),e(G,fb),e(fb,Pbe),e(Pbe,gXo),e(fb,hXo),e(fb,qQ),e(qQ,uXo),e(fb,pXo),e(G,_Xo),e(G,gb),e(gb,Bbe),e(Bbe,bXo),e(gb,vXo),e(gb,jQ),e(jQ,FXo),e(gb,TXo),e(G,MXo),e(G,hb),e(hb,Ibe),e(Ibe,EXo),e(hb,CXo),e(hb,DQ),e(DQ,wXo),e(hb,AXo),e(G,LXo),e(G,ub),e(ub,Nbe),e(Nbe,yXo),e(ub,xXo),e(ub,GQ),e(GQ,$Xo),e(ub,kXo),e(G,SXo),e(G,pb),e(pb,qbe),e(qbe,RXo),e(pb,PXo),e(pb,OQ),e(OQ,BXo),e(pb,IXo),e(G,NXo),e(G,_b),e(_b,jbe),e(jbe,qXo),e(_b,jXo),e(_b,VQ),e(VQ,DXo),e(_b,GXo),e(G,OXo),e(G,bb),e(bb,Dbe),e(Dbe,VXo),e(bb,XXo),e(bb,XQ),e(XQ,zXo),e(bb,QXo),e(G,WXo),e(G,vb),e(vb,Gbe),e(Gbe,UXo),e(vb,HXo),e(vb,zQ),e(zQ,JXo),e(vb,YXo),e(G,ZXo),e(G,Fb),e(Fb,Obe),e(Obe,KXo),e(Fb,ezo),e(Fb,QQ),e(QQ,ozo),e(Fb,rzo),e(G,tzo),e(G,Tb),e(Tb,Vbe),e(Vbe,azo),e(Tb,nzo),e(Tb,WQ),e(WQ,szo),e(Tb,lzo),e(G,izo),e(G,Mb),e(Mb,Xbe),e(Xbe,dzo),e(Mb,czo),e(Mb,UQ),e(UQ,mzo),e(Mb,fzo),e(G,gzo),e(G,Eb),e(Eb,zbe),e(zbe,hzo),e(Eb,uzo),e(Eb,HQ),e(HQ,pzo),e(Eb,_zo),e(G,bzo),e(G,Cb),e(Cb,Qbe),e(Qbe,vzo),e(Cb,Fzo),e(Cb,JQ),e(JQ,Tzo),e(Cb,Mzo),e(G,Ezo),e(G,wb),e(wb,Wbe),e(Wbe,Czo),e(wb,wzo),e(wb,YQ),e(YQ,Azo),e(wb,Lzo),e(G,yzo),e(G,Ab),e(Ab,Ube),e(Ube,xzo),e(Ab,$zo),e(Ab,ZQ),e(ZQ,kzo),e(Ab,Szo),e(G,Rzo),e(G,Lb),e(Lb,Hbe),e(Hbe,Pzo),e(Lb,Bzo),e(Lb,KQ),e(KQ,Izo),e(Lb,Nzo),e(G,qzo),e(G,yb),e(yb,Jbe),e(Jbe,jzo),e(yb,Dzo),e(yb,eW),e(eW,Gzo),e(yb,Ozo),e(G,Vzo),e(G,xb),e(xb,Ybe),e(Ybe,Xzo),e(xb,zzo),e(xb,oW),e(oW,Qzo),e(xb,Wzo),e(G,Uzo),e(G,$b),e($b,Zbe),e(Zbe,Hzo),e($b,Jzo),e($b,rW),e(rW,Yzo),e($b,Zzo),e(G,Kzo),e(G,kb),e(kb,Kbe),e(Kbe,eQo),e(kb,oQo),e(kb,tW),e(tW,rQo),e(kb,tQo),e(G,aQo),e(G,Sb),e(Sb,eve),e(eve,nQo),e(Sb,sQo),e(Sb,aW),e(aW,lQo),e(Sb,iQo),e(G,dQo),e(G,Rb),e(Rb,ove),e(ove,cQo),e(Rb,mQo),e(Rb,nW),e(nW,fQo),e(Rb,gQo),e(G,hQo),e(G,Pb),e(Pb,rve),e(rve,uQo),e(Pb,pQo),e(Pb,sW),e(sW,_Qo),e(Pb,bQo),e(G,vQo),e(G,Bb),e(Bb,tve),e(tve,FQo),e(Bb,TQo),e(Bb,lW),e(lW,MQo),e(Bb,EQo),e(G,CQo),e(G,Ib),e(Ib,ave),e(ave,wQo),e(Ib,AQo),e(Ib,iW),e(iW,LQo),e(Ib,yQo),e(G,xQo),e(G,Nb),e(Nb,nve),e(nve,$Qo),e(Nb,kQo),e(Nb,dW),e(dW,SQo),e(Nb,RQo),e(eo,PQo),e(eo,qb),e(qb,BQo),e(qb,sve),e(sve,IQo),e(qb,NQo),e(qb,lve),e(lve,qQo),e(eo,jQo),M(jb,eo,null),b(m,fro,_),b(m,$d,_),e($d,Db),e(Db,ive),M(b$,ive,null),e($d,DQo),e($d,dve),e(dve,GQo),b(m,gro,_),b(m,No,_),M(v$,No,null),e(No,OQo),e(No,kd),e(kd,VQo),e(kd,cW),e(cW,XQo),e(kd,zQo),e(kd,mW),e(mW,QQo),e(kd,WQo),e(No,UQo),e(No,F$),e(F$,HQo),e(F$,cve),e(cve,JQo),e(F$,YQo),e(No,ZQo),e(No,Tt),M(T$,Tt,null),e(Tt,KQo),e(Tt,mve),e(mve,eWo),e(Tt,oWo),e(Tt,Sd),e(Sd,rWo),e(Sd,fve),e(fve,tWo),e(Sd,aWo),e(Sd,fW),e(fW,nWo),e(Sd,sWo),e(Tt,lWo),M(Gb,Tt,null),e(No,iWo),e(No,oo),M(M$,oo,null),e(oo,dWo),e(oo,gve),e(gve,cWo),e(oo,mWo),e(oo,rn),e(rn,fWo),e(rn,hve),e(hve,gWo),e(rn,hWo),e(rn,uve),e(uve,uWo),e(rn,pWo),e(rn,pve),e(pve,_Wo),e(rn,bWo),e(oo,vWo),e(oo,Q),e(Q,Ob),e(Ob,_ve),e(_ve,FWo),e(Ob,TWo),e(Ob,gW),e(gW,MWo),e(Ob,EWo),e(Q,CWo),e(Q,Vb),e(Vb,bve),e(bve,wWo),e(Vb,AWo),e(Vb,hW),e(hW,LWo),e(Vb,yWo),e(Q,xWo),e(Q,Xb),e(Xb,vve),e(vve,$Wo),e(Xb,kWo),e(Xb,uW),e(uW,SWo),e(Xb,RWo),e(Q,PWo),e(Q,zb),e(zb,Fve),e(Fve,BWo),e(zb,IWo),e(zb,pW),e(pW,NWo),e(zb,qWo),e(Q,jWo),e(Q,Qb),e(Qb,Tve),e(Tve,DWo),e(Qb,GWo),e(Qb,_W),e(_W,OWo),e(Qb,VWo),e(Q,XWo),e(Q,Wb),e(Wb,Mve),e(Mve,zWo),e(Wb,QWo),e(Wb,bW),e(bW,WWo),e(Wb,UWo),e(Q,HWo),e(Q,Ub),e(Ub,Eve),e(Eve,JWo),e(Ub,YWo),e(Ub,vW),e(vW,ZWo),e(Ub,KWo),e(Q,eUo),e(Q,Hb),e(Hb,Cve),e(Cve,oUo),e(Hb,rUo),e(Hb,FW),e(FW,tUo),e(Hb,aUo),e(Q,nUo),e(Q,Jb),e(Jb,wve),e(wve,sUo),e(Jb,lUo),e(Jb,TW),e(TW,iUo),e(Jb,dUo),e(Q,cUo),e(Q,Yb),e(Yb,Ave),e(Ave,mUo),e(Yb,fUo),e(Yb,MW),e(MW,gUo),e(Yb,hUo),e(Q,uUo),e(Q,Zb),e(Zb,Lve),e(Lve,pUo),e(Zb,_Uo),e(Zb,EW),e(EW,bUo),e(Zb,vUo),e(Q,FUo),e(Q,Kb),e(Kb,yve),e(yve,TUo),e(Kb,MUo),e(Kb,CW),e(CW,EUo),e(Kb,CUo),e(Q,wUo),e(Q,ev),e(ev,xve),e(xve,AUo),e(ev,LUo),e(ev,wW),e(wW,yUo),e(ev,xUo),e(Q,$Uo),e(Q,ov),e(ov,$ve),e($ve,kUo),e(ov,SUo),e(ov,AW),e(AW,RUo),e(ov,PUo),e(Q,BUo),e(Q,rv),e(rv,kve),e(kve,IUo),e(rv,NUo),e(rv,LW),e(LW,qUo),e(rv,jUo),e(Q,DUo),e(Q,tv),e(tv,Sve),e(Sve,GUo),e(tv,OUo),e(tv,yW),e(yW,VUo),e(tv,XUo),e(Q,zUo),e(Q,av),e(av,Rve),e(Rve,QUo),e(av,WUo),e(av,xW),e(xW,UUo),e(av,HUo),e(Q,JUo),e(Q,nv),e(nv,Pve),e(Pve,YUo),e(nv,ZUo),e(nv,$W),e($W,KUo),e(nv,eHo),e(Q,oHo),e(Q,sv),e(sv,Bve),e(Bve,rHo),e(sv,tHo),e(sv,kW),e(kW,aHo),e(sv,nHo),e(Q,sHo),e(Q,lv),e(lv,Ive),e(Ive,lHo),e(lv,iHo),e(lv,SW),e(SW,dHo),e(lv,cHo),e(Q,mHo),e(Q,iv),e(iv,Nve),e(Nve,fHo),e(iv,gHo),e(iv,RW),e(RW,hHo),e(iv,uHo),e(Q,pHo),e(Q,dv),e(dv,qve),e(qve,_Ho),e(dv,bHo),e(dv,PW),e(PW,vHo),e(dv,FHo),e(Q,THo),e(Q,cv),e(cv,jve),e(jve,MHo),e(cv,EHo),e(cv,BW),e(BW,CHo),e(cv,wHo),e(Q,AHo),e(Q,mv),e(mv,Dve),e(Dve,LHo),e(mv,yHo),e(mv,IW),e(IW,xHo),e(mv,$Ho),e(Q,kHo),e(Q,fv),e(fv,Gve),e(Gve,SHo),e(fv,RHo),e(fv,NW),e(NW,PHo),e(fv,BHo),e(Q,IHo),e(Q,gv),e(gv,Ove),e(Ove,NHo),e(gv,qHo),e(gv,qW),e(qW,jHo),e(gv,DHo),e(Q,GHo),e(Q,hv),e(hv,Vve),e(Vve,OHo),e(hv,VHo),e(hv,jW),e(jW,XHo),e(hv,zHo),e(Q,QHo),e(Q,uv),e(uv,Xve),e(Xve,WHo),e(uv,UHo),e(uv,DW),e(DW,HHo),e(uv,JHo),e(Q,YHo),e(Q,pv),e(pv,zve),e(zve,ZHo),e(pv,KHo),e(pv,GW),e(GW,eJo),e(pv,oJo),e(Q,rJo),e(Q,_v),e(_v,Qve),e(Qve,tJo),e(_v,aJo),e(_v,OW),e(OW,nJo),e(_v,sJo),e(Q,lJo),e(Q,bv),e(bv,Wve),e(Wve,iJo),e(bv,dJo),e(bv,VW),e(VW,cJo),e(bv,mJo),e(Q,fJo),e(Q,vv),e(vv,Uve),e(Uve,gJo),e(vv,hJo),e(vv,XW),e(XW,uJo),e(vv,pJo),e(Q,_Jo),e(Q,Fv),e(Fv,Hve),e(Hve,bJo),e(Fv,vJo),e(Fv,zW),e(zW,FJo),e(Fv,TJo),e(Q,MJo),e(Q,Tv),e(Tv,Jve),e(Jve,EJo),e(Tv,CJo),e(Tv,QW),e(QW,wJo),e(Tv,AJo),e(Q,LJo),e(Q,Mv),e(Mv,Yve),e(Yve,yJo),e(Mv,xJo),e(Mv,WW),e(WW,$Jo),e(Mv,kJo),e(Q,SJo),e(Q,Ev),e(Ev,Zve),e(Zve,RJo),e(Ev,PJo),e(Ev,UW),e(UW,BJo),e(Ev,IJo),e(Q,NJo),e(Q,Cv),e(Cv,Kve),e(Kve,qJo),e(Cv,jJo),e(Cv,HW),e(HW,DJo),e(Cv,GJo),e(Q,OJo),e(Q,wv),e(wv,eFe),e(eFe,VJo),e(wv,XJo),e(wv,JW),e(JW,zJo),e(wv,QJo),e(Q,WJo),e(Q,Av),e(Av,oFe),e(oFe,UJo),e(Av,HJo),e(Av,YW),e(YW,JJo),e(Av,YJo),e(Q,ZJo),e(Q,Lv),e(Lv,rFe),e(rFe,KJo),e(Lv,eYo),e(Lv,ZW),e(ZW,oYo),e(Lv,rYo),e(Q,tYo),e(Q,yv),e(yv,tFe),e(tFe,aYo),e(yv,nYo),e(yv,KW),e(KW,sYo),e(yv,lYo),e(Q,iYo),e(Q,xv),e(xv,aFe),e(aFe,dYo),e(xv,cYo),e(xv,eU),e(eU,mYo),e(xv,fYo),e(oo,gYo),e(oo,$v),e($v,hYo),e($v,nFe),e(nFe,uYo),e($v,pYo),e($v,sFe),e(sFe,_Yo),e(oo,bYo),M(kv,oo,null),b(m,hro,_),b(m,Rd,_),e(Rd,Sv),e(Sv,lFe),M(E$,lFe,null),e(Rd,vYo),e(Rd,iFe),e(iFe,FYo),b(m,uro,_),b(m,qo,_),M(C$,qo,null),e(qo,TYo),e(qo,Pd),e(Pd,MYo),e(Pd,oU),e(oU,EYo),e(Pd,CYo),e(Pd,rU),e(rU,wYo),e(Pd,AYo),e(qo,LYo),e(qo,w$),e(w$,yYo),e(w$,dFe),e(dFe,xYo),e(w$,$Yo),e(qo,kYo),e(qo,Mt),M(A$,Mt,null),e(Mt,SYo),e(Mt,cFe),e(cFe,RYo),e(Mt,PYo),e(Mt,Bd),e(Bd,BYo),e(Bd,mFe),e(mFe,IYo),e(Bd,NYo),e(Bd,tU),e(tU,qYo),e(Bd,jYo),e(Mt,DYo),M(Rv,Mt,null),e(qo,GYo),e(qo,ro),M(L$,ro,null),e(ro,OYo),e(ro,fFe),e(fFe,VYo),e(ro,XYo),e(ro,tn),e(tn,zYo),e(tn,gFe),e(gFe,QYo),e(tn,WYo),e(tn,hFe),e(hFe,UYo),e(tn,HYo),e(tn,uFe),e(uFe,JYo),e(tn,YYo),e(ro,ZYo),e(ro,Y),e(Y,Pv),e(Pv,pFe),e(pFe,KYo),e(Pv,eZo),e(Pv,aU),e(aU,oZo),e(Pv,rZo),e(Y,tZo),e(Y,Bv),e(Bv,_Fe),e(_Fe,aZo),e(Bv,nZo),e(Bv,nU),e(nU,sZo),e(Bv,lZo),e(Y,iZo),e(Y,Iv),e(Iv,bFe),e(bFe,dZo),e(Iv,cZo),e(Iv,sU),e(sU,mZo),e(Iv,fZo),e(Y,gZo),e(Y,Nv),e(Nv,vFe),e(vFe,hZo),e(Nv,uZo),e(Nv,lU),e(lU,pZo),e(Nv,_Zo),e(Y,bZo),e(Y,qv),e(qv,FFe),e(FFe,vZo),e(qv,FZo),e(qv,iU),e(iU,TZo),e(qv,MZo),e(Y,EZo),e(Y,jv),e(jv,TFe),e(TFe,CZo),e(jv,wZo),e(jv,dU),e(dU,AZo),e(jv,LZo),e(Y,yZo),e(Y,Dv),e(Dv,MFe),e(MFe,xZo),e(Dv,$Zo),e(Dv,cU),e(cU,kZo),e(Dv,SZo),e(Y,RZo),e(Y,Gv),e(Gv,EFe),e(EFe,PZo),e(Gv,BZo),e(Gv,mU),e(mU,IZo),e(Gv,NZo),e(Y,qZo),e(Y,Ov),e(Ov,CFe),e(CFe,jZo),e(Ov,DZo),e(Ov,fU),e(fU,GZo),e(Ov,OZo),e(Y,VZo),e(Y,Vv),e(Vv,wFe),e(wFe,XZo),e(Vv,zZo),e(Vv,gU),e(gU,QZo),e(Vv,WZo),e(Y,UZo),e(Y,Xv),e(Xv,AFe),e(AFe,HZo),e(Xv,JZo),e(Xv,hU),e(hU,YZo),e(Xv,ZZo),e(Y,KZo),e(Y,zv),e(zv,LFe),e(LFe,eKo),e(zv,oKo),e(zv,uU),e(uU,rKo),e(zv,tKo),e(Y,aKo),e(Y,Qv),e(Qv,yFe),e(yFe,nKo),e(Qv,sKo),e(Qv,pU),e(pU,lKo),e(Qv,iKo),e(Y,dKo),e(Y,Wv),e(Wv,xFe),e(xFe,cKo),e(Wv,mKo),e(Wv,_U),e(_U,fKo),e(Wv,gKo),e(Y,hKo),e(Y,Uv),e(Uv,$Fe),e($Fe,uKo),e(Uv,pKo),e(Uv,bU),e(bU,_Ko),e(Uv,bKo),e(Y,vKo),e(Y,Hv),e(Hv,kFe),e(kFe,FKo),e(Hv,TKo),e(Hv,vU),e(vU,MKo),e(Hv,EKo),e(Y,CKo),e(Y,Jv),e(Jv,SFe),e(SFe,wKo),e(Jv,AKo),e(Jv,FU),e(FU,LKo),e(Jv,yKo),e(Y,xKo),e(Y,Yv),e(Yv,RFe),e(RFe,$Ko),e(Yv,kKo),e(Yv,TU),e(TU,SKo),e(Yv,RKo),e(Y,PKo),e(Y,Zv),e(Zv,PFe),e(PFe,BKo),e(Zv,IKo),e(Zv,MU),e(MU,NKo),e(Zv,qKo),e(Y,jKo),e(Y,Kv),e(Kv,BFe),e(BFe,DKo),e(Kv,GKo),e(Kv,EU),e(EU,OKo),e(Kv,VKo),e(Y,XKo),e(Y,eF),e(eF,IFe),e(IFe,zKo),e(eF,QKo),e(eF,CU),e(CU,WKo),e(eF,UKo),e(Y,HKo),e(Y,oF),e(oF,NFe),e(NFe,JKo),e(oF,YKo),e(oF,wU),e(wU,ZKo),e(oF,KKo),e(Y,eer),e(Y,rF),e(rF,qFe),e(qFe,oer),e(rF,rer),e(rF,AU),e(AU,ter),e(rF,aer),e(Y,ner),e(Y,tF),e(tF,jFe),e(jFe,ser),e(tF,ler),e(tF,LU),e(LU,ier),e(tF,der),e(Y,cer),e(Y,aF),e(aF,DFe),e(DFe,mer),e(aF,fer),e(aF,yU),e(yU,ger),e(aF,her),e(Y,uer),e(Y,nF),e(nF,GFe),e(GFe,per),e(nF,_er),e(nF,xU),e(xU,ber),e(nF,ver),e(Y,Fer),e(Y,sF),e(sF,OFe),e(OFe,Ter),e(sF,Mer),e(sF,$U),e($U,Eer),e(sF,Cer),e(Y,wer),e(Y,lF),e(lF,VFe),e(VFe,Aer),e(lF,Ler),e(lF,kU),e(kU,yer),e(lF,xer),e(Y,$er),e(Y,iF),e(iF,XFe),e(XFe,ker),e(iF,Ser),e(iF,SU),e(SU,Rer),e(iF,Per),e(Y,Ber),e(Y,dF),e(dF,zFe),e(zFe,Ier),e(dF,Ner),e(dF,RU),e(RU,qer),e(dF,jer),e(Y,Der),e(Y,cF),e(cF,QFe),e(QFe,Ger),e(cF,Oer),e(cF,PU),e(PU,Ver),e(cF,Xer),e(Y,zer),e(Y,mF),e(mF,WFe),e(WFe,Qer),e(mF,Wer),e(mF,BU),e(BU,Uer),e(mF,Her),e(Y,Jer),e(Y,fF),e(fF,UFe),e(UFe,Yer),e(fF,Zer),e(fF,IU),e(IU,Ker),e(fF,eor),e(Y,oor),e(Y,gF),e(gF,HFe),e(HFe,ror),e(gF,tor),e(gF,NU),e(NU,aor),e(gF,nor),e(Y,sor),e(Y,hF),e(hF,JFe),e(JFe,lor),e(hF,ior),e(hF,YFe),e(YFe,dor),e(hF,cor),e(Y,mor),e(Y,uF),e(uF,ZFe),e(ZFe,gor),e(uF,hor),e(uF,qU),e(qU,uor),e(uF,por),e(Y,_or),e(Y,pF),e(pF,KFe),e(KFe,bor),e(pF,vor),e(pF,jU),e(jU,For),e(pF,Tor),e(Y,Mor),e(Y,_F),e(_F,eTe),e(eTe,Eor),e(_F,Cor),e(_F,DU),e(DU,wor),e(_F,Aor),e(Y,Lor),e(Y,bF),e(bF,oTe),e(oTe,yor),e(bF,xor),e(bF,GU),e(GU,$or),e(bF,kor),e(ro,Sor),e(ro,vF),e(vF,Ror),e(vF,rTe),e(rTe,Por),e(vF,Bor),e(vF,tTe),e(tTe,Ior),e(ro,Nor),M(FF,ro,null),b(m,pro,_),b(m,Id,_),e(Id,TF),e(TF,aTe),M(y$,aTe,null),e(Id,qor),e(Id,nTe),e(nTe,jor),b(m,_ro,_),b(m,jo,_),M(x$,jo,null),e(jo,Dor),e(jo,Nd),e(Nd,Gor),e(Nd,OU),e(OU,Oor),e(Nd,Vor),e(Nd,VU),e(VU,Xor),e(Nd,zor),e(jo,Qor),e(jo,$$),e($$,Wor),e($$,sTe),e(sTe,Uor),e($$,Hor),e(jo,Jor),e(jo,Et),M(k$,Et,null),e(Et,Yor),e(Et,lTe),e(lTe,Zor),e(Et,Kor),e(Et,qd),e(qd,err),e(qd,iTe),e(iTe,orr),e(qd,rrr),e(qd,XU),e(XU,trr),e(qd,arr),e(Et,nrr),M(MF,Et,null),e(jo,srr),e(jo,to),M(S$,to,null),e(to,lrr),e(to,dTe),e(dTe,irr),e(to,drr),e(to,an),e(an,crr),e(an,cTe),e(cTe,mrr),e(an,frr),e(an,mTe),e(mTe,grr),e(an,hrr),e(an,fTe),e(fTe,urr),e(an,prr),e(to,_rr),e(to,fe),e(fe,EF),e(EF,gTe),e(gTe,brr),e(EF,vrr),e(EF,zU),e(zU,Frr),e(EF,Trr),e(fe,Mrr),e(fe,CF),e(CF,hTe),e(hTe,Err),e(CF,Crr),e(CF,QU),e(QU,wrr),e(CF,Arr),e(fe,Lrr),e(fe,wF),e(wF,uTe),e(uTe,yrr),e(wF,xrr),e(wF,WU),e(WU,$rr),e(wF,krr),e(fe,Srr),e(fe,AF),e(AF,pTe),e(pTe,Rrr),e(AF,Prr),e(AF,UU),e(UU,Brr),e(AF,Irr),e(fe,Nrr),e(fe,LF),e(LF,_Te),e(_Te,qrr),e(LF,jrr),e(LF,HU),e(HU,Drr),e(LF,Grr),e(fe,Orr),e(fe,yF),e(yF,bTe),e(bTe,Vrr),e(yF,Xrr),e(yF,JU),e(JU,zrr),e(yF,Qrr),e(fe,Wrr),e(fe,xF),e(xF,vTe),e(vTe,Urr),e(xF,Hrr),e(xF,YU),e(YU,Jrr),e(xF,Yrr),e(fe,Zrr),e(fe,$F),e($F,FTe),e(FTe,Krr),e($F,etr),e($F,ZU),e(ZU,otr),e($F,rtr),e(fe,ttr),e(fe,kF),e(kF,TTe),e(TTe,atr),e(kF,ntr),e(kF,KU),e(KU,str),e(kF,ltr),e(fe,itr),e(fe,SF),e(SF,MTe),e(MTe,dtr),e(SF,ctr),e(SF,eH),e(eH,mtr),e(SF,ftr),e(fe,gtr),e(fe,RF),e(RF,ETe),e(ETe,htr),e(RF,utr),e(RF,oH),e(oH,ptr),e(RF,_tr),e(fe,btr),e(fe,PF),e(PF,CTe),e(CTe,vtr),e(PF,Ftr),e(PF,rH),e(rH,Ttr),e(PF,Mtr),e(fe,Etr),e(fe,BF),e(BF,wTe),e(wTe,Ctr),e(BF,wtr),e(BF,tH),e(tH,Atr),e(BF,Ltr),e(fe,ytr),e(fe,IF),e(IF,ATe),e(ATe,xtr),e(IF,$tr),e(IF,aH),e(aH,ktr),e(IF,Str),e(fe,Rtr),e(fe,NF),e(NF,LTe),e(LTe,Ptr),e(NF,Btr),e(NF,nH),e(nH,Itr),e(NF,Ntr),e(fe,qtr),e(fe,qF),e(qF,yTe),e(yTe,jtr),e(qF,Dtr),e(qF,sH),e(sH,Gtr),e(qF,Otr),e(fe,Vtr),e(fe,jF),e(jF,xTe),e(xTe,Xtr),e(jF,ztr),e(jF,lH),e(lH,Qtr),e(jF,Wtr),e(fe,Utr),e(fe,DF),e(DF,$Te),e($Te,Htr),e(DF,Jtr),e(DF,iH),e(iH,Ytr),e(DF,Ztr),e(fe,Ktr),e(fe,GF),e(GF,kTe),e(kTe,ear),e(GF,oar),e(GF,dH),e(dH,rar),e(GF,tar),e(fe,aar),e(fe,OF),e(OF,STe),e(STe,nar),e(OF,sar),e(OF,cH),e(cH,lar),e(OF,iar),e(to,dar),e(to,VF),e(VF,car),e(VF,RTe),e(RTe,mar),e(VF,far),e(VF,PTe),e(PTe,gar),e(to,har),M(XF,to,null),b(m,bro,_),b(m,jd,_),e(jd,zF),e(zF,BTe),M(R$,BTe,null),e(jd,uar),e(jd,ITe),e(ITe,par),b(m,vro,_),b(m,Do,_),M(P$,Do,null),e(Do,_ar),e(Do,Dd),e(Dd,bar),e(Dd,mH),e(mH,Far),e(Dd,Tar),e(Dd,fH),e(fH,Mar),e(Dd,Ear),e(Do,Car),e(Do,B$),e(B$,war),e(B$,NTe),e(NTe,Aar),e(B$,Lar),e(Do,yar),e(Do,Ct),M(I$,Ct,null),e(Ct,xar),e(Ct,qTe),e(qTe,$ar),e(Ct,kar),e(Ct,Gd),e(Gd,Sar),e(Gd,jTe),e(jTe,Rar),e(Gd,Par),e(Gd,gH),e(gH,Bar),e(Gd,Iar),e(Ct,Nar),M(QF,Ct,null),e(Do,qar),e(Do,ao),M(N$,ao,null),e(ao,jar),e(ao,DTe),e(DTe,Dar),e(ao,Gar),e(ao,nn),e(nn,Oar),e(nn,GTe),e(GTe,Var),e(nn,Xar),e(nn,OTe),e(OTe,zar),e(nn,Qar),e(nn,VTe),e(VTe,War),e(nn,Uar),e(ao,Har),e(ao,I),e(I,WF),e(WF,XTe),e(XTe,Jar),e(WF,Yar),e(WF,hH),e(hH,Zar),e(WF,Kar),e(I,enr),e(I,UF),e(UF,zTe),e(zTe,onr),e(UF,rnr),e(UF,uH),e(uH,tnr),e(UF,anr),e(I,nnr),e(I,HF),e(HF,QTe),e(QTe,snr),e(HF,lnr),e(HF,pH),e(pH,inr),e(HF,dnr),e(I,cnr),e(I,JF),e(JF,WTe),e(WTe,mnr),e(JF,fnr),e(JF,_H),e(_H,gnr),e(JF,hnr),e(I,unr),e(I,YF),e(YF,UTe),e(UTe,pnr),e(YF,_nr),e(YF,bH),e(bH,bnr),e(YF,vnr),e(I,Fnr),e(I,ZF),e(ZF,HTe),e(HTe,Tnr),e(ZF,Mnr),e(ZF,vH),e(vH,Enr),e(ZF,Cnr),e(I,wnr),e(I,KF),e(KF,JTe),e(JTe,Anr),e(KF,Lnr),e(KF,FH),e(FH,ynr),e(KF,xnr),e(I,$nr),e(I,eT),e(eT,YTe),e(YTe,knr),e(eT,Snr),e(eT,TH),e(TH,Rnr),e(eT,Pnr),e(I,Bnr),e(I,oT),e(oT,ZTe),e(ZTe,Inr),e(oT,Nnr),e(oT,MH),e(MH,qnr),e(oT,jnr),e(I,Dnr),e(I,rT),e(rT,KTe),e(KTe,Gnr),e(rT,Onr),e(rT,EH),e(EH,Vnr),e(rT,Xnr),e(I,znr),e(I,tT),e(tT,eMe),e(eMe,Qnr),e(tT,Wnr),e(tT,CH),e(CH,Unr),e(tT,Hnr),e(I,Jnr),e(I,aT),e(aT,oMe),e(oMe,Ynr),e(aT,Znr),e(aT,wH),e(wH,Knr),e(aT,esr),e(I,osr),e(I,nT),e(nT,rMe),e(rMe,rsr),e(nT,tsr),e(nT,AH),e(AH,asr),e(nT,nsr),e(I,ssr),e(I,sT),e(sT,tMe),e(tMe,lsr),e(sT,isr),e(sT,LH),e(LH,dsr),e(sT,csr),e(I,msr),e(I,lT),e(lT,aMe),e(aMe,fsr),e(lT,gsr),e(lT,yH),e(yH,hsr),e(lT,usr),e(I,psr),e(I,iT),e(iT,nMe),e(nMe,_sr),e(iT,bsr),e(iT,xH),e(xH,vsr),e(iT,Fsr),e(I,Tsr),e(I,dT),e(dT,sMe),e(sMe,Msr),e(dT,Esr),e(dT,$H),e($H,Csr),e(dT,wsr),e(I,Asr),e(I,cT),e(cT,lMe),e(lMe,Lsr),e(cT,ysr),e(cT,kH),e(kH,xsr),e(cT,$sr),e(I,ksr),e(I,mT),e(mT,iMe),e(iMe,Ssr),e(mT,Rsr),e(mT,SH),e(SH,Psr),e(mT,Bsr),e(I,Isr),e(I,fT),e(fT,dMe),e(dMe,Nsr),e(fT,qsr),e(fT,RH),e(RH,jsr),e(fT,Dsr),e(I,Gsr),e(I,gT),e(gT,cMe),e(cMe,Osr),e(gT,Vsr),e(gT,PH),e(PH,Xsr),e(gT,zsr),e(I,Qsr),e(I,hT),e(hT,mMe),e(mMe,Wsr),e(hT,Usr),e(hT,BH),e(BH,Hsr),e(hT,Jsr),e(I,Ysr),e(I,uT),e(uT,fMe),e(fMe,Zsr),e(uT,Ksr),e(uT,IH),e(IH,elr),e(uT,olr),e(I,rlr),e(I,pT),e(pT,gMe),e(gMe,tlr),e(pT,alr),e(pT,NH),e(NH,nlr),e(pT,slr),e(I,llr),e(I,_T),e(_T,hMe),e(hMe,ilr),e(_T,dlr),e(_T,qH),e(qH,clr),e(_T,mlr),e(I,flr),e(I,bT),e(bT,uMe),e(uMe,glr),e(bT,hlr),e(bT,jH),e(jH,ulr),e(bT,plr),e(I,_lr),e(I,vT),e(vT,pMe),e(pMe,blr),e(vT,vlr),e(vT,DH),e(DH,Flr),e(vT,Tlr),e(I,Mlr),e(I,FT),e(FT,_Me),e(_Me,Elr),e(FT,Clr),e(FT,GH),e(GH,wlr),e(FT,Alr),e(I,Llr),e(I,TT),e(TT,bMe),e(bMe,ylr),e(TT,xlr),e(TT,OH),e(OH,$lr),e(TT,klr),e(I,Slr),e(I,MT),e(MT,vMe),e(vMe,Rlr),e(MT,Plr),e(MT,VH),e(VH,Blr),e(MT,Ilr),e(I,Nlr),e(I,ET),e(ET,FMe),e(FMe,qlr),e(ET,jlr),e(ET,XH),e(XH,Dlr),e(ET,Glr),e(I,Olr),e(I,CT),e(CT,TMe),e(TMe,Vlr),e(CT,Xlr),e(CT,zH),e(zH,zlr),e(CT,Qlr),e(I,Wlr),e(I,wT),e(wT,MMe),e(MMe,Ulr),e(wT,Hlr),e(wT,QH),e(QH,Jlr),e(wT,Ylr),e(I,Zlr),e(I,AT),e(AT,EMe),e(EMe,Klr),e(AT,eir),e(AT,WH),e(WH,oir),e(AT,rir),e(I,tir),e(I,LT),e(LT,CMe),e(CMe,air),e(LT,nir),e(LT,UH),e(UH,sir),e(LT,lir),e(I,iir),e(I,yT),e(yT,wMe),e(wMe,dir),e(yT,cir),e(yT,HH),e(HH,mir),e(yT,fir),e(I,gir),e(I,xT),e(xT,AMe),e(AMe,hir),e(xT,uir),e(xT,JH),e(JH,pir),e(xT,_ir),e(I,bir),e(I,$T),e($T,LMe),e(LMe,vir),e($T,Fir),e($T,YH),e(YH,Tir),e($T,Mir),e(I,Eir),e(I,kT),e(kT,yMe),e(yMe,Cir),e(kT,wir),e(kT,ZH),e(ZH,Air),e(kT,Lir),e(I,yir),e(I,ST),e(ST,xMe),e(xMe,xir),e(ST,$ir),e(ST,KH),e(KH,kir),e(ST,Sir),e(I,Rir),e(I,RT),e(RT,$Me),e($Me,Pir),e(RT,Bir),e(RT,eJ),e(eJ,Iir),e(RT,Nir),e(I,qir),e(I,PT),e(PT,kMe),e(kMe,jir),e(PT,Dir),e(PT,oJ),e(oJ,Gir),e(PT,Oir),e(I,Vir),e(I,BT),e(BT,SMe),e(SMe,Xir),e(BT,zir),e(BT,rJ),e(rJ,Qir),e(BT,Wir),e(I,Uir),e(I,IT),e(IT,RMe),e(RMe,Hir),e(IT,Jir),e(IT,tJ),e(tJ,Yir),e(IT,Zir),e(I,Kir),e(I,NT),e(NT,PMe),e(PMe,edr),e(NT,odr),e(NT,aJ),e(aJ,rdr),e(NT,tdr),e(I,adr),e(I,qT),e(qT,BMe),e(BMe,ndr),e(qT,sdr),e(qT,nJ),e(nJ,ldr),e(qT,idr),e(I,ddr),e(I,jT),e(jT,IMe),e(IMe,cdr),e(jT,mdr),e(jT,sJ),e(sJ,fdr),e(jT,gdr),e(I,hdr),e(I,DT),e(DT,NMe),e(NMe,udr),e(DT,pdr),e(DT,lJ),e(lJ,_dr),e(DT,bdr),e(I,vdr),e(I,GT),e(GT,qMe),e(qMe,Fdr),e(GT,Tdr),e(GT,iJ),e(iJ,Mdr),e(GT,Edr),e(I,Cdr),e(I,OT),e(OT,jMe),e(jMe,wdr),e(OT,Adr),e(OT,dJ),e(dJ,Ldr),e(OT,ydr),e(I,xdr),e(I,VT),e(VT,DMe),e(DMe,$dr),e(VT,kdr),e(VT,cJ),e(cJ,Sdr),e(VT,Rdr),e(I,Pdr),e(I,XT),e(XT,GMe),e(GMe,Bdr),e(XT,Idr),e(XT,mJ),e(mJ,Ndr),e(XT,qdr),e(I,jdr),e(I,zT),e(zT,OMe),e(OMe,Ddr),e(zT,Gdr),e(zT,fJ),e(fJ,Odr),e(zT,Vdr),e(I,Xdr),e(I,QT),e(QT,VMe),e(VMe,zdr),e(QT,Qdr),e(QT,gJ),e(gJ,Wdr),e(QT,Udr),e(I,Hdr),e(I,WT),e(WT,XMe),e(XMe,Jdr),e(WT,Ydr),e(WT,hJ),e(hJ,Zdr),e(WT,Kdr),e(I,ecr),e(I,UT),e(UT,zMe),e(zMe,ocr),e(UT,rcr),e(UT,uJ),e(uJ,tcr),e(UT,acr),e(ao,ncr),e(ao,HT),e(HT,scr),e(HT,QMe),e(QMe,lcr),e(HT,icr),e(HT,WMe),e(WMe,dcr),e(ao,ccr),M(JT,ao,null),b(m,Fro,_),b(m,Od,_),e(Od,YT),e(YT,UMe),M(q$,UMe,null),e(Od,mcr),e(Od,HMe),e(HMe,fcr),b(m,Tro,_),b(m,Go,_),M(j$,Go,null),e(Go,gcr),e(Go,Vd),e(Vd,hcr),e(Vd,pJ),e(pJ,ucr),e(Vd,pcr),e(Vd,_J),e(_J,_cr),e(Vd,bcr),e(Go,vcr),e(Go,D$),e(D$,Fcr),e(D$,JMe),e(JMe,Tcr),e(D$,Mcr),e(Go,Ecr),e(Go,wt),M(G$,wt,null),e(wt,Ccr),e(wt,YMe),e(YMe,wcr),e(wt,Acr),e(wt,Xd),e(Xd,Lcr),e(Xd,ZMe),e(ZMe,ycr),e(Xd,xcr),e(Xd,bJ),e(bJ,$cr),e(Xd,kcr),e(wt,Scr),M(ZT,wt,null),e(Go,Rcr),e(Go,no),M(O$,no,null),e(no,Pcr),e(no,KMe),e(KMe,Bcr),e(no,Icr),e(no,sn),e(sn,Ncr),e(sn,eEe),e(eEe,qcr),e(sn,jcr),e(sn,oEe),e(oEe,Dcr),e(sn,Gcr),e(sn,rEe),e(rEe,Ocr),e(sn,Vcr),e(no,Xcr),e(no,K),e(K,KT),e(KT,tEe),e(tEe,zcr),e(KT,Qcr),e(KT,vJ),e(vJ,Wcr),e(KT,Ucr),e(K,Hcr),e(K,eM),e(eM,aEe),e(aEe,Jcr),e(eM,Ycr),e(eM,FJ),e(FJ,Zcr),e(eM,Kcr),e(K,emr),e(K,oM),e(oM,nEe),e(nEe,omr),e(oM,rmr),e(oM,TJ),e(TJ,tmr),e(oM,amr),e(K,nmr),e(K,rM),e(rM,sEe),e(sEe,smr),e(rM,lmr),e(rM,MJ),e(MJ,imr),e(rM,dmr),e(K,cmr),e(K,tM),e(tM,lEe),e(lEe,mmr),e(tM,fmr),e(tM,EJ),e(EJ,gmr),e(tM,hmr),e(K,umr),e(K,aM),e(aM,iEe),e(iEe,pmr),e(aM,_mr),e(aM,CJ),e(CJ,bmr),e(aM,vmr),e(K,Fmr),e(K,nM),e(nM,dEe),e(dEe,Tmr),e(nM,Mmr),e(nM,wJ),e(wJ,Emr),e(nM,Cmr),e(K,wmr),e(K,sM),e(sM,cEe),e(cEe,Amr),e(sM,Lmr),e(sM,AJ),e(AJ,ymr),e(sM,xmr),e(K,$mr),e(K,lM),e(lM,mEe),e(mEe,kmr),e(lM,Smr),e(lM,LJ),e(LJ,Rmr),e(lM,Pmr),e(K,Bmr),e(K,iM),e(iM,fEe),e(fEe,Imr),e(iM,Nmr),e(iM,yJ),e(yJ,qmr),e(iM,jmr),e(K,Dmr),e(K,dM),e(dM,gEe),e(gEe,Gmr),e(dM,Omr),e(dM,xJ),e(xJ,Vmr),e(dM,Xmr),e(K,zmr),e(K,cM),e(cM,hEe),e(hEe,Qmr),e(cM,Wmr),e(cM,$J),e($J,Umr),e(cM,Hmr),e(K,Jmr),e(K,mM),e(mM,uEe),e(uEe,Ymr),e(mM,Zmr),e(mM,kJ),e(kJ,Kmr),e(mM,efr),e(K,ofr),e(K,fM),e(fM,pEe),e(pEe,rfr),e(fM,tfr),e(fM,SJ),e(SJ,afr),e(fM,nfr),e(K,sfr),e(K,gM),e(gM,_Ee),e(_Ee,lfr),e(gM,ifr),e(gM,RJ),e(RJ,dfr),e(gM,cfr),e(K,mfr),e(K,hM),e(hM,bEe),e(bEe,ffr),e(hM,gfr),e(hM,PJ),e(PJ,hfr),e(hM,ufr),e(K,pfr),e(K,uM),e(uM,vEe),e(vEe,_fr),e(uM,bfr),e(uM,BJ),e(BJ,vfr),e(uM,Ffr),e(K,Tfr),e(K,pM),e(pM,FEe),e(FEe,Mfr),e(pM,Efr),e(pM,IJ),e(IJ,Cfr),e(pM,wfr),e(K,Afr),e(K,_M),e(_M,TEe),e(TEe,Lfr),e(_M,yfr),e(_M,NJ),e(NJ,xfr),e(_M,$fr),e(K,kfr),e(K,bM),e(bM,MEe),e(MEe,Sfr),e(bM,Rfr),e(bM,qJ),e(qJ,Pfr),e(bM,Bfr),e(K,Ifr),e(K,vM),e(vM,EEe),e(EEe,Nfr),e(vM,qfr),e(vM,jJ),e(jJ,jfr),e(vM,Dfr),e(K,Gfr),e(K,FM),e(FM,CEe),e(CEe,Ofr),e(FM,Vfr),e(FM,DJ),e(DJ,Xfr),e(FM,zfr),e(K,Qfr),e(K,TM),e(TM,wEe),e(wEe,Wfr),e(TM,Ufr),e(TM,GJ),e(GJ,Hfr),e(TM,Jfr),e(K,Yfr),e(K,MM),e(MM,AEe),e(AEe,Zfr),e(MM,Kfr),e(MM,OJ),e(OJ,egr),e(MM,ogr),e(K,rgr),e(K,EM),e(EM,LEe),e(LEe,tgr),e(EM,agr),e(EM,VJ),e(VJ,ngr),e(EM,sgr),e(K,lgr),e(K,CM),e(CM,yEe),e(yEe,igr),e(CM,dgr),e(CM,XJ),e(XJ,cgr),e(CM,mgr),e(K,fgr),e(K,wM),e(wM,xEe),e(xEe,ggr),e(wM,hgr),e(wM,zJ),e(zJ,ugr),e(wM,pgr),e(K,_gr),e(K,AM),e(AM,$Ee),e($Ee,bgr),e(AM,vgr),e(AM,QJ),e(QJ,Fgr),e(AM,Tgr),e(K,Mgr),e(K,LM),e(LM,kEe),e(kEe,Egr),e(LM,Cgr),e(LM,WJ),e(WJ,wgr),e(LM,Agr),e(K,Lgr),e(K,yM),e(yM,SEe),e(SEe,ygr),e(yM,xgr),e(yM,UJ),e(UJ,$gr),e(yM,kgr),e(K,Sgr),e(K,xM),e(xM,REe),e(REe,Rgr),e(xM,Pgr),e(xM,HJ),e(HJ,Bgr),e(xM,Igr),e(K,Ngr),e(K,$M),e($M,PEe),e(PEe,qgr),e($M,jgr),e($M,JJ),e(JJ,Dgr),e($M,Ggr),e(no,Ogr),e(no,kM),e(kM,Vgr),e(kM,BEe),e(BEe,Xgr),e(kM,zgr),e(kM,IEe),e(IEe,Qgr),e(no,Wgr),M(SM,no,null),b(m,Mro,_),b(m,zd,_),e(zd,RM),e(RM,NEe),M(V$,NEe,null),e(zd,Ugr),e(zd,qEe),e(qEe,Hgr),b(m,Ero,_),b(m,Oo,_),M(X$,Oo,null),e(Oo,Jgr),e(Oo,Qd),e(Qd,Ygr),e(Qd,YJ),e(YJ,Zgr),e(Qd,Kgr),e(Qd,ZJ),e(ZJ,ehr),e(Qd,ohr),e(Oo,rhr),e(Oo,z$),e(z$,thr),e(z$,jEe),e(jEe,ahr),e(z$,nhr),e(Oo,shr),e(Oo,At),M(Q$,At,null),e(At,lhr),e(At,DEe),e(DEe,ihr),e(At,dhr),e(At,Wd),e(Wd,chr),e(Wd,GEe),e(GEe,mhr),e(Wd,fhr),e(Wd,KJ),e(KJ,ghr),e(Wd,hhr),e(At,uhr),M(PM,At,null),e(Oo,phr),e(Oo,so),M(W$,so,null),e(so,_hr),e(so,OEe),e(OEe,bhr),e(so,vhr),e(so,ln),e(ln,Fhr),e(ln,VEe),e(VEe,Thr),e(ln,Mhr),e(ln,XEe),e(XEe,Ehr),e(ln,Chr),e(ln,zEe),e(zEe,whr),e(ln,Ahr),e(so,Lhr),e(so,Ue),e(Ue,BM),e(BM,QEe),e(QEe,yhr),e(BM,xhr),e(BM,eY),e(eY,$hr),e(BM,khr),e(Ue,Shr),e(Ue,IM),e(IM,WEe),e(WEe,Rhr),e(IM,Phr),e(IM,oY),e(oY,Bhr),e(IM,Ihr),e(Ue,Nhr),e(Ue,NM),e(NM,UEe),e(UEe,qhr),e(NM,jhr),e(NM,rY),e(rY,Dhr),e(NM,Ghr),e(Ue,Ohr),e(Ue,qM),e(qM,HEe),e(HEe,Vhr),e(qM,Xhr),e(qM,tY),e(tY,zhr),e(qM,Qhr),e(Ue,Whr),e(Ue,jM),e(jM,JEe),e(JEe,Uhr),e(jM,Hhr),e(jM,aY),e(aY,Jhr),e(jM,Yhr),e(Ue,Zhr),e(Ue,DM),e(DM,YEe),e(YEe,Khr),e(DM,eur),e(DM,nY),e(nY,our),e(DM,rur),e(Ue,tur),e(Ue,GM),e(GM,ZEe),e(ZEe,aur),e(GM,nur),e(GM,sY),e(sY,sur),e(GM,lur),e(so,iur),e(so,OM),e(OM,dur),e(OM,KEe),e(KEe,cur),e(OM,mur),e(OM,e4e),e(e4e,fur),e(so,gur),M(VM,so,null),b(m,Cro,_),b(m,Ud,_),e(Ud,XM),e(XM,o4e),M(U$,o4e,null),e(Ud,hur),e(Ud,r4e),e(r4e,uur),b(m,wro,_),b(m,Vo,_),M(H$,Vo,null),e(Vo,pur),e(Vo,Hd),e(Hd,_ur),e(Hd,lY),e(lY,bur),e(Hd,vur),e(Hd,iY),e(iY,Fur),e(Hd,Tur),e(Vo,Mur),e(Vo,J$),e(J$,Eur),e(J$,t4e),e(t4e,Cur),e(J$,wur),e(Vo,Aur),e(Vo,Lt),M(Y$,Lt,null),e(Lt,Lur),e(Lt,a4e),e(a4e,yur),e(Lt,xur),e(Lt,Jd),e(Jd,$ur),e(Jd,n4e),e(n4e,kur),e(Jd,Sur),e(Jd,dY),e(dY,Rur),e(Jd,Pur),e(Lt,Bur),M(zM,Lt,null),e(Vo,Iur),e(Vo,lo),M(Z$,lo,null),e(lo,Nur),e(lo,s4e),e(s4e,qur),e(lo,jur),e(lo,dn),e(dn,Dur),e(dn,l4e),e(l4e,Gur),e(dn,Our),e(dn,i4e),e(i4e,Vur),e(dn,Xur),e(dn,d4e),e(d4e,zur),e(dn,Qur),e(lo,Wur),e(lo,U),e(U,QM),e(QM,c4e),e(c4e,Uur),e(QM,Hur),e(QM,cY),e(cY,Jur),e(QM,Yur),e(U,Zur),e(U,WM),e(WM,m4e),e(m4e,Kur),e(WM,epr),e(WM,mY),e(mY,opr),e(WM,rpr),e(U,tpr),e(U,UM),e(UM,f4e),e(f4e,apr),e(UM,npr),e(UM,fY),e(fY,spr),e(UM,lpr),e(U,ipr),e(U,HM),e(HM,g4e),e(g4e,dpr),e(HM,cpr),e(HM,gY),e(gY,mpr),e(HM,fpr),e(U,gpr),e(U,JM),e(JM,h4e),e(h4e,hpr),e(JM,upr),e(JM,hY),e(hY,ppr),e(JM,_pr),e(U,bpr),e(U,YM),e(YM,u4e),e(u4e,vpr),e(YM,Fpr),e(YM,uY),e(uY,Tpr),e(YM,Mpr),e(U,Epr),e(U,ZM),e(ZM,p4e),e(p4e,Cpr),e(ZM,wpr),e(ZM,pY),e(pY,Apr),e(ZM,Lpr),e(U,ypr),e(U,KM),e(KM,_4e),e(_4e,xpr),e(KM,$pr),e(KM,_Y),e(_Y,kpr),e(KM,Spr),e(U,Rpr),e(U,eE),e(eE,b4e),e(b4e,Ppr),e(eE,Bpr),e(eE,bY),e(bY,Ipr),e(eE,Npr),e(U,qpr),e(U,oE),e(oE,v4e),e(v4e,jpr),e(oE,Dpr),e(oE,vY),e(vY,Gpr),e(oE,Opr),e(U,Vpr),e(U,rE),e(rE,F4e),e(F4e,Xpr),e(rE,zpr),e(rE,FY),e(FY,Qpr),e(rE,Wpr),e(U,Upr),e(U,tE),e(tE,T4e),e(T4e,Hpr),e(tE,Jpr),e(tE,TY),e(TY,Ypr),e(tE,Zpr),e(U,Kpr),e(U,aE),e(aE,M4e),e(M4e,e_r),e(aE,o_r),e(aE,MY),e(MY,r_r),e(aE,t_r),e(U,a_r),e(U,nE),e(nE,E4e),e(E4e,n_r),e(nE,s_r),e(nE,EY),e(EY,l_r),e(nE,i_r),e(U,d_r),e(U,sE),e(sE,C4e),e(C4e,c_r),e(sE,m_r),e(sE,CY),e(CY,f_r),e(sE,g_r),e(U,h_r),e(U,lE),e(lE,w4e),e(w4e,u_r),e(lE,p_r),e(lE,wY),e(wY,__r),e(lE,b_r),e(U,v_r),e(U,iE),e(iE,A4e),e(A4e,F_r),e(iE,T_r),e(iE,AY),e(AY,M_r),e(iE,E_r),e(U,C_r),e(U,dE),e(dE,L4e),e(L4e,w_r),e(dE,A_r),e(dE,LY),e(LY,L_r),e(dE,y_r),e(U,x_r),e(U,cE),e(cE,y4e),e(y4e,$_r),e(cE,k_r),e(cE,yY),e(yY,S_r),e(cE,R_r),e(U,P_r),e(U,mE),e(mE,x4e),e(x4e,B_r),e(mE,I_r),e(mE,xY),e(xY,N_r),e(mE,q_r),e(U,j_r),e(U,fE),e(fE,$4e),e($4e,D_r),e(fE,G_r),e(fE,$Y),e($Y,O_r),e(fE,V_r),e(U,X_r),e(U,gE),e(gE,k4e),e(k4e,z_r),e(gE,Q_r),e(gE,kY),e(kY,W_r),e(gE,U_r),e(U,H_r),e(U,hE),e(hE,S4e),e(S4e,J_r),e(hE,Y_r),e(hE,SY),e(SY,Z_r),e(hE,K_r),e(U,e1r),e(U,uE),e(uE,R4e),e(R4e,o1r),e(uE,r1r),e(uE,RY),e(RY,t1r),e(uE,a1r),e(U,n1r),e(U,pE),e(pE,P4e),e(P4e,s1r),e(pE,l1r),e(pE,PY),e(PY,i1r),e(pE,d1r),e(U,c1r),e(U,_E),e(_E,B4e),e(B4e,m1r),e(_E,f1r),e(_E,BY),e(BY,g1r),e(_E,h1r),e(U,u1r),e(U,bE),e(bE,I4e),e(I4e,p1r),e(bE,_1r),e(bE,IY),e(IY,b1r),e(bE,v1r),e(U,F1r),e(U,vE),e(vE,N4e),e(N4e,T1r),e(vE,M1r),e(vE,NY),e(NY,E1r),e(vE,C1r),e(U,w1r),e(U,FE),e(FE,q4e),e(q4e,A1r),e(FE,L1r),e(FE,qY),e(qY,y1r),e(FE,x1r),e(U,$1r),e(U,TE),e(TE,j4e),e(j4e,k1r),e(TE,S1r),e(TE,jY),e(jY,R1r),e(TE,P1r),e(U,B1r),e(U,ME),e(ME,D4e),e(D4e,I1r),e(ME,N1r),e(ME,DY),e(DY,q1r),e(ME,j1r),e(U,D1r),e(U,EE),e(EE,G4e),e(G4e,G1r),e(EE,O1r),e(EE,GY),e(GY,V1r),e(EE,X1r),e(U,z1r),e(U,CE),e(CE,O4e),e(O4e,Q1r),e(CE,W1r),e(CE,OY),e(OY,U1r),e(CE,H1r),e(U,J1r),e(U,wE),e(wE,V4e),e(V4e,Y1r),e(wE,Z1r),e(wE,VY),e(VY,K1r),e(wE,e2r),e(U,o2r),e(U,AE),e(AE,X4e),e(X4e,r2r),e(AE,t2r),e(AE,XY),e(XY,a2r),e(AE,n2r),e(U,s2r),e(U,LE),e(LE,z4e),e(z4e,l2r),e(LE,i2r),e(LE,zY),e(zY,d2r),e(LE,c2r),e(U,m2r),e(U,yE),e(yE,Q4e),e(Q4e,f2r),e(yE,g2r),e(yE,QY),e(QY,h2r),e(yE,u2r),e(U,p2r),e(U,xE),e(xE,W4e),e(W4e,_2r),e(xE,b2r),e(xE,WY),e(WY,v2r),e(xE,F2r),e(U,T2r),e(U,$E),e($E,U4e),e(U4e,M2r),e($E,E2r),e($E,UY),e(UY,C2r),e($E,w2r),e(U,A2r),e(U,kE),e(kE,H4e),e(H4e,L2r),e(kE,y2r),e(kE,HY),e(HY,x2r),e(kE,$2r),e(U,k2r),e(U,SE),e(SE,J4e),e(J4e,S2r),e(SE,R2r),e(SE,JY),e(JY,P2r),e(SE,B2r),e(lo,I2r),e(lo,RE),e(RE,N2r),e(RE,Y4e),e(Y4e,q2r),e(RE,j2r),e(RE,Z4e),e(Z4e,D2r),e(lo,G2r),M(PE,lo,null),b(m,Aro,_),b(m,Yd,_),e(Yd,BE),e(BE,K4e),M(K$,K4e,null),e(Yd,O2r),e(Yd,eCe),e(eCe,V2r),b(m,Lro,_),b(m,Xo,_),M(ek,Xo,null),e(Xo,X2r),e(Xo,Zd),e(Zd,z2r),e(Zd,YY),e(YY,Q2r),e(Zd,W2r),e(Zd,ZY),e(ZY,U2r),e(Zd,H2r),e(Xo,J2r),e(Xo,ok),e(ok,Y2r),e(ok,oCe),e(oCe,Z2r),e(ok,K2r),e(Xo,ebr),e(Xo,yt),M(rk,yt,null),e(yt,obr),e(yt,rCe),e(rCe,rbr),e(yt,tbr),e(yt,Kd),e(Kd,abr),e(Kd,tCe),e(tCe,nbr),e(Kd,sbr),e(Kd,KY),e(KY,lbr),e(Kd,ibr),e(yt,dbr),M(IE,yt,null),e(Xo,cbr),e(Xo,io),M(tk,io,null),e(io,mbr),e(io,aCe),e(aCe,fbr),e(io,gbr),e(io,cn),e(cn,hbr),e(cn,nCe),e(nCe,ubr),e(cn,pbr),e(cn,sCe),e(sCe,_br),e(cn,bbr),e(cn,lCe),e(lCe,vbr),e(cn,Fbr),e(io,Tbr),e(io,O),e(O,NE),e(NE,iCe),e(iCe,Mbr),e(NE,Ebr),e(NE,eZ),e(eZ,Cbr),e(NE,wbr),e(O,Abr),e(O,qE),e(qE,dCe),e(dCe,Lbr),e(qE,ybr),e(qE,oZ),e(oZ,xbr),e(qE,$br),e(O,kbr),e(O,jE),e(jE,cCe),e(cCe,Sbr),e(jE,Rbr),e(jE,rZ),e(rZ,Pbr),e(jE,Bbr),e(O,Ibr),e(O,DE),e(DE,mCe),e(mCe,Nbr),e(DE,qbr),e(DE,tZ),e(tZ,jbr),e(DE,Dbr),e(O,Gbr),e(O,GE),e(GE,fCe),e(fCe,Obr),e(GE,Vbr),e(GE,aZ),e(aZ,Xbr),e(GE,zbr),e(O,Qbr),e(O,OE),e(OE,gCe),e(gCe,Wbr),e(OE,Ubr),e(OE,nZ),e(nZ,Hbr),e(OE,Jbr),e(O,Ybr),e(O,VE),e(VE,hCe),e(hCe,Zbr),e(VE,Kbr),e(VE,sZ),e(sZ,evr),e(VE,ovr),e(O,rvr),e(O,XE),e(XE,uCe),e(uCe,tvr),e(XE,avr),e(XE,lZ),e(lZ,nvr),e(XE,svr),e(O,lvr),e(O,zE),e(zE,pCe),e(pCe,ivr),e(zE,dvr),e(zE,iZ),e(iZ,cvr),e(zE,mvr),e(O,fvr),e(O,QE),e(QE,_Ce),e(_Ce,gvr),e(QE,hvr),e(QE,dZ),e(dZ,uvr),e(QE,pvr),e(O,_vr),e(O,WE),e(WE,bCe),e(bCe,bvr),e(WE,vvr),e(WE,cZ),e(cZ,Fvr),e(WE,Tvr),e(O,Mvr),e(O,UE),e(UE,vCe),e(vCe,Evr),e(UE,Cvr),e(UE,mZ),e(mZ,wvr),e(UE,Avr),e(O,Lvr),e(O,HE),e(HE,FCe),e(FCe,yvr),e(HE,xvr),e(HE,fZ),e(fZ,$vr),e(HE,kvr),e(O,Svr),e(O,JE),e(JE,TCe),e(TCe,Rvr),e(JE,Pvr),e(JE,gZ),e(gZ,Bvr),e(JE,Ivr),e(O,Nvr),e(O,YE),e(YE,MCe),e(MCe,qvr),e(YE,jvr),e(YE,hZ),e(hZ,Dvr),e(YE,Gvr),e(O,Ovr),e(O,ZE),e(ZE,ECe),e(ECe,Vvr),e(ZE,Xvr),e(ZE,uZ),e(uZ,zvr),e(ZE,Qvr),e(O,Wvr),e(O,KE),e(KE,CCe),e(CCe,Uvr),e(KE,Hvr),e(KE,pZ),e(pZ,Jvr),e(KE,Yvr),e(O,Zvr),e(O,e4),e(e4,wCe),e(wCe,Kvr),e(e4,eFr),e(e4,_Z),e(_Z,oFr),e(e4,rFr),e(O,tFr),e(O,o4),e(o4,ACe),e(ACe,aFr),e(o4,nFr),e(o4,bZ),e(bZ,sFr),e(o4,lFr),e(O,iFr),e(O,r4),e(r4,LCe),e(LCe,dFr),e(r4,cFr),e(r4,vZ),e(vZ,mFr),e(r4,fFr),e(O,gFr),e(O,t4),e(t4,yCe),e(yCe,hFr),e(t4,uFr),e(t4,FZ),e(FZ,pFr),e(t4,_Fr),e(O,bFr),e(O,a4),e(a4,xCe),e(xCe,vFr),e(a4,FFr),e(a4,TZ),e(TZ,TFr),e(a4,MFr),e(O,EFr),e(O,n4),e(n4,$Ce),e($Ce,CFr),e(n4,wFr),e(n4,MZ),e(MZ,AFr),e(n4,LFr),e(O,yFr),e(O,s4),e(s4,kCe),e(kCe,xFr),e(s4,$Fr),e(s4,EZ),e(EZ,kFr),e(s4,SFr),e(O,RFr),e(O,l4),e(l4,SCe),e(SCe,PFr),e(l4,BFr),e(l4,CZ),e(CZ,IFr),e(l4,NFr),e(O,qFr),e(O,i4),e(i4,RCe),e(RCe,jFr),e(i4,DFr),e(i4,wZ),e(wZ,GFr),e(i4,OFr),e(O,VFr),e(O,d4),e(d4,PCe),e(PCe,XFr),e(d4,zFr),e(d4,AZ),e(AZ,QFr),e(d4,WFr),e(O,UFr),e(O,c4),e(c4,BCe),e(BCe,HFr),e(c4,JFr),e(c4,LZ),e(LZ,YFr),e(c4,ZFr),e(O,KFr),e(O,m4),e(m4,ICe),e(ICe,eTr),e(m4,oTr),e(m4,yZ),e(yZ,rTr),e(m4,tTr),e(O,aTr),e(O,f4),e(f4,NCe),e(NCe,nTr),e(f4,sTr),e(f4,xZ),e(xZ,lTr),e(f4,iTr),e(O,dTr),e(O,g4),e(g4,qCe),e(qCe,cTr),e(g4,mTr),e(g4,$Z),e($Z,fTr),e(g4,gTr),e(O,hTr),e(O,h4),e(h4,jCe),e(jCe,uTr),e(h4,pTr),e(h4,kZ),e(kZ,_Tr),e(h4,bTr),e(O,vTr),e(O,u4),e(u4,DCe),e(DCe,FTr),e(u4,TTr),e(u4,SZ),e(SZ,MTr),e(u4,ETr),e(O,CTr),e(O,p4),e(p4,GCe),e(GCe,wTr),e(p4,ATr),e(p4,RZ),e(RZ,LTr),e(p4,yTr),e(O,xTr),e(O,_4),e(_4,OCe),e(OCe,$Tr),e(_4,kTr),e(_4,PZ),e(PZ,STr),e(_4,RTr),e(O,PTr),e(O,b4),e(b4,VCe),e(VCe,BTr),e(b4,ITr),e(b4,BZ),e(BZ,NTr),e(b4,qTr),e(O,jTr),e(O,v4),e(v4,XCe),e(XCe,DTr),e(v4,GTr),e(v4,IZ),e(IZ,OTr),e(v4,VTr),e(O,XTr),e(O,F4),e(F4,zCe),e(zCe,zTr),e(F4,QTr),e(F4,NZ),e(NZ,WTr),e(F4,UTr),e(O,HTr),e(O,T4),e(T4,QCe),e(QCe,JTr),e(T4,YTr),e(T4,qZ),e(qZ,ZTr),e(T4,KTr),e(O,eMr),e(O,M4),e(M4,WCe),e(WCe,oMr),e(M4,rMr),e(M4,jZ),e(jZ,tMr),e(M4,aMr),e(O,nMr),e(O,E4),e(E4,UCe),e(UCe,sMr),e(E4,lMr),e(E4,DZ),e(DZ,iMr),e(E4,dMr),e(O,cMr),e(O,C4),e(C4,HCe),e(HCe,mMr),e(C4,fMr),e(C4,GZ),e(GZ,gMr),e(C4,hMr),e(O,uMr),e(O,w4),e(w4,JCe),e(JCe,pMr),e(w4,_Mr),e(w4,OZ),e(OZ,bMr),e(w4,vMr),e(O,FMr),e(O,A4),e(A4,YCe),e(YCe,TMr),e(A4,MMr),e(A4,VZ),e(VZ,EMr),e(A4,CMr),e(O,wMr),e(O,L4),e(L4,ZCe),e(ZCe,AMr),e(L4,LMr),e(L4,XZ),e(XZ,yMr),e(L4,xMr),e(O,$Mr),e(O,y4),e(y4,KCe),e(KCe,kMr),e(y4,SMr),e(y4,zZ),e(zZ,RMr),e(y4,PMr),e(O,BMr),e(O,x4),e(x4,e3e),e(e3e,IMr),e(x4,NMr),e(x4,QZ),e(QZ,qMr),e(x4,jMr),e(O,DMr),e(O,$4),e($4,o3e),e(o3e,GMr),e($4,OMr),e($4,WZ),e(WZ,VMr),e($4,XMr),e(io,zMr),e(io,k4),e(k4,QMr),e(k4,r3e),e(r3e,WMr),e(k4,UMr),e(k4,t3e),e(t3e,HMr),e(io,JMr),M(S4,io,null),b(m,yro,_),b(m,ec,_),e(ec,R4),e(R4,a3e),M(ak,a3e,null),e(ec,YMr),e(ec,n3e),e(n3e,ZMr),b(m,xro,_),b(m,zo,_),M(nk,zo,null),e(zo,KMr),e(zo,oc),e(oc,eEr),e(oc,UZ),e(UZ,oEr),e(oc,rEr),e(oc,HZ),e(HZ,tEr),e(oc,aEr),e(zo,nEr),e(zo,sk),e(sk,sEr),e(sk,s3e),e(s3e,lEr),e(sk,iEr),e(zo,dEr),e(zo,xt),M(lk,xt,null),e(xt,cEr),e(xt,l3e),e(l3e,mEr),e(xt,fEr),e(xt,rc),e(rc,gEr),e(rc,i3e),e(i3e,hEr),e(rc,uEr),e(rc,JZ),e(JZ,pEr),e(rc,_Er),e(xt,bEr),M(P4,xt,null),e(zo,vEr),e(zo,co),M(ik,co,null),e(co,FEr),e(co,d3e),e(d3e,TEr),e(co,MEr),e(co,mn),e(mn,EEr),e(mn,c3e),e(c3e,CEr),e(mn,wEr),e(mn,m3e),e(m3e,AEr),e(mn,LEr),e(mn,f3e),e(f3e,yEr),e(mn,xEr),e(co,$Er),e(co,g3e),e(g3e,B4),e(B4,h3e),e(h3e,kEr),e(B4,SEr),e(B4,YZ),e(YZ,REr),e(B4,PEr),e(co,BEr),e(co,I4),e(I4,IEr),e(I4,u3e),e(u3e,NEr),e(I4,qEr),e(I4,p3e),e(p3e,jEr),e(co,DEr),M(N4,co,null),b(m,$ro,_),b(m,tc,_),e(tc,q4),e(q4,_3e),M(dk,_3e,null),e(tc,GEr),e(tc,b3e),e(b3e,OEr),b(m,kro,_),b(m,Qo,_),M(ck,Qo,null),e(Qo,VEr),e(Qo,ac),e(ac,XEr),e(ac,ZZ),e(ZZ,zEr),e(ac,QEr),e(ac,KZ),e(KZ,WEr),e(ac,UEr),e(Qo,HEr),e(Qo,mk),e(mk,JEr),e(mk,v3e),e(v3e,YEr),e(mk,ZEr),e(Qo,KEr),e(Qo,$t),M(fk,$t,null),e($t,e4r),e($t,F3e),e(F3e,o4r),e($t,r4r),e($t,nc),e(nc,t4r),e(nc,T3e),e(T3e,a4r),e(nc,n4r),e(nc,eK),e(eK,s4r),e(nc,l4r),e($t,i4r),M(j4,$t,null),e(Qo,d4r),e(Qo,mo),M(gk,mo,null),e(mo,c4r),e(mo,M3e),e(M3e,m4r),e(mo,f4r),e(mo,fn),e(fn,g4r),e(fn,E3e),e(E3e,h4r),e(fn,u4r),e(fn,C3e),e(C3e,p4r),e(fn,_4r),e(fn,w3e),e(w3e,b4r),e(fn,v4r),e(mo,F4r),e(mo,sc),e(sc,D4),e(D4,A3e),e(A3e,T4r),e(D4,M4r),e(D4,oK),e(oK,E4r),e(D4,C4r),e(sc,w4r),e(sc,G4),e(G4,L3e),e(L3e,A4r),e(G4,L4r),e(G4,rK),e(rK,y4r),e(G4,x4r),e(sc,$4r),e(sc,O4),e(O4,y3e),e(y3e,k4r),e(O4,S4r),e(O4,tK),e(tK,R4r),e(O4,P4r),e(mo,B4r),e(mo,V4),e(V4,I4r),e(V4,x3e),e(x3e,N4r),e(V4,q4r),e(V4,$3e),e($3e,j4r),e(mo,D4r),M(X4,mo,null),b(m,Sro,_),b(m,lc,_),e(lc,z4),e(z4,k3e),M(hk,k3e,null),e(lc,G4r),e(lc,S3e),e(S3e,O4r),b(m,Rro,_),b(m,Wo,_),M(uk,Wo,null),e(Wo,V4r),e(Wo,ic),e(ic,X4r),e(ic,aK),e(aK,z4r),e(ic,Q4r),e(ic,nK),e(nK,W4r),e(ic,U4r),e(Wo,H4r),e(Wo,pk),e(pk,J4r),e(pk,R3e),e(R3e,Y4r),e(pk,Z4r),e(Wo,K4r),e(Wo,kt),M(_k,kt,null),e(kt,eCr),e(kt,P3e),e(P3e,oCr),e(kt,rCr),e(kt,dc),e(dc,tCr),e(dc,B3e),e(B3e,aCr),e(dc,nCr),e(dc,sK),e(sK,sCr),e(dc,lCr),e(kt,iCr),M(Q4,kt,null),e(Wo,dCr),e(Wo,fo),M(bk,fo,null),e(fo,cCr),e(fo,I3e),e(I3e,mCr),e(fo,fCr),e(fo,gn),e(gn,gCr),e(gn,N3e),e(N3e,hCr),e(gn,uCr),e(gn,q3e),e(q3e,pCr),e(gn,_Cr),e(gn,j3e),e(j3e,bCr),e(gn,vCr),e(fo,FCr),e(fo,be),e(be,W4),e(W4,D3e),e(D3e,TCr),e(W4,MCr),e(W4,lK),e(lK,ECr),e(W4,CCr),e(be,wCr),e(be,U4),e(U4,G3e),e(G3e,ACr),e(U4,LCr),e(U4,iK),e(iK,yCr),e(U4,xCr),e(be,$Cr),e(be,H4),e(H4,O3e),e(O3e,kCr),e(H4,SCr),e(H4,dK),e(dK,RCr),e(H4,PCr),e(be,BCr),e(be,J4),e(J4,V3e),e(V3e,ICr),e(J4,NCr),e(J4,cK),e(cK,qCr),e(J4,jCr),e(be,DCr),e(be,Cl),e(Cl,X3e),e(X3e,GCr),e(Cl,OCr),e(Cl,mK),e(mK,VCr),e(Cl,XCr),e(Cl,fK),e(fK,zCr),e(Cl,QCr),e(be,WCr),e(be,Y4),e(Y4,z3e),e(z3e,UCr),e(Y4,HCr),e(Y4,gK),e(gK,JCr),e(Y4,YCr),e(be,ZCr),e(be,wl),e(wl,Q3e),e(Q3e,KCr),e(wl,e3r),e(wl,hK),e(hK,o3r),e(wl,r3r),e(wl,uK),e(uK,t3r),e(wl,a3r),e(be,n3r),e(be,Z4),e(Z4,W3e),e(W3e,s3r),e(Z4,l3r),e(Z4,pK),e(pK,i3r),e(Z4,d3r),e(be,c3r),e(be,St),e(St,U3e),e(U3e,m3r),e(St,f3r),e(St,_K),e(_K,g3r),e(St,h3r),e(St,bK),e(bK,u3r),e(St,p3r),e(St,vK),e(vK,_3r),e(St,b3r),e(be,v3r),e(be,K4),e(K4,H3e),e(H3e,F3r),e(K4,T3r),e(K4,FK),e(FK,M3r),e(K4,E3r),e(be,C3r),e(be,eC),e(eC,J3e),e(J3e,w3r),e(eC,A3r),e(eC,TK),e(TK,L3r),e(eC,y3r),e(be,x3r),e(be,oC),e(oC,Y3e),e(Y3e,$3r),e(oC,k3r),e(oC,MK),e(MK,S3r),e(oC,R3r),e(be,P3r),e(be,rC),e(rC,Z3e),e(Z3e,B3r),e(rC,I3r),e(rC,EK),e(EK,N3r),e(rC,q3r),e(be,j3r),e(be,tC),e(tC,K3e),e(K3e,D3r),e(tC,G3r),e(tC,CK),e(CK,O3r),e(tC,V3r),e(be,X3r),e(be,aC),e(aC,e5e),e(e5e,z3r),e(aC,Q3r),e(aC,wK),e(wK,W3r),e(aC,U3r),e(be,H3r),e(be,nC),e(nC,o5e),e(o5e,J3r),e(nC,Y3r),e(nC,AK),e(AK,Z3r),e(nC,K3r),e(be,e5r),e(be,sC),e(sC,r5e),e(r5e,o5r),e(sC,r5r),e(sC,LK),e(LK,t5r),e(sC,a5r),e(be,n5r),e(be,lC),e(lC,t5e),e(t5e,s5r),e(lC,l5r),e(lC,yK),e(yK,i5r),e(lC,d5r),e(fo,c5r),e(fo,iC),e(iC,m5r),e(iC,a5e),e(a5e,f5r),e(iC,g5r),e(iC,n5e),e(n5e,h5r),e(fo,u5r),M(dC,fo,null),b(m,Pro,_),b(m,cc,_),e(cc,cC),e(cC,s5e),M(vk,s5e,null),e(cc,p5r),e(cc,l5e),e(l5e,_5r),b(m,Bro,_),b(m,Uo,_),M(Fk,Uo,null),e(Uo,b5r),e(Uo,mc),e(mc,v5r),e(mc,xK),e(xK,F5r),e(mc,T5r),e(mc,$K),e($K,M5r),e(mc,E5r),e(Uo,C5r),e(Uo,Tk),e(Tk,w5r),e(Tk,i5e),e(i5e,A5r),e(Tk,L5r),e(Uo,y5r),e(Uo,Rt),M(Mk,Rt,null),e(Rt,x5r),e(Rt,d5e),e(d5e,$5r),e(Rt,k5r),e(Rt,fc),e(fc,S5r),e(fc,c5e),e(c5e,R5r),e(fc,P5r),e(fc,kK),e(kK,B5r),e(fc,I5r),e(Rt,N5r),M(mC,Rt,null),e(Uo,q5r),e(Uo,go),M(Ek,go,null),e(go,j5r),e(go,m5e),e(m5e,D5r),e(go,G5r),e(go,hn),e(hn,O5r),e(hn,f5e),e(f5e,V5r),e(hn,X5r),e(hn,g5e),e(g5e,z5r),e(hn,Q5r),e(hn,h5e),e(h5e,W5r),e(hn,U5r),e(go,H5r),e(go,u5e),e(u5e,fC),e(fC,p5e),e(p5e,J5r),e(fC,Y5r),e(fC,SK),e(SK,Z5r),e(fC,K5r),e(go,e0r),e(go,gC),e(gC,o0r),e(gC,_5e),e(_5e,r0r),e(gC,t0r),e(gC,b5e),e(b5e,a0r),e(go,n0r),M(hC,go,null),b(m,Iro,_),b(m,gc,_),e(gc,uC),e(uC,v5e),M(Ck,v5e,null),e(gc,s0r),e(gc,F5e),e(F5e,l0r),b(m,Nro,_),b(m,Ho,_),M(wk,Ho,null),e(Ho,i0r),e(Ho,hc),e(hc,d0r),e(hc,RK),e(RK,c0r),e(hc,m0r),e(hc,PK),e(PK,f0r),e(hc,g0r),e(Ho,h0r),e(Ho,Ak),e(Ak,u0r),e(Ak,T5e),e(T5e,p0r),e(Ak,_0r),e(Ho,b0r),e(Ho,Pt),M(Lk,Pt,null),e(Pt,v0r),e(Pt,M5e),e(M5e,F0r),e(Pt,T0r),e(Pt,uc),e(uc,M0r),e(uc,E5e),e(E5e,E0r),e(uc,C0r),e(uc,BK),e(BK,w0r),e(uc,A0r),e(Pt,L0r),M(pC,Pt,null),e(Ho,y0r),e(Ho,ho),M(yk,ho,null),e(ho,x0r),e(ho,C5e),e(C5e,$0r),e(ho,k0r),e(ho,un),e(un,S0r),e(un,w5e),e(w5e,R0r),e(un,P0r),e(un,A5e),e(A5e,B0r),e(un,I0r),e(un,L5e),e(L5e,N0r),e(un,q0r),e(ho,j0r),e(ho,y5e),e(y5e,_C),e(_C,x5e),e(x5e,D0r),e(_C,G0r),e(_C,IK),e(IK,O0r),e(_C,V0r),e(ho,X0r),e(ho,bC),e(bC,z0r),e(bC,$5e),e($5e,Q0r),e(bC,W0r),e(bC,k5e),e(k5e,U0r),e(ho,H0r),M(vC,ho,null),b(m,qro,_),b(m,pc,_),e(pc,FC),e(FC,S5e),M(xk,S5e,null),e(pc,J0r),e(pc,R5e),e(R5e,Y0r),b(m,jro,_),b(m,Jo,_),M($k,Jo,null),e(Jo,Z0r),e(Jo,_c),e(_c,K0r),e(_c,NK),e(NK,ewr),e(_c,owr),e(_c,qK),e(qK,rwr),e(_c,twr),e(Jo,awr),e(Jo,kk),e(kk,nwr),e(kk,P5e),e(P5e,swr),e(kk,lwr),e(Jo,iwr),e(Jo,Bt),M(Sk,Bt,null),e(Bt,dwr),e(Bt,B5e),e(B5e,cwr),e(Bt,mwr),e(Bt,bc),e(bc,fwr),e(bc,I5e),e(I5e,gwr),e(bc,hwr),e(bc,jK),e(jK,uwr),e(bc,pwr),e(Bt,_wr),M(TC,Bt,null),e(Jo,bwr),e(Jo,uo),M(Rk,uo,null),e(uo,vwr),e(uo,N5e),e(N5e,Fwr),e(uo,Twr),e(uo,pn),e(pn,Mwr),e(pn,q5e),e(q5e,Ewr),e(pn,Cwr),e(pn,j5e),e(j5e,wwr),e(pn,Awr),e(pn,D5e),e(D5e,Lwr),e(pn,ywr),e(uo,xwr),e(uo,G5e),e(G5e,MC),e(MC,O5e),e(O5e,$wr),e(MC,kwr),e(MC,DK),e(DK,Swr),e(MC,Rwr),e(uo,Pwr),e(uo,EC),e(EC,Bwr),e(EC,V5e),e(V5e,Iwr),e(EC,Nwr),e(EC,X5e),e(X5e,qwr),e(uo,jwr),M(CC,uo,null),b(m,Dro,_),b(m,vc,_),e(vc,wC),e(wC,z5e),M(Pk,z5e,null),e(vc,Dwr),e(vc,Q5e),e(Q5e,Gwr),b(m,Gro,_),b(m,Yo,_),M(Bk,Yo,null),e(Yo,Owr),e(Yo,Fc),e(Fc,Vwr),e(Fc,GK),e(GK,Xwr),e(Fc,zwr),e(Fc,OK),e(OK,Qwr),e(Fc,Wwr),e(Yo,Uwr),e(Yo,Ik),e(Ik,Hwr),e(Ik,W5e),e(W5e,Jwr),e(Ik,Ywr),e(Yo,Zwr),e(Yo,It),M(Nk,It,null),e(It,Kwr),e(It,U5e),e(U5e,eAr),e(It,oAr),e(It,Tc),e(Tc,rAr),e(Tc,H5e),e(H5e,tAr),e(Tc,aAr),e(Tc,VK),e(VK,nAr),e(Tc,sAr),e(It,lAr),M(AC,It,null),e(Yo,iAr),e(Yo,po),M(qk,po,null),e(po,dAr),e(po,J5e),e(J5e,cAr),e(po,mAr),e(po,_n),e(_n,fAr),e(_n,Y5e),e(Y5e,gAr),e(_n,hAr),e(_n,Z5e),e(Z5e,uAr),e(_n,pAr),e(_n,K5e),e(K5e,_Ar),e(_n,bAr),e(po,vAr),e(po,Be),e(Be,LC),e(LC,e0e),e(e0e,FAr),e(LC,TAr),e(LC,XK),e(XK,MAr),e(LC,EAr),e(Be,CAr),e(Be,yC),e(yC,o0e),e(o0e,wAr),e(yC,AAr),e(yC,zK),e(zK,LAr),e(yC,yAr),e(Be,xAr),e(Be,xC),e(xC,r0e),e(r0e,$Ar),e(xC,kAr),e(xC,QK),e(QK,SAr),e(xC,RAr),e(Be,PAr),e(Be,$C),e($C,t0e),e(t0e,BAr),e($C,IAr),e($C,WK),e(WK,NAr),e($C,qAr),e(Be,jAr),e(Be,kC),e(kC,a0e),e(a0e,DAr),e(kC,GAr),e(kC,UK),e(UK,OAr),e(kC,VAr),e(Be,XAr),e(Be,SC),e(SC,n0e),e(n0e,zAr),e(SC,QAr),e(SC,HK),e(HK,WAr),e(SC,UAr),e(Be,HAr),e(Be,RC),e(RC,s0e),e(s0e,JAr),e(RC,YAr),e(RC,JK),e(JK,ZAr),e(RC,KAr),e(Be,e6r),e(Be,PC),e(PC,l0e),e(l0e,o6r),e(PC,r6r),e(PC,YK),e(YK,t6r),e(PC,a6r),e(Be,n6r),e(Be,BC),e(BC,i0e),e(i0e,s6r),e(BC,l6r),e(BC,ZK),e(ZK,i6r),e(BC,d6r),e(po,c6r),e(po,IC),e(IC,m6r),e(IC,d0e),e(d0e,f6r),e(IC,g6r),e(IC,c0e),e(c0e,h6r),e(po,u6r),M(NC,po,null),b(m,Oro,_),b(m,Mc,_),e(Mc,qC),e(qC,m0e),M(jk,m0e,null),e(Mc,p6r),e(Mc,f0e),e(f0e,_6r),b(m,Vro,_),b(m,Zo,_),M(Dk,Zo,null),e(Zo,b6r),e(Zo,Ec),e(Ec,v6r),e(Ec,KK),e(KK,F6r),e(Ec,T6r),e(Ec,eee),e(eee,M6r),e(Ec,E6r),e(Zo,C6r),e(Zo,Gk),e(Gk,w6r),e(Gk,g0e),e(g0e,A6r),e(Gk,L6r),e(Zo,y6r),e(Zo,Nt),M(Ok,Nt,null),e(Nt,x6r),e(Nt,h0e),e(h0e,$6r),e(Nt,k6r),e(Nt,Cc),e(Cc,S6r),e(Cc,u0e),e(u0e,R6r),e(Cc,P6r),e(Cc,oee),e(oee,B6r),e(Cc,I6r),e(Nt,N6r),M(jC,Nt,null),e(Zo,q6r),e(Zo,_o),M(Vk,_o,null),e(_o,j6r),e(_o,p0e),e(p0e,D6r),e(_o,G6r),e(_o,bn),e(bn,O6r),e(bn,_0e),e(_0e,V6r),e(bn,X6r),e(bn,b0e),e(b0e,z6r),e(bn,Q6r),e(bn,v0e),e(v0e,W6r),e(bn,U6r),e(_o,H6r),e(_o,gt),e(gt,DC),e(DC,F0e),e(F0e,J6r),e(DC,Y6r),e(DC,ree),e(ree,Z6r),e(DC,K6r),e(gt,e7r),e(gt,GC),e(GC,T0e),e(T0e,o7r),e(GC,r7r),e(GC,tee),e(tee,t7r),e(GC,a7r),e(gt,n7r),e(gt,OC),e(OC,M0e),e(M0e,s7r),e(OC,l7r),e(OC,aee),e(aee,i7r),e(OC,d7r),e(gt,c7r),e(gt,VC),e(VC,E0e),e(E0e,m7r),e(VC,f7r),e(VC,nee),e(nee,g7r),e(VC,h7r),e(gt,u7r),e(gt,XC),e(XC,C0e),e(C0e,p7r),e(XC,_7r),e(XC,see),e(see,b7r),e(XC,v7r),e(_o,F7r),e(_o,zC),e(zC,T7r),e(zC,w0e),e(w0e,M7r),e(zC,E7r),e(zC,A0e),e(A0e,C7r),e(_o,w7r),M(QC,_o,null),b(m,Xro,_),b(m,wc,_),e(wc,WC),e(WC,L0e),M(Xk,L0e,null),e(wc,A7r),e(wc,y0e),e(y0e,L7r),b(m,zro,_),b(m,Ko,_),M(zk,Ko,null),e(Ko,y7r),e(Ko,Ac),e(Ac,x7r),e(Ac,lee),e(lee,$7r),e(Ac,k7r),e(Ac,iee),e(iee,S7r),e(Ac,R7r),e(Ko,P7r),e(Ko,Qk),e(Qk,B7r),e(Qk,x0e),e(x0e,I7r),e(Qk,N7r),e(Ko,q7r),e(Ko,qt),M(Wk,qt,null),e(qt,j7r),e(qt,$0e),e($0e,D7r),e(qt,G7r),e(qt,Lc),e(Lc,O7r),e(Lc,k0e),e(k0e,V7r),e(Lc,X7r),e(Lc,dee),e(dee,z7r),e(Lc,Q7r),e(qt,W7r),M(UC,qt,null),e(Ko,U7r),e(Ko,bo),M(Uk,bo,null),e(bo,H7r),e(bo,S0e),e(S0e,J7r),e(bo,Y7r),e(bo,vn),e(vn,Z7r),e(vn,R0e),e(R0e,K7r),e(vn,eLr),e(vn,P0e),e(P0e,oLr),e(vn,rLr),e(vn,B0e),e(B0e,tLr),e(vn,aLr),e(bo,nLr),e(bo,Le),e(Le,HC),e(HC,I0e),e(I0e,sLr),e(HC,lLr),e(HC,cee),e(cee,iLr),e(HC,dLr),e(Le,cLr),e(Le,JC),e(JC,N0e),e(N0e,mLr),e(JC,fLr),e(JC,mee),e(mee,gLr),e(JC,hLr),e(Le,uLr),e(Le,YC),e(YC,q0e),e(q0e,pLr),e(YC,_Lr),e(YC,fee),e(fee,bLr),e(YC,vLr),e(Le,FLr),e(Le,ZC),e(ZC,j0e),e(j0e,TLr),e(ZC,MLr),e(ZC,gee),e(gee,ELr),e(ZC,CLr),e(Le,wLr),e(Le,KC),e(KC,D0e),e(D0e,ALr),e(KC,LLr),e(KC,hee),e(hee,yLr),e(KC,xLr),e(Le,$Lr),e(Le,e3),e(e3,G0e),e(G0e,kLr),e(e3,SLr),e(e3,uee),e(uee,RLr),e(e3,PLr),e(Le,BLr),e(Le,o3),e(o3,O0e),e(O0e,ILr),e(o3,NLr),e(o3,pee),e(pee,qLr),e(o3,jLr),e(Le,DLr),e(Le,r3),e(r3,V0e),e(V0e,GLr),e(r3,OLr),e(r3,_ee),e(_ee,VLr),e(r3,XLr),e(Le,zLr),e(Le,t3),e(t3,X0e),e(X0e,QLr),e(t3,WLr),e(t3,bee),e(bee,ULr),e(t3,HLr),e(Le,JLr),e(Le,a3),e(a3,z0e),e(z0e,YLr),e(a3,ZLr),e(a3,vee),e(vee,KLr),e(a3,e8r),e(bo,o8r),e(bo,n3),e(n3,r8r),e(n3,Q0e),e(Q0e,t8r),e(n3,a8r),e(n3,W0e),e(W0e,n8r),e(bo,s8r),M(s3,bo,null),b(m,Qro,_),b(m,yc,_),e(yc,l3),e(l3,U0e),M(Hk,U0e,null),e(yc,l8r),e(yc,H0e),e(H0e,i8r),b(m,Wro,_),b(m,er,_),M(Jk,er,null),e(er,d8r),e(er,xc),e(xc,c8r),e(xc,Fee),e(Fee,m8r),e(xc,f8r),e(xc,Tee),e(Tee,g8r),e(xc,h8r),e(er,u8r),e(er,Yk),e(Yk,p8r),e(Yk,J0e),e(J0e,_8r),e(Yk,b8r),e(er,v8r),e(er,jt),M(Zk,jt,null),e(jt,F8r),e(jt,Y0e),e(Y0e,T8r),e(jt,M8r),e(jt,$c),e($c,E8r),e($c,Z0e),e(Z0e,C8r),e($c,w8r),e($c,Mee),e(Mee,A8r),e($c,L8r),e(jt,y8r),M(i3,jt,null),e(er,x8r),e(er,vo),M(Kk,vo,null),e(vo,$8r),e(vo,K0e),e(K0e,k8r),e(vo,S8r),e(vo,Fn),e(Fn,R8r),e(Fn,ewe),e(ewe,P8r),e(Fn,B8r),e(Fn,owe),e(owe,I8r),e(Fn,N8r),e(Fn,rwe),e(rwe,q8r),e(Fn,j8r),e(vo,D8r),e(vo,kc),e(kc,d3),e(d3,twe),e(twe,G8r),e(d3,O8r),e(d3,Eee),e(Eee,V8r),e(d3,X8r),e(kc,z8r),e(kc,c3),e(c3,awe),e(awe,Q8r),e(c3,W8r),e(c3,Cee),e(Cee,U8r),e(c3,H8r),e(kc,J8r),e(kc,m3),e(m3,nwe),e(nwe,Y8r),e(m3,Z8r),e(m3,wee),e(wee,K8r),e(m3,eyr),e(vo,oyr),e(vo,f3),e(f3,ryr),e(f3,swe),e(swe,tyr),e(f3,ayr),e(f3,lwe),e(lwe,nyr),e(vo,syr),M(g3,vo,null),b(m,Uro,_),b(m,Sc,_),e(Sc,h3),e(h3,iwe),M(eS,iwe,null),e(Sc,lyr),e(Sc,dwe),e(dwe,iyr),b(m,Hro,_),b(m,or,_),M(oS,or,null),e(or,dyr),e(or,Rc),e(Rc,cyr),e(Rc,Aee),e(Aee,myr),e(Rc,fyr),e(Rc,Lee),e(Lee,gyr),e(Rc,hyr),e(or,uyr),e(or,rS),e(rS,pyr),e(rS,cwe),e(cwe,_yr),e(rS,byr),e(or,vyr),e(or,Dt),M(tS,Dt,null),e(Dt,Fyr),e(Dt,mwe),e(mwe,Tyr),e(Dt,Myr),e(Dt,Pc),e(Pc,Eyr),e(Pc,fwe),e(fwe,Cyr),e(Pc,wyr),e(Pc,yee),e(yee,Ayr),e(Pc,Lyr),e(Dt,yyr),M(u3,Dt,null),e(or,xyr),e(or,Fo),M(aS,Fo,null),e(Fo,$yr),e(Fo,gwe),e(gwe,kyr),e(Fo,Syr),e(Fo,Tn),e(Tn,Ryr),e(Tn,hwe),e(hwe,Pyr),e(Tn,Byr),e(Tn,uwe),e(uwe,Iyr),e(Tn,Nyr),e(Tn,pwe),e(pwe,qyr),e(Tn,jyr),e(Fo,Dyr),e(Fo,ht),e(ht,p3),e(p3,_we),e(_we,Gyr),e(p3,Oyr),e(p3,xee),e(xee,Vyr),e(p3,Xyr),e(ht,zyr),e(ht,_3),e(_3,bwe),e(bwe,Qyr),e(_3,Wyr),e(_3,$ee),e($ee,Uyr),e(_3,Hyr),e(ht,Jyr),e(ht,b3),e(b3,vwe),e(vwe,Yyr),e(b3,Zyr),e(b3,kee),e(kee,Kyr),e(b3,e9r),e(ht,o9r),e(ht,v3),e(v3,Fwe),e(Fwe,r9r),e(v3,t9r),e(v3,See),e(See,a9r),e(v3,n9r),e(ht,s9r),e(ht,F3),e(F3,Twe),e(Twe,l9r),e(F3,i9r),e(F3,Ree),e(Ree,d9r),e(F3,c9r),e(Fo,m9r),e(Fo,T3),e(T3,f9r),e(T3,Mwe),e(Mwe,g9r),e(T3,h9r),e(T3,Ewe),e(Ewe,u9r),e(Fo,p9r),M(M3,Fo,null),b(m,Jro,_),b(m,Bc,_),e(Bc,E3),e(E3,Cwe),M(nS,Cwe,null),e(Bc,_9r),e(Bc,wwe),e(wwe,b9r),b(m,Yro,_),b(m,rr,_),M(sS,rr,null),e(rr,v9r),e(rr,Ic),e(Ic,F9r),e(Ic,Pee),e(Pee,T9r),e(Ic,M9r),e(Ic,Bee),e(Bee,E9r),e(Ic,C9r),e(rr,w9r),e(rr,lS),e(lS,A9r),e(lS,Awe),e(Awe,L9r),e(lS,y9r),e(rr,x9r),e(rr,Gt),M(iS,Gt,null),e(Gt,$9r),e(Gt,Lwe),e(Lwe,k9r),e(Gt,S9r),e(Gt,Nc),e(Nc,R9r),e(Nc,ywe),e(ywe,P9r),e(Nc,B9r),e(Nc,Iee),e(Iee,I9r),e(Nc,N9r),e(Gt,q9r),M(C3,Gt,null),e(rr,j9r),e(rr,To),M(dS,To,null),e(To,D9r),e(To,xwe),e(xwe,G9r),e(To,O9r),e(To,Mn),e(Mn,V9r),e(Mn,$we),e($we,X9r),e(Mn,z9r),e(Mn,kwe),e(kwe,Q9r),e(Mn,W9r),e(Mn,Swe),e(Swe,U9r),e(Mn,H9r),e(To,J9r),e(To,En),e(En,w3),e(w3,Rwe),e(Rwe,Y9r),e(w3,Z9r),e(w3,Nee),e(Nee,K9r),e(w3,exr),e(En,oxr),e(En,A3),e(A3,Pwe),e(Pwe,rxr),e(A3,txr),e(A3,qee),e(qee,axr),e(A3,nxr),e(En,sxr),e(En,L3),e(L3,Bwe),e(Bwe,lxr),e(L3,ixr),e(L3,jee),e(jee,dxr),e(L3,cxr),e(En,mxr),e(En,y3),e(y3,Iwe),e(Iwe,fxr),e(y3,gxr),e(y3,Dee),e(Dee,hxr),e(y3,uxr),e(To,pxr),e(To,x3),e(x3,_xr),e(x3,Nwe),e(Nwe,bxr),e(x3,vxr),e(x3,qwe),e(qwe,Fxr),e(To,Txr),M($3,To,null),b(m,Zro,_),b(m,qc,_),e(qc,k3),e(k3,jwe),M(cS,jwe,null),e(qc,Mxr),e(qc,Dwe),e(Dwe,Exr),b(m,Kro,_),b(m,tr,_),M(mS,tr,null),e(tr,Cxr),e(tr,jc),e(jc,wxr),e(jc,Gee),e(Gee,Axr),e(jc,Lxr),e(jc,Oee),e(Oee,yxr),e(jc,xxr),e(tr,$xr),e(tr,fS),e(fS,kxr),e(fS,Gwe),e(Gwe,Sxr),e(fS,Rxr),e(tr,Pxr),e(tr,Ot),M(gS,Ot,null),e(Ot,Bxr),e(Ot,Owe),e(Owe,Ixr),e(Ot,Nxr),e(Ot,Dc),e(Dc,qxr),e(Dc,Vwe),e(Vwe,jxr),e(Dc,Dxr),e(Dc,Vee),e(Vee,Gxr),e(Dc,Oxr),e(Ot,Vxr),M(S3,Ot,null),e(tr,Xxr),e(tr,Mo),M(hS,Mo,null),e(Mo,zxr),e(Mo,Xwe),e(Xwe,Qxr),e(Mo,Wxr),e(Mo,Cn),e(Cn,Uxr),e(Cn,zwe),e(zwe,Hxr),e(Cn,Jxr),e(Cn,Qwe),e(Qwe,Yxr),e(Cn,Zxr),e(Cn,Wwe),e(Wwe,Kxr),e(Cn,e$r),e(Mo,o$r),e(Mo,wn),e(wn,R3),e(R3,Uwe),e(Uwe,r$r),e(R3,t$r),e(R3,Xee),e(Xee,a$r),e(R3,n$r),e(wn,s$r),e(wn,P3),e(P3,Hwe),e(Hwe,l$r),e(P3,i$r),e(P3,zee),e(zee,d$r),e(P3,c$r),e(wn,m$r),e(wn,B3),e(B3,Jwe),e(Jwe,f$r),e(B3,g$r),e(B3,Qee),e(Qee,h$r),e(B3,u$r),e(wn,p$r),e(wn,I3),e(I3,Ywe),e(Ywe,_$r),e(I3,b$r),e(I3,Wee),e(Wee,v$r),e(I3,F$r),e(Mo,T$r),e(Mo,N3),e(N3,M$r),e(N3,Zwe),e(Zwe,E$r),e(N3,C$r),e(N3,Kwe),e(Kwe,w$r),e(Mo,A$r),M(q3,Mo,null),b(m,eto,_),b(m,Gc,_),e(Gc,j3),e(j3,eAe),M(uS,eAe,null),e(Gc,L$r),e(Gc,oAe),e(oAe,y$r),b(m,oto,_),b(m,ar,_),M(pS,ar,null),e(ar,x$r),e(ar,Oc),e(Oc,$$r),e(Oc,Uee),e(Uee,k$r),e(Oc,S$r),e(Oc,Hee),e(Hee,R$r),e(Oc,P$r),e(ar,B$r),e(ar,_S),e(_S,I$r),e(_S,rAe),e(rAe,N$r),e(_S,q$r),e(ar,j$r),e(ar,Vt),M(bS,Vt,null),e(Vt,D$r),e(Vt,tAe),e(tAe,G$r),e(Vt,O$r),e(Vt,Vc),e(Vc,V$r),e(Vc,aAe),e(aAe,X$r),e(Vc,z$r),e(Vc,Jee),e(Jee,Q$r),e(Vc,W$r),e(Vt,U$r),M(D3,Vt,null),e(ar,H$r),e(ar,Eo),M(vS,Eo,null),e(Eo,J$r),e(Eo,nAe),e(nAe,Y$r),e(Eo,Z$r),e(Eo,An),e(An,K$r),e(An,sAe),e(sAe,ekr),e(An,okr),e(An,lAe),e(lAe,rkr),e(An,tkr),e(An,iAe),e(iAe,akr),e(An,nkr),e(Eo,skr),e(Eo,dAe),e(dAe,G3),e(G3,cAe),e(cAe,lkr),e(G3,ikr),e(G3,Yee),e(Yee,dkr),e(G3,ckr),e(Eo,mkr),e(Eo,O3),e(O3,fkr),e(O3,mAe),e(mAe,gkr),e(O3,hkr),e(O3,fAe),e(fAe,ukr),e(Eo,pkr),M(V3,Eo,null),b(m,rto,_),b(m,Xc,_),e(Xc,X3),e(X3,gAe),M(FS,gAe,null),e(Xc,_kr),e(Xc,hAe),e(hAe,bkr),b(m,tto,_),b(m,nr,_),M(TS,nr,null),e(nr,vkr),e(nr,zc),e(zc,Fkr),e(zc,Zee),e(Zee,Tkr),e(zc,Mkr),e(zc,Kee),e(Kee,Ekr),e(zc,Ckr),e(nr,wkr),e(nr,MS),e(MS,Akr),e(MS,uAe),e(uAe,Lkr),e(MS,ykr),e(nr,xkr),e(nr,Xt),M(ES,Xt,null),e(Xt,$kr),e(Xt,pAe),e(pAe,kkr),e(Xt,Skr),e(Xt,Qc),e(Qc,Rkr),e(Qc,_Ae),e(_Ae,Pkr),e(Qc,Bkr),e(Qc,eoe),e(eoe,Ikr),e(Qc,Nkr),e(Xt,qkr),M(z3,Xt,null),e(nr,jkr),e(nr,Co),M(CS,Co,null),e(Co,Dkr),e(Co,bAe),e(bAe,Gkr),e(Co,Okr),e(Co,Ln),e(Ln,Vkr),e(Ln,vAe),e(vAe,Xkr),e(Ln,zkr),e(Ln,FAe),e(FAe,Qkr),e(Ln,Wkr),e(Ln,TAe),e(TAe,Ukr),e(Ln,Hkr),e(Co,Jkr),e(Co,ut),e(ut,Q3),e(Q3,MAe),e(MAe,Ykr),e(Q3,Zkr),e(Q3,ooe),e(ooe,Kkr),e(Q3,eSr),e(ut,oSr),e(ut,W3),e(W3,EAe),e(EAe,rSr),e(W3,tSr),e(W3,roe),e(roe,aSr),e(W3,nSr),e(ut,sSr),e(ut,U3),e(U3,CAe),e(CAe,lSr),e(U3,iSr),e(U3,toe),e(toe,dSr),e(U3,cSr),e(ut,mSr),e(ut,H3),e(H3,wAe),e(wAe,fSr),e(H3,gSr),e(H3,aoe),e(aoe,hSr),e(H3,uSr),e(ut,pSr),e(ut,J3),e(J3,AAe),e(AAe,_Sr),e(J3,bSr),e(J3,noe),e(noe,vSr),e(J3,FSr),e(Co,TSr),e(Co,Y3),e(Y3,MSr),e(Y3,LAe),e(LAe,ESr),e(Y3,CSr),e(Y3,yAe),e(yAe,wSr),e(Co,ASr),M(Z3,Co,null),b(m,ato,_),b(m,Wc,_),e(Wc,K3),e(K3,xAe),M(wS,xAe,null),e(Wc,LSr),e(Wc,$Ae),e($Ae,ySr),b(m,nto,_),b(m,sr,_),M(AS,sr,null),e(sr,xSr),e(sr,Uc),e(Uc,$Sr),e(Uc,soe),e(soe,kSr),e(Uc,SSr),e(Uc,loe),e(loe,RSr),e(Uc,PSr),e(sr,BSr),e(sr,LS),e(LS,ISr),e(LS,kAe),e(kAe,NSr),e(LS,qSr),e(sr,jSr),e(sr,zt),M(yS,zt,null),e(zt,DSr),e(zt,SAe),e(SAe,GSr),e(zt,OSr),e(zt,Hc),e(Hc,VSr),e(Hc,RAe),e(RAe,XSr),e(Hc,zSr),e(Hc,ioe),e(ioe,QSr),e(Hc,WSr),e(zt,USr),M(e5,zt,null),e(sr,HSr),e(sr,wo),M(xS,wo,null),e(wo,JSr),e(wo,PAe),e(PAe,YSr),e(wo,ZSr),e(wo,yn),e(yn,KSr),e(yn,BAe),e(BAe,eRr),e(yn,oRr),e(yn,IAe),e(IAe,rRr),e(yn,tRr),e(yn,NAe),e(NAe,aRr),e(yn,nRr),e(wo,sRr),e(wo,qAe),e(qAe,o5),e(o5,jAe),e(jAe,lRr),e(o5,iRr),e(o5,doe),e(doe,dRr),e(o5,cRr),e(wo,mRr),e(wo,r5),e(r5,fRr),e(r5,DAe),e(DAe,gRr),e(r5,hRr),e(r5,GAe),e(GAe,uRr),e(wo,pRr),M(t5,wo,null),b(m,sto,_),b(m,Jc,_),e(Jc,a5),e(a5,OAe),M($S,OAe,null),e(Jc,_Rr),e(Jc,VAe),e(VAe,bRr),b(m,lto,_),b(m,lr,_),M(kS,lr,null),e(lr,vRr),e(lr,Yc),e(Yc,FRr),e(Yc,coe),e(coe,TRr),e(Yc,MRr),e(Yc,moe),e(moe,ERr),e(Yc,CRr),e(lr,wRr),e(lr,SS),e(SS,ARr),e(SS,XAe),e(XAe,LRr),e(SS,yRr),e(lr,xRr),e(lr,Qt),M(RS,Qt,null),e(Qt,$Rr),e(Qt,zAe),e(zAe,kRr),e(Qt,SRr),e(Qt,Zc),e(Zc,RRr),e(Zc,QAe),e(QAe,PRr),e(Zc,BRr),e(Zc,foe),e(foe,IRr),e(Zc,NRr),e(Qt,qRr),M(n5,Qt,null),e(lr,jRr),e(lr,Ao),M(PS,Ao,null),e(Ao,DRr),e(Ao,WAe),e(WAe,GRr),e(Ao,ORr),e(Ao,xn),e(xn,VRr),e(xn,UAe),e(UAe,XRr),e(xn,zRr),e(xn,HAe),e(HAe,QRr),e(xn,WRr),e(xn,JAe),e(JAe,URr),e(xn,HRr),e(Ao,JRr),e(Ao,YAe),e(YAe,s5),e(s5,ZAe),e(ZAe,YRr),e(s5,ZRr),e(s5,goe),e(goe,KRr),e(s5,ePr),e(Ao,oPr),e(Ao,l5),e(l5,rPr),e(l5,KAe),e(KAe,tPr),e(l5,aPr),e(l5,e6e),e(e6e,nPr),e(Ao,sPr),M(i5,Ao,null),b(m,ito,_),b(m,Kc,_),e(Kc,d5),e(d5,o6e),M(BS,o6e,null),e(Kc,lPr),e(Kc,r6e),e(r6e,iPr),b(m,dto,_),b(m,ir,_),M(IS,ir,null),e(ir,dPr),e(ir,em),e(em,cPr),e(em,hoe),e(hoe,mPr),e(em,fPr),e(em,uoe),e(uoe,gPr),e(em,hPr),e(ir,uPr),e(ir,NS),e(NS,pPr),e(NS,t6e),e(t6e,_Pr),e(NS,bPr),e(ir,vPr),e(ir,Wt),M(qS,Wt,null),e(Wt,FPr),e(Wt,a6e),e(a6e,TPr),e(Wt,MPr),e(Wt,om),e(om,EPr),e(om,n6e),e(n6e,CPr),e(om,wPr),e(om,poe),e(poe,APr),e(om,LPr),e(Wt,yPr),M(c5,Wt,null),e(ir,xPr),e(ir,qr),M(jS,qr,null),e(qr,$Pr),e(qr,s6e),e(s6e,kPr),e(qr,SPr),e(qr,$n),e($n,RPr),e($n,l6e),e(l6e,PPr),e($n,BPr),e($n,i6e),e(i6e,IPr),e($n,NPr),e($n,d6e),e(d6e,qPr),e($n,jPr),e(qr,DPr),e(qr,P),e(P,m5),e(m5,c6e),e(c6e,GPr),e(m5,OPr),e(m5,_oe),e(_oe,VPr),e(m5,XPr),e(P,zPr),e(P,f5),e(f5,m6e),e(m6e,QPr),e(f5,WPr),e(f5,boe),e(boe,UPr),e(f5,HPr),e(P,JPr),e(P,g5),e(g5,f6e),e(f6e,YPr),e(g5,ZPr),e(g5,voe),e(voe,KPr),e(g5,eBr),e(P,oBr),e(P,h5),e(h5,g6e),e(g6e,rBr),e(h5,tBr),e(h5,Foe),e(Foe,aBr),e(h5,nBr),e(P,sBr),e(P,u5),e(u5,h6e),e(h6e,lBr),e(u5,iBr),e(u5,Toe),e(Toe,dBr),e(u5,cBr),e(P,mBr),e(P,p5),e(p5,u6e),e(u6e,fBr),e(p5,gBr),e(p5,Moe),e(Moe,hBr),e(p5,uBr),e(P,pBr),e(P,_5),e(_5,p6e),e(p6e,_Br),e(_5,bBr),e(_5,Eoe),e(Eoe,vBr),e(_5,FBr),e(P,TBr),e(P,b5),e(b5,_6e),e(_6e,MBr),e(b5,EBr),e(b5,Coe),e(Coe,CBr),e(b5,wBr),e(P,ABr),e(P,v5),e(v5,b6e),e(b6e,LBr),e(v5,yBr),e(v5,woe),e(woe,xBr),e(v5,$Br),e(P,kBr),e(P,F5),e(F5,v6e),e(v6e,SBr),e(F5,RBr),e(F5,Aoe),e(Aoe,PBr),e(F5,BBr),e(P,IBr),e(P,T5),e(T5,F6e),e(F6e,NBr),e(T5,qBr),e(T5,Loe),e(Loe,jBr),e(T5,DBr),e(P,GBr),e(P,M5),e(M5,T6e),e(T6e,OBr),e(M5,VBr),e(M5,yoe),e(yoe,XBr),e(M5,zBr),e(P,QBr),e(P,E5),e(E5,M6e),e(M6e,WBr),e(E5,UBr),e(E5,xoe),e(xoe,HBr),e(E5,JBr),e(P,YBr),e(P,C5),e(C5,E6e),e(E6e,ZBr),e(C5,KBr),e(C5,$oe),e($oe,eIr),e(C5,oIr),e(P,rIr),e(P,w5),e(w5,C6e),e(C6e,tIr),e(w5,aIr),e(w5,koe),e(koe,nIr),e(w5,sIr),e(P,lIr),e(P,A5),e(A5,w6e),e(w6e,iIr),e(A5,dIr),e(A5,Soe),e(Soe,cIr),e(A5,mIr),e(P,fIr),e(P,L5),e(L5,A6e),e(A6e,gIr),e(L5,hIr),e(L5,Roe),e(Roe,uIr),e(L5,pIr),e(P,_Ir),e(P,y5),e(y5,L6e),e(L6e,bIr),e(y5,vIr),e(y5,Poe),e(Poe,FIr),e(y5,TIr),e(P,MIr),e(P,x5),e(x5,y6e),e(y6e,EIr),e(x5,CIr),e(x5,Boe),e(Boe,wIr),e(x5,AIr),e(P,LIr),e(P,Al),e(Al,x6e),e(x6e,yIr),e(Al,xIr),e(Al,Ioe),e(Ioe,$Ir),e(Al,kIr),e(Al,Noe),e(Noe,SIr),e(Al,RIr),e(P,PIr),e(P,$5),e($5,$6e),e($6e,BIr),e($5,IIr),e($5,qoe),e(qoe,NIr),e($5,qIr),e(P,jIr),e(P,k5),e(k5,k6e),e(k6e,DIr),e(k5,GIr),e(k5,joe),e(joe,OIr),e(k5,VIr),e(P,XIr),e(P,S5),e(S5,S6e),e(S6e,zIr),e(S5,QIr),e(S5,Doe),e(Doe,WIr),e(S5,UIr),e(P,HIr),e(P,R5),e(R5,R6e),e(R6e,JIr),e(R5,YIr),e(R5,Goe),e(Goe,ZIr),e(R5,KIr),e(P,eNr),e(P,P5),e(P5,P6e),e(P6e,oNr),e(P5,rNr),e(P5,Ooe),e(Ooe,tNr),e(P5,aNr),e(P,nNr),e(P,B5),e(B5,B6e),e(B6e,sNr),e(B5,lNr),e(B5,Voe),e(Voe,iNr),e(B5,dNr),e(P,cNr),e(P,I5),e(I5,I6e),e(I6e,mNr),e(I5,fNr),e(I5,Xoe),e(Xoe,gNr),e(I5,hNr),e(P,uNr),e(P,N5),e(N5,N6e),e(N6e,pNr),e(N5,_Nr),e(N5,zoe),e(zoe,bNr),e(N5,vNr),e(P,FNr),e(P,q5),e(q5,q6e),e(q6e,TNr),e(q5,MNr),e(q5,Qoe),e(Qoe,ENr),e(q5,CNr),e(P,wNr),e(P,j5),e(j5,j6e),e(j6e,ANr),e(j5,LNr),e(j5,Woe),e(Woe,yNr),e(j5,xNr),e(P,$Nr),e(P,D5),e(D5,D6e),e(D6e,kNr),e(D5,SNr),e(D5,Uoe),e(Uoe,RNr),e(D5,PNr),e(P,BNr),e(P,G5),e(G5,G6e),e(G6e,INr),e(G5,NNr),e(G5,Hoe),e(Hoe,qNr),e(G5,jNr),e(P,DNr),e(P,O5),e(O5,O6e),e(O6e,GNr),e(O5,ONr),e(O5,Joe),e(Joe,VNr),e(O5,XNr),e(P,zNr),e(P,V5),e(V5,V6e),e(V6e,QNr),e(V5,WNr),e(V5,Yoe),e(Yoe,UNr),e(V5,HNr),e(P,JNr),e(P,X5),e(X5,X6e),e(X6e,YNr),e(X5,ZNr),e(X5,Zoe),e(Zoe,KNr),e(X5,eqr),e(P,oqr),e(P,z5),e(z5,z6e),e(z6e,rqr),e(z5,tqr),e(z5,Koe),e(Koe,aqr),e(z5,nqr),e(P,sqr),e(P,Q5),e(Q5,Q6e),e(Q6e,lqr),e(Q5,iqr),e(Q5,ere),e(ere,dqr),e(Q5,cqr),e(P,mqr),e(P,W5),e(W5,W6e),e(W6e,fqr),e(W5,gqr),e(W5,ore),e(ore,hqr),e(W5,uqr),e(P,pqr),e(P,U5),e(U5,U6e),e(U6e,_qr),e(U5,bqr),e(U5,rre),e(rre,vqr),e(U5,Fqr),e(P,Tqr),e(P,H5),e(H5,H6e),e(H6e,Mqr),e(H5,Eqr),e(H5,tre),e(tre,Cqr),e(H5,wqr),e(P,Aqr),e(P,J5),e(J5,J6e),e(J6e,Lqr),e(J5,yqr),e(J5,are),e(are,xqr),e(J5,$qr),e(P,kqr),e(P,Y5),e(Y5,Y6e),e(Y6e,Sqr),e(Y5,Rqr),e(Y5,nre),e(nre,Pqr),e(Y5,Bqr),e(P,Iqr),e(P,Z5),e(Z5,Z6e),e(Z6e,Nqr),e(Z5,qqr),e(Z5,sre),e(sre,jqr),e(Z5,Dqr),e(P,Gqr),e(P,K5),e(K5,K6e),e(K6e,Oqr),e(K5,Vqr),e(K5,lre),e(lre,Xqr),e(K5,zqr),e(P,Qqr),e(P,e0),e(e0,e7e),e(e7e,Wqr),e(e0,Uqr),e(e0,ire),e(ire,Hqr),e(e0,Jqr),e(P,Yqr),e(P,o0),e(o0,o7e),e(o7e,Zqr),e(o0,Kqr),e(o0,dre),e(dre,ejr),e(o0,ojr),e(P,rjr),e(P,r0),e(r0,r7e),e(r7e,tjr),e(r0,ajr),e(r0,cre),e(cre,njr),e(r0,sjr),e(P,ljr),e(P,t0),e(t0,t7e),e(t7e,ijr),e(t0,djr),e(t0,mre),e(mre,cjr),e(t0,mjr),e(P,fjr),e(P,a0),e(a0,a7e),e(a7e,gjr),e(a0,hjr),e(a0,fre),e(fre,ujr),e(a0,pjr),e(P,_jr),e(P,n0),e(n0,n7e),e(n7e,bjr),e(n0,vjr),e(n0,gre),e(gre,Fjr),e(n0,Tjr),e(P,Mjr),e(P,s0),e(s0,s7e),e(s7e,Ejr),e(s0,Cjr),e(s0,hre),e(hre,wjr),e(s0,Ajr),e(P,Ljr),e(P,l0),e(l0,l7e),e(l7e,yjr),e(l0,xjr),e(l0,ure),e(ure,$jr),e(l0,kjr),e(P,Sjr),e(P,i0),e(i0,i7e),e(i7e,Rjr),e(i0,Pjr),e(i0,pre),e(pre,Bjr),e(i0,Ijr),e(P,Njr),e(P,d0),e(d0,d7e),e(d7e,qjr),e(d0,jjr),e(d0,_re),e(_re,Djr),e(d0,Gjr),e(P,Ojr),e(P,c0),e(c0,c7e),e(c7e,Vjr),e(c0,Xjr),e(c0,bre),e(bre,zjr),e(c0,Qjr),e(P,Wjr),e(P,m0),e(m0,m7e),e(m7e,Ujr),e(m0,Hjr),e(m0,vre),e(vre,Jjr),e(m0,Yjr),e(P,Zjr),e(P,f0),e(f0,f7e),e(f7e,Kjr),e(f0,eDr),e(f0,Fre),e(Fre,oDr),e(f0,rDr),e(qr,tDr),M(g0,qr,null),b(m,cto,_),b(m,rm,_),e(rm,h0),e(h0,g7e),M(DS,g7e,null),e(rm,aDr),e(rm,h7e),e(h7e,nDr),b(m,mto,_),b(m,dr,_),M(GS,dr,null),e(dr,sDr),e(dr,tm),e(tm,lDr),e(tm,Tre),e(Tre,iDr),e(tm,dDr),e(tm,Mre),e(Mre,cDr),e(tm,mDr),e(dr,fDr),e(dr,OS),e(OS,gDr),e(OS,u7e),e(u7e,hDr),e(OS,uDr),e(dr,pDr),e(dr,Ut),M(VS,Ut,null),e(Ut,_Dr),e(Ut,p7e),e(p7e,bDr),e(Ut,vDr),e(Ut,am),e(am,FDr),e(am,_7e),e(_7e,TDr),e(am,MDr),e(am,Ere),e(Ere,EDr),e(am,CDr),e(Ut,wDr),M(u0,Ut,null),e(dr,ADr),e(dr,jr),M(XS,jr,null),e(jr,LDr),e(jr,b7e),e(b7e,yDr),e(jr,xDr),e(jr,kn),e(kn,$Dr),e(kn,v7e),e(v7e,kDr),e(kn,SDr),e(kn,F7e),e(F7e,RDr),e(kn,PDr),e(kn,T7e),e(T7e,BDr),e(kn,IDr),e(jr,NDr),e(jr,le),e(le,p0),e(p0,M7e),e(M7e,qDr),e(p0,jDr),e(p0,Cre),e(Cre,DDr),e(p0,GDr),e(le,ODr),e(le,_0),e(_0,E7e),e(E7e,VDr),e(_0,XDr),e(_0,wre),e(wre,zDr),e(_0,QDr),e(le,WDr),e(le,b0),e(b0,C7e),e(C7e,UDr),e(b0,HDr),e(b0,Are),e(Are,JDr),e(b0,YDr),e(le,ZDr),e(le,v0),e(v0,w7e),e(w7e,KDr),e(v0,eGr),e(v0,Lre),e(Lre,oGr),e(v0,rGr),e(le,tGr),e(le,F0),e(F0,A7e),e(A7e,aGr),e(F0,nGr),e(F0,yre),e(yre,sGr),e(F0,lGr),e(le,iGr),e(le,T0),e(T0,L7e),e(L7e,dGr),e(T0,cGr),e(T0,xre),e(xre,mGr),e(T0,fGr),e(le,gGr),e(le,M0),e(M0,y7e),e(y7e,hGr),e(M0,uGr),e(M0,$re),e($re,pGr),e(M0,_Gr),e(le,bGr),e(le,E0),e(E0,x7e),e(x7e,vGr),e(E0,FGr),e(E0,kre),e(kre,TGr),e(E0,MGr),e(le,EGr),e(le,C0),e(C0,$7e),e($7e,CGr),e(C0,wGr),e(C0,Sre),e(Sre,AGr),e(C0,LGr),e(le,yGr),e(le,w0),e(w0,k7e),e(k7e,xGr),e(w0,$Gr),e(w0,Rre),e(Rre,kGr),e(w0,SGr),e(le,RGr),e(le,A0),e(A0,S7e),e(S7e,PGr),e(A0,BGr),e(A0,Pre),e(Pre,IGr),e(A0,NGr),e(le,qGr),e(le,L0),e(L0,R7e),e(R7e,jGr),e(L0,DGr),e(L0,Bre),e(Bre,GGr),e(L0,OGr),e(le,VGr),e(le,y0),e(y0,P7e),e(P7e,XGr),e(y0,zGr),e(y0,Ire),e(Ire,QGr),e(y0,WGr),e(le,UGr),e(le,x0),e(x0,B7e),e(B7e,HGr),e(x0,JGr),e(x0,Nre),e(Nre,YGr),e(x0,ZGr),e(le,KGr),e(le,$0),e($0,I7e),e(I7e,eOr),e($0,oOr),e($0,qre),e(qre,rOr),e($0,tOr),e(le,aOr),e(le,k0),e(k0,N7e),e(N7e,nOr),e(k0,sOr),e(k0,jre),e(jre,lOr),e(k0,iOr),e(le,dOr),e(le,S0),e(S0,q7e),e(q7e,cOr),e(S0,mOr),e(S0,Dre),e(Dre,fOr),e(S0,gOr),e(le,hOr),e(le,R0),e(R0,j7e),e(j7e,uOr),e(R0,pOr),e(R0,Gre),e(Gre,_Or),e(R0,bOr),e(le,vOr),e(le,P0),e(P0,D7e),e(D7e,FOr),e(P0,TOr),e(P0,Ore),e(Ore,MOr),e(P0,EOr),e(le,COr),e(le,B0),e(B0,G7e),e(G7e,wOr),e(B0,AOr),e(B0,Vre),e(Vre,LOr),e(B0,yOr),e(le,xOr),e(le,I0),e(I0,O7e),e(O7e,$Or),e(I0,kOr),e(I0,Xre),e(Xre,SOr),e(I0,ROr),e(le,POr),e(le,N0),e(N0,V7e),e(V7e,BOr),e(N0,IOr),e(N0,zre),e(zre,NOr),e(N0,qOr),e(le,jOr),e(le,q0),e(q0,X7e),e(X7e,DOr),e(q0,GOr),e(q0,Qre),e(Qre,OOr),e(q0,VOr),e(jr,XOr),M(j0,jr,null),b(m,fto,_),b(m,nm,_),e(nm,D0),e(D0,z7e),M(zS,z7e,null),e(nm,zOr),e(nm,Q7e),e(Q7e,QOr),b(m,gto,_),b(m,cr,_),M(QS,cr,null),e(cr,WOr),e(cr,sm),e(sm,UOr),e(sm,Wre),e(Wre,HOr),e(sm,JOr),e(sm,Ure),e(Ure,YOr),e(sm,ZOr),e(cr,KOr),e(cr,WS),e(WS,eVr),e(WS,W7e),e(W7e,oVr),e(WS,rVr),e(cr,tVr),e(cr,Ht),M(US,Ht,null),e(Ht,aVr),e(Ht,U7e),e(U7e,nVr),e(Ht,sVr),e(Ht,lm),e(lm,lVr),e(lm,H7e),e(H7e,iVr),e(lm,dVr),e(lm,Hre),e(Hre,cVr),e(lm,mVr),e(Ht,fVr),M(G0,Ht,null),e(cr,gVr),e(cr,Dr),M(HS,Dr,null),e(Dr,hVr),e(Dr,J7e),e(J7e,uVr),e(Dr,pVr),e(Dr,Sn),e(Sn,_Vr),e(Sn,Y7e),e(Y7e,bVr),e(Sn,vVr),e(Sn,Z7e),e(Z7e,FVr),e(Sn,TVr),e(Sn,K7e),e(K7e,MVr),e(Sn,EVr),e(Dr,CVr),e(Dr,Me),e(Me,O0),e(O0,eLe),e(eLe,wVr),e(O0,AVr),e(O0,Jre),e(Jre,LVr),e(O0,yVr),e(Me,xVr),e(Me,V0),e(V0,oLe),e(oLe,$Vr),e(V0,kVr),e(V0,Yre),e(Yre,SVr),e(V0,RVr),e(Me,PVr),e(Me,X0),e(X0,rLe),e(rLe,BVr),e(X0,IVr),e(X0,Zre),e(Zre,NVr),e(X0,qVr),e(Me,jVr),e(Me,z0),e(z0,tLe),e(tLe,DVr),e(z0,GVr),e(z0,Kre),e(Kre,OVr),e(z0,VVr),e(Me,XVr),e(Me,Q0),e(Q0,aLe),e(aLe,zVr),e(Q0,QVr),e(Q0,ete),e(ete,WVr),e(Q0,UVr),e(Me,HVr),e(Me,W0),e(W0,nLe),e(nLe,JVr),e(W0,YVr),e(W0,ote),e(ote,ZVr),e(W0,KVr),e(Me,eXr),e(Me,U0),e(U0,sLe),e(sLe,oXr),e(U0,rXr),e(U0,rte),e(rte,tXr),e(U0,aXr),e(Me,nXr),e(Me,H0),e(H0,lLe),e(lLe,sXr),e(H0,lXr),e(H0,tte),e(tte,iXr),e(H0,dXr),e(Me,cXr),e(Me,J0),e(J0,iLe),e(iLe,mXr),e(J0,fXr),e(J0,ate),e(ate,gXr),e(J0,hXr),e(Me,uXr),e(Me,Y0),e(Y0,dLe),e(dLe,pXr),e(Y0,_Xr),e(Y0,nte),e(nte,bXr),e(Y0,vXr),e(Me,FXr),e(Me,Z0),e(Z0,cLe),e(cLe,TXr),e(Z0,MXr),e(Z0,ste),e(ste,EXr),e(Z0,CXr),e(Me,wXr),e(Me,K0),e(K0,mLe),e(mLe,AXr),e(K0,LXr),e(K0,lte),e(lte,yXr),e(K0,xXr),e(Me,$Xr),e(Me,ew),e(ew,fLe),e(fLe,kXr),e(ew,SXr),e(ew,ite),e(ite,RXr),e(ew,PXr),e(Me,BXr),e(Me,ow),e(ow,gLe),e(gLe,IXr),e(ow,NXr),e(ow,dte),e(dte,qXr),e(ow,jXr),e(Dr,DXr),M(rw,Dr,null),b(m,hto,_),b(m,im,_),e(im,tw),e(tw,hLe),M(JS,hLe,null),e(im,GXr),e(im,uLe),e(uLe,OXr),b(m,uto,_),b(m,mr,_),M(YS,mr,null),e(mr,VXr),e(mr,dm),e(dm,XXr),e(dm,cte),e(cte,zXr),e(dm,QXr),e(dm,mte),e(mte,WXr),e(dm,UXr),e(mr,HXr),e(mr,ZS),e(ZS,JXr),e(ZS,pLe),e(pLe,YXr),e(ZS,ZXr),e(mr,KXr),e(mr,Jt),M(KS,Jt,null),e(Jt,ezr),e(Jt,_Le),e(_Le,ozr),e(Jt,rzr),e(Jt,cm),e(cm,tzr),e(cm,bLe),e(bLe,azr),e(cm,nzr),e(cm,fte),e(fte,szr),e(cm,lzr),e(Jt,izr),M(aw,Jt,null),e(mr,dzr),e(mr,Gr),M(eR,Gr,null),e(Gr,czr),e(Gr,vLe),e(vLe,mzr),e(Gr,fzr),e(Gr,Rn),e(Rn,gzr),e(Rn,FLe),e(FLe,hzr),e(Rn,uzr),e(Rn,TLe),e(TLe,pzr),e(Rn,_zr),e(Rn,MLe),e(MLe,bzr),e(Rn,vzr),e(Gr,Fzr),e(Gr,ye),e(ye,nw),e(nw,ELe),e(ELe,Tzr),e(nw,Mzr),e(nw,gte),e(gte,Ezr),e(nw,Czr),e(ye,wzr),e(ye,sw),e(sw,CLe),e(CLe,Azr),e(sw,Lzr),e(sw,hte),e(hte,yzr),e(sw,xzr),e(ye,$zr),e(ye,lw),e(lw,wLe),e(wLe,kzr),e(lw,Szr),e(lw,ute),e(ute,Rzr),e(lw,Pzr),e(ye,Bzr),e(ye,Ll),e(Ll,ALe),e(ALe,Izr),e(Ll,Nzr),e(Ll,pte),e(pte,qzr),e(Ll,jzr),e(Ll,_te),e(_te,Dzr),e(Ll,Gzr),e(ye,Ozr),e(ye,iw),e(iw,LLe),e(LLe,Vzr),e(iw,Xzr),e(iw,bte),e(bte,zzr),e(iw,Qzr),e(ye,Wzr),e(ye,dw),e(dw,yLe),e(yLe,Uzr),e(dw,Hzr),e(dw,vte),e(vte,Jzr),e(dw,Yzr),e(ye,Zzr),e(ye,cw),e(cw,xLe),e(xLe,Kzr),e(cw,eQr),e(cw,Fte),e(Fte,oQr),e(cw,rQr),e(ye,tQr),e(ye,mw),e(mw,$Le),e($Le,aQr),e(mw,nQr),e(mw,Tte),e(Tte,sQr),e(mw,lQr),e(ye,iQr),e(ye,fw),e(fw,kLe),e(kLe,dQr),e(fw,cQr),e(fw,Mte),e(Mte,mQr),e(fw,fQr),e(ye,gQr),e(ye,gw),e(gw,SLe),e(SLe,hQr),e(gw,uQr),e(gw,Ete),e(Ete,pQr),e(gw,_Qr),e(Gr,bQr),M(hw,Gr,null),b(m,pto,_),b(m,mm,_),e(mm,uw),e(uw,RLe),M(oR,RLe,null),e(mm,vQr),e(mm,PLe),e(PLe,FQr),b(m,_to,_),b(m,fr,_),M(rR,fr,null),e(fr,TQr),e(fr,fm),e(fm,MQr),e(fm,Cte),e(Cte,EQr),e(fm,CQr),e(fm,wte),e(wte,wQr),e(fm,AQr),e(fr,LQr),e(fr,tR),e(tR,yQr),e(tR,BLe),e(BLe,xQr),e(tR,$Qr),e(fr,kQr),e(fr,Yt),M(aR,Yt,null),e(Yt,SQr),e(Yt,ILe),e(ILe,RQr),e(Yt,PQr),e(Yt,gm),e(gm,BQr),e(gm,NLe),e(NLe,IQr),e(gm,NQr),e(gm,Ate),e(Ate,qQr),e(gm,jQr),e(Yt,DQr),M(pw,Yt,null),e(fr,GQr),e(fr,Or),M(nR,Or,null),e(Or,OQr),e(Or,qLe),e(qLe,VQr),e(Or,XQr),e(Or,Pn),e(Pn,zQr),e(Pn,jLe),e(jLe,QQr),e(Pn,WQr),e(Pn,DLe),e(DLe,UQr),e(Pn,HQr),e(Pn,GLe),e(GLe,JQr),e(Pn,YQr),e(Or,ZQr),e(Or,hm),e(hm,_w),e(_w,OLe),e(OLe,KQr),e(_w,eWr),e(_w,Lte),e(Lte,oWr),e(_w,rWr),e(hm,tWr),e(hm,bw),e(bw,VLe),e(VLe,aWr),e(bw,nWr),e(bw,yte),e(yte,sWr),e(bw,lWr),e(hm,iWr),e(hm,vw),e(vw,XLe),e(XLe,dWr),e(vw,cWr),e(vw,xte),e(xte,mWr),e(vw,fWr),e(Or,gWr),M(Fw,Or,null),b(m,bto,_),b(m,um,_),e(um,Tw),e(Tw,zLe),M(sR,zLe,null),e(um,hWr),e(um,QLe),e(QLe,uWr),b(m,vto,_),b(m,gr,_),M(lR,gr,null),e(gr,pWr),e(gr,pm),e(pm,_Wr),e(pm,$te),e($te,bWr),e(pm,vWr),e(pm,kte),e(kte,FWr),e(pm,TWr),e(gr,MWr),e(gr,iR),e(iR,EWr),e(iR,WLe),e(WLe,CWr),e(iR,wWr),e(gr,AWr),e(gr,Zt),M(dR,Zt,null),e(Zt,LWr),e(Zt,ULe),e(ULe,yWr),e(Zt,xWr),e(Zt,_m),e(_m,$Wr),e(_m,HLe),e(HLe,kWr),e(_m,SWr),e(_m,Ste),e(Ste,RWr),e(_m,PWr),e(Zt,BWr),M(Mw,Zt,null),e(gr,IWr),e(gr,Vr),M(cR,Vr,null),e(Vr,NWr),e(Vr,JLe),e(JLe,qWr),e(Vr,jWr),e(Vr,Bn),e(Bn,DWr),e(Bn,YLe),e(YLe,GWr),e(Bn,OWr),e(Bn,ZLe),e(ZLe,VWr),e(Bn,XWr),e(Bn,KLe),e(KLe,zWr),e(Bn,QWr),e(Vr,WWr),e(Vr,ge),e(ge,Ew),e(Ew,e8e),e(e8e,UWr),e(Ew,HWr),e(Ew,Rte),e(Rte,JWr),e(Ew,YWr),e(ge,ZWr),e(ge,Cw),e(Cw,o8e),e(o8e,KWr),e(Cw,eUr),e(Cw,Pte),e(Pte,oUr),e(Cw,rUr),e(ge,tUr),e(ge,ww),e(ww,r8e),e(r8e,aUr),e(ww,nUr),e(ww,Bte),e(Bte,sUr),e(ww,lUr),e(ge,iUr),e(ge,Aw),e(Aw,t8e),e(t8e,dUr),e(Aw,cUr),e(Aw,Ite),e(Ite,mUr),e(Aw,fUr),e(ge,gUr),e(ge,Lw),e(Lw,a8e),e(a8e,hUr),e(Lw,uUr),e(Lw,Nte),e(Nte,pUr),e(Lw,_Ur),e(ge,bUr),e(ge,yw),e(yw,n8e),e(n8e,vUr),e(yw,FUr),e(yw,qte),e(qte,TUr),e(yw,MUr),e(ge,EUr),e(ge,xw),e(xw,s8e),e(s8e,CUr),e(xw,wUr),e(xw,jte),e(jte,AUr),e(xw,LUr),e(ge,yUr),e(ge,$w),e($w,l8e),e(l8e,xUr),e($w,$Ur),e($w,Dte),e(Dte,kUr),e($w,SUr),e(ge,RUr),e(ge,kw),e(kw,i8e),e(i8e,PUr),e(kw,BUr),e(kw,Gte),e(Gte,IUr),e(kw,NUr),e(ge,qUr),e(ge,Sw),e(Sw,d8e),e(d8e,jUr),e(Sw,DUr),e(Sw,Ote),e(Ote,GUr),e(Sw,OUr),e(ge,VUr),e(ge,Rw),e(Rw,c8e),e(c8e,XUr),e(Rw,zUr),e(Rw,Vte),e(Vte,QUr),e(Rw,WUr),e(ge,UUr),e(ge,Pw),e(Pw,m8e),e(m8e,HUr),e(Pw,JUr),e(Pw,Xte),e(Xte,YUr),e(Pw,ZUr),e(ge,KUr),e(ge,Bw),e(Bw,f8e),e(f8e,eHr),e(Bw,oHr),e(Bw,zte),e(zte,rHr),e(Bw,tHr),e(ge,aHr),e(ge,Iw),e(Iw,g8e),e(g8e,nHr),e(Iw,sHr),e(Iw,Qte),e(Qte,lHr),e(Iw,iHr),e(ge,dHr),e(ge,Nw),e(Nw,h8e),e(h8e,cHr),e(Nw,mHr),e(Nw,Wte),e(Wte,fHr),e(Nw,gHr),e(ge,hHr),e(ge,qw),e(qw,u8e),e(u8e,uHr),e(qw,pHr),e(qw,Ute),e(Ute,_Hr),e(qw,bHr),e(ge,vHr),e(ge,jw),e(jw,p8e),e(p8e,FHr),e(jw,THr),e(jw,Hte),e(Hte,MHr),e(jw,EHr),e(ge,CHr),e(ge,Dw),e(Dw,_8e),e(_8e,wHr),e(Dw,AHr),e(Dw,Jte),e(Jte,LHr),e(Dw,yHr),e(ge,xHr),e(ge,Gw),e(Gw,b8e),e(b8e,$Hr),e(Gw,kHr),e(Gw,Yte),e(Yte,SHr),e(Gw,RHr),e(ge,PHr),e(ge,Ow),e(Ow,v8e),e(v8e,BHr),e(Ow,IHr),e(Ow,Zte),e(Zte,NHr),e(Ow,qHr),e(Vr,jHr),M(Vw,Vr,null),b(m,Fto,_),b(m,bm,_),e(bm,Xw),e(Xw,F8e),M(mR,F8e,null),e(bm,DHr),e(bm,T8e),e(T8e,GHr),b(m,Tto,_),b(m,hr,_),M(fR,hr,null),e(hr,OHr),e(hr,vm),e(vm,VHr),e(vm,Kte),e(Kte,XHr),e(vm,zHr),e(vm,eae),e(eae,QHr),e(vm,WHr),e(hr,UHr),e(hr,gR),e(gR,HHr),e(gR,M8e),e(M8e,JHr),e(gR,YHr),e(hr,ZHr),e(hr,Kt),M(hR,Kt,null),e(Kt,KHr),e(Kt,E8e),e(E8e,eJr),e(Kt,oJr),e(Kt,Fm),e(Fm,rJr),e(Fm,C8e),e(C8e,tJr),e(Fm,aJr),e(Fm,oae),e(oae,nJr),e(Fm,sJr),e(Kt,lJr),M(zw,Kt,null),e(hr,iJr),e(hr,Xr),M(uR,Xr,null),e(Xr,dJr),e(Xr,w8e),e(w8e,cJr),e(Xr,mJr),e(Xr,In),e(In,fJr),e(In,A8e),e(A8e,gJr),e(In,hJr),e(In,L8e),e(L8e,uJr),e(In,pJr),e(In,y8e),e(y8e,_Jr),e(In,bJr),e(Xr,vJr),e(Xr,xe),e(xe,Qw),e(Qw,x8e),e(x8e,FJr),e(Qw,TJr),e(Qw,rae),e(rae,MJr),e(Qw,EJr),e(xe,CJr),e(xe,Ww),e(Ww,$8e),e($8e,wJr),e(Ww,AJr),e(Ww,tae),e(tae,LJr),e(Ww,yJr),e(xe,xJr),e(xe,Uw),e(Uw,k8e),e(k8e,$Jr),e(Uw,kJr),e(Uw,aae),e(aae,SJr),e(Uw,RJr),e(xe,PJr),e(xe,Hw),e(Hw,S8e),e(S8e,BJr),e(Hw,IJr),e(Hw,nae),e(nae,NJr),e(Hw,qJr),e(xe,jJr),e(xe,Jw),e(Jw,R8e),e(R8e,DJr),e(Jw,GJr),e(Jw,sae),e(sae,OJr),e(Jw,VJr),e(xe,XJr),e(xe,Yw),e(Yw,P8e),e(P8e,zJr),e(Yw,QJr),e(Yw,lae),e(lae,WJr),e(Yw,UJr),e(xe,HJr),e(xe,Zw),e(Zw,B8e),e(B8e,JJr),e(Zw,YJr),e(Zw,iae),e(iae,ZJr),e(Zw,KJr),e(xe,eYr),e(xe,Kw),e(Kw,I8e),e(I8e,oYr),e(Kw,rYr),e(Kw,dae),e(dae,tYr),e(Kw,aYr),e(xe,nYr),e(xe,eA),e(eA,N8e),e(N8e,sYr),e(eA,lYr),e(eA,cae),e(cae,iYr),e(eA,dYr),e(xe,cYr),e(xe,oA),e(oA,q8e),e(q8e,mYr),e(oA,fYr),e(oA,mae),e(mae,gYr),e(oA,hYr),e(Xr,uYr),M(rA,Xr,null),b(m,Mto,_),b(m,Tm,_),e(Tm,tA),e(tA,j8e),M(pR,j8e,null),e(Tm,pYr),e(Tm,D8e),e(D8e,_Yr),b(m,Eto,_),b(m,ur,_),M(_R,ur,null),e(ur,bYr),e(ur,Mm),e(Mm,vYr),e(Mm,fae),e(fae,FYr),e(Mm,TYr),e(Mm,gae),e(gae,MYr),e(Mm,EYr),e(ur,CYr),e(ur,bR),e(bR,wYr),e(bR,G8e),e(G8e,AYr),e(bR,LYr),e(ur,yYr),e(ur,ea),M(vR,ea,null),e(ea,xYr),e(ea,O8e),e(O8e,$Yr),e(ea,kYr),e(ea,Em),e(Em,SYr),e(Em,V8e),e(V8e,RYr),e(Em,PYr),e(Em,hae),e(hae,BYr),e(Em,IYr),e(ea,NYr),M(aA,ea,null),e(ur,qYr),e(ur,zr),M(FR,zr,null),e(zr,jYr),e(zr,X8e),e(X8e,DYr),e(zr,GYr),e(zr,Nn),e(Nn,OYr),e(Nn,z8e),e(z8e,VYr),e(Nn,XYr),e(Nn,Q8e),e(Q8e,zYr),e(Nn,QYr),e(Nn,W8e),e(W8e,WYr),e(Nn,UYr),e(zr,HYr),e(zr,re),e(re,nA),e(nA,U8e),e(U8e,JYr),e(nA,YYr),e(nA,uae),e(uae,ZYr),e(nA,KYr),e(re,eZr),e(re,sA),e(sA,H8e),e(H8e,oZr),e(sA,rZr),e(sA,pae),e(pae,tZr),e(sA,aZr),e(re,nZr),e(re,lA),e(lA,J8e),e(J8e,sZr),e(lA,lZr),e(lA,_ae),e(_ae,iZr),e(lA,dZr),e(re,cZr),e(re,iA),e(iA,Y8e),e(Y8e,mZr),e(iA,fZr),e(iA,bae),e(bae,gZr),e(iA,hZr),e(re,uZr),e(re,dA),e(dA,Z8e),e(Z8e,pZr),e(dA,_Zr),e(dA,vae),e(vae,bZr),e(dA,vZr),e(re,FZr),e(re,cA),e(cA,K8e),e(K8e,TZr),e(cA,MZr),e(cA,Fae),e(Fae,EZr),e(cA,CZr),e(re,wZr),e(re,mA),e(mA,eye),e(eye,AZr),e(mA,LZr),e(mA,Tae),e(Tae,yZr),e(mA,xZr),e(re,$Zr),e(re,fA),e(fA,oye),e(oye,kZr),e(fA,SZr),e(fA,Mae),e(Mae,RZr),e(fA,PZr),e(re,BZr),e(re,gA),e(gA,rye),e(rye,IZr),e(gA,NZr),e(gA,Eae),e(Eae,qZr),e(gA,jZr),e(re,DZr),e(re,hA),e(hA,tye),e(tye,GZr),e(hA,OZr),e(hA,Cae),e(Cae,VZr),e(hA,XZr),e(re,zZr),e(re,uA),e(uA,aye),e(aye,QZr),e(uA,WZr),e(uA,wae),e(wae,UZr),e(uA,HZr),e(re,JZr),e(re,pA),e(pA,nye),e(nye,YZr),e(pA,ZZr),e(pA,Aae),e(Aae,KZr),e(pA,eKr),e(re,oKr),e(re,_A),e(_A,sye),e(sye,rKr),e(_A,tKr),e(_A,Lae),e(Lae,aKr),e(_A,nKr),e(re,sKr),e(re,bA),e(bA,lye),e(lye,lKr),e(bA,iKr),e(bA,yae),e(yae,dKr),e(bA,cKr),e(re,mKr),e(re,vA),e(vA,iye),e(iye,fKr),e(vA,gKr),e(vA,xae),e(xae,hKr),e(vA,uKr),e(re,pKr),e(re,FA),e(FA,dye),e(dye,_Kr),e(FA,bKr),e(FA,$ae),e($ae,vKr),e(FA,FKr),e(re,TKr),e(re,TA),e(TA,cye),e(cye,MKr),e(TA,EKr),e(TA,kae),e(kae,CKr),e(TA,wKr),e(re,AKr),e(re,MA),e(MA,mye),e(mye,LKr),e(MA,yKr),e(MA,Sae),e(Sae,xKr),e(MA,$Kr),e(re,kKr),e(re,EA),e(EA,fye),e(fye,SKr),e(EA,RKr),e(EA,Rae),e(Rae,PKr),e(EA,BKr),e(re,IKr),e(re,CA),e(CA,gye),e(gye,NKr),e(CA,qKr),e(CA,Pae),e(Pae,jKr),e(CA,DKr),e(re,GKr),e(re,wA),e(wA,hye),e(hye,OKr),e(wA,VKr),e(wA,Bae),e(Bae,XKr),e(wA,zKr),e(re,QKr),e(re,AA),e(AA,uye),e(uye,WKr),e(AA,UKr),e(AA,Iae),e(Iae,HKr),e(AA,JKr),e(re,YKr),e(re,LA),e(LA,pye),e(pye,ZKr),e(LA,KKr),e(LA,Nae),e(Nae,eet),e(LA,oet),e(re,ret),e(re,yA),e(yA,_ye),e(_ye,tet),e(yA,aet),e(yA,qae),e(qae,net),e(yA,set),e(re,iet),e(re,xA),e(xA,bye),e(bye,det),e(xA,cet),e(xA,jae),e(jae,met),e(xA,fet),e(re,get),e(re,$A),e($A,vye),e(vye,het),e($A,uet),e($A,Dae),e(Dae,pet),e($A,_et),e(re,bet),e(re,kA),e(kA,Fye),e(Fye,vet),e(kA,Fet),e(kA,Gae),e(Gae,Tet),e(kA,Met),e(zr,Eet),M(SA,zr,null),b(m,Cto,_),b(m,Cm,_),e(Cm,RA),e(RA,Tye),M(TR,Tye,null),e(Cm,Cet),e(Cm,Mye),e(Mye,wet),b(m,wto,_),b(m,pr,_),M(MR,pr,null),e(pr,Aet),e(pr,wm),e(wm,Let),e(wm,Oae),e(Oae,yet),e(wm,xet),e(wm,Vae),e(Vae,$et),e(wm,ket),e(pr,Set),e(pr,ER),e(ER,Ret),e(ER,Eye),e(Eye,Pet),e(ER,Bet),e(pr,Iet),e(pr,oa),M(CR,oa,null),e(oa,Net),e(oa,Cye),e(Cye,qet),e(oa,jet),e(oa,Am),e(Am,Det),e(Am,wye),e(wye,Get),e(Am,Oet),e(Am,Xae),e(Xae,Vet),e(Am,Xet),e(oa,zet),M(PA,oa,null),e(pr,Qet),e(pr,Qr),M(wR,Qr,null),e(Qr,Wet),e(Qr,Aye),e(Aye,Uet),e(Qr,Het),e(Qr,qn),e(qn,Jet),e(qn,Lye),e(Lye,Yet),e(qn,Zet),e(qn,yye),e(yye,Ket),e(qn,eot),e(qn,xye),e(xye,oot),e(qn,rot),e(Qr,tot),e(Qr,ve),e(ve,BA),e(BA,$ye),e($ye,aot),e(BA,not),e(BA,zae),e(zae,sot),e(BA,lot),e(ve,iot),e(ve,IA),e(IA,kye),e(kye,dot),e(IA,cot),e(IA,Qae),e(Qae,mot),e(IA,fot),e(ve,got),e(ve,NA),e(NA,Sye),e(Sye,hot),e(NA,uot),e(NA,Wae),e(Wae,pot),e(NA,_ot),e(ve,bot),e(ve,qA),e(qA,Rye),e(Rye,vot),e(qA,Fot),e(qA,Uae),e(Uae,Tot),e(qA,Mot),e(ve,Eot),e(ve,jA),e(jA,Pye),e(Pye,Cot),e(jA,wot),e(jA,Hae),e(Hae,Aot),e(jA,Lot),e(ve,yot),e(ve,DA),e(DA,Bye),e(Bye,xot),e(DA,$ot),e(DA,Jae),e(Jae,kot),e(DA,Sot),e(ve,Rot),e(ve,GA),e(GA,Iye),e(Iye,Pot),e(GA,Bot),e(GA,Yae),e(Yae,Iot),e(GA,Not),e(ve,qot),e(ve,OA),e(OA,Nye),e(Nye,jot),e(OA,Dot),e(OA,Zae),e(Zae,Got),e(OA,Oot),e(ve,Vot),e(ve,VA),e(VA,qye),e(qye,Xot),e(VA,zot),e(VA,Kae),e(Kae,Qot),e(VA,Wot),e(ve,Uot),e(ve,XA),e(XA,jye),e(jye,Hot),e(XA,Jot),e(XA,ene),e(ene,Yot),e(XA,Zot),e(ve,Kot),e(ve,zA),e(zA,Dye),e(Dye,ert),e(zA,ort),e(zA,one),e(one,rrt),e(zA,trt),e(ve,art),e(ve,QA),e(QA,Gye),e(Gye,nrt),e(QA,srt),e(QA,rne),e(rne,lrt),e(QA,irt),e(ve,drt),e(ve,WA),e(WA,Oye),e(Oye,crt),e(WA,mrt),e(WA,tne),e(tne,frt),e(WA,grt),e(ve,hrt),e(ve,UA),e(UA,Vye),e(Vye,urt),e(UA,prt),e(UA,ane),e(ane,_rt),e(UA,brt),e(ve,vrt),e(ve,HA),e(HA,Xye),e(Xye,Frt),e(HA,Trt),e(HA,nne),e(nne,Mrt),e(HA,Ert),e(ve,Crt),e(ve,JA),e(JA,zye),e(zye,wrt),e(JA,Art),e(JA,sne),e(sne,Lrt),e(JA,yrt),e(ve,xrt),e(ve,YA),e(YA,Qye),e(Qye,$rt),e(YA,krt),e(YA,lne),e(lne,Srt),e(YA,Rrt),e(Qr,Prt),M(ZA,Qr,null),b(m,Ato,_),b(m,Lm,_),e(Lm,KA),e(KA,Wye),M(AR,Wye,null),e(Lm,Brt),e(Lm,Uye),e(Uye,Irt),b(m,Lto,_),b(m,_r,_),M(LR,_r,null),e(_r,Nrt),e(_r,ym),e(ym,qrt),e(ym,ine),e(ine,jrt),e(ym,Drt),e(ym,dne),e(dne,Grt),e(ym,Ort),e(_r,Vrt),e(_r,yR),e(yR,Xrt),e(yR,Hye),e(Hye,zrt),e(yR,Qrt),e(_r,Wrt),e(_r,ra),M(xR,ra,null),e(ra,Urt),e(ra,Jye),e(Jye,Hrt),e(ra,Jrt),e(ra,xm),e(xm,Yrt),e(xm,Yye),e(Yye,Zrt),e(xm,Krt),e(xm,cne),e(cne,ett),e(xm,ott),e(ra,rtt),M(e6,ra,null),e(_r,ttt),e(_r,Wr),M($R,Wr,null),e(Wr,att),e(Wr,Zye),e(Zye,ntt),e(Wr,stt),e(Wr,jn),e(jn,ltt),e(jn,Kye),e(Kye,itt),e(jn,dtt),e(jn,e9e),e(e9e,ctt),e(jn,mtt),e(jn,o9e),e(o9e,ftt),e(jn,gtt),e(Wr,htt),e(Wr,kR),e(kR,o6),e(o6,r9e),e(r9e,utt),e(o6,ptt),e(o6,mne),e(mne,_tt),e(o6,btt),e(kR,vtt),e(kR,r6),e(r6,t9e),e(t9e,Ftt),e(r6,Ttt),e(r6,fne),e(fne,Mtt),e(r6,Ett),e(Wr,Ctt),M(t6,Wr,null),b(m,yto,_),b(m,$m,_),e($m,a6),e(a6,a9e),M(SR,a9e,null),e($m,wtt),e($m,n9e),e(n9e,Att),b(m,xto,_),b(m,br,_),M(RR,br,null),e(br,Ltt),e(br,km),e(km,ytt),e(km,gne),e(gne,xtt),e(km,$tt),e(km,hne),e(hne,ktt),e(km,Stt),e(br,Rtt),e(br,PR),e(PR,Ptt),e(PR,s9e),e(s9e,Btt),e(PR,Itt),e(br,Ntt),e(br,ta),M(BR,ta,null),e(ta,qtt),e(ta,l9e),e(l9e,jtt),e(ta,Dtt),e(ta,Sm),e(Sm,Gtt),e(Sm,i9e),e(i9e,Ott),e(Sm,Vtt),e(Sm,une),e(une,Xtt),e(Sm,ztt),e(ta,Qtt),M(n6,ta,null),e(br,Wtt),e(br,Ur),M(IR,Ur,null),e(Ur,Utt),e(Ur,d9e),e(d9e,Htt),e(Ur,Jtt),e(Ur,Dn),e(Dn,Ytt),e(Dn,c9e),e(c9e,Ztt),e(Dn,Ktt),e(Dn,m9e),e(m9e,eat),e(Dn,oat),e(Dn,f9e),e(f9e,rat),e(Dn,tat),e(Ur,aat),e(Ur,g9e),e(g9e,s6),e(s6,h9e),e(h9e,nat),e(s6,sat),e(s6,pne),e(pne,lat),e(s6,iat),e(Ur,dat),M(l6,Ur,null),b(m,$to,_),b(m,Rm,_),e(Rm,i6),e(i6,u9e),M(NR,u9e,null),e(Rm,cat),e(Rm,p9e),e(p9e,mat),b(m,kto,_),b(m,vr,_),M(qR,vr,null),e(vr,fat),e(vr,Pm),e(Pm,gat),e(Pm,_ne),e(_ne,hat),e(Pm,uat),e(Pm,bne),e(bne,pat),e(Pm,_at),e(vr,bat),e(vr,jR),e(jR,vat),e(jR,_9e),e(_9e,Fat),e(jR,Tat),e(vr,Mat),e(vr,aa),M(DR,aa,null),e(aa,Eat),e(aa,b9e),e(b9e,Cat),e(aa,wat),e(aa,Bm),e(Bm,Aat),e(Bm,v9e),e(v9e,Lat),e(Bm,yat),e(Bm,vne),e(vne,xat),e(Bm,$at),e(aa,kat),M(d6,aa,null),e(vr,Sat),e(vr,Hr),M(GR,Hr,null),e(Hr,Rat),e(Hr,F9e),e(F9e,Pat),e(Hr,Bat),e(Hr,Gn),e(Gn,Iat),e(Gn,T9e),e(T9e,Nat),e(Gn,qat),e(Gn,M9e),e(M9e,jat),e(Gn,Dat),e(Gn,E9e),e(E9e,Gat),e(Gn,Oat),e(Hr,Vat),e(Hr,C9e),e(C9e,c6),e(c6,w9e),e(w9e,Xat),e(c6,zat),e(c6,Fne),e(Fne,Qat),e(c6,Wat),e(Hr,Uat),M(m6,Hr,null),b(m,Sto,_),b(m,Im,_),e(Im,f6),e(f6,A9e),M(OR,A9e,null),e(Im,Hat),e(Im,L9e),e(L9e,Jat),b(m,Rto,_),b(m,Fr,_),M(VR,Fr,null),e(Fr,Yat),e(Fr,Nm),e(Nm,Zat),e(Nm,Tne),e(Tne,Kat),e(Nm,ent),e(Nm,Mne),e(Mne,ont),e(Nm,rnt),e(Fr,tnt),e(Fr,XR),e(XR,ant),e(XR,y9e),e(y9e,nnt),e(XR,snt),e(Fr,lnt),e(Fr,na),M(zR,na,null),e(na,int),e(na,x9e),e(x9e,dnt),e(na,cnt),e(na,qm),e(qm,mnt),e(qm,$9e),e($9e,fnt),e(qm,gnt),e(qm,Ene),e(Ene,hnt),e(qm,unt),e(na,pnt),M(g6,na,null),e(Fr,_nt),e(Fr,Jr),M(QR,Jr,null),e(Jr,bnt),e(Jr,k9e),e(k9e,vnt),e(Jr,Fnt),e(Jr,On),e(On,Tnt),e(On,S9e),e(S9e,Mnt),e(On,Ent),e(On,R9e),e(R9e,Cnt),e(On,wnt),e(On,P9e),e(P9e,Ant),e(On,Lnt),e(Jr,ynt),e(Jr,ce),e(ce,h6),e(h6,B9e),e(B9e,xnt),e(h6,$nt),e(h6,Cne),e(Cne,knt),e(h6,Snt),e(ce,Rnt),e(ce,u6),e(u6,I9e),e(I9e,Pnt),e(u6,Bnt),e(u6,wne),e(wne,Int),e(u6,Nnt),e(ce,qnt),e(ce,p6),e(p6,N9e),e(N9e,jnt),e(p6,Dnt),e(p6,Ane),e(Ane,Gnt),e(p6,Ont),e(ce,Vnt),e(ce,_6),e(_6,q9e),e(q9e,Xnt),e(_6,znt),e(_6,Lne),e(Lne,Qnt),e(_6,Wnt),e(ce,Unt),e(ce,b6),e(b6,j9e),e(j9e,Hnt),e(b6,Jnt),e(b6,yne),e(yne,Ynt),e(b6,Znt),e(ce,Knt),e(ce,v6),e(v6,D9e),e(D9e,est),e(v6,ost),e(v6,xne),e(xne,rst),e(v6,tst),e(ce,ast),e(ce,F6),e(F6,G9e),e(G9e,nst),e(F6,sst),e(F6,$ne),e($ne,lst),e(F6,ist),e(ce,dst),e(ce,T6),e(T6,O9e),e(O9e,cst),e(T6,mst),e(T6,kne),e(kne,fst),e(T6,gst),e(ce,hst),e(ce,M6),e(M6,V9e),e(V9e,ust),e(M6,pst),e(M6,Sne),e(Sne,_st),e(M6,bst),e(ce,vst),e(ce,E6),e(E6,X9e),e(X9e,Fst),e(E6,Tst),e(E6,Rne),e(Rne,Mst),e(E6,Est),e(ce,Cst),e(ce,C6),e(C6,z9e),e(z9e,wst),e(C6,Ast),e(C6,Pne),e(Pne,Lst),e(C6,yst),e(ce,xst),e(ce,w6),e(w6,Q9e),e(Q9e,$st),e(w6,kst),e(w6,Bne),e(Bne,Sst),e(w6,Rst),e(ce,Pst),e(ce,A6),e(A6,W9e),e(W9e,Bst),e(A6,Ist),e(A6,Ine),e(Ine,Nst),e(A6,qst),e(ce,jst),e(ce,L6),e(L6,U9e),e(U9e,Dst),e(L6,Gst),e(L6,Nne),e(Nne,Ost),e(L6,Vst),e(ce,Xst),e(ce,y6),e(y6,H9e),e(H9e,zst),e(y6,Qst),e(y6,qne),e(qne,Wst),e(y6,Ust),e(ce,Hst),e(ce,x6),e(x6,J9e),e(J9e,Jst),e(x6,Yst),e(x6,jne),e(jne,Zst),e(x6,Kst),e(ce,elt),e(ce,$6),e($6,Y9e),e(Y9e,olt),e($6,rlt),e($6,Dne),e(Dne,tlt),e($6,alt),e(ce,nlt),e(ce,k6),e(k6,Z9e),e(Z9e,slt),e(k6,llt),e(k6,Gne),e(Gne,ilt),e(k6,dlt),e(ce,clt),e(ce,S6),e(S6,K9e),e(K9e,mlt),e(S6,flt),e(S6,One),e(One,glt),e(S6,hlt),e(ce,ult),e(ce,R6),e(R6,exe),e(exe,plt),e(R6,_lt),e(R6,Vne),e(Vne,blt),e(R6,vlt),e(ce,Flt),e(ce,P6),e(P6,oxe),e(oxe,Tlt),e(P6,Mlt),e(P6,Xne),e(Xne,Elt),e(P6,Clt),e(Jr,wlt),M(B6,Jr,null),b(m,Pto,_),b(m,jm,_),e(jm,I6),e(I6,rxe),M(WR,rxe,null),e(jm,Alt),e(jm,txe),e(txe,Llt),b(m,Bto,_),b(m,Tr,_),M(UR,Tr,null),e(Tr,ylt),e(Tr,Dm),e(Dm,xlt),e(Dm,zne),e(zne,$lt),e(Dm,klt),e(Dm,Qne),e(Qne,Slt),e(Dm,Rlt),e(Tr,Plt),e(Tr,HR),e(HR,Blt),e(HR,axe),e(axe,Ilt),e(HR,Nlt),e(Tr,qlt),e(Tr,sa),M(JR,sa,null),e(sa,jlt),e(sa,nxe),e(nxe,Dlt),e(sa,Glt),e(sa,Gm),e(Gm,Olt),e(Gm,sxe),e(sxe,Vlt),e(Gm,Xlt),e(Gm,Wne),e(Wne,zlt),e(Gm,Qlt),e(sa,Wlt),M(N6,sa,null),e(Tr,Ult),e(Tr,Yr),M(YR,Yr,null),e(Yr,Hlt),e(Yr,lxe),e(lxe,Jlt),e(Yr,Ylt),e(Yr,Vn),e(Vn,Zlt),e(Vn,ixe),e(ixe,Klt),e(Vn,eit),e(Vn,dxe),e(dxe,oit),e(Vn,rit),e(Vn,cxe),e(cxe,tit),e(Vn,ait),e(Yr,nit),e(Yr,me),e(me,q6),e(q6,mxe),e(mxe,sit),e(q6,lit),e(q6,Une),e(Une,iit),e(q6,dit),e(me,cit),e(me,j6),e(j6,fxe),e(fxe,mit),e(j6,fit),e(j6,Hne),e(Hne,git),e(j6,hit),e(me,uit),e(me,D6),e(D6,gxe),e(gxe,pit),e(D6,_it),e(D6,Jne),e(Jne,bit),e(D6,vit),e(me,Fit),e(me,G6),e(G6,hxe),e(hxe,Tit),e(G6,Mit),e(G6,Yne),e(Yne,Eit),e(G6,Cit),e(me,wit),e(me,O6),e(O6,uxe),e(uxe,Ait),e(O6,Lit),e(O6,Zne),e(Zne,yit),e(O6,xit),e(me,$it),e(me,V6),e(V6,pxe),e(pxe,kit),e(V6,Sit),e(V6,Kne),e(Kne,Rit),e(V6,Pit),e(me,Bit),e(me,X6),e(X6,_xe),e(_xe,Iit),e(X6,Nit),e(X6,ese),e(ese,qit),e(X6,jit),e(me,Dit),e(me,z6),e(z6,bxe),e(bxe,Git),e(z6,Oit),e(z6,ose),e(ose,Vit),e(z6,Xit),e(me,zit),e(me,Q6),e(Q6,vxe),e(vxe,Qit),e(Q6,Wit),e(Q6,rse),e(rse,Uit),e(Q6,Hit),e(me,Jit),e(me,W6),e(W6,Fxe),e(Fxe,Yit),e(W6,Zit),e(W6,tse),e(tse,Kit),e(W6,edt),e(me,odt),e(me,U6),e(U6,Txe),e(Txe,rdt),e(U6,tdt),e(U6,ase),e(ase,adt),e(U6,ndt),e(me,sdt),e(me,H6),e(H6,Mxe),e(Mxe,ldt),e(H6,idt),e(H6,nse),e(nse,ddt),e(H6,cdt),e(me,mdt),e(me,J6),e(J6,Exe),e(Exe,fdt),e(J6,gdt),e(J6,sse),e(sse,hdt),e(J6,udt),e(me,pdt),e(me,Y6),e(Y6,Cxe),e(Cxe,_dt),e(Y6,bdt),e(Y6,lse),e(lse,vdt),e(Y6,Fdt),e(me,Tdt),e(me,Z6),e(Z6,wxe),e(wxe,Mdt),e(Z6,Edt),e(Z6,ise),e(ise,Cdt),e(Z6,wdt),e(me,Adt),e(me,K6),e(K6,Axe),e(Axe,Ldt),e(K6,ydt),e(K6,dse),e(dse,xdt),e(K6,$dt),e(me,kdt),e(me,e7),e(e7,Lxe),e(Lxe,Sdt),e(e7,Rdt),e(e7,cse),e(cse,Pdt),e(e7,Bdt),e(me,Idt),e(me,o7),e(o7,yxe),e(yxe,Ndt),e(o7,qdt),e(o7,mse),e(mse,jdt),e(o7,Ddt),e(me,Gdt),e(me,r7),e(r7,xxe),e(xxe,Odt),e(r7,Vdt),e(r7,fse),e(fse,Xdt),e(r7,zdt),e(me,Qdt),e(me,t7),e(t7,$xe),e($xe,Wdt),e(t7,Udt),e(t7,gse),e(gse,Hdt),e(t7,Jdt),e(me,Ydt),e(me,a7),e(a7,kxe),e(kxe,Zdt),e(a7,Kdt),e(a7,hse),e(hse,ect),e(a7,oct),e(Yr,rct),M(n7,Yr,null),b(m,Ito,_),b(m,Om,_),e(Om,s7),e(s7,Sxe),M(ZR,Sxe,null),e(Om,tct),e(Om,Rxe),e(Rxe,act),b(m,Nto,_),b(m,Mr,_),M(KR,Mr,null),e(Mr,nct),e(Mr,Vm),e(Vm,sct),e(Vm,use),e(use,lct),e(Vm,ict),e(Vm,pse),e(pse,dct),e(Vm,cct),e(Mr,mct),e(Mr,eP),e(eP,fct),e(eP,Pxe),e(Pxe,gct),e(eP,hct),e(Mr,uct),e(Mr,la),M(oP,la,null),e(la,pct),e(la,Bxe),e(Bxe,_ct),e(la,bct),e(la,Xm),e(Xm,vct),e(Xm,Ixe),e(Ixe,Fct),e(Xm,Tct),e(Xm,_se),e(_se,Mct),e(Xm,Ect),e(la,Cct),M(l7,la,null),e(Mr,wct),e(Mr,Zr),M(rP,Zr,null),e(Zr,Act),e(Zr,Nxe),e(Nxe,Lct),e(Zr,yct),e(Zr,Xn),e(Xn,xct),e(Xn,qxe),e(qxe,$ct),e(Xn,kct),e(Xn,jxe),e(jxe,Sct),e(Xn,Rct),e(Xn,Dxe),e(Dxe,Pct),e(Xn,Bct),e(Zr,Ict),e(Zr,Gxe),e(Gxe,i7),e(i7,Oxe),e(Oxe,Nct),e(i7,qct),e(i7,bse),e(bse,jct),e(i7,Dct),e(Zr,Gct),M(d7,Zr,null),b(m,qto,_),b(m,zm,_),e(zm,c7),e(c7,Vxe),M(tP,Vxe,null),e(zm,Oct),e(zm,Xxe),e(Xxe,Vct),b(m,jto,_),b(m,Er,_),M(aP,Er,null),e(Er,Xct),e(Er,Qm),e(Qm,zct),e(Qm,vse),e(vse,Qct),e(Qm,Wct),e(Qm,Fse),e(Fse,Uct),e(Qm,Hct),e(Er,Jct),e(Er,nP),e(nP,Yct),e(nP,zxe),e(zxe,Zct),e(nP,Kct),e(Er,emt),e(Er,ia),M(sP,ia,null),e(ia,omt),e(ia,Qxe),e(Qxe,rmt),e(ia,tmt),e(ia,Wm),e(Wm,amt),e(Wm,Wxe),e(Wxe,nmt),e(Wm,smt),e(Wm,Tse),e(Tse,lmt),e(Wm,imt),e(ia,dmt),M(m7,ia,null),e(Er,cmt),e(Er,Kr),M(lP,Kr,null),e(Kr,mmt),e(Kr,Uxe),e(Uxe,fmt),e(Kr,gmt),e(Kr,zn),e(zn,hmt),e(zn,Hxe),e(Hxe,umt),e(zn,pmt),e(zn,Jxe),e(Jxe,_mt),e(zn,bmt),e(zn,Yxe),e(Yxe,vmt),e(zn,Fmt),e(Kr,Tmt),e(Kr,iP),e(iP,f7),e(f7,Zxe),e(Zxe,Mmt),e(f7,Emt),e(f7,Mse),e(Mse,Cmt),e(f7,wmt),e(iP,Amt),e(iP,g7),e(g7,Kxe),e(Kxe,Lmt),e(g7,ymt),e(g7,Ese),e(Ese,xmt),e(g7,$mt),e(Kr,kmt),M(h7,Kr,null),b(m,Dto,_),b(m,Um,_),e(Um,u7),e(u7,e$e),M(dP,e$e,null),e(Um,Smt),e(Um,o$e),e(o$e,Rmt),b(m,Gto,_),b(m,Cr,_),M(cP,Cr,null),e(Cr,Pmt),e(Cr,Hm),e(Hm,Bmt),e(Hm,Cse),e(Cse,Imt),e(Hm,Nmt),e(Hm,wse),e(wse,qmt),e(Hm,jmt),e(Cr,Dmt),e(Cr,mP),e(mP,Gmt),e(mP,r$e),e(r$e,Omt),e(mP,Vmt),e(Cr,Xmt),e(Cr,da),M(fP,da,null),e(da,zmt),e(da,t$e),e(t$e,Qmt),e(da,Wmt),e(da,Jm),e(Jm,Umt),e(Jm,a$e),e(a$e,Hmt),e(Jm,Jmt),e(Jm,Ase),e(Ase,Ymt),e(Jm,Zmt),e(da,Kmt),M(p7,da,null),e(Cr,eft),e(Cr,et),M(gP,et,null),e(et,oft),e(et,n$e),e(n$e,rft),e(et,tft),e(et,Qn),e(Qn,aft),e(Qn,s$e),e(s$e,nft),e(Qn,sft),e(Qn,l$e),e(l$e,lft),e(Qn,ift),e(Qn,i$e),e(i$e,dft),e(Qn,cft),e(et,mft),e(et,te),e(te,_7),e(_7,d$e),e(d$e,fft),e(_7,gft),e(_7,Lse),e(Lse,hft),e(_7,uft),e(te,pft),e(te,b7),e(b7,c$e),e(c$e,_ft),e(b7,bft),e(b7,yse),e(yse,vft),e(b7,Fft),e(te,Tft),e(te,v7),e(v7,m$e),e(m$e,Mft),e(v7,Eft),e(v7,xse),e(xse,Cft),e(v7,wft),e(te,Aft),e(te,F7),e(F7,f$e),e(f$e,Lft),e(F7,yft),e(F7,$se),e($se,xft),e(F7,$ft),e(te,kft),e(te,T7),e(T7,g$e),e(g$e,Sft),e(T7,Rft),e(T7,kse),e(kse,Pft),e(T7,Bft),e(te,Ift),e(te,M7),e(M7,h$e),e(h$e,Nft),e(M7,qft),e(M7,Sse),e(Sse,jft),e(M7,Dft),e(te,Gft),e(te,E7),e(E7,u$e),e(u$e,Oft),e(E7,Vft),e(E7,Rse),e(Rse,Xft),e(E7,zft),e(te,Qft),e(te,C7),e(C7,p$e),e(p$e,Wft),e(C7,Uft),e(C7,Pse),e(Pse,Hft),e(C7,Jft),e(te,Yft),e(te,w7),e(w7,_$e),e(_$e,Zft),e(w7,Kft),e(w7,Bse),e(Bse,egt),e(w7,ogt),e(te,rgt),e(te,A7),e(A7,b$e),e(b$e,tgt),e(A7,agt),e(A7,Ise),e(Ise,ngt),e(A7,sgt),e(te,lgt),e(te,L7),e(L7,v$e),e(v$e,igt),e(L7,dgt),e(L7,Nse),e(Nse,cgt),e(L7,mgt),e(te,fgt),e(te,y7),e(y7,F$e),e(F$e,ggt),e(y7,hgt),e(y7,qse),e(qse,ugt),e(y7,pgt),e(te,_gt),e(te,x7),e(x7,T$e),e(T$e,bgt),e(x7,vgt),e(x7,jse),e(jse,Fgt),e(x7,Tgt),e(te,Mgt),e(te,$7),e($7,M$e),e(M$e,Egt),e($7,Cgt),e($7,Dse),e(Dse,wgt),e($7,Agt),e(te,Lgt),e(te,k7),e(k7,E$e),e(E$e,ygt),e(k7,xgt),e(k7,Gse),e(Gse,$gt),e(k7,kgt),e(te,Sgt),e(te,S7),e(S7,C$e),e(C$e,Rgt),e(S7,Pgt),e(S7,Ose),e(Ose,Bgt),e(S7,Igt),e(te,Ngt),e(te,R7),e(R7,w$e),e(w$e,qgt),e(R7,jgt),e(R7,Vse),e(Vse,Dgt),e(R7,Ggt),e(te,Ogt),e(te,P7),e(P7,A$e),e(A$e,Vgt),e(P7,Xgt),e(P7,Xse),e(Xse,zgt),e(P7,Qgt),e(te,Wgt),e(te,B7),e(B7,L$e),e(L$e,Ugt),e(B7,Hgt),e(B7,zse),e(zse,Jgt),e(B7,Ygt),e(te,Zgt),e(te,I7),e(I7,y$e),e(y$e,Kgt),e(I7,eht),e(I7,Qse),e(Qse,oht),e(I7,rht),e(te,tht),e(te,N7),e(N7,x$e),e(x$e,aht),e(N7,nht),e(N7,Wse),e(Wse,sht),e(N7,lht),e(te,iht),e(te,q7),e(q7,$$e),e($$e,dht),e(q7,cht),e(q7,Use),e(Use,mht),e(q7,fht),e(te,ght),e(te,j7),e(j7,k$e),e(k$e,hht),e(j7,uht),e(j7,Hse),e(Hse,pht),e(j7,_ht),e(te,bht),e(te,D7),e(D7,S$e),e(S$e,vht),e(D7,Fht),e(D7,Jse),e(Jse,Tht),e(D7,Mht),e(te,Eht),e(te,G7),e(G7,R$e),e(R$e,Cht),e(G7,wht),e(G7,Yse),e(Yse,Aht),e(G7,Lht),e(te,yht),e(te,O7),e(O7,P$e),e(P$e,xht),e(O7,$ht),e(O7,Zse),e(Zse,kht),e(O7,Sht),e(te,Rht),e(te,V7),e(V7,B$e),e(B$e,Pht),e(V7,Bht),e(V7,Kse),e(Kse,Iht),e(V7,Nht),e(et,qht),M(X7,et,null),b(m,Oto,_),b(m,Ym,_),e(Ym,z7),e(z7,I$e),M(hP,I$e,null),e(Ym,jht),e(Ym,N$e),e(N$e,Dht),b(m,Vto,_),b(m,wr,_),M(uP,wr,null),e(wr,Ght),e(wr,Zm),e(Zm,Oht),e(Zm,ele),e(ele,Vht),e(Zm,Xht),e(Zm,ole),e(ole,zht),e(Zm,Qht),e(wr,Wht),e(wr,pP),e(pP,Uht),e(pP,q$e),e(q$e,Hht),e(pP,Jht),e(wr,Yht),e(wr,ca),M(_P,ca,null),e(ca,Zht),e(ca,j$e),e(j$e,Kht),e(ca,eut),e(ca,Km),e(Km,out),e(Km,D$e),e(D$e,rut),e(Km,tut),e(Km,rle),e(rle,aut),e(Km,nut),e(ca,sut),M(Q7,ca,null),e(wr,lut),e(wr,ot),M(bP,ot,null),e(ot,iut),e(ot,G$e),e(G$e,dut),e(ot,cut),e(ot,Wn),e(Wn,mut),e(Wn,O$e),e(O$e,fut),e(Wn,gut),e(Wn,V$e),e(V$e,hut),e(Wn,uut),e(Wn,X$e),e(X$e,put),e(Wn,_ut),e(ot,but),e(ot,$e),e($e,W7),e(W7,z$e),e(z$e,vut),e(W7,Fut),e(W7,tle),e(tle,Tut),e(W7,Mut),e($e,Eut),e($e,U7),e(U7,Q$e),e(Q$e,Cut),e(U7,wut),e(U7,ale),e(ale,Aut),e(U7,Lut),e($e,yut),e($e,H7),e(H7,W$e),e(W$e,xut),e(H7,$ut),e(H7,nle),e(nle,kut),e(H7,Sut),e($e,Rut),e($e,J7),e(J7,U$e),e(U$e,Put),e(J7,But),e(J7,sle),e(sle,Iut),e(J7,Nut),e($e,qut),e($e,Y7),e(Y7,H$e),e(H$e,jut),e(Y7,Dut),e(Y7,lle),e(lle,Gut),e(Y7,Out),e($e,Vut),e($e,Z7),e(Z7,J$e),e(J$e,Xut),e(Z7,zut),e(Z7,ile),e(ile,Qut),e(Z7,Wut),e($e,Uut),e($e,K7),e(K7,Y$e),e(Y$e,Hut),e(K7,Jut),e(K7,dle),e(dle,Yut),e(K7,Zut),e($e,Kut),e($e,eL),e(eL,Z$e),e(Z$e,ept),e(eL,opt),e(eL,cle),e(cle,rpt),e(eL,tpt),e($e,apt),e($e,oL),e(oL,K$e),e(K$e,npt),e(oL,spt),e(oL,mle),e(mle,lpt),e(oL,ipt),e($e,dpt),e($e,rL),e(rL,eke),e(eke,cpt),e(rL,mpt),e(rL,fle),e(fle,fpt),e(rL,gpt),e(ot,hpt),M(tL,ot,null),b(m,Xto,_),b(m,ef,_),e(ef,aL),e(aL,oke),M(vP,oke,null),e(ef,upt),e(ef,rke),e(rke,ppt),b(m,zto,_),b(m,Ar,_),M(FP,Ar,null),e(Ar,_pt),e(Ar,of),e(of,bpt),e(of,gle),e(gle,vpt),e(of,Fpt),e(of,hle),e(hle,Tpt),e(of,Mpt),e(Ar,Ept),e(Ar,TP),e(TP,Cpt),e(TP,tke),e(tke,wpt),e(TP,Apt),e(Ar,Lpt),e(Ar,ma),M(MP,ma,null),e(ma,ypt),e(ma,ake),e(ake,xpt),e(ma,$pt),e(ma,rf),e(rf,kpt),e(rf,nke),e(nke,Spt),e(rf,Rpt),e(rf,ule),e(ule,Ppt),e(rf,Bpt),e(ma,Ipt),M(nL,ma,null),e(Ar,Npt),e(Ar,rt),M(EP,rt,null),e(rt,qpt),e(rt,ske),e(ske,jpt),e(rt,Dpt),e(rt,Un),e(Un,Gpt),e(Un,lke),e(lke,Opt),e(Un,Vpt),e(Un,ike),e(ike,Xpt),e(Un,zpt),e(Un,dke),e(dke,Qpt),e(Un,Wpt),e(rt,Upt),e(rt,Ee),e(Ee,sL),e(sL,cke),e(cke,Hpt),e(sL,Jpt),e(sL,ple),e(ple,Ypt),e(sL,Zpt),e(Ee,Kpt),e(Ee,lL),e(lL,mke),e(mke,e_t),e(lL,o_t),e(lL,_le),e(_le,r_t),e(lL,t_t),e(Ee,a_t),e(Ee,iL),e(iL,fke),e(fke,n_t),e(iL,s_t),e(iL,ble),e(ble,l_t),e(iL,i_t),e(Ee,d_t),e(Ee,dL),e(dL,gke),e(gke,c_t),e(dL,m_t),e(dL,vle),e(vle,f_t),e(dL,g_t),e(Ee,h_t),e(Ee,cL),e(cL,hke),e(hke,u_t),e(cL,p_t),e(cL,Fle),e(Fle,__t),e(cL,b_t),e(Ee,v_t),e(Ee,mL),e(mL,uke),e(uke,F_t),e(mL,T_t),e(mL,Tle),e(Tle,M_t),e(mL,E_t),e(Ee,C_t),e(Ee,fL),e(fL,pke),e(pke,w_t),e(fL,A_t),e(fL,Mle),e(Mle,L_t),e(fL,y_t),e(Ee,x_t),e(Ee,gL),e(gL,_ke),e(_ke,$_t),e(gL,k_t),e(gL,Ele),e(Ele,S_t),e(gL,R_t),e(Ee,P_t),e(Ee,hL),e(hL,bke),e(bke,B_t),e(hL,I_t),e(hL,Cle),e(Cle,N_t),e(hL,q_t),e(Ee,j_t),e(Ee,uL),e(uL,vke),e(vke,D_t),e(uL,G_t),e(uL,wle),e(wle,O_t),e(uL,V_t),e(Ee,X_t),e(Ee,pL),e(pL,Fke),e(Fke,z_t),e(pL,Q_t),e(pL,Ale),e(Ale,W_t),e(pL,U_t),e(Ee,H_t),e(Ee,_L),e(_L,Tke),e(Tke,J_t),e(_L,Y_t),e(_L,Lle),e(Lle,Z_t),e(_L,K_t),e(Ee,e1t),e(Ee,bL),e(bL,Mke),e(Mke,o1t),e(bL,r1t),e(bL,yle),e(yle,t1t),e(bL,a1t),e(rt,n1t),M(vL,rt,null),b(m,Qto,_),b(m,tf,_),e(tf,FL),e(FL,Eke),M(CP,Eke,null),e(tf,s1t),e(tf,Cke),e(Cke,l1t),b(m,Wto,_),b(m,Lr,_),M(wP,Lr,null),e(Lr,i1t),e(Lr,af),e(af,d1t),e(af,xle),e(xle,c1t),e(af,m1t),e(af,$le),e($le,f1t),e(af,g1t),e(Lr,h1t),e(Lr,AP),e(AP,u1t),e(AP,wke),e(wke,p1t),e(AP,_1t),e(Lr,b1t),e(Lr,fa),M(LP,fa,null),e(fa,v1t),e(fa,Ake),e(Ake,F1t),e(fa,T1t),e(fa,nf),e(nf,M1t),e(nf,Lke),e(Lke,E1t),e(nf,C1t),e(nf,kle),e(kle,w1t),e(nf,A1t),e(fa,L1t),M(TL,fa,null),e(Lr,y1t),e(Lr,tt),M(yP,tt,null),e(tt,x1t),e(tt,yke),e(yke,$1t),e(tt,k1t),e(tt,Hn),e(Hn,S1t),e(Hn,xke),e(xke,R1t),e(Hn,P1t),e(Hn,$ke),e($ke,B1t),e(Hn,I1t),e(Hn,kke),e(kke,N1t),e(Hn,q1t),e(tt,j1t),e(tt,ke),e(ke,ML),e(ML,Ske),e(Ske,D1t),e(ML,G1t),e(ML,Sle),e(Sle,O1t),e(ML,V1t),e(ke,X1t),e(ke,EL),e(EL,Rke),e(Rke,z1t),e(EL,Q1t),e(EL,Rle),e(Rle,W1t),e(EL,U1t),e(ke,H1t),e(ke,CL),e(CL,Pke),e(Pke,J1t),e(CL,Y1t),e(CL,Ple),e(Ple,Z1t),e(CL,K1t),e(ke,e2t),e(ke,wL),e(wL,Bke),e(Bke,o2t),e(wL,r2t),e(wL,Ble),e(Ble,t2t),e(wL,a2t),e(ke,n2t),e(ke,AL),e(AL,Ike),e(Ike,s2t),e(AL,l2t),e(AL,Ile),e(Ile,i2t),e(AL,d2t),e(ke,c2t),e(ke,LL),e(LL,Nke),e(Nke,m2t),e(LL,f2t),e(LL,Nle),e(Nle,g2t),e(LL,h2t),e(ke,u2t),e(ke,yL),e(yL,qke),e(qke,p2t),e(yL,_2t),e(yL,qle),e(qle,b2t),e(yL,v2t),e(ke,F2t),e(ke,xL),e(xL,jke),e(jke,T2t),e(xL,M2t),e(xL,jle),e(jle,E2t),e(xL,C2t),e(ke,w2t),e(ke,$L),e($L,Dke),e(Dke,A2t),e($L,L2t),e($L,Dle),e(Dle,y2t),e($L,x2t),e(ke,$2t),e(ke,kL),e(kL,Gke),e(Gke,k2t),e(kL,S2t),e(kL,Gle),e(Gle,R2t),e(kL,P2t),e(tt,B2t),M(SL,tt,null),b(m,Uto,_),b(m,sf,_),e(sf,RL),e(RL,Oke),M(xP,Oke,null),e(sf,I2t),e(sf,Vke),e(Vke,N2t),b(m,Hto,_),b(m,yr,_),M($P,yr,null),e(yr,q2t),e(yr,lf),e(lf,j2t),e(lf,Ole),e(Ole,D2t),e(lf,G2t),e(lf,Vle),e(Vle,O2t),e(lf,V2t),e(yr,X2t),e(yr,kP),e(kP,z2t),e(kP,Xke),e(Xke,Q2t),e(kP,W2t),e(yr,U2t),e(yr,ga),M(SP,ga,null),e(ga,H2t),e(ga,zke),e(zke,J2t),e(ga,Y2t),e(ga,df),e(df,Z2t),e(df,Qke),e(Qke,K2t),e(df,ebt),e(df,Xle),e(Xle,obt),e(df,rbt),e(ga,tbt),M(PL,ga,null),e(yr,abt),e(yr,at),M(RP,at,null),e(at,nbt),e(at,Wke),e(Wke,sbt),e(at,lbt),e(at,Jn),e(Jn,ibt),e(Jn,Uke),e(Uke,dbt),e(Jn,cbt),e(Jn,Hke),e(Hke,mbt),e(Jn,fbt),e(Jn,Jke),e(Jke,gbt),e(Jn,hbt),e(at,ubt),e(at,Se),e(Se,BL),e(BL,Yke),e(Yke,pbt),e(BL,_bt),e(BL,zle),e(zle,bbt),e(BL,vbt),e(Se,Fbt),e(Se,IL),e(IL,Zke),e(Zke,Tbt),e(IL,Mbt),e(IL,Qle),e(Qle,Ebt),e(IL,Cbt),e(Se,wbt),e(Se,NL),e(NL,Kke),e(Kke,Abt),e(NL,Lbt),e(NL,Wle),e(Wle,ybt),e(NL,xbt),e(Se,$bt),e(Se,qL),e(qL,eSe),e(eSe,kbt),e(qL,Sbt),e(qL,Ule),e(Ule,Rbt),e(qL,Pbt),e(Se,Bbt),e(Se,jL),e(jL,oSe),e(oSe,Ibt),e(jL,Nbt),e(jL,Hle),e(Hle,qbt),e(jL,jbt),e(Se,Dbt),e(Se,DL),e(DL,rSe),e(rSe,Gbt),e(DL,Obt),e(DL,Jle),e(Jle,Vbt),e(DL,Xbt),e(Se,zbt),e(Se,GL),e(GL,tSe),e(tSe,Qbt),e(GL,Wbt),e(GL,Yle),e(Yle,Ubt),e(GL,Hbt),e(Se,Jbt),e(Se,OL),e(OL,aSe),e(aSe,Ybt),e(OL,Zbt),e(OL,Zle),e(Zle,Kbt),e(OL,evt),e(Se,ovt),e(Se,VL),e(VL,nSe),e(nSe,rvt),e(VL,tvt),e(VL,Kle),e(Kle,avt),e(VL,nvt),e(Se,svt),e(Se,XL),e(XL,sSe),e(sSe,lvt),e(XL,ivt),e(XL,eie),e(eie,dvt),e(XL,cvt),e(at,mvt),M(zL,at,null),b(m,Jto,_),b(m,cf,_),e(cf,QL),e(QL,lSe),M(PP,lSe,null),e(cf,fvt),e(cf,iSe),e(iSe,gvt),b(m,Yto,_),b(m,xr,_),M(BP,xr,null),e(xr,hvt),e(xr,mf),e(mf,uvt),e(mf,oie),e(oie,pvt),e(mf,_vt),e(mf,rie),e(rie,bvt),e(mf,vvt),e(xr,Fvt),e(xr,IP),e(IP,Tvt),e(IP,dSe),e(dSe,Mvt),e(IP,Evt),e(xr,Cvt),e(xr,ha),M(NP,ha,null),e(ha,wvt),e(ha,cSe),e(cSe,Avt),e(ha,Lvt),e(ha,ff),e(ff,yvt),e(ff,mSe),e(mSe,xvt),e(ff,$vt),e(ff,tie),e(tie,kvt),e(ff,Svt),e(ha,Rvt),M(WL,ha,null),e(xr,Pvt),e(xr,nt),M(qP,nt,null),e(nt,Bvt),e(nt,fSe),e(fSe,Ivt),e(nt,Nvt),e(nt,Yn),e(Yn,qvt),e(Yn,gSe),e(gSe,jvt),e(Yn,Dvt),e(Yn,hSe),e(hSe,Gvt),e(Yn,Ovt),e(Yn,uSe),e(uSe,Vvt),e(Yn,Xvt),e(nt,zvt),e(nt,Re),e(Re,UL),e(UL,pSe),e(pSe,Qvt),e(UL,Wvt),e(UL,aie),e(aie,Uvt),e(UL,Hvt),e(Re,Jvt),e(Re,HL),e(HL,_Se),e(_Se,Yvt),e(HL,Zvt),e(HL,nie),e(nie,Kvt),e(HL,eFt),e(Re,oFt),e(Re,JL),e(JL,bSe),e(bSe,rFt),e(JL,tFt),e(JL,sie),e(sie,aFt),e(JL,nFt),e(Re,sFt),e(Re,YL),e(YL,vSe),e(vSe,lFt),e(YL,iFt),e(YL,lie),e(lie,dFt),e(YL,cFt),e(Re,mFt),e(Re,ZL),e(ZL,FSe),e(FSe,fFt),e(ZL,gFt),e(ZL,iie),e(iie,hFt),e(ZL,uFt),e(Re,pFt),e(Re,KL),e(KL,TSe),e(TSe,_Ft),e(KL,bFt),e(KL,die),e(die,vFt),e(KL,FFt),e(Re,TFt),e(Re,e8),e(e8,MSe),e(MSe,MFt),e(e8,EFt),e(e8,cie),e(cie,CFt),e(e8,wFt),e(Re,AFt),e(Re,o8),e(o8,ESe),e(ESe,LFt),e(o8,yFt),e(o8,mie),e(mie,xFt),e(o8,$Ft),e(Re,kFt),e(Re,r8),e(r8,CSe),e(CSe,SFt),e(r8,RFt),e(r8,fie),e(fie,PFt),e(r8,BFt),e(Re,IFt),e(Re,t8),e(t8,wSe),e(wSe,NFt),e(t8,qFt),e(t8,gie),e(gie,jFt),e(t8,DFt),e(nt,GFt),M(a8,nt,null),b(m,Zto,_),b(m,gf,_),e(gf,n8),e(n8,ASe),M(jP,ASe,null),e(gf,OFt),e(gf,LSe),e(LSe,VFt),b(m,Kto,_),b(m,$r,_),M(DP,$r,null),e($r,XFt),e($r,hf),e(hf,zFt),e(hf,hie),e(hie,QFt),e(hf,WFt),e(hf,uie),e(uie,UFt),e(hf,HFt),e($r,JFt),e($r,GP),e(GP,YFt),e(GP,ySe),e(ySe,ZFt),e(GP,KFt),e($r,eTt),e($r,ua),M(OP,ua,null),e(ua,oTt),e(ua,xSe),e(xSe,rTt),e(ua,tTt),e(ua,uf),e(uf,aTt),e(uf,$Se),e($Se,nTt),e(uf,sTt),e(uf,pie),e(pie,lTt),e(uf,iTt),e(ua,dTt),M(s8,ua,null),e($r,cTt),e($r,st),M(VP,st,null),e(st,mTt),e(st,kSe),e(kSe,fTt),e(st,gTt),e(st,Zn),e(Zn,hTt),e(Zn,SSe),e(SSe,uTt),e(Zn,pTt),e(Zn,RSe),e(RSe,_Tt),e(Zn,bTt),e(Zn,PSe),e(PSe,vTt),e(Zn,FTt),e(st,TTt),e(st,Pe),e(Pe,l8),e(l8,BSe),e(BSe,MTt),e(l8,ETt),e(l8,_ie),e(_ie,CTt),e(l8,wTt),e(Pe,ATt),e(Pe,i8),e(i8,ISe),e(ISe,LTt),e(i8,yTt),e(i8,bie),e(bie,xTt),e(i8,$Tt),e(Pe,kTt),e(Pe,d8),e(d8,NSe),e(NSe,STt),e(d8,RTt),e(d8,vie),e(vie,PTt),e(d8,BTt),e(Pe,ITt),e(Pe,c8),e(c8,qSe),e(qSe,NTt),e(c8,qTt),e(c8,Fie),e(Fie,jTt),e(c8,DTt),e(Pe,GTt),e(Pe,m8),e(m8,jSe),e(jSe,OTt),e(m8,VTt),e(m8,Tie),e(Tie,XTt),e(m8,zTt),e(Pe,QTt),e(Pe,f8),e(f8,DSe),e(DSe,WTt),e(f8,UTt),e(f8,Mie),e(Mie,HTt),e(f8,JTt),e(Pe,YTt),e(Pe,g8),e(g8,GSe),e(GSe,ZTt),e(g8,KTt),e(g8,Eie),e(Eie,eMt),e(g8,oMt),e(Pe,rMt),e(Pe,h8),e(h8,OSe),e(OSe,tMt),e(h8,aMt),e(h8,Cie),e(Cie,nMt),e(h8,sMt),e(Pe,lMt),e(Pe,u8),e(u8,VSe),e(VSe,iMt),e(u8,dMt),e(u8,wie),e(wie,cMt),e(u8,mMt),e(Pe,fMt),e(Pe,p8),e(p8,XSe),e(XSe,gMt),e(p8,hMt),e(p8,Aie),e(Aie,uMt),e(p8,pMt),e(st,_Mt),M(_8,st,null),b(m,eao,_),b(m,pf,_),e(pf,b8),e(b8,zSe),M(XP,zSe,null),e(pf,bMt),e(pf,QSe),e(QSe,vMt),b(m,oao,_),b(m,kr,_),M(zP,kr,null),e(kr,FMt),e(kr,_f),e(_f,TMt),e(_f,Lie),e(Lie,MMt),e(_f,EMt),e(_f,yie),e(yie,CMt),e(_f,wMt),e(kr,AMt),e(kr,QP),e(QP,LMt),e(QP,WSe),e(WSe,yMt),e(QP,xMt),e(kr,$Mt),e(kr,pa),M(WP,pa,null),e(pa,kMt),e(pa,USe),e(USe,SMt),e(pa,RMt),e(pa,bf),e(bf,PMt),e(bf,HSe),e(HSe,BMt),e(bf,IMt),e(bf,xie),e(xie,NMt),e(bf,qMt),e(pa,jMt),M(v8,pa,null),e(kr,DMt),e(kr,lt),M(UP,lt,null),e(lt,GMt),e(lt,JSe),e(JSe,OMt),e(lt,VMt),e(lt,Kn),e(Kn,XMt),e(Kn,YSe),e(YSe,zMt),e(Kn,QMt),e(Kn,ZSe),e(ZSe,WMt),e(Kn,UMt),e(Kn,KSe),e(KSe,HMt),e(Kn,JMt),e(lt,YMt),e(lt,ze),e(ze,F8),e(F8,eRe),e(eRe,ZMt),e(F8,KMt),e(F8,$ie),e($ie,eEt),e(F8,oEt),e(ze,rEt),e(ze,T8),e(T8,oRe),e(oRe,tEt),e(T8,aEt),e(T8,kie),e(kie,nEt),e(T8,sEt),e(ze,lEt),e(ze,M8),e(M8,rRe),e(rRe,iEt),e(M8,dEt),e(M8,Sie),e(Sie,cEt),e(M8,mEt),e(ze,fEt),e(ze,E8),e(E8,tRe),e(tRe,gEt),e(E8,hEt),e(E8,Rie),e(Rie,uEt),e(E8,pEt),e(ze,_Et),e(ze,C8),e(C8,aRe),e(aRe,bEt),e(C8,vEt),e(C8,Pie),e(Pie,FEt),e(C8,TEt),e(ze,MEt),e(ze,w8),e(w8,nRe),e(nRe,EEt),e(w8,CEt),e(w8,Bie),e(Bie,wEt),e(w8,AEt),e(ze,LEt),e(ze,A8),e(A8,sRe),e(sRe,yEt),e(A8,xEt),e(A8,Iie),e(Iie,$Et),e(A8,kEt),e(ze,SEt),e(ze,L8),e(L8,lRe),e(lRe,REt),e(L8,PEt),e(L8,Nie),e(Nie,BEt),e(L8,IEt),e(lt,NEt),M(y8,lt,null),b(m,rao,_),b(m,vf,_),e(vf,x8),e(x8,iRe),M(HP,iRe,null),e(vf,qEt),e(vf,dRe),e(dRe,jEt),b(m,tao,_),b(m,Sr,_),M(JP,Sr,null),e(Sr,DEt),e(Sr,Ff),e(Ff,GEt),e(Ff,qie),e(qie,OEt),e(Ff,VEt),e(Ff,jie),e(jie,XEt),e(Ff,zEt),e(Sr,QEt),e(Sr,YP),e(YP,WEt),e(YP,cRe),e(cRe,UEt),e(YP,HEt),e(Sr,JEt),e(Sr,_a),M(ZP,_a,null),e(_a,YEt),e(_a,mRe),e(mRe,ZEt),e(_a,KEt),e(_a,Tf),e(Tf,e4t),e(Tf,fRe),e(fRe,o4t),e(Tf,r4t),e(Tf,Die),e(Die,t4t),e(Tf,a4t),e(_a,n4t),M($8,_a,null),e(Sr,s4t),e(Sr,it),M(KP,it,null),e(it,l4t),e(it,gRe),e(gRe,i4t),e(it,d4t),e(it,es),e(es,c4t),e(es,hRe),e(hRe,m4t),e(es,f4t),e(es,uRe),e(uRe,g4t),e(es,h4t),e(es,pRe),e(pRe,u4t),e(es,p4t),e(it,_4t),e(it,Qe),e(Qe,k8),e(k8,_Re),e(_Re,b4t),e(k8,v4t),e(k8,Gie),e(Gie,F4t),e(k8,T4t),e(Qe,M4t),e(Qe,S8),e(S8,bRe),e(bRe,E4t),e(S8,C4t),e(S8,Oie),e(Oie,w4t),e(S8,A4t),e(Qe,L4t),e(Qe,R8),e(R8,vRe),e(vRe,y4t),e(R8,x4t),e(R8,Vie),e(Vie,$4t),e(R8,k4t),e(Qe,S4t),e(Qe,P8),e(P8,FRe),e(FRe,R4t),e(P8,P4t),e(P8,Xie),e(Xie,B4t),e(P8,I4t),e(Qe,N4t),e(Qe,B8),e(B8,TRe),e(TRe,q4t),e(B8,j4t),e(B8,zie),e(zie,D4t),e(B8,G4t),e(Qe,O4t),e(Qe,I8),e(I8,MRe),e(MRe,V4t),e(I8,X4t),e(I8,Qie),e(Qie,z4t),e(I8,Q4t),e(Qe,W4t),e(Qe,N8),e(N8,ERe),e(ERe,U4t),e(N8,H4t),e(N8,Wie),e(Wie,J4t),e(N8,Y4t),e(Qe,Z4t),e(Qe,q8),e(q8,CRe),e(CRe,K4t),e(q8,eCt),e(q8,Uie),e(Uie,oCt),e(q8,rCt),e(it,tCt),M(j8,it,null),b(m,aao,_),b(m,Mf,_),e(Mf,D8),e(D8,wRe),M(eB,wRe,null),e(Mf,aCt),e(Mf,ARe),e(ARe,nCt),b(m,nao,_),b(m,Rr,_),M(oB,Rr,null),e(Rr,sCt),e(Rr,Ef),e(Ef,lCt),e(Ef,Hie),e(Hie,iCt),e(Ef,dCt),e(Ef,Jie),e(Jie,cCt),e(Ef,mCt),e(Rr,fCt),e(Rr,rB),e(rB,gCt),e(rB,LRe),e(LRe,hCt),e(rB,uCt),e(Rr,pCt),e(Rr,ba),M(tB,ba,null),e(ba,_Ct),e(ba,yRe),e(yRe,bCt),e(ba,vCt),e(ba,Cf),e(Cf,FCt),e(Cf,xRe),e(xRe,TCt),e(Cf,MCt),e(Cf,Yie),e(Yie,ECt),e(Cf,CCt),e(ba,wCt),M(G8,ba,null),e(Rr,ACt),e(Rr,dt),M(aB,dt,null),e(dt,LCt),e(dt,$Re),e($Re,yCt),e(dt,xCt),e(dt,os),e(os,$Ct),e(os,kRe),e(kRe,kCt),e(os,SCt),e(os,SRe),e(SRe,RCt),e(os,PCt),e(os,RRe),e(RRe,BCt),e(os,ICt),e(dt,NCt),e(dt,PRe),e(PRe,O8),e(O8,BRe),e(BRe,qCt),e(O8,jCt),e(O8,Zie),e(Zie,DCt),e(O8,GCt),e(dt,OCt),M(V8,dt,null),b(m,sao,_),b(m,wf,_),e(wf,X8),e(X8,IRe),M(nB,IRe,null),e(wf,VCt),e(wf,NRe),e(NRe,XCt),b(m,lao,_),b(m,Pr,_),M(sB,Pr,null),e(Pr,zCt),e(Pr,Af),e(Af,QCt),e(Af,Kie),e(Kie,WCt),e(Af,UCt),e(Af,ede),e(ede,HCt),e(Af,JCt),e(Pr,YCt),e(Pr,lB),e(lB,ZCt),e(lB,qRe),e(qRe,KCt),e(lB,e3t),e(Pr,o3t),e(Pr,va),M(iB,va,null),e(va,r3t),e(va,jRe),e(jRe,t3t),e(va,a3t),e(va,Lf),e(Lf,n3t),e(Lf,DRe),e(DRe,s3t),e(Lf,l3t),e(Lf,ode),e(ode,i3t),e(Lf,d3t),e(va,c3t),M(z8,va,null),e(Pr,m3t),e(Pr,ct),M(dB,ct,null),e(ct,f3t),e(ct,GRe),e(GRe,g3t),e(ct,h3t),e(ct,rs),e(rs,u3t),e(rs,ORe),e(ORe,p3t),e(rs,_3t),e(rs,VRe),e(VRe,b3t),e(rs,v3t),e(rs,XRe),e(XRe,F3t),e(rs,T3t),e(ct,M3t),e(ct,cB),e(cB,Q8),e(Q8,zRe),e(zRe,E3t),e(Q8,C3t),e(Q8,rde),e(rde,w3t),e(Q8,A3t),e(cB,L3t),e(cB,W8),e(W8,QRe),e(QRe,y3t),e(W8,x3t),e(W8,tde),e(tde,$3t),e(W8,k3t),e(ct,S3t),M(U8,ct,null),b(m,iao,_),b(m,yf,_),e(yf,H8),e(H8,WRe),M(mB,WRe,null),e(yf,R3t),e(yf,URe),e(URe,P3t),b(m,dao,_),b(m,Br,_),M(fB,Br,null),e(Br,B3t),e(Br,xf),e(xf,I3t),e(xf,ade),e(ade,N3t),e(xf,q3t),e(xf,nde),e(nde,j3t),e(xf,D3t),e(Br,G3t),e(Br,gB),e(gB,O3t),e(gB,HRe),e(HRe,V3t),e(gB,X3t),e(Br,z3t),e(Br,Fa),M(hB,Fa,null),e(Fa,Q3t),e(Fa,JRe),e(JRe,W3t),e(Fa,U3t),e(Fa,$f),e($f,H3t),e($f,YRe),e(YRe,J3t),e($f,Y3t),e($f,sde),e(sde,Z3t),e($f,K3t),e(Fa,e5t),M(J8,Fa,null),e(Br,o5t),e(Br,mt),M(uB,mt,null),e(mt,r5t),e(mt,ZRe),e(ZRe,t5t),e(mt,a5t),e(mt,ts),e(ts,n5t),e(ts,KRe),e(KRe,s5t),e(ts,l5t),e(ts,ePe),e(ePe,i5t),e(ts,d5t),e(ts,oPe),e(oPe,c5t),e(ts,m5t),e(mt,f5t),e(mt,rPe),e(rPe,Y8),e(Y8,tPe),e(tPe,g5t),e(Y8,h5t),e(Y8,lde),e(lde,u5t),e(Y8,p5t),e(mt,_5t),M(Z8,mt,null),cao=!0},p(m,[_]){const pB={};_&2&&(pB.$$scope={dirty:_,ctx:m}),jf.$set(pB);const aPe={};_&2&&(aPe.$$scope={dirty:_,ctx:m}),gu.$set(aPe);const nPe={};_&2&&(nPe.$$scope={dirty:_,ctx:m}),Yu.$set(nPe);const sPe={};_&2&&(sPe.$$scope={dirty:_,ctx:m}),Vp.$set(sPe);const _B={};_&2&&(_B.$$scope={dirty:_,ctx:m}),Xp.$set(_B);const lPe={};_&2&&(lPe.$$scope={dirty:_,ctx:m}),p_.$set(lPe);const as={};_&2&&(as.$$scope={dirty:_,ctx:m}),__.$set(as);const iPe={};_&2&&(iPe.$$scope={dirty:_,ctx:m}),F_.$set(iPe);const dPe={};_&2&&(dPe.$$scope={dirty:_,ctx:m}),G2.$set(dPe);const cPe={};_&2&&(cPe.$$scope={dirty:_,ctx:m}),V2.$set(cPe);const bB={};_&2&&(bB.$$scope={dirty:_,ctx:m}),jb.$set(bB);const mPe={};_&2&&(mPe.$$scope={dirty:_,ctx:m}),Gb.$set(mPe);const vB={};_&2&&(vB.$$scope={dirty:_,ctx:m}),kv.$set(vB);const fPe={};_&2&&(fPe.$$scope={dirty:_,ctx:m}),Rv.$set(fPe);const FB={};_&2&&(FB.$$scope={dirty:_,ctx:m}),FF.$set(FB);const gPe={};_&2&&(gPe.$$scope={dirty:_,ctx:m}),MF.$set(gPe);const hPe={};_&2&&(hPe.$$scope={dirty:_,ctx:m}),XF.$set(hPe);const uPe={};_&2&&(uPe.$$scope={dirty:_,ctx:m}),QF.$set(uPe);const kf={};_&2&&(kf.$$scope={dirty:_,ctx:m}),JT.$set(kf);const pPe={};_&2&&(pPe.$$scope={dirty:_,ctx:m}),ZT.$set(pPe);const _Pe={};_&2&&(_Pe.$$scope={dirty:_,ctx:m}),SM.$set(_Pe);const bPe={};_&2&&(bPe.$$scope={dirty:_,ctx:m}),PM.$set(bPe);const TB={};_&2&&(TB.$$scope={dirty:_,ctx:m}),VM.$set(TB);const vPe={};_&2&&(vPe.$$scope={dirty:_,ctx:m}),zM.$set(vPe);const FPe={};_&2&&(FPe.$$scope={dirty:_,ctx:m}),PE.$set(FPe);const TPe={};_&2&&(TPe.$$scope={dirty:_,ctx:m}),IE.$set(TPe);const pt={};_&2&&(pt.$$scope={dirty:_,ctx:m}),S4.$set(pt);const MB={};_&2&&(MB.$$scope={dirty:_,ctx:m}),P4.$set(MB);const MPe={};_&2&&(MPe.$$scope={dirty:_,ctx:m}),N4.$set(MPe);const EB={};_&2&&(EB.$$scope={dirty:_,ctx:m}),j4.$set(EB);const EPe={};_&2&&(EPe.$$scope={dirty:_,ctx:m}),X4.$set(EPe);const _t={};_&2&&(_t.$$scope={dirty:_,ctx:m}),Q4.$set(_t);const CPe={};_&2&&(CPe.$$scope={dirty:_,ctx:m}),dC.$set(CPe);const Sf={};_&2&&(Sf.$$scope={dirty:_,ctx:m}),mC.$set(Sf);const wPe={};_&2&&(wPe.$$scope={dirty:_,ctx:m}),hC.$set(wPe);const APe={};_&2&&(APe.$$scope={dirty:_,ctx:m}),pC.$set(APe);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),vC.$set(L);const K8={};_&2&&(K8.$$scope={dirty:_,ctx:m}),TC.$set(K8);const LPe={};_&2&&(LPe.$$scope={dirty:_,ctx:m}),CC.$set(LPe);const yPe={};_&2&&(yPe.$$scope={dirty:_,ctx:m}),AC.$set(yPe);const ey={};_&2&&(ey.$$scope={dirty:_,ctx:m}),NC.$set(ey);const xPe={};_&2&&(xPe.$$scope={dirty:_,ctx:m}),jC.$set(xPe);const $Pe={};_&2&&($Pe.$$scope={dirty:_,ctx:m}),QC.$set($Pe);const oy={};_&2&&(oy.$$scope={dirty:_,ctx:m}),UC.$set(oy);const kPe={};_&2&&(kPe.$$scope={dirty:_,ctx:m}),s3.$set(kPe);const SPe={};_&2&&(SPe.$$scope={dirty:_,ctx:m}),i3.$set(SPe);const ry={};_&2&&(ry.$$scope={dirty:_,ctx:m}),g3.$set(ry);const RPe={};_&2&&(RPe.$$scope={dirty:_,ctx:m}),u3.$set(RPe);const PPe={};_&2&&(PPe.$$scope={dirty:_,ctx:m}),M3.$set(PPe);const ty={};_&2&&(ty.$$scope={dirty:_,ctx:m}),C3.$set(ty);const BPe={};_&2&&(BPe.$$scope={dirty:_,ctx:m}),$3.$set(BPe);const IPe={};_&2&&(IPe.$$scope={dirty:_,ctx:m}),S3.$set(IPe);const ay={};_&2&&(ay.$$scope={dirty:_,ctx:m}),q3.$set(ay);const NPe={};_&2&&(NPe.$$scope={dirty:_,ctx:m}),D3.$set(NPe);const qPe={};_&2&&(qPe.$$scope={dirty:_,ctx:m}),V3.$set(qPe);const ny={};_&2&&(ny.$$scope={dirty:_,ctx:m}),z3.$set(ny);const jPe={};_&2&&(jPe.$$scope={dirty:_,ctx:m}),Z3.$set(jPe);const DPe={};_&2&&(DPe.$$scope={dirty:_,ctx:m}),e5.$set(DPe);const sy={};_&2&&(sy.$$scope={dirty:_,ctx:m}),t5.$set(sy);const GPe={};_&2&&(GPe.$$scope={dirty:_,ctx:m}),n5.$set(GPe);const OPe={};_&2&&(OPe.$$scope={dirty:_,ctx:m}),i5.$set(OPe);const ly={};_&2&&(ly.$$scope={dirty:_,ctx:m}),c5.$set(ly);const VPe={};_&2&&(VPe.$$scope={dirty:_,ctx:m}),g0.$set(VPe);const XPe={};_&2&&(XPe.$$scope={dirty:_,ctx:m}),u0.$set(XPe);const iy={};_&2&&(iy.$$scope={dirty:_,ctx:m}),j0.$set(iy);const zPe={};_&2&&(zPe.$$scope={dirty:_,ctx:m}),G0.$set(zPe);const QPe={};_&2&&(QPe.$$scope={dirty:_,ctx:m}),rw.$set(QPe);const dy={};_&2&&(dy.$$scope={dirty:_,ctx:m}),aw.$set(dy);const WPe={};_&2&&(WPe.$$scope={dirty:_,ctx:m}),hw.$set(WPe);const UPe={};_&2&&(UPe.$$scope={dirty:_,ctx:m}),pw.$set(UPe);const cy={};_&2&&(cy.$$scope={dirty:_,ctx:m}),Fw.$set(cy);const HPe={};_&2&&(HPe.$$scope={dirty:_,ctx:m}),Mw.$set(HPe);const JPe={};_&2&&(JPe.$$scope={dirty:_,ctx:m}),Vw.$set(JPe);const my={};_&2&&(my.$$scope={dirty:_,ctx:m}),zw.$set(my);const YPe={};_&2&&(YPe.$$scope={dirty:_,ctx:m}),rA.$set(YPe);const ZPe={};_&2&&(ZPe.$$scope={dirty:_,ctx:m}),aA.$set(ZPe);const fy={};_&2&&(fy.$$scope={dirty:_,ctx:m}),SA.$set(fy);const KPe={};_&2&&(KPe.$$scope={dirty:_,ctx:m}),PA.$set(KPe);const eBe={};_&2&&(eBe.$$scope={dirty:_,ctx:m}),ZA.$set(eBe);const gy={};_&2&&(gy.$$scope={dirty:_,ctx:m}),e6.$set(gy);const oBe={};_&2&&(oBe.$$scope={dirty:_,ctx:m}),t6.$set(oBe);const rBe={};_&2&&(rBe.$$scope={dirty:_,ctx:m}),n6.$set(rBe);const hy={};_&2&&(hy.$$scope={dirty:_,ctx:m}),l6.$set(hy);const tBe={};_&2&&(tBe.$$scope={dirty:_,ctx:m}),d6.$set(tBe);const aBe={};_&2&&(aBe.$$scope={dirty:_,ctx:m}),m6.$set(aBe);const uy={};_&2&&(uy.$$scope={dirty:_,ctx:m}),g6.$set(uy);const nBe={};_&2&&(nBe.$$scope={dirty:_,ctx:m}),B6.$set(nBe);const sBe={};_&2&&(sBe.$$scope={dirty:_,ctx:m}),N6.$set(sBe);const py={};_&2&&(py.$$scope={dirty:_,ctx:m}),n7.$set(py);const lBe={};_&2&&(lBe.$$scope={dirty:_,ctx:m}),l7.$set(lBe);const iBe={};_&2&&(iBe.$$scope={dirty:_,ctx:m}),d7.$set(iBe);const _y={};_&2&&(_y.$$scope={dirty:_,ctx:m}),m7.$set(_y);const dBe={};_&2&&(dBe.$$scope={dirty:_,ctx:m}),h7.$set(dBe);const cBe={};_&2&&(cBe.$$scope={dirty:_,ctx:m}),p7.$set(cBe);const by={};_&2&&(by.$$scope={dirty:_,ctx:m}),X7.$set(by);const mBe={};_&2&&(mBe.$$scope={dirty:_,ctx:m}),Q7.$set(mBe);const fBe={};_&2&&(fBe.$$scope={dirty:_,ctx:m}),tL.$set(fBe);const vy={};_&2&&(vy.$$scope={dirty:_,ctx:m}),nL.$set(vy);const gBe={};_&2&&(gBe.$$scope={dirty:_,ctx:m}),vL.$set(gBe);const hBe={};_&2&&(hBe.$$scope={dirty:_,ctx:m}),TL.$set(hBe);const Fy={};_&2&&(Fy.$$scope={dirty:_,ctx:m}),SL.$set(Fy);const uBe={};_&2&&(uBe.$$scope={dirty:_,ctx:m}),PL.$set(uBe);const pBe={};_&2&&(pBe.$$scope={dirty:_,ctx:m}),zL.$set(pBe);const Ty={};_&2&&(Ty.$$scope={dirty:_,ctx:m}),WL.$set(Ty);const _Be={};_&2&&(_Be.$$scope={dirty:_,ctx:m}),a8.$set(_Be);const bBe={};_&2&&(bBe.$$scope={dirty:_,ctx:m}),s8.$set(bBe);const My={};_&2&&(My.$$scope={dirty:_,ctx:m}),_8.$set(My);const vBe={};_&2&&(vBe.$$scope={dirty:_,ctx:m}),v8.$set(vBe);const FBe={};_&2&&(FBe.$$scope={dirty:_,ctx:m}),y8.$set(FBe);const Ey={};_&2&&(Ey.$$scope={dirty:_,ctx:m}),$8.$set(Ey);const TBe={};_&2&&(TBe.$$scope={dirty:_,ctx:m}),j8.$set(TBe);const MBe={};_&2&&(MBe.$$scope={dirty:_,ctx:m}),G8.$set(MBe);const Cy={};_&2&&(Cy.$$scope={dirty:_,ctx:m}),V8.$set(Cy);const EBe={};_&2&&(EBe.$$scope={dirty:_,ctx:m}),z8.$set(EBe);const CBe={};_&2&&(CBe.$$scope={dirty:_,ctx:m}),U8.$set(CBe);const wy={};_&2&&(wy.$$scope={dirty:_,ctx:m}),J8.$set(wy);const wBe={};_&2&&(wBe.$$scope={dirty:_,ctx:m}),Z8.$set(wBe)},i(m){cao||(E(d.$$.fragment,m),E(Ja.$$.fragment,m),E(Ix.$$.fragment,m),E(Nx.$$.fragment,m),E(jf.$$.fragment,m),E(qx.$$.fragment,m),E(jx.$$.fragment,m),E(Ox.$$.fragment,m),E(gu.$$.fragment,m),E(Vx.$$.fragment,m),E(Xx.$$.fragment,m),E(zx.$$.fragment,m),E(Ux.$$.fragment,m),E(Yu.$$.fragment,m),E(Hx.$$.fragment,m),E(Jx.$$.fragment,m),E(Yx.$$.fragment,m),E(e$.$$.fragment,m),E(Vp.$$.fragment,m),E(Xp.$$.fragment,m),E(o$.$$.fragment,m),E(r$.$$.fragment,m),E(t$.$$.fragment,m),E(s$.$$.fragment,m),E(p_.$$.fragment,m),E(__.$$.fragment,m),E(l$.$$.fragment,m),E(i$.$$.fragment,m),E(d$.$$.fragment,m),E(m$.$$.fragment,m),E(F_.$$.fragment,m),E(f$.$$.fragment,m),E(G2.$$.fragment,m),E(g$.$$.fragment,m),E(h$.$$.fragment,m),E(p$.$$.fragment,m),E(V2.$$.fragment,m),E(_$.$$.fragment,m),E(jb.$$.fragment,m),E(b$.$$.fragment,m),E(v$.$$.fragment,m),E(T$.$$.fragment,m),E(Gb.$$.fragment,m),E(M$.$$.fragment,m),E(kv.$$.fragment,m),E(E$.$$.fragment,m),E(C$.$$.fragment,m),E(A$.$$.fragment,m),E(Rv.$$.fragment,m),E(L$.$$.fragment,m),E(FF.$$.fragment,m),E(y$.$$.fragment,m),E(x$.$$.fragment,m),E(k$.$$.fragment,m),E(MF.$$.fragment,m),E(S$.$$.fragment,m),E(XF.$$.fragment,m),E(R$.$$.fragment,m),E(P$.$$.fragment,m),E(I$.$$.fragment,m),E(QF.$$.fragment,m),E(N$.$$.fragment,m),E(JT.$$.fragment,m),E(q$.$$.fragment,m),E(j$.$$.fragment,m),E(G$.$$.fragment,m),E(ZT.$$.fragment,m),E(O$.$$.fragment,m),E(SM.$$.fragment,m),E(V$.$$.fragment,m),E(X$.$$.fragment,m),E(Q$.$$.fragment,m),E(PM.$$.fragment,m),E(W$.$$.fragment,m),E(VM.$$.fragment,m),E(U$.$$.fragment,m),E(H$.$$.fragment,m),E(Y$.$$.fragment,m),E(zM.$$.fragment,m),E(Z$.$$.fragment,m),E(PE.$$.fragment,m),E(K$.$$.fragment,m),E(ek.$$.fragment,m),E(rk.$$.fragment,m),E(IE.$$.fragment,m),E(tk.$$.fragment,m),E(S4.$$.fragment,m),E(ak.$$.fragment,m),E(nk.$$.fragment,m),E(lk.$$.fragment,m),E(P4.$$.fragment,m),E(ik.$$.fragment,m),E(N4.$$.fragment,m),E(dk.$$.fragment,m),E(ck.$$.fragment,m),E(fk.$$.fragment,m),E(j4.$$.fragment,m),E(gk.$$.fragment,m),E(X4.$$.fragment,m),E(hk.$$.fragment,m),E(uk.$$.fragment,m),E(_k.$$.fragment,m),E(Q4.$$.fragment,m),E(bk.$$.fragment,m),E(dC.$$.fragment,m),E(vk.$$.fragment,m),E(Fk.$$.fragment,m),E(Mk.$$.fragment,m),E(mC.$$.fragment,m),E(Ek.$$.fragment,m),E(hC.$$.fragment,m),E(Ck.$$.fragment,m),E(wk.$$.fragment,m),E(Lk.$$.fragment,m),E(pC.$$.fragment,m),E(yk.$$.fragment,m),E(vC.$$.fragment,m),E(xk.$$.fragment,m),E($k.$$.fragment,m),E(Sk.$$.fragment,m),E(TC.$$.fragment,m),E(Rk.$$.fragment,m),E(CC.$$.fragment,m),E(Pk.$$.fragment,m),E(Bk.$$.fragment,m),E(Nk.$$.fragment,m),E(AC.$$.fragment,m),E(qk.$$.fragment,m),E(NC.$$.fragment,m),E(jk.$$.fragment,m),E(Dk.$$.fragment,m),E(Ok.$$.fragment,m),E(jC.$$.fragment,m),E(Vk.$$.fragment,m),E(QC.$$.fragment,m),E(Xk.$$.fragment,m),E(zk.$$.fragment,m),E(Wk.$$.fragment,m),E(UC.$$.fragment,m),E(Uk.$$.fragment,m),E(s3.$$.fragment,m),E(Hk.$$.fragment,m),E(Jk.$$.fragment,m),E(Zk.$$.fragment,m),E(i3.$$.fragment,m),E(Kk.$$.fragment,m),E(g3.$$.fragment,m),E(eS.$$.fragment,m),E(oS.$$.fragment,m),E(tS.$$.fragment,m),E(u3.$$.fragment,m),E(aS.$$.fragment,m),E(M3.$$.fragment,m),E(nS.$$.fragment,m),E(sS.$$.fragment,m),E(iS.$$.fragment,m),E(C3.$$.fragment,m),E(dS.$$.fragment,m),E($3.$$.fragment,m),E(cS.$$.fragment,m),E(mS.$$.fragment,m),E(gS.$$.fragment,m),E(S3.$$.fragment,m),E(hS.$$.fragment,m),E(q3.$$.fragment,m),E(uS.$$.fragment,m),E(pS.$$.fragment,m),E(bS.$$.fragment,m),E(D3.$$.fragment,m),E(vS.$$.fragment,m),E(V3.$$.fragment,m),E(FS.$$.fragment,m),E(TS.$$.fragment,m),E(ES.$$.fragment,m),E(z3.$$.fragment,m),E(CS.$$.fragment,m),E(Z3.$$.fragment,m),E(wS.$$.fragment,m),E(AS.$$.fragment,m),E(yS.$$.fragment,m),E(e5.$$.fragment,m),E(xS.$$.fragment,m),E(t5.$$.fragment,m),E($S.$$.fragment,m),E(kS.$$.fragment,m),E(RS.$$.fragment,m),E(n5.$$.fragment,m),E(PS.$$.fragment,m),E(i5.$$.fragment,m),E(BS.$$.fragment,m),E(IS.$$.fragment,m),E(qS.$$.fragment,m),E(c5.$$.fragment,m),E(jS.$$.fragment,m),E(g0.$$.fragment,m),E(DS.$$.fragment,m),E(GS.$$.fragment,m),E(VS.$$.fragment,m),E(u0.$$.fragment,m),E(XS.$$.fragment,m),E(j0.$$.fragment,m),E(zS.$$.fragment,m),E(QS.$$.fragment,m),E(US.$$.fragment,m),E(G0.$$.fragment,m),E(HS.$$.fragment,m),E(rw.$$.fragment,m),E(JS.$$.fragment,m),E(YS.$$.fragment,m),E(KS.$$.fragment,m),E(aw.$$.fragment,m),E(eR.$$.fragment,m),E(hw.$$.fragment,m),E(oR.$$.fragment,m),E(rR.$$.fragment,m),E(aR.$$.fragment,m),E(pw.$$.fragment,m),E(nR.$$.fragment,m),E(Fw.$$.fragment,m),E(sR.$$.fragment,m),E(lR.$$.fragment,m),E(dR.$$.fragment,m),E(Mw.$$.fragment,m),E(cR.$$.fragment,m),E(Vw.$$.fragment,m),E(mR.$$.fragment,m),E(fR.$$.fragment,m),E(hR.$$.fragment,m),E(zw.$$.fragment,m),E(uR.$$.fragment,m),E(rA.$$.fragment,m),E(pR.$$.fragment,m),E(_R.$$.fragment,m),E(vR.$$.fragment,m),E(aA.$$.fragment,m),E(FR.$$.fragment,m),E(SA.$$.fragment,m),E(TR.$$.fragment,m),E(MR.$$.fragment,m),E(CR.$$.fragment,m),E(PA.$$.fragment,m),E(wR.$$.fragment,m),E(ZA.$$.fragment,m),E(AR.$$.fragment,m),E(LR.$$.fragment,m),E(xR.$$.fragment,m),E(e6.$$.fragment,m),E($R.$$.fragment,m),E(t6.$$.fragment,m),E(SR.$$.fragment,m),E(RR.$$.fragment,m),E(BR.$$.fragment,m),E(n6.$$.fragment,m),E(IR.$$.fragment,m),E(l6.$$.fragment,m),E(NR.$$.fragment,m),E(qR.$$.fragment,m),E(DR.$$.fragment,m),E(d6.$$.fragment,m),E(GR.$$.fragment,m),E(m6.$$.fragment,m),E(OR.$$.fragment,m),E(VR.$$.fragment,m),E(zR.$$.fragment,m),E(g6.$$.fragment,m),E(QR.$$.fragment,m),E(B6.$$.fragment,m),E(WR.$$.fragment,m),E(UR.$$.fragment,m),E(JR.$$.fragment,m),E(N6.$$.fragment,m),E(YR.$$.fragment,m),E(n7.$$.fragment,m),E(ZR.$$.fragment,m),E(KR.$$.fragment,m),E(oP.$$.fragment,m),E(l7.$$.fragment,m),E(rP.$$.fragment,m),E(d7.$$.fragment,m),E(tP.$$.fragment,m),E(aP.$$.fragment,m),E(sP.$$.fragment,m),E(m7.$$.fragment,m),E(lP.$$.fragment,m),E(h7.$$.fragment,m),E(dP.$$.fragment,m),E(cP.$$.fragment,m),E(fP.$$.fragment,m),E(p7.$$.fragment,m),E(gP.$$.fragment,m),E(X7.$$.fragment,m),E(hP.$$.fragment,m),E(uP.$$.fragment,m),E(_P.$$.fragment,m),E(Q7.$$.fragment,m),E(bP.$$.fragment,m),E(tL.$$.fragment,m),E(vP.$$.fragment,m),E(FP.$$.fragment,m),E(MP.$$.fragment,m),E(nL.$$.fragment,m),E(EP.$$.fragment,m),E(vL.$$.fragment,m),E(CP.$$.fragment,m),E(wP.$$.fragment,m),E(LP.$$.fragment,m),E(TL.$$.fragment,m),E(yP.$$.fragment,m),E(SL.$$.fragment,m),E(xP.$$.fragment,m),E($P.$$.fragment,m),E(SP.$$.fragment,m),E(PL.$$.fragment,m),E(RP.$$.fragment,m),E(zL.$$.fragment,m),E(PP.$$.fragment,m),E(BP.$$.fragment,m),E(NP.$$.fragment,m),E(WL.$$.fragment,m),E(qP.$$.fragment,m),E(a8.$$.fragment,m),E(jP.$$.fragment,m),E(DP.$$.fragment,m),E(OP.$$.fragment,m),E(s8.$$.fragment,m),E(VP.$$.fragment,m),E(_8.$$.fragment,m),E(XP.$$.fragment,m),E(zP.$$.fragment,m),E(WP.$$.fragment,m),E(v8.$$.fragment,m),E(UP.$$.fragment,m),E(y8.$$.fragment,m),E(HP.$$.fragment,m),E(JP.$$.fragment,m),E(ZP.$$.fragment,m),E($8.$$.fragment,m),E(KP.$$.fragment,m),E(j8.$$.fragment,m),E(eB.$$.fragment,m),E(oB.$$.fragment,m),E(tB.$$.fragment,m),E(G8.$$.fragment,m),E(aB.$$.fragment,m),E(V8.$$.fragment,m),E(nB.$$.fragment,m),E(sB.$$.fragment,m),E(iB.$$.fragment,m),E(z8.$$.fragment,m),E(dB.$$.fragment,m),E(U8.$$.fragment,m),E(mB.$$.fragment,m),E(fB.$$.fragment,m),E(hB.$$.fragment,m),E(J8.$$.fragment,m),E(uB.$$.fragment,m),E(Z8.$$.fragment,m),cao=!0)},o(m){C(d.$$.fragment,m),C(Ja.$$.fragment,m),C(Ix.$$.fragment,m),C(Nx.$$.fragment,m),C(jf.$$.fragment,m),C(qx.$$.fragment,m),C(jx.$$.fragment,m),C(Ox.$$.fragment,m),C(gu.$$.fragment,m),C(Vx.$$.fragment,m),C(Xx.$$.fragment,m),C(zx.$$.fragment,m),C(Ux.$$.fragment,m),C(Yu.$$.fragment,m),C(Hx.$$.fragment,m),C(Jx.$$.fragment,m),C(Yx.$$.fragment,m),C(e$.$$.fragment,m),C(Vp.$$.fragment,m),C(Xp.$$.fragment,m),C(o$.$$.fragment,m),C(r$.$$.fragment,m),C(t$.$$.fragment,m),C(s$.$$.fragment,m),C(p_.$$.fragment,m),C(__.$$.fragment,m),C(l$.$$.fragment,m),C(i$.$$.fragment,m),C(d$.$$.fragment,m),C(m$.$$.fragment,m),C(F_.$$.fragment,m),C(f$.$$.fragment,m),C(G2.$$.fragment,m),C(g$.$$.fragment,m),C(h$.$$.fragment,m),C(p$.$$.fragment,m),C(V2.$$.fragment,m),C(_$.$$.fragment,m),C(jb.$$.fragment,m),C(b$.$$.fragment,m),C(v$.$$.fragment,m),C(T$.$$.fragment,m),C(Gb.$$.fragment,m),C(M$.$$.fragment,m),C(kv.$$.fragment,m),C(E$.$$.fragment,m),C(C$.$$.fragment,m),C(A$.$$.fragment,m),C(Rv.$$.fragment,m),C(L$.$$.fragment,m),C(FF.$$.fragment,m),C(y$.$$.fragment,m),C(x$.$$.fragment,m),C(k$.$$.fragment,m),C(MF.$$.fragment,m),C(S$.$$.fragment,m),C(XF.$$.fragment,m),C(R$.$$.fragment,m),C(P$.$$.fragment,m),C(I$.$$.fragment,m),C(QF.$$.fragment,m),C(N$.$$.fragment,m),C(JT.$$.fragment,m),C(q$.$$.fragment,m),C(j$.$$.fragment,m),C(G$.$$.fragment,m),C(ZT.$$.fragment,m),C(O$.$$.fragment,m),C(SM.$$.fragment,m),C(V$.$$.fragment,m),C(X$.$$.fragment,m),C(Q$.$$.fragment,m),C(PM.$$.fragment,m),C(W$.$$.fragment,m),C(VM.$$.fragment,m),C(U$.$$.fragment,m),C(H$.$$.fragment,m),C(Y$.$$.fragment,m),C(zM.$$.fragment,m),C(Z$.$$.fragment,m),C(PE.$$.fragment,m),C(K$.$$.fragment,m),C(ek.$$.fragment,m),C(rk.$$.fragment,m),C(IE.$$.fragment,m),C(tk.$$.fragment,m),C(S4.$$.fragment,m),C(ak.$$.fragment,m),C(nk.$$.fragment,m),C(lk.$$.fragment,m),C(P4.$$.fragment,m),C(ik.$$.fragment,m),C(N4.$$.fragment,m),C(dk.$$.fragment,m),C(ck.$$.fragment,m),C(fk.$$.fragment,m),C(j4.$$.fragment,m),C(gk.$$.fragment,m),C(X4.$$.fragment,m),C(hk.$$.fragment,m),C(uk.$$.fragment,m),C(_k.$$.fragment,m),C(Q4.$$.fragment,m),C(bk.$$.fragment,m),C(dC.$$.fragment,m),C(vk.$$.fragment,m),C(Fk.$$.fragment,m),C(Mk.$$.fragment,m),C(mC.$$.fragment,m),C(Ek.$$.fragment,m),C(hC.$$.fragment,m),C(Ck.$$.fragment,m),C(wk.$$.fragment,m),C(Lk.$$.fragment,m),C(pC.$$.fragment,m),C(yk.$$.fragment,m),C(vC.$$.fragment,m),C(xk.$$.fragment,m),C($k.$$.fragment,m),C(Sk.$$.fragment,m),C(TC.$$.fragment,m),C(Rk.$$.fragment,m),C(CC.$$.fragment,m),C(Pk.$$.fragment,m),C(Bk.$$.fragment,m),C(Nk.$$.fragment,m),C(AC.$$.fragment,m),C(qk.$$.fragment,m),C(NC.$$.fragment,m),C(jk.$$.fragment,m),C(Dk.$$.fragment,m),C(Ok.$$.fragment,m),C(jC.$$.fragment,m),C(Vk.$$.fragment,m),C(QC.$$.fragment,m),C(Xk.$$.fragment,m),C(zk.$$.fragment,m),C(Wk.$$.fragment,m),C(UC.$$.fragment,m),C(Uk.$$.fragment,m),C(s3.$$.fragment,m),C(Hk.$$.fragment,m),C(Jk.$$.fragment,m),C(Zk.$$.fragment,m),C(i3.$$.fragment,m),C(Kk.$$.fragment,m),C(g3.$$.fragment,m),C(eS.$$.fragment,m),C(oS.$$.fragment,m),C(tS.$$.fragment,m),C(u3.$$.fragment,m),C(aS.$$.fragment,m),C(M3.$$.fragment,m),C(nS.$$.fragment,m),C(sS.$$.fragment,m),C(iS.$$.fragment,m),C(C3.$$.fragment,m),C(dS.$$.fragment,m),C($3.$$.fragment,m),C(cS.$$.fragment,m),C(mS.$$.fragment,m),C(gS.$$.fragment,m),C(S3.$$.fragment,m),C(hS.$$.fragment,m),C(q3.$$.fragment,m),C(uS.$$.fragment,m),C(pS.$$.fragment,m),C(bS.$$.fragment,m),C(D3.$$.fragment,m),C(vS.$$.fragment,m),C(V3.$$.fragment,m),C(FS.$$.fragment,m),C(TS.$$.fragment,m),C(ES.$$.fragment,m),C(z3.$$.fragment,m),C(CS.$$.fragment,m),C(Z3.$$.fragment,m),C(wS.$$.fragment,m),C(AS.$$.fragment,m),C(yS.$$.fragment,m),C(e5.$$.fragment,m),C(xS.$$.fragment,m),C(t5.$$.fragment,m),C($S.$$.fragment,m),C(kS.$$.fragment,m),C(RS.$$.fragment,m),C(n5.$$.fragment,m),C(PS.$$.fragment,m),C(i5.$$.fragment,m),C(BS.$$.fragment,m),C(IS.$$.fragment,m),C(qS.$$.fragment,m),C(c5.$$.fragment,m),C(jS.$$.fragment,m),C(g0.$$.fragment,m),C(DS.$$.fragment,m),C(GS.$$.fragment,m),C(VS.$$.fragment,m),C(u0.$$.fragment,m),C(XS.$$.fragment,m),C(j0.$$.fragment,m),C(zS.$$.fragment,m),C(QS.$$.fragment,m),C(US.$$.fragment,m),C(G0.$$.fragment,m),C(HS.$$.fragment,m),C(rw.$$.fragment,m),C(JS.$$.fragment,m),C(YS.$$.fragment,m),C(KS.$$.fragment,m),C(aw.$$.fragment,m),C(eR.$$.fragment,m),C(hw.$$.fragment,m),C(oR.$$.fragment,m),C(rR.$$.fragment,m),C(aR.$$.fragment,m),C(pw.$$.fragment,m),C(nR.$$.fragment,m),C(Fw.$$.fragment,m),C(sR.$$.fragment,m),C(lR.$$.fragment,m),C(dR.$$.fragment,m),C(Mw.$$.fragment,m),C(cR.$$.fragment,m),C(Vw.$$.fragment,m),C(mR.$$.fragment,m),C(fR.$$.fragment,m),C(hR.$$.fragment,m),C(zw.$$.fragment,m),C(uR.$$.fragment,m),C(rA.$$.fragment,m),C(pR.$$.fragment,m),C(_R.$$.fragment,m),C(vR.$$.fragment,m),C(aA.$$.fragment,m),C(FR.$$.fragment,m),C(SA.$$.fragment,m),C(TR.$$.fragment,m),C(MR.$$.fragment,m),C(CR.$$.fragment,m),C(PA.$$.fragment,m),C(wR.$$.fragment,m),C(ZA.$$.fragment,m),C(AR.$$.fragment,m),C(LR.$$.fragment,m),C(xR.$$.fragment,m),C(e6.$$.fragment,m),C($R.$$.fragment,m),C(t6.$$.fragment,m),C(SR.$$.fragment,m),C(RR.$$.fragment,m),C(BR.$$.fragment,m),C(n6.$$.fragment,m),C(IR.$$.fragment,m),C(l6.$$.fragment,m),C(NR.$$.fragment,m),C(qR.$$.fragment,m),C(DR.$$.fragment,m),C(d6.$$.fragment,m),C(GR.$$.fragment,m),C(m6.$$.fragment,m),C(OR.$$.fragment,m),C(VR.$$.fragment,m),C(zR.$$.fragment,m),C(g6.$$.fragment,m),C(QR.$$.fragment,m),C(B6.$$.fragment,m),C(WR.$$.fragment,m),C(UR.$$.fragment,m),C(JR.$$.fragment,m),C(N6.$$.fragment,m),C(YR.$$.fragment,m),C(n7.$$.fragment,m),C(ZR.$$.fragment,m),C(KR.$$.fragment,m),C(oP.$$.fragment,m),C(l7.$$.fragment,m),C(rP.$$.fragment,m),C(d7.$$.fragment,m),C(tP.$$.fragment,m),C(aP.$$.fragment,m),C(sP.$$.fragment,m),C(m7.$$.fragment,m),C(lP.$$.fragment,m),C(h7.$$.fragment,m),C(dP.$$.fragment,m),C(cP.$$.fragment,m),C(fP.$$.fragment,m),C(p7.$$.fragment,m),C(gP.$$.fragment,m),C(X7.$$.fragment,m),C(hP.$$.fragment,m),C(uP.$$.fragment,m),C(_P.$$.fragment,m),C(Q7.$$.fragment,m),C(bP.$$.fragment,m),C(tL.$$.fragment,m),C(vP.$$.fragment,m),C(FP.$$.fragment,m),C(MP.$$.fragment,m),C(nL.$$.fragment,m),C(EP.$$.fragment,m),C(vL.$$.fragment,m),C(CP.$$.fragment,m),C(wP.$$.fragment,m),C(LP.$$.fragment,m),C(TL.$$.fragment,m),C(yP.$$.fragment,m),C(SL.$$.fragment,m),C(xP.$$.fragment,m),C($P.$$.fragment,m),C(SP.$$.fragment,m),C(PL.$$.fragment,m),C(RP.$$.fragment,m),C(zL.$$.fragment,m),C(PP.$$.fragment,m),C(BP.$$.fragment,m),C(NP.$$.fragment,m),C(WL.$$.fragment,m),C(qP.$$.fragment,m),C(a8.$$.fragment,m),C(jP.$$.fragment,m),C(DP.$$.fragment,m),C(OP.$$.fragment,m),C(s8.$$.fragment,m),C(VP.$$.fragment,m),C(_8.$$.fragment,m),C(XP.$$.fragment,m),C(zP.$$.fragment,m),C(WP.$$.fragment,m),C(v8.$$.fragment,m),C(UP.$$.fragment,m),C(y8.$$.fragment,m),C(HP.$$.fragment,m),C(JP.$$.fragment,m),C(ZP.$$.fragment,m),C($8.$$.fragment,m),C(KP.$$.fragment,m),C(j8.$$.fragment,m),C(eB.$$.fragment,m),C(oB.$$.fragment,m),C(tB.$$.fragment,m),C(G8.$$.fragment,m),C(aB.$$.fragment,m),C(V8.$$.fragment,m),C(nB.$$.fragment,m),C(sB.$$.fragment,m),C(iB.$$.fragment,m),C(z8.$$.fragment,m),C(dB.$$.fragment,m),C(U8.$$.fragment,m),C(mB.$$.fragment,m),C(fB.$$.fragment,m),C(hB.$$.fragment,m),C(J8.$$.fragment,m),C(uB.$$.fragment,m),C(Z8.$$.fragment,m),cao=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(Pf),m&&t(bt),m&&t(Xe),m&&t(He),m&&t(If),w(Ja,m),m&&t(Je),m&&t(Ae),m&&t($o),m&&t(Ya),m&&t(Hoo),m&&t(_d),w(Ix),m&&t(Joo),m&&t(ds),m&&t(Yoo),w(Nx,m),m&&t(Zoo),m&&t(WI),m&&t(Koo),w(jf,m),m&&t(ero),m&&t(bd),w(qx),m&&t(oro),m&&t(ko),w(jx),w(Ox),w(gu),w(Vx),m&&t(rro),m&&t(Fd),w(Xx),m&&t(tro),m&&t(So),w(zx),w(Ux),w(Yu),w(Hx),m&&t(aro),m&&t(Td),w(Jx),m&&t(nro),m&&t(Ro),w(Yx),w(e$),w(Vp),w(Xp),w(o$),m&&t(sro),m&&t(Md),w(r$),m&&t(lro),m&&t(Po),w(t$),w(s$),w(p_),w(__),w(l$),m&&t(iro),m&&t(Cd),w(i$),m&&t(dro),m&&t(Bo),w(d$),w(m$),w(F_),w(f$),w(G2),m&&t(cro),m&&t(Ld),w(g$),m&&t(mro),m&&t(Io),w(h$),w(p$),w(V2),w(_$),w(jb),m&&t(fro),m&&t($d),w(b$),m&&t(gro),m&&t(No),w(v$),w(T$),w(Gb),w(M$),w(kv),m&&t(hro),m&&t(Rd),w(E$),m&&t(uro),m&&t(qo),w(C$),w(A$),w(Rv),w(L$),w(FF),m&&t(pro),m&&t(Id),w(y$),m&&t(_ro),m&&t(jo),w(x$),w(k$),w(MF),w(S$),w(XF),m&&t(bro),m&&t(jd),w(R$),m&&t(vro),m&&t(Do),w(P$),w(I$),w(QF),w(N$),w(JT),m&&t(Fro),m&&t(Od),w(q$),m&&t(Tro),m&&t(Go),w(j$),w(G$),w(ZT),w(O$),w(SM),m&&t(Mro),m&&t(zd),w(V$),m&&t(Ero),m&&t(Oo),w(X$),w(Q$),w(PM),w(W$),w(VM),m&&t(Cro),m&&t(Ud),w(U$),m&&t(wro),m&&t(Vo),w(H$),w(Y$),w(zM),w(Z$),w(PE),m&&t(Aro),m&&t(Yd),w(K$),m&&t(Lro),m&&t(Xo),w(ek),w(rk),w(IE),w(tk),w(S4),m&&t(yro),m&&t(ec),w(ak),m&&t(xro),m&&t(zo),w(nk),w(lk),w(P4),w(ik),w(N4),m&&t($ro),m&&t(tc),w(dk),m&&t(kro),m&&t(Qo),w(ck),w(fk),w(j4),w(gk),w(X4),m&&t(Sro),m&&t(lc),w(hk),m&&t(Rro),m&&t(Wo),w(uk),w(_k),w(Q4),w(bk),w(dC),m&&t(Pro),m&&t(cc),w(vk),m&&t(Bro),m&&t(Uo),w(Fk),w(Mk),w(mC),w(Ek),w(hC),m&&t(Iro),m&&t(gc),w(Ck),m&&t(Nro),m&&t(Ho),w(wk),w(Lk),w(pC),w(yk),w(vC),m&&t(qro),m&&t(pc),w(xk),m&&t(jro),m&&t(Jo),w($k),w(Sk),w(TC),w(Rk),w(CC),m&&t(Dro),m&&t(vc),w(Pk),m&&t(Gro),m&&t(Yo),w(Bk),w(Nk),w(AC),w(qk),w(NC),m&&t(Oro),m&&t(Mc),w(jk),m&&t(Vro),m&&t(Zo),w(Dk),w(Ok),w(jC),w(Vk),w(QC),m&&t(Xro),m&&t(wc),w(Xk),m&&t(zro),m&&t(Ko),w(zk),w(Wk),w(UC),w(Uk),w(s3),m&&t(Qro),m&&t(yc),w(Hk),m&&t(Wro),m&&t(er),w(Jk),w(Zk),w(i3),w(Kk),w(g3),m&&t(Uro),m&&t(Sc),w(eS),m&&t(Hro),m&&t(or),w(oS),w(tS),w(u3),w(aS),w(M3),m&&t(Jro),m&&t(Bc),w(nS),m&&t(Yro),m&&t(rr),w(sS),w(iS),w(C3),w(dS),w($3),m&&t(Zro),m&&t(qc),w(cS),m&&t(Kro),m&&t(tr),w(mS),w(gS),w(S3),w(hS),w(q3),m&&t(eto),m&&t(Gc),w(uS),m&&t(oto),m&&t(ar),w(pS),w(bS),w(D3),w(vS),w(V3),m&&t(rto),m&&t(Xc),w(FS),m&&t(tto),m&&t(nr),w(TS),w(ES),w(z3),w(CS),w(Z3),m&&t(ato),m&&t(Wc),w(wS),m&&t(nto),m&&t(sr),w(AS),w(yS),w(e5),w(xS),w(t5),m&&t(sto),m&&t(Jc),w($S),m&&t(lto),m&&t(lr),w(kS),w(RS),w(n5),w(PS),w(i5),m&&t(ito),m&&t(Kc),w(BS),m&&t(dto),m&&t(ir),w(IS),w(qS),w(c5),w(jS),w(g0),m&&t(cto),m&&t(rm),w(DS),m&&t(mto),m&&t(dr),w(GS),w(VS),w(u0),w(XS),w(j0),m&&t(fto),m&&t(nm),w(zS),m&&t(gto),m&&t(cr),w(QS),w(US),w(G0),w(HS),w(rw),m&&t(hto),m&&t(im),w(JS),m&&t(uto),m&&t(mr),w(YS),w(KS),w(aw),w(eR),w(hw),m&&t(pto),m&&t(mm),w(oR),m&&t(_to),m&&t(fr),w(rR),w(aR),w(pw),w(nR),w(Fw),m&&t(bto),m&&t(um),w(sR),m&&t(vto),m&&t(gr),w(lR),w(dR),w(Mw),w(cR),w(Vw),m&&t(Fto),m&&t(bm),w(mR),m&&t(Tto),m&&t(hr),w(fR),w(hR),w(zw),w(uR),w(rA),m&&t(Mto),m&&t(Tm),w(pR),m&&t(Eto),m&&t(ur),w(_R),w(vR),w(aA),w(FR),w(SA),m&&t(Cto),m&&t(Cm),w(TR),m&&t(wto),m&&t(pr),w(MR),w(CR),w(PA),w(wR),w(ZA),m&&t(Ato),m&&t(Lm),w(AR),m&&t(Lto),m&&t(_r),w(LR),w(xR),w(e6),w($R),w(t6),m&&t(yto),m&&t($m),w(SR),m&&t(xto),m&&t(br),w(RR),w(BR),w(n6),w(IR),w(l6),m&&t($to),m&&t(Rm),w(NR),m&&t(kto),m&&t(vr),w(qR),w(DR),w(d6),w(GR),w(m6),m&&t(Sto),m&&t(Im),w(OR),m&&t(Rto),m&&t(Fr),w(VR),w(zR),w(g6),w(QR),w(B6),m&&t(Pto),m&&t(jm),w(WR),m&&t(Bto),m&&t(Tr),w(UR),w(JR),w(N6),w(YR),w(n7),m&&t(Ito),m&&t(Om),w(ZR),m&&t(Nto),m&&t(Mr),w(KR),w(oP),w(l7),w(rP),w(d7),m&&t(qto),m&&t(zm),w(tP),m&&t(jto),m&&t(Er),w(aP),w(sP),w(m7),w(lP),w(h7),m&&t(Dto),m&&t(Um),w(dP),m&&t(Gto),m&&t(Cr),w(cP),w(fP),w(p7),w(gP),w(X7),m&&t(Oto),m&&t(Ym),w(hP),m&&t(Vto),m&&t(wr),w(uP),w(_P),w(Q7),w(bP),w(tL),m&&t(Xto),m&&t(ef),w(vP),m&&t(zto),m&&t(Ar),w(FP),w(MP),w(nL),w(EP),w(vL),m&&t(Qto),m&&t(tf),w(CP),m&&t(Wto),m&&t(Lr),w(wP),w(LP),w(TL),w(yP),w(SL),m&&t(Uto),m&&t(sf),w(xP),m&&t(Hto),m&&t(yr),w($P),w(SP),w(PL),w(RP),w(zL),m&&t(Jto),m&&t(cf),w(PP),m&&t(Yto),m&&t(xr),w(BP),w(NP),w(WL),w(qP),w(a8),m&&t(Zto),m&&t(gf),w(jP),m&&t(Kto),m&&t($r),w(DP),w(OP),w(s8),w(VP),w(_8),m&&t(eao),m&&t(pf),w(XP),m&&t(oao),m&&t(kr),w(zP),w(WP),w(v8),w(UP),w(y8),m&&t(rao),m&&t(vf),w(HP),m&&t(tao),m&&t(Sr),w(JP),w(ZP),w($8),w(KP),w(j8),m&&t(aao),m&&t(Mf),w(eB),m&&t(nao),m&&t(Rr),w(oB),w(tB),w(G8),w(aB),w(V8),m&&t(sao),m&&t(wf),w(nB),m&&t(lao),m&&t(Pr),w(sB),w(iB),w(z8),w(dB),w(U8),m&&t(iao),m&&t(yf),w(mB),m&&t(dao),m&&t(Br),w(fB),w(hB),w(J8),w(uB),w(Z8)}}}const S4a={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForDocumentQuestionAnswering",title:"AutoModelForDocumentQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.AutoModelForZeroShotObjectDetection",title:"AutoModelForZeroShotObjectDetection"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForDocumentQuestionAnswering",title:"TFAutoModelForDocumentQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function R4a($){return TMa(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class D4a extends _Ma{constructor(g){super();bMa(this,g,R4a,k4a,vMa,{})}}export{D4a as default,S4a as metadata};
