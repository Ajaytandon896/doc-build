import{S as aQt,i as nQt,s as sQt,e as a,k as l,w as F,t as o,M as lQt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as iQt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as Brt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function dQt($){let g,v,u,f,p,d,h,Eo,Ai,Sm,st,Li,yi,KL,Rm,Oe,Qe,xi,Pn,ZL,Bn,In,ey,$i,Nn,oy,ki,Pm,Sa;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Ai=a("code"),Sm=o("model_type"),st=o(" attribute is set to the same key you use when registering the config (here "),Li=a("code"),yi=o('"new-model"'),KL=o(")."),Rm=l(),Oe=a("p"),Qe=o("Likewise, if your "),xi=a("code"),Pn=o("NewModel"),ZL=o(" is a subclass of "),Bn=a("a"),In=o("PreTrainedModel"),ey=o(`, make sure its
`),$i=a("code"),Nn=o("config_class"),oy=o(` attribute is set to the same class you use when registering the model (here
`),ki=a("code"),Pm=o("NewModelConfig"),Sa=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var SS=s(u);f=r(SS,"NewModelConfig"),SS.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Si=s(d);h=r(Si,"PretrainedConfig"),Si.forEach(t),Eo=r(Ae,`, make sure its
`),Ai=n(Ae,"CODE",{});var RS=s(Ai);Sm=r(RS,"model_type"),RS.forEach(t),st=r(Ae," attribute is set to the same key you use when registering the config (here "),Li=n(Ae,"CODE",{});var PS=s(Li);yi=r(PS,'"new-model"'),PS.forEach(t),KL=r(Ae,")."),Ae.forEach(t),Rm=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),xi=n(Co,"CODE",{});var Ra=s(xi);Pn=r(Ra,"NewModel"),Ra.forEach(t),ZL=r(Co," is a subclass of "),Bn=n(Co,"A",{href:!0});var BS=s(Bn);In=r(BS,"PreTrainedModel"),BS.forEach(t),ey=r(Co,`, make sure its
`),$i=n(Co,"CODE",{});var Bm=s($i);Nn=r(Bm,"config_class"),Bm.forEach(t),oy=r(Co,` attribute is set to the same class you use when registering the model (here
`),ki=n(Co,"CODE",{});var IS=s(ki);Pm=r(IS,"NewModelConfig"),IS.forEach(t),Sa=r(Co,")."),Co.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Eo),e(g,Ai),e(Ai,Sm),e(g,st),e(g,Li),e(Li,yi),e(g,KL),b(We,Rm,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,xi),e(xi,Pn),e(Oe,ZL),e(Oe,Bn),e(Bn,In),e(Oe,ey),e(Oe,$i),e($i,Nn),e(Oe,oy),e(Oe,ki),e(ki,Pm),e(Oe,Sa)},d(We){We&&t(g),We&&t(Rm),We&&t(Oe)}}}function cQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fQt($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Eo=s(u);f=r(Eo,"use_auth_token=True"),Eo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function gQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hQt($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Eo=s(u);f=r(Eo,"use_auth_token=True"),Eo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function uQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Qt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function TQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function EQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function AQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Qt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function IQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function UQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZQt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Wt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function TWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function EWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function AWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Wt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function IWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function UWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iHt($){let g,v,u,f,p,d,h,Eo,Ai,Sm,st,Li,yi,KL,Rm,Oe,Qe,xi,Pn,ZL,Bn,In,ey,$i,Nn,oy,ki,Pm,Sa,We,Ae,SS,Si,RS,PS,Co,Ra,BS,Bm,IS,tHe,OVe,Ri,Im,bae,ry,aHe,vae,nHe,VVe,qn,sHe,Fae,lHe,iHe,Tae,dHe,cHe,XVe,ty,zVe,NS,mHe,QVe,Nm,WVe,Pi,qm,Mae,ay,fHe,Eae,gHe,HVe,wo,ny,hHe,sy,uHe,qS,pHe,_He,bHe,ly,vHe,Cae,FHe,THe,MHe,Lr,iy,EHe,wae,CHe,wHe,Bi,AHe,Aae,LHe,yHe,Lae,xHe,$He,kHe,A,jm,yae,SHe,RHe,jS,PHe,BHe,IHe,Dm,xae,NHe,qHe,DS,jHe,DHe,GHe,Gm,$ae,OHe,VHe,GS,XHe,zHe,QHe,Om,kae,WHe,HHe,OS,UHe,JHe,YHe,Vm,Sae,KHe,ZHe,VS,eUe,oUe,rUe,Xm,Rae,tUe,aUe,XS,nUe,sUe,lUe,zm,Pae,iUe,dUe,zS,cUe,mUe,fUe,Qm,Bae,gUe,hUe,QS,uUe,pUe,_Ue,Wm,Iae,bUe,vUe,WS,FUe,TUe,MUe,Hm,Nae,EUe,CUe,HS,wUe,AUe,LUe,Um,qae,yUe,xUe,US,$Ue,kUe,SUe,Jm,jae,RUe,PUe,JS,BUe,IUe,NUe,Ym,Dae,qUe,jUe,YS,DUe,GUe,OUe,Km,Gae,VUe,XUe,KS,zUe,QUe,WUe,Zm,Oae,HUe,UUe,ZS,JUe,YUe,KUe,ef,Vae,ZUe,eJe,eR,oJe,rJe,tJe,of,Xae,aJe,nJe,oR,sJe,lJe,iJe,rf,zae,dJe,cJe,rR,mJe,fJe,gJe,tf,Qae,hJe,uJe,tR,pJe,_Je,bJe,af,Wae,vJe,FJe,aR,TJe,MJe,EJe,nf,Hae,CJe,wJe,nR,AJe,LJe,yJe,sf,Uae,xJe,$Je,sR,kJe,SJe,RJe,lf,Jae,PJe,BJe,lR,IJe,NJe,qJe,df,Yae,jJe,DJe,iR,GJe,OJe,VJe,cf,Kae,XJe,zJe,dR,QJe,WJe,HJe,mf,Zae,UJe,JJe,cR,YJe,KJe,ZJe,ff,ene,eYe,oYe,mR,rYe,tYe,aYe,gf,one,nYe,sYe,fR,lYe,iYe,dYe,hf,rne,cYe,mYe,gR,fYe,gYe,hYe,uf,tne,uYe,pYe,hR,_Ye,bYe,vYe,pf,ane,FYe,TYe,uR,MYe,EYe,CYe,_f,nne,wYe,AYe,pR,LYe,yYe,xYe,bf,sne,$Ye,kYe,_R,SYe,RYe,PYe,vf,lne,BYe,IYe,bR,NYe,qYe,jYe,Ff,ine,DYe,GYe,vR,OYe,VYe,XYe,Tf,dne,zYe,QYe,FR,WYe,HYe,UYe,Mf,cne,JYe,YYe,TR,KYe,ZYe,eKe,Ef,mne,oKe,rKe,MR,tKe,aKe,nKe,Cf,fne,sKe,lKe,ER,iKe,dKe,cKe,wf,gne,mKe,fKe,CR,gKe,hKe,uKe,Af,hne,pKe,_Ke,wR,bKe,vKe,FKe,Lf,une,TKe,MKe,AR,EKe,CKe,wKe,yf,pne,AKe,LKe,LR,yKe,xKe,$Ke,xf,_ne,kKe,SKe,yR,RKe,PKe,BKe,$f,bne,IKe,NKe,xR,qKe,jKe,DKe,kf,vne,GKe,OKe,$R,VKe,XKe,zKe,Sf,Fne,QKe,WKe,kR,HKe,UKe,JKe,Rf,Tne,YKe,KKe,SR,ZKe,eZe,oZe,Pf,Mne,rZe,tZe,RR,aZe,nZe,sZe,Bf,Ene,lZe,iZe,PR,dZe,cZe,mZe,If,Cne,fZe,gZe,BR,hZe,uZe,pZe,Nf,wne,_Ze,bZe,IR,vZe,FZe,TZe,qf,Ane,MZe,EZe,NR,CZe,wZe,AZe,jf,Lne,LZe,yZe,qR,xZe,$Ze,kZe,Df,yne,SZe,RZe,jR,PZe,BZe,IZe,Gf,xne,NZe,qZe,DR,jZe,DZe,GZe,Of,$ne,OZe,VZe,GR,XZe,zZe,QZe,Vf,kne,WZe,HZe,OR,UZe,JZe,YZe,Xf,Sne,KZe,ZZe,VR,eeo,oeo,reo,zf,Rne,teo,aeo,XR,neo,seo,leo,Qf,Pne,ieo,deo,zR,ceo,meo,feo,Wf,Bne,geo,heo,QR,ueo,peo,_eo,Hf,Ine,beo,veo,WR,Feo,Teo,Meo,Uf,Nne,Eeo,Ceo,HR,weo,Aeo,Leo,Jf,qne,yeo,xeo,UR,$eo,keo,Seo,Yf,jne,Reo,Peo,JR,Beo,Ieo,Neo,Kf,Dne,qeo,jeo,YR,Deo,Geo,Oeo,Zf,Gne,Veo,Xeo,KR,zeo,Qeo,Weo,eg,One,Heo,Ueo,ZR,Jeo,Yeo,Keo,og,Vne,Zeo,eoo,eP,ooo,roo,too,rg,Xne,aoo,noo,oP,soo,loo,ioo,tg,zne,doo,coo,rP,moo,foo,goo,ag,Qne,hoo,uoo,tP,poo,_oo,boo,ng,Wne,voo,Foo,aP,Too,Moo,Eoo,sg,Hne,Coo,woo,nP,Aoo,Loo,yoo,lg,Une,xoo,$oo,sP,koo,Soo,Roo,ig,Jne,Poo,Boo,lP,Ioo,Noo,qoo,dg,Yne,joo,Doo,iP,Goo,Ooo,Voo,cg,Kne,Xoo,zoo,dP,Qoo,Woo,Hoo,mg,Zne,Uoo,Joo,cP,Yoo,Koo,Zoo,fg,ese,ero,oro,mP,rro,tro,aro,gg,ose,nro,sro,fP,lro,iro,dro,hg,rse,cro,mro,gP,fro,gro,hro,ug,tse,uro,pro,hP,_ro,bro,vro,pg,ase,Fro,Tro,uP,Mro,Ero,Cro,_g,nse,wro,Aro,pP,Lro,yro,xro,bg,sse,$ro,kro,_P,Sro,Rro,Pro,vg,lse,Bro,Iro,bP,Nro,qro,jro,Fg,ise,Dro,Gro,vP,Oro,Vro,Xro,Tg,dse,zro,Qro,FP,Wro,Hro,Uro,Mg,cse,Jro,Yro,TP,Kro,Zro,eto,Eg,mse,oto,rto,MP,tto,ato,nto,Cg,fse,sto,lto,EP,ito,dto,cto,wg,gse,mto,fto,CP,gto,hto,uto,Ag,hse,pto,_to,wP,bto,vto,Fto,Lg,use,Tto,Mto,AP,Eto,Cto,wto,yg,pse,Ato,Lto,LP,yto,xto,$to,xg,_se,kto,Sto,yP,Rto,Pto,Bto,$g,bse,Ito,Nto,xP,qto,jto,Dto,kg,vse,Gto,Oto,$P,Vto,Xto,zto,Sg,Fse,Qto,Wto,kP,Hto,Uto,Jto,Rg,Tse,Yto,Kto,SP,Zto,eao,oao,Pg,Mse,rao,tao,RP,aao,nao,sao,Bg,Ese,lao,iao,PP,dao,cao,mao,Ig,Cse,fao,gao,BP,hao,uao,pao,Ng,wse,_ao,bao,IP,vao,Fao,Tao,qg,Ase,Mao,Eao,NP,Cao,wao,Aao,jg,Lse,Lao,yao,qP,xao,$ao,kao,Dg,yse,Sao,Rao,jP,Pao,Bao,Iao,Gg,xse,Nao,qao,DP,jao,Dao,Gao,Og,$se,Oao,Vao,GP,Xao,zao,Qao,Vg,kse,Wao,Hao,OP,Uao,Jao,Yao,Xg,Sse,Kao,Zao,VP,eno,ono,rno,zg,Rse,tno,ano,XP,nno,sno,lno,Qg,Pse,ino,dno,zP,cno,mno,fno,Wg,Bse,gno,hno,QP,uno,pno,_no,Hg,Ise,bno,vno,WP,Fno,Tno,Mno,Ug,Nse,Eno,Cno,HP,wno,Ano,Lno,Jg,yno,Yg,dy,xno,qse,$no,UVe,Ii,Kg,jse,cy,kno,Dse,Sno,JVe,Ao,my,Rno,fy,Pno,UP,Bno,Ino,Nno,gy,qno,Gse,jno,Dno,Gno,yr,hy,Ono,Ose,Vno,Xno,Pa,zno,Vse,Qno,Wno,Xse,Hno,Uno,zse,Jno,Yno,Kno,k,jn,Qse,Zno,eso,JP,oso,rso,YP,tso,aso,nso,Dn,Wse,sso,lso,KP,iso,dso,ZP,cso,mso,fso,Gn,Hse,gso,hso,eB,uso,pso,oB,_so,bso,vso,Zg,Use,Fso,Tso,rB,Mso,Eso,Cso,On,Jse,wso,Aso,tB,Lso,yso,aB,xso,$so,kso,eh,Yse,Sso,Rso,nB,Pso,Bso,Iso,oh,Kse,Nso,qso,sB,jso,Dso,Gso,rh,Zse,Oso,Vso,lB,Xso,zso,Qso,Vn,ele,Wso,Hso,iB,Uso,Jso,dB,Yso,Kso,Zso,Xn,ole,elo,olo,cB,rlo,tlo,mB,alo,nlo,slo,zn,rle,llo,ilo,fB,dlo,clo,gB,mlo,flo,glo,th,tle,hlo,ulo,hB,plo,_lo,blo,ah,ale,vlo,Flo,uB,Tlo,Mlo,Elo,nh,nle,Clo,wlo,pB,Alo,Llo,ylo,Qn,sle,xlo,$lo,_B,klo,Slo,bB,Rlo,Plo,Blo,sh,lle,Ilo,Nlo,vB,qlo,jlo,Dlo,Wn,ile,Glo,Olo,FB,Vlo,Xlo,TB,zlo,Qlo,Wlo,Hn,dle,Hlo,Ulo,MB,Jlo,Ylo,EB,Klo,Zlo,eio,Un,cle,oio,rio,CB,tio,aio,wB,nio,sio,lio,Jn,mle,iio,dio,AB,cio,mio,LB,fio,gio,hio,lh,fle,uio,pio,yB,_io,bio,vio,Yn,gle,Fio,Tio,xB,Mio,Eio,$B,Cio,wio,Aio,Kn,hle,Lio,yio,kB,xio,$io,SB,kio,Sio,Rio,Zn,ule,Pio,Bio,RB,Iio,Nio,PB,qio,jio,Dio,es,ple,Gio,Oio,BB,Vio,Xio,IB,zio,Qio,Wio,os,_le,Hio,Uio,NB,Jio,Yio,qB,Kio,Zio,edo,rs,ble,odo,rdo,jB,tdo,ado,DB,ndo,sdo,ldo,ih,vle,ido,ddo,GB,cdo,mdo,fdo,ts,Fle,gdo,hdo,OB,udo,pdo,VB,_do,bdo,vdo,dh,Tle,Fdo,Tdo,XB,Mdo,Edo,Cdo,as,Mle,wdo,Ado,zB,Ldo,ydo,QB,xdo,$do,kdo,ns,Ele,Sdo,Rdo,WB,Pdo,Bdo,HB,Ido,Ndo,qdo,ss,Cle,jdo,Ddo,UB,Gdo,Odo,JB,Vdo,Xdo,zdo,ch,wle,Qdo,Wdo,YB,Hdo,Udo,Jdo,ls,Ale,Ydo,Kdo,KB,Zdo,eco,ZB,oco,rco,tco,is,Lle,aco,nco,eI,sco,lco,oI,ico,dco,cco,ds,yle,mco,fco,rI,gco,hco,tI,uco,pco,_co,mh,xle,bco,vco,aI,Fco,Tco,Mco,cs,$le,Eco,Cco,nI,wco,Aco,sI,Lco,yco,xco,ms,kle,$co,kco,lI,Sco,Rco,iI,Pco,Bco,Ico,fs,Sle,Nco,qco,dI,jco,Dco,cI,Gco,Oco,Vco,gs,Rle,Xco,zco,mI,Qco,Wco,fI,Hco,Uco,Jco,hs,Ple,Yco,Kco,gI,Zco,emo,hI,omo,rmo,tmo,us,Ble,amo,nmo,uI,smo,lmo,pI,imo,dmo,cmo,ps,Ile,mmo,fmo,_I,gmo,hmo,bI,umo,pmo,_mo,_s,Nle,bmo,vmo,vI,Fmo,Tmo,FI,Mmo,Emo,Cmo,fh,qle,wmo,Amo,TI,Lmo,ymo,xmo,bs,jle,$mo,kmo,MI,Smo,Rmo,EI,Pmo,Bmo,Imo,gh,Dle,Nmo,qmo,CI,jmo,Dmo,Gmo,hh,Gle,Omo,Vmo,wI,Xmo,zmo,Qmo,vs,Ole,Wmo,Hmo,AI,Umo,Jmo,LI,Ymo,Kmo,Zmo,Fs,Vle,efo,ofo,yI,rfo,tfo,xI,afo,nfo,sfo,Ts,Xle,lfo,ifo,$I,dfo,cfo,kI,mfo,ffo,gfo,uh,zle,hfo,ufo,SI,pfo,_fo,bfo,Ms,Qle,vfo,Ffo,RI,Tfo,Mfo,PI,Efo,Cfo,wfo,Es,Wle,Afo,Lfo,BI,yfo,xfo,II,$fo,kfo,Sfo,Cs,Hle,Rfo,Pfo,NI,Bfo,Ifo,qI,Nfo,qfo,jfo,ws,Ule,Dfo,Gfo,jI,Ofo,Vfo,DI,Xfo,zfo,Qfo,As,Jle,Wfo,Hfo,GI,Ufo,Jfo,OI,Yfo,Kfo,Zfo,Ls,Yle,ego,ogo,VI,rgo,tgo,XI,ago,ngo,sgo,ys,Kle,lgo,igo,zI,dgo,cgo,QI,mgo,fgo,ggo,ph,Zle,hgo,ugo,WI,pgo,_go,bgo,xs,eie,vgo,Fgo,HI,Tgo,Mgo,UI,Ego,Cgo,wgo,_h,oie,Ago,Lgo,JI,ygo,xgo,$go,bh,rie,kgo,Sgo,YI,Rgo,Pgo,Bgo,vh,tie,Igo,Ngo,KI,qgo,jgo,Dgo,Fh,aie,Ggo,Ogo,ZI,Vgo,Xgo,zgo,$s,nie,Qgo,Wgo,eN,Hgo,Ugo,oN,Jgo,Ygo,Kgo,Th,sie,Zgo,eho,rN,oho,rho,tho,ks,lie,aho,nho,tN,sho,lho,aN,iho,dho,cho,Ss,iie,mho,fho,nN,gho,hho,sN,uho,pho,_ho,Rs,die,bho,vho,lN,Fho,Tho,iN,Mho,Eho,Cho,Ps,cie,who,Aho,dN,Lho,yho,cN,xho,$ho,kho,Bs,mie,Sho,Rho,mN,Pho,Bho,fN,Iho,Nho,qho,Is,fie,jho,Dho,gN,Gho,Oho,hN,Vho,Xho,zho,Mh,gie,Qho,Who,uN,Hho,Uho,Jho,Eh,hie,Yho,Kho,pN,Zho,euo,ouo,Ns,uie,ruo,tuo,_N,auo,nuo,bN,suo,luo,iuo,qs,pie,duo,cuo,vN,muo,fuo,FN,guo,huo,uuo,js,_ie,puo,_uo,TN,buo,vuo,MN,Fuo,Tuo,Muo,Ch,bie,Euo,Cuo,EN,wuo,Auo,Luo,wh,vie,yuo,xuo,CN,$uo,kuo,Suo,Ah,Fie,Ruo,Puo,wN,Buo,Iuo,Nuo,Ds,Tie,quo,juo,AN,Duo,Guo,LN,Ouo,Vuo,Xuo,Gs,Mie,zuo,Quo,yN,Wuo,Huo,xN,Uuo,Juo,Yuo,Lh,Eie,Kuo,Zuo,$N,epo,opo,rpo,yh,Cie,tpo,apo,kN,npo,spo,lpo,xh,wie,ipo,dpo,SN,cpo,mpo,fpo,Os,Aie,gpo,hpo,RN,upo,ppo,PN,_po,bpo,vpo,$h,Lie,Fpo,Tpo,BN,Mpo,Epo,Cpo,kh,yie,wpo,Apo,IN,Lpo,ypo,xpo,Vs,xie,$po,kpo,NN,Spo,Rpo,qN,Ppo,Bpo,Ipo,Xs,$ie,Npo,qpo,jN,jpo,Dpo,DN,Gpo,Opo,Vpo,zs,kie,Xpo,zpo,GN,Qpo,Wpo,ON,Hpo,Upo,Jpo,Qs,Sie,Ypo,Kpo,VN,Zpo,e_o,XN,o_o,r_o,t_o,Sh,a_o,Rh,uy,n_o,Rie,s_o,YVe,Ni,Ph,Pie,py,l_o,Bie,i_o,KVe,Lo,_y,d_o,by,c_o,zN,m_o,f_o,g_o,vy,h_o,Iie,u_o,p_o,__o,He,Fy,b_o,Nie,v_o,F_o,Ba,T_o,qie,M_o,E_o,jie,C_o,w_o,Die,A_o,L_o,y_o,Y,Bh,Gie,x_o,$_o,QN,k_o,S_o,R_o,Ih,Oie,P_o,B_o,WN,I_o,N_o,q_o,Nh,Vie,j_o,D_o,HN,G_o,O_o,V_o,qh,Xie,X_o,z_o,UN,Q_o,W_o,H_o,jh,zie,U_o,J_o,JN,Y_o,K_o,Z_o,Dh,Qie,e2o,o2o,YN,r2o,t2o,a2o,Gh,Wie,n2o,s2o,KN,l2o,i2o,d2o,Oh,Hie,c2o,m2o,ZN,f2o,g2o,h2o,Vh,Uie,u2o,p2o,eq,_2o,b2o,v2o,Xh,Jie,F2o,T2o,oq,M2o,E2o,C2o,zh,Yie,w2o,A2o,rq,L2o,y2o,x2o,Qh,Kie,$2o,k2o,tq,S2o,R2o,P2o,Wh,Zie,B2o,I2o,aq,N2o,q2o,j2o,Hh,ede,D2o,G2o,nq,O2o,V2o,X2o,Uh,ode,z2o,Q2o,sq,W2o,H2o,U2o,Jh,rde,J2o,Y2o,lq,K2o,Z2o,ebo,Yh,tde,obo,rbo,iq,tbo,abo,nbo,Kh,ade,sbo,lbo,dq,ibo,dbo,cbo,Zh,nde,mbo,fbo,cq,gbo,hbo,ubo,eu,sde,pbo,_bo,mq,bbo,vbo,Fbo,ou,lde,Tbo,Mbo,fq,Ebo,Cbo,wbo,ru,ide,Abo,Lbo,gq,ybo,xbo,$bo,tu,dde,kbo,Sbo,hq,Rbo,Pbo,Bbo,au,cde,Ibo,Nbo,uq,qbo,jbo,Dbo,nu,mde,Gbo,Obo,pq,Vbo,Xbo,zbo,su,fde,Qbo,Wbo,_q,Hbo,Ubo,Jbo,lu,gde,Ybo,Kbo,bq,Zbo,evo,ovo,iu,hde,rvo,tvo,vq,avo,nvo,svo,du,ude,lvo,ivo,Fq,dvo,cvo,mvo,cu,pde,fvo,gvo,Tq,hvo,uvo,pvo,mu,_de,_vo,bvo,Mq,vvo,Fvo,Tvo,fu,bde,Mvo,Evo,Eq,Cvo,wvo,Avo,gu,vde,Lvo,yvo,Cq,xvo,$vo,kvo,hu,Fde,Svo,Rvo,wq,Pvo,Bvo,Ivo,uu,Nvo,pu,qvo,_u,Ty,jvo,Tde,Dvo,ZVe,qi,bu,Mde,My,Gvo,Ede,Ovo,eXe,yo,Ey,Vvo,Cy,Xvo,Aq,zvo,Qvo,Wvo,wy,Hvo,Cde,Uvo,Jvo,Yvo,Ue,Ay,Kvo,wde,Zvo,e1o,ji,o1o,Ade,r1o,t1o,Lde,a1o,n1o,s1o,he,vu,yde,l1o,i1o,Lq,d1o,c1o,m1o,Fu,xde,f1o,g1o,$de,h1o,u1o,p1o,Tu,kde,_1o,b1o,yq,v1o,F1o,T1o,Mu,Sde,M1o,E1o,xq,C1o,w1o,A1o,Eu,Rde,L1o,y1o,$q,x1o,$1o,k1o,Cu,Pde,S1o,R1o,kq,P1o,B1o,I1o,wu,Bde,N1o,q1o,Sq,j1o,D1o,G1o,Au,Ide,O1o,V1o,Rq,X1o,z1o,Q1o,Lu,Nde,W1o,H1o,Pq,U1o,J1o,Y1o,yu,qde,K1o,Z1o,Bq,eFo,oFo,rFo,xu,jde,tFo,aFo,Iq,nFo,sFo,lFo,$u,Dde,iFo,dFo,Nq,cFo,mFo,fFo,ku,Gde,gFo,hFo,qq,uFo,pFo,_Fo,Su,Ode,bFo,vFo,jq,FFo,TFo,MFo,Ru,Vde,EFo,CFo,Dq,wFo,AFo,LFo,Pu,Xde,yFo,xFo,Gq,$Fo,kFo,SFo,Bu,zde,RFo,PFo,Oq,BFo,IFo,NFo,Iu,Qde,qFo,jFo,Vq,DFo,GFo,OFo,Nu,VFo,qu,XFo,ju,Ly,zFo,Wde,QFo,oXe,Di,Du,Hde,yy,WFo,Ude,HFo,rXe,xo,xy,UFo,Gi,JFo,Xq,YFo,KFo,zq,ZFo,eTo,oTo,$y,rTo,Jde,tTo,aTo,nTo,lt,ky,sTo,Yde,lTo,iTo,Oi,dTo,Kde,cTo,mTo,Qq,fTo,gTo,hTo,Gu,uTo,Je,Sy,pTo,Zde,_To,bTo,Ia,vTo,ece,FTo,TTo,oce,MTo,ETo,rce,CTo,wTo,ATo,y,Ou,tce,LTo,yTo,Wq,xTo,$To,kTo,Vu,ace,STo,RTo,Hq,PTo,BTo,ITo,Xu,nce,NTo,qTo,Uq,jTo,DTo,GTo,zu,sce,OTo,VTo,Jq,XTo,zTo,QTo,Qu,lce,WTo,HTo,Yq,UTo,JTo,YTo,Wu,ice,KTo,ZTo,Kq,eMo,oMo,rMo,Hu,dce,tMo,aMo,Zq,nMo,sMo,lMo,Uu,cce,iMo,dMo,ej,cMo,mMo,fMo,Ju,mce,gMo,hMo,oj,uMo,pMo,_Mo,Yu,fce,bMo,vMo,rj,FMo,TMo,MMo,Ku,gce,EMo,CMo,tj,wMo,AMo,LMo,Zu,hce,yMo,xMo,aj,$Mo,kMo,SMo,ep,uce,RMo,PMo,nj,BMo,IMo,NMo,op,pce,qMo,jMo,sj,DMo,GMo,OMo,rp,_ce,VMo,XMo,lj,zMo,QMo,WMo,tp,bce,HMo,UMo,ij,JMo,YMo,KMo,ap,vce,ZMo,e4o,dj,o4o,r4o,t4o,np,Fce,a4o,n4o,cj,s4o,l4o,i4o,sp,Tce,d4o,c4o,mj,m4o,f4o,g4o,lp,Mce,h4o,u4o,fj,p4o,_4o,b4o,ip,Ece,v4o,F4o,gj,T4o,M4o,E4o,dp,Cce,C4o,w4o,hj,A4o,L4o,y4o,cp,wce,x4o,$4o,uj,k4o,S4o,R4o,mp,Ace,P4o,B4o,pj,I4o,N4o,q4o,fp,Lce,j4o,D4o,_j,G4o,O4o,V4o,gp,yce,X4o,z4o,bj,Q4o,W4o,H4o,hp,xce,U4o,J4o,vj,Y4o,K4o,Z4o,up,$ce,eEo,oEo,Fj,rEo,tEo,aEo,pp,kce,nEo,sEo,Tj,lEo,iEo,dEo,_p,Sce,cEo,mEo,Mj,fEo,gEo,hEo,bp,Rce,uEo,pEo,Ej,_Eo,bEo,vEo,vp,Pce,FEo,TEo,Cj,MEo,EEo,CEo,Fp,Bce,wEo,AEo,wj,LEo,yEo,xEo,Tp,Ice,$Eo,kEo,Aj,SEo,REo,PEo,Ws,Nce,BEo,IEo,Lj,NEo,qEo,yj,jEo,DEo,GEo,Mp,qce,OEo,VEo,xj,XEo,zEo,QEo,Ep,jce,WEo,HEo,$j,UEo,JEo,YEo,Cp,Dce,KEo,ZEo,kj,eCo,oCo,rCo,wp,Gce,tCo,aCo,Sj,nCo,sCo,lCo,Ap,Oce,iCo,dCo,Rj,cCo,mCo,fCo,Lp,Vce,gCo,hCo,Pj,uCo,pCo,_Co,yp,Xce,bCo,vCo,Bj,FCo,TCo,MCo,xp,zce,ECo,CCo,Ij,wCo,ACo,LCo,$p,Qce,yCo,xCo,Nj,$Co,kCo,SCo,kp,Wce,RCo,PCo,qj,BCo,ICo,NCo,Sp,Hce,qCo,jCo,jj,DCo,GCo,OCo,Rp,Uce,VCo,XCo,Dj,zCo,QCo,WCo,Pp,Jce,HCo,UCo,Gj,JCo,YCo,KCo,Bp,Yce,ZCo,e3o,Oj,o3o,r3o,t3o,Ip,Kce,a3o,n3o,Vj,s3o,l3o,i3o,Np,Zce,d3o,c3o,Xj,m3o,f3o,g3o,qp,eme,h3o,u3o,zj,p3o,_3o,b3o,jp,ome,v3o,F3o,Qj,T3o,M3o,E3o,Dp,rme,C3o,w3o,Wj,A3o,L3o,y3o,Gp,tme,x3o,$3o,Hj,k3o,S3o,R3o,Op,ame,P3o,B3o,Uj,I3o,N3o,q3o,Vp,nme,j3o,D3o,Jj,G3o,O3o,V3o,Xp,sme,X3o,z3o,Yj,Q3o,W3o,H3o,zp,lme,U3o,J3o,Kj,Y3o,K3o,Z3o,Qp,ime,e5o,o5o,Zj,r5o,t5o,a5o,Wp,dme,n5o,s5o,eD,l5o,i5o,d5o,Hp,cme,c5o,m5o,oD,f5o,g5o,h5o,Up,mme,u5o,p5o,rD,_5o,b5o,v5o,Jp,fme,F5o,T5o,tD,M5o,E5o,C5o,Yp,gme,w5o,A5o,aD,L5o,y5o,x5o,Kp,hme,$5o,k5o,nD,S5o,R5o,P5o,Zp,ume,B5o,I5o,sD,N5o,q5o,j5o,e_,pme,D5o,G5o,lD,O5o,V5o,X5o,o_,_me,z5o,Q5o,iD,W5o,H5o,U5o,r_,bme,J5o,Y5o,dD,K5o,Z5o,e0o,t_,vme,o0o,r0o,cD,t0o,a0o,n0o,a_,Fme,s0o,l0o,mD,i0o,d0o,c0o,n_,Tme,m0o,f0o,fD,g0o,h0o,u0o,s_,Mme,p0o,_0o,gD,b0o,v0o,F0o,l_,Eme,T0o,M0o,hD,E0o,C0o,w0o,i_,Cme,A0o,L0o,uD,y0o,x0o,$0o,d_,wme,k0o,S0o,pD,R0o,P0o,B0o,c_,Ame,I0o,N0o,_D,q0o,j0o,D0o,m_,Lme,G0o,O0o,bD,V0o,X0o,z0o,f_,yme,Q0o,W0o,vD,H0o,U0o,J0o,g_,xme,Y0o,K0o,FD,Z0o,ewo,owo,h_,$me,rwo,two,TD,awo,nwo,swo,u_,kme,lwo,iwo,MD,dwo,cwo,mwo,p_,Sme,fwo,gwo,ED,hwo,uwo,pwo,__,Rme,_wo,bwo,CD,vwo,Fwo,Two,b_,Pme,Mwo,Ewo,wD,Cwo,wwo,Awo,v_,Bme,Lwo,ywo,AD,xwo,$wo,kwo,F_,Ime,Swo,Rwo,LD,Pwo,Bwo,Iwo,T_,Nme,Nwo,qwo,yD,jwo,Dwo,Gwo,M_,qme,Owo,Vwo,xD,Xwo,zwo,Qwo,E_,jme,Wwo,Hwo,$D,Uwo,Jwo,Ywo,C_,Dme,Kwo,Zwo,kD,eAo,oAo,rAo,w_,Gme,tAo,aAo,SD,nAo,sAo,lAo,A_,Ome,iAo,dAo,RD,cAo,mAo,fAo,L_,Vme,gAo,hAo,PD,uAo,pAo,_Ao,y_,Xme,bAo,vAo,BD,FAo,TAo,MAo,x_,zme,EAo,CAo,ID,wAo,AAo,LAo,$_,Qme,yAo,xAo,ND,$Ao,kAo,SAo,k_,Wme,RAo,PAo,qD,BAo,IAo,NAo,S_,Hme,qAo,jAo,jD,DAo,GAo,OAo,R_,Ume,VAo,XAo,DD,zAo,QAo,WAo,P_,Jme,HAo,UAo,GD,JAo,YAo,KAo,B_,Yme,ZAo,e6o,OD,o6o,r6o,t6o,I_,Kme,a6o,n6o,VD,s6o,l6o,i6o,N_,Zme,d6o,c6o,XD,m6o,f6o,g6o,q_,efe,h6o,u6o,zD,p6o,_6o,b6o,j_,ofe,v6o,F6o,QD,T6o,M6o,E6o,D_,rfe,C6o,w6o,WD,A6o,L6o,y6o,G_,tfe,x6o,$6o,HD,k6o,S6o,R6o,O_,afe,P6o,B6o,UD,I6o,N6o,q6o,V_,nfe,j6o,D6o,JD,G6o,O6o,V6o,X_,X6o,sfe,z6o,Q6o,lfe,W6o,H6o,z_,tXe,Vi,Q_,ife,Ry,U6o,dfe,J6o,aXe,$o,Py,Y6o,Xi,K6o,YD,Z6o,e7o,KD,o7o,r7o,t7o,By,a7o,cfe,n7o,s7o,l7o,it,Iy,i7o,mfe,d7o,c7o,zi,m7o,ffe,f7o,g7o,ZD,h7o,u7o,p7o,W_,_7o,Ye,Ny,b7o,gfe,v7o,F7o,Na,T7o,hfe,M7o,E7o,ufe,C7o,w7o,pfe,A7o,L7o,y7o,G,H_,_fe,x7o,$7o,eG,k7o,S7o,R7o,U_,bfe,P7o,B7o,oG,I7o,N7o,q7o,J_,vfe,j7o,D7o,rG,G7o,O7o,V7o,Y_,Ffe,X7o,z7o,tG,Q7o,W7o,H7o,K_,Tfe,U7o,J7o,aG,Y7o,K7o,Z7o,Z_,Mfe,eLo,oLo,nG,rLo,tLo,aLo,e2,Efe,nLo,sLo,sG,lLo,iLo,dLo,o2,Cfe,cLo,mLo,lG,fLo,gLo,hLo,r2,wfe,uLo,pLo,iG,_Lo,bLo,vLo,t2,Afe,FLo,TLo,dG,MLo,ELo,CLo,a2,Lfe,wLo,ALo,cG,LLo,yLo,xLo,n2,yfe,$Lo,kLo,mG,SLo,RLo,PLo,s2,xfe,BLo,ILo,fG,NLo,qLo,jLo,l2,$fe,DLo,GLo,gG,OLo,VLo,XLo,i2,kfe,zLo,QLo,hG,WLo,HLo,ULo,d2,Sfe,JLo,YLo,uG,KLo,ZLo,eyo,c2,Rfe,oyo,ryo,pG,tyo,ayo,nyo,m2,Pfe,syo,lyo,_G,iyo,dyo,cyo,f2,Bfe,myo,fyo,bG,gyo,hyo,uyo,g2,Ife,pyo,_yo,vG,byo,vyo,Fyo,h2,Nfe,Tyo,Myo,FG,Eyo,Cyo,wyo,u2,qfe,Ayo,Lyo,TG,yyo,xyo,$yo,p2,jfe,kyo,Syo,MG,Ryo,Pyo,Byo,_2,Dfe,Iyo,Nyo,EG,qyo,jyo,Dyo,b2,Gfe,Gyo,Oyo,CG,Vyo,Xyo,zyo,v2,Ofe,Qyo,Wyo,wG,Hyo,Uyo,Jyo,F2,Vfe,Yyo,Kyo,AG,Zyo,e8o,o8o,T2,Xfe,r8o,t8o,LG,a8o,n8o,s8o,M2,zfe,l8o,i8o,yG,d8o,c8o,m8o,E2,Qfe,f8o,g8o,xG,h8o,u8o,p8o,C2,Wfe,_8o,b8o,$G,v8o,F8o,T8o,w2,Hfe,M8o,E8o,kG,C8o,w8o,A8o,A2,Ufe,L8o,y8o,SG,x8o,$8o,k8o,L2,Jfe,S8o,R8o,RG,P8o,B8o,I8o,y2,Yfe,N8o,q8o,PG,j8o,D8o,G8o,x2,Kfe,O8o,V8o,BG,X8o,z8o,Q8o,$2,Zfe,W8o,H8o,IG,U8o,J8o,Y8o,k2,ege,K8o,Z8o,NG,e9o,o9o,r9o,S2,oge,t9o,a9o,qG,n9o,s9o,l9o,R2,rge,i9o,d9o,jG,c9o,m9o,f9o,P2,tge,g9o,h9o,DG,u9o,p9o,_9o,B2,age,b9o,v9o,GG,F9o,T9o,M9o,I2,nge,E9o,C9o,OG,w9o,A9o,L9o,N2,sge,y9o,x9o,VG,$9o,k9o,S9o,q2,lge,R9o,P9o,XG,B9o,I9o,N9o,j2,q9o,ige,j9o,D9o,dge,G9o,O9o,D2,nXe,Qi,G2,cge,qy,V9o,mge,X9o,sXe,ko,jy,z9o,Wi,Q9o,zG,W9o,H9o,QG,U9o,J9o,Y9o,Dy,K9o,fge,Z9o,exo,oxo,dt,Gy,rxo,gge,txo,axo,Hi,nxo,hge,sxo,lxo,WG,ixo,dxo,cxo,O2,mxo,Ke,Oy,fxo,uge,gxo,hxo,qa,uxo,pge,pxo,_xo,_ge,bxo,vxo,bge,Fxo,Txo,Mxo,z,V2,vge,Exo,Cxo,HG,wxo,Axo,Lxo,X2,Fge,yxo,xxo,UG,$xo,kxo,Sxo,z2,Tge,Rxo,Pxo,JG,Bxo,Ixo,Nxo,Q2,Mge,qxo,jxo,YG,Dxo,Gxo,Oxo,W2,Ege,Vxo,Xxo,KG,zxo,Qxo,Wxo,H2,Cge,Hxo,Uxo,ZG,Jxo,Yxo,Kxo,U2,wge,Zxo,e$o,eO,o$o,r$o,t$o,J2,Age,a$o,n$o,oO,s$o,l$o,i$o,Y2,Lge,d$o,c$o,rO,m$o,f$o,g$o,K2,yge,h$o,u$o,tO,p$o,_$o,b$o,Z2,xge,v$o,F$o,aO,T$o,M$o,E$o,eb,$ge,C$o,w$o,nO,A$o,L$o,y$o,ob,kge,x$o,$$o,sO,k$o,S$o,R$o,rb,Sge,P$o,B$o,lO,I$o,N$o,q$o,tb,Rge,j$o,D$o,iO,G$o,O$o,V$o,ab,Pge,X$o,z$o,dO,Q$o,W$o,H$o,nb,Bge,U$o,J$o,cO,Y$o,K$o,Z$o,sb,Ige,eko,oko,mO,rko,tko,ako,lb,Nge,nko,sko,fO,lko,iko,dko,ib,qge,cko,mko,gO,fko,gko,hko,db,jge,uko,pko,hO,_ko,bko,vko,cb,Dge,Fko,Tko,uO,Mko,Eko,Cko,mb,Gge,wko,Ako,pO,Lko,yko,xko,fb,Oge,$ko,kko,_O,Sko,Rko,Pko,gb,Vge,Bko,Iko,bO,Nko,qko,jko,hb,Xge,Dko,Gko,vO,Oko,Vko,Xko,ub,zge,zko,Qko,FO,Wko,Hko,Uko,pb,Qge,Jko,Yko,TO,Kko,Zko,eSo,_b,Wge,oSo,rSo,MO,tSo,aSo,nSo,bb,Hge,sSo,lSo,EO,iSo,dSo,cSo,vb,Uge,mSo,fSo,CO,gSo,hSo,uSo,Fb,Jge,pSo,_So,wO,bSo,vSo,FSo,Tb,Yge,TSo,MSo,AO,ESo,CSo,wSo,Mb,Kge,ASo,LSo,LO,ySo,xSo,$So,Eb,Zge,kSo,SSo,yO,RSo,PSo,BSo,Cb,ehe,ISo,NSo,xO,qSo,jSo,DSo,wb,ohe,GSo,OSo,$O,VSo,XSo,zSo,Ab,rhe,QSo,WSo,kO,HSo,USo,JSo,Lb,the,YSo,KSo,SO,ZSo,eRo,oRo,yb,ahe,rRo,tRo,RO,aRo,nRo,sRo,xb,lRo,nhe,iRo,dRo,she,cRo,mRo,$b,lXe,Ui,kb,lhe,Vy,fRo,ihe,gRo,iXe,So,Xy,hRo,Ji,uRo,PO,pRo,_Ro,BO,bRo,vRo,FRo,zy,TRo,dhe,MRo,ERo,CRo,ct,Qy,wRo,che,ARo,LRo,Yi,yRo,mhe,xRo,$Ro,IO,kRo,SRo,RRo,Sb,PRo,Ze,Wy,BRo,fhe,IRo,NRo,ja,qRo,ghe,jRo,DRo,hhe,GRo,ORo,uhe,VRo,XRo,zRo,W,Rb,phe,QRo,WRo,NO,HRo,URo,JRo,Pb,_he,YRo,KRo,qO,ZRo,ePo,oPo,Bb,bhe,rPo,tPo,jO,aPo,nPo,sPo,Ib,vhe,lPo,iPo,DO,dPo,cPo,mPo,Nb,Fhe,fPo,gPo,GO,hPo,uPo,pPo,qb,The,_Po,bPo,OO,vPo,FPo,TPo,jb,Mhe,MPo,EPo,VO,CPo,wPo,APo,Db,Ehe,LPo,yPo,XO,xPo,$Po,kPo,Gb,Che,SPo,RPo,zO,PPo,BPo,IPo,Ob,whe,NPo,qPo,QO,jPo,DPo,GPo,Vb,Ahe,OPo,VPo,WO,XPo,zPo,QPo,Xb,Lhe,WPo,HPo,HO,UPo,JPo,YPo,zb,yhe,KPo,ZPo,UO,eBo,oBo,rBo,Qb,xhe,tBo,aBo,JO,nBo,sBo,lBo,Wb,$he,iBo,dBo,YO,cBo,mBo,fBo,Hb,khe,gBo,hBo,KO,uBo,pBo,_Bo,Ub,She,bBo,vBo,ZO,FBo,TBo,MBo,Jb,Rhe,EBo,CBo,eV,wBo,ABo,LBo,Yb,Phe,yBo,xBo,oV,$Bo,kBo,SBo,Kb,Bhe,RBo,PBo,rV,BBo,IBo,NBo,Zb,Ihe,qBo,jBo,tV,DBo,GBo,OBo,ev,Nhe,VBo,XBo,aV,zBo,QBo,WBo,ov,qhe,HBo,UBo,nV,JBo,YBo,KBo,rv,jhe,ZBo,eIo,sV,oIo,rIo,tIo,tv,Dhe,aIo,nIo,lV,sIo,lIo,iIo,av,Ghe,dIo,cIo,iV,mIo,fIo,gIo,nv,Ohe,hIo,uIo,dV,pIo,_Io,bIo,sv,Vhe,vIo,FIo,cV,TIo,MIo,EIo,lv,Xhe,CIo,wIo,mV,AIo,LIo,yIo,iv,zhe,xIo,$Io,fV,kIo,SIo,RIo,dv,Qhe,PIo,BIo,gV,IIo,NIo,qIo,cv,Whe,jIo,DIo,hV,GIo,OIo,VIo,mv,Hhe,XIo,zIo,uV,QIo,WIo,HIo,fv,Uhe,UIo,JIo,Jhe,YIo,KIo,ZIo,gv,Yhe,eNo,oNo,pV,rNo,tNo,aNo,hv,Khe,nNo,sNo,_V,lNo,iNo,dNo,uv,Zhe,cNo,mNo,bV,fNo,gNo,hNo,pv,eue,uNo,pNo,vV,_No,bNo,vNo,_v,FNo,oue,TNo,MNo,rue,ENo,CNo,bv,dXe,Ki,vv,tue,Hy,wNo,aue,ANo,cXe,Ro,Uy,LNo,Zi,yNo,FV,xNo,$No,TV,kNo,SNo,RNo,Jy,PNo,nue,BNo,INo,NNo,mt,Yy,qNo,sue,jNo,DNo,ed,GNo,lue,ONo,VNo,MV,XNo,zNo,QNo,Fv,WNo,eo,Ky,HNo,iue,UNo,JNo,Da,YNo,due,KNo,ZNo,cue,eqo,oqo,mue,rqo,tqo,aqo,ue,Tv,fue,nqo,sqo,EV,lqo,iqo,dqo,Mv,gue,cqo,mqo,CV,fqo,gqo,hqo,Ev,hue,uqo,pqo,wV,_qo,bqo,vqo,Cv,uue,Fqo,Tqo,AV,Mqo,Eqo,Cqo,wv,pue,wqo,Aqo,LV,Lqo,yqo,xqo,Av,_ue,$qo,kqo,yV,Sqo,Rqo,Pqo,Lv,bue,Bqo,Iqo,xV,Nqo,qqo,jqo,yv,vue,Dqo,Gqo,$V,Oqo,Vqo,Xqo,xv,Fue,zqo,Qqo,kV,Wqo,Hqo,Uqo,$v,Tue,Jqo,Yqo,SV,Kqo,Zqo,ejo,kv,Mue,ojo,rjo,RV,tjo,ajo,njo,Sv,Eue,sjo,ljo,PV,ijo,djo,cjo,Rv,Cue,mjo,fjo,BV,gjo,hjo,ujo,Pv,wue,pjo,_jo,IV,bjo,vjo,Fjo,Bv,Aue,Tjo,Mjo,NV,Ejo,Cjo,wjo,Iv,Lue,Ajo,Ljo,qV,yjo,xjo,$jo,Nv,yue,kjo,Sjo,jV,Rjo,Pjo,Bjo,qv,xue,Ijo,Njo,DV,qjo,jjo,Djo,jv,Gjo,$ue,Ojo,Vjo,kue,Xjo,zjo,Dv,mXe,od,Gv,Sue,Zy,Qjo,Rue,Wjo,fXe,Po,e8,Hjo,rd,Ujo,GV,Jjo,Yjo,OV,Kjo,Zjo,eDo,o8,oDo,Pue,rDo,tDo,aDo,ft,r8,nDo,Bue,sDo,lDo,td,iDo,Iue,dDo,cDo,VV,mDo,fDo,gDo,Ov,hDo,oo,t8,uDo,Nue,pDo,_Do,Ga,bDo,que,vDo,FDo,jue,TDo,MDo,Due,EDo,CDo,wDo,N,Vv,Gue,ADo,LDo,XV,yDo,xDo,$Do,Xv,Oue,kDo,SDo,zV,RDo,PDo,BDo,zv,Vue,IDo,NDo,QV,qDo,jDo,DDo,Qv,Xue,GDo,ODo,WV,VDo,XDo,zDo,Wv,zue,QDo,WDo,HV,HDo,UDo,JDo,Hv,Que,YDo,KDo,UV,ZDo,eGo,oGo,Uv,Wue,rGo,tGo,JV,aGo,nGo,sGo,Jv,Hue,lGo,iGo,YV,dGo,cGo,mGo,Yv,Uue,fGo,gGo,KV,hGo,uGo,pGo,Kv,Jue,_Go,bGo,ZV,vGo,FGo,TGo,Zv,Yue,MGo,EGo,eX,CGo,wGo,AGo,e1,Kue,LGo,yGo,oX,xGo,$Go,kGo,o1,Zue,SGo,RGo,rX,PGo,BGo,IGo,r1,epe,NGo,qGo,tX,jGo,DGo,GGo,t1,ope,OGo,VGo,aX,XGo,zGo,QGo,a1,rpe,WGo,HGo,nX,UGo,JGo,YGo,n1,tpe,KGo,ZGo,sX,eOo,oOo,rOo,s1,ape,tOo,aOo,lX,nOo,sOo,lOo,l1,npe,iOo,dOo,iX,cOo,mOo,fOo,i1,spe,gOo,hOo,dX,uOo,pOo,_Oo,d1,lpe,bOo,vOo,cX,FOo,TOo,MOo,c1,ipe,EOo,COo,mX,wOo,AOo,LOo,m1,dpe,yOo,xOo,fX,$Oo,kOo,SOo,f1,cpe,ROo,POo,gX,BOo,IOo,NOo,g1,mpe,qOo,jOo,hX,DOo,GOo,OOo,h1,fpe,VOo,XOo,uX,zOo,QOo,WOo,u1,gpe,HOo,UOo,pX,JOo,YOo,KOo,p1,hpe,ZOo,eVo,_X,oVo,rVo,tVo,_1,upe,aVo,nVo,bX,sVo,lVo,iVo,b1,ppe,dVo,cVo,vX,mVo,fVo,gVo,v1,_pe,hVo,uVo,FX,pVo,_Vo,bVo,F1,bpe,vVo,FVo,TX,TVo,MVo,EVo,T1,vpe,CVo,wVo,MX,AVo,LVo,yVo,M1,Fpe,xVo,$Vo,EX,kVo,SVo,RVo,E1,Tpe,PVo,BVo,CX,IVo,NVo,qVo,C1,Mpe,jVo,DVo,wX,GVo,OVo,VVo,w1,Epe,XVo,zVo,AX,QVo,WVo,HVo,A1,Cpe,UVo,JVo,LX,YVo,KVo,ZVo,L1,wpe,eXo,oXo,yX,rXo,tXo,aXo,y1,Ape,nXo,sXo,xX,lXo,iXo,dXo,x1,Lpe,cXo,mXo,$X,fXo,gXo,hXo,$1,ype,uXo,pXo,kX,_Xo,bXo,vXo,k1,xpe,FXo,TXo,SX,MXo,EXo,CXo,S1,$pe,wXo,AXo,RX,LXo,yXo,xXo,R1,kpe,$Xo,kXo,PX,SXo,RXo,PXo,P1,Spe,BXo,IXo,BX,NXo,qXo,jXo,B1,Rpe,DXo,GXo,IX,OXo,VXo,XXo,I1,Ppe,zXo,QXo,NX,WXo,HXo,UXo,N1,Bpe,JXo,YXo,qX,KXo,ZXo,ezo,q1,Ipe,ozo,rzo,jX,tzo,azo,nzo,j1,szo,Npe,lzo,izo,qpe,dzo,czo,D1,gXe,ad,G1,jpe,a8,mzo,Dpe,fzo,hXe,Bo,n8,gzo,nd,hzo,DX,uzo,pzo,GX,_zo,bzo,vzo,s8,Fzo,Gpe,Tzo,Mzo,Ezo,gt,l8,Czo,Ope,wzo,Azo,sd,Lzo,Vpe,yzo,xzo,OX,$zo,kzo,Szo,O1,Rzo,ro,i8,Pzo,Xpe,Bzo,Izo,Oa,Nzo,zpe,qzo,jzo,Qpe,Dzo,Gzo,Wpe,Ozo,Vzo,Xzo,Z,V1,Hpe,zzo,Qzo,VX,Wzo,Hzo,Uzo,X1,Upe,Jzo,Yzo,XX,Kzo,Zzo,eQo,z1,Jpe,oQo,rQo,zX,tQo,aQo,nQo,Q1,Ype,sQo,lQo,QX,iQo,dQo,cQo,W1,Kpe,mQo,fQo,WX,gQo,hQo,uQo,H1,Zpe,pQo,_Qo,HX,bQo,vQo,FQo,U1,e_e,TQo,MQo,UX,EQo,CQo,wQo,J1,o_e,AQo,LQo,JX,yQo,xQo,$Qo,Y1,r_e,kQo,SQo,YX,RQo,PQo,BQo,K1,t_e,IQo,NQo,KX,qQo,jQo,DQo,Z1,a_e,GQo,OQo,ZX,VQo,XQo,zQo,eF,n_e,QQo,WQo,ez,HQo,UQo,JQo,oF,s_e,YQo,KQo,oz,ZQo,eWo,oWo,rF,l_e,rWo,tWo,rz,aWo,nWo,sWo,tF,i_e,lWo,iWo,tz,dWo,cWo,mWo,aF,d_e,fWo,gWo,az,hWo,uWo,pWo,nF,c_e,_Wo,bWo,nz,vWo,FWo,TWo,sF,m_e,MWo,EWo,sz,CWo,wWo,AWo,lF,f_e,LWo,yWo,lz,xWo,$Wo,kWo,iF,g_e,SWo,RWo,iz,PWo,BWo,IWo,dF,h_e,NWo,qWo,dz,jWo,DWo,GWo,cF,u_e,OWo,VWo,cz,XWo,zWo,QWo,mF,p_e,WWo,HWo,mz,UWo,JWo,YWo,fF,__e,KWo,ZWo,fz,eHo,oHo,rHo,gF,b_e,tHo,aHo,gz,nHo,sHo,lHo,hF,v_e,iHo,dHo,hz,cHo,mHo,fHo,uF,F_e,gHo,hHo,uz,uHo,pHo,_Ho,pF,T_e,bHo,vHo,pz,FHo,THo,MHo,_F,M_e,EHo,CHo,_z,wHo,AHo,LHo,bF,E_e,yHo,xHo,bz,$Ho,kHo,SHo,vF,RHo,C_e,PHo,BHo,w_e,IHo,NHo,FF,uXe,ld,TF,A_e,d8,qHo,L_e,jHo,pXe,Io,c8,DHo,id,GHo,vz,OHo,VHo,Fz,XHo,zHo,QHo,m8,WHo,y_e,HHo,UHo,JHo,ht,f8,YHo,x_e,KHo,ZHo,dd,eUo,$_e,oUo,rUo,Tz,tUo,aUo,nUo,MF,sUo,to,g8,lUo,k_e,iUo,dUo,Va,cUo,S_e,mUo,fUo,R_e,gUo,hUo,P_e,uUo,pUo,_Uo,No,EF,B_e,bUo,vUo,Mz,FUo,TUo,MUo,CF,I_e,EUo,CUo,Ez,wUo,AUo,LUo,wF,N_e,yUo,xUo,Cz,$Uo,kUo,SUo,AF,q_e,RUo,PUo,wz,BUo,IUo,NUo,LF,j_e,qUo,jUo,Az,DUo,GUo,OUo,yF,D_e,VUo,XUo,Lz,zUo,QUo,WUo,xF,HUo,G_e,UUo,JUo,O_e,YUo,KUo,$F,_Xe,cd,kF,V_e,h8,ZUo,X_e,eJo,bXe,qo,u8,oJo,md,rJo,yz,tJo,aJo,xz,nJo,sJo,lJo,p8,iJo,z_e,dJo,cJo,mJo,ut,_8,fJo,Q_e,gJo,hJo,fd,uJo,W_e,pJo,_Jo,$z,bJo,vJo,FJo,SF,TJo,ao,b8,MJo,H_e,EJo,CJo,Xa,wJo,U_e,AJo,LJo,J_e,yJo,xJo,Y_e,$Jo,kJo,SJo,U,RF,K_e,RJo,PJo,kz,BJo,IJo,NJo,PF,Z_e,qJo,jJo,Sz,DJo,GJo,OJo,BF,e2e,VJo,XJo,Rz,zJo,QJo,WJo,IF,o2e,HJo,UJo,Pz,JJo,YJo,KJo,NF,r2e,ZJo,eYo,Bz,oYo,rYo,tYo,qF,t2e,aYo,nYo,Iz,sYo,lYo,iYo,jF,a2e,dYo,cYo,Nz,mYo,fYo,gYo,DF,n2e,hYo,uYo,qz,pYo,_Yo,bYo,GF,s2e,vYo,FYo,jz,TYo,MYo,EYo,OF,l2e,CYo,wYo,Dz,AYo,LYo,yYo,VF,i2e,xYo,$Yo,Gz,kYo,SYo,RYo,XF,d2e,PYo,BYo,Oz,IYo,NYo,qYo,zF,c2e,jYo,DYo,Vz,GYo,OYo,VYo,QF,m2e,XYo,zYo,Xz,QYo,WYo,HYo,WF,f2e,UYo,JYo,zz,YYo,KYo,ZYo,HF,g2e,eKo,oKo,Qz,rKo,tKo,aKo,UF,h2e,nKo,sKo,Wz,lKo,iKo,dKo,JF,u2e,cKo,mKo,Hz,fKo,gKo,hKo,YF,p2e,uKo,pKo,Uz,_Ko,bKo,vKo,KF,_2e,FKo,TKo,Jz,MKo,EKo,CKo,ZF,b2e,wKo,AKo,Yz,LKo,yKo,xKo,eT,v2e,$Ko,kKo,Kz,SKo,RKo,PKo,oT,F2e,BKo,IKo,Zz,NKo,qKo,jKo,rT,T2e,DKo,GKo,eQ,OKo,VKo,XKo,tT,M2e,zKo,QKo,oQ,WKo,HKo,UKo,aT,E2e,JKo,YKo,rQ,KKo,ZKo,eZo,nT,C2e,oZo,rZo,tQ,tZo,aZo,nZo,sT,w2e,sZo,lZo,aQ,iZo,dZo,cZo,lT,A2e,mZo,fZo,nQ,gZo,hZo,uZo,iT,L2e,pZo,_Zo,sQ,bZo,vZo,FZo,dT,y2e,TZo,MZo,lQ,EZo,CZo,wZo,cT,x2e,AZo,LZo,iQ,yZo,xZo,$Zo,mT,$2e,kZo,SZo,dQ,RZo,PZo,BZo,fT,k2e,IZo,NZo,cQ,qZo,jZo,DZo,gT,S2e,GZo,OZo,mQ,VZo,XZo,zZo,hT,R2e,QZo,WZo,fQ,HZo,UZo,JZo,uT,YZo,P2e,KZo,ZZo,B2e,eer,oer,pT,vXe,gd,_T,I2e,v8,rer,N2e,ter,FXe,jo,F8,aer,hd,ner,gQ,ser,ler,hQ,ier,der,cer,T8,mer,q2e,fer,ger,her,pt,M8,uer,j2e,per,_er,ud,ber,D2e,ver,Fer,uQ,Ter,Mer,Eer,bT,Cer,no,E8,wer,G2e,Aer,Ler,za,yer,O2e,xer,$er,V2e,ker,Ser,X2e,Rer,Per,Ber,V,vT,z2e,Ier,Ner,pQ,qer,jer,Der,FT,Q2e,Ger,Oer,_Q,Ver,Xer,zer,TT,W2e,Qer,Wer,bQ,Her,Uer,Jer,MT,H2e,Yer,Ker,vQ,Zer,eor,oor,ET,U2e,ror,tor,FQ,aor,nor,sor,CT,J2e,lor,ior,TQ,dor,cor,mor,wT,Y2e,gor,hor,MQ,uor,por,_or,AT,K2e,bor,vor,EQ,For,Tor,Mor,LT,Z2e,Eor,Cor,CQ,wor,Aor,Lor,yT,ebe,yor,xor,wQ,$or,kor,Sor,xT,obe,Ror,Por,AQ,Bor,Ior,Nor,$T,rbe,qor,jor,LQ,Dor,Gor,Oor,kT,tbe,Vor,Xor,yQ,zor,Qor,Wor,ST,abe,Hor,Uor,xQ,Jor,Yor,Kor,RT,nbe,Zor,err,$Q,orr,rrr,trr,PT,sbe,arr,nrr,kQ,srr,lrr,irr,BT,lbe,drr,crr,SQ,mrr,frr,grr,IT,ibe,hrr,urr,RQ,prr,_rr,brr,NT,dbe,vrr,Frr,PQ,Trr,Mrr,Err,qT,cbe,Crr,wrr,BQ,Arr,Lrr,yrr,jT,mbe,xrr,$rr,IQ,krr,Srr,Rrr,DT,fbe,Prr,Brr,NQ,Irr,Nrr,qrr,GT,gbe,jrr,Drr,qQ,Grr,Orr,Vrr,OT,hbe,Xrr,zrr,jQ,Qrr,Wrr,Hrr,VT,ube,Urr,Jrr,DQ,Yrr,Krr,Zrr,XT,pbe,etr,otr,GQ,rtr,ttr,atr,zT,_be,ntr,str,OQ,ltr,itr,dtr,QT,bbe,ctr,mtr,VQ,ftr,gtr,htr,WT,vbe,utr,ptr,XQ,_tr,btr,vtr,HT,Fbe,Ftr,Ttr,zQ,Mtr,Etr,Ctr,UT,Tbe,wtr,Atr,QQ,Ltr,ytr,xtr,JT,Mbe,$tr,ktr,WQ,Str,Rtr,Ptr,YT,Ebe,Btr,Itr,HQ,Ntr,qtr,jtr,KT,Cbe,Dtr,Gtr,UQ,Otr,Vtr,Xtr,ZT,wbe,ztr,Qtr,JQ,Wtr,Htr,Utr,eM,Abe,Jtr,Ytr,YQ,Ktr,Ztr,ear,oM,Lbe,oar,rar,KQ,tar,aar,nar,rM,ybe,sar,lar,ZQ,iar,dar,car,tM,xbe,mar,far,eW,gar,har,uar,aM,$be,par,_ar,oW,bar,Far,Tar,nM,kbe,Mar,Ear,rW,Car,war,Aar,sM,Sbe,Lar,yar,tW,xar,$ar,kar,lM,Sar,Rbe,Rar,Par,Pbe,Bar,Iar,iM,TXe,pd,dM,Bbe,C8,Nar,Ibe,qar,MXe,Do,w8,jar,_d,Dar,aW,Gar,Oar,nW,Var,Xar,zar,A8,Qar,Nbe,War,Har,Uar,_t,L8,Jar,qbe,Yar,Kar,bd,Zar,jbe,enr,onr,sW,rnr,tnr,anr,cM,nnr,so,y8,snr,Dbe,lnr,inr,Qa,dnr,Gbe,cnr,mnr,Obe,fnr,gnr,Vbe,hnr,unr,pnr,Xbe,mM,zbe,_nr,bnr,lW,vnr,Fnr,Tnr,fM,Mnr,Qbe,Enr,Cnr,Wbe,wnr,Anr,gM,EXe,vd,hM,Hbe,x8,Lnr,Ube,ynr,CXe,Go,$8,xnr,Fd,$nr,iW,knr,Snr,dW,Rnr,Pnr,Bnr,k8,Inr,Jbe,Nnr,qnr,jnr,bt,S8,Dnr,Ybe,Gnr,Onr,Td,Vnr,Kbe,Xnr,znr,cW,Qnr,Wnr,Hnr,uM,Unr,lo,R8,Jnr,Zbe,Ynr,Knr,Wa,Znr,eve,esr,osr,ove,rsr,tsr,rve,asr,nsr,ssr,ve,pM,tve,lsr,isr,mW,dsr,csr,msr,_M,ave,fsr,gsr,fW,hsr,usr,psr,bM,nve,_sr,bsr,gW,vsr,Fsr,Tsr,vM,sve,Msr,Esr,hW,Csr,wsr,Asr,Hs,lve,Lsr,ysr,uW,xsr,$sr,pW,ksr,Ssr,Rsr,FM,ive,Psr,Bsr,_W,Isr,Nsr,qsr,Us,dve,jsr,Dsr,bW,Gsr,Osr,vW,Vsr,Xsr,zsr,TM,cve,Qsr,Wsr,FW,Hsr,Usr,Jsr,vt,mve,Ysr,Ksr,TW,Zsr,elr,MW,olr,rlr,EW,tlr,alr,nlr,MM,fve,slr,llr,CW,ilr,dlr,clr,EM,gve,mlr,flr,wW,glr,hlr,ulr,CM,hve,plr,_lr,AW,blr,vlr,Flr,wM,uve,Tlr,Mlr,LW,Elr,Clr,wlr,AM,pve,Alr,Llr,yW,ylr,xlr,$lr,LM,_ve,klr,Slr,xW,Rlr,Plr,Blr,yM,bve,Ilr,Nlr,$W,qlr,jlr,Dlr,xM,Glr,vve,Olr,Vlr,Fve,Xlr,zlr,$M,wXe,Md,kM,Tve,P8,Qlr,Mve,Wlr,AXe,Oo,B8,Hlr,Ed,Ulr,kW,Jlr,Ylr,SW,Klr,Zlr,eir,I8,oir,Eve,rir,tir,air,Ft,N8,nir,Cve,sir,lir,Cd,iir,wve,dir,cir,RW,mir,fir,gir,SM,hir,io,q8,uir,Ave,pir,_ir,Ha,bir,Lve,vir,Fir,yve,Tir,Mir,xve,Eir,Cir,wir,$ve,RM,kve,Air,Lir,PW,yir,xir,$ir,PM,kir,Sve,Sir,Rir,Rve,Pir,Bir,BM,LXe,wd,IM,Pve,j8,Iir,Bve,Nir,yXe,Vo,D8,qir,Ad,jir,BW,Dir,Gir,IW,Oir,Vir,Xir,G8,zir,Ive,Qir,Wir,Hir,Tt,O8,Uir,Nve,Jir,Yir,Ld,Kir,qve,Zir,edr,NW,odr,rdr,tdr,NM,adr,co,V8,ndr,jve,sdr,ldr,Ua,idr,Dve,ddr,cdr,Gve,mdr,fdr,Ove,gdr,hdr,udr,Vve,qM,Xve,pdr,_dr,qW,bdr,vdr,Fdr,jM,Tdr,zve,Mdr,Edr,Qve,Cdr,wdr,DM,xXe,yd,GM,Wve,X8,Adr,Hve,Ldr,$Xe,Xo,z8,ydr,xd,xdr,jW,$dr,kdr,DW,Sdr,Rdr,Pdr,Q8,Bdr,Uve,Idr,Ndr,qdr,Mt,W8,jdr,Jve,Ddr,Gdr,$d,Odr,Yve,Vdr,Xdr,GW,zdr,Qdr,Wdr,OM,Hdr,mo,H8,Udr,Kve,Jdr,Ydr,Ja,Kdr,Zve,Zdr,ecr,e1e,ocr,rcr,o1e,tcr,acr,ncr,Pe,VM,r1e,scr,lcr,OW,icr,dcr,ccr,XM,t1e,mcr,fcr,VW,gcr,hcr,ucr,zM,a1e,pcr,_cr,XW,bcr,vcr,Fcr,QM,n1e,Tcr,Mcr,zW,Ecr,Ccr,wcr,WM,s1e,Acr,Lcr,QW,ycr,xcr,$cr,HM,l1e,kcr,Scr,WW,Rcr,Pcr,Bcr,UM,i1e,Icr,Ncr,HW,qcr,jcr,Dcr,JM,d1e,Gcr,Ocr,UW,Vcr,Xcr,zcr,YM,c1e,Qcr,Wcr,JW,Hcr,Ucr,Jcr,KM,Ycr,m1e,Kcr,Zcr,f1e,emr,omr,ZM,kXe,kd,e4,g1e,U8,rmr,h1e,tmr,SXe,zo,J8,amr,Sd,nmr,YW,smr,lmr,KW,imr,dmr,cmr,Y8,mmr,u1e,fmr,gmr,hmr,Et,K8,umr,p1e,pmr,_mr,Rd,bmr,_1e,vmr,Fmr,ZW,Tmr,Mmr,Emr,o4,Cmr,fo,Z8,wmr,b1e,Amr,Lmr,Ya,ymr,v1e,xmr,$mr,F1e,kmr,Smr,T1e,Rmr,Pmr,Bmr,ot,r4,M1e,Imr,Nmr,eH,qmr,jmr,Dmr,t4,E1e,Gmr,Omr,oH,Vmr,Xmr,zmr,a4,C1e,Qmr,Wmr,rH,Hmr,Umr,Jmr,n4,w1e,Ymr,Kmr,tH,Zmr,efr,ofr,s4,A1e,rfr,tfr,aH,afr,nfr,sfr,l4,lfr,L1e,ifr,dfr,y1e,cfr,mfr,i4,RXe,Pd,d4,x1e,e9,ffr,$1e,gfr,PXe,Qo,o9,hfr,Bd,ufr,nH,pfr,_fr,sH,bfr,vfr,Ffr,r9,Tfr,k1e,Mfr,Efr,Cfr,Ct,t9,wfr,S1e,Afr,Lfr,Id,yfr,R1e,xfr,$fr,lH,kfr,Sfr,Rfr,c4,Pfr,go,a9,Bfr,P1e,Ifr,Nfr,Ka,qfr,B1e,jfr,Dfr,I1e,Gfr,Ofr,N1e,Vfr,Xfr,zfr,Le,m4,q1e,Qfr,Wfr,iH,Hfr,Ufr,Jfr,f4,j1e,Yfr,Kfr,dH,Zfr,egr,ogr,g4,D1e,rgr,tgr,cH,agr,ngr,sgr,h4,G1e,lgr,igr,mH,dgr,cgr,mgr,u4,O1e,fgr,ggr,fH,hgr,ugr,pgr,p4,V1e,_gr,bgr,gH,vgr,Fgr,Tgr,_4,X1e,Mgr,Egr,hH,Cgr,wgr,Agr,b4,z1e,Lgr,ygr,uH,xgr,$gr,kgr,v4,Q1e,Sgr,Rgr,pH,Pgr,Bgr,Igr,F4,W1e,Ngr,qgr,_H,jgr,Dgr,Ggr,T4,Ogr,H1e,Vgr,Xgr,U1e,zgr,Qgr,M4,BXe,Nd,E4,J1e,n9,Wgr,Y1e,Hgr,IXe,Wo,s9,Ugr,qd,Jgr,bH,Ygr,Kgr,vH,Zgr,ehr,ohr,l9,rhr,K1e,thr,ahr,nhr,wt,i9,shr,Z1e,lhr,ihr,jd,dhr,eFe,chr,mhr,FH,fhr,ghr,hhr,C4,uhr,ho,d9,phr,oFe,_hr,bhr,Za,vhr,rFe,Fhr,Thr,tFe,Mhr,Ehr,aFe,Chr,whr,Ahr,c9,w4,nFe,Lhr,yhr,TH,xhr,$hr,khr,A4,sFe,Shr,Rhr,MH,Phr,Bhr,Ihr,L4,Nhr,lFe,qhr,jhr,iFe,Dhr,Ghr,y4,NXe,Dd,x4,dFe,m9,Ohr,cFe,Vhr,qXe,Ho,f9,Xhr,Gd,zhr,EH,Qhr,Whr,CH,Hhr,Uhr,Jhr,g9,Yhr,mFe,Khr,Zhr,eur,At,h9,our,fFe,rur,tur,Od,aur,gFe,nur,sur,wH,lur,iur,dur,$4,cur,uo,u9,mur,hFe,fur,gur,en,hur,uFe,uur,pur,pFe,_ur,bur,_Fe,vur,Fur,Tur,rt,k4,bFe,Mur,Eur,AH,Cur,wur,Aur,S4,vFe,Lur,yur,LH,xur,$ur,kur,R4,FFe,Sur,Rur,yH,Pur,Bur,Iur,P4,TFe,Nur,qur,xH,jur,Dur,Gur,B4,MFe,Our,Vur,$H,Xur,zur,Qur,I4,Wur,EFe,Hur,Uur,CFe,Jur,Yur,N4,jXe,Vd,q4,wFe,p9,Kur,AFe,Zur,DXe,Uo,_9,epr,Xd,opr,kH,rpr,tpr,SH,apr,npr,spr,b9,lpr,LFe,ipr,dpr,cpr,Lt,v9,mpr,yFe,fpr,gpr,zd,hpr,xFe,upr,ppr,RH,_pr,bpr,vpr,j4,Fpr,po,F9,Tpr,$Fe,Mpr,Epr,on,Cpr,kFe,wpr,Apr,SFe,Lpr,ypr,RFe,xpr,$pr,kpr,Qd,D4,PFe,Spr,Rpr,PH,Ppr,Bpr,Ipr,G4,BFe,Npr,qpr,BH,jpr,Dpr,Gpr,O4,IFe,Opr,Vpr,IH,Xpr,zpr,Qpr,V4,Wpr,NFe,Hpr,Upr,qFe,Jpr,Ypr,X4,GXe,Wd,z4,jFe,T9,Kpr,DFe,Zpr,OXe,Jo,M9,e_r,Hd,o_r,NH,r_r,t_r,qH,a_r,n_r,s_r,E9,l_r,GFe,i_r,d_r,c_r,yt,C9,m_r,OFe,f_r,g_r,Ud,h_r,VFe,u_r,p_r,jH,__r,b_r,v_r,Q4,F_r,_o,w9,T_r,XFe,M_r,E_r,rn,C_r,zFe,w_r,A_r,QFe,L_r,y_r,WFe,x_r,$_r,k_r,A9,W4,HFe,S_r,R_r,DH,P_r,B_r,I_r,H4,UFe,N_r,q_r,GH,j_r,D_r,G_r,U4,O_r,JFe,V_r,X_r,YFe,z_r,Q_r,J4,VXe,Jd,Y4,KFe,L9,W_r,ZFe,H_r,XXe,Yo,y9,U_r,Yd,J_r,OH,Y_r,K_r,VH,Z_r,e2r,o2r,x9,r2r,eTe,t2r,a2r,n2r,xt,$9,s2r,oTe,l2r,i2r,Kd,d2r,rTe,c2r,m2r,XH,f2r,g2r,h2r,K4,u2r,bo,k9,p2r,tTe,_2r,b2r,tn,v2r,aTe,F2r,T2r,nTe,M2r,E2r,sTe,C2r,w2r,A2r,lTe,Z4,iTe,L2r,y2r,zH,x2r,$2r,k2r,eE,S2r,dTe,R2r,P2r,cTe,B2r,I2r,oE,zXe,Zd,rE,mTe,S9,N2r,fTe,q2r,QXe,Ko,R9,j2r,ec,D2r,QH,G2r,O2r,WH,V2r,X2r,z2r,P9,Q2r,gTe,W2r,H2r,U2r,$t,B9,J2r,hTe,Y2r,K2r,oc,Z2r,uTe,ebr,obr,HH,rbr,tbr,abr,tE,nbr,vo,I9,sbr,pTe,lbr,ibr,an,dbr,_Te,cbr,mbr,bTe,fbr,gbr,vTe,hbr,ubr,pbr,tt,aE,FTe,_br,bbr,UH,vbr,Fbr,Tbr,nE,TTe,Mbr,Ebr,JH,Cbr,wbr,Abr,sE,MTe,Lbr,ybr,YH,xbr,$br,kbr,lE,ETe,Sbr,Rbr,KH,Pbr,Bbr,Ibr,iE,CTe,Nbr,qbr,ZH,jbr,Dbr,Gbr,dE,Obr,wTe,Vbr,Xbr,ATe,zbr,Qbr,cE,WXe,rc,mE,LTe,N9,Wbr,yTe,Hbr,HXe,Zo,q9,Ubr,tc,Jbr,eU,Ybr,Kbr,oU,Zbr,evr,ovr,j9,rvr,xTe,tvr,avr,nvr,kt,D9,svr,$Te,lvr,ivr,ac,dvr,kTe,cvr,mvr,rU,fvr,gvr,hvr,fE,uvr,Fo,G9,pvr,STe,_vr,bvr,nn,vvr,RTe,Fvr,Tvr,PTe,Mvr,Evr,BTe,Cvr,wvr,Avr,ITe,gE,NTe,Lvr,yvr,tU,xvr,$vr,kvr,hE,Svr,qTe,Rvr,Pvr,jTe,Bvr,Ivr,uE,UXe,nc,pE,DTe,O9,Nvr,GTe,qvr,JXe,er,V9,jvr,sc,Dvr,aU,Gvr,Ovr,nU,Vvr,Xvr,zvr,X9,Qvr,OTe,Wvr,Hvr,Uvr,St,z9,Jvr,VTe,Yvr,Kvr,lc,Zvr,XTe,e1r,o1r,sU,r1r,t1r,a1r,_E,n1r,xr,Q9,s1r,zTe,l1r,i1r,sn,d1r,QTe,c1r,m1r,WTe,f1r,g1r,HTe,h1r,u1r,p1r,q,bE,UTe,_1r,b1r,lU,v1r,F1r,T1r,vE,JTe,M1r,E1r,iU,C1r,w1r,A1r,FE,YTe,L1r,y1r,dU,x1r,$1r,k1r,TE,KTe,S1r,R1r,cU,P1r,B1r,I1r,ME,ZTe,N1r,q1r,mU,j1r,D1r,G1r,EE,eMe,O1r,V1r,fU,X1r,z1r,Q1r,CE,oMe,W1r,H1r,gU,U1r,J1r,Y1r,wE,rMe,K1r,Z1r,hU,eFr,oFr,rFr,AE,tMe,tFr,aFr,uU,nFr,sFr,lFr,LE,aMe,iFr,dFr,pU,cFr,mFr,fFr,yE,nMe,gFr,hFr,_U,uFr,pFr,_Fr,xE,sMe,bFr,vFr,bU,FFr,TFr,MFr,$E,lMe,EFr,CFr,vU,wFr,AFr,LFr,kE,iMe,yFr,xFr,FU,$Fr,kFr,SFr,SE,dMe,RFr,PFr,TU,BFr,IFr,NFr,RE,cMe,qFr,jFr,MU,DFr,GFr,OFr,PE,mMe,VFr,XFr,EU,zFr,QFr,WFr,Js,fMe,HFr,UFr,CU,JFr,YFr,wU,KFr,ZFr,eTr,BE,gMe,oTr,rTr,AU,tTr,aTr,nTr,IE,hMe,sTr,lTr,LU,iTr,dTr,cTr,NE,uMe,mTr,fTr,yU,gTr,hTr,uTr,qE,pMe,pTr,_Tr,xU,bTr,vTr,FTr,jE,_Me,TTr,MTr,$U,ETr,CTr,wTr,DE,bMe,ATr,LTr,kU,yTr,xTr,$Tr,GE,vMe,kTr,STr,SU,RTr,PTr,BTr,OE,FMe,ITr,NTr,RU,qTr,jTr,DTr,VE,TMe,GTr,OTr,PU,VTr,XTr,zTr,XE,MMe,QTr,WTr,BU,HTr,UTr,JTr,zE,EMe,YTr,KTr,IU,ZTr,eMr,oMr,QE,CMe,rMr,tMr,NU,aMr,nMr,sMr,WE,wMe,lMr,iMr,qU,dMr,cMr,mMr,HE,AMe,fMr,gMr,jU,hMr,uMr,pMr,UE,LMe,_Mr,bMr,DU,vMr,FMr,TMr,JE,yMe,MMr,EMr,GU,CMr,wMr,AMr,YE,xMe,LMr,yMr,OU,xMr,$Mr,kMr,KE,$Me,SMr,RMr,VU,PMr,BMr,IMr,ZE,kMe,NMr,qMr,XU,jMr,DMr,GMr,eC,SMe,OMr,VMr,zU,XMr,zMr,QMr,oC,RMe,WMr,HMr,QU,UMr,JMr,YMr,rC,PMe,KMr,ZMr,WU,e4r,o4r,r4r,tC,BMe,t4r,a4r,HU,n4r,s4r,l4r,aC,IMe,i4r,d4r,UU,c4r,m4r,f4r,nC,NMe,g4r,h4r,JU,u4r,p4r,_4r,sC,qMe,b4r,v4r,YU,F4r,T4r,M4r,lC,jMe,E4r,C4r,KU,w4r,A4r,L4r,iC,DMe,y4r,x4r,ZU,$4r,k4r,S4r,dC,GMe,R4r,P4r,eJ,B4r,I4r,N4r,cC,OMe,q4r,j4r,oJ,D4r,G4r,O4r,mC,VMe,V4r,X4r,rJ,z4r,Q4r,W4r,fC,YXe,ic,gC,XMe,W9,H4r,zMe,U4r,KXe,or,H9,J4r,dc,Y4r,tJ,K4r,Z4r,aJ,eEr,oEr,rEr,U9,tEr,QMe,aEr,nEr,sEr,Rt,J9,lEr,WMe,iEr,dEr,cc,cEr,HMe,mEr,fEr,nJ,gEr,hEr,uEr,hC,pEr,$r,Y9,_Er,UMe,bEr,vEr,ln,FEr,JMe,TEr,MEr,YMe,EEr,CEr,KMe,wEr,AEr,LEr,se,uC,ZMe,yEr,xEr,sJ,$Er,kEr,SEr,pC,e4e,REr,PEr,lJ,BEr,IEr,NEr,_C,o4e,qEr,jEr,iJ,DEr,GEr,OEr,bC,r4e,VEr,XEr,dJ,zEr,QEr,WEr,vC,t4e,HEr,UEr,cJ,JEr,YEr,KEr,FC,a4e,ZEr,eCr,mJ,oCr,rCr,tCr,TC,n4e,aCr,nCr,fJ,sCr,lCr,iCr,MC,s4e,dCr,cCr,gJ,mCr,fCr,gCr,EC,l4e,hCr,uCr,hJ,pCr,_Cr,bCr,CC,i4e,vCr,FCr,uJ,TCr,MCr,ECr,wC,d4e,CCr,wCr,pJ,ACr,LCr,yCr,AC,c4e,xCr,$Cr,_J,kCr,SCr,RCr,LC,m4e,PCr,BCr,bJ,ICr,NCr,qCr,yC,f4e,jCr,DCr,vJ,GCr,OCr,VCr,xC,g4e,XCr,zCr,FJ,QCr,WCr,HCr,$C,h4e,UCr,JCr,TJ,YCr,KCr,ZCr,kC,u4e,e3r,o3r,MJ,r3r,t3r,a3r,SC,p4e,n3r,s3r,EJ,l3r,i3r,d3r,RC,_4e,c3r,m3r,CJ,f3r,g3r,h3r,PC,b4e,u3r,p3r,wJ,_3r,b3r,v3r,BC,v4e,F3r,T3r,AJ,M3r,E3r,C3r,IC,F4e,w3r,A3r,LJ,L3r,y3r,x3r,NC,T4e,$3r,k3r,yJ,S3r,R3r,P3r,qC,ZXe,mc,jC,M4e,K9,B3r,E4e,I3r,eze,rr,Z9,N3r,fc,q3r,xJ,j3r,D3r,$J,G3r,O3r,V3r,ex,X3r,C4e,z3r,Q3r,W3r,Pt,ox,H3r,w4e,U3r,J3r,gc,Y3r,A4e,K3r,Z3r,kJ,e5r,o5r,r5r,DC,t5r,kr,rx,a5r,L4e,n5r,s5r,dn,l5r,y4e,i5r,d5r,x4e,c5r,m5r,$4e,f5r,g5r,h5r,Me,GC,k4e,u5r,p5r,SJ,_5r,b5r,v5r,OC,S4e,F5r,T5r,RJ,M5r,E5r,C5r,VC,R4e,w5r,A5r,PJ,L5r,y5r,x5r,XC,P4e,$5r,k5r,BJ,S5r,R5r,P5r,zC,B4e,B5r,I5r,IJ,N5r,q5r,j5r,QC,I4e,D5r,G5r,NJ,O5r,V5r,X5r,WC,N4e,z5r,Q5r,qJ,W5r,H5r,U5r,HC,q4e,J5r,Y5r,jJ,K5r,Z5r,e0r,UC,j4e,o0r,r0r,DJ,t0r,a0r,n0r,JC,D4e,s0r,l0r,GJ,i0r,d0r,c0r,YC,G4e,m0r,f0r,OJ,g0r,h0r,u0r,KC,O4e,p0r,_0r,VJ,b0r,v0r,F0r,ZC,V4e,T0r,M0r,XJ,E0r,C0r,w0r,e3,oze,hc,o3,X4e,tx,A0r,z4e,L0r,rze,tr,ax,y0r,uc,x0r,zJ,$0r,k0r,QJ,S0r,R0r,P0r,nx,B0r,Q4e,I0r,N0r,q0r,Bt,sx,j0r,W4e,D0r,G0r,pc,O0r,H4e,V0r,X0r,WJ,z0r,Q0r,W0r,r3,H0r,Sr,lx,U0r,U4e,J0r,Y0r,cn,K0r,J4e,Z0r,ewr,Y4e,owr,rwr,K4e,twr,awr,nwr,ar,t3,Z4e,swr,lwr,HJ,iwr,dwr,cwr,a3,eEe,mwr,fwr,UJ,gwr,hwr,uwr,n3,oEe,pwr,_wr,JJ,bwr,vwr,Fwr,s3,rEe,Twr,Mwr,YJ,Ewr,Cwr,wwr,l3,tEe,Awr,Lwr,KJ,ywr,xwr,$wr,i3,aEe,kwr,Swr,ZJ,Rwr,Pwr,Bwr,d3,tze,_c,c3,nEe,ix,Iwr,sEe,Nwr,aze,nr,dx,qwr,bc,jwr,eY,Dwr,Gwr,oY,Owr,Vwr,Xwr,cx,zwr,lEe,Qwr,Wwr,Hwr,It,mx,Uwr,iEe,Jwr,Ywr,vc,Kwr,dEe,Zwr,eAr,rY,oAr,rAr,tAr,m3,aAr,Rr,fx,nAr,cEe,sAr,lAr,mn,iAr,mEe,dAr,cAr,fEe,mAr,fAr,gEe,gAr,hAr,uAr,ie,f3,hEe,pAr,_Ar,tY,bAr,vAr,FAr,g3,uEe,TAr,MAr,aY,EAr,CAr,wAr,h3,pEe,AAr,LAr,nY,yAr,xAr,$Ar,u3,_Ee,kAr,SAr,sY,RAr,PAr,BAr,p3,bEe,IAr,NAr,lY,qAr,jAr,DAr,_3,vEe,GAr,OAr,iY,VAr,XAr,zAr,b3,FEe,QAr,WAr,dY,HAr,UAr,JAr,v3,TEe,YAr,KAr,cY,ZAr,e6r,o6r,F3,MEe,r6r,t6r,mY,a6r,n6r,s6r,T3,EEe,l6r,i6r,fY,d6r,c6r,m6r,M3,CEe,f6r,g6r,gY,h6r,u6r,p6r,E3,wEe,_6r,b6r,hY,v6r,F6r,T6r,C3,AEe,M6r,E6r,uY,C6r,w6r,A6r,w3,LEe,L6r,y6r,pY,x6r,$6r,k6r,A3,yEe,S6r,R6r,_Y,P6r,B6r,I6r,L3,xEe,N6r,q6r,bY,j6r,D6r,G6r,y3,$Ee,O6r,V6r,vY,X6r,z6r,Q6r,x3,kEe,W6r,H6r,FY,U6r,J6r,Y6r,$3,SEe,K6r,Z6r,TY,e7r,o7r,r7r,k3,REe,t7r,a7r,MY,n7r,s7r,l7r,S3,nze,Fc,R3,PEe,gx,i7r,BEe,d7r,sze,sr,hx,c7r,Tc,m7r,EY,f7r,g7r,CY,h7r,u7r,p7r,ux,_7r,IEe,b7r,v7r,F7r,Nt,px,T7r,NEe,M7r,E7r,Mc,C7r,qEe,w7r,A7r,wY,L7r,y7r,x7r,P3,$7r,Pr,_x,k7r,jEe,S7r,R7r,fn,P7r,DEe,B7r,I7r,GEe,N7r,q7r,OEe,j7r,D7r,G7r,ye,B3,VEe,O7r,V7r,AY,X7r,z7r,Q7r,I3,XEe,W7r,H7r,LY,U7r,J7r,Y7r,N3,zEe,K7r,Z7r,yY,eLr,oLr,rLr,q3,QEe,tLr,aLr,xY,nLr,sLr,lLr,j3,WEe,iLr,dLr,$Y,cLr,mLr,fLr,D3,HEe,gLr,hLr,kY,uLr,pLr,_Lr,G3,UEe,bLr,vLr,SY,FLr,TLr,MLr,O3,JEe,ELr,CLr,RY,wLr,ALr,LLr,V3,YEe,yLr,xLr,PY,$Lr,kLr,SLr,X3,KEe,RLr,PLr,BY,BLr,ILr,NLr,z3,lze,Ec,Q3,ZEe,bx,qLr,eCe,jLr,ize,lr,vx,DLr,Cc,GLr,IY,OLr,VLr,NY,XLr,zLr,QLr,Fx,WLr,oCe,HLr,ULr,JLr,qt,Tx,YLr,rCe,KLr,ZLr,wc,eyr,tCe,oyr,ryr,qY,tyr,ayr,nyr,W3,syr,Br,Mx,lyr,aCe,iyr,dyr,gn,cyr,nCe,myr,fyr,sCe,gyr,hyr,lCe,uyr,pyr,_yr,te,H3,iCe,byr,vyr,jY,Fyr,Tyr,Myr,U3,dCe,Eyr,Cyr,DY,wyr,Ayr,Lyr,J3,cCe,yyr,xyr,GY,$yr,kyr,Syr,Y3,mCe,Ryr,Pyr,OY,Byr,Iyr,Nyr,K3,fCe,qyr,jyr,VY,Dyr,Gyr,Oyr,Z3,gCe,Vyr,Xyr,XY,zyr,Qyr,Wyr,e5,hCe,Hyr,Uyr,zY,Jyr,Yyr,Kyr,o5,uCe,Zyr,e8r,QY,o8r,r8r,t8r,r5,pCe,a8r,n8r,WY,s8r,l8r,i8r,t5,_Ce,d8r,c8r,HY,m8r,f8r,g8r,a5,bCe,h8r,u8r,UY,p8r,_8r,b8r,n5,vCe,v8r,F8r,JY,T8r,M8r,E8r,s5,FCe,C8r,w8r,YY,A8r,L8r,y8r,l5,TCe,x8r,$8r,KY,k8r,S8r,R8r,i5,MCe,P8r,B8r,ZY,I8r,N8r,q8r,d5,ECe,j8r,D8r,eK,G8r,O8r,V8r,c5,CCe,X8r,z8r,oK,Q8r,W8r,H8r,m5,wCe,U8r,J8r,rK,Y8r,K8r,Z8r,f5,ACe,e9r,o9r,tK,r9r,t9r,a9r,g5,LCe,n9r,s9r,aK,l9r,i9r,d9r,h5,yCe,c9r,m9r,nK,f9r,g9r,h9r,u5,xCe,u9r,p9r,sK,_9r,b9r,v9r,p5,$Ce,F9r,T9r,lK,M9r,E9r,C9r,_5,kCe,w9r,A9r,iK,L9r,y9r,x9r,b5,SCe,$9r,k9r,dK,S9r,R9r,P9r,v5,RCe,B9r,I9r,cK,N9r,q9r,j9r,F5,dze,Ac,T5,PCe,Ex,D9r,BCe,G9r,cze,ir,Cx,O9r,Lc,V9r,mK,X9r,z9r,fK,Q9r,W9r,H9r,wx,U9r,ICe,J9r,Y9r,K9r,jt,Ax,Z9r,NCe,exr,oxr,yc,rxr,qCe,txr,axr,gK,nxr,sxr,lxr,M5,ixr,Ir,Lx,dxr,jCe,cxr,mxr,hn,fxr,DCe,gxr,hxr,GCe,uxr,pxr,OCe,_xr,bxr,vxr,pe,E5,VCe,Fxr,Txr,hK,Mxr,Exr,Cxr,C5,XCe,wxr,Axr,uK,Lxr,yxr,xxr,w5,zCe,$xr,kxr,pK,Sxr,Rxr,Pxr,A5,QCe,Bxr,Ixr,_K,Nxr,qxr,jxr,L5,WCe,Dxr,Gxr,bK,Oxr,Vxr,Xxr,y5,HCe,zxr,Qxr,vK,Wxr,Hxr,Uxr,x5,UCe,Jxr,Yxr,FK,Kxr,Zxr,e$r,$5,JCe,o$r,r$r,TK,t$r,a$r,n$r,k5,YCe,s$r,l$r,MK,i$r,d$r,c$r,S5,KCe,m$r,f$r,EK,g$r,h$r,u$r,R5,ZCe,p$r,_$r,CK,b$r,v$r,F$r,P5,e3e,T$r,M$r,wK,E$r,C$r,w$r,B5,o3e,A$r,L$r,AK,y$r,x$r,$$r,I5,r3e,k$r,S$r,LK,R$r,P$r,B$r,N5,t3e,I$r,N$r,yK,q$r,j$r,D$r,q5,a3e,G$r,O$r,xK,V$r,X$r,z$r,j5,n3e,Q$r,W$r,$K,H$r,U$r,J$r,D5,mze,xc,G5,s3e,yx,Y$r,l3e,K$r,fze,dr,xx,Z$r,$c,ekr,kK,okr,rkr,SK,tkr,akr,nkr,$x,skr,i3e,lkr,ikr,dkr,Dt,kx,ckr,d3e,mkr,fkr,kc,gkr,c3e,hkr,ukr,RK,pkr,_kr,bkr,O5,vkr,Nr,Sx,Fkr,m3e,Tkr,Mkr,un,Ekr,f3e,Ckr,wkr,g3e,Akr,Lkr,h3e,ykr,xkr,$kr,Rx,V5,u3e,kkr,Skr,PK,Rkr,Pkr,Bkr,X5,p3e,Ikr,Nkr,BK,qkr,jkr,Dkr,z5,gze,Sc,Q5,_3e,Px,Gkr,b3e,Okr,hze,cr,Bx,Vkr,Rc,Xkr,IK,zkr,Qkr,NK,Wkr,Hkr,Ukr,Ix,Jkr,v3e,Ykr,Kkr,Zkr,Gt,Nx,eSr,F3e,oSr,rSr,Pc,tSr,T3e,aSr,nSr,qK,sSr,lSr,iSr,W5,dSr,qr,qx,cSr,M3e,mSr,fSr,pn,gSr,E3e,hSr,uSr,C3e,pSr,_Sr,w3e,bSr,vSr,FSr,A3e,H5,L3e,TSr,MSr,jK,ESr,CSr,wSr,U5,uze,Bc,J5,y3e,jx,ASr,x3e,LSr,pze,mr,Dx,ySr,Ic,xSr,DK,$Sr,kSr,GK,SSr,RSr,PSr,Gx,BSr,$3e,ISr,NSr,qSr,Ot,Ox,jSr,k3e,DSr,GSr,Nc,OSr,S3e,VSr,XSr,OK,zSr,QSr,WSr,Y5,HSr,jr,Vx,USr,R3e,JSr,YSr,_n,KSr,P3e,ZSr,eRr,B3e,oRr,rRr,I3e,tRr,aRr,nRr,de,K5,N3e,sRr,lRr,VK,iRr,dRr,cRr,Z5,q3e,mRr,fRr,XK,gRr,hRr,uRr,e0,j3e,pRr,_Rr,zK,bRr,vRr,FRr,o0,D3e,TRr,MRr,QK,ERr,CRr,wRr,r0,G3e,ARr,LRr,WK,yRr,xRr,$Rr,t0,O3e,kRr,SRr,HK,RRr,PRr,BRr,a0,V3e,IRr,NRr,UK,qRr,jRr,DRr,n0,X3e,GRr,ORr,JK,VRr,XRr,zRr,s0,z3e,QRr,WRr,YK,HRr,URr,JRr,l0,Q3e,YRr,KRr,KK,ZRr,ePr,oPr,i0,W3e,rPr,tPr,ZK,aPr,nPr,sPr,d0,H3e,lPr,iPr,eZ,dPr,cPr,mPr,c0,U3e,fPr,gPr,oZ,hPr,uPr,pPr,m0,J3e,_Pr,bPr,rZ,vPr,FPr,TPr,f0,Y3e,MPr,EPr,tZ,CPr,wPr,APr,g0,K3e,LPr,yPr,aZ,xPr,$Pr,kPr,h0,Z3e,SPr,RPr,nZ,PPr,BPr,IPr,u0,e5e,NPr,qPr,sZ,jPr,DPr,GPr,p0,o5e,OPr,VPr,lZ,XPr,zPr,QPr,_0,r5e,WPr,HPr,iZ,UPr,JPr,YPr,b0,_ze,qc,v0,t5e,Xx,KPr,a5e,ZPr,bze,fr,zx,eBr,jc,oBr,dZ,rBr,tBr,cZ,aBr,nBr,sBr,Qx,lBr,n5e,iBr,dBr,cBr,Vt,Wx,mBr,s5e,fBr,gBr,Dc,hBr,l5e,uBr,pBr,mZ,_Br,bBr,vBr,F0,FBr,Dr,Hx,TBr,i5e,MBr,EBr,bn,CBr,d5e,wBr,ABr,c5e,LBr,yBr,m5e,xBr,$Br,kBr,ce,T0,f5e,SBr,RBr,fZ,PBr,BBr,IBr,M0,g5e,NBr,qBr,gZ,jBr,DBr,GBr,E0,h5e,OBr,VBr,hZ,XBr,zBr,QBr,C0,u5e,WBr,HBr,uZ,UBr,JBr,YBr,w0,p5e,KBr,ZBr,pZ,eIr,oIr,rIr,A0,_5e,tIr,aIr,_Z,nIr,sIr,lIr,L0,b5e,iIr,dIr,bZ,cIr,mIr,fIr,y0,v5e,gIr,hIr,vZ,uIr,pIr,_Ir,x0,F5e,bIr,vIr,FZ,FIr,TIr,MIr,$0,T5e,EIr,CIr,TZ,wIr,AIr,LIr,k0,M5e,yIr,xIr,MZ,$Ir,kIr,SIr,S0,E5e,RIr,PIr,EZ,BIr,IIr,NIr,R0,C5e,qIr,jIr,CZ,DIr,GIr,OIr,P0,w5e,VIr,XIr,wZ,zIr,QIr,WIr,B0,A5e,HIr,UIr,AZ,JIr,YIr,KIr,I0,L5e,ZIr,eNr,LZ,oNr,rNr,tNr,N0,y5e,aNr,nNr,yZ,sNr,lNr,iNr,q0,x5e,dNr,cNr,xZ,mNr,fNr,gNr,j0,$5e,hNr,uNr,$Z,pNr,_Nr,bNr,D0,k5e,vNr,FNr,kZ,TNr,MNr,ENr,G0,vze,Gc,O0,S5e,Ux,CNr,R5e,wNr,Fze,gr,Jx,ANr,Oc,LNr,SZ,yNr,xNr,RZ,$Nr,kNr,SNr,Yx,RNr,P5e,PNr,BNr,INr,Xt,Kx,NNr,B5e,qNr,jNr,Vc,DNr,I5e,GNr,ONr,PZ,VNr,XNr,zNr,V0,QNr,Gr,Zx,WNr,N5e,HNr,UNr,vn,JNr,q5e,YNr,KNr,j5e,ZNr,eqr,D5e,oqr,rqr,tqr,G5e,X0,O5e,aqr,nqr,BZ,sqr,lqr,iqr,z0,Tze,Xc,Q0,V5e,e$,dqr,X5e,cqr,Mze,hr,o$,mqr,zc,fqr,IZ,gqr,hqr,NZ,uqr,pqr,_qr,r$,bqr,z5e,vqr,Fqr,Tqr,zt,t$,Mqr,Q5e,Eqr,Cqr,Qc,wqr,W5e,Aqr,Lqr,qZ,yqr,xqr,$qr,W0,kqr,Or,a$,Sqr,H5e,Rqr,Pqr,Fn,Bqr,U5e,Iqr,Nqr,J5e,qqr,jqr,Y5e,Dqr,Gqr,Oqr,K5e,H0,Z5e,Vqr,Xqr,jZ,zqr,Qqr,Wqr,U0,Eze,Wc,J0,e0e,n$,Hqr,o0e,Uqr,Cze,ur,s$,Jqr,Hc,Yqr,DZ,Kqr,Zqr,GZ,ejr,ojr,rjr,l$,tjr,r0e,ajr,njr,sjr,Qt,i$,ljr,t0e,ijr,djr,Uc,cjr,a0e,mjr,fjr,OZ,gjr,hjr,ujr,Y0,pjr,Vr,d$,_jr,n0e,bjr,vjr,Tn,Fjr,s0e,Tjr,Mjr,l0e,Ejr,Cjr,i0e,wjr,Ajr,Ljr,oe,K0,d0e,yjr,xjr,VZ,$jr,kjr,Sjr,Z0,c0e,Rjr,Pjr,XZ,Bjr,Ijr,Njr,ew,m0e,qjr,jjr,zZ,Djr,Gjr,Ojr,ow,f0e,Vjr,Xjr,QZ,zjr,Qjr,Wjr,rw,g0e,Hjr,Ujr,WZ,Jjr,Yjr,Kjr,tw,h0e,Zjr,eDr,HZ,oDr,rDr,tDr,aw,u0e,aDr,nDr,UZ,sDr,lDr,iDr,nw,p0e,dDr,cDr,JZ,mDr,fDr,gDr,sw,_0e,hDr,uDr,YZ,pDr,_Dr,bDr,lw,b0e,vDr,FDr,KZ,TDr,MDr,EDr,iw,v0e,CDr,wDr,ZZ,ADr,LDr,yDr,dw,F0e,xDr,$Dr,eee,kDr,SDr,RDr,cw,T0e,PDr,BDr,oee,IDr,NDr,qDr,mw,M0e,jDr,DDr,ree,GDr,ODr,VDr,fw,E0e,XDr,zDr,tee,QDr,WDr,HDr,gw,C0e,UDr,JDr,aee,YDr,KDr,ZDr,hw,w0e,eGr,oGr,nee,rGr,tGr,aGr,uw,A0e,nGr,sGr,see,lGr,iGr,dGr,pw,L0e,cGr,mGr,lee,fGr,gGr,hGr,_w,y0e,uGr,pGr,iee,_Gr,bGr,vGr,bw,x0e,FGr,TGr,dee,MGr,EGr,CGr,vw,$0e,wGr,AGr,cee,LGr,yGr,xGr,Fw,k0e,$Gr,kGr,mee,SGr,RGr,PGr,Tw,S0e,BGr,IGr,fee,NGr,qGr,jGr,Mw,R0e,DGr,GGr,gee,OGr,VGr,XGr,Ew,P0e,zGr,QGr,hee,WGr,HGr,UGr,Cw,B0e,JGr,YGr,uee,KGr,ZGr,eOr,ww,wze,Jc,Aw,I0e,c$,oOr,N0e,rOr,Aze,pr,m$,tOr,Yc,aOr,pee,nOr,sOr,_ee,lOr,iOr,dOr,f$,cOr,q0e,mOr,fOr,gOr,Wt,g$,hOr,j0e,uOr,pOr,Kc,_Or,D0e,bOr,vOr,bee,FOr,TOr,MOr,Lw,EOr,Xr,h$,COr,G0e,wOr,AOr,Mn,LOr,O0e,yOr,xOr,V0e,$Or,kOr,X0e,SOr,ROr,POr,xe,yw,z0e,BOr,IOr,vee,NOr,qOr,jOr,xw,Q0e,DOr,GOr,Fee,OOr,VOr,XOr,$w,W0e,zOr,QOr,Tee,WOr,HOr,UOr,kw,H0e,JOr,YOr,Mee,KOr,ZOr,eVr,Sw,U0e,oVr,rVr,Eee,tVr,aVr,nVr,Rw,J0e,sVr,lVr,Cee,iVr,dVr,cVr,Pw,Y0e,mVr,fVr,wee,gVr,hVr,uVr,Bw,K0e,pVr,_Vr,Aee,bVr,vVr,FVr,Iw,Z0e,TVr,MVr,Lee,EVr,CVr,wVr,Nw,ewe,AVr,LVr,yee,yVr,xVr,$Vr,qw,Lze,Zc,jw,owe,u$,kVr,rwe,SVr,yze,_r,p$,RVr,em,PVr,xee,BVr,IVr,$ee,NVr,qVr,jVr,_$,DVr,twe,GVr,OVr,VVr,Ht,b$,XVr,awe,zVr,QVr,om,WVr,nwe,HVr,UVr,kee,JVr,YVr,KVr,Dw,ZVr,zr,v$,eXr,swe,oXr,rXr,En,tXr,lwe,aXr,nXr,iwe,sXr,lXr,dwe,iXr,dXr,cXr,Ee,Gw,cwe,mXr,fXr,See,gXr,hXr,uXr,Ow,mwe,pXr,_Xr,Ree,bXr,vXr,FXr,Vw,fwe,TXr,MXr,Pee,EXr,CXr,wXr,Xw,gwe,AXr,LXr,Bee,yXr,xXr,$Xr,zw,hwe,kXr,SXr,Iee,RXr,PXr,BXr,Qw,uwe,IXr,NXr,Nee,qXr,jXr,DXr,Ww,pwe,GXr,OXr,qee,VXr,XXr,zXr,Hw,_we,QXr,WXr,jee,HXr,UXr,JXr,Uw,bwe,YXr,KXr,Dee,ZXr,ezr,ozr,Jw,vwe,rzr,tzr,Gee,azr,nzr,szr,Yw,Fwe,lzr,izr,Oee,dzr,czr,mzr,Kw,Twe,fzr,gzr,Vee,hzr,uzr,pzr,Zw,Mwe,_zr,bzr,Xee,vzr,Fzr,Tzr,eA,xze,rm,oA,Ewe,F$,Mzr,Cwe,Ezr,$ze,br,T$,Czr,tm,wzr,zee,Azr,Lzr,Qee,yzr,xzr,$zr,M$,kzr,wwe,Szr,Rzr,Pzr,Ut,E$,Bzr,Awe,Izr,Nzr,am,qzr,Lwe,jzr,Dzr,Wee,Gzr,Ozr,Vzr,rA,Xzr,Qr,C$,zzr,ywe,Qzr,Wzr,Cn,Hzr,xwe,Uzr,Jzr,$we,Yzr,Kzr,kwe,Zzr,eQr,oQr,$e,tA,Swe,rQr,tQr,Hee,aQr,nQr,sQr,aA,Rwe,lQr,iQr,Uee,dQr,cQr,mQr,nA,Pwe,fQr,gQr,Jee,hQr,uQr,pQr,sA,Bwe,_Qr,bQr,Yee,vQr,FQr,TQr,lA,Iwe,MQr,EQr,Kee,CQr,wQr,AQr,iA,Nwe,LQr,yQr,Zee,xQr,$Qr,kQr,dA,qwe,SQr,RQr,eoe,PQr,BQr,IQr,cA,jwe,NQr,qQr,ooe,jQr,DQr,GQr,mA,Dwe,OQr,VQr,roe,XQr,zQr,QQr,fA,Gwe,WQr,HQr,toe,UQr,JQr,YQr,gA,kze,nm,hA,Owe,w$,KQr,Vwe,ZQr,Sze,vr,A$,eWr,sm,oWr,aoe,rWr,tWr,noe,aWr,nWr,sWr,L$,lWr,Xwe,iWr,dWr,cWr,Jt,y$,mWr,zwe,fWr,gWr,lm,hWr,Qwe,uWr,pWr,soe,_Wr,bWr,vWr,uA,FWr,Wr,x$,TWr,Wwe,MWr,EWr,wn,CWr,Hwe,wWr,AWr,Uwe,LWr,yWr,Jwe,xWr,$Wr,kWr,ke,pA,Ywe,SWr,RWr,loe,PWr,BWr,IWr,_A,Kwe,NWr,qWr,ioe,jWr,DWr,GWr,bA,Zwe,OWr,VWr,doe,XWr,zWr,QWr,vA,eAe,WWr,HWr,coe,UWr,JWr,YWr,FA,oAe,KWr,ZWr,moe,eHr,oHr,rHr,TA,rAe,tHr,aHr,foe,nHr,sHr,lHr,MA,tAe,iHr,dHr,goe,cHr,mHr,fHr,EA,aAe,gHr,hHr,hoe,uHr,pHr,_Hr,CA,nAe,bHr,vHr,uoe,FHr,THr,MHr,wA,sAe,EHr,CHr,poe,wHr,AHr,LHr,AA,Rze,im,LA,lAe,$$,yHr,iAe,xHr,Pze,Fr,k$,$Hr,dm,kHr,_oe,SHr,RHr,boe,PHr,BHr,IHr,S$,NHr,dAe,qHr,jHr,DHr,Yt,R$,GHr,cAe,OHr,VHr,cm,XHr,mAe,zHr,QHr,voe,WHr,HHr,UHr,yA,JHr,Hr,P$,YHr,fAe,KHr,ZHr,An,eUr,gAe,oUr,rUr,hAe,tUr,aUr,uAe,nUr,sUr,lUr,Se,xA,pAe,iUr,dUr,Foe,cUr,mUr,fUr,$A,_Ae,gUr,hUr,Toe,uUr,pUr,_Ur,kA,bAe,bUr,vUr,Moe,FUr,TUr,MUr,SA,vAe,EUr,CUr,Eoe,wUr,AUr,LUr,RA,FAe,yUr,xUr,Coe,$Ur,kUr,SUr,PA,TAe,RUr,PUr,woe,BUr,IUr,NUr,BA,MAe,qUr,jUr,Aoe,DUr,GUr,OUr,IA,EAe,VUr,XUr,Loe,zUr,QUr,WUr,NA,CAe,HUr,UUr,yoe,JUr,YUr,KUr,qA,wAe,ZUr,eJr,xoe,oJr,rJr,tJr,jA,Bze,mm,DA,AAe,B$,aJr,LAe,nJr,Ize,Tr,I$,sJr,fm,lJr,$oe,iJr,dJr,koe,cJr,mJr,fJr,N$,gJr,yAe,hJr,uJr,pJr,Kt,q$,_Jr,xAe,bJr,vJr,gm,FJr,$Ae,TJr,MJr,Soe,EJr,CJr,wJr,GA,AJr,Ur,j$,LJr,kAe,yJr,xJr,Ln,$Jr,SAe,kJr,SJr,RAe,RJr,PJr,PAe,BJr,IJr,NJr,Re,OA,BAe,qJr,jJr,Roe,DJr,GJr,OJr,VA,IAe,VJr,XJr,Poe,zJr,QJr,WJr,XA,NAe,HJr,UJr,Boe,JJr,YJr,KJr,zA,qAe,ZJr,eYr,Ioe,oYr,rYr,tYr,QA,jAe,aYr,nYr,Noe,sYr,lYr,iYr,WA,DAe,dYr,cYr,qoe,mYr,fYr,gYr,HA,GAe,hYr,uYr,joe,pYr,_Yr,bYr,UA,OAe,vYr,FYr,Doe,TYr,MYr,EYr,JA,VAe,CYr,wYr,Goe,AYr,LYr,yYr,YA,XAe,xYr,$Yr,Ooe,kYr,SYr,RYr,KA,Nze,hm,ZA,zAe,D$,PYr,QAe,BYr,qze,Mr,G$,IYr,um,NYr,Voe,qYr,jYr,Xoe,DYr,GYr,OYr,O$,VYr,WAe,XYr,zYr,QYr,Zt,V$,WYr,HAe,HYr,UYr,pm,JYr,UAe,YYr,KYr,zoe,ZYr,eKr,oKr,e6,rKr,Jr,X$,tKr,JAe,aKr,nKr,yn,sKr,YAe,lKr,iKr,KAe,dKr,cKr,ZAe,mKr,fKr,gKr,Ve,o6,e6e,hKr,uKr,Qoe,pKr,_Kr,bKr,r6,o6e,vKr,FKr,Woe,TKr,MKr,EKr,t6,r6e,CKr,wKr,Hoe,AKr,LKr,yKr,a6,t6e,xKr,$Kr,Uoe,kKr,SKr,RKr,n6,a6e,PKr,BKr,Joe,IKr,NKr,qKr,s6,n6e,jKr,DKr,Yoe,GKr,OKr,VKr,l6,s6e,XKr,zKr,Koe,QKr,WKr,HKr,i6,l6e,UKr,JKr,Zoe,YKr,KKr,ZKr,d6,jze,_m,c6,i6e,z$,eZr,d6e,oZr,Dze,Er,Q$,rZr,bm,tZr,ere,aZr,nZr,ore,sZr,lZr,iZr,W$,dZr,c6e,cZr,mZr,fZr,ea,H$,gZr,m6e,hZr,uZr,vm,pZr,f6e,_Zr,bZr,rre,vZr,FZr,TZr,m6,MZr,Yr,U$,EZr,g6e,CZr,wZr,xn,AZr,h6e,LZr,yZr,u6e,xZr,$Zr,p6e,kZr,SZr,RZr,Xe,f6,_6e,PZr,BZr,tre,IZr,NZr,qZr,g6,b6e,jZr,DZr,are,GZr,OZr,VZr,h6,v6e,XZr,zZr,nre,QZr,WZr,HZr,u6,F6e,UZr,JZr,sre,YZr,KZr,ZZr,p6,T6e,eet,oet,lre,ret,tet,aet,_6,M6e,net,set,ire,iet,det,cet,b6,E6e,met,fet,dre,get,het,uet,v6,C6e,pet,_et,cre,bet,vet,Fet,F6,Gze,Fm,T6,w6e,J$,Tet,A6e,Met,Oze,Cr,Y$,Eet,Tm,Cet,mre,wet,Aet,fre,Let,yet,xet,K$,$et,L6e,ket,Set,Ret,oa,Z$,Pet,y6e,Bet,Iet,Mm,Net,x6e,qet,jet,gre,Det,Get,Oet,M6,Vet,Kr,ek,Xet,$6e,zet,Qet,$n,Wet,k6e,Het,Uet,S6e,Jet,Yet,R6e,Ket,Zet,eot,P6e,E6,B6e,oot,rot,hre,tot,aot,not,C6,Vze,Em,w6,I6e,ok,sot,N6e,lot,Xze,wr,rk,iot,Cm,dot,ure,cot,mot,pre,fot,got,hot,tk,uot,q6e,pot,_ot,bot,ra,ak,vot,j6e,Fot,Tot,wm,Mot,D6e,Eot,Cot,_re,wot,Aot,Lot,A6,yot,Zr,nk,xot,G6e,$ot,kot,kn,Sot,O6e,Rot,Pot,V6e,Bot,Iot,X6e,Not,qot,jot,sk,L6,z6e,Dot,Got,bre,Oot,Vot,Xot,y6,Q6e,zot,Qot,vre,Wot,Hot,Uot,x6,zze,Am,$6,W6e,lk,Jot,H6e,Yot,Qze,Ar,ik,Kot,Lm,Zot,Fre,ert,ort,Tre,rrt,trt,art,dk,nrt,U6e,srt,lrt,irt,ta,ck,drt,J6e,crt,mrt,ym,frt,Y6e,grt,hrt,Mre,urt,prt,_rt,k6,brt,et,mk,vrt,K6e,Frt,Trt,Sn,Mrt,Z6e,Ert,Crt,e7e,wrt,Art,o7e,Lrt,yrt,xrt,r7e,S6,t7e,$rt,krt,Ere,Srt,Rrt,Prt,R6,Wze;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),ry=new re({}),ty=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Nm=new Brt({props:{warning:!0,$$slots:{default:[dQt]},$$scope:{ctx:$}}}),ay=new re({}),ny=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L610"}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L633"}}),Jg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[cQt]},$$scope:{ctx:$}}}),dy=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L756"}}),cy=new re({}),my=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L403"}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L417"}}),Sh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[mQt]},$$scope:{ctx:$}}}),uy=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L616"}}),py=new re({}),_y=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L195"}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L209"}}),uu=new Brt({props:{$$slots:{default:[fQt]},$$scope:{ctx:$}}}),pu=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[gQt]},$$scope:{ctx:$}}}),Ty=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L336"}}),My=new re({}),Ey=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L89"}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L103"}}),Nu=new Brt({props:{$$slots:{default:[hQt]},$$scope:{ctx:$}}}),qu=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[uQt]},$$scope:{ctx:$}}}),Ly=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L256"}}),yy=new re({}),xy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L782"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Gu=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[pQt]},$$scope:{ctx:$}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),z_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[_Qt]},$$scope:{ctx:$}}}),Ry=new re({}),Py=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L789"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),W_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[bQt]},$$scope:{ctx:$}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),D2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[vQt]},$$scope:{ctx:$}}}),qy=new re({}),jy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L804"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),O2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[FQt]},$$scope:{ctx:$}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$b=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[TQt]},$$scope:{ctx:$}}}),Vy=new re({}),Xy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L811"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Sb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[MQt]},$$scope:{ctx:$}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bv=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[EQt]},$$scope:{ctx:$}}}),Hy=new re({}),Uy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L818"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Fv=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[CQt]},$$scope:{ctx:$}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Dv=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[wQt]},$$scope:{ctx:$}}}),Zy=new re({}),e8=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L827"}}),r8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Ov=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[AQt]},$$scope:{ctx:$}}}),t8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),D1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[LQt]},$$scope:{ctx:$}}}),a8=new re({}),n8=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L872"}}),l8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),O1=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[yQt]},$$scope:{ctx:$}}}),i8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),FF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[xQt]},$$scope:{ctx:$}}}),d8=new re({}),c8=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L879"}}),f8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),MF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[$Qt]},$$scope:{ctx:$}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$F=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[kQt]},$$scope:{ctx:$}}}),h8=new re({}),u8=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L865"}}),_8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),SF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[SQt]},$$scope:{ctx:$}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),pT=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[RQt]},$$scope:{ctx:$}}}),v8=new re({}),F8=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L836"}}),M8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),bT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[PQt]},$$scope:{ctx:$}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iM=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[BQt]},$$scope:{ctx:$}}}),C8=new re({}),w8=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L843"}}),L8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cM=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[IQt]},$$scope:{ctx:$}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gM=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[NQt]},$$scope:{ctx:$}}}),x8=new re({}),$8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L888"}}),S8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uM=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[qQt]},$$scope:{ctx:$}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$M=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[jQt]},$$scope:{ctx:$}}}),P8=new re({}),B8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L927"}}),N8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),SM=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[DQt]},$$scope:{ctx:$}}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),BM=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[GQt]},$$scope:{ctx:$}}}),j8=new re({}),D8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L854"}}),O8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),NM=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[OQt]},$$scope:{ctx:$}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),DM=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[VQt]},$$scope:{ctx:$}}}),X8=new re({}),z8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L934"}}),W8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),OM=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[XQt]},$$scope:{ctx:$}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ZM=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[zQt]},$$scope:{ctx:$}}}),U8=new re({}),J8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L957"}}),K8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o4=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[QQt]},$$scope:{ctx:$}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),i4=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[WQt]},$$scope:{ctx:$}}}),e9=new re({}),o9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L941"}}),t9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),c4=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[HQt]},$$scope:{ctx:$}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),M4=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[UQt]},$$scope:{ctx:$}}}),n9=new re({}),s9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L948"}}),i9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),C4=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[JQt]},$$scope:{ctx:$}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),y4=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[YQt]},$$scope:{ctx:$}}}),m9=new re({}),f9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L966"}}),h9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$4=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[KQt]},$$scope:{ctx:$}}}),u9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),N4=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[ZQt]},$$scope:{ctx:$}}}),p9=new re({}),_9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L973"}}),v9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),j4=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[eWt]},$$scope:{ctx:$}}}),F9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),X4=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[oWt]},$$scope:{ctx:$}}}),T9=new re({}),M9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L920"}}),C9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Q4=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[rWt]},$$scope:{ctx:$}}}),w9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),J4=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[tWt]},$$scope:{ctx:$}}}),L9=new re({}),y9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L895"}}),$9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),K4=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[aWt]},$$scope:{ctx:$}}}),k9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),oE=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[nWt]},$$scope:{ctx:$}}}),S9=new re({}),R9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L902"}}),B9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),tE=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[sWt]},$$scope:{ctx:$}}}),I9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),cE=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[lWt]},$$scope:{ctx:$}}}),N9=new re({}),q9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L911"}}),D9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),fE=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[iWt]},$$scope:{ctx:$}}}),G9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),uE=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[dWt]},$$scope:{ctx:$}}}),O9=new re({}),V9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),z9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_E=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[cWt]},$$scope:{ctx:$}}}),Q9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fC=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[mWt]},$$scope:{ctx:$}}}),W9=new re({}),H9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),J9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hC=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[fWt]},$$scope:{ctx:$}}}),Y9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),qC=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[gWt]},$$scope:{ctx:$}}}),K9=new re({}),Z9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),DC=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[hWt]},$$scope:{ctx:$}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),e3=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[uWt]},$$scope:{ctx:$}}}),tx=new re({}),ax=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),r3=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[pWt]},$$scope:{ctx:$}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d3=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[_Wt]},$$scope:{ctx:$}}}),ix=new re({}),dx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),m3=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[bWt]},$$scope:{ctx:$}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),S3=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[vWt]},$$scope:{ctx:$}}}),gx=new re({}),hx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),P3=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[FWt]},$$scope:{ctx:$}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),z3=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[TWt]},$$scope:{ctx:$}}}),bx=new re({}),vx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L489"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),W3=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[MWt]},$$scope:{ctx:$}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),F5=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[EWt]},$$scope:{ctx:$}}}),Ex=new re({}),Cx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L525"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),M5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[CWt]},$$scope:{ctx:$}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[wWt]},$$scope:{ctx:$}}}),yx=new re({}),xx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L532"}}),kx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),O5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[AWt]},$$scope:{ctx:$}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),z5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[LWt]},$$scope:{ctx:$}}}),Px=new re({}),Bx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L505"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[yWt]},$$scope:{ctx:$}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[xWt]},$$scope:{ctx:$}}}),jx=new re({}),Dx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[$Wt]},$$scope:{ctx:$}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),b0=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[kWt]},$$scope:{ctx:$}}}),Xx=new re({}),zx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L498"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),F0=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[SWt]},$$scope:{ctx:$}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G0=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[RWt]},$$scope:{ctx:$}}}),Ux=new re({}),Jx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V0=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[PWt]},$$scope:{ctx:$}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),z0=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[BWt]},$$scope:{ctx:$}}}),e$=new re({}),o$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L541"}}),t$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),W0=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[IWt]},$$scope:{ctx:$}}}),a$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U0=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[NWt]},$$scope:{ctx:$}}}),n$=new re({}),s$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),i$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y0=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[qWt]},$$scope:{ctx:$}}}),d$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ww=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[jWt]},$$scope:{ctx:$}}}),c$=new re({}),m$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),g$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Lw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[DWt]},$$scope:{ctx:$}}}),h$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),qw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[GWt]},$$scope:{ctx:$}}}),u$=new re({}),p$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),b$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Dw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[OWt]},$$scope:{ctx:$}}}),v$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),eA=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[VWt]},$$scope:{ctx:$}}}),F$=new re({}),T$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),E$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rA=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[XWt]},$$scope:{ctx:$}}}),C$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gA=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[zWt]},$$scope:{ctx:$}}}),w$=new re({}),A$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),y$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uA=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[QWt]},$$scope:{ctx:$}}}),x$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),AA=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[WWt]},$$scope:{ctx:$}}}),$$=new re({}),k$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),R$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yA=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[HWt]},$$scope:{ctx:$}}}),P$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),jA=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[UWt]},$$scope:{ctx:$}}}),B$=new re({}),I$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),GA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[JWt]},$$scope:{ctx:$}}}),j$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),KA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[YWt]},$$scope:{ctx:$}}}),D$=new re({}),G$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),V$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),e6=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[KWt]},$$scope:{ctx:$}}}),X$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d6=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[ZWt]},$$scope:{ctx:$}}}),z$=new re({}),Q$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),H$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),m6=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[eHt]},$$scope:{ctx:$}}}),U$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),F6=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),J$=new re({}),Y$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),Z$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),M6=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[rHt]},$$scope:{ctx:$}}}),ek=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),C6=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),ok=new re({}),rk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),ak=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),A6=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),nk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),x6=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),lk=new re({}),ik=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),ck=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),k6=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),mk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),R6=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Ai=o("Auto Classes"),Sm=l(),st=a("p"),Li=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),yi=a("code"),KL=o("from_pretrained()"),Rm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),xi=o("Instantiating one of "),Pn=a("a"),ZL=o("AutoConfig"),Bn=o(", "),In=a("a"),ey=o("AutoModel"),$i=o(`, and
`),Nn=a("a"),oy=o("AutoTokenizer"),ki=o(" will directly create a class of the relevant architecture. For instance"),Pm=l(),F(Sa.$$.fragment),We=l(),Ae=a("p"),SS=o("will create a model that is an instance of "),Si=a("a"),RS=o("BertModel"),PS=o("."),Co=l(),Ra=a("p"),BS=o("There is one class of "),Bm=a("code"),IS=o("AutoModel"),tHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),OVe=l(),Ri=a("h2"),Im=a("a"),bae=a("span"),F(ry.$$.fragment),aHe=l(),vae=a("span"),nHe=o("Extending the Auto Classes"),VVe=l(),qn=a("p"),sHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Fae=a("code"),lHe=o("NewModel"),iHe=o(", make sure you have a "),Tae=a("code"),dHe=o("NewModelConfig"),cHe=o(` then you can add those to the auto
classes like this:`),XVe=l(),F(ty.$$.fragment),zVe=l(),NS=a("p"),mHe=o("You will then be able to use the auto classes like you would usually do!"),QVe=l(),F(Nm.$$.fragment),WVe=l(),Pi=a("h2"),qm=a("a"),Mae=a("span"),F(ay.$$.fragment),fHe=l(),Eae=a("span"),gHe=o("AutoConfig"),HVe=l(),wo=a("div"),F(ny.$$.fragment),hHe=l(),sy=a("p"),uHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),qS=a("a"),pHe=o("from_pretrained()"),_He=o(" class method."),bHe=l(),ly=a("p"),vHe=o("This class cannot be instantiated directly using "),Cae=a("code"),FHe=o("__init__()"),THe=o(" (throws an error)."),MHe=l(),Lr=a("div"),F(iy.$$.fragment),EHe=l(),wae=a("p"),CHe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),wHe=l(),Bi=a("p"),AHe=o("The configuration class to instantiate is selected based on the "),Aae=a("code"),LHe=o("model_type"),yHe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Lae=a("code"),xHe=o("pretrained_model_name_or_path"),$He=o(":"),kHe=l(),A=a("ul"),jm=a("li"),yae=a("strong"),SHe=o("albert"),RHe=o(" \u2014 "),jS=a("a"),PHe=o("AlbertConfig"),BHe=o(" (ALBERT model)"),IHe=l(),Dm=a("li"),xae=a("strong"),NHe=o("bart"),qHe=o(" \u2014 "),DS=a("a"),jHe=o("BartConfig"),DHe=o(" (BART model)"),GHe=l(),Gm=a("li"),$ae=a("strong"),OHe=o("beit"),VHe=o(" \u2014 "),GS=a("a"),XHe=o("BeitConfig"),zHe=o(" (BEiT model)"),QHe=l(),Om=a("li"),kae=a("strong"),WHe=o("bert"),HHe=o(" \u2014 "),OS=a("a"),UHe=o("BertConfig"),JHe=o(" (BERT model)"),YHe=l(),Vm=a("li"),Sae=a("strong"),KHe=o("bert-generation"),ZHe=o(" \u2014 "),VS=a("a"),eUe=o("BertGenerationConfig"),oUe=o(" (Bert Generation model)"),rUe=l(),Xm=a("li"),Rae=a("strong"),tUe=o("big_bird"),aUe=o(" \u2014 "),XS=a("a"),nUe=o("BigBirdConfig"),sUe=o(" (BigBird model)"),lUe=l(),zm=a("li"),Pae=a("strong"),iUe=o("bigbird_pegasus"),dUe=o(" \u2014 "),zS=a("a"),cUe=o("BigBirdPegasusConfig"),mUe=o(" (BigBird-Pegasus model)"),fUe=l(),Qm=a("li"),Bae=a("strong"),gUe=o("blenderbot"),hUe=o(" \u2014 "),QS=a("a"),uUe=o("BlenderbotConfig"),pUe=o(" (Blenderbot model)"),_Ue=l(),Wm=a("li"),Iae=a("strong"),bUe=o("blenderbot-small"),vUe=o(" \u2014 "),WS=a("a"),FUe=o("BlenderbotSmallConfig"),TUe=o(" (BlenderbotSmall model)"),MUe=l(),Hm=a("li"),Nae=a("strong"),EUe=o("bloom"),CUe=o(" \u2014 "),HS=a("a"),wUe=o("BloomConfig"),AUe=o(" (BLOOM model)"),LUe=l(),Um=a("li"),qae=a("strong"),yUe=o("camembert"),xUe=o(" \u2014 "),US=a("a"),$Ue=o("CamembertConfig"),kUe=o(" (CamemBERT model)"),SUe=l(),Jm=a("li"),jae=a("strong"),RUe=o("canine"),PUe=o(" \u2014 "),JS=a("a"),BUe=o("CanineConfig"),IUe=o(" (CANINE model)"),NUe=l(),Ym=a("li"),Dae=a("strong"),qUe=o("clip"),jUe=o(" \u2014 "),YS=a("a"),DUe=o("CLIPConfig"),GUe=o(" (CLIP model)"),OUe=l(),Km=a("li"),Gae=a("strong"),VUe=o("codegen"),XUe=o(" \u2014 "),KS=a("a"),zUe=o("CodeGenConfig"),QUe=o(" (CodeGen model)"),WUe=l(),Zm=a("li"),Oae=a("strong"),HUe=o("convbert"),UUe=o(" \u2014 "),ZS=a("a"),JUe=o("ConvBertConfig"),YUe=o(" (ConvBERT model)"),KUe=l(),ef=a("li"),Vae=a("strong"),ZUe=o("convnext"),eJe=o(" \u2014 "),eR=a("a"),oJe=o("ConvNextConfig"),rJe=o(" (ConvNeXT model)"),tJe=l(),of=a("li"),Xae=a("strong"),aJe=o("ctrl"),nJe=o(" \u2014 "),oR=a("a"),sJe=o("CTRLConfig"),lJe=o(" (CTRL model)"),iJe=l(),rf=a("li"),zae=a("strong"),dJe=o("cvt"),cJe=o(" \u2014 "),rR=a("a"),mJe=o("CvtConfig"),fJe=o(" (CvT model)"),gJe=l(),tf=a("li"),Qae=a("strong"),hJe=o("data2vec-audio"),uJe=o(" \u2014 "),tR=a("a"),pJe=o("Data2VecAudioConfig"),_Je=o(" (Data2VecAudio model)"),bJe=l(),af=a("li"),Wae=a("strong"),vJe=o("data2vec-text"),FJe=o(" \u2014 "),aR=a("a"),TJe=o("Data2VecTextConfig"),MJe=o(" (Data2VecText model)"),EJe=l(),nf=a("li"),Hae=a("strong"),CJe=o("data2vec-vision"),wJe=o(" \u2014 "),nR=a("a"),AJe=o("Data2VecVisionConfig"),LJe=o(" (Data2VecVision model)"),yJe=l(),sf=a("li"),Uae=a("strong"),xJe=o("deberta"),$Je=o(" \u2014 "),sR=a("a"),kJe=o("DebertaConfig"),SJe=o(" (DeBERTa model)"),RJe=l(),lf=a("li"),Jae=a("strong"),PJe=o("deberta-v2"),BJe=o(" \u2014 "),lR=a("a"),IJe=o("DebertaV2Config"),NJe=o(" (DeBERTa-v2 model)"),qJe=l(),df=a("li"),Yae=a("strong"),jJe=o("decision_transformer"),DJe=o(" \u2014 "),iR=a("a"),GJe=o("DecisionTransformerConfig"),OJe=o(" (Decision Transformer model)"),VJe=l(),cf=a("li"),Kae=a("strong"),XJe=o("deit"),zJe=o(" \u2014 "),dR=a("a"),QJe=o("DeiTConfig"),WJe=o(" (DeiT model)"),HJe=l(),mf=a("li"),Zae=a("strong"),UJe=o("detr"),JJe=o(" \u2014 "),cR=a("a"),YJe=o("DetrConfig"),KJe=o(" (DETR model)"),ZJe=l(),ff=a("li"),ene=a("strong"),eYe=o("distilbert"),oYe=o(" \u2014 "),mR=a("a"),rYe=o("DistilBertConfig"),tYe=o(" (DistilBERT model)"),aYe=l(),gf=a("li"),one=a("strong"),nYe=o("dpr"),sYe=o(" \u2014 "),fR=a("a"),lYe=o("DPRConfig"),iYe=o(" (DPR model)"),dYe=l(),hf=a("li"),rne=a("strong"),cYe=o("dpt"),mYe=o(" \u2014 "),gR=a("a"),fYe=o("DPTConfig"),gYe=o(" (DPT model)"),hYe=l(),uf=a("li"),tne=a("strong"),uYe=o("electra"),pYe=o(" \u2014 "),hR=a("a"),_Ye=o("ElectraConfig"),bYe=o(" (ELECTRA model)"),vYe=l(),pf=a("li"),ane=a("strong"),FYe=o("encoder-decoder"),TYe=o(" \u2014 "),uR=a("a"),MYe=o("EncoderDecoderConfig"),EYe=o(" (Encoder decoder model)"),CYe=l(),_f=a("li"),nne=a("strong"),wYe=o("flaubert"),AYe=o(" \u2014 "),pR=a("a"),LYe=o("FlaubertConfig"),yYe=o(" (FlauBERT model)"),xYe=l(),bf=a("li"),sne=a("strong"),$Ye=o("flava"),kYe=o(" \u2014 "),_R=a("a"),SYe=o("FlavaConfig"),RYe=o(" (FLAVA model)"),PYe=l(),vf=a("li"),lne=a("strong"),BYe=o("fnet"),IYe=o(" \u2014 "),bR=a("a"),NYe=o("FNetConfig"),qYe=o(" (FNet model)"),jYe=l(),Ff=a("li"),ine=a("strong"),DYe=o("fsmt"),GYe=o(" \u2014 "),vR=a("a"),OYe=o("FSMTConfig"),VYe=o(" (FairSeq Machine-Translation model)"),XYe=l(),Tf=a("li"),dne=a("strong"),zYe=o("funnel"),QYe=o(" \u2014 "),FR=a("a"),WYe=o("FunnelConfig"),HYe=o(" (Funnel Transformer model)"),UYe=l(),Mf=a("li"),cne=a("strong"),JYe=o("glpn"),YYe=o(" \u2014 "),TR=a("a"),KYe=o("GLPNConfig"),ZYe=o(" (GLPN model)"),eKe=l(),Ef=a("li"),mne=a("strong"),oKe=o("gpt2"),rKe=o(" \u2014 "),MR=a("a"),tKe=o("GPT2Config"),aKe=o(" (OpenAI GPT-2 model)"),nKe=l(),Cf=a("li"),fne=a("strong"),sKe=o("gpt_neo"),lKe=o(" \u2014 "),ER=a("a"),iKe=o("GPTNeoConfig"),dKe=o(" (GPT Neo model)"),cKe=l(),wf=a("li"),gne=a("strong"),mKe=o("gpt_neox"),fKe=o(" \u2014 "),CR=a("a"),gKe=o("GPTNeoXConfig"),hKe=o(" (GPT NeoX model)"),uKe=l(),Af=a("li"),hne=a("strong"),pKe=o("gptj"),_Ke=o(" \u2014 "),wR=a("a"),bKe=o("GPTJConfig"),vKe=o(" (GPT-J model)"),FKe=l(),Lf=a("li"),une=a("strong"),TKe=o("groupvit"),MKe=o(" \u2014 "),AR=a("a"),EKe=o("GroupViTConfig"),CKe=o(" (GroupViT model)"),wKe=l(),yf=a("li"),pne=a("strong"),AKe=o("hubert"),LKe=o(" \u2014 "),LR=a("a"),yKe=o("HubertConfig"),xKe=o(" (Hubert model)"),$Ke=l(),xf=a("li"),_ne=a("strong"),kKe=o("ibert"),SKe=o(" \u2014 "),yR=a("a"),RKe=o("IBertConfig"),PKe=o(" (I-BERT model)"),BKe=l(),$f=a("li"),bne=a("strong"),IKe=o("imagegpt"),NKe=o(" \u2014 "),xR=a("a"),qKe=o("ImageGPTConfig"),jKe=o(" (ImageGPT model)"),DKe=l(),kf=a("li"),vne=a("strong"),GKe=o("layoutlm"),OKe=o(" \u2014 "),$R=a("a"),VKe=o("LayoutLMConfig"),XKe=o(" (LayoutLM model)"),zKe=l(),Sf=a("li"),Fne=a("strong"),QKe=o("layoutlmv2"),WKe=o(" \u2014 "),kR=a("a"),HKe=o("LayoutLMv2Config"),UKe=o(" (LayoutLMv2 model)"),JKe=l(),Rf=a("li"),Tne=a("strong"),YKe=o("layoutlmv3"),KKe=o(" \u2014 "),SR=a("a"),ZKe=o("LayoutLMv3Config"),eZe=o(" (LayoutLMv3 model)"),oZe=l(),Pf=a("li"),Mne=a("strong"),rZe=o("led"),tZe=o(" \u2014 "),RR=a("a"),aZe=o("LEDConfig"),nZe=o(" (LED model)"),sZe=l(),Bf=a("li"),Ene=a("strong"),lZe=o("levit"),iZe=o(" \u2014 "),PR=a("a"),dZe=o("LevitConfig"),cZe=o(" (LeViT model)"),mZe=l(),If=a("li"),Cne=a("strong"),fZe=o("longformer"),gZe=o(" \u2014 "),BR=a("a"),hZe=o("LongformerConfig"),uZe=o(" (Longformer model)"),pZe=l(),Nf=a("li"),wne=a("strong"),_Ze=o("longt5"),bZe=o(" \u2014 "),IR=a("a"),vZe=o("LongT5Config"),FZe=o(" (LongT5 model)"),TZe=l(),qf=a("li"),Ane=a("strong"),MZe=o("luke"),EZe=o(" \u2014 "),NR=a("a"),CZe=o("LukeConfig"),wZe=o(" (LUKE model)"),AZe=l(),jf=a("li"),Lne=a("strong"),LZe=o("lxmert"),yZe=o(" \u2014 "),qR=a("a"),xZe=o("LxmertConfig"),$Ze=o(" (LXMERT model)"),kZe=l(),Df=a("li"),yne=a("strong"),SZe=o("m2m_100"),RZe=o(" \u2014 "),jR=a("a"),PZe=o("M2M100Config"),BZe=o(" (M2M100 model)"),IZe=l(),Gf=a("li"),xne=a("strong"),NZe=o("marian"),qZe=o(" \u2014 "),DR=a("a"),jZe=o("MarianConfig"),DZe=o(" (Marian model)"),GZe=l(),Of=a("li"),$ne=a("strong"),OZe=o("maskformer"),VZe=o(" \u2014 "),GR=a("a"),XZe=o("MaskFormerConfig"),zZe=o(" (MaskFormer model)"),QZe=l(),Vf=a("li"),kne=a("strong"),WZe=o("mbart"),HZe=o(" \u2014 "),OR=a("a"),UZe=o("MBartConfig"),JZe=o(" (mBART model)"),YZe=l(),Xf=a("li"),Sne=a("strong"),KZe=o("mctct"),ZZe=o(" \u2014 "),VR=a("a"),eeo=o("MCTCTConfig"),oeo=o(" (M-CTC-T model)"),reo=l(),zf=a("li"),Rne=a("strong"),teo=o("megatron-bert"),aeo=o(" \u2014 "),XR=a("a"),neo=o("MegatronBertConfig"),seo=o(" (Megatron-BERT model)"),leo=l(),Qf=a("li"),Pne=a("strong"),ieo=o("mobilebert"),deo=o(" \u2014 "),zR=a("a"),ceo=o("MobileBertConfig"),meo=o(" (MobileBERT model)"),feo=l(),Wf=a("li"),Bne=a("strong"),geo=o("mobilevit"),heo=o(" \u2014 "),QR=a("a"),ueo=o("MobileViTConfig"),peo=o(" (MobileViT model)"),_eo=l(),Hf=a("li"),Ine=a("strong"),beo=o("mpnet"),veo=o(" \u2014 "),WR=a("a"),Feo=o("MPNetConfig"),Teo=o(" (MPNet model)"),Meo=l(),Uf=a("li"),Nne=a("strong"),Eeo=o("mt5"),Ceo=o(" \u2014 "),HR=a("a"),weo=o("MT5Config"),Aeo=o(" (MT5 model)"),Leo=l(),Jf=a("li"),qne=a("strong"),yeo=o("mvp"),xeo=o(" \u2014 "),UR=a("a"),$eo=o("MvpConfig"),keo=o(" (MVP model)"),Seo=l(),Yf=a("li"),jne=a("strong"),Reo=o("nezha"),Peo=o(" \u2014 "),JR=a("a"),Beo=o("NezhaConfig"),Ieo=o(" (Nezha model)"),Neo=l(),Kf=a("li"),Dne=a("strong"),qeo=o("nystromformer"),jeo=o(" \u2014 "),YR=a("a"),Deo=o("NystromformerConfig"),Geo=o(" (Nystr\xF6mformer model)"),Oeo=l(),Zf=a("li"),Gne=a("strong"),Veo=o("openai-gpt"),Xeo=o(" \u2014 "),KR=a("a"),zeo=o("OpenAIGPTConfig"),Qeo=o(" (OpenAI GPT model)"),Weo=l(),eg=a("li"),One=a("strong"),Heo=o("opt"),Ueo=o(" \u2014 "),ZR=a("a"),Jeo=o("OPTConfig"),Yeo=o(" (OPT model)"),Keo=l(),og=a("li"),Vne=a("strong"),Zeo=o("pegasus"),eoo=o(" \u2014 "),eP=a("a"),ooo=o("PegasusConfig"),roo=o(" (Pegasus model)"),too=l(),rg=a("li"),Xne=a("strong"),aoo=o("perceiver"),noo=o(" \u2014 "),oP=a("a"),soo=o("PerceiverConfig"),loo=o(" (Perceiver model)"),ioo=l(),tg=a("li"),zne=a("strong"),doo=o("plbart"),coo=o(" \u2014 "),rP=a("a"),moo=o("PLBartConfig"),foo=o(" (PLBart model)"),goo=l(),ag=a("li"),Qne=a("strong"),hoo=o("poolformer"),uoo=o(" \u2014 "),tP=a("a"),poo=o("PoolFormerConfig"),_oo=o(" (PoolFormer model)"),boo=l(),ng=a("li"),Wne=a("strong"),voo=o("prophetnet"),Foo=o(" \u2014 "),aP=a("a"),Too=o("ProphetNetConfig"),Moo=o(" (ProphetNet model)"),Eoo=l(),sg=a("li"),Hne=a("strong"),Coo=o("qdqbert"),woo=o(" \u2014 "),nP=a("a"),Aoo=o("QDQBertConfig"),Loo=o(" (QDQBert model)"),yoo=l(),lg=a("li"),Une=a("strong"),xoo=o("rag"),$oo=o(" \u2014 "),sP=a("a"),koo=o("RagConfig"),Soo=o(" (RAG model)"),Roo=l(),ig=a("li"),Jne=a("strong"),Poo=o("realm"),Boo=o(" \u2014 "),lP=a("a"),Ioo=o("RealmConfig"),Noo=o(" (REALM model)"),qoo=l(),dg=a("li"),Yne=a("strong"),joo=o("reformer"),Doo=o(" \u2014 "),iP=a("a"),Goo=o("ReformerConfig"),Ooo=o(" (Reformer model)"),Voo=l(),cg=a("li"),Kne=a("strong"),Xoo=o("regnet"),zoo=o(" \u2014 "),dP=a("a"),Qoo=o("RegNetConfig"),Woo=o(" (RegNet model)"),Hoo=l(),mg=a("li"),Zne=a("strong"),Uoo=o("rembert"),Joo=o(" \u2014 "),cP=a("a"),Yoo=o("RemBertConfig"),Koo=o(" (RemBERT model)"),Zoo=l(),fg=a("li"),ese=a("strong"),ero=o("resnet"),oro=o(" \u2014 "),mP=a("a"),rro=o("ResNetConfig"),tro=o(" (ResNet model)"),aro=l(),gg=a("li"),ose=a("strong"),nro=o("retribert"),sro=o(" \u2014 "),fP=a("a"),lro=o("RetriBertConfig"),iro=o(" (RetriBERT model)"),dro=l(),hg=a("li"),rse=a("strong"),cro=o("roberta"),mro=o(" \u2014 "),gP=a("a"),fro=o("RobertaConfig"),gro=o(" (RoBERTa model)"),hro=l(),ug=a("li"),tse=a("strong"),uro=o("roformer"),pro=o(" \u2014 "),hP=a("a"),_ro=o("RoFormerConfig"),bro=o(" (RoFormer model)"),vro=l(),pg=a("li"),ase=a("strong"),Fro=o("segformer"),Tro=o(" \u2014 "),uP=a("a"),Mro=o("SegformerConfig"),Ero=o(" (SegFormer model)"),Cro=l(),_g=a("li"),nse=a("strong"),wro=o("sew"),Aro=o(" \u2014 "),pP=a("a"),Lro=o("SEWConfig"),yro=o(" (SEW model)"),xro=l(),bg=a("li"),sse=a("strong"),$ro=o("sew-d"),kro=o(" \u2014 "),_P=a("a"),Sro=o("SEWDConfig"),Rro=o(" (SEW-D model)"),Pro=l(),vg=a("li"),lse=a("strong"),Bro=o("speech-encoder-decoder"),Iro=o(" \u2014 "),bP=a("a"),Nro=o("SpeechEncoderDecoderConfig"),qro=o(" (Speech Encoder decoder model)"),jro=l(),Fg=a("li"),ise=a("strong"),Dro=o("speech_to_text"),Gro=o(" \u2014 "),vP=a("a"),Oro=o("Speech2TextConfig"),Vro=o(" (Speech2Text model)"),Xro=l(),Tg=a("li"),dse=a("strong"),zro=o("speech_to_text_2"),Qro=o(" \u2014 "),FP=a("a"),Wro=o("Speech2Text2Config"),Hro=o(" (Speech2Text2 model)"),Uro=l(),Mg=a("li"),cse=a("strong"),Jro=o("splinter"),Yro=o(" \u2014 "),TP=a("a"),Kro=o("SplinterConfig"),Zro=o(" (Splinter model)"),eto=l(),Eg=a("li"),mse=a("strong"),oto=o("squeezebert"),rto=o(" \u2014 "),MP=a("a"),tto=o("SqueezeBertConfig"),ato=o(" (SqueezeBERT model)"),nto=l(),Cg=a("li"),fse=a("strong"),sto=o("swin"),lto=o(" \u2014 "),EP=a("a"),ito=o("SwinConfig"),dto=o(" (Swin Transformer model)"),cto=l(),wg=a("li"),gse=a("strong"),mto=o("t5"),fto=o(" \u2014 "),CP=a("a"),gto=o("T5Config"),hto=o(" (T5 model)"),uto=l(),Ag=a("li"),hse=a("strong"),pto=o("tapas"),_to=o(" \u2014 "),wP=a("a"),bto=o("TapasConfig"),vto=o(" (TAPAS model)"),Fto=l(),Lg=a("li"),use=a("strong"),Tto=o("trajectory_transformer"),Mto=o(" \u2014 "),AP=a("a"),Eto=o("TrajectoryTransformerConfig"),Cto=o(" (Trajectory Transformer model)"),wto=l(),yg=a("li"),pse=a("strong"),Ato=o("transfo-xl"),Lto=o(" \u2014 "),LP=a("a"),yto=o("TransfoXLConfig"),xto=o(" (Transformer-XL model)"),$to=l(),xg=a("li"),_se=a("strong"),kto=o("trocr"),Sto=o(" \u2014 "),yP=a("a"),Rto=o("TrOCRConfig"),Pto=o(" (TrOCR model)"),Bto=l(),$g=a("li"),bse=a("strong"),Ito=o("unispeech"),Nto=o(" \u2014 "),xP=a("a"),qto=o("UniSpeechConfig"),jto=o(" (UniSpeech model)"),Dto=l(),kg=a("li"),vse=a("strong"),Gto=o("unispeech-sat"),Oto=o(" \u2014 "),$P=a("a"),Vto=o("UniSpeechSatConfig"),Xto=o(" (UniSpeechSat model)"),zto=l(),Sg=a("li"),Fse=a("strong"),Qto=o("van"),Wto=o(" \u2014 "),kP=a("a"),Hto=o("VanConfig"),Uto=o(" (VAN model)"),Jto=l(),Rg=a("li"),Tse=a("strong"),Yto=o("vilt"),Kto=o(" \u2014 "),SP=a("a"),Zto=o("ViltConfig"),eao=o(" (ViLT model)"),oao=l(),Pg=a("li"),Mse=a("strong"),rao=o("vision-encoder-decoder"),tao=o(" \u2014 "),RP=a("a"),aao=o("VisionEncoderDecoderConfig"),nao=o(" (Vision Encoder decoder model)"),sao=l(),Bg=a("li"),Ese=a("strong"),lao=o("vision-text-dual-encoder"),iao=o(" \u2014 "),PP=a("a"),dao=o("VisionTextDualEncoderConfig"),cao=o(" (VisionTextDualEncoder model)"),mao=l(),Ig=a("li"),Cse=a("strong"),fao=o("visual_bert"),gao=o(" \u2014 "),BP=a("a"),hao=o("VisualBertConfig"),uao=o(" (VisualBERT model)"),pao=l(),Ng=a("li"),wse=a("strong"),_ao=o("vit"),bao=o(" \u2014 "),IP=a("a"),vao=o("ViTConfig"),Fao=o(" (ViT model)"),Tao=l(),qg=a("li"),Ase=a("strong"),Mao=o("vit_mae"),Eao=o(" \u2014 "),NP=a("a"),Cao=o("ViTMAEConfig"),wao=o(" (ViTMAE model)"),Aao=l(),jg=a("li"),Lse=a("strong"),Lao=o("wav2vec2"),yao=o(" \u2014 "),qP=a("a"),xao=o("Wav2Vec2Config"),$ao=o(" (Wav2Vec2 model)"),kao=l(),Dg=a("li"),yse=a("strong"),Sao=o("wav2vec2-conformer"),Rao=o(" \u2014 "),jP=a("a"),Pao=o("Wav2Vec2ConformerConfig"),Bao=o(" (Wav2Vec2-Conformer model)"),Iao=l(),Gg=a("li"),xse=a("strong"),Nao=o("wavlm"),qao=o(" \u2014 "),DP=a("a"),jao=o("WavLMConfig"),Dao=o(" (WavLM model)"),Gao=l(),Og=a("li"),$se=a("strong"),Oao=o("xglm"),Vao=o(" \u2014 "),GP=a("a"),Xao=o("XGLMConfig"),zao=o(" (XGLM model)"),Qao=l(),Vg=a("li"),kse=a("strong"),Wao=o("xlm"),Hao=o(" \u2014 "),OP=a("a"),Uao=o("XLMConfig"),Jao=o(" (XLM model)"),Yao=l(),Xg=a("li"),Sse=a("strong"),Kao=o("xlm-prophetnet"),Zao=o(" \u2014 "),VP=a("a"),eno=o("XLMProphetNetConfig"),ono=o(" (XLM-ProphetNet model)"),rno=l(),zg=a("li"),Rse=a("strong"),tno=o("xlm-roberta"),ano=o(" \u2014 "),XP=a("a"),nno=o("XLMRobertaConfig"),sno=o(" (XLM-RoBERTa model)"),lno=l(),Qg=a("li"),Pse=a("strong"),ino=o("xlm-roberta-xl"),dno=o(" \u2014 "),zP=a("a"),cno=o("XLMRobertaXLConfig"),mno=o(" (XLM-RoBERTa-XL model)"),fno=l(),Wg=a("li"),Bse=a("strong"),gno=o("xlnet"),hno=o(" \u2014 "),QP=a("a"),uno=o("XLNetConfig"),pno=o(" (XLNet model)"),_no=l(),Hg=a("li"),Ise=a("strong"),bno=o("yolos"),vno=o(" \u2014 "),WP=a("a"),Fno=o("YolosConfig"),Tno=o(" (YOLOS model)"),Mno=l(),Ug=a("li"),Nse=a("strong"),Eno=o("yoso"),Cno=o(" \u2014 "),HP=a("a"),wno=o("YosoConfig"),Ano=o(" (YOSO model)"),Lno=l(),F(Jg.$$.fragment),yno=l(),Yg=a("div"),F(dy.$$.fragment),xno=l(),qse=a("p"),$no=o("Register a new configuration for this class."),UVe=l(),Ii=a("h2"),Kg=a("a"),jse=a("span"),F(cy.$$.fragment),kno=l(),Dse=a("span"),Sno=o("AutoTokenizer"),JVe=l(),Ao=a("div"),F(my.$$.fragment),Rno=l(),fy=a("p"),Pno=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),UP=a("a"),Bno=o("AutoTokenizer.from_pretrained()"),Ino=o(" class method."),Nno=l(),gy=a("p"),qno=o("This class cannot be instantiated directly using "),Gse=a("code"),jno=o("__init__()"),Dno=o(" (throws an error)."),Gno=l(),yr=a("div"),F(hy.$$.fragment),Ono=l(),Ose=a("p"),Vno=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Xno=l(),Pa=a("p"),zno=o("The tokenizer class to instantiate is selected based on the "),Vse=a("code"),Qno=o("model_type"),Wno=o(` property of the config object (either
passed as an argument or loaded from `),Xse=a("code"),Hno=o("pretrained_model_name_or_path"),Uno=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zse=a("code"),Jno=o("pretrained_model_name_or_path"),Yno=o(":"),Kno=l(),k=a("ul"),jn=a("li"),Qse=a("strong"),Zno=o("albert"),eso=o(" \u2014 "),JP=a("a"),oso=o("AlbertTokenizer"),rso=o(" or "),YP=a("a"),tso=o("AlbertTokenizerFast"),aso=o(" (ALBERT model)"),nso=l(),Dn=a("li"),Wse=a("strong"),sso=o("bart"),lso=o(" \u2014 "),KP=a("a"),iso=o("BartTokenizer"),dso=o(" or "),ZP=a("a"),cso=o("BartTokenizerFast"),mso=o(" (BART model)"),fso=l(),Gn=a("li"),Hse=a("strong"),gso=o("barthez"),hso=o(" \u2014 "),eB=a("a"),uso=o("BarthezTokenizer"),pso=o(" or "),oB=a("a"),_so=o("BarthezTokenizerFast"),bso=o(" (BARThez model)"),vso=l(),Zg=a("li"),Use=a("strong"),Fso=o("bartpho"),Tso=o(" \u2014 "),rB=a("a"),Mso=o("BartphoTokenizer"),Eso=o(" (BARTpho model)"),Cso=l(),On=a("li"),Jse=a("strong"),wso=o("bert"),Aso=o(" \u2014 "),tB=a("a"),Lso=o("BertTokenizer"),yso=o(" or "),aB=a("a"),xso=o("BertTokenizerFast"),$so=o(" (BERT model)"),kso=l(),eh=a("li"),Yse=a("strong"),Sso=o("bert-generation"),Rso=o(" \u2014 "),nB=a("a"),Pso=o("BertGenerationTokenizer"),Bso=o(" (Bert Generation model)"),Iso=l(),oh=a("li"),Kse=a("strong"),Nso=o("bert-japanese"),qso=o(" \u2014 "),sB=a("a"),jso=o("BertJapaneseTokenizer"),Dso=o(" (BertJapanese model)"),Gso=l(),rh=a("li"),Zse=a("strong"),Oso=o("bertweet"),Vso=o(" \u2014 "),lB=a("a"),Xso=o("BertweetTokenizer"),zso=o(" (BERTweet model)"),Qso=l(),Vn=a("li"),ele=a("strong"),Wso=o("big_bird"),Hso=o(" \u2014 "),iB=a("a"),Uso=o("BigBirdTokenizer"),Jso=o(" or "),dB=a("a"),Yso=o("BigBirdTokenizerFast"),Kso=o(" (BigBird model)"),Zso=l(),Xn=a("li"),ole=a("strong"),elo=o("bigbird_pegasus"),olo=o(" \u2014 "),cB=a("a"),rlo=o("PegasusTokenizer"),tlo=o(" or "),mB=a("a"),alo=o("PegasusTokenizerFast"),nlo=o(" (BigBird-Pegasus model)"),slo=l(),zn=a("li"),rle=a("strong"),llo=o("blenderbot"),ilo=o(" \u2014 "),fB=a("a"),dlo=o("BlenderbotTokenizer"),clo=o(" or "),gB=a("a"),mlo=o("BlenderbotTokenizerFast"),flo=o(" (Blenderbot model)"),glo=l(),th=a("li"),tle=a("strong"),hlo=o("blenderbot-small"),ulo=o(" \u2014 "),hB=a("a"),plo=o("BlenderbotSmallTokenizer"),_lo=o(" (BlenderbotSmall model)"),blo=l(),ah=a("li"),ale=a("strong"),vlo=o("bloom"),Flo=o(" \u2014 "),uB=a("a"),Tlo=o("BloomTokenizerFast"),Mlo=o(" (BLOOM model)"),Elo=l(),nh=a("li"),nle=a("strong"),Clo=o("byt5"),wlo=o(" \u2014 "),pB=a("a"),Alo=o("ByT5Tokenizer"),Llo=o(" (ByT5 model)"),ylo=l(),Qn=a("li"),sle=a("strong"),xlo=o("camembert"),$lo=o(" \u2014 "),_B=a("a"),klo=o("CamembertTokenizer"),Slo=o(" or "),bB=a("a"),Rlo=o("CamembertTokenizerFast"),Plo=o(" (CamemBERT model)"),Blo=l(),sh=a("li"),lle=a("strong"),Ilo=o("canine"),Nlo=o(" \u2014 "),vB=a("a"),qlo=o("CanineTokenizer"),jlo=o(" (CANINE model)"),Dlo=l(),Wn=a("li"),ile=a("strong"),Glo=o("clip"),Olo=o(" \u2014 "),FB=a("a"),Vlo=o("CLIPTokenizer"),Xlo=o(" or "),TB=a("a"),zlo=o("CLIPTokenizerFast"),Qlo=o(" (CLIP model)"),Wlo=l(),Hn=a("li"),dle=a("strong"),Hlo=o("codegen"),Ulo=o(" \u2014 "),MB=a("a"),Jlo=o("CodeGenTokenizer"),Ylo=o(" or "),EB=a("a"),Klo=o("CodeGenTokenizerFast"),Zlo=o(" (CodeGen model)"),eio=l(),Un=a("li"),cle=a("strong"),oio=o("convbert"),rio=o(" \u2014 "),CB=a("a"),tio=o("ConvBertTokenizer"),aio=o(" or "),wB=a("a"),nio=o("ConvBertTokenizerFast"),sio=o(" (ConvBERT model)"),lio=l(),Jn=a("li"),mle=a("strong"),iio=o("cpm"),dio=o(" \u2014 "),AB=a("a"),cio=o("CpmTokenizer"),mio=o(" or "),LB=a("a"),fio=o("CpmTokenizerFast"),gio=o(" (CPM model)"),hio=l(),lh=a("li"),fle=a("strong"),uio=o("ctrl"),pio=o(" \u2014 "),yB=a("a"),_io=o("CTRLTokenizer"),bio=o(" (CTRL model)"),vio=l(),Yn=a("li"),gle=a("strong"),Fio=o("data2vec-text"),Tio=o(" \u2014 "),xB=a("a"),Mio=o("RobertaTokenizer"),Eio=o(" or "),$B=a("a"),Cio=o("RobertaTokenizerFast"),wio=o(" (Data2VecText model)"),Aio=l(),Kn=a("li"),hle=a("strong"),Lio=o("deberta"),yio=o(" \u2014 "),kB=a("a"),xio=o("DebertaTokenizer"),$io=o(" or "),SB=a("a"),kio=o("DebertaTokenizerFast"),Sio=o(" (DeBERTa model)"),Rio=l(),Zn=a("li"),ule=a("strong"),Pio=o("deberta-v2"),Bio=o(" \u2014 "),RB=a("a"),Iio=o("DebertaV2Tokenizer"),Nio=o(" or "),PB=a("a"),qio=o("DebertaV2TokenizerFast"),jio=o(" (DeBERTa-v2 model)"),Dio=l(),es=a("li"),ple=a("strong"),Gio=o("distilbert"),Oio=o(" \u2014 "),BB=a("a"),Vio=o("DistilBertTokenizer"),Xio=o(" or "),IB=a("a"),zio=o("DistilBertTokenizerFast"),Qio=o(" (DistilBERT model)"),Wio=l(),os=a("li"),_le=a("strong"),Hio=o("dpr"),Uio=o(" \u2014 "),NB=a("a"),Jio=o("DPRQuestionEncoderTokenizer"),Yio=o(" or "),qB=a("a"),Kio=o("DPRQuestionEncoderTokenizerFast"),Zio=o(" (DPR model)"),edo=l(),rs=a("li"),ble=a("strong"),odo=o("electra"),rdo=o(" \u2014 "),jB=a("a"),tdo=o("ElectraTokenizer"),ado=o(" or "),DB=a("a"),ndo=o("ElectraTokenizerFast"),sdo=o(" (ELECTRA model)"),ldo=l(),ih=a("li"),vle=a("strong"),ido=o("flaubert"),ddo=o(" \u2014 "),GB=a("a"),cdo=o("FlaubertTokenizer"),mdo=o(" (FlauBERT model)"),fdo=l(),ts=a("li"),Fle=a("strong"),gdo=o("fnet"),hdo=o(" \u2014 "),OB=a("a"),udo=o("FNetTokenizer"),pdo=o(" or "),VB=a("a"),_do=o("FNetTokenizerFast"),bdo=o(" (FNet model)"),vdo=l(),dh=a("li"),Tle=a("strong"),Fdo=o("fsmt"),Tdo=o(" \u2014 "),XB=a("a"),Mdo=o("FSMTTokenizer"),Edo=o(" (FairSeq Machine-Translation model)"),Cdo=l(),as=a("li"),Mle=a("strong"),wdo=o("funnel"),Ado=o(" \u2014 "),zB=a("a"),Ldo=o("FunnelTokenizer"),ydo=o(" or "),QB=a("a"),xdo=o("FunnelTokenizerFast"),$do=o(" (Funnel Transformer model)"),kdo=l(),ns=a("li"),Ele=a("strong"),Sdo=o("gpt2"),Rdo=o(" \u2014 "),WB=a("a"),Pdo=o("GPT2Tokenizer"),Bdo=o(" or "),HB=a("a"),Ido=o("GPT2TokenizerFast"),Ndo=o(" (OpenAI GPT-2 model)"),qdo=l(),ss=a("li"),Cle=a("strong"),jdo=o("gpt_neo"),Ddo=o(" \u2014 "),UB=a("a"),Gdo=o("GPT2Tokenizer"),Odo=o(" or "),JB=a("a"),Vdo=o("GPT2TokenizerFast"),Xdo=o(" (GPT Neo model)"),zdo=l(),ch=a("li"),wle=a("strong"),Qdo=o("gpt_neox"),Wdo=o(" \u2014 "),YB=a("a"),Hdo=o("GPTNeoXTokenizerFast"),Udo=o(" (GPT NeoX model)"),Jdo=l(),ls=a("li"),Ale=a("strong"),Ydo=o("gptj"),Kdo=o(" \u2014 "),KB=a("a"),Zdo=o("GPT2Tokenizer"),eco=o(" or "),ZB=a("a"),oco=o("GPT2TokenizerFast"),rco=o(" (GPT-J model)"),tco=l(),is=a("li"),Lle=a("strong"),aco=o("groupvit"),nco=o(" \u2014 "),eI=a("a"),sco=o("CLIPTokenizer"),lco=o(" or "),oI=a("a"),ico=o("CLIPTokenizerFast"),dco=o(" (GroupViT model)"),cco=l(),ds=a("li"),yle=a("strong"),mco=o("herbert"),fco=o(" \u2014 "),rI=a("a"),gco=o("HerbertTokenizer"),hco=o(" or "),tI=a("a"),uco=o("HerbertTokenizerFast"),pco=o(" (HerBERT model)"),_co=l(),mh=a("li"),xle=a("strong"),bco=o("hubert"),vco=o(" \u2014 "),aI=a("a"),Fco=o("Wav2Vec2CTCTokenizer"),Tco=o(" (Hubert model)"),Mco=l(),cs=a("li"),$le=a("strong"),Eco=o("ibert"),Cco=o(" \u2014 "),nI=a("a"),wco=o("RobertaTokenizer"),Aco=o(" or "),sI=a("a"),Lco=o("RobertaTokenizerFast"),yco=o(" (I-BERT model)"),xco=l(),ms=a("li"),kle=a("strong"),$co=o("layoutlm"),kco=o(" \u2014 "),lI=a("a"),Sco=o("LayoutLMTokenizer"),Rco=o(" or "),iI=a("a"),Pco=o("LayoutLMTokenizerFast"),Bco=o(" (LayoutLM model)"),Ico=l(),fs=a("li"),Sle=a("strong"),Nco=o("layoutlmv2"),qco=o(" \u2014 "),dI=a("a"),jco=o("LayoutLMv2Tokenizer"),Dco=o(" or "),cI=a("a"),Gco=o("LayoutLMv2TokenizerFast"),Oco=o(" (LayoutLMv2 model)"),Vco=l(),gs=a("li"),Rle=a("strong"),Xco=o("layoutlmv3"),zco=o(" \u2014 "),mI=a("a"),Qco=o("LayoutLMv3Tokenizer"),Wco=o(" or "),fI=a("a"),Hco=o("LayoutLMv3TokenizerFast"),Uco=o(" (LayoutLMv3 model)"),Jco=l(),hs=a("li"),Ple=a("strong"),Yco=o("layoutxlm"),Kco=o(" \u2014 "),gI=a("a"),Zco=o("LayoutXLMTokenizer"),emo=o(" or "),hI=a("a"),omo=o("LayoutXLMTokenizerFast"),rmo=o(" (LayoutXLM model)"),tmo=l(),us=a("li"),Ble=a("strong"),amo=o("led"),nmo=o(" \u2014 "),uI=a("a"),smo=o("LEDTokenizer"),lmo=o(" or "),pI=a("a"),imo=o("LEDTokenizerFast"),dmo=o(" (LED model)"),cmo=l(),ps=a("li"),Ile=a("strong"),mmo=o("longformer"),fmo=o(" \u2014 "),_I=a("a"),gmo=o("LongformerTokenizer"),hmo=o(" or "),bI=a("a"),umo=o("LongformerTokenizerFast"),pmo=o(" (Longformer model)"),_mo=l(),_s=a("li"),Nle=a("strong"),bmo=o("longt5"),vmo=o(" \u2014 "),vI=a("a"),Fmo=o("T5Tokenizer"),Tmo=o(" or "),FI=a("a"),Mmo=o("T5TokenizerFast"),Emo=o(" (LongT5 model)"),Cmo=l(),fh=a("li"),qle=a("strong"),wmo=o("luke"),Amo=o(" \u2014 "),TI=a("a"),Lmo=o("LukeTokenizer"),ymo=o(" (LUKE model)"),xmo=l(),bs=a("li"),jle=a("strong"),$mo=o("lxmert"),kmo=o(" \u2014 "),MI=a("a"),Smo=o("LxmertTokenizer"),Rmo=o(" or "),EI=a("a"),Pmo=o("LxmertTokenizerFast"),Bmo=o(" (LXMERT model)"),Imo=l(),gh=a("li"),Dle=a("strong"),Nmo=o("m2m_100"),qmo=o(" \u2014 "),CI=a("a"),jmo=o("M2M100Tokenizer"),Dmo=o(" (M2M100 model)"),Gmo=l(),hh=a("li"),Gle=a("strong"),Omo=o("marian"),Vmo=o(" \u2014 "),wI=a("a"),Xmo=o("MarianTokenizer"),zmo=o(" (Marian model)"),Qmo=l(),vs=a("li"),Ole=a("strong"),Wmo=o("mbart"),Hmo=o(" \u2014 "),AI=a("a"),Umo=o("MBartTokenizer"),Jmo=o(" or "),LI=a("a"),Ymo=o("MBartTokenizerFast"),Kmo=o(" (mBART model)"),Zmo=l(),Fs=a("li"),Vle=a("strong"),efo=o("mbart50"),ofo=o(" \u2014 "),yI=a("a"),rfo=o("MBart50Tokenizer"),tfo=o(" or "),xI=a("a"),afo=o("MBart50TokenizerFast"),nfo=o(" (mBART-50 model)"),sfo=l(),Ts=a("li"),Xle=a("strong"),lfo=o("megatron-bert"),ifo=o(" \u2014 "),$I=a("a"),dfo=o("BertTokenizer"),cfo=o(" or "),kI=a("a"),mfo=o("BertTokenizerFast"),ffo=o(" (Megatron-BERT model)"),gfo=l(),uh=a("li"),zle=a("strong"),hfo=o("mluke"),ufo=o(" \u2014 "),SI=a("a"),pfo=o("MLukeTokenizer"),_fo=o(" (mLUKE model)"),bfo=l(),Ms=a("li"),Qle=a("strong"),vfo=o("mobilebert"),Ffo=o(" \u2014 "),RI=a("a"),Tfo=o("MobileBertTokenizer"),Mfo=o(" or "),PI=a("a"),Efo=o("MobileBertTokenizerFast"),Cfo=o(" (MobileBERT model)"),wfo=l(),Es=a("li"),Wle=a("strong"),Afo=o("mpnet"),Lfo=o(" \u2014 "),BI=a("a"),yfo=o("MPNetTokenizer"),xfo=o(" or "),II=a("a"),$fo=o("MPNetTokenizerFast"),kfo=o(" (MPNet model)"),Sfo=l(),Cs=a("li"),Hle=a("strong"),Rfo=o("mt5"),Pfo=o(" \u2014 "),NI=a("a"),Bfo=o("MT5Tokenizer"),Ifo=o(" or "),qI=a("a"),Nfo=o("MT5TokenizerFast"),qfo=o(" (MT5 model)"),jfo=l(),ws=a("li"),Ule=a("strong"),Dfo=o("mvp"),Gfo=o(" \u2014 "),jI=a("a"),Ofo=o("MvpTokenizer"),Vfo=o(" or "),DI=a("a"),Xfo=o("MvpTokenizerFast"),zfo=o(" (MVP model)"),Qfo=l(),As=a("li"),Jle=a("strong"),Wfo=o("nezha"),Hfo=o(" \u2014 "),GI=a("a"),Ufo=o("BertTokenizer"),Jfo=o(" or "),OI=a("a"),Yfo=o("BertTokenizerFast"),Kfo=o(" (Nezha model)"),Zfo=l(),Ls=a("li"),Yle=a("strong"),ego=o("nystromformer"),ogo=o(" \u2014 "),VI=a("a"),rgo=o("AlbertTokenizer"),tgo=o(" or "),XI=a("a"),ago=o("AlbertTokenizerFast"),ngo=o(" (Nystr\xF6mformer model)"),sgo=l(),ys=a("li"),Kle=a("strong"),lgo=o("openai-gpt"),igo=o(" \u2014 "),zI=a("a"),dgo=o("OpenAIGPTTokenizer"),cgo=o(" or "),QI=a("a"),mgo=o("OpenAIGPTTokenizerFast"),fgo=o(" (OpenAI GPT model)"),ggo=l(),ph=a("li"),Zle=a("strong"),hgo=o("opt"),ugo=o(" \u2014 "),WI=a("a"),pgo=o("GPT2Tokenizer"),_go=o(" (OPT model)"),bgo=l(),xs=a("li"),eie=a("strong"),vgo=o("pegasus"),Fgo=o(" \u2014 "),HI=a("a"),Tgo=o("PegasusTokenizer"),Mgo=o(" or "),UI=a("a"),Ego=o("PegasusTokenizerFast"),Cgo=o(" (Pegasus model)"),wgo=l(),_h=a("li"),oie=a("strong"),Ago=o("perceiver"),Lgo=o(" \u2014 "),JI=a("a"),ygo=o("PerceiverTokenizer"),xgo=o(" (Perceiver model)"),$go=l(),bh=a("li"),rie=a("strong"),kgo=o("phobert"),Sgo=o(" \u2014 "),YI=a("a"),Rgo=o("PhobertTokenizer"),Pgo=o(" (PhoBERT model)"),Bgo=l(),vh=a("li"),tie=a("strong"),Igo=o("plbart"),Ngo=o(" \u2014 "),KI=a("a"),qgo=o("PLBartTokenizer"),jgo=o(" (PLBart model)"),Dgo=l(),Fh=a("li"),aie=a("strong"),Ggo=o("prophetnet"),Ogo=o(" \u2014 "),ZI=a("a"),Vgo=o("ProphetNetTokenizer"),Xgo=o(" (ProphetNet model)"),zgo=l(),$s=a("li"),nie=a("strong"),Qgo=o("qdqbert"),Wgo=o(" \u2014 "),eN=a("a"),Hgo=o("BertTokenizer"),Ugo=o(" or "),oN=a("a"),Jgo=o("BertTokenizerFast"),Ygo=o(" (QDQBert model)"),Kgo=l(),Th=a("li"),sie=a("strong"),Zgo=o("rag"),eho=o(" \u2014 "),rN=a("a"),oho=o("RagTokenizer"),rho=o(" (RAG model)"),tho=l(),ks=a("li"),lie=a("strong"),aho=o("realm"),nho=o(" \u2014 "),tN=a("a"),sho=o("RealmTokenizer"),lho=o(" or "),aN=a("a"),iho=o("RealmTokenizerFast"),dho=o(" (REALM model)"),cho=l(),Ss=a("li"),iie=a("strong"),mho=o("reformer"),fho=o(" \u2014 "),nN=a("a"),gho=o("ReformerTokenizer"),hho=o(" or "),sN=a("a"),uho=o("ReformerTokenizerFast"),pho=o(" (Reformer model)"),_ho=l(),Rs=a("li"),die=a("strong"),bho=o("rembert"),vho=o(" \u2014 "),lN=a("a"),Fho=o("RemBertTokenizer"),Tho=o(" or "),iN=a("a"),Mho=o("RemBertTokenizerFast"),Eho=o(" (RemBERT model)"),Cho=l(),Ps=a("li"),cie=a("strong"),who=o("retribert"),Aho=o(" \u2014 "),dN=a("a"),Lho=o("RetriBertTokenizer"),yho=o(" or "),cN=a("a"),xho=o("RetriBertTokenizerFast"),$ho=o(" (RetriBERT model)"),kho=l(),Bs=a("li"),mie=a("strong"),Sho=o("roberta"),Rho=o(" \u2014 "),mN=a("a"),Pho=o("RobertaTokenizer"),Bho=o(" or "),fN=a("a"),Iho=o("RobertaTokenizerFast"),Nho=o(" (RoBERTa model)"),qho=l(),Is=a("li"),fie=a("strong"),jho=o("roformer"),Dho=o(" \u2014 "),gN=a("a"),Gho=o("RoFormerTokenizer"),Oho=o(" or "),hN=a("a"),Vho=o("RoFormerTokenizerFast"),Xho=o(" (RoFormer model)"),zho=l(),Mh=a("li"),gie=a("strong"),Qho=o("speech_to_text"),Who=o(" \u2014 "),uN=a("a"),Hho=o("Speech2TextTokenizer"),Uho=o(" (Speech2Text model)"),Jho=l(),Eh=a("li"),hie=a("strong"),Yho=o("speech_to_text_2"),Kho=o(" \u2014 "),pN=a("a"),Zho=o("Speech2Text2Tokenizer"),euo=o(" (Speech2Text2 model)"),ouo=l(),Ns=a("li"),uie=a("strong"),ruo=o("splinter"),tuo=o(" \u2014 "),_N=a("a"),auo=o("SplinterTokenizer"),nuo=o(" or "),bN=a("a"),suo=o("SplinterTokenizerFast"),luo=o(" (Splinter model)"),iuo=l(),qs=a("li"),pie=a("strong"),duo=o("squeezebert"),cuo=o(" \u2014 "),vN=a("a"),muo=o("SqueezeBertTokenizer"),fuo=o(" or "),FN=a("a"),guo=o("SqueezeBertTokenizerFast"),huo=o(" (SqueezeBERT model)"),uuo=l(),js=a("li"),_ie=a("strong"),puo=o("t5"),_uo=o(" \u2014 "),TN=a("a"),buo=o("T5Tokenizer"),vuo=o(" or "),MN=a("a"),Fuo=o("T5TokenizerFast"),Tuo=o(" (T5 model)"),Muo=l(),Ch=a("li"),bie=a("strong"),Euo=o("tapas"),Cuo=o(" \u2014 "),EN=a("a"),wuo=o("TapasTokenizer"),Auo=o(" (TAPAS model)"),Luo=l(),wh=a("li"),vie=a("strong"),yuo=o("tapex"),xuo=o(" \u2014 "),CN=a("a"),$uo=o("TapexTokenizer"),kuo=o(" (TAPEX model)"),Suo=l(),Ah=a("li"),Fie=a("strong"),Ruo=o("transfo-xl"),Puo=o(" \u2014 "),wN=a("a"),Buo=o("TransfoXLTokenizer"),Iuo=o(" (Transformer-XL model)"),Nuo=l(),Ds=a("li"),Tie=a("strong"),quo=o("vilt"),juo=o(" \u2014 "),AN=a("a"),Duo=o("BertTokenizer"),Guo=o(" or "),LN=a("a"),Ouo=o("BertTokenizerFast"),Vuo=o(" (ViLT model)"),Xuo=l(),Gs=a("li"),Mie=a("strong"),zuo=o("visual_bert"),Quo=o(" \u2014 "),yN=a("a"),Wuo=o("BertTokenizer"),Huo=o(" or "),xN=a("a"),Uuo=o("BertTokenizerFast"),Juo=o(" (VisualBERT model)"),Yuo=l(),Lh=a("li"),Eie=a("strong"),Kuo=o("wav2vec2"),Zuo=o(" \u2014 "),$N=a("a"),epo=o("Wav2Vec2CTCTokenizer"),opo=o(" (Wav2Vec2 model)"),rpo=l(),yh=a("li"),Cie=a("strong"),tpo=o("wav2vec2-conformer"),apo=o(" \u2014 "),kN=a("a"),npo=o("Wav2Vec2CTCTokenizer"),spo=o(" (Wav2Vec2-Conformer model)"),lpo=l(),xh=a("li"),wie=a("strong"),ipo=o("wav2vec2_phoneme"),dpo=o(" \u2014 "),SN=a("a"),cpo=o("Wav2Vec2PhonemeCTCTokenizer"),mpo=o(" (Wav2Vec2Phoneme model)"),fpo=l(),Os=a("li"),Aie=a("strong"),gpo=o("xglm"),hpo=o(" \u2014 "),RN=a("a"),upo=o("XGLMTokenizer"),ppo=o(" or "),PN=a("a"),_po=o("XGLMTokenizerFast"),bpo=o(" (XGLM model)"),vpo=l(),$h=a("li"),Lie=a("strong"),Fpo=o("xlm"),Tpo=o(" \u2014 "),BN=a("a"),Mpo=o("XLMTokenizer"),Epo=o(" (XLM model)"),Cpo=l(),kh=a("li"),yie=a("strong"),wpo=o("xlm-prophetnet"),Apo=o(" \u2014 "),IN=a("a"),Lpo=o("XLMProphetNetTokenizer"),ypo=o(" (XLM-ProphetNet model)"),xpo=l(),Vs=a("li"),xie=a("strong"),$po=o("xlm-roberta"),kpo=o(" \u2014 "),NN=a("a"),Spo=o("XLMRobertaTokenizer"),Rpo=o(" or "),qN=a("a"),Ppo=o("XLMRobertaTokenizerFast"),Bpo=o(" (XLM-RoBERTa model)"),Ipo=l(),Xs=a("li"),$ie=a("strong"),Npo=o("xlm-roberta-xl"),qpo=o(" \u2014 "),jN=a("a"),jpo=o("RobertaTokenizer"),Dpo=o(" or "),DN=a("a"),Gpo=o("RobertaTokenizerFast"),Opo=o(" (XLM-RoBERTa-XL model)"),Vpo=l(),zs=a("li"),kie=a("strong"),Xpo=o("xlnet"),zpo=o(" \u2014 "),GN=a("a"),Qpo=o("XLNetTokenizer"),Wpo=o(" or "),ON=a("a"),Hpo=o("XLNetTokenizerFast"),Upo=o(" (XLNet model)"),Jpo=l(),Qs=a("li"),Sie=a("strong"),Ypo=o("yoso"),Kpo=o(" \u2014 "),VN=a("a"),Zpo=o("AlbertTokenizer"),e_o=o(" or "),XN=a("a"),o_o=o("AlbertTokenizerFast"),r_o=o(" (YOSO model)"),t_o=l(),F(Sh.$$.fragment),a_o=l(),Rh=a("div"),F(uy.$$.fragment),n_o=l(),Rie=a("p"),s_o=o("Register a new tokenizer in this mapping."),YVe=l(),Ni=a("h2"),Ph=a("a"),Pie=a("span"),F(py.$$.fragment),l_o=l(),Bie=a("span"),i_o=o("AutoFeatureExtractor"),KVe=l(),Lo=a("div"),F(_y.$$.fragment),d_o=l(),by=a("p"),c_o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),zN=a("a"),m_o=o("AutoFeatureExtractor.from_pretrained()"),f_o=o(" class method."),g_o=l(),vy=a("p"),h_o=o("This class cannot be instantiated directly using "),Iie=a("code"),u_o=o("__init__()"),p_o=o(" (throws an error)."),__o=l(),He=a("div"),F(Fy.$$.fragment),b_o=l(),Nie=a("p"),v_o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),F_o=l(),Ba=a("p"),T_o=o("The feature extractor class to instantiate is selected based on the "),qie=a("code"),M_o=o("model_type"),E_o=o(` property of the config object
(either passed as an argument or loaded from `),jie=a("code"),C_o=o("pretrained_model_name_or_path"),w_o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Die=a("code"),A_o=o("pretrained_model_name_or_path"),L_o=o(":"),y_o=l(),Y=a("ul"),Bh=a("li"),Gie=a("strong"),x_o=o("beit"),$_o=o(" \u2014 "),QN=a("a"),k_o=o("BeitFeatureExtractor"),S_o=o(" (BEiT model)"),R_o=l(),Ih=a("li"),Oie=a("strong"),P_o=o("clip"),B_o=o(" \u2014 "),WN=a("a"),I_o=o("CLIPFeatureExtractor"),N_o=o(" (CLIP model)"),q_o=l(),Nh=a("li"),Vie=a("strong"),j_o=o("convnext"),D_o=o(" \u2014 "),HN=a("a"),G_o=o("ConvNextFeatureExtractor"),O_o=o(" (ConvNeXT model)"),V_o=l(),qh=a("li"),Xie=a("strong"),X_o=o("cvt"),z_o=o(" \u2014 "),UN=a("a"),Q_o=o("ConvNextFeatureExtractor"),W_o=o(" (CvT model)"),H_o=l(),jh=a("li"),zie=a("strong"),U_o=o("data2vec-audio"),J_o=o(" \u2014 "),JN=a("a"),Y_o=o("Wav2Vec2FeatureExtractor"),K_o=o(" (Data2VecAudio model)"),Z_o=l(),Dh=a("li"),Qie=a("strong"),e2o=o("data2vec-vision"),o2o=o(" \u2014 "),YN=a("a"),r2o=o("BeitFeatureExtractor"),t2o=o(" (Data2VecVision model)"),a2o=l(),Gh=a("li"),Wie=a("strong"),n2o=o("deit"),s2o=o(" \u2014 "),KN=a("a"),l2o=o("DeiTFeatureExtractor"),i2o=o(" (DeiT model)"),d2o=l(),Oh=a("li"),Hie=a("strong"),c2o=o("detr"),m2o=o(" \u2014 "),ZN=a("a"),f2o=o("DetrFeatureExtractor"),g2o=o(" (DETR model)"),h2o=l(),Vh=a("li"),Uie=a("strong"),u2o=o("dpt"),p2o=o(" \u2014 "),eq=a("a"),_2o=o("DPTFeatureExtractor"),b2o=o(" (DPT model)"),v2o=l(),Xh=a("li"),Jie=a("strong"),F2o=o("flava"),T2o=o(" \u2014 "),oq=a("a"),M2o=o("FlavaFeatureExtractor"),E2o=o(" (FLAVA model)"),C2o=l(),zh=a("li"),Yie=a("strong"),w2o=o("glpn"),A2o=o(" \u2014 "),rq=a("a"),L2o=o("GLPNFeatureExtractor"),y2o=o(" (GLPN model)"),x2o=l(),Qh=a("li"),Kie=a("strong"),$2o=o("groupvit"),k2o=o(" \u2014 "),tq=a("a"),S2o=o("CLIPFeatureExtractor"),R2o=o(" (GroupViT model)"),P2o=l(),Wh=a("li"),Zie=a("strong"),B2o=o("hubert"),I2o=o(" \u2014 "),aq=a("a"),N2o=o("Wav2Vec2FeatureExtractor"),q2o=o(" (Hubert model)"),j2o=l(),Hh=a("li"),ede=a("strong"),D2o=o("imagegpt"),G2o=o(" \u2014 "),nq=a("a"),O2o=o("ImageGPTFeatureExtractor"),V2o=o(" (ImageGPT model)"),X2o=l(),Uh=a("li"),ode=a("strong"),z2o=o("layoutlmv2"),Q2o=o(" \u2014 "),sq=a("a"),W2o=o("LayoutLMv2FeatureExtractor"),H2o=o(" (LayoutLMv2 model)"),U2o=l(),Jh=a("li"),rde=a("strong"),J2o=o("layoutlmv3"),Y2o=o(" \u2014 "),lq=a("a"),K2o=o("LayoutLMv3FeatureExtractor"),Z2o=o(" (LayoutLMv3 model)"),ebo=l(),Yh=a("li"),tde=a("strong"),obo=o("levit"),rbo=o(" \u2014 "),iq=a("a"),tbo=o("LevitFeatureExtractor"),abo=o(" (LeViT model)"),nbo=l(),Kh=a("li"),ade=a("strong"),sbo=o("maskformer"),lbo=o(" \u2014 "),dq=a("a"),ibo=o("MaskFormerFeatureExtractor"),dbo=o(" (MaskFormer model)"),cbo=l(),Zh=a("li"),nde=a("strong"),mbo=o("mctct"),fbo=o(" \u2014 "),cq=a("a"),gbo=o("MCTCTFeatureExtractor"),hbo=o(" (M-CTC-T model)"),ubo=l(),eu=a("li"),sde=a("strong"),pbo=o("mobilevit"),_bo=o(" \u2014 "),mq=a("a"),bbo=o("MobileViTFeatureExtractor"),vbo=o(" (MobileViT model)"),Fbo=l(),ou=a("li"),lde=a("strong"),Tbo=o("perceiver"),Mbo=o(" \u2014 "),fq=a("a"),Ebo=o("PerceiverFeatureExtractor"),Cbo=o(" (Perceiver model)"),wbo=l(),ru=a("li"),ide=a("strong"),Abo=o("poolformer"),Lbo=o(" \u2014 "),gq=a("a"),ybo=o("PoolFormerFeatureExtractor"),xbo=o(" (PoolFormer model)"),$bo=l(),tu=a("li"),dde=a("strong"),kbo=o("regnet"),Sbo=o(" \u2014 "),hq=a("a"),Rbo=o("ConvNextFeatureExtractor"),Pbo=o(" (RegNet model)"),Bbo=l(),au=a("li"),cde=a("strong"),Ibo=o("resnet"),Nbo=o(" \u2014 "),uq=a("a"),qbo=o("ConvNextFeatureExtractor"),jbo=o(" (ResNet model)"),Dbo=l(),nu=a("li"),mde=a("strong"),Gbo=o("segformer"),Obo=o(" \u2014 "),pq=a("a"),Vbo=o("SegformerFeatureExtractor"),Xbo=o(" (SegFormer model)"),zbo=l(),su=a("li"),fde=a("strong"),Qbo=o("speech_to_text"),Wbo=o(" \u2014 "),_q=a("a"),Hbo=o("Speech2TextFeatureExtractor"),Ubo=o(" (Speech2Text model)"),Jbo=l(),lu=a("li"),gde=a("strong"),Ybo=o("swin"),Kbo=o(" \u2014 "),bq=a("a"),Zbo=o("ViTFeatureExtractor"),evo=o(" (Swin Transformer model)"),ovo=l(),iu=a("li"),hde=a("strong"),rvo=o("van"),tvo=o(" \u2014 "),vq=a("a"),avo=o("ConvNextFeatureExtractor"),nvo=o(" (VAN model)"),svo=l(),du=a("li"),ude=a("strong"),lvo=o("vilt"),ivo=o(" \u2014 "),Fq=a("a"),dvo=o("ViltFeatureExtractor"),cvo=o(" (ViLT model)"),mvo=l(),cu=a("li"),pde=a("strong"),fvo=o("vit"),gvo=o(" \u2014 "),Tq=a("a"),hvo=o("ViTFeatureExtractor"),uvo=o(" (ViT model)"),pvo=l(),mu=a("li"),_de=a("strong"),_vo=o("vit_mae"),bvo=o(" \u2014 "),Mq=a("a"),vvo=o("ViTFeatureExtractor"),Fvo=o(" (ViTMAE model)"),Tvo=l(),fu=a("li"),bde=a("strong"),Mvo=o("wav2vec2"),Evo=o(" \u2014 "),Eq=a("a"),Cvo=o("Wav2Vec2FeatureExtractor"),wvo=o(" (Wav2Vec2 model)"),Avo=l(),gu=a("li"),vde=a("strong"),Lvo=o("wav2vec2-conformer"),yvo=o(" \u2014 "),Cq=a("a"),xvo=o("Wav2Vec2FeatureExtractor"),$vo=o(" (Wav2Vec2-Conformer model)"),kvo=l(),hu=a("li"),Fde=a("strong"),Svo=o("yolos"),Rvo=o(" \u2014 "),wq=a("a"),Pvo=o("YolosFeatureExtractor"),Bvo=o(" (YOLOS model)"),Ivo=l(),F(uu.$$.fragment),Nvo=l(),F(pu.$$.fragment),qvo=l(),_u=a("div"),F(Ty.$$.fragment),jvo=l(),Tde=a("p"),Dvo=o("Register a new feature extractor for this class."),ZVe=l(),qi=a("h2"),bu=a("a"),Mde=a("span"),F(My.$$.fragment),Gvo=l(),Ede=a("span"),Ovo=o("AutoProcessor"),eXe=l(),yo=a("div"),F(Ey.$$.fragment),Vvo=l(),Cy=a("p"),Xvo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Aq=a("a"),zvo=o("AutoProcessor.from_pretrained()"),Qvo=o(" class method."),Wvo=l(),wy=a("p"),Hvo=o("This class cannot be instantiated directly using "),Cde=a("code"),Uvo=o("__init__()"),Jvo=o(" (throws an error)."),Yvo=l(),Ue=a("div"),F(Ay.$$.fragment),Kvo=l(),wde=a("p"),Zvo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),e1o=l(),ji=a("p"),o1o=o("The processor class to instantiate is selected based on the "),Ade=a("code"),r1o=o("model_type"),t1o=o(` property of the config object (either
passed as an argument or loaded from `),Lde=a("code"),a1o=o("pretrained_model_name_or_path"),n1o=o(" if possible):"),s1o=l(),he=a("ul"),vu=a("li"),yde=a("strong"),l1o=o("clip"),i1o=o(" \u2014 "),Lq=a("a"),d1o=o("CLIPProcessor"),c1o=o(" (CLIP model)"),m1o=l(),Fu=a("li"),xde=a("strong"),f1o=o("flava"),g1o=o(" \u2014 "),$de=a("code"),h1o=o("FLAVAProcessor"),u1o=o(" (FLAVA model)"),p1o=l(),Tu=a("li"),kde=a("strong"),_1o=o("groupvit"),b1o=o(" \u2014 "),yq=a("a"),v1o=o("CLIPProcessor"),F1o=o(" (GroupViT model)"),T1o=l(),Mu=a("li"),Sde=a("strong"),M1o=o("layoutlmv2"),E1o=o(" \u2014 "),xq=a("a"),C1o=o("LayoutLMv2Processor"),w1o=o(" (LayoutLMv2 model)"),A1o=l(),Eu=a("li"),Rde=a("strong"),L1o=o("layoutlmv3"),y1o=o(" \u2014 "),$q=a("a"),x1o=o("LayoutLMv3Processor"),$1o=o(" (LayoutLMv3 model)"),k1o=l(),Cu=a("li"),Pde=a("strong"),S1o=o("layoutxlm"),R1o=o(" \u2014 "),kq=a("a"),P1o=o("LayoutXLMProcessor"),B1o=o(" (LayoutXLM model)"),I1o=l(),wu=a("li"),Bde=a("strong"),N1o=o("sew"),q1o=o(" \u2014 "),Sq=a("a"),j1o=o("Wav2Vec2Processor"),D1o=o(" (SEW model)"),G1o=l(),Au=a("li"),Ide=a("strong"),O1o=o("sew-d"),V1o=o(" \u2014 "),Rq=a("a"),X1o=o("Wav2Vec2Processor"),z1o=o(" (SEW-D model)"),Q1o=l(),Lu=a("li"),Nde=a("strong"),W1o=o("speech_to_text"),H1o=o(" \u2014 "),Pq=a("a"),U1o=o("Speech2TextProcessor"),J1o=o(" (Speech2Text model)"),Y1o=l(),yu=a("li"),qde=a("strong"),K1o=o("speech_to_text_2"),Z1o=o(" \u2014 "),Bq=a("a"),eFo=o("Speech2Text2Processor"),oFo=o(" (Speech2Text2 model)"),rFo=l(),xu=a("li"),jde=a("strong"),tFo=o("trocr"),aFo=o(" \u2014 "),Iq=a("a"),nFo=o("TrOCRProcessor"),sFo=o(" (TrOCR model)"),lFo=l(),$u=a("li"),Dde=a("strong"),iFo=o("unispeech"),dFo=o(" \u2014 "),Nq=a("a"),cFo=o("Wav2Vec2Processor"),mFo=o(" (UniSpeech model)"),fFo=l(),ku=a("li"),Gde=a("strong"),gFo=o("unispeech-sat"),hFo=o(" \u2014 "),qq=a("a"),uFo=o("Wav2Vec2Processor"),pFo=o(" (UniSpeechSat model)"),_Fo=l(),Su=a("li"),Ode=a("strong"),bFo=o("vilt"),vFo=o(" \u2014 "),jq=a("a"),FFo=o("ViltProcessor"),TFo=o(" (ViLT model)"),MFo=l(),Ru=a("li"),Vde=a("strong"),EFo=o("vision-text-dual-encoder"),CFo=o(" \u2014 "),Dq=a("a"),wFo=o("VisionTextDualEncoderProcessor"),AFo=o(" (VisionTextDualEncoder model)"),LFo=l(),Pu=a("li"),Xde=a("strong"),yFo=o("wav2vec2"),xFo=o(" \u2014 "),Gq=a("a"),$Fo=o("Wav2Vec2Processor"),kFo=o(" (Wav2Vec2 model)"),SFo=l(),Bu=a("li"),zde=a("strong"),RFo=o("wav2vec2-conformer"),PFo=o(" \u2014 "),Oq=a("a"),BFo=o("Wav2Vec2Processor"),IFo=o(" (Wav2Vec2-Conformer model)"),NFo=l(),Iu=a("li"),Qde=a("strong"),qFo=o("wavlm"),jFo=o(" \u2014 "),Vq=a("a"),DFo=o("Wav2Vec2Processor"),GFo=o(" (WavLM model)"),OFo=l(),F(Nu.$$.fragment),VFo=l(),F(qu.$$.fragment),XFo=l(),ju=a("div"),F(Ly.$$.fragment),zFo=l(),Wde=a("p"),QFo=o("Register a new processor for this class."),oXe=l(),Di=a("h2"),Du=a("a"),Hde=a("span"),F(yy.$$.fragment),WFo=l(),Ude=a("span"),HFo=o("AutoModel"),rXe=l(),xo=a("div"),F(xy.$$.fragment),UFo=l(),Gi=a("p"),JFo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Xq=a("a"),YFo=o("from_pretrained()"),KFo=o(" class method or the "),zq=a("a"),ZFo=o("from_config()"),eTo=o(` class
method.`),oTo=l(),$y=a("p"),rTo=o("This class cannot be instantiated directly using "),Jde=a("code"),tTo=o("__init__()"),aTo=o(" (throws an error)."),nTo=l(),lt=a("div"),F(ky.$$.fragment),sTo=l(),Yde=a("p"),lTo=o("Instantiates one of the base model classes of the library from a configuration."),iTo=l(),Oi=a("p"),dTo=o(`Note:
Loading a model from its configuration file does `),Kde=a("strong"),cTo=o("not"),mTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qq=a("a"),fTo=o("from_pretrained()"),gTo=o(" to load the model weights."),hTo=l(),F(Gu.$$.fragment),uTo=l(),Je=a("div"),F(Sy.$$.fragment),pTo=l(),Zde=a("p"),_To=o("Instantiate one of the base model classes of the library from a pretrained model."),bTo=l(),Ia=a("p"),vTo=o("The model class to instantiate is selected based on the "),ece=a("code"),FTo=o("model_type"),TTo=o(` property of the config object (either
passed as an argument or loaded from `),oce=a("code"),MTo=o("pretrained_model_name_or_path"),ETo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rce=a("code"),CTo=o("pretrained_model_name_or_path"),wTo=o(":"),ATo=l(),y=a("ul"),Ou=a("li"),tce=a("strong"),LTo=o("albert"),yTo=o(" \u2014 "),Wq=a("a"),xTo=o("AlbertModel"),$To=o(" (ALBERT model)"),kTo=l(),Vu=a("li"),ace=a("strong"),STo=o("bart"),RTo=o(" \u2014 "),Hq=a("a"),PTo=o("BartModel"),BTo=o(" (BART model)"),ITo=l(),Xu=a("li"),nce=a("strong"),NTo=o("beit"),qTo=o(" \u2014 "),Uq=a("a"),jTo=o("BeitModel"),DTo=o(" (BEiT model)"),GTo=l(),zu=a("li"),sce=a("strong"),OTo=o("bert"),VTo=o(" \u2014 "),Jq=a("a"),XTo=o("BertModel"),zTo=o(" (BERT model)"),QTo=l(),Qu=a("li"),lce=a("strong"),WTo=o("bert-generation"),HTo=o(" \u2014 "),Yq=a("a"),UTo=o("BertGenerationEncoder"),JTo=o(" (Bert Generation model)"),YTo=l(),Wu=a("li"),ice=a("strong"),KTo=o("big_bird"),ZTo=o(" \u2014 "),Kq=a("a"),eMo=o("BigBirdModel"),oMo=o(" (BigBird model)"),rMo=l(),Hu=a("li"),dce=a("strong"),tMo=o("bigbird_pegasus"),aMo=o(" \u2014 "),Zq=a("a"),nMo=o("BigBirdPegasusModel"),sMo=o(" (BigBird-Pegasus model)"),lMo=l(),Uu=a("li"),cce=a("strong"),iMo=o("blenderbot"),dMo=o(" \u2014 "),ej=a("a"),cMo=o("BlenderbotModel"),mMo=o(" (Blenderbot model)"),fMo=l(),Ju=a("li"),mce=a("strong"),gMo=o("blenderbot-small"),hMo=o(" \u2014 "),oj=a("a"),uMo=o("BlenderbotSmallModel"),pMo=o(" (BlenderbotSmall model)"),_Mo=l(),Yu=a("li"),fce=a("strong"),bMo=o("bloom"),vMo=o(" \u2014 "),rj=a("a"),FMo=o("BloomModel"),TMo=o(" (BLOOM model)"),MMo=l(),Ku=a("li"),gce=a("strong"),EMo=o("camembert"),CMo=o(" \u2014 "),tj=a("a"),wMo=o("CamembertModel"),AMo=o(" (CamemBERT model)"),LMo=l(),Zu=a("li"),hce=a("strong"),yMo=o("canine"),xMo=o(" \u2014 "),aj=a("a"),$Mo=o("CanineModel"),kMo=o(" (CANINE model)"),SMo=l(),ep=a("li"),uce=a("strong"),RMo=o("clip"),PMo=o(" \u2014 "),nj=a("a"),BMo=o("CLIPModel"),IMo=o(" (CLIP model)"),NMo=l(),op=a("li"),pce=a("strong"),qMo=o("codegen"),jMo=o(" \u2014 "),sj=a("a"),DMo=o("CodeGenModel"),GMo=o(" (CodeGen model)"),OMo=l(),rp=a("li"),_ce=a("strong"),VMo=o("convbert"),XMo=o(" \u2014 "),lj=a("a"),zMo=o("ConvBertModel"),QMo=o(" (ConvBERT model)"),WMo=l(),tp=a("li"),bce=a("strong"),HMo=o("convnext"),UMo=o(" \u2014 "),ij=a("a"),JMo=o("ConvNextModel"),YMo=o(" (ConvNeXT model)"),KMo=l(),ap=a("li"),vce=a("strong"),ZMo=o("ctrl"),e4o=o(" \u2014 "),dj=a("a"),o4o=o("CTRLModel"),r4o=o(" (CTRL model)"),t4o=l(),np=a("li"),Fce=a("strong"),a4o=o("cvt"),n4o=o(" \u2014 "),cj=a("a"),s4o=o("CvtModel"),l4o=o(" (CvT model)"),i4o=l(),sp=a("li"),Tce=a("strong"),d4o=o("data2vec-audio"),c4o=o(" \u2014 "),mj=a("a"),m4o=o("Data2VecAudioModel"),f4o=o(" (Data2VecAudio model)"),g4o=l(),lp=a("li"),Mce=a("strong"),h4o=o("data2vec-text"),u4o=o(" \u2014 "),fj=a("a"),p4o=o("Data2VecTextModel"),_4o=o(" (Data2VecText model)"),b4o=l(),ip=a("li"),Ece=a("strong"),v4o=o("data2vec-vision"),F4o=o(" \u2014 "),gj=a("a"),T4o=o("Data2VecVisionModel"),M4o=o(" (Data2VecVision model)"),E4o=l(),dp=a("li"),Cce=a("strong"),C4o=o("deberta"),w4o=o(" \u2014 "),hj=a("a"),A4o=o("DebertaModel"),L4o=o(" (DeBERTa model)"),y4o=l(),cp=a("li"),wce=a("strong"),x4o=o("deberta-v2"),$4o=o(" \u2014 "),uj=a("a"),k4o=o("DebertaV2Model"),S4o=o(" (DeBERTa-v2 model)"),R4o=l(),mp=a("li"),Ace=a("strong"),P4o=o("decision_transformer"),B4o=o(" \u2014 "),pj=a("a"),I4o=o("DecisionTransformerModel"),N4o=o(" (Decision Transformer model)"),q4o=l(),fp=a("li"),Lce=a("strong"),j4o=o("deit"),D4o=o(" \u2014 "),_j=a("a"),G4o=o("DeiTModel"),O4o=o(" (DeiT model)"),V4o=l(),gp=a("li"),yce=a("strong"),X4o=o("detr"),z4o=o(" \u2014 "),bj=a("a"),Q4o=o("DetrModel"),W4o=o(" (DETR model)"),H4o=l(),hp=a("li"),xce=a("strong"),U4o=o("distilbert"),J4o=o(" \u2014 "),vj=a("a"),Y4o=o("DistilBertModel"),K4o=o(" (DistilBERT model)"),Z4o=l(),up=a("li"),$ce=a("strong"),eEo=o("dpr"),oEo=o(" \u2014 "),Fj=a("a"),rEo=o("DPRQuestionEncoder"),tEo=o(" (DPR model)"),aEo=l(),pp=a("li"),kce=a("strong"),nEo=o("dpt"),sEo=o(" \u2014 "),Tj=a("a"),lEo=o("DPTModel"),iEo=o(" (DPT model)"),dEo=l(),_p=a("li"),Sce=a("strong"),cEo=o("electra"),mEo=o(" \u2014 "),Mj=a("a"),fEo=o("ElectraModel"),gEo=o(" (ELECTRA model)"),hEo=l(),bp=a("li"),Rce=a("strong"),uEo=o("flaubert"),pEo=o(" \u2014 "),Ej=a("a"),_Eo=o("FlaubertModel"),bEo=o(" (FlauBERT model)"),vEo=l(),vp=a("li"),Pce=a("strong"),FEo=o("flava"),TEo=o(" \u2014 "),Cj=a("a"),MEo=o("FlavaModel"),EEo=o(" (FLAVA model)"),CEo=l(),Fp=a("li"),Bce=a("strong"),wEo=o("fnet"),AEo=o(" \u2014 "),wj=a("a"),LEo=o("FNetModel"),yEo=o(" (FNet model)"),xEo=l(),Tp=a("li"),Ice=a("strong"),$Eo=o("fsmt"),kEo=o(" \u2014 "),Aj=a("a"),SEo=o("FSMTModel"),REo=o(" (FairSeq Machine-Translation model)"),PEo=l(),Ws=a("li"),Nce=a("strong"),BEo=o("funnel"),IEo=o(" \u2014 "),Lj=a("a"),NEo=o("FunnelModel"),qEo=o(" or "),yj=a("a"),jEo=o("FunnelBaseModel"),DEo=o(" (Funnel Transformer model)"),GEo=l(),Mp=a("li"),qce=a("strong"),OEo=o("glpn"),VEo=o(" \u2014 "),xj=a("a"),XEo=o("GLPNModel"),zEo=o(" (GLPN model)"),QEo=l(),Ep=a("li"),jce=a("strong"),WEo=o("gpt2"),HEo=o(" \u2014 "),$j=a("a"),UEo=o("GPT2Model"),JEo=o(" (OpenAI GPT-2 model)"),YEo=l(),Cp=a("li"),Dce=a("strong"),KEo=o("gpt_neo"),ZEo=o(" \u2014 "),kj=a("a"),eCo=o("GPTNeoModel"),oCo=o(" (GPT Neo model)"),rCo=l(),wp=a("li"),Gce=a("strong"),tCo=o("gpt_neox"),aCo=o(" \u2014 "),Sj=a("a"),nCo=o("GPTNeoXModel"),sCo=o(" (GPT NeoX model)"),lCo=l(),Ap=a("li"),Oce=a("strong"),iCo=o("gptj"),dCo=o(" \u2014 "),Rj=a("a"),cCo=o("GPTJModel"),mCo=o(" (GPT-J model)"),fCo=l(),Lp=a("li"),Vce=a("strong"),gCo=o("groupvit"),hCo=o(" \u2014 "),Pj=a("a"),uCo=o("GroupViTModel"),pCo=o(" (GroupViT model)"),_Co=l(),yp=a("li"),Xce=a("strong"),bCo=o("hubert"),vCo=o(" \u2014 "),Bj=a("a"),FCo=o("HubertModel"),TCo=o(" (Hubert model)"),MCo=l(),xp=a("li"),zce=a("strong"),ECo=o("ibert"),CCo=o(" \u2014 "),Ij=a("a"),wCo=o("IBertModel"),ACo=o(" (I-BERT model)"),LCo=l(),$p=a("li"),Qce=a("strong"),yCo=o("imagegpt"),xCo=o(" \u2014 "),Nj=a("a"),$Co=o("ImageGPTModel"),kCo=o(" (ImageGPT model)"),SCo=l(),kp=a("li"),Wce=a("strong"),RCo=o("layoutlm"),PCo=o(" \u2014 "),qj=a("a"),BCo=o("LayoutLMModel"),ICo=o(" (LayoutLM model)"),NCo=l(),Sp=a("li"),Hce=a("strong"),qCo=o("layoutlmv2"),jCo=o(" \u2014 "),jj=a("a"),DCo=o("LayoutLMv2Model"),GCo=o(" (LayoutLMv2 model)"),OCo=l(),Rp=a("li"),Uce=a("strong"),VCo=o("layoutlmv3"),XCo=o(" \u2014 "),Dj=a("a"),zCo=o("LayoutLMv3Model"),QCo=o(" (LayoutLMv3 model)"),WCo=l(),Pp=a("li"),Jce=a("strong"),HCo=o("led"),UCo=o(" \u2014 "),Gj=a("a"),JCo=o("LEDModel"),YCo=o(" (LED model)"),KCo=l(),Bp=a("li"),Yce=a("strong"),ZCo=o("levit"),e3o=o(" \u2014 "),Oj=a("a"),o3o=o("LevitModel"),r3o=o(" (LeViT model)"),t3o=l(),Ip=a("li"),Kce=a("strong"),a3o=o("longformer"),n3o=o(" \u2014 "),Vj=a("a"),s3o=o("LongformerModel"),l3o=o(" (Longformer model)"),i3o=l(),Np=a("li"),Zce=a("strong"),d3o=o("longt5"),c3o=o(" \u2014 "),Xj=a("a"),m3o=o("LongT5Model"),f3o=o(" (LongT5 model)"),g3o=l(),qp=a("li"),eme=a("strong"),h3o=o("luke"),u3o=o(" \u2014 "),zj=a("a"),p3o=o("LukeModel"),_3o=o(" (LUKE model)"),b3o=l(),jp=a("li"),ome=a("strong"),v3o=o("lxmert"),F3o=o(" \u2014 "),Qj=a("a"),T3o=o("LxmertModel"),M3o=o(" (LXMERT model)"),E3o=l(),Dp=a("li"),rme=a("strong"),C3o=o("m2m_100"),w3o=o(" \u2014 "),Wj=a("a"),A3o=o("M2M100Model"),L3o=o(" (M2M100 model)"),y3o=l(),Gp=a("li"),tme=a("strong"),x3o=o("marian"),$3o=o(" \u2014 "),Hj=a("a"),k3o=o("MarianModel"),S3o=o(" (Marian model)"),R3o=l(),Op=a("li"),ame=a("strong"),P3o=o("maskformer"),B3o=o(" \u2014 "),Uj=a("a"),I3o=o("MaskFormerModel"),N3o=o(" (MaskFormer model)"),q3o=l(),Vp=a("li"),nme=a("strong"),j3o=o("mbart"),D3o=o(" \u2014 "),Jj=a("a"),G3o=o("MBartModel"),O3o=o(" (mBART model)"),V3o=l(),Xp=a("li"),sme=a("strong"),X3o=o("mctct"),z3o=o(" \u2014 "),Yj=a("a"),Q3o=o("MCTCTModel"),W3o=o(" (M-CTC-T model)"),H3o=l(),zp=a("li"),lme=a("strong"),U3o=o("megatron-bert"),J3o=o(" \u2014 "),Kj=a("a"),Y3o=o("MegatronBertModel"),K3o=o(" (Megatron-BERT model)"),Z3o=l(),Qp=a("li"),ime=a("strong"),e5o=o("mobilebert"),o5o=o(" \u2014 "),Zj=a("a"),r5o=o("MobileBertModel"),t5o=o(" (MobileBERT model)"),a5o=l(),Wp=a("li"),dme=a("strong"),n5o=o("mobilevit"),s5o=o(" \u2014 "),eD=a("a"),l5o=o("MobileViTModel"),i5o=o(" (MobileViT model)"),d5o=l(),Hp=a("li"),cme=a("strong"),c5o=o("mpnet"),m5o=o(" \u2014 "),oD=a("a"),f5o=o("MPNetModel"),g5o=o(" (MPNet model)"),h5o=l(),Up=a("li"),mme=a("strong"),u5o=o("mt5"),p5o=o(" \u2014 "),rD=a("a"),_5o=o("MT5Model"),b5o=o(" (MT5 model)"),v5o=l(),Jp=a("li"),fme=a("strong"),F5o=o("mvp"),T5o=o(" \u2014 "),tD=a("a"),M5o=o("MvpModel"),E5o=o(" (MVP model)"),C5o=l(),Yp=a("li"),gme=a("strong"),w5o=o("nezha"),A5o=o(" \u2014 "),aD=a("a"),L5o=o("NezhaModel"),y5o=o(" (Nezha model)"),x5o=l(),Kp=a("li"),hme=a("strong"),$5o=o("nystromformer"),k5o=o(" \u2014 "),nD=a("a"),S5o=o("NystromformerModel"),R5o=o(" (Nystr\xF6mformer model)"),P5o=l(),Zp=a("li"),ume=a("strong"),B5o=o("openai-gpt"),I5o=o(" \u2014 "),sD=a("a"),N5o=o("OpenAIGPTModel"),q5o=o(" (OpenAI GPT model)"),j5o=l(),e_=a("li"),pme=a("strong"),D5o=o("opt"),G5o=o(" \u2014 "),lD=a("a"),O5o=o("OPTModel"),V5o=o(" (OPT model)"),X5o=l(),o_=a("li"),_me=a("strong"),z5o=o("pegasus"),Q5o=o(" \u2014 "),iD=a("a"),W5o=o("PegasusModel"),H5o=o(" (Pegasus model)"),U5o=l(),r_=a("li"),bme=a("strong"),J5o=o("perceiver"),Y5o=o(" \u2014 "),dD=a("a"),K5o=o("PerceiverModel"),Z5o=o(" (Perceiver model)"),e0o=l(),t_=a("li"),vme=a("strong"),o0o=o("plbart"),r0o=o(" \u2014 "),cD=a("a"),t0o=o("PLBartModel"),a0o=o(" (PLBart model)"),n0o=l(),a_=a("li"),Fme=a("strong"),s0o=o("poolformer"),l0o=o(" \u2014 "),mD=a("a"),i0o=o("PoolFormerModel"),d0o=o(" (PoolFormer model)"),c0o=l(),n_=a("li"),Tme=a("strong"),m0o=o("prophetnet"),f0o=o(" \u2014 "),fD=a("a"),g0o=o("ProphetNetModel"),h0o=o(" (ProphetNet model)"),u0o=l(),s_=a("li"),Mme=a("strong"),p0o=o("qdqbert"),_0o=o(" \u2014 "),gD=a("a"),b0o=o("QDQBertModel"),v0o=o(" (QDQBert model)"),F0o=l(),l_=a("li"),Eme=a("strong"),T0o=o("reformer"),M0o=o(" \u2014 "),hD=a("a"),E0o=o("ReformerModel"),C0o=o(" (Reformer model)"),w0o=l(),i_=a("li"),Cme=a("strong"),A0o=o("regnet"),L0o=o(" \u2014 "),uD=a("a"),y0o=o("RegNetModel"),x0o=o(" (RegNet model)"),$0o=l(),d_=a("li"),wme=a("strong"),k0o=o("rembert"),S0o=o(" \u2014 "),pD=a("a"),R0o=o("RemBertModel"),P0o=o(" (RemBERT model)"),B0o=l(),c_=a("li"),Ame=a("strong"),I0o=o("resnet"),N0o=o(" \u2014 "),_D=a("a"),q0o=o("ResNetModel"),j0o=o(" (ResNet model)"),D0o=l(),m_=a("li"),Lme=a("strong"),G0o=o("retribert"),O0o=o(" \u2014 "),bD=a("a"),V0o=o("RetriBertModel"),X0o=o(" (RetriBERT model)"),z0o=l(),f_=a("li"),yme=a("strong"),Q0o=o("roberta"),W0o=o(" \u2014 "),vD=a("a"),H0o=o("RobertaModel"),U0o=o(" (RoBERTa model)"),J0o=l(),g_=a("li"),xme=a("strong"),Y0o=o("roformer"),K0o=o(" \u2014 "),FD=a("a"),Z0o=o("RoFormerModel"),ewo=o(" (RoFormer model)"),owo=l(),h_=a("li"),$me=a("strong"),rwo=o("segformer"),two=o(" \u2014 "),TD=a("a"),awo=o("SegformerModel"),nwo=o(" (SegFormer model)"),swo=l(),u_=a("li"),kme=a("strong"),lwo=o("sew"),iwo=o(" \u2014 "),MD=a("a"),dwo=o("SEWModel"),cwo=o(" (SEW model)"),mwo=l(),p_=a("li"),Sme=a("strong"),fwo=o("sew-d"),gwo=o(" \u2014 "),ED=a("a"),hwo=o("SEWDModel"),uwo=o(" (SEW-D model)"),pwo=l(),__=a("li"),Rme=a("strong"),_wo=o("speech_to_text"),bwo=o(" \u2014 "),CD=a("a"),vwo=o("Speech2TextModel"),Fwo=o(" (Speech2Text model)"),Two=l(),b_=a("li"),Pme=a("strong"),Mwo=o("splinter"),Ewo=o(" \u2014 "),wD=a("a"),Cwo=o("SplinterModel"),wwo=o(" (Splinter model)"),Awo=l(),v_=a("li"),Bme=a("strong"),Lwo=o("squeezebert"),ywo=o(" \u2014 "),AD=a("a"),xwo=o("SqueezeBertModel"),$wo=o(" (SqueezeBERT model)"),kwo=l(),F_=a("li"),Ime=a("strong"),Swo=o("swin"),Rwo=o(" \u2014 "),LD=a("a"),Pwo=o("SwinModel"),Bwo=o(" (Swin Transformer model)"),Iwo=l(),T_=a("li"),Nme=a("strong"),Nwo=o("t5"),qwo=o(" \u2014 "),yD=a("a"),jwo=o("T5Model"),Dwo=o(" (T5 model)"),Gwo=l(),M_=a("li"),qme=a("strong"),Owo=o("tapas"),Vwo=o(" \u2014 "),xD=a("a"),Xwo=o("TapasModel"),zwo=o(" (TAPAS model)"),Qwo=l(),E_=a("li"),jme=a("strong"),Wwo=o("trajectory_transformer"),Hwo=o(" \u2014 "),$D=a("a"),Uwo=o("TrajectoryTransformerModel"),Jwo=o(" (Trajectory Transformer model)"),Ywo=l(),C_=a("li"),Dme=a("strong"),Kwo=o("transfo-xl"),Zwo=o(" \u2014 "),kD=a("a"),eAo=o("TransfoXLModel"),oAo=o(" (Transformer-XL model)"),rAo=l(),w_=a("li"),Gme=a("strong"),tAo=o("unispeech"),aAo=o(" \u2014 "),SD=a("a"),nAo=o("UniSpeechModel"),sAo=o(" (UniSpeech model)"),lAo=l(),A_=a("li"),Ome=a("strong"),iAo=o("unispeech-sat"),dAo=o(" \u2014 "),RD=a("a"),cAo=o("UniSpeechSatModel"),mAo=o(" (UniSpeechSat model)"),fAo=l(),L_=a("li"),Vme=a("strong"),gAo=o("van"),hAo=o(" \u2014 "),PD=a("a"),uAo=o("VanModel"),pAo=o(" (VAN model)"),_Ao=l(),y_=a("li"),Xme=a("strong"),bAo=o("vilt"),vAo=o(" \u2014 "),BD=a("a"),FAo=o("ViltModel"),TAo=o(" (ViLT model)"),MAo=l(),x_=a("li"),zme=a("strong"),EAo=o("vision-text-dual-encoder"),CAo=o(" \u2014 "),ID=a("a"),wAo=o("VisionTextDualEncoderModel"),AAo=o(" (VisionTextDualEncoder model)"),LAo=l(),$_=a("li"),Qme=a("strong"),yAo=o("visual_bert"),xAo=o(" \u2014 "),ND=a("a"),$Ao=o("VisualBertModel"),kAo=o(" (VisualBERT model)"),SAo=l(),k_=a("li"),Wme=a("strong"),RAo=o("vit"),PAo=o(" \u2014 "),qD=a("a"),BAo=o("ViTModel"),IAo=o(" (ViT model)"),NAo=l(),S_=a("li"),Hme=a("strong"),qAo=o("vit_mae"),jAo=o(" \u2014 "),jD=a("a"),DAo=o("ViTMAEModel"),GAo=o(" (ViTMAE model)"),OAo=l(),R_=a("li"),Ume=a("strong"),VAo=o("wav2vec2"),XAo=o(" \u2014 "),DD=a("a"),zAo=o("Wav2Vec2Model"),QAo=o(" (Wav2Vec2 model)"),WAo=l(),P_=a("li"),Jme=a("strong"),HAo=o("wav2vec2-conformer"),UAo=o(" \u2014 "),GD=a("a"),JAo=o("Wav2Vec2ConformerModel"),YAo=o(" (Wav2Vec2-Conformer model)"),KAo=l(),B_=a("li"),Yme=a("strong"),ZAo=o("wavlm"),e6o=o(" \u2014 "),OD=a("a"),o6o=o("WavLMModel"),r6o=o(" (WavLM model)"),t6o=l(),I_=a("li"),Kme=a("strong"),a6o=o("xglm"),n6o=o(" \u2014 "),VD=a("a"),s6o=o("XGLMModel"),l6o=o(" (XGLM model)"),i6o=l(),N_=a("li"),Zme=a("strong"),d6o=o("xlm"),c6o=o(" \u2014 "),XD=a("a"),m6o=o("XLMModel"),f6o=o(" (XLM model)"),g6o=l(),q_=a("li"),efe=a("strong"),h6o=o("xlm-prophetnet"),u6o=o(" \u2014 "),zD=a("a"),p6o=o("XLMProphetNetModel"),_6o=o(" (XLM-ProphetNet model)"),b6o=l(),j_=a("li"),ofe=a("strong"),v6o=o("xlm-roberta"),F6o=o(" \u2014 "),QD=a("a"),T6o=o("XLMRobertaModel"),M6o=o(" (XLM-RoBERTa model)"),E6o=l(),D_=a("li"),rfe=a("strong"),C6o=o("xlm-roberta-xl"),w6o=o(" \u2014 "),WD=a("a"),A6o=o("XLMRobertaXLModel"),L6o=o(" (XLM-RoBERTa-XL model)"),y6o=l(),G_=a("li"),tfe=a("strong"),x6o=o("xlnet"),$6o=o(" \u2014 "),HD=a("a"),k6o=o("XLNetModel"),S6o=o(" (XLNet model)"),R6o=l(),O_=a("li"),afe=a("strong"),P6o=o("yolos"),B6o=o(" \u2014 "),UD=a("a"),I6o=o("YolosModel"),N6o=o(" (YOLOS model)"),q6o=l(),V_=a("li"),nfe=a("strong"),j6o=o("yoso"),D6o=o(" \u2014 "),JD=a("a"),G6o=o("YosoModel"),O6o=o(" (YOSO model)"),V6o=l(),X_=a("p"),X6o=o("The model is set in evaluation mode by default using "),sfe=a("code"),z6o=o("model.eval()"),Q6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lfe=a("code"),W6o=o("model.train()"),H6o=l(),F(z_.$$.fragment),tXe=l(),Vi=a("h2"),Q_=a("a"),ife=a("span"),F(Ry.$$.fragment),U6o=l(),dfe=a("span"),J6o=o("AutoModelForPreTraining"),aXe=l(),$o=a("div"),F(Py.$$.fragment),Y6o=l(),Xi=a("p"),K6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YD=a("a"),Z6o=o("from_pretrained()"),e7o=o(" class method or the "),KD=a("a"),o7o=o("from_config()"),r7o=o(` class
method.`),t7o=l(),By=a("p"),a7o=o("This class cannot be instantiated directly using "),cfe=a("code"),n7o=o("__init__()"),s7o=o(" (throws an error)."),l7o=l(),it=a("div"),F(Iy.$$.fragment),i7o=l(),mfe=a("p"),d7o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),c7o=l(),zi=a("p"),m7o=o(`Note:
Loading a model from its configuration file does `),ffe=a("strong"),f7o=o("not"),g7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZD=a("a"),h7o=o("from_pretrained()"),u7o=o(" to load the model weights."),p7o=l(),F(W_.$$.fragment),_7o=l(),Ye=a("div"),F(Ny.$$.fragment),b7o=l(),gfe=a("p"),v7o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),F7o=l(),Na=a("p"),T7o=o("The model class to instantiate is selected based on the "),hfe=a("code"),M7o=o("model_type"),E7o=o(` property of the config object (either
passed as an argument or loaded from `),ufe=a("code"),C7o=o("pretrained_model_name_or_path"),w7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=a("code"),A7o=o("pretrained_model_name_or_path"),L7o=o(":"),y7o=l(),G=a("ul"),H_=a("li"),_fe=a("strong"),x7o=o("albert"),$7o=o(" \u2014 "),eG=a("a"),k7o=o("AlbertForPreTraining"),S7o=o(" (ALBERT model)"),R7o=l(),U_=a("li"),bfe=a("strong"),P7o=o("bart"),B7o=o(" \u2014 "),oG=a("a"),I7o=o("BartForConditionalGeneration"),N7o=o(" (BART model)"),q7o=l(),J_=a("li"),vfe=a("strong"),j7o=o("bert"),D7o=o(" \u2014 "),rG=a("a"),G7o=o("BertForPreTraining"),O7o=o(" (BERT model)"),V7o=l(),Y_=a("li"),Ffe=a("strong"),X7o=o("big_bird"),z7o=o(" \u2014 "),tG=a("a"),Q7o=o("BigBirdForPreTraining"),W7o=o(" (BigBird model)"),H7o=l(),K_=a("li"),Tfe=a("strong"),U7o=o("bloom"),J7o=o(" \u2014 "),aG=a("a"),Y7o=o("BloomForCausalLM"),K7o=o(" (BLOOM model)"),Z7o=l(),Z_=a("li"),Mfe=a("strong"),eLo=o("camembert"),oLo=o(" \u2014 "),nG=a("a"),rLo=o("CamembertForMaskedLM"),tLo=o(" (CamemBERT model)"),aLo=l(),e2=a("li"),Efe=a("strong"),nLo=o("ctrl"),sLo=o(" \u2014 "),sG=a("a"),lLo=o("CTRLLMHeadModel"),iLo=o(" (CTRL model)"),dLo=l(),o2=a("li"),Cfe=a("strong"),cLo=o("data2vec-text"),mLo=o(" \u2014 "),lG=a("a"),fLo=o("Data2VecTextForMaskedLM"),gLo=o(" (Data2VecText model)"),hLo=l(),r2=a("li"),wfe=a("strong"),uLo=o("deberta"),pLo=o(" \u2014 "),iG=a("a"),_Lo=o("DebertaForMaskedLM"),bLo=o(" (DeBERTa model)"),vLo=l(),t2=a("li"),Afe=a("strong"),FLo=o("deberta-v2"),TLo=o(" \u2014 "),dG=a("a"),MLo=o("DebertaV2ForMaskedLM"),ELo=o(" (DeBERTa-v2 model)"),CLo=l(),a2=a("li"),Lfe=a("strong"),wLo=o("distilbert"),ALo=o(" \u2014 "),cG=a("a"),LLo=o("DistilBertForMaskedLM"),yLo=o(" (DistilBERT model)"),xLo=l(),n2=a("li"),yfe=a("strong"),$Lo=o("electra"),kLo=o(" \u2014 "),mG=a("a"),SLo=o("ElectraForPreTraining"),RLo=o(" (ELECTRA model)"),PLo=l(),s2=a("li"),xfe=a("strong"),BLo=o("flaubert"),ILo=o(" \u2014 "),fG=a("a"),NLo=o("FlaubertWithLMHeadModel"),qLo=o(" (FlauBERT model)"),jLo=l(),l2=a("li"),$fe=a("strong"),DLo=o("flava"),GLo=o(" \u2014 "),gG=a("a"),OLo=o("FlavaForPreTraining"),VLo=o(" (FLAVA model)"),XLo=l(),i2=a("li"),kfe=a("strong"),zLo=o("fnet"),QLo=o(" \u2014 "),hG=a("a"),WLo=o("FNetForPreTraining"),HLo=o(" (FNet model)"),ULo=l(),d2=a("li"),Sfe=a("strong"),JLo=o("fsmt"),YLo=o(" \u2014 "),uG=a("a"),KLo=o("FSMTForConditionalGeneration"),ZLo=o(" (FairSeq Machine-Translation model)"),eyo=l(),c2=a("li"),Rfe=a("strong"),oyo=o("funnel"),ryo=o(" \u2014 "),pG=a("a"),tyo=o("FunnelForPreTraining"),ayo=o(" (Funnel Transformer model)"),nyo=l(),m2=a("li"),Pfe=a("strong"),syo=o("gpt2"),lyo=o(" \u2014 "),_G=a("a"),iyo=o("GPT2LMHeadModel"),dyo=o(" (OpenAI GPT-2 model)"),cyo=l(),f2=a("li"),Bfe=a("strong"),myo=o("ibert"),fyo=o(" \u2014 "),bG=a("a"),gyo=o("IBertForMaskedLM"),hyo=o(" (I-BERT model)"),uyo=l(),g2=a("li"),Ife=a("strong"),pyo=o("layoutlm"),_yo=o(" \u2014 "),vG=a("a"),byo=o("LayoutLMForMaskedLM"),vyo=o(" (LayoutLM model)"),Fyo=l(),h2=a("li"),Nfe=a("strong"),Tyo=o("longformer"),Myo=o(" \u2014 "),FG=a("a"),Eyo=o("LongformerForMaskedLM"),Cyo=o(" (Longformer model)"),wyo=l(),u2=a("li"),qfe=a("strong"),Ayo=o("lxmert"),Lyo=o(" \u2014 "),TG=a("a"),yyo=o("LxmertForPreTraining"),xyo=o(" (LXMERT model)"),$yo=l(),p2=a("li"),jfe=a("strong"),kyo=o("megatron-bert"),Syo=o(" \u2014 "),MG=a("a"),Ryo=o("MegatronBertForPreTraining"),Pyo=o(" (Megatron-BERT model)"),Byo=l(),_2=a("li"),Dfe=a("strong"),Iyo=o("mobilebert"),Nyo=o(" \u2014 "),EG=a("a"),qyo=o("MobileBertForPreTraining"),jyo=o(" (MobileBERT model)"),Dyo=l(),b2=a("li"),Gfe=a("strong"),Gyo=o("mpnet"),Oyo=o(" \u2014 "),CG=a("a"),Vyo=o("MPNetForMaskedLM"),Xyo=o(" (MPNet model)"),zyo=l(),v2=a("li"),Ofe=a("strong"),Qyo=o("mvp"),Wyo=o(" \u2014 "),wG=a("a"),Hyo=o("MvpForConditionalGeneration"),Uyo=o(" (MVP model)"),Jyo=l(),F2=a("li"),Vfe=a("strong"),Yyo=o("nezha"),Kyo=o(" \u2014 "),AG=a("a"),Zyo=o("NezhaForPreTraining"),e8o=o(" (Nezha model)"),o8o=l(),T2=a("li"),Xfe=a("strong"),r8o=o("openai-gpt"),t8o=o(" \u2014 "),LG=a("a"),a8o=o("OpenAIGPTLMHeadModel"),n8o=o(" (OpenAI GPT model)"),s8o=l(),M2=a("li"),zfe=a("strong"),l8o=o("retribert"),i8o=o(" \u2014 "),yG=a("a"),d8o=o("RetriBertModel"),c8o=o(" (RetriBERT model)"),m8o=l(),E2=a("li"),Qfe=a("strong"),f8o=o("roberta"),g8o=o(" \u2014 "),xG=a("a"),h8o=o("RobertaForMaskedLM"),u8o=o(" (RoBERTa model)"),p8o=l(),C2=a("li"),Wfe=a("strong"),_8o=o("splinter"),b8o=o(" \u2014 "),$G=a("a"),v8o=o("SplinterForPreTraining"),F8o=o(" (Splinter model)"),T8o=l(),w2=a("li"),Hfe=a("strong"),M8o=o("squeezebert"),E8o=o(" \u2014 "),kG=a("a"),C8o=o("SqueezeBertForMaskedLM"),w8o=o(" (SqueezeBERT model)"),A8o=l(),A2=a("li"),Ufe=a("strong"),L8o=o("t5"),y8o=o(" \u2014 "),SG=a("a"),x8o=o("T5ForConditionalGeneration"),$8o=o(" (T5 model)"),k8o=l(),L2=a("li"),Jfe=a("strong"),S8o=o("tapas"),R8o=o(" \u2014 "),RG=a("a"),P8o=o("TapasForMaskedLM"),B8o=o(" (TAPAS model)"),I8o=l(),y2=a("li"),Yfe=a("strong"),N8o=o("transfo-xl"),q8o=o(" \u2014 "),PG=a("a"),j8o=o("TransfoXLLMHeadModel"),D8o=o(" (Transformer-XL model)"),G8o=l(),x2=a("li"),Kfe=a("strong"),O8o=o("unispeech"),V8o=o(" \u2014 "),BG=a("a"),X8o=o("UniSpeechForPreTraining"),z8o=o(" (UniSpeech model)"),Q8o=l(),$2=a("li"),Zfe=a("strong"),W8o=o("unispeech-sat"),H8o=o(" \u2014 "),IG=a("a"),U8o=o("UniSpeechSatForPreTraining"),J8o=o(" (UniSpeechSat model)"),Y8o=l(),k2=a("li"),ege=a("strong"),K8o=o("visual_bert"),Z8o=o(" \u2014 "),NG=a("a"),e9o=o("VisualBertForPreTraining"),o9o=o(" (VisualBERT model)"),r9o=l(),S2=a("li"),oge=a("strong"),t9o=o("vit_mae"),a9o=o(" \u2014 "),qG=a("a"),n9o=o("ViTMAEForPreTraining"),s9o=o(" (ViTMAE model)"),l9o=l(),R2=a("li"),rge=a("strong"),i9o=o("wav2vec2"),d9o=o(" \u2014 "),jG=a("a"),c9o=o("Wav2Vec2ForPreTraining"),m9o=o(" (Wav2Vec2 model)"),f9o=l(),P2=a("li"),tge=a("strong"),g9o=o("wav2vec2-conformer"),h9o=o(" \u2014 "),DG=a("a"),u9o=o("Wav2Vec2ConformerForPreTraining"),p9o=o(" (Wav2Vec2-Conformer model)"),_9o=l(),B2=a("li"),age=a("strong"),b9o=o("xlm"),v9o=o(" \u2014 "),GG=a("a"),F9o=o("XLMWithLMHeadModel"),T9o=o(" (XLM model)"),M9o=l(),I2=a("li"),nge=a("strong"),E9o=o("xlm-roberta"),C9o=o(" \u2014 "),OG=a("a"),w9o=o("XLMRobertaForMaskedLM"),A9o=o(" (XLM-RoBERTa model)"),L9o=l(),N2=a("li"),sge=a("strong"),y9o=o("xlm-roberta-xl"),x9o=o(" \u2014 "),VG=a("a"),$9o=o("XLMRobertaXLForMaskedLM"),k9o=o(" (XLM-RoBERTa-XL model)"),S9o=l(),q2=a("li"),lge=a("strong"),R9o=o("xlnet"),P9o=o(" \u2014 "),XG=a("a"),B9o=o("XLNetLMHeadModel"),I9o=o(" (XLNet model)"),N9o=l(),j2=a("p"),q9o=o("The model is set in evaluation mode by default using "),ige=a("code"),j9o=o("model.eval()"),D9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dge=a("code"),G9o=o("model.train()"),O9o=l(),F(D2.$$.fragment),nXe=l(),Qi=a("h2"),G2=a("a"),cge=a("span"),F(qy.$$.fragment),V9o=l(),mge=a("span"),X9o=o("AutoModelForCausalLM"),sXe=l(),ko=a("div"),F(jy.$$.fragment),z9o=l(),Wi=a("p"),Q9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zG=a("a"),W9o=o("from_pretrained()"),H9o=o(" class method or the "),QG=a("a"),U9o=o("from_config()"),J9o=o(` class
method.`),Y9o=l(),Dy=a("p"),K9o=o("This class cannot be instantiated directly using "),fge=a("code"),Z9o=o("__init__()"),exo=o(" (throws an error)."),oxo=l(),dt=a("div"),F(Gy.$$.fragment),rxo=l(),gge=a("p"),txo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),axo=l(),Hi=a("p"),nxo=o(`Note:
Loading a model from its configuration file does `),hge=a("strong"),sxo=o("not"),lxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WG=a("a"),ixo=o("from_pretrained()"),dxo=o(" to load the model weights."),cxo=l(),F(O2.$$.fragment),mxo=l(),Ke=a("div"),F(Oy.$$.fragment),fxo=l(),uge=a("p"),gxo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hxo=l(),qa=a("p"),uxo=o("The model class to instantiate is selected based on the "),pge=a("code"),pxo=o("model_type"),_xo=o(` property of the config object (either
passed as an argument or loaded from `),_ge=a("code"),bxo=o("pretrained_model_name_or_path"),vxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=a("code"),Fxo=o("pretrained_model_name_or_path"),Txo=o(":"),Mxo=l(),z=a("ul"),V2=a("li"),vge=a("strong"),Exo=o("bart"),Cxo=o(" \u2014 "),HG=a("a"),wxo=o("BartForCausalLM"),Axo=o(" (BART model)"),Lxo=l(),X2=a("li"),Fge=a("strong"),yxo=o("bert"),xxo=o(" \u2014 "),UG=a("a"),$xo=o("BertLMHeadModel"),kxo=o(" (BERT model)"),Sxo=l(),z2=a("li"),Tge=a("strong"),Rxo=o("bert-generation"),Pxo=o(" \u2014 "),JG=a("a"),Bxo=o("BertGenerationDecoder"),Ixo=o(" (Bert Generation model)"),Nxo=l(),Q2=a("li"),Mge=a("strong"),qxo=o("big_bird"),jxo=o(" \u2014 "),YG=a("a"),Dxo=o("BigBirdForCausalLM"),Gxo=o(" (BigBird model)"),Oxo=l(),W2=a("li"),Ege=a("strong"),Vxo=o("bigbird_pegasus"),Xxo=o(" \u2014 "),KG=a("a"),zxo=o("BigBirdPegasusForCausalLM"),Qxo=o(" (BigBird-Pegasus model)"),Wxo=l(),H2=a("li"),Cge=a("strong"),Hxo=o("blenderbot"),Uxo=o(" \u2014 "),ZG=a("a"),Jxo=o("BlenderbotForCausalLM"),Yxo=o(" (Blenderbot model)"),Kxo=l(),U2=a("li"),wge=a("strong"),Zxo=o("blenderbot-small"),e$o=o(" \u2014 "),eO=a("a"),o$o=o("BlenderbotSmallForCausalLM"),r$o=o(" (BlenderbotSmall model)"),t$o=l(),J2=a("li"),Age=a("strong"),a$o=o("bloom"),n$o=o(" \u2014 "),oO=a("a"),s$o=o("BloomForCausalLM"),l$o=o(" (BLOOM model)"),i$o=l(),Y2=a("li"),Lge=a("strong"),d$o=o("camembert"),c$o=o(" \u2014 "),rO=a("a"),m$o=o("CamembertForCausalLM"),f$o=o(" (CamemBERT model)"),g$o=l(),K2=a("li"),yge=a("strong"),h$o=o("codegen"),u$o=o(" \u2014 "),tO=a("a"),p$o=o("CodeGenForCausalLM"),_$o=o(" (CodeGen model)"),b$o=l(),Z2=a("li"),xge=a("strong"),v$o=o("ctrl"),F$o=o(" \u2014 "),aO=a("a"),T$o=o("CTRLLMHeadModel"),M$o=o(" (CTRL model)"),E$o=l(),eb=a("li"),$ge=a("strong"),C$o=o("data2vec-text"),w$o=o(" \u2014 "),nO=a("a"),A$o=o("Data2VecTextForCausalLM"),L$o=o(" (Data2VecText model)"),y$o=l(),ob=a("li"),kge=a("strong"),x$o=o("electra"),$$o=o(" \u2014 "),sO=a("a"),k$o=o("ElectraForCausalLM"),S$o=o(" (ELECTRA model)"),R$o=l(),rb=a("li"),Sge=a("strong"),P$o=o("gpt2"),B$o=o(" \u2014 "),lO=a("a"),I$o=o("GPT2LMHeadModel"),N$o=o(" (OpenAI GPT-2 model)"),q$o=l(),tb=a("li"),Rge=a("strong"),j$o=o("gpt_neo"),D$o=o(" \u2014 "),iO=a("a"),G$o=o("GPTNeoForCausalLM"),O$o=o(" (GPT Neo model)"),V$o=l(),ab=a("li"),Pge=a("strong"),X$o=o("gpt_neox"),z$o=o(" \u2014 "),dO=a("a"),Q$o=o("GPTNeoXForCausalLM"),W$o=o(" (GPT NeoX model)"),H$o=l(),nb=a("li"),Bge=a("strong"),U$o=o("gptj"),J$o=o(" \u2014 "),cO=a("a"),Y$o=o("GPTJForCausalLM"),K$o=o(" (GPT-J model)"),Z$o=l(),sb=a("li"),Ige=a("strong"),eko=o("marian"),oko=o(" \u2014 "),mO=a("a"),rko=o("MarianForCausalLM"),tko=o(" (Marian model)"),ako=l(),lb=a("li"),Nge=a("strong"),nko=o("mbart"),sko=o(" \u2014 "),fO=a("a"),lko=o("MBartForCausalLM"),iko=o(" (mBART model)"),dko=l(),ib=a("li"),qge=a("strong"),cko=o("megatron-bert"),mko=o(" \u2014 "),gO=a("a"),fko=o("MegatronBertForCausalLM"),gko=o(" (Megatron-BERT model)"),hko=l(),db=a("li"),jge=a("strong"),uko=o("mvp"),pko=o(" \u2014 "),hO=a("a"),_ko=o("MvpForCausalLM"),bko=o(" (MVP model)"),vko=l(),cb=a("li"),Dge=a("strong"),Fko=o("openai-gpt"),Tko=o(" \u2014 "),uO=a("a"),Mko=o("OpenAIGPTLMHeadModel"),Eko=o(" (OpenAI GPT model)"),Cko=l(),mb=a("li"),Gge=a("strong"),wko=o("opt"),Ako=o(" \u2014 "),pO=a("a"),Lko=o("OPTForCausalLM"),yko=o(" (OPT model)"),xko=l(),fb=a("li"),Oge=a("strong"),$ko=o("pegasus"),kko=o(" \u2014 "),_O=a("a"),Sko=o("PegasusForCausalLM"),Rko=o(" (Pegasus model)"),Pko=l(),gb=a("li"),Vge=a("strong"),Bko=o("plbart"),Iko=o(" \u2014 "),bO=a("a"),Nko=o("PLBartForCausalLM"),qko=o(" (PLBart model)"),jko=l(),hb=a("li"),Xge=a("strong"),Dko=o("prophetnet"),Gko=o(" \u2014 "),vO=a("a"),Oko=o("ProphetNetForCausalLM"),Vko=o(" (ProphetNet model)"),Xko=l(),ub=a("li"),zge=a("strong"),zko=o("qdqbert"),Qko=o(" \u2014 "),FO=a("a"),Wko=o("QDQBertLMHeadModel"),Hko=o(" (QDQBert model)"),Uko=l(),pb=a("li"),Qge=a("strong"),Jko=o("reformer"),Yko=o(" \u2014 "),TO=a("a"),Kko=o("ReformerModelWithLMHead"),Zko=o(" (Reformer model)"),eSo=l(),_b=a("li"),Wge=a("strong"),oSo=o("rembert"),rSo=o(" \u2014 "),MO=a("a"),tSo=o("RemBertForCausalLM"),aSo=o(" (RemBERT model)"),nSo=l(),bb=a("li"),Hge=a("strong"),sSo=o("roberta"),lSo=o(" \u2014 "),EO=a("a"),iSo=o("RobertaForCausalLM"),dSo=o(" (RoBERTa model)"),cSo=l(),vb=a("li"),Uge=a("strong"),mSo=o("roformer"),fSo=o(" \u2014 "),CO=a("a"),gSo=o("RoFormerForCausalLM"),hSo=o(" (RoFormer model)"),uSo=l(),Fb=a("li"),Jge=a("strong"),pSo=o("speech_to_text_2"),_So=o(" \u2014 "),wO=a("a"),bSo=o("Speech2Text2ForCausalLM"),vSo=o(" (Speech2Text2 model)"),FSo=l(),Tb=a("li"),Yge=a("strong"),TSo=o("transfo-xl"),MSo=o(" \u2014 "),AO=a("a"),ESo=o("TransfoXLLMHeadModel"),CSo=o(" (Transformer-XL model)"),wSo=l(),Mb=a("li"),Kge=a("strong"),ASo=o("trocr"),LSo=o(" \u2014 "),LO=a("a"),ySo=o("TrOCRForCausalLM"),xSo=o(" (TrOCR model)"),$So=l(),Eb=a("li"),Zge=a("strong"),kSo=o("xglm"),SSo=o(" \u2014 "),yO=a("a"),RSo=o("XGLMForCausalLM"),PSo=o(" (XGLM model)"),BSo=l(),Cb=a("li"),ehe=a("strong"),ISo=o("xlm"),NSo=o(" \u2014 "),xO=a("a"),qSo=o("XLMWithLMHeadModel"),jSo=o(" (XLM model)"),DSo=l(),wb=a("li"),ohe=a("strong"),GSo=o("xlm-prophetnet"),OSo=o(" \u2014 "),$O=a("a"),VSo=o("XLMProphetNetForCausalLM"),XSo=o(" (XLM-ProphetNet model)"),zSo=l(),Ab=a("li"),rhe=a("strong"),QSo=o("xlm-roberta"),WSo=o(" \u2014 "),kO=a("a"),HSo=o("XLMRobertaForCausalLM"),USo=o(" (XLM-RoBERTa model)"),JSo=l(),Lb=a("li"),the=a("strong"),YSo=o("xlm-roberta-xl"),KSo=o(" \u2014 "),SO=a("a"),ZSo=o("XLMRobertaXLForCausalLM"),eRo=o(" (XLM-RoBERTa-XL model)"),oRo=l(),yb=a("li"),ahe=a("strong"),rRo=o("xlnet"),tRo=o(" \u2014 "),RO=a("a"),aRo=o("XLNetLMHeadModel"),nRo=o(" (XLNet model)"),sRo=l(),xb=a("p"),lRo=o("The model is set in evaluation mode by default using "),nhe=a("code"),iRo=o("model.eval()"),dRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),she=a("code"),cRo=o("model.train()"),mRo=l(),F($b.$$.fragment),lXe=l(),Ui=a("h2"),kb=a("a"),lhe=a("span"),F(Vy.$$.fragment),fRo=l(),ihe=a("span"),gRo=o("AutoModelForMaskedLM"),iXe=l(),So=a("div"),F(Xy.$$.fragment),hRo=l(),Ji=a("p"),uRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PO=a("a"),pRo=o("from_pretrained()"),_Ro=o(" class method or the "),BO=a("a"),bRo=o("from_config()"),vRo=o(` class
method.`),FRo=l(),zy=a("p"),TRo=o("This class cannot be instantiated directly using "),dhe=a("code"),MRo=o("__init__()"),ERo=o(" (throws an error)."),CRo=l(),ct=a("div"),F(Qy.$$.fragment),wRo=l(),che=a("p"),ARo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),LRo=l(),Yi=a("p"),yRo=o(`Note:
Loading a model from its configuration file does `),mhe=a("strong"),xRo=o("not"),$Ro=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=a("a"),kRo=o("from_pretrained()"),SRo=o(" to load the model weights."),RRo=l(),F(Sb.$$.fragment),PRo=l(),Ze=a("div"),F(Wy.$$.fragment),BRo=l(),fhe=a("p"),IRo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),NRo=l(),ja=a("p"),qRo=o("The model class to instantiate is selected based on the "),ghe=a("code"),jRo=o("model_type"),DRo=o(` property of the config object (either
passed as an argument or loaded from `),hhe=a("code"),GRo=o("pretrained_model_name_or_path"),ORo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=a("code"),VRo=o("pretrained_model_name_or_path"),XRo=o(":"),zRo=l(),W=a("ul"),Rb=a("li"),phe=a("strong"),QRo=o("albert"),WRo=o(" \u2014 "),NO=a("a"),HRo=o("AlbertForMaskedLM"),URo=o(" (ALBERT model)"),JRo=l(),Pb=a("li"),_he=a("strong"),YRo=o("bart"),KRo=o(" \u2014 "),qO=a("a"),ZRo=o("BartForConditionalGeneration"),ePo=o(" (BART model)"),oPo=l(),Bb=a("li"),bhe=a("strong"),rPo=o("bert"),tPo=o(" \u2014 "),jO=a("a"),aPo=o("BertForMaskedLM"),nPo=o(" (BERT model)"),sPo=l(),Ib=a("li"),vhe=a("strong"),lPo=o("big_bird"),iPo=o(" \u2014 "),DO=a("a"),dPo=o("BigBirdForMaskedLM"),cPo=o(" (BigBird model)"),mPo=l(),Nb=a("li"),Fhe=a("strong"),fPo=o("camembert"),gPo=o(" \u2014 "),GO=a("a"),hPo=o("CamembertForMaskedLM"),uPo=o(" (CamemBERT model)"),pPo=l(),qb=a("li"),The=a("strong"),_Po=o("convbert"),bPo=o(" \u2014 "),OO=a("a"),vPo=o("ConvBertForMaskedLM"),FPo=o(" (ConvBERT model)"),TPo=l(),jb=a("li"),Mhe=a("strong"),MPo=o("data2vec-text"),EPo=o(" \u2014 "),VO=a("a"),CPo=o("Data2VecTextForMaskedLM"),wPo=o(" (Data2VecText model)"),APo=l(),Db=a("li"),Ehe=a("strong"),LPo=o("deberta"),yPo=o(" \u2014 "),XO=a("a"),xPo=o("DebertaForMaskedLM"),$Po=o(" (DeBERTa model)"),kPo=l(),Gb=a("li"),Che=a("strong"),SPo=o("deberta-v2"),RPo=o(" \u2014 "),zO=a("a"),PPo=o("DebertaV2ForMaskedLM"),BPo=o(" (DeBERTa-v2 model)"),IPo=l(),Ob=a("li"),whe=a("strong"),NPo=o("distilbert"),qPo=o(" \u2014 "),QO=a("a"),jPo=o("DistilBertForMaskedLM"),DPo=o(" (DistilBERT model)"),GPo=l(),Vb=a("li"),Ahe=a("strong"),OPo=o("electra"),VPo=o(" \u2014 "),WO=a("a"),XPo=o("ElectraForMaskedLM"),zPo=o(" (ELECTRA model)"),QPo=l(),Xb=a("li"),Lhe=a("strong"),WPo=o("flaubert"),HPo=o(" \u2014 "),HO=a("a"),UPo=o("FlaubertWithLMHeadModel"),JPo=o(" (FlauBERT model)"),YPo=l(),zb=a("li"),yhe=a("strong"),KPo=o("fnet"),ZPo=o(" \u2014 "),UO=a("a"),eBo=o("FNetForMaskedLM"),oBo=o(" (FNet model)"),rBo=l(),Qb=a("li"),xhe=a("strong"),tBo=o("funnel"),aBo=o(" \u2014 "),JO=a("a"),nBo=o("FunnelForMaskedLM"),sBo=o(" (Funnel Transformer model)"),lBo=l(),Wb=a("li"),$he=a("strong"),iBo=o("ibert"),dBo=o(" \u2014 "),YO=a("a"),cBo=o("IBertForMaskedLM"),mBo=o(" (I-BERT model)"),fBo=l(),Hb=a("li"),khe=a("strong"),gBo=o("layoutlm"),hBo=o(" \u2014 "),KO=a("a"),uBo=o("LayoutLMForMaskedLM"),pBo=o(" (LayoutLM model)"),_Bo=l(),Ub=a("li"),She=a("strong"),bBo=o("longformer"),vBo=o(" \u2014 "),ZO=a("a"),FBo=o("LongformerForMaskedLM"),TBo=o(" (Longformer model)"),MBo=l(),Jb=a("li"),Rhe=a("strong"),EBo=o("luke"),CBo=o(" \u2014 "),eV=a("a"),wBo=o("LukeForMaskedLM"),ABo=o(" (LUKE model)"),LBo=l(),Yb=a("li"),Phe=a("strong"),yBo=o("mbart"),xBo=o(" \u2014 "),oV=a("a"),$Bo=o("MBartForConditionalGeneration"),kBo=o(" (mBART model)"),SBo=l(),Kb=a("li"),Bhe=a("strong"),RBo=o("megatron-bert"),PBo=o(" \u2014 "),rV=a("a"),BBo=o("MegatronBertForMaskedLM"),IBo=o(" (Megatron-BERT model)"),NBo=l(),Zb=a("li"),Ihe=a("strong"),qBo=o("mobilebert"),jBo=o(" \u2014 "),tV=a("a"),DBo=o("MobileBertForMaskedLM"),GBo=o(" (MobileBERT model)"),OBo=l(),ev=a("li"),Nhe=a("strong"),VBo=o("mpnet"),XBo=o(" \u2014 "),aV=a("a"),zBo=o("MPNetForMaskedLM"),QBo=o(" (MPNet model)"),WBo=l(),ov=a("li"),qhe=a("strong"),HBo=o("mvp"),UBo=o(" \u2014 "),nV=a("a"),JBo=o("MvpForConditionalGeneration"),YBo=o(" (MVP model)"),KBo=l(),rv=a("li"),jhe=a("strong"),ZBo=o("nezha"),eIo=o(" \u2014 "),sV=a("a"),oIo=o("NezhaForMaskedLM"),rIo=o(" (Nezha model)"),tIo=l(),tv=a("li"),Dhe=a("strong"),aIo=o("nystromformer"),nIo=o(" \u2014 "),lV=a("a"),sIo=o("NystromformerForMaskedLM"),lIo=o(" (Nystr\xF6mformer model)"),iIo=l(),av=a("li"),Ghe=a("strong"),dIo=o("perceiver"),cIo=o(" \u2014 "),iV=a("a"),mIo=o("PerceiverForMaskedLM"),fIo=o(" (Perceiver model)"),gIo=l(),nv=a("li"),Ohe=a("strong"),hIo=o("qdqbert"),uIo=o(" \u2014 "),dV=a("a"),pIo=o("QDQBertForMaskedLM"),_Io=o(" (QDQBert model)"),bIo=l(),sv=a("li"),Vhe=a("strong"),vIo=o("reformer"),FIo=o(" \u2014 "),cV=a("a"),TIo=o("ReformerForMaskedLM"),MIo=o(" (Reformer model)"),EIo=l(),lv=a("li"),Xhe=a("strong"),CIo=o("rembert"),wIo=o(" \u2014 "),mV=a("a"),AIo=o("RemBertForMaskedLM"),LIo=o(" (RemBERT model)"),yIo=l(),iv=a("li"),zhe=a("strong"),xIo=o("roberta"),$Io=o(" \u2014 "),fV=a("a"),kIo=o("RobertaForMaskedLM"),SIo=o(" (RoBERTa model)"),RIo=l(),dv=a("li"),Qhe=a("strong"),PIo=o("roformer"),BIo=o(" \u2014 "),gV=a("a"),IIo=o("RoFormerForMaskedLM"),NIo=o(" (RoFormer model)"),qIo=l(),cv=a("li"),Whe=a("strong"),jIo=o("squeezebert"),DIo=o(" \u2014 "),hV=a("a"),GIo=o("SqueezeBertForMaskedLM"),OIo=o(" (SqueezeBERT model)"),VIo=l(),mv=a("li"),Hhe=a("strong"),XIo=o("tapas"),zIo=o(" \u2014 "),uV=a("a"),QIo=o("TapasForMaskedLM"),WIo=o(" (TAPAS model)"),HIo=l(),fv=a("li"),Uhe=a("strong"),UIo=o("wav2vec2"),JIo=o(" \u2014 "),Jhe=a("code"),YIo=o("Wav2Vec2ForMaskedLM"),KIo=o(" (Wav2Vec2 model)"),ZIo=l(),gv=a("li"),Yhe=a("strong"),eNo=o("xlm"),oNo=o(" \u2014 "),pV=a("a"),rNo=o("XLMWithLMHeadModel"),tNo=o(" (XLM model)"),aNo=l(),hv=a("li"),Khe=a("strong"),nNo=o("xlm-roberta"),sNo=o(" \u2014 "),_V=a("a"),lNo=o("XLMRobertaForMaskedLM"),iNo=o(" (XLM-RoBERTa model)"),dNo=l(),uv=a("li"),Zhe=a("strong"),cNo=o("xlm-roberta-xl"),mNo=o(" \u2014 "),bV=a("a"),fNo=o("XLMRobertaXLForMaskedLM"),gNo=o(" (XLM-RoBERTa-XL model)"),hNo=l(),pv=a("li"),eue=a("strong"),uNo=o("yoso"),pNo=o(" \u2014 "),vV=a("a"),_No=o("YosoForMaskedLM"),bNo=o(" (YOSO model)"),vNo=l(),_v=a("p"),FNo=o("The model is set in evaluation mode by default using "),oue=a("code"),TNo=o("model.eval()"),MNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rue=a("code"),ENo=o("model.train()"),CNo=l(),F(bv.$$.fragment),dXe=l(),Ki=a("h2"),vv=a("a"),tue=a("span"),F(Hy.$$.fragment),wNo=l(),aue=a("span"),ANo=o("AutoModelForSeq2SeqLM"),cXe=l(),Ro=a("div"),F(Uy.$$.fragment),LNo=l(),Zi=a("p"),yNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),FV=a("a"),xNo=o("from_pretrained()"),$No=o(" class method or the "),TV=a("a"),kNo=o("from_config()"),SNo=o(` class
method.`),RNo=l(),Jy=a("p"),PNo=o("This class cannot be instantiated directly using "),nue=a("code"),BNo=o("__init__()"),INo=o(" (throws an error)."),NNo=l(),mt=a("div"),F(Yy.$$.fragment),qNo=l(),sue=a("p"),jNo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),DNo=l(),ed=a("p"),GNo=o(`Note:
Loading a model from its configuration file does `),lue=a("strong"),ONo=o("not"),VNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=a("a"),XNo=o("from_pretrained()"),zNo=o(" to load the model weights."),QNo=l(),F(Fv.$$.fragment),WNo=l(),eo=a("div"),F(Ky.$$.fragment),HNo=l(),iue=a("p"),UNo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),JNo=l(),Da=a("p"),YNo=o("The model class to instantiate is selected based on the "),due=a("code"),KNo=o("model_type"),ZNo=o(` property of the config object (either
passed as an argument or loaded from `),cue=a("code"),eqo=o("pretrained_model_name_or_path"),oqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mue=a("code"),rqo=o("pretrained_model_name_or_path"),tqo=o(":"),aqo=l(),ue=a("ul"),Tv=a("li"),fue=a("strong"),nqo=o("bart"),sqo=o(" \u2014 "),EV=a("a"),lqo=o("BartForConditionalGeneration"),iqo=o(" (BART model)"),dqo=l(),Mv=a("li"),gue=a("strong"),cqo=o("bigbird_pegasus"),mqo=o(" \u2014 "),CV=a("a"),fqo=o("BigBirdPegasusForConditionalGeneration"),gqo=o(" (BigBird-Pegasus model)"),hqo=l(),Ev=a("li"),hue=a("strong"),uqo=o("blenderbot"),pqo=o(" \u2014 "),wV=a("a"),_qo=o("BlenderbotForConditionalGeneration"),bqo=o(" (Blenderbot model)"),vqo=l(),Cv=a("li"),uue=a("strong"),Fqo=o("blenderbot-small"),Tqo=o(" \u2014 "),AV=a("a"),Mqo=o("BlenderbotSmallForConditionalGeneration"),Eqo=o(" (BlenderbotSmall model)"),Cqo=l(),wv=a("li"),pue=a("strong"),wqo=o("encoder-decoder"),Aqo=o(" \u2014 "),LV=a("a"),Lqo=o("EncoderDecoderModel"),yqo=o(" (Encoder decoder model)"),xqo=l(),Av=a("li"),_ue=a("strong"),$qo=o("fsmt"),kqo=o(" \u2014 "),yV=a("a"),Sqo=o("FSMTForConditionalGeneration"),Rqo=o(" (FairSeq Machine-Translation model)"),Pqo=l(),Lv=a("li"),bue=a("strong"),Bqo=o("led"),Iqo=o(" \u2014 "),xV=a("a"),Nqo=o("LEDForConditionalGeneration"),qqo=o(" (LED model)"),jqo=l(),yv=a("li"),vue=a("strong"),Dqo=o("longt5"),Gqo=o(" \u2014 "),$V=a("a"),Oqo=o("LongT5ForConditionalGeneration"),Vqo=o(" (LongT5 model)"),Xqo=l(),xv=a("li"),Fue=a("strong"),zqo=o("m2m_100"),Qqo=o(" \u2014 "),kV=a("a"),Wqo=o("M2M100ForConditionalGeneration"),Hqo=o(" (M2M100 model)"),Uqo=l(),$v=a("li"),Tue=a("strong"),Jqo=o("marian"),Yqo=o(" \u2014 "),SV=a("a"),Kqo=o("MarianMTModel"),Zqo=o(" (Marian model)"),ejo=l(),kv=a("li"),Mue=a("strong"),ojo=o("mbart"),rjo=o(" \u2014 "),RV=a("a"),tjo=o("MBartForConditionalGeneration"),ajo=o(" (mBART model)"),njo=l(),Sv=a("li"),Eue=a("strong"),sjo=o("mt5"),ljo=o(" \u2014 "),PV=a("a"),ijo=o("MT5ForConditionalGeneration"),djo=o(" (MT5 model)"),cjo=l(),Rv=a("li"),Cue=a("strong"),mjo=o("mvp"),fjo=o(" \u2014 "),BV=a("a"),gjo=o("MvpForConditionalGeneration"),hjo=o(" (MVP model)"),ujo=l(),Pv=a("li"),wue=a("strong"),pjo=o("pegasus"),_jo=o(" \u2014 "),IV=a("a"),bjo=o("PegasusForConditionalGeneration"),vjo=o(" (Pegasus model)"),Fjo=l(),Bv=a("li"),Aue=a("strong"),Tjo=o("plbart"),Mjo=o(" \u2014 "),NV=a("a"),Ejo=o("PLBartForConditionalGeneration"),Cjo=o(" (PLBart model)"),wjo=l(),Iv=a("li"),Lue=a("strong"),Ajo=o("prophetnet"),Ljo=o(" \u2014 "),qV=a("a"),yjo=o("ProphetNetForConditionalGeneration"),xjo=o(" (ProphetNet model)"),$jo=l(),Nv=a("li"),yue=a("strong"),kjo=o("t5"),Sjo=o(" \u2014 "),jV=a("a"),Rjo=o("T5ForConditionalGeneration"),Pjo=o(" (T5 model)"),Bjo=l(),qv=a("li"),xue=a("strong"),Ijo=o("xlm-prophetnet"),Njo=o(" \u2014 "),DV=a("a"),qjo=o("XLMProphetNetForConditionalGeneration"),jjo=o(" (XLM-ProphetNet model)"),Djo=l(),jv=a("p"),Gjo=o("The model is set in evaluation mode by default using "),$ue=a("code"),Ojo=o("model.eval()"),Vjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kue=a("code"),Xjo=o("model.train()"),zjo=l(),F(Dv.$$.fragment),mXe=l(),od=a("h2"),Gv=a("a"),Sue=a("span"),F(Zy.$$.fragment),Qjo=l(),Rue=a("span"),Wjo=o("AutoModelForSequenceClassification"),fXe=l(),Po=a("div"),F(e8.$$.fragment),Hjo=l(),rd=a("p"),Ujo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GV=a("a"),Jjo=o("from_pretrained()"),Yjo=o(" class method or the "),OV=a("a"),Kjo=o("from_config()"),Zjo=o(` class
method.`),eDo=l(),o8=a("p"),oDo=o("This class cannot be instantiated directly using "),Pue=a("code"),rDo=o("__init__()"),tDo=o(" (throws an error)."),aDo=l(),ft=a("div"),F(r8.$$.fragment),nDo=l(),Bue=a("p"),sDo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lDo=l(),td=a("p"),iDo=o(`Note:
Loading a model from its configuration file does `),Iue=a("strong"),dDo=o("not"),cDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=a("a"),mDo=o("from_pretrained()"),fDo=o(" to load the model weights."),gDo=l(),F(Ov.$$.fragment),hDo=l(),oo=a("div"),F(t8.$$.fragment),uDo=l(),Nue=a("p"),pDo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_Do=l(),Ga=a("p"),bDo=o("The model class to instantiate is selected based on the "),que=a("code"),vDo=o("model_type"),FDo=o(` property of the config object (either
passed as an argument or loaded from `),jue=a("code"),TDo=o("pretrained_model_name_or_path"),MDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Due=a("code"),EDo=o("pretrained_model_name_or_path"),CDo=o(":"),wDo=l(),N=a("ul"),Vv=a("li"),Gue=a("strong"),ADo=o("albert"),LDo=o(" \u2014 "),XV=a("a"),yDo=o("AlbertForSequenceClassification"),xDo=o(" (ALBERT model)"),$Do=l(),Xv=a("li"),Oue=a("strong"),kDo=o("bart"),SDo=o(" \u2014 "),zV=a("a"),RDo=o("BartForSequenceClassification"),PDo=o(" (BART model)"),BDo=l(),zv=a("li"),Vue=a("strong"),IDo=o("bert"),NDo=o(" \u2014 "),QV=a("a"),qDo=o("BertForSequenceClassification"),jDo=o(" (BERT model)"),DDo=l(),Qv=a("li"),Xue=a("strong"),GDo=o("big_bird"),ODo=o(" \u2014 "),WV=a("a"),VDo=o("BigBirdForSequenceClassification"),XDo=o(" (BigBird model)"),zDo=l(),Wv=a("li"),zue=a("strong"),QDo=o("bigbird_pegasus"),WDo=o(" \u2014 "),HV=a("a"),HDo=o("BigBirdPegasusForSequenceClassification"),UDo=o(" (BigBird-Pegasus model)"),JDo=l(),Hv=a("li"),Que=a("strong"),YDo=o("bloom"),KDo=o(" \u2014 "),UV=a("a"),ZDo=o("BloomForSequenceClassification"),eGo=o(" (BLOOM model)"),oGo=l(),Uv=a("li"),Wue=a("strong"),rGo=o("camembert"),tGo=o(" \u2014 "),JV=a("a"),aGo=o("CamembertForSequenceClassification"),nGo=o(" (CamemBERT model)"),sGo=l(),Jv=a("li"),Hue=a("strong"),lGo=o("canine"),iGo=o(" \u2014 "),YV=a("a"),dGo=o("CanineForSequenceClassification"),cGo=o(" (CANINE model)"),mGo=l(),Yv=a("li"),Uue=a("strong"),fGo=o("convbert"),gGo=o(" \u2014 "),KV=a("a"),hGo=o("ConvBertForSequenceClassification"),uGo=o(" (ConvBERT model)"),pGo=l(),Kv=a("li"),Jue=a("strong"),_Go=o("ctrl"),bGo=o(" \u2014 "),ZV=a("a"),vGo=o("CTRLForSequenceClassification"),FGo=o(" (CTRL model)"),TGo=l(),Zv=a("li"),Yue=a("strong"),MGo=o("data2vec-text"),EGo=o(" \u2014 "),eX=a("a"),CGo=o("Data2VecTextForSequenceClassification"),wGo=o(" (Data2VecText model)"),AGo=l(),e1=a("li"),Kue=a("strong"),LGo=o("deberta"),yGo=o(" \u2014 "),oX=a("a"),xGo=o("DebertaForSequenceClassification"),$Go=o(" (DeBERTa model)"),kGo=l(),o1=a("li"),Zue=a("strong"),SGo=o("deberta-v2"),RGo=o(" \u2014 "),rX=a("a"),PGo=o("DebertaV2ForSequenceClassification"),BGo=o(" (DeBERTa-v2 model)"),IGo=l(),r1=a("li"),epe=a("strong"),NGo=o("distilbert"),qGo=o(" \u2014 "),tX=a("a"),jGo=o("DistilBertForSequenceClassification"),DGo=o(" (DistilBERT model)"),GGo=l(),t1=a("li"),ope=a("strong"),OGo=o("electra"),VGo=o(" \u2014 "),aX=a("a"),XGo=o("ElectraForSequenceClassification"),zGo=o(" (ELECTRA model)"),QGo=l(),a1=a("li"),rpe=a("strong"),WGo=o("flaubert"),HGo=o(" \u2014 "),nX=a("a"),UGo=o("FlaubertForSequenceClassification"),JGo=o(" (FlauBERT model)"),YGo=l(),n1=a("li"),tpe=a("strong"),KGo=o("fnet"),ZGo=o(" \u2014 "),sX=a("a"),eOo=o("FNetForSequenceClassification"),oOo=o(" (FNet model)"),rOo=l(),s1=a("li"),ape=a("strong"),tOo=o("funnel"),aOo=o(" \u2014 "),lX=a("a"),nOo=o("FunnelForSequenceClassification"),sOo=o(" (Funnel Transformer model)"),lOo=l(),l1=a("li"),npe=a("strong"),iOo=o("gpt2"),dOo=o(" \u2014 "),iX=a("a"),cOo=o("GPT2ForSequenceClassification"),mOo=o(" (OpenAI GPT-2 model)"),fOo=l(),i1=a("li"),spe=a("strong"),gOo=o("gpt_neo"),hOo=o(" \u2014 "),dX=a("a"),uOo=o("GPTNeoForSequenceClassification"),pOo=o(" (GPT Neo model)"),_Oo=l(),d1=a("li"),lpe=a("strong"),bOo=o("gptj"),vOo=o(" \u2014 "),cX=a("a"),FOo=o("GPTJForSequenceClassification"),TOo=o(" (GPT-J model)"),MOo=l(),c1=a("li"),ipe=a("strong"),EOo=o("ibert"),COo=o(" \u2014 "),mX=a("a"),wOo=o("IBertForSequenceClassification"),AOo=o(" (I-BERT model)"),LOo=l(),m1=a("li"),dpe=a("strong"),yOo=o("layoutlm"),xOo=o(" \u2014 "),fX=a("a"),$Oo=o("LayoutLMForSequenceClassification"),kOo=o(" (LayoutLM model)"),SOo=l(),f1=a("li"),cpe=a("strong"),ROo=o("layoutlmv2"),POo=o(" \u2014 "),gX=a("a"),BOo=o("LayoutLMv2ForSequenceClassification"),IOo=o(" (LayoutLMv2 model)"),NOo=l(),g1=a("li"),mpe=a("strong"),qOo=o("layoutlmv3"),jOo=o(" \u2014 "),hX=a("a"),DOo=o("LayoutLMv3ForSequenceClassification"),GOo=o(" (LayoutLMv3 model)"),OOo=l(),h1=a("li"),fpe=a("strong"),VOo=o("led"),XOo=o(" \u2014 "),uX=a("a"),zOo=o("LEDForSequenceClassification"),QOo=o(" (LED model)"),WOo=l(),u1=a("li"),gpe=a("strong"),HOo=o("longformer"),UOo=o(" \u2014 "),pX=a("a"),JOo=o("LongformerForSequenceClassification"),YOo=o(" (Longformer model)"),KOo=l(),p1=a("li"),hpe=a("strong"),ZOo=o("mbart"),eVo=o(" \u2014 "),_X=a("a"),oVo=o("MBartForSequenceClassification"),rVo=o(" (mBART model)"),tVo=l(),_1=a("li"),upe=a("strong"),aVo=o("megatron-bert"),nVo=o(" \u2014 "),bX=a("a"),sVo=o("MegatronBertForSequenceClassification"),lVo=o(" (Megatron-BERT model)"),iVo=l(),b1=a("li"),ppe=a("strong"),dVo=o("mobilebert"),cVo=o(" \u2014 "),vX=a("a"),mVo=o("MobileBertForSequenceClassification"),fVo=o(" (MobileBERT model)"),gVo=l(),v1=a("li"),_pe=a("strong"),hVo=o("mpnet"),uVo=o(" \u2014 "),FX=a("a"),pVo=o("MPNetForSequenceClassification"),_Vo=o(" (MPNet model)"),bVo=l(),F1=a("li"),bpe=a("strong"),vVo=o("mvp"),FVo=o(" \u2014 "),TX=a("a"),TVo=o("MvpForSequenceClassification"),MVo=o(" (MVP model)"),EVo=l(),T1=a("li"),vpe=a("strong"),CVo=o("nezha"),wVo=o(" \u2014 "),MX=a("a"),AVo=o("NezhaForSequenceClassification"),LVo=o(" (Nezha model)"),yVo=l(),M1=a("li"),Fpe=a("strong"),xVo=o("nystromformer"),$Vo=o(" \u2014 "),EX=a("a"),kVo=o("NystromformerForSequenceClassification"),SVo=o(" (Nystr\xF6mformer model)"),RVo=l(),E1=a("li"),Tpe=a("strong"),PVo=o("openai-gpt"),BVo=o(" \u2014 "),CX=a("a"),IVo=o("OpenAIGPTForSequenceClassification"),NVo=o(" (OpenAI GPT model)"),qVo=l(),C1=a("li"),Mpe=a("strong"),jVo=o("perceiver"),DVo=o(" \u2014 "),wX=a("a"),GVo=o("PerceiverForSequenceClassification"),OVo=o(" (Perceiver model)"),VVo=l(),w1=a("li"),Epe=a("strong"),XVo=o("plbart"),zVo=o(" \u2014 "),AX=a("a"),QVo=o("PLBartForSequenceClassification"),WVo=o(" (PLBart model)"),HVo=l(),A1=a("li"),Cpe=a("strong"),UVo=o("qdqbert"),JVo=o(" \u2014 "),LX=a("a"),YVo=o("QDQBertForSequenceClassification"),KVo=o(" (QDQBert model)"),ZVo=l(),L1=a("li"),wpe=a("strong"),eXo=o("reformer"),oXo=o(" \u2014 "),yX=a("a"),rXo=o("ReformerForSequenceClassification"),tXo=o(" (Reformer model)"),aXo=l(),y1=a("li"),Ape=a("strong"),nXo=o("rembert"),sXo=o(" \u2014 "),xX=a("a"),lXo=o("RemBertForSequenceClassification"),iXo=o(" (RemBERT model)"),dXo=l(),x1=a("li"),Lpe=a("strong"),cXo=o("roberta"),mXo=o(" \u2014 "),$X=a("a"),fXo=o("RobertaForSequenceClassification"),gXo=o(" (RoBERTa model)"),hXo=l(),$1=a("li"),ype=a("strong"),uXo=o("roformer"),pXo=o(" \u2014 "),kX=a("a"),_Xo=o("RoFormerForSequenceClassification"),bXo=o(" (RoFormer model)"),vXo=l(),k1=a("li"),xpe=a("strong"),FXo=o("squeezebert"),TXo=o(" \u2014 "),SX=a("a"),MXo=o("SqueezeBertForSequenceClassification"),EXo=o(" (SqueezeBERT model)"),CXo=l(),S1=a("li"),$pe=a("strong"),wXo=o("tapas"),AXo=o(" \u2014 "),RX=a("a"),LXo=o("TapasForSequenceClassification"),yXo=o(" (TAPAS model)"),xXo=l(),R1=a("li"),kpe=a("strong"),$Xo=o("transfo-xl"),kXo=o(" \u2014 "),PX=a("a"),SXo=o("TransfoXLForSequenceClassification"),RXo=o(" (Transformer-XL model)"),PXo=l(),P1=a("li"),Spe=a("strong"),BXo=o("xlm"),IXo=o(" \u2014 "),BX=a("a"),NXo=o("XLMForSequenceClassification"),qXo=o(" (XLM model)"),jXo=l(),B1=a("li"),Rpe=a("strong"),DXo=o("xlm-roberta"),GXo=o(" \u2014 "),IX=a("a"),OXo=o("XLMRobertaForSequenceClassification"),VXo=o(" (XLM-RoBERTa model)"),XXo=l(),I1=a("li"),Ppe=a("strong"),zXo=o("xlm-roberta-xl"),QXo=o(" \u2014 "),NX=a("a"),WXo=o("XLMRobertaXLForSequenceClassification"),HXo=o(" (XLM-RoBERTa-XL model)"),UXo=l(),N1=a("li"),Bpe=a("strong"),JXo=o("xlnet"),YXo=o(" \u2014 "),qX=a("a"),KXo=o("XLNetForSequenceClassification"),ZXo=o(" (XLNet model)"),ezo=l(),q1=a("li"),Ipe=a("strong"),ozo=o("yoso"),rzo=o(" \u2014 "),jX=a("a"),tzo=o("YosoForSequenceClassification"),azo=o(" (YOSO model)"),nzo=l(),j1=a("p"),szo=o("The model is set in evaluation mode by default using "),Npe=a("code"),lzo=o("model.eval()"),izo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qpe=a("code"),dzo=o("model.train()"),czo=l(),F(D1.$$.fragment),gXe=l(),ad=a("h2"),G1=a("a"),jpe=a("span"),F(a8.$$.fragment),mzo=l(),Dpe=a("span"),fzo=o("AutoModelForMultipleChoice"),hXe=l(),Bo=a("div"),F(n8.$$.fragment),gzo=l(),nd=a("p"),hzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),DX=a("a"),uzo=o("from_pretrained()"),pzo=o(" class method or the "),GX=a("a"),_zo=o("from_config()"),bzo=o(` class
method.`),vzo=l(),s8=a("p"),Fzo=o("This class cannot be instantiated directly using "),Gpe=a("code"),Tzo=o("__init__()"),Mzo=o(" (throws an error)."),Ezo=l(),gt=a("div"),F(l8.$$.fragment),Czo=l(),Ope=a("p"),wzo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Azo=l(),sd=a("p"),Lzo=o(`Note:
Loading a model from its configuration file does `),Vpe=a("strong"),yzo=o("not"),xzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=a("a"),$zo=o("from_pretrained()"),kzo=o(" to load the model weights."),Szo=l(),F(O1.$$.fragment),Rzo=l(),ro=a("div"),F(i8.$$.fragment),Pzo=l(),Xpe=a("p"),Bzo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Izo=l(),Oa=a("p"),Nzo=o("The model class to instantiate is selected based on the "),zpe=a("code"),qzo=o("model_type"),jzo=o(` property of the config object (either
passed as an argument or loaded from `),Qpe=a("code"),Dzo=o("pretrained_model_name_or_path"),Gzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=a("code"),Ozo=o("pretrained_model_name_or_path"),Vzo=o(":"),Xzo=l(),Z=a("ul"),V1=a("li"),Hpe=a("strong"),zzo=o("albert"),Qzo=o(" \u2014 "),VX=a("a"),Wzo=o("AlbertForMultipleChoice"),Hzo=o(" (ALBERT model)"),Uzo=l(),X1=a("li"),Upe=a("strong"),Jzo=o("bert"),Yzo=o(" \u2014 "),XX=a("a"),Kzo=o("BertForMultipleChoice"),Zzo=o(" (BERT model)"),eQo=l(),z1=a("li"),Jpe=a("strong"),oQo=o("big_bird"),rQo=o(" \u2014 "),zX=a("a"),tQo=o("BigBirdForMultipleChoice"),aQo=o(" (BigBird model)"),nQo=l(),Q1=a("li"),Ype=a("strong"),sQo=o("camembert"),lQo=o(" \u2014 "),QX=a("a"),iQo=o("CamembertForMultipleChoice"),dQo=o(" (CamemBERT model)"),cQo=l(),W1=a("li"),Kpe=a("strong"),mQo=o("canine"),fQo=o(" \u2014 "),WX=a("a"),gQo=o("CanineForMultipleChoice"),hQo=o(" (CANINE model)"),uQo=l(),H1=a("li"),Zpe=a("strong"),pQo=o("convbert"),_Qo=o(" \u2014 "),HX=a("a"),bQo=o("ConvBertForMultipleChoice"),vQo=o(" (ConvBERT model)"),FQo=l(),U1=a("li"),e_e=a("strong"),TQo=o("data2vec-text"),MQo=o(" \u2014 "),UX=a("a"),EQo=o("Data2VecTextForMultipleChoice"),CQo=o(" (Data2VecText model)"),wQo=l(),J1=a("li"),o_e=a("strong"),AQo=o("deberta-v2"),LQo=o(" \u2014 "),JX=a("a"),yQo=o("DebertaV2ForMultipleChoice"),xQo=o(" (DeBERTa-v2 model)"),$Qo=l(),Y1=a("li"),r_e=a("strong"),kQo=o("distilbert"),SQo=o(" \u2014 "),YX=a("a"),RQo=o("DistilBertForMultipleChoice"),PQo=o(" (DistilBERT model)"),BQo=l(),K1=a("li"),t_e=a("strong"),IQo=o("electra"),NQo=o(" \u2014 "),KX=a("a"),qQo=o("ElectraForMultipleChoice"),jQo=o(" (ELECTRA model)"),DQo=l(),Z1=a("li"),a_e=a("strong"),GQo=o("flaubert"),OQo=o(" \u2014 "),ZX=a("a"),VQo=o("FlaubertForMultipleChoice"),XQo=o(" (FlauBERT model)"),zQo=l(),eF=a("li"),n_e=a("strong"),QQo=o("fnet"),WQo=o(" \u2014 "),ez=a("a"),HQo=o("FNetForMultipleChoice"),UQo=o(" (FNet model)"),JQo=l(),oF=a("li"),s_e=a("strong"),YQo=o("funnel"),KQo=o(" \u2014 "),oz=a("a"),ZQo=o("FunnelForMultipleChoice"),eWo=o(" (Funnel Transformer model)"),oWo=l(),rF=a("li"),l_e=a("strong"),rWo=o("ibert"),tWo=o(" \u2014 "),rz=a("a"),aWo=o("IBertForMultipleChoice"),nWo=o(" (I-BERT model)"),sWo=l(),tF=a("li"),i_e=a("strong"),lWo=o("longformer"),iWo=o(" \u2014 "),tz=a("a"),dWo=o("LongformerForMultipleChoice"),cWo=o(" (Longformer model)"),mWo=l(),aF=a("li"),d_e=a("strong"),fWo=o("megatron-bert"),gWo=o(" \u2014 "),az=a("a"),hWo=o("MegatronBertForMultipleChoice"),uWo=o(" (Megatron-BERT model)"),pWo=l(),nF=a("li"),c_e=a("strong"),_Wo=o("mobilebert"),bWo=o(" \u2014 "),nz=a("a"),vWo=o("MobileBertForMultipleChoice"),FWo=o(" (MobileBERT model)"),TWo=l(),sF=a("li"),m_e=a("strong"),MWo=o("mpnet"),EWo=o(" \u2014 "),sz=a("a"),CWo=o("MPNetForMultipleChoice"),wWo=o(" (MPNet model)"),AWo=l(),lF=a("li"),f_e=a("strong"),LWo=o("nezha"),yWo=o(" \u2014 "),lz=a("a"),xWo=o("NezhaForMultipleChoice"),$Wo=o(" (Nezha model)"),kWo=l(),iF=a("li"),g_e=a("strong"),SWo=o("nystromformer"),RWo=o(" \u2014 "),iz=a("a"),PWo=o("NystromformerForMultipleChoice"),BWo=o(" (Nystr\xF6mformer model)"),IWo=l(),dF=a("li"),h_e=a("strong"),NWo=o("qdqbert"),qWo=o(" \u2014 "),dz=a("a"),jWo=o("QDQBertForMultipleChoice"),DWo=o(" (QDQBert model)"),GWo=l(),cF=a("li"),u_e=a("strong"),OWo=o("rembert"),VWo=o(" \u2014 "),cz=a("a"),XWo=o("RemBertForMultipleChoice"),zWo=o(" (RemBERT model)"),QWo=l(),mF=a("li"),p_e=a("strong"),WWo=o("roberta"),HWo=o(" \u2014 "),mz=a("a"),UWo=o("RobertaForMultipleChoice"),JWo=o(" (RoBERTa model)"),YWo=l(),fF=a("li"),__e=a("strong"),KWo=o("roformer"),ZWo=o(" \u2014 "),fz=a("a"),eHo=o("RoFormerForMultipleChoice"),oHo=o(" (RoFormer model)"),rHo=l(),gF=a("li"),b_e=a("strong"),tHo=o("squeezebert"),aHo=o(" \u2014 "),gz=a("a"),nHo=o("SqueezeBertForMultipleChoice"),sHo=o(" (SqueezeBERT model)"),lHo=l(),hF=a("li"),v_e=a("strong"),iHo=o("xlm"),dHo=o(" \u2014 "),hz=a("a"),cHo=o("XLMForMultipleChoice"),mHo=o(" (XLM model)"),fHo=l(),uF=a("li"),F_e=a("strong"),gHo=o("xlm-roberta"),hHo=o(" \u2014 "),uz=a("a"),uHo=o("XLMRobertaForMultipleChoice"),pHo=o(" (XLM-RoBERTa model)"),_Ho=l(),pF=a("li"),T_e=a("strong"),bHo=o("xlm-roberta-xl"),vHo=o(" \u2014 "),pz=a("a"),FHo=o("XLMRobertaXLForMultipleChoice"),THo=o(" (XLM-RoBERTa-XL model)"),MHo=l(),_F=a("li"),M_e=a("strong"),EHo=o("xlnet"),CHo=o(" \u2014 "),_z=a("a"),wHo=o("XLNetForMultipleChoice"),AHo=o(" (XLNet model)"),LHo=l(),bF=a("li"),E_e=a("strong"),yHo=o("yoso"),xHo=o(" \u2014 "),bz=a("a"),$Ho=o("YosoForMultipleChoice"),kHo=o(" (YOSO model)"),SHo=l(),vF=a("p"),RHo=o("The model is set in evaluation mode by default using "),C_e=a("code"),PHo=o("model.eval()"),BHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w_e=a("code"),IHo=o("model.train()"),NHo=l(),F(FF.$$.fragment),uXe=l(),ld=a("h2"),TF=a("a"),A_e=a("span"),F(d8.$$.fragment),qHo=l(),L_e=a("span"),jHo=o("AutoModelForNextSentencePrediction"),pXe=l(),Io=a("div"),F(c8.$$.fragment),DHo=l(),id=a("p"),GHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vz=a("a"),OHo=o("from_pretrained()"),VHo=o(" class method or the "),Fz=a("a"),XHo=o("from_config()"),zHo=o(` class
method.`),QHo=l(),m8=a("p"),WHo=o("This class cannot be instantiated directly using "),y_e=a("code"),HHo=o("__init__()"),UHo=o(" (throws an error)."),JHo=l(),ht=a("div"),F(f8.$$.fragment),YHo=l(),x_e=a("p"),KHo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ZHo=l(),dd=a("p"),eUo=o(`Note:
Loading a model from its configuration file does `),$_e=a("strong"),oUo=o("not"),rUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=a("a"),tUo=o("from_pretrained()"),aUo=o(" to load the model weights."),nUo=l(),F(MF.$$.fragment),sUo=l(),to=a("div"),F(g8.$$.fragment),lUo=l(),k_e=a("p"),iUo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dUo=l(),Va=a("p"),cUo=o("The model class to instantiate is selected based on the "),S_e=a("code"),mUo=o("model_type"),fUo=o(` property of the config object (either
passed as an argument or loaded from `),R_e=a("code"),gUo=o("pretrained_model_name_or_path"),hUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P_e=a("code"),uUo=o("pretrained_model_name_or_path"),pUo=o(":"),_Uo=l(),No=a("ul"),EF=a("li"),B_e=a("strong"),bUo=o("bert"),vUo=o(" \u2014 "),Mz=a("a"),FUo=o("BertForNextSentencePrediction"),TUo=o(" (BERT model)"),MUo=l(),CF=a("li"),I_e=a("strong"),EUo=o("fnet"),CUo=o(" \u2014 "),Ez=a("a"),wUo=o("FNetForNextSentencePrediction"),AUo=o(" (FNet model)"),LUo=l(),wF=a("li"),N_e=a("strong"),yUo=o("megatron-bert"),xUo=o(" \u2014 "),Cz=a("a"),$Uo=o("MegatronBertForNextSentencePrediction"),kUo=o(" (Megatron-BERT model)"),SUo=l(),AF=a("li"),q_e=a("strong"),RUo=o("mobilebert"),PUo=o(" \u2014 "),wz=a("a"),BUo=o("MobileBertForNextSentencePrediction"),IUo=o(" (MobileBERT model)"),NUo=l(),LF=a("li"),j_e=a("strong"),qUo=o("nezha"),jUo=o(" \u2014 "),Az=a("a"),DUo=o("NezhaForNextSentencePrediction"),GUo=o(" (Nezha model)"),OUo=l(),yF=a("li"),D_e=a("strong"),VUo=o("qdqbert"),XUo=o(" \u2014 "),Lz=a("a"),zUo=o("QDQBertForNextSentencePrediction"),QUo=o(" (QDQBert model)"),WUo=l(),xF=a("p"),HUo=o("The model is set in evaluation mode by default using "),G_e=a("code"),UUo=o("model.eval()"),JUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O_e=a("code"),YUo=o("model.train()"),KUo=l(),F($F.$$.fragment),_Xe=l(),cd=a("h2"),kF=a("a"),V_e=a("span"),F(h8.$$.fragment),ZUo=l(),X_e=a("span"),eJo=o("AutoModelForTokenClassification"),bXe=l(),qo=a("div"),F(u8.$$.fragment),oJo=l(),md=a("p"),rJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yz=a("a"),tJo=o("from_pretrained()"),aJo=o(" class method or the "),xz=a("a"),nJo=o("from_config()"),sJo=o(` class
method.`),lJo=l(),p8=a("p"),iJo=o("This class cannot be instantiated directly using "),z_e=a("code"),dJo=o("__init__()"),cJo=o(" (throws an error)."),mJo=l(),ut=a("div"),F(_8.$$.fragment),fJo=l(),Q_e=a("p"),gJo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hJo=l(),fd=a("p"),uJo=o(`Note:
Loading a model from its configuration file does `),W_e=a("strong"),pJo=o("not"),_Jo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=a("a"),bJo=o("from_pretrained()"),vJo=o(" to load the model weights."),FJo=l(),F(SF.$$.fragment),TJo=l(),ao=a("div"),F(b8.$$.fragment),MJo=l(),H_e=a("p"),EJo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),CJo=l(),Xa=a("p"),wJo=o("The model class to instantiate is selected based on the "),U_e=a("code"),AJo=o("model_type"),LJo=o(` property of the config object (either
passed as an argument or loaded from `),J_e=a("code"),yJo=o("pretrained_model_name_or_path"),xJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=a("code"),$Jo=o("pretrained_model_name_or_path"),kJo=o(":"),SJo=l(),U=a("ul"),RF=a("li"),K_e=a("strong"),RJo=o("albert"),PJo=o(" \u2014 "),kz=a("a"),BJo=o("AlbertForTokenClassification"),IJo=o(" (ALBERT model)"),NJo=l(),PF=a("li"),Z_e=a("strong"),qJo=o("bert"),jJo=o(" \u2014 "),Sz=a("a"),DJo=o("BertForTokenClassification"),GJo=o(" (BERT model)"),OJo=l(),BF=a("li"),e2e=a("strong"),VJo=o("big_bird"),XJo=o(" \u2014 "),Rz=a("a"),zJo=o("BigBirdForTokenClassification"),QJo=o(" (BigBird model)"),WJo=l(),IF=a("li"),o2e=a("strong"),HJo=o("bloom"),UJo=o(" \u2014 "),Pz=a("a"),JJo=o("BloomForTokenClassification"),YJo=o(" (BLOOM model)"),KJo=l(),NF=a("li"),r2e=a("strong"),ZJo=o("camembert"),eYo=o(" \u2014 "),Bz=a("a"),oYo=o("CamembertForTokenClassification"),rYo=o(" (CamemBERT model)"),tYo=l(),qF=a("li"),t2e=a("strong"),aYo=o("canine"),nYo=o(" \u2014 "),Iz=a("a"),sYo=o("CanineForTokenClassification"),lYo=o(" (CANINE model)"),iYo=l(),jF=a("li"),a2e=a("strong"),dYo=o("convbert"),cYo=o(" \u2014 "),Nz=a("a"),mYo=o("ConvBertForTokenClassification"),fYo=o(" (ConvBERT model)"),gYo=l(),DF=a("li"),n2e=a("strong"),hYo=o("data2vec-text"),uYo=o(" \u2014 "),qz=a("a"),pYo=o("Data2VecTextForTokenClassification"),_Yo=o(" (Data2VecText model)"),bYo=l(),GF=a("li"),s2e=a("strong"),vYo=o("deberta"),FYo=o(" \u2014 "),jz=a("a"),TYo=o("DebertaForTokenClassification"),MYo=o(" (DeBERTa model)"),EYo=l(),OF=a("li"),l2e=a("strong"),CYo=o("deberta-v2"),wYo=o(" \u2014 "),Dz=a("a"),AYo=o("DebertaV2ForTokenClassification"),LYo=o(" (DeBERTa-v2 model)"),yYo=l(),VF=a("li"),i2e=a("strong"),xYo=o("distilbert"),$Yo=o(" \u2014 "),Gz=a("a"),kYo=o("DistilBertForTokenClassification"),SYo=o(" (DistilBERT model)"),RYo=l(),XF=a("li"),d2e=a("strong"),PYo=o("electra"),BYo=o(" \u2014 "),Oz=a("a"),IYo=o("ElectraForTokenClassification"),NYo=o(" (ELECTRA model)"),qYo=l(),zF=a("li"),c2e=a("strong"),jYo=o("flaubert"),DYo=o(" \u2014 "),Vz=a("a"),GYo=o("FlaubertForTokenClassification"),OYo=o(" (FlauBERT model)"),VYo=l(),QF=a("li"),m2e=a("strong"),XYo=o("fnet"),zYo=o(" \u2014 "),Xz=a("a"),QYo=o("FNetForTokenClassification"),WYo=o(" (FNet model)"),HYo=l(),WF=a("li"),f2e=a("strong"),UYo=o("funnel"),JYo=o(" \u2014 "),zz=a("a"),YYo=o("FunnelForTokenClassification"),KYo=o(" (Funnel Transformer model)"),ZYo=l(),HF=a("li"),g2e=a("strong"),eKo=o("gpt2"),oKo=o(" \u2014 "),Qz=a("a"),rKo=o("GPT2ForTokenClassification"),tKo=o(" (OpenAI GPT-2 model)"),aKo=l(),UF=a("li"),h2e=a("strong"),nKo=o("ibert"),sKo=o(" \u2014 "),Wz=a("a"),lKo=o("IBertForTokenClassification"),iKo=o(" (I-BERT model)"),dKo=l(),JF=a("li"),u2e=a("strong"),cKo=o("layoutlm"),mKo=o(" \u2014 "),Hz=a("a"),fKo=o("LayoutLMForTokenClassification"),gKo=o(" (LayoutLM model)"),hKo=l(),YF=a("li"),p2e=a("strong"),uKo=o("layoutlmv2"),pKo=o(" \u2014 "),Uz=a("a"),_Ko=o("LayoutLMv2ForTokenClassification"),bKo=o(" (LayoutLMv2 model)"),vKo=l(),KF=a("li"),_2e=a("strong"),FKo=o("layoutlmv3"),TKo=o(" \u2014 "),Jz=a("a"),MKo=o("LayoutLMv3ForTokenClassification"),EKo=o(" (LayoutLMv3 model)"),CKo=l(),ZF=a("li"),b2e=a("strong"),wKo=o("longformer"),AKo=o(" \u2014 "),Yz=a("a"),LKo=o("LongformerForTokenClassification"),yKo=o(" (Longformer model)"),xKo=l(),eT=a("li"),v2e=a("strong"),$Ko=o("megatron-bert"),kKo=o(" \u2014 "),Kz=a("a"),SKo=o("MegatronBertForTokenClassification"),RKo=o(" (Megatron-BERT model)"),PKo=l(),oT=a("li"),F2e=a("strong"),BKo=o("mobilebert"),IKo=o(" \u2014 "),Zz=a("a"),NKo=o("MobileBertForTokenClassification"),qKo=o(" (MobileBERT model)"),jKo=l(),rT=a("li"),T2e=a("strong"),DKo=o("mpnet"),GKo=o(" \u2014 "),eQ=a("a"),OKo=o("MPNetForTokenClassification"),VKo=o(" (MPNet model)"),XKo=l(),tT=a("li"),M2e=a("strong"),zKo=o("nezha"),QKo=o(" \u2014 "),oQ=a("a"),WKo=o("NezhaForTokenClassification"),HKo=o(" (Nezha model)"),UKo=l(),aT=a("li"),E2e=a("strong"),JKo=o("nystromformer"),YKo=o(" \u2014 "),rQ=a("a"),KKo=o("NystromformerForTokenClassification"),ZKo=o(" (Nystr\xF6mformer model)"),eZo=l(),nT=a("li"),C2e=a("strong"),oZo=o("qdqbert"),rZo=o(" \u2014 "),tQ=a("a"),tZo=o("QDQBertForTokenClassification"),aZo=o(" (QDQBert model)"),nZo=l(),sT=a("li"),w2e=a("strong"),sZo=o("rembert"),lZo=o(" \u2014 "),aQ=a("a"),iZo=o("RemBertForTokenClassification"),dZo=o(" (RemBERT model)"),cZo=l(),lT=a("li"),A2e=a("strong"),mZo=o("roberta"),fZo=o(" \u2014 "),nQ=a("a"),gZo=o("RobertaForTokenClassification"),hZo=o(" (RoBERTa model)"),uZo=l(),iT=a("li"),L2e=a("strong"),pZo=o("roformer"),_Zo=o(" \u2014 "),sQ=a("a"),bZo=o("RoFormerForTokenClassification"),vZo=o(" (RoFormer model)"),FZo=l(),dT=a("li"),y2e=a("strong"),TZo=o("squeezebert"),MZo=o(" \u2014 "),lQ=a("a"),EZo=o("SqueezeBertForTokenClassification"),CZo=o(" (SqueezeBERT model)"),wZo=l(),cT=a("li"),x2e=a("strong"),AZo=o("xlm"),LZo=o(" \u2014 "),iQ=a("a"),yZo=o("XLMForTokenClassification"),xZo=o(" (XLM model)"),$Zo=l(),mT=a("li"),$2e=a("strong"),kZo=o("xlm-roberta"),SZo=o(" \u2014 "),dQ=a("a"),RZo=o("XLMRobertaForTokenClassification"),PZo=o(" (XLM-RoBERTa model)"),BZo=l(),fT=a("li"),k2e=a("strong"),IZo=o("xlm-roberta-xl"),NZo=o(" \u2014 "),cQ=a("a"),qZo=o("XLMRobertaXLForTokenClassification"),jZo=o(" (XLM-RoBERTa-XL model)"),DZo=l(),gT=a("li"),S2e=a("strong"),GZo=o("xlnet"),OZo=o(" \u2014 "),mQ=a("a"),VZo=o("XLNetForTokenClassification"),XZo=o(" (XLNet model)"),zZo=l(),hT=a("li"),R2e=a("strong"),QZo=o("yoso"),WZo=o(" \u2014 "),fQ=a("a"),HZo=o("YosoForTokenClassification"),UZo=o(" (YOSO model)"),JZo=l(),uT=a("p"),YZo=o("The model is set in evaluation mode by default using "),P2e=a("code"),KZo=o("model.eval()"),ZZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B2e=a("code"),eer=o("model.train()"),oer=l(),F(pT.$$.fragment),vXe=l(),gd=a("h2"),_T=a("a"),I2e=a("span"),F(v8.$$.fragment),rer=l(),N2e=a("span"),ter=o("AutoModelForQuestionAnswering"),FXe=l(),jo=a("div"),F(F8.$$.fragment),aer=l(),hd=a("p"),ner=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gQ=a("a"),ser=o("from_pretrained()"),ler=o(" class method or the "),hQ=a("a"),ier=o("from_config()"),der=o(` class
method.`),cer=l(),T8=a("p"),mer=o("This class cannot be instantiated directly using "),q2e=a("code"),fer=o("__init__()"),ger=o(" (throws an error)."),her=l(),pt=a("div"),F(M8.$$.fragment),uer=l(),j2e=a("p"),per=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_er=l(),ud=a("p"),ber=o(`Note:
Loading a model from its configuration file does `),D2e=a("strong"),ver=o("not"),Fer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=a("a"),Ter=o("from_pretrained()"),Mer=o(" to load the model weights."),Eer=l(),F(bT.$$.fragment),Cer=l(),no=a("div"),F(E8.$$.fragment),wer=l(),G2e=a("p"),Aer=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ler=l(),za=a("p"),yer=o("The model class to instantiate is selected based on the "),O2e=a("code"),xer=o("model_type"),$er=o(` property of the config object (either
passed as an argument or loaded from `),V2e=a("code"),ker=o("pretrained_model_name_or_path"),Ser=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=a("code"),Rer=o("pretrained_model_name_or_path"),Per=o(":"),Ber=l(),V=a("ul"),vT=a("li"),z2e=a("strong"),Ier=o("albert"),Ner=o(" \u2014 "),pQ=a("a"),qer=o("AlbertForQuestionAnswering"),jer=o(" (ALBERT model)"),Der=l(),FT=a("li"),Q2e=a("strong"),Ger=o("bart"),Oer=o(" \u2014 "),_Q=a("a"),Ver=o("BartForQuestionAnswering"),Xer=o(" (BART model)"),zer=l(),TT=a("li"),W2e=a("strong"),Qer=o("bert"),Wer=o(" \u2014 "),bQ=a("a"),Her=o("BertForQuestionAnswering"),Uer=o(" (BERT model)"),Jer=l(),MT=a("li"),H2e=a("strong"),Yer=o("big_bird"),Ker=o(" \u2014 "),vQ=a("a"),Zer=o("BigBirdForQuestionAnswering"),eor=o(" (BigBird model)"),oor=l(),ET=a("li"),U2e=a("strong"),ror=o("bigbird_pegasus"),tor=o(" \u2014 "),FQ=a("a"),aor=o("BigBirdPegasusForQuestionAnswering"),nor=o(" (BigBird-Pegasus model)"),sor=l(),CT=a("li"),J2e=a("strong"),lor=o("camembert"),ior=o(" \u2014 "),TQ=a("a"),dor=o("CamembertForQuestionAnswering"),cor=o(" (CamemBERT model)"),mor=l(),wT=a("li"),Y2e=a("strong"),gor=o("canine"),hor=o(" \u2014 "),MQ=a("a"),uor=o("CanineForQuestionAnswering"),por=o(" (CANINE model)"),_or=l(),AT=a("li"),K2e=a("strong"),bor=o("convbert"),vor=o(" \u2014 "),EQ=a("a"),For=o("ConvBertForQuestionAnswering"),Tor=o(" (ConvBERT model)"),Mor=l(),LT=a("li"),Z2e=a("strong"),Eor=o("data2vec-text"),Cor=o(" \u2014 "),CQ=a("a"),wor=o("Data2VecTextForQuestionAnswering"),Aor=o(" (Data2VecText model)"),Lor=l(),yT=a("li"),ebe=a("strong"),yor=o("deberta"),xor=o(" \u2014 "),wQ=a("a"),$or=o("DebertaForQuestionAnswering"),kor=o(" (DeBERTa model)"),Sor=l(),xT=a("li"),obe=a("strong"),Ror=o("deberta-v2"),Por=o(" \u2014 "),AQ=a("a"),Bor=o("DebertaV2ForQuestionAnswering"),Ior=o(" (DeBERTa-v2 model)"),Nor=l(),$T=a("li"),rbe=a("strong"),qor=o("distilbert"),jor=o(" \u2014 "),LQ=a("a"),Dor=o("DistilBertForQuestionAnswering"),Gor=o(" (DistilBERT model)"),Oor=l(),kT=a("li"),tbe=a("strong"),Vor=o("electra"),Xor=o(" \u2014 "),yQ=a("a"),zor=o("ElectraForQuestionAnswering"),Qor=o(" (ELECTRA model)"),Wor=l(),ST=a("li"),abe=a("strong"),Hor=o("flaubert"),Uor=o(" \u2014 "),xQ=a("a"),Jor=o("FlaubertForQuestionAnsweringSimple"),Yor=o(" (FlauBERT model)"),Kor=l(),RT=a("li"),nbe=a("strong"),Zor=o("fnet"),err=o(" \u2014 "),$Q=a("a"),orr=o("FNetForQuestionAnswering"),rrr=o(" (FNet model)"),trr=l(),PT=a("li"),sbe=a("strong"),arr=o("funnel"),nrr=o(" \u2014 "),kQ=a("a"),srr=o("FunnelForQuestionAnswering"),lrr=o(" (Funnel Transformer model)"),irr=l(),BT=a("li"),lbe=a("strong"),drr=o("gptj"),crr=o(" \u2014 "),SQ=a("a"),mrr=o("GPTJForQuestionAnswering"),frr=o(" (GPT-J model)"),grr=l(),IT=a("li"),ibe=a("strong"),hrr=o("ibert"),urr=o(" \u2014 "),RQ=a("a"),prr=o("IBertForQuestionAnswering"),_rr=o(" (I-BERT model)"),brr=l(),NT=a("li"),dbe=a("strong"),vrr=o("layoutlmv2"),Frr=o(" \u2014 "),PQ=a("a"),Trr=o("LayoutLMv2ForQuestionAnswering"),Mrr=o(" (LayoutLMv2 model)"),Err=l(),qT=a("li"),cbe=a("strong"),Crr=o("layoutlmv3"),wrr=o(" \u2014 "),BQ=a("a"),Arr=o("LayoutLMv3ForQuestionAnswering"),Lrr=o(" (LayoutLMv3 model)"),yrr=l(),jT=a("li"),mbe=a("strong"),xrr=o("led"),$rr=o(" \u2014 "),IQ=a("a"),krr=o("LEDForQuestionAnswering"),Srr=o(" (LED model)"),Rrr=l(),DT=a("li"),fbe=a("strong"),Prr=o("longformer"),Brr=o(" \u2014 "),NQ=a("a"),Irr=o("LongformerForQuestionAnswering"),Nrr=o(" (Longformer model)"),qrr=l(),GT=a("li"),gbe=a("strong"),jrr=o("lxmert"),Drr=o(" \u2014 "),qQ=a("a"),Grr=o("LxmertForQuestionAnswering"),Orr=o(" (LXMERT model)"),Vrr=l(),OT=a("li"),hbe=a("strong"),Xrr=o("mbart"),zrr=o(" \u2014 "),jQ=a("a"),Qrr=o("MBartForQuestionAnswering"),Wrr=o(" (mBART model)"),Hrr=l(),VT=a("li"),ube=a("strong"),Urr=o("megatron-bert"),Jrr=o(" \u2014 "),DQ=a("a"),Yrr=o("MegatronBertForQuestionAnswering"),Krr=o(" (Megatron-BERT model)"),Zrr=l(),XT=a("li"),pbe=a("strong"),etr=o("mobilebert"),otr=o(" \u2014 "),GQ=a("a"),rtr=o("MobileBertForQuestionAnswering"),ttr=o(" (MobileBERT model)"),atr=l(),zT=a("li"),_be=a("strong"),ntr=o("mpnet"),str=o(" \u2014 "),OQ=a("a"),ltr=o("MPNetForQuestionAnswering"),itr=o(" (MPNet model)"),dtr=l(),QT=a("li"),bbe=a("strong"),ctr=o("mvp"),mtr=o(" \u2014 "),VQ=a("a"),ftr=o("MvpForQuestionAnswering"),gtr=o(" (MVP model)"),htr=l(),WT=a("li"),vbe=a("strong"),utr=o("nezha"),ptr=o(" \u2014 "),XQ=a("a"),_tr=o("NezhaForQuestionAnswering"),btr=o(" (Nezha model)"),vtr=l(),HT=a("li"),Fbe=a("strong"),Ftr=o("nystromformer"),Ttr=o(" \u2014 "),zQ=a("a"),Mtr=o("NystromformerForQuestionAnswering"),Etr=o(" (Nystr\xF6mformer model)"),Ctr=l(),UT=a("li"),Tbe=a("strong"),wtr=o("qdqbert"),Atr=o(" \u2014 "),QQ=a("a"),Ltr=o("QDQBertForQuestionAnswering"),ytr=o(" (QDQBert model)"),xtr=l(),JT=a("li"),Mbe=a("strong"),$tr=o("reformer"),ktr=o(" \u2014 "),WQ=a("a"),Str=o("ReformerForQuestionAnswering"),Rtr=o(" (Reformer model)"),Ptr=l(),YT=a("li"),Ebe=a("strong"),Btr=o("rembert"),Itr=o(" \u2014 "),HQ=a("a"),Ntr=o("RemBertForQuestionAnswering"),qtr=o(" (RemBERT model)"),jtr=l(),KT=a("li"),Cbe=a("strong"),Dtr=o("roberta"),Gtr=o(" \u2014 "),UQ=a("a"),Otr=o("RobertaForQuestionAnswering"),Vtr=o(" (RoBERTa model)"),Xtr=l(),ZT=a("li"),wbe=a("strong"),ztr=o("roformer"),Qtr=o(" \u2014 "),JQ=a("a"),Wtr=o("RoFormerForQuestionAnswering"),Htr=o(" (RoFormer model)"),Utr=l(),eM=a("li"),Abe=a("strong"),Jtr=o("splinter"),Ytr=o(" \u2014 "),YQ=a("a"),Ktr=o("SplinterForQuestionAnswering"),Ztr=o(" (Splinter model)"),ear=l(),oM=a("li"),Lbe=a("strong"),oar=o("squeezebert"),rar=o(" \u2014 "),KQ=a("a"),tar=o("SqueezeBertForQuestionAnswering"),aar=o(" (SqueezeBERT model)"),nar=l(),rM=a("li"),ybe=a("strong"),sar=o("xlm"),lar=o(" \u2014 "),ZQ=a("a"),iar=o("XLMForQuestionAnsweringSimple"),dar=o(" (XLM model)"),car=l(),tM=a("li"),xbe=a("strong"),mar=o("xlm-roberta"),far=o(" \u2014 "),eW=a("a"),gar=o("XLMRobertaForQuestionAnswering"),har=o(" (XLM-RoBERTa model)"),uar=l(),aM=a("li"),$be=a("strong"),par=o("xlm-roberta-xl"),_ar=o(" \u2014 "),oW=a("a"),bar=o("XLMRobertaXLForQuestionAnswering"),Far=o(" (XLM-RoBERTa-XL model)"),Tar=l(),nM=a("li"),kbe=a("strong"),Mar=o("xlnet"),Ear=o(" \u2014 "),rW=a("a"),Car=o("XLNetForQuestionAnsweringSimple"),war=o(" (XLNet model)"),Aar=l(),sM=a("li"),Sbe=a("strong"),Lar=o("yoso"),yar=o(" \u2014 "),tW=a("a"),xar=o("YosoForQuestionAnswering"),$ar=o(" (YOSO model)"),kar=l(),lM=a("p"),Sar=o("The model is set in evaluation mode by default using "),Rbe=a("code"),Rar=o("model.eval()"),Par=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pbe=a("code"),Bar=o("model.train()"),Iar=l(),F(iM.$$.fragment),TXe=l(),pd=a("h2"),dM=a("a"),Bbe=a("span"),F(C8.$$.fragment),Nar=l(),Ibe=a("span"),qar=o("AutoModelForTableQuestionAnswering"),MXe=l(),Do=a("div"),F(w8.$$.fragment),jar=l(),_d=a("p"),Dar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),aW=a("a"),Gar=o("from_pretrained()"),Oar=o(" class method or the "),nW=a("a"),Var=o("from_config()"),Xar=o(` class
method.`),zar=l(),A8=a("p"),Qar=o("This class cannot be instantiated directly using "),Nbe=a("code"),War=o("__init__()"),Har=o(" (throws an error)."),Uar=l(),_t=a("div"),F(L8.$$.fragment),Jar=l(),qbe=a("p"),Yar=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Kar=l(),bd=a("p"),Zar=o(`Note:
Loading a model from its configuration file does `),jbe=a("strong"),enr=o("not"),onr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=a("a"),rnr=o("from_pretrained()"),tnr=o(" to load the model weights."),anr=l(),F(cM.$$.fragment),nnr=l(),so=a("div"),F(y8.$$.fragment),snr=l(),Dbe=a("p"),lnr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),inr=l(),Qa=a("p"),dnr=o("The model class to instantiate is selected based on the "),Gbe=a("code"),cnr=o("model_type"),mnr=o(` property of the config object (either
passed as an argument or loaded from `),Obe=a("code"),fnr=o("pretrained_model_name_or_path"),gnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vbe=a("code"),hnr=o("pretrained_model_name_or_path"),unr=o(":"),pnr=l(),Xbe=a("ul"),mM=a("li"),zbe=a("strong"),_nr=o("tapas"),bnr=o(" \u2014 "),lW=a("a"),vnr=o("TapasForQuestionAnswering"),Fnr=o(" (TAPAS model)"),Tnr=l(),fM=a("p"),Mnr=o("The model is set in evaluation mode by default using "),Qbe=a("code"),Enr=o("model.eval()"),Cnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wbe=a("code"),wnr=o("model.train()"),Anr=l(),F(gM.$$.fragment),EXe=l(),vd=a("h2"),hM=a("a"),Hbe=a("span"),F(x8.$$.fragment),Lnr=l(),Ube=a("span"),ynr=o("AutoModelForImageClassification"),CXe=l(),Go=a("div"),F($8.$$.fragment),xnr=l(),Fd=a("p"),$nr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iW=a("a"),knr=o("from_pretrained()"),Snr=o(" class method or the "),dW=a("a"),Rnr=o("from_config()"),Pnr=o(` class
method.`),Bnr=l(),k8=a("p"),Inr=o("This class cannot be instantiated directly using "),Jbe=a("code"),Nnr=o("__init__()"),qnr=o(" (throws an error)."),jnr=l(),bt=a("div"),F(S8.$$.fragment),Dnr=l(),Ybe=a("p"),Gnr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Onr=l(),Td=a("p"),Vnr=o(`Note:
Loading a model from its configuration file does `),Kbe=a("strong"),Xnr=o("not"),znr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=a("a"),Qnr=o("from_pretrained()"),Wnr=o(" to load the model weights."),Hnr=l(),F(uM.$$.fragment),Unr=l(),lo=a("div"),F(R8.$$.fragment),Jnr=l(),Zbe=a("p"),Ynr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Knr=l(),Wa=a("p"),Znr=o("The model class to instantiate is selected based on the "),eve=a("code"),esr=o("model_type"),osr=o(` property of the config object (either
passed as an argument or loaded from `),ove=a("code"),rsr=o("pretrained_model_name_or_path"),tsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=a("code"),asr=o("pretrained_model_name_or_path"),nsr=o(":"),ssr=l(),ve=a("ul"),pM=a("li"),tve=a("strong"),lsr=o("beit"),isr=o(" \u2014 "),mW=a("a"),dsr=o("BeitForImageClassification"),csr=o(" (BEiT model)"),msr=l(),_M=a("li"),ave=a("strong"),fsr=o("convnext"),gsr=o(" \u2014 "),fW=a("a"),hsr=o("ConvNextForImageClassification"),usr=o(" (ConvNeXT model)"),psr=l(),bM=a("li"),nve=a("strong"),_sr=o("cvt"),bsr=o(" \u2014 "),gW=a("a"),vsr=o("CvtForImageClassification"),Fsr=o(" (CvT model)"),Tsr=l(),vM=a("li"),sve=a("strong"),Msr=o("data2vec-vision"),Esr=o(" \u2014 "),hW=a("a"),Csr=o("Data2VecVisionForImageClassification"),wsr=o(" (Data2VecVision model)"),Asr=l(),Hs=a("li"),lve=a("strong"),Lsr=o("deit"),ysr=o(" \u2014 "),uW=a("a"),xsr=o("DeiTForImageClassification"),$sr=o(" or "),pW=a("a"),ksr=o("DeiTForImageClassificationWithTeacher"),Ssr=o(" (DeiT model)"),Rsr=l(),FM=a("li"),ive=a("strong"),Psr=o("imagegpt"),Bsr=o(" \u2014 "),_W=a("a"),Isr=o("ImageGPTForImageClassification"),Nsr=o(" (ImageGPT model)"),qsr=l(),Us=a("li"),dve=a("strong"),jsr=o("levit"),Dsr=o(" \u2014 "),bW=a("a"),Gsr=o("LevitForImageClassification"),Osr=o(" or "),vW=a("a"),Vsr=o("LevitForImageClassificationWithTeacher"),Xsr=o(" (LeViT model)"),zsr=l(),TM=a("li"),cve=a("strong"),Qsr=o("mobilevit"),Wsr=o(" \u2014 "),FW=a("a"),Hsr=o("MobileViTForImageClassification"),Usr=o(" (MobileViT model)"),Jsr=l(),vt=a("li"),mve=a("strong"),Ysr=o("perceiver"),Ksr=o(" \u2014 "),TW=a("a"),Zsr=o("PerceiverForImageClassificationLearned"),elr=o(" or "),MW=a("a"),olr=o("PerceiverForImageClassificationFourier"),rlr=o(" or "),EW=a("a"),tlr=o("PerceiverForImageClassificationConvProcessing"),alr=o(" (Perceiver model)"),nlr=l(),MM=a("li"),fve=a("strong"),slr=o("poolformer"),llr=o(" \u2014 "),CW=a("a"),ilr=o("PoolFormerForImageClassification"),dlr=o(" (PoolFormer model)"),clr=l(),EM=a("li"),gve=a("strong"),mlr=o("regnet"),flr=o(" \u2014 "),wW=a("a"),glr=o("RegNetForImageClassification"),hlr=o(" (RegNet model)"),ulr=l(),CM=a("li"),hve=a("strong"),plr=o("resnet"),_lr=o(" \u2014 "),AW=a("a"),blr=o("ResNetForImageClassification"),vlr=o(" (ResNet model)"),Flr=l(),wM=a("li"),uve=a("strong"),Tlr=o("segformer"),Mlr=o(" \u2014 "),LW=a("a"),Elr=o("SegformerForImageClassification"),Clr=o(" (SegFormer model)"),wlr=l(),AM=a("li"),pve=a("strong"),Alr=o("swin"),Llr=o(" \u2014 "),yW=a("a"),ylr=o("SwinForImageClassification"),xlr=o(" (Swin Transformer model)"),$lr=l(),LM=a("li"),_ve=a("strong"),klr=o("van"),Slr=o(" \u2014 "),xW=a("a"),Rlr=o("VanForImageClassification"),Plr=o(" (VAN model)"),Blr=l(),yM=a("li"),bve=a("strong"),Ilr=o("vit"),Nlr=o(" \u2014 "),$W=a("a"),qlr=o("ViTForImageClassification"),jlr=o(" (ViT model)"),Dlr=l(),xM=a("p"),Glr=o("The model is set in evaluation mode by default using "),vve=a("code"),Olr=o("model.eval()"),Vlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fve=a("code"),Xlr=o("model.train()"),zlr=l(),F($M.$$.fragment),wXe=l(),Md=a("h2"),kM=a("a"),Tve=a("span"),F(P8.$$.fragment),Qlr=l(),Mve=a("span"),Wlr=o("AutoModelForVision2Seq"),AXe=l(),Oo=a("div"),F(B8.$$.fragment),Hlr=l(),Ed=a("p"),Ulr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kW=a("a"),Jlr=o("from_pretrained()"),Ylr=o(" class method or the "),SW=a("a"),Klr=o("from_config()"),Zlr=o(` class
method.`),eir=l(),I8=a("p"),oir=o("This class cannot be instantiated directly using "),Eve=a("code"),rir=o("__init__()"),tir=o(" (throws an error)."),air=l(),Ft=a("div"),F(N8.$$.fragment),nir=l(),Cve=a("p"),sir=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lir=l(),Cd=a("p"),iir=o(`Note:
Loading a model from its configuration file does `),wve=a("strong"),dir=o("not"),cir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=a("a"),mir=o("from_pretrained()"),fir=o(" to load the model weights."),gir=l(),F(SM.$$.fragment),hir=l(),io=a("div"),F(q8.$$.fragment),uir=l(),Ave=a("p"),pir=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_ir=l(),Ha=a("p"),bir=o("The model class to instantiate is selected based on the "),Lve=a("code"),vir=o("model_type"),Fir=o(` property of the config object (either
passed as an argument or loaded from `),yve=a("code"),Tir=o("pretrained_model_name_or_path"),Mir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=a("code"),Eir=o("pretrained_model_name_or_path"),Cir=o(":"),wir=l(),$ve=a("ul"),RM=a("li"),kve=a("strong"),Air=o("vision-encoder-decoder"),Lir=o(" \u2014 "),PW=a("a"),yir=o("VisionEncoderDecoderModel"),xir=o(" (Vision Encoder decoder model)"),$ir=l(),PM=a("p"),kir=o("The model is set in evaluation mode by default using "),Sve=a("code"),Sir=o("model.eval()"),Rir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rve=a("code"),Pir=o("model.train()"),Bir=l(),F(BM.$$.fragment),LXe=l(),wd=a("h2"),IM=a("a"),Pve=a("span"),F(j8.$$.fragment),Iir=l(),Bve=a("span"),Nir=o("AutoModelForVisualQuestionAnswering"),yXe=l(),Vo=a("div"),F(D8.$$.fragment),qir=l(),Ad=a("p"),jir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),BW=a("a"),Dir=o("from_pretrained()"),Gir=o(" class method or the "),IW=a("a"),Oir=o("from_config()"),Vir=o(` class
method.`),Xir=l(),G8=a("p"),zir=o("This class cannot be instantiated directly using "),Ive=a("code"),Qir=o("__init__()"),Wir=o(" (throws an error)."),Hir=l(),Tt=a("div"),F(O8.$$.fragment),Uir=l(),Nve=a("p"),Jir=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Yir=l(),Ld=a("p"),Kir=o(`Note:
Loading a model from its configuration file does `),qve=a("strong"),Zir=o("not"),edr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NW=a("a"),odr=o("from_pretrained()"),rdr=o(" to load the model weights."),tdr=l(),F(NM.$$.fragment),adr=l(),co=a("div"),F(V8.$$.fragment),ndr=l(),jve=a("p"),sdr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),ldr=l(),Ua=a("p"),idr=o("The model class to instantiate is selected based on the "),Dve=a("code"),ddr=o("model_type"),cdr=o(` property of the config object (either
passed as an argument or loaded from `),Gve=a("code"),mdr=o("pretrained_model_name_or_path"),fdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=a("code"),gdr=o("pretrained_model_name_or_path"),hdr=o(":"),udr=l(),Vve=a("ul"),qM=a("li"),Xve=a("strong"),pdr=o("vilt"),_dr=o(" \u2014 "),qW=a("a"),bdr=o("ViltForQuestionAnswering"),vdr=o(" (ViLT model)"),Fdr=l(),jM=a("p"),Tdr=o("The model is set in evaluation mode by default using "),zve=a("code"),Mdr=o("model.eval()"),Edr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qve=a("code"),Cdr=o("model.train()"),wdr=l(),F(DM.$$.fragment),xXe=l(),yd=a("h2"),GM=a("a"),Wve=a("span"),F(X8.$$.fragment),Adr=l(),Hve=a("span"),Ldr=o("AutoModelForAudioClassification"),$Xe=l(),Xo=a("div"),F(z8.$$.fragment),ydr=l(),xd=a("p"),xdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),jW=a("a"),$dr=o("from_pretrained()"),kdr=o(" class method or the "),DW=a("a"),Sdr=o("from_config()"),Rdr=o(` class
method.`),Pdr=l(),Q8=a("p"),Bdr=o("This class cannot be instantiated directly using "),Uve=a("code"),Idr=o("__init__()"),Ndr=o(" (throws an error)."),qdr=l(),Mt=a("div"),F(W8.$$.fragment),jdr=l(),Jve=a("p"),Ddr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Gdr=l(),$d=a("p"),Odr=o(`Note:
Loading a model from its configuration file does `),Yve=a("strong"),Vdr=o("not"),Xdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),zdr=o("from_pretrained()"),Qdr=o(" to load the model weights."),Wdr=l(),F(OM.$$.fragment),Hdr=l(),mo=a("div"),F(H8.$$.fragment),Udr=l(),Kve=a("p"),Jdr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Ydr=l(),Ja=a("p"),Kdr=o("The model class to instantiate is selected based on the "),Zve=a("code"),Zdr=o("model_type"),ecr=o(` property of the config object (either
passed as an argument or loaded from `),e1e=a("code"),ocr=o("pretrained_model_name_or_path"),rcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=a("code"),tcr=o("pretrained_model_name_or_path"),acr=o(":"),ncr=l(),Pe=a("ul"),VM=a("li"),r1e=a("strong"),scr=o("data2vec-audio"),lcr=o(" \u2014 "),OW=a("a"),icr=o("Data2VecAudioForSequenceClassification"),dcr=o(" (Data2VecAudio model)"),ccr=l(),XM=a("li"),t1e=a("strong"),mcr=o("hubert"),fcr=o(" \u2014 "),VW=a("a"),gcr=o("HubertForSequenceClassification"),hcr=o(" (Hubert model)"),ucr=l(),zM=a("li"),a1e=a("strong"),pcr=o("sew"),_cr=o(" \u2014 "),XW=a("a"),bcr=o("SEWForSequenceClassification"),vcr=o(" (SEW model)"),Fcr=l(),QM=a("li"),n1e=a("strong"),Tcr=o("sew-d"),Mcr=o(" \u2014 "),zW=a("a"),Ecr=o("SEWDForSequenceClassification"),Ccr=o(" (SEW-D model)"),wcr=l(),WM=a("li"),s1e=a("strong"),Acr=o("unispeech"),Lcr=o(" \u2014 "),QW=a("a"),ycr=o("UniSpeechForSequenceClassification"),xcr=o(" (UniSpeech model)"),$cr=l(),HM=a("li"),l1e=a("strong"),kcr=o("unispeech-sat"),Scr=o(" \u2014 "),WW=a("a"),Rcr=o("UniSpeechSatForSequenceClassification"),Pcr=o(" (UniSpeechSat model)"),Bcr=l(),UM=a("li"),i1e=a("strong"),Icr=o("wav2vec2"),Ncr=o(" \u2014 "),HW=a("a"),qcr=o("Wav2Vec2ForSequenceClassification"),jcr=o(" (Wav2Vec2 model)"),Dcr=l(),JM=a("li"),d1e=a("strong"),Gcr=o("wav2vec2-conformer"),Ocr=o(" \u2014 "),UW=a("a"),Vcr=o("Wav2Vec2ConformerForSequenceClassification"),Xcr=o(" (Wav2Vec2-Conformer model)"),zcr=l(),YM=a("li"),c1e=a("strong"),Qcr=o("wavlm"),Wcr=o(" \u2014 "),JW=a("a"),Hcr=o("WavLMForSequenceClassification"),Ucr=o(" (WavLM model)"),Jcr=l(),KM=a("p"),Ycr=o("The model is set in evaluation mode by default using "),m1e=a("code"),Kcr=o("model.eval()"),Zcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f1e=a("code"),emr=o("model.train()"),omr=l(),F(ZM.$$.fragment),kXe=l(),kd=a("h2"),e4=a("a"),g1e=a("span"),F(U8.$$.fragment),rmr=l(),h1e=a("span"),tmr=o("AutoModelForAudioFrameClassification"),SXe=l(),zo=a("div"),F(J8.$$.fragment),amr=l(),Sd=a("p"),nmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),YW=a("a"),smr=o("from_pretrained()"),lmr=o(" class method or the "),KW=a("a"),imr=o("from_config()"),dmr=o(` class
method.`),cmr=l(),Y8=a("p"),mmr=o("This class cannot be instantiated directly using "),u1e=a("code"),fmr=o("__init__()"),gmr=o(" (throws an error)."),hmr=l(),Et=a("div"),F(K8.$$.fragment),umr=l(),p1e=a("p"),pmr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),_mr=l(),Rd=a("p"),bmr=o(`Note:
Loading a model from its configuration file does `),_1e=a("strong"),vmr=o("not"),Fmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=a("a"),Tmr=o("from_pretrained()"),Mmr=o(" to load the model weights."),Emr=l(),F(o4.$$.fragment),Cmr=l(),fo=a("div"),F(Z8.$$.fragment),wmr=l(),b1e=a("p"),Amr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Lmr=l(),Ya=a("p"),ymr=o("The model class to instantiate is selected based on the "),v1e=a("code"),xmr=o("model_type"),$mr=o(` property of the config object (either
passed as an argument or loaded from `),F1e=a("code"),kmr=o("pretrained_model_name_or_path"),Smr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T1e=a("code"),Rmr=o("pretrained_model_name_or_path"),Pmr=o(":"),Bmr=l(),ot=a("ul"),r4=a("li"),M1e=a("strong"),Imr=o("data2vec-audio"),Nmr=o(" \u2014 "),eH=a("a"),qmr=o("Data2VecAudioForAudioFrameClassification"),jmr=o(" (Data2VecAudio model)"),Dmr=l(),t4=a("li"),E1e=a("strong"),Gmr=o("unispeech-sat"),Omr=o(" \u2014 "),oH=a("a"),Vmr=o("UniSpeechSatForAudioFrameClassification"),Xmr=o(" (UniSpeechSat model)"),zmr=l(),a4=a("li"),C1e=a("strong"),Qmr=o("wav2vec2"),Wmr=o(" \u2014 "),rH=a("a"),Hmr=o("Wav2Vec2ForAudioFrameClassification"),Umr=o(" (Wav2Vec2 model)"),Jmr=l(),n4=a("li"),w1e=a("strong"),Ymr=o("wav2vec2-conformer"),Kmr=o(" \u2014 "),tH=a("a"),Zmr=o("Wav2Vec2ConformerForAudioFrameClassification"),efr=o(" (Wav2Vec2-Conformer model)"),ofr=l(),s4=a("li"),A1e=a("strong"),rfr=o("wavlm"),tfr=o(" \u2014 "),aH=a("a"),afr=o("WavLMForAudioFrameClassification"),nfr=o(" (WavLM model)"),sfr=l(),l4=a("p"),lfr=o("The model is set in evaluation mode by default using "),L1e=a("code"),ifr=o("model.eval()"),dfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y1e=a("code"),cfr=o("model.train()"),mfr=l(),F(i4.$$.fragment),RXe=l(),Pd=a("h2"),d4=a("a"),x1e=a("span"),F(e9.$$.fragment),ffr=l(),$1e=a("span"),gfr=o("AutoModelForCTC"),PXe=l(),Qo=a("div"),F(o9.$$.fragment),hfr=l(),Bd=a("p"),ufr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),nH=a("a"),pfr=o("from_pretrained()"),_fr=o(" class method or the "),sH=a("a"),bfr=o("from_config()"),vfr=o(` class
method.`),Ffr=l(),r9=a("p"),Tfr=o("This class cannot be instantiated directly using "),k1e=a("code"),Mfr=o("__init__()"),Efr=o(" (throws an error)."),Cfr=l(),Ct=a("div"),F(t9.$$.fragment),wfr=l(),S1e=a("p"),Afr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Lfr=l(),Id=a("p"),yfr=o(`Note:
Loading a model from its configuration file does `),R1e=a("strong"),xfr=o("not"),$fr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=a("a"),kfr=o("from_pretrained()"),Sfr=o(" to load the model weights."),Rfr=l(),F(c4.$$.fragment),Pfr=l(),go=a("div"),F(a9.$$.fragment),Bfr=l(),P1e=a("p"),Ifr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Nfr=l(),Ka=a("p"),qfr=o("The model class to instantiate is selected based on the "),B1e=a("code"),jfr=o("model_type"),Dfr=o(` property of the config object (either
passed as an argument or loaded from `),I1e=a("code"),Gfr=o("pretrained_model_name_or_path"),Ofr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=a("code"),Vfr=o("pretrained_model_name_or_path"),Xfr=o(":"),zfr=l(),Le=a("ul"),m4=a("li"),q1e=a("strong"),Qfr=o("data2vec-audio"),Wfr=o(" \u2014 "),iH=a("a"),Hfr=o("Data2VecAudioForCTC"),Ufr=o(" (Data2VecAudio model)"),Jfr=l(),f4=a("li"),j1e=a("strong"),Yfr=o("hubert"),Kfr=o(" \u2014 "),dH=a("a"),Zfr=o("HubertForCTC"),egr=o(" (Hubert model)"),ogr=l(),g4=a("li"),D1e=a("strong"),rgr=o("mctct"),tgr=o(" \u2014 "),cH=a("a"),agr=o("MCTCTForCTC"),ngr=o(" (M-CTC-T model)"),sgr=l(),h4=a("li"),G1e=a("strong"),lgr=o("sew"),igr=o(" \u2014 "),mH=a("a"),dgr=o("SEWForCTC"),cgr=o(" (SEW model)"),mgr=l(),u4=a("li"),O1e=a("strong"),fgr=o("sew-d"),ggr=o(" \u2014 "),fH=a("a"),hgr=o("SEWDForCTC"),ugr=o(" (SEW-D model)"),pgr=l(),p4=a("li"),V1e=a("strong"),_gr=o("unispeech"),bgr=o(" \u2014 "),gH=a("a"),vgr=o("UniSpeechForCTC"),Fgr=o(" (UniSpeech model)"),Tgr=l(),_4=a("li"),X1e=a("strong"),Mgr=o("unispeech-sat"),Egr=o(" \u2014 "),hH=a("a"),Cgr=o("UniSpeechSatForCTC"),wgr=o(" (UniSpeechSat model)"),Agr=l(),b4=a("li"),z1e=a("strong"),Lgr=o("wav2vec2"),ygr=o(" \u2014 "),uH=a("a"),xgr=o("Wav2Vec2ForCTC"),$gr=o(" (Wav2Vec2 model)"),kgr=l(),v4=a("li"),Q1e=a("strong"),Sgr=o("wav2vec2-conformer"),Rgr=o(" \u2014 "),pH=a("a"),Pgr=o("Wav2Vec2ConformerForCTC"),Bgr=o(" (Wav2Vec2-Conformer model)"),Igr=l(),F4=a("li"),W1e=a("strong"),Ngr=o("wavlm"),qgr=o(" \u2014 "),_H=a("a"),jgr=o("WavLMForCTC"),Dgr=o(" (WavLM model)"),Ggr=l(),T4=a("p"),Ogr=o("The model is set in evaluation mode by default using "),H1e=a("code"),Vgr=o("model.eval()"),Xgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U1e=a("code"),zgr=o("model.train()"),Qgr=l(),F(M4.$$.fragment),BXe=l(),Nd=a("h2"),E4=a("a"),J1e=a("span"),F(n9.$$.fragment),Wgr=l(),Y1e=a("span"),Hgr=o("AutoModelForSpeechSeq2Seq"),IXe=l(),Wo=a("div"),F(s9.$$.fragment),Ugr=l(),qd=a("p"),Jgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),bH=a("a"),Ygr=o("from_pretrained()"),Kgr=o(" class method or the "),vH=a("a"),Zgr=o("from_config()"),ehr=o(` class
method.`),ohr=l(),l9=a("p"),rhr=o("This class cannot be instantiated directly using "),K1e=a("code"),thr=o("__init__()"),ahr=o(" (throws an error)."),nhr=l(),wt=a("div"),F(i9.$$.fragment),shr=l(),Z1e=a("p"),lhr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ihr=l(),jd=a("p"),dhr=o(`Note:
Loading a model from its configuration file does `),eFe=a("strong"),chr=o("not"),mhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),fhr=o("from_pretrained()"),ghr=o(" to load the model weights."),hhr=l(),F(C4.$$.fragment),uhr=l(),ho=a("div"),F(d9.$$.fragment),phr=l(),oFe=a("p"),_hr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),bhr=l(),Za=a("p"),vhr=o("The model class to instantiate is selected based on the "),rFe=a("code"),Fhr=o("model_type"),Thr=o(` property of the config object (either
passed as an argument or loaded from `),tFe=a("code"),Mhr=o("pretrained_model_name_or_path"),Ehr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=a("code"),Chr=o("pretrained_model_name_or_path"),whr=o(":"),Ahr=l(),c9=a("ul"),w4=a("li"),nFe=a("strong"),Lhr=o("speech-encoder-decoder"),yhr=o(" \u2014 "),TH=a("a"),xhr=o("SpeechEncoderDecoderModel"),$hr=o(" (Speech Encoder decoder model)"),khr=l(),A4=a("li"),sFe=a("strong"),Shr=o("speech_to_text"),Rhr=o(" \u2014 "),MH=a("a"),Phr=o("Speech2TextForConditionalGeneration"),Bhr=o(" (Speech2Text model)"),Ihr=l(),L4=a("p"),Nhr=o("The model is set in evaluation mode by default using "),lFe=a("code"),qhr=o("model.eval()"),jhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iFe=a("code"),Dhr=o("model.train()"),Ghr=l(),F(y4.$$.fragment),NXe=l(),Dd=a("h2"),x4=a("a"),dFe=a("span"),F(m9.$$.fragment),Ohr=l(),cFe=a("span"),Vhr=o("AutoModelForAudioXVector"),qXe=l(),Ho=a("div"),F(f9.$$.fragment),Xhr=l(),Gd=a("p"),zhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),EH=a("a"),Qhr=o("from_pretrained()"),Whr=o(" class method or the "),CH=a("a"),Hhr=o("from_config()"),Uhr=o(` class
method.`),Jhr=l(),g9=a("p"),Yhr=o("This class cannot be instantiated directly using "),mFe=a("code"),Khr=o("__init__()"),Zhr=o(" (throws an error)."),eur=l(),At=a("div"),F(h9.$$.fragment),our=l(),fFe=a("p"),rur=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),tur=l(),Od=a("p"),aur=o(`Note:
Loading a model from its configuration file does `),gFe=a("strong"),nur=o("not"),sur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),lur=o("from_pretrained()"),iur=o(" to load the model weights."),dur=l(),F($4.$$.fragment),cur=l(),uo=a("div"),F(u9.$$.fragment),mur=l(),hFe=a("p"),fur=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),gur=l(),en=a("p"),hur=o("The model class to instantiate is selected based on the "),uFe=a("code"),uur=o("model_type"),pur=o(` property of the config object (either
passed as an argument or loaded from `),pFe=a("code"),_ur=o("pretrained_model_name_or_path"),bur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=a("code"),vur=o("pretrained_model_name_or_path"),Fur=o(":"),Tur=l(),rt=a("ul"),k4=a("li"),bFe=a("strong"),Mur=o("data2vec-audio"),Eur=o(" \u2014 "),AH=a("a"),Cur=o("Data2VecAudioForXVector"),wur=o(" (Data2VecAudio model)"),Aur=l(),S4=a("li"),vFe=a("strong"),Lur=o("unispeech-sat"),yur=o(" \u2014 "),LH=a("a"),xur=o("UniSpeechSatForXVector"),$ur=o(" (UniSpeechSat model)"),kur=l(),R4=a("li"),FFe=a("strong"),Sur=o("wav2vec2"),Rur=o(" \u2014 "),yH=a("a"),Pur=o("Wav2Vec2ForXVector"),Bur=o(" (Wav2Vec2 model)"),Iur=l(),P4=a("li"),TFe=a("strong"),Nur=o("wav2vec2-conformer"),qur=o(" \u2014 "),xH=a("a"),jur=o("Wav2Vec2ConformerForXVector"),Dur=o(" (Wav2Vec2-Conformer model)"),Gur=l(),B4=a("li"),MFe=a("strong"),Our=o("wavlm"),Vur=o(" \u2014 "),$H=a("a"),Xur=o("WavLMForXVector"),zur=o(" (WavLM model)"),Qur=l(),I4=a("p"),Wur=o("The model is set in evaluation mode by default using "),EFe=a("code"),Hur=o("model.eval()"),Uur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),CFe=a("code"),Jur=o("model.train()"),Yur=l(),F(N4.$$.fragment),jXe=l(),Vd=a("h2"),q4=a("a"),wFe=a("span"),F(p9.$$.fragment),Kur=l(),AFe=a("span"),Zur=o("AutoModelForMaskedImageModeling"),DXe=l(),Uo=a("div"),F(_9.$$.fragment),epr=l(),Xd=a("p"),opr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),kH=a("a"),rpr=o("from_pretrained()"),tpr=o(" class method or the "),SH=a("a"),apr=o("from_config()"),npr=o(` class
method.`),spr=l(),b9=a("p"),lpr=o("This class cannot be instantiated directly using "),LFe=a("code"),ipr=o("__init__()"),dpr=o(" (throws an error)."),cpr=l(),Lt=a("div"),F(v9.$$.fragment),mpr=l(),yFe=a("p"),fpr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),gpr=l(),zd=a("p"),hpr=o(`Note:
Loading a model from its configuration file does `),xFe=a("strong"),upr=o("not"),ppr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),_pr=o("from_pretrained()"),bpr=o(" to load the model weights."),vpr=l(),F(j4.$$.fragment),Fpr=l(),po=a("div"),F(F9.$$.fragment),Tpr=l(),$Fe=a("p"),Mpr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Epr=l(),on=a("p"),Cpr=o("The model class to instantiate is selected based on the "),kFe=a("code"),wpr=o("model_type"),Apr=o(` property of the config object (either
passed as an argument or loaded from `),SFe=a("code"),Lpr=o("pretrained_model_name_or_path"),ypr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=a("code"),xpr=o("pretrained_model_name_or_path"),$pr=o(":"),kpr=l(),Qd=a("ul"),D4=a("li"),PFe=a("strong"),Spr=o("deit"),Rpr=o(" \u2014 "),PH=a("a"),Ppr=o("DeiTForMaskedImageModeling"),Bpr=o(" (DeiT model)"),Ipr=l(),G4=a("li"),BFe=a("strong"),Npr=o("swin"),qpr=o(" \u2014 "),BH=a("a"),jpr=o("SwinForMaskedImageModeling"),Dpr=o(" (Swin Transformer model)"),Gpr=l(),O4=a("li"),IFe=a("strong"),Opr=o("vit"),Vpr=o(" \u2014 "),IH=a("a"),Xpr=o("ViTForMaskedImageModeling"),zpr=o(" (ViT model)"),Qpr=l(),V4=a("p"),Wpr=o("The model is set in evaluation mode by default using "),NFe=a("code"),Hpr=o("model.eval()"),Upr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qFe=a("code"),Jpr=o("model.train()"),Ypr=l(),F(X4.$$.fragment),GXe=l(),Wd=a("h2"),z4=a("a"),jFe=a("span"),F(T9.$$.fragment),Kpr=l(),DFe=a("span"),Zpr=o("AutoModelForObjectDetection"),OXe=l(),Jo=a("div"),F(M9.$$.fragment),e_r=l(),Hd=a("p"),o_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),NH=a("a"),r_r=o("from_pretrained()"),t_r=o(" class method or the "),qH=a("a"),a_r=o("from_config()"),n_r=o(` class
method.`),s_r=l(),E9=a("p"),l_r=o("This class cannot be instantiated directly using "),GFe=a("code"),i_r=o("__init__()"),d_r=o(" (throws an error)."),c_r=l(),yt=a("div"),F(C9.$$.fragment),m_r=l(),OFe=a("p"),f_r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),g_r=l(),Ud=a("p"),h_r=o(`Note:
Loading a model from its configuration file does `),VFe=a("strong"),u_r=o("not"),p_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=a("a"),__r=o("from_pretrained()"),b_r=o(" to load the model weights."),v_r=l(),F(Q4.$$.fragment),F_r=l(),_o=a("div"),F(w9.$$.fragment),T_r=l(),XFe=a("p"),M_r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),E_r=l(),rn=a("p"),C_r=o("The model class to instantiate is selected based on the "),zFe=a("code"),w_r=o("model_type"),A_r=o(` property of the config object (either
passed as an argument or loaded from `),QFe=a("code"),L_r=o("pretrained_model_name_or_path"),y_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=a("code"),x_r=o("pretrained_model_name_or_path"),$_r=o(":"),k_r=l(),A9=a("ul"),W4=a("li"),HFe=a("strong"),S_r=o("detr"),R_r=o(" \u2014 "),DH=a("a"),P_r=o("DetrForObjectDetection"),B_r=o(" (DETR model)"),I_r=l(),H4=a("li"),UFe=a("strong"),N_r=o("yolos"),q_r=o(" \u2014 "),GH=a("a"),j_r=o("YolosForObjectDetection"),D_r=o(" (YOLOS model)"),G_r=l(),U4=a("p"),O_r=o("The model is set in evaluation mode by default using "),JFe=a("code"),V_r=o("model.eval()"),X_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),YFe=a("code"),z_r=o("model.train()"),Q_r=l(),F(J4.$$.fragment),VXe=l(),Jd=a("h2"),Y4=a("a"),KFe=a("span"),F(L9.$$.fragment),W_r=l(),ZFe=a("span"),H_r=o("AutoModelForImageSegmentation"),XXe=l(),Yo=a("div"),F(y9.$$.fragment),U_r=l(),Yd=a("p"),J_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),OH=a("a"),Y_r=o("from_pretrained()"),K_r=o(" class method or the "),VH=a("a"),Z_r=o("from_config()"),e2r=o(` class
method.`),o2r=l(),x9=a("p"),r2r=o("This class cannot be instantiated directly using "),eTe=a("code"),t2r=o("__init__()"),a2r=o(" (throws an error)."),n2r=l(),xt=a("div"),F($9.$$.fragment),s2r=l(),oTe=a("p"),l2r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),i2r=l(),Kd=a("p"),d2r=o(`Note:
Loading a model from its configuration file does `),rTe=a("strong"),c2r=o("not"),m2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),f2r=o("from_pretrained()"),g2r=o(" to load the model weights."),h2r=l(),F(K4.$$.fragment),u2r=l(),bo=a("div"),F(k9.$$.fragment),p2r=l(),tTe=a("p"),_2r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),b2r=l(),tn=a("p"),v2r=o("The model class to instantiate is selected based on the "),aTe=a("code"),F2r=o("model_type"),T2r=o(` property of the config object (either
passed as an argument or loaded from `),nTe=a("code"),M2r=o("pretrained_model_name_or_path"),E2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sTe=a("code"),C2r=o("pretrained_model_name_or_path"),w2r=o(":"),A2r=l(),lTe=a("ul"),Z4=a("li"),iTe=a("strong"),L2r=o("detr"),y2r=o(" \u2014 "),zH=a("a"),x2r=o("DetrForSegmentation"),$2r=o(" (DETR model)"),k2r=l(),eE=a("p"),S2r=o("The model is set in evaluation mode by default using "),dTe=a("code"),R2r=o("model.eval()"),P2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cTe=a("code"),B2r=o("model.train()"),I2r=l(),F(oE.$$.fragment),zXe=l(),Zd=a("h2"),rE=a("a"),mTe=a("span"),F(S9.$$.fragment),N2r=l(),fTe=a("span"),q2r=o("AutoModelForSemanticSegmentation"),QXe=l(),Ko=a("div"),F(R9.$$.fragment),j2r=l(),ec=a("p"),D2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),QH=a("a"),G2r=o("from_pretrained()"),O2r=o(" class method or the "),WH=a("a"),V2r=o("from_config()"),X2r=o(` class
method.`),z2r=l(),P9=a("p"),Q2r=o("This class cannot be instantiated directly using "),gTe=a("code"),W2r=o("__init__()"),H2r=o(" (throws an error)."),U2r=l(),$t=a("div"),F(B9.$$.fragment),J2r=l(),hTe=a("p"),Y2r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),K2r=l(),oc=a("p"),Z2r=o(`Note:
Loading a model from its configuration file does `),uTe=a("strong"),ebr=o("not"),obr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),rbr=o("from_pretrained()"),tbr=o(" to load the model weights."),abr=l(),F(tE.$$.fragment),nbr=l(),vo=a("div"),F(I9.$$.fragment),sbr=l(),pTe=a("p"),lbr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),ibr=l(),an=a("p"),dbr=o("The model class to instantiate is selected based on the "),_Te=a("code"),cbr=o("model_type"),mbr=o(` property of the config object (either
passed as an argument or loaded from `),bTe=a("code"),fbr=o("pretrained_model_name_or_path"),gbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vTe=a("code"),hbr=o("pretrained_model_name_or_path"),ubr=o(":"),pbr=l(),tt=a("ul"),aE=a("li"),FTe=a("strong"),_br=o("beit"),bbr=o(" \u2014 "),UH=a("a"),vbr=o("BeitForSemanticSegmentation"),Fbr=o(" (BEiT model)"),Tbr=l(),nE=a("li"),TTe=a("strong"),Mbr=o("data2vec-vision"),Ebr=o(" \u2014 "),JH=a("a"),Cbr=o("Data2VecVisionForSemanticSegmentation"),wbr=o(" (Data2VecVision model)"),Abr=l(),sE=a("li"),MTe=a("strong"),Lbr=o("dpt"),ybr=o(" \u2014 "),YH=a("a"),xbr=o("DPTForSemanticSegmentation"),$br=o(" (DPT model)"),kbr=l(),lE=a("li"),ETe=a("strong"),Sbr=o("mobilevit"),Rbr=o(" \u2014 "),KH=a("a"),Pbr=o("MobileViTForSemanticSegmentation"),Bbr=o(" (MobileViT model)"),Ibr=l(),iE=a("li"),CTe=a("strong"),Nbr=o("segformer"),qbr=o(" \u2014 "),ZH=a("a"),jbr=o("SegformerForSemanticSegmentation"),Dbr=o(" (SegFormer model)"),Gbr=l(),dE=a("p"),Obr=o("The model is set in evaluation mode by default using "),wTe=a("code"),Vbr=o("model.eval()"),Xbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ATe=a("code"),zbr=o("model.train()"),Qbr=l(),F(cE.$$.fragment),WXe=l(),rc=a("h2"),mE=a("a"),LTe=a("span"),F(N9.$$.fragment),Wbr=l(),yTe=a("span"),Hbr=o("AutoModelForInstanceSegmentation"),HXe=l(),Zo=a("div"),F(q9.$$.fragment),Ubr=l(),tc=a("p"),Jbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),eU=a("a"),Ybr=o("from_pretrained()"),Kbr=o(" class method or the "),oU=a("a"),Zbr=o("from_config()"),evr=o(` class
method.`),ovr=l(),j9=a("p"),rvr=o("This class cannot be instantiated directly using "),xTe=a("code"),tvr=o("__init__()"),avr=o(" (throws an error)."),nvr=l(),kt=a("div"),F(D9.$$.fragment),svr=l(),$Te=a("p"),lvr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ivr=l(),ac=a("p"),dvr=o(`Note:
Loading a model from its configuration file does `),kTe=a("strong"),cvr=o("not"),mvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=a("a"),fvr=o("from_pretrained()"),gvr=o(" to load the model weights."),hvr=l(),F(fE.$$.fragment),uvr=l(),Fo=a("div"),F(G9.$$.fragment),pvr=l(),STe=a("p"),_vr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),bvr=l(),nn=a("p"),vvr=o("The model class to instantiate is selected based on the "),RTe=a("code"),Fvr=o("model_type"),Tvr=o(` property of the config object (either
passed as an argument or loaded from `),PTe=a("code"),Mvr=o("pretrained_model_name_or_path"),Evr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=a("code"),Cvr=o("pretrained_model_name_or_path"),wvr=o(":"),Avr=l(),ITe=a("ul"),gE=a("li"),NTe=a("strong"),Lvr=o("maskformer"),yvr=o(" \u2014 "),tU=a("a"),xvr=o("MaskFormerForInstanceSegmentation"),$vr=o(" (MaskFormer model)"),kvr=l(),hE=a("p"),Svr=o("The model is set in evaluation mode by default using "),qTe=a("code"),Rvr=o("model.eval()"),Pvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jTe=a("code"),Bvr=o("model.train()"),Ivr=l(),F(uE.$$.fragment),UXe=l(),nc=a("h2"),pE=a("a"),DTe=a("span"),F(O9.$$.fragment),Nvr=l(),GTe=a("span"),qvr=o("TFAutoModel"),JXe=l(),er=a("div"),F(V9.$$.fragment),jvr=l(),sc=a("p"),Dvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aU=a("a"),Gvr=o("from_pretrained()"),Ovr=o(" class method or the "),nU=a("a"),Vvr=o("from_config()"),Xvr=o(` class
method.`),zvr=l(),X9=a("p"),Qvr=o("This class cannot be instantiated directly using "),OTe=a("code"),Wvr=o("__init__()"),Hvr=o(" (throws an error)."),Uvr=l(),St=a("div"),F(z9.$$.fragment),Jvr=l(),VTe=a("p"),Yvr=o("Instantiates one of the base model classes of the library from a configuration."),Kvr=l(),lc=a("p"),Zvr=o(`Note:
Loading a model from its configuration file does `),XTe=a("strong"),e1r=o("not"),o1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=a("a"),r1r=o("from_pretrained()"),t1r=o(" to load the model weights."),a1r=l(),F(_E.$$.fragment),n1r=l(),xr=a("div"),F(Q9.$$.fragment),s1r=l(),zTe=a("p"),l1r=o("Instantiate one of the base model classes of the library from a pretrained model."),i1r=l(),sn=a("p"),d1r=o("The model class to instantiate is selected based on the "),QTe=a("code"),c1r=o("model_type"),m1r=o(` property of the config object (either
passed as an argument or loaded from `),WTe=a("code"),f1r=o("pretrained_model_name_or_path"),g1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HTe=a("code"),h1r=o("pretrained_model_name_or_path"),u1r=o(":"),p1r=l(),q=a("ul"),bE=a("li"),UTe=a("strong"),_1r=o("albert"),b1r=o(" \u2014 "),lU=a("a"),v1r=o("TFAlbertModel"),F1r=o(" (ALBERT model)"),T1r=l(),vE=a("li"),JTe=a("strong"),M1r=o("bart"),E1r=o(" \u2014 "),iU=a("a"),C1r=o("TFBartModel"),w1r=o(" (BART model)"),A1r=l(),FE=a("li"),YTe=a("strong"),L1r=o("bert"),y1r=o(" \u2014 "),dU=a("a"),x1r=o("TFBertModel"),$1r=o(" (BERT model)"),k1r=l(),TE=a("li"),KTe=a("strong"),S1r=o("blenderbot"),R1r=o(" \u2014 "),cU=a("a"),P1r=o("TFBlenderbotModel"),B1r=o(" (Blenderbot model)"),I1r=l(),ME=a("li"),ZTe=a("strong"),N1r=o("blenderbot-small"),q1r=o(" \u2014 "),mU=a("a"),j1r=o("TFBlenderbotSmallModel"),D1r=o(" (BlenderbotSmall model)"),G1r=l(),EE=a("li"),eMe=a("strong"),O1r=o("camembert"),V1r=o(" \u2014 "),fU=a("a"),X1r=o("TFCamembertModel"),z1r=o(" (CamemBERT model)"),Q1r=l(),CE=a("li"),oMe=a("strong"),W1r=o("clip"),H1r=o(" \u2014 "),gU=a("a"),U1r=o("TFCLIPModel"),J1r=o(" (CLIP model)"),Y1r=l(),wE=a("li"),rMe=a("strong"),K1r=o("convbert"),Z1r=o(" \u2014 "),hU=a("a"),eFr=o("TFConvBertModel"),oFr=o(" (ConvBERT model)"),rFr=l(),AE=a("li"),tMe=a("strong"),tFr=o("convnext"),aFr=o(" \u2014 "),uU=a("a"),nFr=o("TFConvNextModel"),sFr=o(" (ConvNeXT model)"),lFr=l(),LE=a("li"),aMe=a("strong"),iFr=o("ctrl"),dFr=o(" \u2014 "),pU=a("a"),cFr=o("TFCTRLModel"),mFr=o(" (CTRL model)"),fFr=l(),yE=a("li"),nMe=a("strong"),gFr=o("data2vec-vision"),hFr=o(" \u2014 "),_U=a("a"),uFr=o("TFData2VecVisionModel"),pFr=o(" (Data2VecVision model)"),_Fr=l(),xE=a("li"),sMe=a("strong"),bFr=o("deberta"),vFr=o(" \u2014 "),bU=a("a"),FFr=o("TFDebertaModel"),TFr=o(" (DeBERTa model)"),MFr=l(),$E=a("li"),lMe=a("strong"),EFr=o("deberta-v2"),CFr=o(" \u2014 "),vU=a("a"),wFr=o("TFDebertaV2Model"),AFr=o(" (DeBERTa-v2 model)"),LFr=l(),kE=a("li"),iMe=a("strong"),yFr=o("distilbert"),xFr=o(" \u2014 "),FU=a("a"),$Fr=o("TFDistilBertModel"),kFr=o(" (DistilBERT model)"),SFr=l(),SE=a("li"),dMe=a("strong"),RFr=o("dpr"),PFr=o(" \u2014 "),TU=a("a"),BFr=o("TFDPRQuestionEncoder"),IFr=o(" (DPR model)"),NFr=l(),RE=a("li"),cMe=a("strong"),qFr=o("electra"),jFr=o(" \u2014 "),MU=a("a"),DFr=o("TFElectraModel"),GFr=o(" (ELECTRA model)"),OFr=l(),PE=a("li"),mMe=a("strong"),VFr=o("flaubert"),XFr=o(" \u2014 "),EU=a("a"),zFr=o("TFFlaubertModel"),QFr=o(" (FlauBERT model)"),WFr=l(),Js=a("li"),fMe=a("strong"),HFr=o("funnel"),UFr=o(" \u2014 "),CU=a("a"),JFr=o("TFFunnelModel"),YFr=o(" or "),wU=a("a"),KFr=o("TFFunnelBaseModel"),ZFr=o(" (Funnel Transformer model)"),eTr=l(),BE=a("li"),gMe=a("strong"),oTr=o("gpt2"),rTr=o(" \u2014 "),AU=a("a"),tTr=o("TFGPT2Model"),aTr=o(" (OpenAI GPT-2 model)"),nTr=l(),IE=a("li"),hMe=a("strong"),sTr=o("gptj"),lTr=o(" \u2014 "),LU=a("a"),iTr=o("TFGPTJModel"),dTr=o(" (GPT-J model)"),cTr=l(),NE=a("li"),uMe=a("strong"),mTr=o("hubert"),fTr=o(" \u2014 "),yU=a("a"),gTr=o("TFHubertModel"),hTr=o(" (Hubert model)"),uTr=l(),qE=a("li"),pMe=a("strong"),pTr=o("layoutlm"),_Tr=o(" \u2014 "),xU=a("a"),bTr=o("TFLayoutLMModel"),vTr=o(" (LayoutLM model)"),FTr=l(),jE=a("li"),_Me=a("strong"),TTr=o("led"),MTr=o(" \u2014 "),$U=a("a"),ETr=o("TFLEDModel"),CTr=o(" (LED model)"),wTr=l(),DE=a("li"),bMe=a("strong"),ATr=o("longformer"),LTr=o(" \u2014 "),kU=a("a"),yTr=o("TFLongformerModel"),xTr=o(" (Longformer model)"),$Tr=l(),GE=a("li"),vMe=a("strong"),kTr=o("lxmert"),STr=o(" \u2014 "),SU=a("a"),RTr=o("TFLxmertModel"),PTr=o(" (LXMERT model)"),BTr=l(),OE=a("li"),FMe=a("strong"),ITr=o("marian"),NTr=o(" \u2014 "),RU=a("a"),qTr=o("TFMarianModel"),jTr=o(" (Marian model)"),DTr=l(),VE=a("li"),TMe=a("strong"),GTr=o("mbart"),OTr=o(" \u2014 "),PU=a("a"),VTr=o("TFMBartModel"),XTr=o(" (mBART model)"),zTr=l(),XE=a("li"),MMe=a("strong"),QTr=o("mobilebert"),WTr=o(" \u2014 "),BU=a("a"),HTr=o("TFMobileBertModel"),UTr=o(" (MobileBERT model)"),JTr=l(),zE=a("li"),EMe=a("strong"),YTr=o("mpnet"),KTr=o(" \u2014 "),IU=a("a"),ZTr=o("TFMPNetModel"),eMr=o(" (MPNet model)"),oMr=l(),QE=a("li"),CMe=a("strong"),rMr=o("mt5"),tMr=o(" \u2014 "),NU=a("a"),aMr=o("TFMT5Model"),nMr=o(" (MT5 model)"),sMr=l(),WE=a("li"),wMe=a("strong"),lMr=o("openai-gpt"),iMr=o(" \u2014 "),qU=a("a"),dMr=o("TFOpenAIGPTModel"),cMr=o(" (OpenAI GPT model)"),mMr=l(),HE=a("li"),AMe=a("strong"),fMr=o("opt"),gMr=o(" \u2014 "),jU=a("a"),hMr=o("TFOPTModel"),uMr=o(" (OPT model)"),pMr=l(),UE=a("li"),LMe=a("strong"),_Mr=o("pegasus"),bMr=o(" \u2014 "),DU=a("a"),vMr=o("TFPegasusModel"),FMr=o(" (Pegasus model)"),TMr=l(),JE=a("li"),yMe=a("strong"),MMr=o("regnet"),EMr=o(" \u2014 "),GU=a("a"),CMr=o("TFRegNetModel"),wMr=o(" (RegNet model)"),AMr=l(),YE=a("li"),xMe=a("strong"),LMr=o("rembert"),yMr=o(" \u2014 "),OU=a("a"),xMr=o("TFRemBertModel"),$Mr=o(" (RemBERT model)"),kMr=l(),KE=a("li"),$Me=a("strong"),SMr=o("resnet"),RMr=o(" \u2014 "),VU=a("a"),PMr=o("TFResNetModel"),BMr=o(" (ResNet model)"),IMr=l(),ZE=a("li"),kMe=a("strong"),NMr=o("roberta"),qMr=o(" \u2014 "),XU=a("a"),jMr=o("TFRobertaModel"),DMr=o(" (RoBERTa model)"),GMr=l(),eC=a("li"),SMe=a("strong"),OMr=o("roformer"),VMr=o(" \u2014 "),zU=a("a"),XMr=o("TFRoFormerModel"),zMr=o(" (RoFormer model)"),QMr=l(),oC=a("li"),RMe=a("strong"),WMr=o("speech_to_text"),HMr=o(" \u2014 "),QU=a("a"),UMr=o("TFSpeech2TextModel"),JMr=o(" (Speech2Text model)"),YMr=l(),rC=a("li"),PMe=a("strong"),KMr=o("swin"),ZMr=o(" \u2014 "),WU=a("a"),e4r=o("TFSwinModel"),o4r=o(" (Swin Transformer model)"),r4r=l(),tC=a("li"),BMe=a("strong"),t4r=o("t5"),a4r=o(" \u2014 "),HU=a("a"),n4r=o("TFT5Model"),s4r=o(" (T5 model)"),l4r=l(),aC=a("li"),IMe=a("strong"),i4r=o("tapas"),d4r=o(" \u2014 "),UU=a("a"),c4r=o("TFTapasModel"),m4r=o(" (TAPAS model)"),f4r=l(),nC=a("li"),NMe=a("strong"),g4r=o("transfo-xl"),h4r=o(" \u2014 "),JU=a("a"),u4r=o("TFTransfoXLModel"),p4r=o(" (Transformer-XL model)"),_4r=l(),sC=a("li"),qMe=a("strong"),b4r=o("vit"),v4r=o(" \u2014 "),YU=a("a"),F4r=o("TFViTModel"),T4r=o(" (ViT model)"),M4r=l(),lC=a("li"),jMe=a("strong"),E4r=o("vit_mae"),C4r=o(" \u2014 "),KU=a("a"),w4r=o("TFViTMAEModel"),A4r=o(" (ViTMAE model)"),L4r=l(),iC=a("li"),DMe=a("strong"),y4r=o("wav2vec2"),x4r=o(" \u2014 "),ZU=a("a"),$4r=o("TFWav2Vec2Model"),k4r=o(" (Wav2Vec2 model)"),S4r=l(),dC=a("li"),GMe=a("strong"),R4r=o("xlm"),P4r=o(" \u2014 "),eJ=a("a"),B4r=o("TFXLMModel"),I4r=o(" (XLM model)"),N4r=l(),cC=a("li"),OMe=a("strong"),q4r=o("xlm-roberta"),j4r=o(" \u2014 "),oJ=a("a"),D4r=o("TFXLMRobertaModel"),G4r=o(" (XLM-RoBERTa model)"),O4r=l(),mC=a("li"),VMe=a("strong"),V4r=o("xlnet"),X4r=o(" \u2014 "),rJ=a("a"),z4r=o("TFXLNetModel"),Q4r=o(" (XLNet model)"),W4r=l(),F(fC.$$.fragment),YXe=l(),ic=a("h2"),gC=a("a"),XMe=a("span"),F(W9.$$.fragment),H4r=l(),zMe=a("span"),U4r=o("TFAutoModelForPreTraining"),KXe=l(),or=a("div"),F(H9.$$.fragment),J4r=l(),dc=a("p"),Y4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tJ=a("a"),K4r=o("from_pretrained()"),Z4r=o(" class method or the "),aJ=a("a"),eEr=o("from_config()"),oEr=o(` class
method.`),rEr=l(),U9=a("p"),tEr=o("This class cannot be instantiated directly using "),QMe=a("code"),aEr=o("__init__()"),nEr=o(" (throws an error)."),sEr=l(),Rt=a("div"),F(J9.$$.fragment),lEr=l(),WMe=a("p"),iEr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),dEr=l(),cc=a("p"),cEr=o(`Note:
Loading a model from its configuration file does `),HMe=a("strong"),mEr=o("not"),fEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=a("a"),gEr=o("from_pretrained()"),hEr=o(" to load the model weights."),uEr=l(),F(hC.$$.fragment),pEr=l(),$r=a("div"),F(Y9.$$.fragment),_Er=l(),UMe=a("p"),bEr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),vEr=l(),ln=a("p"),FEr=o("The model class to instantiate is selected based on the "),JMe=a("code"),TEr=o("model_type"),MEr=o(` property of the config object (either
passed as an argument or loaded from `),YMe=a("code"),EEr=o("pretrained_model_name_or_path"),CEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KMe=a("code"),wEr=o("pretrained_model_name_or_path"),AEr=o(":"),LEr=l(),se=a("ul"),uC=a("li"),ZMe=a("strong"),yEr=o("albert"),xEr=o(" \u2014 "),sJ=a("a"),$Er=o("TFAlbertForPreTraining"),kEr=o(" (ALBERT model)"),SEr=l(),pC=a("li"),e4e=a("strong"),REr=o("bart"),PEr=o(" \u2014 "),lJ=a("a"),BEr=o("TFBartForConditionalGeneration"),IEr=o(" (BART model)"),NEr=l(),_C=a("li"),o4e=a("strong"),qEr=o("bert"),jEr=o(" \u2014 "),iJ=a("a"),DEr=o("TFBertForPreTraining"),GEr=o(" (BERT model)"),OEr=l(),bC=a("li"),r4e=a("strong"),VEr=o("camembert"),XEr=o(" \u2014 "),dJ=a("a"),zEr=o("TFCamembertForMaskedLM"),QEr=o(" (CamemBERT model)"),WEr=l(),vC=a("li"),t4e=a("strong"),HEr=o("ctrl"),UEr=o(" \u2014 "),cJ=a("a"),JEr=o("TFCTRLLMHeadModel"),YEr=o(" (CTRL model)"),KEr=l(),FC=a("li"),a4e=a("strong"),ZEr=o("distilbert"),eCr=o(" \u2014 "),mJ=a("a"),oCr=o("TFDistilBertForMaskedLM"),rCr=o(" (DistilBERT model)"),tCr=l(),TC=a("li"),n4e=a("strong"),aCr=o("electra"),nCr=o(" \u2014 "),fJ=a("a"),sCr=o("TFElectraForPreTraining"),lCr=o(" (ELECTRA model)"),iCr=l(),MC=a("li"),s4e=a("strong"),dCr=o("flaubert"),cCr=o(" \u2014 "),gJ=a("a"),mCr=o("TFFlaubertWithLMHeadModel"),fCr=o(" (FlauBERT model)"),gCr=l(),EC=a("li"),l4e=a("strong"),hCr=o("funnel"),uCr=o(" \u2014 "),hJ=a("a"),pCr=o("TFFunnelForPreTraining"),_Cr=o(" (Funnel Transformer model)"),bCr=l(),CC=a("li"),i4e=a("strong"),vCr=o("gpt2"),FCr=o(" \u2014 "),uJ=a("a"),TCr=o("TFGPT2LMHeadModel"),MCr=o(" (OpenAI GPT-2 model)"),ECr=l(),wC=a("li"),d4e=a("strong"),CCr=o("layoutlm"),wCr=o(" \u2014 "),pJ=a("a"),ACr=o("TFLayoutLMForMaskedLM"),LCr=o(" (LayoutLM model)"),yCr=l(),AC=a("li"),c4e=a("strong"),xCr=o("lxmert"),$Cr=o(" \u2014 "),_J=a("a"),kCr=o("TFLxmertForPreTraining"),SCr=o(" (LXMERT model)"),RCr=l(),LC=a("li"),m4e=a("strong"),PCr=o("mobilebert"),BCr=o(" \u2014 "),bJ=a("a"),ICr=o("TFMobileBertForPreTraining"),NCr=o(" (MobileBERT model)"),qCr=l(),yC=a("li"),f4e=a("strong"),jCr=o("mpnet"),DCr=o(" \u2014 "),vJ=a("a"),GCr=o("TFMPNetForMaskedLM"),OCr=o(" (MPNet model)"),VCr=l(),xC=a("li"),g4e=a("strong"),XCr=o("openai-gpt"),zCr=o(" \u2014 "),FJ=a("a"),QCr=o("TFOpenAIGPTLMHeadModel"),WCr=o(" (OpenAI GPT model)"),HCr=l(),$C=a("li"),h4e=a("strong"),UCr=o("roberta"),JCr=o(" \u2014 "),TJ=a("a"),YCr=o("TFRobertaForMaskedLM"),KCr=o(" (RoBERTa model)"),ZCr=l(),kC=a("li"),u4e=a("strong"),e3r=o("t5"),o3r=o(" \u2014 "),MJ=a("a"),r3r=o("TFT5ForConditionalGeneration"),t3r=o(" (T5 model)"),a3r=l(),SC=a("li"),p4e=a("strong"),n3r=o("tapas"),s3r=o(" \u2014 "),EJ=a("a"),l3r=o("TFTapasForMaskedLM"),i3r=o(" (TAPAS model)"),d3r=l(),RC=a("li"),_4e=a("strong"),c3r=o("transfo-xl"),m3r=o(" \u2014 "),CJ=a("a"),f3r=o("TFTransfoXLLMHeadModel"),g3r=o(" (Transformer-XL model)"),h3r=l(),PC=a("li"),b4e=a("strong"),u3r=o("vit_mae"),p3r=o(" \u2014 "),wJ=a("a"),_3r=o("TFViTMAEForPreTraining"),b3r=o(" (ViTMAE model)"),v3r=l(),BC=a("li"),v4e=a("strong"),F3r=o("xlm"),T3r=o(" \u2014 "),AJ=a("a"),M3r=o("TFXLMWithLMHeadModel"),E3r=o(" (XLM model)"),C3r=l(),IC=a("li"),F4e=a("strong"),w3r=o("xlm-roberta"),A3r=o(" \u2014 "),LJ=a("a"),L3r=o("TFXLMRobertaForMaskedLM"),y3r=o(" (XLM-RoBERTa model)"),x3r=l(),NC=a("li"),T4e=a("strong"),$3r=o("xlnet"),k3r=o(" \u2014 "),yJ=a("a"),S3r=o("TFXLNetLMHeadModel"),R3r=o(" (XLNet model)"),P3r=l(),F(qC.$$.fragment),ZXe=l(),mc=a("h2"),jC=a("a"),M4e=a("span"),F(K9.$$.fragment),B3r=l(),E4e=a("span"),I3r=o("TFAutoModelForCausalLM"),eze=l(),rr=a("div"),F(Z9.$$.fragment),N3r=l(),fc=a("p"),q3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),xJ=a("a"),j3r=o("from_pretrained()"),D3r=o(" class method or the "),$J=a("a"),G3r=o("from_config()"),O3r=o(` class
method.`),V3r=l(),ex=a("p"),X3r=o("This class cannot be instantiated directly using "),C4e=a("code"),z3r=o("__init__()"),Q3r=o(" (throws an error)."),W3r=l(),Pt=a("div"),F(ox.$$.fragment),H3r=l(),w4e=a("p"),U3r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),J3r=l(),gc=a("p"),Y3r=o(`Note:
Loading a model from its configuration file does `),A4e=a("strong"),K3r=o("not"),Z3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=a("a"),e5r=o("from_pretrained()"),o5r=o(" to load the model weights."),r5r=l(),F(DC.$$.fragment),t5r=l(),kr=a("div"),F(rx.$$.fragment),a5r=l(),L4e=a("p"),n5r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),s5r=l(),dn=a("p"),l5r=o("The model class to instantiate is selected based on the "),y4e=a("code"),i5r=o("model_type"),d5r=o(` property of the config object (either
passed as an argument or loaded from `),x4e=a("code"),c5r=o("pretrained_model_name_or_path"),m5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$4e=a("code"),f5r=o("pretrained_model_name_or_path"),g5r=o(":"),h5r=l(),Me=a("ul"),GC=a("li"),k4e=a("strong"),u5r=o("bert"),p5r=o(" \u2014 "),SJ=a("a"),_5r=o("TFBertLMHeadModel"),b5r=o(" (BERT model)"),v5r=l(),OC=a("li"),S4e=a("strong"),F5r=o("camembert"),T5r=o(" \u2014 "),RJ=a("a"),M5r=o("TFCamembertForCausalLM"),E5r=o(" (CamemBERT model)"),C5r=l(),VC=a("li"),R4e=a("strong"),w5r=o("ctrl"),A5r=o(" \u2014 "),PJ=a("a"),L5r=o("TFCTRLLMHeadModel"),y5r=o(" (CTRL model)"),x5r=l(),XC=a("li"),P4e=a("strong"),$5r=o("gpt2"),k5r=o(" \u2014 "),BJ=a("a"),S5r=o("TFGPT2LMHeadModel"),R5r=o(" (OpenAI GPT-2 model)"),P5r=l(),zC=a("li"),B4e=a("strong"),B5r=o("gptj"),I5r=o(" \u2014 "),IJ=a("a"),N5r=o("TFGPTJForCausalLM"),q5r=o(" (GPT-J model)"),j5r=l(),QC=a("li"),I4e=a("strong"),D5r=o("openai-gpt"),G5r=o(" \u2014 "),NJ=a("a"),O5r=o("TFOpenAIGPTLMHeadModel"),V5r=o(" (OpenAI GPT model)"),X5r=l(),WC=a("li"),N4e=a("strong"),z5r=o("opt"),Q5r=o(" \u2014 "),qJ=a("a"),W5r=o("TFOPTForCausalLM"),H5r=o(" (OPT model)"),U5r=l(),HC=a("li"),q4e=a("strong"),J5r=o("rembert"),Y5r=o(" \u2014 "),jJ=a("a"),K5r=o("TFRemBertForCausalLM"),Z5r=o(" (RemBERT model)"),e0r=l(),UC=a("li"),j4e=a("strong"),o0r=o("roberta"),r0r=o(" \u2014 "),DJ=a("a"),t0r=o("TFRobertaForCausalLM"),a0r=o(" (RoBERTa model)"),n0r=l(),JC=a("li"),D4e=a("strong"),s0r=o("roformer"),l0r=o(" \u2014 "),GJ=a("a"),i0r=o("TFRoFormerForCausalLM"),d0r=o(" (RoFormer model)"),c0r=l(),YC=a("li"),G4e=a("strong"),m0r=o("transfo-xl"),f0r=o(" \u2014 "),OJ=a("a"),g0r=o("TFTransfoXLLMHeadModel"),h0r=o(" (Transformer-XL model)"),u0r=l(),KC=a("li"),O4e=a("strong"),p0r=o("xlm"),_0r=o(" \u2014 "),VJ=a("a"),b0r=o("TFXLMWithLMHeadModel"),v0r=o(" (XLM model)"),F0r=l(),ZC=a("li"),V4e=a("strong"),T0r=o("xlnet"),M0r=o(" \u2014 "),XJ=a("a"),E0r=o("TFXLNetLMHeadModel"),C0r=o(" (XLNet model)"),w0r=l(),F(e3.$$.fragment),oze=l(),hc=a("h2"),o3=a("a"),X4e=a("span"),F(tx.$$.fragment),A0r=l(),z4e=a("span"),L0r=o("TFAutoModelForImageClassification"),rze=l(),tr=a("div"),F(ax.$$.fragment),y0r=l(),uc=a("p"),x0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zJ=a("a"),$0r=o("from_pretrained()"),k0r=o(" class method or the "),QJ=a("a"),S0r=o("from_config()"),R0r=o(` class
method.`),P0r=l(),nx=a("p"),B0r=o("This class cannot be instantiated directly using "),Q4e=a("code"),I0r=o("__init__()"),N0r=o(" (throws an error)."),q0r=l(),Bt=a("div"),F(sx.$$.fragment),j0r=l(),W4e=a("p"),D0r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),G0r=l(),pc=a("p"),O0r=o(`Note:
Loading a model from its configuration file does `),H4e=a("strong"),V0r=o("not"),X0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=a("a"),z0r=o("from_pretrained()"),Q0r=o(" to load the model weights."),W0r=l(),F(r3.$$.fragment),H0r=l(),Sr=a("div"),F(lx.$$.fragment),U0r=l(),U4e=a("p"),J0r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Y0r=l(),cn=a("p"),K0r=o("The model class to instantiate is selected based on the "),J4e=a("code"),Z0r=o("model_type"),ewr=o(` property of the config object (either
passed as an argument or loaded from `),Y4e=a("code"),owr=o("pretrained_model_name_or_path"),rwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K4e=a("code"),twr=o("pretrained_model_name_or_path"),awr=o(":"),nwr=l(),ar=a("ul"),t3=a("li"),Z4e=a("strong"),swr=o("convnext"),lwr=o(" \u2014 "),HJ=a("a"),iwr=o("TFConvNextForImageClassification"),dwr=o(" (ConvNeXT model)"),cwr=l(),a3=a("li"),eEe=a("strong"),mwr=o("data2vec-vision"),fwr=o(" \u2014 "),UJ=a("a"),gwr=o("TFData2VecVisionForImageClassification"),hwr=o(" (Data2VecVision model)"),uwr=l(),n3=a("li"),oEe=a("strong"),pwr=o("regnet"),_wr=o(" \u2014 "),JJ=a("a"),bwr=o("TFRegNetForImageClassification"),vwr=o(" (RegNet model)"),Fwr=l(),s3=a("li"),rEe=a("strong"),Twr=o("resnet"),Mwr=o(" \u2014 "),YJ=a("a"),Ewr=o("TFResNetForImageClassification"),Cwr=o(" (ResNet model)"),wwr=l(),l3=a("li"),tEe=a("strong"),Awr=o("swin"),Lwr=o(" \u2014 "),KJ=a("a"),ywr=o("TFSwinForImageClassification"),xwr=o(" (Swin Transformer model)"),$wr=l(),i3=a("li"),aEe=a("strong"),kwr=o("vit"),Swr=o(" \u2014 "),ZJ=a("a"),Rwr=o("TFViTForImageClassification"),Pwr=o(" (ViT model)"),Bwr=l(),F(d3.$$.fragment),tze=l(),_c=a("h2"),c3=a("a"),nEe=a("span"),F(ix.$$.fragment),Iwr=l(),sEe=a("span"),Nwr=o("TFAutoModelForMaskedLM"),aze=l(),nr=a("div"),F(dx.$$.fragment),qwr=l(),bc=a("p"),jwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eY=a("a"),Dwr=o("from_pretrained()"),Gwr=o(" class method or the "),oY=a("a"),Owr=o("from_config()"),Vwr=o(` class
method.`),Xwr=l(),cx=a("p"),zwr=o("This class cannot be instantiated directly using "),lEe=a("code"),Qwr=o("__init__()"),Wwr=o(" (throws an error)."),Hwr=l(),It=a("div"),F(mx.$$.fragment),Uwr=l(),iEe=a("p"),Jwr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ywr=l(),vc=a("p"),Kwr=o(`Note:
Loading a model from its configuration file does `),dEe=a("strong"),Zwr=o("not"),eAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=a("a"),oAr=o("from_pretrained()"),rAr=o(" to load the model weights."),tAr=l(),F(m3.$$.fragment),aAr=l(),Rr=a("div"),F(fx.$$.fragment),nAr=l(),cEe=a("p"),sAr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lAr=l(),mn=a("p"),iAr=o("The model class to instantiate is selected based on the "),mEe=a("code"),dAr=o("model_type"),cAr=o(` property of the config object (either
passed as an argument or loaded from `),fEe=a("code"),mAr=o("pretrained_model_name_or_path"),fAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gEe=a("code"),gAr=o("pretrained_model_name_or_path"),hAr=o(":"),uAr=l(),ie=a("ul"),f3=a("li"),hEe=a("strong"),pAr=o("albert"),_Ar=o(" \u2014 "),tY=a("a"),bAr=o("TFAlbertForMaskedLM"),vAr=o(" (ALBERT model)"),FAr=l(),g3=a("li"),uEe=a("strong"),TAr=o("bert"),MAr=o(" \u2014 "),aY=a("a"),EAr=o("TFBertForMaskedLM"),CAr=o(" (BERT model)"),wAr=l(),h3=a("li"),pEe=a("strong"),AAr=o("camembert"),LAr=o(" \u2014 "),nY=a("a"),yAr=o("TFCamembertForMaskedLM"),xAr=o(" (CamemBERT model)"),$Ar=l(),u3=a("li"),_Ee=a("strong"),kAr=o("convbert"),SAr=o(" \u2014 "),sY=a("a"),RAr=o("TFConvBertForMaskedLM"),PAr=o(" (ConvBERT model)"),BAr=l(),p3=a("li"),bEe=a("strong"),IAr=o("deberta"),NAr=o(" \u2014 "),lY=a("a"),qAr=o("TFDebertaForMaskedLM"),jAr=o(" (DeBERTa model)"),DAr=l(),_3=a("li"),vEe=a("strong"),GAr=o("deberta-v2"),OAr=o(" \u2014 "),iY=a("a"),VAr=o("TFDebertaV2ForMaskedLM"),XAr=o(" (DeBERTa-v2 model)"),zAr=l(),b3=a("li"),FEe=a("strong"),QAr=o("distilbert"),WAr=o(" \u2014 "),dY=a("a"),HAr=o("TFDistilBertForMaskedLM"),UAr=o(" (DistilBERT model)"),JAr=l(),v3=a("li"),TEe=a("strong"),YAr=o("electra"),KAr=o(" \u2014 "),cY=a("a"),ZAr=o("TFElectraForMaskedLM"),e6r=o(" (ELECTRA model)"),o6r=l(),F3=a("li"),MEe=a("strong"),r6r=o("flaubert"),t6r=o(" \u2014 "),mY=a("a"),a6r=o("TFFlaubertWithLMHeadModel"),n6r=o(" (FlauBERT model)"),s6r=l(),T3=a("li"),EEe=a("strong"),l6r=o("funnel"),i6r=o(" \u2014 "),fY=a("a"),d6r=o("TFFunnelForMaskedLM"),c6r=o(" (Funnel Transformer model)"),m6r=l(),M3=a("li"),CEe=a("strong"),f6r=o("layoutlm"),g6r=o(" \u2014 "),gY=a("a"),h6r=o("TFLayoutLMForMaskedLM"),u6r=o(" (LayoutLM model)"),p6r=l(),E3=a("li"),wEe=a("strong"),_6r=o("longformer"),b6r=o(" \u2014 "),hY=a("a"),v6r=o("TFLongformerForMaskedLM"),F6r=o(" (Longformer model)"),T6r=l(),C3=a("li"),AEe=a("strong"),M6r=o("mobilebert"),E6r=o(" \u2014 "),uY=a("a"),C6r=o("TFMobileBertForMaskedLM"),w6r=o(" (MobileBERT model)"),A6r=l(),w3=a("li"),LEe=a("strong"),L6r=o("mpnet"),y6r=o(" \u2014 "),pY=a("a"),x6r=o("TFMPNetForMaskedLM"),$6r=o(" (MPNet model)"),k6r=l(),A3=a("li"),yEe=a("strong"),S6r=o("rembert"),R6r=o(" \u2014 "),_Y=a("a"),P6r=o("TFRemBertForMaskedLM"),B6r=o(" (RemBERT model)"),I6r=l(),L3=a("li"),xEe=a("strong"),N6r=o("roberta"),q6r=o(" \u2014 "),bY=a("a"),j6r=o("TFRobertaForMaskedLM"),D6r=o(" (RoBERTa model)"),G6r=l(),y3=a("li"),$Ee=a("strong"),O6r=o("roformer"),V6r=o(" \u2014 "),vY=a("a"),X6r=o("TFRoFormerForMaskedLM"),z6r=o(" (RoFormer model)"),Q6r=l(),x3=a("li"),kEe=a("strong"),W6r=o("tapas"),H6r=o(" \u2014 "),FY=a("a"),U6r=o("TFTapasForMaskedLM"),J6r=o(" (TAPAS model)"),Y6r=l(),$3=a("li"),SEe=a("strong"),K6r=o("xlm"),Z6r=o(" \u2014 "),TY=a("a"),e7r=o("TFXLMWithLMHeadModel"),o7r=o(" (XLM model)"),r7r=l(),k3=a("li"),REe=a("strong"),t7r=o("xlm-roberta"),a7r=o(" \u2014 "),MY=a("a"),n7r=o("TFXLMRobertaForMaskedLM"),s7r=o(" (XLM-RoBERTa model)"),l7r=l(),F(S3.$$.fragment),nze=l(),Fc=a("h2"),R3=a("a"),PEe=a("span"),F(gx.$$.fragment),i7r=l(),BEe=a("span"),d7r=o("TFAutoModelForSeq2SeqLM"),sze=l(),sr=a("div"),F(hx.$$.fragment),c7r=l(),Tc=a("p"),m7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EY=a("a"),f7r=o("from_pretrained()"),g7r=o(" class method or the "),CY=a("a"),h7r=o("from_config()"),u7r=o(` class
method.`),p7r=l(),ux=a("p"),_7r=o("This class cannot be instantiated directly using "),IEe=a("code"),b7r=o("__init__()"),v7r=o(" (throws an error)."),F7r=l(),Nt=a("div"),F(px.$$.fragment),T7r=l(),NEe=a("p"),M7r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),E7r=l(),Mc=a("p"),C7r=o(`Note:
Loading a model from its configuration file does `),qEe=a("strong"),w7r=o("not"),A7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=a("a"),L7r=o("from_pretrained()"),y7r=o(" to load the model weights."),x7r=l(),F(P3.$$.fragment),$7r=l(),Pr=a("div"),F(_x.$$.fragment),k7r=l(),jEe=a("p"),S7r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),R7r=l(),fn=a("p"),P7r=o("The model class to instantiate is selected based on the "),DEe=a("code"),B7r=o("model_type"),I7r=o(` property of the config object (either
passed as an argument or loaded from `),GEe=a("code"),N7r=o("pretrained_model_name_or_path"),q7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OEe=a("code"),j7r=o("pretrained_model_name_or_path"),D7r=o(":"),G7r=l(),ye=a("ul"),B3=a("li"),VEe=a("strong"),O7r=o("bart"),V7r=o(" \u2014 "),AY=a("a"),X7r=o("TFBartForConditionalGeneration"),z7r=o(" (BART model)"),Q7r=l(),I3=a("li"),XEe=a("strong"),W7r=o("blenderbot"),H7r=o(" \u2014 "),LY=a("a"),U7r=o("TFBlenderbotForConditionalGeneration"),J7r=o(" (Blenderbot model)"),Y7r=l(),N3=a("li"),zEe=a("strong"),K7r=o("blenderbot-small"),Z7r=o(" \u2014 "),yY=a("a"),eLr=o("TFBlenderbotSmallForConditionalGeneration"),oLr=o(" (BlenderbotSmall model)"),rLr=l(),q3=a("li"),QEe=a("strong"),tLr=o("encoder-decoder"),aLr=o(" \u2014 "),xY=a("a"),nLr=o("TFEncoderDecoderModel"),sLr=o(" (Encoder decoder model)"),lLr=l(),j3=a("li"),WEe=a("strong"),iLr=o("led"),dLr=o(" \u2014 "),$Y=a("a"),cLr=o("TFLEDForConditionalGeneration"),mLr=o(" (LED model)"),fLr=l(),D3=a("li"),HEe=a("strong"),gLr=o("marian"),hLr=o(" \u2014 "),kY=a("a"),uLr=o("TFMarianMTModel"),pLr=o(" (Marian model)"),_Lr=l(),G3=a("li"),UEe=a("strong"),bLr=o("mbart"),vLr=o(" \u2014 "),SY=a("a"),FLr=o("TFMBartForConditionalGeneration"),TLr=o(" (mBART model)"),MLr=l(),O3=a("li"),JEe=a("strong"),ELr=o("mt5"),CLr=o(" \u2014 "),RY=a("a"),wLr=o("TFMT5ForConditionalGeneration"),ALr=o(" (MT5 model)"),LLr=l(),V3=a("li"),YEe=a("strong"),yLr=o("pegasus"),xLr=o(" \u2014 "),PY=a("a"),$Lr=o("TFPegasusForConditionalGeneration"),kLr=o(" (Pegasus model)"),SLr=l(),X3=a("li"),KEe=a("strong"),RLr=o("t5"),PLr=o(" \u2014 "),BY=a("a"),BLr=o("TFT5ForConditionalGeneration"),ILr=o(" (T5 model)"),NLr=l(),F(z3.$$.fragment),lze=l(),Ec=a("h2"),Q3=a("a"),ZEe=a("span"),F(bx.$$.fragment),qLr=l(),eCe=a("span"),jLr=o("TFAutoModelForSequenceClassification"),ize=l(),lr=a("div"),F(vx.$$.fragment),DLr=l(),Cc=a("p"),GLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),IY=a("a"),OLr=o("from_pretrained()"),VLr=o(" class method or the "),NY=a("a"),XLr=o("from_config()"),zLr=o(` class
method.`),QLr=l(),Fx=a("p"),WLr=o("This class cannot be instantiated directly using "),oCe=a("code"),HLr=o("__init__()"),ULr=o(" (throws an error)."),JLr=l(),qt=a("div"),F(Tx.$$.fragment),YLr=l(),rCe=a("p"),KLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ZLr=l(),wc=a("p"),eyr=o(`Note:
Loading a model from its configuration file does `),tCe=a("strong"),oyr=o("not"),ryr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=a("a"),tyr=o("from_pretrained()"),ayr=o(" to load the model weights."),nyr=l(),F(W3.$$.fragment),syr=l(),Br=a("div"),F(Mx.$$.fragment),lyr=l(),aCe=a("p"),iyr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dyr=l(),gn=a("p"),cyr=o("The model class to instantiate is selected based on the "),nCe=a("code"),myr=o("model_type"),fyr=o(` property of the config object (either
passed as an argument or loaded from `),sCe=a("code"),gyr=o("pretrained_model_name_or_path"),hyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lCe=a("code"),uyr=o("pretrained_model_name_or_path"),pyr=o(":"),_yr=l(),te=a("ul"),H3=a("li"),iCe=a("strong"),byr=o("albert"),vyr=o(" \u2014 "),jY=a("a"),Fyr=o("TFAlbertForSequenceClassification"),Tyr=o(" (ALBERT model)"),Myr=l(),U3=a("li"),dCe=a("strong"),Eyr=o("bert"),Cyr=o(" \u2014 "),DY=a("a"),wyr=o("TFBertForSequenceClassification"),Ayr=o(" (BERT model)"),Lyr=l(),J3=a("li"),cCe=a("strong"),yyr=o("camembert"),xyr=o(" \u2014 "),GY=a("a"),$yr=o("TFCamembertForSequenceClassification"),kyr=o(" (CamemBERT model)"),Syr=l(),Y3=a("li"),mCe=a("strong"),Ryr=o("convbert"),Pyr=o(" \u2014 "),OY=a("a"),Byr=o("TFConvBertForSequenceClassification"),Iyr=o(" (ConvBERT model)"),Nyr=l(),K3=a("li"),fCe=a("strong"),qyr=o("ctrl"),jyr=o(" \u2014 "),VY=a("a"),Dyr=o("TFCTRLForSequenceClassification"),Gyr=o(" (CTRL model)"),Oyr=l(),Z3=a("li"),gCe=a("strong"),Vyr=o("deberta"),Xyr=o(" \u2014 "),XY=a("a"),zyr=o("TFDebertaForSequenceClassification"),Qyr=o(" (DeBERTa model)"),Wyr=l(),e5=a("li"),hCe=a("strong"),Hyr=o("deberta-v2"),Uyr=o(" \u2014 "),zY=a("a"),Jyr=o("TFDebertaV2ForSequenceClassification"),Yyr=o(" (DeBERTa-v2 model)"),Kyr=l(),o5=a("li"),uCe=a("strong"),Zyr=o("distilbert"),e8r=o(" \u2014 "),QY=a("a"),o8r=o("TFDistilBertForSequenceClassification"),r8r=o(" (DistilBERT model)"),t8r=l(),r5=a("li"),pCe=a("strong"),a8r=o("electra"),n8r=o(" \u2014 "),WY=a("a"),s8r=o("TFElectraForSequenceClassification"),l8r=o(" (ELECTRA model)"),i8r=l(),t5=a("li"),_Ce=a("strong"),d8r=o("flaubert"),c8r=o(" \u2014 "),HY=a("a"),m8r=o("TFFlaubertForSequenceClassification"),f8r=o(" (FlauBERT model)"),g8r=l(),a5=a("li"),bCe=a("strong"),h8r=o("funnel"),u8r=o(" \u2014 "),UY=a("a"),p8r=o("TFFunnelForSequenceClassification"),_8r=o(" (Funnel Transformer model)"),b8r=l(),n5=a("li"),vCe=a("strong"),v8r=o("gpt2"),F8r=o(" \u2014 "),JY=a("a"),T8r=o("TFGPT2ForSequenceClassification"),M8r=o(" (OpenAI GPT-2 model)"),E8r=l(),s5=a("li"),FCe=a("strong"),C8r=o("gptj"),w8r=o(" \u2014 "),YY=a("a"),A8r=o("TFGPTJForSequenceClassification"),L8r=o(" (GPT-J model)"),y8r=l(),l5=a("li"),TCe=a("strong"),x8r=o("layoutlm"),$8r=o(" \u2014 "),KY=a("a"),k8r=o("TFLayoutLMForSequenceClassification"),S8r=o(" (LayoutLM model)"),R8r=l(),i5=a("li"),MCe=a("strong"),P8r=o("longformer"),B8r=o(" \u2014 "),ZY=a("a"),I8r=o("TFLongformerForSequenceClassification"),N8r=o(" (Longformer model)"),q8r=l(),d5=a("li"),ECe=a("strong"),j8r=o("mobilebert"),D8r=o(" \u2014 "),eK=a("a"),G8r=o("TFMobileBertForSequenceClassification"),O8r=o(" (MobileBERT model)"),V8r=l(),c5=a("li"),CCe=a("strong"),X8r=o("mpnet"),z8r=o(" \u2014 "),oK=a("a"),Q8r=o("TFMPNetForSequenceClassification"),W8r=o(" (MPNet model)"),H8r=l(),m5=a("li"),wCe=a("strong"),U8r=o("openai-gpt"),J8r=o(" \u2014 "),rK=a("a"),Y8r=o("TFOpenAIGPTForSequenceClassification"),K8r=o(" (OpenAI GPT model)"),Z8r=l(),f5=a("li"),ACe=a("strong"),e9r=o("rembert"),o9r=o(" \u2014 "),tK=a("a"),r9r=o("TFRemBertForSequenceClassification"),t9r=o(" (RemBERT model)"),a9r=l(),g5=a("li"),LCe=a("strong"),n9r=o("roberta"),s9r=o(" \u2014 "),aK=a("a"),l9r=o("TFRobertaForSequenceClassification"),i9r=o(" (RoBERTa model)"),d9r=l(),h5=a("li"),yCe=a("strong"),c9r=o("roformer"),m9r=o(" \u2014 "),nK=a("a"),f9r=o("TFRoFormerForSequenceClassification"),g9r=o(" (RoFormer model)"),h9r=l(),u5=a("li"),xCe=a("strong"),u9r=o("tapas"),p9r=o(" \u2014 "),sK=a("a"),_9r=o("TFTapasForSequenceClassification"),b9r=o(" (TAPAS model)"),v9r=l(),p5=a("li"),$Ce=a("strong"),F9r=o("transfo-xl"),T9r=o(" \u2014 "),lK=a("a"),M9r=o("TFTransfoXLForSequenceClassification"),E9r=o(" (Transformer-XL model)"),C9r=l(),_5=a("li"),kCe=a("strong"),w9r=o("xlm"),A9r=o(" \u2014 "),iK=a("a"),L9r=o("TFXLMForSequenceClassification"),y9r=o(" (XLM model)"),x9r=l(),b5=a("li"),SCe=a("strong"),$9r=o("xlm-roberta"),k9r=o(" \u2014 "),dK=a("a"),S9r=o("TFXLMRobertaForSequenceClassification"),R9r=o(" (XLM-RoBERTa model)"),P9r=l(),v5=a("li"),RCe=a("strong"),B9r=o("xlnet"),I9r=o(" \u2014 "),cK=a("a"),N9r=o("TFXLNetForSequenceClassification"),q9r=o(" (XLNet model)"),j9r=l(),F(F5.$$.fragment),dze=l(),Ac=a("h2"),T5=a("a"),PCe=a("span"),F(Ex.$$.fragment),D9r=l(),BCe=a("span"),G9r=o("TFAutoModelForMultipleChoice"),cze=l(),ir=a("div"),F(Cx.$$.fragment),O9r=l(),Lc=a("p"),V9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mK=a("a"),X9r=o("from_pretrained()"),z9r=o(" class method or the "),fK=a("a"),Q9r=o("from_config()"),W9r=o(` class
method.`),H9r=l(),wx=a("p"),U9r=o("This class cannot be instantiated directly using "),ICe=a("code"),J9r=o("__init__()"),Y9r=o(" (throws an error)."),K9r=l(),jt=a("div"),F(Ax.$$.fragment),Z9r=l(),NCe=a("p"),exr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),oxr=l(),yc=a("p"),rxr=o(`Note:
Loading a model from its configuration file does `),qCe=a("strong"),txr=o("not"),axr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=a("a"),nxr=o("from_pretrained()"),sxr=o(" to load the model weights."),lxr=l(),F(M5.$$.fragment),ixr=l(),Ir=a("div"),F(Lx.$$.fragment),dxr=l(),jCe=a("p"),cxr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mxr=l(),hn=a("p"),fxr=o("The model class to instantiate is selected based on the "),DCe=a("code"),gxr=o("model_type"),hxr=o(` property of the config object (either
passed as an argument or loaded from `),GCe=a("code"),uxr=o("pretrained_model_name_or_path"),pxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OCe=a("code"),_xr=o("pretrained_model_name_or_path"),bxr=o(":"),vxr=l(),pe=a("ul"),E5=a("li"),VCe=a("strong"),Fxr=o("albert"),Txr=o(" \u2014 "),hK=a("a"),Mxr=o("TFAlbertForMultipleChoice"),Exr=o(" (ALBERT model)"),Cxr=l(),C5=a("li"),XCe=a("strong"),wxr=o("bert"),Axr=o(" \u2014 "),uK=a("a"),Lxr=o("TFBertForMultipleChoice"),yxr=o(" (BERT model)"),xxr=l(),w5=a("li"),zCe=a("strong"),$xr=o("camembert"),kxr=o(" \u2014 "),pK=a("a"),Sxr=o("TFCamembertForMultipleChoice"),Rxr=o(" (CamemBERT model)"),Pxr=l(),A5=a("li"),QCe=a("strong"),Bxr=o("convbert"),Ixr=o(" \u2014 "),_K=a("a"),Nxr=o("TFConvBertForMultipleChoice"),qxr=o(" (ConvBERT model)"),jxr=l(),L5=a("li"),WCe=a("strong"),Dxr=o("distilbert"),Gxr=o(" \u2014 "),bK=a("a"),Oxr=o("TFDistilBertForMultipleChoice"),Vxr=o(" (DistilBERT model)"),Xxr=l(),y5=a("li"),HCe=a("strong"),zxr=o("electra"),Qxr=o(" \u2014 "),vK=a("a"),Wxr=o("TFElectraForMultipleChoice"),Hxr=o(" (ELECTRA model)"),Uxr=l(),x5=a("li"),UCe=a("strong"),Jxr=o("flaubert"),Yxr=o(" \u2014 "),FK=a("a"),Kxr=o("TFFlaubertForMultipleChoice"),Zxr=o(" (FlauBERT model)"),e$r=l(),$5=a("li"),JCe=a("strong"),o$r=o("funnel"),r$r=o(" \u2014 "),TK=a("a"),t$r=o("TFFunnelForMultipleChoice"),a$r=o(" (Funnel Transformer model)"),n$r=l(),k5=a("li"),YCe=a("strong"),s$r=o("longformer"),l$r=o(" \u2014 "),MK=a("a"),i$r=o("TFLongformerForMultipleChoice"),d$r=o(" (Longformer model)"),c$r=l(),S5=a("li"),KCe=a("strong"),m$r=o("mobilebert"),f$r=o(" \u2014 "),EK=a("a"),g$r=o("TFMobileBertForMultipleChoice"),h$r=o(" (MobileBERT model)"),u$r=l(),R5=a("li"),ZCe=a("strong"),p$r=o("mpnet"),_$r=o(" \u2014 "),CK=a("a"),b$r=o("TFMPNetForMultipleChoice"),v$r=o(" (MPNet model)"),F$r=l(),P5=a("li"),e3e=a("strong"),T$r=o("rembert"),M$r=o(" \u2014 "),wK=a("a"),E$r=o("TFRemBertForMultipleChoice"),C$r=o(" (RemBERT model)"),w$r=l(),B5=a("li"),o3e=a("strong"),A$r=o("roberta"),L$r=o(" \u2014 "),AK=a("a"),y$r=o("TFRobertaForMultipleChoice"),x$r=o(" (RoBERTa model)"),$$r=l(),I5=a("li"),r3e=a("strong"),k$r=o("roformer"),S$r=o(" \u2014 "),LK=a("a"),R$r=o("TFRoFormerForMultipleChoice"),P$r=o(" (RoFormer model)"),B$r=l(),N5=a("li"),t3e=a("strong"),I$r=o("xlm"),N$r=o(" \u2014 "),yK=a("a"),q$r=o("TFXLMForMultipleChoice"),j$r=o(" (XLM model)"),D$r=l(),q5=a("li"),a3e=a("strong"),G$r=o("xlm-roberta"),O$r=o(" \u2014 "),xK=a("a"),V$r=o("TFXLMRobertaForMultipleChoice"),X$r=o(" (XLM-RoBERTa model)"),z$r=l(),j5=a("li"),n3e=a("strong"),Q$r=o("xlnet"),W$r=o(" \u2014 "),$K=a("a"),H$r=o("TFXLNetForMultipleChoice"),U$r=o(" (XLNet model)"),J$r=l(),F(D5.$$.fragment),mze=l(),xc=a("h2"),G5=a("a"),s3e=a("span"),F(yx.$$.fragment),Y$r=l(),l3e=a("span"),K$r=o("TFAutoModelForNextSentencePrediction"),fze=l(),dr=a("div"),F(xx.$$.fragment),Z$r=l(),$c=a("p"),ekr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kK=a("a"),okr=o("from_pretrained()"),rkr=o(" class method or the "),SK=a("a"),tkr=o("from_config()"),akr=o(` class
method.`),nkr=l(),$x=a("p"),skr=o("This class cannot be instantiated directly using "),i3e=a("code"),lkr=o("__init__()"),ikr=o(" (throws an error)."),dkr=l(),Dt=a("div"),F(kx.$$.fragment),ckr=l(),d3e=a("p"),mkr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),fkr=l(),kc=a("p"),gkr=o(`Note:
Loading a model from its configuration file does `),c3e=a("strong"),hkr=o("not"),ukr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=a("a"),pkr=o("from_pretrained()"),_kr=o(" to load the model weights."),bkr=l(),F(O5.$$.fragment),vkr=l(),Nr=a("div"),F(Sx.$$.fragment),Fkr=l(),m3e=a("p"),Tkr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Mkr=l(),un=a("p"),Ekr=o("The model class to instantiate is selected based on the "),f3e=a("code"),Ckr=o("model_type"),wkr=o(` property of the config object (either
passed as an argument or loaded from `),g3e=a("code"),Akr=o("pretrained_model_name_or_path"),Lkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h3e=a("code"),ykr=o("pretrained_model_name_or_path"),xkr=o(":"),$kr=l(),Rx=a("ul"),V5=a("li"),u3e=a("strong"),kkr=o("bert"),Skr=o(" \u2014 "),PK=a("a"),Rkr=o("TFBertForNextSentencePrediction"),Pkr=o(" (BERT model)"),Bkr=l(),X5=a("li"),p3e=a("strong"),Ikr=o("mobilebert"),Nkr=o(" \u2014 "),BK=a("a"),qkr=o("TFMobileBertForNextSentencePrediction"),jkr=o(" (MobileBERT model)"),Dkr=l(),F(z5.$$.fragment),gze=l(),Sc=a("h2"),Q5=a("a"),_3e=a("span"),F(Px.$$.fragment),Gkr=l(),b3e=a("span"),Okr=o("TFAutoModelForTableQuestionAnswering"),hze=l(),cr=a("div"),F(Bx.$$.fragment),Vkr=l(),Rc=a("p"),Xkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),IK=a("a"),zkr=o("from_pretrained()"),Qkr=o(" class method or the "),NK=a("a"),Wkr=o("from_config()"),Hkr=o(` class
method.`),Ukr=l(),Ix=a("p"),Jkr=o("This class cannot be instantiated directly using "),v3e=a("code"),Ykr=o("__init__()"),Kkr=o(" (throws an error)."),Zkr=l(),Gt=a("div"),F(Nx.$$.fragment),eSr=l(),F3e=a("p"),oSr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rSr=l(),Pc=a("p"),tSr=o(`Note:
Loading a model from its configuration file does `),T3e=a("strong"),aSr=o("not"),nSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=a("a"),sSr=o("from_pretrained()"),lSr=o(" to load the model weights."),iSr=l(),F(W5.$$.fragment),dSr=l(),qr=a("div"),F(qx.$$.fragment),cSr=l(),M3e=a("p"),mSr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),fSr=l(),pn=a("p"),gSr=o("The model class to instantiate is selected based on the "),E3e=a("code"),hSr=o("model_type"),uSr=o(` property of the config object (either
passed as an argument or loaded from `),C3e=a("code"),pSr=o("pretrained_model_name_or_path"),_Sr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w3e=a("code"),bSr=o("pretrained_model_name_or_path"),vSr=o(":"),FSr=l(),A3e=a("ul"),H5=a("li"),L3e=a("strong"),TSr=o("tapas"),MSr=o(" \u2014 "),jK=a("a"),ESr=o("TFTapasForQuestionAnswering"),CSr=o(" (TAPAS model)"),wSr=l(),F(U5.$$.fragment),uze=l(),Bc=a("h2"),J5=a("a"),y3e=a("span"),F(jx.$$.fragment),ASr=l(),x3e=a("span"),LSr=o("TFAutoModelForTokenClassification"),pze=l(),mr=a("div"),F(Dx.$$.fragment),ySr=l(),Ic=a("p"),xSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DK=a("a"),$Sr=o("from_pretrained()"),kSr=o(" class method or the "),GK=a("a"),SSr=o("from_config()"),RSr=o(` class
method.`),PSr=l(),Gx=a("p"),BSr=o("This class cannot be instantiated directly using "),$3e=a("code"),ISr=o("__init__()"),NSr=o(" (throws an error)."),qSr=l(),Ot=a("div"),F(Ox.$$.fragment),jSr=l(),k3e=a("p"),DSr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),GSr=l(),Nc=a("p"),OSr=o(`Note:
Loading a model from its configuration file does `),S3e=a("strong"),VSr=o("not"),XSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=a("a"),zSr=o("from_pretrained()"),QSr=o(" to load the model weights."),WSr=l(),F(Y5.$$.fragment),HSr=l(),jr=a("div"),F(Vx.$$.fragment),USr=l(),R3e=a("p"),JSr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),YSr=l(),_n=a("p"),KSr=o("The model class to instantiate is selected based on the "),P3e=a("code"),ZSr=o("model_type"),eRr=o(` property of the config object (either
passed as an argument or loaded from `),B3e=a("code"),oRr=o("pretrained_model_name_or_path"),rRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I3e=a("code"),tRr=o("pretrained_model_name_or_path"),aRr=o(":"),nRr=l(),de=a("ul"),K5=a("li"),N3e=a("strong"),sRr=o("albert"),lRr=o(" \u2014 "),VK=a("a"),iRr=o("TFAlbertForTokenClassification"),dRr=o(" (ALBERT model)"),cRr=l(),Z5=a("li"),q3e=a("strong"),mRr=o("bert"),fRr=o(" \u2014 "),XK=a("a"),gRr=o("TFBertForTokenClassification"),hRr=o(" (BERT model)"),uRr=l(),e0=a("li"),j3e=a("strong"),pRr=o("camembert"),_Rr=o(" \u2014 "),zK=a("a"),bRr=o("TFCamembertForTokenClassification"),vRr=o(" (CamemBERT model)"),FRr=l(),o0=a("li"),D3e=a("strong"),TRr=o("convbert"),MRr=o(" \u2014 "),QK=a("a"),ERr=o("TFConvBertForTokenClassification"),CRr=o(" (ConvBERT model)"),wRr=l(),r0=a("li"),G3e=a("strong"),ARr=o("deberta"),LRr=o(" \u2014 "),WK=a("a"),yRr=o("TFDebertaForTokenClassification"),xRr=o(" (DeBERTa model)"),$Rr=l(),t0=a("li"),O3e=a("strong"),kRr=o("deberta-v2"),SRr=o(" \u2014 "),HK=a("a"),RRr=o("TFDebertaV2ForTokenClassification"),PRr=o(" (DeBERTa-v2 model)"),BRr=l(),a0=a("li"),V3e=a("strong"),IRr=o("distilbert"),NRr=o(" \u2014 "),UK=a("a"),qRr=o("TFDistilBertForTokenClassification"),jRr=o(" (DistilBERT model)"),DRr=l(),n0=a("li"),X3e=a("strong"),GRr=o("electra"),ORr=o(" \u2014 "),JK=a("a"),VRr=o("TFElectraForTokenClassification"),XRr=o(" (ELECTRA model)"),zRr=l(),s0=a("li"),z3e=a("strong"),QRr=o("flaubert"),WRr=o(" \u2014 "),YK=a("a"),HRr=o("TFFlaubertForTokenClassification"),URr=o(" (FlauBERT model)"),JRr=l(),l0=a("li"),Q3e=a("strong"),YRr=o("funnel"),KRr=o(" \u2014 "),KK=a("a"),ZRr=o("TFFunnelForTokenClassification"),ePr=o(" (Funnel Transformer model)"),oPr=l(),i0=a("li"),W3e=a("strong"),rPr=o("layoutlm"),tPr=o(" \u2014 "),ZK=a("a"),aPr=o("TFLayoutLMForTokenClassification"),nPr=o(" (LayoutLM model)"),sPr=l(),d0=a("li"),H3e=a("strong"),lPr=o("longformer"),iPr=o(" \u2014 "),eZ=a("a"),dPr=o("TFLongformerForTokenClassification"),cPr=o(" (Longformer model)"),mPr=l(),c0=a("li"),U3e=a("strong"),fPr=o("mobilebert"),gPr=o(" \u2014 "),oZ=a("a"),hPr=o("TFMobileBertForTokenClassification"),uPr=o(" (MobileBERT model)"),pPr=l(),m0=a("li"),J3e=a("strong"),_Pr=o("mpnet"),bPr=o(" \u2014 "),rZ=a("a"),vPr=o("TFMPNetForTokenClassification"),FPr=o(" (MPNet model)"),TPr=l(),f0=a("li"),Y3e=a("strong"),MPr=o("rembert"),EPr=o(" \u2014 "),tZ=a("a"),CPr=o("TFRemBertForTokenClassification"),wPr=o(" (RemBERT model)"),APr=l(),g0=a("li"),K3e=a("strong"),LPr=o("roberta"),yPr=o(" \u2014 "),aZ=a("a"),xPr=o("TFRobertaForTokenClassification"),$Pr=o(" (RoBERTa model)"),kPr=l(),h0=a("li"),Z3e=a("strong"),SPr=o("roformer"),RPr=o(" \u2014 "),nZ=a("a"),PPr=o("TFRoFormerForTokenClassification"),BPr=o(" (RoFormer model)"),IPr=l(),u0=a("li"),e5e=a("strong"),NPr=o("xlm"),qPr=o(" \u2014 "),sZ=a("a"),jPr=o("TFXLMForTokenClassification"),DPr=o(" (XLM model)"),GPr=l(),p0=a("li"),o5e=a("strong"),OPr=o("xlm-roberta"),VPr=o(" \u2014 "),lZ=a("a"),XPr=o("TFXLMRobertaForTokenClassification"),zPr=o(" (XLM-RoBERTa model)"),QPr=l(),_0=a("li"),r5e=a("strong"),WPr=o("xlnet"),HPr=o(" \u2014 "),iZ=a("a"),UPr=o("TFXLNetForTokenClassification"),JPr=o(" (XLNet model)"),YPr=l(),F(b0.$$.fragment),_ze=l(),qc=a("h2"),v0=a("a"),t5e=a("span"),F(Xx.$$.fragment),KPr=l(),a5e=a("span"),ZPr=o("TFAutoModelForQuestionAnswering"),bze=l(),fr=a("div"),F(zx.$$.fragment),eBr=l(),jc=a("p"),oBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dZ=a("a"),rBr=o("from_pretrained()"),tBr=o(" class method or the "),cZ=a("a"),aBr=o("from_config()"),nBr=o(` class
method.`),sBr=l(),Qx=a("p"),lBr=o("This class cannot be instantiated directly using "),n5e=a("code"),iBr=o("__init__()"),dBr=o(" (throws an error)."),cBr=l(),Vt=a("div"),F(Wx.$$.fragment),mBr=l(),s5e=a("p"),fBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gBr=l(),Dc=a("p"),hBr=o(`Note:
Loading a model from its configuration file does `),l5e=a("strong"),uBr=o("not"),pBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mZ=a("a"),_Br=o("from_pretrained()"),bBr=o(" to load the model weights."),vBr=l(),F(F0.$$.fragment),FBr=l(),Dr=a("div"),F(Hx.$$.fragment),TBr=l(),i5e=a("p"),MBr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),EBr=l(),bn=a("p"),CBr=o("The model class to instantiate is selected based on the "),d5e=a("code"),wBr=o("model_type"),ABr=o(` property of the config object (either
passed as an argument or loaded from `),c5e=a("code"),LBr=o("pretrained_model_name_or_path"),yBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m5e=a("code"),xBr=o("pretrained_model_name_or_path"),$Br=o(":"),kBr=l(),ce=a("ul"),T0=a("li"),f5e=a("strong"),SBr=o("albert"),RBr=o(" \u2014 "),fZ=a("a"),PBr=o("TFAlbertForQuestionAnswering"),BBr=o(" (ALBERT model)"),IBr=l(),M0=a("li"),g5e=a("strong"),NBr=o("bert"),qBr=o(" \u2014 "),gZ=a("a"),jBr=o("TFBertForQuestionAnswering"),DBr=o(" (BERT model)"),GBr=l(),E0=a("li"),h5e=a("strong"),OBr=o("camembert"),VBr=o(" \u2014 "),hZ=a("a"),XBr=o("TFCamembertForQuestionAnswering"),zBr=o(" (CamemBERT model)"),QBr=l(),C0=a("li"),u5e=a("strong"),WBr=o("convbert"),HBr=o(" \u2014 "),uZ=a("a"),UBr=o("TFConvBertForQuestionAnswering"),JBr=o(" (ConvBERT model)"),YBr=l(),w0=a("li"),p5e=a("strong"),KBr=o("deberta"),ZBr=o(" \u2014 "),pZ=a("a"),eIr=o("TFDebertaForQuestionAnswering"),oIr=o(" (DeBERTa model)"),rIr=l(),A0=a("li"),_5e=a("strong"),tIr=o("deberta-v2"),aIr=o(" \u2014 "),_Z=a("a"),nIr=o("TFDebertaV2ForQuestionAnswering"),sIr=o(" (DeBERTa-v2 model)"),lIr=l(),L0=a("li"),b5e=a("strong"),iIr=o("distilbert"),dIr=o(" \u2014 "),bZ=a("a"),cIr=o("TFDistilBertForQuestionAnswering"),mIr=o(" (DistilBERT model)"),fIr=l(),y0=a("li"),v5e=a("strong"),gIr=o("electra"),hIr=o(" \u2014 "),vZ=a("a"),uIr=o("TFElectraForQuestionAnswering"),pIr=o(" (ELECTRA model)"),_Ir=l(),x0=a("li"),F5e=a("strong"),bIr=o("flaubert"),vIr=o(" \u2014 "),FZ=a("a"),FIr=o("TFFlaubertForQuestionAnsweringSimple"),TIr=o(" (FlauBERT model)"),MIr=l(),$0=a("li"),T5e=a("strong"),EIr=o("funnel"),CIr=o(" \u2014 "),TZ=a("a"),wIr=o("TFFunnelForQuestionAnswering"),AIr=o(" (Funnel Transformer model)"),LIr=l(),k0=a("li"),M5e=a("strong"),yIr=o("gptj"),xIr=o(" \u2014 "),MZ=a("a"),$Ir=o("TFGPTJForQuestionAnswering"),kIr=o(" (GPT-J model)"),SIr=l(),S0=a("li"),E5e=a("strong"),RIr=o("longformer"),PIr=o(" \u2014 "),EZ=a("a"),BIr=o("TFLongformerForQuestionAnswering"),IIr=o(" (Longformer model)"),NIr=l(),R0=a("li"),C5e=a("strong"),qIr=o("mobilebert"),jIr=o(" \u2014 "),CZ=a("a"),DIr=o("TFMobileBertForQuestionAnswering"),GIr=o(" (MobileBERT model)"),OIr=l(),P0=a("li"),w5e=a("strong"),VIr=o("mpnet"),XIr=o(" \u2014 "),wZ=a("a"),zIr=o("TFMPNetForQuestionAnswering"),QIr=o(" (MPNet model)"),WIr=l(),B0=a("li"),A5e=a("strong"),HIr=o("rembert"),UIr=o(" \u2014 "),AZ=a("a"),JIr=o("TFRemBertForQuestionAnswering"),YIr=o(" (RemBERT model)"),KIr=l(),I0=a("li"),L5e=a("strong"),ZIr=o("roberta"),eNr=o(" \u2014 "),LZ=a("a"),oNr=o("TFRobertaForQuestionAnswering"),rNr=o(" (RoBERTa model)"),tNr=l(),N0=a("li"),y5e=a("strong"),aNr=o("roformer"),nNr=o(" \u2014 "),yZ=a("a"),sNr=o("TFRoFormerForQuestionAnswering"),lNr=o(" (RoFormer model)"),iNr=l(),q0=a("li"),x5e=a("strong"),dNr=o("xlm"),cNr=o(" \u2014 "),xZ=a("a"),mNr=o("TFXLMForQuestionAnsweringSimple"),fNr=o(" (XLM model)"),gNr=l(),j0=a("li"),$5e=a("strong"),hNr=o("xlm-roberta"),uNr=o(" \u2014 "),$Z=a("a"),pNr=o("TFXLMRobertaForQuestionAnswering"),_Nr=o(" (XLM-RoBERTa model)"),bNr=l(),D0=a("li"),k5e=a("strong"),vNr=o("xlnet"),FNr=o(" \u2014 "),kZ=a("a"),TNr=o("TFXLNetForQuestionAnsweringSimple"),MNr=o(" (XLNet model)"),ENr=l(),F(G0.$$.fragment),vze=l(),Gc=a("h2"),O0=a("a"),S5e=a("span"),F(Ux.$$.fragment),CNr=l(),R5e=a("span"),wNr=o("TFAutoModelForVision2Seq"),Fze=l(),gr=a("div"),F(Jx.$$.fragment),ANr=l(),Oc=a("p"),LNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),SZ=a("a"),yNr=o("from_pretrained()"),xNr=o(" class method or the "),RZ=a("a"),$Nr=o("from_config()"),kNr=o(` class
method.`),SNr=l(),Yx=a("p"),RNr=o("This class cannot be instantiated directly using "),P5e=a("code"),PNr=o("__init__()"),BNr=o(" (throws an error)."),INr=l(),Xt=a("div"),F(Kx.$$.fragment),NNr=l(),B5e=a("p"),qNr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jNr=l(),Vc=a("p"),DNr=o(`Note:
Loading a model from its configuration file does `),I5e=a("strong"),GNr=o("not"),ONr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=a("a"),VNr=o("from_pretrained()"),XNr=o(" to load the model weights."),zNr=l(),F(V0.$$.fragment),QNr=l(),Gr=a("div"),F(Zx.$$.fragment),WNr=l(),N5e=a("p"),HNr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),UNr=l(),vn=a("p"),JNr=o("The model class to instantiate is selected based on the "),q5e=a("code"),YNr=o("model_type"),KNr=o(` property of the config object (either
passed as an argument or loaded from `),j5e=a("code"),ZNr=o("pretrained_model_name_or_path"),eqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D5e=a("code"),oqr=o("pretrained_model_name_or_path"),rqr=o(":"),tqr=l(),G5e=a("ul"),X0=a("li"),O5e=a("strong"),aqr=o("vision-encoder-decoder"),nqr=o(" \u2014 "),BZ=a("a"),sqr=o("TFVisionEncoderDecoderModel"),lqr=o(" (Vision Encoder decoder model)"),iqr=l(),F(z0.$$.fragment),Tze=l(),Xc=a("h2"),Q0=a("a"),V5e=a("span"),F(e$.$$.fragment),dqr=l(),X5e=a("span"),cqr=o("TFAutoModelForSpeechSeq2Seq"),Mze=l(),hr=a("div"),F(o$.$$.fragment),mqr=l(),zc=a("p"),fqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),IZ=a("a"),gqr=o("from_pretrained()"),hqr=o(" class method or the "),NZ=a("a"),uqr=o("from_config()"),pqr=o(` class
method.`),_qr=l(),r$=a("p"),bqr=o("This class cannot be instantiated directly using "),z5e=a("code"),vqr=o("__init__()"),Fqr=o(" (throws an error)."),Tqr=l(),zt=a("div"),F(t$.$$.fragment),Mqr=l(),Q5e=a("p"),Eqr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Cqr=l(),Qc=a("p"),wqr=o(`Note:
Loading a model from its configuration file does `),W5e=a("strong"),Aqr=o("not"),Lqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=a("a"),yqr=o("from_pretrained()"),xqr=o(" to load the model weights."),$qr=l(),F(W0.$$.fragment),kqr=l(),Or=a("div"),F(a$.$$.fragment),Sqr=l(),H5e=a("p"),Rqr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Pqr=l(),Fn=a("p"),Bqr=o("The model class to instantiate is selected based on the "),U5e=a("code"),Iqr=o("model_type"),Nqr=o(` property of the config object (either
passed as an argument or loaded from `),J5e=a("code"),qqr=o("pretrained_model_name_or_path"),jqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y5e=a("code"),Dqr=o("pretrained_model_name_or_path"),Gqr=o(":"),Oqr=l(),K5e=a("ul"),H0=a("li"),Z5e=a("strong"),Vqr=o("speech_to_text"),Xqr=o(" \u2014 "),jZ=a("a"),zqr=o("TFSpeech2TextForConditionalGeneration"),Qqr=o(" (Speech2Text model)"),Wqr=l(),F(U0.$$.fragment),Eze=l(),Wc=a("h2"),J0=a("a"),e0e=a("span"),F(n$.$$.fragment),Hqr=l(),o0e=a("span"),Uqr=o("FlaxAutoModel"),Cze=l(),ur=a("div"),F(s$.$$.fragment),Jqr=l(),Hc=a("p"),Yqr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DZ=a("a"),Kqr=o("from_pretrained()"),Zqr=o(" class method or the "),GZ=a("a"),ejr=o("from_config()"),ojr=o(` class
method.`),rjr=l(),l$=a("p"),tjr=o("This class cannot be instantiated directly using "),r0e=a("code"),ajr=o("__init__()"),njr=o(" (throws an error)."),sjr=l(),Qt=a("div"),F(i$.$$.fragment),ljr=l(),t0e=a("p"),ijr=o("Instantiates one of the base model classes of the library from a configuration."),djr=l(),Uc=a("p"),cjr=o(`Note:
Loading a model from its configuration file does `),a0e=a("strong"),mjr=o("not"),fjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=a("a"),gjr=o("from_pretrained()"),hjr=o(" to load the model weights."),ujr=l(),F(Y0.$$.fragment),pjr=l(),Vr=a("div"),F(d$.$$.fragment),_jr=l(),n0e=a("p"),bjr=o("Instantiate one of the base model classes of the library from a pretrained model."),vjr=l(),Tn=a("p"),Fjr=o("The model class to instantiate is selected based on the "),s0e=a("code"),Tjr=o("model_type"),Mjr=o(` property of the config object (either
passed as an argument or loaded from `),l0e=a("code"),Ejr=o("pretrained_model_name_or_path"),Cjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i0e=a("code"),wjr=o("pretrained_model_name_or_path"),Ajr=o(":"),Ljr=l(),oe=a("ul"),K0=a("li"),d0e=a("strong"),yjr=o("albert"),xjr=o(" \u2014 "),VZ=a("a"),$jr=o("FlaxAlbertModel"),kjr=o(" (ALBERT model)"),Sjr=l(),Z0=a("li"),c0e=a("strong"),Rjr=o("bart"),Pjr=o(" \u2014 "),XZ=a("a"),Bjr=o("FlaxBartModel"),Ijr=o(" (BART model)"),Njr=l(),ew=a("li"),m0e=a("strong"),qjr=o("beit"),jjr=o(" \u2014 "),zZ=a("a"),Djr=o("FlaxBeitModel"),Gjr=o(" (BEiT model)"),Ojr=l(),ow=a("li"),f0e=a("strong"),Vjr=o("bert"),Xjr=o(" \u2014 "),QZ=a("a"),zjr=o("FlaxBertModel"),Qjr=o(" (BERT model)"),Wjr=l(),rw=a("li"),g0e=a("strong"),Hjr=o("big_bird"),Ujr=o(" \u2014 "),WZ=a("a"),Jjr=o("FlaxBigBirdModel"),Yjr=o(" (BigBird model)"),Kjr=l(),tw=a("li"),h0e=a("strong"),Zjr=o("blenderbot"),eDr=o(" \u2014 "),HZ=a("a"),oDr=o("FlaxBlenderbotModel"),rDr=o(" (Blenderbot model)"),tDr=l(),aw=a("li"),u0e=a("strong"),aDr=o("blenderbot-small"),nDr=o(" \u2014 "),UZ=a("a"),sDr=o("FlaxBlenderbotSmallModel"),lDr=o(" (BlenderbotSmall model)"),iDr=l(),nw=a("li"),p0e=a("strong"),dDr=o("clip"),cDr=o(" \u2014 "),JZ=a("a"),mDr=o("FlaxCLIPModel"),fDr=o(" (CLIP model)"),gDr=l(),sw=a("li"),_0e=a("strong"),hDr=o("distilbert"),uDr=o(" \u2014 "),YZ=a("a"),pDr=o("FlaxDistilBertModel"),_Dr=o(" (DistilBERT model)"),bDr=l(),lw=a("li"),b0e=a("strong"),vDr=o("electra"),FDr=o(" \u2014 "),KZ=a("a"),TDr=o("FlaxElectraModel"),MDr=o(" (ELECTRA model)"),EDr=l(),iw=a("li"),v0e=a("strong"),CDr=o("gpt2"),wDr=o(" \u2014 "),ZZ=a("a"),ADr=o("FlaxGPT2Model"),LDr=o(" (OpenAI GPT-2 model)"),yDr=l(),dw=a("li"),F0e=a("strong"),xDr=o("gpt_neo"),$Dr=o(" \u2014 "),eee=a("a"),kDr=o("FlaxGPTNeoModel"),SDr=o(" (GPT Neo model)"),RDr=l(),cw=a("li"),T0e=a("strong"),PDr=o("gptj"),BDr=o(" \u2014 "),oee=a("a"),IDr=o("FlaxGPTJModel"),NDr=o(" (GPT-J model)"),qDr=l(),mw=a("li"),M0e=a("strong"),jDr=o("longt5"),DDr=o(" \u2014 "),ree=a("a"),GDr=o("FlaxLongT5Model"),ODr=o(" (LongT5 model)"),VDr=l(),fw=a("li"),E0e=a("strong"),XDr=o("marian"),zDr=o(" \u2014 "),tee=a("a"),QDr=o("FlaxMarianModel"),WDr=o(" (Marian model)"),HDr=l(),gw=a("li"),C0e=a("strong"),UDr=o("mbart"),JDr=o(" \u2014 "),aee=a("a"),YDr=o("FlaxMBartModel"),KDr=o(" (mBART model)"),ZDr=l(),hw=a("li"),w0e=a("strong"),eGr=o("mt5"),oGr=o(" \u2014 "),nee=a("a"),rGr=o("FlaxMT5Model"),tGr=o(" (MT5 model)"),aGr=l(),uw=a("li"),A0e=a("strong"),nGr=o("opt"),sGr=o(" \u2014 "),see=a("a"),lGr=o("FlaxOPTModel"),iGr=o(" (OPT model)"),dGr=l(),pw=a("li"),L0e=a("strong"),cGr=o("pegasus"),mGr=o(" \u2014 "),lee=a("a"),fGr=o("FlaxPegasusModel"),gGr=o(" (Pegasus model)"),hGr=l(),_w=a("li"),y0e=a("strong"),uGr=o("roberta"),pGr=o(" \u2014 "),iee=a("a"),_Gr=o("FlaxRobertaModel"),bGr=o(" (RoBERTa model)"),vGr=l(),bw=a("li"),x0e=a("strong"),FGr=o("roformer"),TGr=o(" \u2014 "),dee=a("a"),MGr=o("FlaxRoFormerModel"),EGr=o(" (RoFormer model)"),CGr=l(),vw=a("li"),$0e=a("strong"),wGr=o("t5"),AGr=o(" \u2014 "),cee=a("a"),LGr=o("FlaxT5Model"),yGr=o(" (T5 model)"),xGr=l(),Fw=a("li"),k0e=a("strong"),$Gr=o("vision-text-dual-encoder"),kGr=o(" \u2014 "),mee=a("a"),SGr=o("FlaxVisionTextDualEncoderModel"),RGr=o(" (VisionTextDualEncoder model)"),PGr=l(),Tw=a("li"),S0e=a("strong"),BGr=o("vit"),IGr=o(" \u2014 "),fee=a("a"),NGr=o("FlaxViTModel"),qGr=o(" (ViT model)"),jGr=l(),Mw=a("li"),R0e=a("strong"),DGr=o("wav2vec2"),GGr=o(" \u2014 "),gee=a("a"),OGr=o("FlaxWav2Vec2Model"),VGr=o(" (Wav2Vec2 model)"),XGr=l(),Ew=a("li"),P0e=a("strong"),zGr=o("xglm"),QGr=o(" \u2014 "),hee=a("a"),WGr=o("FlaxXGLMModel"),HGr=o(" (XGLM model)"),UGr=l(),Cw=a("li"),B0e=a("strong"),JGr=o("xlm-roberta"),YGr=o(" \u2014 "),uee=a("a"),KGr=o("FlaxXLMRobertaModel"),ZGr=o(" (XLM-RoBERTa model)"),eOr=l(),F(ww.$$.fragment),wze=l(),Jc=a("h2"),Aw=a("a"),I0e=a("span"),F(c$.$$.fragment),oOr=l(),N0e=a("span"),rOr=o("FlaxAutoModelForCausalLM"),Aze=l(),pr=a("div"),F(m$.$$.fragment),tOr=l(),Yc=a("p"),aOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),pee=a("a"),nOr=o("from_pretrained()"),sOr=o(" class method or the "),_ee=a("a"),lOr=o("from_config()"),iOr=o(` class
method.`),dOr=l(),f$=a("p"),cOr=o("This class cannot be instantiated directly using "),q0e=a("code"),mOr=o("__init__()"),fOr=o(" (throws an error)."),gOr=l(),Wt=a("div"),F(g$.$$.fragment),hOr=l(),j0e=a("p"),uOr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pOr=l(),Kc=a("p"),_Or=o(`Note:
Loading a model from its configuration file does `),D0e=a("strong"),bOr=o("not"),vOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bee=a("a"),FOr=o("from_pretrained()"),TOr=o(" to load the model weights."),MOr=l(),F(Lw.$$.fragment),EOr=l(),Xr=a("div"),F(h$.$$.fragment),COr=l(),G0e=a("p"),wOr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),AOr=l(),Mn=a("p"),LOr=o("The model class to instantiate is selected based on the "),O0e=a("code"),yOr=o("model_type"),xOr=o(` property of the config object (either
passed as an argument or loaded from `),V0e=a("code"),$Or=o("pretrained_model_name_or_path"),kOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X0e=a("code"),SOr=o("pretrained_model_name_or_path"),ROr=o(":"),POr=l(),xe=a("ul"),yw=a("li"),z0e=a("strong"),BOr=o("bart"),IOr=o(" \u2014 "),vee=a("a"),NOr=o("FlaxBartForCausalLM"),qOr=o(" (BART model)"),jOr=l(),xw=a("li"),Q0e=a("strong"),DOr=o("bert"),GOr=o(" \u2014 "),Fee=a("a"),OOr=o("FlaxBertForCausalLM"),VOr=o(" (BERT model)"),XOr=l(),$w=a("li"),W0e=a("strong"),zOr=o("big_bird"),QOr=o(" \u2014 "),Tee=a("a"),WOr=o("FlaxBigBirdForCausalLM"),HOr=o(" (BigBird model)"),UOr=l(),kw=a("li"),H0e=a("strong"),JOr=o("electra"),YOr=o(" \u2014 "),Mee=a("a"),KOr=o("FlaxElectraForCausalLM"),ZOr=o(" (ELECTRA model)"),eVr=l(),Sw=a("li"),U0e=a("strong"),oVr=o("gpt2"),rVr=o(" \u2014 "),Eee=a("a"),tVr=o("FlaxGPT2LMHeadModel"),aVr=o(" (OpenAI GPT-2 model)"),nVr=l(),Rw=a("li"),J0e=a("strong"),sVr=o("gpt_neo"),lVr=o(" \u2014 "),Cee=a("a"),iVr=o("FlaxGPTNeoForCausalLM"),dVr=o(" (GPT Neo model)"),cVr=l(),Pw=a("li"),Y0e=a("strong"),mVr=o("gptj"),fVr=o(" \u2014 "),wee=a("a"),gVr=o("FlaxGPTJForCausalLM"),hVr=o(" (GPT-J model)"),uVr=l(),Bw=a("li"),K0e=a("strong"),pVr=o("opt"),_Vr=o(" \u2014 "),Aee=a("a"),bVr=o("FlaxOPTForCausalLM"),vVr=o(" (OPT model)"),FVr=l(),Iw=a("li"),Z0e=a("strong"),TVr=o("roberta"),MVr=o(" \u2014 "),Lee=a("a"),EVr=o("FlaxRobertaForCausalLM"),CVr=o(" (RoBERTa model)"),wVr=l(),Nw=a("li"),ewe=a("strong"),AVr=o("xglm"),LVr=o(" \u2014 "),yee=a("a"),yVr=o("FlaxXGLMForCausalLM"),xVr=o(" (XGLM model)"),$Vr=l(),F(qw.$$.fragment),Lze=l(),Zc=a("h2"),jw=a("a"),owe=a("span"),F(u$.$$.fragment),kVr=l(),rwe=a("span"),SVr=o("FlaxAutoModelForPreTraining"),yze=l(),_r=a("div"),F(p$.$$.fragment),RVr=l(),em=a("p"),PVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xee=a("a"),BVr=o("from_pretrained()"),IVr=o(" class method or the "),$ee=a("a"),NVr=o("from_config()"),qVr=o(` class
method.`),jVr=l(),_$=a("p"),DVr=o("This class cannot be instantiated directly using "),twe=a("code"),GVr=o("__init__()"),OVr=o(" (throws an error)."),VVr=l(),Ht=a("div"),F(b$.$$.fragment),XVr=l(),awe=a("p"),zVr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),QVr=l(),om=a("p"),WVr=o(`Note:
Loading a model from its configuration file does `),nwe=a("strong"),HVr=o("not"),UVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kee=a("a"),JVr=o("from_pretrained()"),YVr=o(" to load the model weights."),KVr=l(),F(Dw.$$.fragment),ZVr=l(),zr=a("div"),F(v$.$$.fragment),eXr=l(),swe=a("p"),oXr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rXr=l(),En=a("p"),tXr=o("The model class to instantiate is selected based on the "),lwe=a("code"),aXr=o("model_type"),nXr=o(` property of the config object (either
passed as an argument or loaded from `),iwe=a("code"),sXr=o("pretrained_model_name_or_path"),lXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dwe=a("code"),iXr=o("pretrained_model_name_or_path"),dXr=o(":"),cXr=l(),Ee=a("ul"),Gw=a("li"),cwe=a("strong"),mXr=o("albert"),fXr=o(" \u2014 "),See=a("a"),gXr=o("FlaxAlbertForPreTraining"),hXr=o(" (ALBERT model)"),uXr=l(),Ow=a("li"),mwe=a("strong"),pXr=o("bart"),_Xr=o(" \u2014 "),Ree=a("a"),bXr=o("FlaxBartForConditionalGeneration"),vXr=o(" (BART model)"),FXr=l(),Vw=a("li"),fwe=a("strong"),TXr=o("bert"),MXr=o(" \u2014 "),Pee=a("a"),EXr=o("FlaxBertForPreTraining"),CXr=o(" (BERT model)"),wXr=l(),Xw=a("li"),gwe=a("strong"),AXr=o("big_bird"),LXr=o(" \u2014 "),Bee=a("a"),yXr=o("FlaxBigBirdForPreTraining"),xXr=o(" (BigBird model)"),$Xr=l(),zw=a("li"),hwe=a("strong"),kXr=o("electra"),SXr=o(" \u2014 "),Iee=a("a"),RXr=o("FlaxElectraForPreTraining"),PXr=o(" (ELECTRA model)"),BXr=l(),Qw=a("li"),uwe=a("strong"),IXr=o("longt5"),NXr=o(" \u2014 "),Nee=a("a"),qXr=o("FlaxLongT5ForConditionalGeneration"),jXr=o(" (LongT5 model)"),DXr=l(),Ww=a("li"),pwe=a("strong"),GXr=o("mbart"),OXr=o(" \u2014 "),qee=a("a"),VXr=o("FlaxMBartForConditionalGeneration"),XXr=o(" (mBART model)"),zXr=l(),Hw=a("li"),_we=a("strong"),QXr=o("mt5"),WXr=o(" \u2014 "),jee=a("a"),HXr=o("FlaxMT5ForConditionalGeneration"),UXr=o(" (MT5 model)"),JXr=l(),Uw=a("li"),bwe=a("strong"),YXr=o("roberta"),KXr=o(" \u2014 "),Dee=a("a"),ZXr=o("FlaxRobertaForMaskedLM"),ezr=o(" (RoBERTa model)"),ozr=l(),Jw=a("li"),vwe=a("strong"),rzr=o("roformer"),tzr=o(" \u2014 "),Gee=a("a"),azr=o("FlaxRoFormerForMaskedLM"),nzr=o(" (RoFormer model)"),szr=l(),Yw=a("li"),Fwe=a("strong"),lzr=o("t5"),izr=o(" \u2014 "),Oee=a("a"),dzr=o("FlaxT5ForConditionalGeneration"),czr=o(" (T5 model)"),mzr=l(),Kw=a("li"),Twe=a("strong"),fzr=o("wav2vec2"),gzr=o(" \u2014 "),Vee=a("a"),hzr=o("FlaxWav2Vec2ForPreTraining"),uzr=o(" (Wav2Vec2 model)"),pzr=l(),Zw=a("li"),Mwe=a("strong"),_zr=o("xlm-roberta"),bzr=o(" \u2014 "),Xee=a("a"),vzr=o("FlaxXLMRobertaForMaskedLM"),Fzr=o(" (XLM-RoBERTa model)"),Tzr=l(),F(eA.$$.fragment),xze=l(),rm=a("h2"),oA=a("a"),Ewe=a("span"),F(F$.$$.fragment),Mzr=l(),Cwe=a("span"),Ezr=o("FlaxAutoModelForMaskedLM"),$ze=l(),br=a("div"),F(T$.$$.fragment),Czr=l(),tm=a("p"),wzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zee=a("a"),Azr=o("from_pretrained()"),Lzr=o(" class method or the "),Qee=a("a"),yzr=o("from_config()"),xzr=o(` class
method.`),$zr=l(),M$=a("p"),kzr=o("This class cannot be instantiated directly using "),wwe=a("code"),Szr=o("__init__()"),Rzr=o(" (throws an error)."),Pzr=l(),Ut=a("div"),F(E$.$$.fragment),Bzr=l(),Awe=a("p"),Izr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Nzr=l(),am=a("p"),qzr=o(`Note:
Loading a model from its configuration file does `),Lwe=a("strong"),jzr=o("not"),Dzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wee=a("a"),Gzr=o("from_pretrained()"),Ozr=o(" to load the model weights."),Vzr=l(),F(rA.$$.fragment),Xzr=l(),Qr=a("div"),F(C$.$$.fragment),zzr=l(),ywe=a("p"),Qzr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Wzr=l(),Cn=a("p"),Hzr=o("The model class to instantiate is selected based on the "),xwe=a("code"),Uzr=o("model_type"),Jzr=o(` property of the config object (either
passed as an argument or loaded from `),$we=a("code"),Yzr=o("pretrained_model_name_or_path"),Kzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kwe=a("code"),Zzr=o("pretrained_model_name_or_path"),eQr=o(":"),oQr=l(),$e=a("ul"),tA=a("li"),Swe=a("strong"),rQr=o("albert"),tQr=o(" \u2014 "),Hee=a("a"),aQr=o("FlaxAlbertForMaskedLM"),nQr=o(" (ALBERT model)"),sQr=l(),aA=a("li"),Rwe=a("strong"),lQr=o("bart"),iQr=o(" \u2014 "),Uee=a("a"),dQr=o("FlaxBartForConditionalGeneration"),cQr=o(" (BART model)"),mQr=l(),nA=a("li"),Pwe=a("strong"),fQr=o("bert"),gQr=o(" \u2014 "),Jee=a("a"),hQr=o("FlaxBertForMaskedLM"),uQr=o(" (BERT model)"),pQr=l(),sA=a("li"),Bwe=a("strong"),_Qr=o("big_bird"),bQr=o(" \u2014 "),Yee=a("a"),vQr=o("FlaxBigBirdForMaskedLM"),FQr=o(" (BigBird model)"),TQr=l(),lA=a("li"),Iwe=a("strong"),MQr=o("distilbert"),EQr=o(" \u2014 "),Kee=a("a"),CQr=o("FlaxDistilBertForMaskedLM"),wQr=o(" (DistilBERT model)"),AQr=l(),iA=a("li"),Nwe=a("strong"),LQr=o("electra"),yQr=o(" \u2014 "),Zee=a("a"),xQr=o("FlaxElectraForMaskedLM"),$Qr=o(" (ELECTRA model)"),kQr=l(),dA=a("li"),qwe=a("strong"),SQr=o("mbart"),RQr=o(" \u2014 "),eoe=a("a"),PQr=o("FlaxMBartForConditionalGeneration"),BQr=o(" (mBART model)"),IQr=l(),cA=a("li"),jwe=a("strong"),NQr=o("roberta"),qQr=o(" \u2014 "),ooe=a("a"),jQr=o("FlaxRobertaForMaskedLM"),DQr=o(" (RoBERTa model)"),GQr=l(),mA=a("li"),Dwe=a("strong"),OQr=o("roformer"),VQr=o(" \u2014 "),roe=a("a"),XQr=o("FlaxRoFormerForMaskedLM"),zQr=o(" (RoFormer model)"),QQr=l(),fA=a("li"),Gwe=a("strong"),WQr=o("xlm-roberta"),HQr=o(" \u2014 "),toe=a("a"),UQr=o("FlaxXLMRobertaForMaskedLM"),JQr=o(" (XLM-RoBERTa model)"),YQr=l(),F(gA.$$.fragment),kze=l(),nm=a("h2"),hA=a("a"),Owe=a("span"),F(w$.$$.fragment),KQr=l(),Vwe=a("span"),ZQr=o("FlaxAutoModelForSeq2SeqLM"),Sze=l(),vr=a("div"),F(A$.$$.fragment),eWr=l(),sm=a("p"),oWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aoe=a("a"),rWr=o("from_pretrained()"),tWr=o(" class method or the "),noe=a("a"),aWr=o("from_config()"),nWr=o(` class
method.`),sWr=l(),L$=a("p"),lWr=o("This class cannot be instantiated directly using "),Xwe=a("code"),iWr=o("__init__()"),dWr=o(" (throws an error)."),cWr=l(),Jt=a("div"),F(y$.$$.fragment),mWr=l(),zwe=a("p"),fWr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gWr=l(),lm=a("p"),hWr=o(`Note:
Loading a model from its configuration file does `),Qwe=a("strong"),uWr=o("not"),pWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),soe=a("a"),_Wr=o("from_pretrained()"),bWr=o(" to load the model weights."),vWr=l(),F(uA.$$.fragment),FWr=l(),Wr=a("div"),F(x$.$$.fragment),TWr=l(),Wwe=a("p"),MWr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),EWr=l(),wn=a("p"),CWr=o("The model class to instantiate is selected based on the "),Hwe=a("code"),wWr=o("model_type"),AWr=o(` property of the config object (either
passed as an argument or loaded from `),Uwe=a("code"),LWr=o("pretrained_model_name_or_path"),yWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jwe=a("code"),xWr=o("pretrained_model_name_or_path"),$Wr=o(":"),kWr=l(),ke=a("ul"),pA=a("li"),Ywe=a("strong"),SWr=o("bart"),RWr=o(" \u2014 "),loe=a("a"),PWr=o("FlaxBartForConditionalGeneration"),BWr=o(" (BART model)"),IWr=l(),_A=a("li"),Kwe=a("strong"),NWr=o("blenderbot"),qWr=o(" \u2014 "),ioe=a("a"),jWr=o("FlaxBlenderbotForConditionalGeneration"),DWr=o(" (Blenderbot model)"),GWr=l(),bA=a("li"),Zwe=a("strong"),OWr=o("blenderbot-small"),VWr=o(" \u2014 "),doe=a("a"),XWr=o("FlaxBlenderbotSmallForConditionalGeneration"),zWr=o(" (BlenderbotSmall model)"),QWr=l(),vA=a("li"),eAe=a("strong"),WWr=o("encoder-decoder"),HWr=o(" \u2014 "),coe=a("a"),UWr=o("FlaxEncoderDecoderModel"),JWr=o(" (Encoder decoder model)"),YWr=l(),FA=a("li"),oAe=a("strong"),KWr=o("longt5"),ZWr=o(" \u2014 "),moe=a("a"),eHr=o("FlaxLongT5ForConditionalGeneration"),oHr=o(" (LongT5 model)"),rHr=l(),TA=a("li"),rAe=a("strong"),tHr=o("marian"),aHr=o(" \u2014 "),foe=a("a"),nHr=o("FlaxMarianMTModel"),sHr=o(" (Marian model)"),lHr=l(),MA=a("li"),tAe=a("strong"),iHr=o("mbart"),dHr=o(" \u2014 "),goe=a("a"),cHr=o("FlaxMBartForConditionalGeneration"),mHr=o(" (mBART model)"),fHr=l(),EA=a("li"),aAe=a("strong"),gHr=o("mt5"),hHr=o(" \u2014 "),hoe=a("a"),uHr=o("FlaxMT5ForConditionalGeneration"),pHr=o(" (MT5 model)"),_Hr=l(),CA=a("li"),nAe=a("strong"),bHr=o("pegasus"),vHr=o(" \u2014 "),uoe=a("a"),FHr=o("FlaxPegasusForConditionalGeneration"),THr=o(" (Pegasus model)"),MHr=l(),wA=a("li"),sAe=a("strong"),EHr=o("t5"),CHr=o(" \u2014 "),poe=a("a"),wHr=o("FlaxT5ForConditionalGeneration"),AHr=o(" (T5 model)"),LHr=l(),F(AA.$$.fragment),Rze=l(),im=a("h2"),LA=a("a"),lAe=a("span"),F($$.$$.fragment),yHr=l(),iAe=a("span"),xHr=o("FlaxAutoModelForSequenceClassification"),Pze=l(),Fr=a("div"),F(k$.$$.fragment),$Hr=l(),dm=a("p"),kHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_oe=a("a"),SHr=o("from_pretrained()"),RHr=o(" class method or the "),boe=a("a"),PHr=o("from_config()"),BHr=o(` class
method.`),IHr=l(),S$=a("p"),NHr=o("This class cannot be instantiated directly using "),dAe=a("code"),qHr=o("__init__()"),jHr=o(" (throws an error)."),DHr=l(),Yt=a("div"),F(R$.$$.fragment),GHr=l(),cAe=a("p"),OHr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),VHr=l(),cm=a("p"),XHr=o(`Note:
Loading a model from its configuration file does `),mAe=a("strong"),zHr=o("not"),QHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),voe=a("a"),WHr=o("from_pretrained()"),HHr=o(" to load the model weights."),UHr=l(),F(yA.$$.fragment),JHr=l(),Hr=a("div"),F(P$.$$.fragment),YHr=l(),fAe=a("p"),KHr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ZHr=l(),An=a("p"),eUr=o("The model class to instantiate is selected based on the "),gAe=a("code"),oUr=o("model_type"),rUr=o(` property of the config object (either
passed as an argument or loaded from `),hAe=a("code"),tUr=o("pretrained_model_name_or_path"),aUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uAe=a("code"),nUr=o("pretrained_model_name_or_path"),sUr=o(":"),lUr=l(),Se=a("ul"),xA=a("li"),pAe=a("strong"),iUr=o("albert"),dUr=o(" \u2014 "),Foe=a("a"),cUr=o("FlaxAlbertForSequenceClassification"),mUr=o(" (ALBERT model)"),fUr=l(),$A=a("li"),_Ae=a("strong"),gUr=o("bart"),hUr=o(" \u2014 "),Toe=a("a"),uUr=o("FlaxBartForSequenceClassification"),pUr=o(" (BART model)"),_Ur=l(),kA=a("li"),bAe=a("strong"),bUr=o("bert"),vUr=o(" \u2014 "),Moe=a("a"),FUr=o("FlaxBertForSequenceClassification"),TUr=o(" (BERT model)"),MUr=l(),SA=a("li"),vAe=a("strong"),EUr=o("big_bird"),CUr=o(" \u2014 "),Eoe=a("a"),wUr=o("FlaxBigBirdForSequenceClassification"),AUr=o(" (BigBird model)"),LUr=l(),RA=a("li"),FAe=a("strong"),yUr=o("distilbert"),xUr=o(" \u2014 "),Coe=a("a"),$Ur=o("FlaxDistilBertForSequenceClassification"),kUr=o(" (DistilBERT model)"),SUr=l(),PA=a("li"),TAe=a("strong"),RUr=o("electra"),PUr=o(" \u2014 "),woe=a("a"),BUr=o("FlaxElectraForSequenceClassification"),IUr=o(" (ELECTRA model)"),NUr=l(),BA=a("li"),MAe=a("strong"),qUr=o("mbart"),jUr=o(" \u2014 "),Aoe=a("a"),DUr=o("FlaxMBartForSequenceClassification"),GUr=o(" (mBART model)"),OUr=l(),IA=a("li"),EAe=a("strong"),VUr=o("roberta"),XUr=o(" \u2014 "),Loe=a("a"),zUr=o("FlaxRobertaForSequenceClassification"),QUr=o(" (RoBERTa model)"),WUr=l(),NA=a("li"),CAe=a("strong"),HUr=o("roformer"),UUr=o(" \u2014 "),yoe=a("a"),JUr=o("FlaxRoFormerForSequenceClassification"),YUr=o(" (RoFormer model)"),KUr=l(),qA=a("li"),wAe=a("strong"),ZUr=o("xlm-roberta"),eJr=o(" \u2014 "),xoe=a("a"),oJr=o("FlaxXLMRobertaForSequenceClassification"),rJr=o(" (XLM-RoBERTa model)"),tJr=l(),F(jA.$$.fragment),Bze=l(),mm=a("h2"),DA=a("a"),AAe=a("span"),F(B$.$$.fragment),aJr=l(),LAe=a("span"),nJr=o("FlaxAutoModelForQuestionAnswering"),Ize=l(),Tr=a("div"),F(I$.$$.fragment),sJr=l(),fm=a("p"),lJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$oe=a("a"),iJr=o("from_pretrained()"),dJr=o(" class method or the "),koe=a("a"),cJr=o("from_config()"),mJr=o(` class
method.`),fJr=l(),N$=a("p"),gJr=o("This class cannot be instantiated directly using "),yAe=a("code"),hJr=o("__init__()"),uJr=o(" (throws an error)."),pJr=l(),Kt=a("div"),F(q$.$$.fragment),_Jr=l(),xAe=a("p"),bJr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vJr=l(),gm=a("p"),FJr=o(`Note:
Loading a model from its configuration file does `),$Ae=a("strong"),TJr=o("not"),MJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Soe=a("a"),EJr=o("from_pretrained()"),CJr=o(" to load the model weights."),wJr=l(),F(GA.$$.fragment),AJr=l(),Ur=a("div"),F(j$.$$.fragment),LJr=l(),kAe=a("p"),yJr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xJr=l(),Ln=a("p"),$Jr=o("The model class to instantiate is selected based on the "),SAe=a("code"),kJr=o("model_type"),SJr=o(` property of the config object (either
passed as an argument or loaded from `),RAe=a("code"),RJr=o("pretrained_model_name_or_path"),PJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PAe=a("code"),BJr=o("pretrained_model_name_or_path"),IJr=o(":"),NJr=l(),Re=a("ul"),OA=a("li"),BAe=a("strong"),qJr=o("albert"),jJr=o(" \u2014 "),Roe=a("a"),DJr=o("FlaxAlbertForQuestionAnswering"),GJr=o(" (ALBERT model)"),OJr=l(),VA=a("li"),IAe=a("strong"),VJr=o("bart"),XJr=o(" \u2014 "),Poe=a("a"),zJr=o("FlaxBartForQuestionAnswering"),QJr=o(" (BART model)"),WJr=l(),XA=a("li"),NAe=a("strong"),HJr=o("bert"),UJr=o(" \u2014 "),Boe=a("a"),JJr=o("FlaxBertForQuestionAnswering"),YJr=o(" (BERT model)"),KJr=l(),zA=a("li"),qAe=a("strong"),ZJr=o("big_bird"),eYr=o(" \u2014 "),Ioe=a("a"),oYr=o("FlaxBigBirdForQuestionAnswering"),rYr=o(" (BigBird model)"),tYr=l(),QA=a("li"),jAe=a("strong"),aYr=o("distilbert"),nYr=o(" \u2014 "),Noe=a("a"),sYr=o("FlaxDistilBertForQuestionAnswering"),lYr=o(" (DistilBERT model)"),iYr=l(),WA=a("li"),DAe=a("strong"),dYr=o("electra"),cYr=o(" \u2014 "),qoe=a("a"),mYr=o("FlaxElectraForQuestionAnswering"),fYr=o(" (ELECTRA model)"),gYr=l(),HA=a("li"),GAe=a("strong"),hYr=o("mbart"),uYr=o(" \u2014 "),joe=a("a"),pYr=o("FlaxMBartForQuestionAnswering"),_Yr=o(" (mBART model)"),bYr=l(),UA=a("li"),OAe=a("strong"),vYr=o("roberta"),FYr=o(" \u2014 "),Doe=a("a"),TYr=o("FlaxRobertaForQuestionAnswering"),MYr=o(" (RoBERTa model)"),EYr=l(),JA=a("li"),VAe=a("strong"),CYr=o("roformer"),wYr=o(" \u2014 "),Goe=a("a"),AYr=o("FlaxRoFormerForQuestionAnswering"),LYr=o(" (RoFormer model)"),yYr=l(),YA=a("li"),XAe=a("strong"),xYr=o("xlm-roberta"),$Yr=o(" \u2014 "),Ooe=a("a"),kYr=o("FlaxXLMRobertaForQuestionAnswering"),SYr=o(" (XLM-RoBERTa model)"),RYr=l(),F(KA.$$.fragment),Nze=l(),hm=a("h2"),ZA=a("a"),zAe=a("span"),F(D$.$$.fragment),PYr=l(),QAe=a("span"),BYr=o("FlaxAutoModelForTokenClassification"),qze=l(),Mr=a("div"),F(G$.$$.fragment),IYr=l(),um=a("p"),NYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Voe=a("a"),qYr=o("from_pretrained()"),jYr=o(" class method or the "),Xoe=a("a"),DYr=o("from_config()"),GYr=o(` class
method.`),OYr=l(),O$=a("p"),VYr=o("This class cannot be instantiated directly using "),WAe=a("code"),XYr=o("__init__()"),zYr=o(" (throws an error)."),QYr=l(),Zt=a("div"),F(V$.$$.fragment),WYr=l(),HAe=a("p"),HYr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),UYr=l(),pm=a("p"),JYr=o(`Note:
Loading a model from its configuration file does `),UAe=a("strong"),YYr=o("not"),KYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zoe=a("a"),ZYr=o("from_pretrained()"),eKr=o(" to load the model weights."),oKr=l(),F(e6.$$.fragment),rKr=l(),Jr=a("div"),F(X$.$$.fragment),tKr=l(),JAe=a("p"),aKr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nKr=l(),yn=a("p"),sKr=o("The model class to instantiate is selected based on the "),YAe=a("code"),lKr=o("model_type"),iKr=o(` property of the config object (either
passed as an argument or loaded from `),KAe=a("code"),dKr=o("pretrained_model_name_or_path"),cKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZAe=a("code"),mKr=o("pretrained_model_name_or_path"),fKr=o(":"),gKr=l(),Ve=a("ul"),o6=a("li"),e6e=a("strong"),hKr=o("albert"),uKr=o(" \u2014 "),Qoe=a("a"),pKr=o("FlaxAlbertForTokenClassification"),_Kr=o(" (ALBERT model)"),bKr=l(),r6=a("li"),o6e=a("strong"),vKr=o("bert"),FKr=o(" \u2014 "),Woe=a("a"),TKr=o("FlaxBertForTokenClassification"),MKr=o(" (BERT model)"),EKr=l(),t6=a("li"),r6e=a("strong"),CKr=o("big_bird"),wKr=o(" \u2014 "),Hoe=a("a"),AKr=o("FlaxBigBirdForTokenClassification"),LKr=o(" (BigBird model)"),yKr=l(),a6=a("li"),t6e=a("strong"),xKr=o("distilbert"),$Kr=o(" \u2014 "),Uoe=a("a"),kKr=o("FlaxDistilBertForTokenClassification"),SKr=o(" (DistilBERT model)"),RKr=l(),n6=a("li"),a6e=a("strong"),PKr=o("electra"),BKr=o(" \u2014 "),Joe=a("a"),IKr=o("FlaxElectraForTokenClassification"),NKr=o(" (ELECTRA model)"),qKr=l(),s6=a("li"),n6e=a("strong"),jKr=o("roberta"),DKr=o(" \u2014 "),Yoe=a("a"),GKr=o("FlaxRobertaForTokenClassification"),OKr=o(" (RoBERTa model)"),VKr=l(),l6=a("li"),s6e=a("strong"),XKr=o("roformer"),zKr=o(" \u2014 "),Koe=a("a"),QKr=o("FlaxRoFormerForTokenClassification"),WKr=o(" (RoFormer model)"),HKr=l(),i6=a("li"),l6e=a("strong"),UKr=o("xlm-roberta"),JKr=o(" \u2014 "),Zoe=a("a"),YKr=o("FlaxXLMRobertaForTokenClassification"),KKr=o(" (XLM-RoBERTa model)"),ZKr=l(),F(d6.$$.fragment),jze=l(),_m=a("h2"),c6=a("a"),i6e=a("span"),F(z$.$$.fragment),eZr=l(),d6e=a("span"),oZr=o("FlaxAutoModelForMultipleChoice"),Dze=l(),Er=a("div"),F(Q$.$$.fragment),rZr=l(),bm=a("p"),tZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ere=a("a"),aZr=o("from_pretrained()"),nZr=o(" class method or the "),ore=a("a"),sZr=o("from_config()"),lZr=o(` class
method.`),iZr=l(),W$=a("p"),dZr=o("This class cannot be instantiated directly using "),c6e=a("code"),cZr=o("__init__()"),mZr=o(" (throws an error)."),fZr=l(),ea=a("div"),F(H$.$$.fragment),gZr=l(),m6e=a("p"),hZr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uZr=l(),vm=a("p"),pZr=o(`Note:
Loading a model from its configuration file does `),f6e=a("strong"),_Zr=o("not"),bZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rre=a("a"),vZr=o("from_pretrained()"),FZr=o(" to load the model weights."),TZr=l(),F(m6.$$.fragment),MZr=l(),Yr=a("div"),F(U$.$$.fragment),EZr=l(),g6e=a("p"),CZr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),wZr=l(),xn=a("p"),AZr=o("The model class to instantiate is selected based on the "),h6e=a("code"),LZr=o("model_type"),yZr=o(` property of the config object (either
passed as an argument or loaded from `),u6e=a("code"),xZr=o("pretrained_model_name_or_path"),$Zr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p6e=a("code"),kZr=o("pretrained_model_name_or_path"),SZr=o(":"),RZr=l(),Xe=a("ul"),f6=a("li"),_6e=a("strong"),PZr=o("albert"),BZr=o(" \u2014 "),tre=a("a"),IZr=o("FlaxAlbertForMultipleChoice"),NZr=o(" (ALBERT model)"),qZr=l(),g6=a("li"),b6e=a("strong"),jZr=o("bert"),DZr=o(" \u2014 "),are=a("a"),GZr=o("FlaxBertForMultipleChoice"),OZr=o(" (BERT model)"),VZr=l(),h6=a("li"),v6e=a("strong"),XZr=o("big_bird"),zZr=o(" \u2014 "),nre=a("a"),QZr=o("FlaxBigBirdForMultipleChoice"),WZr=o(" (BigBird model)"),HZr=l(),u6=a("li"),F6e=a("strong"),UZr=o("distilbert"),JZr=o(" \u2014 "),sre=a("a"),YZr=o("FlaxDistilBertForMultipleChoice"),KZr=o(" (DistilBERT model)"),ZZr=l(),p6=a("li"),T6e=a("strong"),eet=o("electra"),oet=o(" \u2014 "),lre=a("a"),ret=o("FlaxElectraForMultipleChoice"),tet=o(" (ELECTRA model)"),aet=l(),_6=a("li"),M6e=a("strong"),net=o("roberta"),set=o(" \u2014 "),ire=a("a"),iet=o("FlaxRobertaForMultipleChoice"),det=o(" (RoBERTa model)"),cet=l(),b6=a("li"),E6e=a("strong"),met=o("roformer"),fet=o(" \u2014 "),dre=a("a"),get=o("FlaxRoFormerForMultipleChoice"),het=o(" (RoFormer model)"),uet=l(),v6=a("li"),C6e=a("strong"),pet=o("xlm-roberta"),_et=o(" \u2014 "),cre=a("a"),bet=o("FlaxXLMRobertaForMultipleChoice"),vet=o(" (XLM-RoBERTa model)"),Fet=l(),F(F6.$$.fragment),Gze=l(),Fm=a("h2"),T6=a("a"),w6e=a("span"),F(J$.$$.fragment),Tet=l(),A6e=a("span"),Met=o("FlaxAutoModelForNextSentencePrediction"),Oze=l(),Cr=a("div"),F(Y$.$$.fragment),Eet=l(),Tm=a("p"),Cet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mre=a("a"),wet=o("from_pretrained()"),Aet=o(" class method or the "),fre=a("a"),Let=o("from_config()"),yet=o(` class
method.`),xet=l(),K$=a("p"),$et=o("This class cannot be instantiated directly using "),L6e=a("code"),ket=o("__init__()"),Set=o(" (throws an error)."),Ret=l(),oa=a("div"),F(Z$.$$.fragment),Pet=l(),y6e=a("p"),Bet=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Iet=l(),Mm=a("p"),Net=o(`Note:
Loading a model from its configuration file does `),x6e=a("strong"),qet=o("not"),jet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gre=a("a"),Det=o("from_pretrained()"),Get=o(" to load the model weights."),Oet=l(),F(M6.$$.fragment),Vet=l(),Kr=a("div"),F(ek.$$.fragment),Xet=l(),$6e=a("p"),zet=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Qet=l(),$n=a("p"),Wet=o("The model class to instantiate is selected based on the "),k6e=a("code"),Het=o("model_type"),Uet=o(` property of the config object (either
passed as an argument or loaded from `),S6e=a("code"),Jet=o("pretrained_model_name_or_path"),Yet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R6e=a("code"),Ket=o("pretrained_model_name_or_path"),Zet=o(":"),eot=l(),P6e=a("ul"),E6=a("li"),B6e=a("strong"),oot=o("bert"),rot=o(" \u2014 "),hre=a("a"),tot=o("FlaxBertForNextSentencePrediction"),aot=o(" (BERT model)"),not=l(),F(C6.$$.fragment),Vze=l(),Em=a("h2"),w6=a("a"),I6e=a("span"),F(ok.$$.fragment),sot=l(),N6e=a("span"),lot=o("FlaxAutoModelForImageClassification"),Xze=l(),wr=a("div"),F(rk.$$.fragment),iot=l(),Cm=a("p"),dot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ure=a("a"),cot=o("from_pretrained()"),mot=o(" class method or the "),pre=a("a"),fot=o("from_config()"),got=o(` class
method.`),hot=l(),tk=a("p"),uot=o("This class cannot be instantiated directly using "),q6e=a("code"),pot=o("__init__()"),_ot=o(" (throws an error)."),bot=l(),ra=a("div"),F(ak.$$.fragment),vot=l(),j6e=a("p"),Fot=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Tot=l(),wm=a("p"),Mot=o(`Note:
Loading a model from its configuration file does `),D6e=a("strong"),Eot=o("not"),Cot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_re=a("a"),wot=o("from_pretrained()"),Aot=o(" to load the model weights."),Lot=l(),F(A6.$$.fragment),yot=l(),Zr=a("div"),F(nk.$$.fragment),xot=l(),G6e=a("p"),$ot=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kot=l(),kn=a("p"),Sot=o("The model class to instantiate is selected based on the "),O6e=a("code"),Rot=o("model_type"),Pot=o(` property of the config object (either
passed as an argument or loaded from `),V6e=a("code"),Bot=o("pretrained_model_name_or_path"),Iot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=a("code"),Not=o("pretrained_model_name_or_path"),qot=o(":"),jot=l(),sk=a("ul"),L6=a("li"),z6e=a("strong"),Dot=o("beit"),Got=o(" \u2014 "),bre=a("a"),Oot=o("FlaxBeitForImageClassification"),Vot=o(" (BEiT model)"),Xot=l(),y6=a("li"),Q6e=a("strong"),zot=o("vit"),Qot=o(" \u2014 "),vre=a("a"),Wot=o("FlaxViTForImageClassification"),Hot=o(" (ViT model)"),Uot=l(),F(x6.$$.fragment),zze=l(),Am=a("h2"),$6=a("a"),W6e=a("span"),F(lk.$$.fragment),Jot=l(),H6e=a("span"),Yot=o("FlaxAutoModelForVision2Seq"),Qze=l(),Ar=a("div"),F(ik.$$.fragment),Kot=l(),Lm=a("p"),Zot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Fre=a("a"),ert=o("from_pretrained()"),ort=o(" class method or the "),Tre=a("a"),rrt=o("from_config()"),trt=o(` class
method.`),art=l(),dk=a("p"),nrt=o("This class cannot be instantiated directly using "),U6e=a("code"),srt=o("__init__()"),lrt=o(" (throws an error)."),irt=l(),ta=a("div"),F(ck.$$.fragment),drt=l(),J6e=a("p"),crt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),mrt=l(),ym=a("p"),frt=o(`Note:
Loading a model from its configuration file does `),Y6e=a("strong"),grt=o("not"),hrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mre=a("a"),urt=o("from_pretrained()"),prt=o(" to load the model weights."),_rt=l(),F(k6.$$.fragment),brt=l(),et=a("div"),F(mk.$$.fragment),vrt=l(),K6e=a("p"),Frt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Trt=l(),Sn=a("p"),Mrt=o("The model class to instantiate is selected based on the "),Z6e=a("code"),Ert=o("model_type"),Crt=o(` property of the config object (either
passed as an argument or loaded from `),e7e=a("code"),wrt=o("pretrained_model_name_or_path"),Art=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o7e=a("code"),Lrt=o("pretrained_model_name_or_path"),yrt=o(":"),xrt=l(),r7e=a("ul"),S6=a("li"),t7e=a("strong"),$rt=o("vision-encoder-decoder"),krt=o(" \u2014 "),Ere=a("a"),Srt=o("FlaxVisionEncoderDecoderModel"),Rrt=o(" (Vision Encoder decoder model)"),Prt=l(),F(R6.$$.fragment),this.h()},l(m){const _=lQt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var fk=s(u);f=n(fk,"A",{id:!0,class:!0,href:!0});var a7e=s(f);p=n(a7e,"SPAN",{});var n7e=s(p);T(d.$$.fragment,n7e),n7e.forEach(t),a7e.forEach(t),h=i(fk),Eo=n(fk,"SPAN",{});var s7e=s(Eo);Ai=r(s7e,"Auto Classes"),s7e.forEach(t),fk.forEach(t),Sm=i(m),st=n(m,"P",{});var gk=s(st);Li=r(gk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),yi=n(gk,"CODE",{});var l7e=s(yi);KL=r(l7e,"from_pretrained()"),l7e.forEach(t),Rm=r(gk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),gk.forEach(t),Oe=i(m),Qe=n(m,"P",{});var Rn=s(Qe);xi=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var i7e=s(Pn);ZL=r(i7e,"AutoConfig"),i7e.forEach(t),Bn=r(Rn,", "),In=n(Rn,"A",{href:!0});var d7e=s(In);ey=r(d7e,"AutoModel"),d7e.forEach(t),$i=r(Rn,`, and
`),Nn=n(Rn,"A",{href:!0});var c7e=s(Nn);oy=r(c7e,"AutoTokenizer"),c7e.forEach(t),ki=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),Pm=i(m),T(Sa.$$.fragment,m),We=i(m),Ae=n(m,"P",{});var hk=s(Ae);SS=r(hk,"will create a model that is an instance of "),Si=n(hk,"A",{href:!0});var m7e=s(Si);RS=r(m7e,"BertModel"),m7e.forEach(t),PS=r(hk,"."),hk.forEach(t),Co=i(m),Ra=n(m,"P",{});var uk=s(Ra);BS=r(uk,"There is one class of "),Bm=n(uk,"CODE",{});var f7e=s(Bm);IS=r(f7e,"AutoModel"),f7e.forEach(t),tHe=r(uk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),uk.forEach(t),OVe=i(m),Ri=n(m,"H2",{class:!0});var pk=s(Ri);Im=n(pk,"A",{id:!0,class:!0,href:!0});var g7e=s(Im);bae=n(g7e,"SPAN",{});var h7e=s(bae);T(ry.$$.fragment,h7e),h7e.forEach(t),g7e.forEach(t),aHe=i(pk),vae=n(pk,"SPAN",{});var u7e=s(vae);nHe=r(u7e,"Extending the Auto Classes"),u7e.forEach(t),pk.forEach(t),VVe=i(m),qn=n(m,"P",{});var xm=s(qn);sHe=r(xm,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Fae=n(xm,"CODE",{});var p7e=s(Fae);lHe=r(p7e,"NewModel"),p7e.forEach(t),iHe=r(xm,", make sure you have a "),Tae=n(xm,"CODE",{});var _7e=s(Tae);dHe=r(_7e,"NewModelConfig"),_7e.forEach(t),cHe=r(xm,` then you can add those to the auto
classes like this:`),xm.forEach(t),XVe=i(m),T(ty.$$.fragment,m),zVe=i(m),NS=n(m,"P",{});var b7e=s(NS);mHe=r(b7e,"You will then be able to use the auto classes like you would usually do!"),b7e.forEach(t),QVe=i(m),T(Nm.$$.fragment,m),WVe=i(m),Pi=n(m,"H2",{class:!0});var _k=s(Pi);qm=n(_k,"A",{id:!0,class:!0,href:!0});var v7e=s(qm);Mae=n(v7e,"SPAN",{});var F7e=s(Mae);T(ay.$$.fragment,F7e),F7e.forEach(t),v7e.forEach(t),fHe=i(_k),Eae=n(_k,"SPAN",{});var T7e=s(Eae);gHe=r(T7e,"AutoConfig"),T7e.forEach(t),_k.forEach(t),HVe=i(m),wo=n(m,"DIV",{class:!0});var at=s(wo);T(ny.$$.fragment,at),hHe=i(at),sy=n(at,"P",{});var bk=s(sy);uHe=r(bk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),qS=n(bk,"A",{href:!0});var M7e=s(qS);pHe=r(M7e,"from_pretrained()"),M7e.forEach(t),_He=r(bk," class method."),bk.forEach(t),bHe=i(at),ly=n(at,"P",{});var vk=s(ly);vHe=r(vk,"This class cannot be instantiated directly using "),Cae=n(vk,"CODE",{});var E7e=s(Cae);FHe=r(E7e,"__init__()"),E7e.forEach(t),THe=r(vk," (throws an error)."),vk.forEach(t),MHe=i(at),Lr=n(at,"DIV",{class:!0});var nt=s(Lr);T(iy.$$.fragment,nt),EHe=i(nt),wae=n(nt,"P",{});var C7e=s(wae);CHe=r(C7e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),C7e.forEach(t),wHe=i(nt),Bi=n(nt,"P",{});var $m=s(Bi);AHe=r($m,"The configuration class to instantiate is selected based on the "),Aae=n($m,"CODE",{});var w7e=s(Aae);LHe=r(w7e,"model_type"),w7e.forEach(t),yHe=r($m,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Lae=n($m,"CODE",{});var A7e=s(Lae);xHe=r(A7e,"pretrained_model_name_or_path"),A7e.forEach(t),$He=r($m,":"),$m.forEach(t),kHe=i(nt),A=n(nt,"UL",{});var L=s(A);jm=n(L,"LI",{});var P6=s(jm);yae=n(P6,"STRONG",{});var L7e=s(yae);SHe=r(L7e,"albert"),L7e.forEach(t),RHe=r(P6," \u2014 "),jS=n(P6,"A",{href:!0});var y7e=s(jS);PHe=r(y7e,"AlbertConfig"),y7e.forEach(t),BHe=r(P6," (ALBERT model)"),P6.forEach(t),IHe=i(L),Dm=n(L,"LI",{});var B6=s(Dm);xae=n(B6,"STRONG",{});var x7e=s(xae);NHe=r(x7e,"bart"),x7e.forEach(t),qHe=r(B6," \u2014 "),DS=n(B6,"A",{href:!0});var $7e=s(DS);jHe=r($7e,"BartConfig"),$7e.forEach(t),DHe=r(B6," (BART model)"),B6.forEach(t),GHe=i(L),Gm=n(L,"LI",{});var I6=s(Gm);$ae=n(I6,"STRONG",{});var k7e=s($ae);OHe=r(k7e,"beit"),k7e.forEach(t),VHe=r(I6," \u2014 "),GS=n(I6,"A",{href:!0});var S7e=s(GS);XHe=r(S7e,"BeitConfig"),S7e.forEach(t),zHe=r(I6," (BEiT model)"),I6.forEach(t),QHe=i(L),Om=n(L,"LI",{});var N6=s(Om);kae=n(N6,"STRONG",{});var R7e=s(kae);WHe=r(R7e,"bert"),R7e.forEach(t),HHe=r(N6," \u2014 "),OS=n(N6,"A",{href:!0});var P7e=s(OS);UHe=r(P7e,"BertConfig"),P7e.forEach(t),JHe=r(N6," (BERT model)"),N6.forEach(t),YHe=i(L),Vm=n(L,"LI",{});var q6=s(Vm);Sae=n(q6,"STRONG",{});var B7e=s(Sae);KHe=r(B7e,"bert-generation"),B7e.forEach(t),ZHe=r(q6," \u2014 "),VS=n(q6,"A",{href:!0});var I7e=s(VS);eUe=r(I7e,"BertGenerationConfig"),I7e.forEach(t),oUe=r(q6," (Bert Generation model)"),q6.forEach(t),rUe=i(L),Xm=n(L,"LI",{});var j6=s(Xm);Rae=n(j6,"STRONG",{});var N7e=s(Rae);tUe=r(N7e,"big_bird"),N7e.forEach(t),aUe=r(j6," \u2014 "),XS=n(j6,"A",{href:!0});var q7e=s(XS);nUe=r(q7e,"BigBirdConfig"),q7e.forEach(t),sUe=r(j6," (BigBird model)"),j6.forEach(t),lUe=i(L),zm=n(L,"LI",{});var D6=s(zm);Pae=n(D6,"STRONG",{});var j7e=s(Pae);iUe=r(j7e,"bigbird_pegasus"),j7e.forEach(t),dUe=r(D6," \u2014 "),zS=n(D6,"A",{href:!0});var D7e=s(zS);cUe=r(D7e,"BigBirdPegasusConfig"),D7e.forEach(t),mUe=r(D6," (BigBird-Pegasus model)"),D6.forEach(t),fUe=i(L),Qm=n(L,"LI",{});var G6=s(Qm);Bae=n(G6,"STRONG",{});var G7e=s(Bae);gUe=r(G7e,"blenderbot"),G7e.forEach(t),hUe=r(G6," \u2014 "),QS=n(G6,"A",{href:!0});var O7e=s(QS);uUe=r(O7e,"BlenderbotConfig"),O7e.forEach(t),pUe=r(G6," (Blenderbot model)"),G6.forEach(t),_Ue=i(L),Wm=n(L,"LI",{});var O6=s(Wm);Iae=n(O6,"STRONG",{});var V7e=s(Iae);bUe=r(V7e,"blenderbot-small"),V7e.forEach(t),vUe=r(O6," \u2014 "),WS=n(O6,"A",{href:!0});var X7e=s(WS);FUe=r(X7e,"BlenderbotSmallConfig"),X7e.forEach(t),TUe=r(O6," (BlenderbotSmall model)"),O6.forEach(t),MUe=i(L),Hm=n(L,"LI",{});var V6=s(Hm);Nae=n(V6,"STRONG",{});var z7e=s(Nae);EUe=r(z7e,"bloom"),z7e.forEach(t),CUe=r(V6," \u2014 "),HS=n(V6,"A",{href:!0});var Q7e=s(HS);wUe=r(Q7e,"BloomConfig"),Q7e.forEach(t),AUe=r(V6," (BLOOM model)"),V6.forEach(t),LUe=i(L),Um=n(L,"LI",{});var X6=s(Um);qae=n(X6,"STRONG",{});var W7e=s(qae);yUe=r(W7e,"camembert"),W7e.forEach(t),xUe=r(X6," \u2014 "),US=n(X6,"A",{href:!0});var H7e=s(US);$Ue=r(H7e,"CamembertConfig"),H7e.forEach(t),kUe=r(X6," (CamemBERT model)"),X6.forEach(t),SUe=i(L),Jm=n(L,"LI",{});var z6=s(Jm);jae=n(z6,"STRONG",{});var U7e=s(jae);RUe=r(U7e,"canine"),U7e.forEach(t),PUe=r(z6," \u2014 "),JS=n(z6,"A",{href:!0});var J7e=s(JS);BUe=r(J7e,"CanineConfig"),J7e.forEach(t),IUe=r(z6," (CANINE model)"),z6.forEach(t),NUe=i(L),Ym=n(L,"LI",{});var Q6=s(Ym);Dae=n(Q6,"STRONG",{});var Y7e=s(Dae);qUe=r(Y7e,"clip"),Y7e.forEach(t),jUe=r(Q6," \u2014 "),YS=n(Q6,"A",{href:!0});var K7e=s(YS);DUe=r(K7e,"CLIPConfig"),K7e.forEach(t),GUe=r(Q6," (CLIP model)"),Q6.forEach(t),OUe=i(L),Km=n(L,"LI",{});var W6=s(Km);Gae=n(W6,"STRONG",{});var Z7e=s(Gae);VUe=r(Z7e,"codegen"),Z7e.forEach(t),XUe=r(W6," \u2014 "),KS=n(W6,"A",{href:!0});var eLe=s(KS);zUe=r(eLe,"CodeGenConfig"),eLe.forEach(t),QUe=r(W6," (CodeGen model)"),W6.forEach(t),WUe=i(L),Zm=n(L,"LI",{});var H6=s(Zm);Oae=n(H6,"STRONG",{});var oLe=s(Oae);HUe=r(oLe,"convbert"),oLe.forEach(t),UUe=r(H6," \u2014 "),ZS=n(H6,"A",{href:!0});var rLe=s(ZS);JUe=r(rLe,"ConvBertConfig"),rLe.forEach(t),YUe=r(H6," (ConvBERT model)"),H6.forEach(t),KUe=i(L),ef=n(L,"LI",{});var U6=s(ef);Vae=n(U6,"STRONG",{});var tLe=s(Vae);ZUe=r(tLe,"convnext"),tLe.forEach(t),eJe=r(U6," \u2014 "),eR=n(U6,"A",{href:!0});var aLe=s(eR);oJe=r(aLe,"ConvNextConfig"),aLe.forEach(t),rJe=r(U6," (ConvNeXT model)"),U6.forEach(t),tJe=i(L),of=n(L,"LI",{});var J6=s(of);Xae=n(J6,"STRONG",{});var nLe=s(Xae);aJe=r(nLe,"ctrl"),nLe.forEach(t),nJe=r(J6," \u2014 "),oR=n(J6,"A",{href:!0});var sLe=s(oR);sJe=r(sLe,"CTRLConfig"),sLe.forEach(t),lJe=r(J6," (CTRL model)"),J6.forEach(t),iJe=i(L),rf=n(L,"LI",{});var Y6=s(rf);zae=n(Y6,"STRONG",{});var lLe=s(zae);dJe=r(lLe,"cvt"),lLe.forEach(t),cJe=r(Y6," \u2014 "),rR=n(Y6,"A",{href:!0});var iLe=s(rR);mJe=r(iLe,"CvtConfig"),iLe.forEach(t),fJe=r(Y6," (CvT model)"),Y6.forEach(t),gJe=i(L),tf=n(L,"LI",{});var K6=s(tf);Qae=n(K6,"STRONG",{});var dLe=s(Qae);hJe=r(dLe,"data2vec-audio"),dLe.forEach(t),uJe=r(K6," \u2014 "),tR=n(K6,"A",{href:!0});var cLe=s(tR);pJe=r(cLe,"Data2VecAudioConfig"),cLe.forEach(t),_Je=r(K6," (Data2VecAudio model)"),K6.forEach(t),bJe=i(L),af=n(L,"LI",{});var Z6=s(af);Wae=n(Z6,"STRONG",{});var mLe=s(Wae);vJe=r(mLe,"data2vec-text"),mLe.forEach(t),FJe=r(Z6," \u2014 "),aR=n(Z6,"A",{href:!0});var fLe=s(aR);TJe=r(fLe,"Data2VecTextConfig"),fLe.forEach(t),MJe=r(Z6," (Data2VecText model)"),Z6.forEach(t),EJe=i(L),nf=n(L,"LI",{});var e7=s(nf);Hae=n(e7,"STRONG",{});var gLe=s(Hae);CJe=r(gLe,"data2vec-vision"),gLe.forEach(t),wJe=r(e7," \u2014 "),nR=n(e7,"A",{href:!0});var hLe=s(nR);AJe=r(hLe,"Data2VecVisionConfig"),hLe.forEach(t),LJe=r(e7," (Data2VecVision model)"),e7.forEach(t),yJe=i(L),sf=n(L,"LI",{});var o7=s(sf);Uae=n(o7,"STRONG",{});var uLe=s(Uae);xJe=r(uLe,"deberta"),uLe.forEach(t),$Je=r(o7," \u2014 "),sR=n(o7,"A",{href:!0});var pLe=s(sR);kJe=r(pLe,"DebertaConfig"),pLe.forEach(t),SJe=r(o7," (DeBERTa model)"),o7.forEach(t),RJe=i(L),lf=n(L,"LI",{});var r7=s(lf);Jae=n(r7,"STRONG",{});var _Le=s(Jae);PJe=r(_Le,"deberta-v2"),_Le.forEach(t),BJe=r(r7," \u2014 "),lR=n(r7,"A",{href:!0});var bLe=s(lR);IJe=r(bLe,"DebertaV2Config"),bLe.forEach(t),NJe=r(r7," (DeBERTa-v2 model)"),r7.forEach(t),qJe=i(L),df=n(L,"LI",{});var t7=s(df);Yae=n(t7,"STRONG",{});var Irt=s(Yae);jJe=r(Irt,"decision_transformer"),Irt.forEach(t),DJe=r(t7," \u2014 "),iR=n(t7,"A",{href:!0});var Nrt=s(iR);GJe=r(Nrt,"DecisionTransformerConfig"),Nrt.forEach(t),OJe=r(t7," (Decision Transformer model)"),t7.forEach(t),VJe=i(L),cf=n(L,"LI",{});var vLe=s(cf);Kae=n(vLe,"STRONG",{});var qrt=s(Kae);XJe=r(qrt,"deit"),qrt.forEach(t),zJe=r(vLe," \u2014 "),dR=n(vLe,"A",{href:!0});var jrt=s(dR);QJe=r(jrt,"DeiTConfig"),jrt.forEach(t),WJe=r(vLe," (DeiT model)"),vLe.forEach(t),HJe=i(L),mf=n(L,"LI",{});var FLe=s(mf);Zae=n(FLe,"STRONG",{});var Drt=s(Zae);UJe=r(Drt,"detr"),Drt.forEach(t),JJe=r(FLe," \u2014 "),cR=n(FLe,"A",{href:!0});var Grt=s(cR);YJe=r(Grt,"DetrConfig"),Grt.forEach(t),KJe=r(FLe," (DETR model)"),FLe.forEach(t),ZJe=i(L),ff=n(L,"LI",{});var TLe=s(ff);ene=n(TLe,"STRONG",{});var Ort=s(ene);eYe=r(Ort,"distilbert"),Ort.forEach(t),oYe=r(TLe," \u2014 "),mR=n(TLe,"A",{href:!0});var Vrt=s(mR);rYe=r(Vrt,"DistilBertConfig"),Vrt.forEach(t),tYe=r(TLe," (DistilBERT model)"),TLe.forEach(t),aYe=i(L),gf=n(L,"LI",{});var MLe=s(gf);one=n(MLe,"STRONG",{});var Xrt=s(one);nYe=r(Xrt,"dpr"),Xrt.forEach(t),sYe=r(MLe," \u2014 "),fR=n(MLe,"A",{href:!0});var zrt=s(fR);lYe=r(zrt,"DPRConfig"),zrt.forEach(t),iYe=r(MLe," (DPR model)"),MLe.forEach(t),dYe=i(L),hf=n(L,"LI",{});var ELe=s(hf);rne=n(ELe,"STRONG",{});var Qrt=s(rne);cYe=r(Qrt,"dpt"),Qrt.forEach(t),mYe=r(ELe," \u2014 "),gR=n(ELe,"A",{href:!0});var Wrt=s(gR);fYe=r(Wrt,"DPTConfig"),Wrt.forEach(t),gYe=r(ELe," (DPT model)"),ELe.forEach(t),hYe=i(L),uf=n(L,"LI",{});var CLe=s(uf);tne=n(CLe,"STRONG",{});var Hrt=s(tne);uYe=r(Hrt,"electra"),Hrt.forEach(t),pYe=r(CLe," \u2014 "),hR=n(CLe,"A",{href:!0});var Urt=s(hR);_Ye=r(Urt,"ElectraConfig"),Urt.forEach(t),bYe=r(CLe," (ELECTRA model)"),CLe.forEach(t),vYe=i(L),pf=n(L,"LI",{});var wLe=s(pf);ane=n(wLe,"STRONG",{});var Jrt=s(ane);FYe=r(Jrt,"encoder-decoder"),Jrt.forEach(t),TYe=r(wLe," \u2014 "),uR=n(wLe,"A",{href:!0});var Yrt=s(uR);MYe=r(Yrt,"EncoderDecoderConfig"),Yrt.forEach(t),EYe=r(wLe," (Encoder decoder model)"),wLe.forEach(t),CYe=i(L),_f=n(L,"LI",{});var ALe=s(_f);nne=n(ALe,"STRONG",{});var Krt=s(nne);wYe=r(Krt,"flaubert"),Krt.forEach(t),AYe=r(ALe," \u2014 "),pR=n(ALe,"A",{href:!0});var Zrt=s(pR);LYe=r(Zrt,"FlaubertConfig"),Zrt.forEach(t),yYe=r(ALe," (FlauBERT model)"),ALe.forEach(t),xYe=i(L),bf=n(L,"LI",{});var LLe=s(bf);sne=n(LLe,"STRONG",{});var ett=s(sne);$Ye=r(ett,"flava"),ett.forEach(t),kYe=r(LLe," \u2014 "),_R=n(LLe,"A",{href:!0});var ott=s(_R);SYe=r(ott,"FlavaConfig"),ott.forEach(t),RYe=r(LLe," (FLAVA model)"),LLe.forEach(t),PYe=i(L),vf=n(L,"LI",{});var yLe=s(vf);lne=n(yLe,"STRONG",{});var rtt=s(lne);BYe=r(rtt,"fnet"),rtt.forEach(t),IYe=r(yLe," \u2014 "),bR=n(yLe,"A",{href:!0});var ttt=s(bR);NYe=r(ttt,"FNetConfig"),ttt.forEach(t),qYe=r(yLe," (FNet model)"),yLe.forEach(t),jYe=i(L),Ff=n(L,"LI",{});var xLe=s(Ff);ine=n(xLe,"STRONG",{});var att=s(ine);DYe=r(att,"fsmt"),att.forEach(t),GYe=r(xLe," \u2014 "),vR=n(xLe,"A",{href:!0});var ntt=s(vR);OYe=r(ntt,"FSMTConfig"),ntt.forEach(t),VYe=r(xLe," (FairSeq Machine-Translation model)"),xLe.forEach(t),XYe=i(L),Tf=n(L,"LI",{});var $Le=s(Tf);dne=n($Le,"STRONG",{});var stt=s(dne);zYe=r(stt,"funnel"),stt.forEach(t),QYe=r($Le," \u2014 "),FR=n($Le,"A",{href:!0});var ltt=s(FR);WYe=r(ltt,"FunnelConfig"),ltt.forEach(t),HYe=r($Le," (Funnel Transformer model)"),$Le.forEach(t),UYe=i(L),Mf=n(L,"LI",{});var kLe=s(Mf);cne=n(kLe,"STRONG",{});var itt=s(cne);JYe=r(itt,"glpn"),itt.forEach(t),YYe=r(kLe," \u2014 "),TR=n(kLe,"A",{href:!0});var dtt=s(TR);KYe=r(dtt,"GLPNConfig"),dtt.forEach(t),ZYe=r(kLe," (GLPN model)"),kLe.forEach(t),eKe=i(L),Ef=n(L,"LI",{});var SLe=s(Ef);mne=n(SLe,"STRONG",{});var ctt=s(mne);oKe=r(ctt,"gpt2"),ctt.forEach(t),rKe=r(SLe," \u2014 "),MR=n(SLe,"A",{href:!0});var mtt=s(MR);tKe=r(mtt,"GPT2Config"),mtt.forEach(t),aKe=r(SLe," (OpenAI GPT-2 model)"),SLe.forEach(t),nKe=i(L),Cf=n(L,"LI",{});var RLe=s(Cf);fne=n(RLe,"STRONG",{});var ftt=s(fne);sKe=r(ftt,"gpt_neo"),ftt.forEach(t),lKe=r(RLe," \u2014 "),ER=n(RLe,"A",{href:!0});var gtt=s(ER);iKe=r(gtt,"GPTNeoConfig"),gtt.forEach(t),dKe=r(RLe," (GPT Neo model)"),RLe.forEach(t),cKe=i(L),wf=n(L,"LI",{});var PLe=s(wf);gne=n(PLe,"STRONG",{});var htt=s(gne);mKe=r(htt,"gpt_neox"),htt.forEach(t),fKe=r(PLe," \u2014 "),CR=n(PLe,"A",{href:!0});var utt=s(CR);gKe=r(utt,"GPTNeoXConfig"),utt.forEach(t),hKe=r(PLe," (GPT NeoX model)"),PLe.forEach(t),uKe=i(L),Af=n(L,"LI",{});var BLe=s(Af);hne=n(BLe,"STRONG",{});var ptt=s(hne);pKe=r(ptt,"gptj"),ptt.forEach(t),_Ke=r(BLe," \u2014 "),wR=n(BLe,"A",{href:!0});var _tt=s(wR);bKe=r(_tt,"GPTJConfig"),_tt.forEach(t),vKe=r(BLe," (GPT-J model)"),BLe.forEach(t),FKe=i(L),Lf=n(L,"LI",{});var ILe=s(Lf);une=n(ILe,"STRONG",{});var btt=s(une);TKe=r(btt,"groupvit"),btt.forEach(t),MKe=r(ILe," \u2014 "),AR=n(ILe,"A",{href:!0});var vtt=s(AR);EKe=r(vtt,"GroupViTConfig"),vtt.forEach(t),CKe=r(ILe," (GroupViT model)"),ILe.forEach(t),wKe=i(L),yf=n(L,"LI",{});var NLe=s(yf);pne=n(NLe,"STRONG",{});var Ftt=s(pne);AKe=r(Ftt,"hubert"),Ftt.forEach(t),LKe=r(NLe," \u2014 "),LR=n(NLe,"A",{href:!0});var Ttt=s(LR);yKe=r(Ttt,"HubertConfig"),Ttt.forEach(t),xKe=r(NLe," (Hubert model)"),NLe.forEach(t),$Ke=i(L),xf=n(L,"LI",{});var qLe=s(xf);_ne=n(qLe,"STRONG",{});var Mtt=s(_ne);kKe=r(Mtt,"ibert"),Mtt.forEach(t),SKe=r(qLe," \u2014 "),yR=n(qLe,"A",{href:!0});var Ett=s(yR);RKe=r(Ett,"IBertConfig"),Ett.forEach(t),PKe=r(qLe," (I-BERT model)"),qLe.forEach(t),BKe=i(L),$f=n(L,"LI",{});var jLe=s($f);bne=n(jLe,"STRONG",{});var Ctt=s(bne);IKe=r(Ctt,"imagegpt"),Ctt.forEach(t),NKe=r(jLe," \u2014 "),xR=n(jLe,"A",{href:!0});var wtt=s(xR);qKe=r(wtt,"ImageGPTConfig"),wtt.forEach(t),jKe=r(jLe," (ImageGPT model)"),jLe.forEach(t),DKe=i(L),kf=n(L,"LI",{});var DLe=s(kf);vne=n(DLe,"STRONG",{});var Att=s(vne);GKe=r(Att,"layoutlm"),Att.forEach(t),OKe=r(DLe," \u2014 "),$R=n(DLe,"A",{href:!0});var Ltt=s($R);VKe=r(Ltt,"LayoutLMConfig"),Ltt.forEach(t),XKe=r(DLe," (LayoutLM model)"),DLe.forEach(t),zKe=i(L),Sf=n(L,"LI",{});var GLe=s(Sf);Fne=n(GLe,"STRONG",{});var ytt=s(Fne);QKe=r(ytt,"layoutlmv2"),ytt.forEach(t),WKe=r(GLe," \u2014 "),kR=n(GLe,"A",{href:!0});var xtt=s(kR);HKe=r(xtt,"LayoutLMv2Config"),xtt.forEach(t),UKe=r(GLe," (LayoutLMv2 model)"),GLe.forEach(t),JKe=i(L),Rf=n(L,"LI",{});var OLe=s(Rf);Tne=n(OLe,"STRONG",{});var $tt=s(Tne);YKe=r($tt,"layoutlmv3"),$tt.forEach(t),KKe=r(OLe," \u2014 "),SR=n(OLe,"A",{href:!0});var ktt=s(SR);ZKe=r(ktt,"LayoutLMv3Config"),ktt.forEach(t),eZe=r(OLe," (LayoutLMv3 model)"),OLe.forEach(t),oZe=i(L),Pf=n(L,"LI",{});var VLe=s(Pf);Mne=n(VLe,"STRONG",{});var Stt=s(Mne);rZe=r(Stt,"led"),Stt.forEach(t),tZe=r(VLe," \u2014 "),RR=n(VLe,"A",{href:!0});var Rtt=s(RR);aZe=r(Rtt,"LEDConfig"),Rtt.forEach(t),nZe=r(VLe," (LED model)"),VLe.forEach(t),sZe=i(L),Bf=n(L,"LI",{});var XLe=s(Bf);Ene=n(XLe,"STRONG",{});var Ptt=s(Ene);lZe=r(Ptt,"levit"),Ptt.forEach(t),iZe=r(XLe," \u2014 "),PR=n(XLe,"A",{href:!0});var Btt=s(PR);dZe=r(Btt,"LevitConfig"),Btt.forEach(t),cZe=r(XLe," (LeViT model)"),XLe.forEach(t),mZe=i(L),If=n(L,"LI",{});var zLe=s(If);Cne=n(zLe,"STRONG",{});var Itt=s(Cne);fZe=r(Itt,"longformer"),Itt.forEach(t),gZe=r(zLe," \u2014 "),BR=n(zLe,"A",{href:!0});var Ntt=s(BR);hZe=r(Ntt,"LongformerConfig"),Ntt.forEach(t),uZe=r(zLe," (Longformer model)"),zLe.forEach(t),pZe=i(L),Nf=n(L,"LI",{});var QLe=s(Nf);wne=n(QLe,"STRONG",{});var qtt=s(wne);_Ze=r(qtt,"longt5"),qtt.forEach(t),bZe=r(QLe," \u2014 "),IR=n(QLe,"A",{href:!0});var jtt=s(IR);vZe=r(jtt,"LongT5Config"),jtt.forEach(t),FZe=r(QLe," (LongT5 model)"),QLe.forEach(t),TZe=i(L),qf=n(L,"LI",{});var WLe=s(qf);Ane=n(WLe,"STRONG",{});var Dtt=s(Ane);MZe=r(Dtt,"luke"),Dtt.forEach(t),EZe=r(WLe," \u2014 "),NR=n(WLe,"A",{href:!0});var Gtt=s(NR);CZe=r(Gtt,"LukeConfig"),Gtt.forEach(t),wZe=r(WLe," (LUKE model)"),WLe.forEach(t),AZe=i(L),jf=n(L,"LI",{});var HLe=s(jf);Lne=n(HLe,"STRONG",{});var Ott=s(Lne);LZe=r(Ott,"lxmert"),Ott.forEach(t),yZe=r(HLe," \u2014 "),qR=n(HLe,"A",{href:!0});var Vtt=s(qR);xZe=r(Vtt,"LxmertConfig"),Vtt.forEach(t),$Ze=r(HLe," (LXMERT model)"),HLe.forEach(t),kZe=i(L),Df=n(L,"LI",{});var ULe=s(Df);yne=n(ULe,"STRONG",{});var Xtt=s(yne);SZe=r(Xtt,"m2m_100"),Xtt.forEach(t),RZe=r(ULe," \u2014 "),jR=n(ULe,"A",{href:!0});var ztt=s(jR);PZe=r(ztt,"M2M100Config"),ztt.forEach(t),BZe=r(ULe," (M2M100 model)"),ULe.forEach(t),IZe=i(L),Gf=n(L,"LI",{});var JLe=s(Gf);xne=n(JLe,"STRONG",{});var Qtt=s(xne);NZe=r(Qtt,"marian"),Qtt.forEach(t),qZe=r(JLe," \u2014 "),DR=n(JLe,"A",{href:!0});var Wtt=s(DR);jZe=r(Wtt,"MarianConfig"),Wtt.forEach(t),DZe=r(JLe," (Marian model)"),JLe.forEach(t),GZe=i(L),Of=n(L,"LI",{});var YLe=s(Of);$ne=n(YLe,"STRONG",{});var Htt=s($ne);OZe=r(Htt,"maskformer"),Htt.forEach(t),VZe=r(YLe," \u2014 "),GR=n(YLe,"A",{href:!0});var Utt=s(GR);XZe=r(Utt,"MaskFormerConfig"),Utt.forEach(t),zZe=r(YLe," (MaskFormer model)"),YLe.forEach(t),QZe=i(L),Vf=n(L,"LI",{});var KLe=s(Vf);kne=n(KLe,"STRONG",{});var Jtt=s(kne);WZe=r(Jtt,"mbart"),Jtt.forEach(t),HZe=r(KLe," \u2014 "),OR=n(KLe,"A",{href:!0});var Ytt=s(OR);UZe=r(Ytt,"MBartConfig"),Ytt.forEach(t),JZe=r(KLe," (mBART model)"),KLe.forEach(t),YZe=i(L),Xf=n(L,"LI",{});var ZLe=s(Xf);Sne=n(ZLe,"STRONG",{});var Ktt=s(Sne);KZe=r(Ktt,"mctct"),Ktt.forEach(t),ZZe=r(ZLe," \u2014 "),VR=n(ZLe,"A",{href:!0});var Ztt=s(VR);eeo=r(Ztt,"MCTCTConfig"),Ztt.forEach(t),oeo=r(ZLe," (M-CTC-T model)"),ZLe.forEach(t),reo=i(L),zf=n(L,"LI",{});var eye=s(zf);Rne=n(eye,"STRONG",{});var eat=s(Rne);teo=r(eat,"megatron-bert"),eat.forEach(t),aeo=r(eye," \u2014 "),XR=n(eye,"A",{href:!0});var oat=s(XR);neo=r(oat,"MegatronBertConfig"),oat.forEach(t),seo=r(eye," (Megatron-BERT model)"),eye.forEach(t),leo=i(L),Qf=n(L,"LI",{});var oye=s(Qf);Pne=n(oye,"STRONG",{});var rat=s(Pne);ieo=r(rat,"mobilebert"),rat.forEach(t),deo=r(oye," \u2014 "),zR=n(oye,"A",{href:!0});var tat=s(zR);ceo=r(tat,"MobileBertConfig"),tat.forEach(t),meo=r(oye," (MobileBERT model)"),oye.forEach(t),feo=i(L),Wf=n(L,"LI",{});var rye=s(Wf);Bne=n(rye,"STRONG",{});var aat=s(Bne);geo=r(aat,"mobilevit"),aat.forEach(t),heo=r(rye," \u2014 "),QR=n(rye,"A",{href:!0});var nat=s(QR);ueo=r(nat,"MobileViTConfig"),nat.forEach(t),peo=r(rye," (MobileViT model)"),rye.forEach(t),_eo=i(L),Hf=n(L,"LI",{});var tye=s(Hf);Ine=n(tye,"STRONG",{});var sat=s(Ine);beo=r(sat,"mpnet"),sat.forEach(t),veo=r(tye," \u2014 "),WR=n(tye,"A",{href:!0});var lat=s(WR);Feo=r(lat,"MPNetConfig"),lat.forEach(t),Teo=r(tye," (MPNet model)"),tye.forEach(t),Meo=i(L),Uf=n(L,"LI",{});var aye=s(Uf);Nne=n(aye,"STRONG",{});var iat=s(Nne);Eeo=r(iat,"mt5"),iat.forEach(t),Ceo=r(aye," \u2014 "),HR=n(aye,"A",{href:!0});var dat=s(HR);weo=r(dat,"MT5Config"),dat.forEach(t),Aeo=r(aye," (MT5 model)"),aye.forEach(t),Leo=i(L),Jf=n(L,"LI",{});var nye=s(Jf);qne=n(nye,"STRONG",{});var cat=s(qne);yeo=r(cat,"mvp"),cat.forEach(t),xeo=r(nye," \u2014 "),UR=n(nye,"A",{href:!0});var mat=s(UR);$eo=r(mat,"MvpConfig"),mat.forEach(t),keo=r(nye," (MVP model)"),nye.forEach(t),Seo=i(L),Yf=n(L,"LI",{});var sye=s(Yf);jne=n(sye,"STRONG",{});var fat=s(jne);Reo=r(fat,"nezha"),fat.forEach(t),Peo=r(sye," \u2014 "),JR=n(sye,"A",{href:!0});var gat=s(JR);Beo=r(gat,"NezhaConfig"),gat.forEach(t),Ieo=r(sye," (Nezha model)"),sye.forEach(t),Neo=i(L),Kf=n(L,"LI",{});var lye=s(Kf);Dne=n(lye,"STRONG",{});var hat=s(Dne);qeo=r(hat,"nystromformer"),hat.forEach(t),jeo=r(lye," \u2014 "),YR=n(lye,"A",{href:!0});var uat=s(YR);Deo=r(uat,"NystromformerConfig"),uat.forEach(t),Geo=r(lye," (Nystr\xF6mformer model)"),lye.forEach(t),Oeo=i(L),Zf=n(L,"LI",{});var iye=s(Zf);Gne=n(iye,"STRONG",{});var pat=s(Gne);Veo=r(pat,"openai-gpt"),pat.forEach(t),Xeo=r(iye," \u2014 "),KR=n(iye,"A",{href:!0});var _at=s(KR);zeo=r(_at,"OpenAIGPTConfig"),_at.forEach(t),Qeo=r(iye," (OpenAI GPT model)"),iye.forEach(t),Weo=i(L),eg=n(L,"LI",{});var dye=s(eg);One=n(dye,"STRONG",{});var bat=s(One);Heo=r(bat,"opt"),bat.forEach(t),Ueo=r(dye," \u2014 "),ZR=n(dye,"A",{href:!0});var vat=s(ZR);Jeo=r(vat,"OPTConfig"),vat.forEach(t),Yeo=r(dye," (OPT model)"),dye.forEach(t),Keo=i(L),og=n(L,"LI",{});var cye=s(og);Vne=n(cye,"STRONG",{});var Fat=s(Vne);Zeo=r(Fat,"pegasus"),Fat.forEach(t),eoo=r(cye," \u2014 "),eP=n(cye,"A",{href:!0});var Tat=s(eP);ooo=r(Tat,"PegasusConfig"),Tat.forEach(t),roo=r(cye," (Pegasus model)"),cye.forEach(t),too=i(L),rg=n(L,"LI",{});var mye=s(rg);Xne=n(mye,"STRONG",{});var Mat=s(Xne);aoo=r(Mat,"perceiver"),Mat.forEach(t),noo=r(mye," \u2014 "),oP=n(mye,"A",{href:!0});var Eat=s(oP);soo=r(Eat,"PerceiverConfig"),Eat.forEach(t),loo=r(mye," (Perceiver model)"),mye.forEach(t),ioo=i(L),tg=n(L,"LI",{});var fye=s(tg);zne=n(fye,"STRONG",{});var Cat=s(zne);doo=r(Cat,"plbart"),Cat.forEach(t),coo=r(fye," \u2014 "),rP=n(fye,"A",{href:!0});var wat=s(rP);moo=r(wat,"PLBartConfig"),wat.forEach(t),foo=r(fye," (PLBart model)"),fye.forEach(t),goo=i(L),ag=n(L,"LI",{});var gye=s(ag);Qne=n(gye,"STRONG",{});var Aat=s(Qne);hoo=r(Aat,"poolformer"),Aat.forEach(t),uoo=r(gye," \u2014 "),tP=n(gye,"A",{href:!0});var Lat=s(tP);poo=r(Lat,"PoolFormerConfig"),Lat.forEach(t),_oo=r(gye," (PoolFormer model)"),gye.forEach(t),boo=i(L),ng=n(L,"LI",{});var hye=s(ng);Wne=n(hye,"STRONG",{});var yat=s(Wne);voo=r(yat,"prophetnet"),yat.forEach(t),Foo=r(hye," \u2014 "),aP=n(hye,"A",{href:!0});var xat=s(aP);Too=r(xat,"ProphetNetConfig"),xat.forEach(t),Moo=r(hye," (ProphetNet model)"),hye.forEach(t),Eoo=i(L),sg=n(L,"LI",{});var uye=s(sg);Hne=n(uye,"STRONG",{});var $at=s(Hne);Coo=r($at,"qdqbert"),$at.forEach(t),woo=r(uye," \u2014 "),nP=n(uye,"A",{href:!0});var kat=s(nP);Aoo=r(kat,"QDQBertConfig"),kat.forEach(t),Loo=r(uye," (QDQBert model)"),uye.forEach(t),yoo=i(L),lg=n(L,"LI",{});var pye=s(lg);Une=n(pye,"STRONG",{});var Sat=s(Une);xoo=r(Sat,"rag"),Sat.forEach(t),$oo=r(pye," \u2014 "),sP=n(pye,"A",{href:!0});var Rat=s(sP);koo=r(Rat,"RagConfig"),Rat.forEach(t),Soo=r(pye," (RAG model)"),pye.forEach(t),Roo=i(L),ig=n(L,"LI",{});var _ye=s(ig);Jne=n(_ye,"STRONG",{});var Pat=s(Jne);Poo=r(Pat,"realm"),Pat.forEach(t),Boo=r(_ye," \u2014 "),lP=n(_ye,"A",{href:!0});var Bat=s(lP);Ioo=r(Bat,"RealmConfig"),Bat.forEach(t),Noo=r(_ye," (REALM model)"),_ye.forEach(t),qoo=i(L),dg=n(L,"LI",{});var bye=s(dg);Yne=n(bye,"STRONG",{});var Iat=s(Yne);joo=r(Iat,"reformer"),Iat.forEach(t),Doo=r(bye," \u2014 "),iP=n(bye,"A",{href:!0});var Nat=s(iP);Goo=r(Nat,"ReformerConfig"),Nat.forEach(t),Ooo=r(bye," (Reformer model)"),bye.forEach(t),Voo=i(L),cg=n(L,"LI",{});var vye=s(cg);Kne=n(vye,"STRONG",{});var qat=s(Kne);Xoo=r(qat,"regnet"),qat.forEach(t),zoo=r(vye," \u2014 "),dP=n(vye,"A",{href:!0});var jat=s(dP);Qoo=r(jat,"RegNetConfig"),jat.forEach(t),Woo=r(vye," (RegNet model)"),vye.forEach(t),Hoo=i(L),mg=n(L,"LI",{});var Fye=s(mg);Zne=n(Fye,"STRONG",{});var Dat=s(Zne);Uoo=r(Dat,"rembert"),Dat.forEach(t),Joo=r(Fye," \u2014 "),cP=n(Fye,"A",{href:!0});var Gat=s(cP);Yoo=r(Gat,"RemBertConfig"),Gat.forEach(t),Koo=r(Fye," (RemBERT model)"),Fye.forEach(t),Zoo=i(L),fg=n(L,"LI",{});var Tye=s(fg);ese=n(Tye,"STRONG",{});var Oat=s(ese);ero=r(Oat,"resnet"),Oat.forEach(t),oro=r(Tye," \u2014 "),mP=n(Tye,"A",{href:!0});var Vat=s(mP);rro=r(Vat,"ResNetConfig"),Vat.forEach(t),tro=r(Tye," (ResNet model)"),Tye.forEach(t),aro=i(L),gg=n(L,"LI",{});var Mye=s(gg);ose=n(Mye,"STRONG",{});var Xat=s(ose);nro=r(Xat,"retribert"),Xat.forEach(t),sro=r(Mye," \u2014 "),fP=n(Mye,"A",{href:!0});var zat=s(fP);lro=r(zat,"RetriBertConfig"),zat.forEach(t),iro=r(Mye," (RetriBERT model)"),Mye.forEach(t),dro=i(L),hg=n(L,"LI",{});var Eye=s(hg);rse=n(Eye,"STRONG",{});var Qat=s(rse);cro=r(Qat,"roberta"),Qat.forEach(t),mro=r(Eye," \u2014 "),gP=n(Eye,"A",{href:!0});var Wat=s(gP);fro=r(Wat,"RobertaConfig"),Wat.forEach(t),gro=r(Eye," (RoBERTa model)"),Eye.forEach(t),hro=i(L),ug=n(L,"LI",{});var Cye=s(ug);tse=n(Cye,"STRONG",{});var Hat=s(tse);uro=r(Hat,"roformer"),Hat.forEach(t),pro=r(Cye," \u2014 "),hP=n(Cye,"A",{href:!0});var Uat=s(hP);_ro=r(Uat,"RoFormerConfig"),Uat.forEach(t),bro=r(Cye," (RoFormer model)"),Cye.forEach(t),vro=i(L),pg=n(L,"LI",{});var wye=s(pg);ase=n(wye,"STRONG",{});var Jat=s(ase);Fro=r(Jat,"segformer"),Jat.forEach(t),Tro=r(wye," \u2014 "),uP=n(wye,"A",{href:!0});var Yat=s(uP);Mro=r(Yat,"SegformerConfig"),Yat.forEach(t),Ero=r(wye," (SegFormer model)"),wye.forEach(t),Cro=i(L),_g=n(L,"LI",{});var Aye=s(_g);nse=n(Aye,"STRONG",{});var Kat=s(nse);wro=r(Kat,"sew"),Kat.forEach(t),Aro=r(Aye," \u2014 "),pP=n(Aye,"A",{href:!0});var Zat=s(pP);Lro=r(Zat,"SEWConfig"),Zat.forEach(t),yro=r(Aye," (SEW model)"),Aye.forEach(t),xro=i(L),bg=n(L,"LI",{});var Lye=s(bg);sse=n(Lye,"STRONG",{});var ent=s(sse);$ro=r(ent,"sew-d"),ent.forEach(t),kro=r(Lye," \u2014 "),_P=n(Lye,"A",{href:!0});var ont=s(_P);Sro=r(ont,"SEWDConfig"),ont.forEach(t),Rro=r(Lye," (SEW-D model)"),Lye.forEach(t),Pro=i(L),vg=n(L,"LI",{});var yye=s(vg);lse=n(yye,"STRONG",{});var rnt=s(lse);Bro=r(rnt,"speech-encoder-decoder"),rnt.forEach(t),Iro=r(yye," \u2014 "),bP=n(yye,"A",{href:!0});var tnt=s(bP);Nro=r(tnt,"SpeechEncoderDecoderConfig"),tnt.forEach(t),qro=r(yye," (Speech Encoder decoder model)"),yye.forEach(t),jro=i(L),Fg=n(L,"LI",{});var xye=s(Fg);ise=n(xye,"STRONG",{});var ant=s(ise);Dro=r(ant,"speech_to_text"),ant.forEach(t),Gro=r(xye," \u2014 "),vP=n(xye,"A",{href:!0});var nnt=s(vP);Oro=r(nnt,"Speech2TextConfig"),nnt.forEach(t),Vro=r(xye," (Speech2Text model)"),xye.forEach(t),Xro=i(L),Tg=n(L,"LI",{});var $ye=s(Tg);dse=n($ye,"STRONG",{});var snt=s(dse);zro=r(snt,"speech_to_text_2"),snt.forEach(t),Qro=r($ye," \u2014 "),FP=n($ye,"A",{href:!0});var lnt=s(FP);Wro=r(lnt,"Speech2Text2Config"),lnt.forEach(t),Hro=r($ye," (Speech2Text2 model)"),$ye.forEach(t),Uro=i(L),Mg=n(L,"LI",{});var kye=s(Mg);cse=n(kye,"STRONG",{});var int=s(cse);Jro=r(int,"splinter"),int.forEach(t),Yro=r(kye," \u2014 "),TP=n(kye,"A",{href:!0});var dnt=s(TP);Kro=r(dnt,"SplinterConfig"),dnt.forEach(t),Zro=r(kye," (Splinter model)"),kye.forEach(t),eto=i(L),Eg=n(L,"LI",{});var Sye=s(Eg);mse=n(Sye,"STRONG",{});var cnt=s(mse);oto=r(cnt,"squeezebert"),cnt.forEach(t),rto=r(Sye," \u2014 "),MP=n(Sye,"A",{href:!0});var mnt=s(MP);tto=r(mnt,"SqueezeBertConfig"),mnt.forEach(t),ato=r(Sye," (SqueezeBERT model)"),Sye.forEach(t),nto=i(L),Cg=n(L,"LI",{});var Rye=s(Cg);fse=n(Rye,"STRONG",{});var fnt=s(fse);sto=r(fnt,"swin"),fnt.forEach(t),lto=r(Rye," \u2014 "),EP=n(Rye,"A",{href:!0});var gnt=s(EP);ito=r(gnt,"SwinConfig"),gnt.forEach(t),dto=r(Rye," (Swin Transformer model)"),Rye.forEach(t),cto=i(L),wg=n(L,"LI",{});var Pye=s(wg);gse=n(Pye,"STRONG",{});var hnt=s(gse);mto=r(hnt,"t5"),hnt.forEach(t),fto=r(Pye," \u2014 "),CP=n(Pye,"A",{href:!0});var unt=s(CP);gto=r(unt,"T5Config"),unt.forEach(t),hto=r(Pye," (T5 model)"),Pye.forEach(t),uto=i(L),Ag=n(L,"LI",{});var Bye=s(Ag);hse=n(Bye,"STRONG",{});var pnt=s(hse);pto=r(pnt,"tapas"),pnt.forEach(t),_to=r(Bye," \u2014 "),wP=n(Bye,"A",{href:!0});var _nt=s(wP);bto=r(_nt,"TapasConfig"),_nt.forEach(t),vto=r(Bye," (TAPAS model)"),Bye.forEach(t),Fto=i(L),Lg=n(L,"LI",{});var Iye=s(Lg);use=n(Iye,"STRONG",{});var bnt=s(use);Tto=r(bnt,"trajectory_transformer"),bnt.forEach(t),Mto=r(Iye," \u2014 "),AP=n(Iye,"A",{href:!0});var vnt=s(AP);Eto=r(vnt,"TrajectoryTransformerConfig"),vnt.forEach(t),Cto=r(Iye," (Trajectory Transformer model)"),Iye.forEach(t),wto=i(L),yg=n(L,"LI",{});var Nye=s(yg);pse=n(Nye,"STRONG",{});var Fnt=s(pse);Ato=r(Fnt,"transfo-xl"),Fnt.forEach(t),Lto=r(Nye," \u2014 "),LP=n(Nye,"A",{href:!0});var Tnt=s(LP);yto=r(Tnt,"TransfoXLConfig"),Tnt.forEach(t),xto=r(Nye," (Transformer-XL model)"),Nye.forEach(t),$to=i(L),xg=n(L,"LI",{});var qye=s(xg);_se=n(qye,"STRONG",{});var Mnt=s(_se);kto=r(Mnt,"trocr"),Mnt.forEach(t),Sto=r(qye," \u2014 "),yP=n(qye,"A",{href:!0});var Ent=s(yP);Rto=r(Ent,"TrOCRConfig"),Ent.forEach(t),Pto=r(qye," (TrOCR model)"),qye.forEach(t),Bto=i(L),$g=n(L,"LI",{});var jye=s($g);bse=n(jye,"STRONG",{});var Cnt=s(bse);Ito=r(Cnt,"unispeech"),Cnt.forEach(t),Nto=r(jye," \u2014 "),xP=n(jye,"A",{href:!0});var wnt=s(xP);qto=r(wnt,"UniSpeechConfig"),wnt.forEach(t),jto=r(jye," (UniSpeech model)"),jye.forEach(t),Dto=i(L),kg=n(L,"LI",{});var Dye=s(kg);vse=n(Dye,"STRONG",{});var Ant=s(vse);Gto=r(Ant,"unispeech-sat"),Ant.forEach(t),Oto=r(Dye," \u2014 "),$P=n(Dye,"A",{href:!0});var Lnt=s($P);Vto=r(Lnt,"UniSpeechSatConfig"),Lnt.forEach(t),Xto=r(Dye," (UniSpeechSat model)"),Dye.forEach(t),zto=i(L),Sg=n(L,"LI",{});var Gye=s(Sg);Fse=n(Gye,"STRONG",{});var ynt=s(Fse);Qto=r(ynt,"van"),ynt.forEach(t),Wto=r(Gye," \u2014 "),kP=n(Gye,"A",{href:!0});var xnt=s(kP);Hto=r(xnt,"VanConfig"),xnt.forEach(t),Uto=r(Gye," (VAN model)"),Gye.forEach(t),Jto=i(L),Rg=n(L,"LI",{});var Oye=s(Rg);Tse=n(Oye,"STRONG",{});var $nt=s(Tse);Yto=r($nt,"vilt"),$nt.forEach(t),Kto=r(Oye," \u2014 "),SP=n(Oye,"A",{href:!0});var knt=s(SP);Zto=r(knt,"ViltConfig"),knt.forEach(t),eao=r(Oye," (ViLT model)"),Oye.forEach(t),oao=i(L),Pg=n(L,"LI",{});var Vye=s(Pg);Mse=n(Vye,"STRONG",{});var Snt=s(Mse);rao=r(Snt,"vision-encoder-decoder"),Snt.forEach(t),tao=r(Vye," \u2014 "),RP=n(Vye,"A",{href:!0});var Rnt=s(RP);aao=r(Rnt,"VisionEncoderDecoderConfig"),Rnt.forEach(t),nao=r(Vye," (Vision Encoder decoder model)"),Vye.forEach(t),sao=i(L),Bg=n(L,"LI",{});var Xye=s(Bg);Ese=n(Xye,"STRONG",{});var Pnt=s(Ese);lao=r(Pnt,"vision-text-dual-encoder"),Pnt.forEach(t),iao=r(Xye," \u2014 "),PP=n(Xye,"A",{href:!0});var Bnt=s(PP);dao=r(Bnt,"VisionTextDualEncoderConfig"),Bnt.forEach(t),cao=r(Xye," (VisionTextDualEncoder model)"),Xye.forEach(t),mao=i(L),Ig=n(L,"LI",{});var zye=s(Ig);Cse=n(zye,"STRONG",{});var Int=s(Cse);fao=r(Int,"visual_bert"),Int.forEach(t),gao=r(zye," \u2014 "),BP=n(zye,"A",{href:!0});var Nnt=s(BP);hao=r(Nnt,"VisualBertConfig"),Nnt.forEach(t),uao=r(zye," (VisualBERT model)"),zye.forEach(t),pao=i(L),Ng=n(L,"LI",{});var Qye=s(Ng);wse=n(Qye,"STRONG",{});var qnt=s(wse);_ao=r(qnt,"vit"),qnt.forEach(t),bao=r(Qye," \u2014 "),IP=n(Qye,"A",{href:!0});var jnt=s(IP);vao=r(jnt,"ViTConfig"),jnt.forEach(t),Fao=r(Qye," (ViT model)"),Qye.forEach(t),Tao=i(L),qg=n(L,"LI",{});var Wye=s(qg);Ase=n(Wye,"STRONG",{});var Dnt=s(Ase);Mao=r(Dnt,"vit_mae"),Dnt.forEach(t),Eao=r(Wye," \u2014 "),NP=n(Wye,"A",{href:!0});var Gnt=s(NP);Cao=r(Gnt,"ViTMAEConfig"),Gnt.forEach(t),wao=r(Wye," (ViTMAE model)"),Wye.forEach(t),Aao=i(L),jg=n(L,"LI",{});var Hye=s(jg);Lse=n(Hye,"STRONG",{});var Ont=s(Lse);Lao=r(Ont,"wav2vec2"),Ont.forEach(t),yao=r(Hye," \u2014 "),qP=n(Hye,"A",{href:!0});var Vnt=s(qP);xao=r(Vnt,"Wav2Vec2Config"),Vnt.forEach(t),$ao=r(Hye," (Wav2Vec2 model)"),Hye.forEach(t),kao=i(L),Dg=n(L,"LI",{});var Uye=s(Dg);yse=n(Uye,"STRONG",{});var Xnt=s(yse);Sao=r(Xnt,"wav2vec2-conformer"),Xnt.forEach(t),Rao=r(Uye," \u2014 "),jP=n(Uye,"A",{href:!0});var znt=s(jP);Pao=r(znt,"Wav2Vec2ConformerConfig"),znt.forEach(t),Bao=r(Uye," (Wav2Vec2-Conformer model)"),Uye.forEach(t),Iao=i(L),Gg=n(L,"LI",{});var Jye=s(Gg);xse=n(Jye,"STRONG",{});var Qnt=s(xse);Nao=r(Qnt,"wavlm"),Qnt.forEach(t),qao=r(Jye," \u2014 "),DP=n(Jye,"A",{href:!0});var Wnt=s(DP);jao=r(Wnt,"WavLMConfig"),Wnt.forEach(t),Dao=r(Jye," (WavLM model)"),Jye.forEach(t),Gao=i(L),Og=n(L,"LI",{});var Yye=s(Og);$se=n(Yye,"STRONG",{});var Hnt=s($se);Oao=r(Hnt,"xglm"),Hnt.forEach(t),Vao=r(Yye," \u2014 "),GP=n(Yye,"A",{href:!0});var Unt=s(GP);Xao=r(Unt,"XGLMConfig"),Unt.forEach(t),zao=r(Yye," (XGLM model)"),Yye.forEach(t),Qao=i(L),Vg=n(L,"LI",{});var Kye=s(Vg);kse=n(Kye,"STRONG",{});var Jnt=s(kse);Wao=r(Jnt,"xlm"),Jnt.forEach(t),Hao=r(Kye," \u2014 "),OP=n(Kye,"A",{href:!0});var Ynt=s(OP);Uao=r(Ynt,"XLMConfig"),Ynt.forEach(t),Jao=r(Kye," (XLM model)"),Kye.forEach(t),Yao=i(L),Xg=n(L,"LI",{});var Zye=s(Xg);Sse=n(Zye,"STRONG",{});var Knt=s(Sse);Kao=r(Knt,"xlm-prophetnet"),Knt.forEach(t),Zao=r(Zye," \u2014 "),VP=n(Zye,"A",{href:!0});var Znt=s(VP);eno=r(Znt,"XLMProphetNetConfig"),Znt.forEach(t),ono=r(Zye," (XLM-ProphetNet model)"),Zye.forEach(t),rno=i(L),zg=n(L,"LI",{});var e8e=s(zg);Rse=n(e8e,"STRONG",{});var est=s(Rse);tno=r(est,"xlm-roberta"),est.forEach(t),ano=r(e8e," \u2014 "),XP=n(e8e,"A",{href:!0});var ost=s(XP);nno=r(ost,"XLMRobertaConfig"),ost.forEach(t),sno=r(e8e," (XLM-RoBERTa model)"),e8e.forEach(t),lno=i(L),Qg=n(L,"LI",{});var o8e=s(Qg);Pse=n(o8e,"STRONG",{});var rst=s(Pse);ino=r(rst,"xlm-roberta-xl"),rst.forEach(t),dno=r(o8e," \u2014 "),zP=n(o8e,"A",{href:!0});var tst=s(zP);cno=r(tst,"XLMRobertaXLConfig"),tst.forEach(t),mno=r(o8e," (XLM-RoBERTa-XL model)"),o8e.forEach(t),fno=i(L),Wg=n(L,"LI",{});var r8e=s(Wg);Bse=n(r8e,"STRONG",{});var ast=s(Bse);gno=r(ast,"xlnet"),ast.forEach(t),hno=r(r8e," \u2014 "),QP=n(r8e,"A",{href:!0});var nst=s(QP);uno=r(nst,"XLNetConfig"),nst.forEach(t),pno=r(r8e," (XLNet model)"),r8e.forEach(t),_no=i(L),Hg=n(L,"LI",{});var t8e=s(Hg);Ise=n(t8e,"STRONG",{});var sst=s(Ise);bno=r(sst,"yolos"),sst.forEach(t),vno=r(t8e," \u2014 "),WP=n(t8e,"A",{href:!0});var lst=s(WP);Fno=r(lst,"YolosConfig"),lst.forEach(t),Tno=r(t8e," (YOLOS model)"),t8e.forEach(t),Mno=i(L),Ug=n(L,"LI",{});var a8e=s(Ug);Nse=n(a8e,"STRONG",{});var ist=s(Nse);Eno=r(ist,"yoso"),ist.forEach(t),Cno=r(a8e," \u2014 "),HP=n(a8e,"A",{href:!0});var dst=s(HP);wno=r(dst,"YosoConfig"),dst.forEach(t),Ano=r(a8e," (YOSO model)"),a8e.forEach(t),L.forEach(t),Lno=i(nt),T(Jg.$$.fragment,nt),nt.forEach(t),yno=i(at),Yg=n(at,"DIV",{class:!0});var Hze=s(Yg);T(dy.$$.fragment,Hze),xno=i(Hze),qse=n(Hze,"P",{});var cst=s(qse);$no=r(cst,"Register a new configuration for this class."),cst.forEach(t),Hze.forEach(t),at.forEach(t),UVe=i(m),Ii=n(m,"H2",{class:!0});var Uze=s(Ii);Kg=n(Uze,"A",{id:!0,class:!0,href:!0});var mst=s(Kg);jse=n(mst,"SPAN",{});var fst=s(jse);T(cy.$$.fragment,fst),fst.forEach(t),mst.forEach(t),kno=i(Uze),Dse=n(Uze,"SPAN",{});var gst=s(Dse);Sno=r(gst,"AutoTokenizer"),gst.forEach(t),Uze.forEach(t),JVe=i(m),Ao=n(m,"DIV",{class:!0});var Ys=s(Ao);T(my.$$.fragment,Ys),Rno=i(Ys),fy=n(Ys,"P",{});var Jze=s(fy);Pno=r(Jze,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),UP=n(Jze,"A",{href:!0});var hst=s(UP);Bno=r(hst,"AutoTokenizer.from_pretrained()"),hst.forEach(t),Ino=r(Jze," class method."),Jze.forEach(t),Nno=i(Ys),gy=n(Ys,"P",{});var Yze=s(gy);qno=r(Yze,"This class cannot be instantiated directly using "),Gse=n(Yze,"CODE",{});var ust=s(Gse);jno=r(ust,"__init__()"),ust.forEach(t),Dno=r(Yze," (throws an error)."),Yze.forEach(t),Gno=i(Ys),yr=n(Ys,"DIV",{class:!0});var Ks=s(yr);T(hy.$$.fragment,Ks),Ono=i(Ks),Ose=n(Ks,"P",{});var pst=s(Ose);Vno=r(pst,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),pst.forEach(t),Xno=i(Ks),Pa=n(Ks,"P",{});var a7=s(Pa);zno=r(a7,"The tokenizer class to instantiate is selected based on the "),Vse=n(a7,"CODE",{});var _st=s(Vse);Qno=r(_st,"model_type"),_st.forEach(t),Wno=r(a7,` property of the config object (either
passed as an argument or loaded from `),Xse=n(a7,"CODE",{});var bst=s(Xse);Hno=r(bst,"pretrained_model_name_or_path"),bst.forEach(t),Uno=r(a7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zse=n(a7,"CODE",{});var vst=s(zse);Jno=r(vst,"pretrained_model_name_or_path"),vst.forEach(t),Yno=r(a7,":"),a7.forEach(t),Kno=i(Ks),k=n(Ks,"UL",{});var S=s(k);jn=n(S,"LI",{});var Fk=s(jn);Qse=n(Fk,"STRONG",{});var Fst=s(Qse);Zno=r(Fst,"albert"),Fst.forEach(t),eso=r(Fk," \u2014 "),JP=n(Fk,"A",{href:!0});var Tst=s(JP);oso=r(Tst,"AlbertTokenizer"),Tst.forEach(t),rso=r(Fk," or "),YP=n(Fk,"A",{href:!0});var Mst=s(YP);tso=r(Mst,"AlbertTokenizerFast"),Mst.forEach(t),aso=r(Fk," (ALBERT model)"),Fk.forEach(t),nso=i(S),Dn=n(S,"LI",{});var Tk=s(Dn);Wse=n(Tk,"STRONG",{});var Est=s(Wse);sso=r(Est,"bart"),Est.forEach(t),lso=r(Tk," \u2014 "),KP=n(Tk,"A",{href:!0});var Cst=s(KP);iso=r(Cst,"BartTokenizer"),Cst.forEach(t),dso=r(Tk," or "),ZP=n(Tk,"A",{href:!0});var wst=s(ZP);cso=r(wst,"BartTokenizerFast"),wst.forEach(t),mso=r(Tk," (BART model)"),Tk.forEach(t),fso=i(S),Gn=n(S,"LI",{});var Mk=s(Gn);Hse=n(Mk,"STRONG",{});var Ast=s(Hse);gso=r(Ast,"barthez"),Ast.forEach(t),hso=r(Mk," \u2014 "),eB=n(Mk,"A",{href:!0});var Lst=s(eB);uso=r(Lst,"BarthezTokenizer"),Lst.forEach(t),pso=r(Mk," or "),oB=n(Mk,"A",{href:!0});var yst=s(oB);_so=r(yst,"BarthezTokenizerFast"),yst.forEach(t),bso=r(Mk," (BARThez model)"),Mk.forEach(t),vso=i(S),Zg=n(S,"LI",{});var n8e=s(Zg);Use=n(n8e,"STRONG",{});var xst=s(Use);Fso=r(xst,"bartpho"),xst.forEach(t),Tso=r(n8e," \u2014 "),rB=n(n8e,"A",{href:!0});var $st=s(rB);Mso=r($st,"BartphoTokenizer"),$st.forEach(t),Eso=r(n8e," (BARTpho model)"),n8e.forEach(t),Cso=i(S),On=n(S,"LI",{});var Ek=s(On);Jse=n(Ek,"STRONG",{});var kst=s(Jse);wso=r(kst,"bert"),kst.forEach(t),Aso=r(Ek," \u2014 "),tB=n(Ek,"A",{href:!0});var Sst=s(tB);Lso=r(Sst,"BertTokenizer"),Sst.forEach(t),yso=r(Ek," or "),aB=n(Ek,"A",{href:!0});var Rst=s(aB);xso=r(Rst,"BertTokenizerFast"),Rst.forEach(t),$so=r(Ek," (BERT model)"),Ek.forEach(t),kso=i(S),eh=n(S,"LI",{});var s8e=s(eh);Yse=n(s8e,"STRONG",{});var Pst=s(Yse);Sso=r(Pst,"bert-generation"),Pst.forEach(t),Rso=r(s8e," \u2014 "),nB=n(s8e,"A",{href:!0});var Bst=s(nB);Pso=r(Bst,"BertGenerationTokenizer"),Bst.forEach(t),Bso=r(s8e," (Bert Generation model)"),s8e.forEach(t),Iso=i(S),oh=n(S,"LI",{});var l8e=s(oh);Kse=n(l8e,"STRONG",{});var Ist=s(Kse);Nso=r(Ist,"bert-japanese"),Ist.forEach(t),qso=r(l8e," \u2014 "),sB=n(l8e,"A",{href:!0});var Nst=s(sB);jso=r(Nst,"BertJapaneseTokenizer"),Nst.forEach(t),Dso=r(l8e," (BertJapanese model)"),l8e.forEach(t),Gso=i(S),rh=n(S,"LI",{});var i8e=s(rh);Zse=n(i8e,"STRONG",{});var qst=s(Zse);Oso=r(qst,"bertweet"),qst.forEach(t),Vso=r(i8e," \u2014 "),lB=n(i8e,"A",{href:!0});var jst=s(lB);Xso=r(jst,"BertweetTokenizer"),jst.forEach(t),zso=r(i8e," (BERTweet model)"),i8e.forEach(t),Qso=i(S),Vn=n(S,"LI",{});var Ck=s(Vn);ele=n(Ck,"STRONG",{});var Dst=s(ele);Wso=r(Dst,"big_bird"),Dst.forEach(t),Hso=r(Ck," \u2014 "),iB=n(Ck,"A",{href:!0});var Gst=s(iB);Uso=r(Gst,"BigBirdTokenizer"),Gst.forEach(t),Jso=r(Ck," or "),dB=n(Ck,"A",{href:!0});var Ost=s(dB);Yso=r(Ost,"BigBirdTokenizerFast"),Ost.forEach(t),Kso=r(Ck," (BigBird model)"),Ck.forEach(t),Zso=i(S),Xn=n(S,"LI",{});var wk=s(Xn);ole=n(wk,"STRONG",{});var Vst=s(ole);elo=r(Vst,"bigbird_pegasus"),Vst.forEach(t),olo=r(wk," \u2014 "),cB=n(wk,"A",{href:!0});var Xst=s(cB);rlo=r(Xst,"PegasusTokenizer"),Xst.forEach(t),tlo=r(wk," or "),mB=n(wk,"A",{href:!0});var zst=s(mB);alo=r(zst,"PegasusTokenizerFast"),zst.forEach(t),nlo=r(wk," (BigBird-Pegasus model)"),wk.forEach(t),slo=i(S),zn=n(S,"LI",{});var Ak=s(zn);rle=n(Ak,"STRONG",{});var Qst=s(rle);llo=r(Qst,"blenderbot"),Qst.forEach(t),ilo=r(Ak," \u2014 "),fB=n(Ak,"A",{href:!0});var Wst=s(fB);dlo=r(Wst,"BlenderbotTokenizer"),Wst.forEach(t),clo=r(Ak," or "),gB=n(Ak,"A",{href:!0});var Hst=s(gB);mlo=r(Hst,"BlenderbotTokenizerFast"),Hst.forEach(t),flo=r(Ak," (Blenderbot model)"),Ak.forEach(t),glo=i(S),th=n(S,"LI",{});var d8e=s(th);tle=n(d8e,"STRONG",{});var Ust=s(tle);hlo=r(Ust,"blenderbot-small"),Ust.forEach(t),ulo=r(d8e," \u2014 "),hB=n(d8e,"A",{href:!0});var Jst=s(hB);plo=r(Jst,"BlenderbotSmallTokenizer"),Jst.forEach(t),_lo=r(d8e," (BlenderbotSmall model)"),d8e.forEach(t),blo=i(S),ah=n(S,"LI",{});var c8e=s(ah);ale=n(c8e,"STRONG",{});var Yst=s(ale);vlo=r(Yst,"bloom"),Yst.forEach(t),Flo=r(c8e," \u2014 "),uB=n(c8e,"A",{href:!0});var Kst=s(uB);Tlo=r(Kst,"BloomTokenizerFast"),Kst.forEach(t),Mlo=r(c8e," (BLOOM model)"),c8e.forEach(t),Elo=i(S),nh=n(S,"LI",{});var m8e=s(nh);nle=n(m8e,"STRONG",{});var Zst=s(nle);Clo=r(Zst,"byt5"),Zst.forEach(t),wlo=r(m8e," \u2014 "),pB=n(m8e,"A",{href:!0});var elt=s(pB);Alo=r(elt,"ByT5Tokenizer"),elt.forEach(t),Llo=r(m8e," (ByT5 model)"),m8e.forEach(t),ylo=i(S),Qn=n(S,"LI",{});var Lk=s(Qn);sle=n(Lk,"STRONG",{});var olt=s(sle);xlo=r(olt,"camembert"),olt.forEach(t),$lo=r(Lk," \u2014 "),_B=n(Lk,"A",{href:!0});var rlt=s(_B);klo=r(rlt,"CamembertTokenizer"),rlt.forEach(t),Slo=r(Lk," or "),bB=n(Lk,"A",{href:!0});var tlt=s(bB);Rlo=r(tlt,"CamembertTokenizerFast"),tlt.forEach(t),Plo=r(Lk," (CamemBERT model)"),Lk.forEach(t),Blo=i(S),sh=n(S,"LI",{});var f8e=s(sh);lle=n(f8e,"STRONG",{});var alt=s(lle);Ilo=r(alt,"canine"),alt.forEach(t),Nlo=r(f8e," \u2014 "),vB=n(f8e,"A",{href:!0});var nlt=s(vB);qlo=r(nlt,"CanineTokenizer"),nlt.forEach(t),jlo=r(f8e," (CANINE model)"),f8e.forEach(t),Dlo=i(S),Wn=n(S,"LI",{});var yk=s(Wn);ile=n(yk,"STRONG",{});var slt=s(ile);Glo=r(slt,"clip"),slt.forEach(t),Olo=r(yk," \u2014 "),FB=n(yk,"A",{href:!0});var llt=s(FB);Vlo=r(llt,"CLIPTokenizer"),llt.forEach(t),Xlo=r(yk," or "),TB=n(yk,"A",{href:!0});var ilt=s(TB);zlo=r(ilt,"CLIPTokenizerFast"),ilt.forEach(t),Qlo=r(yk," (CLIP model)"),yk.forEach(t),Wlo=i(S),Hn=n(S,"LI",{});var xk=s(Hn);dle=n(xk,"STRONG",{});var dlt=s(dle);Hlo=r(dlt,"codegen"),dlt.forEach(t),Ulo=r(xk," \u2014 "),MB=n(xk,"A",{href:!0});var clt=s(MB);Jlo=r(clt,"CodeGenTokenizer"),clt.forEach(t),Ylo=r(xk," or "),EB=n(xk,"A",{href:!0});var mlt=s(EB);Klo=r(mlt,"CodeGenTokenizerFast"),mlt.forEach(t),Zlo=r(xk," (CodeGen model)"),xk.forEach(t),eio=i(S),Un=n(S,"LI",{});var $k=s(Un);cle=n($k,"STRONG",{});var flt=s(cle);oio=r(flt,"convbert"),flt.forEach(t),rio=r($k," \u2014 "),CB=n($k,"A",{href:!0});var glt=s(CB);tio=r(glt,"ConvBertTokenizer"),glt.forEach(t),aio=r($k," or "),wB=n($k,"A",{href:!0});var hlt=s(wB);nio=r(hlt,"ConvBertTokenizerFast"),hlt.forEach(t),sio=r($k," (ConvBERT model)"),$k.forEach(t),lio=i(S),Jn=n(S,"LI",{});var kk=s(Jn);mle=n(kk,"STRONG",{});var ult=s(mle);iio=r(ult,"cpm"),ult.forEach(t),dio=r(kk," \u2014 "),AB=n(kk,"A",{href:!0});var plt=s(AB);cio=r(plt,"CpmTokenizer"),plt.forEach(t),mio=r(kk," or "),LB=n(kk,"A",{href:!0});var _lt=s(LB);fio=r(_lt,"CpmTokenizerFast"),_lt.forEach(t),gio=r(kk," (CPM model)"),kk.forEach(t),hio=i(S),lh=n(S,"LI",{});var g8e=s(lh);fle=n(g8e,"STRONG",{});var blt=s(fle);uio=r(blt,"ctrl"),blt.forEach(t),pio=r(g8e," \u2014 "),yB=n(g8e,"A",{href:!0});var vlt=s(yB);_io=r(vlt,"CTRLTokenizer"),vlt.forEach(t),bio=r(g8e," (CTRL model)"),g8e.forEach(t),vio=i(S),Yn=n(S,"LI",{});var Sk=s(Yn);gle=n(Sk,"STRONG",{});var Flt=s(gle);Fio=r(Flt,"data2vec-text"),Flt.forEach(t),Tio=r(Sk," \u2014 "),xB=n(Sk,"A",{href:!0});var Tlt=s(xB);Mio=r(Tlt,"RobertaTokenizer"),Tlt.forEach(t),Eio=r(Sk," or "),$B=n(Sk,"A",{href:!0});var Mlt=s($B);Cio=r(Mlt,"RobertaTokenizerFast"),Mlt.forEach(t),wio=r(Sk," (Data2VecText model)"),Sk.forEach(t),Aio=i(S),Kn=n(S,"LI",{});var Rk=s(Kn);hle=n(Rk,"STRONG",{});var Elt=s(hle);Lio=r(Elt,"deberta"),Elt.forEach(t),yio=r(Rk," \u2014 "),kB=n(Rk,"A",{href:!0});var Clt=s(kB);xio=r(Clt,"DebertaTokenizer"),Clt.forEach(t),$io=r(Rk," or "),SB=n(Rk,"A",{href:!0});var wlt=s(SB);kio=r(wlt,"DebertaTokenizerFast"),wlt.forEach(t),Sio=r(Rk," (DeBERTa model)"),Rk.forEach(t),Rio=i(S),Zn=n(S,"LI",{});var Pk=s(Zn);ule=n(Pk,"STRONG",{});var Alt=s(ule);Pio=r(Alt,"deberta-v2"),Alt.forEach(t),Bio=r(Pk," \u2014 "),RB=n(Pk,"A",{href:!0});var Llt=s(RB);Iio=r(Llt,"DebertaV2Tokenizer"),Llt.forEach(t),Nio=r(Pk," or "),PB=n(Pk,"A",{href:!0});var ylt=s(PB);qio=r(ylt,"DebertaV2TokenizerFast"),ylt.forEach(t),jio=r(Pk," (DeBERTa-v2 model)"),Pk.forEach(t),Dio=i(S),es=n(S,"LI",{});var Bk=s(es);ple=n(Bk,"STRONG",{});var xlt=s(ple);Gio=r(xlt,"distilbert"),xlt.forEach(t),Oio=r(Bk," \u2014 "),BB=n(Bk,"A",{href:!0});var $lt=s(BB);Vio=r($lt,"DistilBertTokenizer"),$lt.forEach(t),Xio=r(Bk," or "),IB=n(Bk,"A",{href:!0});var klt=s(IB);zio=r(klt,"DistilBertTokenizerFast"),klt.forEach(t),Qio=r(Bk," (DistilBERT model)"),Bk.forEach(t),Wio=i(S),os=n(S,"LI",{});var Ik=s(os);_le=n(Ik,"STRONG",{});var Slt=s(_le);Hio=r(Slt,"dpr"),Slt.forEach(t),Uio=r(Ik," \u2014 "),NB=n(Ik,"A",{href:!0});var Rlt=s(NB);Jio=r(Rlt,"DPRQuestionEncoderTokenizer"),Rlt.forEach(t),Yio=r(Ik," or "),qB=n(Ik,"A",{href:!0});var Plt=s(qB);Kio=r(Plt,"DPRQuestionEncoderTokenizerFast"),Plt.forEach(t),Zio=r(Ik," (DPR model)"),Ik.forEach(t),edo=i(S),rs=n(S,"LI",{});var Nk=s(rs);ble=n(Nk,"STRONG",{});var Blt=s(ble);odo=r(Blt,"electra"),Blt.forEach(t),rdo=r(Nk," \u2014 "),jB=n(Nk,"A",{href:!0});var Ilt=s(jB);tdo=r(Ilt,"ElectraTokenizer"),Ilt.forEach(t),ado=r(Nk," or "),DB=n(Nk,"A",{href:!0});var Nlt=s(DB);ndo=r(Nlt,"ElectraTokenizerFast"),Nlt.forEach(t),sdo=r(Nk," (ELECTRA model)"),Nk.forEach(t),ldo=i(S),ih=n(S,"LI",{});var h8e=s(ih);vle=n(h8e,"STRONG",{});var qlt=s(vle);ido=r(qlt,"flaubert"),qlt.forEach(t),ddo=r(h8e," \u2014 "),GB=n(h8e,"A",{href:!0});var jlt=s(GB);cdo=r(jlt,"FlaubertTokenizer"),jlt.forEach(t),mdo=r(h8e," (FlauBERT model)"),h8e.forEach(t),fdo=i(S),ts=n(S,"LI",{});var qk=s(ts);Fle=n(qk,"STRONG",{});var Dlt=s(Fle);gdo=r(Dlt,"fnet"),Dlt.forEach(t),hdo=r(qk," \u2014 "),OB=n(qk,"A",{href:!0});var Glt=s(OB);udo=r(Glt,"FNetTokenizer"),Glt.forEach(t),pdo=r(qk," or "),VB=n(qk,"A",{href:!0});var Olt=s(VB);_do=r(Olt,"FNetTokenizerFast"),Olt.forEach(t),bdo=r(qk," (FNet model)"),qk.forEach(t),vdo=i(S),dh=n(S,"LI",{});var u8e=s(dh);Tle=n(u8e,"STRONG",{});var Vlt=s(Tle);Fdo=r(Vlt,"fsmt"),Vlt.forEach(t),Tdo=r(u8e," \u2014 "),XB=n(u8e,"A",{href:!0});var Xlt=s(XB);Mdo=r(Xlt,"FSMTTokenizer"),Xlt.forEach(t),Edo=r(u8e," (FairSeq Machine-Translation model)"),u8e.forEach(t),Cdo=i(S),as=n(S,"LI",{});var jk=s(as);Mle=n(jk,"STRONG",{});var zlt=s(Mle);wdo=r(zlt,"funnel"),zlt.forEach(t),Ado=r(jk," \u2014 "),zB=n(jk,"A",{href:!0});var Qlt=s(zB);Ldo=r(Qlt,"FunnelTokenizer"),Qlt.forEach(t),ydo=r(jk," or "),QB=n(jk,"A",{href:!0});var Wlt=s(QB);xdo=r(Wlt,"FunnelTokenizerFast"),Wlt.forEach(t),$do=r(jk," (Funnel Transformer model)"),jk.forEach(t),kdo=i(S),ns=n(S,"LI",{});var Dk=s(ns);Ele=n(Dk,"STRONG",{});var Hlt=s(Ele);Sdo=r(Hlt,"gpt2"),Hlt.forEach(t),Rdo=r(Dk," \u2014 "),WB=n(Dk,"A",{href:!0});var Ult=s(WB);Pdo=r(Ult,"GPT2Tokenizer"),Ult.forEach(t),Bdo=r(Dk," or "),HB=n(Dk,"A",{href:!0});var Jlt=s(HB);Ido=r(Jlt,"GPT2TokenizerFast"),Jlt.forEach(t),Ndo=r(Dk," (OpenAI GPT-2 model)"),Dk.forEach(t),qdo=i(S),ss=n(S,"LI",{});var Gk=s(ss);Cle=n(Gk,"STRONG",{});var Ylt=s(Cle);jdo=r(Ylt,"gpt_neo"),Ylt.forEach(t),Ddo=r(Gk," \u2014 "),UB=n(Gk,"A",{href:!0});var Klt=s(UB);Gdo=r(Klt,"GPT2Tokenizer"),Klt.forEach(t),Odo=r(Gk," or "),JB=n(Gk,"A",{href:!0});var Zlt=s(JB);Vdo=r(Zlt,"GPT2TokenizerFast"),Zlt.forEach(t),Xdo=r(Gk," (GPT Neo model)"),Gk.forEach(t),zdo=i(S),ch=n(S,"LI",{});var p8e=s(ch);wle=n(p8e,"STRONG",{});var eit=s(wle);Qdo=r(eit,"gpt_neox"),eit.forEach(t),Wdo=r(p8e," \u2014 "),YB=n(p8e,"A",{href:!0});var oit=s(YB);Hdo=r(oit,"GPTNeoXTokenizerFast"),oit.forEach(t),Udo=r(p8e," (GPT NeoX model)"),p8e.forEach(t),Jdo=i(S),ls=n(S,"LI",{});var Ok=s(ls);Ale=n(Ok,"STRONG",{});var rit=s(Ale);Ydo=r(rit,"gptj"),rit.forEach(t),Kdo=r(Ok," \u2014 "),KB=n(Ok,"A",{href:!0});var tit=s(KB);Zdo=r(tit,"GPT2Tokenizer"),tit.forEach(t),eco=r(Ok," or "),ZB=n(Ok,"A",{href:!0});var ait=s(ZB);oco=r(ait,"GPT2TokenizerFast"),ait.forEach(t),rco=r(Ok," (GPT-J model)"),Ok.forEach(t),tco=i(S),is=n(S,"LI",{});var Vk=s(is);Lle=n(Vk,"STRONG",{});var nit=s(Lle);aco=r(nit,"groupvit"),nit.forEach(t),nco=r(Vk," \u2014 "),eI=n(Vk,"A",{href:!0});var sit=s(eI);sco=r(sit,"CLIPTokenizer"),sit.forEach(t),lco=r(Vk," or "),oI=n(Vk,"A",{href:!0});var lit=s(oI);ico=r(lit,"CLIPTokenizerFast"),lit.forEach(t),dco=r(Vk," (GroupViT model)"),Vk.forEach(t),cco=i(S),ds=n(S,"LI",{});var Xk=s(ds);yle=n(Xk,"STRONG",{});var iit=s(yle);mco=r(iit,"herbert"),iit.forEach(t),fco=r(Xk," \u2014 "),rI=n(Xk,"A",{href:!0});var dit=s(rI);gco=r(dit,"HerbertTokenizer"),dit.forEach(t),hco=r(Xk," or "),tI=n(Xk,"A",{href:!0});var cit=s(tI);uco=r(cit,"HerbertTokenizerFast"),cit.forEach(t),pco=r(Xk," (HerBERT model)"),Xk.forEach(t),_co=i(S),mh=n(S,"LI",{});var _8e=s(mh);xle=n(_8e,"STRONG",{});var mit=s(xle);bco=r(mit,"hubert"),mit.forEach(t),vco=r(_8e," \u2014 "),aI=n(_8e,"A",{href:!0});var fit=s(aI);Fco=r(fit,"Wav2Vec2CTCTokenizer"),fit.forEach(t),Tco=r(_8e," (Hubert model)"),_8e.forEach(t),Mco=i(S),cs=n(S,"LI",{});var zk=s(cs);$le=n(zk,"STRONG",{});var git=s($le);Eco=r(git,"ibert"),git.forEach(t),Cco=r(zk," \u2014 "),nI=n(zk,"A",{href:!0});var hit=s(nI);wco=r(hit,"RobertaTokenizer"),hit.forEach(t),Aco=r(zk," or "),sI=n(zk,"A",{href:!0});var uit=s(sI);Lco=r(uit,"RobertaTokenizerFast"),uit.forEach(t),yco=r(zk," (I-BERT model)"),zk.forEach(t),xco=i(S),ms=n(S,"LI",{});var Qk=s(ms);kle=n(Qk,"STRONG",{});var pit=s(kle);$co=r(pit,"layoutlm"),pit.forEach(t),kco=r(Qk," \u2014 "),lI=n(Qk,"A",{href:!0});var _it=s(lI);Sco=r(_it,"LayoutLMTokenizer"),_it.forEach(t),Rco=r(Qk," or "),iI=n(Qk,"A",{href:!0});var bit=s(iI);Pco=r(bit,"LayoutLMTokenizerFast"),bit.forEach(t),Bco=r(Qk," (LayoutLM model)"),Qk.forEach(t),Ico=i(S),fs=n(S,"LI",{});var Wk=s(fs);Sle=n(Wk,"STRONG",{});var vit=s(Sle);Nco=r(vit,"layoutlmv2"),vit.forEach(t),qco=r(Wk," \u2014 "),dI=n(Wk,"A",{href:!0});var Fit=s(dI);jco=r(Fit,"LayoutLMv2Tokenizer"),Fit.forEach(t),Dco=r(Wk," or "),cI=n(Wk,"A",{href:!0});var Tit=s(cI);Gco=r(Tit,"LayoutLMv2TokenizerFast"),Tit.forEach(t),Oco=r(Wk," (LayoutLMv2 model)"),Wk.forEach(t),Vco=i(S),gs=n(S,"LI",{});var Hk=s(gs);Rle=n(Hk,"STRONG",{});var Mit=s(Rle);Xco=r(Mit,"layoutlmv3"),Mit.forEach(t),zco=r(Hk," \u2014 "),mI=n(Hk,"A",{href:!0});var Eit=s(mI);Qco=r(Eit,"LayoutLMv3Tokenizer"),Eit.forEach(t),Wco=r(Hk," or "),fI=n(Hk,"A",{href:!0});var Cit=s(fI);Hco=r(Cit,"LayoutLMv3TokenizerFast"),Cit.forEach(t),Uco=r(Hk," (LayoutLMv3 model)"),Hk.forEach(t),Jco=i(S),hs=n(S,"LI",{});var Uk=s(hs);Ple=n(Uk,"STRONG",{});var wit=s(Ple);Yco=r(wit,"layoutxlm"),wit.forEach(t),Kco=r(Uk," \u2014 "),gI=n(Uk,"A",{href:!0});var Ait=s(gI);Zco=r(Ait,"LayoutXLMTokenizer"),Ait.forEach(t),emo=r(Uk," or "),hI=n(Uk,"A",{href:!0});var Lit=s(hI);omo=r(Lit,"LayoutXLMTokenizerFast"),Lit.forEach(t),rmo=r(Uk," (LayoutXLM model)"),Uk.forEach(t),tmo=i(S),us=n(S,"LI",{});var Jk=s(us);Ble=n(Jk,"STRONG",{});var yit=s(Ble);amo=r(yit,"led"),yit.forEach(t),nmo=r(Jk," \u2014 "),uI=n(Jk,"A",{href:!0});var xit=s(uI);smo=r(xit,"LEDTokenizer"),xit.forEach(t),lmo=r(Jk," or "),pI=n(Jk,"A",{href:!0});var $it=s(pI);imo=r($it,"LEDTokenizerFast"),$it.forEach(t),dmo=r(Jk," (LED model)"),Jk.forEach(t),cmo=i(S),ps=n(S,"LI",{});var Yk=s(ps);Ile=n(Yk,"STRONG",{});var kit=s(Ile);mmo=r(kit,"longformer"),kit.forEach(t),fmo=r(Yk," \u2014 "),_I=n(Yk,"A",{href:!0});var Sit=s(_I);gmo=r(Sit,"LongformerTokenizer"),Sit.forEach(t),hmo=r(Yk," or "),bI=n(Yk,"A",{href:!0});var Rit=s(bI);umo=r(Rit,"LongformerTokenizerFast"),Rit.forEach(t),pmo=r(Yk," (Longformer model)"),Yk.forEach(t),_mo=i(S),_s=n(S,"LI",{});var Kk=s(_s);Nle=n(Kk,"STRONG",{});var Pit=s(Nle);bmo=r(Pit,"longt5"),Pit.forEach(t),vmo=r(Kk," \u2014 "),vI=n(Kk,"A",{href:!0});var Bit=s(vI);Fmo=r(Bit,"T5Tokenizer"),Bit.forEach(t),Tmo=r(Kk," or "),FI=n(Kk,"A",{href:!0});var Iit=s(FI);Mmo=r(Iit,"T5TokenizerFast"),Iit.forEach(t),Emo=r(Kk," (LongT5 model)"),Kk.forEach(t),Cmo=i(S),fh=n(S,"LI",{});var b8e=s(fh);qle=n(b8e,"STRONG",{});var Nit=s(qle);wmo=r(Nit,"luke"),Nit.forEach(t),Amo=r(b8e," \u2014 "),TI=n(b8e,"A",{href:!0});var qit=s(TI);Lmo=r(qit,"LukeTokenizer"),qit.forEach(t),ymo=r(b8e," (LUKE model)"),b8e.forEach(t),xmo=i(S),bs=n(S,"LI",{});var Zk=s(bs);jle=n(Zk,"STRONG",{});var jit=s(jle);$mo=r(jit,"lxmert"),jit.forEach(t),kmo=r(Zk," \u2014 "),MI=n(Zk,"A",{href:!0});var Dit=s(MI);Smo=r(Dit,"LxmertTokenizer"),Dit.forEach(t),Rmo=r(Zk," or "),EI=n(Zk,"A",{href:!0});var Git=s(EI);Pmo=r(Git,"LxmertTokenizerFast"),Git.forEach(t),Bmo=r(Zk," (LXMERT model)"),Zk.forEach(t),Imo=i(S),gh=n(S,"LI",{});var v8e=s(gh);Dle=n(v8e,"STRONG",{});var Oit=s(Dle);Nmo=r(Oit,"m2m_100"),Oit.forEach(t),qmo=r(v8e," \u2014 "),CI=n(v8e,"A",{href:!0});var Vit=s(CI);jmo=r(Vit,"M2M100Tokenizer"),Vit.forEach(t),Dmo=r(v8e," (M2M100 model)"),v8e.forEach(t),Gmo=i(S),hh=n(S,"LI",{});var F8e=s(hh);Gle=n(F8e,"STRONG",{});var Xit=s(Gle);Omo=r(Xit,"marian"),Xit.forEach(t),Vmo=r(F8e," \u2014 "),wI=n(F8e,"A",{href:!0});var zit=s(wI);Xmo=r(zit,"MarianTokenizer"),zit.forEach(t),zmo=r(F8e," (Marian model)"),F8e.forEach(t),Qmo=i(S),vs=n(S,"LI",{});var eS=s(vs);Ole=n(eS,"STRONG",{});var Qit=s(Ole);Wmo=r(Qit,"mbart"),Qit.forEach(t),Hmo=r(eS," \u2014 "),AI=n(eS,"A",{href:!0});var Wit=s(AI);Umo=r(Wit,"MBartTokenizer"),Wit.forEach(t),Jmo=r(eS," or "),LI=n(eS,"A",{href:!0});var Hit=s(LI);Ymo=r(Hit,"MBartTokenizerFast"),Hit.forEach(t),Kmo=r(eS," (mBART model)"),eS.forEach(t),Zmo=i(S),Fs=n(S,"LI",{});var oS=s(Fs);Vle=n(oS,"STRONG",{});var Uit=s(Vle);efo=r(Uit,"mbart50"),Uit.forEach(t),ofo=r(oS," \u2014 "),yI=n(oS,"A",{href:!0});var Jit=s(yI);rfo=r(Jit,"MBart50Tokenizer"),Jit.forEach(t),tfo=r(oS," or "),xI=n(oS,"A",{href:!0});var Yit=s(xI);afo=r(Yit,"MBart50TokenizerFast"),Yit.forEach(t),nfo=r(oS," (mBART-50 model)"),oS.forEach(t),sfo=i(S),Ts=n(S,"LI",{});var rS=s(Ts);Xle=n(rS,"STRONG",{});var Kit=s(Xle);lfo=r(Kit,"megatron-bert"),Kit.forEach(t),ifo=r(rS," \u2014 "),$I=n(rS,"A",{href:!0});var Zit=s($I);dfo=r(Zit,"BertTokenizer"),Zit.forEach(t),cfo=r(rS," or "),kI=n(rS,"A",{href:!0});var edt=s(kI);mfo=r(edt,"BertTokenizerFast"),edt.forEach(t),ffo=r(rS," (Megatron-BERT model)"),rS.forEach(t),gfo=i(S),uh=n(S,"LI",{});var T8e=s(uh);zle=n(T8e,"STRONG",{});var odt=s(zle);hfo=r(odt,"mluke"),odt.forEach(t),ufo=r(T8e," \u2014 "),SI=n(T8e,"A",{href:!0});var rdt=s(SI);pfo=r(rdt,"MLukeTokenizer"),rdt.forEach(t),_fo=r(T8e," (mLUKE model)"),T8e.forEach(t),bfo=i(S),Ms=n(S,"LI",{});var tS=s(Ms);Qle=n(tS,"STRONG",{});var tdt=s(Qle);vfo=r(tdt,"mobilebert"),tdt.forEach(t),Ffo=r(tS," \u2014 "),RI=n(tS,"A",{href:!0});var adt=s(RI);Tfo=r(adt,"MobileBertTokenizer"),adt.forEach(t),Mfo=r(tS," or "),PI=n(tS,"A",{href:!0});var ndt=s(PI);Efo=r(ndt,"MobileBertTokenizerFast"),ndt.forEach(t),Cfo=r(tS," (MobileBERT model)"),tS.forEach(t),wfo=i(S),Es=n(S,"LI",{});var aS=s(Es);Wle=n(aS,"STRONG",{});var sdt=s(Wle);Afo=r(sdt,"mpnet"),sdt.forEach(t),Lfo=r(aS," \u2014 "),BI=n(aS,"A",{href:!0});var ldt=s(BI);yfo=r(ldt,"MPNetTokenizer"),ldt.forEach(t),xfo=r(aS," or "),II=n(aS,"A",{href:!0});var idt=s(II);$fo=r(idt,"MPNetTokenizerFast"),idt.forEach(t),kfo=r(aS," (MPNet model)"),aS.forEach(t),Sfo=i(S),Cs=n(S,"LI",{});var nS=s(Cs);Hle=n(nS,"STRONG",{});var ddt=s(Hle);Rfo=r(ddt,"mt5"),ddt.forEach(t),Pfo=r(nS," \u2014 "),NI=n(nS,"A",{href:!0});var cdt=s(NI);Bfo=r(cdt,"MT5Tokenizer"),cdt.forEach(t),Ifo=r(nS," or "),qI=n(nS,"A",{href:!0});var mdt=s(qI);Nfo=r(mdt,"MT5TokenizerFast"),mdt.forEach(t),qfo=r(nS," (MT5 model)"),nS.forEach(t),jfo=i(S),ws=n(S,"LI",{});var sS=s(ws);Ule=n(sS,"STRONG",{});var fdt=s(Ule);Dfo=r(fdt,"mvp"),fdt.forEach(t),Gfo=r(sS," \u2014 "),jI=n(sS,"A",{href:!0});var gdt=s(jI);Ofo=r(gdt,"MvpTokenizer"),gdt.forEach(t),Vfo=r(sS," or "),DI=n(sS,"A",{href:!0});var hdt=s(DI);Xfo=r(hdt,"MvpTokenizerFast"),hdt.forEach(t),zfo=r(sS," (MVP model)"),sS.forEach(t),Qfo=i(S),As=n(S,"LI",{});var lS=s(As);Jle=n(lS,"STRONG",{});var udt=s(Jle);Wfo=r(udt,"nezha"),udt.forEach(t),Hfo=r(lS," \u2014 "),GI=n(lS,"A",{href:!0});var pdt=s(GI);Ufo=r(pdt,"BertTokenizer"),pdt.forEach(t),Jfo=r(lS," or "),OI=n(lS,"A",{href:!0});var _dt=s(OI);Yfo=r(_dt,"BertTokenizerFast"),_dt.forEach(t),Kfo=r(lS," (Nezha model)"),lS.forEach(t),Zfo=i(S),Ls=n(S,"LI",{});var iS=s(Ls);Yle=n(iS,"STRONG",{});var bdt=s(Yle);ego=r(bdt,"nystromformer"),bdt.forEach(t),ogo=r(iS," \u2014 "),VI=n(iS,"A",{href:!0});var vdt=s(VI);rgo=r(vdt,"AlbertTokenizer"),vdt.forEach(t),tgo=r(iS," or "),XI=n(iS,"A",{href:!0});var Fdt=s(XI);ago=r(Fdt,"AlbertTokenizerFast"),Fdt.forEach(t),ngo=r(iS," (Nystr\xF6mformer model)"),iS.forEach(t),sgo=i(S),ys=n(S,"LI",{});var dS=s(ys);Kle=n(dS,"STRONG",{});var Tdt=s(Kle);lgo=r(Tdt,"openai-gpt"),Tdt.forEach(t),igo=r(dS," \u2014 "),zI=n(dS,"A",{href:!0});var Mdt=s(zI);dgo=r(Mdt,"OpenAIGPTTokenizer"),Mdt.forEach(t),cgo=r(dS," or "),QI=n(dS,"A",{href:!0});var Edt=s(QI);mgo=r(Edt,"OpenAIGPTTokenizerFast"),Edt.forEach(t),fgo=r(dS," (OpenAI GPT model)"),dS.forEach(t),ggo=i(S),ph=n(S,"LI",{});var M8e=s(ph);Zle=n(M8e,"STRONG",{});var Cdt=s(Zle);hgo=r(Cdt,"opt"),Cdt.forEach(t),ugo=r(M8e," \u2014 "),WI=n(M8e,"A",{href:!0});var wdt=s(WI);pgo=r(wdt,"GPT2Tokenizer"),wdt.forEach(t),_go=r(M8e," (OPT model)"),M8e.forEach(t),bgo=i(S),xs=n(S,"LI",{});var cS=s(xs);eie=n(cS,"STRONG",{});var Adt=s(eie);vgo=r(Adt,"pegasus"),Adt.forEach(t),Fgo=r(cS," \u2014 "),HI=n(cS,"A",{href:!0});var Ldt=s(HI);Tgo=r(Ldt,"PegasusTokenizer"),Ldt.forEach(t),Mgo=r(cS," or "),UI=n(cS,"A",{href:!0});var ydt=s(UI);Ego=r(ydt,"PegasusTokenizerFast"),ydt.forEach(t),Cgo=r(cS," (Pegasus model)"),cS.forEach(t),wgo=i(S),_h=n(S,"LI",{});var E8e=s(_h);oie=n(E8e,"STRONG",{});var xdt=s(oie);Ago=r(xdt,"perceiver"),xdt.forEach(t),Lgo=r(E8e," \u2014 "),JI=n(E8e,"A",{href:!0});var $dt=s(JI);ygo=r($dt,"PerceiverTokenizer"),$dt.forEach(t),xgo=r(E8e," (Perceiver model)"),E8e.forEach(t),$go=i(S),bh=n(S,"LI",{});var C8e=s(bh);rie=n(C8e,"STRONG",{});var kdt=s(rie);kgo=r(kdt,"phobert"),kdt.forEach(t),Sgo=r(C8e," \u2014 "),YI=n(C8e,"A",{href:!0});var Sdt=s(YI);Rgo=r(Sdt,"PhobertTokenizer"),Sdt.forEach(t),Pgo=r(C8e," (PhoBERT model)"),C8e.forEach(t),Bgo=i(S),vh=n(S,"LI",{});var w8e=s(vh);tie=n(w8e,"STRONG",{});var Rdt=s(tie);Igo=r(Rdt,"plbart"),Rdt.forEach(t),Ngo=r(w8e," \u2014 "),KI=n(w8e,"A",{href:!0});var Pdt=s(KI);qgo=r(Pdt,"PLBartTokenizer"),Pdt.forEach(t),jgo=r(w8e," (PLBart model)"),w8e.forEach(t),Dgo=i(S),Fh=n(S,"LI",{});var A8e=s(Fh);aie=n(A8e,"STRONG",{});var Bdt=s(aie);Ggo=r(Bdt,"prophetnet"),Bdt.forEach(t),Ogo=r(A8e," \u2014 "),ZI=n(A8e,"A",{href:!0});var Idt=s(ZI);Vgo=r(Idt,"ProphetNetTokenizer"),Idt.forEach(t),Xgo=r(A8e," (ProphetNet model)"),A8e.forEach(t),zgo=i(S),$s=n(S,"LI",{});var mS=s($s);nie=n(mS,"STRONG",{});var Ndt=s(nie);Qgo=r(Ndt,"qdqbert"),Ndt.forEach(t),Wgo=r(mS," \u2014 "),eN=n(mS,"A",{href:!0});var qdt=s(eN);Hgo=r(qdt,"BertTokenizer"),qdt.forEach(t),Ugo=r(mS," or "),oN=n(mS,"A",{href:!0});var jdt=s(oN);Jgo=r(jdt,"BertTokenizerFast"),jdt.forEach(t),Ygo=r(mS," (QDQBert model)"),mS.forEach(t),Kgo=i(S),Th=n(S,"LI",{});var L8e=s(Th);sie=n(L8e,"STRONG",{});var Ddt=s(sie);Zgo=r(Ddt,"rag"),Ddt.forEach(t),eho=r(L8e," \u2014 "),rN=n(L8e,"A",{href:!0});var Gdt=s(rN);oho=r(Gdt,"RagTokenizer"),Gdt.forEach(t),rho=r(L8e," (RAG model)"),L8e.forEach(t),tho=i(S),ks=n(S,"LI",{});var fS=s(ks);lie=n(fS,"STRONG",{});var Odt=s(lie);aho=r(Odt,"realm"),Odt.forEach(t),nho=r(fS," \u2014 "),tN=n(fS,"A",{href:!0});var Vdt=s(tN);sho=r(Vdt,"RealmTokenizer"),Vdt.forEach(t),lho=r(fS," or "),aN=n(fS,"A",{href:!0});var Xdt=s(aN);iho=r(Xdt,"RealmTokenizerFast"),Xdt.forEach(t),dho=r(fS," (REALM model)"),fS.forEach(t),cho=i(S),Ss=n(S,"LI",{});var gS=s(Ss);iie=n(gS,"STRONG",{});var zdt=s(iie);mho=r(zdt,"reformer"),zdt.forEach(t),fho=r(gS," \u2014 "),nN=n(gS,"A",{href:!0});var Qdt=s(nN);gho=r(Qdt,"ReformerTokenizer"),Qdt.forEach(t),hho=r(gS," or "),sN=n(gS,"A",{href:!0});var Wdt=s(sN);uho=r(Wdt,"ReformerTokenizerFast"),Wdt.forEach(t),pho=r(gS," (Reformer model)"),gS.forEach(t),_ho=i(S),Rs=n(S,"LI",{});var hS=s(Rs);die=n(hS,"STRONG",{});var Hdt=s(die);bho=r(Hdt,"rembert"),Hdt.forEach(t),vho=r(hS," \u2014 "),lN=n(hS,"A",{href:!0});var Udt=s(lN);Fho=r(Udt,"RemBertTokenizer"),Udt.forEach(t),Tho=r(hS," or "),iN=n(hS,"A",{href:!0});var Jdt=s(iN);Mho=r(Jdt,"RemBertTokenizerFast"),Jdt.forEach(t),Eho=r(hS," (RemBERT model)"),hS.forEach(t),Cho=i(S),Ps=n(S,"LI",{});var uS=s(Ps);cie=n(uS,"STRONG",{});var Ydt=s(cie);who=r(Ydt,"retribert"),Ydt.forEach(t),Aho=r(uS," \u2014 "),dN=n(uS,"A",{href:!0});var Kdt=s(dN);Lho=r(Kdt,"RetriBertTokenizer"),Kdt.forEach(t),yho=r(uS," or "),cN=n(uS,"A",{href:!0});var Zdt=s(cN);xho=r(Zdt,"RetriBertTokenizerFast"),Zdt.forEach(t),$ho=r(uS," (RetriBERT model)"),uS.forEach(t),kho=i(S),Bs=n(S,"LI",{});var pS=s(Bs);mie=n(pS,"STRONG",{});var ect=s(mie);Sho=r(ect,"roberta"),ect.forEach(t),Rho=r(pS," \u2014 "),mN=n(pS,"A",{href:!0});var oct=s(mN);Pho=r(oct,"RobertaTokenizer"),oct.forEach(t),Bho=r(pS," or "),fN=n(pS,"A",{href:!0});var rct=s(fN);Iho=r(rct,"RobertaTokenizerFast"),rct.forEach(t),Nho=r(pS," (RoBERTa model)"),pS.forEach(t),qho=i(S),Is=n(S,"LI",{});var _S=s(Is);fie=n(_S,"STRONG",{});var tct=s(fie);jho=r(tct,"roformer"),tct.forEach(t),Dho=r(_S," \u2014 "),gN=n(_S,"A",{href:!0});var act=s(gN);Gho=r(act,"RoFormerTokenizer"),act.forEach(t),Oho=r(_S," or "),hN=n(_S,"A",{href:!0});var nct=s(hN);Vho=r(nct,"RoFormerTokenizerFast"),nct.forEach(t),Xho=r(_S," (RoFormer model)"),_S.forEach(t),zho=i(S),Mh=n(S,"LI",{});var y8e=s(Mh);gie=n(y8e,"STRONG",{});var sct=s(gie);Qho=r(sct,"speech_to_text"),sct.forEach(t),Who=r(y8e," \u2014 "),uN=n(y8e,"A",{href:!0});var lct=s(uN);Hho=r(lct,"Speech2TextTokenizer"),lct.forEach(t),Uho=r(y8e," (Speech2Text model)"),y8e.forEach(t),Jho=i(S),Eh=n(S,"LI",{});var x8e=s(Eh);hie=n(x8e,"STRONG",{});var ict=s(hie);Yho=r(ict,"speech_to_text_2"),ict.forEach(t),Kho=r(x8e," \u2014 "),pN=n(x8e,"A",{href:!0});var dct=s(pN);Zho=r(dct,"Speech2Text2Tokenizer"),dct.forEach(t),euo=r(x8e," (Speech2Text2 model)"),x8e.forEach(t),ouo=i(S),Ns=n(S,"LI",{});var bS=s(Ns);uie=n(bS,"STRONG",{});var cct=s(uie);ruo=r(cct,"splinter"),cct.forEach(t),tuo=r(bS," \u2014 "),_N=n(bS,"A",{href:!0});var mct=s(_N);auo=r(mct,"SplinterTokenizer"),mct.forEach(t),nuo=r(bS," or "),bN=n(bS,"A",{href:!0});var fct=s(bN);suo=r(fct,"SplinterTokenizerFast"),fct.forEach(t),luo=r(bS," (Splinter model)"),bS.forEach(t),iuo=i(S),qs=n(S,"LI",{});var vS=s(qs);pie=n(vS,"STRONG",{});var gct=s(pie);duo=r(gct,"squeezebert"),gct.forEach(t),cuo=r(vS," \u2014 "),vN=n(vS,"A",{href:!0});var hct=s(vN);muo=r(hct,"SqueezeBertTokenizer"),hct.forEach(t),fuo=r(vS," or "),FN=n(vS,"A",{href:!0});var uct=s(FN);guo=r(uct,"SqueezeBertTokenizerFast"),uct.forEach(t),huo=r(vS," (SqueezeBERT model)"),vS.forEach(t),uuo=i(S),js=n(S,"LI",{});var FS=s(js);_ie=n(FS,"STRONG",{});var pct=s(_ie);puo=r(pct,"t5"),pct.forEach(t),_uo=r(FS," \u2014 "),TN=n(FS,"A",{href:!0});var _ct=s(TN);buo=r(_ct,"T5Tokenizer"),_ct.forEach(t),vuo=r(FS," or "),MN=n(FS,"A",{href:!0});var bct=s(MN);Fuo=r(bct,"T5TokenizerFast"),bct.forEach(t),Tuo=r(FS," (T5 model)"),FS.forEach(t),Muo=i(S),Ch=n(S,"LI",{});var $8e=s(Ch);bie=n($8e,"STRONG",{});var vct=s(bie);Euo=r(vct,"tapas"),vct.forEach(t),Cuo=r($8e," \u2014 "),EN=n($8e,"A",{href:!0});var Fct=s(EN);wuo=r(Fct,"TapasTokenizer"),Fct.forEach(t),Auo=r($8e," (TAPAS model)"),$8e.forEach(t),Luo=i(S),wh=n(S,"LI",{});var k8e=s(wh);vie=n(k8e,"STRONG",{});var Tct=s(vie);yuo=r(Tct,"tapex"),Tct.forEach(t),xuo=r(k8e," \u2014 "),CN=n(k8e,"A",{href:!0});var Mct=s(CN);$uo=r(Mct,"TapexTokenizer"),Mct.forEach(t),kuo=r(k8e," (TAPEX model)"),k8e.forEach(t),Suo=i(S),Ah=n(S,"LI",{});var S8e=s(Ah);Fie=n(S8e,"STRONG",{});var Ect=s(Fie);Ruo=r(Ect,"transfo-xl"),Ect.forEach(t),Puo=r(S8e," \u2014 "),wN=n(S8e,"A",{href:!0});var Cct=s(wN);Buo=r(Cct,"TransfoXLTokenizer"),Cct.forEach(t),Iuo=r(S8e," (Transformer-XL model)"),S8e.forEach(t),Nuo=i(S),Ds=n(S,"LI",{});var TS=s(Ds);Tie=n(TS,"STRONG",{});var wct=s(Tie);quo=r(wct,"vilt"),wct.forEach(t),juo=r(TS," \u2014 "),AN=n(TS,"A",{href:!0});var Act=s(AN);Duo=r(Act,"BertTokenizer"),Act.forEach(t),Guo=r(TS," or "),LN=n(TS,"A",{href:!0});var Lct=s(LN);Ouo=r(Lct,"BertTokenizerFast"),Lct.forEach(t),Vuo=r(TS," (ViLT model)"),TS.forEach(t),Xuo=i(S),Gs=n(S,"LI",{});var MS=s(Gs);Mie=n(MS,"STRONG",{});var yct=s(Mie);zuo=r(yct,"visual_bert"),yct.forEach(t),Quo=r(MS," \u2014 "),yN=n(MS,"A",{href:!0});var xct=s(yN);Wuo=r(xct,"BertTokenizer"),xct.forEach(t),Huo=r(MS," or "),xN=n(MS,"A",{href:!0});var $ct=s(xN);Uuo=r($ct,"BertTokenizerFast"),$ct.forEach(t),Juo=r(MS," (VisualBERT model)"),MS.forEach(t),Yuo=i(S),Lh=n(S,"LI",{});var R8e=s(Lh);Eie=n(R8e,"STRONG",{});var kct=s(Eie);Kuo=r(kct,"wav2vec2"),kct.forEach(t),Zuo=r(R8e," \u2014 "),$N=n(R8e,"A",{href:!0});var Sct=s($N);epo=r(Sct,"Wav2Vec2CTCTokenizer"),Sct.forEach(t),opo=r(R8e," (Wav2Vec2 model)"),R8e.forEach(t),rpo=i(S),yh=n(S,"LI",{});var P8e=s(yh);Cie=n(P8e,"STRONG",{});var Rct=s(Cie);tpo=r(Rct,"wav2vec2-conformer"),Rct.forEach(t),apo=r(P8e," \u2014 "),kN=n(P8e,"A",{href:!0});var Pct=s(kN);npo=r(Pct,"Wav2Vec2CTCTokenizer"),Pct.forEach(t),spo=r(P8e," (Wav2Vec2-Conformer model)"),P8e.forEach(t),lpo=i(S),xh=n(S,"LI",{});var B8e=s(xh);wie=n(B8e,"STRONG",{});var Bct=s(wie);ipo=r(Bct,"wav2vec2_phoneme"),Bct.forEach(t),dpo=r(B8e," \u2014 "),SN=n(B8e,"A",{href:!0});var Ict=s(SN);cpo=r(Ict,"Wav2Vec2PhonemeCTCTokenizer"),Ict.forEach(t),mpo=r(B8e," (Wav2Vec2Phoneme model)"),B8e.forEach(t),fpo=i(S),Os=n(S,"LI",{});var ES=s(Os);Aie=n(ES,"STRONG",{});var Nct=s(Aie);gpo=r(Nct,"xglm"),Nct.forEach(t),hpo=r(ES," \u2014 "),RN=n(ES,"A",{href:!0});var qct=s(RN);upo=r(qct,"XGLMTokenizer"),qct.forEach(t),ppo=r(ES," or "),PN=n(ES,"A",{href:!0});var jct=s(PN);_po=r(jct,"XGLMTokenizerFast"),jct.forEach(t),bpo=r(ES," (XGLM model)"),ES.forEach(t),vpo=i(S),$h=n(S,"LI",{});var I8e=s($h);Lie=n(I8e,"STRONG",{});var Dct=s(Lie);Fpo=r(Dct,"xlm"),Dct.forEach(t),Tpo=r(I8e," \u2014 "),BN=n(I8e,"A",{href:!0});var Gct=s(BN);Mpo=r(Gct,"XLMTokenizer"),Gct.forEach(t),Epo=r(I8e," (XLM model)"),I8e.forEach(t),Cpo=i(S),kh=n(S,"LI",{});var N8e=s(kh);yie=n(N8e,"STRONG",{});var Oct=s(yie);wpo=r(Oct,"xlm-prophetnet"),Oct.forEach(t),Apo=r(N8e," \u2014 "),IN=n(N8e,"A",{href:!0});var Vct=s(IN);Lpo=r(Vct,"XLMProphetNetTokenizer"),Vct.forEach(t),ypo=r(N8e," (XLM-ProphetNet model)"),N8e.forEach(t),xpo=i(S),Vs=n(S,"LI",{});var CS=s(Vs);xie=n(CS,"STRONG",{});var Xct=s(xie);$po=r(Xct,"xlm-roberta"),Xct.forEach(t),kpo=r(CS," \u2014 "),NN=n(CS,"A",{href:!0});var zct=s(NN);Spo=r(zct,"XLMRobertaTokenizer"),zct.forEach(t),Rpo=r(CS," or "),qN=n(CS,"A",{href:!0});var Qct=s(qN);Ppo=r(Qct,"XLMRobertaTokenizerFast"),Qct.forEach(t),Bpo=r(CS," (XLM-RoBERTa model)"),CS.forEach(t),Ipo=i(S),Xs=n(S,"LI",{});var wS=s(Xs);$ie=n(wS,"STRONG",{});var Wct=s($ie);Npo=r(Wct,"xlm-roberta-xl"),Wct.forEach(t),qpo=r(wS," \u2014 "),jN=n(wS,"A",{href:!0});var Hct=s(jN);jpo=r(Hct,"RobertaTokenizer"),Hct.forEach(t),Dpo=r(wS," or "),DN=n(wS,"A",{href:!0});var Uct=s(DN);Gpo=r(Uct,"RobertaTokenizerFast"),Uct.forEach(t),Opo=r(wS," (XLM-RoBERTa-XL model)"),wS.forEach(t),Vpo=i(S),zs=n(S,"LI",{});var AS=s(zs);kie=n(AS,"STRONG",{});var Jct=s(kie);Xpo=r(Jct,"xlnet"),Jct.forEach(t),zpo=r(AS," \u2014 "),GN=n(AS,"A",{href:!0});var Yct=s(GN);Qpo=r(Yct,"XLNetTokenizer"),Yct.forEach(t),Wpo=r(AS," or "),ON=n(AS,"A",{href:!0});var Kct=s(ON);Hpo=r(Kct,"XLNetTokenizerFast"),Kct.forEach(t),Upo=r(AS," (XLNet model)"),AS.forEach(t),Jpo=i(S),Qs=n(S,"LI",{});var LS=s(Qs);Sie=n(LS,"STRONG",{});var Zct=s(Sie);Ypo=r(Zct,"yoso"),Zct.forEach(t),Kpo=r(LS," \u2014 "),VN=n(LS,"A",{href:!0});var emt=s(VN);Zpo=r(emt,"AlbertTokenizer"),emt.forEach(t),e_o=r(LS," or "),XN=n(LS,"A",{href:!0});var omt=s(XN);o_o=r(omt,"AlbertTokenizerFast"),omt.forEach(t),r_o=r(LS," (YOSO model)"),LS.forEach(t),S.forEach(t),t_o=i(Ks),T(Sh.$$.fragment,Ks),Ks.forEach(t),a_o=i(Ys),Rh=n(Ys,"DIV",{class:!0});var Kze=s(Rh);T(uy.$$.fragment,Kze),n_o=i(Kze),Rie=n(Kze,"P",{});var rmt=s(Rie);s_o=r(rmt,"Register a new tokenizer in this mapping."),rmt.forEach(t),Kze.forEach(t),Ys.forEach(t),YVe=i(m),Ni=n(m,"H2",{class:!0});var Zze=s(Ni);Ph=n(Zze,"A",{id:!0,class:!0,href:!0});var tmt=s(Ph);Pie=n(tmt,"SPAN",{});var amt=s(Pie);T(py.$$.fragment,amt),amt.forEach(t),tmt.forEach(t),l_o=i(Zze),Bie=n(Zze,"SPAN",{});var nmt=s(Bie);i_o=r(nmt,"AutoFeatureExtractor"),nmt.forEach(t),Zze.forEach(t),KVe=i(m),Lo=n(m,"DIV",{class:!0});var Zs=s(Lo);T(_y.$$.fragment,Zs),d_o=i(Zs),by=n(Zs,"P",{});var eQe=s(by);c_o=r(eQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),zN=n(eQe,"A",{href:!0});var smt=s(zN);m_o=r(smt,"AutoFeatureExtractor.from_pretrained()"),smt.forEach(t),f_o=r(eQe," class method."),eQe.forEach(t),g_o=i(Zs),vy=n(Zs,"P",{});var oQe=s(vy);h_o=r(oQe,"This class cannot be instantiated directly using "),Iie=n(oQe,"CODE",{});var lmt=s(Iie);u_o=r(lmt,"__init__()"),lmt.forEach(t),p_o=r(oQe," (throws an error)."),oQe.forEach(t),__o=i(Zs),He=n(Zs,"DIV",{class:!0});var aa=s(He);T(Fy.$$.fragment,aa),b_o=i(aa),Nie=n(aa,"P",{});var imt=s(Nie);v_o=r(imt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),imt.forEach(t),F_o=i(aa),Ba=n(aa,"P",{});var n7=s(Ba);T_o=r(n7,"The feature extractor class to instantiate is selected based on the "),qie=n(n7,"CODE",{});var dmt=s(qie);M_o=r(dmt,"model_type"),dmt.forEach(t),E_o=r(n7,` property of the config object
(either passed as an argument or loaded from `),jie=n(n7,"CODE",{});var cmt=s(jie);C_o=r(cmt,"pretrained_model_name_or_path"),cmt.forEach(t),w_o=r(n7,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Die=n(n7,"CODE",{});var mmt=s(Die);A_o=r(mmt,"pretrained_model_name_or_path"),mmt.forEach(t),L_o=r(n7,":"),n7.forEach(t),y_o=i(aa),Y=n(aa,"UL",{});var K=s(Y);Bh=n(K,"LI",{});var q8e=s(Bh);Gie=n(q8e,"STRONG",{});var fmt=s(Gie);x_o=r(fmt,"beit"),fmt.forEach(t),$_o=r(q8e," \u2014 "),QN=n(q8e,"A",{href:!0});var gmt=s(QN);k_o=r(gmt,"BeitFeatureExtractor"),gmt.forEach(t),S_o=r(q8e," (BEiT model)"),q8e.forEach(t),R_o=i(K),Ih=n(K,"LI",{});var j8e=s(Ih);Oie=n(j8e,"STRONG",{});var hmt=s(Oie);P_o=r(hmt,"clip"),hmt.forEach(t),B_o=r(j8e," \u2014 "),WN=n(j8e,"A",{href:!0});var umt=s(WN);I_o=r(umt,"CLIPFeatureExtractor"),umt.forEach(t),N_o=r(j8e," (CLIP model)"),j8e.forEach(t),q_o=i(K),Nh=n(K,"LI",{});var D8e=s(Nh);Vie=n(D8e,"STRONG",{});var pmt=s(Vie);j_o=r(pmt,"convnext"),pmt.forEach(t),D_o=r(D8e," \u2014 "),HN=n(D8e,"A",{href:!0});var _mt=s(HN);G_o=r(_mt,"ConvNextFeatureExtractor"),_mt.forEach(t),O_o=r(D8e," (ConvNeXT model)"),D8e.forEach(t),V_o=i(K),qh=n(K,"LI",{});var G8e=s(qh);Xie=n(G8e,"STRONG",{});var bmt=s(Xie);X_o=r(bmt,"cvt"),bmt.forEach(t),z_o=r(G8e," \u2014 "),UN=n(G8e,"A",{href:!0});var vmt=s(UN);Q_o=r(vmt,"ConvNextFeatureExtractor"),vmt.forEach(t),W_o=r(G8e," (CvT model)"),G8e.forEach(t),H_o=i(K),jh=n(K,"LI",{});var O8e=s(jh);zie=n(O8e,"STRONG",{});var Fmt=s(zie);U_o=r(Fmt,"data2vec-audio"),Fmt.forEach(t),J_o=r(O8e," \u2014 "),JN=n(O8e,"A",{href:!0});var Tmt=s(JN);Y_o=r(Tmt,"Wav2Vec2FeatureExtractor"),Tmt.forEach(t),K_o=r(O8e," (Data2VecAudio model)"),O8e.forEach(t),Z_o=i(K),Dh=n(K,"LI",{});var V8e=s(Dh);Qie=n(V8e,"STRONG",{});var Mmt=s(Qie);e2o=r(Mmt,"data2vec-vision"),Mmt.forEach(t),o2o=r(V8e," \u2014 "),YN=n(V8e,"A",{href:!0});var Emt=s(YN);r2o=r(Emt,"BeitFeatureExtractor"),Emt.forEach(t),t2o=r(V8e," (Data2VecVision model)"),V8e.forEach(t),a2o=i(K),Gh=n(K,"LI",{});var X8e=s(Gh);Wie=n(X8e,"STRONG",{});var Cmt=s(Wie);n2o=r(Cmt,"deit"),Cmt.forEach(t),s2o=r(X8e," \u2014 "),KN=n(X8e,"A",{href:!0});var wmt=s(KN);l2o=r(wmt,"DeiTFeatureExtractor"),wmt.forEach(t),i2o=r(X8e," (DeiT model)"),X8e.forEach(t),d2o=i(K),Oh=n(K,"LI",{});var z8e=s(Oh);Hie=n(z8e,"STRONG",{});var Amt=s(Hie);c2o=r(Amt,"detr"),Amt.forEach(t),m2o=r(z8e," \u2014 "),ZN=n(z8e,"A",{href:!0});var Lmt=s(ZN);f2o=r(Lmt,"DetrFeatureExtractor"),Lmt.forEach(t),g2o=r(z8e," (DETR model)"),z8e.forEach(t),h2o=i(K),Vh=n(K,"LI",{});var Q8e=s(Vh);Uie=n(Q8e,"STRONG",{});var ymt=s(Uie);u2o=r(ymt,"dpt"),ymt.forEach(t),p2o=r(Q8e," \u2014 "),eq=n(Q8e,"A",{href:!0});var xmt=s(eq);_2o=r(xmt,"DPTFeatureExtractor"),xmt.forEach(t),b2o=r(Q8e," (DPT model)"),Q8e.forEach(t),v2o=i(K),Xh=n(K,"LI",{});var W8e=s(Xh);Jie=n(W8e,"STRONG",{});var $mt=s(Jie);F2o=r($mt,"flava"),$mt.forEach(t),T2o=r(W8e," \u2014 "),oq=n(W8e,"A",{href:!0});var kmt=s(oq);M2o=r(kmt,"FlavaFeatureExtractor"),kmt.forEach(t),E2o=r(W8e," (FLAVA model)"),W8e.forEach(t),C2o=i(K),zh=n(K,"LI",{});var H8e=s(zh);Yie=n(H8e,"STRONG",{});var Smt=s(Yie);w2o=r(Smt,"glpn"),Smt.forEach(t),A2o=r(H8e," \u2014 "),rq=n(H8e,"A",{href:!0});var Rmt=s(rq);L2o=r(Rmt,"GLPNFeatureExtractor"),Rmt.forEach(t),y2o=r(H8e," (GLPN model)"),H8e.forEach(t),x2o=i(K),Qh=n(K,"LI",{});var U8e=s(Qh);Kie=n(U8e,"STRONG",{});var Pmt=s(Kie);$2o=r(Pmt,"groupvit"),Pmt.forEach(t),k2o=r(U8e," \u2014 "),tq=n(U8e,"A",{href:!0});var Bmt=s(tq);S2o=r(Bmt,"CLIPFeatureExtractor"),Bmt.forEach(t),R2o=r(U8e," (GroupViT model)"),U8e.forEach(t),P2o=i(K),Wh=n(K,"LI",{});var J8e=s(Wh);Zie=n(J8e,"STRONG",{});var Imt=s(Zie);B2o=r(Imt,"hubert"),Imt.forEach(t),I2o=r(J8e," \u2014 "),aq=n(J8e,"A",{href:!0});var Nmt=s(aq);N2o=r(Nmt,"Wav2Vec2FeatureExtractor"),Nmt.forEach(t),q2o=r(J8e," (Hubert model)"),J8e.forEach(t),j2o=i(K),Hh=n(K,"LI",{});var Y8e=s(Hh);ede=n(Y8e,"STRONG",{});var qmt=s(ede);D2o=r(qmt,"imagegpt"),qmt.forEach(t),G2o=r(Y8e," \u2014 "),nq=n(Y8e,"A",{href:!0});var jmt=s(nq);O2o=r(jmt,"ImageGPTFeatureExtractor"),jmt.forEach(t),V2o=r(Y8e," (ImageGPT model)"),Y8e.forEach(t),X2o=i(K),Uh=n(K,"LI",{});var K8e=s(Uh);ode=n(K8e,"STRONG",{});var Dmt=s(ode);z2o=r(Dmt,"layoutlmv2"),Dmt.forEach(t),Q2o=r(K8e," \u2014 "),sq=n(K8e,"A",{href:!0});var Gmt=s(sq);W2o=r(Gmt,"LayoutLMv2FeatureExtractor"),Gmt.forEach(t),H2o=r(K8e," (LayoutLMv2 model)"),K8e.forEach(t),U2o=i(K),Jh=n(K,"LI",{});var Z8e=s(Jh);rde=n(Z8e,"STRONG",{});var Omt=s(rde);J2o=r(Omt,"layoutlmv3"),Omt.forEach(t),Y2o=r(Z8e," \u2014 "),lq=n(Z8e,"A",{href:!0});var Vmt=s(lq);K2o=r(Vmt,"LayoutLMv3FeatureExtractor"),Vmt.forEach(t),Z2o=r(Z8e," (LayoutLMv3 model)"),Z8e.forEach(t),ebo=i(K),Yh=n(K,"LI",{});var e9e=s(Yh);tde=n(e9e,"STRONG",{});var Xmt=s(tde);obo=r(Xmt,"levit"),Xmt.forEach(t),rbo=r(e9e," \u2014 "),iq=n(e9e,"A",{href:!0});var zmt=s(iq);tbo=r(zmt,"LevitFeatureExtractor"),zmt.forEach(t),abo=r(e9e," (LeViT model)"),e9e.forEach(t),nbo=i(K),Kh=n(K,"LI",{});var o9e=s(Kh);ade=n(o9e,"STRONG",{});var Qmt=s(ade);sbo=r(Qmt,"maskformer"),Qmt.forEach(t),lbo=r(o9e," \u2014 "),dq=n(o9e,"A",{href:!0});var Wmt=s(dq);ibo=r(Wmt,"MaskFormerFeatureExtractor"),Wmt.forEach(t),dbo=r(o9e," (MaskFormer model)"),o9e.forEach(t),cbo=i(K),Zh=n(K,"LI",{});var r9e=s(Zh);nde=n(r9e,"STRONG",{});var Hmt=s(nde);mbo=r(Hmt,"mctct"),Hmt.forEach(t),fbo=r(r9e," \u2014 "),cq=n(r9e,"A",{href:!0});var Umt=s(cq);gbo=r(Umt,"MCTCTFeatureExtractor"),Umt.forEach(t),hbo=r(r9e," (M-CTC-T model)"),r9e.forEach(t),ubo=i(K),eu=n(K,"LI",{});var t9e=s(eu);sde=n(t9e,"STRONG",{});var Jmt=s(sde);pbo=r(Jmt,"mobilevit"),Jmt.forEach(t),_bo=r(t9e," \u2014 "),mq=n(t9e,"A",{href:!0});var Ymt=s(mq);bbo=r(Ymt,"MobileViTFeatureExtractor"),Ymt.forEach(t),vbo=r(t9e," (MobileViT model)"),t9e.forEach(t),Fbo=i(K),ou=n(K,"LI",{});var a9e=s(ou);lde=n(a9e,"STRONG",{});var Kmt=s(lde);Tbo=r(Kmt,"perceiver"),Kmt.forEach(t),Mbo=r(a9e," \u2014 "),fq=n(a9e,"A",{href:!0});var Zmt=s(fq);Ebo=r(Zmt,"PerceiverFeatureExtractor"),Zmt.forEach(t),Cbo=r(a9e," (Perceiver model)"),a9e.forEach(t),wbo=i(K),ru=n(K,"LI",{});var n9e=s(ru);ide=n(n9e,"STRONG",{});var eft=s(ide);Abo=r(eft,"poolformer"),eft.forEach(t),Lbo=r(n9e," \u2014 "),gq=n(n9e,"A",{href:!0});var oft=s(gq);ybo=r(oft,"PoolFormerFeatureExtractor"),oft.forEach(t),xbo=r(n9e," (PoolFormer model)"),n9e.forEach(t),$bo=i(K),tu=n(K,"LI",{});var s9e=s(tu);dde=n(s9e,"STRONG",{});var rft=s(dde);kbo=r(rft,"regnet"),rft.forEach(t),Sbo=r(s9e," \u2014 "),hq=n(s9e,"A",{href:!0});var tft=s(hq);Rbo=r(tft,"ConvNextFeatureExtractor"),tft.forEach(t),Pbo=r(s9e," (RegNet model)"),s9e.forEach(t),Bbo=i(K),au=n(K,"LI",{});var l9e=s(au);cde=n(l9e,"STRONG",{});var aft=s(cde);Ibo=r(aft,"resnet"),aft.forEach(t),Nbo=r(l9e," \u2014 "),uq=n(l9e,"A",{href:!0});var nft=s(uq);qbo=r(nft,"ConvNextFeatureExtractor"),nft.forEach(t),jbo=r(l9e," (ResNet model)"),l9e.forEach(t),Dbo=i(K),nu=n(K,"LI",{});var i9e=s(nu);mde=n(i9e,"STRONG",{});var sft=s(mde);Gbo=r(sft,"segformer"),sft.forEach(t),Obo=r(i9e," \u2014 "),pq=n(i9e,"A",{href:!0});var lft=s(pq);Vbo=r(lft,"SegformerFeatureExtractor"),lft.forEach(t),Xbo=r(i9e," (SegFormer model)"),i9e.forEach(t),zbo=i(K),su=n(K,"LI",{});var d9e=s(su);fde=n(d9e,"STRONG",{});var ift=s(fde);Qbo=r(ift,"speech_to_text"),ift.forEach(t),Wbo=r(d9e," \u2014 "),_q=n(d9e,"A",{href:!0});var dft=s(_q);Hbo=r(dft,"Speech2TextFeatureExtractor"),dft.forEach(t),Ubo=r(d9e," (Speech2Text model)"),d9e.forEach(t),Jbo=i(K),lu=n(K,"LI",{});var c9e=s(lu);gde=n(c9e,"STRONG",{});var cft=s(gde);Ybo=r(cft,"swin"),cft.forEach(t),Kbo=r(c9e," \u2014 "),bq=n(c9e,"A",{href:!0});var mft=s(bq);Zbo=r(mft,"ViTFeatureExtractor"),mft.forEach(t),evo=r(c9e," (Swin Transformer model)"),c9e.forEach(t),ovo=i(K),iu=n(K,"LI",{});var m9e=s(iu);hde=n(m9e,"STRONG",{});var fft=s(hde);rvo=r(fft,"van"),fft.forEach(t),tvo=r(m9e," \u2014 "),vq=n(m9e,"A",{href:!0});var gft=s(vq);avo=r(gft,"ConvNextFeatureExtractor"),gft.forEach(t),nvo=r(m9e," (VAN model)"),m9e.forEach(t),svo=i(K),du=n(K,"LI",{});var f9e=s(du);ude=n(f9e,"STRONG",{});var hft=s(ude);lvo=r(hft,"vilt"),hft.forEach(t),ivo=r(f9e," \u2014 "),Fq=n(f9e,"A",{href:!0});var uft=s(Fq);dvo=r(uft,"ViltFeatureExtractor"),uft.forEach(t),cvo=r(f9e," (ViLT model)"),f9e.forEach(t),mvo=i(K),cu=n(K,"LI",{});var g9e=s(cu);pde=n(g9e,"STRONG",{});var pft=s(pde);fvo=r(pft,"vit"),pft.forEach(t),gvo=r(g9e," \u2014 "),Tq=n(g9e,"A",{href:!0});var _ft=s(Tq);hvo=r(_ft,"ViTFeatureExtractor"),_ft.forEach(t),uvo=r(g9e," (ViT model)"),g9e.forEach(t),pvo=i(K),mu=n(K,"LI",{});var h9e=s(mu);_de=n(h9e,"STRONG",{});var bft=s(_de);_vo=r(bft,"vit_mae"),bft.forEach(t),bvo=r(h9e," \u2014 "),Mq=n(h9e,"A",{href:!0});var vft=s(Mq);vvo=r(vft,"ViTFeatureExtractor"),vft.forEach(t),Fvo=r(h9e," (ViTMAE model)"),h9e.forEach(t),Tvo=i(K),fu=n(K,"LI",{});var u9e=s(fu);bde=n(u9e,"STRONG",{});var Fft=s(bde);Mvo=r(Fft,"wav2vec2"),Fft.forEach(t),Evo=r(u9e," \u2014 "),Eq=n(u9e,"A",{href:!0});var Tft=s(Eq);Cvo=r(Tft,"Wav2Vec2FeatureExtractor"),Tft.forEach(t),wvo=r(u9e," (Wav2Vec2 model)"),u9e.forEach(t),Avo=i(K),gu=n(K,"LI",{});var p9e=s(gu);vde=n(p9e,"STRONG",{});var Mft=s(vde);Lvo=r(Mft,"wav2vec2-conformer"),Mft.forEach(t),yvo=r(p9e," \u2014 "),Cq=n(p9e,"A",{href:!0});var Eft=s(Cq);xvo=r(Eft,"Wav2Vec2FeatureExtractor"),Eft.forEach(t),$vo=r(p9e," (Wav2Vec2-Conformer model)"),p9e.forEach(t),kvo=i(K),hu=n(K,"LI",{});var _9e=s(hu);Fde=n(_9e,"STRONG",{});var Cft=s(Fde);Svo=r(Cft,"yolos"),Cft.forEach(t),Rvo=r(_9e," \u2014 "),wq=n(_9e,"A",{href:!0});var wft=s(wq);Pvo=r(wft,"YolosFeatureExtractor"),wft.forEach(t),Bvo=r(_9e," (YOLOS model)"),_9e.forEach(t),K.forEach(t),Ivo=i(aa),T(uu.$$.fragment,aa),Nvo=i(aa),T(pu.$$.fragment,aa),aa.forEach(t),qvo=i(Zs),_u=n(Zs,"DIV",{class:!0});var rQe=s(_u);T(Ty.$$.fragment,rQe),jvo=i(rQe),Tde=n(rQe,"P",{});var Aft=s(Tde);Dvo=r(Aft,"Register a new feature extractor for this class."),Aft.forEach(t),rQe.forEach(t),Zs.forEach(t),ZVe=i(m),qi=n(m,"H2",{class:!0});var tQe=s(qi);bu=n(tQe,"A",{id:!0,class:!0,href:!0});var Lft=s(bu);Mde=n(Lft,"SPAN",{});var yft=s(Mde);T(My.$$.fragment,yft),yft.forEach(t),Lft.forEach(t),Gvo=i(tQe),Ede=n(tQe,"SPAN",{});var xft=s(Ede);Ovo=r(xft,"AutoProcessor"),xft.forEach(t),tQe.forEach(t),eXe=i(m),yo=n(m,"DIV",{class:!0});var el=s(yo);T(Ey.$$.fragment,el),Vvo=i(el),Cy=n(el,"P",{});var aQe=s(Cy);Xvo=r(aQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Aq=n(aQe,"A",{href:!0});var $ft=s(Aq);zvo=r($ft,"AutoProcessor.from_pretrained()"),$ft.forEach(t),Qvo=r(aQe," class method."),aQe.forEach(t),Wvo=i(el),wy=n(el,"P",{});var nQe=s(wy);Hvo=r(nQe,"This class cannot be instantiated directly using "),Cde=n(nQe,"CODE",{});var kft=s(Cde);Uvo=r(kft,"__init__()"),kft.forEach(t),Jvo=r(nQe," (throws an error)."),nQe.forEach(t),Yvo=i(el),Ue=n(el,"DIV",{class:!0});var na=s(Ue);T(Ay.$$.fragment,na),Kvo=i(na),wde=n(na,"P",{});var Sft=s(wde);Zvo=r(Sft,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Sft.forEach(t),e1o=i(na),ji=n(na,"P",{});var Cre=s(ji);o1o=r(Cre,"The processor class to instantiate is selected based on the "),Ade=n(Cre,"CODE",{});var Rft=s(Ade);r1o=r(Rft,"model_type"),Rft.forEach(t),t1o=r(Cre,` property of the config object (either
passed as an argument or loaded from `),Lde=n(Cre,"CODE",{});var Pft=s(Lde);a1o=r(Pft,"pretrained_model_name_or_path"),Pft.forEach(t),n1o=r(Cre," if possible):"),Cre.forEach(t),s1o=i(na),he=n(na,"UL",{});var _e=s(he);vu=n(_e,"LI",{});var b9e=s(vu);yde=n(b9e,"STRONG",{});var Bft=s(yde);l1o=r(Bft,"clip"),Bft.forEach(t),i1o=r(b9e," \u2014 "),Lq=n(b9e,"A",{href:!0});var Ift=s(Lq);d1o=r(Ift,"CLIPProcessor"),Ift.forEach(t),c1o=r(b9e," (CLIP model)"),b9e.forEach(t),m1o=i(_e),Fu=n(_e,"LI",{});var v9e=s(Fu);xde=n(v9e,"STRONG",{});var Nft=s(xde);f1o=r(Nft,"flava"),Nft.forEach(t),g1o=r(v9e," \u2014 "),$de=n(v9e,"CODE",{});var qft=s($de);h1o=r(qft,"FLAVAProcessor"),qft.forEach(t),u1o=r(v9e," (FLAVA model)"),v9e.forEach(t),p1o=i(_e),Tu=n(_e,"LI",{});var F9e=s(Tu);kde=n(F9e,"STRONG",{});var jft=s(kde);_1o=r(jft,"groupvit"),jft.forEach(t),b1o=r(F9e," \u2014 "),yq=n(F9e,"A",{href:!0});var Dft=s(yq);v1o=r(Dft,"CLIPProcessor"),Dft.forEach(t),F1o=r(F9e," (GroupViT model)"),F9e.forEach(t),T1o=i(_e),Mu=n(_e,"LI",{});var T9e=s(Mu);Sde=n(T9e,"STRONG",{});var Gft=s(Sde);M1o=r(Gft,"layoutlmv2"),Gft.forEach(t),E1o=r(T9e," \u2014 "),xq=n(T9e,"A",{href:!0});var Oft=s(xq);C1o=r(Oft,"LayoutLMv2Processor"),Oft.forEach(t),w1o=r(T9e," (LayoutLMv2 model)"),T9e.forEach(t),A1o=i(_e),Eu=n(_e,"LI",{});var M9e=s(Eu);Rde=n(M9e,"STRONG",{});var Vft=s(Rde);L1o=r(Vft,"layoutlmv3"),Vft.forEach(t),y1o=r(M9e," \u2014 "),$q=n(M9e,"A",{href:!0});var Xft=s($q);x1o=r(Xft,"LayoutLMv3Processor"),Xft.forEach(t),$1o=r(M9e," (LayoutLMv3 model)"),M9e.forEach(t),k1o=i(_e),Cu=n(_e,"LI",{});var E9e=s(Cu);Pde=n(E9e,"STRONG",{});var zft=s(Pde);S1o=r(zft,"layoutxlm"),zft.forEach(t),R1o=r(E9e," \u2014 "),kq=n(E9e,"A",{href:!0});var Qft=s(kq);P1o=r(Qft,"LayoutXLMProcessor"),Qft.forEach(t),B1o=r(E9e," (LayoutXLM model)"),E9e.forEach(t),I1o=i(_e),wu=n(_e,"LI",{});var C9e=s(wu);Bde=n(C9e,"STRONG",{});var Wft=s(Bde);N1o=r(Wft,"sew"),Wft.forEach(t),q1o=r(C9e," \u2014 "),Sq=n(C9e,"A",{href:!0});var Hft=s(Sq);j1o=r(Hft,"Wav2Vec2Processor"),Hft.forEach(t),D1o=r(C9e," (SEW model)"),C9e.forEach(t),G1o=i(_e),Au=n(_e,"LI",{});var w9e=s(Au);Ide=n(w9e,"STRONG",{});var Uft=s(Ide);O1o=r(Uft,"sew-d"),Uft.forEach(t),V1o=r(w9e," \u2014 "),Rq=n(w9e,"A",{href:!0});var Jft=s(Rq);X1o=r(Jft,"Wav2Vec2Processor"),Jft.forEach(t),z1o=r(w9e," (SEW-D model)"),w9e.forEach(t),Q1o=i(_e),Lu=n(_e,"LI",{});var A9e=s(Lu);Nde=n(A9e,"STRONG",{});var Yft=s(Nde);W1o=r(Yft,"speech_to_text"),Yft.forEach(t),H1o=r(A9e," \u2014 "),Pq=n(A9e,"A",{href:!0});var Kft=s(Pq);U1o=r(Kft,"Speech2TextProcessor"),Kft.forEach(t),J1o=r(A9e," (Speech2Text model)"),A9e.forEach(t),Y1o=i(_e),yu=n(_e,"LI",{});var L9e=s(yu);qde=n(L9e,"STRONG",{});var Zft=s(qde);K1o=r(Zft,"speech_to_text_2"),Zft.forEach(t),Z1o=r(L9e," \u2014 "),Bq=n(L9e,"A",{href:!0});var egt=s(Bq);eFo=r(egt,"Speech2Text2Processor"),egt.forEach(t),oFo=r(L9e," (Speech2Text2 model)"),L9e.forEach(t),rFo=i(_e),xu=n(_e,"LI",{});var y9e=s(xu);jde=n(y9e,"STRONG",{});var ogt=s(jde);tFo=r(ogt,"trocr"),ogt.forEach(t),aFo=r(y9e," \u2014 "),Iq=n(y9e,"A",{href:!0});var rgt=s(Iq);nFo=r(rgt,"TrOCRProcessor"),rgt.forEach(t),sFo=r(y9e," (TrOCR model)"),y9e.forEach(t),lFo=i(_e),$u=n(_e,"LI",{});var x9e=s($u);Dde=n(x9e,"STRONG",{});var tgt=s(Dde);iFo=r(tgt,"unispeech"),tgt.forEach(t),dFo=r(x9e," \u2014 "),Nq=n(x9e,"A",{href:!0});var agt=s(Nq);cFo=r(agt,"Wav2Vec2Processor"),agt.forEach(t),mFo=r(x9e," (UniSpeech model)"),x9e.forEach(t),fFo=i(_e),ku=n(_e,"LI",{});var $9e=s(ku);Gde=n($9e,"STRONG",{});var ngt=s(Gde);gFo=r(ngt,"unispeech-sat"),ngt.forEach(t),hFo=r($9e," \u2014 "),qq=n($9e,"A",{href:!0});var sgt=s(qq);uFo=r(sgt,"Wav2Vec2Processor"),sgt.forEach(t),pFo=r($9e," (UniSpeechSat model)"),$9e.forEach(t),_Fo=i(_e),Su=n(_e,"LI",{});var k9e=s(Su);Ode=n(k9e,"STRONG",{});var lgt=s(Ode);bFo=r(lgt,"vilt"),lgt.forEach(t),vFo=r(k9e," \u2014 "),jq=n(k9e,"A",{href:!0});var igt=s(jq);FFo=r(igt,"ViltProcessor"),igt.forEach(t),TFo=r(k9e," (ViLT model)"),k9e.forEach(t),MFo=i(_e),Ru=n(_e,"LI",{});var S9e=s(Ru);Vde=n(S9e,"STRONG",{});var dgt=s(Vde);EFo=r(dgt,"vision-text-dual-encoder"),dgt.forEach(t),CFo=r(S9e," \u2014 "),Dq=n(S9e,"A",{href:!0});var cgt=s(Dq);wFo=r(cgt,"VisionTextDualEncoderProcessor"),cgt.forEach(t),AFo=r(S9e," (VisionTextDualEncoder model)"),S9e.forEach(t),LFo=i(_e),Pu=n(_e,"LI",{});var R9e=s(Pu);Xde=n(R9e,"STRONG",{});var mgt=s(Xde);yFo=r(mgt,"wav2vec2"),mgt.forEach(t),xFo=r(R9e," \u2014 "),Gq=n(R9e,"A",{href:!0});var fgt=s(Gq);$Fo=r(fgt,"Wav2Vec2Processor"),fgt.forEach(t),kFo=r(R9e," (Wav2Vec2 model)"),R9e.forEach(t),SFo=i(_e),Bu=n(_e,"LI",{});var P9e=s(Bu);zde=n(P9e,"STRONG",{});var ggt=s(zde);RFo=r(ggt,"wav2vec2-conformer"),ggt.forEach(t),PFo=r(P9e," \u2014 "),Oq=n(P9e,"A",{href:!0});var hgt=s(Oq);BFo=r(hgt,"Wav2Vec2Processor"),hgt.forEach(t),IFo=r(P9e," (Wav2Vec2-Conformer model)"),P9e.forEach(t),NFo=i(_e),Iu=n(_e,"LI",{});var B9e=s(Iu);Qde=n(B9e,"STRONG",{});var ugt=s(Qde);qFo=r(ugt,"wavlm"),ugt.forEach(t),jFo=r(B9e," \u2014 "),Vq=n(B9e,"A",{href:!0});var pgt=s(Vq);DFo=r(pgt,"Wav2Vec2Processor"),pgt.forEach(t),GFo=r(B9e," (WavLM model)"),B9e.forEach(t),_e.forEach(t),OFo=i(na),T(Nu.$$.fragment,na),VFo=i(na),T(qu.$$.fragment,na),na.forEach(t),XFo=i(el),ju=n(el,"DIV",{class:!0});var sQe=s(ju);T(Ly.$$.fragment,sQe),zFo=i(sQe),Wde=n(sQe,"P",{});var _gt=s(Wde);QFo=r(_gt,"Register a new processor for this class."),_gt.forEach(t),sQe.forEach(t),el.forEach(t),oXe=i(m),Di=n(m,"H2",{class:!0});var lQe=s(Di);Du=n(lQe,"A",{id:!0,class:!0,href:!0});var bgt=s(Du);Hde=n(bgt,"SPAN",{});var vgt=s(Hde);T(yy.$$.fragment,vgt),vgt.forEach(t),bgt.forEach(t),WFo=i(lQe),Ude=n(lQe,"SPAN",{});var Fgt=s(Ude);HFo=r(Fgt,"AutoModel"),Fgt.forEach(t),lQe.forEach(t),rXe=i(m),xo=n(m,"DIV",{class:!0});var ol=s(xo);T(xy.$$.fragment,ol),UFo=i(ol),Gi=n(ol,"P",{});var wre=s(Gi);JFo=r(wre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Xq=n(wre,"A",{href:!0});var Tgt=s(Xq);YFo=r(Tgt,"from_pretrained()"),Tgt.forEach(t),KFo=r(wre," class method or the "),zq=n(wre,"A",{href:!0});var Mgt=s(zq);ZFo=r(Mgt,"from_config()"),Mgt.forEach(t),eTo=r(wre,` class
method.`),wre.forEach(t),oTo=i(ol),$y=n(ol,"P",{});var iQe=s($y);rTo=r(iQe,"This class cannot be instantiated directly using "),Jde=n(iQe,"CODE",{});var Egt=s(Jde);tTo=r(Egt,"__init__()"),Egt.forEach(t),aTo=r(iQe," (throws an error)."),iQe.forEach(t),nTo=i(ol),lt=n(ol,"DIV",{class:!0});var s7=s(lt);T(ky.$$.fragment,s7),sTo=i(s7),Yde=n(s7,"P",{});var Cgt=s(Yde);lTo=r(Cgt,"Instantiates one of the base model classes of the library from a configuration."),Cgt.forEach(t),iTo=i(s7),Oi=n(s7,"P",{});var Are=s(Oi);dTo=r(Are,`Note:
Loading a model from its configuration file does `),Kde=n(Are,"STRONG",{});var wgt=s(Kde);cTo=r(wgt,"not"),wgt.forEach(t),mTo=r(Are,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qq=n(Are,"A",{href:!0});var Agt=s(Qq);fTo=r(Agt,"from_pretrained()"),Agt.forEach(t),gTo=r(Are," to load the model weights."),Are.forEach(t),hTo=i(s7),T(Gu.$$.fragment,s7),s7.forEach(t),uTo=i(ol),Je=n(ol,"DIV",{class:!0});var sa=s(Je);T(Sy.$$.fragment,sa),pTo=i(sa),Zde=n(sa,"P",{});var Lgt=s(Zde);_To=r(Lgt,"Instantiate one of the base model classes of the library from a pretrained model."),Lgt.forEach(t),bTo=i(sa),Ia=n(sa,"P",{});var l7=s(Ia);vTo=r(l7,"The model class to instantiate is selected based on the "),ece=n(l7,"CODE",{});var ygt=s(ece);FTo=r(ygt,"model_type"),ygt.forEach(t),TTo=r(l7,` property of the config object (either
passed as an argument or loaded from `),oce=n(l7,"CODE",{});var xgt=s(oce);MTo=r(xgt,"pretrained_model_name_or_path"),xgt.forEach(t),ETo=r(l7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rce=n(l7,"CODE",{});var $gt=s(rce);CTo=r($gt,"pretrained_model_name_or_path"),$gt.forEach(t),wTo=r(l7,":"),l7.forEach(t),ATo=i(sa),y=n(sa,"UL",{});var x=s(y);Ou=n(x,"LI",{});var I9e=s(Ou);tce=n(I9e,"STRONG",{});var kgt=s(tce);LTo=r(kgt,"albert"),kgt.forEach(t),yTo=r(I9e," \u2014 "),Wq=n(I9e,"A",{href:!0});var Sgt=s(Wq);xTo=r(Sgt,"AlbertModel"),Sgt.forEach(t),$To=r(I9e," (ALBERT model)"),I9e.forEach(t),kTo=i(x),Vu=n(x,"LI",{});var N9e=s(Vu);ace=n(N9e,"STRONG",{});var Rgt=s(ace);STo=r(Rgt,"bart"),Rgt.forEach(t),RTo=r(N9e," \u2014 "),Hq=n(N9e,"A",{href:!0});var Pgt=s(Hq);PTo=r(Pgt,"BartModel"),Pgt.forEach(t),BTo=r(N9e," (BART model)"),N9e.forEach(t),ITo=i(x),Xu=n(x,"LI",{});var q9e=s(Xu);nce=n(q9e,"STRONG",{});var Bgt=s(nce);NTo=r(Bgt,"beit"),Bgt.forEach(t),qTo=r(q9e," \u2014 "),Uq=n(q9e,"A",{href:!0});var Igt=s(Uq);jTo=r(Igt,"BeitModel"),Igt.forEach(t),DTo=r(q9e," (BEiT model)"),q9e.forEach(t),GTo=i(x),zu=n(x,"LI",{});var j9e=s(zu);sce=n(j9e,"STRONG",{});var Ngt=s(sce);OTo=r(Ngt,"bert"),Ngt.forEach(t),VTo=r(j9e," \u2014 "),Jq=n(j9e,"A",{href:!0});var qgt=s(Jq);XTo=r(qgt,"BertModel"),qgt.forEach(t),zTo=r(j9e," (BERT model)"),j9e.forEach(t),QTo=i(x),Qu=n(x,"LI",{});var D9e=s(Qu);lce=n(D9e,"STRONG",{});var jgt=s(lce);WTo=r(jgt,"bert-generation"),jgt.forEach(t),HTo=r(D9e," \u2014 "),Yq=n(D9e,"A",{href:!0});var Dgt=s(Yq);UTo=r(Dgt,"BertGenerationEncoder"),Dgt.forEach(t),JTo=r(D9e," (Bert Generation model)"),D9e.forEach(t),YTo=i(x),Wu=n(x,"LI",{});var G9e=s(Wu);ice=n(G9e,"STRONG",{});var Ggt=s(ice);KTo=r(Ggt,"big_bird"),Ggt.forEach(t),ZTo=r(G9e," \u2014 "),Kq=n(G9e,"A",{href:!0});var Ogt=s(Kq);eMo=r(Ogt,"BigBirdModel"),Ogt.forEach(t),oMo=r(G9e," (BigBird model)"),G9e.forEach(t),rMo=i(x),Hu=n(x,"LI",{});var O9e=s(Hu);dce=n(O9e,"STRONG",{});var Vgt=s(dce);tMo=r(Vgt,"bigbird_pegasus"),Vgt.forEach(t),aMo=r(O9e," \u2014 "),Zq=n(O9e,"A",{href:!0});var Xgt=s(Zq);nMo=r(Xgt,"BigBirdPegasusModel"),Xgt.forEach(t),sMo=r(O9e," (BigBird-Pegasus model)"),O9e.forEach(t),lMo=i(x),Uu=n(x,"LI",{});var V9e=s(Uu);cce=n(V9e,"STRONG",{});var zgt=s(cce);iMo=r(zgt,"blenderbot"),zgt.forEach(t),dMo=r(V9e," \u2014 "),ej=n(V9e,"A",{href:!0});var Qgt=s(ej);cMo=r(Qgt,"BlenderbotModel"),Qgt.forEach(t),mMo=r(V9e," (Blenderbot model)"),V9e.forEach(t),fMo=i(x),Ju=n(x,"LI",{});var X9e=s(Ju);mce=n(X9e,"STRONG",{});var Wgt=s(mce);gMo=r(Wgt,"blenderbot-small"),Wgt.forEach(t),hMo=r(X9e," \u2014 "),oj=n(X9e,"A",{href:!0});var Hgt=s(oj);uMo=r(Hgt,"BlenderbotSmallModel"),Hgt.forEach(t),pMo=r(X9e," (BlenderbotSmall model)"),X9e.forEach(t),_Mo=i(x),Yu=n(x,"LI",{});var z9e=s(Yu);fce=n(z9e,"STRONG",{});var Ugt=s(fce);bMo=r(Ugt,"bloom"),Ugt.forEach(t),vMo=r(z9e," \u2014 "),rj=n(z9e,"A",{href:!0});var Jgt=s(rj);FMo=r(Jgt,"BloomModel"),Jgt.forEach(t),TMo=r(z9e," (BLOOM model)"),z9e.forEach(t),MMo=i(x),Ku=n(x,"LI",{});var Q9e=s(Ku);gce=n(Q9e,"STRONG",{});var Ygt=s(gce);EMo=r(Ygt,"camembert"),Ygt.forEach(t),CMo=r(Q9e," \u2014 "),tj=n(Q9e,"A",{href:!0});var Kgt=s(tj);wMo=r(Kgt,"CamembertModel"),Kgt.forEach(t),AMo=r(Q9e," (CamemBERT model)"),Q9e.forEach(t),LMo=i(x),Zu=n(x,"LI",{});var W9e=s(Zu);hce=n(W9e,"STRONG",{});var Zgt=s(hce);yMo=r(Zgt,"canine"),Zgt.forEach(t),xMo=r(W9e," \u2014 "),aj=n(W9e,"A",{href:!0});var eht=s(aj);$Mo=r(eht,"CanineModel"),eht.forEach(t),kMo=r(W9e," (CANINE model)"),W9e.forEach(t),SMo=i(x),ep=n(x,"LI",{});var H9e=s(ep);uce=n(H9e,"STRONG",{});var oht=s(uce);RMo=r(oht,"clip"),oht.forEach(t),PMo=r(H9e," \u2014 "),nj=n(H9e,"A",{href:!0});var rht=s(nj);BMo=r(rht,"CLIPModel"),rht.forEach(t),IMo=r(H9e," (CLIP model)"),H9e.forEach(t),NMo=i(x),op=n(x,"LI",{});var U9e=s(op);pce=n(U9e,"STRONG",{});var tht=s(pce);qMo=r(tht,"codegen"),tht.forEach(t),jMo=r(U9e," \u2014 "),sj=n(U9e,"A",{href:!0});var aht=s(sj);DMo=r(aht,"CodeGenModel"),aht.forEach(t),GMo=r(U9e," (CodeGen model)"),U9e.forEach(t),OMo=i(x),rp=n(x,"LI",{});var J9e=s(rp);_ce=n(J9e,"STRONG",{});var nht=s(_ce);VMo=r(nht,"convbert"),nht.forEach(t),XMo=r(J9e," \u2014 "),lj=n(J9e,"A",{href:!0});var sht=s(lj);zMo=r(sht,"ConvBertModel"),sht.forEach(t),QMo=r(J9e," (ConvBERT model)"),J9e.forEach(t),WMo=i(x),tp=n(x,"LI",{});var Y9e=s(tp);bce=n(Y9e,"STRONG",{});var lht=s(bce);HMo=r(lht,"convnext"),lht.forEach(t),UMo=r(Y9e," \u2014 "),ij=n(Y9e,"A",{href:!0});var iht=s(ij);JMo=r(iht,"ConvNextModel"),iht.forEach(t),YMo=r(Y9e," (ConvNeXT model)"),Y9e.forEach(t),KMo=i(x),ap=n(x,"LI",{});var K9e=s(ap);vce=n(K9e,"STRONG",{});var dht=s(vce);ZMo=r(dht,"ctrl"),dht.forEach(t),e4o=r(K9e," \u2014 "),dj=n(K9e,"A",{href:!0});var cht=s(dj);o4o=r(cht,"CTRLModel"),cht.forEach(t),r4o=r(K9e," (CTRL model)"),K9e.forEach(t),t4o=i(x),np=n(x,"LI",{});var Z9e=s(np);Fce=n(Z9e,"STRONG",{});var mht=s(Fce);a4o=r(mht,"cvt"),mht.forEach(t),n4o=r(Z9e," \u2014 "),cj=n(Z9e,"A",{href:!0});var fht=s(cj);s4o=r(fht,"CvtModel"),fht.forEach(t),l4o=r(Z9e," (CvT model)"),Z9e.forEach(t),i4o=i(x),sp=n(x,"LI",{});var exe=s(sp);Tce=n(exe,"STRONG",{});var ght=s(Tce);d4o=r(ght,"data2vec-audio"),ght.forEach(t),c4o=r(exe," \u2014 "),mj=n(exe,"A",{href:!0});var hht=s(mj);m4o=r(hht,"Data2VecAudioModel"),hht.forEach(t),f4o=r(exe," (Data2VecAudio model)"),exe.forEach(t),g4o=i(x),lp=n(x,"LI",{});var oxe=s(lp);Mce=n(oxe,"STRONG",{});var uht=s(Mce);h4o=r(uht,"data2vec-text"),uht.forEach(t),u4o=r(oxe," \u2014 "),fj=n(oxe,"A",{href:!0});var pht=s(fj);p4o=r(pht,"Data2VecTextModel"),pht.forEach(t),_4o=r(oxe," (Data2VecText model)"),oxe.forEach(t),b4o=i(x),ip=n(x,"LI",{});var rxe=s(ip);Ece=n(rxe,"STRONG",{});var _ht=s(Ece);v4o=r(_ht,"data2vec-vision"),_ht.forEach(t),F4o=r(rxe," \u2014 "),gj=n(rxe,"A",{href:!0});var bht=s(gj);T4o=r(bht,"Data2VecVisionModel"),bht.forEach(t),M4o=r(rxe," (Data2VecVision model)"),rxe.forEach(t),E4o=i(x),dp=n(x,"LI",{});var txe=s(dp);Cce=n(txe,"STRONG",{});var vht=s(Cce);C4o=r(vht,"deberta"),vht.forEach(t),w4o=r(txe," \u2014 "),hj=n(txe,"A",{href:!0});var Fht=s(hj);A4o=r(Fht,"DebertaModel"),Fht.forEach(t),L4o=r(txe," (DeBERTa model)"),txe.forEach(t),y4o=i(x),cp=n(x,"LI",{});var axe=s(cp);wce=n(axe,"STRONG",{});var Tht=s(wce);x4o=r(Tht,"deberta-v2"),Tht.forEach(t),$4o=r(axe," \u2014 "),uj=n(axe,"A",{href:!0});var Mht=s(uj);k4o=r(Mht,"DebertaV2Model"),Mht.forEach(t),S4o=r(axe," (DeBERTa-v2 model)"),axe.forEach(t),R4o=i(x),mp=n(x,"LI",{});var nxe=s(mp);Ace=n(nxe,"STRONG",{});var Eht=s(Ace);P4o=r(Eht,"decision_transformer"),Eht.forEach(t),B4o=r(nxe," \u2014 "),pj=n(nxe,"A",{href:!0});var Cht=s(pj);I4o=r(Cht,"DecisionTransformerModel"),Cht.forEach(t),N4o=r(nxe," (Decision Transformer model)"),nxe.forEach(t),q4o=i(x),fp=n(x,"LI",{});var sxe=s(fp);Lce=n(sxe,"STRONG",{});var wht=s(Lce);j4o=r(wht,"deit"),wht.forEach(t),D4o=r(sxe," \u2014 "),_j=n(sxe,"A",{href:!0});var Aht=s(_j);G4o=r(Aht,"DeiTModel"),Aht.forEach(t),O4o=r(sxe," (DeiT model)"),sxe.forEach(t),V4o=i(x),gp=n(x,"LI",{});var lxe=s(gp);yce=n(lxe,"STRONG",{});var Lht=s(yce);X4o=r(Lht,"detr"),Lht.forEach(t),z4o=r(lxe," \u2014 "),bj=n(lxe,"A",{href:!0});var yht=s(bj);Q4o=r(yht,"DetrModel"),yht.forEach(t),W4o=r(lxe," (DETR model)"),lxe.forEach(t),H4o=i(x),hp=n(x,"LI",{});var ixe=s(hp);xce=n(ixe,"STRONG",{});var xht=s(xce);U4o=r(xht,"distilbert"),xht.forEach(t),J4o=r(ixe," \u2014 "),vj=n(ixe,"A",{href:!0});var $ht=s(vj);Y4o=r($ht,"DistilBertModel"),$ht.forEach(t),K4o=r(ixe," (DistilBERT model)"),ixe.forEach(t),Z4o=i(x),up=n(x,"LI",{});var dxe=s(up);$ce=n(dxe,"STRONG",{});var kht=s($ce);eEo=r(kht,"dpr"),kht.forEach(t),oEo=r(dxe," \u2014 "),Fj=n(dxe,"A",{href:!0});var Sht=s(Fj);rEo=r(Sht,"DPRQuestionEncoder"),Sht.forEach(t),tEo=r(dxe," (DPR model)"),dxe.forEach(t),aEo=i(x),pp=n(x,"LI",{});var cxe=s(pp);kce=n(cxe,"STRONG",{});var Rht=s(kce);nEo=r(Rht,"dpt"),Rht.forEach(t),sEo=r(cxe," \u2014 "),Tj=n(cxe,"A",{href:!0});var Pht=s(Tj);lEo=r(Pht,"DPTModel"),Pht.forEach(t),iEo=r(cxe," (DPT model)"),cxe.forEach(t),dEo=i(x),_p=n(x,"LI",{});var mxe=s(_p);Sce=n(mxe,"STRONG",{});var Bht=s(Sce);cEo=r(Bht,"electra"),Bht.forEach(t),mEo=r(mxe," \u2014 "),Mj=n(mxe,"A",{href:!0});var Iht=s(Mj);fEo=r(Iht,"ElectraModel"),Iht.forEach(t),gEo=r(mxe," (ELECTRA model)"),mxe.forEach(t),hEo=i(x),bp=n(x,"LI",{});var fxe=s(bp);Rce=n(fxe,"STRONG",{});var Nht=s(Rce);uEo=r(Nht,"flaubert"),Nht.forEach(t),pEo=r(fxe," \u2014 "),Ej=n(fxe,"A",{href:!0});var qht=s(Ej);_Eo=r(qht,"FlaubertModel"),qht.forEach(t),bEo=r(fxe," (FlauBERT model)"),fxe.forEach(t),vEo=i(x),vp=n(x,"LI",{});var gxe=s(vp);Pce=n(gxe,"STRONG",{});var jht=s(Pce);FEo=r(jht,"flava"),jht.forEach(t),TEo=r(gxe," \u2014 "),Cj=n(gxe,"A",{href:!0});var Dht=s(Cj);MEo=r(Dht,"FlavaModel"),Dht.forEach(t),EEo=r(gxe," (FLAVA model)"),gxe.forEach(t),CEo=i(x),Fp=n(x,"LI",{});var hxe=s(Fp);Bce=n(hxe,"STRONG",{});var Ght=s(Bce);wEo=r(Ght,"fnet"),Ght.forEach(t),AEo=r(hxe," \u2014 "),wj=n(hxe,"A",{href:!0});var Oht=s(wj);LEo=r(Oht,"FNetModel"),Oht.forEach(t),yEo=r(hxe," (FNet model)"),hxe.forEach(t),xEo=i(x),Tp=n(x,"LI",{});var uxe=s(Tp);Ice=n(uxe,"STRONG",{});var Vht=s(Ice);$Eo=r(Vht,"fsmt"),Vht.forEach(t),kEo=r(uxe," \u2014 "),Aj=n(uxe,"A",{href:!0});var Xht=s(Aj);SEo=r(Xht,"FSMTModel"),Xht.forEach(t),REo=r(uxe," (FairSeq Machine-Translation model)"),uxe.forEach(t),PEo=i(x),Ws=n(x,"LI",{});var yS=s(Ws);Nce=n(yS,"STRONG",{});var zht=s(Nce);BEo=r(zht,"funnel"),zht.forEach(t),IEo=r(yS," \u2014 "),Lj=n(yS,"A",{href:!0});var Qht=s(Lj);NEo=r(Qht,"FunnelModel"),Qht.forEach(t),qEo=r(yS," or "),yj=n(yS,"A",{href:!0});var Wht=s(yj);jEo=r(Wht,"FunnelBaseModel"),Wht.forEach(t),DEo=r(yS," (Funnel Transformer model)"),yS.forEach(t),GEo=i(x),Mp=n(x,"LI",{});var pxe=s(Mp);qce=n(pxe,"STRONG",{});var Hht=s(qce);OEo=r(Hht,"glpn"),Hht.forEach(t),VEo=r(pxe," \u2014 "),xj=n(pxe,"A",{href:!0});var Uht=s(xj);XEo=r(Uht,"GLPNModel"),Uht.forEach(t),zEo=r(pxe," (GLPN model)"),pxe.forEach(t),QEo=i(x),Ep=n(x,"LI",{});var _xe=s(Ep);jce=n(_xe,"STRONG",{});var Jht=s(jce);WEo=r(Jht,"gpt2"),Jht.forEach(t),HEo=r(_xe," \u2014 "),$j=n(_xe,"A",{href:!0});var Yht=s($j);UEo=r(Yht,"GPT2Model"),Yht.forEach(t),JEo=r(_xe," (OpenAI GPT-2 model)"),_xe.forEach(t),YEo=i(x),Cp=n(x,"LI",{});var bxe=s(Cp);Dce=n(bxe,"STRONG",{});var Kht=s(Dce);KEo=r(Kht,"gpt_neo"),Kht.forEach(t),ZEo=r(bxe," \u2014 "),kj=n(bxe,"A",{href:!0});var Zht=s(kj);eCo=r(Zht,"GPTNeoModel"),Zht.forEach(t),oCo=r(bxe," (GPT Neo model)"),bxe.forEach(t),rCo=i(x),wp=n(x,"LI",{});var vxe=s(wp);Gce=n(vxe,"STRONG",{});var eut=s(Gce);tCo=r(eut,"gpt_neox"),eut.forEach(t),aCo=r(vxe," \u2014 "),Sj=n(vxe,"A",{href:!0});var out=s(Sj);nCo=r(out,"GPTNeoXModel"),out.forEach(t),sCo=r(vxe," (GPT NeoX model)"),vxe.forEach(t),lCo=i(x),Ap=n(x,"LI",{});var Fxe=s(Ap);Oce=n(Fxe,"STRONG",{});var rut=s(Oce);iCo=r(rut,"gptj"),rut.forEach(t),dCo=r(Fxe," \u2014 "),Rj=n(Fxe,"A",{href:!0});var tut=s(Rj);cCo=r(tut,"GPTJModel"),tut.forEach(t),mCo=r(Fxe," (GPT-J model)"),Fxe.forEach(t),fCo=i(x),Lp=n(x,"LI",{});var Txe=s(Lp);Vce=n(Txe,"STRONG",{});var aut=s(Vce);gCo=r(aut,"groupvit"),aut.forEach(t),hCo=r(Txe," \u2014 "),Pj=n(Txe,"A",{href:!0});var nut=s(Pj);uCo=r(nut,"GroupViTModel"),nut.forEach(t),pCo=r(Txe," (GroupViT model)"),Txe.forEach(t),_Co=i(x),yp=n(x,"LI",{});var Mxe=s(yp);Xce=n(Mxe,"STRONG",{});var sut=s(Xce);bCo=r(sut,"hubert"),sut.forEach(t),vCo=r(Mxe," \u2014 "),Bj=n(Mxe,"A",{href:!0});var lut=s(Bj);FCo=r(lut,"HubertModel"),lut.forEach(t),TCo=r(Mxe," (Hubert model)"),Mxe.forEach(t),MCo=i(x),xp=n(x,"LI",{});var Exe=s(xp);zce=n(Exe,"STRONG",{});var iut=s(zce);ECo=r(iut,"ibert"),iut.forEach(t),CCo=r(Exe," \u2014 "),Ij=n(Exe,"A",{href:!0});var dut=s(Ij);wCo=r(dut,"IBertModel"),dut.forEach(t),ACo=r(Exe," (I-BERT model)"),Exe.forEach(t),LCo=i(x),$p=n(x,"LI",{});var Cxe=s($p);Qce=n(Cxe,"STRONG",{});var cut=s(Qce);yCo=r(cut,"imagegpt"),cut.forEach(t),xCo=r(Cxe," \u2014 "),Nj=n(Cxe,"A",{href:!0});var mut=s(Nj);$Co=r(mut,"ImageGPTModel"),mut.forEach(t),kCo=r(Cxe," (ImageGPT model)"),Cxe.forEach(t),SCo=i(x),kp=n(x,"LI",{});var wxe=s(kp);Wce=n(wxe,"STRONG",{});var fut=s(Wce);RCo=r(fut,"layoutlm"),fut.forEach(t),PCo=r(wxe," \u2014 "),qj=n(wxe,"A",{href:!0});var gut=s(qj);BCo=r(gut,"LayoutLMModel"),gut.forEach(t),ICo=r(wxe," (LayoutLM model)"),wxe.forEach(t),NCo=i(x),Sp=n(x,"LI",{});var Axe=s(Sp);Hce=n(Axe,"STRONG",{});var hut=s(Hce);qCo=r(hut,"layoutlmv2"),hut.forEach(t),jCo=r(Axe," \u2014 "),jj=n(Axe,"A",{href:!0});var uut=s(jj);DCo=r(uut,"LayoutLMv2Model"),uut.forEach(t),GCo=r(Axe," (LayoutLMv2 model)"),Axe.forEach(t),OCo=i(x),Rp=n(x,"LI",{});var Lxe=s(Rp);Uce=n(Lxe,"STRONG",{});var put=s(Uce);VCo=r(put,"layoutlmv3"),put.forEach(t),XCo=r(Lxe," \u2014 "),Dj=n(Lxe,"A",{href:!0});var _ut=s(Dj);zCo=r(_ut,"LayoutLMv3Model"),_ut.forEach(t),QCo=r(Lxe," (LayoutLMv3 model)"),Lxe.forEach(t),WCo=i(x),Pp=n(x,"LI",{});var yxe=s(Pp);Jce=n(yxe,"STRONG",{});var but=s(Jce);HCo=r(but,"led"),but.forEach(t),UCo=r(yxe," \u2014 "),Gj=n(yxe,"A",{href:!0});var vut=s(Gj);JCo=r(vut,"LEDModel"),vut.forEach(t),YCo=r(yxe," (LED model)"),yxe.forEach(t),KCo=i(x),Bp=n(x,"LI",{});var xxe=s(Bp);Yce=n(xxe,"STRONG",{});var Fut=s(Yce);ZCo=r(Fut,"levit"),Fut.forEach(t),e3o=r(xxe," \u2014 "),Oj=n(xxe,"A",{href:!0});var Tut=s(Oj);o3o=r(Tut,"LevitModel"),Tut.forEach(t),r3o=r(xxe," (LeViT model)"),xxe.forEach(t),t3o=i(x),Ip=n(x,"LI",{});var $xe=s(Ip);Kce=n($xe,"STRONG",{});var Mut=s(Kce);a3o=r(Mut,"longformer"),Mut.forEach(t),n3o=r($xe," \u2014 "),Vj=n($xe,"A",{href:!0});var Eut=s(Vj);s3o=r(Eut,"LongformerModel"),Eut.forEach(t),l3o=r($xe," (Longformer model)"),$xe.forEach(t),i3o=i(x),Np=n(x,"LI",{});var kxe=s(Np);Zce=n(kxe,"STRONG",{});var Cut=s(Zce);d3o=r(Cut,"longt5"),Cut.forEach(t),c3o=r(kxe," \u2014 "),Xj=n(kxe,"A",{href:!0});var wut=s(Xj);m3o=r(wut,"LongT5Model"),wut.forEach(t),f3o=r(kxe," (LongT5 model)"),kxe.forEach(t),g3o=i(x),qp=n(x,"LI",{});var Sxe=s(qp);eme=n(Sxe,"STRONG",{});var Aut=s(eme);h3o=r(Aut,"luke"),Aut.forEach(t),u3o=r(Sxe," \u2014 "),zj=n(Sxe,"A",{href:!0});var Lut=s(zj);p3o=r(Lut,"LukeModel"),Lut.forEach(t),_3o=r(Sxe," (LUKE model)"),Sxe.forEach(t),b3o=i(x),jp=n(x,"LI",{});var Rxe=s(jp);ome=n(Rxe,"STRONG",{});var yut=s(ome);v3o=r(yut,"lxmert"),yut.forEach(t),F3o=r(Rxe," \u2014 "),Qj=n(Rxe,"A",{href:!0});var xut=s(Qj);T3o=r(xut,"LxmertModel"),xut.forEach(t),M3o=r(Rxe," (LXMERT model)"),Rxe.forEach(t),E3o=i(x),Dp=n(x,"LI",{});var Pxe=s(Dp);rme=n(Pxe,"STRONG",{});var $ut=s(rme);C3o=r($ut,"m2m_100"),$ut.forEach(t),w3o=r(Pxe," \u2014 "),Wj=n(Pxe,"A",{href:!0});var kut=s(Wj);A3o=r(kut,"M2M100Model"),kut.forEach(t),L3o=r(Pxe," (M2M100 model)"),Pxe.forEach(t),y3o=i(x),Gp=n(x,"LI",{});var Bxe=s(Gp);tme=n(Bxe,"STRONG",{});var Sut=s(tme);x3o=r(Sut,"marian"),Sut.forEach(t),$3o=r(Bxe," \u2014 "),Hj=n(Bxe,"A",{href:!0});var Rut=s(Hj);k3o=r(Rut,"MarianModel"),Rut.forEach(t),S3o=r(Bxe," (Marian model)"),Bxe.forEach(t),R3o=i(x),Op=n(x,"LI",{});var Ixe=s(Op);ame=n(Ixe,"STRONG",{});var Put=s(ame);P3o=r(Put,"maskformer"),Put.forEach(t),B3o=r(Ixe," \u2014 "),Uj=n(Ixe,"A",{href:!0});var But=s(Uj);I3o=r(But,"MaskFormerModel"),But.forEach(t),N3o=r(Ixe," (MaskFormer model)"),Ixe.forEach(t),q3o=i(x),Vp=n(x,"LI",{});var Nxe=s(Vp);nme=n(Nxe,"STRONG",{});var Iut=s(nme);j3o=r(Iut,"mbart"),Iut.forEach(t),D3o=r(Nxe," \u2014 "),Jj=n(Nxe,"A",{href:!0});var Nut=s(Jj);G3o=r(Nut,"MBartModel"),Nut.forEach(t),O3o=r(Nxe," (mBART model)"),Nxe.forEach(t),V3o=i(x),Xp=n(x,"LI",{});var qxe=s(Xp);sme=n(qxe,"STRONG",{});var qut=s(sme);X3o=r(qut,"mctct"),qut.forEach(t),z3o=r(qxe," \u2014 "),Yj=n(qxe,"A",{href:!0});var jut=s(Yj);Q3o=r(jut,"MCTCTModel"),jut.forEach(t),W3o=r(qxe," (M-CTC-T model)"),qxe.forEach(t),H3o=i(x),zp=n(x,"LI",{});var jxe=s(zp);lme=n(jxe,"STRONG",{});var Dut=s(lme);U3o=r(Dut,"megatron-bert"),Dut.forEach(t),J3o=r(jxe," \u2014 "),Kj=n(jxe,"A",{href:!0});var Gut=s(Kj);Y3o=r(Gut,"MegatronBertModel"),Gut.forEach(t),K3o=r(jxe," (Megatron-BERT model)"),jxe.forEach(t),Z3o=i(x),Qp=n(x,"LI",{});var Dxe=s(Qp);ime=n(Dxe,"STRONG",{});var Out=s(ime);e5o=r(Out,"mobilebert"),Out.forEach(t),o5o=r(Dxe," \u2014 "),Zj=n(Dxe,"A",{href:!0});var Vut=s(Zj);r5o=r(Vut,"MobileBertModel"),Vut.forEach(t),t5o=r(Dxe," (MobileBERT model)"),Dxe.forEach(t),a5o=i(x),Wp=n(x,"LI",{});var Gxe=s(Wp);dme=n(Gxe,"STRONG",{});var Xut=s(dme);n5o=r(Xut,"mobilevit"),Xut.forEach(t),s5o=r(Gxe," \u2014 "),eD=n(Gxe,"A",{href:!0});var zut=s(eD);l5o=r(zut,"MobileViTModel"),zut.forEach(t),i5o=r(Gxe," (MobileViT model)"),Gxe.forEach(t),d5o=i(x),Hp=n(x,"LI",{});var Oxe=s(Hp);cme=n(Oxe,"STRONG",{});var Qut=s(cme);c5o=r(Qut,"mpnet"),Qut.forEach(t),m5o=r(Oxe," \u2014 "),oD=n(Oxe,"A",{href:!0});var Wut=s(oD);f5o=r(Wut,"MPNetModel"),Wut.forEach(t),g5o=r(Oxe," (MPNet model)"),Oxe.forEach(t),h5o=i(x),Up=n(x,"LI",{});var Vxe=s(Up);mme=n(Vxe,"STRONG",{});var Hut=s(mme);u5o=r(Hut,"mt5"),Hut.forEach(t),p5o=r(Vxe," \u2014 "),rD=n(Vxe,"A",{href:!0});var Uut=s(rD);_5o=r(Uut,"MT5Model"),Uut.forEach(t),b5o=r(Vxe," (MT5 model)"),Vxe.forEach(t),v5o=i(x),Jp=n(x,"LI",{});var Xxe=s(Jp);fme=n(Xxe,"STRONG",{});var Jut=s(fme);F5o=r(Jut,"mvp"),Jut.forEach(t),T5o=r(Xxe," \u2014 "),tD=n(Xxe,"A",{href:!0});var Yut=s(tD);M5o=r(Yut,"MvpModel"),Yut.forEach(t),E5o=r(Xxe," (MVP model)"),Xxe.forEach(t),C5o=i(x),Yp=n(x,"LI",{});var zxe=s(Yp);gme=n(zxe,"STRONG",{});var Kut=s(gme);w5o=r(Kut,"nezha"),Kut.forEach(t),A5o=r(zxe," \u2014 "),aD=n(zxe,"A",{href:!0});var Zut=s(aD);L5o=r(Zut,"NezhaModel"),Zut.forEach(t),y5o=r(zxe," (Nezha model)"),zxe.forEach(t),x5o=i(x),Kp=n(x,"LI",{});var Qxe=s(Kp);hme=n(Qxe,"STRONG",{});var ept=s(hme);$5o=r(ept,"nystromformer"),ept.forEach(t),k5o=r(Qxe," \u2014 "),nD=n(Qxe,"A",{href:!0});var opt=s(nD);S5o=r(opt,"NystromformerModel"),opt.forEach(t),R5o=r(Qxe," (Nystr\xF6mformer model)"),Qxe.forEach(t),P5o=i(x),Zp=n(x,"LI",{});var Wxe=s(Zp);ume=n(Wxe,"STRONG",{});var rpt=s(ume);B5o=r(rpt,"openai-gpt"),rpt.forEach(t),I5o=r(Wxe," \u2014 "),sD=n(Wxe,"A",{href:!0});var tpt=s(sD);N5o=r(tpt,"OpenAIGPTModel"),tpt.forEach(t),q5o=r(Wxe," (OpenAI GPT model)"),Wxe.forEach(t),j5o=i(x),e_=n(x,"LI",{});var Hxe=s(e_);pme=n(Hxe,"STRONG",{});var apt=s(pme);D5o=r(apt,"opt"),apt.forEach(t),G5o=r(Hxe," \u2014 "),lD=n(Hxe,"A",{href:!0});var npt=s(lD);O5o=r(npt,"OPTModel"),npt.forEach(t),V5o=r(Hxe," (OPT model)"),Hxe.forEach(t),X5o=i(x),o_=n(x,"LI",{});var Uxe=s(o_);_me=n(Uxe,"STRONG",{});var spt=s(_me);z5o=r(spt,"pegasus"),spt.forEach(t),Q5o=r(Uxe," \u2014 "),iD=n(Uxe,"A",{href:!0});var lpt=s(iD);W5o=r(lpt,"PegasusModel"),lpt.forEach(t),H5o=r(Uxe," (Pegasus model)"),Uxe.forEach(t),U5o=i(x),r_=n(x,"LI",{});var Jxe=s(r_);bme=n(Jxe,"STRONG",{});var ipt=s(bme);J5o=r(ipt,"perceiver"),ipt.forEach(t),Y5o=r(Jxe," \u2014 "),dD=n(Jxe,"A",{href:!0});var dpt=s(dD);K5o=r(dpt,"PerceiverModel"),dpt.forEach(t),Z5o=r(Jxe," (Perceiver model)"),Jxe.forEach(t),e0o=i(x),t_=n(x,"LI",{});var Yxe=s(t_);vme=n(Yxe,"STRONG",{});var cpt=s(vme);o0o=r(cpt,"plbart"),cpt.forEach(t),r0o=r(Yxe," \u2014 "),cD=n(Yxe,"A",{href:!0});var mpt=s(cD);t0o=r(mpt,"PLBartModel"),mpt.forEach(t),a0o=r(Yxe," (PLBart model)"),Yxe.forEach(t),n0o=i(x),a_=n(x,"LI",{});var Kxe=s(a_);Fme=n(Kxe,"STRONG",{});var fpt=s(Fme);s0o=r(fpt,"poolformer"),fpt.forEach(t),l0o=r(Kxe," \u2014 "),mD=n(Kxe,"A",{href:!0});var gpt=s(mD);i0o=r(gpt,"PoolFormerModel"),gpt.forEach(t),d0o=r(Kxe," (PoolFormer model)"),Kxe.forEach(t),c0o=i(x),n_=n(x,"LI",{});var Zxe=s(n_);Tme=n(Zxe,"STRONG",{});var hpt=s(Tme);m0o=r(hpt,"prophetnet"),hpt.forEach(t),f0o=r(Zxe," \u2014 "),fD=n(Zxe,"A",{href:!0});var upt=s(fD);g0o=r(upt,"ProphetNetModel"),upt.forEach(t),h0o=r(Zxe," (ProphetNet model)"),Zxe.forEach(t),u0o=i(x),s_=n(x,"LI",{});var e$e=s(s_);Mme=n(e$e,"STRONG",{});var ppt=s(Mme);p0o=r(ppt,"qdqbert"),ppt.forEach(t),_0o=r(e$e," \u2014 "),gD=n(e$e,"A",{href:!0});var _pt=s(gD);b0o=r(_pt,"QDQBertModel"),_pt.forEach(t),v0o=r(e$e," (QDQBert model)"),e$e.forEach(t),F0o=i(x),l_=n(x,"LI",{});var o$e=s(l_);Eme=n(o$e,"STRONG",{});var bpt=s(Eme);T0o=r(bpt,"reformer"),bpt.forEach(t),M0o=r(o$e," \u2014 "),hD=n(o$e,"A",{href:!0});var vpt=s(hD);E0o=r(vpt,"ReformerModel"),vpt.forEach(t),C0o=r(o$e," (Reformer model)"),o$e.forEach(t),w0o=i(x),i_=n(x,"LI",{});var r$e=s(i_);Cme=n(r$e,"STRONG",{});var Fpt=s(Cme);A0o=r(Fpt,"regnet"),Fpt.forEach(t),L0o=r(r$e," \u2014 "),uD=n(r$e,"A",{href:!0});var Tpt=s(uD);y0o=r(Tpt,"RegNetModel"),Tpt.forEach(t),x0o=r(r$e," (RegNet model)"),r$e.forEach(t),$0o=i(x),d_=n(x,"LI",{});var t$e=s(d_);wme=n(t$e,"STRONG",{});var Mpt=s(wme);k0o=r(Mpt,"rembert"),Mpt.forEach(t),S0o=r(t$e," \u2014 "),pD=n(t$e,"A",{href:!0});var Ept=s(pD);R0o=r(Ept,"RemBertModel"),Ept.forEach(t),P0o=r(t$e," (RemBERT model)"),t$e.forEach(t),B0o=i(x),c_=n(x,"LI",{});var a$e=s(c_);Ame=n(a$e,"STRONG",{});var Cpt=s(Ame);I0o=r(Cpt,"resnet"),Cpt.forEach(t),N0o=r(a$e," \u2014 "),_D=n(a$e,"A",{href:!0});var wpt=s(_D);q0o=r(wpt,"ResNetModel"),wpt.forEach(t),j0o=r(a$e," (ResNet model)"),a$e.forEach(t),D0o=i(x),m_=n(x,"LI",{});var n$e=s(m_);Lme=n(n$e,"STRONG",{});var Apt=s(Lme);G0o=r(Apt,"retribert"),Apt.forEach(t),O0o=r(n$e," \u2014 "),bD=n(n$e,"A",{href:!0});var Lpt=s(bD);V0o=r(Lpt,"RetriBertModel"),Lpt.forEach(t),X0o=r(n$e," (RetriBERT model)"),n$e.forEach(t),z0o=i(x),f_=n(x,"LI",{});var s$e=s(f_);yme=n(s$e,"STRONG",{});var ypt=s(yme);Q0o=r(ypt,"roberta"),ypt.forEach(t),W0o=r(s$e," \u2014 "),vD=n(s$e,"A",{href:!0});var xpt=s(vD);H0o=r(xpt,"RobertaModel"),xpt.forEach(t),U0o=r(s$e," (RoBERTa model)"),s$e.forEach(t),J0o=i(x),g_=n(x,"LI",{});var l$e=s(g_);xme=n(l$e,"STRONG",{});var $pt=s(xme);Y0o=r($pt,"roformer"),$pt.forEach(t),K0o=r(l$e," \u2014 "),FD=n(l$e,"A",{href:!0});var kpt=s(FD);Z0o=r(kpt,"RoFormerModel"),kpt.forEach(t),ewo=r(l$e," (RoFormer model)"),l$e.forEach(t),owo=i(x),h_=n(x,"LI",{});var i$e=s(h_);$me=n(i$e,"STRONG",{});var Spt=s($me);rwo=r(Spt,"segformer"),Spt.forEach(t),two=r(i$e," \u2014 "),TD=n(i$e,"A",{href:!0});var Rpt=s(TD);awo=r(Rpt,"SegformerModel"),Rpt.forEach(t),nwo=r(i$e," (SegFormer model)"),i$e.forEach(t),swo=i(x),u_=n(x,"LI",{});var d$e=s(u_);kme=n(d$e,"STRONG",{});var Ppt=s(kme);lwo=r(Ppt,"sew"),Ppt.forEach(t),iwo=r(d$e," \u2014 "),MD=n(d$e,"A",{href:!0});var Bpt=s(MD);dwo=r(Bpt,"SEWModel"),Bpt.forEach(t),cwo=r(d$e," (SEW model)"),d$e.forEach(t),mwo=i(x),p_=n(x,"LI",{});var c$e=s(p_);Sme=n(c$e,"STRONG",{});var Ipt=s(Sme);fwo=r(Ipt,"sew-d"),Ipt.forEach(t),gwo=r(c$e," \u2014 "),ED=n(c$e,"A",{href:!0});var Npt=s(ED);hwo=r(Npt,"SEWDModel"),Npt.forEach(t),uwo=r(c$e," (SEW-D model)"),c$e.forEach(t),pwo=i(x),__=n(x,"LI",{});var m$e=s(__);Rme=n(m$e,"STRONG",{});var qpt=s(Rme);_wo=r(qpt,"speech_to_text"),qpt.forEach(t),bwo=r(m$e," \u2014 "),CD=n(m$e,"A",{href:!0});var jpt=s(CD);vwo=r(jpt,"Speech2TextModel"),jpt.forEach(t),Fwo=r(m$e," (Speech2Text model)"),m$e.forEach(t),Two=i(x),b_=n(x,"LI",{});var f$e=s(b_);Pme=n(f$e,"STRONG",{});var Dpt=s(Pme);Mwo=r(Dpt,"splinter"),Dpt.forEach(t),Ewo=r(f$e," \u2014 "),wD=n(f$e,"A",{href:!0});var Gpt=s(wD);Cwo=r(Gpt,"SplinterModel"),Gpt.forEach(t),wwo=r(f$e," (Splinter model)"),f$e.forEach(t),Awo=i(x),v_=n(x,"LI",{});var g$e=s(v_);Bme=n(g$e,"STRONG",{});var Opt=s(Bme);Lwo=r(Opt,"squeezebert"),Opt.forEach(t),ywo=r(g$e," \u2014 "),AD=n(g$e,"A",{href:!0});var Vpt=s(AD);xwo=r(Vpt,"SqueezeBertModel"),Vpt.forEach(t),$wo=r(g$e," (SqueezeBERT model)"),g$e.forEach(t),kwo=i(x),F_=n(x,"LI",{});var h$e=s(F_);Ime=n(h$e,"STRONG",{});var Xpt=s(Ime);Swo=r(Xpt,"swin"),Xpt.forEach(t),Rwo=r(h$e," \u2014 "),LD=n(h$e,"A",{href:!0});var zpt=s(LD);Pwo=r(zpt,"SwinModel"),zpt.forEach(t),Bwo=r(h$e," (Swin Transformer model)"),h$e.forEach(t),Iwo=i(x),T_=n(x,"LI",{});var u$e=s(T_);Nme=n(u$e,"STRONG",{});var Qpt=s(Nme);Nwo=r(Qpt,"t5"),Qpt.forEach(t),qwo=r(u$e," \u2014 "),yD=n(u$e,"A",{href:!0});var Wpt=s(yD);jwo=r(Wpt,"T5Model"),Wpt.forEach(t),Dwo=r(u$e," (T5 model)"),u$e.forEach(t),Gwo=i(x),M_=n(x,"LI",{});var p$e=s(M_);qme=n(p$e,"STRONG",{});var Hpt=s(qme);Owo=r(Hpt,"tapas"),Hpt.forEach(t),Vwo=r(p$e," \u2014 "),xD=n(p$e,"A",{href:!0});var Upt=s(xD);Xwo=r(Upt,"TapasModel"),Upt.forEach(t),zwo=r(p$e," (TAPAS model)"),p$e.forEach(t),Qwo=i(x),E_=n(x,"LI",{});var _$e=s(E_);jme=n(_$e,"STRONG",{});var Jpt=s(jme);Wwo=r(Jpt,"trajectory_transformer"),Jpt.forEach(t),Hwo=r(_$e," \u2014 "),$D=n(_$e,"A",{href:!0});var Ypt=s($D);Uwo=r(Ypt,"TrajectoryTransformerModel"),Ypt.forEach(t),Jwo=r(_$e," (Trajectory Transformer model)"),_$e.forEach(t),Ywo=i(x),C_=n(x,"LI",{});var b$e=s(C_);Dme=n(b$e,"STRONG",{});var Kpt=s(Dme);Kwo=r(Kpt,"transfo-xl"),Kpt.forEach(t),Zwo=r(b$e," \u2014 "),kD=n(b$e,"A",{href:!0});var Zpt=s(kD);eAo=r(Zpt,"TransfoXLModel"),Zpt.forEach(t),oAo=r(b$e," (Transformer-XL model)"),b$e.forEach(t),rAo=i(x),w_=n(x,"LI",{});var v$e=s(w_);Gme=n(v$e,"STRONG",{});var e_t=s(Gme);tAo=r(e_t,"unispeech"),e_t.forEach(t),aAo=r(v$e," \u2014 "),SD=n(v$e,"A",{href:!0});var o_t=s(SD);nAo=r(o_t,"UniSpeechModel"),o_t.forEach(t),sAo=r(v$e," (UniSpeech model)"),v$e.forEach(t),lAo=i(x),A_=n(x,"LI",{});var F$e=s(A_);Ome=n(F$e,"STRONG",{});var r_t=s(Ome);iAo=r(r_t,"unispeech-sat"),r_t.forEach(t),dAo=r(F$e," \u2014 "),RD=n(F$e,"A",{href:!0});var t_t=s(RD);cAo=r(t_t,"UniSpeechSatModel"),t_t.forEach(t),mAo=r(F$e," (UniSpeechSat model)"),F$e.forEach(t),fAo=i(x),L_=n(x,"LI",{});var T$e=s(L_);Vme=n(T$e,"STRONG",{});var a_t=s(Vme);gAo=r(a_t,"van"),a_t.forEach(t),hAo=r(T$e," \u2014 "),PD=n(T$e,"A",{href:!0});var n_t=s(PD);uAo=r(n_t,"VanModel"),n_t.forEach(t),pAo=r(T$e," (VAN model)"),T$e.forEach(t),_Ao=i(x),y_=n(x,"LI",{});var M$e=s(y_);Xme=n(M$e,"STRONG",{});var s_t=s(Xme);bAo=r(s_t,"vilt"),s_t.forEach(t),vAo=r(M$e," \u2014 "),BD=n(M$e,"A",{href:!0});var l_t=s(BD);FAo=r(l_t,"ViltModel"),l_t.forEach(t),TAo=r(M$e," (ViLT model)"),M$e.forEach(t),MAo=i(x),x_=n(x,"LI",{});var E$e=s(x_);zme=n(E$e,"STRONG",{});var i_t=s(zme);EAo=r(i_t,"vision-text-dual-encoder"),i_t.forEach(t),CAo=r(E$e," \u2014 "),ID=n(E$e,"A",{href:!0});var d_t=s(ID);wAo=r(d_t,"VisionTextDualEncoderModel"),d_t.forEach(t),AAo=r(E$e," (VisionTextDualEncoder model)"),E$e.forEach(t),LAo=i(x),$_=n(x,"LI",{});var C$e=s($_);Qme=n(C$e,"STRONG",{});var c_t=s(Qme);yAo=r(c_t,"visual_bert"),c_t.forEach(t),xAo=r(C$e," \u2014 "),ND=n(C$e,"A",{href:!0});var m_t=s(ND);$Ao=r(m_t,"VisualBertModel"),m_t.forEach(t),kAo=r(C$e," (VisualBERT model)"),C$e.forEach(t),SAo=i(x),k_=n(x,"LI",{});var w$e=s(k_);Wme=n(w$e,"STRONG",{});var f_t=s(Wme);RAo=r(f_t,"vit"),f_t.forEach(t),PAo=r(w$e," \u2014 "),qD=n(w$e,"A",{href:!0});var g_t=s(qD);BAo=r(g_t,"ViTModel"),g_t.forEach(t),IAo=r(w$e," (ViT model)"),w$e.forEach(t),NAo=i(x),S_=n(x,"LI",{});var A$e=s(S_);Hme=n(A$e,"STRONG",{});var h_t=s(Hme);qAo=r(h_t,"vit_mae"),h_t.forEach(t),jAo=r(A$e," \u2014 "),jD=n(A$e,"A",{href:!0});var u_t=s(jD);DAo=r(u_t,"ViTMAEModel"),u_t.forEach(t),GAo=r(A$e," (ViTMAE model)"),A$e.forEach(t),OAo=i(x),R_=n(x,"LI",{});var L$e=s(R_);Ume=n(L$e,"STRONG",{});var p_t=s(Ume);VAo=r(p_t,"wav2vec2"),p_t.forEach(t),XAo=r(L$e," \u2014 "),DD=n(L$e,"A",{href:!0});var __t=s(DD);zAo=r(__t,"Wav2Vec2Model"),__t.forEach(t),QAo=r(L$e," (Wav2Vec2 model)"),L$e.forEach(t),WAo=i(x),P_=n(x,"LI",{});var y$e=s(P_);Jme=n(y$e,"STRONG",{});var b_t=s(Jme);HAo=r(b_t,"wav2vec2-conformer"),b_t.forEach(t),UAo=r(y$e," \u2014 "),GD=n(y$e,"A",{href:!0});var v_t=s(GD);JAo=r(v_t,"Wav2Vec2ConformerModel"),v_t.forEach(t),YAo=r(y$e," (Wav2Vec2-Conformer model)"),y$e.forEach(t),KAo=i(x),B_=n(x,"LI",{});var x$e=s(B_);Yme=n(x$e,"STRONG",{});var F_t=s(Yme);ZAo=r(F_t,"wavlm"),F_t.forEach(t),e6o=r(x$e," \u2014 "),OD=n(x$e,"A",{href:!0});var T_t=s(OD);o6o=r(T_t,"WavLMModel"),T_t.forEach(t),r6o=r(x$e," (WavLM model)"),x$e.forEach(t),t6o=i(x),I_=n(x,"LI",{});var $$e=s(I_);Kme=n($$e,"STRONG",{});var M_t=s(Kme);a6o=r(M_t,"xglm"),M_t.forEach(t),n6o=r($$e," \u2014 "),VD=n($$e,"A",{href:!0});var E_t=s(VD);s6o=r(E_t,"XGLMModel"),E_t.forEach(t),l6o=r($$e," (XGLM model)"),$$e.forEach(t),i6o=i(x),N_=n(x,"LI",{});var k$e=s(N_);Zme=n(k$e,"STRONG",{});var C_t=s(Zme);d6o=r(C_t,"xlm"),C_t.forEach(t),c6o=r(k$e," \u2014 "),XD=n(k$e,"A",{href:!0});var w_t=s(XD);m6o=r(w_t,"XLMModel"),w_t.forEach(t),f6o=r(k$e," (XLM model)"),k$e.forEach(t),g6o=i(x),q_=n(x,"LI",{});var S$e=s(q_);efe=n(S$e,"STRONG",{});var A_t=s(efe);h6o=r(A_t,"xlm-prophetnet"),A_t.forEach(t),u6o=r(S$e," \u2014 "),zD=n(S$e,"A",{href:!0});var L_t=s(zD);p6o=r(L_t,"XLMProphetNetModel"),L_t.forEach(t),_6o=r(S$e," (XLM-ProphetNet model)"),S$e.forEach(t),b6o=i(x),j_=n(x,"LI",{});var R$e=s(j_);ofe=n(R$e,"STRONG",{});var y_t=s(ofe);v6o=r(y_t,"xlm-roberta"),y_t.forEach(t),F6o=r(R$e," \u2014 "),QD=n(R$e,"A",{href:!0});var x_t=s(QD);T6o=r(x_t,"XLMRobertaModel"),x_t.forEach(t),M6o=r(R$e," (XLM-RoBERTa model)"),R$e.forEach(t),E6o=i(x),D_=n(x,"LI",{});var P$e=s(D_);rfe=n(P$e,"STRONG",{});var $_t=s(rfe);C6o=r($_t,"xlm-roberta-xl"),$_t.forEach(t),w6o=r(P$e," \u2014 "),WD=n(P$e,"A",{href:!0});var k_t=s(WD);A6o=r(k_t,"XLMRobertaXLModel"),k_t.forEach(t),L6o=r(P$e," (XLM-RoBERTa-XL model)"),P$e.forEach(t),y6o=i(x),G_=n(x,"LI",{});var B$e=s(G_);tfe=n(B$e,"STRONG",{});var S_t=s(tfe);x6o=r(S_t,"xlnet"),S_t.forEach(t),$6o=r(B$e," \u2014 "),HD=n(B$e,"A",{href:!0});var R_t=s(HD);k6o=r(R_t,"XLNetModel"),R_t.forEach(t),S6o=r(B$e," (XLNet model)"),B$e.forEach(t),R6o=i(x),O_=n(x,"LI",{});var I$e=s(O_);afe=n(I$e,"STRONG",{});var P_t=s(afe);P6o=r(P_t,"yolos"),P_t.forEach(t),B6o=r(I$e," \u2014 "),UD=n(I$e,"A",{href:!0});var B_t=s(UD);I6o=r(B_t,"YolosModel"),B_t.forEach(t),N6o=r(I$e," (YOLOS model)"),I$e.forEach(t),q6o=i(x),V_=n(x,"LI",{});var N$e=s(V_);nfe=n(N$e,"STRONG",{});var I_t=s(nfe);j6o=r(I_t,"yoso"),I_t.forEach(t),D6o=r(N$e," \u2014 "),JD=n(N$e,"A",{href:!0});var N_t=s(JD);G6o=r(N_t,"YosoModel"),N_t.forEach(t),O6o=r(N$e," (YOSO model)"),N$e.forEach(t),x.forEach(t),V6o=i(sa),X_=n(sa,"P",{});var q$e=s(X_);X6o=r(q$e,"The model is set in evaluation mode by default using "),sfe=n(q$e,"CODE",{});var q_t=s(sfe);z6o=r(q_t,"model.eval()"),q_t.forEach(t),Q6o=r(q$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lfe=n(q$e,"CODE",{});var j_t=s(lfe);W6o=r(j_t,"model.train()"),j_t.forEach(t),q$e.forEach(t),H6o=i(sa),T(z_.$$.fragment,sa),sa.forEach(t),ol.forEach(t),tXe=i(m),Vi=n(m,"H2",{class:!0});var dQe=s(Vi);Q_=n(dQe,"A",{id:!0,class:!0,href:!0});var D_t=s(Q_);ife=n(D_t,"SPAN",{});var G_t=s(ife);T(Ry.$$.fragment,G_t),G_t.forEach(t),D_t.forEach(t),U6o=i(dQe),dfe=n(dQe,"SPAN",{});var O_t=s(dfe);J6o=r(O_t,"AutoModelForPreTraining"),O_t.forEach(t),dQe.forEach(t),aXe=i(m),$o=n(m,"DIV",{class:!0});var rl=s($o);T(Py.$$.fragment,rl),Y6o=i(rl),Xi=n(rl,"P",{});var Lre=s(Xi);K6o=r(Lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YD=n(Lre,"A",{href:!0});var V_t=s(YD);Z6o=r(V_t,"from_pretrained()"),V_t.forEach(t),e7o=r(Lre," class method or the "),KD=n(Lre,"A",{href:!0});var X_t=s(KD);o7o=r(X_t,"from_config()"),X_t.forEach(t),r7o=r(Lre,` class
method.`),Lre.forEach(t),t7o=i(rl),By=n(rl,"P",{});var cQe=s(By);a7o=r(cQe,"This class cannot be instantiated directly using "),cfe=n(cQe,"CODE",{});var z_t=s(cfe);n7o=r(z_t,"__init__()"),z_t.forEach(t),s7o=r(cQe," (throws an error)."),cQe.forEach(t),l7o=i(rl),it=n(rl,"DIV",{class:!0});var i7=s(it);T(Iy.$$.fragment,i7),i7o=i(i7),mfe=n(i7,"P",{});var Q_t=s(mfe);d7o=r(Q_t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Q_t.forEach(t),c7o=i(i7),zi=n(i7,"P",{});var yre=s(zi);m7o=r(yre,`Note:
Loading a model from its configuration file does `),ffe=n(yre,"STRONG",{});var W_t=s(ffe);f7o=r(W_t,"not"),W_t.forEach(t),g7o=r(yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZD=n(yre,"A",{href:!0});var H_t=s(ZD);h7o=r(H_t,"from_pretrained()"),H_t.forEach(t),u7o=r(yre," to load the model weights."),yre.forEach(t),p7o=i(i7),T(W_.$$.fragment,i7),i7.forEach(t),_7o=i(rl),Ye=n(rl,"DIV",{class:!0});var la=s(Ye);T(Ny.$$.fragment,la),b7o=i(la),gfe=n(la,"P",{});var U_t=s(gfe);v7o=r(U_t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),U_t.forEach(t),F7o=i(la),Na=n(la,"P",{});var d7=s(Na);T7o=r(d7,"The model class to instantiate is selected based on the "),hfe=n(d7,"CODE",{});var J_t=s(hfe);M7o=r(J_t,"model_type"),J_t.forEach(t),E7o=r(d7,` property of the config object (either
passed as an argument or loaded from `),ufe=n(d7,"CODE",{});var Y_t=s(ufe);C7o=r(Y_t,"pretrained_model_name_or_path"),Y_t.forEach(t),w7o=r(d7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=n(d7,"CODE",{});var K_t=s(pfe);A7o=r(K_t,"pretrained_model_name_or_path"),K_t.forEach(t),L7o=r(d7,":"),d7.forEach(t),y7o=i(la),G=n(la,"UL",{});var O=s(G);H_=n(O,"LI",{});var j$e=s(H_);_fe=n(j$e,"STRONG",{});var Z_t=s(_fe);x7o=r(Z_t,"albert"),Z_t.forEach(t),$7o=r(j$e," \u2014 "),eG=n(j$e,"A",{href:!0});var e2t=s(eG);k7o=r(e2t,"AlbertForPreTraining"),e2t.forEach(t),S7o=r(j$e," (ALBERT model)"),j$e.forEach(t),R7o=i(O),U_=n(O,"LI",{});var D$e=s(U_);bfe=n(D$e,"STRONG",{});var o2t=s(bfe);P7o=r(o2t,"bart"),o2t.forEach(t),B7o=r(D$e," \u2014 "),oG=n(D$e,"A",{href:!0});var r2t=s(oG);I7o=r(r2t,"BartForConditionalGeneration"),r2t.forEach(t),N7o=r(D$e," (BART model)"),D$e.forEach(t),q7o=i(O),J_=n(O,"LI",{});var G$e=s(J_);vfe=n(G$e,"STRONG",{});var t2t=s(vfe);j7o=r(t2t,"bert"),t2t.forEach(t),D7o=r(G$e," \u2014 "),rG=n(G$e,"A",{href:!0});var a2t=s(rG);G7o=r(a2t,"BertForPreTraining"),a2t.forEach(t),O7o=r(G$e," (BERT model)"),G$e.forEach(t),V7o=i(O),Y_=n(O,"LI",{});var O$e=s(Y_);Ffe=n(O$e,"STRONG",{});var n2t=s(Ffe);X7o=r(n2t,"big_bird"),n2t.forEach(t),z7o=r(O$e," \u2014 "),tG=n(O$e,"A",{href:!0});var s2t=s(tG);Q7o=r(s2t,"BigBirdForPreTraining"),s2t.forEach(t),W7o=r(O$e," (BigBird model)"),O$e.forEach(t),H7o=i(O),K_=n(O,"LI",{});var V$e=s(K_);Tfe=n(V$e,"STRONG",{});var l2t=s(Tfe);U7o=r(l2t,"bloom"),l2t.forEach(t),J7o=r(V$e," \u2014 "),aG=n(V$e,"A",{href:!0});var i2t=s(aG);Y7o=r(i2t,"BloomForCausalLM"),i2t.forEach(t),K7o=r(V$e," (BLOOM model)"),V$e.forEach(t),Z7o=i(O),Z_=n(O,"LI",{});var X$e=s(Z_);Mfe=n(X$e,"STRONG",{});var d2t=s(Mfe);eLo=r(d2t,"camembert"),d2t.forEach(t),oLo=r(X$e," \u2014 "),nG=n(X$e,"A",{href:!0});var c2t=s(nG);rLo=r(c2t,"CamembertForMaskedLM"),c2t.forEach(t),tLo=r(X$e," (CamemBERT model)"),X$e.forEach(t),aLo=i(O),e2=n(O,"LI",{});var z$e=s(e2);Efe=n(z$e,"STRONG",{});var m2t=s(Efe);nLo=r(m2t,"ctrl"),m2t.forEach(t),sLo=r(z$e," \u2014 "),sG=n(z$e,"A",{href:!0});var f2t=s(sG);lLo=r(f2t,"CTRLLMHeadModel"),f2t.forEach(t),iLo=r(z$e," (CTRL model)"),z$e.forEach(t),dLo=i(O),o2=n(O,"LI",{});var Q$e=s(o2);Cfe=n(Q$e,"STRONG",{});var g2t=s(Cfe);cLo=r(g2t,"data2vec-text"),g2t.forEach(t),mLo=r(Q$e," \u2014 "),lG=n(Q$e,"A",{href:!0});var h2t=s(lG);fLo=r(h2t,"Data2VecTextForMaskedLM"),h2t.forEach(t),gLo=r(Q$e," (Data2VecText model)"),Q$e.forEach(t),hLo=i(O),r2=n(O,"LI",{});var W$e=s(r2);wfe=n(W$e,"STRONG",{});var u2t=s(wfe);uLo=r(u2t,"deberta"),u2t.forEach(t),pLo=r(W$e," \u2014 "),iG=n(W$e,"A",{href:!0});var p2t=s(iG);_Lo=r(p2t,"DebertaForMaskedLM"),p2t.forEach(t),bLo=r(W$e," (DeBERTa model)"),W$e.forEach(t),vLo=i(O),t2=n(O,"LI",{});var H$e=s(t2);Afe=n(H$e,"STRONG",{});var _2t=s(Afe);FLo=r(_2t,"deberta-v2"),_2t.forEach(t),TLo=r(H$e," \u2014 "),dG=n(H$e,"A",{href:!0});var b2t=s(dG);MLo=r(b2t,"DebertaV2ForMaskedLM"),b2t.forEach(t),ELo=r(H$e," (DeBERTa-v2 model)"),H$e.forEach(t),CLo=i(O),a2=n(O,"LI",{});var U$e=s(a2);Lfe=n(U$e,"STRONG",{});var v2t=s(Lfe);wLo=r(v2t,"distilbert"),v2t.forEach(t),ALo=r(U$e," \u2014 "),cG=n(U$e,"A",{href:!0});var F2t=s(cG);LLo=r(F2t,"DistilBertForMaskedLM"),F2t.forEach(t),yLo=r(U$e," (DistilBERT model)"),U$e.forEach(t),xLo=i(O),n2=n(O,"LI",{});var J$e=s(n2);yfe=n(J$e,"STRONG",{});var T2t=s(yfe);$Lo=r(T2t,"electra"),T2t.forEach(t),kLo=r(J$e," \u2014 "),mG=n(J$e,"A",{href:!0});var M2t=s(mG);SLo=r(M2t,"ElectraForPreTraining"),M2t.forEach(t),RLo=r(J$e," (ELECTRA model)"),J$e.forEach(t),PLo=i(O),s2=n(O,"LI",{});var Y$e=s(s2);xfe=n(Y$e,"STRONG",{});var E2t=s(xfe);BLo=r(E2t,"flaubert"),E2t.forEach(t),ILo=r(Y$e," \u2014 "),fG=n(Y$e,"A",{href:!0});var C2t=s(fG);NLo=r(C2t,"FlaubertWithLMHeadModel"),C2t.forEach(t),qLo=r(Y$e," (FlauBERT model)"),Y$e.forEach(t),jLo=i(O),l2=n(O,"LI",{});var K$e=s(l2);$fe=n(K$e,"STRONG",{});var w2t=s($fe);DLo=r(w2t,"flava"),w2t.forEach(t),GLo=r(K$e," \u2014 "),gG=n(K$e,"A",{href:!0});var A2t=s(gG);OLo=r(A2t,"FlavaForPreTraining"),A2t.forEach(t),VLo=r(K$e," (FLAVA model)"),K$e.forEach(t),XLo=i(O),i2=n(O,"LI",{});var Z$e=s(i2);kfe=n(Z$e,"STRONG",{});var L2t=s(kfe);zLo=r(L2t,"fnet"),L2t.forEach(t),QLo=r(Z$e," \u2014 "),hG=n(Z$e,"A",{href:!0});var y2t=s(hG);WLo=r(y2t,"FNetForPreTraining"),y2t.forEach(t),HLo=r(Z$e," (FNet model)"),Z$e.forEach(t),ULo=i(O),d2=n(O,"LI",{});var eke=s(d2);Sfe=n(eke,"STRONG",{});var x2t=s(Sfe);JLo=r(x2t,"fsmt"),x2t.forEach(t),YLo=r(eke," \u2014 "),uG=n(eke,"A",{href:!0});var $2t=s(uG);KLo=r($2t,"FSMTForConditionalGeneration"),$2t.forEach(t),ZLo=r(eke," (FairSeq Machine-Translation model)"),eke.forEach(t),eyo=i(O),c2=n(O,"LI",{});var oke=s(c2);Rfe=n(oke,"STRONG",{});var k2t=s(Rfe);oyo=r(k2t,"funnel"),k2t.forEach(t),ryo=r(oke," \u2014 "),pG=n(oke,"A",{href:!0});var S2t=s(pG);tyo=r(S2t,"FunnelForPreTraining"),S2t.forEach(t),ayo=r(oke," (Funnel Transformer model)"),oke.forEach(t),nyo=i(O),m2=n(O,"LI",{});var rke=s(m2);Pfe=n(rke,"STRONG",{});var R2t=s(Pfe);syo=r(R2t,"gpt2"),R2t.forEach(t),lyo=r(rke," \u2014 "),_G=n(rke,"A",{href:!0});var P2t=s(_G);iyo=r(P2t,"GPT2LMHeadModel"),P2t.forEach(t),dyo=r(rke," (OpenAI GPT-2 model)"),rke.forEach(t),cyo=i(O),f2=n(O,"LI",{});var tke=s(f2);Bfe=n(tke,"STRONG",{});var B2t=s(Bfe);myo=r(B2t,"ibert"),B2t.forEach(t),fyo=r(tke," \u2014 "),bG=n(tke,"A",{href:!0});var I2t=s(bG);gyo=r(I2t,"IBertForMaskedLM"),I2t.forEach(t),hyo=r(tke," (I-BERT model)"),tke.forEach(t),uyo=i(O),g2=n(O,"LI",{});var ake=s(g2);Ife=n(ake,"STRONG",{});var N2t=s(Ife);pyo=r(N2t,"layoutlm"),N2t.forEach(t),_yo=r(ake," \u2014 "),vG=n(ake,"A",{href:!0});var q2t=s(vG);byo=r(q2t,"LayoutLMForMaskedLM"),q2t.forEach(t),vyo=r(ake," (LayoutLM model)"),ake.forEach(t),Fyo=i(O),h2=n(O,"LI",{});var nke=s(h2);Nfe=n(nke,"STRONG",{});var j2t=s(Nfe);Tyo=r(j2t,"longformer"),j2t.forEach(t),Myo=r(nke," \u2014 "),FG=n(nke,"A",{href:!0});var D2t=s(FG);Eyo=r(D2t,"LongformerForMaskedLM"),D2t.forEach(t),Cyo=r(nke," (Longformer model)"),nke.forEach(t),wyo=i(O),u2=n(O,"LI",{});var ske=s(u2);qfe=n(ske,"STRONG",{});var G2t=s(qfe);Ayo=r(G2t,"lxmert"),G2t.forEach(t),Lyo=r(ske," \u2014 "),TG=n(ske,"A",{href:!0});var O2t=s(TG);yyo=r(O2t,"LxmertForPreTraining"),O2t.forEach(t),xyo=r(ske," (LXMERT model)"),ske.forEach(t),$yo=i(O),p2=n(O,"LI",{});var lke=s(p2);jfe=n(lke,"STRONG",{});var V2t=s(jfe);kyo=r(V2t,"megatron-bert"),V2t.forEach(t),Syo=r(lke," \u2014 "),MG=n(lke,"A",{href:!0});var X2t=s(MG);Ryo=r(X2t,"MegatronBertForPreTraining"),X2t.forEach(t),Pyo=r(lke," (Megatron-BERT model)"),lke.forEach(t),Byo=i(O),_2=n(O,"LI",{});var ike=s(_2);Dfe=n(ike,"STRONG",{});var z2t=s(Dfe);Iyo=r(z2t,"mobilebert"),z2t.forEach(t),Nyo=r(ike," \u2014 "),EG=n(ike,"A",{href:!0});var Q2t=s(EG);qyo=r(Q2t,"MobileBertForPreTraining"),Q2t.forEach(t),jyo=r(ike," (MobileBERT model)"),ike.forEach(t),Dyo=i(O),b2=n(O,"LI",{});var dke=s(b2);Gfe=n(dke,"STRONG",{});var W2t=s(Gfe);Gyo=r(W2t,"mpnet"),W2t.forEach(t),Oyo=r(dke," \u2014 "),CG=n(dke,"A",{href:!0});var H2t=s(CG);Vyo=r(H2t,"MPNetForMaskedLM"),H2t.forEach(t),Xyo=r(dke," (MPNet model)"),dke.forEach(t),zyo=i(O),v2=n(O,"LI",{});var cke=s(v2);Ofe=n(cke,"STRONG",{});var U2t=s(Ofe);Qyo=r(U2t,"mvp"),U2t.forEach(t),Wyo=r(cke," \u2014 "),wG=n(cke,"A",{href:!0});var J2t=s(wG);Hyo=r(J2t,"MvpForConditionalGeneration"),J2t.forEach(t),Uyo=r(cke," (MVP model)"),cke.forEach(t),Jyo=i(O),F2=n(O,"LI",{});var mke=s(F2);Vfe=n(mke,"STRONG",{});var Y2t=s(Vfe);Yyo=r(Y2t,"nezha"),Y2t.forEach(t),Kyo=r(mke," \u2014 "),AG=n(mke,"A",{href:!0});var K2t=s(AG);Zyo=r(K2t,"NezhaForPreTraining"),K2t.forEach(t),e8o=r(mke," (Nezha model)"),mke.forEach(t),o8o=i(O),T2=n(O,"LI",{});var fke=s(T2);Xfe=n(fke,"STRONG",{});var Z2t=s(Xfe);r8o=r(Z2t,"openai-gpt"),Z2t.forEach(t),t8o=r(fke," \u2014 "),LG=n(fke,"A",{href:!0});var ebt=s(LG);a8o=r(ebt,"OpenAIGPTLMHeadModel"),ebt.forEach(t),n8o=r(fke," (OpenAI GPT model)"),fke.forEach(t),s8o=i(O),M2=n(O,"LI",{});var gke=s(M2);zfe=n(gke,"STRONG",{});var obt=s(zfe);l8o=r(obt,"retribert"),obt.forEach(t),i8o=r(gke," \u2014 "),yG=n(gke,"A",{href:!0});var rbt=s(yG);d8o=r(rbt,"RetriBertModel"),rbt.forEach(t),c8o=r(gke," (RetriBERT model)"),gke.forEach(t),m8o=i(O),E2=n(O,"LI",{});var hke=s(E2);Qfe=n(hke,"STRONG",{});var tbt=s(Qfe);f8o=r(tbt,"roberta"),tbt.forEach(t),g8o=r(hke," \u2014 "),xG=n(hke,"A",{href:!0});var abt=s(xG);h8o=r(abt,"RobertaForMaskedLM"),abt.forEach(t),u8o=r(hke," (RoBERTa model)"),hke.forEach(t),p8o=i(O),C2=n(O,"LI",{});var uke=s(C2);Wfe=n(uke,"STRONG",{});var nbt=s(Wfe);_8o=r(nbt,"splinter"),nbt.forEach(t),b8o=r(uke," \u2014 "),$G=n(uke,"A",{href:!0});var sbt=s($G);v8o=r(sbt,"SplinterForPreTraining"),sbt.forEach(t),F8o=r(uke," (Splinter model)"),uke.forEach(t),T8o=i(O),w2=n(O,"LI",{});var pke=s(w2);Hfe=n(pke,"STRONG",{});var lbt=s(Hfe);M8o=r(lbt,"squeezebert"),lbt.forEach(t),E8o=r(pke," \u2014 "),kG=n(pke,"A",{href:!0});var ibt=s(kG);C8o=r(ibt,"SqueezeBertForMaskedLM"),ibt.forEach(t),w8o=r(pke," (SqueezeBERT model)"),pke.forEach(t),A8o=i(O),A2=n(O,"LI",{});var _ke=s(A2);Ufe=n(_ke,"STRONG",{});var dbt=s(Ufe);L8o=r(dbt,"t5"),dbt.forEach(t),y8o=r(_ke," \u2014 "),SG=n(_ke,"A",{href:!0});var cbt=s(SG);x8o=r(cbt,"T5ForConditionalGeneration"),cbt.forEach(t),$8o=r(_ke," (T5 model)"),_ke.forEach(t),k8o=i(O),L2=n(O,"LI",{});var bke=s(L2);Jfe=n(bke,"STRONG",{});var mbt=s(Jfe);S8o=r(mbt,"tapas"),mbt.forEach(t),R8o=r(bke," \u2014 "),RG=n(bke,"A",{href:!0});var fbt=s(RG);P8o=r(fbt,"TapasForMaskedLM"),fbt.forEach(t),B8o=r(bke," (TAPAS model)"),bke.forEach(t),I8o=i(O),y2=n(O,"LI",{});var vke=s(y2);Yfe=n(vke,"STRONG",{});var gbt=s(Yfe);N8o=r(gbt,"transfo-xl"),gbt.forEach(t),q8o=r(vke," \u2014 "),PG=n(vke,"A",{href:!0});var hbt=s(PG);j8o=r(hbt,"TransfoXLLMHeadModel"),hbt.forEach(t),D8o=r(vke," (Transformer-XL model)"),vke.forEach(t),G8o=i(O),x2=n(O,"LI",{});var Fke=s(x2);Kfe=n(Fke,"STRONG",{});var ubt=s(Kfe);O8o=r(ubt,"unispeech"),ubt.forEach(t),V8o=r(Fke," \u2014 "),BG=n(Fke,"A",{href:!0});var pbt=s(BG);X8o=r(pbt,"UniSpeechForPreTraining"),pbt.forEach(t),z8o=r(Fke," (UniSpeech model)"),Fke.forEach(t),Q8o=i(O),$2=n(O,"LI",{});var Tke=s($2);Zfe=n(Tke,"STRONG",{});var _bt=s(Zfe);W8o=r(_bt,"unispeech-sat"),_bt.forEach(t),H8o=r(Tke," \u2014 "),IG=n(Tke,"A",{href:!0});var bbt=s(IG);U8o=r(bbt,"UniSpeechSatForPreTraining"),bbt.forEach(t),J8o=r(Tke," (UniSpeechSat model)"),Tke.forEach(t),Y8o=i(O),k2=n(O,"LI",{});var Mke=s(k2);ege=n(Mke,"STRONG",{});var vbt=s(ege);K8o=r(vbt,"visual_bert"),vbt.forEach(t),Z8o=r(Mke," \u2014 "),NG=n(Mke,"A",{href:!0});var Fbt=s(NG);e9o=r(Fbt,"VisualBertForPreTraining"),Fbt.forEach(t),o9o=r(Mke," (VisualBERT model)"),Mke.forEach(t),r9o=i(O),S2=n(O,"LI",{});var Eke=s(S2);oge=n(Eke,"STRONG",{});var Tbt=s(oge);t9o=r(Tbt,"vit_mae"),Tbt.forEach(t),a9o=r(Eke," \u2014 "),qG=n(Eke,"A",{href:!0});var Mbt=s(qG);n9o=r(Mbt,"ViTMAEForPreTraining"),Mbt.forEach(t),s9o=r(Eke," (ViTMAE model)"),Eke.forEach(t),l9o=i(O),R2=n(O,"LI",{});var Cke=s(R2);rge=n(Cke,"STRONG",{});var Ebt=s(rge);i9o=r(Ebt,"wav2vec2"),Ebt.forEach(t),d9o=r(Cke," \u2014 "),jG=n(Cke,"A",{href:!0});var Cbt=s(jG);c9o=r(Cbt,"Wav2Vec2ForPreTraining"),Cbt.forEach(t),m9o=r(Cke," (Wav2Vec2 model)"),Cke.forEach(t),f9o=i(O),P2=n(O,"LI",{});var wke=s(P2);tge=n(wke,"STRONG",{});var wbt=s(tge);g9o=r(wbt,"wav2vec2-conformer"),wbt.forEach(t),h9o=r(wke," \u2014 "),DG=n(wke,"A",{href:!0});var Abt=s(DG);u9o=r(Abt,"Wav2Vec2ConformerForPreTraining"),Abt.forEach(t),p9o=r(wke," (Wav2Vec2-Conformer model)"),wke.forEach(t),_9o=i(O),B2=n(O,"LI",{});var Ake=s(B2);age=n(Ake,"STRONG",{});var Lbt=s(age);b9o=r(Lbt,"xlm"),Lbt.forEach(t),v9o=r(Ake," \u2014 "),GG=n(Ake,"A",{href:!0});var ybt=s(GG);F9o=r(ybt,"XLMWithLMHeadModel"),ybt.forEach(t),T9o=r(Ake," (XLM model)"),Ake.forEach(t),M9o=i(O),I2=n(O,"LI",{});var Lke=s(I2);nge=n(Lke,"STRONG",{});var xbt=s(nge);E9o=r(xbt,"xlm-roberta"),xbt.forEach(t),C9o=r(Lke," \u2014 "),OG=n(Lke,"A",{href:!0});var $bt=s(OG);w9o=r($bt,"XLMRobertaForMaskedLM"),$bt.forEach(t),A9o=r(Lke," (XLM-RoBERTa model)"),Lke.forEach(t),L9o=i(O),N2=n(O,"LI",{});var yke=s(N2);sge=n(yke,"STRONG",{});var kbt=s(sge);y9o=r(kbt,"xlm-roberta-xl"),kbt.forEach(t),x9o=r(yke," \u2014 "),VG=n(yke,"A",{href:!0});var Sbt=s(VG);$9o=r(Sbt,"XLMRobertaXLForMaskedLM"),Sbt.forEach(t),k9o=r(yke," (XLM-RoBERTa-XL model)"),yke.forEach(t),S9o=i(O),q2=n(O,"LI",{});var xke=s(q2);lge=n(xke,"STRONG",{});var Rbt=s(lge);R9o=r(Rbt,"xlnet"),Rbt.forEach(t),P9o=r(xke," \u2014 "),XG=n(xke,"A",{href:!0});var Pbt=s(XG);B9o=r(Pbt,"XLNetLMHeadModel"),Pbt.forEach(t),I9o=r(xke," (XLNet model)"),xke.forEach(t),O.forEach(t),N9o=i(la),j2=n(la,"P",{});var $ke=s(j2);q9o=r($ke,"The model is set in evaluation mode by default using "),ige=n($ke,"CODE",{});var Bbt=s(ige);j9o=r(Bbt,"model.eval()"),Bbt.forEach(t),D9o=r($ke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dge=n($ke,"CODE",{});var Ibt=s(dge);G9o=r(Ibt,"model.train()"),Ibt.forEach(t),$ke.forEach(t),O9o=i(la),T(D2.$$.fragment,la),la.forEach(t),rl.forEach(t),nXe=i(m),Qi=n(m,"H2",{class:!0});var mQe=s(Qi);G2=n(mQe,"A",{id:!0,class:!0,href:!0});var Nbt=s(G2);cge=n(Nbt,"SPAN",{});var qbt=s(cge);T(qy.$$.fragment,qbt),qbt.forEach(t),Nbt.forEach(t),V9o=i(mQe),mge=n(mQe,"SPAN",{});var jbt=s(mge);X9o=r(jbt,"AutoModelForCausalLM"),jbt.forEach(t),mQe.forEach(t),sXe=i(m),ko=n(m,"DIV",{class:!0});var tl=s(ko);T(jy.$$.fragment,tl),z9o=i(tl),Wi=n(tl,"P",{});var xre=s(Wi);Q9o=r(xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zG=n(xre,"A",{href:!0});var Dbt=s(zG);W9o=r(Dbt,"from_pretrained()"),Dbt.forEach(t),H9o=r(xre," class method or the "),QG=n(xre,"A",{href:!0});var Gbt=s(QG);U9o=r(Gbt,"from_config()"),Gbt.forEach(t),J9o=r(xre,` class
method.`),xre.forEach(t),Y9o=i(tl),Dy=n(tl,"P",{});var fQe=s(Dy);K9o=r(fQe,"This class cannot be instantiated directly using "),fge=n(fQe,"CODE",{});var Obt=s(fge);Z9o=r(Obt,"__init__()"),Obt.forEach(t),exo=r(fQe," (throws an error)."),fQe.forEach(t),oxo=i(tl),dt=n(tl,"DIV",{class:!0});var c7=s(dt);T(Gy.$$.fragment,c7),rxo=i(c7),gge=n(c7,"P",{});var Vbt=s(gge);txo=r(Vbt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vbt.forEach(t),axo=i(c7),Hi=n(c7,"P",{});var $re=s(Hi);nxo=r($re,`Note:
Loading a model from its configuration file does `),hge=n($re,"STRONG",{});var Xbt=s(hge);sxo=r(Xbt,"not"),Xbt.forEach(t),lxo=r($re,` load the model weights. It only affects the
model\u2019s configuration. Use `),WG=n($re,"A",{href:!0});var zbt=s(WG);ixo=r(zbt,"from_pretrained()"),zbt.forEach(t),dxo=r($re," to load the model weights."),$re.forEach(t),cxo=i(c7),T(O2.$$.fragment,c7),c7.forEach(t),mxo=i(tl),Ke=n(tl,"DIV",{class:!0});var ia=s(Ke);T(Oy.$$.fragment,ia),fxo=i(ia),uge=n(ia,"P",{});var Qbt=s(uge);gxo=r(Qbt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Qbt.forEach(t),hxo=i(ia),qa=n(ia,"P",{});var m7=s(qa);uxo=r(m7,"The model class to instantiate is selected based on the "),pge=n(m7,"CODE",{});var Wbt=s(pge);pxo=r(Wbt,"model_type"),Wbt.forEach(t),_xo=r(m7,` property of the config object (either
passed as an argument or loaded from `),_ge=n(m7,"CODE",{});var Hbt=s(_ge);bxo=r(Hbt,"pretrained_model_name_or_path"),Hbt.forEach(t),vxo=r(m7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=n(m7,"CODE",{});var Ubt=s(bge);Fxo=r(Ubt,"pretrained_model_name_or_path"),Ubt.forEach(t),Txo=r(m7,":"),m7.forEach(t),Mxo=i(ia),z=n(ia,"UL",{});var Q=s(z);V2=n(Q,"LI",{});var kke=s(V2);vge=n(kke,"STRONG",{});var Jbt=s(vge);Exo=r(Jbt,"bart"),Jbt.forEach(t),Cxo=r(kke," \u2014 "),HG=n(kke,"A",{href:!0});var Ybt=s(HG);wxo=r(Ybt,"BartForCausalLM"),Ybt.forEach(t),Axo=r(kke," (BART model)"),kke.forEach(t),Lxo=i(Q),X2=n(Q,"LI",{});var Ske=s(X2);Fge=n(Ske,"STRONG",{});var Kbt=s(Fge);yxo=r(Kbt,"bert"),Kbt.forEach(t),xxo=r(Ske," \u2014 "),UG=n(Ske,"A",{href:!0});var Zbt=s(UG);$xo=r(Zbt,"BertLMHeadModel"),Zbt.forEach(t),kxo=r(Ske," (BERT model)"),Ske.forEach(t),Sxo=i(Q),z2=n(Q,"LI",{});var Rke=s(z2);Tge=n(Rke,"STRONG",{});var evt=s(Tge);Rxo=r(evt,"bert-generation"),evt.forEach(t),Pxo=r(Rke," \u2014 "),JG=n(Rke,"A",{href:!0});var ovt=s(JG);Bxo=r(ovt,"BertGenerationDecoder"),ovt.forEach(t),Ixo=r(Rke," (Bert Generation model)"),Rke.forEach(t),Nxo=i(Q),Q2=n(Q,"LI",{});var Pke=s(Q2);Mge=n(Pke,"STRONG",{});var rvt=s(Mge);qxo=r(rvt,"big_bird"),rvt.forEach(t),jxo=r(Pke," \u2014 "),YG=n(Pke,"A",{href:!0});var tvt=s(YG);Dxo=r(tvt,"BigBirdForCausalLM"),tvt.forEach(t),Gxo=r(Pke," (BigBird model)"),Pke.forEach(t),Oxo=i(Q),W2=n(Q,"LI",{});var Bke=s(W2);Ege=n(Bke,"STRONG",{});var avt=s(Ege);Vxo=r(avt,"bigbird_pegasus"),avt.forEach(t),Xxo=r(Bke," \u2014 "),KG=n(Bke,"A",{href:!0});var nvt=s(KG);zxo=r(nvt,"BigBirdPegasusForCausalLM"),nvt.forEach(t),Qxo=r(Bke," (BigBird-Pegasus model)"),Bke.forEach(t),Wxo=i(Q),H2=n(Q,"LI",{});var Ike=s(H2);Cge=n(Ike,"STRONG",{});var svt=s(Cge);Hxo=r(svt,"blenderbot"),svt.forEach(t),Uxo=r(Ike," \u2014 "),ZG=n(Ike,"A",{href:!0});var lvt=s(ZG);Jxo=r(lvt,"BlenderbotForCausalLM"),lvt.forEach(t),Yxo=r(Ike," (Blenderbot model)"),Ike.forEach(t),Kxo=i(Q),U2=n(Q,"LI",{});var Nke=s(U2);wge=n(Nke,"STRONG",{});var ivt=s(wge);Zxo=r(ivt,"blenderbot-small"),ivt.forEach(t),e$o=r(Nke," \u2014 "),eO=n(Nke,"A",{href:!0});var dvt=s(eO);o$o=r(dvt,"BlenderbotSmallForCausalLM"),dvt.forEach(t),r$o=r(Nke," (BlenderbotSmall model)"),Nke.forEach(t),t$o=i(Q),J2=n(Q,"LI",{});var qke=s(J2);Age=n(qke,"STRONG",{});var cvt=s(Age);a$o=r(cvt,"bloom"),cvt.forEach(t),n$o=r(qke," \u2014 "),oO=n(qke,"A",{href:!0});var mvt=s(oO);s$o=r(mvt,"BloomForCausalLM"),mvt.forEach(t),l$o=r(qke," (BLOOM model)"),qke.forEach(t),i$o=i(Q),Y2=n(Q,"LI",{});var jke=s(Y2);Lge=n(jke,"STRONG",{});var fvt=s(Lge);d$o=r(fvt,"camembert"),fvt.forEach(t),c$o=r(jke," \u2014 "),rO=n(jke,"A",{href:!0});var gvt=s(rO);m$o=r(gvt,"CamembertForCausalLM"),gvt.forEach(t),f$o=r(jke," (CamemBERT model)"),jke.forEach(t),g$o=i(Q),K2=n(Q,"LI",{});var Dke=s(K2);yge=n(Dke,"STRONG",{});var hvt=s(yge);h$o=r(hvt,"codegen"),hvt.forEach(t),u$o=r(Dke," \u2014 "),tO=n(Dke,"A",{href:!0});var uvt=s(tO);p$o=r(uvt,"CodeGenForCausalLM"),uvt.forEach(t),_$o=r(Dke," (CodeGen model)"),Dke.forEach(t),b$o=i(Q),Z2=n(Q,"LI",{});var Gke=s(Z2);xge=n(Gke,"STRONG",{});var pvt=s(xge);v$o=r(pvt,"ctrl"),pvt.forEach(t),F$o=r(Gke," \u2014 "),aO=n(Gke,"A",{href:!0});var _vt=s(aO);T$o=r(_vt,"CTRLLMHeadModel"),_vt.forEach(t),M$o=r(Gke," (CTRL model)"),Gke.forEach(t),E$o=i(Q),eb=n(Q,"LI",{});var Oke=s(eb);$ge=n(Oke,"STRONG",{});var bvt=s($ge);C$o=r(bvt,"data2vec-text"),bvt.forEach(t),w$o=r(Oke," \u2014 "),nO=n(Oke,"A",{href:!0});var vvt=s(nO);A$o=r(vvt,"Data2VecTextForCausalLM"),vvt.forEach(t),L$o=r(Oke," (Data2VecText model)"),Oke.forEach(t),y$o=i(Q),ob=n(Q,"LI",{});var Vke=s(ob);kge=n(Vke,"STRONG",{});var Fvt=s(kge);x$o=r(Fvt,"electra"),Fvt.forEach(t),$$o=r(Vke," \u2014 "),sO=n(Vke,"A",{href:!0});var Tvt=s(sO);k$o=r(Tvt,"ElectraForCausalLM"),Tvt.forEach(t),S$o=r(Vke," (ELECTRA model)"),Vke.forEach(t),R$o=i(Q),rb=n(Q,"LI",{});var Xke=s(rb);Sge=n(Xke,"STRONG",{});var Mvt=s(Sge);P$o=r(Mvt,"gpt2"),Mvt.forEach(t),B$o=r(Xke," \u2014 "),lO=n(Xke,"A",{href:!0});var Evt=s(lO);I$o=r(Evt,"GPT2LMHeadModel"),Evt.forEach(t),N$o=r(Xke," (OpenAI GPT-2 model)"),Xke.forEach(t),q$o=i(Q),tb=n(Q,"LI",{});var zke=s(tb);Rge=n(zke,"STRONG",{});var Cvt=s(Rge);j$o=r(Cvt,"gpt_neo"),Cvt.forEach(t),D$o=r(zke," \u2014 "),iO=n(zke,"A",{href:!0});var wvt=s(iO);G$o=r(wvt,"GPTNeoForCausalLM"),wvt.forEach(t),O$o=r(zke," (GPT Neo model)"),zke.forEach(t),V$o=i(Q),ab=n(Q,"LI",{});var Qke=s(ab);Pge=n(Qke,"STRONG",{});var Avt=s(Pge);X$o=r(Avt,"gpt_neox"),Avt.forEach(t),z$o=r(Qke," \u2014 "),dO=n(Qke,"A",{href:!0});var Lvt=s(dO);Q$o=r(Lvt,"GPTNeoXForCausalLM"),Lvt.forEach(t),W$o=r(Qke," (GPT NeoX model)"),Qke.forEach(t),H$o=i(Q),nb=n(Q,"LI",{});var Wke=s(nb);Bge=n(Wke,"STRONG",{});var yvt=s(Bge);U$o=r(yvt,"gptj"),yvt.forEach(t),J$o=r(Wke," \u2014 "),cO=n(Wke,"A",{href:!0});var xvt=s(cO);Y$o=r(xvt,"GPTJForCausalLM"),xvt.forEach(t),K$o=r(Wke," (GPT-J model)"),Wke.forEach(t),Z$o=i(Q),sb=n(Q,"LI",{});var Hke=s(sb);Ige=n(Hke,"STRONG",{});var $vt=s(Ige);eko=r($vt,"marian"),$vt.forEach(t),oko=r(Hke," \u2014 "),mO=n(Hke,"A",{href:!0});var kvt=s(mO);rko=r(kvt,"MarianForCausalLM"),kvt.forEach(t),tko=r(Hke," (Marian model)"),Hke.forEach(t),ako=i(Q),lb=n(Q,"LI",{});var Uke=s(lb);Nge=n(Uke,"STRONG",{});var Svt=s(Nge);nko=r(Svt,"mbart"),Svt.forEach(t),sko=r(Uke," \u2014 "),fO=n(Uke,"A",{href:!0});var Rvt=s(fO);lko=r(Rvt,"MBartForCausalLM"),Rvt.forEach(t),iko=r(Uke," (mBART model)"),Uke.forEach(t),dko=i(Q),ib=n(Q,"LI",{});var Jke=s(ib);qge=n(Jke,"STRONG",{});var Pvt=s(qge);cko=r(Pvt,"megatron-bert"),Pvt.forEach(t),mko=r(Jke," \u2014 "),gO=n(Jke,"A",{href:!0});var Bvt=s(gO);fko=r(Bvt,"MegatronBertForCausalLM"),Bvt.forEach(t),gko=r(Jke," (Megatron-BERT model)"),Jke.forEach(t),hko=i(Q),db=n(Q,"LI",{});var Yke=s(db);jge=n(Yke,"STRONG",{});var Ivt=s(jge);uko=r(Ivt,"mvp"),Ivt.forEach(t),pko=r(Yke," \u2014 "),hO=n(Yke,"A",{href:!0});var Nvt=s(hO);_ko=r(Nvt,"MvpForCausalLM"),Nvt.forEach(t),bko=r(Yke," (MVP model)"),Yke.forEach(t),vko=i(Q),cb=n(Q,"LI",{});var Kke=s(cb);Dge=n(Kke,"STRONG",{});var qvt=s(Dge);Fko=r(qvt,"openai-gpt"),qvt.forEach(t),Tko=r(Kke," \u2014 "),uO=n(Kke,"A",{href:!0});var jvt=s(uO);Mko=r(jvt,"OpenAIGPTLMHeadModel"),jvt.forEach(t),Eko=r(Kke," (OpenAI GPT model)"),Kke.forEach(t),Cko=i(Q),mb=n(Q,"LI",{});var Zke=s(mb);Gge=n(Zke,"STRONG",{});var Dvt=s(Gge);wko=r(Dvt,"opt"),Dvt.forEach(t),Ako=r(Zke," \u2014 "),pO=n(Zke,"A",{href:!0});var Gvt=s(pO);Lko=r(Gvt,"OPTForCausalLM"),Gvt.forEach(t),yko=r(Zke," (OPT model)"),Zke.forEach(t),xko=i(Q),fb=n(Q,"LI",{});var eSe=s(fb);Oge=n(eSe,"STRONG",{});var Ovt=s(Oge);$ko=r(Ovt,"pegasus"),Ovt.forEach(t),kko=r(eSe," \u2014 "),_O=n(eSe,"A",{href:!0});var Vvt=s(_O);Sko=r(Vvt,"PegasusForCausalLM"),Vvt.forEach(t),Rko=r(eSe," (Pegasus model)"),eSe.forEach(t),Pko=i(Q),gb=n(Q,"LI",{});var oSe=s(gb);Vge=n(oSe,"STRONG",{});var Xvt=s(Vge);Bko=r(Xvt,"plbart"),Xvt.forEach(t),Iko=r(oSe," \u2014 "),bO=n(oSe,"A",{href:!0});var zvt=s(bO);Nko=r(zvt,"PLBartForCausalLM"),zvt.forEach(t),qko=r(oSe," (PLBart model)"),oSe.forEach(t),jko=i(Q),hb=n(Q,"LI",{});var rSe=s(hb);Xge=n(rSe,"STRONG",{});var Qvt=s(Xge);Dko=r(Qvt,"prophetnet"),Qvt.forEach(t),Gko=r(rSe," \u2014 "),vO=n(rSe,"A",{href:!0});var Wvt=s(vO);Oko=r(Wvt,"ProphetNetForCausalLM"),Wvt.forEach(t),Vko=r(rSe," (ProphetNet model)"),rSe.forEach(t),Xko=i(Q),ub=n(Q,"LI",{});var tSe=s(ub);zge=n(tSe,"STRONG",{});var Hvt=s(zge);zko=r(Hvt,"qdqbert"),Hvt.forEach(t),Qko=r(tSe," \u2014 "),FO=n(tSe,"A",{href:!0});var Uvt=s(FO);Wko=r(Uvt,"QDQBertLMHeadModel"),Uvt.forEach(t),Hko=r(tSe," (QDQBert model)"),tSe.forEach(t),Uko=i(Q),pb=n(Q,"LI",{});var aSe=s(pb);Qge=n(aSe,"STRONG",{});var Jvt=s(Qge);Jko=r(Jvt,"reformer"),Jvt.forEach(t),Yko=r(aSe," \u2014 "),TO=n(aSe,"A",{href:!0});var Yvt=s(TO);Kko=r(Yvt,"ReformerModelWithLMHead"),Yvt.forEach(t),Zko=r(aSe," (Reformer model)"),aSe.forEach(t),eSo=i(Q),_b=n(Q,"LI",{});var nSe=s(_b);Wge=n(nSe,"STRONG",{});var Kvt=s(Wge);oSo=r(Kvt,"rembert"),Kvt.forEach(t),rSo=r(nSe," \u2014 "),MO=n(nSe,"A",{href:!0});var Zvt=s(MO);tSo=r(Zvt,"RemBertForCausalLM"),Zvt.forEach(t),aSo=r(nSe," (RemBERT model)"),nSe.forEach(t),nSo=i(Q),bb=n(Q,"LI",{});var sSe=s(bb);Hge=n(sSe,"STRONG",{});var e1t=s(Hge);sSo=r(e1t,"roberta"),e1t.forEach(t),lSo=r(sSe," \u2014 "),EO=n(sSe,"A",{href:!0});var o1t=s(EO);iSo=r(o1t,"RobertaForCausalLM"),o1t.forEach(t),dSo=r(sSe," (RoBERTa model)"),sSe.forEach(t),cSo=i(Q),vb=n(Q,"LI",{});var lSe=s(vb);Uge=n(lSe,"STRONG",{});var r1t=s(Uge);mSo=r(r1t,"roformer"),r1t.forEach(t),fSo=r(lSe," \u2014 "),CO=n(lSe,"A",{href:!0});var t1t=s(CO);gSo=r(t1t,"RoFormerForCausalLM"),t1t.forEach(t),hSo=r(lSe," (RoFormer model)"),lSe.forEach(t),uSo=i(Q),Fb=n(Q,"LI",{});var iSe=s(Fb);Jge=n(iSe,"STRONG",{});var a1t=s(Jge);pSo=r(a1t,"speech_to_text_2"),a1t.forEach(t),_So=r(iSe," \u2014 "),wO=n(iSe,"A",{href:!0});var n1t=s(wO);bSo=r(n1t,"Speech2Text2ForCausalLM"),n1t.forEach(t),vSo=r(iSe," (Speech2Text2 model)"),iSe.forEach(t),FSo=i(Q),Tb=n(Q,"LI",{});var dSe=s(Tb);Yge=n(dSe,"STRONG",{});var s1t=s(Yge);TSo=r(s1t,"transfo-xl"),s1t.forEach(t),MSo=r(dSe," \u2014 "),AO=n(dSe,"A",{href:!0});var l1t=s(AO);ESo=r(l1t,"TransfoXLLMHeadModel"),l1t.forEach(t),CSo=r(dSe," (Transformer-XL model)"),dSe.forEach(t),wSo=i(Q),Mb=n(Q,"LI",{});var cSe=s(Mb);Kge=n(cSe,"STRONG",{});var i1t=s(Kge);ASo=r(i1t,"trocr"),i1t.forEach(t),LSo=r(cSe," \u2014 "),LO=n(cSe,"A",{href:!0});var d1t=s(LO);ySo=r(d1t,"TrOCRForCausalLM"),d1t.forEach(t),xSo=r(cSe," (TrOCR model)"),cSe.forEach(t),$So=i(Q),Eb=n(Q,"LI",{});var mSe=s(Eb);Zge=n(mSe,"STRONG",{});var c1t=s(Zge);kSo=r(c1t,"xglm"),c1t.forEach(t),SSo=r(mSe," \u2014 "),yO=n(mSe,"A",{href:!0});var m1t=s(yO);RSo=r(m1t,"XGLMForCausalLM"),m1t.forEach(t),PSo=r(mSe," (XGLM model)"),mSe.forEach(t),BSo=i(Q),Cb=n(Q,"LI",{});var fSe=s(Cb);ehe=n(fSe,"STRONG",{});var f1t=s(ehe);ISo=r(f1t,"xlm"),f1t.forEach(t),NSo=r(fSe," \u2014 "),xO=n(fSe,"A",{href:!0});var g1t=s(xO);qSo=r(g1t,"XLMWithLMHeadModel"),g1t.forEach(t),jSo=r(fSe," (XLM model)"),fSe.forEach(t),DSo=i(Q),wb=n(Q,"LI",{});var gSe=s(wb);ohe=n(gSe,"STRONG",{});var h1t=s(ohe);GSo=r(h1t,"xlm-prophetnet"),h1t.forEach(t),OSo=r(gSe," \u2014 "),$O=n(gSe,"A",{href:!0});var u1t=s($O);VSo=r(u1t,"XLMProphetNetForCausalLM"),u1t.forEach(t),XSo=r(gSe," (XLM-ProphetNet model)"),gSe.forEach(t),zSo=i(Q),Ab=n(Q,"LI",{});var hSe=s(Ab);rhe=n(hSe,"STRONG",{});var p1t=s(rhe);QSo=r(p1t,"xlm-roberta"),p1t.forEach(t),WSo=r(hSe," \u2014 "),kO=n(hSe,"A",{href:!0});var _1t=s(kO);HSo=r(_1t,"XLMRobertaForCausalLM"),_1t.forEach(t),USo=r(hSe," (XLM-RoBERTa model)"),hSe.forEach(t),JSo=i(Q),Lb=n(Q,"LI",{});var uSe=s(Lb);the=n(uSe,"STRONG",{});var b1t=s(the);YSo=r(b1t,"xlm-roberta-xl"),b1t.forEach(t),KSo=r(uSe," \u2014 "),SO=n(uSe,"A",{href:!0});var v1t=s(SO);ZSo=r(v1t,"XLMRobertaXLForCausalLM"),v1t.forEach(t),eRo=r(uSe," (XLM-RoBERTa-XL model)"),uSe.forEach(t),oRo=i(Q),yb=n(Q,"LI",{});var pSe=s(yb);ahe=n(pSe,"STRONG",{});var F1t=s(ahe);rRo=r(F1t,"xlnet"),F1t.forEach(t),tRo=r(pSe," \u2014 "),RO=n(pSe,"A",{href:!0});var T1t=s(RO);aRo=r(T1t,"XLNetLMHeadModel"),T1t.forEach(t),nRo=r(pSe," (XLNet model)"),pSe.forEach(t),Q.forEach(t),sRo=i(ia),xb=n(ia,"P",{});var _Se=s(xb);lRo=r(_Se,"The model is set in evaluation mode by default using "),nhe=n(_Se,"CODE",{});var M1t=s(nhe);iRo=r(M1t,"model.eval()"),M1t.forEach(t),dRo=r(_Se,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),she=n(_Se,"CODE",{});var E1t=s(she);cRo=r(E1t,"model.train()"),E1t.forEach(t),_Se.forEach(t),mRo=i(ia),T($b.$$.fragment,ia),ia.forEach(t),tl.forEach(t),lXe=i(m),Ui=n(m,"H2",{class:!0});var gQe=s(Ui);kb=n(gQe,"A",{id:!0,class:!0,href:!0});var C1t=s(kb);lhe=n(C1t,"SPAN",{});var w1t=s(lhe);T(Vy.$$.fragment,w1t),w1t.forEach(t),C1t.forEach(t),fRo=i(gQe),ihe=n(gQe,"SPAN",{});var A1t=s(ihe);gRo=r(A1t,"AutoModelForMaskedLM"),A1t.forEach(t),gQe.forEach(t),iXe=i(m),So=n(m,"DIV",{class:!0});var al=s(So);T(Xy.$$.fragment,al),hRo=i(al),Ji=n(al,"P",{});var kre=s(Ji);uRo=r(kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PO=n(kre,"A",{href:!0});var L1t=s(PO);pRo=r(L1t,"from_pretrained()"),L1t.forEach(t),_Ro=r(kre," class method or the "),BO=n(kre,"A",{href:!0});var y1t=s(BO);bRo=r(y1t,"from_config()"),y1t.forEach(t),vRo=r(kre,` class
method.`),kre.forEach(t),FRo=i(al),zy=n(al,"P",{});var hQe=s(zy);TRo=r(hQe,"This class cannot be instantiated directly using "),dhe=n(hQe,"CODE",{});var x1t=s(dhe);MRo=r(x1t,"__init__()"),x1t.forEach(t),ERo=r(hQe," (throws an error)."),hQe.forEach(t),CRo=i(al),ct=n(al,"DIV",{class:!0});var f7=s(ct);T(Qy.$$.fragment,f7),wRo=i(f7),che=n(f7,"P",{});var $1t=s(che);ARo=r($1t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$1t.forEach(t),LRo=i(f7),Yi=n(f7,"P",{});var Sre=s(Yi);yRo=r(Sre,`Note:
Loading a model from its configuration file does `),mhe=n(Sre,"STRONG",{});var k1t=s(mhe);xRo=r(k1t,"not"),k1t.forEach(t),$Ro=r(Sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=n(Sre,"A",{href:!0});var S1t=s(IO);kRo=r(S1t,"from_pretrained()"),S1t.forEach(t),SRo=r(Sre," to load the model weights."),Sre.forEach(t),RRo=i(f7),T(Sb.$$.fragment,f7),f7.forEach(t),PRo=i(al),Ze=n(al,"DIV",{class:!0});var da=s(Ze);T(Wy.$$.fragment,da),BRo=i(da),fhe=n(da,"P",{});var R1t=s(fhe);IRo=r(R1t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),R1t.forEach(t),NRo=i(da),ja=n(da,"P",{});var g7=s(ja);qRo=r(g7,"The model class to instantiate is selected based on the "),ghe=n(g7,"CODE",{});var P1t=s(ghe);jRo=r(P1t,"model_type"),P1t.forEach(t),DRo=r(g7,` property of the config object (either
passed as an argument or loaded from `),hhe=n(g7,"CODE",{});var B1t=s(hhe);GRo=r(B1t,"pretrained_model_name_or_path"),B1t.forEach(t),ORo=r(g7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=n(g7,"CODE",{});var I1t=s(uhe);VRo=r(I1t,"pretrained_model_name_or_path"),I1t.forEach(t),XRo=r(g7,":"),g7.forEach(t),zRo=i(da),W=n(da,"UL",{});var H=s(W);Rb=n(H,"LI",{});var bSe=s(Rb);phe=n(bSe,"STRONG",{});var N1t=s(phe);QRo=r(N1t,"albert"),N1t.forEach(t),WRo=r(bSe," \u2014 "),NO=n(bSe,"A",{href:!0});var q1t=s(NO);HRo=r(q1t,"AlbertForMaskedLM"),q1t.forEach(t),URo=r(bSe," (ALBERT model)"),bSe.forEach(t),JRo=i(H),Pb=n(H,"LI",{});var vSe=s(Pb);_he=n(vSe,"STRONG",{});var j1t=s(_he);YRo=r(j1t,"bart"),j1t.forEach(t),KRo=r(vSe," \u2014 "),qO=n(vSe,"A",{href:!0});var D1t=s(qO);ZRo=r(D1t,"BartForConditionalGeneration"),D1t.forEach(t),ePo=r(vSe," (BART model)"),vSe.forEach(t),oPo=i(H),Bb=n(H,"LI",{});var FSe=s(Bb);bhe=n(FSe,"STRONG",{});var G1t=s(bhe);rPo=r(G1t,"bert"),G1t.forEach(t),tPo=r(FSe," \u2014 "),jO=n(FSe,"A",{href:!0});var O1t=s(jO);aPo=r(O1t,"BertForMaskedLM"),O1t.forEach(t),nPo=r(FSe," (BERT model)"),FSe.forEach(t),sPo=i(H),Ib=n(H,"LI",{});var TSe=s(Ib);vhe=n(TSe,"STRONG",{});var V1t=s(vhe);lPo=r(V1t,"big_bird"),V1t.forEach(t),iPo=r(TSe," \u2014 "),DO=n(TSe,"A",{href:!0});var X1t=s(DO);dPo=r(X1t,"BigBirdForMaskedLM"),X1t.forEach(t),cPo=r(TSe," (BigBird model)"),TSe.forEach(t),mPo=i(H),Nb=n(H,"LI",{});var MSe=s(Nb);Fhe=n(MSe,"STRONG",{});var z1t=s(Fhe);fPo=r(z1t,"camembert"),z1t.forEach(t),gPo=r(MSe," \u2014 "),GO=n(MSe,"A",{href:!0});var Q1t=s(GO);hPo=r(Q1t,"CamembertForMaskedLM"),Q1t.forEach(t),uPo=r(MSe," (CamemBERT model)"),MSe.forEach(t),pPo=i(H),qb=n(H,"LI",{});var ESe=s(qb);The=n(ESe,"STRONG",{});var W1t=s(The);_Po=r(W1t,"convbert"),W1t.forEach(t),bPo=r(ESe," \u2014 "),OO=n(ESe,"A",{href:!0});var H1t=s(OO);vPo=r(H1t,"ConvBertForMaskedLM"),H1t.forEach(t),FPo=r(ESe," (ConvBERT model)"),ESe.forEach(t),TPo=i(H),jb=n(H,"LI",{});var CSe=s(jb);Mhe=n(CSe,"STRONG",{});var U1t=s(Mhe);MPo=r(U1t,"data2vec-text"),U1t.forEach(t),EPo=r(CSe," \u2014 "),VO=n(CSe,"A",{href:!0});var J1t=s(VO);CPo=r(J1t,"Data2VecTextForMaskedLM"),J1t.forEach(t),wPo=r(CSe," (Data2VecText model)"),CSe.forEach(t),APo=i(H),Db=n(H,"LI",{});var wSe=s(Db);Ehe=n(wSe,"STRONG",{});var Y1t=s(Ehe);LPo=r(Y1t,"deberta"),Y1t.forEach(t),yPo=r(wSe," \u2014 "),XO=n(wSe,"A",{href:!0});var K1t=s(XO);xPo=r(K1t,"DebertaForMaskedLM"),K1t.forEach(t),$Po=r(wSe," (DeBERTa model)"),wSe.forEach(t),kPo=i(H),Gb=n(H,"LI",{});var ASe=s(Gb);Che=n(ASe,"STRONG",{});var Z1t=s(Che);SPo=r(Z1t,"deberta-v2"),Z1t.forEach(t),RPo=r(ASe," \u2014 "),zO=n(ASe,"A",{href:!0});var eFt=s(zO);PPo=r(eFt,"DebertaV2ForMaskedLM"),eFt.forEach(t),BPo=r(ASe," (DeBERTa-v2 model)"),ASe.forEach(t),IPo=i(H),Ob=n(H,"LI",{});var LSe=s(Ob);whe=n(LSe,"STRONG",{});var oFt=s(whe);NPo=r(oFt,"distilbert"),oFt.forEach(t),qPo=r(LSe," \u2014 "),QO=n(LSe,"A",{href:!0});var rFt=s(QO);jPo=r(rFt,"DistilBertForMaskedLM"),rFt.forEach(t),DPo=r(LSe," (DistilBERT model)"),LSe.forEach(t),GPo=i(H),Vb=n(H,"LI",{});var ySe=s(Vb);Ahe=n(ySe,"STRONG",{});var tFt=s(Ahe);OPo=r(tFt,"electra"),tFt.forEach(t),VPo=r(ySe," \u2014 "),WO=n(ySe,"A",{href:!0});var aFt=s(WO);XPo=r(aFt,"ElectraForMaskedLM"),aFt.forEach(t),zPo=r(ySe," (ELECTRA model)"),ySe.forEach(t),QPo=i(H),Xb=n(H,"LI",{});var xSe=s(Xb);Lhe=n(xSe,"STRONG",{});var nFt=s(Lhe);WPo=r(nFt,"flaubert"),nFt.forEach(t),HPo=r(xSe," \u2014 "),HO=n(xSe,"A",{href:!0});var sFt=s(HO);UPo=r(sFt,"FlaubertWithLMHeadModel"),sFt.forEach(t),JPo=r(xSe," (FlauBERT model)"),xSe.forEach(t),YPo=i(H),zb=n(H,"LI",{});var $Se=s(zb);yhe=n($Se,"STRONG",{});var lFt=s(yhe);KPo=r(lFt,"fnet"),lFt.forEach(t),ZPo=r($Se," \u2014 "),UO=n($Se,"A",{href:!0});var iFt=s(UO);eBo=r(iFt,"FNetForMaskedLM"),iFt.forEach(t),oBo=r($Se," (FNet model)"),$Se.forEach(t),rBo=i(H),Qb=n(H,"LI",{});var kSe=s(Qb);xhe=n(kSe,"STRONG",{});var dFt=s(xhe);tBo=r(dFt,"funnel"),dFt.forEach(t),aBo=r(kSe," \u2014 "),JO=n(kSe,"A",{href:!0});var cFt=s(JO);nBo=r(cFt,"FunnelForMaskedLM"),cFt.forEach(t),sBo=r(kSe," (Funnel Transformer model)"),kSe.forEach(t),lBo=i(H),Wb=n(H,"LI",{});var SSe=s(Wb);$he=n(SSe,"STRONG",{});var mFt=s($he);iBo=r(mFt,"ibert"),mFt.forEach(t),dBo=r(SSe," \u2014 "),YO=n(SSe,"A",{href:!0});var fFt=s(YO);cBo=r(fFt,"IBertForMaskedLM"),fFt.forEach(t),mBo=r(SSe," (I-BERT model)"),SSe.forEach(t),fBo=i(H),Hb=n(H,"LI",{});var RSe=s(Hb);khe=n(RSe,"STRONG",{});var gFt=s(khe);gBo=r(gFt,"layoutlm"),gFt.forEach(t),hBo=r(RSe," \u2014 "),KO=n(RSe,"A",{href:!0});var hFt=s(KO);uBo=r(hFt,"LayoutLMForMaskedLM"),hFt.forEach(t),pBo=r(RSe," (LayoutLM model)"),RSe.forEach(t),_Bo=i(H),Ub=n(H,"LI",{});var PSe=s(Ub);She=n(PSe,"STRONG",{});var uFt=s(She);bBo=r(uFt,"longformer"),uFt.forEach(t),vBo=r(PSe," \u2014 "),ZO=n(PSe,"A",{href:!0});var pFt=s(ZO);FBo=r(pFt,"LongformerForMaskedLM"),pFt.forEach(t),TBo=r(PSe," (Longformer model)"),PSe.forEach(t),MBo=i(H),Jb=n(H,"LI",{});var BSe=s(Jb);Rhe=n(BSe,"STRONG",{});var _Ft=s(Rhe);EBo=r(_Ft,"luke"),_Ft.forEach(t),CBo=r(BSe," \u2014 "),eV=n(BSe,"A",{href:!0});var bFt=s(eV);wBo=r(bFt,"LukeForMaskedLM"),bFt.forEach(t),ABo=r(BSe," (LUKE model)"),BSe.forEach(t),LBo=i(H),Yb=n(H,"LI",{});var ISe=s(Yb);Phe=n(ISe,"STRONG",{});var vFt=s(Phe);yBo=r(vFt,"mbart"),vFt.forEach(t),xBo=r(ISe," \u2014 "),oV=n(ISe,"A",{href:!0});var FFt=s(oV);$Bo=r(FFt,"MBartForConditionalGeneration"),FFt.forEach(t),kBo=r(ISe," (mBART model)"),ISe.forEach(t),SBo=i(H),Kb=n(H,"LI",{});var NSe=s(Kb);Bhe=n(NSe,"STRONG",{});var TFt=s(Bhe);RBo=r(TFt,"megatron-bert"),TFt.forEach(t),PBo=r(NSe," \u2014 "),rV=n(NSe,"A",{href:!0});var MFt=s(rV);BBo=r(MFt,"MegatronBertForMaskedLM"),MFt.forEach(t),IBo=r(NSe," (Megatron-BERT model)"),NSe.forEach(t),NBo=i(H),Zb=n(H,"LI",{});var qSe=s(Zb);Ihe=n(qSe,"STRONG",{});var EFt=s(Ihe);qBo=r(EFt,"mobilebert"),EFt.forEach(t),jBo=r(qSe," \u2014 "),tV=n(qSe,"A",{href:!0});var CFt=s(tV);DBo=r(CFt,"MobileBertForMaskedLM"),CFt.forEach(t),GBo=r(qSe," (MobileBERT model)"),qSe.forEach(t),OBo=i(H),ev=n(H,"LI",{});var jSe=s(ev);Nhe=n(jSe,"STRONG",{});var wFt=s(Nhe);VBo=r(wFt,"mpnet"),wFt.forEach(t),XBo=r(jSe," \u2014 "),aV=n(jSe,"A",{href:!0});var AFt=s(aV);zBo=r(AFt,"MPNetForMaskedLM"),AFt.forEach(t),QBo=r(jSe," (MPNet model)"),jSe.forEach(t),WBo=i(H),ov=n(H,"LI",{});var DSe=s(ov);qhe=n(DSe,"STRONG",{});var LFt=s(qhe);HBo=r(LFt,"mvp"),LFt.forEach(t),UBo=r(DSe," \u2014 "),nV=n(DSe,"A",{href:!0});var yFt=s(nV);JBo=r(yFt,"MvpForConditionalGeneration"),yFt.forEach(t),YBo=r(DSe," (MVP model)"),DSe.forEach(t),KBo=i(H),rv=n(H,"LI",{});var GSe=s(rv);jhe=n(GSe,"STRONG",{});var xFt=s(jhe);ZBo=r(xFt,"nezha"),xFt.forEach(t),eIo=r(GSe," \u2014 "),sV=n(GSe,"A",{href:!0});var $Ft=s(sV);oIo=r($Ft,"NezhaForMaskedLM"),$Ft.forEach(t),rIo=r(GSe," (Nezha model)"),GSe.forEach(t),tIo=i(H),tv=n(H,"LI",{});var OSe=s(tv);Dhe=n(OSe,"STRONG",{});var kFt=s(Dhe);aIo=r(kFt,"nystromformer"),kFt.forEach(t),nIo=r(OSe," \u2014 "),lV=n(OSe,"A",{href:!0});var SFt=s(lV);sIo=r(SFt,"NystromformerForMaskedLM"),SFt.forEach(t),lIo=r(OSe," (Nystr\xF6mformer model)"),OSe.forEach(t),iIo=i(H),av=n(H,"LI",{});var VSe=s(av);Ghe=n(VSe,"STRONG",{});var RFt=s(Ghe);dIo=r(RFt,"perceiver"),RFt.forEach(t),cIo=r(VSe," \u2014 "),iV=n(VSe,"A",{href:!0});var PFt=s(iV);mIo=r(PFt,"PerceiverForMaskedLM"),PFt.forEach(t),fIo=r(VSe," (Perceiver model)"),VSe.forEach(t),gIo=i(H),nv=n(H,"LI",{});var XSe=s(nv);Ohe=n(XSe,"STRONG",{});var BFt=s(Ohe);hIo=r(BFt,"qdqbert"),BFt.forEach(t),uIo=r(XSe," \u2014 "),dV=n(XSe,"A",{href:!0});var IFt=s(dV);pIo=r(IFt,"QDQBertForMaskedLM"),IFt.forEach(t),_Io=r(XSe," (QDQBert model)"),XSe.forEach(t),bIo=i(H),sv=n(H,"LI",{});var zSe=s(sv);Vhe=n(zSe,"STRONG",{});var NFt=s(Vhe);vIo=r(NFt,"reformer"),NFt.forEach(t),FIo=r(zSe," \u2014 "),cV=n(zSe,"A",{href:!0});var qFt=s(cV);TIo=r(qFt,"ReformerForMaskedLM"),qFt.forEach(t),MIo=r(zSe," (Reformer model)"),zSe.forEach(t),EIo=i(H),lv=n(H,"LI",{});var QSe=s(lv);Xhe=n(QSe,"STRONG",{});var jFt=s(Xhe);CIo=r(jFt,"rembert"),jFt.forEach(t),wIo=r(QSe," \u2014 "),mV=n(QSe,"A",{href:!0});var DFt=s(mV);AIo=r(DFt,"RemBertForMaskedLM"),DFt.forEach(t),LIo=r(QSe," (RemBERT model)"),QSe.forEach(t),yIo=i(H),iv=n(H,"LI",{});var WSe=s(iv);zhe=n(WSe,"STRONG",{});var GFt=s(zhe);xIo=r(GFt,"roberta"),GFt.forEach(t),$Io=r(WSe," \u2014 "),fV=n(WSe,"A",{href:!0});var OFt=s(fV);kIo=r(OFt,"RobertaForMaskedLM"),OFt.forEach(t),SIo=r(WSe," (RoBERTa model)"),WSe.forEach(t),RIo=i(H),dv=n(H,"LI",{});var HSe=s(dv);Qhe=n(HSe,"STRONG",{});var VFt=s(Qhe);PIo=r(VFt,"roformer"),VFt.forEach(t),BIo=r(HSe," \u2014 "),gV=n(HSe,"A",{href:!0});var XFt=s(gV);IIo=r(XFt,"RoFormerForMaskedLM"),XFt.forEach(t),NIo=r(HSe," (RoFormer model)"),HSe.forEach(t),qIo=i(H),cv=n(H,"LI",{});var USe=s(cv);Whe=n(USe,"STRONG",{});var zFt=s(Whe);jIo=r(zFt,"squeezebert"),zFt.forEach(t),DIo=r(USe," \u2014 "),hV=n(USe,"A",{href:!0});var QFt=s(hV);GIo=r(QFt,"SqueezeBertForMaskedLM"),QFt.forEach(t),OIo=r(USe," (SqueezeBERT model)"),USe.forEach(t),VIo=i(H),mv=n(H,"LI",{});var JSe=s(mv);Hhe=n(JSe,"STRONG",{});var WFt=s(Hhe);XIo=r(WFt,"tapas"),WFt.forEach(t),zIo=r(JSe," \u2014 "),uV=n(JSe,"A",{href:!0});var HFt=s(uV);QIo=r(HFt,"TapasForMaskedLM"),HFt.forEach(t),WIo=r(JSe," (TAPAS model)"),JSe.forEach(t),HIo=i(H),fv=n(H,"LI",{});var YSe=s(fv);Uhe=n(YSe,"STRONG",{});var UFt=s(Uhe);UIo=r(UFt,"wav2vec2"),UFt.forEach(t),JIo=r(YSe," \u2014 "),Jhe=n(YSe,"CODE",{});var JFt=s(Jhe);YIo=r(JFt,"Wav2Vec2ForMaskedLM"),JFt.forEach(t),KIo=r(YSe," (Wav2Vec2 model)"),YSe.forEach(t),ZIo=i(H),gv=n(H,"LI",{});var KSe=s(gv);Yhe=n(KSe,"STRONG",{});var YFt=s(Yhe);eNo=r(YFt,"xlm"),YFt.forEach(t),oNo=r(KSe," \u2014 "),pV=n(KSe,"A",{href:!0});var KFt=s(pV);rNo=r(KFt,"XLMWithLMHeadModel"),KFt.forEach(t),tNo=r(KSe," (XLM model)"),KSe.forEach(t),aNo=i(H),hv=n(H,"LI",{});var ZSe=s(hv);Khe=n(ZSe,"STRONG",{});var ZFt=s(Khe);nNo=r(ZFt,"xlm-roberta"),ZFt.forEach(t),sNo=r(ZSe," \u2014 "),_V=n(ZSe,"A",{href:!0});var eTt=s(_V);lNo=r(eTt,"XLMRobertaForMaskedLM"),eTt.forEach(t),iNo=r(ZSe," (XLM-RoBERTa model)"),ZSe.forEach(t),dNo=i(H),uv=n(H,"LI",{});var eRe=s(uv);Zhe=n(eRe,"STRONG",{});var oTt=s(Zhe);cNo=r(oTt,"xlm-roberta-xl"),oTt.forEach(t),mNo=r(eRe," \u2014 "),bV=n(eRe,"A",{href:!0});var rTt=s(bV);fNo=r(rTt,"XLMRobertaXLForMaskedLM"),rTt.forEach(t),gNo=r(eRe," (XLM-RoBERTa-XL model)"),eRe.forEach(t),hNo=i(H),pv=n(H,"LI",{});var oRe=s(pv);eue=n(oRe,"STRONG",{});var tTt=s(eue);uNo=r(tTt,"yoso"),tTt.forEach(t),pNo=r(oRe," \u2014 "),vV=n(oRe,"A",{href:!0});var aTt=s(vV);_No=r(aTt,"YosoForMaskedLM"),aTt.forEach(t),bNo=r(oRe," (YOSO model)"),oRe.forEach(t),H.forEach(t),vNo=i(da),_v=n(da,"P",{});var rRe=s(_v);FNo=r(rRe,"The model is set in evaluation mode by default using "),oue=n(rRe,"CODE",{});var nTt=s(oue);TNo=r(nTt,"model.eval()"),nTt.forEach(t),MNo=r(rRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rue=n(rRe,"CODE",{});var sTt=s(rue);ENo=r(sTt,"model.train()"),sTt.forEach(t),rRe.forEach(t),CNo=i(da),T(bv.$$.fragment,da),da.forEach(t),al.forEach(t),dXe=i(m),Ki=n(m,"H2",{class:!0});var uQe=s(Ki);vv=n(uQe,"A",{id:!0,class:!0,href:!0});var lTt=s(vv);tue=n(lTt,"SPAN",{});var iTt=s(tue);T(Hy.$$.fragment,iTt),iTt.forEach(t),lTt.forEach(t),wNo=i(uQe),aue=n(uQe,"SPAN",{});var dTt=s(aue);ANo=r(dTt,"AutoModelForSeq2SeqLM"),dTt.forEach(t),uQe.forEach(t),cXe=i(m),Ro=n(m,"DIV",{class:!0});var nl=s(Ro);T(Uy.$$.fragment,nl),LNo=i(nl),Zi=n(nl,"P",{});var Rre=s(Zi);yNo=r(Rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),FV=n(Rre,"A",{href:!0});var cTt=s(FV);xNo=r(cTt,"from_pretrained()"),cTt.forEach(t),$No=r(Rre," class method or the "),TV=n(Rre,"A",{href:!0});var mTt=s(TV);kNo=r(mTt,"from_config()"),mTt.forEach(t),SNo=r(Rre,` class
method.`),Rre.forEach(t),RNo=i(nl),Jy=n(nl,"P",{});var pQe=s(Jy);PNo=r(pQe,"This class cannot be instantiated directly using "),nue=n(pQe,"CODE",{});var fTt=s(nue);BNo=r(fTt,"__init__()"),fTt.forEach(t),INo=r(pQe," (throws an error)."),pQe.forEach(t),NNo=i(nl),mt=n(nl,"DIV",{class:!0});var h7=s(mt);T(Yy.$$.fragment,h7),qNo=i(h7),sue=n(h7,"P",{});var gTt=s(sue);jNo=r(gTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gTt.forEach(t),DNo=i(h7),ed=n(h7,"P",{});var Pre=s(ed);GNo=r(Pre,`Note:
Loading a model from its configuration file does `),lue=n(Pre,"STRONG",{});var hTt=s(lue);ONo=r(hTt,"not"),hTt.forEach(t),VNo=r(Pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=n(Pre,"A",{href:!0});var uTt=s(MV);XNo=r(uTt,"from_pretrained()"),uTt.forEach(t),zNo=r(Pre," to load the model weights."),Pre.forEach(t),QNo=i(h7),T(Fv.$$.fragment,h7),h7.forEach(t),WNo=i(nl),eo=n(nl,"DIV",{class:!0});var ca=s(eo);T(Ky.$$.fragment,ca),HNo=i(ca),iue=n(ca,"P",{});var pTt=s(iue);UNo=r(pTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pTt.forEach(t),JNo=i(ca),Da=n(ca,"P",{});var u7=s(Da);YNo=r(u7,"The model class to instantiate is selected based on the "),due=n(u7,"CODE",{});var _Tt=s(due);KNo=r(_Tt,"model_type"),_Tt.forEach(t),ZNo=r(u7,` property of the config object (either
passed as an argument or loaded from `),cue=n(u7,"CODE",{});var bTt=s(cue);eqo=r(bTt,"pretrained_model_name_or_path"),bTt.forEach(t),oqo=r(u7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mue=n(u7,"CODE",{});var vTt=s(mue);rqo=r(vTt,"pretrained_model_name_or_path"),vTt.forEach(t),tqo=r(u7,":"),u7.forEach(t),aqo=i(ca),ue=n(ca,"UL",{});var be=s(ue);Tv=n(be,"LI",{});var tRe=s(Tv);fue=n(tRe,"STRONG",{});var FTt=s(fue);nqo=r(FTt,"bart"),FTt.forEach(t),sqo=r(tRe," \u2014 "),EV=n(tRe,"A",{href:!0});var TTt=s(EV);lqo=r(TTt,"BartForConditionalGeneration"),TTt.forEach(t),iqo=r(tRe," (BART model)"),tRe.forEach(t),dqo=i(be),Mv=n(be,"LI",{});var aRe=s(Mv);gue=n(aRe,"STRONG",{});var MTt=s(gue);cqo=r(MTt,"bigbird_pegasus"),MTt.forEach(t),mqo=r(aRe," \u2014 "),CV=n(aRe,"A",{href:!0});var ETt=s(CV);fqo=r(ETt,"BigBirdPegasusForConditionalGeneration"),ETt.forEach(t),gqo=r(aRe," (BigBird-Pegasus model)"),aRe.forEach(t),hqo=i(be),Ev=n(be,"LI",{});var nRe=s(Ev);hue=n(nRe,"STRONG",{});var CTt=s(hue);uqo=r(CTt,"blenderbot"),CTt.forEach(t),pqo=r(nRe," \u2014 "),wV=n(nRe,"A",{href:!0});var wTt=s(wV);_qo=r(wTt,"BlenderbotForConditionalGeneration"),wTt.forEach(t),bqo=r(nRe," (Blenderbot model)"),nRe.forEach(t),vqo=i(be),Cv=n(be,"LI",{});var sRe=s(Cv);uue=n(sRe,"STRONG",{});var ATt=s(uue);Fqo=r(ATt,"blenderbot-small"),ATt.forEach(t),Tqo=r(sRe," \u2014 "),AV=n(sRe,"A",{href:!0});var LTt=s(AV);Mqo=r(LTt,"BlenderbotSmallForConditionalGeneration"),LTt.forEach(t),Eqo=r(sRe," (BlenderbotSmall model)"),sRe.forEach(t),Cqo=i(be),wv=n(be,"LI",{});var lRe=s(wv);pue=n(lRe,"STRONG",{});var yTt=s(pue);wqo=r(yTt,"encoder-decoder"),yTt.forEach(t),Aqo=r(lRe," \u2014 "),LV=n(lRe,"A",{href:!0});var xTt=s(LV);Lqo=r(xTt,"EncoderDecoderModel"),xTt.forEach(t),yqo=r(lRe," (Encoder decoder model)"),lRe.forEach(t),xqo=i(be),Av=n(be,"LI",{});var iRe=s(Av);_ue=n(iRe,"STRONG",{});var $Tt=s(_ue);$qo=r($Tt,"fsmt"),$Tt.forEach(t),kqo=r(iRe," \u2014 "),yV=n(iRe,"A",{href:!0});var kTt=s(yV);Sqo=r(kTt,"FSMTForConditionalGeneration"),kTt.forEach(t),Rqo=r(iRe," (FairSeq Machine-Translation model)"),iRe.forEach(t),Pqo=i(be),Lv=n(be,"LI",{});var dRe=s(Lv);bue=n(dRe,"STRONG",{});var STt=s(bue);Bqo=r(STt,"led"),STt.forEach(t),Iqo=r(dRe," \u2014 "),xV=n(dRe,"A",{href:!0});var RTt=s(xV);Nqo=r(RTt,"LEDForConditionalGeneration"),RTt.forEach(t),qqo=r(dRe," (LED model)"),dRe.forEach(t),jqo=i(be),yv=n(be,"LI",{});var cRe=s(yv);vue=n(cRe,"STRONG",{});var PTt=s(vue);Dqo=r(PTt,"longt5"),PTt.forEach(t),Gqo=r(cRe," \u2014 "),$V=n(cRe,"A",{href:!0});var BTt=s($V);Oqo=r(BTt,"LongT5ForConditionalGeneration"),BTt.forEach(t),Vqo=r(cRe," (LongT5 model)"),cRe.forEach(t),Xqo=i(be),xv=n(be,"LI",{});var mRe=s(xv);Fue=n(mRe,"STRONG",{});var ITt=s(Fue);zqo=r(ITt,"m2m_100"),ITt.forEach(t),Qqo=r(mRe," \u2014 "),kV=n(mRe,"A",{href:!0});var NTt=s(kV);Wqo=r(NTt,"M2M100ForConditionalGeneration"),NTt.forEach(t),Hqo=r(mRe," (M2M100 model)"),mRe.forEach(t),Uqo=i(be),$v=n(be,"LI",{});var fRe=s($v);Tue=n(fRe,"STRONG",{});var qTt=s(Tue);Jqo=r(qTt,"marian"),qTt.forEach(t),Yqo=r(fRe," \u2014 "),SV=n(fRe,"A",{href:!0});var jTt=s(SV);Kqo=r(jTt,"MarianMTModel"),jTt.forEach(t),Zqo=r(fRe," (Marian model)"),fRe.forEach(t),ejo=i(be),kv=n(be,"LI",{});var gRe=s(kv);Mue=n(gRe,"STRONG",{});var DTt=s(Mue);ojo=r(DTt,"mbart"),DTt.forEach(t),rjo=r(gRe," \u2014 "),RV=n(gRe,"A",{href:!0});var GTt=s(RV);tjo=r(GTt,"MBartForConditionalGeneration"),GTt.forEach(t),ajo=r(gRe," (mBART model)"),gRe.forEach(t),njo=i(be),Sv=n(be,"LI",{});var hRe=s(Sv);Eue=n(hRe,"STRONG",{});var OTt=s(Eue);sjo=r(OTt,"mt5"),OTt.forEach(t),ljo=r(hRe," \u2014 "),PV=n(hRe,"A",{href:!0});var VTt=s(PV);ijo=r(VTt,"MT5ForConditionalGeneration"),VTt.forEach(t),djo=r(hRe," (MT5 model)"),hRe.forEach(t),cjo=i(be),Rv=n(be,"LI",{});var uRe=s(Rv);Cue=n(uRe,"STRONG",{});var XTt=s(Cue);mjo=r(XTt,"mvp"),XTt.forEach(t),fjo=r(uRe," \u2014 "),BV=n(uRe,"A",{href:!0});var zTt=s(BV);gjo=r(zTt,"MvpForConditionalGeneration"),zTt.forEach(t),hjo=r(uRe," (MVP model)"),uRe.forEach(t),ujo=i(be),Pv=n(be,"LI",{});var pRe=s(Pv);wue=n(pRe,"STRONG",{});var QTt=s(wue);pjo=r(QTt,"pegasus"),QTt.forEach(t),_jo=r(pRe," \u2014 "),IV=n(pRe,"A",{href:!0});var WTt=s(IV);bjo=r(WTt,"PegasusForConditionalGeneration"),WTt.forEach(t),vjo=r(pRe," (Pegasus model)"),pRe.forEach(t),Fjo=i(be),Bv=n(be,"LI",{});var _Re=s(Bv);Aue=n(_Re,"STRONG",{});var HTt=s(Aue);Tjo=r(HTt,"plbart"),HTt.forEach(t),Mjo=r(_Re," \u2014 "),NV=n(_Re,"A",{href:!0});var UTt=s(NV);Ejo=r(UTt,"PLBartForConditionalGeneration"),UTt.forEach(t),Cjo=r(_Re," (PLBart model)"),_Re.forEach(t),wjo=i(be),Iv=n(be,"LI",{});var bRe=s(Iv);Lue=n(bRe,"STRONG",{});var JTt=s(Lue);Ajo=r(JTt,"prophetnet"),JTt.forEach(t),Ljo=r(bRe," \u2014 "),qV=n(bRe,"A",{href:!0});var YTt=s(qV);yjo=r(YTt,"ProphetNetForConditionalGeneration"),YTt.forEach(t),xjo=r(bRe," (ProphetNet model)"),bRe.forEach(t),$jo=i(be),Nv=n(be,"LI",{});var vRe=s(Nv);yue=n(vRe,"STRONG",{});var KTt=s(yue);kjo=r(KTt,"t5"),KTt.forEach(t),Sjo=r(vRe," \u2014 "),jV=n(vRe,"A",{href:!0});var ZTt=s(jV);Rjo=r(ZTt,"T5ForConditionalGeneration"),ZTt.forEach(t),Pjo=r(vRe," (T5 model)"),vRe.forEach(t),Bjo=i(be),qv=n(be,"LI",{});var FRe=s(qv);xue=n(FRe,"STRONG",{});var eMt=s(xue);Ijo=r(eMt,"xlm-prophetnet"),eMt.forEach(t),Njo=r(FRe," \u2014 "),DV=n(FRe,"A",{href:!0});var oMt=s(DV);qjo=r(oMt,"XLMProphetNetForConditionalGeneration"),oMt.forEach(t),jjo=r(FRe," (XLM-ProphetNet model)"),FRe.forEach(t),be.forEach(t),Djo=i(ca),jv=n(ca,"P",{});var TRe=s(jv);Gjo=r(TRe,"The model is set in evaluation mode by default using "),$ue=n(TRe,"CODE",{});var rMt=s($ue);Ojo=r(rMt,"model.eval()"),rMt.forEach(t),Vjo=r(TRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kue=n(TRe,"CODE",{});var tMt=s(kue);Xjo=r(tMt,"model.train()"),tMt.forEach(t),TRe.forEach(t),zjo=i(ca),T(Dv.$$.fragment,ca),ca.forEach(t),nl.forEach(t),mXe=i(m),od=n(m,"H2",{class:!0});var _Qe=s(od);Gv=n(_Qe,"A",{id:!0,class:!0,href:!0});var aMt=s(Gv);Sue=n(aMt,"SPAN",{});var nMt=s(Sue);T(Zy.$$.fragment,nMt),nMt.forEach(t),aMt.forEach(t),Qjo=i(_Qe),Rue=n(_Qe,"SPAN",{});var sMt=s(Rue);Wjo=r(sMt,"AutoModelForSequenceClassification"),sMt.forEach(t),_Qe.forEach(t),fXe=i(m),Po=n(m,"DIV",{class:!0});var sl=s(Po);T(e8.$$.fragment,sl),Hjo=i(sl),rd=n(sl,"P",{});var Bre=s(rd);Ujo=r(Bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GV=n(Bre,"A",{href:!0});var lMt=s(GV);Jjo=r(lMt,"from_pretrained()"),lMt.forEach(t),Yjo=r(Bre," class method or the "),OV=n(Bre,"A",{href:!0});var iMt=s(OV);Kjo=r(iMt,"from_config()"),iMt.forEach(t),Zjo=r(Bre,` class
method.`),Bre.forEach(t),eDo=i(sl),o8=n(sl,"P",{});var bQe=s(o8);oDo=r(bQe,"This class cannot be instantiated directly using "),Pue=n(bQe,"CODE",{});var dMt=s(Pue);rDo=r(dMt,"__init__()"),dMt.forEach(t),tDo=r(bQe," (throws an error)."),bQe.forEach(t),aDo=i(sl),ft=n(sl,"DIV",{class:!0});var p7=s(ft);T(r8.$$.fragment,p7),nDo=i(p7),Bue=n(p7,"P",{});var cMt=s(Bue);sDo=r(cMt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cMt.forEach(t),lDo=i(p7),td=n(p7,"P",{});var Ire=s(td);iDo=r(Ire,`Note:
Loading a model from its configuration file does `),Iue=n(Ire,"STRONG",{});var mMt=s(Iue);dDo=r(mMt,"not"),mMt.forEach(t),cDo=r(Ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=n(Ire,"A",{href:!0});var fMt=s(VV);mDo=r(fMt,"from_pretrained()"),fMt.forEach(t),fDo=r(Ire," to load the model weights."),Ire.forEach(t),gDo=i(p7),T(Ov.$$.fragment,p7),p7.forEach(t),hDo=i(sl),oo=n(sl,"DIV",{class:!0});var ma=s(oo);T(t8.$$.fragment,ma),uDo=i(ma),Nue=n(ma,"P",{});var gMt=s(Nue);pDo=r(gMt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gMt.forEach(t),_Do=i(ma),Ga=n(ma,"P",{});var _7=s(Ga);bDo=r(_7,"The model class to instantiate is selected based on the "),que=n(_7,"CODE",{});var hMt=s(que);vDo=r(hMt,"model_type"),hMt.forEach(t),FDo=r(_7,` property of the config object (either
passed as an argument or loaded from `),jue=n(_7,"CODE",{});var uMt=s(jue);TDo=r(uMt,"pretrained_model_name_or_path"),uMt.forEach(t),MDo=r(_7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Due=n(_7,"CODE",{});var pMt=s(Due);EDo=r(pMt,"pretrained_model_name_or_path"),pMt.forEach(t),CDo=r(_7,":"),_7.forEach(t),wDo=i(ma),N=n(ma,"UL",{});var j=s(N);Vv=n(j,"LI",{});var MRe=s(Vv);Gue=n(MRe,"STRONG",{});var _Mt=s(Gue);ADo=r(_Mt,"albert"),_Mt.forEach(t),LDo=r(MRe," \u2014 "),XV=n(MRe,"A",{href:!0});var bMt=s(XV);yDo=r(bMt,"AlbertForSequenceClassification"),bMt.forEach(t),xDo=r(MRe," (ALBERT model)"),MRe.forEach(t),$Do=i(j),Xv=n(j,"LI",{});var ERe=s(Xv);Oue=n(ERe,"STRONG",{});var vMt=s(Oue);kDo=r(vMt,"bart"),vMt.forEach(t),SDo=r(ERe," \u2014 "),zV=n(ERe,"A",{href:!0});var FMt=s(zV);RDo=r(FMt,"BartForSequenceClassification"),FMt.forEach(t),PDo=r(ERe," (BART model)"),ERe.forEach(t),BDo=i(j),zv=n(j,"LI",{});var CRe=s(zv);Vue=n(CRe,"STRONG",{});var TMt=s(Vue);IDo=r(TMt,"bert"),TMt.forEach(t),NDo=r(CRe," \u2014 "),QV=n(CRe,"A",{href:!0});var MMt=s(QV);qDo=r(MMt,"BertForSequenceClassification"),MMt.forEach(t),jDo=r(CRe," (BERT model)"),CRe.forEach(t),DDo=i(j),Qv=n(j,"LI",{});var wRe=s(Qv);Xue=n(wRe,"STRONG",{});var EMt=s(Xue);GDo=r(EMt,"big_bird"),EMt.forEach(t),ODo=r(wRe," \u2014 "),WV=n(wRe,"A",{href:!0});var CMt=s(WV);VDo=r(CMt,"BigBirdForSequenceClassification"),CMt.forEach(t),XDo=r(wRe," (BigBird model)"),wRe.forEach(t),zDo=i(j),Wv=n(j,"LI",{});var ARe=s(Wv);zue=n(ARe,"STRONG",{});var wMt=s(zue);QDo=r(wMt,"bigbird_pegasus"),wMt.forEach(t),WDo=r(ARe," \u2014 "),HV=n(ARe,"A",{href:!0});var AMt=s(HV);HDo=r(AMt,"BigBirdPegasusForSequenceClassification"),AMt.forEach(t),UDo=r(ARe," (BigBird-Pegasus model)"),ARe.forEach(t),JDo=i(j),Hv=n(j,"LI",{});var LRe=s(Hv);Que=n(LRe,"STRONG",{});var LMt=s(Que);YDo=r(LMt,"bloom"),LMt.forEach(t),KDo=r(LRe," \u2014 "),UV=n(LRe,"A",{href:!0});var yMt=s(UV);ZDo=r(yMt,"BloomForSequenceClassification"),yMt.forEach(t),eGo=r(LRe," (BLOOM model)"),LRe.forEach(t),oGo=i(j),Uv=n(j,"LI",{});var yRe=s(Uv);Wue=n(yRe,"STRONG",{});var xMt=s(Wue);rGo=r(xMt,"camembert"),xMt.forEach(t),tGo=r(yRe," \u2014 "),JV=n(yRe,"A",{href:!0});var $Mt=s(JV);aGo=r($Mt,"CamembertForSequenceClassification"),$Mt.forEach(t),nGo=r(yRe," (CamemBERT model)"),yRe.forEach(t),sGo=i(j),Jv=n(j,"LI",{});var xRe=s(Jv);Hue=n(xRe,"STRONG",{});var kMt=s(Hue);lGo=r(kMt,"canine"),kMt.forEach(t),iGo=r(xRe," \u2014 "),YV=n(xRe,"A",{href:!0});var SMt=s(YV);dGo=r(SMt,"CanineForSequenceClassification"),SMt.forEach(t),cGo=r(xRe," (CANINE model)"),xRe.forEach(t),mGo=i(j),Yv=n(j,"LI",{});var $Re=s(Yv);Uue=n($Re,"STRONG",{});var RMt=s(Uue);fGo=r(RMt,"convbert"),RMt.forEach(t),gGo=r($Re," \u2014 "),KV=n($Re,"A",{href:!0});var PMt=s(KV);hGo=r(PMt,"ConvBertForSequenceClassification"),PMt.forEach(t),uGo=r($Re," (ConvBERT model)"),$Re.forEach(t),pGo=i(j),Kv=n(j,"LI",{});var kRe=s(Kv);Jue=n(kRe,"STRONG",{});var BMt=s(Jue);_Go=r(BMt,"ctrl"),BMt.forEach(t),bGo=r(kRe," \u2014 "),ZV=n(kRe,"A",{href:!0});var IMt=s(ZV);vGo=r(IMt,"CTRLForSequenceClassification"),IMt.forEach(t),FGo=r(kRe," (CTRL model)"),kRe.forEach(t),TGo=i(j),Zv=n(j,"LI",{});var SRe=s(Zv);Yue=n(SRe,"STRONG",{});var NMt=s(Yue);MGo=r(NMt,"data2vec-text"),NMt.forEach(t),EGo=r(SRe," \u2014 "),eX=n(SRe,"A",{href:!0});var qMt=s(eX);CGo=r(qMt,"Data2VecTextForSequenceClassification"),qMt.forEach(t),wGo=r(SRe," (Data2VecText model)"),SRe.forEach(t),AGo=i(j),e1=n(j,"LI",{});var RRe=s(e1);Kue=n(RRe,"STRONG",{});var jMt=s(Kue);LGo=r(jMt,"deberta"),jMt.forEach(t),yGo=r(RRe," \u2014 "),oX=n(RRe,"A",{href:!0});var DMt=s(oX);xGo=r(DMt,"DebertaForSequenceClassification"),DMt.forEach(t),$Go=r(RRe," (DeBERTa model)"),RRe.forEach(t),kGo=i(j),o1=n(j,"LI",{});var PRe=s(o1);Zue=n(PRe,"STRONG",{});var GMt=s(Zue);SGo=r(GMt,"deberta-v2"),GMt.forEach(t),RGo=r(PRe," \u2014 "),rX=n(PRe,"A",{href:!0});var OMt=s(rX);PGo=r(OMt,"DebertaV2ForSequenceClassification"),OMt.forEach(t),BGo=r(PRe," (DeBERTa-v2 model)"),PRe.forEach(t),IGo=i(j),r1=n(j,"LI",{});var BRe=s(r1);epe=n(BRe,"STRONG",{});var VMt=s(epe);NGo=r(VMt,"distilbert"),VMt.forEach(t),qGo=r(BRe," \u2014 "),tX=n(BRe,"A",{href:!0});var XMt=s(tX);jGo=r(XMt,"DistilBertForSequenceClassification"),XMt.forEach(t),DGo=r(BRe," (DistilBERT model)"),BRe.forEach(t),GGo=i(j),t1=n(j,"LI",{});var IRe=s(t1);ope=n(IRe,"STRONG",{});var zMt=s(ope);OGo=r(zMt,"electra"),zMt.forEach(t),VGo=r(IRe," \u2014 "),aX=n(IRe,"A",{href:!0});var QMt=s(aX);XGo=r(QMt,"ElectraForSequenceClassification"),QMt.forEach(t),zGo=r(IRe," (ELECTRA model)"),IRe.forEach(t),QGo=i(j),a1=n(j,"LI",{});var NRe=s(a1);rpe=n(NRe,"STRONG",{});var WMt=s(rpe);WGo=r(WMt,"flaubert"),WMt.forEach(t),HGo=r(NRe," \u2014 "),nX=n(NRe,"A",{href:!0});var HMt=s(nX);UGo=r(HMt,"FlaubertForSequenceClassification"),HMt.forEach(t),JGo=r(NRe," (FlauBERT model)"),NRe.forEach(t),YGo=i(j),n1=n(j,"LI",{});var qRe=s(n1);tpe=n(qRe,"STRONG",{});var UMt=s(tpe);KGo=r(UMt,"fnet"),UMt.forEach(t),ZGo=r(qRe," \u2014 "),sX=n(qRe,"A",{href:!0});var JMt=s(sX);eOo=r(JMt,"FNetForSequenceClassification"),JMt.forEach(t),oOo=r(qRe," (FNet model)"),qRe.forEach(t),rOo=i(j),s1=n(j,"LI",{});var jRe=s(s1);ape=n(jRe,"STRONG",{});var YMt=s(ape);tOo=r(YMt,"funnel"),YMt.forEach(t),aOo=r(jRe," \u2014 "),lX=n(jRe,"A",{href:!0});var KMt=s(lX);nOo=r(KMt,"FunnelForSequenceClassification"),KMt.forEach(t),sOo=r(jRe," (Funnel Transformer model)"),jRe.forEach(t),lOo=i(j),l1=n(j,"LI",{});var DRe=s(l1);npe=n(DRe,"STRONG",{});var ZMt=s(npe);iOo=r(ZMt,"gpt2"),ZMt.forEach(t),dOo=r(DRe," \u2014 "),iX=n(DRe,"A",{href:!0});var e4t=s(iX);cOo=r(e4t,"GPT2ForSequenceClassification"),e4t.forEach(t),mOo=r(DRe," (OpenAI GPT-2 model)"),DRe.forEach(t),fOo=i(j),i1=n(j,"LI",{});var GRe=s(i1);spe=n(GRe,"STRONG",{});var o4t=s(spe);gOo=r(o4t,"gpt_neo"),o4t.forEach(t),hOo=r(GRe," \u2014 "),dX=n(GRe,"A",{href:!0});var r4t=s(dX);uOo=r(r4t,"GPTNeoForSequenceClassification"),r4t.forEach(t),pOo=r(GRe," (GPT Neo model)"),GRe.forEach(t),_Oo=i(j),d1=n(j,"LI",{});var ORe=s(d1);lpe=n(ORe,"STRONG",{});var t4t=s(lpe);bOo=r(t4t,"gptj"),t4t.forEach(t),vOo=r(ORe," \u2014 "),cX=n(ORe,"A",{href:!0});var a4t=s(cX);FOo=r(a4t,"GPTJForSequenceClassification"),a4t.forEach(t),TOo=r(ORe," (GPT-J model)"),ORe.forEach(t),MOo=i(j),c1=n(j,"LI",{});var VRe=s(c1);ipe=n(VRe,"STRONG",{});var n4t=s(ipe);EOo=r(n4t,"ibert"),n4t.forEach(t),COo=r(VRe," \u2014 "),mX=n(VRe,"A",{href:!0});var s4t=s(mX);wOo=r(s4t,"IBertForSequenceClassification"),s4t.forEach(t),AOo=r(VRe," (I-BERT model)"),VRe.forEach(t),LOo=i(j),m1=n(j,"LI",{});var XRe=s(m1);dpe=n(XRe,"STRONG",{});var l4t=s(dpe);yOo=r(l4t,"layoutlm"),l4t.forEach(t),xOo=r(XRe," \u2014 "),fX=n(XRe,"A",{href:!0});var i4t=s(fX);$Oo=r(i4t,"LayoutLMForSequenceClassification"),i4t.forEach(t),kOo=r(XRe," (LayoutLM model)"),XRe.forEach(t),SOo=i(j),f1=n(j,"LI",{});var zRe=s(f1);cpe=n(zRe,"STRONG",{});var d4t=s(cpe);ROo=r(d4t,"layoutlmv2"),d4t.forEach(t),POo=r(zRe," \u2014 "),gX=n(zRe,"A",{href:!0});var c4t=s(gX);BOo=r(c4t,"LayoutLMv2ForSequenceClassification"),c4t.forEach(t),IOo=r(zRe," (LayoutLMv2 model)"),zRe.forEach(t),NOo=i(j),g1=n(j,"LI",{});var QRe=s(g1);mpe=n(QRe,"STRONG",{});var m4t=s(mpe);qOo=r(m4t,"layoutlmv3"),m4t.forEach(t),jOo=r(QRe," \u2014 "),hX=n(QRe,"A",{href:!0});var f4t=s(hX);DOo=r(f4t,"LayoutLMv3ForSequenceClassification"),f4t.forEach(t),GOo=r(QRe," (LayoutLMv3 model)"),QRe.forEach(t),OOo=i(j),h1=n(j,"LI",{});var WRe=s(h1);fpe=n(WRe,"STRONG",{});var g4t=s(fpe);VOo=r(g4t,"led"),g4t.forEach(t),XOo=r(WRe," \u2014 "),uX=n(WRe,"A",{href:!0});var h4t=s(uX);zOo=r(h4t,"LEDForSequenceClassification"),h4t.forEach(t),QOo=r(WRe," (LED model)"),WRe.forEach(t),WOo=i(j),u1=n(j,"LI",{});var HRe=s(u1);gpe=n(HRe,"STRONG",{});var u4t=s(gpe);HOo=r(u4t,"longformer"),u4t.forEach(t),UOo=r(HRe," \u2014 "),pX=n(HRe,"A",{href:!0});var p4t=s(pX);JOo=r(p4t,"LongformerForSequenceClassification"),p4t.forEach(t),YOo=r(HRe," (Longformer model)"),HRe.forEach(t),KOo=i(j),p1=n(j,"LI",{});var URe=s(p1);hpe=n(URe,"STRONG",{});var _4t=s(hpe);ZOo=r(_4t,"mbart"),_4t.forEach(t),eVo=r(URe," \u2014 "),_X=n(URe,"A",{href:!0});var b4t=s(_X);oVo=r(b4t,"MBartForSequenceClassification"),b4t.forEach(t),rVo=r(URe," (mBART model)"),URe.forEach(t),tVo=i(j),_1=n(j,"LI",{});var JRe=s(_1);upe=n(JRe,"STRONG",{});var v4t=s(upe);aVo=r(v4t,"megatron-bert"),v4t.forEach(t),nVo=r(JRe," \u2014 "),bX=n(JRe,"A",{href:!0});var F4t=s(bX);sVo=r(F4t,"MegatronBertForSequenceClassification"),F4t.forEach(t),lVo=r(JRe," (Megatron-BERT model)"),JRe.forEach(t),iVo=i(j),b1=n(j,"LI",{});var YRe=s(b1);ppe=n(YRe,"STRONG",{});var T4t=s(ppe);dVo=r(T4t,"mobilebert"),T4t.forEach(t),cVo=r(YRe," \u2014 "),vX=n(YRe,"A",{href:!0});var M4t=s(vX);mVo=r(M4t,"MobileBertForSequenceClassification"),M4t.forEach(t),fVo=r(YRe," (MobileBERT model)"),YRe.forEach(t),gVo=i(j),v1=n(j,"LI",{});var KRe=s(v1);_pe=n(KRe,"STRONG",{});var E4t=s(_pe);hVo=r(E4t,"mpnet"),E4t.forEach(t),uVo=r(KRe," \u2014 "),FX=n(KRe,"A",{href:!0});var C4t=s(FX);pVo=r(C4t,"MPNetForSequenceClassification"),C4t.forEach(t),_Vo=r(KRe," (MPNet model)"),KRe.forEach(t),bVo=i(j),F1=n(j,"LI",{});var ZRe=s(F1);bpe=n(ZRe,"STRONG",{});var w4t=s(bpe);vVo=r(w4t,"mvp"),w4t.forEach(t),FVo=r(ZRe," \u2014 "),TX=n(ZRe,"A",{href:!0});var A4t=s(TX);TVo=r(A4t,"MvpForSequenceClassification"),A4t.forEach(t),MVo=r(ZRe," (MVP model)"),ZRe.forEach(t),EVo=i(j),T1=n(j,"LI",{});var ePe=s(T1);vpe=n(ePe,"STRONG",{});var L4t=s(vpe);CVo=r(L4t,"nezha"),L4t.forEach(t),wVo=r(ePe," \u2014 "),MX=n(ePe,"A",{href:!0});var y4t=s(MX);AVo=r(y4t,"NezhaForSequenceClassification"),y4t.forEach(t),LVo=r(ePe," (Nezha model)"),ePe.forEach(t),yVo=i(j),M1=n(j,"LI",{});var oPe=s(M1);Fpe=n(oPe,"STRONG",{});var x4t=s(Fpe);xVo=r(x4t,"nystromformer"),x4t.forEach(t),$Vo=r(oPe," \u2014 "),EX=n(oPe,"A",{href:!0});var $4t=s(EX);kVo=r($4t,"NystromformerForSequenceClassification"),$4t.forEach(t),SVo=r(oPe," (Nystr\xF6mformer model)"),oPe.forEach(t),RVo=i(j),E1=n(j,"LI",{});var rPe=s(E1);Tpe=n(rPe,"STRONG",{});var k4t=s(Tpe);PVo=r(k4t,"openai-gpt"),k4t.forEach(t),BVo=r(rPe," \u2014 "),CX=n(rPe,"A",{href:!0});var S4t=s(CX);IVo=r(S4t,"OpenAIGPTForSequenceClassification"),S4t.forEach(t),NVo=r(rPe," (OpenAI GPT model)"),rPe.forEach(t),qVo=i(j),C1=n(j,"LI",{});var tPe=s(C1);Mpe=n(tPe,"STRONG",{});var R4t=s(Mpe);jVo=r(R4t,"perceiver"),R4t.forEach(t),DVo=r(tPe," \u2014 "),wX=n(tPe,"A",{href:!0});var P4t=s(wX);GVo=r(P4t,"PerceiverForSequenceClassification"),P4t.forEach(t),OVo=r(tPe," (Perceiver model)"),tPe.forEach(t),VVo=i(j),w1=n(j,"LI",{});var aPe=s(w1);Epe=n(aPe,"STRONG",{});var B4t=s(Epe);XVo=r(B4t,"plbart"),B4t.forEach(t),zVo=r(aPe," \u2014 "),AX=n(aPe,"A",{href:!0});var I4t=s(AX);QVo=r(I4t,"PLBartForSequenceClassification"),I4t.forEach(t),WVo=r(aPe," (PLBart model)"),aPe.forEach(t),HVo=i(j),A1=n(j,"LI",{});var nPe=s(A1);Cpe=n(nPe,"STRONG",{});var N4t=s(Cpe);UVo=r(N4t,"qdqbert"),N4t.forEach(t),JVo=r(nPe," \u2014 "),LX=n(nPe,"A",{href:!0});var q4t=s(LX);YVo=r(q4t,"QDQBertForSequenceClassification"),q4t.forEach(t),KVo=r(nPe," (QDQBert model)"),nPe.forEach(t),ZVo=i(j),L1=n(j,"LI",{});var sPe=s(L1);wpe=n(sPe,"STRONG",{});var j4t=s(wpe);eXo=r(j4t,"reformer"),j4t.forEach(t),oXo=r(sPe," \u2014 "),yX=n(sPe,"A",{href:!0});var D4t=s(yX);rXo=r(D4t,"ReformerForSequenceClassification"),D4t.forEach(t),tXo=r(sPe," (Reformer model)"),sPe.forEach(t),aXo=i(j),y1=n(j,"LI",{});var lPe=s(y1);Ape=n(lPe,"STRONG",{});var G4t=s(Ape);nXo=r(G4t,"rembert"),G4t.forEach(t),sXo=r(lPe," \u2014 "),xX=n(lPe,"A",{href:!0});var O4t=s(xX);lXo=r(O4t,"RemBertForSequenceClassification"),O4t.forEach(t),iXo=r(lPe," (RemBERT model)"),lPe.forEach(t),dXo=i(j),x1=n(j,"LI",{});var iPe=s(x1);Lpe=n(iPe,"STRONG",{});var V4t=s(Lpe);cXo=r(V4t,"roberta"),V4t.forEach(t),mXo=r(iPe," \u2014 "),$X=n(iPe,"A",{href:!0});var X4t=s($X);fXo=r(X4t,"RobertaForSequenceClassification"),X4t.forEach(t),gXo=r(iPe," (RoBERTa model)"),iPe.forEach(t),hXo=i(j),$1=n(j,"LI",{});var dPe=s($1);ype=n(dPe,"STRONG",{});var z4t=s(ype);uXo=r(z4t,"roformer"),z4t.forEach(t),pXo=r(dPe," \u2014 "),kX=n(dPe,"A",{href:!0});var Q4t=s(kX);_Xo=r(Q4t,"RoFormerForSequenceClassification"),Q4t.forEach(t),bXo=r(dPe," (RoFormer model)"),dPe.forEach(t),vXo=i(j),k1=n(j,"LI",{});var cPe=s(k1);xpe=n(cPe,"STRONG",{});var W4t=s(xpe);FXo=r(W4t,"squeezebert"),W4t.forEach(t),TXo=r(cPe," \u2014 "),SX=n(cPe,"A",{href:!0});var H4t=s(SX);MXo=r(H4t,"SqueezeBertForSequenceClassification"),H4t.forEach(t),EXo=r(cPe," (SqueezeBERT model)"),cPe.forEach(t),CXo=i(j),S1=n(j,"LI",{});var mPe=s(S1);$pe=n(mPe,"STRONG",{});var U4t=s($pe);wXo=r(U4t,"tapas"),U4t.forEach(t),AXo=r(mPe," \u2014 "),RX=n(mPe,"A",{href:!0});var J4t=s(RX);LXo=r(J4t,"TapasForSequenceClassification"),J4t.forEach(t),yXo=r(mPe," (TAPAS model)"),mPe.forEach(t),xXo=i(j),R1=n(j,"LI",{});var fPe=s(R1);kpe=n(fPe,"STRONG",{});var Y4t=s(kpe);$Xo=r(Y4t,"transfo-xl"),Y4t.forEach(t),kXo=r(fPe," \u2014 "),PX=n(fPe,"A",{href:!0});var K4t=s(PX);SXo=r(K4t,"TransfoXLForSequenceClassification"),K4t.forEach(t),RXo=r(fPe," (Transformer-XL model)"),fPe.forEach(t),PXo=i(j),P1=n(j,"LI",{});var gPe=s(P1);Spe=n(gPe,"STRONG",{});var Z4t=s(Spe);BXo=r(Z4t,"xlm"),Z4t.forEach(t),IXo=r(gPe," \u2014 "),BX=n(gPe,"A",{href:!0});var eEt=s(BX);NXo=r(eEt,"XLMForSequenceClassification"),eEt.forEach(t),qXo=r(gPe," (XLM model)"),gPe.forEach(t),jXo=i(j),B1=n(j,"LI",{});var hPe=s(B1);Rpe=n(hPe,"STRONG",{});var oEt=s(Rpe);DXo=r(oEt,"xlm-roberta"),oEt.forEach(t),GXo=r(hPe," \u2014 "),IX=n(hPe,"A",{href:!0});var rEt=s(IX);OXo=r(rEt,"XLMRobertaForSequenceClassification"),rEt.forEach(t),VXo=r(hPe," (XLM-RoBERTa model)"),hPe.forEach(t),XXo=i(j),I1=n(j,"LI",{});var uPe=s(I1);Ppe=n(uPe,"STRONG",{});var tEt=s(Ppe);zXo=r(tEt,"xlm-roberta-xl"),tEt.forEach(t),QXo=r(uPe," \u2014 "),NX=n(uPe,"A",{href:!0});var aEt=s(NX);WXo=r(aEt,"XLMRobertaXLForSequenceClassification"),aEt.forEach(t),HXo=r(uPe," (XLM-RoBERTa-XL model)"),uPe.forEach(t),UXo=i(j),N1=n(j,"LI",{});var pPe=s(N1);Bpe=n(pPe,"STRONG",{});var nEt=s(Bpe);JXo=r(nEt,"xlnet"),nEt.forEach(t),YXo=r(pPe," \u2014 "),qX=n(pPe,"A",{href:!0});var sEt=s(qX);KXo=r(sEt,"XLNetForSequenceClassification"),sEt.forEach(t),ZXo=r(pPe," (XLNet model)"),pPe.forEach(t),ezo=i(j),q1=n(j,"LI",{});var _Pe=s(q1);Ipe=n(_Pe,"STRONG",{});var lEt=s(Ipe);ozo=r(lEt,"yoso"),lEt.forEach(t),rzo=r(_Pe," \u2014 "),jX=n(_Pe,"A",{href:!0});var iEt=s(jX);tzo=r(iEt,"YosoForSequenceClassification"),iEt.forEach(t),azo=r(_Pe," (YOSO model)"),_Pe.forEach(t),j.forEach(t),nzo=i(ma),j1=n(ma,"P",{});var bPe=s(j1);szo=r(bPe,"The model is set in evaluation mode by default using "),Npe=n(bPe,"CODE",{});var dEt=s(Npe);lzo=r(dEt,"model.eval()"),dEt.forEach(t),izo=r(bPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qpe=n(bPe,"CODE",{});var cEt=s(qpe);dzo=r(cEt,"model.train()"),cEt.forEach(t),bPe.forEach(t),czo=i(ma),T(D1.$$.fragment,ma),ma.forEach(t),sl.forEach(t),gXe=i(m),ad=n(m,"H2",{class:!0});var vQe=s(ad);G1=n(vQe,"A",{id:!0,class:!0,href:!0});var mEt=s(G1);jpe=n(mEt,"SPAN",{});var fEt=s(jpe);T(a8.$$.fragment,fEt),fEt.forEach(t),mEt.forEach(t),mzo=i(vQe),Dpe=n(vQe,"SPAN",{});var gEt=s(Dpe);fzo=r(gEt,"AutoModelForMultipleChoice"),gEt.forEach(t),vQe.forEach(t),hXe=i(m),Bo=n(m,"DIV",{class:!0});var ll=s(Bo);T(n8.$$.fragment,ll),gzo=i(ll),nd=n(ll,"P",{});var Nre=s(nd);hzo=r(Nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),DX=n(Nre,"A",{href:!0});var hEt=s(DX);uzo=r(hEt,"from_pretrained()"),hEt.forEach(t),pzo=r(Nre," class method or the "),GX=n(Nre,"A",{href:!0});var uEt=s(GX);_zo=r(uEt,"from_config()"),uEt.forEach(t),bzo=r(Nre,` class
method.`),Nre.forEach(t),vzo=i(ll),s8=n(ll,"P",{});var FQe=s(s8);Fzo=r(FQe,"This class cannot be instantiated directly using "),Gpe=n(FQe,"CODE",{});var pEt=s(Gpe);Tzo=r(pEt,"__init__()"),pEt.forEach(t),Mzo=r(FQe," (throws an error)."),FQe.forEach(t),Ezo=i(ll),gt=n(ll,"DIV",{class:!0});var b7=s(gt);T(l8.$$.fragment,b7),Czo=i(b7),Ope=n(b7,"P",{});var _Et=s(Ope);wzo=r(_Et,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_Et.forEach(t),Azo=i(b7),sd=n(b7,"P",{});var qre=s(sd);Lzo=r(qre,`Note:
Loading a model from its configuration file does `),Vpe=n(qre,"STRONG",{});var bEt=s(Vpe);yzo=r(bEt,"not"),bEt.forEach(t),xzo=r(qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=n(qre,"A",{href:!0});var vEt=s(OX);$zo=r(vEt,"from_pretrained()"),vEt.forEach(t),kzo=r(qre," to load the model weights."),qre.forEach(t),Szo=i(b7),T(O1.$$.fragment,b7),b7.forEach(t),Rzo=i(ll),ro=n(ll,"DIV",{class:!0});var fa=s(ro);T(i8.$$.fragment,fa),Pzo=i(fa),Xpe=n(fa,"P",{});var FEt=s(Xpe);Bzo=r(FEt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),FEt.forEach(t),Izo=i(fa),Oa=n(fa,"P",{});var v7=s(Oa);Nzo=r(v7,"The model class to instantiate is selected based on the "),zpe=n(v7,"CODE",{});var TEt=s(zpe);qzo=r(TEt,"model_type"),TEt.forEach(t),jzo=r(v7,` property of the config object (either
passed as an argument or loaded from `),Qpe=n(v7,"CODE",{});var MEt=s(Qpe);Dzo=r(MEt,"pretrained_model_name_or_path"),MEt.forEach(t),Gzo=r(v7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=n(v7,"CODE",{});var EEt=s(Wpe);Ozo=r(EEt,"pretrained_model_name_or_path"),EEt.forEach(t),Vzo=r(v7,":"),v7.forEach(t),Xzo=i(fa),Z=n(fa,"UL",{});var ee=s(Z);V1=n(ee,"LI",{});var vPe=s(V1);Hpe=n(vPe,"STRONG",{});var CEt=s(Hpe);zzo=r(CEt,"albert"),CEt.forEach(t),Qzo=r(vPe," \u2014 "),VX=n(vPe,"A",{href:!0});var wEt=s(VX);Wzo=r(wEt,"AlbertForMultipleChoice"),wEt.forEach(t),Hzo=r(vPe," (ALBERT model)"),vPe.forEach(t),Uzo=i(ee),X1=n(ee,"LI",{});var FPe=s(X1);Upe=n(FPe,"STRONG",{});var AEt=s(Upe);Jzo=r(AEt,"bert"),AEt.forEach(t),Yzo=r(FPe," \u2014 "),XX=n(FPe,"A",{href:!0});var LEt=s(XX);Kzo=r(LEt,"BertForMultipleChoice"),LEt.forEach(t),Zzo=r(FPe," (BERT model)"),FPe.forEach(t),eQo=i(ee),z1=n(ee,"LI",{});var TPe=s(z1);Jpe=n(TPe,"STRONG",{});var yEt=s(Jpe);oQo=r(yEt,"big_bird"),yEt.forEach(t),rQo=r(TPe," \u2014 "),zX=n(TPe,"A",{href:!0});var xEt=s(zX);tQo=r(xEt,"BigBirdForMultipleChoice"),xEt.forEach(t),aQo=r(TPe," (BigBird model)"),TPe.forEach(t),nQo=i(ee),Q1=n(ee,"LI",{});var MPe=s(Q1);Ype=n(MPe,"STRONG",{});var $Et=s(Ype);sQo=r($Et,"camembert"),$Et.forEach(t),lQo=r(MPe," \u2014 "),QX=n(MPe,"A",{href:!0});var kEt=s(QX);iQo=r(kEt,"CamembertForMultipleChoice"),kEt.forEach(t),dQo=r(MPe," (CamemBERT model)"),MPe.forEach(t),cQo=i(ee),W1=n(ee,"LI",{});var EPe=s(W1);Kpe=n(EPe,"STRONG",{});var SEt=s(Kpe);mQo=r(SEt,"canine"),SEt.forEach(t),fQo=r(EPe," \u2014 "),WX=n(EPe,"A",{href:!0});var REt=s(WX);gQo=r(REt,"CanineForMultipleChoice"),REt.forEach(t),hQo=r(EPe," (CANINE model)"),EPe.forEach(t),uQo=i(ee),H1=n(ee,"LI",{});var CPe=s(H1);Zpe=n(CPe,"STRONG",{});var PEt=s(Zpe);pQo=r(PEt,"convbert"),PEt.forEach(t),_Qo=r(CPe," \u2014 "),HX=n(CPe,"A",{href:!0});var BEt=s(HX);bQo=r(BEt,"ConvBertForMultipleChoice"),BEt.forEach(t),vQo=r(CPe," (ConvBERT model)"),CPe.forEach(t),FQo=i(ee),U1=n(ee,"LI",{});var wPe=s(U1);e_e=n(wPe,"STRONG",{});var IEt=s(e_e);TQo=r(IEt,"data2vec-text"),IEt.forEach(t),MQo=r(wPe," \u2014 "),UX=n(wPe,"A",{href:!0});var NEt=s(UX);EQo=r(NEt,"Data2VecTextForMultipleChoice"),NEt.forEach(t),CQo=r(wPe," (Data2VecText model)"),wPe.forEach(t),wQo=i(ee),J1=n(ee,"LI",{});var APe=s(J1);o_e=n(APe,"STRONG",{});var qEt=s(o_e);AQo=r(qEt,"deberta-v2"),qEt.forEach(t),LQo=r(APe," \u2014 "),JX=n(APe,"A",{href:!0});var jEt=s(JX);yQo=r(jEt,"DebertaV2ForMultipleChoice"),jEt.forEach(t),xQo=r(APe," (DeBERTa-v2 model)"),APe.forEach(t),$Qo=i(ee),Y1=n(ee,"LI",{});var LPe=s(Y1);r_e=n(LPe,"STRONG",{});var DEt=s(r_e);kQo=r(DEt,"distilbert"),DEt.forEach(t),SQo=r(LPe," \u2014 "),YX=n(LPe,"A",{href:!0});var GEt=s(YX);RQo=r(GEt,"DistilBertForMultipleChoice"),GEt.forEach(t),PQo=r(LPe," (DistilBERT model)"),LPe.forEach(t),BQo=i(ee),K1=n(ee,"LI",{});var yPe=s(K1);t_e=n(yPe,"STRONG",{});var OEt=s(t_e);IQo=r(OEt,"electra"),OEt.forEach(t),NQo=r(yPe," \u2014 "),KX=n(yPe,"A",{href:!0});var VEt=s(KX);qQo=r(VEt,"ElectraForMultipleChoice"),VEt.forEach(t),jQo=r(yPe," (ELECTRA model)"),yPe.forEach(t),DQo=i(ee),Z1=n(ee,"LI",{});var xPe=s(Z1);a_e=n(xPe,"STRONG",{});var XEt=s(a_e);GQo=r(XEt,"flaubert"),XEt.forEach(t),OQo=r(xPe," \u2014 "),ZX=n(xPe,"A",{href:!0});var zEt=s(ZX);VQo=r(zEt,"FlaubertForMultipleChoice"),zEt.forEach(t),XQo=r(xPe," (FlauBERT model)"),xPe.forEach(t),zQo=i(ee),eF=n(ee,"LI",{});var $Pe=s(eF);n_e=n($Pe,"STRONG",{});var QEt=s(n_e);QQo=r(QEt,"fnet"),QEt.forEach(t),WQo=r($Pe," \u2014 "),ez=n($Pe,"A",{href:!0});var WEt=s(ez);HQo=r(WEt,"FNetForMultipleChoice"),WEt.forEach(t),UQo=r($Pe," (FNet model)"),$Pe.forEach(t),JQo=i(ee),oF=n(ee,"LI",{});var kPe=s(oF);s_e=n(kPe,"STRONG",{});var HEt=s(s_e);YQo=r(HEt,"funnel"),HEt.forEach(t),KQo=r(kPe," \u2014 "),oz=n(kPe,"A",{href:!0});var UEt=s(oz);ZQo=r(UEt,"FunnelForMultipleChoice"),UEt.forEach(t),eWo=r(kPe," (Funnel Transformer model)"),kPe.forEach(t),oWo=i(ee),rF=n(ee,"LI",{});var SPe=s(rF);l_e=n(SPe,"STRONG",{});var JEt=s(l_e);rWo=r(JEt,"ibert"),JEt.forEach(t),tWo=r(SPe," \u2014 "),rz=n(SPe,"A",{href:!0});var YEt=s(rz);aWo=r(YEt,"IBertForMultipleChoice"),YEt.forEach(t),nWo=r(SPe," (I-BERT model)"),SPe.forEach(t),sWo=i(ee),tF=n(ee,"LI",{});var RPe=s(tF);i_e=n(RPe,"STRONG",{});var KEt=s(i_e);lWo=r(KEt,"longformer"),KEt.forEach(t),iWo=r(RPe," \u2014 "),tz=n(RPe,"A",{href:!0});var ZEt=s(tz);dWo=r(ZEt,"LongformerForMultipleChoice"),ZEt.forEach(t),cWo=r(RPe," (Longformer model)"),RPe.forEach(t),mWo=i(ee),aF=n(ee,"LI",{});var PPe=s(aF);d_e=n(PPe,"STRONG",{});var eCt=s(d_e);fWo=r(eCt,"megatron-bert"),eCt.forEach(t),gWo=r(PPe," \u2014 "),az=n(PPe,"A",{href:!0});var oCt=s(az);hWo=r(oCt,"MegatronBertForMultipleChoice"),oCt.forEach(t),uWo=r(PPe," (Megatron-BERT model)"),PPe.forEach(t),pWo=i(ee),nF=n(ee,"LI",{});var BPe=s(nF);c_e=n(BPe,"STRONG",{});var rCt=s(c_e);_Wo=r(rCt,"mobilebert"),rCt.forEach(t),bWo=r(BPe," \u2014 "),nz=n(BPe,"A",{href:!0});var tCt=s(nz);vWo=r(tCt,"MobileBertForMultipleChoice"),tCt.forEach(t),FWo=r(BPe," (MobileBERT model)"),BPe.forEach(t),TWo=i(ee),sF=n(ee,"LI",{});var IPe=s(sF);m_e=n(IPe,"STRONG",{});var aCt=s(m_e);MWo=r(aCt,"mpnet"),aCt.forEach(t),EWo=r(IPe," \u2014 "),sz=n(IPe,"A",{href:!0});var nCt=s(sz);CWo=r(nCt,"MPNetForMultipleChoice"),nCt.forEach(t),wWo=r(IPe," (MPNet model)"),IPe.forEach(t),AWo=i(ee),lF=n(ee,"LI",{});var NPe=s(lF);f_e=n(NPe,"STRONG",{});var sCt=s(f_e);LWo=r(sCt,"nezha"),sCt.forEach(t),yWo=r(NPe," \u2014 "),lz=n(NPe,"A",{href:!0});var lCt=s(lz);xWo=r(lCt,"NezhaForMultipleChoice"),lCt.forEach(t),$Wo=r(NPe," (Nezha model)"),NPe.forEach(t),kWo=i(ee),iF=n(ee,"LI",{});var qPe=s(iF);g_e=n(qPe,"STRONG",{});var iCt=s(g_e);SWo=r(iCt,"nystromformer"),iCt.forEach(t),RWo=r(qPe," \u2014 "),iz=n(qPe,"A",{href:!0});var dCt=s(iz);PWo=r(dCt,"NystromformerForMultipleChoice"),dCt.forEach(t),BWo=r(qPe," (Nystr\xF6mformer model)"),qPe.forEach(t),IWo=i(ee),dF=n(ee,"LI",{});var jPe=s(dF);h_e=n(jPe,"STRONG",{});var cCt=s(h_e);NWo=r(cCt,"qdqbert"),cCt.forEach(t),qWo=r(jPe," \u2014 "),dz=n(jPe,"A",{href:!0});var mCt=s(dz);jWo=r(mCt,"QDQBertForMultipleChoice"),mCt.forEach(t),DWo=r(jPe," (QDQBert model)"),jPe.forEach(t),GWo=i(ee),cF=n(ee,"LI",{});var DPe=s(cF);u_e=n(DPe,"STRONG",{});var fCt=s(u_e);OWo=r(fCt,"rembert"),fCt.forEach(t),VWo=r(DPe," \u2014 "),cz=n(DPe,"A",{href:!0});var gCt=s(cz);XWo=r(gCt,"RemBertForMultipleChoice"),gCt.forEach(t),zWo=r(DPe," (RemBERT model)"),DPe.forEach(t),QWo=i(ee),mF=n(ee,"LI",{});var GPe=s(mF);p_e=n(GPe,"STRONG",{});var hCt=s(p_e);WWo=r(hCt,"roberta"),hCt.forEach(t),HWo=r(GPe," \u2014 "),mz=n(GPe,"A",{href:!0});var uCt=s(mz);UWo=r(uCt,"RobertaForMultipleChoice"),uCt.forEach(t),JWo=r(GPe," (RoBERTa model)"),GPe.forEach(t),YWo=i(ee),fF=n(ee,"LI",{});var OPe=s(fF);__e=n(OPe,"STRONG",{});var pCt=s(__e);KWo=r(pCt,"roformer"),pCt.forEach(t),ZWo=r(OPe," \u2014 "),fz=n(OPe,"A",{href:!0});var _Ct=s(fz);eHo=r(_Ct,"RoFormerForMultipleChoice"),_Ct.forEach(t),oHo=r(OPe," (RoFormer model)"),OPe.forEach(t),rHo=i(ee),gF=n(ee,"LI",{});var VPe=s(gF);b_e=n(VPe,"STRONG",{});var bCt=s(b_e);tHo=r(bCt,"squeezebert"),bCt.forEach(t),aHo=r(VPe," \u2014 "),gz=n(VPe,"A",{href:!0});var vCt=s(gz);nHo=r(vCt,"SqueezeBertForMultipleChoice"),vCt.forEach(t),sHo=r(VPe," (SqueezeBERT model)"),VPe.forEach(t),lHo=i(ee),hF=n(ee,"LI",{});var XPe=s(hF);v_e=n(XPe,"STRONG",{});var FCt=s(v_e);iHo=r(FCt,"xlm"),FCt.forEach(t),dHo=r(XPe," \u2014 "),hz=n(XPe,"A",{href:!0});var TCt=s(hz);cHo=r(TCt,"XLMForMultipleChoice"),TCt.forEach(t),mHo=r(XPe," (XLM model)"),XPe.forEach(t),fHo=i(ee),uF=n(ee,"LI",{});var zPe=s(uF);F_e=n(zPe,"STRONG",{});var MCt=s(F_e);gHo=r(MCt,"xlm-roberta"),MCt.forEach(t),hHo=r(zPe," \u2014 "),uz=n(zPe,"A",{href:!0});var ECt=s(uz);uHo=r(ECt,"XLMRobertaForMultipleChoice"),ECt.forEach(t),pHo=r(zPe," (XLM-RoBERTa model)"),zPe.forEach(t),_Ho=i(ee),pF=n(ee,"LI",{});var QPe=s(pF);T_e=n(QPe,"STRONG",{});var CCt=s(T_e);bHo=r(CCt,"xlm-roberta-xl"),CCt.forEach(t),vHo=r(QPe," \u2014 "),pz=n(QPe,"A",{href:!0});var wCt=s(pz);FHo=r(wCt,"XLMRobertaXLForMultipleChoice"),wCt.forEach(t),THo=r(QPe," (XLM-RoBERTa-XL model)"),QPe.forEach(t),MHo=i(ee),_F=n(ee,"LI",{});var WPe=s(_F);M_e=n(WPe,"STRONG",{});var ACt=s(M_e);EHo=r(ACt,"xlnet"),ACt.forEach(t),CHo=r(WPe," \u2014 "),_z=n(WPe,"A",{href:!0});var LCt=s(_z);wHo=r(LCt,"XLNetForMultipleChoice"),LCt.forEach(t),AHo=r(WPe," (XLNet model)"),WPe.forEach(t),LHo=i(ee),bF=n(ee,"LI",{});var HPe=s(bF);E_e=n(HPe,"STRONG",{});var yCt=s(E_e);yHo=r(yCt,"yoso"),yCt.forEach(t),xHo=r(HPe," \u2014 "),bz=n(HPe,"A",{href:!0});var xCt=s(bz);$Ho=r(xCt,"YosoForMultipleChoice"),xCt.forEach(t),kHo=r(HPe," (YOSO model)"),HPe.forEach(t),ee.forEach(t),SHo=i(fa),vF=n(fa,"P",{});var UPe=s(vF);RHo=r(UPe,"The model is set in evaluation mode by default using "),C_e=n(UPe,"CODE",{});var $Ct=s(C_e);PHo=r($Ct,"model.eval()"),$Ct.forEach(t),BHo=r(UPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w_e=n(UPe,"CODE",{});var kCt=s(w_e);IHo=r(kCt,"model.train()"),kCt.forEach(t),UPe.forEach(t),NHo=i(fa),T(FF.$$.fragment,fa),fa.forEach(t),ll.forEach(t),uXe=i(m),ld=n(m,"H2",{class:!0});var TQe=s(ld);TF=n(TQe,"A",{id:!0,class:!0,href:!0});var SCt=s(TF);A_e=n(SCt,"SPAN",{});var RCt=s(A_e);T(d8.$$.fragment,RCt),RCt.forEach(t),SCt.forEach(t),qHo=i(TQe),L_e=n(TQe,"SPAN",{});var PCt=s(L_e);jHo=r(PCt,"AutoModelForNextSentencePrediction"),PCt.forEach(t),TQe.forEach(t),pXe=i(m),Io=n(m,"DIV",{class:!0});var il=s(Io);T(c8.$$.fragment,il),DHo=i(il),id=n(il,"P",{});var jre=s(id);GHo=r(jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vz=n(jre,"A",{href:!0});var BCt=s(vz);OHo=r(BCt,"from_pretrained()"),BCt.forEach(t),VHo=r(jre," class method or the "),Fz=n(jre,"A",{href:!0});var ICt=s(Fz);XHo=r(ICt,"from_config()"),ICt.forEach(t),zHo=r(jre,` class
method.`),jre.forEach(t),QHo=i(il),m8=n(il,"P",{});var MQe=s(m8);WHo=r(MQe,"This class cannot be instantiated directly using "),y_e=n(MQe,"CODE",{});var NCt=s(y_e);HHo=r(NCt,"__init__()"),NCt.forEach(t),UHo=r(MQe," (throws an error)."),MQe.forEach(t),JHo=i(il),ht=n(il,"DIV",{class:!0});var F7=s(ht);T(f8.$$.fragment,F7),YHo=i(F7),x_e=n(F7,"P",{});var qCt=s(x_e);KHo=r(qCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),qCt.forEach(t),ZHo=i(F7),dd=n(F7,"P",{});var Dre=s(dd);eUo=r(Dre,`Note:
Loading a model from its configuration file does `),$_e=n(Dre,"STRONG",{});var jCt=s($_e);oUo=r(jCt,"not"),jCt.forEach(t),rUo=r(Dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=n(Dre,"A",{href:!0});var DCt=s(Tz);tUo=r(DCt,"from_pretrained()"),DCt.forEach(t),aUo=r(Dre," to load the model weights."),Dre.forEach(t),nUo=i(F7),T(MF.$$.fragment,F7),F7.forEach(t),sUo=i(il),to=n(il,"DIV",{class:!0});var ga=s(to);T(g8.$$.fragment,ga),lUo=i(ga),k_e=n(ga,"P",{});var GCt=s(k_e);iUo=r(GCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),GCt.forEach(t),dUo=i(ga),Va=n(ga,"P",{});var T7=s(Va);cUo=r(T7,"The model class to instantiate is selected based on the "),S_e=n(T7,"CODE",{});var OCt=s(S_e);mUo=r(OCt,"model_type"),OCt.forEach(t),fUo=r(T7,` property of the config object (either
passed as an argument or loaded from `),R_e=n(T7,"CODE",{});var VCt=s(R_e);gUo=r(VCt,"pretrained_model_name_or_path"),VCt.forEach(t),hUo=r(T7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P_e=n(T7,"CODE",{});var XCt=s(P_e);uUo=r(XCt,"pretrained_model_name_or_path"),XCt.forEach(t),pUo=r(T7,":"),T7.forEach(t),_Uo=i(ga),No=n(ga,"UL",{});var ha=s(No);EF=n(ha,"LI",{});var JPe=s(EF);B_e=n(JPe,"STRONG",{});var zCt=s(B_e);bUo=r(zCt,"bert"),zCt.forEach(t),vUo=r(JPe," \u2014 "),Mz=n(JPe,"A",{href:!0});var QCt=s(Mz);FUo=r(QCt,"BertForNextSentencePrediction"),QCt.forEach(t),TUo=r(JPe," (BERT model)"),JPe.forEach(t),MUo=i(ha),CF=n(ha,"LI",{});var YPe=s(CF);I_e=n(YPe,"STRONG",{});var WCt=s(I_e);EUo=r(WCt,"fnet"),WCt.forEach(t),CUo=r(YPe," \u2014 "),Ez=n(YPe,"A",{href:!0});var HCt=s(Ez);wUo=r(HCt,"FNetForNextSentencePrediction"),HCt.forEach(t),AUo=r(YPe," (FNet model)"),YPe.forEach(t),LUo=i(ha),wF=n(ha,"LI",{});var KPe=s(wF);N_e=n(KPe,"STRONG",{});var UCt=s(N_e);yUo=r(UCt,"megatron-bert"),UCt.forEach(t),xUo=r(KPe," \u2014 "),Cz=n(KPe,"A",{href:!0});var JCt=s(Cz);$Uo=r(JCt,"MegatronBertForNextSentencePrediction"),JCt.forEach(t),kUo=r(KPe," (Megatron-BERT model)"),KPe.forEach(t),SUo=i(ha),AF=n(ha,"LI",{});var ZPe=s(AF);q_e=n(ZPe,"STRONG",{});var YCt=s(q_e);RUo=r(YCt,"mobilebert"),YCt.forEach(t),PUo=r(ZPe," \u2014 "),wz=n(ZPe,"A",{href:!0});var KCt=s(wz);BUo=r(KCt,"MobileBertForNextSentencePrediction"),KCt.forEach(t),IUo=r(ZPe," (MobileBERT model)"),ZPe.forEach(t),NUo=i(ha),LF=n(ha,"LI",{});var eBe=s(LF);j_e=n(eBe,"STRONG",{});var ZCt=s(j_e);qUo=r(ZCt,"nezha"),ZCt.forEach(t),jUo=r(eBe," \u2014 "),Az=n(eBe,"A",{href:!0});var e3t=s(Az);DUo=r(e3t,"NezhaForNextSentencePrediction"),e3t.forEach(t),GUo=r(eBe," (Nezha model)"),eBe.forEach(t),OUo=i(ha),yF=n(ha,"LI",{});var oBe=s(yF);D_e=n(oBe,"STRONG",{});var o3t=s(D_e);VUo=r(o3t,"qdqbert"),o3t.forEach(t),XUo=r(oBe," \u2014 "),Lz=n(oBe,"A",{href:!0});var r3t=s(Lz);zUo=r(r3t,"QDQBertForNextSentencePrediction"),r3t.forEach(t),QUo=r(oBe," (QDQBert model)"),oBe.forEach(t),ha.forEach(t),WUo=i(ga),xF=n(ga,"P",{});var rBe=s(xF);HUo=r(rBe,"The model is set in evaluation mode by default using "),G_e=n(rBe,"CODE",{});var t3t=s(G_e);UUo=r(t3t,"model.eval()"),t3t.forEach(t),JUo=r(rBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O_e=n(rBe,"CODE",{});var a3t=s(O_e);YUo=r(a3t,"model.train()"),a3t.forEach(t),rBe.forEach(t),KUo=i(ga),T($F.$$.fragment,ga),ga.forEach(t),il.forEach(t),_Xe=i(m),cd=n(m,"H2",{class:!0});var EQe=s(cd);kF=n(EQe,"A",{id:!0,class:!0,href:!0});var n3t=s(kF);V_e=n(n3t,"SPAN",{});var s3t=s(V_e);T(h8.$$.fragment,s3t),s3t.forEach(t),n3t.forEach(t),ZUo=i(EQe),X_e=n(EQe,"SPAN",{});var l3t=s(X_e);eJo=r(l3t,"AutoModelForTokenClassification"),l3t.forEach(t),EQe.forEach(t),bXe=i(m),qo=n(m,"DIV",{class:!0});var dl=s(qo);T(u8.$$.fragment,dl),oJo=i(dl),md=n(dl,"P",{});var Gre=s(md);rJo=r(Gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yz=n(Gre,"A",{href:!0});var i3t=s(yz);tJo=r(i3t,"from_pretrained()"),i3t.forEach(t),aJo=r(Gre," class method or the "),xz=n(Gre,"A",{href:!0});var d3t=s(xz);nJo=r(d3t,"from_config()"),d3t.forEach(t),sJo=r(Gre,` class
method.`),Gre.forEach(t),lJo=i(dl),p8=n(dl,"P",{});var CQe=s(p8);iJo=r(CQe,"This class cannot be instantiated directly using "),z_e=n(CQe,"CODE",{});var c3t=s(z_e);dJo=r(c3t,"__init__()"),c3t.forEach(t),cJo=r(CQe," (throws an error)."),CQe.forEach(t),mJo=i(dl),ut=n(dl,"DIV",{class:!0});var M7=s(ut);T(_8.$$.fragment,M7),fJo=i(M7),Q_e=n(M7,"P",{});var m3t=s(Q_e);gJo=r(m3t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),m3t.forEach(t),hJo=i(M7),fd=n(M7,"P",{});var Ore=s(fd);uJo=r(Ore,`Note:
Loading a model from its configuration file does `),W_e=n(Ore,"STRONG",{});var f3t=s(W_e);pJo=r(f3t,"not"),f3t.forEach(t),_Jo=r(Ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=n(Ore,"A",{href:!0});var g3t=s($z);bJo=r(g3t,"from_pretrained()"),g3t.forEach(t),vJo=r(Ore," to load the model weights."),Ore.forEach(t),FJo=i(M7),T(SF.$$.fragment,M7),M7.forEach(t),TJo=i(dl),ao=n(dl,"DIV",{class:!0});var ua=s(ao);T(b8.$$.fragment,ua),MJo=i(ua),H_e=n(ua,"P",{});var h3t=s(H_e);EJo=r(h3t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),h3t.forEach(t),CJo=i(ua),Xa=n(ua,"P",{});var E7=s(Xa);wJo=r(E7,"The model class to instantiate is selected based on the "),U_e=n(E7,"CODE",{});var u3t=s(U_e);AJo=r(u3t,"model_type"),u3t.forEach(t),LJo=r(E7,` property of the config object (either
passed as an argument or loaded from `),J_e=n(E7,"CODE",{});var p3t=s(J_e);yJo=r(p3t,"pretrained_model_name_or_path"),p3t.forEach(t),xJo=r(E7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=n(E7,"CODE",{});var _3t=s(Y_e);$Jo=r(_3t,"pretrained_model_name_or_path"),_3t.forEach(t),kJo=r(E7,":"),E7.forEach(t),SJo=i(ua),U=n(ua,"UL",{});var J=s(U);RF=n(J,"LI",{});var tBe=s(RF);K_e=n(tBe,"STRONG",{});var b3t=s(K_e);RJo=r(b3t,"albert"),b3t.forEach(t),PJo=r(tBe," \u2014 "),kz=n(tBe,"A",{href:!0});var v3t=s(kz);BJo=r(v3t,"AlbertForTokenClassification"),v3t.forEach(t),IJo=r(tBe," (ALBERT model)"),tBe.forEach(t),NJo=i(J),PF=n(J,"LI",{});var aBe=s(PF);Z_e=n(aBe,"STRONG",{});var F3t=s(Z_e);qJo=r(F3t,"bert"),F3t.forEach(t),jJo=r(aBe," \u2014 "),Sz=n(aBe,"A",{href:!0});var T3t=s(Sz);DJo=r(T3t,"BertForTokenClassification"),T3t.forEach(t),GJo=r(aBe," (BERT model)"),aBe.forEach(t),OJo=i(J),BF=n(J,"LI",{});var nBe=s(BF);e2e=n(nBe,"STRONG",{});var M3t=s(e2e);VJo=r(M3t,"big_bird"),M3t.forEach(t),XJo=r(nBe," \u2014 "),Rz=n(nBe,"A",{href:!0});var E3t=s(Rz);zJo=r(E3t,"BigBirdForTokenClassification"),E3t.forEach(t),QJo=r(nBe," (BigBird model)"),nBe.forEach(t),WJo=i(J),IF=n(J,"LI",{});var sBe=s(IF);o2e=n(sBe,"STRONG",{});var C3t=s(o2e);HJo=r(C3t,"bloom"),C3t.forEach(t),UJo=r(sBe," \u2014 "),Pz=n(sBe,"A",{href:!0});var w3t=s(Pz);JJo=r(w3t,"BloomForTokenClassification"),w3t.forEach(t),YJo=r(sBe," (BLOOM model)"),sBe.forEach(t),KJo=i(J),NF=n(J,"LI",{});var lBe=s(NF);r2e=n(lBe,"STRONG",{});var A3t=s(r2e);ZJo=r(A3t,"camembert"),A3t.forEach(t),eYo=r(lBe," \u2014 "),Bz=n(lBe,"A",{href:!0});var L3t=s(Bz);oYo=r(L3t,"CamembertForTokenClassification"),L3t.forEach(t),rYo=r(lBe," (CamemBERT model)"),lBe.forEach(t),tYo=i(J),qF=n(J,"LI",{});var iBe=s(qF);t2e=n(iBe,"STRONG",{});var y3t=s(t2e);aYo=r(y3t,"canine"),y3t.forEach(t),nYo=r(iBe," \u2014 "),Iz=n(iBe,"A",{href:!0});var x3t=s(Iz);sYo=r(x3t,"CanineForTokenClassification"),x3t.forEach(t),lYo=r(iBe," (CANINE model)"),iBe.forEach(t),iYo=i(J),jF=n(J,"LI",{});var dBe=s(jF);a2e=n(dBe,"STRONG",{});var $3t=s(a2e);dYo=r($3t,"convbert"),$3t.forEach(t),cYo=r(dBe," \u2014 "),Nz=n(dBe,"A",{href:!0});var k3t=s(Nz);mYo=r(k3t,"ConvBertForTokenClassification"),k3t.forEach(t),fYo=r(dBe," (ConvBERT model)"),dBe.forEach(t),gYo=i(J),DF=n(J,"LI",{});var cBe=s(DF);n2e=n(cBe,"STRONG",{});var S3t=s(n2e);hYo=r(S3t,"data2vec-text"),S3t.forEach(t),uYo=r(cBe," \u2014 "),qz=n(cBe,"A",{href:!0});var R3t=s(qz);pYo=r(R3t,"Data2VecTextForTokenClassification"),R3t.forEach(t),_Yo=r(cBe," (Data2VecText model)"),cBe.forEach(t),bYo=i(J),GF=n(J,"LI",{});var mBe=s(GF);s2e=n(mBe,"STRONG",{});var P3t=s(s2e);vYo=r(P3t,"deberta"),P3t.forEach(t),FYo=r(mBe," \u2014 "),jz=n(mBe,"A",{href:!0});var B3t=s(jz);TYo=r(B3t,"DebertaForTokenClassification"),B3t.forEach(t),MYo=r(mBe," (DeBERTa model)"),mBe.forEach(t),EYo=i(J),OF=n(J,"LI",{});var fBe=s(OF);l2e=n(fBe,"STRONG",{});var I3t=s(l2e);CYo=r(I3t,"deberta-v2"),I3t.forEach(t),wYo=r(fBe," \u2014 "),Dz=n(fBe,"A",{href:!0});var N3t=s(Dz);AYo=r(N3t,"DebertaV2ForTokenClassification"),N3t.forEach(t),LYo=r(fBe," (DeBERTa-v2 model)"),fBe.forEach(t),yYo=i(J),VF=n(J,"LI",{});var gBe=s(VF);i2e=n(gBe,"STRONG",{});var q3t=s(i2e);xYo=r(q3t,"distilbert"),q3t.forEach(t),$Yo=r(gBe," \u2014 "),Gz=n(gBe,"A",{href:!0});var j3t=s(Gz);kYo=r(j3t,"DistilBertForTokenClassification"),j3t.forEach(t),SYo=r(gBe," (DistilBERT model)"),gBe.forEach(t),RYo=i(J),XF=n(J,"LI",{});var hBe=s(XF);d2e=n(hBe,"STRONG",{});var D3t=s(d2e);PYo=r(D3t,"electra"),D3t.forEach(t),BYo=r(hBe," \u2014 "),Oz=n(hBe,"A",{href:!0});var G3t=s(Oz);IYo=r(G3t,"ElectraForTokenClassification"),G3t.forEach(t),NYo=r(hBe," (ELECTRA model)"),hBe.forEach(t),qYo=i(J),zF=n(J,"LI",{});var uBe=s(zF);c2e=n(uBe,"STRONG",{});var O3t=s(c2e);jYo=r(O3t,"flaubert"),O3t.forEach(t),DYo=r(uBe," \u2014 "),Vz=n(uBe,"A",{href:!0});var V3t=s(Vz);GYo=r(V3t,"FlaubertForTokenClassification"),V3t.forEach(t),OYo=r(uBe," (FlauBERT model)"),uBe.forEach(t),VYo=i(J),QF=n(J,"LI",{});var pBe=s(QF);m2e=n(pBe,"STRONG",{});var X3t=s(m2e);XYo=r(X3t,"fnet"),X3t.forEach(t),zYo=r(pBe," \u2014 "),Xz=n(pBe,"A",{href:!0});var z3t=s(Xz);QYo=r(z3t,"FNetForTokenClassification"),z3t.forEach(t),WYo=r(pBe," (FNet model)"),pBe.forEach(t),HYo=i(J),WF=n(J,"LI",{});var _Be=s(WF);f2e=n(_Be,"STRONG",{});var Q3t=s(f2e);UYo=r(Q3t,"funnel"),Q3t.forEach(t),JYo=r(_Be," \u2014 "),zz=n(_Be,"A",{href:!0});var W3t=s(zz);YYo=r(W3t,"FunnelForTokenClassification"),W3t.forEach(t),KYo=r(_Be," (Funnel Transformer model)"),_Be.forEach(t),ZYo=i(J),HF=n(J,"LI",{});var bBe=s(HF);g2e=n(bBe,"STRONG",{});var H3t=s(g2e);eKo=r(H3t,"gpt2"),H3t.forEach(t),oKo=r(bBe," \u2014 "),Qz=n(bBe,"A",{href:!0});var U3t=s(Qz);rKo=r(U3t,"GPT2ForTokenClassification"),U3t.forEach(t),tKo=r(bBe," (OpenAI GPT-2 model)"),bBe.forEach(t),aKo=i(J),UF=n(J,"LI",{});var vBe=s(UF);h2e=n(vBe,"STRONG",{});var J3t=s(h2e);nKo=r(J3t,"ibert"),J3t.forEach(t),sKo=r(vBe," \u2014 "),Wz=n(vBe,"A",{href:!0});var Y3t=s(Wz);lKo=r(Y3t,"IBertForTokenClassification"),Y3t.forEach(t),iKo=r(vBe," (I-BERT model)"),vBe.forEach(t),dKo=i(J),JF=n(J,"LI",{});var FBe=s(JF);u2e=n(FBe,"STRONG",{});var K3t=s(u2e);cKo=r(K3t,"layoutlm"),K3t.forEach(t),mKo=r(FBe," \u2014 "),Hz=n(FBe,"A",{href:!0});var Z3t=s(Hz);fKo=r(Z3t,"LayoutLMForTokenClassification"),Z3t.forEach(t),gKo=r(FBe," (LayoutLM model)"),FBe.forEach(t),hKo=i(J),YF=n(J,"LI",{});var TBe=s(YF);p2e=n(TBe,"STRONG",{});var e5t=s(p2e);uKo=r(e5t,"layoutlmv2"),e5t.forEach(t),pKo=r(TBe," \u2014 "),Uz=n(TBe,"A",{href:!0});var o5t=s(Uz);_Ko=r(o5t,"LayoutLMv2ForTokenClassification"),o5t.forEach(t),bKo=r(TBe," (LayoutLMv2 model)"),TBe.forEach(t),vKo=i(J),KF=n(J,"LI",{});var MBe=s(KF);_2e=n(MBe,"STRONG",{});var r5t=s(_2e);FKo=r(r5t,"layoutlmv3"),r5t.forEach(t),TKo=r(MBe," \u2014 "),Jz=n(MBe,"A",{href:!0});var t5t=s(Jz);MKo=r(t5t,"LayoutLMv3ForTokenClassification"),t5t.forEach(t),EKo=r(MBe," (LayoutLMv3 model)"),MBe.forEach(t),CKo=i(J),ZF=n(J,"LI",{});var EBe=s(ZF);b2e=n(EBe,"STRONG",{});var a5t=s(b2e);wKo=r(a5t,"longformer"),a5t.forEach(t),AKo=r(EBe," \u2014 "),Yz=n(EBe,"A",{href:!0});var n5t=s(Yz);LKo=r(n5t,"LongformerForTokenClassification"),n5t.forEach(t),yKo=r(EBe," (Longformer model)"),EBe.forEach(t),xKo=i(J),eT=n(J,"LI",{});var CBe=s(eT);v2e=n(CBe,"STRONG",{});var s5t=s(v2e);$Ko=r(s5t,"megatron-bert"),s5t.forEach(t),kKo=r(CBe," \u2014 "),Kz=n(CBe,"A",{href:!0});var l5t=s(Kz);SKo=r(l5t,"MegatronBertForTokenClassification"),l5t.forEach(t),RKo=r(CBe," (Megatron-BERT model)"),CBe.forEach(t),PKo=i(J),oT=n(J,"LI",{});var wBe=s(oT);F2e=n(wBe,"STRONG",{});var i5t=s(F2e);BKo=r(i5t,"mobilebert"),i5t.forEach(t),IKo=r(wBe," \u2014 "),Zz=n(wBe,"A",{href:!0});var d5t=s(Zz);NKo=r(d5t,"MobileBertForTokenClassification"),d5t.forEach(t),qKo=r(wBe," (MobileBERT model)"),wBe.forEach(t),jKo=i(J),rT=n(J,"LI",{});var ABe=s(rT);T2e=n(ABe,"STRONG",{});var c5t=s(T2e);DKo=r(c5t,"mpnet"),c5t.forEach(t),GKo=r(ABe," \u2014 "),eQ=n(ABe,"A",{href:!0});var m5t=s(eQ);OKo=r(m5t,"MPNetForTokenClassification"),m5t.forEach(t),VKo=r(ABe," (MPNet model)"),ABe.forEach(t),XKo=i(J),tT=n(J,"LI",{});var LBe=s(tT);M2e=n(LBe,"STRONG",{});var f5t=s(M2e);zKo=r(f5t,"nezha"),f5t.forEach(t),QKo=r(LBe," \u2014 "),oQ=n(LBe,"A",{href:!0});var g5t=s(oQ);WKo=r(g5t,"NezhaForTokenClassification"),g5t.forEach(t),HKo=r(LBe," (Nezha model)"),LBe.forEach(t),UKo=i(J),aT=n(J,"LI",{});var yBe=s(aT);E2e=n(yBe,"STRONG",{});var h5t=s(E2e);JKo=r(h5t,"nystromformer"),h5t.forEach(t),YKo=r(yBe," \u2014 "),rQ=n(yBe,"A",{href:!0});var u5t=s(rQ);KKo=r(u5t,"NystromformerForTokenClassification"),u5t.forEach(t),ZKo=r(yBe," (Nystr\xF6mformer model)"),yBe.forEach(t),eZo=i(J),nT=n(J,"LI",{});var xBe=s(nT);C2e=n(xBe,"STRONG",{});var p5t=s(C2e);oZo=r(p5t,"qdqbert"),p5t.forEach(t),rZo=r(xBe," \u2014 "),tQ=n(xBe,"A",{href:!0});var _5t=s(tQ);tZo=r(_5t,"QDQBertForTokenClassification"),_5t.forEach(t),aZo=r(xBe," (QDQBert model)"),xBe.forEach(t),nZo=i(J),sT=n(J,"LI",{});var $Be=s(sT);w2e=n($Be,"STRONG",{});var b5t=s(w2e);sZo=r(b5t,"rembert"),b5t.forEach(t),lZo=r($Be," \u2014 "),aQ=n($Be,"A",{href:!0});var v5t=s(aQ);iZo=r(v5t,"RemBertForTokenClassification"),v5t.forEach(t),dZo=r($Be," (RemBERT model)"),$Be.forEach(t),cZo=i(J),lT=n(J,"LI",{});var kBe=s(lT);A2e=n(kBe,"STRONG",{});var F5t=s(A2e);mZo=r(F5t,"roberta"),F5t.forEach(t),fZo=r(kBe," \u2014 "),nQ=n(kBe,"A",{href:!0});var T5t=s(nQ);gZo=r(T5t,"RobertaForTokenClassification"),T5t.forEach(t),hZo=r(kBe," (RoBERTa model)"),kBe.forEach(t),uZo=i(J),iT=n(J,"LI",{});var SBe=s(iT);L2e=n(SBe,"STRONG",{});var M5t=s(L2e);pZo=r(M5t,"roformer"),M5t.forEach(t),_Zo=r(SBe," \u2014 "),sQ=n(SBe,"A",{href:!0});var E5t=s(sQ);bZo=r(E5t,"RoFormerForTokenClassification"),E5t.forEach(t),vZo=r(SBe," (RoFormer model)"),SBe.forEach(t),FZo=i(J),dT=n(J,"LI",{});var RBe=s(dT);y2e=n(RBe,"STRONG",{});var C5t=s(y2e);TZo=r(C5t,"squeezebert"),C5t.forEach(t),MZo=r(RBe," \u2014 "),lQ=n(RBe,"A",{href:!0});var w5t=s(lQ);EZo=r(w5t,"SqueezeBertForTokenClassification"),w5t.forEach(t),CZo=r(RBe," (SqueezeBERT model)"),RBe.forEach(t),wZo=i(J),cT=n(J,"LI",{});var PBe=s(cT);x2e=n(PBe,"STRONG",{});var A5t=s(x2e);AZo=r(A5t,"xlm"),A5t.forEach(t),LZo=r(PBe," \u2014 "),iQ=n(PBe,"A",{href:!0});var L5t=s(iQ);yZo=r(L5t,"XLMForTokenClassification"),L5t.forEach(t),xZo=r(PBe," (XLM model)"),PBe.forEach(t),$Zo=i(J),mT=n(J,"LI",{});var BBe=s(mT);$2e=n(BBe,"STRONG",{});var y5t=s($2e);kZo=r(y5t,"xlm-roberta"),y5t.forEach(t),SZo=r(BBe," \u2014 "),dQ=n(BBe,"A",{href:!0});var x5t=s(dQ);RZo=r(x5t,"XLMRobertaForTokenClassification"),x5t.forEach(t),PZo=r(BBe," (XLM-RoBERTa model)"),BBe.forEach(t),BZo=i(J),fT=n(J,"LI",{});var IBe=s(fT);k2e=n(IBe,"STRONG",{});var $5t=s(k2e);IZo=r($5t,"xlm-roberta-xl"),$5t.forEach(t),NZo=r(IBe," \u2014 "),cQ=n(IBe,"A",{href:!0});var k5t=s(cQ);qZo=r(k5t,"XLMRobertaXLForTokenClassification"),k5t.forEach(t),jZo=r(IBe," (XLM-RoBERTa-XL model)"),IBe.forEach(t),DZo=i(J),gT=n(J,"LI",{});var NBe=s(gT);S2e=n(NBe,"STRONG",{});var S5t=s(S2e);GZo=r(S5t,"xlnet"),S5t.forEach(t),OZo=r(NBe," \u2014 "),mQ=n(NBe,"A",{href:!0});var R5t=s(mQ);VZo=r(R5t,"XLNetForTokenClassification"),R5t.forEach(t),XZo=r(NBe," (XLNet model)"),NBe.forEach(t),zZo=i(J),hT=n(J,"LI",{});var qBe=s(hT);R2e=n(qBe,"STRONG",{});var P5t=s(R2e);QZo=r(P5t,"yoso"),P5t.forEach(t),WZo=r(qBe," \u2014 "),fQ=n(qBe,"A",{href:!0});var B5t=s(fQ);HZo=r(B5t,"YosoForTokenClassification"),B5t.forEach(t),UZo=r(qBe," (YOSO model)"),qBe.forEach(t),J.forEach(t),JZo=i(ua),uT=n(ua,"P",{});var jBe=s(uT);YZo=r(jBe,"The model is set in evaluation mode by default using "),P2e=n(jBe,"CODE",{});var I5t=s(P2e);KZo=r(I5t,"model.eval()"),I5t.forEach(t),ZZo=r(jBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B2e=n(jBe,"CODE",{});var N5t=s(B2e);eer=r(N5t,"model.train()"),N5t.forEach(t),jBe.forEach(t),oer=i(ua),T(pT.$$.fragment,ua),ua.forEach(t),dl.forEach(t),vXe=i(m),gd=n(m,"H2",{class:!0});var wQe=s(gd);_T=n(wQe,"A",{id:!0,class:!0,href:!0});var q5t=s(_T);I2e=n(q5t,"SPAN",{});var j5t=s(I2e);T(v8.$$.fragment,j5t),j5t.forEach(t),q5t.forEach(t),rer=i(wQe),N2e=n(wQe,"SPAN",{});var D5t=s(N2e);ter=r(D5t,"AutoModelForQuestionAnswering"),D5t.forEach(t),wQe.forEach(t),FXe=i(m),jo=n(m,"DIV",{class:!0});var cl=s(jo);T(F8.$$.fragment,cl),aer=i(cl),hd=n(cl,"P",{});var Vre=s(hd);ner=r(Vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gQ=n(Vre,"A",{href:!0});var G5t=s(gQ);ser=r(G5t,"from_pretrained()"),G5t.forEach(t),ler=r(Vre," class method or the "),hQ=n(Vre,"A",{href:!0});var O5t=s(hQ);ier=r(O5t,"from_config()"),O5t.forEach(t),der=r(Vre,` class
method.`),Vre.forEach(t),cer=i(cl),T8=n(cl,"P",{});var AQe=s(T8);mer=r(AQe,"This class cannot be instantiated directly using "),q2e=n(AQe,"CODE",{});var V5t=s(q2e);fer=r(V5t,"__init__()"),V5t.forEach(t),ger=r(AQe," (throws an error)."),AQe.forEach(t),her=i(cl),pt=n(cl,"DIV",{class:!0});var C7=s(pt);T(M8.$$.fragment,C7),uer=i(C7),j2e=n(C7,"P",{});var X5t=s(j2e);per=r(X5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),X5t.forEach(t),_er=i(C7),ud=n(C7,"P",{});var Xre=s(ud);ber=r(Xre,`Note:
Loading a model from its configuration file does `),D2e=n(Xre,"STRONG",{});var z5t=s(D2e);ver=r(z5t,"not"),z5t.forEach(t),Fer=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=n(Xre,"A",{href:!0});var Q5t=s(uQ);Ter=r(Q5t,"from_pretrained()"),Q5t.forEach(t),Mer=r(Xre," to load the model weights."),Xre.forEach(t),Eer=i(C7),T(bT.$$.fragment,C7),C7.forEach(t),Cer=i(cl),no=n(cl,"DIV",{class:!0});var pa=s(no);T(E8.$$.fragment,pa),wer=i(pa),G2e=n(pa,"P",{});var W5t=s(G2e);Aer=r(W5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),W5t.forEach(t),Ler=i(pa),za=n(pa,"P",{});var w7=s(za);yer=r(w7,"The model class to instantiate is selected based on the "),O2e=n(w7,"CODE",{});var H5t=s(O2e);xer=r(H5t,"model_type"),H5t.forEach(t),$er=r(w7,` property of the config object (either
passed as an argument or loaded from `),V2e=n(w7,"CODE",{});var U5t=s(V2e);ker=r(U5t,"pretrained_model_name_or_path"),U5t.forEach(t),Ser=r(w7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=n(w7,"CODE",{});var J5t=s(X2e);Rer=r(J5t,"pretrained_model_name_or_path"),J5t.forEach(t),Per=r(w7,":"),w7.forEach(t),Ber=i(pa),V=n(pa,"UL",{});var X=s(V);vT=n(X,"LI",{});var DBe=s(vT);z2e=n(DBe,"STRONG",{});var Y5t=s(z2e);Ier=r(Y5t,"albert"),Y5t.forEach(t),Ner=r(DBe," \u2014 "),pQ=n(DBe,"A",{href:!0});var K5t=s(pQ);qer=r(K5t,"AlbertForQuestionAnswering"),K5t.forEach(t),jer=r(DBe," (ALBERT model)"),DBe.forEach(t),Der=i(X),FT=n(X,"LI",{});var GBe=s(FT);Q2e=n(GBe,"STRONG",{});var Z5t=s(Q2e);Ger=r(Z5t,"bart"),Z5t.forEach(t),Oer=r(GBe," \u2014 "),_Q=n(GBe,"A",{href:!0});var e0t=s(_Q);Ver=r(e0t,"BartForQuestionAnswering"),e0t.forEach(t),Xer=r(GBe," (BART model)"),GBe.forEach(t),zer=i(X),TT=n(X,"LI",{});var OBe=s(TT);W2e=n(OBe,"STRONG",{});var o0t=s(W2e);Qer=r(o0t,"bert"),o0t.forEach(t),Wer=r(OBe," \u2014 "),bQ=n(OBe,"A",{href:!0});var r0t=s(bQ);Her=r(r0t,"BertForQuestionAnswering"),r0t.forEach(t),Uer=r(OBe," (BERT model)"),OBe.forEach(t),Jer=i(X),MT=n(X,"LI",{});var VBe=s(MT);H2e=n(VBe,"STRONG",{});var t0t=s(H2e);Yer=r(t0t,"big_bird"),t0t.forEach(t),Ker=r(VBe," \u2014 "),vQ=n(VBe,"A",{href:!0});var a0t=s(vQ);Zer=r(a0t,"BigBirdForQuestionAnswering"),a0t.forEach(t),eor=r(VBe," (BigBird model)"),VBe.forEach(t),oor=i(X),ET=n(X,"LI",{});var XBe=s(ET);U2e=n(XBe,"STRONG",{});var n0t=s(U2e);ror=r(n0t,"bigbird_pegasus"),n0t.forEach(t),tor=r(XBe," \u2014 "),FQ=n(XBe,"A",{href:!0});var s0t=s(FQ);aor=r(s0t,"BigBirdPegasusForQuestionAnswering"),s0t.forEach(t),nor=r(XBe," (BigBird-Pegasus model)"),XBe.forEach(t),sor=i(X),CT=n(X,"LI",{});var zBe=s(CT);J2e=n(zBe,"STRONG",{});var l0t=s(J2e);lor=r(l0t,"camembert"),l0t.forEach(t),ior=r(zBe," \u2014 "),TQ=n(zBe,"A",{href:!0});var i0t=s(TQ);dor=r(i0t,"CamembertForQuestionAnswering"),i0t.forEach(t),cor=r(zBe," (CamemBERT model)"),zBe.forEach(t),mor=i(X),wT=n(X,"LI",{});var QBe=s(wT);Y2e=n(QBe,"STRONG",{});var d0t=s(Y2e);gor=r(d0t,"canine"),d0t.forEach(t),hor=r(QBe," \u2014 "),MQ=n(QBe,"A",{href:!0});var c0t=s(MQ);uor=r(c0t,"CanineForQuestionAnswering"),c0t.forEach(t),por=r(QBe," (CANINE model)"),QBe.forEach(t),_or=i(X),AT=n(X,"LI",{});var WBe=s(AT);K2e=n(WBe,"STRONG",{});var m0t=s(K2e);bor=r(m0t,"convbert"),m0t.forEach(t),vor=r(WBe," \u2014 "),EQ=n(WBe,"A",{href:!0});var f0t=s(EQ);For=r(f0t,"ConvBertForQuestionAnswering"),f0t.forEach(t),Tor=r(WBe," (ConvBERT model)"),WBe.forEach(t),Mor=i(X),LT=n(X,"LI",{});var HBe=s(LT);Z2e=n(HBe,"STRONG",{});var g0t=s(Z2e);Eor=r(g0t,"data2vec-text"),g0t.forEach(t),Cor=r(HBe," \u2014 "),CQ=n(HBe,"A",{href:!0});var h0t=s(CQ);wor=r(h0t,"Data2VecTextForQuestionAnswering"),h0t.forEach(t),Aor=r(HBe," (Data2VecText model)"),HBe.forEach(t),Lor=i(X),yT=n(X,"LI",{});var UBe=s(yT);ebe=n(UBe,"STRONG",{});var u0t=s(ebe);yor=r(u0t,"deberta"),u0t.forEach(t),xor=r(UBe," \u2014 "),wQ=n(UBe,"A",{href:!0});var p0t=s(wQ);$or=r(p0t,"DebertaForQuestionAnswering"),p0t.forEach(t),kor=r(UBe," (DeBERTa model)"),UBe.forEach(t),Sor=i(X),xT=n(X,"LI",{});var JBe=s(xT);obe=n(JBe,"STRONG",{});var _0t=s(obe);Ror=r(_0t,"deberta-v2"),_0t.forEach(t),Por=r(JBe," \u2014 "),AQ=n(JBe,"A",{href:!0});var b0t=s(AQ);Bor=r(b0t,"DebertaV2ForQuestionAnswering"),b0t.forEach(t),Ior=r(JBe," (DeBERTa-v2 model)"),JBe.forEach(t),Nor=i(X),$T=n(X,"LI",{});var YBe=s($T);rbe=n(YBe,"STRONG",{});var v0t=s(rbe);qor=r(v0t,"distilbert"),v0t.forEach(t),jor=r(YBe," \u2014 "),LQ=n(YBe,"A",{href:!0});var F0t=s(LQ);Dor=r(F0t,"DistilBertForQuestionAnswering"),F0t.forEach(t),Gor=r(YBe," (DistilBERT model)"),YBe.forEach(t),Oor=i(X),kT=n(X,"LI",{});var KBe=s(kT);tbe=n(KBe,"STRONG",{});var T0t=s(tbe);Vor=r(T0t,"electra"),T0t.forEach(t),Xor=r(KBe," \u2014 "),yQ=n(KBe,"A",{href:!0});var M0t=s(yQ);zor=r(M0t,"ElectraForQuestionAnswering"),M0t.forEach(t),Qor=r(KBe," (ELECTRA model)"),KBe.forEach(t),Wor=i(X),ST=n(X,"LI",{});var ZBe=s(ST);abe=n(ZBe,"STRONG",{});var E0t=s(abe);Hor=r(E0t,"flaubert"),E0t.forEach(t),Uor=r(ZBe," \u2014 "),xQ=n(ZBe,"A",{href:!0});var C0t=s(xQ);Jor=r(C0t,"FlaubertForQuestionAnsweringSimple"),C0t.forEach(t),Yor=r(ZBe," (FlauBERT model)"),ZBe.forEach(t),Kor=i(X),RT=n(X,"LI",{});var eIe=s(RT);nbe=n(eIe,"STRONG",{});var w0t=s(nbe);Zor=r(w0t,"fnet"),w0t.forEach(t),err=r(eIe," \u2014 "),$Q=n(eIe,"A",{href:!0});var A0t=s($Q);orr=r(A0t,"FNetForQuestionAnswering"),A0t.forEach(t),rrr=r(eIe," (FNet model)"),eIe.forEach(t),trr=i(X),PT=n(X,"LI",{});var oIe=s(PT);sbe=n(oIe,"STRONG",{});var L0t=s(sbe);arr=r(L0t,"funnel"),L0t.forEach(t),nrr=r(oIe," \u2014 "),kQ=n(oIe,"A",{href:!0});var y0t=s(kQ);srr=r(y0t,"FunnelForQuestionAnswering"),y0t.forEach(t),lrr=r(oIe," (Funnel Transformer model)"),oIe.forEach(t),irr=i(X),BT=n(X,"LI",{});var rIe=s(BT);lbe=n(rIe,"STRONG",{});var x0t=s(lbe);drr=r(x0t,"gptj"),x0t.forEach(t),crr=r(rIe," \u2014 "),SQ=n(rIe,"A",{href:!0});var $0t=s(SQ);mrr=r($0t,"GPTJForQuestionAnswering"),$0t.forEach(t),frr=r(rIe," (GPT-J model)"),rIe.forEach(t),grr=i(X),IT=n(X,"LI",{});var tIe=s(IT);ibe=n(tIe,"STRONG",{});var k0t=s(ibe);hrr=r(k0t,"ibert"),k0t.forEach(t),urr=r(tIe," \u2014 "),RQ=n(tIe,"A",{href:!0});var S0t=s(RQ);prr=r(S0t,"IBertForQuestionAnswering"),S0t.forEach(t),_rr=r(tIe," (I-BERT model)"),tIe.forEach(t),brr=i(X),NT=n(X,"LI",{});var aIe=s(NT);dbe=n(aIe,"STRONG",{});var R0t=s(dbe);vrr=r(R0t,"layoutlmv2"),R0t.forEach(t),Frr=r(aIe," \u2014 "),PQ=n(aIe,"A",{href:!0});var P0t=s(PQ);Trr=r(P0t,"LayoutLMv2ForQuestionAnswering"),P0t.forEach(t),Mrr=r(aIe," (LayoutLMv2 model)"),aIe.forEach(t),Err=i(X),qT=n(X,"LI",{});var nIe=s(qT);cbe=n(nIe,"STRONG",{});var B0t=s(cbe);Crr=r(B0t,"layoutlmv3"),B0t.forEach(t),wrr=r(nIe," \u2014 "),BQ=n(nIe,"A",{href:!0});var I0t=s(BQ);Arr=r(I0t,"LayoutLMv3ForQuestionAnswering"),I0t.forEach(t),Lrr=r(nIe," (LayoutLMv3 model)"),nIe.forEach(t),yrr=i(X),jT=n(X,"LI",{});var sIe=s(jT);mbe=n(sIe,"STRONG",{});var N0t=s(mbe);xrr=r(N0t,"led"),N0t.forEach(t),$rr=r(sIe," \u2014 "),IQ=n(sIe,"A",{href:!0});var q0t=s(IQ);krr=r(q0t,"LEDForQuestionAnswering"),q0t.forEach(t),Srr=r(sIe," (LED model)"),sIe.forEach(t),Rrr=i(X),DT=n(X,"LI",{});var lIe=s(DT);fbe=n(lIe,"STRONG",{});var j0t=s(fbe);Prr=r(j0t,"longformer"),j0t.forEach(t),Brr=r(lIe," \u2014 "),NQ=n(lIe,"A",{href:!0});var D0t=s(NQ);Irr=r(D0t,"LongformerForQuestionAnswering"),D0t.forEach(t),Nrr=r(lIe," (Longformer model)"),lIe.forEach(t),qrr=i(X),GT=n(X,"LI",{});var iIe=s(GT);gbe=n(iIe,"STRONG",{});var G0t=s(gbe);jrr=r(G0t,"lxmert"),G0t.forEach(t),Drr=r(iIe," \u2014 "),qQ=n(iIe,"A",{href:!0});var O0t=s(qQ);Grr=r(O0t,"LxmertForQuestionAnswering"),O0t.forEach(t),Orr=r(iIe," (LXMERT model)"),iIe.forEach(t),Vrr=i(X),OT=n(X,"LI",{});var dIe=s(OT);hbe=n(dIe,"STRONG",{});var V0t=s(hbe);Xrr=r(V0t,"mbart"),V0t.forEach(t),zrr=r(dIe," \u2014 "),jQ=n(dIe,"A",{href:!0});var X0t=s(jQ);Qrr=r(X0t,"MBartForQuestionAnswering"),X0t.forEach(t),Wrr=r(dIe," (mBART model)"),dIe.forEach(t),Hrr=i(X),VT=n(X,"LI",{});var cIe=s(VT);ube=n(cIe,"STRONG",{});var z0t=s(ube);Urr=r(z0t,"megatron-bert"),z0t.forEach(t),Jrr=r(cIe," \u2014 "),DQ=n(cIe,"A",{href:!0});var Q0t=s(DQ);Yrr=r(Q0t,"MegatronBertForQuestionAnswering"),Q0t.forEach(t),Krr=r(cIe," (Megatron-BERT model)"),cIe.forEach(t),Zrr=i(X),XT=n(X,"LI",{});var mIe=s(XT);pbe=n(mIe,"STRONG",{});var W0t=s(pbe);etr=r(W0t,"mobilebert"),W0t.forEach(t),otr=r(mIe," \u2014 "),GQ=n(mIe,"A",{href:!0});var H0t=s(GQ);rtr=r(H0t,"MobileBertForQuestionAnswering"),H0t.forEach(t),ttr=r(mIe," (MobileBERT model)"),mIe.forEach(t),atr=i(X),zT=n(X,"LI",{});var fIe=s(zT);_be=n(fIe,"STRONG",{});var U0t=s(_be);ntr=r(U0t,"mpnet"),U0t.forEach(t),str=r(fIe," \u2014 "),OQ=n(fIe,"A",{href:!0});var J0t=s(OQ);ltr=r(J0t,"MPNetForQuestionAnswering"),J0t.forEach(t),itr=r(fIe," (MPNet model)"),fIe.forEach(t),dtr=i(X),QT=n(X,"LI",{});var gIe=s(QT);bbe=n(gIe,"STRONG",{});var Y0t=s(bbe);ctr=r(Y0t,"mvp"),Y0t.forEach(t),mtr=r(gIe," \u2014 "),VQ=n(gIe,"A",{href:!0});var K0t=s(VQ);ftr=r(K0t,"MvpForQuestionAnswering"),K0t.forEach(t),gtr=r(gIe," (MVP model)"),gIe.forEach(t),htr=i(X),WT=n(X,"LI",{});var hIe=s(WT);vbe=n(hIe,"STRONG",{});var Z0t=s(vbe);utr=r(Z0t,"nezha"),Z0t.forEach(t),ptr=r(hIe," \u2014 "),XQ=n(hIe,"A",{href:!0});var ewt=s(XQ);_tr=r(ewt,"NezhaForQuestionAnswering"),ewt.forEach(t),btr=r(hIe," (Nezha model)"),hIe.forEach(t),vtr=i(X),HT=n(X,"LI",{});var uIe=s(HT);Fbe=n(uIe,"STRONG",{});var owt=s(Fbe);Ftr=r(owt,"nystromformer"),owt.forEach(t),Ttr=r(uIe," \u2014 "),zQ=n(uIe,"A",{href:!0});var rwt=s(zQ);Mtr=r(rwt,"NystromformerForQuestionAnswering"),rwt.forEach(t),Etr=r(uIe," (Nystr\xF6mformer model)"),uIe.forEach(t),Ctr=i(X),UT=n(X,"LI",{});var pIe=s(UT);Tbe=n(pIe,"STRONG",{});var twt=s(Tbe);wtr=r(twt,"qdqbert"),twt.forEach(t),Atr=r(pIe," \u2014 "),QQ=n(pIe,"A",{href:!0});var awt=s(QQ);Ltr=r(awt,"QDQBertForQuestionAnswering"),awt.forEach(t),ytr=r(pIe," (QDQBert model)"),pIe.forEach(t),xtr=i(X),JT=n(X,"LI",{});var _Ie=s(JT);Mbe=n(_Ie,"STRONG",{});var nwt=s(Mbe);$tr=r(nwt,"reformer"),nwt.forEach(t),ktr=r(_Ie," \u2014 "),WQ=n(_Ie,"A",{href:!0});var swt=s(WQ);Str=r(swt,"ReformerForQuestionAnswering"),swt.forEach(t),Rtr=r(_Ie," (Reformer model)"),_Ie.forEach(t),Ptr=i(X),YT=n(X,"LI",{});var bIe=s(YT);Ebe=n(bIe,"STRONG",{});var lwt=s(Ebe);Btr=r(lwt,"rembert"),lwt.forEach(t),Itr=r(bIe," \u2014 "),HQ=n(bIe,"A",{href:!0});var iwt=s(HQ);Ntr=r(iwt,"RemBertForQuestionAnswering"),iwt.forEach(t),qtr=r(bIe," (RemBERT model)"),bIe.forEach(t),jtr=i(X),KT=n(X,"LI",{});var vIe=s(KT);Cbe=n(vIe,"STRONG",{});var dwt=s(Cbe);Dtr=r(dwt,"roberta"),dwt.forEach(t),Gtr=r(vIe," \u2014 "),UQ=n(vIe,"A",{href:!0});var cwt=s(UQ);Otr=r(cwt,"RobertaForQuestionAnswering"),cwt.forEach(t),Vtr=r(vIe," (RoBERTa model)"),vIe.forEach(t),Xtr=i(X),ZT=n(X,"LI",{});var FIe=s(ZT);wbe=n(FIe,"STRONG",{});var mwt=s(wbe);ztr=r(mwt,"roformer"),mwt.forEach(t),Qtr=r(FIe," \u2014 "),JQ=n(FIe,"A",{href:!0});var fwt=s(JQ);Wtr=r(fwt,"RoFormerForQuestionAnswering"),fwt.forEach(t),Htr=r(FIe," (RoFormer model)"),FIe.forEach(t),Utr=i(X),eM=n(X,"LI",{});var TIe=s(eM);Abe=n(TIe,"STRONG",{});var gwt=s(Abe);Jtr=r(gwt,"splinter"),gwt.forEach(t),Ytr=r(TIe," \u2014 "),YQ=n(TIe,"A",{href:!0});var hwt=s(YQ);Ktr=r(hwt,"SplinterForQuestionAnswering"),hwt.forEach(t),Ztr=r(TIe," (Splinter model)"),TIe.forEach(t),ear=i(X),oM=n(X,"LI",{});var MIe=s(oM);Lbe=n(MIe,"STRONG",{});var uwt=s(Lbe);oar=r(uwt,"squeezebert"),uwt.forEach(t),rar=r(MIe," \u2014 "),KQ=n(MIe,"A",{href:!0});var pwt=s(KQ);tar=r(pwt,"SqueezeBertForQuestionAnswering"),pwt.forEach(t),aar=r(MIe," (SqueezeBERT model)"),MIe.forEach(t),nar=i(X),rM=n(X,"LI",{});var EIe=s(rM);ybe=n(EIe,"STRONG",{});var _wt=s(ybe);sar=r(_wt,"xlm"),_wt.forEach(t),lar=r(EIe," \u2014 "),ZQ=n(EIe,"A",{href:!0});var bwt=s(ZQ);iar=r(bwt,"XLMForQuestionAnsweringSimple"),bwt.forEach(t),dar=r(EIe," (XLM model)"),EIe.forEach(t),car=i(X),tM=n(X,"LI",{});var CIe=s(tM);xbe=n(CIe,"STRONG",{});var vwt=s(xbe);mar=r(vwt,"xlm-roberta"),vwt.forEach(t),far=r(CIe," \u2014 "),eW=n(CIe,"A",{href:!0});var Fwt=s(eW);gar=r(Fwt,"XLMRobertaForQuestionAnswering"),Fwt.forEach(t),har=r(CIe," (XLM-RoBERTa model)"),CIe.forEach(t),uar=i(X),aM=n(X,"LI",{});var wIe=s(aM);$be=n(wIe,"STRONG",{});var Twt=s($be);par=r(Twt,"xlm-roberta-xl"),Twt.forEach(t),_ar=r(wIe," \u2014 "),oW=n(wIe,"A",{href:!0});var Mwt=s(oW);bar=r(Mwt,"XLMRobertaXLForQuestionAnswering"),Mwt.forEach(t),Far=r(wIe," (XLM-RoBERTa-XL model)"),wIe.forEach(t),Tar=i(X),nM=n(X,"LI",{});var AIe=s(nM);kbe=n(AIe,"STRONG",{});var Ewt=s(kbe);Mar=r(Ewt,"xlnet"),Ewt.forEach(t),Ear=r(AIe," \u2014 "),rW=n(AIe,"A",{href:!0});var Cwt=s(rW);Car=r(Cwt,"XLNetForQuestionAnsweringSimple"),Cwt.forEach(t),war=r(AIe," (XLNet model)"),AIe.forEach(t),Aar=i(X),sM=n(X,"LI",{});var LIe=s(sM);Sbe=n(LIe,"STRONG",{});var wwt=s(Sbe);Lar=r(wwt,"yoso"),wwt.forEach(t),yar=r(LIe," \u2014 "),tW=n(LIe,"A",{href:!0});var Awt=s(tW);xar=r(Awt,"YosoForQuestionAnswering"),Awt.forEach(t),$ar=r(LIe," (YOSO model)"),LIe.forEach(t),X.forEach(t),kar=i(pa),lM=n(pa,"P",{});var yIe=s(lM);Sar=r(yIe,"The model is set in evaluation mode by default using "),Rbe=n(yIe,"CODE",{});var Lwt=s(Rbe);Rar=r(Lwt,"model.eval()"),Lwt.forEach(t),Par=r(yIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pbe=n(yIe,"CODE",{});var ywt=s(Pbe);Bar=r(ywt,"model.train()"),ywt.forEach(t),yIe.forEach(t),Iar=i(pa),T(iM.$$.fragment,pa),pa.forEach(t),cl.forEach(t),TXe=i(m),pd=n(m,"H2",{class:!0});var LQe=s(pd);dM=n(LQe,"A",{id:!0,class:!0,href:!0});var xwt=s(dM);Bbe=n(xwt,"SPAN",{});var $wt=s(Bbe);T(C8.$$.fragment,$wt),$wt.forEach(t),xwt.forEach(t),Nar=i(LQe),Ibe=n(LQe,"SPAN",{});var kwt=s(Ibe);qar=r(kwt,"AutoModelForTableQuestionAnswering"),kwt.forEach(t),LQe.forEach(t),MXe=i(m),Do=n(m,"DIV",{class:!0});var ml=s(Do);T(w8.$$.fragment,ml),jar=i(ml),_d=n(ml,"P",{});var zre=s(_d);Dar=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),aW=n(zre,"A",{href:!0});var Swt=s(aW);Gar=r(Swt,"from_pretrained()"),Swt.forEach(t),Oar=r(zre," class method or the "),nW=n(zre,"A",{href:!0});var Rwt=s(nW);Var=r(Rwt,"from_config()"),Rwt.forEach(t),Xar=r(zre,` class
method.`),zre.forEach(t),zar=i(ml),A8=n(ml,"P",{});var yQe=s(A8);Qar=r(yQe,"This class cannot be instantiated directly using "),Nbe=n(yQe,"CODE",{});var Pwt=s(Nbe);War=r(Pwt,"__init__()"),Pwt.forEach(t),Har=r(yQe," (throws an error)."),yQe.forEach(t),Uar=i(ml),_t=n(ml,"DIV",{class:!0});var A7=s(_t);T(L8.$$.fragment,A7),Jar=i(A7),qbe=n(A7,"P",{});var Bwt=s(qbe);Yar=r(Bwt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Bwt.forEach(t),Kar=i(A7),bd=n(A7,"P",{});var Qre=s(bd);Zar=r(Qre,`Note:
Loading a model from its configuration file does `),jbe=n(Qre,"STRONG",{});var Iwt=s(jbe);enr=r(Iwt,"not"),Iwt.forEach(t),onr=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=n(Qre,"A",{href:!0});var Nwt=s(sW);rnr=r(Nwt,"from_pretrained()"),Nwt.forEach(t),tnr=r(Qre," to load the model weights."),Qre.forEach(t),anr=i(A7),T(cM.$$.fragment,A7),A7.forEach(t),nnr=i(ml),so=n(ml,"DIV",{class:!0});var _a=s(so);T(y8.$$.fragment,_a),snr=i(_a),Dbe=n(_a,"P",{});var qwt=s(Dbe);lnr=r(qwt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),qwt.forEach(t),inr=i(_a),Qa=n(_a,"P",{});var L7=s(Qa);dnr=r(L7,"The model class to instantiate is selected based on the "),Gbe=n(L7,"CODE",{});var jwt=s(Gbe);cnr=r(jwt,"model_type"),jwt.forEach(t),mnr=r(L7,` property of the config object (either
passed as an argument or loaded from `),Obe=n(L7,"CODE",{});var Dwt=s(Obe);fnr=r(Dwt,"pretrained_model_name_or_path"),Dwt.forEach(t),gnr=r(L7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vbe=n(L7,"CODE",{});var Gwt=s(Vbe);hnr=r(Gwt,"pretrained_model_name_or_path"),Gwt.forEach(t),unr=r(L7,":"),L7.forEach(t),pnr=i(_a),Xbe=n(_a,"UL",{});var Owt=s(Xbe);mM=n(Owt,"LI",{});var xIe=s(mM);zbe=n(xIe,"STRONG",{});var Vwt=s(zbe);_nr=r(Vwt,"tapas"),Vwt.forEach(t),bnr=r(xIe," \u2014 "),lW=n(xIe,"A",{href:!0});var Xwt=s(lW);vnr=r(Xwt,"TapasForQuestionAnswering"),Xwt.forEach(t),Fnr=r(xIe," (TAPAS model)"),xIe.forEach(t),Owt.forEach(t),Tnr=i(_a),fM=n(_a,"P",{});var $Ie=s(fM);Mnr=r($Ie,"The model is set in evaluation mode by default using "),Qbe=n($Ie,"CODE",{});var zwt=s(Qbe);Enr=r(zwt,"model.eval()"),zwt.forEach(t),Cnr=r($Ie,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wbe=n($Ie,"CODE",{});var Qwt=s(Wbe);wnr=r(Qwt,"model.train()"),Qwt.forEach(t),$Ie.forEach(t),Anr=i(_a),T(gM.$$.fragment,_a),_a.forEach(t),ml.forEach(t),EXe=i(m),vd=n(m,"H2",{class:!0});var xQe=s(vd);hM=n(xQe,"A",{id:!0,class:!0,href:!0});var Wwt=s(hM);Hbe=n(Wwt,"SPAN",{});var Hwt=s(Hbe);T(x8.$$.fragment,Hwt),Hwt.forEach(t),Wwt.forEach(t),Lnr=i(xQe),Ube=n(xQe,"SPAN",{});var Uwt=s(Ube);ynr=r(Uwt,"AutoModelForImageClassification"),Uwt.forEach(t),xQe.forEach(t),CXe=i(m),Go=n(m,"DIV",{class:!0});var fl=s(Go);T($8.$$.fragment,fl),xnr=i(fl),Fd=n(fl,"P",{});var Wre=s(Fd);$nr=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iW=n(Wre,"A",{href:!0});var Jwt=s(iW);knr=r(Jwt,"from_pretrained()"),Jwt.forEach(t),Snr=r(Wre," class method or the "),dW=n(Wre,"A",{href:!0});var Ywt=s(dW);Rnr=r(Ywt,"from_config()"),Ywt.forEach(t),Pnr=r(Wre,` class
method.`),Wre.forEach(t),Bnr=i(fl),k8=n(fl,"P",{});var $Qe=s(k8);Inr=r($Qe,"This class cannot be instantiated directly using "),Jbe=n($Qe,"CODE",{});var Kwt=s(Jbe);Nnr=r(Kwt,"__init__()"),Kwt.forEach(t),qnr=r($Qe," (throws an error)."),$Qe.forEach(t),jnr=i(fl),bt=n(fl,"DIV",{class:!0});var y7=s(bt);T(S8.$$.fragment,y7),Dnr=i(y7),Ybe=n(y7,"P",{});var Zwt=s(Ybe);Gnr=r(Zwt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Zwt.forEach(t),Onr=i(y7),Td=n(y7,"P",{});var Hre=s(Td);Vnr=r(Hre,`Note:
Loading a model from its configuration file does `),Kbe=n(Hre,"STRONG",{});var eAt=s(Kbe);Xnr=r(eAt,"not"),eAt.forEach(t),znr=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=n(Hre,"A",{href:!0});var oAt=s(cW);Qnr=r(oAt,"from_pretrained()"),oAt.forEach(t),Wnr=r(Hre," to load the model weights."),Hre.forEach(t),Hnr=i(y7),T(uM.$$.fragment,y7),y7.forEach(t),Unr=i(fl),lo=n(fl,"DIV",{class:!0});var ba=s(lo);T(R8.$$.fragment,ba),Jnr=i(ba),Zbe=n(ba,"P",{});var rAt=s(Zbe);Ynr=r(rAt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rAt.forEach(t),Knr=i(ba),Wa=n(ba,"P",{});var x7=s(Wa);Znr=r(x7,"The model class to instantiate is selected based on the "),eve=n(x7,"CODE",{});var tAt=s(eve);esr=r(tAt,"model_type"),tAt.forEach(t),osr=r(x7,` property of the config object (either
passed as an argument or loaded from `),ove=n(x7,"CODE",{});var aAt=s(ove);rsr=r(aAt,"pretrained_model_name_or_path"),aAt.forEach(t),tsr=r(x7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=n(x7,"CODE",{});var nAt=s(rve);asr=r(nAt,"pretrained_model_name_or_path"),nAt.forEach(t),nsr=r(x7,":"),x7.forEach(t),ssr=i(ba),ve=n(ba,"UL",{});var Te=s(ve);pM=n(Te,"LI",{});var kIe=s(pM);tve=n(kIe,"STRONG",{});var sAt=s(tve);lsr=r(sAt,"beit"),sAt.forEach(t),isr=r(kIe," \u2014 "),mW=n(kIe,"A",{href:!0});var lAt=s(mW);dsr=r(lAt,"BeitForImageClassification"),lAt.forEach(t),csr=r(kIe," (BEiT model)"),kIe.forEach(t),msr=i(Te),_M=n(Te,"LI",{});var SIe=s(_M);ave=n(SIe,"STRONG",{});var iAt=s(ave);fsr=r(iAt,"convnext"),iAt.forEach(t),gsr=r(SIe," \u2014 "),fW=n(SIe,"A",{href:!0});var dAt=s(fW);hsr=r(dAt,"ConvNextForImageClassification"),dAt.forEach(t),usr=r(SIe," (ConvNeXT model)"),SIe.forEach(t),psr=i(Te),bM=n(Te,"LI",{});var RIe=s(bM);nve=n(RIe,"STRONG",{});var cAt=s(nve);_sr=r(cAt,"cvt"),cAt.forEach(t),bsr=r(RIe," \u2014 "),gW=n(RIe,"A",{href:!0});var mAt=s(gW);vsr=r(mAt,"CvtForImageClassification"),mAt.forEach(t),Fsr=r(RIe," (CvT model)"),RIe.forEach(t),Tsr=i(Te),vM=n(Te,"LI",{});var PIe=s(vM);sve=n(PIe,"STRONG",{});var fAt=s(sve);Msr=r(fAt,"data2vec-vision"),fAt.forEach(t),Esr=r(PIe," \u2014 "),hW=n(PIe,"A",{href:!0});var gAt=s(hW);Csr=r(gAt,"Data2VecVisionForImageClassification"),gAt.forEach(t),wsr=r(PIe," (Data2VecVision model)"),PIe.forEach(t),Asr=i(Te),Hs=n(Te,"LI",{});var xS=s(Hs);lve=n(xS,"STRONG",{});var hAt=s(lve);Lsr=r(hAt,"deit"),hAt.forEach(t),ysr=r(xS," \u2014 "),uW=n(xS,"A",{href:!0});var uAt=s(uW);xsr=r(uAt,"DeiTForImageClassification"),uAt.forEach(t),$sr=r(xS," or "),pW=n(xS,"A",{href:!0});var pAt=s(pW);ksr=r(pAt,"DeiTForImageClassificationWithTeacher"),pAt.forEach(t),Ssr=r(xS," (DeiT model)"),xS.forEach(t),Rsr=i(Te),FM=n(Te,"LI",{});var BIe=s(FM);ive=n(BIe,"STRONG",{});var _At=s(ive);Psr=r(_At,"imagegpt"),_At.forEach(t),Bsr=r(BIe," \u2014 "),_W=n(BIe,"A",{href:!0});var bAt=s(_W);Isr=r(bAt,"ImageGPTForImageClassification"),bAt.forEach(t),Nsr=r(BIe," (ImageGPT model)"),BIe.forEach(t),qsr=i(Te),Us=n(Te,"LI",{});var $S=s(Us);dve=n($S,"STRONG",{});var vAt=s(dve);jsr=r(vAt,"levit"),vAt.forEach(t),Dsr=r($S," \u2014 "),bW=n($S,"A",{href:!0});var FAt=s(bW);Gsr=r(FAt,"LevitForImageClassification"),FAt.forEach(t),Osr=r($S," or "),vW=n($S,"A",{href:!0});var TAt=s(vW);Vsr=r(TAt,"LevitForImageClassificationWithTeacher"),TAt.forEach(t),Xsr=r($S," (LeViT model)"),$S.forEach(t),zsr=i(Te),TM=n(Te,"LI",{});var IIe=s(TM);cve=n(IIe,"STRONG",{});var MAt=s(cve);Qsr=r(MAt,"mobilevit"),MAt.forEach(t),Wsr=r(IIe," \u2014 "),FW=n(IIe,"A",{href:!0});var EAt=s(FW);Hsr=r(EAt,"MobileViTForImageClassification"),EAt.forEach(t),Usr=r(IIe," (MobileViT model)"),IIe.forEach(t),Jsr=i(Te),vt=n(Te,"LI",{});var km=s(vt);mve=n(km,"STRONG",{});var CAt=s(mve);Ysr=r(CAt,"perceiver"),CAt.forEach(t),Ksr=r(km," \u2014 "),TW=n(km,"A",{href:!0});var wAt=s(TW);Zsr=r(wAt,"PerceiverForImageClassificationLearned"),wAt.forEach(t),elr=r(km," or "),MW=n(km,"A",{href:!0});var AAt=s(MW);olr=r(AAt,"PerceiverForImageClassificationFourier"),AAt.forEach(t),rlr=r(km," or "),EW=n(km,"A",{href:!0});var LAt=s(EW);tlr=r(LAt,"PerceiverForImageClassificationConvProcessing"),LAt.forEach(t),alr=r(km," (Perceiver model)"),km.forEach(t),nlr=i(Te),MM=n(Te,"LI",{});var NIe=s(MM);fve=n(NIe,"STRONG",{});var yAt=s(fve);slr=r(yAt,"poolformer"),yAt.forEach(t),llr=r(NIe," \u2014 "),CW=n(NIe,"A",{href:!0});var xAt=s(CW);ilr=r(xAt,"PoolFormerForImageClassification"),xAt.forEach(t),dlr=r(NIe," (PoolFormer model)"),NIe.forEach(t),clr=i(Te),EM=n(Te,"LI",{});var qIe=s(EM);gve=n(qIe,"STRONG",{});var $At=s(gve);mlr=r($At,"regnet"),$At.forEach(t),flr=r(qIe," \u2014 "),wW=n(qIe,"A",{href:!0});var kAt=s(wW);glr=r(kAt,"RegNetForImageClassification"),kAt.forEach(t),hlr=r(qIe," (RegNet model)"),qIe.forEach(t),ulr=i(Te),CM=n(Te,"LI",{});var jIe=s(CM);hve=n(jIe,"STRONG",{});var SAt=s(hve);plr=r(SAt,"resnet"),SAt.forEach(t),_lr=r(jIe," \u2014 "),AW=n(jIe,"A",{href:!0});var RAt=s(AW);blr=r(RAt,"ResNetForImageClassification"),RAt.forEach(t),vlr=r(jIe," (ResNet model)"),jIe.forEach(t),Flr=i(Te),wM=n(Te,"LI",{});var DIe=s(wM);uve=n(DIe,"STRONG",{});var PAt=s(uve);Tlr=r(PAt,"segformer"),PAt.forEach(t),Mlr=r(DIe," \u2014 "),LW=n(DIe,"A",{href:!0});var BAt=s(LW);Elr=r(BAt,"SegformerForImageClassification"),BAt.forEach(t),Clr=r(DIe," (SegFormer model)"),DIe.forEach(t),wlr=i(Te),AM=n(Te,"LI",{});var GIe=s(AM);pve=n(GIe,"STRONG",{});var IAt=s(pve);Alr=r(IAt,"swin"),IAt.forEach(t),Llr=r(GIe," \u2014 "),yW=n(GIe,"A",{href:!0});var NAt=s(yW);ylr=r(NAt,"SwinForImageClassification"),NAt.forEach(t),xlr=r(GIe," (Swin Transformer model)"),GIe.forEach(t),$lr=i(Te),LM=n(Te,"LI",{});var OIe=s(LM);_ve=n(OIe,"STRONG",{});var qAt=s(_ve);klr=r(qAt,"van"),qAt.forEach(t),Slr=r(OIe," \u2014 "),xW=n(OIe,"A",{href:!0});var jAt=s(xW);Rlr=r(jAt,"VanForImageClassification"),jAt.forEach(t),Plr=r(OIe," (VAN model)"),OIe.forEach(t),Blr=i(Te),yM=n(Te,"LI",{});var VIe=s(yM);bve=n(VIe,"STRONG",{});var DAt=s(bve);Ilr=r(DAt,"vit"),DAt.forEach(t),Nlr=r(VIe," \u2014 "),$W=n(VIe,"A",{href:!0});var GAt=s($W);qlr=r(GAt,"ViTForImageClassification"),GAt.forEach(t),jlr=r(VIe," (ViT model)"),VIe.forEach(t),Te.forEach(t),Dlr=i(ba),xM=n(ba,"P",{});var XIe=s(xM);Glr=r(XIe,"The model is set in evaluation mode by default using "),vve=n(XIe,"CODE",{});var OAt=s(vve);Olr=r(OAt,"model.eval()"),OAt.forEach(t),Vlr=r(XIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fve=n(XIe,"CODE",{});var VAt=s(Fve);Xlr=r(VAt,"model.train()"),VAt.forEach(t),XIe.forEach(t),zlr=i(ba),T($M.$$.fragment,ba),ba.forEach(t),fl.forEach(t),wXe=i(m),Md=n(m,"H2",{class:!0});var kQe=s(Md);kM=n(kQe,"A",{id:!0,class:!0,href:!0});var XAt=s(kM);Tve=n(XAt,"SPAN",{});var zAt=s(Tve);T(P8.$$.fragment,zAt),zAt.forEach(t),XAt.forEach(t),Qlr=i(kQe),Mve=n(kQe,"SPAN",{});var QAt=s(Mve);Wlr=r(QAt,"AutoModelForVision2Seq"),QAt.forEach(t),kQe.forEach(t),AXe=i(m),Oo=n(m,"DIV",{class:!0});var gl=s(Oo);T(B8.$$.fragment,gl),Hlr=i(gl),Ed=n(gl,"P",{});var Ure=s(Ed);Ulr=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kW=n(Ure,"A",{href:!0});var WAt=s(kW);Jlr=r(WAt,"from_pretrained()"),WAt.forEach(t),Ylr=r(Ure," class method or the "),SW=n(Ure,"A",{href:!0});var HAt=s(SW);Klr=r(HAt,"from_config()"),HAt.forEach(t),Zlr=r(Ure,` class
method.`),Ure.forEach(t),eir=i(gl),I8=n(gl,"P",{});var SQe=s(I8);oir=r(SQe,"This class cannot be instantiated directly using "),Eve=n(SQe,"CODE",{});var UAt=s(Eve);rir=r(UAt,"__init__()"),UAt.forEach(t),tir=r(SQe," (throws an error)."),SQe.forEach(t),air=i(gl),Ft=n(gl,"DIV",{class:!0});var $7=s(Ft);T(N8.$$.fragment,$7),nir=i($7),Cve=n($7,"P",{});var JAt=s(Cve);sir=r(JAt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),JAt.forEach(t),lir=i($7),Cd=n($7,"P",{});var Jre=s(Cd);iir=r(Jre,`Note:
Loading a model from its configuration file does `),wve=n(Jre,"STRONG",{});var YAt=s(wve);dir=r(YAt,"not"),YAt.forEach(t),cir=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=n(Jre,"A",{href:!0});var KAt=s(RW);mir=r(KAt,"from_pretrained()"),KAt.forEach(t),fir=r(Jre," to load the model weights."),Jre.forEach(t),gir=i($7),T(SM.$$.fragment,$7),$7.forEach(t),hir=i(gl),io=n(gl,"DIV",{class:!0});var va=s(io);T(q8.$$.fragment,va),uir=i(va),Ave=n(va,"P",{});var ZAt=s(Ave);pir=r(ZAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ZAt.forEach(t),_ir=i(va),Ha=n(va,"P",{});var k7=s(Ha);bir=r(k7,"The model class to instantiate is selected based on the "),Lve=n(k7,"CODE",{});var e6t=s(Lve);vir=r(e6t,"model_type"),e6t.forEach(t),Fir=r(k7,` property of the config object (either
passed as an argument or loaded from `),yve=n(k7,"CODE",{});var o6t=s(yve);Tir=r(o6t,"pretrained_model_name_or_path"),o6t.forEach(t),Mir=r(k7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=n(k7,"CODE",{});var r6t=s(xve);Eir=r(r6t,"pretrained_model_name_or_path"),r6t.forEach(t),Cir=r(k7,":"),k7.forEach(t),wir=i(va),$ve=n(va,"UL",{});var t6t=s($ve);RM=n(t6t,"LI",{});var zIe=s(RM);kve=n(zIe,"STRONG",{});var a6t=s(kve);Air=r(a6t,"vision-encoder-decoder"),a6t.forEach(t),Lir=r(zIe," \u2014 "),PW=n(zIe,"A",{href:!0});var n6t=s(PW);yir=r(n6t,"VisionEncoderDecoderModel"),n6t.forEach(t),xir=r(zIe," (Vision Encoder decoder model)"),zIe.forEach(t),t6t.forEach(t),$ir=i(va),PM=n(va,"P",{});var QIe=s(PM);kir=r(QIe,"The model is set in evaluation mode by default using "),Sve=n(QIe,"CODE",{});var s6t=s(Sve);Sir=r(s6t,"model.eval()"),s6t.forEach(t),Rir=r(QIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rve=n(QIe,"CODE",{});var l6t=s(Rve);Pir=r(l6t,"model.train()"),l6t.forEach(t),QIe.forEach(t),Bir=i(va),T(BM.$$.fragment,va),va.forEach(t),gl.forEach(t),LXe=i(m),wd=n(m,"H2",{class:!0});var RQe=s(wd);IM=n(RQe,"A",{id:!0,class:!0,href:!0});var i6t=s(IM);Pve=n(i6t,"SPAN",{});var d6t=s(Pve);T(j8.$$.fragment,d6t),d6t.forEach(t),i6t.forEach(t),Iir=i(RQe),Bve=n(RQe,"SPAN",{});var c6t=s(Bve);Nir=r(c6t,"AutoModelForVisualQuestionAnswering"),c6t.forEach(t),RQe.forEach(t),yXe=i(m),Vo=n(m,"DIV",{class:!0});var hl=s(Vo);T(D8.$$.fragment,hl),qir=i(hl),Ad=n(hl,"P",{});var Yre=s(Ad);jir=r(Yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),BW=n(Yre,"A",{href:!0});var m6t=s(BW);Dir=r(m6t,"from_pretrained()"),m6t.forEach(t),Gir=r(Yre," class method or the "),IW=n(Yre,"A",{href:!0});var f6t=s(IW);Oir=r(f6t,"from_config()"),f6t.forEach(t),Vir=r(Yre,` class
method.`),Yre.forEach(t),Xir=i(hl),G8=n(hl,"P",{});var PQe=s(G8);zir=r(PQe,"This class cannot be instantiated directly using "),Ive=n(PQe,"CODE",{});var g6t=s(Ive);Qir=r(g6t,"__init__()"),g6t.forEach(t),Wir=r(PQe," (throws an error)."),PQe.forEach(t),Hir=i(hl),Tt=n(hl,"DIV",{class:!0});var S7=s(Tt);T(O8.$$.fragment,S7),Uir=i(S7),Nve=n(S7,"P",{});var h6t=s(Nve);Jir=r(h6t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),h6t.forEach(t),Yir=i(S7),Ld=n(S7,"P",{});var Kre=s(Ld);Kir=r(Kre,`Note:
Loading a model from its configuration file does `),qve=n(Kre,"STRONG",{});var u6t=s(qve);Zir=r(u6t,"not"),u6t.forEach(t),edr=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),NW=n(Kre,"A",{href:!0});var p6t=s(NW);odr=r(p6t,"from_pretrained()"),p6t.forEach(t),rdr=r(Kre," to load the model weights."),Kre.forEach(t),tdr=i(S7),T(NM.$$.fragment,S7),S7.forEach(t),adr=i(hl),co=n(hl,"DIV",{class:!0});var Fa=s(co);T(V8.$$.fragment,Fa),ndr=i(Fa),jve=n(Fa,"P",{});var _6t=s(jve);sdr=r(_6t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),_6t.forEach(t),ldr=i(Fa),Ua=n(Fa,"P",{});var R7=s(Ua);idr=r(R7,"The model class to instantiate is selected based on the "),Dve=n(R7,"CODE",{});var b6t=s(Dve);ddr=r(b6t,"model_type"),b6t.forEach(t),cdr=r(R7,` property of the config object (either
passed as an argument or loaded from `),Gve=n(R7,"CODE",{});var v6t=s(Gve);mdr=r(v6t,"pretrained_model_name_or_path"),v6t.forEach(t),fdr=r(R7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=n(R7,"CODE",{});var F6t=s(Ove);gdr=r(F6t,"pretrained_model_name_or_path"),F6t.forEach(t),hdr=r(R7,":"),R7.forEach(t),udr=i(Fa),Vve=n(Fa,"UL",{});var T6t=s(Vve);qM=n(T6t,"LI",{});var WIe=s(qM);Xve=n(WIe,"STRONG",{});var M6t=s(Xve);pdr=r(M6t,"vilt"),M6t.forEach(t),_dr=r(WIe," \u2014 "),qW=n(WIe,"A",{href:!0});var E6t=s(qW);bdr=r(E6t,"ViltForQuestionAnswering"),E6t.forEach(t),vdr=r(WIe," (ViLT model)"),WIe.forEach(t),T6t.forEach(t),Fdr=i(Fa),jM=n(Fa,"P",{});var HIe=s(jM);Tdr=r(HIe,"The model is set in evaluation mode by default using "),zve=n(HIe,"CODE",{});var C6t=s(zve);Mdr=r(C6t,"model.eval()"),C6t.forEach(t),Edr=r(HIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qve=n(HIe,"CODE",{});var w6t=s(Qve);Cdr=r(w6t,"model.train()"),w6t.forEach(t),HIe.forEach(t),wdr=i(Fa),T(DM.$$.fragment,Fa),Fa.forEach(t),hl.forEach(t),xXe=i(m),yd=n(m,"H2",{class:!0});var BQe=s(yd);GM=n(BQe,"A",{id:!0,class:!0,href:!0});var A6t=s(GM);Wve=n(A6t,"SPAN",{});var L6t=s(Wve);T(X8.$$.fragment,L6t),L6t.forEach(t),A6t.forEach(t),Adr=i(BQe),Hve=n(BQe,"SPAN",{});var y6t=s(Hve);Ldr=r(y6t,"AutoModelForAudioClassification"),y6t.forEach(t),BQe.forEach(t),$Xe=i(m),Xo=n(m,"DIV",{class:!0});var ul=s(Xo);T(z8.$$.fragment,ul),ydr=i(ul),xd=n(ul,"P",{});var Zre=s(xd);xdr=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),jW=n(Zre,"A",{href:!0});var x6t=s(jW);$dr=r(x6t,"from_pretrained()"),x6t.forEach(t),kdr=r(Zre," class method or the "),DW=n(Zre,"A",{href:!0});var $6t=s(DW);Sdr=r($6t,"from_config()"),$6t.forEach(t),Rdr=r(Zre,` class
method.`),Zre.forEach(t),Pdr=i(ul),Q8=n(ul,"P",{});var IQe=s(Q8);Bdr=r(IQe,"This class cannot be instantiated directly using "),Uve=n(IQe,"CODE",{});var k6t=s(Uve);Idr=r(k6t,"__init__()"),k6t.forEach(t),Ndr=r(IQe," (throws an error)."),IQe.forEach(t),qdr=i(ul),Mt=n(ul,"DIV",{class:!0});var P7=s(Mt);T(W8.$$.fragment,P7),jdr=i(P7),Jve=n(P7,"P",{});var S6t=s(Jve);Ddr=r(S6t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),S6t.forEach(t),Gdr=i(P7),$d=n(P7,"P",{});var ete=s($d);Odr=r(ete,`Note:
Loading a model from its configuration file does `),Yve=n(ete,"STRONG",{});var R6t=s(Yve);Vdr=r(R6t,"not"),R6t.forEach(t),Xdr=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(ete,"A",{href:!0});var P6t=s(GW);zdr=r(P6t,"from_pretrained()"),P6t.forEach(t),Qdr=r(ete," to load the model weights."),ete.forEach(t),Wdr=i(P7),T(OM.$$.fragment,P7),P7.forEach(t),Hdr=i(ul),mo=n(ul,"DIV",{class:!0});var Ta=s(mo);T(H8.$$.fragment,Ta),Udr=i(Ta),Kve=n(Ta,"P",{});var B6t=s(Kve);Jdr=r(B6t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),B6t.forEach(t),Ydr=i(Ta),Ja=n(Ta,"P",{});var B7=s(Ja);Kdr=r(B7,"The model class to instantiate is selected based on the "),Zve=n(B7,"CODE",{});var I6t=s(Zve);Zdr=r(I6t,"model_type"),I6t.forEach(t),ecr=r(B7,` property of the config object (either
passed as an argument or loaded from `),e1e=n(B7,"CODE",{});var N6t=s(e1e);ocr=r(N6t,"pretrained_model_name_or_path"),N6t.forEach(t),rcr=r(B7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=n(B7,"CODE",{});var q6t=s(o1e);tcr=r(q6t,"pretrained_model_name_or_path"),q6t.forEach(t),acr=r(B7,":"),B7.forEach(t),ncr=i(Ta),Pe=n(Ta,"UL",{});var ze=s(Pe);VM=n(ze,"LI",{});var UIe=s(VM);r1e=n(UIe,"STRONG",{});var j6t=s(r1e);scr=r(j6t,"data2vec-audio"),j6t.forEach(t),lcr=r(UIe," \u2014 "),OW=n(UIe,"A",{href:!0});var D6t=s(OW);icr=r(D6t,"Data2VecAudioForSequenceClassification"),D6t.forEach(t),dcr=r(UIe," (Data2VecAudio model)"),UIe.forEach(t),ccr=i(ze),XM=n(ze,"LI",{});var JIe=s(XM);t1e=n(JIe,"STRONG",{});var G6t=s(t1e);mcr=r(G6t,"hubert"),G6t.forEach(t),fcr=r(JIe," \u2014 "),VW=n(JIe,"A",{href:!0});var O6t=s(VW);gcr=r(O6t,"HubertForSequenceClassification"),O6t.forEach(t),hcr=r(JIe," (Hubert model)"),JIe.forEach(t),ucr=i(ze),zM=n(ze,"LI",{});var YIe=s(zM);a1e=n(YIe,"STRONG",{});var V6t=s(a1e);pcr=r(V6t,"sew"),V6t.forEach(t),_cr=r(YIe," \u2014 "),XW=n(YIe,"A",{href:!0});var X6t=s(XW);bcr=r(X6t,"SEWForSequenceClassification"),X6t.forEach(t),vcr=r(YIe," (SEW model)"),YIe.forEach(t),Fcr=i(ze),QM=n(ze,"LI",{});var KIe=s(QM);n1e=n(KIe,"STRONG",{});var z6t=s(n1e);Tcr=r(z6t,"sew-d"),z6t.forEach(t),Mcr=r(KIe," \u2014 "),zW=n(KIe,"A",{href:!0});var Q6t=s(zW);Ecr=r(Q6t,"SEWDForSequenceClassification"),Q6t.forEach(t),Ccr=r(KIe," (SEW-D model)"),KIe.forEach(t),wcr=i(ze),WM=n(ze,"LI",{});var ZIe=s(WM);s1e=n(ZIe,"STRONG",{});var W6t=s(s1e);Acr=r(W6t,"unispeech"),W6t.forEach(t),Lcr=r(ZIe," \u2014 "),QW=n(ZIe,"A",{href:!0});var H6t=s(QW);ycr=r(H6t,"UniSpeechForSequenceClassification"),H6t.forEach(t),xcr=r(ZIe," (UniSpeech model)"),ZIe.forEach(t),$cr=i(ze),HM=n(ze,"LI",{});var eNe=s(HM);l1e=n(eNe,"STRONG",{});var U6t=s(l1e);kcr=r(U6t,"unispeech-sat"),U6t.forEach(t),Scr=r(eNe," \u2014 "),WW=n(eNe,"A",{href:!0});var J6t=s(WW);Rcr=r(J6t,"UniSpeechSatForSequenceClassification"),J6t.forEach(t),Pcr=r(eNe," (UniSpeechSat model)"),eNe.forEach(t),Bcr=i(ze),UM=n(ze,"LI",{});var oNe=s(UM);i1e=n(oNe,"STRONG",{});var Y6t=s(i1e);Icr=r(Y6t,"wav2vec2"),Y6t.forEach(t),Ncr=r(oNe," \u2014 "),HW=n(oNe,"A",{href:!0});var K6t=s(HW);qcr=r(K6t,"Wav2Vec2ForSequenceClassification"),K6t.forEach(t),jcr=r(oNe," (Wav2Vec2 model)"),oNe.forEach(t),Dcr=i(ze),JM=n(ze,"LI",{});var rNe=s(JM);d1e=n(rNe,"STRONG",{});var Z6t=s(d1e);Gcr=r(Z6t,"wav2vec2-conformer"),Z6t.forEach(t),Ocr=r(rNe," \u2014 "),UW=n(rNe,"A",{href:!0});var e7t=s(UW);Vcr=r(e7t,"Wav2Vec2ConformerForSequenceClassification"),e7t.forEach(t),Xcr=r(rNe," (Wav2Vec2-Conformer model)"),rNe.forEach(t),zcr=i(ze),YM=n(ze,"LI",{});var tNe=s(YM);c1e=n(tNe,"STRONG",{});var o7t=s(c1e);Qcr=r(o7t,"wavlm"),o7t.forEach(t),Wcr=r(tNe," \u2014 "),JW=n(tNe,"A",{href:!0});var r7t=s(JW);Hcr=r(r7t,"WavLMForSequenceClassification"),r7t.forEach(t),Ucr=r(tNe," (WavLM model)"),tNe.forEach(t),ze.forEach(t),Jcr=i(Ta),KM=n(Ta,"P",{});var aNe=s(KM);Ycr=r(aNe,"The model is set in evaluation mode by default using "),m1e=n(aNe,"CODE",{});var t7t=s(m1e);Kcr=r(t7t,"model.eval()"),t7t.forEach(t),Zcr=r(aNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f1e=n(aNe,"CODE",{});var a7t=s(f1e);emr=r(a7t,"model.train()"),a7t.forEach(t),aNe.forEach(t),omr=i(Ta),T(ZM.$$.fragment,Ta),Ta.forEach(t),ul.forEach(t),kXe=i(m),kd=n(m,"H2",{class:!0});var NQe=s(kd);e4=n(NQe,"A",{id:!0,class:!0,href:!0});var n7t=s(e4);g1e=n(n7t,"SPAN",{});var s7t=s(g1e);T(U8.$$.fragment,s7t),s7t.forEach(t),n7t.forEach(t),rmr=i(NQe),h1e=n(NQe,"SPAN",{});var l7t=s(h1e);tmr=r(l7t,"AutoModelForAudioFrameClassification"),l7t.forEach(t),NQe.forEach(t),SXe=i(m),zo=n(m,"DIV",{class:!0});var pl=s(zo);T(J8.$$.fragment,pl),amr=i(pl),Sd=n(pl,"P",{});var ote=s(Sd);nmr=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),YW=n(ote,"A",{href:!0});var i7t=s(YW);smr=r(i7t,"from_pretrained()"),i7t.forEach(t),lmr=r(ote," class method or the "),KW=n(ote,"A",{href:!0});var d7t=s(KW);imr=r(d7t,"from_config()"),d7t.forEach(t),dmr=r(ote,` class
method.`),ote.forEach(t),cmr=i(pl),Y8=n(pl,"P",{});var qQe=s(Y8);mmr=r(qQe,"This class cannot be instantiated directly using "),u1e=n(qQe,"CODE",{});var c7t=s(u1e);fmr=r(c7t,"__init__()"),c7t.forEach(t),gmr=r(qQe," (throws an error)."),qQe.forEach(t),hmr=i(pl),Et=n(pl,"DIV",{class:!0});var I7=s(Et);T(K8.$$.fragment,I7),umr=i(I7),p1e=n(I7,"P",{});var m7t=s(p1e);pmr=r(m7t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),m7t.forEach(t),_mr=i(I7),Rd=n(I7,"P",{});var rte=s(Rd);bmr=r(rte,`Note:
Loading a model from its configuration file does `),_1e=n(rte,"STRONG",{});var f7t=s(_1e);vmr=r(f7t,"not"),f7t.forEach(t),Fmr=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=n(rte,"A",{href:!0});var g7t=s(ZW);Tmr=r(g7t,"from_pretrained()"),g7t.forEach(t),Mmr=r(rte," to load the model weights."),rte.forEach(t),Emr=i(I7),T(o4.$$.fragment,I7),I7.forEach(t),Cmr=i(pl),fo=n(pl,"DIV",{class:!0});var Ma=s(fo);T(Z8.$$.fragment,Ma),wmr=i(Ma),b1e=n(Ma,"P",{});var h7t=s(b1e);Amr=r(h7t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),h7t.forEach(t),Lmr=i(Ma),Ya=n(Ma,"P",{});var N7=s(Ya);ymr=r(N7,"The model class to instantiate is selected based on the "),v1e=n(N7,"CODE",{});var u7t=s(v1e);xmr=r(u7t,"model_type"),u7t.forEach(t),$mr=r(N7,` property of the config object (either
passed as an argument or loaded from `),F1e=n(N7,"CODE",{});var p7t=s(F1e);kmr=r(p7t,"pretrained_model_name_or_path"),p7t.forEach(t),Smr=r(N7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T1e=n(N7,"CODE",{});var _7t=s(T1e);Rmr=r(_7t,"pretrained_model_name_or_path"),_7t.forEach(t),Pmr=r(N7,":"),N7.forEach(t),Bmr=i(Ma),ot=n(Ma,"UL",{});var _l=s(ot);r4=n(_l,"LI",{});var nNe=s(r4);M1e=n(nNe,"STRONG",{});var b7t=s(M1e);Imr=r(b7t,"data2vec-audio"),b7t.forEach(t),Nmr=r(nNe," \u2014 "),eH=n(nNe,"A",{href:!0});var v7t=s(eH);qmr=r(v7t,"Data2VecAudioForAudioFrameClassification"),v7t.forEach(t),jmr=r(nNe," (Data2VecAudio model)"),nNe.forEach(t),Dmr=i(_l),t4=n(_l,"LI",{});var sNe=s(t4);E1e=n(sNe,"STRONG",{});var F7t=s(E1e);Gmr=r(F7t,"unispeech-sat"),F7t.forEach(t),Omr=r(sNe," \u2014 "),oH=n(sNe,"A",{href:!0});var T7t=s(oH);Vmr=r(T7t,"UniSpeechSatForAudioFrameClassification"),T7t.forEach(t),Xmr=r(sNe," (UniSpeechSat model)"),sNe.forEach(t),zmr=i(_l),a4=n(_l,"LI",{});var lNe=s(a4);C1e=n(lNe,"STRONG",{});var M7t=s(C1e);Qmr=r(M7t,"wav2vec2"),M7t.forEach(t),Wmr=r(lNe," \u2014 "),rH=n(lNe,"A",{href:!0});var E7t=s(rH);Hmr=r(E7t,"Wav2Vec2ForAudioFrameClassification"),E7t.forEach(t),Umr=r(lNe," (Wav2Vec2 model)"),lNe.forEach(t),Jmr=i(_l),n4=n(_l,"LI",{});var iNe=s(n4);w1e=n(iNe,"STRONG",{});var C7t=s(w1e);Ymr=r(C7t,"wav2vec2-conformer"),C7t.forEach(t),Kmr=r(iNe," \u2014 "),tH=n(iNe,"A",{href:!0});var w7t=s(tH);Zmr=r(w7t,"Wav2Vec2ConformerForAudioFrameClassification"),w7t.forEach(t),efr=r(iNe," (Wav2Vec2-Conformer model)"),iNe.forEach(t),ofr=i(_l),s4=n(_l,"LI",{});var dNe=s(s4);A1e=n(dNe,"STRONG",{});var A7t=s(A1e);rfr=r(A7t,"wavlm"),A7t.forEach(t),tfr=r(dNe," \u2014 "),aH=n(dNe,"A",{href:!0});var L7t=s(aH);afr=r(L7t,"WavLMForAudioFrameClassification"),L7t.forEach(t),nfr=r(dNe," (WavLM model)"),dNe.forEach(t),_l.forEach(t),sfr=i(Ma),l4=n(Ma,"P",{});var cNe=s(l4);lfr=r(cNe,"The model is set in evaluation mode by default using "),L1e=n(cNe,"CODE",{});var y7t=s(L1e);ifr=r(y7t,"model.eval()"),y7t.forEach(t),dfr=r(cNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y1e=n(cNe,"CODE",{});var x7t=s(y1e);cfr=r(x7t,"model.train()"),x7t.forEach(t),cNe.forEach(t),mfr=i(Ma),T(i4.$$.fragment,Ma),Ma.forEach(t),pl.forEach(t),RXe=i(m),Pd=n(m,"H2",{class:!0});var jQe=s(Pd);d4=n(jQe,"A",{id:!0,class:!0,href:!0});var $7t=s(d4);x1e=n($7t,"SPAN",{});var k7t=s(x1e);T(e9.$$.fragment,k7t),k7t.forEach(t),$7t.forEach(t),ffr=i(jQe),$1e=n(jQe,"SPAN",{});var S7t=s($1e);gfr=r(S7t,"AutoModelForCTC"),S7t.forEach(t),jQe.forEach(t),PXe=i(m),Qo=n(m,"DIV",{class:!0});var bl=s(Qo);T(o9.$$.fragment,bl),hfr=i(bl),Bd=n(bl,"P",{});var tte=s(Bd);ufr=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),nH=n(tte,"A",{href:!0});var R7t=s(nH);pfr=r(R7t,"from_pretrained()"),R7t.forEach(t),_fr=r(tte," class method or the "),sH=n(tte,"A",{href:!0});var P7t=s(sH);bfr=r(P7t,"from_config()"),P7t.forEach(t),vfr=r(tte,` class
method.`),tte.forEach(t),Ffr=i(bl),r9=n(bl,"P",{});var DQe=s(r9);Tfr=r(DQe,"This class cannot be instantiated directly using "),k1e=n(DQe,"CODE",{});var B7t=s(k1e);Mfr=r(B7t,"__init__()"),B7t.forEach(t),Efr=r(DQe," (throws an error)."),DQe.forEach(t),Cfr=i(bl),Ct=n(bl,"DIV",{class:!0});var q7=s(Ct);T(t9.$$.fragment,q7),wfr=i(q7),S1e=n(q7,"P",{});var I7t=s(S1e);Afr=r(I7t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),I7t.forEach(t),Lfr=i(q7),Id=n(q7,"P",{});var ate=s(Id);yfr=r(ate,`Note:
Loading a model from its configuration file does `),R1e=n(ate,"STRONG",{});var N7t=s(R1e);xfr=r(N7t,"not"),N7t.forEach(t),$fr=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=n(ate,"A",{href:!0});var q7t=s(lH);kfr=r(q7t,"from_pretrained()"),q7t.forEach(t),Sfr=r(ate," to load the model weights."),ate.forEach(t),Rfr=i(q7),T(c4.$$.fragment,q7),q7.forEach(t),Pfr=i(bl),go=n(bl,"DIV",{class:!0});var Ea=s(go);T(a9.$$.fragment,Ea),Bfr=i(Ea),P1e=n(Ea,"P",{});var j7t=s(P1e);Ifr=r(j7t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),j7t.forEach(t),Nfr=i(Ea),Ka=n(Ea,"P",{});var j7=s(Ka);qfr=r(j7,"The model class to instantiate is selected based on the "),B1e=n(j7,"CODE",{});var D7t=s(B1e);jfr=r(D7t,"model_type"),D7t.forEach(t),Dfr=r(j7,` property of the config object (either
passed as an argument or loaded from `),I1e=n(j7,"CODE",{});var G7t=s(I1e);Gfr=r(G7t,"pretrained_model_name_or_path"),G7t.forEach(t),Ofr=r(j7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=n(j7,"CODE",{});var O7t=s(N1e);Vfr=r(O7t,"pretrained_model_name_or_path"),O7t.forEach(t),Xfr=r(j7,":"),j7.forEach(t),zfr=i(Ea),Le=n(Ea,"UL",{});var Be=s(Le);m4=n(Be,"LI",{});var mNe=s(m4);q1e=n(mNe,"STRONG",{});var V7t=s(q1e);Qfr=r(V7t,"data2vec-audio"),V7t.forEach(t),Wfr=r(mNe," \u2014 "),iH=n(mNe,"A",{href:!0});var X7t=s(iH);Hfr=r(X7t,"Data2VecAudioForCTC"),X7t.forEach(t),Ufr=r(mNe," (Data2VecAudio model)"),mNe.forEach(t),Jfr=i(Be),f4=n(Be,"LI",{});var fNe=s(f4);j1e=n(fNe,"STRONG",{});var z7t=s(j1e);Yfr=r(z7t,"hubert"),z7t.forEach(t),Kfr=r(fNe," \u2014 "),dH=n(fNe,"A",{href:!0});var Q7t=s(dH);Zfr=r(Q7t,"HubertForCTC"),Q7t.forEach(t),egr=r(fNe," (Hubert model)"),fNe.forEach(t),ogr=i(Be),g4=n(Be,"LI",{});var gNe=s(g4);D1e=n(gNe,"STRONG",{});var W7t=s(D1e);rgr=r(W7t,"mctct"),W7t.forEach(t),tgr=r(gNe," \u2014 "),cH=n(gNe,"A",{href:!0});var H7t=s(cH);agr=r(H7t,"MCTCTForCTC"),H7t.forEach(t),ngr=r(gNe," (M-CTC-T model)"),gNe.forEach(t),sgr=i(Be),h4=n(Be,"LI",{});var hNe=s(h4);G1e=n(hNe,"STRONG",{});var U7t=s(G1e);lgr=r(U7t,"sew"),U7t.forEach(t),igr=r(hNe," \u2014 "),mH=n(hNe,"A",{href:!0});var J7t=s(mH);dgr=r(J7t,"SEWForCTC"),J7t.forEach(t),cgr=r(hNe," (SEW model)"),hNe.forEach(t),mgr=i(Be),u4=n(Be,"LI",{});var uNe=s(u4);O1e=n(uNe,"STRONG",{});var Y7t=s(O1e);fgr=r(Y7t,"sew-d"),Y7t.forEach(t),ggr=r(uNe," \u2014 "),fH=n(uNe,"A",{href:!0});var K7t=s(fH);hgr=r(K7t,"SEWDForCTC"),K7t.forEach(t),ugr=r(uNe," (SEW-D model)"),uNe.forEach(t),pgr=i(Be),p4=n(Be,"LI",{});var pNe=s(p4);V1e=n(pNe,"STRONG",{});var Z7t=s(V1e);_gr=r(Z7t,"unispeech"),Z7t.forEach(t),bgr=r(pNe," \u2014 "),gH=n(pNe,"A",{href:!0});var eLt=s(gH);vgr=r(eLt,"UniSpeechForCTC"),eLt.forEach(t),Fgr=r(pNe," (UniSpeech model)"),pNe.forEach(t),Tgr=i(Be),_4=n(Be,"LI",{});var _Ne=s(_4);X1e=n(_Ne,"STRONG",{});var oLt=s(X1e);Mgr=r(oLt,"unispeech-sat"),oLt.forEach(t),Egr=r(_Ne," \u2014 "),hH=n(_Ne,"A",{href:!0});var rLt=s(hH);Cgr=r(rLt,"UniSpeechSatForCTC"),rLt.forEach(t),wgr=r(_Ne," (UniSpeechSat model)"),_Ne.forEach(t),Agr=i(Be),b4=n(Be,"LI",{});var bNe=s(b4);z1e=n(bNe,"STRONG",{});var tLt=s(z1e);Lgr=r(tLt,"wav2vec2"),tLt.forEach(t),ygr=r(bNe," \u2014 "),uH=n(bNe,"A",{href:!0});var aLt=s(uH);xgr=r(aLt,"Wav2Vec2ForCTC"),aLt.forEach(t),$gr=r(bNe," (Wav2Vec2 model)"),bNe.forEach(t),kgr=i(Be),v4=n(Be,"LI",{});var vNe=s(v4);Q1e=n(vNe,"STRONG",{});var nLt=s(Q1e);Sgr=r(nLt,"wav2vec2-conformer"),nLt.forEach(t),Rgr=r(vNe," \u2014 "),pH=n(vNe,"A",{href:!0});var sLt=s(pH);Pgr=r(sLt,"Wav2Vec2ConformerForCTC"),sLt.forEach(t),Bgr=r(vNe," (Wav2Vec2-Conformer model)"),vNe.forEach(t),Igr=i(Be),F4=n(Be,"LI",{});var FNe=s(F4);W1e=n(FNe,"STRONG",{});var lLt=s(W1e);Ngr=r(lLt,"wavlm"),lLt.forEach(t),qgr=r(FNe," \u2014 "),_H=n(FNe,"A",{href:!0});var iLt=s(_H);jgr=r(iLt,"WavLMForCTC"),iLt.forEach(t),Dgr=r(FNe," (WavLM model)"),FNe.forEach(t),Be.forEach(t),Ggr=i(Ea),T4=n(Ea,"P",{});var TNe=s(T4);Ogr=r(TNe,"The model is set in evaluation mode by default using "),H1e=n(TNe,"CODE",{});var dLt=s(H1e);Vgr=r(dLt,"model.eval()"),dLt.forEach(t),Xgr=r(TNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U1e=n(TNe,"CODE",{});var cLt=s(U1e);zgr=r(cLt,"model.train()"),cLt.forEach(t),TNe.forEach(t),Qgr=i(Ea),T(M4.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),BXe=i(m),Nd=n(m,"H2",{class:!0});var GQe=s(Nd);E4=n(GQe,"A",{id:!0,class:!0,href:!0});var mLt=s(E4);J1e=n(mLt,"SPAN",{});var fLt=s(J1e);T(n9.$$.fragment,fLt),fLt.forEach(t),mLt.forEach(t),Wgr=i(GQe),Y1e=n(GQe,"SPAN",{});var gLt=s(Y1e);Hgr=r(gLt,"AutoModelForSpeechSeq2Seq"),gLt.forEach(t),GQe.forEach(t),IXe=i(m),Wo=n(m,"DIV",{class:!0});var vl=s(Wo);T(s9.$$.fragment,vl),Ugr=i(vl),qd=n(vl,"P",{});var nte=s(qd);Jgr=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),bH=n(nte,"A",{href:!0});var hLt=s(bH);Ygr=r(hLt,"from_pretrained()"),hLt.forEach(t),Kgr=r(nte," class method or the "),vH=n(nte,"A",{href:!0});var uLt=s(vH);Zgr=r(uLt,"from_config()"),uLt.forEach(t),ehr=r(nte,` class
method.`),nte.forEach(t),ohr=i(vl),l9=n(vl,"P",{});var OQe=s(l9);rhr=r(OQe,"This class cannot be instantiated directly using "),K1e=n(OQe,"CODE",{});var pLt=s(K1e);thr=r(pLt,"__init__()"),pLt.forEach(t),ahr=r(OQe," (throws an error)."),OQe.forEach(t),nhr=i(vl),wt=n(vl,"DIV",{class:!0});var D7=s(wt);T(i9.$$.fragment,D7),shr=i(D7),Z1e=n(D7,"P",{});var _Lt=s(Z1e);lhr=r(_Lt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),_Lt.forEach(t),ihr=i(D7),jd=n(D7,"P",{});var ste=s(jd);dhr=r(ste,`Note:
Loading a model from its configuration file does `),eFe=n(ste,"STRONG",{});var bLt=s(eFe);chr=r(bLt,"not"),bLt.forEach(t),mhr=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(ste,"A",{href:!0});var vLt=s(FH);fhr=r(vLt,"from_pretrained()"),vLt.forEach(t),ghr=r(ste," to load the model weights."),ste.forEach(t),hhr=i(D7),T(C4.$$.fragment,D7),D7.forEach(t),uhr=i(vl),ho=n(vl,"DIV",{class:!0});var Ca=s(ho);T(d9.$$.fragment,Ca),phr=i(Ca),oFe=n(Ca,"P",{});var FLt=s(oFe);_hr=r(FLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),FLt.forEach(t),bhr=i(Ca),Za=n(Ca,"P",{});var G7=s(Za);vhr=r(G7,"The model class to instantiate is selected based on the "),rFe=n(G7,"CODE",{});var TLt=s(rFe);Fhr=r(TLt,"model_type"),TLt.forEach(t),Thr=r(G7,` property of the config object (either
passed as an argument or loaded from `),tFe=n(G7,"CODE",{});var MLt=s(tFe);Mhr=r(MLt,"pretrained_model_name_or_path"),MLt.forEach(t),Ehr=r(G7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=n(G7,"CODE",{});var ELt=s(aFe);Chr=r(ELt,"pretrained_model_name_or_path"),ELt.forEach(t),whr=r(G7,":"),G7.forEach(t),Ahr=i(Ca),c9=n(Ca,"UL",{});var VQe=s(c9);w4=n(VQe,"LI",{});var MNe=s(w4);nFe=n(MNe,"STRONG",{});var CLt=s(nFe);Lhr=r(CLt,"speech-encoder-decoder"),CLt.forEach(t),yhr=r(MNe," \u2014 "),TH=n(MNe,"A",{href:!0});var wLt=s(TH);xhr=r(wLt,"SpeechEncoderDecoderModel"),wLt.forEach(t),$hr=r(MNe," (Speech Encoder decoder model)"),MNe.forEach(t),khr=i(VQe),A4=n(VQe,"LI",{});var ENe=s(A4);sFe=n(ENe,"STRONG",{});var ALt=s(sFe);Shr=r(ALt,"speech_to_text"),ALt.forEach(t),Rhr=r(ENe," \u2014 "),MH=n(ENe,"A",{href:!0});var LLt=s(MH);Phr=r(LLt,"Speech2TextForConditionalGeneration"),LLt.forEach(t),Bhr=r(ENe," (Speech2Text model)"),ENe.forEach(t),VQe.forEach(t),Ihr=i(Ca),L4=n(Ca,"P",{});var CNe=s(L4);Nhr=r(CNe,"The model is set in evaluation mode by default using "),lFe=n(CNe,"CODE",{});var yLt=s(lFe);qhr=r(yLt,"model.eval()"),yLt.forEach(t),jhr=r(CNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iFe=n(CNe,"CODE",{});var xLt=s(iFe);Dhr=r(xLt,"model.train()"),xLt.forEach(t),CNe.forEach(t),Ghr=i(Ca),T(y4.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),NXe=i(m),Dd=n(m,"H2",{class:!0});var XQe=s(Dd);x4=n(XQe,"A",{id:!0,class:!0,href:!0});var $Lt=s(x4);dFe=n($Lt,"SPAN",{});var kLt=s(dFe);T(m9.$$.fragment,kLt),kLt.forEach(t),$Lt.forEach(t),Ohr=i(XQe),cFe=n(XQe,"SPAN",{});var SLt=s(cFe);Vhr=r(SLt,"AutoModelForAudioXVector"),SLt.forEach(t),XQe.forEach(t),qXe=i(m),Ho=n(m,"DIV",{class:!0});var Fl=s(Ho);T(f9.$$.fragment,Fl),Xhr=i(Fl),Gd=n(Fl,"P",{});var lte=s(Gd);zhr=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),EH=n(lte,"A",{href:!0});var RLt=s(EH);Qhr=r(RLt,"from_pretrained()"),RLt.forEach(t),Whr=r(lte," class method or the "),CH=n(lte,"A",{href:!0});var PLt=s(CH);Hhr=r(PLt,"from_config()"),PLt.forEach(t),Uhr=r(lte,` class
method.`),lte.forEach(t),Jhr=i(Fl),g9=n(Fl,"P",{});var zQe=s(g9);Yhr=r(zQe,"This class cannot be instantiated directly using "),mFe=n(zQe,"CODE",{});var BLt=s(mFe);Khr=r(BLt,"__init__()"),BLt.forEach(t),Zhr=r(zQe," (throws an error)."),zQe.forEach(t),eur=i(Fl),At=n(Fl,"DIV",{class:!0});var O7=s(At);T(h9.$$.fragment,O7),our=i(O7),fFe=n(O7,"P",{});var ILt=s(fFe);rur=r(ILt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ILt.forEach(t),tur=i(O7),Od=n(O7,"P",{});var ite=s(Od);aur=r(ite,`Note:
Loading a model from its configuration file does `),gFe=n(ite,"STRONG",{});var NLt=s(gFe);nur=r(NLt,"not"),NLt.forEach(t),sur=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(ite,"A",{href:!0});var qLt=s(wH);lur=r(qLt,"from_pretrained()"),qLt.forEach(t),iur=r(ite," to load the model weights."),ite.forEach(t),dur=i(O7),T($4.$$.fragment,O7),O7.forEach(t),cur=i(Fl),uo=n(Fl,"DIV",{class:!0});var wa=s(uo);T(u9.$$.fragment,wa),mur=i(wa),hFe=n(wa,"P",{});var jLt=s(hFe);fur=r(jLt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),jLt.forEach(t),gur=i(wa),en=n(wa,"P",{});var V7=s(en);hur=r(V7,"The model class to instantiate is selected based on the "),uFe=n(V7,"CODE",{});var DLt=s(uFe);uur=r(DLt,"model_type"),DLt.forEach(t),pur=r(V7,` property of the config object (either
passed as an argument or loaded from `),pFe=n(V7,"CODE",{});var GLt=s(pFe);_ur=r(GLt,"pretrained_model_name_or_path"),GLt.forEach(t),bur=r(V7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=n(V7,"CODE",{});var OLt=s(_Fe);vur=r(OLt,"pretrained_model_name_or_path"),OLt.forEach(t),Fur=r(V7,":"),V7.forEach(t),Tur=i(wa),rt=n(wa,"UL",{});var Tl=s(rt);k4=n(Tl,"LI",{});var wNe=s(k4);bFe=n(wNe,"STRONG",{});var VLt=s(bFe);Mur=r(VLt,"data2vec-audio"),VLt.forEach(t),Eur=r(wNe," \u2014 "),AH=n(wNe,"A",{href:!0});var XLt=s(AH);Cur=r(XLt,"Data2VecAudioForXVector"),XLt.forEach(t),wur=r(wNe," (Data2VecAudio model)"),wNe.forEach(t),Aur=i(Tl),S4=n(Tl,"LI",{});var ANe=s(S4);vFe=n(ANe,"STRONG",{});var zLt=s(vFe);Lur=r(zLt,"unispeech-sat"),zLt.forEach(t),yur=r(ANe," \u2014 "),LH=n(ANe,"A",{href:!0});var QLt=s(LH);xur=r(QLt,"UniSpeechSatForXVector"),QLt.forEach(t),$ur=r(ANe," (UniSpeechSat model)"),ANe.forEach(t),kur=i(Tl),R4=n(Tl,"LI",{});var LNe=s(R4);FFe=n(LNe,"STRONG",{});var WLt=s(FFe);Sur=r(WLt,"wav2vec2"),WLt.forEach(t),Rur=r(LNe," \u2014 "),yH=n(LNe,"A",{href:!0});var HLt=s(yH);Pur=r(HLt,"Wav2Vec2ForXVector"),HLt.forEach(t),Bur=r(LNe," (Wav2Vec2 model)"),LNe.forEach(t),Iur=i(Tl),P4=n(Tl,"LI",{});var yNe=s(P4);TFe=n(yNe,"STRONG",{});var ULt=s(TFe);Nur=r(ULt,"wav2vec2-conformer"),ULt.forEach(t),qur=r(yNe," \u2014 "),xH=n(yNe,"A",{href:!0});var JLt=s(xH);jur=r(JLt,"Wav2Vec2ConformerForXVector"),JLt.forEach(t),Dur=r(yNe," (Wav2Vec2-Conformer model)"),yNe.forEach(t),Gur=i(Tl),B4=n(Tl,"LI",{});var xNe=s(B4);MFe=n(xNe,"STRONG",{});var YLt=s(MFe);Our=r(YLt,"wavlm"),YLt.forEach(t),Vur=r(xNe," \u2014 "),$H=n(xNe,"A",{href:!0});var KLt=s($H);Xur=r(KLt,"WavLMForXVector"),KLt.forEach(t),zur=r(xNe," (WavLM model)"),xNe.forEach(t),Tl.forEach(t),Qur=i(wa),I4=n(wa,"P",{});var $Ne=s(I4);Wur=r($Ne,"The model is set in evaluation mode by default using "),EFe=n($Ne,"CODE",{});var ZLt=s(EFe);Hur=r(ZLt,"model.eval()"),ZLt.forEach(t),Uur=r($Ne,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),CFe=n($Ne,"CODE",{});var eyt=s(CFe);Jur=r(eyt,"model.train()"),eyt.forEach(t),$Ne.forEach(t),Yur=i(wa),T(N4.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),jXe=i(m),Vd=n(m,"H2",{class:!0});var QQe=s(Vd);q4=n(QQe,"A",{id:!0,class:!0,href:!0});var oyt=s(q4);wFe=n(oyt,"SPAN",{});var ryt=s(wFe);T(p9.$$.fragment,ryt),ryt.forEach(t),oyt.forEach(t),Kur=i(QQe),AFe=n(QQe,"SPAN",{});var tyt=s(AFe);Zur=r(tyt,"AutoModelForMaskedImageModeling"),tyt.forEach(t),QQe.forEach(t),DXe=i(m),Uo=n(m,"DIV",{class:!0});var Ml=s(Uo);T(_9.$$.fragment,Ml),epr=i(Ml),Xd=n(Ml,"P",{});var dte=s(Xd);opr=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),kH=n(dte,"A",{href:!0});var ayt=s(kH);rpr=r(ayt,"from_pretrained()"),ayt.forEach(t),tpr=r(dte," class method or the "),SH=n(dte,"A",{href:!0});var nyt=s(SH);apr=r(nyt,"from_config()"),nyt.forEach(t),npr=r(dte,` class
method.`),dte.forEach(t),spr=i(Ml),b9=n(Ml,"P",{});var WQe=s(b9);lpr=r(WQe,"This class cannot be instantiated directly using "),LFe=n(WQe,"CODE",{});var syt=s(LFe);ipr=r(syt,"__init__()"),syt.forEach(t),dpr=r(WQe," (throws an error)."),WQe.forEach(t),cpr=i(Ml),Lt=n(Ml,"DIV",{class:!0});var X7=s(Lt);T(v9.$$.fragment,X7),mpr=i(X7),yFe=n(X7,"P",{});var lyt=s(yFe);fpr=r(lyt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),lyt.forEach(t),gpr=i(X7),zd=n(X7,"P",{});var cte=s(zd);hpr=r(cte,`Note:
Loading a model from its configuration file does `),xFe=n(cte,"STRONG",{});var iyt=s(xFe);upr=r(iyt,"not"),iyt.forEach(t),ppr=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(cte,"A",{href:!0});var dyt=s(RH);_pr=r(dyt,"from_pretrained()"),dyt.forEach(t),bpr=r(cte," to load the model weights."),cte.forEach(t),vpr=i(X7),T(j4.$$.fragment,X7),X7.forEach(t),Fpr=i(Ml),po=n(Ml,"DIV",{class:!0});var Aa=s(po);T(F9.$$.fragment,Aa),Tpr=i(Aa),$Fe=n(Aa,"P",{});var cyt=s($Fe);Mpr=r(cyt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),cyt.forEach(t),Epr=i(Aa),on=n(Aa,"P",{});var z7=s(on);Cpr=r(z7,"The model class to instantiate is selected based on the "),kFe=n(z7,"CODE",{});var myt=s(kFe);wpr=r(myt,"model_type"),myt.forEach(t),Apr=r(z7,` property of the config object (either
passed as an argument or loaded from `),SFe=n(z7,"CODE",{});var fyt=s(SFe);Lpr=r(fyt,"pretrained_model_name_or_path"),fyt.forEach(t),ypr=r(z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=n(z7,"CODE",{});var gyt=s(RFe);xpr=r(gyt,"pretrained_model_name_or_path"),gyt.forEach(t),$pr=r(z7,":"),z7.forEach(t),kpr=i(Aa),Qd=n(Aa,"UL",{});var mte=s(Qd);D4=n(mte,"LI",{});var kNe=s(D4);PFe=n(kNe,"STRONG",{});var hyt=s(PFe);Spr=r(hyt,"deit"),hyt.forEach(t),Rpr=r(kNe," \u2014 "),PH=n(kNe,"A",{href:!0});var uyt=s(PH);Ppr=r(uyt,"DeiTForMaskedImageModeling"),uyt.forEach(t),Bpr=r(kNe," (DeiT model)"),kNe.forEach(t),Ipr=i(mte),G4=n(mte,"LI",{});var SNe=s(G4);BFe=n(SNe,"STRONG",{});var pyt=s(BFe);Npr=r(pyt,"swin"),pyt.forEach(t),qpr=r(SNe," \u2014 "),BH=n(SNe,"A",{href:!0});var _yt=s(BH);jpr=r(_yt,"SwinForMaskedImageModeling"),_yt.forEach(t),Dpr=r(SNe," (Swin Transformer model)"),SNe.forEach(t),Gpr=i(mte),O4=n(mte,"LI",{});var RNe=s(O4);IFe=n(RNe,"STRONG",{});var byt=s(IFe);Opr=r(byt,"vit"),byt.forEach(t),Vpr=r(RNe," \u2014 "),IH=n(RNe,"A",{href:!0});var vyt=s(IH);Xpr=r(vyt,"ViTForMaskedImageModeling"),vyt.forEach(t),zpr=r(RNe," (ViT model)"),RNe.forEach(t),mte.forEach(t),Qpr=i(Aa),V4=n(Aa,"P",{});var PNe=s(V4);Wpr=r(PNe,"The model is set in evaluation mode by default using "),NFe=n(PNe,"CODE",{});var Fyt=s(NFe);Hpr=r(Fyt,"model.eval()"),Fyt.forEach(t),Upr=r(PNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qFe=n(PNe,"CODE",{});var Tyt=s(qFe);Jpr=r(Tyt,"model.train()"),Tyt.forEach(t),PNe.forEach(t),Ypr=i(Aa),T(X4.$$.fragment,Aa),Aa.forEach(t),Ml.forEach(t),GXe=i(m),Wd=n(m,"H2",{class:!0});var HQe=s(Wd);z4=n(HQe,"A",{id:!0,class:!0,href:!0});var Myt=s(z4);jFe=n(Myt,"SPAN",{});var Eyt=s(jFe);T(T9.$$.fragment,Eyt),Eyt.forEach(t),Myt.forEach(t),Kpr=i(HQe),DFe=n(HQe,"SPAN",{});var Cyt=s(DFe);Zpr=r(Cyt,"AutoModelForObjectDetection"),Cyt.forEach(t),HQe.forEach(t),OXe=i(m),Jo=n(m,"DIV",{class:!0});var El=s(Jo);T(M9.$$.fragment,El),e_r=i(El),Hd=n(El,"P",{});var fte=s(Hd);o_r=r(fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),NH=n(fte,"A",{href:!0});var wyt=s(NH);r_r=r(wyt,"from_pretrained()"),wyt.forEach(t),t_r=r(fte," class method or the "),qH=n(fte,"A",{href:!0});var Ayt=s(qH);a_r=r(Ayt,"from_config()"),Ayt.forEach(t),n_r=r(fte,` class
method.`),fte.forEach(t),s_r=i(El),E9=n(El,"P",{});var UQe=s(E9);l_r=r(UQe,"This class cannot be instantiated directly using "),GFe=n(UQe,"CODE",{});var Lyt=s(GFe);i_r=r(Lyt,"__init__()"),Lyt.forEach(t),d_r=r(UQe," (throws an error)."),UQe.forEach(t),c_r=i(El),yt=n(El,"DIV",{class:!0});var Q7=s(yt);T(C9.$$.fragment,Q7),m_r=i(Q7),OFe=n(Q7,"P",{});var yyt=s(OFe);f_r=r(yyt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),yyt.forEach(t),g_r=i(Q7),Ud=n(Q7,"P",{});var gte=s(Ud);h_r=r(gte,`Note:
Loading a model from its configuration file does `),VFe=n(gte,"STRONG",{});var xyt=s(VFe);u_r=r(xyt,"not"),xyt.forEach(t),p_r=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=n(gte,"A",{href:!0});var $yt=s(jH);__r=r($yt,"from_pretrained()"),$yt.forEach(t),b_r=r(gte," to load the model weights."),gte.forEach(t),v_r=i(Q7),T(Q4.$$.fragment,Q7),Q7.forEach(t),F_r=i(El),_o=n(El,"DIV",{class:!0});var La=s(_o);T(w9.$$.fragment,La),T_r=i(La),XFe=n(La,"P",{});var kyt=s(XFe);M_r=r(kyt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),kyt.forEach(t),E_r=i(La),rn=n(La,"P",{});var W7=s(rn);C_r=r(W7,"The model class to instantiate is selected based on the "),zFe=n(W7,"CODE",{});var Syt=s(zFe);w_r=r(Syt,"model_type"),Syt.forEach(t),A_r=r(W7,` property of the config object (either
passed as an argument or loaded from `),QFe=n(W7,"CODE",{});var Ryt=s(QFe);L_r=r(Ryt,"pretrained_model_name_or_path"),Ryt.forEach(t),y_r=r(W7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=n(W7,"CODE",{});var Pyt=s(WFe);x_r=r(Pyt,"pretrained_model_name_or_path"),Pyt.forEach(t),$_r=r(W7,":"),W7.forEach(t),k_r=i(La),A9=n(La,"UL",{});var JQe=s(A9);W4=n(JQe,"LI",{});var BNe=s(W4);HFe=n(BNe,"STRONG",{});var Byt=s(HFe);S_r=r(Byt,"detr"),Byt.forEach(t),R_r=r(BNe," \u2014 "),DH=n(BNe,"A",{href:!0});var Iyt=s(DH);P_r=r(Iyt,"DetrForObjectDetection"),Iyt.forEach(t),B_r=r(BNe," (DETR model)"),BNe.forEach(t),I_r=i(JQe),H4=n(JQe,"LI",{});var INe=s(H4);UFe=n(INe,"STRONG",{});var Nyt=s(UFe);N_r=r(Nyt,"yolos"),Nyt.forEach(t),q_r=r(INe," \u2014 "),GH=n(INe,"A",{href:!0});var qyt=s(GH);j_r=r(qyt,"YolosForObjectDetection"),qyt.forEach(t),D_r=r(INe," (YOLOS model)"),INe.forEach(t),JQe.forEach(t),G_r=i(La),U4=n(La,"P",{});var NNe=s(U4);O_r=r(NNe,"The model is set in evaluation mode by default using "),JFe=n(NNe,"CODE",{});var jyt=s(JFe);V_r=r(jyt,"model.eval()"),jyt.forEach(t),X_r=r(NNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),YFe=n(NNe,"CODE",{});var Dyt=s(YFe);z_r=r(Dyt,"model.train()"),Dyt.forEach(t),NNe.forEach(t),Q_r=i(La),T(J4.$$.fragment,La),La.forEach(t),El.forEach(t),VXe=i(m),Jd=n(m,"H2",{class:!0});var YQe=s(Jd);Y4=n(YQe,"A",{id:!0,class:!0,href:!0});var Gyt=s(Y4);KFe=n(Gyt,"SPAN",{});var Oyt=s(KFe);T(L9.$$.fragment,Oyt),Oyt.forEach(t),Gyt.forEach(t),W_r=i(YQe),ZFe=n(YQe,"SPAN",{});var Vyt=s(ZFe);H_r=r(Vyt,"AutoModelForImageSegmentation"),Vyt.forEach(t),YQe.forEach(t),XXe=i(m),Yo=n(m,"DIV",{class:!0});var Cl=s(Yo);T(y9.$$.fragment,Cl),U_r=i(Cl),Yd=n(Cl,"P",{});var hte=s(Yd);J_r=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),OH=n(hte,"A",{href:!0});var Xyt=s(OH);Y_r=r(Xyt,"from_pretrained()"),Xyt.forEach(t),K_r=r(hte," class method or the "),VH=n(hte,"A",{href:!0});var zyt=s(VH);Z_r=r(zyt,"from_config()"),zyt.forEach(t),e2r=r(hte,` class
method.`),hte.forEach(t),o2r=i(Cl),x9=n(Cl,"P",{});var KQe=s(x9);r2r=r(KQe,"This class cannot be instantiated directly using "),eTe=n(KQe,"CODE",{});var Qyt=s(eTe);t2r=r(Qyt,"__init__()"),Qyt.forEach(t),a2r=r(KQe," (throws an error)."),KQe.forEach(t),n2r=i(Cl),xt=n(Cl,"DIV",{class:!0});var H7=s(xt);T($9.$$.fragment,H7),s2r=i(H7),oTe=n(H7,"P",{});var Wyt=s(oTe);l2r=r(Wyt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Wyt.forEach(t),i2r=i(H7),Kd=n(H7,"P",{});var ute=s(Kd);d2r=r(ute,`Note:
Loading a model from its configuration file does `),rTe=n(ute,"STRONG",{});var Hyt=s(rTe);c2r=r(Hyt,"not"),Hyt.forEach(t),m2r=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(ute,"A",{href:!0});var Uyt=s(XH);f2r=r(Uyt,"from_pretrained()"),Uyt.forEach(t),g2r=r(ute," to load the model weights."),ute.forEach(t),h2r=i(H7),T(K4.$$.fragment,H7),H7.forEach(t),u2r=i(Cl),bo=n(Cl,"DIV",{class:!0});var ya=s(bo);T(k9.$$.fragment,ya),p2r=i(ya),tTe=n(ya,"P",{});var Jyt=s(tTe);_2r=r(Jyt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Jyt.forEach(t),b2r=i(ya),tn=n(ya,"P",{});var U7=s(tn);v2r=r(U7,"The model class to instantiate is selected based on the "),aTe=n(U7,"CODE",{});var Yyt=s(aTe);F2r=r(Yyt,"model_type"),Yyt.forEach(t),T2r=r(U7,` property of the config object (either
passed as an argument or loaded from `),nTe=n(U7,"CODE",{});var Kyt=s(nTe);M2r=r(Kyt,"pretrained_model_name_or_path"),Kyt.forEach(t),E2r=r(U7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sTe=n(U7,"CODE",{});var Zyt=s(sTe);C2r=r(Zyt,"pretrained_model_name_or_path"),Zyt.forEach(t),w2r=r(U7,":"),U7.forEach(t),A2r=i(ya),lTe=n(ya,"UL",{});var e8t=s(lTe);Z4=n(e8t,"LI",{});var qNe=s(Z4);iTe=n(qNe,"STRONG",{});var o8t=s(iTe);L2r=r(o8t,"detr"),o8t.forEach(t),y2r=r(qNe," \u2014 "),zH=n(qNe,"A",{href:!0});var r8t=s(zH);x2r=r(r8t,"DetrForSegmentation"),r8t.forEach(t),$2r=r(qNe," (DETR model)"),qNe.forEach(t),e8t.forEach(t),k2r=i(ya),eE=n(ya,"P",{});var jNe=s(eE);S2r=r(jNe,"The model is set in evaluation mode by default using "),dTe=n(jNe,"CODE",{});var t8t=s(dTe);R2r=r(t8t,"model.eval()"),t8t.forEach(t),P2r=r(jNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cTe=n(jNe,"CODE",{});var a8t=s(cTe);B2r=r(a8t,"model.train()"),a8t.forEach(t),jNe.forEach(t),I2r=i(ya),T(oE.$$.fragment,ya),ya.forEach(t),Cl.forEach(t),zXe=i(m),Zd=n(m,"H2",{class:!0});var ZQe=s(Zd);rE=n(ZQe,"A",{id:!0,class:!0,href:!0});var n8t=s(rE);mTe=n(n8t,"SPAN",{});var s8t=s(mTe);T(S9.$$.fragment,s8t),s8t.forEach(t),n8t.forEach(t),N2r=i(ZQe),fTe=n(ZQe,"SPAN",{});var l8t=s(fTe);q2r=r(l8t,"AutoModelForSemanticSegmentation"),l8t.forEach(t),ZQe.forEach(t),QXe=i(m),Ko=n(m,"DIV",{class:!0});var wl=s(Ko);T(R9.$$.fragment,wl),j2r=i(wl),ec=n(wl,"P",{});var pte=s(ec);D2r=r(pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),QH=n(pte,"A",{href:!0});var i8t=s(QH);G2r=r(i8t,"from_pretrained()"),i8t.forEach(t),O2r=r(pte," class method or the "),WH=n(pte,"A",{href:!0});var d8t=s(WH);V2r=r(d8t,"from_config()"),d8t.forEach(t),X2r=r(pte,` class
method.`),pte.forEach(t),z2r=i(wl),P9=n(wl,"P",{});var eWe=s(P9);Q2r=r(eWe,"This class cannot be instantiated directly using "),gTe=n(eWe,"CODE",{});var c8t=s(gTe);W2r=r(c8t,"__init__()"),c8t.forEach(t),H2r=r(eWe," (throws an error)."),eWe.forEach(t),U2r=i(wl),$t=n(wl,"DIV",{class:!0});var J7=s($t);T(B9.$$.fragment,J7),J2r=i(J7),hTe=n(J7,"P",{});var m8t=s(hTe);Y2r=r(m8t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),m8t.forEach(t),K2r=i(J7),oc=n(J7,"P",{});var _te=s(oc);Z2r=r(_te,`Note:
Loading a model from its configuration file does `),uTe=n(_te,"STRONG",{});var f8t=s(uTe);ebr=r(f8t,"not"),f8t.forEach(t),obr=r(_te,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(_te,"A",{href:!0});var g8t=s(HH);rbr=r(g8t,"from_pretrained()"),g8t.forEach(t),tbr=r(_te," to load the model weights."),_te.forEach(t),abr=i(J7),T(tE.$$.fragment,J7),J7.forEach(t),nbr=i(wl),vo=n(wl,"DIV",{class:!0});var xa=s(vo);T(I9.$$.fragment,xa),sbr=i(xa),pTe=n(xa,"P",{});var h8t=s(pTe);lbr=r(h8t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),h8t.forEach(t),ibr=i(xa),an=n(xa,"P",{});var Y7=s(an);dbr=r(Y7,"The model class to instantiate is selected based on the "),_Te=n(Y7,"CODE",{});var u8t=s(_Te);cbr=r(u8t,"model_type"),u8t.forEach(t),mbr=r(Y7,` property of the config object (either
passed as an argument or loaded from `),bTe=n(Y7,"CODE",{});var p8t=s(bTe);fbr=r(p8t,"pretrained_model_name_or_path"),p8t.forEach(t),gbr=r(Y7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vTe=n(Y7,"CODE",{});var _8t=s(vTe);hbr=r(_8t,"pretrained_model_name_or_path"),_8t.forEach(t),ubr=r(Y7,":"),Y7.forEach(t),pbr=i(xa),tt=n(xa,"UL",{});var Al=s(tt);aE=n(Al,"LI",{});var DNe=s(aE);FTe=n(DNe,"STRONG",{});var b8t=s(FTe);_br=r(b8t,"beit"),b8t.forEach(t),bbr=r(DNe," \u2014 "),UH=n(DNe,"A",{href:!0});var v8t=s(UH);vbr=r(v8t,"BeitForSemanticSegmentation"),v8t.forEach(t),Fbr=r(DNe," (BEiT model)"),DNe.forEach(t),Tbr=i(Al),nE=n(Al,"LI",{});var GNe=s(nE);TTe=n(GNe,"STRONG",{});var F8t=s(TTe);Mbr=r(F8t,"data2vec-vision"),F8t.forEach(t),Ebr=r(GNe," \u2014 "),JH=n(GNe,"A",{href:!0});var T8t=s(JH);Cbr=r(T8t,"Data2VecVisionForSemanticSegmentation"),T8t.forEach(t),wbr=r(GNe," (Data2VecVision model)"),GNe.forEach(t),Abr=i(Al),sE=n(Al,"LI",{});var ONe=s(sE);MTe=n(ONe,"STRONG",{});var M8t=s(MTe);Lbr=r(M8t,"dpt"),M8t.forEach(t),ybr=r(ONe," \u2014 "),YH=n(ONe,"A",{href:!0});var E8t=s(YH);xbr=r(E8t,"DPTForSemanticSegmentation"),E8t.forEach(t),$br=r(ONe," (DPT model)"),ONe.forEach(t),kbr=i(Al),lE=n(Al,"LI",{});var VNe=s(lE);ETe=n(VNe,"STRONG",{});var C8t=s(ETe);Sbr=r(C8t,"mobilevit"),C8t.forEach(t),Rbr=r(VNe," \u2014 "),KH=n(VNe,"A",{href:!0});var w8t=s(KH);Pbr=r(w8t,"MobileViTForSemanticSegmentation"),w8t.forEach(t),Bbr=r(VNe," (MobileViT model)"),VNe.forEach(t),Ibr=i(Al),iE=n(Al,"LI",{});var XNe=s(iE);CTe=n(XNe,"STRONG",{});var A8t=s(CTe);Nbr=r(A8t,"segformer"),A8t.forEach(t),qbr=r(XNe," \u2014 "),ZH=n(XNe,"A",{href:!0});var L8t=s(ZH);jbr=r(L8t,"SegformerForSemanticSegmentation"),L8t.forEach(t),Dbr=r(XNe," (SegFormer model)"),XNe.forEach(t),Al.forEach(t),Gbr=i(xa),dE=n(xa,"P",{});var zNe=s(dE);Obr=r(zNe,"The model is set in evaluation mode by default using "),wTe=n(zNe,"CODE",{});var y8t=s(wTe);Vbr=r(y8t,"model.eval()"),y8t.forEach(t),Xbr=r(zNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ATe=n(zNe,"CODE",{});var x8t=s(ATe);zbr=r(x8t,"model.train()"),x8t.forEach(t),zNe.forEach(t),Qbr=i(xa),T(cE.$$.fragment,xa),xa.forEach(t),wl.forEach(t),WXe=i(m),rc=n(m,"H2",{class:!0});var oWe=s(rc);mE=n(oWe,"A",{id:!0,class:!0,href:!0});var $8t=s(mE);LTe=n($8t,"SPAN",{});var k8t=s(LTe);T(N9.$$.fragment,k8t),k8t.forEach(t),$8t.forEach(t),Wbr=i(oWe),yTe=n(oWe,"SPAN",{});var S8t=s(yTe);Hbr=r(S8t,"AutoModelForInstanceSegmentation"),S8t.forEach(t),oWe.forEach(t),HXe=i(m),Zo=n(m,"DIV",{class:!0});var Ll=s(Zo);T(q9.$$.fragment,Ll),Ubr=i(Ll),tc=n(Ll,"P",{});var bte=s(tc);Jbr=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),eU=n(bte,"A",{href:!0});var R8t=s(eU);Ybr=r(R8t,"from_pretrained()"),R8t.forEach(t),Kbr=r(bte," class method or the "),oU=n(bte,"A",{href:!0});var P8t=s(oU);Zbr=r(P8t,"from_config()"),P8t.forEach(t),evr=r(bte,` class
method.`),bte.forEach(t),ovr=i(Ll),j9=n(Ll,"P",{});var rWe=s(j9);rvr=r(rWe,"This class cannot be instantiated directly using "),xTe=n(rWe,"CODE",{});var B8t=s(xTe);tvr=r(B8t,"__init__()"),B8t.forEach(t),avr=r(rWe," (throws an error)."),rWe.forEach(t),nvr=i(Ll),kt=n(Ll,"DIV",{class:!0});var K7=s(kt);T(D9.$$.fragment,K7),svr=i(K7),$Te=n(K7,"P",{});var I8t=s($Te);lvr=r(I8t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),I8t.forEach(t),ivr=i(K7),ac=n(K7,"P",{});var vte=s(ac);dvr=r(vte,`Note:
Loading a model from its configuration file does `),kTe=n(vte,"STRONG",{});var N8t=s(kTe);cvr=r(N8t,"not"),N8t.forEach(t),mvr=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=n(vte,"A",{href:!0});var q8t=s(rU);fvr=r(q8t,"from_pretrained()"),q8t.forEach(t),gvr=r(vte," to load the model weights."),vte.forEach(t),hvr=i(K7),T(fE.$$.fragment,K7),K7.forEach(t),uvr=i(Ll),Fo=n(Ll,"DIV",{class:!0});var $a=s(Fo);T(G9.$$.fragment,$a),pvr=i($a),STe=n($a,"P",{});var j8t=s(STe);_vr=r(j8t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),j8t.forEach(t),bvr=i($a),nn=n($a,"P",{});var Z7=s(nn);vvr=r(Z7,"The model class to instantiate is selected based on the "),RTe=n(Z7,"CODE",{});var D8t=s(RTe);Fvr=r(D8t,"model_type"),D8t.forEach(t),Tvr=r(Z7,` property of the config object (either
passed as an argument or loaded from `),PTe=n(Z7,"CODE",{});var G8t=s(PTe);Mvr=r(G8t,"pretrained_model_name_or_path"),G8t.forEach(t),Evr=r(Z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=n(Z7,"CODE",{});var O8t=s(BTe);Cvr=r(O8t,"pretrained_model_name_or_path"),O8t.forEach(t),wvr=r(Z7,":"),Z7.forEach(t),Avr=i($a),ITe=n($a,"UL",{});var V8t=s(ITe);gE=n(V8t,"LI",{});var QNe=s(gE);NTe=n(QNe,"STRONG",{});var X8t=s(NTe);Lvr=r(X8t,"maskformer"),X8t.forEach(t),yvr=r(QNe," \u2014 "),tU=n(QNe,"A",{href:!0});var z8t=s(tU);xvr=r(z8t,"MaskFormerForInstanceSegmentation"),z8t.forEach(t),$vr=r(QNe," (MaskFormer model)"),QNe.forEach(t),V8t.forEach(t),kvr=i($a),hE=n($a,"P",{});var WNe=s(hE);Svr=r(WNe,"The model is set in evaluation mode by default using "),qTe=n(WNe,"CODE",{});var Q8t=s(qTe);Rvr=r(Q8t,"model.eval()"),Q8t.forEach(t),Pvr=r(WNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jTe=n(WNe,"CODE",{});var W8t=s(jTe);Bvr=r(W8t,"model.train()"),W8t.forEach(t),WNe.forEach(t),Ivr=i($a),T(uE.$$.fragment,$a),$a.forEach(t),Ll.forEach(t),UXe=i(m),nc=n(m,"H2",{class:!0});var tWe=s(nc);pE=n(tWe,"A",{id:!0,class:!0,href:!0});var H8t=s(pE);DTe=n(H8t,"SPAN",{});var U8t=s(DTe);T(O9.$$.fragment,U8t),U8t.forEach(t),H8t.forEach(t),Nvr=i(tWe),GTe=n(tWe,"SPAN",{});var J8t=s(GTe);qvr=r(J8t,"TFAutoModel"),J8t.forEach(t),tWe.forEach(t),JXe=i(m),er=n(m,"DIV",{class:!0});var yl=s(er);T(V9.$$.fragment,yl),jvr=i(yl),sc=n(yl,"P",{});var Fte=s(sc);Dvr=r(Fte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aU=n(Fte,"A",{href:!0});var Y8t=s(aU);Gvr=r(Y8t,"from_pretrained()"),Y8t.forEach(t),Ovr=r(Fte," class method or the "),nU=n(Fte,"A",{href:!0});var K8t=s(nU);Vvr=r(K8t,"from_config()"),K8t.forEach(t),Xvr=r(Fte,` class
method.`),Fte.forEach(t),zvr=i(yl),X9=n(yl,"P",{});var aWe=s(X9);Qvr=r(aWe,"This class cannot be instantiated directly using "),OTe=n(aWe,"CODE",{});var Z8t=s(OTe);Wvr=r(Z8t,"__init__()"),Z8t.forEach(t),Hvr=r(aWe," (throws an error)."),aWe.forEach(t),Uvr=i(yl),St=n(yl,"DIV",{class:!0});var eL=s(St);T(z9.$$.fragment,eL),Jvr=i(eL),VTe=n(eL,"P",{});var e9t=s(VTe);Yvr=r(e9t,"Instantiates one of the base model classes of the library from a configuration."),e9t.forEach(t),Kvr=i(eL),lc=n(eL,"P",{});var Tte=s(lc);Zvr=r(Tte,`Note:
Loading a model from its configuration file does `),XTe=n(Tte,"STRONG",{});var o9t=s(XTe);e1r=r(o9t,"not"),o9t.forEach(t),o1r=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=n(Tte,"A",{href:!0});var r9t=s(sU);r1r=r(r9t,"from_pretrained()"),r9t.forEach(t),t1r=r(Tte," to load the model weights."),Tte.forEach(t),a1r=i(eL),T(_E.$$.fragment,eL),eL.forEach(t),n1r=i(yl),xr=n(yl,"DIV",{class:!0});var xl=s(xr);T(Q9.$$.fragment,xl),s1r=i(xl),zTe=n(xl,"P",{});var t9t=s(zTe);l1r=r(t9t,"Instantiate one of the base model classes of the library from a pretrained model."),t9t.forEach(t),i1r=i(xl),sn=n(xl,"P",{});var oL=s(sn);d1r=r(oL,"The model class to instantiate is selected based on the "),QTe=n(oL,"CODE",{});var a9t=s(QTe);c1r=r(a9t,"model_type"),a9t.forEach(t),m1r=r(oL,` property of the config object (either
passed as an argument or loaded from `),WTe=n(oL,"CODE",{});var n9t=s(WTe);f1r=r(n9t,"pretrained_model_name_or_path"),n9t.forEach(t),g1r=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HTe=n(oL,"CODE",{});var s9t=s(HTe);h1r=r(s9t,"pretrained_model_name_or_path"),s9t.forEach(t),u1r=r(oL,":"),oL.forEach(t),p1r=i(xl),q=n(xl,"UL",{});var D=s(q);bE=n(D,"LI",{});var HNe=s(bE);UTe=n(HNe,"STRONG",{});var l9t=s(UTe);_1r=r(l9t,"albert"),l9t.forEach(t),b1r=r(HNe," \u2014 "),lU=n(HNe,"A",{href:!0});var i9t=s(lU);v1r=r(i9t,"TFAlbertModel"),i9t.forEach(t),F1r=r(HNe," (ALBERT model)"),HNe.forEach(t),T1r=i(D),vE=n(D,"LI",{});var UNe=s(vE);JTe=n(UNe,"STRONG",{});var d9t=s(JTe);M1r=r(d9t,"bart"),d9t.forEach(t),E1r=r(UNe," \u2014 "),iU=n(UNe,"A",{href:!0});var c9t=s(iU);C1r=r(c9t,"TFBartModel"),c9t.forEach(t),w1r=r(UNe," (BART model)"),UNe.forEach(t),A1r=i(D),FE=n(D,"LI",{});var JNe=s(FE);YTe=n(JNe,"STRONG",{});var m9t=s(YTe);L1r=r(m9t,"bert"),m9t.forEach(t),y1r=r(JNe," \u2014 "),dU=n(JNe,"A",{href:!0});var f9t=s(dU);x1r=r(f9t,"TFBertModel"),f9t.forEach(t),$1r=r(JNe," (BERT model)"),JNe.forEach(t),k1r=i(D),TE=n(D,"LI",{});var YNe=s(TE);KTe=n(YNe,"STRONG",{});var g9t=s(KTe);S1r=r(g9t,"blenderbot"),g9t.forEach(t),R1r=r(YNe," \u2014 "),cU=n(YNe,"A",{href:!0});var h9t=s(cU);P1r=r(h9t,"TFBlenderbotModel"),h9t.forEach(t),B1r=r(YNe," (Blenderbot model)"),YNe.forEach(t),I1r=i(D),ME=n(D,"LI",{});var KNe=s(ME);ZTe=n(KNe,"STRONG",{});var u9t=s(ZTe);N1r=r(u9t,"blenderbot-small"),u9t.forEach(t),q1r=r(KNe," \u2014 "),mU=n(KNe,"A",{href:!0});var p9t=s(mU);j1r=r(p9t,"TFBlenderbotSmallModel"),p9t.forEach(t),D1r=r(KNe," (BlenderbotSmall model)"),KNe.forEach(t),G1r=i(D),EE=n(D,"LI",{});var ZNe=s(EE);eMe=n(ZNe,"STRONG",{});var _9t=s(eMe);O1r=r(_9t,"camembert"),_9t.forEach(t),V1r=r(ZNe," \u2014 "),fU=n(ZNe,"A",{href:!0});var b9t=s(fU);X1r=r(b9t,"TFCamembertModel"),b9t.forEach(t),z1r=r(ZNe," (CamemBERT model)"),ZNe.forEach(t),Q1r=i(D),CE=n(D,"LI",{});var eqe=s(CE);oMe=n(eqe,"STRONG",{});var v9t=s(oMe);W1r=r(v9t,"clip"),v9t.forEach(t),H1r=r(eqe," \u2014 "),gU=n(eqe,"A",{href:!0});var F9t=s(gU);U1r=r(F9t,"TFCLIPModel"),F9t.forEach(t),J1r=r(eqe," (CLIP model)"),eqe.forEach(t),Y1r=i(D),wE=n(D,"LI",{});var oqe=s(wE);rMe=n(oqe,"STRONG",{});var T9t=s(rMe);K1r=r(T9t,"convbert"),T9t.forEach(t),Z1r=r(oqe," \u2014 "),hU=n(oqe,"A",{href:!0});var M9t=s(hU);eFr=r(M9t,"TFConvBertModel"),M9t.forEach(t),oFr=r(oqe," (ConvBERT model)"),oqe.forEach(t),rFr=i(D),AE=n(D,"LI",{});var rqe=s(AE);tMe=n(rqe,"STRONG",{});var E9t=s(tMe);tFr=r(E9t,"convnext"),E9t.forEach(t),aFr=r(rqe," \u2014 "),uU=n(rqe,"A",{href:!0});var C9t=s(uU);nFr=r(C9t,"TFConvNextModel"),C9t.forEach(t),sFr=r(rqe," (ConvNeXT model)"),rqe.forEach(t),lFr=i(D),LE=n(D,"LI",{});var tqe=s(LE);aMe=n(tqe,"STRONG",{});var w9t=s(aMe);iFr=r(w9t,"ctrl"),w9t.forEach(t),dFr=r(tqe," \u2014 "),pU=n(tqe,"A",{href:!0});var A9t=s(pU);cFr=r(A9t,"TFCTRLModel"),A9t.forEach(t),mFr=r(tqe," (CTRL model)"),tqe.forEach(t),fFr=i(D),yE=n(D,"LI",{});var aqe=s(yE);nMe=n(aqe,"STRONG",{});var L9t=s(nMe);gFr=r(L9t,"data2vec-vision"),L9t.forEach(t),hFr=r(aqe," \u2014 "),_U=n(aqe,"A",{href:!0});var y9t=s(_U);uFr=r(y9t,"TFData2VecVisionModel"),y9t.forEach(t),pFr=r(aqe," (Data2VecVision model)"),aqe.forEach(t),_Fr=i(D),xE=n(D,"LI",{});var nqe=s(xE);sMe=n(nqe,"STRONG",{});var x9t=s(sMe);bFr=r(x9t,"deberta"),x9t.forEach(t),vFr=r(nqe," \u2014 "),bU=n(nqe,"A",{href:!0});var $9t=s(bU);FFr=r($9t,"TFDebertaModel"),$9t.forEach(t),TFr=r(nqe," (DeBERTa model)"),nqe.forEach(t),MFr=i(D),$E=n(D,"LI",{});var sqe=s($E);lMe=n(sqe,"STRONG",{});var k9t=s(lMe);EFr=r(k9t,"deberta-v2"),k9t.forEach(t),CFr=r(sqe," \u2014 "),vU=n(sqe,"A",{href:!0});var S9t=s(vU);wFr=r(S9t,"TFDebertaV2Model"),S9t.forEach(t),AFr=r(sqe," (DeBERTa-v2 model)"),sqe.forEach(t),LFr=i(D),kE=n(D,"LI",{});var lqe=s(kE);iMe=n(lqe,"STRONG",{});var R9t=s(iMe);yFr=r(R9t,"distilbert"),R9t.forEach(t),xFr=r(lqe," \u2014 "),FU=n(lqe,"A",{href:!0});var P9t=s(FU);$Fr=r(P9t,"TFDistilBertModel"),P9t.forEach(t),kFr=r(lqe," (DistilBERT model)"),lqe.forEach(t),SFr=i(D),SE=n(D,"LI",{});var iqe=s(SE);dMe=n(iqe,"STRONG",{});var B9t=s(dMe);RFr=r(B9t,"dpr"),B9t.forEach(t),PFr=r(iqe," \u2014 "),TU=n(iqe,"A",{href:!0});var I9t=s(TU);BFr=r(I9t,"TFDPRQuestionEncoder"),I9t.forEach(t),IFr=r(iqe," (DPR model)"),iqe.forEach(t),NFr=i(D),RE=n(D,"LI",{});var dqe=s(RE);cMe=n(dqe,"STRONG",{});var N9t=s(cMe);qFr=r(N9t,"electra"),N9t.forEach(t),jFr=r(dqe," \u2014 "),MU=n(dqe,"A",{href:!0});var q9t=s(MU);DFr=r(q9t,"TFElectraModel"),q9t.forEach(t),GFr=r(dqe," (ELECTRA model)"),dqe.forEach(t),OFr=i(D),PE=n(D,"LI",{});var cqe=s(PE);mMe=n(cqe,"STRONG",{});var j9t=s(mMe);VFr=r(j9t,"flaubert"),j9t.forEach(t),XFr=r(cqe," \u2014 "),EU=n(cqe,"A",{href:!0});var D9t=s(EU);zFr=r(D9t,"TFFlaubertModel"),D9t.forEach(t),QFr=r(cqe," (FlauBERT model)"),cqe.forEach(t),WFr=i(D),Js=n(D,"LI",{});var kS=s(Js);fMe=n(kS,"STRONG",{});var G9t=s(fMe);HFr=r(G9t,"funnel"),G9t.forEach(t),UFr=r(kS," \u2014 "),CU=n(kS,"A",{href:!0});var O9t=s(CU);JFr=r(O9t,"TFFunnelModel"),O9t.forEach(t),YFr=r(kS," or "),wU=n(kS,"A",{href:!0});var V9t=s(wU);KFr=r(V9t,"TFFunnelBaseModel"),V9t.forEach(t),ZFr=r(kS," (Funnel Transformer model)"),kS.forEach(t),eTr=i(D),BE=n(D,"LI",{});var mqe=s(BE);gMe=n(mqe,"STRONG",{});var X9t=s(gMe);oTr=r(X9t,"gpt2"),X9t.forEach(t),rTr=r(mqe," \u2014 "),AU=n(mqe,"A",{href:!0});var z9t=s(AU);tTr=r(z9t,"TFGPT2Model"),z9t.forEach(t),aTr=r(mqe," (OpenAI GPT-2 model)"),mqe.forEach(t),nTr=i(D),IE=n(D,"LI",{});var fqe=s(IE);hMe=n(fqe,"STRONG",{});var Q9t=s(hMe);sTr=r(Q9t,"gptj"),Q9t.forEach(t),lTr=r(fqe," \u2014 "),LU=n(fqe,"A",{href:!0});var W9t=s(LU);iTr=r(W9t,"TFGPTJModel"),W9t.forEach(t),dTr=r(fqe," (GPT-J model)"),fqe.forEach(t),cTr=i(D),NE=n(D,"LI",{});var gqe=s(NE);uMe=n(gqe,"STRONG",{});var H9t=s(uMe);mTr=r(H9t,"hubert"),H9t.forEach(t),fTr=r(gqe," \u2014 "),yU=n(gqe,"A",{href:!0});var U9t=s(yU);gTr=r(U9t,"TFHubertModel"),U9t.forEach(t),hTr=r(gqe," (Hubert model)"),gqe.forEach(t),uTr=i(D),qE=n(D,"LI",{});var hqe=s(qE);pMe=n(hqe,"STRONG",{});var J9t=s(pMe);pTr=r(J9t,"layoutlm"),J9t.forEach(t),_Tr=r(hqe," \u2014 "),xU=n(hqe,"A",{href:!0});var Y9t=s(xU);bTr=r(Y9t,"TFLayoutLMModel"),Y9t.forEach(t),vTr=r(hqe," (LayoutLM model)"),hqe.forEach(t),FTr=i(D),jE=n(D,"LI",{});var uqe=s(jE);_Me=n(uqe,"STRONG",{});var K9t=s(_Me);TTr=r(K9t,"led"),K9t.forEach(t),MTr=r(uqe," \u2014 "),$U=n(uqe,"A",{href:!0});var Z9t=s($U);ETr=r(Z9t,"TFLEDModel"),Z9t.forEach(t),CTr=r(uqe," (LED model)"),uqe.forEach(t),wTr=i(D),DE=n(D,"LI",{});var pqe=s(DE);bMe=n(pqe,"STRONG",{});var ext=s(bMe);ATr=r(ext,"longformer"),ext.forEach(t),LTr=r(pqe," \u2014 "),kU=n(pqe,"A",{href:!0});var oxt=s(kU);yTr=r(oxt,"TFLongformerModel"),oxt.forEach(t),xTr=r(pqe," (Longformer model)"),pqe.forEach(t),$Tr=i(D),GE=n(D,"LI",{});var _qe=s(GE);vMe=n(_qe,"STRONG",{});var rxt=s(vMe);kTr=r(rxt,"lxmert"),rxt.forEach(t),STr=r(_qe," \u2014 "),SU=n(_qe,"A",{href:!0});var txt=s(SU);RTr=r(txt,"TFLxmertModel"),txt.forEach(t),PTr=r(_qe," (LXMERT model)"),_qe.forEach(t),BTr=i(D),OE=n(D,"LI",{});var bqe=s(OE);FMe=n(bqe,"STRONG",{});var axt=s(FMe);ITr=r(axt,"marian"),axt.forEach(t),NTr=r(bqe," \u2014 "),RU=n(bqe,"A",{href:!0});var nxt=s(RU);qTr=r(nxt,"TFMarianModel"),nxt.forEach(t),jTr=r(bqe," (Marian model)"),bqe.forEach(t),DTr=i(D),VE=n(D,"LI",{});var vqe=s(VE);TMe=n(vqe,"STRONG",{});var sxt=s(TMe);GTr=r(sxt,"mbart"),sxt.forEach(t),OTr=r(vqe," \u2014 "),PU=n(vqe,"A",{href:!0});var lxt=s(PU);VTr=r(lxt,"TFMBartModel"),lxt.forEach(t),XTr=r(vqe," (mBART model)"),vqe.forEach(t),zTr=i(D),XE=n(D,"LI",{});var Fqe=s(XE);MMe=n(Fqe,"STRONG",{});var ixt=s(MMe);QTr=r(ixt,"mobilebert"),ixt.forEach(t),WTr=r(Fqe," \u2014 "),BU=n(Fqe,"A",{href:!0});var dxt=s(BU);HTr=r(dxt,"TFMobileBertModel"),dxt.forEach(t),UTr=r(Fqe," (MobileBERT model)"),Fqe.forEach(t),JTr=i(D),zE=n(D,"LI",{});var Tqe=s(zE);EMe=n(Tqe,"STRONG",{});var cxt=s(EMe);YTr=r(cxt,"mpnet"),cxt.forEach(t),KTr=r(Tqe," \u2014 "),IU=n(Tqe,"A",{href:!0});var mxt=s(IU);ZTr=r(mxt,"TFMPNetModel"),mxt.forEach(t),eMr=r(Tqe," (MPNet model)"),Tqe.forEach(t),oMr=i(D),QE=n(D,"LI",{});var Mqe=s(QE);CMe=n(Mqe,"STRONG",{});var fxt=s(CMe);rMr=r(fxt,"mt5"),fxt.forEach(t),tMr=r(Mqe," \u2014 "),NU=n(Mqe,"A",{href:!0});var gxt=s(NU);aMr=r(gxt,"TFMT5Model"),gxt.forEach(t),nMr=r(Mqe," (MT5 model)"),Mqe.forEach(t),sMr=i(D),WE=n(D,"LI",{});var Eqe=s(WE);wMe=n(Eqe,"STRONG",{});var hxt=s(wMe);lMr=r(hxt,"openai-gpt"),hxt.forEach(t),iMr=r(Eqe," \u2014 "),qU=n(Eqe,"A",{href:!0});var uxt=s(qU);dMr=r(uxt,"TFOpenAIGPTModel"),uxt.forEach(t),cMr=r(Eqe," (OpenAI GPT model)"),Eqe.forEach(t),mMr=i(D),HE=n(D,"LI",{});var Cqe=s(HE);AMe=n(Cqe,"STRONG",{});var pxt=s(AMe);fMr=r(pxt,"opt"),pxt.forEach(t),gMr=r(Cqe," \u2014 "),jU=n(Cqe,"A",{href:!0});var _xt=s(jU);hMr=r(_xt,"TFOPTModel"),_xt.forEach(t),uMr=r(Cqe," (OPT model)"),Cqe.forEach(t),pMr=i(D),UE=n(D,"LI",{});var wqe=s(UE);LMe=n(wqe,"STRONG",{});var bxt=s(LMe);_Mr=r(bxt,"pegasus"),bxt.forEach(t),bMr=r(wqe," \u2014 "),DU=n(wqe,"A",{href:!0});var vxt=s(DU);vMr=r(vxt,"TFPegasusModel"),vxt.forEach(t),FMr=r(wqe," (Pegasus model)"),wqe.forEach(t),TMr=i(D),JE=n(D,"LI",{});var Aqe=s(JE);yMe=n(Aqe,"STRONG",{});var Fxt=s(yMe);MMr=r(Fxt,"regnet"),Fxt.forEach(t),EMr=r(Aqe," \u2014 "),GU=n(Aqe,"A",{href:!0});var Txt=s(GU);CMr=r(Txt,"TFRegNetModel"),Txt.forEach(t),wMr=r(Aqe," (RegNet model)"),Aqe.forEach(t),AMr=i(D),YE=n(D,"LI",{});var Lqe=s(YE);xMe=n(Lqe,"STRONG",{});var Mxt=s(xMe);LMr=r(Mxt,"rembert"),Mxt.forEach(t),yMr=r(Lqe," \u2014 "),OU=n(Lqe,"A",{href:!0});var Ext=s(OU);xMr=r(Ext,"TFRemBertModel"),Ext.forEach(t),$Mr=r(Lqe," (RemBERT model)"),Lqe.forEach(t),kMr=i(D),KE=n(D,"LI",{});var yqe=s(KE);$Me=n(yqe,"STRONG",{});var Cxt=s($Me);SMr=r(Cxt,"resnet"),Cxt.forEach(t),RMr=r(yqe," \u2014 "),VU=n(yqe,"A",{href:!0});var wxt=s(VU);PMr=r(wxt,"TFResNetModel"),wxt.forEach(t),BMr=r(yqe," (ResNet model)"),yqe.forEach(t),IMr=i(D),ZE=n(D,"LI",{});var xqe=s(ZE);kMe=n(xqe,"STRONG",{});var Axt=s(kMe);NMr=r(Axt,"roberta"),Axt.forEach(t),qMr=r(xqe," \u2014 "),XU=n(xqe,"A",{href:!0});var Lxt=s(XU);jMr=r(Lxt,"TFRobertaModel"),Lxt.forEach(t),DMr=r(xqe," (RoBERTa model)"),xqe.forEach(t),GMr=i(D),eC=n(D,"LI",{});var $qe=s(eC);SMe=n($qe,"STRONG",{});var yxt=s(SMe);OMr=r(yxt,"roformer"),yxt.forEach(t),VMr=r($qe," \u2014 "),zU=n($qe,"A",{href:!0});var xxt=s(zU);XMr=r(xxt,"TFRoFormerModel"),xxt.forEach(t),zMr=r($qe," (RoFormer model)"),$qe.forEach(t),QMr=i(D),oC=n(D,"LI",{});var kqe=s(oC);RMe=n(kqe,"STRONG",{});var $xt=s(RMe);WMr=r($xt,"speech_to_text"),$xt.forEach(t),HMr=r(kqe," \u2014 "),QU=n(kqe,"A",{href:!0});var kxt=s(QU);UMr=r(kxt,"TFSpeech2TextModel"),kxt.forEach(t),JMr=r(kqe," (Speech2Text model)"),kqe.forEach(t),YMr=i(D),rC=n(D,"LI",{});var Sqe=s(rC);PMe=n(Sqe,"STRONG",{});var Sxt=s(PMe);KMr=r(Sxt,"swin"),Sxt.forEach(t),ZMr=r(Sqe," \u2014 "),WU=n(Sqe,"A",{href:!0});var Rxt=s(WU);e4r=r(Rxt,"TFSwinModel"),Rxt.forEach(t),o4r=r(Sqe," (Swin Transformer model)"),Sqe.forEach(t),r4r=i(D),tC=n(D,"LI",{});var Rqe=s(tC);BMe=n(Rqe,"STRONG",{});var Pxt=s(BMe);t4r=r(Pxt,"t5"),Pxt.forEach(t),a4r=r(Rqe," \u2014 "),HU=n(Rqe,"A",{href:!0});var Bxt=s(HU);n4r=r(Bxt,"TFT5Model"),Bxt.forEach(t),s4r=r(Rqe," (T5 model)"),Rqe.forEach(t),l4r=i(D),aC=n(D,"LI",{});var Pqe=s(aC);IMe=n(Pqe,"STRONG",{});var Ixt=s(IMe);i4r=r(Ixt,"tapas"),Ixt.forEach(t),d4r=r(Pqe," \u2014 "),UU=n(Pqe,"A",{href:!0});var Nxt=s(UU);c4r=r(Nxt,"TFTapasModel"),Nxt.forEach(t),m4r=r(Pqe," (TAPAS model)"),Pqe.forEach(t),f4r=i(D),nC=n(D,"LI",{});var Bqe=s(nC);NMe=n(Bqe,"STRONG",{});var qxt=s(NMe);g4r=r(qxt,"transfo-xl"),qxt.forEach(t),h4r=r(Bqe," \u2014 "),JU=n(Bqe,"A",{href:!0});var jxt=s(JU);u4r=r(jxt,"TFTransfoXLModel"),jxt.forEach(t),p4r=r(Bqe," (Transformer-XL model)"),Bqe.forEach(t),_4r=i(D),sC=n(D,"LI",{});var Iqe=s(sC);qMe=n(Iqe,"STRONG",{});var Dxt=s(qMe);b4r=r(Dxt,"vit"),Dxt.forEach(t),v4r=r(Iqe," \u2014 "),YU=n(Iqe,"A",{href:!0});var Gxt=s(YU);F4r=r(Gxt,"TFViTModel"),Gxt.forEach(t),T4r=r(Iqe," (ViT model)"),Iqe.forEach(t),M4r=i(D),lC=n(D,"LI",{});var Nqe=s(lC);jMe=n(Nqe,"STRONG",{});var Oxt=s(jMe);E4r=r(Oxt,"vit_mae"),Oxt.forEach(t),C4r=r(Nqe," \u2014 "),KU=n(Nqe,"A",{href:!0});var Vxt=s(KU);w4r=r(Vxt,"TFViTMAEModel"),Vxt.forEach(t),A4r=r(Nqe," (ViTMAE model)"),Nqe.forEach(t),L4r=i(D),iC=n(D,"LI",{});var qqe=s(iC);DMe=n(qqe,"STRONG",{});var Xxt=s(DMe);y4r=r(Xxt,"wav2vec2"),Xxt.forEach(t),x4r=r(qqe," \u2014 "),ZU=n(qqe,"A",{href:!0});var zxt=s(ZU);$4r=r(zxt,"TFWav2Vec2Model"),zxt.forEach(t),k4r=r(qqe," (Wav2Vec2 model)"),qqe.forEach(t),S4r=i(D),dC=n(D,"LI",{});var jqe=s(dC);GMe=n(jqe,"STRONG",{});var Qxt=s(GMe);R4r=r(Qxt,"xlm"),Qxt.forEach(t),P4r=r(jqe," \u2014 "),eJ=n(jqe,"A",{href:!0});var Wxt=s(eJ);B4r=r(Wxt,"TFXLMModel"),Wxt.forEach(t),I4r=r(jqe," (XLM model)"),jqe.forEach(t),N4r=i(D),cC=n(D,"LI",{});var Dqe=s(cC);OMe=n(Dqe,"STRONG",{});var Hxt=s(OMe);q4r=r(Hxt,"xlm-roberta"),Hxt.forEach(t),j4r=r(Dqe," \u2014 "),oJ=n(Dqe,"A",{href:!0});var Uxt=s(oJ);D4r=r(Uxt,"TFXLMRobertaModel"),Uxt.forEach(t),G4r=r(Dqe," (XLM-RoBERTa model)"),Dqe.forEach(t),O4r=i(D),mC=n(D,"LI",{});var Gqe=s(mC);VMe=n(Gqe,"STRONG",{});var Jxt=s(VMe);V4r=r(Jxt,"xlnet"),Jxt.forEach(t),X4r=r(Gqe," \u2014 "),rJ=n(Gqe,"A",{href:!0});var Yxt=s(rJ);z4r=r(Yxt,"TFXLNetModel"),Yxt.forEach(t),Q4r=r(Gqe," (XLNet model)"),Gqe.forEach(t),D.forEach(t),W4r=i(xl),T(fC.$$.fragment,xl),xl.forEach(t),yl.forEach(t),YXe=i(m),ic=n(m,"H2",{class:!0});var nWe=s(ic);gC=n(nWe,"A",{id:!0,class:!0,href:!0});var Kxt=s(gC);XMe=n(Kxt,"SPAN",{});var Zxt=s(XMe);T(W9.$$.fragment,Zxt),Zxt.forEach(t),Kxt.forEach(t),H4r=i(nWe),zMe=n(nWe,"SPAN",{});var e$t=s(zMe);U4r=r(e$t,"TFAutoModelForPreTraining"),e$t.forEach(t),nWe.forEach(t),KXe=i(m),or=n(m,"DIV",{class:!0});var $l=s(or);T(H9.$$.fragment,$l),J4r=i($l),dc=n($l,"P",{});var Mte=s(dc);Y4r=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tJ=n(Mte,"A",{href:!0});var o$t=s(tJ);K4r=r(o$t,"from_pretrained()"),o$t.forEach(t),Z4r=r(Mte," class method or the "),aJ=n(Mte,"A",{href:!0});var r$t=s(aJ);eEr=r(r$t,"from_config()"),r$t.forEach(t),oEr=r(Mte,` class
method.`),Mte.forEach(t),rEr=i($l),U9=n($l,"P",{});var sWe=s(U9);tEr=r(sWe,"This class cannot be instantiated directly using "),QMe=n(sWe,"CODE",{});var t$t=s(QMe);aEr=r(t$t,"__init__()"),t$t.forEach(t),nEr=r(sWe," (throws an error)."),sWe.forEach(t),sEr=i($l),Rt=n($l,"DIV",{class:!0});var rL=s(Rt);T(J9.$$.fragment,rL),lEr=i(rL),WMe=n(rL,"P",{});var a$t=s(WMe);iEr=r(a$t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),a$t.forEach(t),dEr=i(rL),cc=n(rL,"P",{});var Ete=s(cc);cEr=r(Ete,`Note:
Loading a model from its configuration file does `),HMe=n(Ete,"STRONG",{});var n$t=s(HMe);mEr=r(n$t,"not"),n$t.forEach(t),fEr=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=n(Ete,"A",{href:!0});var s$t=s(nJ);gEr=r(s$t,"from_pretrained()"),s$t.forEach(t),hEr=r(Ete," to load the model weights."),Ete.forEach(t),uEr=i(rL),T(hC.$$.fragment,rL),rL.forEach(t),pEr=i($l),$r=n($l,"DIV",{class:!0});var kl=s($r);T(Y9.$$.fragment,kl),_Er=i(kl),UMe=n(kl,"P",{});var l$t=s(UMe);bEr=r(l$t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),l$t.forEach(t),vEr=i(kl),ln=n(kl,"P",{});var tL=s(ln);FEr=r(tL,"The model class to instantiate is selected based on the "),JMe=n(tL,"CODE",{});var i$t=s(JMe);TEr=r(i$t,"model_type"),i$t.forEach(t),MEr=r(tL,` property of the config object (either
passed as an argument or loaded from `),YMe=n(tL,"CODE",{});var d$t=s(YMe);EEr=r(d$t,"pretrained_model_name_or_path"),d$t.forEach(t),CEr=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KMe=n(tL,"CODE",{});var c$t=s(KMe);wEr=r(c$t,"pretrained_model_name_or_path"),c$t.forEach(t),AEr=r(tL,":"),tL.forEach(t),LEr=i(kl),se=n(kl,"UL",{});var le=s(se);uC=n(le,"LI",{});var Oqe=s(uC);ZMe=n(Oqe,"STRONG",{});var m$t=s(ZMe);yEr=r(m$t,"albert"),m$t.forEach(t),xEr=r(Oqe," \u2014 "),sJ=n(Oqe,"A",{href:!0});var f$t=s(sJ);$Er=r(f$t,"TFAlbertForPreTraining"),f$t.forEach(t),kEr=r(Oqe," (ALBERT model)"),Oqe.forEach(t),SEr=i(le),pC=n(le,"LI",{});var Vqe=s(pC);e4e=n(Vqe,"STRONG",{});var g$t=s(e4e);REr=r(g$t,"bart"),g$t.forEach(t),PEr=r(Vqe," \u2014 "),lJ=n(Vqe,"A",{href:!0});var h$t=s(lJ);BEr=r(h$t,"TFBartForConditionalGeneration"),h$t.forEach(t),IEr=r(Vqe," (BART model)"),Vqe.forEach(t),NEr=i(le),_C=n(le,"LI",{});var Xqe=s(_C);o4e=n(Xqe,"STRONG",{});var u$t=s(o4e);qEr=r(u$t,"bert"),u$t.forEach(t),jEr=r(Xqe," \u2014 "),iJ=n(Xqe,"A",{href:!0});var p$t=s(iJ);DEr=r(p$t,"TFBertForPreTraining"),p$t.forEach(t),GEr=r(Xqe," (BERT model)"),Xqe.forEach(t),OEr=i(le),bC=n(le,"LI",{});var zqe=s(bC);r4e=n(zqe,"STRONG",{});var _$t=s(r4e);VEr=r(_$t,"camembert"),_$t.forEach(t),XEr=r(zqe," \u2014 "),dJ=n(zqe,"A",{href:!0});var b$t=s(dJ);zEr=r(b$t,"TFCamembertForMaskedLM"),b$t.forEach(t),QEr=r(zqe," (CamemBERT model)"),zqe.forEach(t),WEr=i(le),vC=n(le,"LI",{});var Qqe=s(vC);t4e=n(Qqe,"STRONG",{});var v$t=s(t4e);HEr=r(v$t,"ctrl"),v$t.forEach(t),UEr=r(Qqe," \u2014 "),cJ=n(Qqe,"A",{href:!0});var F$t=s(cJ);JEr=r(F$t,"TFCTRLLMHeadModel"),F$t.forEach(t),YEr=r(Qqe," (CTRL model)"),Qqe.forEach(t),KEr=i(le),FC=n(le,"LI",{});var Wqe=s(FC);a4e=n(Wqe,"STRONG",{});var T$t=s(a4e);ZEr=r(T$t,"distilbert"),T$t.forEach(t),eCr=r(Wqe," \u2014 "),mJ=n(Wqe,"A",{href:!0});var M$t=s(mJ);oCr=r(M$t,"TFDistilBertForMaskedLM"),M$t.forEach(t),rCr=r(Wqe," (DistilBERT model)"),Wqe.forEach(t),tCr=i(le),TC=n(le,"LI",{});var Hqe=s(TC);n4e=n(Hqe,"STRONG",{});var E$t=s(n4e);aCr=r(E$t,"electra"),E$t.forEach(t),nCr=r(Hqe," \u2014 "),fJ=n(Hqe,"A",{href:!0});var C$t=s(fJ);sCr=r(C$t,"TFElectraForPreTraining"),C$t.forEach(t),lCr=r(Hqe," (ELECTRA model)"),Hqe.forEach(t),iCr=i(le),MC=n(le,"LI",{});var Uqe=s(MC);s4e=n(Uqe,"STRONG",{});var w$t=s(s4e);dCr=r(w$t,"flaubert"),w$t.forEach(t),cCr=r(Uqe," \u2014 "),gJ=n(Uqe,"A",{href:!0});var A$t=s(gJ);mCr=r(A$t,"TFFlaubertWithLMHeadModel"),A$t.forEach(t),fCr=r(Uqe," (FlauBERT model)"),Uqe.forEach(t),gCr=i(le),EC=n(le,"LI",{});var Jqe=s(EC);l4e=n(Jqe,"STRONG",{});var L$t=s(l4e);hCr=r(L$t,"funnel"),L$t.forEach(t),uCr=r(Jqe," \u2014 "),hJ=n(Jqe,"A",{href:!0});var y$t=s(hJ);pCr=r(y$t,"TFFunnelForPreTraining"),y$t.forEach(t),_Cr=r(Jqe," (Funnel Transformer model)"),Jqe.forEach(t),bCr=i(le),CC=n(le,"LI",{});var Yqe=s(CC);i4e=n(Yqe,"STRONG",{});var x$t=s(i4e);vCr=r(x$t,"gpt2"),x$t.forEach(t),FCr=r(Yqe," \u2014 "),uJ=n(Yqe,"A",{href:!0});var $$t=s(uJ);TCr=r($$t,"TFGPT2LMHeadModel"),$$t.forEach(t),MCr=r(Yqe," (OpenAI GPT-2 model)"),Yqe.forEach(t),ECr=i(le),wC=n(le,"LI",{});var Kqe=s(wC);d4e=n(Kqe,"STRONG",{});var k$t=s(d4e);CCr=r(k$t,"layoutlm"),k$t.forEach(t),wCr=r(Kqe," \u2014 "),pJ=n(Kqe,"A",{href:!0});var S$t=s(pJ);ACr=r(S$t,"TFLayoutLMForMaskedLM"),S$t.forEach(t),LCr=r(Kqe," (LayoutLM model)"),Kqe.forEach(t),yCr=i(le),AC=n(le,"LI",{});var Zqe=s(AC);c4e=n(Zqe,"STRONG",{});var R$t=s(c4e);xCr=r(R$t,"lxmert"),R$t.forEach(t),$Cr=r(Zqe," \u2014 "),_J=n(Zqe,"A",{href:!0});var P$t=s(_J);kCr=r(P$t,"TFLxmertForPreTraining"),P$t.forEach(t),SCr=r(Zqe," (LXMERT model)"),Zqe.forEach(t),RCr=i(le),LC=n(le,"LI",{});var eje=s(LC);m4e=n(eje,"STRONG",{});var B$t=s(m4e);PCr=r(B$t,"mobilebert"),B$t.forEach(t),BCr=r(eje," \u2014 "),bJ=n(eje,"A",{href:!0});var I$t=s(bJ);ICr=r(I$t,"TFMobileBertForPreTraining"),I$t.forEach(t),NCr=r(eje," (MobileBERT model)"),eje.forEach(t),qCr=i(le),yC=n(le,"LI",{});var oje=s(yC);f4e=n(oje,"STRONG",{});var N$t=s(f4e);jCr=r(N$t,"mpnet"),N$t.forEach(t),DCr=r(oje," \u2014 "),vJ=n(oje,"A",{href:!0});var q$t=s(vJ);GCr=r(q$t,"TFMPNetForMaskedLM"),q$t.forEach(t),OCr=r(oje," (MPNet model)"),oje.forEach(t),VCr=i(le),xC=n(le,"LI",{});var rje=s(xC);g4e=n(rje,"STRONG",{});var j$t=s(g4e);XCr=r(j$t,"openai-gpt"),j$t.forEach(t),zCr=r(rje," \u2014 "),FJ=n(rje,"A",{href:!0});var D$t=s(FJ);QCr=r(D$t,"TFOpenAIGPTLMHeadModel"),D$t.forEach(t),WCr=r(rje," (OpenAI GPT model)"),rje.forEach(t),HCr=i(le),$C=n(le,"LI",{});var tje=s($C);h4e=n(tje,"STRONG",{});var G$t=s(h4e);UCr=r(G$t,"roberta"),G$t.forEach(t),JCr=r(tje," \u2014 "),TJ=n(tje,"A",{href:!0});var O$t=s(TJ);YCr=r(O$t,"TFRobertaForMaskedLM"),O$t.forEach(t),KCr=r(tje," (RoBERTa model)"),tje.forEach(t),ZCr=i(le),kC=n(le,"LI",{});var aje=s(kC);u4e=n(aje,"STRONG",{});var V$t=s(u4e);e3r=r(V$t,"t5"),V$t.forEach(t),o3r=r(aje," \u2014 "),MJ=n(aje,"A",{href:!0});var X$t=s(MJ);r3r=r(X$t,"TFT5ForConditionalGeneration"),X$t.forEach(t),t3r=r(aje," (T5 model)"),aje.forEach(t),a3r=i(le),SC=n(le,"LI",{});var nje=s(SC);p4e=n(nje,"STRONG",{});var z$t=s(p4e);n3r=r(z$t,"tapas"),z$t.forEach(t),s3r=r(nje," \u2014 "),EJ=n(nje,"A",{href:!0});var Q$t=s(EJ);l3r=r(Q$t,"TFTapasForMaskedLM"),Q$t.forEach(t),i3r=r(nje," (TAPAS model)"),nje.forEach(t),d3r=i(le),RC=n(le,"LI",{});var sje=s(RC);_4e=n(sje,"STRONG",{});var W$t=s(_4e);c3r=r(W$t,"transfo-xl"),W$t.forEach(t),m3r=r(sje," \u2014 "),CJ=n(sje,"A",{href:!0});var H$t=s(CJ);f3r=r(H$t,"TFTransfoXLLMHeadModel"),H$t.forEach(t),g3r=r(sje," (Transformer-XL model)"),sje.forEach(t),h3r=i(le),PC=n(le,"LI",{});var lje=s(PC);b4e=n(lje,"STRONG",{});var U$t=s(b4e);u3r=r(U$t,"vit_mae"),U$t.forEach(t),p3r=r(lje," \u2014 "),wJ=n(lje,"A",{href:!0});var J$t=s(wJ);_3r=r(J$t,"TFViTMAEForPreTraining"),J$t.forEach(t),b3r=r(lje," (ViTMAE model)"),lje.forEach(t),v3r=i(le),BC=n(le,"LI",{});var ije=s(BC);v4e=n(ije,"STRONG",{});var Y$t=s(v4e);F3r=r(Y$t,"xlm"),Y$t.forEach(t),T3r=r(ije," \u2014 "),AJ=n(ije,"A",{href:!0});var K$t=s(AJ);M3r=r(K$t,"TFXLMWithLMHeadModel"),K$t.forEach(t),E3r=r(ije," (XLM model)"),ije.forEach(t),C3r=i(le),IC=n(le,"LI",{});var dje=s(IC);F4e=n(dje,"STRONG",{});var Z$t=s(F4e);w3r=r(Z$t,"xlm-roberta"),Z$t.forEach(t),A3r=r(dje," \u2014 "),LJ=n(dje,"A",{href:!0});var ekt=s(LJ);L3r=r(ekt,"TFXLMRobertaForMaskedLM"),ekt.forEach(t),y3r=r(dje," (XLM-RoBERTa model)"),dje.forEach(t),x3r=i(le),NC=n(le,"LI",{});var cje=s(NC);T4e=n(cje,"STRONG",{});var okt=s(T4e);$3r=r(okt,"xlnet"),okt.forEach(t),k3r=r(cje," \u2014 "),yJ=n(cje,"A",{href:!0});var rkt=s(yJ);S3r=r(rkt,"TFXLNetLMHeadModel"),rkt.forEach(t),R3r=r(cje," (XLNet model)"),cje.forEach(t),le.forEach(t),P3r=i(kl),T(qC.$$.fragment,kl),kl.forEach(t),$l.forEach(t),ZXe=i(m),mc=n(m,"H2",{class:!0});var lWe=s(mc);jC=n(lWe,"A",{id:!0,class:!0,href:!0});var tkt=s(jC);M4e=n(tkt,"SPAN",{});var akt=s(M4e);T(K9.$$.fragment,akt),akt.forEach(t),tkt.forEach(t),B3r=i(lWe),E4e=n(lWe,"SPAN",{});var nkt=s(E4e);I3r=r(nkt,"TFAutoModelForCausalLM"),nkt.forEach(t),lWe.forEach(t),eze=i(m),rr=n(m,"DIV",{class:!0});var Sl=s(rr);T(Z9.$$.fragment,Sl),N3r=i(Sl),fc=n(Sl,"P",{});var Cte=s(fc);q3r=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),xJ=n(Cte,"A",{href:!0});var skt=s(xJ);j3r=r(skt,"from_pretrained()"),skt.forEach(t),D3r=r(Cte," class method or the "),$J=n(Cte,"A",{href:!0});var lkt=s($J);G3r=r(lkt,"from_config()"),lkt.forEach(t),O3r=r(Cte,` class
method.`),Cte.forEach(t),V3r=i(Sl),ex=n(Sl,"P",{});var iWe=s(ex);X3r=r(iWe,"This class cannot be instantiated directly using "),C4e=n(iWe,"CODE",{});var ikt=s(C4e);z3r=r(ikt,"__init__()"),ikt.forEach(t),Q3r=r(iWe," (throws an error)."),iWe.forEach(t),W3r=i(Sl),Pt=n(Sl,"DIV",{class:!0});var aL=s(Pt);T(ox.$$.fragment,aL),H3r=i(aL),w4e=n(aL,"P",{});var dkt=s(w4e);U3r=r(dkt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dkt.forEach(t),J3r=i(aL),gc=n(aL,"P",{});var wte=s(gc);Y3r=r(wte,`Note:
Loading a model from its configuration file does `),A4e=n(wte,"STRONG",{});var ckt=s(A4e);K3r=r(ckt,"not"),ckt.forEach(t),Z3r=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=n(wte,"A",{href:!0});var mkt=s(kJ);e5r=r(mkt,"from_pretrained()"),mkt.forEach(t),o5r=r(wte," to load the model weights."),wte.forEach(t),r5r=i(aL),T(DC.$$.fragment,aL),aL.forEach(t),t5r=i(Sl),kr=n(Sl,"DIV",{class:!0});var Rl=s(kr);T(rx.$$.fragment,Rl),a5r=i(Rl),L4e=n(Rl,"P",{});var fkt=s(L4e);n5r=r(fkt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fkt.forEach(t),s5r=i(Rl),dn=n(Rl,"P",{});var nL=s(dn);l5r=r(nL,"The model class to instantiate is selected based on the "),y4e=n(nL,"CODE",{});var gkt=s(y4e);i5r=r(gkt,"model_type"),gkt.forEach(t),d5r=r(nL,` property of the config object (either
passed as an argument or loaded from `),x4e=n(nL,"CODE",{});var hkt=s(x4e);c5r=r(hkt,"pretrained_model_name_or_path"),hkt.forEach(t),m5r=r(nL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$4e=n(nL,"CODE",{});var ukt=s($4e);f5r=r(ukt,"pretrained_model_name_or_path"),ukt.forEach(t),g5r=r(nL,":"),nL.forEach(t),h5r=i(Rl),Me=n(Rl,"UL",{});var Ce=s(Me);GC=n(Ce,"LI",{});var mje=s(GC);k4e=n(mje,"STRONG",{});var pkt=s(k4e);u5r=r(pkt,"bert"),pkt.forEach(t),p5r=r(mje," \u2014 "),SJ=n(mje,"A",{href:!0});var _kt=s(SJ);_5r=r(_kt,"TFBertLMHeadModel"),_kt.forEach(t),b5r=r(mje," (BERT model)"),mje.forEach(t),v5r=i(Ce),OC=n(Ce,"LI",{});var fje=s(OC);S4e=n(fje,"STRONG",{});var bkt=s(S4e);F5r=r(bkt,"camembert"),bkt.forEach(t),T5r=r(fje," \u2014 "),RJ=n(fje,"A",{href:!0});var vkt=s(RJ);M5r=r(vkt,"TFCamembertForCausalLM"),vkt.forEach(t),E5r=r(fje," (CamemBERT model)"),fje.forEach(t),C5r=i(Ce),VC=n(Ce,"LI",{});var gje=s(VC);R4e=n(gje,"STRONG",{});var Fkt=s(R4e);w5r=r(Fkt,"ctrl"),Fkt.forEach(t),A5r=r(gje," \u2014 "),PJ=n(gje,"A",{href:!0});var Tkt=s(PJ);L5r=r(Tkt,"TFCTRLLMHeadModel"),Tkt.forEach(t),y5r=r(gje," (CTRL model)"),gje.forEach(t),x5r=i(Ce),XC=n(Ce,"LI",{});var hje=s(XC);P4e=n(hje,"STRONG",{});var Mkt=s(P4e);$5r=r(Mkt,"gpt2"),Mkt.forEach(t),k5r=r(hje," \u2014 "),BJ=n(hje,"A",{href:!0});var Ekt=s(BJ);S5r=r(Ekt,"TFGPT2LMHeadModel"),Ekt.forEach(t),R5r=r(hje," (OpenAI GPT-2 model)"),hje.forEach(t),P5r=i(Ce),zC=n(Ce,"LI",{});var uje=s(zC);B4e=n(uje,"STRONG",{});var Ckt=s(B4e);B5r=r(Ckt,"gptj"),Ckt.forEach(t),I5r=r(uje," \u2014 "),IJ=n(uje,"A",{href:!0});var wkt=s(IJ);N5r=r(wkt,"TFGPTJForCausalLM"),wkt.forEach(t),q5r=r(uje," (GPT-J model)"),uje.forEach(t),j5r=i(Ce),QC=n(Ce,"LI",{});var pje=s(QC);I4e=n(pje,"STRONG",{});var Akt=s(I4e);D5r=r(Akt,"openai-gpt"),Akt.forEach(t),G5r=r(pje," \u2014 "),NJ=n(pje,"A",{href:!0});var Lkt=s(NJ);O5r=r(Lkt,"TFOpenAIGPTLMHeadModel"),Lkt.forEach(t),V5r=r(pje," (OpenAI GPT model)"),pje.forEach(t),X5r=i(Ce),WC=n(Ce,"LI",{});var _je=s(WC);N4e=n(_je,"STRONG",{});var ykt=s(N4e);z5r=r(ykt,"opt"),ykt.forEach(t),Q5r=r(_je," \u2014 "),qJ=n(_je,"A",{href:!0});var xkt=s(qJ);W5r=r(xkt,"TFOPTForCausalLM"),xkt.forEach(t),H5r=r(_je," (OPT model)"),_je.forEach(t),U5r=i(Ce),HC=n(Ce,"LI",{});var bje=s(HC);q4e=n(bje,"STRONG",{});var $kt=s(q4e);J5r=r($kt,"rembert"),$kt.forEach(t),Y5r=r(bje," \u2014 "),jJ=n(bje,"A",{href:!0});var kkt=s(jJ);K5r=r(kkt,"TFRemBertForCausalLM"),kkt.forEach(t),Z5r=r(bje," (RemBERT model)"),bje.forEach(t),e0r=i(Ce),UC=n(Ce,"LI",{});var vje=s(UC);j4e=n(vje,"STRONG",{});var Skt=s(j4e);o0r=r(Skt,"roberta"),Skt.forEach(t),r0r=r(vje," \u2014 "),DJ=n(vje,"A",{href:!0});var Rkt=s(DJ);t0r=r(Rkt,"TFRobertaForCausalLM"),Rkt.forEach(t),a0r=r(vje," (RoBERTa model)"),vje.forEach(t),n0r=i(Ce),JC=n(Ce,"LI",{});var Fje=s(JC);D4e=n(Fje,"STRONG",{});var Pkt=s(D4e);s0r=r(Pkt,"roformer"),Pkt.forEach(t),l0r=r(Fje," \u2014 "),GJ=n(Fje,"A",{href:!0});var Bkt=s(GJ);i0r=r(Bkt,"TFRoFormerForCausalLM"),Bkt.forEach(t),d0r=r(Fje," (RoFormer model)"),Fje.forEach(t),c0r=i(Ce),YC=n(Ce,"LI",{});var Tje=s(YC);G4e=n(Tje,"STRONG",{});var Ikt=s(G4e);m0r=r(Ikt,"transfo-xl"),Ikt.forEach(t),f0r=r(Tje," \u2014 "),OJ=n(Tje,"A",{href:!0});var Nkt=s(OJ);g0r=r(Nkt,"TFTransfoXLLMHeadModel"),Nkt.forEach(t),h0r=r(Tje," (Transformer-XL model)"),Tje.forEach(t),u0r=i(Ce),KC=n(Ce,"LI",{});var Mje=s(KC);O4e=n(Mje,"STRONG",{});var qkt=s(O4e);p0r=r(qkt,"xlm"),qkt.forEach(t),_0r=r(Mje," \u2014 "),VJ=n(Mje,"A",{href:!0});var jkt=s(VJ);b0r=r(jkt,"TFXLMWithLMHeadModel"),jkt.forEach(t),v0r=r(Mje," (XLM model)"),Mje.forEach(t),F0r=i(Ce),ZC=n(Ce,"LI",{});var Eje=s(ZC);V4e=n(Eje,"STRONG",{});var Dkt=s(V4e);T0r=r(Dkt,"xlnet"),Dkt.forEach(t),M0r=r(Eje," \u2014 "),XJ=n(Eje,"A",{href:!0});var Gkt=s(XJ);E0r=r(Gkt,"TFXLNetLMHeadModel"),Gkt.forEach(t),C0r=r(Eje," (XLNet model)"),Eje.forEach(t),Ce.forEach(t),w0r=i(Rl),T(e3.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),oze=i(m),hc=n(m,"H2",{class:!0});var dWe=s(hc);o3=n(dWe,"A",{id:!0,class:!0,href:!0});var Okt=s(o3);X4e=n(Okt,"SPAN",{});var Vkt=s(X4e);T(tx.$$.fragment,Vkt),Vkt.forEach(t),Okt.forEach(t),A0r=i(dWe),z4e=n(dWe,"SPAN",{});var Xkt=s(z4e);L0r=r(Xkt,"TFAutoModelForImageClassification"),Xkt.forEach(t),dWe.forEach(t),rze=i(m),tr=n(m,"DIV",{class:!0});var Pl=s(tr);T(ax.$$.fragment,Pl),y0r=i(Pl),uc=n(Pl,"P",{});var Ate=s(uc);x0r=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zJ=n(Ate,"A",{href:!0});var zkt=s(zJ);$0r=r(zkt,"from_pretrained()"),zkt.forEach(t),k0r=r(Ate," class method or the "),QJ=n(Ate,"A",{href:!0});var Qkt=s(QJ);S0r=r(Qkt,"from_config()"),Qkt.forEach(t),R0r=r(Ate,` class
method.`),Ate.forEach(t),P0r=i(Pl),nx=n(Pl,"P",{});var cWe=s(nx);B0r=r(cWe,"This class cannot be instantiated directly using "),Q4e=n(cWe,"CODE",{});var Wkt=s(Q4e);I0r=r(Wkt,"__init__()"),Wkt.forEach(t),N0r=r(cWe," (throws an error)."),cWe.forEach(t),q0r=i(Pl),Bt=n(Pl,"DIV",{class:!0});var sL=s(Bt);T(sx.$$.fragment,sL),j0r=i(sL),W4e=n(sL,"P",{});var Hkt=s(W4e);D0r=r(Hkt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Hkt.forEach(t),G0r=i(sL),pc=n(sL,"P",{});var Lte=s(pc);O0r=r(Lte,`Note:
Loading a model from its configuration file does `),H4e=n(Lte,"STRONG",{});var Ukt=s(H4e);V0r=r(Ukt,"not"),Ukt.forEach(t),X0r=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=n(Lte,"A",{href:!0});var Jkt=s(WJ);z0r=r(Jkt,"from_pretrained()"),Jkt.forEach(t),Q0r=r(Lte," to load the model weights."),Lte.forEach(t),W0r=i(sL),T(r3.$$.fragment,sL),sL.forEach(t),H0r=i(Pl),Sr=n(Pl,"DIV",{class:!0});var Bl=s(Sr);T(lx.$$.fragment,Bl),U0r=i(Bl),U4e=n(Bl,"P",{});var Ykt=s(U4e);J0r=r(Ykt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ykt.forEach(t),Y0r=i(Bl),cn=n(Bl,"P",{});var lL=s(cn);K0r=r(lL,"The model class to instantiate is selected based on the "),J4e=n(lL,"CODE",{});var Kkt=s(J4e);Z0r=r(Kkt,"model_type"),Kkt.forEach(t),ewr=r(lL,` property of the config object (either
passed as an argument or loaded from `),Y4e=n(lL,"CODE",{});var Zkt=s(Y4e);owr=r(Zkt,"pretrained_model_name_or_path"),Zkt.forEach(t),rwr=r(lL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K4e=n(lL,"CODE",{});var eSt=s(K4e);twr=r(eSt,"pretrained_model_name_or_path"),eSt.forEach(t),awr=r(lL,":"),lL.forEach(t),nwr=i(Bl),ar=n(Bl,"UL",{});var ka=s(ar);t3=n(ka,"LI",{});var Cje=s(t3);Z4e=n(Cje,"STRONG",{});var oSt=s(Z4e);swr=r(oSt,"convnext"),oSt.forEach(t),lwr=r(Cje," \u2014 "),HJ=n(Cje,"A",{href:!0});var rSt=s(HJ);iwr=r(rSt,"TFConvNextForImageClassification"),rSt.forEach(t),dwr=r(Cje," (ConvNeXT model)"),Cje.forEach(t),cwr=i(ka),a3=n(ka,"LI",{});var wje=s(a3);eEe=n(wje,"STRONG",{});var tSt=s(eEe);mwr=r(tSt,"data2vec-vision"),tSt.forEach(t),fwr=r(wje," \u2014 "),UJ=n(wje,"A",{href:!0});var aSt=s(UJ);gwr=r(aSt,"TFData2VecVisionForImageClassification"),aSt.forEach(t),hwr=r(wje," (Data2VecVision model)"),wje.forEach(t),uwr=i(ka),n3=n(ka,"LI",{});var Aje=s(n3);oEe=n(Aje,"STRONG",{});var nSt=s(oEe);pwr=r(nSt,"regnet"),nSt.forEach(t),_wr=r(Aje," \u2014 "),JJ=n(Aje,"A",{href:!0});var sSt=s(JJ);bwr=r(sSt,"TFRegNetForImageClassification"),sSt.forEach(t),vwr=r(Aje," (RegNet model)"),Aje.forEach(t),Fwr=i(ka),s3=n(ka,"LI",{});var Lje=s(s3);rEe=n(Lje,"STRONG",{});var lSt=s(rEe);Twr=r(lSt,"resnet"),lSt.forEach(t),Mwr=r(Lje," \u2014 "),YJ=n(Lje,"A",{href:!0});var iSt=s(YJ);Ewr=r(iSt,"TFResNetForImageClassification"),iSt.forEach(t),Cwr=r(Lje," (ResNet model)"),Lje.forEach(t),wwr=i(ka),l3=n(ka,"LI",{});var yje=s(l3);tEe=n(yje,"STRONG",{});var dSt=s(tEe);Awr=r(dSt,"swin"),dSt.forEach(t),Lwr=r(yje," \u2014 "),KJ=n(yje,"A",{href:!0});var cSt=s(KJ);ywr=r(cSt,"TFSwinForImageClassification"),cSt.forEach(t),xwr=r(yje," (Swin Transformer model)"),yje.forEach(t),$wr=i(ka),i3=n(ka,"LI",{});var xje=s(i3);aEe=n(xje,"STRONG",{});var mSt=s(aEe);kwr=r(mSt,"vit"),mSt.forEach(t),Swr=r(xje," \u2014 "),ZJ=n(xje,"A",{href:!0});var fSt=s(ZJ);Rwr=r(fSt,"TFViTForImageClassification"),fSt.forEach(t),Pwr=r(xje," (ViT model)"),xje.forEach(t),ka.forEach(t),Bwr=i(Bl),T(d3.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),tze=i(m),_c=n(m,"H2",{class:!0});var mWe=s(_c);c3=n(mWe,"A",{id:!0,class:!0,href:!0});var gSt=s(c3);nEe=n(gSt,"SPAN",{});var hSt=s(nEe);T(ix.$$.fragment,hSt),hSt.forEach(t),gSt.forEach(t),Iwr=i(mWe),sEe=n(mWe,"SPAN",{});var uSt=s(sEe);Nwr=r(uSt,"TFAutoModelForMaskedLM"),uSt.forEach(t),mWe.forEach(t),aze=i(m),nr=n(m,"DIV",{class:!0});var Il=s(nr);T(dx.$$.fragment,Il),qwr=i(Il),bc=n(Il,"P",{});var yte=s(bc);jwr=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eY=n(yte,"A",{href:!0});var pSt=s(eY);Dwr=r(pSt,"from_pretrained()"),pSt.forEach(t),Gwr=r(yte," class method or the "),oY=n(yte,"A",{href:!0});var _St=s(oY);Owr=r(_St,"from_config()"),_St.forEach(t),Vwr=r(yte,` class
method.`),yte.forEach(t),Xwr=i(Il),cx=n(Il,"P",{});var fWe=s(cx);zwr=r(fWe,"This class cannot be instantiated directly using "),lEe=n(fWe,"CODE",{});var bSt=s(lEe);Qwr=r(bSt,"__init__()"),bSt.forEach(t),Wwr=r(fWe," (throws an error)."),fWe.forEach(t),Hwr=i(Il),It=n(Il,"DIV",{class:!0});var iL=s(It);T(mx.$$.fragment,iL),Uwr=i(iL),iEe=n(iL,"P",{});var vSt=s(iEe);Jwr=r(vSt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),vSt.forEach(t),Ywr=i(iL),vc=n(iL,"P",{});var xte=s(vc);Kwr=r(xte,`Note:
Loading a model from its configuration file does `),dEe=n(xte,"STRONG",{});var FSt=s(dEe);Zwr=r(FSt,"not"),FSt.forEach(t),eAr=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=n(xte,"A",{href:!0});var TSt=s(rY);oAr=r(TSt,"from_pretrained()"),TSt.forEach(t),rAr=r(xte," to load the model weights."),xte.forEach(t),tAr=i(iL),T(m3.$$.fragment,iL),iL.forEach(t),aAr=i(Il),Rr=n(Il,"DIV",{class:!0});var Nl=s(Rr);T(fx.$$.fragment,Nl),nAr=i(Nl),cEe=n(Nl,"P",{});var MSt=s(cEe);sAr=r(MSt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),MSt.forEach(t),lAr=i(Nl),mn=n(Nl,"P",{});var dL=s(mn);iAr=r(dL,"The model class to instantiate is selected based on the "),mEe=n(dL,"CODE",{});var ESt=s(mEe);dAr=r(ESt,"model_type"),ESt.forEach(t),cAr=r(dL,` property of the config object (either
passed as an argument or loaded from `),fEe=n(dL,"CODE",{});var CSt=s(fEe);mAr=r(CSt,"pretrained_model_name_or_path"),CSt.forEach(t),fAr=r(dL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gEe=n(dL,"CODE",{});var wSt=s(gEe);gAr=r(wSt,"pretrained_model_name_or_path"),wSt.forEach(t),hAr=r(dL,":"),dL.forEach(t),uAr=i(Nl),ie=n(Nl,"UL",{});var me=s(ie);f3=n(me,"LI",{});var $je=s(f3);hEe=n($je,"STRONG",{});var ASt=s(hEe);pAr=r(ASt,"albert"),ASt.forEach(t),_Ar=r($je," \u2014 "),tY=n($je,"A",{href:!0});var LSt=s(tY);bAr=r(LSt,"TFAlbertForMaskedLM"),LSt.forEach(t),vAr=r($je," (ALBERT model)"),$je.forEach(t),FAr=i(me),g3=n(me,"LI",{});var kje=s(g3);uEe=n(kje,"STRONG",{});var ySt=s(uEe);TAr=r(ySt,"bert"),ySt.forEach(t),MAr=r(kje," \u2014 "),aY=n(kje,"A",{href:!0});var xSt=s(aY);EAr=r(xSt,"TFBertForMaskedLM"),xSt.forEach(t),CAr=r(kje," (BERT model)"),kje.forEach(t),wAr=i(me),h3=n(me,"LI",{});var Sje=s(h3);pEe=n(Sje,"STRONG",{});var $St=s(pEe);AAr=r($St,"camembert"),$St.forEach(t),LAr=r(Sje," \u2014 "),nY=n(Sje,"A",{href:!0});var kSt=s(nY);yAr=r(kSt,"TFCamembertForMaskedLM"),kSt.forEach(t),xAr=r(Sje," (CamemBERT model)"),Sje.forEach(t),$Ar=i(me),u3=n(me,"LI",{});var Rje=s(u3);_Ee=n(Rje,"STRONG",{});var SSt=s(_Ee);kAr=r(SSt,"convbert"),SSt.forEach(t),SAr=r(Rje," \u2014 "),sY=n(Rje,"A",{href:!0});var RSt=s(sY);RAr=r(RSt,"TFConvBertForMaskedLM"),RSt.forEach(t),PAr=r(Rje," (ConvBERT model)"),Rje.forEach(t),BAr=i(me),p3=n(me,"LI",{});var Pje=s(p3);bEe=n(Pje,"STRONG",{});var PSt=s(bEe);IAr=r(PSt,"deberta"),PSt.forEach(t),NAr=r(Pje," \u2014 "),lY=n(Pje,"A",{href:!0});var BSt=s(lY);qAr=r(BSt,"TFDebertaForMaskedLM"),BSt.forEach(t),jAr=r(Pje," (DeBERTa model)"),Pje.forEach(t),DAr=i(me),_3=n(me,"LI",{});var Bje=s(_3);vEe=n(Bje,"STRONG",{});var ISt=s(vEe);GAr=r(ISt,"deberta-v2"),ISt.forEach(t),OAr=r(Bje," \u2014 "),iY=n(Bje,"A",{href:!0});var NSt=s(iY);VAr=r(NSt,"TFDebertaV2ForMaskedLM"),NSt.forEach(t),XAr=r(Bje," (DeBERTa-v2 model)"),Bje.forEach(t),zAr=i(me),b3=n(me,"LI",{});var Ije=s(b3);FEe=n(Ije,"STRONG",{});var qSt=s(FEe);QAr=r(qSt,"distilbert"),qSt.forEach(t),WAr=r(Ije," \u2014 "),dY=n(Ije,"A",{href:!0});var jSt=s(dY);HAr=r(jSt,"TFDistilBertForMaskedLM"),jSt.forEach(t),UAr=r(Ije," (DistilBERT model)"),Ije.forEach(t),JAr=i(me),v3=n(me,"LI",{});var Nje=s(v3);TEe=n(Nje,"STRONG",{});var DSt=s(TEe);YAr=r(DSt,"electra"),DSt.forEach(t),KAr=r(Nje," \u2014 "),cY=n(Nje,"A",{href:!0});var GSt=s(cY);ZAr=r(GSt,"TFElectraForMaskedLM"),GSt.forEach(t),e6r=r(Nje," (ELECTRA model)"),Nje.forEach(t),o6r=i(me),F3=n(me,"LI",{});var qje=s(F3);MEe=n(qje,"STRONG",{});var OSt=s(MEe);r6r=r(OSt,"flaubert"),OSt.forEach(t),t6r=r(qje," \u2014 "),mY=n(qje,"A",{href:!0});var VSt=s(mY);a6r=r(VSt,"TFFlaubertWithLMHeadModel"),VSt.forEach(t),n6r=r(qje," (FlauBERT model)"),qje.forEach(t),s6r=i(me),T3=n(me,"LI",{});var jje=s(T3);EEe=n(jje,"STRONG",{});var XSt=s(EEe);l6r=r(XSt,"funnel"),XSt.forEach(t),i6r=r(jje," \u2014 "),fY=n(jje,"A",{href:!0});var zSt=s(fY);d6r=r(zSt,"TFFunnelForMaskedLM"),zSt.forEach(t),c6r=r(jje," (Funnel Transformer model)"),jje.forEach(t),m6r=i(me),M3=n(me,"LI",{});var Dje=s(M3);CEe=n(Dje,"STRONG",{});var QSt=s(CEe);f6r=r(QSt,"layoutlm"),QSt.forEach(t),g6r=r(Dje," \u2014 "),gY=n(Dje,"A",{href:!0});var WSt=s(gY);h6r=r(WSt,"TFLayoutLMForMaskedLM"),WSt.forEach(t),u6r=r(Dje," (LayoutLM model)"),Dje.forEach(t),p6r=i(me),E3=n(me,"LI",{});var Gje=s(E3);wEe=n(Gje,"STRONG",{});var HSt=s(wEe);_6r=r(HSt,"longformer"),HSt.forEach(t),b6r=r(Gje," \u2014 "),hY=n(Gje,"A",{href:!0});var USt=s(hY);v6r=r(USt,"TFLongformerForMaskedLM"),USt.forEach(t),F6r=r(Gje," (Longformer model)"),Gje.forEach(t),T6r=i(me),C3=n(me,"LI",{});var Oje=s(C3);AEe=n(Oje,"STRONG",{});var JSt=s(AEe);M6r=r(JSt,"mobilebert"),JSt.forEach(t),E6r=r(Oje," \u2014 "),uY=n(Oje,"A",{href:!0});var YSt=s(uY);C6r=r(YSt,"TFMobileBertForMaskedLM"),YSt.forEach(t),w6r=r(Oje," (MobileBERT model)"),Oje.forEach(t),A6r=i(me),w3=n(me,"LI",{});var Vje=s(w3);LEe=n(Vje,"STRONG",{});var KSt=s(LEe);L6r=r(KSt,"mpnet"),KSt.forEach(t),y6r=r(Vje," \u2014 "),pY=n(Vje,"A",{href:!0});var ZSt=s(pY);x6r=r(ZSt,"TFMPNetForMaskedLM"),ZSt.forEach(t),$6r=r(Vje," (MPNet model)"),Vje.forEach(t),k6r=i(me),A3=n(me,"LI",{});var Xje=s(A3);yEe=n(Xje,"STRONG",{});var eRt=s(yEe);S6r=r(eRt,"rembert"),eRt.forEach(t),R6r=r(Xje," \u2014 "),_Y=n(Xje,"A",{href:!0});var oRt=s(_Y);P6r=r(oRt,"TFRemBertForMaskedLM"),oRt.forEach(t),B6r=r(Xje," (RemBERT model)"),Xje.forEach(t),I6r=i(me),L3=n(me,"LI",{});var zje=s(L3);xEe=n(zje,"STRONG",{});var rRt=s(xEe);N6r=r(rRt,"roberta"),rRt.forEach(t),q6r=r(zje," \u2014 "),bY=n(zje,"A",{href:!0});var tRt=s(bY);j6r=r(tRt,"TFRobertaForMaskedLM"),tRt.forEach(t),D6r=r(zje," (RoBERTa model)"),zje.forEach(t),G6r=i(me),y3=n(me,"LI",{});var Qje=s(y3);$Ee=n(Qje,"STRONG",{});var aRt=s($Ee);O6r=r(aRt,"roformer"),aRt.forEach(t),V6r=r(Qje," \u2014 "),vY=n(Qje,"A",{href:!0});var nRt=s(vY);X6r=r(nRt,"TFRoFormerForMaskedLM"),nRt.forEach(t),z6r=r(Qje," (RoFormer model)"),Qje.forEach(t),Q6r=i(me),x3=n(me,"LI",{});var Wje=s(x3);kEe=n(Wje,"STRONG",{});var sRt=s(kEe);W6r=r(sRt,"tapas"),sRt.forEach(t),H6r=r(Wje," \u2014 "),FY=n(Wje,"A",{href:!0});var lRt=s(FY);U6r=r(lRt,"TFTapasForMaskedLM"),lRt.forEach(t),J6r=r(Wje," (TAPAS model)"),Wje.forEach(t),Y6r=i(me),$3=n(me,"LI",{});var Hje=s($3);SEe=n(Hje,"STRONG",{});var iRt=s(SEe);K6r=r(iRt,"xlm"),iRt.forEach(t),Z6r=r(Hje," \u2014 "),TY=n(Hje,"A",{href:!0});var dRt=s(TY);e7r=r(dRt,"TFXLMWithLMHeadModel"),dRt.forEach(t),o7r=r(Hje," (XLM model)"),Hje.forEach(t),r7r=i(me),k3=n(me,"LI",{});var Uje=s(k3);REe=n(Uje,"STRONG",{});var cRt=s(REe);t7r=r(cRt,"xlm-roberta"),cRt.forEach(t),a7r=r(Uje," \u2014 "),MY=n(Uje,"A",{href:!0});var mRt=s(MY);n7r=r(mRt,"TFXLMRobertaForMaskedLM"),mRt.forEach(t),s7r=r(Uje," (XLM-RoBERTa model)"),Uje.forEach(t),me.forEach(t),l7r=i(Nl),T(S3.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),nze=i(m),Fc=n(m,"H2",{class:!0});var gWe=s(Fc);R3=n(gWe,"A",{id:!0,class:!0,href:!0});var fRt=s(R3);PEe=n(fRt,"SPAN",{});var gRt=s(PEe);T(gx.$$.fragment,gRt),gRt.forEach(t),fRt.forEach(t),i7r=i(gWe),BEe=n(gWe,"SPAN",{});var hRt=s(BEe);d7r=r(hRt,"TFAutoModelForSeq2SeqLM"),hRt.forEach(t),gWe.forEach(t),sze=i(m),sr=n(m,"DIV",{class:!0});var ql=s(sr);T(hx.$$.fragment,ql),c7r=i(ql),Tc=n(ql,"P",{});var $te=s(Tc);m7r=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EY=n($te,"A",{href:!0});var uRt=s(EY);f7r=r(uRt,"from_pretrained()"),uRt.forEach(t),g7r=r($te," class method or the "),CY=n($te,"A",{href:!0});var pRt=s(CY);h7r=r(pRt,"from_config()"),pRt.forEach(t),u7r=r($te,` class
method.`),$te.forEach(t),p7r=i(ql),ux=n(ql,"P",{});var hWe=s(ux);_7r=r(hWe,"This class cannot be instantiated directly using "),IEe=n(hWe,"CODE",{});var _Rt=s(IEe);b7r=r(_Rt,"__init__()"),_Rt.forEach(t),v7r=r(hWe," (throws an error)."),hWe.forEach(t),F7r=i(ql),Nt=n(ql,"DIV",{class:!0});var cL=s(Nt);T(px.$$.fragment,cL),T7r=i(cL),NEe=n(cL,"P",{});var bRt=s(NEe);M7r=r(bRt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),bRt.forEach(t),E7r=i(cL),Mc=n(cL,"P",{});var kte=s(Mc);C7r=r(kte,`Note:
Loading a model from its configuration file does `),qEe=n(kte,"STRONG",{});var vRt=s(qEe);w7r=r(vRt,"not"),vRt.forEach(t),A7r=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=n(kte,"A",{href:!0});var FRt=s(wY);L7r=r(FRt,"from_pretrained()"),FRt.forEach(t),y7r=r(kte," to load the model weights."),kte.forEach(t),x7r=i(cL),T(P3.$$.fragment,cL),cL.forEach(t),$7r=i(ql),Pr=n(ql,"DIV",{class:!0});var jl=s(Pr);T(_x.$$.fragment,jl),k7r=i(jl),jEe=n(jl,"P",{});var TRt=s(jEe);S7r=r(TRt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),TRt.forEach(t),R7r=i(jl),fn=n(jl,"P",{});var mL=s(fn);P7r=r(mL,"The model class to instantiate is selected based on the "),DEe=n(mL,"CODE",{});var MRt=s(DEe);B7r=r(MRt,"model_type"),MRt.forEach(t),I7r=r(mL,` property of the config object (either
passed as an argument or loaded from `),GEe=n(mL,"CODE",{});var ERt=s(GEe);N7r=r(ERt,"pretrained_model_name_or_path"),ERt.forEach(t),q7r=r(mL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OEe=n(mL,"CODE",{});var CRt=s(OEe);j7r=r(CRt,"pretrained_model_name_or_path"),CRt.forEach(t),D7r=r(mL,":"),mL.forEach(t),G7r=i(jl),ye=n(jl,"UL",{});var Ie=s(ye);B3=n(Ie,"LI",{});var Jje=s(B3);VEe=n(Jje,"STRONG",{});var wRt=s(VEe);O7r=r(wRt,"bart"),wRt.forEach(t),V7r=r(Jje," \u2014 "),AY=n(Jje,"A",{href:!0});var ARt=s(AY);X7r=r(ARt,"TFBartForConditionalGeneration"),ARt.forEach(t),z7r=r(Jje," (BART model)"),Jje.forEach(t),Q7r=i(Ie),I3=n(Ie,"LI",{});var Yje=s(I3);XEe=n(Yje,"STRONG",{});var LRt=s(XEe);W7r=r(LRt,"blenderbot"),LRt.forEach(t),H7r=r(Yje," \u2014 "),LY=n(Yje,"A",{href:!0});var yRt=s(LY);U7r=r(yRt,"TFBlenderbotForConditionalGeneration"),yRt.forEach(t),J7r=r(Yje," (Blenderbot model)"),Yje.forEach(t),Y7r=i(Ie),N3=n(Ie,"LI",{});var Kje=s(N3);zEe=n(Kje,"STRONG",{});var xRt=s(zEe);K7r=r(xRt,"blenderbot-small"),xRt.forEach(t),Z7r=r(Kje," \u2014 "),yY=n(Kje,"A",{href:!0});var $Rt=s(yY);eLr=r($Rt,"TFBlenderbotSmallForConditionalGeneration"),$Rt.forEach(t),oLr=r(Kje," (BlenderbotSmall model)"),Kje.forEach(t),rLr=i(Ie),q3=n(Ie,"LI",{});var Zje=s(q3);QEe=n(Zje,"STRONG",{});var kRt=s(QEe);tLr=r(kRt,"encoder-decoder"),kRt.forEach(t),aLr=r(Zje," \u2014 "),xY=n(Zje,"A",{href:!0});var SRt=s(xY);nLr=r(SRt,"TFEncoderDecoderModel"),SRt.forEach(t),sLr=r(Zje," (Encoder decoder model)"),Zje.forEach(t),lLr=i(Ie),j3=n(Ie,"LI",{});var eDe=s(j3);WEe=n(eDe,"STRONG",{});var RRt=s(WEe);iLr=r(RRt,"led"),RRt.forEach(t),dLr=r(eDe," \u2014 "),$Y=n(eDe,"A",{href:!0});var PRt=s($Y);cLr=r(PRt,"TFLEDForConditionalGeneration"),PRt.forEach(t),mLr=r(eDe," (LED model)"),eDe.forEach(t),fLr=i(Ie),D3=n(Ie,"LI",{});var oDe=s(D3);HEe=n(oDe,"STRONG",{});var BRt=s(HEe);gLr=r(BRt,"marian"),BRt.forEach(t),hLr=r(oDe," \u2014 "),kY=n(oDe,"A",{href:!0});var IRt=s(kY);uLr=r(IRt,"TFMarianMTModel"),IRt.forEach(t),pLr=r(oDe," (Marian model)"),oDe.forEach(t),_Lr=i(Ie),G3=n(Ie,"LI",{});var rDe=s(G3);UEe=n(rDe,"STRONG",{});var NRt=s(UEe);bLr=r(NRt,"mbart"),NRt.forEach(t),vLr=r(rDe," \u2014 "),SY=n(rDe,"A",{href:!0});var qRt=s(SY);FLr=r(qRt,"TFMBartForConditionalGeneration"),qRt.forEach(t),TLr=r(rDe," (mBART model)"),rDe.forEach(t),MLr=i(Ie),O3=n(Ie,"LI",{});var tDe=s(O3);JEe=n(tDe,"STRONG",{});var jRt=s(JEe);ELr=r(jRt,"mt5"),jRt.forEach(t),CLr=r(tDe," \u2014 "),RY=n(tDe,"A",{href:!0});var DRt=s(RY);wLr=r(DRt,"TFMT5ForConditionalGeneration"),DRt.forEach(t),ALr=r(tDe," (MT5 model)"),tDe.forEach(t),LLr=i(Ie),V3=n(Ie,"LI",{});var aDe=s(V3);YEe=n(aDe,"STRONG",{});var GRt=s(YEe);yLr=r(GRt,"pegasus"),GRt.forEach(t),xLr=r(aDe," \u2014 "),PY=n(aDe,"A",{href:!0});var ORt=s(PY);$Lr=r(ORt,"TFPegasusForConditionalGeneration"),ORt.forEach(t),kLr=r(aDe," (Pegasus model)"),aDe.forEach(t),SLr=i(Ie),X3=n(Ie,"LI",{});var nDe=s(X3);KEe=n(nDe,"STRONG",{});var VRt=s(KEe);RLr=r(VRt,"t5"),VRt.forEach(t),PLr=r(nDe," \u2014 "),BY=n(nDe,"A",{href:!0});var XRt=s(BY);BLr=r(XRt,"TFT5ForConditionalGeneration"),XRt.forEach(t),ILr=r(nDe," (T5 model)"),nDe.forEach(t),Ie.forEach(t),NLr=i(jl),T(z3.$$.fragment,jl),jl.forEach(t),ql.forEach(t),lze=i(m),Ec=n(m,"H2",{class:!0});var uWe=s(Ec);Q3=n(uWe,"A",{id:!0,class:!0,href:!0});var zRt=s(Q3);ZEe=n(zRt,"SPAN",{});var QRt=s(ZEe);T(bx.$$.fragment,QRt),QRt.forEach(t),zRt.forEach(t),qLr=i(uWe),eCe=n(uWe,"SPAN",{});var WRt=s(eCe);jLr=r(WRt,"TFAutoModelForSequenceClassification"),WRt.forEach(t),uWe.forEach(t),ize=i(m),lr=n(m,"DIV",{class:!0});var Dl=s(lr);T(vx.$$.fragment,Dl),DLr=i(Dl),Cc=n(Dl,"P",{});var Ste=s(Cc);GLr=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),IY=n(Ste,"A",{href:!0});var HRt=s(IY);OLr=r(HRt,"from_pretrained()"),HRt.forEach(t),VLr=r(Ste," class method or the "),NY=n(Ste,"A",{href:!0});var URt=s(NY);XLr=r(URt,"from_config()"),URt.forEach(t),zLr=r(Ste,` class
method.`),Ste.forEach(t),QLr=i(Dl),Fx=n(Dl,"P",{});var pWe=s(Fx);WLr=r(pWe,"This class cannot be instantiated directly using "),oCe=n(pWe,"CODE",{});var JRt=s(oCe);HLr=r(JRt,"__init__()"),JRt.forEach(t),ULr=r(pWe," (throws an error)."),pWe.forEach(t),JLr=i(Dl),qt=n(Dl,"DIV",{class:!0});var fL=s(qt);T(Tx.$$.fragment,fL),YLr=i(fL),rCe=n(fL,"P",{});var YRt=s(rCe);KLr=r(YRt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),YRt.forEach(t),ZLr=i(fL),wc=n(fL,"P",{});var Rte=s(wc);eyr=r(Rte,`Note:
Loading a model from its configuration file does `),tCe=n(Rte,"STRONG",{});var KRt=s(tCe);oyr=r(KRt,"not"),KRt.forEach(t),ryr=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=n(Rte,"A",{href:!0});var ZRt=s(qY);tyr=r(ZRt,"from_pretrained()"),ZRt.forEach(t),ayr=r(Rte," to load the model weights."),Rte.forEach(t),nyr=i(fL),T(W3.$$.fragment,fL),fL.forEach(t),syr=i(Dl),Br=n(Dl,"DIV",{class:!0});var Gl=s(Br);T(Mx.$$.fragment,Gl),lyr=i(Gl),aCe=n(Gl,"P",{});var ePt=s(aCe);iyr=r(ePt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ePt.forEach(t),dyr=i(Gl),gn=n(Gl,"P",{});var gL=s(gn);cyr=r(gL,"The model class to instantiate is selected based on the "),nCe=n(gL,"CODE",{});var oPt=s(nCe);myr=r(oPt,"model_type"),oPt.forEach(t),fyr=r(gL,` property of the config object (either
passed as an argument or loaded from `),sCe=n(gL,"CODE",{});var rPt=s(sCe);gyr=r(rPt,"pretrained_model_name_or_path"),rPt.forEach(t),hyr=r(gL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lCe=n(gL,"CODE",{});var tPt=s(lCe);uyr=r(tPt,"pretrained_model_name_or_path"),tPt.forEach(t),pyr=r(gL,":"),gL.forEach(t),_yr=i(Gl),te=n(Gl,"UL",{});var ne=s(te);H3=n(ne,"LI",{});var sDe=s(H3);iCe=n(sDe,"STRONG",{});var aPt=s(iCe);byr=r(aPt,"albert"),aPt.forEach(t),vyr=r(sDe," \u2014 "),jY=n(sDe,"A",{href:!0});var nPt=s(jY);Fyr=r(nPt,"TFAlbertForSequenceClassification"),nPt.forEach(t),Tyr=r(sDe," (ALBERT model)"),sDe.forEach(t),Myr=i(ne),U3=n(ne,"LI",{});var lDe=s(U3);dCe=n(lDe,"STRONG",{});var sPt=s(dCe);Eyr=r(sPt,"bert"),sPt.forEach(t),Cyr=r(lDe," \u2014 "),DY=n(lDe,"A",{href:!0});var lPt=s(DY);wyr=r(lPt,"TFBertForSequenceClassification"),lPt.forEach(t),Ayr=r(lDe," (BERT model)"),lDe.forEach(t),Lyr=i(ne),J3=n(ne,"LI",{});var iDe=s(J3);cCe=n(iDe,"STRONG",{});var iPt=s(cCe);yyr=r(iPt,"camembert"),iPt.forEach(t),xyr=r(iDe," \u2014 "),GY=n(iDe,"A",{href:!0});var dPt=s(GY);$yr=r(dPt,"TFCamembertForSequenceClassification"),dPt.forEach(t),kyr=r(iDe," (CamemBERT model)"),iDe.forEach(t),Syr=i(ne),Y3=n(ne,"LI",{});var dDe=s(Y3);mCe=n(dDe,"STRONG",{});var cPt=s(mCe);Ryr=r(cPt,"convbert"),cPt.forEach(t),Pyr=r(dDe," \u2014 "),OY=n(dDe,"A",{href:!0});var mPt=s(OY);Byr=r(mPt,"TFConvBertForSequenceClassification"),mPt.forEach(t),Iyr=r(dDe," (ConvBERT model)"),dDe.forEach(t),Nyr=i(ne),K3=n(ne,"LI",{});var cDe=s(K3);fCe=n(cDe,"STRONG",{});var fPt=s(fCe);qyr=r(fPt,"ctrl"),fPt.forEach(t),jyr=r(cDe," \u2014 "),VY=n(cDe,"A",{href:!0});var gPt=s(VY);Dyr=r(gPt,"TFCTRLForSequenceClassification"),gPt.forEach(t),Gyr=r(cDe," (CTRL model)"),cDe.forEach(t),Oyr=i(ne),Z3=n(ne,"LI",{});var mDe=s(Z3);gCe=n(mDe,"STRONG",{});var hPt=s(gCe);Vyr=r(hPt,"deberta"),hPt.forEach(t),Xyr=r(mDe," \u2014 "),XY=n(mDe,"A",{href:!0});var uPt=s(XY);zyr=r(uPt,"TFDebertaForSequenceClassification"),uPt.forEach(t),Qyr=r(mDe," (DeBERTa model)"),mDe.forEach(t),Wyr=i(ne),e5=n(ne,"LI",{});var fDe=s(e5);hCe=n(fDe,"STRONG",{});var pPt=s(hCe);Hyr=r(pPt,"deberta-v2"),pPt.forEach(t),Uyr=r(fDe," \u2014 "),zY=n(fDe,"A",{href:!0});var _Pt=s(zY);Jyr=r(_Pt,"TFDebertaV2ForSequenceClassification"),_Pt.forEach(t),Yyr=r(fDe," (DeBERTa-v2 model)"),fDe.forEach(t),Kyr=i(ne),o5=n(ne,"LI",{});var gDe=s(o5);uCe=n(gDe,"STRONG",{});var bPt=s(uCe);Zyr=r(bPt,"distilbert"),bPt.forEach(t),e8r=r(gDe," \u2014 "),QY=n(gDe,"A",{href:!0});var vPt=s(QY);o8r=r(vPt,"TFDistilBertForSequenceClassification"),vPt.forEach(t),r8r=r(gDe," (DistilBERT model)"),gDe.forEach(t),t8r=i(ne),r5=n(ne,"LI",{});var hDe=s(r5);pCe=n(hDe,"STRONG",{});var FPt=s(pCe);a8r=r(FPt,"electra"),FPt.forEach(t),n8r=r(hDe," \u2014 "),WY=n(hDe,"A",{href:!0});var TPt=s(WY);s8r=r(TPt,"TFElectraForSequenceClassification"),TPt.forEach(t),l8r=r(hDe," (ELECTRA model)"),hDe.forEach(t),i8r=i(ne),t5=n(ne,"LI",{});var uDe=s(t5);_Ce=n(uDe,"STRONG",{});var MPt=s(_Ce);d8r=r(MPt,"flaubert"),MPt.forEach(t),c8r=r(uDe," \u2014 "),HY=n(uDe,"A",{href:!0});var EPt=s(HY);m8r=r(EPt,"TFFlaubertForSequenceClassification"),EPt.forEach(t),f8r=r(uDe," (FlauBERT model)"),uDe.forEach(t),g8r=i(ne),a5=n(ne,"LI",{});var pDe=s(a5);bCe=n(pDe,"STRONG",{});var CPt=s(bCe);h8r=r(CPt,"funnel"),CPt.forEach(t),u8r=r(pDe," \u2014 "),UY=n(pDe,"A",{href:!0});var wPt=s(UY);p8r=r(wPt,"TFFunnelForSequenceClassification"),wPt.forEach(t),_8r=r(pDe," (Funnel Transformer model)"),pDe.forEach(t),b8r=i(ne),n5=n(ne,"LI",{});var _De=s(n5);vCe=n(_De,"STRONG",{});var APt=s(vCe);v8r=r(APt,"gpt2"),APt.forEach(t),F8r=r(_De," \u2014 "),JY=n(_De,"A",{href:!0});var LPt=s(JY);T8r=r(LPt,"TFGPT2ForSequenceClassification"),LPt.forEach(t),M8r=r(_De," (OpenAI GPT-2 model)"),_De.forEach(t),E8r=i(ne),s5=n(ne,"LI",{});var bDe=s(s5);FCe=n(bDe,"STRONG",{});var yPt=s(FCe);C8r=r(yPt,"gptj"),yPt.forEach(t),w8r=r(bDe," \u2014 "),YY=n(bDe,"A",{href:!0});var xPt=s(YY);A8r=r(xPt,"TFGPTJForSequenceClassification"),xPt.forEach(t),L8r=r(bDe," (GPT-J model)"),bDe.forEach(t),y8r=i(ne),l5=n(ne,"LI",{});var vDe=s(l5);TCe=n(vDe,"STRONG",{});var $Pt=s(TCe);x8r=r($Pt,"layoutlm"),$Pt.forEach(t),$8r=r(vDe," \u2014 "),KY=n(vDe,"A",{href:!0});var kPt=s(KY);k8r=r(kPt,"TFLayoutLMForSequenceClassification"),kPt.forEach(t),S8r=r(vDe," (LayoutLM model)"),vDe.forEach(t),R8r=i(ne),i5=n(ne,"LI",{});var FDe=s(i5);MCe=n(FDe,"STRONG",{});var SPt=s(MCe);P8r=r(SPt,"longformer"),SPt.forEach(t),B8r=r(FDe," \u2014 "),ZY=n(FDe,"A",{href:!0});var RPt=s(ZY);I8r=r(RPt,"TFLongformerForSequenceClassification"),RPt.forEach(t),N8r=r(FDe," (Longformer model)"),FDe.forEach(t),q8r=i(ne),d5=n(ne,"LI",{});var TDe=s(d5);ECe=n(TDe,"STRONG",{});var PPt=s(ECe);j8r=r(PPt,"mobilebert"),PPt.forEach(t),D8r=r(TDe," \u2014 "),eK=n(TDe,"A",{href:!0});var BPt=s(eK);G8r=r(BPt,"TFMobileBertForSequenceClassification"),BPt.forEach(t),O8r=r(TDe," (MobileBERT model)"),TDe.forEach(t),V8r=i(ne),c5=n(ne,"LI",{});var MDe=s(c5);CCe=n(MDe,"STRONG",{});var IPt=s(CCe);X8r=r(IPt,"mpnet"),IPt.forEach(t),z8r=r(MDe," \u2014 "),oK=n(MDe,"A",{href:!0});var NPt=s(oK);Q8r=r(NPt,"TFMPNetForSequenceClassification"),NPt.forEach(t),W8r=r(MDe," (MPNet model)"),MDe.forEach(t),H8r=i(ne),m5=n(ne,"LI",{});var EDe=s(m5);wCe=n(EDe,"STRONG",{});var qPt=s(wCe);U8r=r(qPt,"openai-gpt"),qPt.forEach(t),J8r=r(EDe," \u2014 "),rK=n(EDe,"A",{href:!0});var jPt=s(rK);Y8r=r(jPt,"TFOpenAIGPTForSequenceClassification"),jPt.forEach(t),K8r=r(EDe," (OpenAI GPT model)"),EDe.forEach(t),Z8r=i(ne),f5=n(ne,"LI",{});var CDe=s(f5);ACe=n(CDe,"STRONG",{});var DPt=s(ACe);e9r=r(DPt,"rembert"),DPt.forEach(t),o9r=r(CDe," \u2014 "),tK=n(CDe,"A",{href:!0});var GPt=s(tK);r9r=r(GPt,"TFRemBertForSequenceClassification"),GPt.forEach(t),t9r=r(CDe," (RemBERT model)"),CDe.forEach(t),a9r=i(ne),g5=n(ne,"LI",{});var wDe=s(g5);LCe=n(wDe,"STRONG",{});var OPt=s(LCe);n9r=r(OPt,"roberta"),OPt.forEach(t),s9r=r(wDe," \u2014 "),aK=n(wDe,"A",{href:!0});var VPt=s(aK);l9r=r(VPt,"TFRobertaForSequenceClassification"),VPt.forEach(t),i9r=r(wDe," (RoBERTa model)"),wDe.forEach(t),d9r=i(ne),h5=n(ne,"LI",{});var ADe=s(h5);yCe=n(ADe,"STRONG",{});var XPt=s(yCe);c9r=r(XPt,"roformer"),XPt.forEach(t),m9r=r(ADe," \u2014 "),nK=n(ADe,"A",{href:!0});var zPt=s(nK);f9r=r(zPt,"TFRoFormerForSequenceClassification"),zPt.forEach(t),g9r=r(ADe," (RoFormer model)"),ADe.forEach(t),h9r=i(ne),u5=n(ne,"LI",{});var LDe=s(u5);xCe=n(LDe,"STRONG",{});var QPt=s(xCe);u9r=r(QPt,"tapas"),QPt.forEach(t),p9r=r(LDe," \u2014 "),sK=n(LDe,"A",{href:!0});var WPt=s(sK);_9r=r(WPt,"TFTapasForSequenceClassification"),WPt.forEach(t),b9r=r(LDe," (TAPAS model)"),LDe.forEach(t),v9r=i(ne),p5=n(ne,"LI",{});var yDe=s(p5);$Ce=n(yDe,"STRONG",{});var HPt=s($Ce);F9r=r(HPt,"transfo-xl"),HPt.forEach(t),T9r=r(yDe," \u2014 "),lK=n(yDe,"A",{href:!0});var UPt=s(lK);M9r=r(UPt,"TFTransfoXLForSequenceClassification"),UPt.forEach(t),E9r=r(yDe," (Transformer-XL model)"),yDe.forEach(t),C9r=i(ne),_5=n(ne,"LI",{});var xDe=s(_5);kCe=n(xDe,"STRONG",{});var JPt=s(kCe);w9r=r(JPt,"xlm"),JPt.forEach(t),A9r=r(xDe," \u2014 "),iK=n(xDe,"A",{href:!0});var YPt=s(iK);L9r=r(YPt,"TFXLMForSequenceClassification"),YPt.forEach(t),y9r=r(xDe," (XLM model)"),xDe.forEach(t),x9r=i(ne),b5=n(ne,"LI",{});var $De=s(b5);SCe=n($De,"STRONG",{});var KPt=s(SCe);$9r=r(KPt,"xlm-roberta"),KPt.forEach(t),k9r=r($De," \u2014 "),dK=n($De,"A",{href:!0});var ZPt=s(dK);S9r=r(ZPt,"TFXLMRobertaForSequenceClassification"),ZPt.forEach(t),R9r=r($De," (XLM-RoBERTa model)"),$De.forEach(t),P9r=i(ne),v5=n(ne,"LI",{});var kDe=s(v5);RCe=n(kDe,"STRONG",{});var eBt=s(RCe);B9r=r(eBt,"xlnet"),eBt.forEach(t),I9r=r(kDe," \u2014 "),cK=n(kDe,"A",{href:!0});var oBt=s(cK);N9r=r(oBt,"TFXLNetForSequenceClassification"),oBt.forEach(t),q9r=r(kDe," (XLNet model)"),kDe.forEach(t),ne.forEach(t),j9r=i(Gl),T(F5.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),dze=i(m),Ac=n(m,"H2",{class:!0});var _We=s(Ac);T5=n(_We,"A",{id:!0,class:!0,href:!0});var rBt=s(T5);PCe=n(rBt,"SPAN",{});var tBt=s(PCe);T(Ex.$$.fragment,tBt),tBt.forEach(t),rBt.forEach(t),D9r=i(_We),BCe=n(_We,"SPAN",{});var aBt=s(BCe);G9r=r(aBt,"TFAutoModelForMultipleChoice"),aBt.forEach(t),_We.forEach(t),cze=i(m),ir=n(m,"DIV",{class:!0});var Ol=s(ir);T(Cx.$$.fragment,Ol),O9r=i(Ol),Lc=n(Ol,"P",{});var Pte=s(Lc);V9r=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mK=n(Pte,"A",{href:!0});var nBt=s(mK);X9r=r(nBt,"from_pretrained()"),nBt.forEach(t),z9r=r(Pte," class method or the "),fK=n(Pte,"A",{href:!0});var sBt=s(fK);Q9r=r(sBt,"from_config()"),sBt.forEach(t),W9r=r(Pte,` class
method.`),Pte.forEach(t),H9r=i(Ol),wx=n(Ol,"P",{});var bWe=s(wx);U9r=r(bWe,"This class cannot be instantiated directly using "),ICe=n(bWe,"CODE",{});var lBt=s(ICe);J9r=r(lBt,"__init__()"),lBt.forEach(t),Y9r=r(bWe," (throws an error)."),bWe.forEach(t),K9r=i(Ol),jt=n(Ol,"DIV",{class:!0});var hL=s(jt);T(Ax.$$.fragment,hL),Z9r=i(hL),NCe=n(hL,"P",{});var iBt=s(NCe);exr=r(iBt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),iBt.forEach(t),oxr=i(hL),yc=n(hL,"P",{});var Bte=s(yc);rxr=r(Bte,`Note:
Loading a model from its configuration file does `),qCe=n(Bte,"STRONG",{});var dBt=s(qCe);txr=r(dBt,"not"),dBt.forEach(t),axr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=n(Bte,"A",{href:!0});var cBt=s(gK);nxr=r(cBt,"from_pretrained()"),cBt.forEach(t),sxr=r(Bte," to load the model weights."),Bte.forEach(t),lxr=i(hL),T(M5.$$.fragment,hL),hL.forEach(t),ixr=i(Ol),Ir=n(Ol,"DIV",{class:!0});var Vl=s(Ir);T(Lx.$$.fragment,Vl),dxr=i(Vl),jCe=n(Vl,"P",{});var mBt=s(jCe);cxr=r(mBt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mBt.forEach(t),mxr=i(Vl),hn=n(Vl,"P",{});var uL=s(hn);fxr=r(uL,"The model class to instantiate is selected based on the "),DCe=n(uL,"CODE",{});var fBt=s(DCe);gxr=r(fBt,"model_type"),fBt.forEach(t),hxr=r(uL,` property of the config object (either
passed as an argument or loaded from `),GCe=n(uL,"CODE",{});var gBt=s(GCe);uxr=r(gBt,"pretrained_model_name_or_path"),gBt.forEach(t),pxr=r(uL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OCe=n(uL,"CODE",{});var hBt=s(OCe);_xr=r(hBt,"pretrained_model_name_or_path"),hBt.forEach(t),bxr=r(uL,":"),uL.forEach(t),vxr=i(Vl),pe=n(Vl,"UL",{});var Fe=s(pe);E5=n(Fe,"LI",{});var SDe=s(E5);VCe=n(SDe,"STRONG",{});var uBt=s(VCe);Fxr=r(uBt,"albert"),uBt.forEach(t),Txr=r(SDe," \u2014 "),hK=n(SDe,"A",{href:!0});var pBt=s(hK);Mxr=r(pBt,"TFAlbertForMultipleChoice"),pBt.forEach(t),Exr=r(SDe," (ALBERT model)"),SDe.forEach(t),Cxr=i(Fe),C5=n(Fe,"LI",{});var RDe=s(C5);XCe=n(RDe,"STRONG",{});var _Bt=s(XCe);wxr=r(_Bt,"bert"),_Bt.forEach(t),Axr=r(RDe," \u2014 "),uK=n(RDe,"A",{href:!0});var bBt=s(uK);Lxr=r(bBt,"TFBertForMultipleChoice"),bBt.forEach(t),yxr=r(RDe," (BERT model)"),RDe.forEach(t),xxr=i(Fe),w5=n(Fe,"LI",{});var PDe=s(w5);zCe=n(PDe,"STRONG",{});var vBt=s(zCe);$xr=r(vBt,"camembert"),vBt.forEach(t),kxr=r(PDe," \u2014 "),pK=n(PDe,"A",{href:!0});var FBt=s(pK);Sxr=r(FBt,"TFCamembertForMultipleChoice"),FBt.forEach(t),Rxr=r(PDe," (CamemBERT model)"),PDe.forEach(t),Pxr=i(Fe),A5=n(Fe,"LI",{});var BDe=s(A5);QCe=n(BDe,"STRONG",{});var TBt=s(QCe);Bxr=r(TBt,"convbert"),TBt.forEach(t),Ixr=r(BDe," \u2014 "),_K=n(BDe,"A",{href:!0});var MBt=s(_K);Nxr=r(MBt,"TFConvBertForMultipleChoice"),MBt.forEach(t),qxr=r(BDe," (ConvBERT model)"),BDe.forEach(t),jxr=i(Fe),L5=n(Fe,"LI",{});var IDe=s(L5);WCe=n(IDe,"STRONG",{});var EBt=s(WCe);Dxr=r(EBt,"distilbert"),EBt.forEach(t),Gxr=r(IDe," \u2014 "),bK=n(IDe,"A",{href:!0});var CBt=s(bK);Oxr=r(CBt,"TFDistilBertForMultipleChoice"),CBt.forEach(t),Vxr=r(IDe," (DistilBERT model)"),IDe.forEach(t),Xxr=i(Fe),y5=n(Fe,"LI",{});var NDe=s(y5);HCe=n(NDe,"STRONG",{});var wBt=s(HCe);zxr=r(wBt,"electra"),wBt.forEach(t),Qxr=r(NDe," \u2014 "),vK=n(NDe,"A",{href:!0});var ABt=s(vK);Wxr=r(ABt,"TFElectraForMultipleChoice"),ABt.forEach(t),Hxr=r(NDe," (ELECTRA model)"),NDe.forEach(t),Uxr=i(Fe),x5=n(Fe,"LI",{});var qDe=s(x5);UCe=n(qDe,"STRONG",{});var LBt=s(UCe);Jxr=r(LBt,"flaubert"),LBt.forEach(t),Yxr=r(qDe," \u2014 "),FK=n(qDe,"A",{href:!0});var yBt=s(FK);Kxr=r(yBt,"TFFlaubertForMultipleChoice"),yBt.forEach(t),Zxr=r(qDe," (FlauBERT model)"),qDe.forEach(t),e$r=i(Fe),$5=n(Fe,"LI",{});var jDe=s($5);JCe=n(jDe,"STRONG",{});var xBt=s(JCe);o$r=r(xBt,"funnel"),xBt.forEach(t),r$r=r(jDe," \u2014 "),TK=n(jDe,"A",{href:!0});var $Bt=s(TK);t$r=r($Bt,"TFFunnelForMultipleChoice"),$Bt.forEach(t),a$r=r(jDe," (Funnel Transformer model)"),jDe.forEach(t),n$r=i(Fe),k5=n(Fe,"LI",{});var DDe=s(k5);YCe=n(DDe,"STRONG",{});var kBt=s(YCe);s$r=r(kBt,"longformer"),kBt.forEach(t),l$r=r(DDe," \u2014 "),MK=n(DDe,"A",{href:!0});var SBt=s(MK);i$r=r(SBt,"TFLongformerForMultipleChoice"),SBt.forEach(t),d$r=r(DDe," (Longformer model)"),DDe.forEach(t),c$r=i(Fe),S5=n(Fe,"LI",{});var GDe=s(S5);KCe=n(GDe,"STRONG",{});var RBt=s(KCe);m$r=r(RBt,"mobilebert"),RBt.forEach(t),f$r=r(GDe," \u2014 "),EK=n(GDe,"A",{href:!0});var PBt=s(EK);g$r=r(PBt,"TFMobileBertForMultipleChoice"),PBt.forEach(t),h$r=r(GDe," (MobileBERT model)"),GDe.forEach(t),u$r=i(Fe),R5=n(Fe,"LI",{});var ODe=s(R5);ZCe=n(ODe,"STRONG",{});var BBt=s(ZCe);p$r=r(BBt,"mpnet"),BBt.forEach(t),_$r=r(ODe," \u2014 "),CK=n(ODe,"A",{href:!0});var IBt=s(CK);b$r=r(IBt,"TFMPNetForMultipleChoice"),IBt.forEach(t),v$r=r(ODe," (MPNet model)"),ODe.forEach(t),F$r=i(Fe),P5=n(Fe,"LI",{});var VDe=s(P5);e3e=n(VDe,"STRONG",{});var NBt=s(e3e);T$r=r(NBt,"rembert"),NBt.forEach(t),M$r=r(VDe," \u2014 "),wK=n(VDe,"A",{href:!0});var qBt=s(wK);E$r=r(qBt,"TFRemBertForMultipleChoice"),qBt.forEach(t),C$r=r(VDe," (RemBERT model)"),VDe.forEach(t),w$r=i(Fe),B5=n(Fe,"LI",{});var XDe=s(B5);o3e=n(XDe,"STRONG",{});var jBt=s(o3e);A$r=r(jBt,"roberta"),jBt.forEach(t),L$r=r(XDe," \u2014 "),AK=n(XDe,"A",{href:!0});var DBt=s(AK);y$r=r(DBt,"TFRobertaForMultipleChoice"),DBt.forEach(t),x$r=r(XDe," (RoBERTa model)"),XDe.forEach(t),$$r=i(Fe),I5=n(Fe,"LI",{});var zDe=s(I5);r3e=n(zDe,"STRONG",{});var GBt=s(r3e);k$r=r(GBt,"roformer"),GBt.forEach(t),S$r=r(zDe," \u2014 "),LK=n(zDe,"A",{href:!0});var OBt=s(LK);R$r=r(OBt,"TFRoFormerForMultipleChoice"),OBt.forEach(t),P$r=r(zDe," (RoFormer model)"),zDe.forEach(t),B$r=i(Fe),N5=n(Fe,"LI",{});var QDe=s(N5);t3e=n(QDe,"STRONG",{});var VBt=s(t3e);I$r=r(VBt,"xlm"),VBt.forEach(t),N$r=r(QDe," \u2014 "),yK=n(QDe,"A",{href:!0});var XBt=s(yK);q$r=r(XBt,"TFXLMForMultipleChoice"),XBt.forEach(t),j$r=r(QDe," (XLM model)"),QDe.forEach(t),D$r=i(Fe),q5=n(Fe,"LI",{});var WDe=s(q5);a3e=n(WDe,"STRONG",{});var zBt=s(a3e);G$r=r(zBt,"xlm-roberta"),zBt.forEach(t),O$r=r(WDe," \u2014 "),xK=n(WDe,"A",{href:!0});var QBt=s(xK);V$r=r(QBt,"TFXLMRobertaForMultipleChoice"),QBt.forEach(t),X$r=r(WDe," (XLM-RoBERTa model)"),WDe.forEach(t),z$r=i(Fe),j5=n(Fe,"LI",{});var HDe=s(j5);n3e=n(HDe,"STRONG",{});var WBt=s(n3e);Q$r=r(WBt,"xlnet"),WBt.forEach(t),W$r=r(HDe," \u2014 "),$K=n(HDe,"A",{href:!0});var HBt=s($K);H$r=r(HBt,"TFXLNetForMultipleChoice"),HBt.forEach(t),U$r=r(HDe," (XLNet model)"),HDe.forEach(t),Fe.forEach(t),J$r=i(Vl),T(D5.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),mze=i(m),xc=n(m,"H2",{class:!0});var vWe=s(xc);G5=n(vWe,"A",{id:!0,class:!0,href:!0});var UBt=s(G5);s3e=n(UBt,"SPAN",{});var JBt=s(s3e);T(yx.$$.fragment,JBt),JBt.forEach(t),UBt.forEach(t),Y$r=i(vWe),l3e=n(vWe,"SPAN",{});var YBt=s(l3e);K$r=r(YBt,"TFAutoModelForNextSentencePrediction"),YBt.forEach(t),vWe.forEach(t),fze=i(m),dr=n(m,"DIV",{class:!0});var Xl=s(dr);T(xx.$$.fragment,Xl),Z$r=i(Xl),$c=n(Xl,"P",{});var Ite=s($c);ekr=r(Ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kK=n(Ite,"A",{href:!0});var KBt=s(kK);okr=r(KBt,"from_pretrained()"),KBt.forEach(t),rkr=r(Ite," class method or the "),SK=n(Ite,"A",{href:!0});var ZBt=s(SK);tkr=r(ZBt,"from_config()"),ZBt.forEach(t),akr=r(Ite,` class
method.`),Ite.forEach(t),nkr=i(Xl),$x=n(Xl,"P",{});var FWe=s($x);skr=r(FWe,"This class cannot be instantiated directly using "),i3e=n(FWe,"CODE",{});var eIt=s(i3e);lkr=r(eIt,"__init__()"),eIt.forEach(t),ikr=r(FWe," (throws an error)."),FWe.forEach(t),dkr=i(Xl),Dt=n(Xl,"DIV",{class:!0});var pL=s(Dt);T(kx.$$.fragment,pL),ckr=i(pL),d3e=n(pL,"P",{});var oIt=s(d3e);mkr=r(oIt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),oIt.forEach(t),fkr=i(pL),kc=n(pL,"P",{});var Nte=s(kc);gkr=r(Nte,`Note:
Loading a model from its configuration file does `),c3e=n(Nte,"STRONG",{});var rIt=s(c3e);hkr=r(rIt,"not"),rIt.forEach(t),ukr=r(Nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=n(Nte,"A",{href:!0});var tIt=s(RK);pkr=r(tIt,"from_pretrained()"),tIt.forEach(t),_kr=r(Nte," to load the model weights."),Nte.forEach(t),bkr=i(pL),T(O5.$$.fragment,pL),pL.forEach(t),vkr=i(Xl),Nr=n(Xl,"DIV",{class:!0});var zl=s(Nr);T(Sx.$$.fragment,zl),Fkr=i(zl),m3e=n(zl,"P",{});var aIt=s(m3e);Tkr=r(aIt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),aIt.forEach(t),Mkr=i(zl),un=n(zl,"P",{});var _L=s(un);Ekr=r(_L,"The model class to instantiate is selected based on the "),f3e=n(_L,"CODE",{});var nIt=s(f3e);Ckr=r(nIt,"model_type"),nIt.forEach(t),wkr=r(_L,` property of the config object (either
passed as an argument or loaded from `),g3e=n(_L,"CODE",{});var sIt=s(g3e);Akr=r(sIt,"pretrained_model_name_or_path"),sIt.forEach(t),Lkr=r(_L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h3e=n(_L,"CODE",{});var lIt=s(h3e);ykr=r(lIt,"pretrained_model_name_or_path"),lIt.forEach(t),xkr=r(_L,":"),_L.forEach(t),$kr=i(zl),Rx=n(zl,"UL",{});var TWe=s(Rx);V5=n(TWe,"LI",{});var UDe=s(V5);u3e=n(UDe,"STRONG",{});var iIt=s(u3e);kkr=r(iIt,"bert"),iIt.forEach(t),Skr=r(UDe," \u2014 "),PK=n(UDe,"A",{href:!0});var dIt=s(PK);Rkr=r(dIt,"TFBertForNextSentencePrediction"),dIt.forEach(t),Pkr=r(UDe," (BERT model)"),UDe.forEach(t),Bkr=i(TWe),X5=n(TWe,"LI",{});var JDe=s(X5);p3e=n(JDe,"STRONG",{});var cIt=s(p3e);Ikr=r(cIt,"mobilebert"),cIt.forEach(t),Nkr=r(JDe," \u2014 "),BK=n(JDe,"A",{href:!0});var mIt=s(BK);qkr=r(mIt,"TFMobileBertForNextSentencePrediction"),mIt.forEach(t),jkr=r(JDe," (MobileBERT model)"),JDe.forEach(t),TWe.forEach(t),Dkr=i(zl),T(z5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),gze=i(m),Sc=n(m,"H2",{class:!0});var MWe=s(Sc);Q5=n(MWe,"A",{id:!0,class:!0,href:!0});var fIt=s(Q5);_3e=n(fIt,"SPAN",{});var gIt=s(_3e);T(Px.$$.fragment,gIt),gIt.forEach(t),fIt.forEach(t),Gkr=i(MWe),b3e=n(MWe,"SPAN",{});var hIt=s(b3e);Okr=r(hIt,"TFAutoModelForTableQuestionAnswering"),hIt.forEach(t),MWe.forEach(t),hze=i(m),cr=n(m,"DIV",{class:!0});var Ql=s(cr);T(Bx.$$.fragment,Ql),Vkr=i(Ql),Rc=n(Ql,"P",{});var qte=s(Rc);Xkr=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),IK=n(qte,"A",{href:!0});var uIt=s(IK);zkr=r(uIt,"from_pretrained()"),uIt.forEach(t),Qkr=r(qte," class method or the "),NK=n(qte,"A",{href:!0});var pIt=s(NK);Wkr=r(pIt,"from_config()"),pIt.forEach(t),Hkr=r(qte,` class
method.`),qte.forEach(t),Ukr=i(Ql),Ix=n(Ql,"P",{});var EWe=s(Ix);Jkr=r(EWe,"This class cannot be instantiated directly using "),v3e=n(EWe,"CODE",{});var _It=s(v3e);Ykr=r(_It,"__init__()"),_It.forEach(t),Kkr=r(EWe," (throws an error)."),EWe.forEach(t),Zkr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var bL=s(Gt);T(Nx.$$.fragment,bL),eSr=i(bL),F3e=n(bL,"P",{});var bIt=s(F3e);oSr=r(bIt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),bIt.forEach(t),rSr=i(bL),Pc=n(bL,"P",{});var jte=s(Pc);tSr=r(jte,`Note:
Loading a model from its configuration file does `),T3e=n(jte,"STRONG",{});var vIt=s(T3e);aSr=r(vIt,"not"),vIt.forEach(t),nSr=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=n(jte,"A",{href:!0});var FIt=s(qK);sSr=r(FIt,"from_pretrained()"),FIt.forEach(t),lSr=r(jte," to load the model weights."),jte.forEach(t),iSr=i(bL),T(W5.$$.fragment,bL),bL.forEach(t),dSr=i(Ql),qr=n(Ql,"DIV",{class:!0});var Wl=s(qr);T(qx.$$.fragment,Wl),cSr=i(Wl),M3e=n(Wl,"P",{});var TIt=s(M3e);mSr=r(TIt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),TIt.forEach(t),fSr=i(Wl),pn=n(Wl,"P",{});var vL=s(pn);gSr=r(vL,"The model class to instantiate is selected based on the "),E3e=n(vL,"CODE",{});var MIt=s(E3e);hSr=r(MIt,"model_type"),MIt.forEach(t),uSr=r(vL,` property of the config object (either
passed as an argument or loaded from `),C3e=n(vL,"CODE",{});var EIt=s(C3e);pSr=r(EIt,"pretrained_model_name_or_path"),EIt.forEach(t),_Sr=r(vL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w3e=n(vL,"CODE",{});var CIt=s(w3e);bSr=r(CIt,"pretrained_model_name_or_path"),CIt.forEach(t),vSr=r(vL,":"),vL.forEach(t),FSr=i(Wl),A3e=n(Wl,"UL",{});var wIt=s(A3e);H5=n(wIt,"LI",{});var YDe=s(H5);L3e=n(YDe,"STRONG",{});var AIt=s(L3e);TSr=r(AIt,"tapas"),AIt.forEach(t),MSr=r(YDe," \u2014 "),jK=n(YDe,"A",{href:!0});var LIt=s(jK);ESr=r(LIt,"TFTapasForQuestionAnswering"),LIt.forEach(t),CSr=r(YDe," (TAPAS model)"),YDe.forEach(t),wIt.forEach(t),wSr=i(Wl),T(U5.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),uze=i(m),Bc=n(m,"H2",{class:!0});var CWe=s(Bc);J5=n(CWe,"A",{id:!0,class:!0,href:!0});var yIt=s(J5);y3e=n(yIt,"SPAN",{});var xIt=s(y3e);T(jx.$$.fragment,xIt),xIt.forEach(t),yIt.forEach(t),ASr=i(CWe),x3e=n(CWe,"SPAN",{});var $It=s(x3e);LSr=r($It,"TFAutoModelForTokenClassification"),$It.forEach(t),CWe.forEach(t),pze=i(m),mr=n(m,"DIV",{class:!0});var Hl=s(mr);T(Dx.$$.fragment,Hl),ySr=i(Hl),Ic=n(Hl,"P",{});var Dte=s(Ic);xSr=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DK=n(Dte,"A",{href:!0});var kIt=s(DK);$Sr=r(kIt,"from_pretrained()"),kIt.forEach(t),kSr=r(Dte," class method or the "),GK=n(Dte,"A",{href:!0});var SIt=s(GK);SSr=r(SIt,"from_config()"),SIt.forEach(t),RSr=r(Dte,` class
method.`),Dte.forEach(t),PSr=i(Hl),Gx=n(Hl,"P",{});var wWe=s(Gx);BSr=r(wWe,"This class cannot be instantiated directly using "),$3e=n(wWe,"CODE",{});var RIt=s($3e);ISr=r(RIt,"__init__()"),RIt.forEach(t),NSr=r(wWe," (throws an error)."),wWe.forEach(t),qSr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var FL=s(Ot);T(Ox.$$.fragment,FL),jSr=i(FL),k3e=n(FL,"P",{});var PIt=s(k3e);DSr=r(PIt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),PIt.forEach(t),GSr=i(FL),Nc=n(FL,"P",{});var Gte=s(Nc);OSr=r(Gte,`Note:
Loading a model from its configuration file does `),S3e=n(Gte,"STRONG",{});var BIt=s(S3e);VSr=r(BIt,"not"),BIt.forEach(t),XSr=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=n(Gte,"A",{href:!0});var IIt=s(OK);zSr=r(IIt,"from_pretrained()"),IIt.forEach(t),QSr=r(Gte," to load the model weights."),Gte.forEach(t),WSr=i(FL),T(Y5.$$.fragment,FL),FL.forEach(t),HSr=i(Hl),jr=n(Hl,"DIV",{class:!0});var Ul=s(jr);T(Vx.$$.fragment,Ul),USr=i(Ul),R3e=n(Ul,"P",{});var NIt=s(R3e);JSr=r(NIt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),NIt.forEach(t),YSr=i(Ul),_n=n(Ul,"P",{});var TL=s(_n);KSr=r(TL,"The model class to instantiate is selected based on the "),P3e=n(TL,"CODE",{});var qIt=s(P3e);ZSr=r(qIt,"model_type"),qIt.forEach(t),eRr=r(TL,` property of the config object (either
passed as an argument or loaded from `),B3e=n(TL,"CODE",{});var jIt=s(B3e);oRr=r(jIt,"pretrained_model_name_or_path"),jIt.forEach(t),rRr=r(TL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I3e=n(TL,"CODE",{});var DIt=s(I3e);tRr=r(DIt,"pretrained_model_name_or_path"),DIt.forEach(t),aRr=r(TL,":"),TL.forEach(t),nRr=i(Ul),de=n(Ul,"UL",{});var fe=s(de);K5=n(fe,"LI",{});var KDe=s(K5);N3e=n(KDe,"STRONG",{});var GIt=s(N3e);sRr=r(GIt,"albert"),GIt.forEach(t),lRr=r(KDe," \u2014 "),VK=n(KDe,"A",{href:!0});var OIt=s(VK);iRr=r(OIt,"TFAlbertForTokenClassification"),OIt.forEach(t),dRr=r(KDe," (ALBERT model)"),KDe.forEach(t),cRr=i(fe),Z5=n(fe,"LI",{});var ZDe=s(Z5);q3e=n(ZDe,"STRONG",{});var VIt=s(q3e);mRr=r(VIt,"bert"),VIt.forEach(t),fRr=r(ZDe," \u2014 "),XK=n(ZDe,"A",{href:!0});var XIt=s(XK);gRr=r(XIt,"TFBertForTokenClassification"),XIt.forEach(t),hRr=r(ZDe," (BERT model)"),ZDe.forEach(t),uRr=i(fe),e0=n(fe,"LI",{});var eGe=s(e0);j3e=n(eGe,"STRONG",{});var zIt=s(j3e);pRr=r(zIt,"camembert"),zIt.forEach(t),_Rr=r(eGe," \u2014 "),zK=n(eGe,"A",{href:!0});var QIt=s(zK);bRr=r(QIt,"TFCamembertForTokenClassification"),QIt.forEach(t),vRr=r(eGe," (CamemBERT model)"),eGe.forEach(t),FRr=i(fe),o0=n(fe,"LI",{});var oGe=s(o0);D3e=n(oGe,"STRONG",{});var WIt=s(D3e);TRr=r(WIt,"convbert"),WIt.forEach(t),MRr=r(oGe," \u2014 "),QK=n(oGe,"A",{href:!0});var HIt=s(QK);ERr=r(HIt,"TFConvBertForTokenClassification"),HIt.forEach(t),CRr=r(oGe," (ConvBERT model)"),oGe.forEach(t),wRr=i(fe),r0=n(fe,"LI",{});var rGe=s(r0);G3e=n(rGe,"STRONG",{});var UIt=s(G3e);ARr=r(UIt,"deberta"),UIt.forEach(t),LRr=r(rGe," \u2014 "),WK=n(rGe,"A",{href:!0});var JIt=s(WK);yRr=r(JIt,"TFDebertaForTokenClassification"),JIt.forEach(t),xRr=r(rGe," (DeBERTa model)"),rGe.forEach(t),$Rr=i(fe),t0=n(fe,"LI",{});var tGe=s(t0);O3e=n(tGe,"STRONG",{});var YIt=s(O3e);kRr=r(YIt,"deberta-v2"),YIt.forEach(t),SRr=r(tGe," \u2014 "),HK=n(tGe,"A",{href:!0});var KIt=s(HK);RRr=r(KIt,"TFDebertaV2ForTokenClassification"),KIt.forEach(t),PRr=r(tGe," (DeBERTa-v2 model)"),tGe.forEach(t),BRr=i(fe),a0=n(fe,"LI",{});var aGe=s(a0);V3e=n(aGe,"STRONG",{});var ZIt=s(V3e);IRr=r(ZIt,"distilbert"),ZIt.forEach(t),NRr=r(aGe," \u2014 "),UK=n(aGe,"A",{href:!0});var eNt=s(UK);qRr=r(eNt,"TFDistilBertForTokenClassification"),eNt.forEach(t),jRr=r(aGe," (DistilBERT model)"),aGe.forEach(t),DRr=i(fe),n0=n(fe,"LI",{});var nGe=s(n0);X3e=n(nGe,"STRONG",{});var oNt=s(X3e);GRr=r(oNt,"electra"),oNt.forEach(t),ORr=r(nGe," \u2014 "),JK=n(nGe,"A",{href:!0});var rNt=s(JK);VRr=r(rNt,"TFElectraForTokenClassification"),rNt.forEach(t),XRr=r(nGe," (ELECTRA model)"),nGe.forEach(t),zRr=i(fe),s0=n(fe,"LI",{});var sGe=s(s0);z3e=n(sGe,"STRONG",{});var tNt=s(z3e);QRr=r(tNt,"flaubert"),tNt.forEach(t),WRr=r(sGe," \u2014 "),YK=n(sGe,"A",{href:!0});var aNt=s(YK);HRr=r(aNt,"TFFlaubertForTokenClassification"),aNt.forEach(t),URr=r(sGe," (FlauBERT model)"),sGe.forEach(t),JRr=i(fe),l0=n(fe,"LI",{});var lGe=s(l0);Q3e=n(lGe,"STRONG",{});var nNt=s(Q3e);YRr=r(nNt,"funnel"),nNt.forEach(t),KRr=r(lGe," \u2014 "),KK=n(lGe,"A",{href:!0});var sNt=s(KK);ZRr=r(sNt,"TFFunnelForTokenClassification"),sNt.forEach(t),ePr=r(lGe," (Funnel Transformer model)"),lGe.forEach(t),oPr=i(fe),i0=n(fe,"LI",{});var iGe=s(i0);W3e=n(iGe,"STRONG",{});var lNt=s(W3e);rPr=r(lNt,"layoutlm"),lNt.forEach(t),tPr=r(iGe," \u2014 "),ZK=n(iGe,"A",{href:!0});var iNt=s(ZK);aPr=r(iNt,"TFLayoutLMForTokenClassification"),iNt.forEach(t),nPr=r(iGe," (LayoutLM model)"),iGe.forEach(t),sPr=i(fe),d0=n(fe,"LI",{});var dGe=s(d0);H3e=n(dGe,"STRONG",{});var dNt=s(H3e);lPr=r(dNt,"longformer"),dNt.forEach(t),iPr=r(dGe," \u2014 "),eZ=n(dGe,"A",{href:!0});var cNt=s(eZ);dPr=r(cNt,"TFLongformerForTokenClassification"),cNt.forEach(t),cPr=r(dGe," (Longformer model)"),dGe.forEach(t),mPr=i(fe),c0=n(fe,"LI",{});var cGe=s(c0);U3e=n(cGe,"STRONG",{});var mNt=s(U3e);fPr=r(mNt,"mobilebert"),mNt.forEach(t),gPr=r(cGe," \u2014 "),oZ=n(cGe,"A",{href:!0});var fNt=s(oZ);hPr=r(fNt,"TFMobileBertForTokenClassification"),fNt.forEach(t),uPr=r(cGe," (MobileBERT model)"),cGe.forEach(t),pPr=i(fe),m0=n(fe,"LI",{});var mGe=s(m0);J3e=n(mGe,"STRONG",{});var gNt=s(J3e);_Pr=r(gNt,"mpnet"),gNt.forEach(t),bPr=r(mGe," \u2014 "),rZ=n(mGe,"A",{href:!0});var hNt=s(rZ);vPr=r(hNt,"TFMPNetForTokenClassification"),hNt.forEach(t),FPr=r(mGe," (MPNet model)"),mGe.forEach(t),TPr=i(fe),f0=n(fe,"LI",{});var fGe=s(f0);Y3e=n(fGe,"STRONG",{});var uNt=s(Y3e);MPr=r(uNt,"rembert"),uNt.forEach(t),EPr=r(fGe," \u2014 "),tZ=n(fGe,"A",{href:!0});var pNt=s(tZ);CPr=r(pNt,"TFRemBertForTokenClassification"),pNt.forEach(t),wPr=r(fGe," (RemBERT model)"),fGe.forEach(t),APr=i(fe),g0=n(fe,"LI",{});var gGe=s(g0);K3e=n(gGe,"STRONG",{});var _Nt=s(K3e);LPr=r(_Nt,"roberta"),_Nt.forEach(t),yPr=r(gGe," \u2014 "),aZ=n(gGe,"A",{href:!0});var bNt=s(aZ);xPr=r(bNt,"TFRobertaForTokenClassification"),bNt.forEach(t),$Pr=r(gGe," (RoBERTa model)"),gGe.forEach(t),kPr=i(fe),h0=n(fe,"LI",{});var hGe=s(h0);Z3e=n(hGe,"STRONG",{});var vNt=s(Z3e);SPr=r(vNt,"roformer"),vNt.forEach(t),RPr=r(hGe," \u2014 "),nZ=n(hGe,"A",{href:!0});var FNt=s(nZ);PPr=r(FNt,"TFRoFormerForTokenClassification"),FNt.forEach(t),BPr=r(hGe," (RoFormer model)"),hGe.forEach(t),IPr=i(fe),u0=n(fe,"LI",{});var uGe=s(u0);e5e=n(uGe,"STRONG",{});var TNt=s(e5e);NPr=r(TNt,"xlm"),TNt.forEach(t),qPr=r(uGe," \u2014 "),sZ=n(uGe,"A",{href:!0});var MNt=s(sZ);jPr=r(MNt,"TFXLMForTokenClassification"),MNt.forEach(t),DPr=r(uGe," (XLM model)"),uGe.forEach(t),GPr=i(fe),p0=n(fe,"LI",{});var pGe=s(p0);o5e=n(pGe,"STRONG",{});var ENt=s(o5e);OPr=r(ENt,"xlm-roberta"),ENt.forEach(t),VPr=r(pGe," \u2014 "),lZ=n(pGe,"A",{href:!0});var CNt=s(lZ);XPr=r(CNt,"TFXLMRobertaForTokenClassification"),CNt.forEach(t),zPr=r(pGe," (XLM-RoBERTa model)"),pGe.forEach(t),QPr=i(fe),_0=n(fe,"LI",{});var _Ge=s(_0);r5e=n(_Ge,"STRONG",{});var wNt=s(r5e);WPr=r(wNt,"xlnet"),wNt.forEach(t),HPr=r(_Ge," \u2014 "),iZ=n(_Ge,"A",{href:!0});var ANt=s(iZ);UPr=r(ANt,"TFXLNetForTokenClassification"),ANt.forEach(t),JPr=r(_Ge," (XLNet model)"),_Ge.forEach(t),fe.forEach(t),YPr=i(Ul),T(b0.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),_ze=i(m),qc=n(m,"H2",{class:!0});var AWe=s(qc);v0=n(AWe,"A",{id:!0,class:!0,href:!0});var LNt=s(v0);t5e=n(LNt,"SPAN",{});var yNt=s(t5e);T(Xx.$$.fragment,yNt),yNt.forEach(t),LNt.forEach(t),KPr=i(AWe),a5e=n(AWe,"SPAN",{});var xNt=s(a5e);ZPr=r(xNt,"TFAutoModelForQuestionAnswering"),xNt.forEach(t),AWe.forEach(t),bze=i(m),fr=n(m,"DIV",{class:!0});var Jl=s(fr);T(zx.$$.fragment,Jl),eBr=i(Jl),jc=n(Jl,"P",{});var Ote=s(jc);oBr=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dZ=n(Ote,"A",{href:!0});var $Nt=s(dZ);rBr=r($Nt,"from_pretrained()"),$Nt.forEach(t),tBr=r(Ote," class method or the "),cZ=n(Ote,"A",{href:!0});var kNt=s(cZ);aBr=r(kNt,"from_config()"),kNt.forEach(t),nBr=r(Ote,` class
method.`),Ote.forEach(t),sBr=i(Jl),Qx=n(Jl,"P",{});var LWe=s(Qx);lBr=r(LWe,"This class cannot be instantiated directly using "),n5e=n(LWe,"CODE",{});var SNt=s(n5e);iBr=r(SNt,"__init__()"),SNt.forEach(t),dBr=r(LWe," (throws an error)."),LWe.forEach(t),cBr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var ML=s(Vt);T(Wx.$$.fragment,ML),mBr=i(ML),s5e=n(ML,"P",{});var RNt=s(s5e);fBr=r(RNt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),RNt.forEach(t),gBr=i(ML),Dc=n(ML,"P",{});var Vte=s(Dc);hBr=r(Vte,`Note:
Loading a model from its configuration file does `),l5e=n(Vte,"STRONG",{});var PNt=s(l5e);uBr=r(PNt,"not"),PNt.forEach(t),pBr=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),mZ=n(Vte,"A",{href:!0});var BNt=s(mZ);_Br=r(BNt,"from_pretrained()"),BNt.forEach(t),bBr=r(Vte," to load the model weights."),Vte.forEach(t),vBr=i(ML),T(F0.$$.fragment,ML),ML.forEach(t),FBr=i(Jl),Dr=n(Jl,"DIV",{class:!0});var Yl=s(Dr);T(Hx.$$.fragment,Yl),TBr=i(Yl),i5e=n(Yl,"P",{});var INt=s(i5e);MBr=r(INt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),INt.forEach(t),EBr=i(Yl),bn=n(Yl,"P",{});var EL=s(bn);CBr=r(EL,"The model class to instantiate is selected based on the "),d5e=n(EL,"CODE",{});var NNt=s(d5e);wBr=r(NNt,"model_type"),NNt.forEach(t),ABr=r(EL,` property of the config object (either
passed as an argument or loaded from `),c5e=n(EL,"CODE",{});var qNt=s(c5e);LBr=r(qNt,"pretrained_model_name_or_path"),qNt.forEach(t),yBr=r(EL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m5e=n(EL,"CODE",{});var jNt=s(m5e);xBr=r(jNt,"pretrained_model_name_or_path"),jNt.forEach(t),$Br=r(EL,":"),EL.forEach(t),kBr=i(Yl),ce=n(Yl,"UL",{});var ge=s(ce);T0=n(ge,"LI",{});var bGe=s(T0);f5e=n(bGe,"STRONG",{});var DNt=s(f5e);SBr=r(DNt,"albert"),DNt.forEach(t),RBr=r(bGe," \u2014 "),fZ=n(bGe,"A",{href:!0});var GNt=s(fZ);PBr=r(GNt,"TFAlbertForQuestionAnswering"),GNt.forEach(t),BBr=r(bGe," (ALBERT model)"),bGe.forEach(t),IBr=i(ge),M0=n(ge,"LI",{});var vGe=s(M0);g5e=n(vGe,"STRONG",{});var ONt=s(g5e);NBr=r(ONt,"bert"),ONt.forEach(t),qBr=r(vGe," \u2014 "),gZ=n(vGe,"A",{href:!0});var VNt=s(gZ);jBr=r(VNt,"TFBertForQuestionAnswering"),VNt.forEach(t),DBr=r(vGe," (BERT model)"),vGe.forEach(t),GBr=i(ge),E0=n(ge,"LI",{});var FGe=s(E0);h5e=n(FGe,"STRONG",{});var XNt=s(h5e);OBr=r(XNt,"camembert"),XNt.forEach(t),VBr=r(FGe," \u2014 "),hZ=n(FGe,"A",{href:!0});var zNt=s(hZ);XBr=r(zNt,"TFCamembertForQuestionAnswering"),zNt.forEach(t),zBr=r(FGe," (CamemBERT model)"),FGe.forEach(t),QBr=i(ge),C0=n(ge,"LI",{});var TGe=s(C0);u5e=n(TGe,"STRONG",{});var QNt=s(u5e);WBr=r(QNt,"convbert"),QNt.forEach(t),HBr=r(TGe," \u2014 "),uZ=n(TGe,"A",{href:!0});var WNt=s(uZ);UBr=r(WNt,"TFConvBertForQuestionAnswering"),WNt.forEach(t),JBr=r(TGe," (ConvBERT model)"),TGe.forEach(t),YBr=i(ge),w0=n(ge,"LI",{});var MGe=s(w0);p5e=n(MGe,"STRONG",{});var HNt=s(p5e);KBr=r(HNt,"deberta"),HNt.forEach(t),ZBr=r(MGe," \u2014 "),pZ=n(MGe,"A",{href:!0});var UNt=s(pZ);eIr=r(UNt,"TFDebertaForQuestionAnswering"),UNt.forEach(t),oIr=r(MGe," (DeBERTa model)"),MGe.forEach(t),rIr=i(ge),A0=n(ge,"LI",{});var EGe=s(A0);_5e=n(EGe,"STRONG",{});var JNt=s(_5e);tIr=r(JNt,"deberta-v2"),JNt.forEach(t),aIr=r(EGe," \u2014 "),_Z=n(EGe,"A",{href:!0});var YNt=s(_Z);nIr=r(YNt,"TFDebertaV2ForQuestionAnswering"),YNt.forEach(t),sIr=r(EGe," (DeBERTa-v2 model)"),EGe.forEach(t),lIr=i(ge),L0=n(ge,"LI",{});var CGe=s(L0);b5e=n(CGe,"STRONG",{});var KNt=s(b5e);iIr=r(KNt,"distilbert"),KNt.forEach(t),dIr=r(CGe," \u2014 "),bZ=n(CGe,"A",{href:!0});var ZNt=s(bZ);cIr=r(ZNt,"TFDistilBertForQuestionAnswering"),ZNt.forEach(t),mIr=r(CGe," (DistilBERT model)"),CGe.forEach(t),fIr=i(ge),y0=n(ge,"LI",{});var wGe=s(y0);v5e=n(wGe,"STRONG",{});var eqt=s(v5e);gIr=r(eqt,"electra"),eqt.forEach(t),hIr=r(wGe," \u2014 "),vZ=n(wGe,"A",{href:!0});var oqt=s(vZ);uIr=r(oqt,"TFElectraForQuestionAnswering"),oqt.forEach(t),pIr=r(wGe," (ELECTRA model)"),wGe.forEach(t),_Ir=i(ge),x0=n(ge,"LI",{});var AGe=s(x0);F5e=n(AGe,"STRONG",{});var rqt=s(F5e);bIr=r(rqt,"flaubert"),rqt.forEach(t),vIr=r(AGe," \u2014 "),FZ=n(AGe,"A",{href:!0});var tqt=s(FZ);FIr=r(tqt,"TFFlaubertForQuestionAnsweringSimple"),tqt.forEach(t),TIr=r(AGe," (FlauBERT model)"),AGe.forEach(t),MIr=i(ge),$0=n(ge,"LI",{});var LGe=s($0);T5e=n(LGe,"STRONG",{});var aqt=s(T5e);EIr=r(aqt,"funnel"),aqt.forEach(t),CIr=r(LGe," \u2014 "),TZ=n(LGe,"A",{href:!0});var nqt=s(TZ);wIr=r(nqt,"TFFunnelForQuestionAnswering"),nqt.forEach(t),AIr=r(LGe," (Funnel Transformer model)"),LGe.forEach(t),LIr=i(ge),k0=n(ge,"LI",{});var yGe=s(k0);M5e=n(yGe,"STRONG",{});var sqt=s(M5e);yIr=r(sqt,"gptj"),sqt.forEach(t),xIr=r(yGe," \u2014 "),MZ=n(yGe,"A",{href:!0});var lqt=s(MZ);$Ir=r(lqt,"TFGPTJForQuestionAnswering"),lqt.forEach(t),kIr=r(yGe," (GPT-J model)"),yGe.forEach(t),SIr=i(ge),S0=n(ge,"LI",{});var xGe=s(S0);E5e=n(xGe,"STRONG",{});var iqt=s(E5e);RIr=r(iqt,"longformer"),iqt.forEach(t),PIr=r(xGe," \u2014 "),EZ=n(xGe,"A",{href:!0});var dqt=s(EZ);BIr=r(dqt,"TFLongformerForQuestionAnswering"),dqt.forEach(t),IIr=r(xGe," (Longformer model)"),xGe.forEach(t),NIr=i(ge),R0=n(ge,"LI",{});var $Ge=s(R0);C5e=n($Ge,"STRONG",{});var cqt=s(C5e);qIr=r(cqt,"mobilebert"),cqt.forEach(t),jIr=r($Ge," \u2014 "),CZ=n($Ge,"A",{href:!0});var mqt=s(CZ);DIr=r(mqt,"TFMobileBertForQuestionAnswering"),mqt.forEach(t),GIr=r($Ge," (MobileBERT model)"),$Ge.forEach(t),OIr=i(ge),P0=n(ge,"LI",{});var kGe=s(P0);w5e=n(kGe,"STRONG",{});var fqt=s(w5e);VIr=r(fqt,"mpnet"),fqt.forEach(t),XIr=r(kGe," \u2014 "),wZ=n(kGe,"A",{href:!0});var gqt=s(wZ);zIr=r(gqt,"TFMPNetForQuestionAnswering"),gqt.forEach(t),QIr=r(kGe," (MPNet model)"),kGe.forEach(t),WIr=i(ge),B0=n(ge,"LI",{});var SGe=s(B0);A5e=n(SGe,"STRONG",{});var hqt=s(A5e);HIr=r(hqt,"rembert"),hqt.forEach(t),UIr=r(SGe," \u2014 "),AZ=n(SGe,"A",{href:!0});var uqt=s(AZ);JIr=r(uqt,"TFRemBertForQuestionAnswering"),uqt.forEach(t),YIr=r(SGe," (RemBERT model)"),SGe.forEach(t),KIr=i(ge),I0=n(ge,"LI",{});var RGe=s(I0);L5e=n(RGe,"STRONG",{});var pqt=s(L5e);ZIr=r(pqt,"roberta"),pqt.forEach(t),eNr=r(RGe," \u2014 "),LZ=n(RGe,"A",{href:!0});var _qt=s(LZ);oNr=r(_qt,"TFRobertaForQuestionAnswering"),_qt.forEach(t),rNr=r(RGe," (RoBERTa model)"),RGe.forEach(t),tNr=i(ge),N0=n(ge,"LI",{});var PGe=s(N0);y5e=n(PGe,"STRONG",{});var bqt=s(y5e);aNr=r(bqt,"roformer"),bqt.forEach(t),nNr=r(PGe," \u2014 "),yZ=n(PGe,"A",{href:!0});var vqt=s(yZ);sNr=r(vqt,"TFRoFormerForQuestionAnswering"),vqt.forEach(t),lNr=r(PGe," (RoFormer model)"),PGe.forEach(t),iNr=i(ge),q0=n(ge,"LI",{});var BGe=s(q0);x5e=n(BGe,"STRONG",{});var Fqt=s(x5e);dNr=r(Fqt,"xlm"),Fqt.forEach(t),cNr=r(BGe," \u2014 "),xZ=n(BGe,"A",{href:!0});var Tqt=s(xZ);mNr=r(Tqt,"TFXLMForQuestionAnsweringSimple"),Tqt.forEach(t),fNr=r(BGe," (XLM model)"),BGe.forEach(t),gNr=i(ge),j0=n(ge,"LI",{});var IGe=s(j0);$5e=n(IGe,"STRONG",{});var Mqt=s($5e);hNr=r(Mqt,"xlm-roberta"),Mqt.forEach(t),uNr=r(IGe," \u2014 "),$Z=n(IGe,"A",{href:!0});var Eqt=s($Z);pNr=r(Eqt,"TFXLMRobertaForQuestionAnswering"),Eqt.forEach(t),_Nr=r(IGe," (XLM-RoBERTa model)"),IGe.forEach(t),bNr=i(ge),D0=n(ge,"LI",{});var NGe=s(D0);k5e=n(NGe,"STRONG",{});var Cqt=s(k5e);vNr=r(Cqt,"xlnet"),Cqt.forEach(t),FNr=r(NGe," \u2014 "),kZ=n(NGe,"A",{href:!0});var wqt=s(kZ);TNr=r(wqt,"TFXLNetForQuestionAnsweringSimple"),wqt.forEach(t),MNr=r(NGe," (XLNet model)"),NGe.forEach(t),ge.forEach(t),ENr=i(Yl),T(G0.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),vze=i(m),Gc=n(m,"H2",{class:!0});var yWe=s(Gc);O0=n(yWe,"A",{id:!0,class:!0,href:!0});var Aqt=s(O0);S5e=n(Aqt,"SPAN",{});var Lqt=s(S5e);T(Ux.$$.fragment,Lqt),Lqt.forEach(t),Aqt.forEach(t),CNr=i(yWe),R5e=n(yWe,"SPAN",{});var yqt=s(R5e);wNr=r(yqt,"TFAutoModelForVision2Seq"),yqt.forEach(t),yWe.forEach(t),Fze=i(m),gr=n(m,"DIV",{class:!0});var Kl=s(gr);T(Jx.$$.fragment,Kl),ANr=i(Kl),Oc=n(Kl,"P",{});var Xte=s(Oc);LNr=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),SZ=n(Xte,"A",{href:!0});var xqt=s(SZ);yNr=r(xqt,"from_pretrained()"),xqt.forEach(t),xNr=r(Xte," class method or the "),RZ=n(Xte,"A",{href:!0});var $qt=s(RZ);$Nr=r($qt,"from_config()"),$qt.forEach(t),kNr=r(Xte,` class
method.`),Xte.forEach(t),SNr=i(Kl),Yx=n(Kl,"P",{});var xWe=s(Yx);RNr=r(xWe,"This class cannot be instantiated directly using "),P5e=n(xWe,"CODE",{});var kqt=s(P5e);PNr=r(kqt,"__init__()"),kqt.forEach(t),BNr=r(xWe," (throws an error)."),xWe.forEach(t),INr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var CL=s(Xt);T(Kx.$$.fragment,CL),NNr=i(CL),B5e=n(CL,"P",{});var Sqt=s(B5e);qNr=r(Sqt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Sqt.forEach(t),jNr=i(CL),Vc=n(CL,"P",{});var zte=s(Vc);DNr=r(zte,`Note:
Loading a model from its configuration file does `),I5e=n(zte,"STRONG",{});var Rqt=s(I5e);GNr=r(Rqt,"not"),Rqt.forEach(t),ONr=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=n(zte,"A",{href:!0});var Pqt=s(PZ);VNr=r(Pqt,"from_pretrained()"),Pqt.forEach(t),XNr=r(zte," to load the model weights."),zte.forEach(t),zNr=i(CL),T(V0.$$.fragment,CL),CL.forEach(t),QNr=i(Kl),Gr=n(Kl,"DIV",{class:!0});var Zl=s(Gr);T(Zx.$$.fragment,Zl),WNr=i(Zl),N5e=n(Zl,"P",{});var Bqt=s(N5e);HNr=r(Bqt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Bqt.forEach(t),UNr=i(Zl),vn=n(Zl,"P",{});var wL=s(vn);JNr=r(wL,"The model class to instantiate is selected based on the "),q5e=n(wL,"CODE",{});var Iqt=s(q5e);YNr=r(Iqt,"model_type"),Iqt.forEach(t),KNr=r(wL,` property of the config object (either
passed as an argument or loaded from `),j5e=n(wL,"CODE",{});var Nqt=s(j5e);ZNr=r(Nqt,"pretrained_model_name_or_path"),Nqt.forEach(t),eqr=r(wL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D5e=n(wL,"CODE",{});var qqt=s(D5e);oqr=r(qqt,"pretrained_model_name_or_path"),qqt.forEach(t),rqr=r(wL,":"),wL.forEach(t),tqr=i(Zl),G5e=n(Zl,"UL",{});var jqt=s(G5e);X0=n(jqt,"LI",{});var qGe=s(X0);O5e=n(qGe,"STRONG",{});var Dqt=s(O5e);aqr=r(Dqt,"vision-encoder-decoder"),Dqt.forEach(t),nqr=r(qGe," \u2014 "),BZ=n(qGe,"A",{href:!0});var Gqt=s(BZ);sqr=r(Gqt,"TFVisionEncoderDecoderModel"),Gqt.forEach(t),lqr=r(qGe," (Vision Encoder decoder model)"),qGe.forEach(t),jqt.forEach(t),iqr=i(Zl),T(z0.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),Tze=i(m),Xc=n(m,"H2",{class:!0});var $We=s(Xc);Q0=n($We,"A",{id:!0,class:!0,href:!0});var Oqt=s(Q0);V5e=n(Oqt,"SPAN",{});var Vqt=s(V5e);T(e$.$$.fragment,Vqt),Vqt.forEach(t),Oqt.forEach(t),dqr=i($We),X5e=n($We,"SPAN",{});var Xqt=s(X5e);cqr=r(Xqt,"TFAutoModelForSpeechSeq2Seq"),Xqt.forEach(t),$We.forEach(t),Mze=i(m),hr=n(m,"DIV",{class:!0});var ei=s(hr);T(o$.$$.fragment,ei),mqr=i(ei),zc=n(ei,"P",{});var Qte=s(zc);fqr=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),IZ=n(Qte,"A",{href:!0});var zqt=s(IZ);gqr=r(zqt,"from_pretrained()"),zqt.forEach(t),hqr=r(Qte," class method or the "),NZ=n(Qte,"A",{href:!0});var Qqt=s(NZ);uqr=r(Qqt,"from_config()"),Qqt.forEach(t),pqr=r(Qte,` class
method.`),Qte.forEach(t),_qr=i(ei),r$=n(ei,"P",{});var kWe=s(r$);bqr=r(kWe,"This class cannot be instantiated directly using "),z5e=n(kWe,"CODE",{});var Wqt=s(z5e);vqr=r(Wqt,"__init__()"),Wqt.forEach(t),Fqr=r(kWe," (throws an error)."),kWe.forEach(t),Tqr=i(ei),zt=n(ei,"DIV",{class:!0});var AL=s(zt);T(t$.$$.fragment,AL),Mqr=i(AL),Q5e=n(AL,"P",{});var Hqt=s(Q5e);Eqr=r(Hqt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Hqt.forEach(t),Cqr=i(AL),Qc=n(AL,"P",{});var Wte=s(Qc);wqr=r(Wte,`Note:
Loading a model from its configuration file does `),W5e=n(Wte,"STRONG",{});var Uqt=s(W5e);Aqr=r(Uqt,"not"),Uqt.forEach(t),Lqr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=n(Wte,"A",{href:!0});var Jqt=s(qZ);yqr=r(Jqt,"from_pretrained()"),Jqt.forEach(t),xqr=r(Wte," to load the model weights."),Wte.forEach(t),$qr=i(AL),T(W0.$$.fragment,AL),AL.forEach(t),kqr=i(ei),Or=n(ei,"DIV",{class:!0});var oi=s(Or);T(a$.$$.fragment,oi),Sqr=i(oi),H5e=n(oi,"P",{});var Yqt=s(H5e);Rqr=r(Yqt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Yqt.forEach(t),Pqr=i(oi),Fn=n(oi,"P",{});var LL=s(Fn);Bqr=r(LL,"The model class to instantiate is selected based on the "),U5e=n(LL,"CODE",{});var Kqt=s(U5e);Iqr=r(Kqt,"model_type"),Kqt.forEach(t),Nqr=r(LL,` property of the config object (either
passed as an argument or loaded from `),J5e=n(LL,"CODE",{});var Zqt=s(J5e);qqr=r(Zqt,"pretrained_model_name_or_path"),Zqt.forEach(t),jqr=r(LL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y5e=n(LL,"CODE",{});var ejt=s(Y5e);Dqr=r(ejt,"pretrained_model_name_or_path"),ejt.forEach(t),Gqr=r(LL,":"),LL.forEach(t),Oqr=i(oi),K5e=n(oi,"UL",{});var ojt=s(K5e);H0=n(ojt,"LI",{});var jGe=s(H0);Z5e=n(jGe,"STRONG",{});var rjt=s(Z5e);Vqr=r(rjt,"speech_to_text"),rjt.forEach(t),Xqr=r(jGe," \u2014 "),jZ=n(jGe,"A",{href:!0});var tjt=s(jZ);zqr=r(tjt,"TFSpeech2TextForConditionalGeneration"),tjt.forEach(t),Qqr=r(jGe," (Speech2Text model)"),jGe.forEach(t),ojt.forEach(t),Wqr=i(oi),T(U0.$$.fragment,oi),oi.forEach(t),ei.forEach(t),Eze=i(m),Wc=n(m,"H2",{class:!0});var SWe=s(Wc);J0=n(SWe,"A",{id:!0,class:!0,href:!0});var ajt=s(J0);e0e=n(ajt,"SPAN",{});var njt=s(e0e);T(n$.$$.fragment,njt),njt.forEach(t),ajt.forEach(t),Hqr=i(SWe),o0e=n(SWe,"SPAN",{});var sjt=s(o0e);Uqr=r(sjt,"FlaxAutoModel"),sjt.forEach(t),SWe.forEach(t),Cze=i(m),ur=n(m,"DIV",{class:!0});var ri=s(ur);T(s$.$$.fragment,ri),Jqr=i(ri),Hc=n(ri,"P",{});var Hte=s(Hc);Yqr=r(Hte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DZ=n(Hte,"A",{href:!0});var ljt=s(DZ);Kqr=r(ljt,"from_pretrained()"),ljt.forEach(t),Zqr=r(Hte," class method or the "),GZ=n(Hte,"A",{href:!0});var ijt=s(GZ);ejr=r(ijt,"from_config()"),ijt.forEach(t),ojr=r(Hte,` class
method.`),Hte.forEach(t),rjr=i(ri),l$=n(ri,"P",{});var RWe=s(l$);tjr=r(RWe,"This class cannot be instantiated directly using "),r0e=n(RWe,"CODE",{});var djt=s(r0e);ajr=r(djt,"__init__()"),djt.forEach(t),njr=r(RWe," (throws an error)."),RWe.forEach(t),sjr=i(ri),Qt=n(ri,"DIV",{class:!0});var yL=s(Qt);T(i$.$$.fragment,yL),ljr=i(yL),t0e=n(yL,"P",{});var cjt=s(t0e);ijr=r(cjt,"Instantiates one of the base model classes of the library from a configuration."),cjt.forEach(t),djr=i(yL),Uc=n(yL,"P",{});var Ute=s(Uc);cjr=r(Ute,`Note:
Loading a model from its configuration file does `),a0e=n(Ute,"STRONG",{});var mjt=s(a0e);mjr=r(mjt,"not"),mjt.forEach(t),fjr=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=n(Ute,"A",{href:!0});var fjt=s(OZ);gjr=r(fjt,"from_pretrained()"),fjt.forEach(t),hjr=r(Ute," to load the model weights."),Ute.forEach(t),ujr=i(yL),T(Y0.$$.fragment,yL),yL.forEach(t),pjr=i(ri),Vr=n(ri,"DIV",{class:!0});var ti=s(Vr);T(d$.$$.fragment,ti),_jr=i(ti),n0e=n(ti,"P",{});var gjt=s(n0e);bjr=r(gjt,"Instantiate one of the base model classes of the library from a pretrained model."),gjt.forEach(t),vjr=i(ti),Tn=n(ti,"P",{});var xL=s(Tn);Fjr=r(xL,"The model class to instantiate is selected based on the "),s0e=n(xL,"CODE",{});var hjt=s(s0e);Tjr=r(hjt,"model_type"),hjt.forEach(t),Mjr=r(xL,` property of the config object (either
passed as an argument or loaded from `),l0e=n(xL,"CODE",{});var ujt=s(l0e);Ejr=r(ujt,"pretrained_model_name_or_path"),ujt.forEach(t),Cjr=r(xL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i0e=n(xL,"CODE",{});var pjt=s(i0e);wjr=r(pjt,"pretrained_model_name_or_path"),pjt.forEach(t),Ajr=r(xL,":"),xL.forEach(t),Ljr=i(ti),oe=n(ti,"UL",{});var ae=s(oe);K0=n(ae,"LI",{});var DGe=s(K0);d0e=n(DGe,"STRONG",{});var _jt=s(d0e);yjr=r(_jt,"albert"),_jt.forEach(t),xjr=r(DGe," \u2014 "),VZ=n(DGe,"A",{href:!0});var bjt=s(VZ);$jr=r(bjt,"FlaxAlbertModel"),bjt.forEach(t),kjr=r(DGe," (ALBERT model)"),DGe.forEach(t),Sjr=i(ae),Z0=n(ae,"LI",{});var GGe=s(Z0);c0e=n(GGe,"STRONG",{});var vjt=s(c0e);Rjr=r(vjt,"bart"),vjt.forEach(t),Pjr=r(GGe," \u2014 "),XZ=n(GGe,"A",{href:!0});var Fjt=s(XZ);Bjr=r(Fjt,"FlaxBartModel"),Fjt.forEach(t),Ijr=r(GGe," (BART model)"),GGe.forEach(t),Njr=i(ae),ew=n(ae,"LI",{});var OGe=s(ew);m0e=n(OGe,"STRONG",{});var Tjt=s(m0e);qjr=r(Tjt,"beit"),Tjt.forEach(t),jjr=r(OGe," \u2014 "),zZ=n(OGe,"A",{href:!0});var Mjt=s(zZ);Djr=r(Mjt,"FlaxBeitModel"),Mjt.forEach(t),Gjr=r(OGe," (BEiT model)"),OGe.forEach(t),Ojr=i(ae),ow=n(ae,"LI",{});var VGe=s(ow);f0e=n(VGe,"STRONG",{});var Ejt=s(f0e);Vjr=r(Ejt,"bert"),Ejt.forEach(t),Xjr=r(VGe," \u2014 "),QZ=n(VGe,"A",{href:!0});var Cjt=s(QZ);zjr=r(Cjt,"FlaxBertModel"),Cjt.forEach(t),Qjr=r(VGe," (BERT model)"),VGe.forEach(t),Wjr=i(ae),rw=n(ae,"LI",{});var XGe=s(rw);g0e=n(XGe,"STRONG",{});var wjt=s(g0e);Hjr=r(wjt,"big_bird"),wjt.forEach(t),Ujr=r(XGe," \u2014 "),WZ=n(XGe,"A",{href:!0});var Ajt=s(WZ);Jjr=r(Ajt,"FlaxBigBirdModel"),Ajt.forEach(t),Yjr=r(XGe," (BigBird model)"),XGe.forEach(t),Kjr=i(ae),tw=n(ae,"LI",{});var zGe=s(tw);h0e=n(zGe,"STRONG",{});var Ljt=s(h0e);Zjr=r(Ljt,"blenderbot"),Ljt.forEach(t),eDr=r(zGe," \u2014 "),HZ=n(zGe,"A",{href:!0});var yjt=s(HZ);oDr=r(yjt,"FlaxBlenderbotModel"),yjt.forEach(t),rDr=r(zGe," (Blenderbot model)"),zGe.forEach(t),tDr=i(ae),aw=n(ae,"LI",{});var QGe=s(aw);u0e=n(QGe,"STRONG",{});var xjt=s(u0e);aDr=r(xjt,"blenderbot-small"),xjt.forEach(t),nDr=r(QGe," \u2014 "),UZ=n(QGe,"A",{href:!0});var $jt=s(UZ);sDr=r($jt,"FlaxBlenderbotSmallModel"),$jt.forEach(t),lDr=r(QGe," (BlenderbotSmall model)"),QGe.forEach(t),iDr=i(ae),nw=n(ae,"LI",{});var WGe=s(nw);p0e=n(WGe,"STRONG",{});var kjt=s(p0e);dDr=r(kjt,"clip"),kjt.forEach(t),cDr=r(WGe," \u2014 "),JZ=n(WGe,"A",{href:!0});var Sjt=s(JZ);mDr=r(Sjt,"FlaxCLIPModel"),Sjt.forEach(t),fDr=r(WGe," (CLIP model)"),WGe.forEach(t),gDr=i(ae),sw=n(ae,"LI",{});var HGe=s(sw);_0e=n(HGe,"STRONG",{});var Rjt=s(_0e);hDr=r(Rjt,"distilbert"),Rjt.forEach(t),uDr=r(HGe," \u2014 "),YZ=n(HGe,"A",{href:!0});var Pjt=s(YZ);pDr=r(Pjt,"FlaxDistilBertModel"),Pjt.forEach(t),_Dr=r(HGe," (DistilBERT model)"),HGe.forEach(t),bDr=i(ae),lw=n(ae,"LI",{});var UGe=s(lw);b0e=n(UGe,"STRONG",{});var Bjt=s(b0e);vDr=r(Bjt,"electra"),Bjt.forEach(t),FDr=r(UGe," \u2014 "),KZ=n(UGe,"A",{href:!0});var Ijt=s(KZ);TDr=r(Ijt,"FlaxElectraModel"),Ijt.forEach(t),MDr=r(UGe," (ELECTRA model)"),UGe.forEach(t),EDr=i(ae),iw=n(ae,"LI",{});var JGe=s(iw);v0e=n(JGe,"STRONG",{});var Njt=s(v0e);CDr=r(Njt,"gpt2"),Njt.forEach(t),wDr=r(JGe," \u2014 "),ZZ=n(JGe,"A",{href:!0});var qjt=s(ZZ);ADr=r(qjt,"FlaxGPT2Model"),qjt.forEach(t),LDr=r(JGe," (OpenAI GPT-2 model)"),JGe.forEach(t),yDr=i(ae),dw=n(ae,"LI",{});var YGe=s(dw);F0e=n(YGe,"STRONG",{});var jjt=s(F0e);xDr=r(jjt,"gpt_neo"),jjt.forEach(t),$Dr=r(YGe," \u2014 "),eee=n(YGe,"A",{href:!0});var Djt=s(eee);kDr=r(Djt,"FlaxGPTNeoModel"),Djt.forEach(t),SDr=r(YGe," (GPT Neo model)"),YGe.forEach(t),RDr=i(ae),cw=n(ae,"LI",{});var KGe=s(cw);T0e=n(KGe,"STRONG",{});var Gjt=s(T0e);PDr=r(Gjt,"gptj"),Gjt.forEach(t),BDr=r(KGe," \u2014 "),oee=n(KGe,"A",{href:!0});var Ojt=s(oee);IDr=r(Ojt,"FlaxGPTJModel"),Ojt.forEach(t),NDr=r(KGe," (GPT-J model)"),KGe.forEach(t),qDr=i(ae),mw=n(ae,"LI",{});var ZGe=s(mw);M0e=n(ZGe,"STRONG",{});var Vjt=s(M0e);jDr=r(Vjt,"longt5"),Vjt.forEach(t),DDr=r(ZGe," \u2014 "),ree=n(ZGe,"A",{href:!0});var Xjt=s(ree);GDr=r(Xjt,"FlaxLongT5Model"),Xjt.forEach(t),ODr=r(ZGe," (LongT5 model)"),ZGe.forEach(t),VDr=i(ae),fw=n(ae,"LI",{});var eOe=s(fw);E0e=n(eOe,"STRONG",{});var zjt=s(E0e);XDr=r(zjt,"marian"),zjt.forEach(t),zDr=r(eOe," \u2014 "),tee=n(eOe,"A",{href:!0});var Qjt=s(tee);QDr=r(Qjt,"FlaxMarianModel"),Qjt.forEach(t),WDr=r(eOe," (Marian model)"),eOe.forEach(t),HDr=i(ae),gw=n(ae,"LI",{});var oOe=s(gw);C0e=n(oOe,"STRONG",{});var Wjt=s(C0e);UDr=r(Wjt,"mbart"),Wjt.forEach(t),JDr=r(oOe," \u2014 "),aee=n(oOe,"A",{href:!0});var Hjt=s(aee);YDr=r(Hjt,"FlaxMBartModel"),Hjt.forEach(t),KDr=r(oOe," (mBART model)"),oOe.forEach(t),ZDr=i(ae),hw=n(ae,"LI",{});var rOe=s(hw);w0e=n(rOe,"STRONG",{});var Ujt=s(w0e);eGr=r(Ujt,"mt5"),Ujt.forEach(t),oGr=r(rOe," \u2014 "),nee=n(rOe,"A",{href:!0});var Jjt=s(nee);rGr=r(Jjt,"FlaxMT5Model"),Jjt.forEach(t),tGr=r(rOe," (MT5 model)"),rOe.forEach(t),aGr=i(ae),uw=n(ae,"LI",{});var tOe=s(uw);A0e=n(tOe,"STRONG",{});var Yjt=s(A0e);nGr=r(Yjt,"opt"),Yjt.forEach(t),sGr=r(tOe," \u2014 "),see=n(tOe,"A",{href:!0});var Kjt=s(see);lGr=r(Kjt,"FlaxOPTModel"),Kjt.forEach(t),iGr=r(tOe," (OPT model)"),tOe.forEach(t),dGr=i(ae),pw=n(ae,"LI",{});var aOe=s(pw);L0e=n(aOe,"STRONG",{});var Zjt=s(L0e);cGr=r(Zjt,"pegasus"),Zjt.forEach(t),mGr=r(aOe," \u2014 "),lee=n(aOe,"A",{href:!0});var eDt=s(lee);fGr=r(eDt,"FlaxPegasusModel"),eDt.forEach(t),gGr=r(aOe," (Pegasus model)"),aOe.forEach(t),hGr=i(ae),_w=n(ae,"LI",{});var nOe=s(_w);y0e=n(nOe,"STRONG",{});var oDt=s(y0e);uGr=r(oDt,"roberta"),oDt.forEach(t),pGr=r(nOe," \u2014 "),iee=n(nOe,"A",{href:!0});var rDt=s(iee);_Gr=r(rDt,"FlaxRobertaModel"),rDt.forEach(t),bGr=r(nOe," (RoBERTa model)"),nOe.forEach(t),vGr=i(ae),bw=n(ae,"LI",{});var sOe=s(bw);x0e=n(sOe,"STRONG",{});var tDt=s(x0e);FGr=r(tDt,"roformer"),tDt.forEach(t),TGr=r(sOe," \u2014 "),dee=n(sOe,"A",{href:!0});var aDt=s(dee);MGr=r(aDt,"FlaxRoFormerModel"),aDt.forEach(t),EGr=r(sOe," (RoFormer model)"),sOe.forEach(t),CGr=i(ae),vw=n(ae,"LI",{});var lOe=s(vw);$0e=n(lOe,"STRONG",{});var nDt=s($0e);wGr=r(nDt,"t5"),nDt.forEach(t),AGr=r(lOe," \u2014 "),cee=n(lOe,"A",{href:!0});var sDt=s(cee);LGr=r(sDt,"FlaxT5Model"),sDt.forEach(t),yGr=r(lOe," (T5 model)"),lOe.forEach(t),xGr=i(ae),Fw=n(ae,"LI",{});var iOe=s(Fw);k0e=n(iOe,"STRONG",{});var lDt=s(k0e);$Gr=r(lDt,"vision-text-dual-encoder"),lDt.forEach(t),kGr=r(iOe," \u2014 "),mee=n(iOe,"A",{href:!0});var iDt=s(mee);SGr=r(iDt,"FlaxVisionTextDualEncoderModel"),iDt.forEach(t),RGr=r(iOe," (VisionTextDualEncoder model)"),iOe.forEach(t),PGr=i(ae),Tw=n(ae,"LI",{});var dOe=s(Tw);S0e=n(dOe,"STRONG",{});var dDt=s(S0e);BGr=r(dDt,"vit"),dDt.forEach(t),IGr=r(dOe," \u2014 "),fee=n(dOe,"A",{href:!0});var cDt=s(fee);NGr=r(cDt,"FlaxViTModel"),cDt.forEach(t),qGr=r(dOe," (ViT model)"),dOe.forEach(t),jGr=i(ae),Mw=n(ae,"LI",{});var cOe=s(Mw);R0e=n(cOe,"STRONG",{});var mDt=s(R0e);DGr=r(mDt,"wav2vec2"),mDt.forEach(t),GGr=r(cOe," \u2014 "),gee=n(cOe,"A",{href:!0});var fDt=s(gee);OGr=r(fDt,"FlaxWav2Vec2Model"),fDt.forEach(t),VGr=r(cOe," (Wav2Vec2 model)"),cOe.forEach(t),XGr=i(ae),Ew=n(ae,"LI",{});var mOe=s(Ew);P0e=n(mOe,"STRONG",{});var gDt=s(P0e);zGr=r(gDt,"xglm"),gDt.forEach(t),QGr=r(mOe," \u2014 "),hee=n(mOe,"A",{href:!0});var hDt=s(hee);WGr=r(hDt,"FlaxXGLMModel"),hDt.forEach(t),HGr=r(mOe," (XGLM model)"),mOe.forEach(t),UGr=i(ae),Cw=n(ae,"LI",{});var fOe=s(Cw);B0e=n(fOe,"STRONG",{});var uDt=s(B0e);JGr=r(uDt,"xlm-roberta"),uDt.forEach(t),YGr=r(fOe," \u2014 "),uee=n(fOe,"A",{href:!0});var pDt=s(uee);KGr=r(pDt,"FlaxXLMRobertaModel"),pDt.forEach(t),ZGr=r(fOe," (XLM-RoBERTa model)"),fOe.forEach(t),ae.forEach(t),eOr=i(ti),T(ww.$$.fragment,ti),ti.forEach(t),ri.forEach(t),wze=i(m),Jc=n(m,"H2",{class:!0});var PWe=s(Jc);Aw=n(PWe,"A",{id:!0,class:!0,href:!0});var _Dt=s(Aw);I0e=n(_Dt,"SPAN",{});var bDt=s(I0e);T(c$.$$.fragment,bDt),bDt.forEach(t),_Dt.forEach(t),oOr=i(PWe),N0e=n(PWe,"SPAN",{});var vDt=s(N0e);rOr=r(vDt,"FlaxAutoModelForCausalLM"),vDt.forEach(t),PWe.forEach(t),Aze=i(m),pr=n(m,"DIV",{class:!0});var ai=s(pr);T(m$.$$.fragment,ai),tOr=i(ai),Yc=n(ai,"P",{});var Jte=s(Yc);aOr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),pee=n(Jte,"A",{href:!0});var FDt=s(pee);nOr=r(FDt,"from_pretrained()"),FDt.forEach(t),sOr=r(Jte," class method or the "),_ee=n(Jte,"A",{href:!0});var TDt=s(_ee);lOr=r(TDt,"from_config()"),TDt.forEach(t),iOr=r(Jte,` class
method.`),Jte.forEach(t),dOr=i(ai),f$=n(ai,"P",{});var BWe=s(f$);cOr=r(BWe,"This class cannot be instantiated directly using "),q0e=n(BWe,"CODE",{});var MDt=s(q0e);mOr=r(MDt,"__init__()"),MDt.forEach(t),fOr=r(BWe," (throws an error)."),BWe.forEach(t),gOr=i(ai),Wt=n(ai,"DIV",{class:!0});var $L=s(Wt);T(g$.$$.fragment,$L),hOr=i($L),j0e=n($L,"P",{});var EDt=s(j0e);uOr=r(EDt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),EDt.forEach(t),pOr=i($L),Kc=n($L,"P",{});var Yte=s(Kc);_Or=r(Yte,`Note:
Loading a model from its configuration file does `),D0e=n(Yte,"STRONG",{});var CDt=s(D0e);bOr=r(CDt,"not"),CDt.forEach(t),vOr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),bee=n(Yte,"A",{href:!0});var wDt=s(bee);FOr=r(wDt,"from_pretrained()"),wDt.forEach(t),TOr=r(Yte," to load the model weights."),Yte.forEach(t),MOr=i($L),T(Lw.$$.fragment,$L),$L.forEach(t),EOr=i(ai),Xr=n(ai,"DIV",{class:!0});var ni=s(Xr);T(h$.$$.fragment,ni),COr=i(ni),G0e=n(ni,"P",{});var ADt=s(G0e);wOr=r(ADt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ADt.forEach(t),AOr=i(ni),Mn=n(ni,"P",{});var kL=s(Mn);LOr=r(kL,"The model class to instantiate is selected based on the "),O0e=n(kL,"CODE",{});var LDt=s(O0e);yOr=r(LDt,"model_type"),LDt.forEach(t),xOr=r(kL,` property of the config object (either
passed as an argument or loaded from `),V0e=n(kL,"CODE",{});var yDt=s(V0e);$Or=r(yDt,"pretrained_model_name_or_path"),yDt.forEach(t),kOr=r(kL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X0e=n(kL,"CODE",{});var xDt=s(X0e);SOr=r(xDt,"pretrained_model_name_or_path"),xDt.forEach(t),ROr=r(kL,":"),kL.forEach(t),POr=i(ni),xe=n(ni,"UL",{});var Ne=s(xe);yw=n(Ne,"LI",{});var gOe=s(yw);z0e=n(gOe,"STRONG",{});var $Dt=s(z0e);BOr=r($Dt,"bart"),$Dt.forEach(t),IOr=r(gOe," \u2014 "),vee=n(gOe,"A",{href:!0});var kDt=s(vee);NOr=r(kDt,"FlaxBartForCausalLM"),kDt.forEach(t),qOr=r(gOe," (BART model)"),gOe.forEach(t),jOr=i(Ne),xw=n(Ne,"LI",{});var hOe=s(xw);Q0e=n(hOe,"STRONG",{});var SDt=s(Q0e);DOr=r(SDt,"bert"),SDt.forEach(t),GOr=r(hOe," \u2014 "),Fee=n(hOe,"A",{href:!0});var RDt=s(Fee);OOr=r(RDt,"FlaxBertForCausalLM"),RDt.forEach(t),VOr=r(hOe," (BERT model)"),hOe.forEach(t),XOr=i(Ne),$w=n(Ne,"LI",{});var uOe=s($w);W0e=n(uOe,"STRONG",{});var PDt=s(W0e);zOr=r(PDt,"big_bird"),PDt.forEach(t),QOr=r(uOe," \u2014 "),Tee=n(uOe,"A",{href:!0});var BDt=s(Tee);WOr=r(BDt,"FlaxBigBirdForCausalLM"),BDt.forEach(t),HOr=r(uOe," (BigBird model)"),uOe.forEach(t),UOr=i(Ne),kw=n(Ne,"LI",{});var pOe=s(kw);H0e=n(pOe,"STRONG",{});var IDt=s(H0e);JOr=r(IDt,"electra"),IDt.forEach(t),YOr=r(pOe," \u2014 "),Mee=n(pOe,"A",{href:!0});var NDt=s(Mee);KOr=r(NDt,"FlaxElectraForCausalLM"),NDt.forEach(t),ZOr=r(pOe," (ELECTRA model)"),pOe.forEach(t),eVr=i(Ne),Sw=n(Ne,"LI",{});var _Oe=s(Sw);U0e=n(_Oe,"STRONG",{});var qDt=s(U0e);oVr=r(qDt,"gpt2"),qDt.forEach(t),rVr=r(_Oe," \u2014 "),Eee=n(_Oe,"A",{href:!0});var jDt=s(Eee);tVr=r(jDt,"FlaxGPT2LMHeadModel"),jDt.forEach(t),aVr=r(_Oe," (OpenAI GPT-2 model)"),_Oe.forEach(t),nVr=i(Ne),Rw=n(Ne,"LI",{});var bOe=s(Rw);J0e=n(bOe,"STRONG",{});var DDt=s(J0e);sVr=r(DDt,"gpt_neo"),DDt.forEach(t),lVr=r(bOe," \u2014 "),Cee=n(bOe,"A",{href:!0});var GDt=s(Cee);iVr=r(GDt,"FlaxGPTNeoForCausalLM"),GDt.forEach(t),dVr=r(bOe," (GPT Neo model)"),bOe.forEach(t),cVr=i(Ne),Pw=n(Ne,"LI",{});var vOe=s(Pw);Y0e=n(vOe,"STRONG",{});var ODt=s(Y0e);mVr=r(ODt,"gptj"),ODt.forEach(t),fVr=r(vOe," \u2014 "),wee=n(vOe,"A",{href:!0});var VDt=s(wee);gVr=r(VDt,"FlaxGPTJForCausalLM"),VDt.forEach(t),hVr=r(vOe," (GPT-J model)"),vOe.forEach(t),uVr=i(Ne),Bw=n(Ne,"LI",{});var FOe=s(Bw);K0e=n(FOe,"STRONG",{});var XDt=s(K0e);pVr=r(XDt,"opt"),XDt.forEach(t),_Vr=r(FOe," \u2014 "),Aee=n(FOe,"A",{href:!0});var zDt=s(Aee);bVr=r(zDt,"FlaxOPTForCausalLM"),zDt.forEach(t),vVr=r(FOe," (OPT model)"),FOe.forEach(t),FVr=i(Ne),Iw=n(Ne,"LI",{});var TOe=s(Iw);Z0e=n(TOe,"STRONG",{});var QDt=s(Z0e);TVr=r(QDt,"roberta"),QDt.forEach(t),MVr=r(TOe," \u2014 "),Lee=n(TOe,"A",{href:!0});var WDt=s(Lee);EVr=r(WDt,"FlaxRobertaForCausalLM"),WDt.forEach(t),CVr=r(TOe," (RoBERTa model)"),TOe.forEach(t),wVr=i(Ne),Nw=n(Ne,"LI",{});var MOe=s(Nw);ewe=n(MOe,"STRONG",{});var HDt=s(ewe);AVr=r(HDt,"xglm"),HDt.forEach(t),LVr=r(MOe," \u2014 "),yee=n(MOe,"A",{href:!0});var UDt=s(yee);yVr=r(UDt,"FlaxXGLMForCausalLM"),UDt.forEach(t),xVr=r(MOe," (XGLM model)"),MOe.forEach(t),Ne.forEach(t),$Vr=i(ni),T(qw.$$.fragment,ni),ni.forEach(t),ai.forEach(t),Lze=i(m),Zc=n(m,"H2",{class:!0});var IWe=s(Zc);jw=n(IWe,"A",{id:!0,class:!0,href:!0});var JDt=s(jw);owe=n(JDt,"SPAN",{});var YDt=s(owe);T(u$.$$.fragment,YDt),YDt.forEach(t),JDt.forEach(t),kVr=i(IWe),rwe=n(IWe,"SPAN",{});var KDt=s(rwe);SVr=r(KDt,"FlaxAutoModelForPreTraining"),KDt.forEach(t),IWe.forEach(t),yze=i(m),_r=n(m,"DIV",{class:!0});var si=s(_r);T(p$.$$.fragment,si),RVr=i(si),em=n(si,"P",{});var Kte=s(em);PVr=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xee=n(Kte,"A",{href:!0});var ZDt=s(xee);BVr=r(ZDt,"from_pretrained()"),ZDt.forEach(t),IVr=r(Kte," class method or the "),$ee=n(Kte,"A",{href:!0});var eGt=s($ee);NVr=r(eGt,"from_config()"),eGt.forEach(t),qVr=r(Kte,` class
method.`),Kte.forEach(t),jVr=i(si),_$=n(si,"P",{});var NWe=s(_$);DVr=r(NWe,"This class cannot be instantiated directly using "),twe=n(NWe,"CODE",{});var oGt=s(twe);GVr=r(oGt,"__init__()"),oGt.forEach(t),OVr=r(NWe," (throws an error)."),NWe.forEach(t),VVr=i(si),Ht=n(si,"DIV",{class:!0});var SL=s(Ht);T(b$.$$.fragment,SL),XVr=i(SL),awe=n(SL,"P",{});var rGt=s(awe);zVr=r(rGt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rGt.forEach(t),QVr=i(SL),om=n(SL,"P",{});var Zte=s(om);WVr=r(Zte,`Note:
Loading a model from its configuration file does `),nwe=n(Zte,"STRONG",{});var tGt=s(nwe);HVr=r(tGt,"not"),tGt.forEach(t),UVr=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),kee=n(Zte,"A",{href:!0});var aGt=s(kee);JVr=r(aGt,"from_pretrained()"),aGt.forEach(t),YVr=r(Zte," to load the model weights."),Zte.forEach(t),KVr=i(SL),T(Dw.$$.fragment,SL),SL.forEach(t),ZVr=i(si),zr=n(si,"DIV",{class:!0});var li=s(zr);T(v$.$$.fragment,li),eXr=i(li),swe=n(li,"P",{});var nGt=s(swe);oXr=r(nGt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nGt.forEach(t),rXr=i(li),En=n(li,"P",{});var RL=s(En);tXr=r(RL,"The model class to instantiate is selected based on the "),lwe=n(RL,"CODE",{});var sGt=s(lwe);aXr=r(sGt,"model_type"),sGt.forEach(t),nXr=r(RL,` property of the config object (either
passed as an argument or loaded from `),iwe=n(RL,"CODE",{});var lGt=s(iwe);sXr=r(lGt,"pretrained_model_name_or_path"),lGt.forEach(t),lXr=r(RL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dwe=n(RL,"CODE",{});var iGt=s(dwe);iXr=r(iGt,"pretrained_model_name_or_path"),iGt.forEach(t),dXr=r(RL,":"),RL.forEach(t),cXr=i(li),Ee=n(li,"UL",{});var we=s(Ee);Gw=n(we,"LI",{});var EOe=s(Gw);cwe=n(EOe,"STRONG",{});var dGt=s(cwe);mXr=r(dGt,"albert"),dGt.forEach(t),fXr=r(EOe," \u2014 "),See=n(EOe,"A",{href:!0});var cGt=s(See);gXr=r(cGt,"FlaxAlbertForPreTraining"),cGt.forEach(t),hXr=r(EOe," (ALBERT model)"),EOe.forEach(t),uXr=i(we),Ow=n(we,"LI",{});var COe=s(Ow);mwe=n(COe,"STRONG",{});var mGt=s(mwe);pXr=r(mGt,"bart"),mGt.forEach(t),_Xr=r(COe," \u2014 "),Ree=n(COe,"A",{href:!0});var fGt=s(Ree);bXr=r(fGt,"FlaxBartForConditionalGeneration"),fGt.forEach(t),vXr=r(COe," (BART model)"),COe.forEach(t),FXr=i(we),Vw=n(we,"LI",{});var wOe=s(Vw);fwe=n(wOe,"STRONG",{});var gGt=s(fwe);TXr=r(gGt,"bert"),gGt.forEach(t),MXr=r(wOe," \u2014 "),Pee=n(wOe,"A",{href:!0});var hGt=s(Pee);EXr=r(hGt,"FlaxBertForPreTraining"),hGt.forEach(t),CXr=r(wOe," (BERT model)"),wOe.forEach(t),wXr=i(we),Xw=n(we,"LI",{});var AOe=s(Xw);gwe=n(AOe,"STRONG",{});var uGt=s(gwe);AXr=r(uGt,"big_bird"),uGt.forEach(t),LXr=r(AOe," \u2014 "),Bee=n(AOe,"A",{href:!0});var pGt=s(Bee);yXr=r(pGt,"FlaxBigBirdForPreTraining"),pGt.forEach(t),xXr=r(AOe," (BigBird model)"),AOe.forEach(t),$Xr=i(we),zw=n(we,"LI",{});var LOe=s(zw);hwe=n(LOe,"STRONG",{});var _Gt=s(hwe);kXr=r(_Gt,"electra"),_Gt.forEach(t),SXr=r(LOe," \u2014 "),Iee=n(LOe,"A",{href:!0});var bGt=s(Iee);RXr=r(bGt,"FlaxElectraForPreTraining"),bGt.forEach(t),PXr=r(LOe," (ELECTRA model)"),LOe.forEach(t),BXr=i(we),Qw=n(we,"LI",{});var yOe=s(Qw);uwe=n(yOe,"STRONG",{});var vGt=s(uwe);IXr=r(vGt,"longt5"),vGt.forEach(t),NXr=r(yOe," \u2014 "),Nee=n(yOe,"A",{href:!0});var FGt=s(Nee);qXr=r(FGt,"FlaxLongT5ForConditionalGeneration"),FGt.forEach(t),jXr=r(yOe," (LongT5 model)"),yOe.forEach(t),DXr=i(we),Ww=n(we,"LI",{});var xOe=s(Ww);pwe=n(xOe,"STRONG",{});var TGt=s(pwe);GXr=r(TGt,"mbart"),TGt.forEach(t),OXr=r(xOe," \u2014 "),qee=n(xOe,"A",{href:!0});var MGt=s(qee);VXr=r(MGt,"FlaxMBartForConditionalGeneration"),MGt.forEach(t),XXr=r(xOe," (mBART model)"),xOe.forEach(t),zXr=i(we),Hw=n(we,"LI",{});var $Oe=s(Hw);_we=n($Oe,"STRONG",{});var EGt=s(_we);QXr=r(EGt,"mt5"),EGt.forEach(t),WXr=r($Oe," \u2014 "),jee=n($Oe,"A",{href:!0});var CGt=s(jee);HXr=r(CGt,"FlaxMT5ForConditionalGeneration"),CGt.forEach(t),UXr=r($Oe," (MT5 model)"),$Oe.forEach(t),JXr=i(we),Uw=n(we,"LI",{});var kOe=s(Uw);bwe=n(kOe,"STRONG",{});var wGt=s(bwe);YXr=r(wGt,"roberta"),wGt.forEach(t),KXr=r(kOe," \u2014 "),Dee=n(kOe,"A",{href:!0});var AGt=s(Dee);ZXr=r(AGt,"FlaxRobertaForMaskedLM"),AGt.forEach(t),ezr=r(kOe," (RoBERTa model)"),kOe.forEach(t),ozr=i(we),Jw=n(we,"LI",{});var SOe=s(Jw);vwe=n(SOe,"STRONG",{});var LGt=s(vwe);rzr=r(LGt,"roformer"),LGt.forEach(t),tzr=r(SOe," \u2014 "),Gee=n(SOe,"A",{href:!0});var yGt=s(Gee);azr=r(yGt,"FlaxRoFormerForMaskedLM"),yGt.forEach(t),nzr=r(SOe," (RoFormer model)"),SOe.forEach(t),szr=i(we),Yw=n(we,"LI",{});var ROe=s(Yw);Fwe=n(ROe,"STRONG",{});var xGt=s(Fwe);lzr=r(xGt,"t5"),xGt.forEach(t),izr=r(ROe," \u2014 "),Oee=n(ROe,"A",{href:!0});var $Gt=s(Oee);dzr=r($Gt,"FlaxT5ForConditionalGeneration"),$Gt.forEach(t),czr=r(ROe," (T5 model)"),ROe.forEach(t),mzr=i(we),Kw=n(we,"LI",{});var POe=s(Kw);Twe=n(POe,"STRONG",{});var kGt=s(Twe);fzr=r(kGt,"wav2vec2"),kGt.forEach(t),gzr=r(POe," \u2014 "),Vee=n(POe,"A",{href:!0});var SGt=s(Vee);hzr=r(SGt,"FlaxWav2Vec2ForPreTraining"),SGt.forEach(t),uzr=r(POe," (Wav2Vec2 model)"),POe.forEach(t),pzr=i(we),Zw=n(we,"LI",{});var BOe=s(Zw);Mwe=n(BOe,"STRONG",{});var RGt=s(Mwe);_zr=r(RGt,"xlm-roberta"),RGt.forEach(t),bzr=r(BOe," \u2014 "),Xee=n(BOe,"A",{href:!0});var PGt=s(Xee);vzr=r(PGt,"FlaxXLMRobertaForMaskedLM"),PGt.forEach(t),Fzr=r(BOe," (XLM-RoBERTa model)"),BOe.forEach(t),we.forEach(t),Tzr=i(li),T(eA.$$.fragment,li),li.forEach(t),si.forEach(t),xze=i(m),rm=n(m,"H2",{class:!0});var qWe=s(rm);oA=n(qWe,"A",{id:!0,class:!0,href:!0});var BGt=s(oA);Ewe=n(BGt,"SPAN",{});var IGt=s(Ewe);T(F$.$$.fragment,IGt),IGt.forEach(t),BGt.forEach(t),Mzr=i(qWe),Cwe=n(qWe,"SPAN",{});var NGt=s(Cwe);Ezr=r(NGt,"FlaxAutoModelForMaskedLM"),NGt.forEach(t),qWe.forEach(t),$ze=i(m),br=n(m,"DIV",{class:!0});var ii=s(br);T(T$.$$.fragment,ii),Czr=i(ii),tm=n(ii,"P",{});var eae=s(tm);wzr=r(eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zee=n(eae,"A",{href:!0});var qGt=s(zee);Azr=r(qGt,"from_pretrained()"),qGt.forEach(t),Lzr=r(eae," class method or the "),Qee=n(eae,"A",{href:!0});var jGt=s(Qee);yzr=r(jGt,"from_config()"),jGt.forEach(t),xzr=r(eae,` class
method.`),eae.forEach(t),$zr=i(ii),M$=n(ii,"P",{});var jWe=s(M$);kzr=r(jWe,"This class cannot be instantiated directly using "),wwe=n(jWe,"CODE",{});var DGt=s(wwe);Szr=r(DGt,"__init__()"),DGt.forEach(t),Rzr=r(jWe," (throws an error)."),jWe.forEach(t),Pzr=i(ii),Ut=n(ii,"DIV",{class:!0});var PL=s(Ut);T(E$.$$.fragment,PL),Bzr=i(PL),Awe=n(PL,"P",{});var GGt=s(Awe);Izr=r(GGt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),GGt.forEach(t),Nzr=i(PL),am=n(PL,"P",{});var oae=s(am);qzr=r(oae,`Note:
Loading a model from its configuration file does `),Lwe=n(oae,"STRONG",{});var OGt=s(Lwe);jzr=r(OGt,"not"),OGt.forEach(t),Dzr=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wee=n(oae,"A",{href:!0});var VGt=s(Wee);Gzr=r(VGt,"from_pretrained()"),VGt.forEach(t),Ozr=r(oae," to load the model weights."),oae.forEach(t),Vzr=i(PL),T(rA.$$.fragment,PL),PL.forEach(t),Xzr=i(ii),Qr=n(ii,"DIV",{class:!0});var di=s(Qr);T(C$.$$.fragment,di),zzr=i(di),ywe=n(di,"P",{});var XGt=s(ywe);Qzr=r(XGt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),XGt.forEach(t),Wzr=i(di),Cn=n(di,"P",{});var BL=s(Cn);Hzr=r(BL,"The model class to instantiate is selected based on the "),xwe=n(BL,"CODE",{});var zGt=s(xwe);Uzr=r(zGt,"model_type"),zGt.forEach(t),Jzr=r(BL,` property of the config object (either
passed as an argument or loaded from `),$we=n(BL,"CODE",{});var QGt=s($we);Yzr=r(QGt,"pretrained_model_name_or_path"),QGt.forEach(t),Kzr=r(BL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kwe=n(BL,"CODE",{});var WGt=s(kwe);Zzr=r(WGt,"pretrained_model_name_or_path"),WGt.forEach(t),eQr=r(BL,":"),BL.forEach(t),oQr=i(di),$e=n(di,"UL",{});var qe=s($e);tA=n(qe,"LI",{});var IOe=s(tA);Swe=n(IOe,"STRONG",{});var HGt=s(Swe);rQr=r(HGt,"albert"),HGt.forEach(t),tQr=r(IOe," \u2014 "),Hee=n(IOe,"A",{href:!0});var UGt=s(Hee);aQr=r(UGt,"FlaxAlbertForMaskedLM"),UGt.forEach(t),nQr=r(IOe," (ALBERT model)"),IOe.forEach(t),sQr=i(qe),aA=n(qe,"LI",{});var NOe=s(aA);Rwe=n(NOe,"STRONG",{});var JGt=s(Rwe);lQr=r(JGt,"bart"),JGt.forEach(t),iQr=r(NOe," \u2014 "),Uee=n(NOe,"A",{href:!0});var YGt=s(Uee);dQr=r(YGt,"FlaxBartForConditionalGeneration"),YGt.forEach(t),cQr=r(NOe," (BART model)"),NOe.forEach(t),mQr=i(qe),nA=n(qe,"LI",{});var qOe=s(nA);Pwe=n(qOe,"STRONG",{});var KGt=s(Pwe);fQr=r(KGt,"bert"),KGt.forEach(t),gQr=r(qOe," \u2014 "),Jee=n(qOe,"A",{href:!0});var ZGt=s(Jee);hQr=r(ZGt,"FlaxBertForMaskedLM"),ZGt.forEach(t),uQr=r(qOe," (BERT model)"),qOe.forEach(t),pQr=i(qe),sA=n(qe,"LI",{});var jOe=s(sA);Bwe=n(jOe,"STRONG",{});var eOt=s(Bwe);_Qr=r(eOt,"big_bird"),eOt.forEach(t),bQr=r(jOe," \u2014 "),Yee=n(jOe,"A",{href:!0});var oOt=s(Yee);vQr=r(oOt,"FlaxBigBirdForMaskedLM"),oOt.forEach(t),FQr=r(jOe," (BigBird model)"),jOe.forEach(t),TQr=i(qe),lA=n(qe,"LI",{});var DOe=s(lA);Iwe=n(DOe,"STRONG",{});var rOt=s(Iwe);MQr=r(rOt,"distilbert"),rOt.forEach(t),EQr=r(DOe," \u2014 "),Kee=n(DOe,"A",{href:!0});var tOt=s(Kee);CQr=r(tOt,"FlaxDistilBertForMaskedLM"),tOt.forEach(t),wQr=r(DOe," (DistilBERT model)"),DOe.forEach(t),AQr=i(qe),iA=n(qe,"LI",{});var GOe=s(iA);Nwe=n(GOe,"STRONG",{});var aOt=s(Nwe);LQr=r(aOt,"electra"),aOt.forEach(t),yQr=r(GOe," \u2014 "),Zee=n(GOe,"A",{href:!0});var nOt=s(Zee);xQr=r(nOt,"FlaxElectraForMaskedLM"),nOt.forEach(t),$Qr=r(GOe," (ELECTRA model)"),GOe.forEach(t),kQr=i(qe),dA=n(qe,"LI",{});var OOe=s(dA);qwe=n(OOe,"STRONG",{});var sOt=s(qwe);SQr=r(sOt,"mbart"),sOt.forEach(t),RQr=r(OOe," \u2014 "),eoe=n(OOe,"A",{href:!0});var lOt=s(eoe);PQr=r(lOt,"FlaxMBartForConditionalGeneration"),lOt.forEach(t),BQr=r(OOe," (mBART model)"),OOe.forEach(t),IQr=i(qe),cA=n(qe,"LI",{});var VOe=s(cA);jwe=n(VOe,"STRONG",{});var iOt=s(jwe);NQr=r(iOt,"roberta"),iOt.forEach(t),qQr=r(VOe," \u2014 "),ooe=n(VOe,"A",{href:!0});var dOt=s(ooe);jQr=r(dOt,"FlaxRobertaForMaskedLM"),dOt.forEach(t),DQr=r(VOe," (RoBERTa model)"),VOe.forEach(t),GQr=i(qe),mA=n(qe,"LI",{});var XOe=s(mA);Dwe=n(XOe,"STRONG",{});var cOt=s(Dwe);OQr=r(cOt,"roformer"),cOt.forEach(t),VQr=r(XOe," \u2014 "),roe=n(XOe,"A",{href:!0});var mOt=s(roe);XQr=r(mOt,"FlaxRoFormerForMaskedLM"),mOt.forEach(t),zQr=r(XOe," (RoFormer model)"),XOe.forEach(t),QQr=i(qe),fA=n(qe,"LI",{});var zOe=s(fA);Gwe=n(zOe,"STRONG",{});var fOt=s(Gwe);WQr=r(fOt,"xlm-roberta"),fOt.forEach(t),HQr=r(zOe," \u2014 "),toe=n(zOe,"A",{href:!0});var gOt=s(toe);UQr=r(gOt,"FlaxXLMRobertaForMaskedLM"),gOt.forEach(t),JQr=r(zOe," (XLM-RoBERTa model)"),zOe.forEach(t),qe.forEach(t),YQr=i(di),T(gA.$$.fragment,di),di.forEach(t),ii.forEach(t),kze=i(m),nm=n(m,"H2",{class:!0});var DWe=s(nm);hA=n(DWe,"A",{id:!0,class:!0,href:!0});var hOt=s(hA);Owe=n(hOt,"SPAN",{});var uOt=s(Owe);T(w$.$$.fragment,uOt),uOt.forEach(t),hOt.forEach(t),KQr=i(DWe),Vwe=n(DWe,"SPAN",{});var pOt=s(Vwe);ZQr=r(pOt,"FlaxAutoModelForSeq2SeqLM"),pOt.forEach(t),DWe.forEach(t),Sze=i(m),vr=n(m,"DIV",{class:!0});var ci=s(vr);T(A$.$$.fragment,ci),eWr=i(ci),sm=n(ci,"P",{});var rae=s(sm);oWr=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aoe=n(rae,"A",{href:!0});var _Ot=s(aoe);rWr=r(_Ot,"from_pretrained()"),_Ot.forEach(t),tWr=r(rae," class method or the "),noe=n(rae,"A",{href:!0});var bOt=s(noe);aWr=r(bOt,"from_config()"),bOt.forEach(t),nWr=r(rae,` class
method.`),rae.forEach(t),sWr=i(ci),L$=n(ci,"P",{});var GWe=s(L$);lWr=r(GWe,"This class cannot be instantiated directly using "),Xwe=n(GWe,"CODE",{});var vOt=s(Xwe);iWr=r(vOt,"__init__()"),vOt.forEach(t),dWr=r(GWe," (throws an error)."),GWe.forEach(t),cWr=i(ci),Jt=n(ci,"DIV",{class:!0});var IL=s(Jt);T(y$.$$.fragment,IL),mWr=i(IL),zwe=n(IL,"P",{});var FOt=s(zwe);fWr=r(FOt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),FOt.forEach(t),gWr=i(IL),lm=n(IL,"P",{});var tae=s(lm);hWr=r(tae,`Note:
Loading a model from its configuration file does `),Qwe=n(tae,"STRONG",{});var TOt=s(Qwe);uWr=r(TOt,"not"),TOt.forEach(t),pWr=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),soe=n(tae,"A",{href:!0});var MOt=s(soe);_Wr=r(MOt,"from_pretrained()"),MOt.forEach(t),bWr=r(tae," to load the model weights."),tae.forEach(t),vWr=i(IL),T(uA.$$.fragment,IL),IL.forEach(t),FWr=i(ci),Wr=n(ci,"DIV",{class:!0});var mi=s(Wr);T(x$.$$.fragment,mi),TWr=i(mi),Wwe=n(mi,"P",{});var EOt=s(Wwe);MWr=r(EOt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),EOt.forEach(t),EWr=i(mi),wn=n(mi,"P",{});var NL=s(wn);CWr=r(NL,"The model class to instantiate is selected based on the "),Hwe=n(NL,"CODE",{});var COt=s(Hwe);wWr=r(COt,"model_type"),COt.forEach(t),AWr=r(NL,` property of the config object (either
passed as an argument or loaded from `),Uwe=n(NL,"CODE",{});var wOt=s(Uwe);LWr=r(wOt,"pretrained_model_name_or_path"),wOt.forEach(t),yWr=r(NL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jwe=n(NL,"CODE",{});var AOt=s(Jwe);xWr=r(AOt,"pretrained_model_name_or_path"),AOt.forEach(t),$Wr=r(NL,":"),NL.forEach(t),kWr=i(mi),ke=n(mi,"UL",{});var je=s(ke);pA=n(je,"LI",{});var QOe=s(pA);Ywe=n(QOe,"STRONG",{});var LOt=s(Ywe);SWr=r(LOt,"bart"),LOt.forEach(t),RWr=r(QOe," \u2014 "),loe=n(QOe,"A",{href:!0});var yOt=s(loe);PWr=r(yOt,"FlaxBartForConditionalGeneration"),yOt.forEach(t),BWr=r(QOe," (BART model)"),QOe.forEach(t),IWr=i(je),_A=n(je,"LI",{});var WOe=s(_A);Kwe=n(WOe,"STRONG",{});var xOt=s(Kwe);NWr=r(xOt,"blenderbot"),xOt.forEach(t),qWr=r(WOe," \u2014 "),ioe=n(WOe,"A",{href:!0});var $Ot=s(ioe);jWr=r($Ot,"FlaxBlenderbotForConditionalGeneration"),$Ot.forEach(t),DWr=r(WOe," (Blenderbot model)"),WOe.forEach(t),GWr=i(je),bA=n(je,"LI",{});var HOe=s(bA);Zwe=n(HOe,"STRONG",{});var kOt=s(Zwe);OWr=r(kOt,"blenderbot-small"),kOt.forEach(t),VWr=r(HOe," \u2014 "),doe=n(HOe,"A",{href:!0});var SOt=s(doe);XWr=r(SOt,"FlaxBlenderbotSmallForConditionalGeneration"),SOt.forEach(t),zWr=r(HOe," (BlenderbotSmall model)"),HOe.forEach(t),QWr=i(je),vA=n(je,"LI",{});var UOe=s(vA);eAe=n(UOe,"STRONG",{});var ROt=s(eAe);WWr=r(ROt,"encoder-decoder"),ROt.forEach(t),HWr=r(UOe," \u2014 "),coe=n(UOe,"A",{href:!0});var POt=s(coe);UWr=r(POt,"FlaxEncoderDecoderModel"),POt.forEach(t),JWr=r(UOe," (Encoder decoder model)"),UOe.forEach(t),YWr=i(je),FA=n(je,"LI",{});var JOe=s(FA);oAe=n(JOe,"STRONG",{});var BOt=s(oAe);KWr=r(BOt,"longt5"),BOt.forEach(t),ZWr=r(JOe," \u2014 "),moe=n(JOe,"A",{href:!0});var IOt=s(moe);eHr=r(IOt,"FlaxLongT5ForConditionalGeneration"),IOt.forEach(t),oHr=r(JOe," (LongT5 model)"),JOe.forEach(t),rHr=i(je),TA=n(je,"LI",{});var YOe=s(TA);rAe=n(YOe,"STRONG",{});var NOt=s(rAe);tHr=r(NOt,"marian"),NOt.forEach(t),aHr=r(YOe," \u2014 "),foe=n(YOe,"A",{href:!0});var qOt=s(foe);nHr=r(qOt,"FlaxMarianMTModel"),qOt.forEach(t),sHr=r(YOe," (Marian model)"),YOe.forEach(t),lHr=i(je),MA=n(je,"LI",{});var KOe=s(MA);tAe=n(KOe,"STRONG",{});var jOt=s(tAe);iHr=r(jOt,"mbart"),jOt.forEach(t),dHr=r(KOe," \u2014 "),goe=n(KOe,"A",{href:!0});var DOt=s(goe);cHr=r(DOt,"FlaxMBartForConditionalGeneration"),DOt.forEach(t),mHr=r(KOe," (mBART model)"),KOe.forEach(t),fHr=i(je),EA=n(je,"LI",{});var ZOe=s(EA);aAe=n(ZOe,"STRONG",{});var GOt=s(aAe);gHr=r(GOt,"mt5"),GOt.forEach(t),hHr=r(ZOe," \u2014 "),hoe=n(ZOe,"A",{href:!0});var OOt=s(hoe);uHr=r(OOt,"FlaxMT5ForConditionalGeneration"),OOt.forEach(t),pHr=r(ZOe," (MT5 model)"),ZOe.forEach(t),_Hr=i(je),CA=n(je,"LI",{});var eVe=s(CA);nAe=n(eVe,"STRONG",{});var VOt=s(nAe);bHr=r(VOt,"pegasus"),VOt.forEach(t),vHr=r(eVe," \u2014 "),uoe=n(eVe,"A",{href:!0});var XOt=s(uoe);FHr=r(XOt,"FlaxPegasusForConditionalGeneration"),XOt.forEach(t),THr=r(eVe," (Pegasus model)"),eVe.forEach(t),MHr=i(je),wA=n(je,"LI",{});var oVe=s(wA);sAe=n(oVe,"STRONG",{});var zOt=s(sAe);EHr=r(zOt,"t5"),zOt.forEach(t),CHr=r(oVe," \u2014 "),poe=n(oVe,"A",{href:!0});var QOt=s(poe);wHr=r(QOt,"FlaxT5ForConditionalGeneration"),QOt.forEach(t),AHr=r(oVe," (T5 model)"),oVe.forEach(t),je.forEach(t),LHr=i(mi),T(AA.$$.fragment,mi),mi.forEach(t),ci.forEach(t),Rze=i(m),im=n(m,"H2",{class:!0});var OWe=s(im);LA=n(OWe,"A",{id:!0,class:!0,href:!0});var WOt=s(LA);lAe=n(WOt,"SPAN",{});var HOt=s(lAe);T($$.$$.fragment,HOt),HOt.forEach(t),WOt.forEach(t),yHr=i(OWe),iAe=n(OWe,"SPAN",{});var UOt=s(iAe);xHr=r(UOt,"FlaxAutoModelForSequenceClassification"),UOt.forEach(t),OWe.forEach(t),Pze=i(m),Fr=n(m,"DIV",{class:!0});var fi=s(Fr);T(k$.$$.fragment,fi),$Hr=i(fi),dm=n(fi,"P",{});var aae=s(dm);kHr=r(aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_oe=n(aae,"A",{href:!0});var JOt=s(_oe);SHr=r(JOt,"from_pretrained()"),JOt.forEach(t),RHr=r(aae," class method or the "),boe=n(aae,"A",{href:!0});var YOt=s(boe);PHr=r(YOt,"from_config()"),YOt.forEach(t),BHr=r(aae,` class
method.`),aae.forEach(t),IHr=i(fi),S$=n(fi,"P",{});var VWe=s(S$);NHr=r(VWe,"This class cannot be instantiated directly using "),dAe=n(VWe,"CODE",{});var KOt=s(dAe);qHr=r(KOt,"__init__()"),KOt.forEach(t),jHr=r(VWe," (throws an error)."),VWe.forEach(t),DHr=i(fi),Yt=n(fi,"DIV",{class:!0});var qL=s(Yt);T(R$.$$.fragment,qL),GHr=i(qL),cAe=n(qL,"P",{});var ZOt=s(cAe);OHr=r(ZOt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ZOt.forEach(t),VHr=i(qL),cm=n(qL,"P",{});var nae=s(cm);XHr=r(nae,`Note:
Loading a model from its configuration file does `),mAe=n(nae,"STRONG",{});var eVt=s(mAe);zHr=r(eVt,"not"),eVt.forEach(t),QHr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),voe=n(nae,"A",{href:!0});var oVt=s(voe);WHr=r(oVt,"from_pretrained()"),oVt.forEach(t),HHr=r(nae," to load the model weights."),nae.forEach(t),UHr=i(qL),T(yA.$$.fragment,qL),qL.forEach(t),JHr=i(fi),Hr=n(fi,"DIV",{class:!0});var gi=s(Hr);T(P$.$$.fragment,gi),YHr=i(gi),fAe=n(gi,"P",{});var rVt=s(fAe);KHr=r(rVt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rVt.forEach(t),ZHr=i(gi),An=n(gi,"P",{});var jL=s(An);eUr=r(jL,"The model class to instantiate is selected based on the "),gAe=n(jL,"CODE",{});var tVt=s(gAe);oUr=r(tVt,"model_type"),tVt.forEach(t),rUr=r(jL,` property of the config object (either
passed as an argument or loaded from `),hAe=n(jL,"CODE",{});var aVt=s(hAe);tUr=r(aVt,"pretrained_model_name_or_path"),aVt.forEach(t),aUr=r(jL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uAe=n(jL,"CODE",{});var nVt=s(uAe);nUr=r(nVt,"pretrained_model_name_or_path"),nVt.forEach(t),sUr=r(jL,":"),jL.forEach(t),lUr=i(gi),Se=n(gi,"UL",{});var De=s(Se);xA=n(De,"LI",{});var rVe=s(xA);pAe=n(rVe,"STRONG",{});var sVt=s(pAe);iUr=r(sVt,"albert"),sVt.forEach(t),dUr=r(rVe," \u2014 "),Foe=n(rVe,"A",{href:!0});var lVt=s(Foe);cUr=r(lVt,"FlaxAlbertForSequenceClassification"),lVt.forEach(t),mUr=r(rVe," (ALBERT model)"),rVe.forEach(t),fUr=i(De),$A=n(De,"LI",{});var tVe=s($A);_Ae=n(tVe,"STRONG",{});var iVt=s(_Ae);gUr=r(iVt,"bart"),iVt.forEach(t),hUr=r(tVe," \u2014 "),Toe=n(tVe,"A",{href:!0});var dVt=s(Toe);uUr=r(dVt,"FlaxBartForSequenceClassification"),dVt.forEach(t),pUr=r(tVe," (BART model)"),tVe.forEach(t),_Ur=i(De),kA=n(De,"LI",{});var aVe=s(kA);bAe=n(aVe,"STRONG",{});var cVt=s(bAe);bUr=r(cVt,"bert"),cVt.forEach(t),vUr=r(aVe," \u2014 "),Moe=n(aVe,"A",{href:!0});var mVt=s(Moe);FUr=r(mVt,"FlaxBertForSequenceClassification"),mVt.forEach(t),TUr=r(aVe," (BERT model)"),aVe.forEach(t),MUr=i(De),SA=n(De,"LI",{});var nVe=s(SA);vAe=n(nVe,"STRONG",{});var fVt=s(vAe);EUr=r(fVt,"big_bird"),fVt.forEach(t),CUr=r(nVe," \u2014 "),Eoe=n(nVe,"A",{href:!0});var gVt=s(Eoe);wUr=r(gVt,"FlaxBigBirdForSequenceClassification"),gVt.forEach(t),AUr=r(nVe," (BigBird model)"),nVe.forEach(t),LUr=i(De),RA=n(De,"LI",{});var sVe=s(RA);FAe=n(sVe,"STRONG",{});var hVt=s(FAe);yUr=r(hVt,"distilbert"),hVt.forEach(t),xUr=r(sVe," \u2014 "),Coe=n(sVe,"A",{href:!0});var uVt=s(Coe);$Ur=r(uVt,"FlaxDistilBertForSequenceClassification"),uVt.forEach(t),kUr=r(sVe," (DistilBERT model)"),sVe.forEach(t),SUr=i(De),PA=n(De,"LI",{});var lVe=s(PA);TAe=n(lVe,"STRONG",{});var pVt=s(TAe);RUr=r(pVt,"electra"),pVt.forEach(t),PUr=r(lVe," \u2014 "),woe=n(lVe,"A",{href:!0});var _Vt=s(woe);BUr=r(_Vt,"FlaxElectraForSequenceClassification"),_Vt.forEach(t),IUr=r(lVe," (ELECTRA model)"),lVe.forEach(t),NUr=i(De),BA=n(De,"LI",{});var iVe=s(BA);MAe=n(iVe,"STRONG",{});var bVt=s(MAe);qUr=r(bVt,"mbart"),bVt.forEach(t),jUr=r(iVe," \u2014 "),Aoe=n(iVe,"A",{href:!0});var vVt=s(Aoe);DUr=r(vVt,"FlaxMBartForSequenceClassification"),vVt.forEach(t),GUr=r(iVe," (mBART model)"),iVe.forEach(t),OUr=i(De),IA=n(De,"LI",{});var dVe=s(IA);EAe=n(dVe,"STRONG",{});var FVt=s(EAe);VUr=r(FVt,"roberta"),FVt.forEach(t),XUr=r(dVe," \u2014 "),Loe=n(dVe,"A",{href:!0});var TVt=s(Loe);zUr=r(TVt,"FlaxRobertaForSequenceClassification"),TVt.forEach(t),QUr=r(dVe," (RoBERTa model)"),dVe.forEach(t),WUr=i(De),NA=n(De,"LI",{});var cVe=s(NA);CAe=n(cVe,"STRONG",{});var MVt=s(CAe);HUr=r(MVt,"roformer"),MVt.forEach(t),UUr=r(cVe," \u2014 "),yoe=n(cVe,"A",{href:!0});var EVt=s(yoe);JUr=r(EVt,"FlaxRoFormerForSequenceClassification"),EVt.forEach(t),YUr=r(cVe," (RoFormer model)"),cVe.forEach(t),KUr=i(De),qA=n(De,"LI",{});var mVe=s(qA);wAe=n(mVe,"STRONG",{});var CVt=s(wAe);ZUr=r(CVt,"xlm-roberta"),CVt.forEach(t),eJr=r(mVe," \u2014 "),xoe=n(mVe,"A",{href:!0});var wVt=s(xoe);oJr=r(wVt,"FlaxXLMRobertaForSequenceClassification"),wVt.forEach(t),rJr=r(mVe," (XLM-RoBERTa model)"),mVe.forEach(t),De.forEach(t),tJr=i(gi),T(jA.$$.fragment,gi),gi.forEach(t),fi.forEach(t),Bze=i(m),mm=n(m,"H2",{class:!0});var XWe=s(mm);DA=n(XWe,"A",{id:!0,class:!0,href:!0});var AVt=s(DA);AAe=n(AVt,"SPAN",{});var LVt=s(AAe);T(B$.$$.fragment,LVt),LVt.forEach(t),AVt.forEach(t),aJr=i(XWe),LAe=n(XWe,"SPAN",{});var yVt=s(LAe);nJr=r(yVt,"FlaxAutoModelForQuestionAnswering"),yVt.forEach(t),XWe.forEach(t),Ize=i(m),Tr=n(m,"DIV",{class:!0});var hi=s(Tr);T(I$.$$.fragment,hi),sJr=i(hi),fm=n(hi,"P",{});var sae=s(fm);lJr=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$oe=n(sae,"A",{href:!0});var xVt=s($oe);iJr=r(xVt,"from_pretrained()"),xVt.forEach(t),dJr=r(sae," class method or the "),koe=n(sae,"A",{href:!0});var $Vt=s(koe);cJr=r($Vt,"from_config()"),$Vt.forEach(t),mJr=r(sae,` class
method.`),sae.forEach(t),fJr=i(hi),N$=n(hi,"P",{});var zWe=s(N$);gJr=r(zWe,"This class cannot be instantiated directly using "),yAe=n(zWe,"CODE",{});var kVt=s(yAe);hJr=r(kVt,"__init__()"),kVt.forEach(t),uJr=r(zWe," (throws an error)."),zWe.forEach(t),pJr=i(hi),Kt=n(hi,"DIV",{class:!0});var DL=s(Kt);T(q$.$$.fragment,DL),_Jr=i(DL),xAe=n(DL,"P",{});var SVt=s(xAe);bJr=r(SVt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),SVt.forEach(t),vJr=i(DL),gm=n(DL,"P",{});var lae=s(gm);FJr=r(lae,`Note:
Loading a model from its configuration file does `),$Ae=n(lae,"STRONG",{});var RVt=s($Ae);TJr=r(RVt,"not"),RVt.forEach(t),MJr=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Soe=n(lae,"A",{href:!0});var PVt=s(Soe);EJr=r(PVt,"from_pretrained()"),PVt.forEach(t),CJr=r(lae," to load the model weights."),lae.forEach(t),wJr=i(DL),T(GA.$$.fragment,DL),DL.forEach(t),AJr=i(hi),Ur=n(hi,"DIV",{class:!0});var ui=s(Ur);T(j$.$$.fragment,ui),LJr=i(ui),kAe=n(ui,"P",{});var BVt=s(kAe);yJr=r(BVt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),BVt.forEach(t),xJr=i(ui),Ln=n(ui,"P",{});var GL=s(Ln);$Jr=r(GL,"The model class to instantiate is selected based on the "),SAe=n(GL,"CODE",{});var IVt=s(SAe);kJr=r(IVt,"model_type"),IVt.forEach(t),SJr=r(GL,` property of the config object (either
passed as an argument or loaded from `),RAe=n(GL,"CODE",{});var NVt=s(RAe);RJr=r(NVt,"pretrained_model_name_or_path"),NVt.forEach(t),PJr=r(GL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PAe=n(GL,"CODE",{});var qVt=s(PAe);BJr=r(qVt,"pretrained_model_name_or_path"),qVt.forEach(t),IJr=r(GL,":"),GL.forEach(t),NJr=i(ui),Re=n(ui,"UL",{});var Ge=s(Re);OA=n(Ge,"LI",{});var fVe=s(OA);BAe=n(fVe,"STRONG",{});var jVt=s(BAe);qJr=r(jVt,"albert"),jVt.forEach(t),jJr=r(fVe," \u2014 "),Roe=n(fVe,"A",{href:!0});var DVt=s(Roe);DJr=r(DVt,"FlaxAlbertForQuestionAnswering"),DVt.forEach(t),GJr=r(fVe," (ALBERT model)"),fVe.forEach(t),OJr=i(Ge),VA=n(Ge,"LI",{});var gVe=s(VA);IAe=n(gVe,"STRONG",{});var GVt=s(IAe);VJr=r(GVt,"bart"),GVt.forEach(t),XJr=r(gVe," \u2014 "),Poe=n(gVe,"A",{href:!0});var OVt=s(Poe);zJr=r(OVt,"FlaxBartForQuestionAnswering"),OVt.forEach(t),QJr=r(gVe," (BART model)"),gVe.forEach(t),WJr=i(Ge),XA=n(Ge,"LI",{});var hVe=s(XA);NAe=n(hVe,"STRONG",{});var VVt=s(NAe);HJr=r(VVt,"bert"),VVt.forEach(t),UJr=r(hVe," \u2014 "),Boe=n(hVe,"A",{href:!0});var XVt=s(Boe);JJr=r(XVt,"FlaxBertForQuestionAnswering"),XVt.forEach(t),YJr=r(hVe," (BERT model)"),hVe.forEach(t),KJr=i(Ge),zA=n(Ge,"LI",{});var uVe=s(zA);qAe=n(uVe,"STRONG",{});var zVt=s(qAe);ZJr=r(zVt,"big_bird"),zVt.forEach(t),eYr=r(uVe," \u2014 "),Ioe=n(uVe,"A",{href:!0});var QVt=s(Ioe);oYr=r(QVt,"FlaxBigBirdForQuestionAnswering"),QVt.forEach(t),rYr=r(uVe," (BigBird model)"),uVe.forEach(t),tYr=i(Ge),QA=n(Ge,"LI",{});var pVe=s(QA);jAe=n(pVe,"STRONG",{});var WVt=s(jAe);aYr=r(WVt,"distilbert"),WVt.forEach(t),nYr=r(pVe," \u2014 "),Noe=n(pVe,"A",{href:!0});var HVt=s(Noe);sYr=r(HVt,"FlaxDistilBertForQuestionAnswering"),HVt.forEach(t),lYr=r(pVe," (DistilBERT model)"),pVe.forEach(t),iYr=i(Ge),WA=n(Ge,"LI",{});var _Ve=s(WA);DAe=n(_Ve,"STRONG",{});var UVt=s(DAe);dYr=r(UVt,"electra"),UVt.forEach(t),cYr=r(_Ve," \u2014 "),qoe=n(_Ve,"A",{href:!0});var JVt=s(qoe);mYr=r(JVt,"FlaxElectraForQuestionAnswering"),JVt.forEach(t),fYr=r(_Ve," (ELECTRA model)"),_Ve.forEach(t),gYr=i(Ge),HA=n(Ge,"LI",{});var bVe=s(HA);GAe=n(bVe,"STRONG",{});var YVt=s(GAe);hYr=r(YVt,"mbart"),YVt.forEach(t),uYr=r(bVe," \u2014 "),joe=n(bVe,"A",{href:!0});var KVt=s(joe);pYr=r(KVt,"FlaxMBartForQuestionAnswering"),KVt.forEach(t),_Yr=r(bVe," (mBART model)"),bVe.forEach(t),bYr=i(Ge),UA=n(Ge,"LI",{});var vVe=s(UA);OAe=n(vVe,"STRONG",{});var ZVt=s(OAe);vYr=r(ZVt,"roberta"),ZVt.forEach(t),FYr=r(vVe," \u2014 "),Doe=n(vVe,"A",{href:!0});var eXt=s(Doe);TYr=r(eXt,"FlaxRobertaForQuestionAnswering"),eXt.forEach(t),MYr=r(vVe," (RoBERTa model)"),vVe.forEach(t),EYr=i(Ge),JA=n(Ge,"LI",{});var FVe=s(JA);VAe=n(FVe,"STRONG",{});var oXt=s(VAe);CYr=r(oXt,"roformer"),oXt.forEach(t),wYr=r(FVe," \u2014 "),Goe=n(FVe,"A",{href:!0});var rXt=s(Goe);AYr=r(rXt,"FlaxRoFormerForQuestionAnswering"),rXt.forEach(t),LYr=r(FVe," (RoFormer model)"),FVe.forEach(t),yYr=i(Ge),YA=n(Ge,"LI",{});var TVe=s(YA);XAe=n(TVe,"STRONG",{});var tXt=s(XAe);xYr=r(tXt,"xlm-roberta"),tXt.forEach(t),$Yr=r(TVe," \u2014 "),Ooe=n(TVe,"A",{href:!0});var aXt=s(Ooe);kYr=r(aXt,"FlaxXLMRobertaForQuestionAnswering"),aXt.forEach(t),SYr=r(TVe," (XLM-RoBERTa model)"),TVe.forEach(t),Ge.forEach(t),RYr=i(ui),T(KA.$$.fragment,ui),ui.forEach(t),hi.forEach(t),Nze=i(m),hm=n(m,"H2",{class:!0});var QWe=s(hm);ZA=n(QWe,"A",{id:!0,class:!0,href:!0});var nXt=s(ZA);zAe=n(nXt,"SPAN",{});var sXt=s(zAe);T(D$.$$.fragment,sXt),sXt.forEach(t),nXt.forEach(t),PYr=i(QWe),QAe=n(QWe,"SPAN",{});var lXt=s(QAe);BYr=r(lXt,"FlaxAutoModelForTokenClassification"),lXt.forEach(t),QWe.forEach(t),qze=i(m),Mr=n(m,"DIV",{class:!0});var pi=s(Mr);T(G$.$$.fragment,pi),IYr=i(pi),um=n(pi,"P",{});var iae=s(um);NYr=r(iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Voe=n(iae,"A",{href:!0});var iXt=s(Voe);qYr=r(iXt,"from_pretrained()"),iXt.forEach(t),jYr=r(iae," class method or the "),Xoe=n(iae,"A",{href:!0});var dXt=s(Xoe);DYr=r(dXt,"from_config()"),dXt.forEach(t),GYr=r(iae,` class
method.`),iae.forEach(t),OYr=i(pi),O$=n(pi,"P",{});var WWe=s(O$);VYr=r(WWe,"This class cannot be instantiated directly using "),WAe=n(WWe,"CODE",{});var cXt=s(WAe);XYr=r(cXt,"__init__()"),cXt.forEach(t),zYr=r(WWe," (throws an error)."),WWe.forEach(t),QYr=i(pi),Zt=n(pi,"DIV",{class:!0});var OL=s(Zt);T(V$.$$.fragment,OL),WYr=i(OL),HAe=n(OL,"P",{});var mXt=s(HAe);HYr=r(mXt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mXt.forEach(t),UYr=i(OL),pm=n(OL,"P",{});var dae=s(pm);JYr=r(dae,`Note:
Loading a model from its configuration file does `),UAe=n(dae,"STRONG",{});var fXt=s(UAe);YYr=r(fXt,"not"),fXt.forEach(t),KYr=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),zoe=n(dae,"A",{href:!0});var gXt=s(zoe);ZYr=r(gXt,"from_pretrained()"),gXt.forEach(t),eKr=r(dae," to load the model weights."),dae.forEach(t),oKr=i(OL),T(e6.$$.fragment,OL),OL.forEach(t),rKr=i(pi),Jr=n(pi,"DIV",{class:!0});var _i=s(Jr);T(X$.$$.fragment,_i),tKr=i(_i),JAe=n(_i,"P",{});var hXt=s(JAe);aKr=r(hXt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),hXt.forEach(t),nKr=i(_i),yn=n(_i,"P",{});var VL=s(yn);sKr=r(VL,"The model class to instantiate is selected based on the "),YAe=n(VL,"CODE",{});var uXt=s(YAe);lKr=r(uXt,"model_type"),uXt.forEach(t),iKr=r(VL,` property of the config object (either
passed as an argument or loaded from `),KAe=n(VL,"CODE",{});var pXt=s(KAe);dKr=r(pXt,"pretrained_model_name_or_path"),pXt.forEach(t),cKr=r(VL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZAe=n(VL,"CODE",{});var _Xt=s(ZAe);mKr=r(_Xt,"pretrained_model_name_or_path"),_Xt.forEach(t),fKr=r(VL,":"),VL.forEach(t),gKr=i(_i),Ve=n(_i,"UL",{});var To=s(Ve);o6=n(To,"LI",{});var MVe=s(o6);e6e=n(MVe,"STRONG",{});var bXt=s(e6e);hKr=r(bXt,"albert"),bXt.forEach(t),uKr=r(MVe," \u2014 "),Qoe=n(MVe,"A",{href:!0});var vXt=s(Qoe);pKr=r(vXt,"FlaxAlbertForTokenClassification"),vXt.forEach(t),_Kr=r(MVe," (ALBERT model)"),MVe.forEach(t),bKr=i(To),r6=n(To,"LI",{});var EVe=s(r6);o6e=n(EVe,"STRONG",{});var FXt=s(o6e);vKr=r(FXt,"bert"),FXt.forEach(t),FKr=r(EVe," \u2014 "),Woe=n(EVe,"A",{href:!0});var TXt=s(Woe);TKr=r(TXt,"FlaxBertForTokenClassification"),TXt.forEach(t),MKr=r(EVe," (BERT model)"),EVe.forEach(t),EKr=i(To),t6=n(To,"LI",{});var CVe=s(t6);r6e=n(CVe,"STRONG",{});var MXt=s(r6e);CKr=r(MXt,"big_bird"),MXt.forEach(t),wKr=r(CVe," \u2014 "),Hoe=n(CVe,"A",{href:!0});var EXt=s(Hoe);AKr=r(EXt,"FlaxBigBirdForTokenClassification"),EXt.forEach(t),LKr=r(CVe," (BigBird model)"),CVe.forEach(t),yKr=i(To),a6=n(To,"LI",{});var wVe=s(a6);t6e=n(wVe,"STRONG",{});var CXt=s(t6e);xKr=r(CXt,"distilbert"),CXt.forEach(t),$Kr=r(wVe," \u2014 "),Uoe=n(wVe,"A",{href:!0});var wXt=s(Uoe);kKr=r(wXt,"FlaxDistilBertForTokenClassification"),wXt.forEach(t),SKr=r(wVe," (DistilBERT model)"),wVe.forEach(t),RKr=i(To),n6=n(To,"LI",{});var AVe=s(n6);a6e=n(AVe,"STRONG",{});var AXt=s(a6e);PKr=r(AXt,"electra"),AXt.forEach(t),BKr=r(AVe," \u2014 "),Joe=n(AVe,"A",{href:!0});var LXt=s(Joe);IKr=r(LXt,"FlaxElectraForTokenClassification"),LXt.forEach(t),NKr=r(AVe," (ELECTRA model)"),AVe.forEach(t),qKr=i(To),s6=n(To,"LI",{});var LVe=s(s6);n6e=n(LVe,"STRONG",{});var yXt=s(n6e);jKr=r(yXt,"roberta"),yXt.forEach(t),DKr=r(LVe," \u2014 "),Yoe=n(LVe,"A",{href:!0});var xXt=s(Yoe);GKr=r(xXt,"FlaxRobertaForTokenClassification"),xXt.forEach(t),OKr=r(LVe," (RoBERTa model)"),LVe.forEach(t),VKr=i(To),l6=n(To,"LI",{});var yVe=s(l6);s6e=n(yVe,"STRONG",{});var $Xt=s(s6e);XKr=r($Xt,"roformer"),$Xt.forEach(t),zKr=r(yVe," \u2014 "),Koe=n(yVe,"A",{href:!0});var kXt=s(Koe);QKr=r(kXt,"FlaxRoFormerForTokenClassification"),kXt.forEach(t),WKr=r(yVe," (RoFormer model)"),yVe.forEach(t),HKr=i(To),i6=n(To,"LI",{});var xVe=s(i6);l6e=n(xVe,"STRONG",{});var SXt=s(l6e);UKr=r(SXt,"xlm-roberta"),SXt.forEach(t),JKr=r(xVe," \u2014 "),Zoe=n(xVe,"A",{href:!0});var RXt=s(Zoe);YKr=r(RXt,"FlaxXLMRobertaForTokenClassification"),RXt.forEach(t),KKr=r(xVe," (XLM-RoBERTa model)"),xVe.forEach(t),To.forEach(t),ZKr=i(_i),T(d6.$$.fragment,_i),_i.forEach(t),pi.forEach(t),jze=i(m),_m=n(m,"H2",{class:!0});var HWe=s(_m);c6=n(HWe,"A",{id:!0,class:!0,href:!0});var PXt=s(c6);i6e=n(PXt,"SPAN",{});var BXt=s(i6e);T(z$.$$.fragment,BXt),BXt.forEach(t),PXt.forEach(t),eZr=i(HWe),d6e=n(HWe,"SPAN",{});var IXt=s(d6e);oZr=r(IXt,"FlaxAutoModelForMultipleChoice"),IXt.forEach(t),HWe.forEach(t),Dze=i(m),Er=n(m,"DIV",{class:!0});var bi=s(Er);T(Q$.$$.fragment,bi),rZr=i(bi),bm=n(bi,"P",{});var cae=s(bm);tZr=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ere=n(cae,"A",{href:!0});var NXt=s(ere);aZr=r(NXt,"from_pretrained()"),NXt.forEach(t),nZr=r(cae," class method or the "),ore=n(cae,"A",{href:!0});var qXt=s(ore);sZr=r(qXt,"from_config()"),qXt.forEach(t),lZr=r(cae,` class
method.`),cae.forEach(t),iZr=i(bi),W$=n(bi,"P",{});var UWe=s(W$);dZr=r(UWe,"This class cannot be instantiated directly using "),c6e=n(UWe,"CODE",{});var jXt=s(c6e);cZr=r(jXt,"__init__()"),jXt.forEach(t),mZr=r(UWe," (throws an error)."),UWe.forEach(t),fZr=i(bi),ea=n(bi,"DIV",{class:!0});var XL=s(ea);T(H$.$$.fragment,XL),gZr=i(XL),m6e=n(XL,"P",{});var DXt=s(m6e);hZr=r(DXt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),DXt.forEach(t),uZr=i(XL),vm=n(XL,"P",{});var mae=s(vm);pZr=r(mae,`Note:
Loading a model from its configuration file does `),f6e=n(mae,"STRONG",{});var GXt=s(f6e);_Zr=r(GXt,"not"),GXt.forEach(t),bZr=r(mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),rre=n(mae,"A",{href:!0});var OXt=s(rre);vZr=r(OXt,"from_pretrained()"),OXt.forEach(t),FZr=r(mae," to load the model weights."),mae.forEach(t),TZr=i(XL),T(m6.$$.fragment,XL),XL.forEach(t),MZr=i(bi),Yr=n(bi,"DIV",{class:!0});var vi=s(Yr);T(U$.$$.fragment,vi),EZr=i(vi),g6e=n(vi,"P",{});var VXt=s(g6e);CZr=r(VXt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),VXt.forEach(t),wZr=i(vi),xn=n(vi,"P",{});var zL=s(xn);AZr=r(zL,"The model class to instantiate is selected based on the "),h6e=n(zL,"CODE",{});var XXt=s(h6e);LZr=r(XXt,"model_type"),XXt.forEach(t),yZr=r(zL,` property of the config object (either
passed as an argument or loaded from `),u6e=n(zL,"CODE",{});var zXt=s(u6e);xZr=r(zXt,"pretrained_model_name_or_path"),zXt.forEach(t),$Zr=r(zL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p6e=n(zL,"CODE",{});var QXt=s(p6e);kZr=r(QXt,"pretrained_model_name_or_path"),QXt.forEach(t),SZr=r(zL,":"),zL.forEach(t),RZr=i(vi),Xe=n(vi,"UL",{});var Mo=s(Xe);f6=n(Mo,"LI",{});var $Ve=s(f6);_6e=n($Ve,"STRONG",{});var WXt=s(_6e);PZr=r(WXt,"albert"),WXt.forEach(t),BZr=r($Ve," \u2014 "),tre=n($Ve,"A",{href:!0});var HXt=s(tre);IZr=r(HXt,"FlaxAlbertForMultipleChoice"),HXt.forEach(t),NZr=r($Ve," (ALBERT model)"),$Ve.forEach(t),qZr=i(Mo),g6=n(Mo,"LI",{});var kVe=s(g6);b6e=n(kVe,"STRONG",{});var UXt=s(b6e);jZr=r(UXt,"bert"),UXt.forEach(t),DZr=r(kVe," \u2014 "),are=n(kVe,"A",{href:!0});var JXt=s(are);GZr=r(JXt,"FlaxBertForMultipleChoice"),JXt.forEach(t),OZr=r(kVe," (BERT model)"),kVe.forEach(t),VZr=i(Mo),h6=n(Mo,"LI",{});var SVe=s(h6);v6e=n(SVe,"STRONG",{});var YXt=s(v6e);XZr=r(YXt,"big_bird"),YXt.forEach(t),zZr=r(SVe," \u2014 "),nre=n(SVe,"A",{href:!0});var KXt=s(nre);QZr=r(KXt,"FlaxBigBirdForMultipleChoice"),KXt.forEach(t),WZr=r(SVe," (BigBird model)"),SVe.forEach(t),HZr=i(Mo),u6=n(Mo,"LI",{});var RVe=s(u6);F6e=n(RVe,"STRONG",{});var ZXt=s(F6e);UZr=r(ZXt,"distilbert"),ZXt.forEach(t),JZr=r(RVe," \u2014 "),sre=n(RVe,"A",{href:!0});var ezt=s(sre);YZr=r(ezt,"FlaxDistilBertForMultipleChoice"),ezt.forEach(t),KZr=r(RVe," (DistilBERT model)"),RVe.forEach(t),ZZr=i(Mo),p6=n(Mo,"LI",{});var PVe=s(p6);T6e=n(PVe,"STRONG",{});var ozt=s(T6e);eet=r(ozt,"electra"),ozt.forEach(t),oet=r(PVe," \u2014 "),lre=n(PVe,"A",{href:!0});var rzt=s(lre);ret=r(rzt,"FlaxElectraForMultipleChoice"),rzt.forEach(t),tet=r(PVe," (ELECTRA model)"),PVe.forEach(t),aet=i(Mo),_6=n(Mo,"LI",{});var BVe=s(_6);M6e=n(BVe,"STRONG",{});var tzt=s(M6e);net=r(tzt,"roberta"),tzt.forEach(t),set=r(BVe," \u2014 "),ire=n(BVe,"A",{href:!0});var azt=s(ire);iet=r(azt,"FlaxRobertaForMultipleChoice"),azt.forEach(t),det=r(BVe," (RoBERTa model)"),BVe.forEach(t),cet=i(Mo),b6=n(Mo,"LI",{});var IVe=s(b6);E6e=n(IVe,"STRONG",{});var nzt=s(E6e);met=r(nzt,"roformer"),nzt.forEach(t),fet=r(IVe," \u2014 "),dre=n(IVe,"A",{href:!0});var szt=s(dre);get=r(szt,"FlaxRoFormerForMultipleChoice"),szt.forEach(t),het=r(IVe," (RoFormer model)"),IVe.forEach(t),uet=i(Mo),v6=n(Mo,"LI",{});var NVe=s(v6);C6e=n(NVe,"STRONG",{});var lzt=s(C6e);pet=r(lzt,"xlm-roberta"),lzt.forEach(t),_et=r(NVe," \u2014 "),cre=n(NVe,"A",{href:!0});var izt=s(cre);bet=r(izt,"FlaxXLMRobertaForMultipleChoice"),izt.forEach(t),vet=r(NVe," (XLM-RoBERTa model)"),NVe.forEach(t),Mo.forEach(t),Fet=i(vi),T(F6.$$.fragment,vi),vi.forEach(t),bi.forEach(t),Gze=i(m),Fm=n(m,"H2",{class:!0});var JWe=s(Fm);T6=n(JWe,"A",{id:!0,class:!0,href:!0});var dzt=s(T6);w6e=n(dzt,"SPAN",{});var czt=s(w6e);T(J$.$$.fragment,czt),czt.forEach(t),dzt.forEach(t),Tet=i(JWe),A6e=n(JWe,"SPAN",{});var mzt=s(A6e);Met=r(mzt,"FlaxAutoModelForNextSentencePrediction"),mzt.forEach(t),JWe.forEach(t),Oze=i(m),Cr=n(m,"DIV",{class:!0});var Fi=s(Cr);T(Y$.$$.fragment,Fi),Eet=i(Fi),Tm=n(Fi,"P",{});var fae=s(Tm);Cet=r(fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mre=n(fae,"A",{href:!0});var fzt=s(mre);wet=r(fzt,"from_pretrained()"),fzt.forEach(t),Aet=r(fae," class method or the "),fre=n(fae,"A",{href:!0});var gzt=s(fre);Let=r(gzt,"from_config()"),gzt.forEach(t),yet=r(fae,` class
method.`),fae.forEach(t),xet=i(Fi),K$=n(Fi,"P",{});var YWe=s(K$);$et=r(YWe,"This class cannot be instantiated directly using "),L6e=n(YWe,"CODE",{});var hzt=s(L6e);ket=r(hzt,"__init__()"),hzt.forEach(t),Set=r(YWe," (throws an error)."),YWe.forEach(t),Ret=i(Fi),oa=n(Fi,"DIV",{class:!0});var QL=s(oa);T(Z$.$$.fragment,QL),Pet=i(QL),y6e=n(QL,"P",{});var uzt=s(y6e);Bet=r(uzt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),uzt.forEach(t),Iet=i(QL),Mm=n(QL,"P",{});var gae=s(Mm);Net=r(gae,`Note:
Loading a model from its configuration file does `),x6e=n(gae,"STRONG",{});var pzt=s(x6e);qet=r(pzt,"not"),pzt.forEach(t),jet=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),gre=n(gae,"A",{href:!0});var _zt=s(gre);Det=r(_zt,"from_pretrained()"),_zt.forEach(t),Get=r(gae," to load the model weights."),gae.forEach(t),Oet=i(QL),T(M6.$$.fragment,QL),QL.forEach(t),Vet=i(Fi),Kr=n(Fi,"DIV",{class:!0});var Ti=s(Kr);T(ek.$$.fragment,Ti),Xet=i(Ti),$6e=n(Ti,"P",{});var bzt=s($6e);zet=r(bzt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bzt.forEach(t),Qet=i(Ti),$n=n(Ti,"P",{});var WL=s($n);Wet=r(WL,"The model class to instantiate is selected based on the "),k6e=n(WL,"CODE",{});var vzt=s(k6e);Het=r(vzt,"model_type"),vzt.forEach(t),Uet=r(WL,` property of the config object (either
passed as an argument or loaded from `),S6e=n(WL,"CODE",{});var Fzt=s(S6e);Jet=r(Fzt,"pretrained_model_name_or_path"),Fzt.forEach(t),Yet=r(WL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R6e=n(WL,"CODE",{});var Tzt=s(R6e);Ket=r(Tzt,"pretrained_model_name_or_path"),Tzt.forEach(t),Zet=r(WL,":"),WL.forEach(t),eot=i(Ti),P6e=n(Ti,"UL",{});var Mzt=s(P6e);E6=n(Mzt,"LI",{});var qVe=s(E6);B6e=n(qVe,"STRONG",{});var Ezt=s(B6e);oot=r(Ezt,"bert"),Ezt.forEach(t),rot=r(qVe," \u2014 "),hre=n(qVe,"A",{href:!0});var Czt=s(hre);tot=r(Czt,"FlaxBertForNextSentencePrediction"),Czt.forEach(t),aot=r(qVe," (BERT model)"),qVe.forEach(t),Mzt.forEach(t),not=i(Ti),T(C6.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),Vze=i(m),Em=n(m,"H2",{class:!0});var KWe=s(Em);w6=n(KWe,"A",{id:!0,class:!0,href:!0});var wzt=s(w6);I6e=n(wzt,"SPAN",{});var Azt=s(I6e);T(ok.$$.fragment,Azt),Azt.forEach(t),wzt.forEach(t),sot=i(KWe),N6e=n(KWe,"SPAN",{});var Lzt=s(N6e);lot=r(Lzt,"FlaxAutoModelForImageClassification"),Lzt.forEach(t),KWe.forEach(t),Xze=i(m),wr=n(m,"DIV",{class:!0});var Mi=s(wr);T(rk.$$.fragment,Mi),iot=i(Mi),Cm=n(Mi,"P",{});var hae=s(Cm);dot=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ure=n(hae,"A",{href:!0});var yzt=s(ure);cot=r(yzt,"from_pretrained()"),yzt.forEach(t),mot=r(hae," class method or the "),pre=n(hae,"A",{href:!0});var xzt=s(pre);fot=r(xzt,"from_config()"),xzt.forEach(t),got=r(hae,` class
method.`),hae.forEach(t),hot=i(Mi),tk=n(Mi,"P",{});var ZWe=s(tk);uot=r(ZWe,"This class cannot be instantiated directly using "),q6e=n(ZWe,"CODE",{});var $zt=s(q6e);pot=r($zt,"__init__()"),$zt.forEach(t),_ot=r(ZWe," (throws an error)."),ZWe.forEach(t),bot=i(Mi),ra=n(Mi,"DIV",{class:!0});var HL=s(ra);T(ak.$$.fragment,HL),vot=i(HL),j6e=n(HL,"P",{});var kzt=s(j6e);Fot=r(kzt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kzt.forEach(t),Tot=i(HL),wm=n(HL,"P",{});var uae=s(wm);Mot=r(uae,`Note:
Loading a model from its configuration file does `),D6e=n(uae,"STRONG",{});var Szt=s(D6e);Eot=r(Szt,"not"),Szt.forEach(t),Cot=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),_re=n(uae,"A",{href:!0});var Rzt=s(_re);wot=r(Rzt,"from_pretrained()"),Rzt.forEach(t),Aot=r(uae," to load the model weights."),uae.forEach(t),Lot=i(HL),T(A6.$$.fragment,HL),HL.forEach(t),yot=i(Mi),Zr=n(Mi,"DIV",{class:!0});var Ei=s(Zr);T(nk.$$.fragment,Ei),xot=i(Ei),G6e=n(Ei,"P",{});var Pzt=s(G6e);$ot=r(Pzt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Pzt.forEach(t),kot=i(Ei),kn=n(Ei,"P",{});var UL=s(kn);Sot=r(UL,"The model class to instantiate is selected based on the "),O6e=n(UL,"CODE",{});var Bzt=s(O6e);Rot=r(Bzt,"model_type"),Bzt.forEach(t),Pot=r(UL,` property of the config object (either
passed as an argument or loaded from `),V6e=n(UL,"CODE",{});var Izt=s(V6e);Bot=r(Izt,"pretrained_model_name_or_path"),Izt.forEach(t),Iot=r(UL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=n(UL,"CODE",{});var Nzt=s(X6e);Not=r(Nzt,"pretrained_model_name_or_path"),Nzt.forEach(t),qot=r(UL,":"),UL.forEach(t),jot=i(Ei),sk=n(Ei,"UL",{});var eHe=s(sk);L6=n(eHe,"LI",{});var jVe=s(L6);z6e=n(jVe,"STRONG",{});var qzt=s(z6e);Dot=r(qzt,"beit"),qzt.forEach(t),Got=r(jVe," \u2014 "),bre=n(jVe,"A",{href:!0});var jzt=s(bre);Oot=r(jzt,"FlaxBeitForImageClassification"),jzt.forEach(t),Vot=r(jVe," (BEiT model)"),jVe.forEach(t),Xot=i(eHe),y6=n(eHe,"LI",{});var DVe=s(y6);Q6e=n(DVe,"STRONG",{});var Dzt=s(Q6e);zot=r(Dzt,"vit"),Dzt.forEach(t),Qot=r(DVe," \u2014 "),vre=n(DVe,"A",{href:!0});var Gzt=s(vre);Wot=r(Gzt,"FlaxViTForImageClassification"),Gzt.forEach(t),Hot=r(DVe," (ViT model)"),DVe.forEach(t),eHe.forEach(t),Uot=i(Ei),T(x6.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),zze=i(m),Am=n(m,"H2",{class:!0});var oHe=s(Am);$6=n(oHe,"A",{id:!0,class:!0,href:!0});var Ozt=s($6);W6e=n(Ozt,"SPAN",{});var Vzt=s(W6e);T(lk.$$.fragment,Vzt),Vzt.forEach(t),Ozt.forEach(t),Jot=i(oHe),H6e=n(oHe,"SPAN",{});var Xzt=s(H6e);Yot=r(Xzt,"FlaxAutoModelForVision2Seq"),Xzt.forEach(t),oHe.forEach(t),Qze=i(m),Ar=n(m,"DIV",{class:!0});var Ci=s(Ar);T(ik.$$.fragment,Ci),Kot=i(Ci),Lm=n(Ci,"P",{});var pae=s(Lm);Zot=r(pae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Fre=n(pae,"A",{href:!0});var zzt=s(Fre);ert=r(zzt,"from_pretrained()"),zzt.forEach(t),ort=r(pae," class method or the "),Tre=n(pae,"A",{href:!0});var Qzt=s(Tre);rrt=r(Qzt,"from_config()"),Qzt.forEach(t),trt=r(pae,` class
method.`),pae.forEach(t),art=i(Ci),dk=n(Ci,"P",{});var rHe=s(dk);nrt=r(rHe,"This class cannot be instantiated directly using "),U6e=n(rHe,"CODE",{});var Wzt=s(U6e);srt=r(Wzt,"__init__()"),Wzt.forEach(t),lrt=r(rHe," (throws an error)."),rHe.forEach(t),irt=i(Ci),ta=n(Ci,"DIV",{class:!0});var JL=s(ta);T(ck.$$.fragment,JL),drt=i(JL),J6e=n(JL,"P",{});var Hzt=s(J6e);crt=r(Hzt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Hzt.forEach(t),mrt=i(JL),ym=n(JL,"P",{});var _ae=s(ym);frt=r(_ae,`Note:
Loading a model from its configuration file does `),Y6e=n(_ae,"STRONG",{});var Uzt=s(Y6e);grt=r(Uzt,"not"),Uzt.forEach(t),hrt=r(_ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mre=n(_ae,"A",{href:!0});var Jzt=s(Mre);urt=r(Jzt,"from_pretrained()"),Jzt.forEach(t),prt=r(_ae," to load the model weights."),_ae.forEach(t),_rt=i(JL),T(k6.$$.fragment,JL),JL.forEach(t),brt=i(Ci),et=n(Ci,"DIV",{class:!0});var wi=s(et);T(mk.$$.fragment,wi),vrt=i(wi),K6e=n(wi,"P",{});var Yzt=s(K6e);Frt=r(Yzt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Yzt.forEach(t),Trt=i(wi),Sn=n(wi,"P",{});var YL=s(Sn);Mrt=r(YL,"The model class to instantiate is selected based on the "),Z6e=n(YL,"CODE",{});var Kzt=s(Z6e);Ert=r(Kzt,"model_type"),Kzt.forEach(t),Crt=r(YL,` property of the config object (either
passed as an argument or loaded from `),e7e=n(YL,"CODE",{});var Zzt=s(e7e);wrt=r(Zzt,"pretrained_model_name_or_path"),Zzt.forEach(t),Art=r(YL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o7e=n(YL,"CODE",{});var eQt=s(o7e);Lrt=r(eQt,"pretrained_model_name_or_path"),eQt.forEach(t),yrt=r(YL,":"),YL.forEach(t),xrt=i(wi),r7e=n(wi,"UL",{});var oQt=s(r7e);S6=n(oQt,"LI",{});var GVe=s(S6);t7e=n(GVe,"STRONG",{});var rQt=s(t7e);$rt=r(rQt,"vision-encoder-decoder"),rQt.forEach(t),krt=r(GVe," \u2014 "),Ere=n(GVe,"A",{href:!0});var tQt=s(Ere);Srt=r(tQt,"FlaxVisionEncoderDecoderModel"),tQt.forEach(t),Rrt=r(GVe," (Vision Encoder decoder model)"),GVe.forEach(t),oQt.forEach(t),Prt=i(wi),T(R6.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(dHt)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(Pn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(In,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(Nn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(Si,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(Im,"id","extending-the-auto-classes"),c(Im,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Im,"href","#extending-the-auto-classes"),c(Ri,"class","relative group"),c(qm,"id","transformers.AutoConfig"),c(qm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qm,"href","#transformers.AutoConfig"),c(Pi,"class","relative group"),c(qS,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(jS,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(DS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(GS,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(OS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(VS,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(XS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(zS,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(QS,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(WS,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(HS,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),c(US,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(JS,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(YS,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(KS,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),c(ZS,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(eR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(oR,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(rR,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(tR,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(aR,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(nR,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(sR,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(lR,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(iR,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(dR,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(cR,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(mR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(fR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(gR,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(hR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(uR,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(pR,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(_R,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(bR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(vR,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(FR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(TR,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(MR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(ER,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(CR,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(wR,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(AR,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),c(LR,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(yR,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(xR,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c($R,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(kR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(SR,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(RR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(PR,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),c(BR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(IR,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),c(NR,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(qR,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(jR,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(DR,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(GR,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(OR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(VR,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),c(XR,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(zR,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(QR,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(WR,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(HR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(UR,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig"),c(JR,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),c(YR,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(KR,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(ZR,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(eP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(oP,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(rP,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(tP,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(aP,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(nP,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(sP,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(lP,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(iP,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(dP,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(cP,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(mP,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(fP,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(gP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(hP,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(uP,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(pP,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(_P,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(bP,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(vP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(FP,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(TP,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(MP,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(EP,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(CP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(wP,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(AP,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(LP,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(yP,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(xP,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c($P,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(kP,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(SP,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(RP,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(PP,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(BP,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(IP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(NP,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(qP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(jP,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(DP,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(GP,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(OP,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(VP,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(XP,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(zP,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(QP,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(WP,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(HP,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kg,"id","transformers.AutoTokenizer"),c(Kg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kg,"href","#transformers.AutoTokenizer"),c(Ii,"class","relative group"),c(UP,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(JP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(YP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(KP,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(ZP,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(eB,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(oB,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(rB,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(tB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(aB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(nB,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(sB,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(lB,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(iB,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(dB,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(cB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(mB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(fB,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(gB,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(hB,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(uB,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(pB,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(_B,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(bB,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(vB,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(FB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(TB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(MB,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(EB,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(CB,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(wB,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(AB,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(LB,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(yB,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(xB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c($B,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(kB,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(SB,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(RB,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(PB,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(BB,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(IB,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(NB,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(qB,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(jB,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(DB,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(GB,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(OB,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(VB,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(XB,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(zB,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(QB,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(WB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(HB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(UB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(JB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(YB,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(KB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ZB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(eI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(oI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(rI,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(tI,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(aI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(nI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(sI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(lI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(iI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(dI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(cI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(mI,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(fI,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(gI,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(hI,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(uI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(pI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(_I,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(bI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(vI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(FI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(TI,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(MI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(EI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(CI,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(wI,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(AI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(LI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(yI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(xI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c($I,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(kI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(SI,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(RI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(PI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(BI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(II,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(NI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(qI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(jI,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizer"),c(DI,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(GI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(OI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(VI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(XI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(zI,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(QI,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(WI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(HI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(UI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(JI,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(YI,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(KI,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(ZI,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(eN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(oN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(rN,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(tN,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(aN,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(nN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(sN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(lN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(iN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(dN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(cN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(mN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(fN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(gN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(hN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(uN,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(pN,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(_N,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(bN,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(vN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(FN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(TN,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(MN,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(EN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(CN,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(wN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(AN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(LN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(yN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(xN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c($N,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(kN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(SN,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(RN,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(PN,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(BN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(IN,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(NN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(qN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(jN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(DN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(GN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(ON,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(VN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(XN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ph,"id","transformers.AutoFeatureExtractor"),c(Ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ph,"href","#transformers.AutoFeatureExtractor"),c(Ni,"class","relative group"),c(zN,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(QN,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(WN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(HN,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(UN,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(JN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(YN,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(KN,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(ZN,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(eq,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(oq,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(rq,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(tq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(aq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(nq,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(sq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(lq,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(iq,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(dq,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(cq,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(mq,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(fq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(gq,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(hq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(uq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(pq,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(_q,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(bq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(vq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Fq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(Tq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Mq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Eq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Cq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(wq,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_u,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bu,"id","transformers.AutoProcessor"),c(bu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bu,"href","#transformers.AutoProcessor"),c(qi,"class","relative group"),c(Aq,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(Lq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(yq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(xq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c($q,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(kq,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Sq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Rq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Pq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Bq,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Iq,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Nq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(Dq,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(Gq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Oq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Vq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ju,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Du,"id","transformers.AutoModel"),c(Du,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Du,"href","#transformers.AutoModel"),c(Di,"class","relative group"),c(Xq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(Hq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(Uq,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(Jq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(Yq,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(Kq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(Zq,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(ej,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(oj,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(rj,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),c(tj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(aj,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(nj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(sj,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),c(lj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(ij,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(dj,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(cj,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(mj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(fj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(gj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(hj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(uj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(pj,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(_j,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(bj,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(vj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(Fj,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Tj,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(Mj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(Ej,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(Cj,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(wj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(Aj,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(Lj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(yj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(xj,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c($j,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(kj,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Sj,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Rj,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(Pj,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),c(Bj,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(Ij,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(Nj,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(qj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(jj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Dj,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Gj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(Oj,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(Vj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(Xj,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),c(zj,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(Qj,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(Wj,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(Hj,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(Uj,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Jj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(Yj,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),c(Kj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Zj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(eD,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),c(oD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(rD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(tD,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel"),c(aD,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),c(nD,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(sD,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(lD,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(iD,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(dD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(cD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(mD,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(fD,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(gD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(hD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(uD,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(pD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(_D,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(bD,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(vD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(FD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(TD,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(MD,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(ED,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(CD,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(wD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(AD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(LD,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(yD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(xD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c($D,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(kD,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(SD,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(RD,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(PD,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(BD,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(ID,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(ND,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(qD,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(jD,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(DD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(GD,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(OD,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(VD,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(XD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(zD,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(QD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(WD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(HD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(UD,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(JD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q_,"id","transformers.AutoModelForPreTraining"),c(Q_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q_,"href","#transformers.AutoModelForPreTraining"),c(Vi,"class","relative group"),c(YD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(oG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(rG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(tG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(aG,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(nG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(sG,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(lG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(iG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(dG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(cG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(mG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(fG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(gG,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(hG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(uG,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(pG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(_G,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(bG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(vG,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(FG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(TG,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(MG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(EG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(CG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(wG,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(AG,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(LG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(yG,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(xG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c($G,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(kG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(SG,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(RG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(PG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(BG,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(IG,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(NG,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(qG,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(jG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(DG,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(GG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(OG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(VG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(XG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G2,"id","transformers.AutoModelForCausalLM"),c(G2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G2,"href","#transformers.AutoModelForCausalLM"),c(Qi,"class","relative group"),c(zG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(UG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(JG,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(YG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(KG,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(ZG,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(eO,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(oO,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(rO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(tO,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(aO,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(nO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(sO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(lO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(iO,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(dO,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(cO,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(mO,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(fO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(gO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(hO,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM"),c(uO,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(pO,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(_O,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(bO,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(vO,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(FO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(TO,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(MO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(EO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(CO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(wO,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(AO,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(LO,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(yO,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(xO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c($O,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(kO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(SO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(RO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kb,"id","transformers.AutoModelForMaskedLM"),c(kb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kb,"href","#transformers.AutoModelForMaskedLM"),c(Ui,"class","relative group"),c(PO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(qO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(jO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(DO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(GO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(OO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(VO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(XO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(zO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(QO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(WO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(HO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(UO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(JO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(YO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(KO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ZO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(eV,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(oV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(rV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(tV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(aV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(nV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(sV,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(lV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(iV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(dV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(cV,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(mV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(fV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(gV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(hV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(uV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(pV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(_V,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(bV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(vV,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vv,"id","transformers.AutoModelForSeq2SeqLM"),c(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vv,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ki,"class","relative group"),c(FV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(CV,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(wV,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(AV,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(LV,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(yV,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(xV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c($V,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(kV,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(SV,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(RV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(PV,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(BV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(IV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(NV,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(qV,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(jV,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(DV,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gv,"id","transformers.AutoModelForSequenceClassification"),c(Gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gv,"href","#transformers.AutoModelForSequenceClassification"),c(od,"class","relative group"),c(GV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(zV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(QV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(WV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(HV,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(UV,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(JV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(YV,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(KV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(ZV,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(eX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(oX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(rX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(tX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(aX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(nX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(sX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(lX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(iX,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(dX,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(cX,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(mX,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(fX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(gX,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(hX,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(uX,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(pX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(_X,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(bX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(vX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(FX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(TX,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(MX,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(EX,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(CX,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(wX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(AX,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(LX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(yX,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(xX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c($X,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(kX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(SX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(RX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(PX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(BX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(IX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(NX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(qX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(jX,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G1,"id","transformers.AutoModelForMultipleChoice"),c(G1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G1,"href","#transformers.AutoModelForMultipleChoice"),c(ad,"class","relative group"),c(DX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(XX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(zX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(QX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(WX,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(HX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(UX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(JX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(YX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(KX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(ZX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(ez,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(oz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(rz,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(tz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(az,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(nz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(sz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(lz,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(iz,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(dz,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(cz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(mz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(fz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(gz,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(hz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(uz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(pz,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(_z,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(bz,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TF,"id","transformers.AutoModelForNextSentencePrediction"),c(TF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TF,"href","#transformers.AutoModelForNextSentencePrediction"),c(ld,"class","relative group"),c(vz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(Ez,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Cz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(wz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(Az,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(Lz,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kF,"id","transformers.AutoModelForTokenClassification"),c(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kF,"href","#transformers.AutoModelForTokenClassification"),c(cd,"class","relative group"),c(yz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kz,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Sz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(Rz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Pz,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Bz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Iz,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Nz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(qz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(jz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Dz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Gz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Oz,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(Vz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Xz,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(zz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(Qz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(Wz,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(Hz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(Uz,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(Jz,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(Yz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(Kz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(Zz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(eQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(oQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(rQ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(tQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(aQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(nQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(sQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(lQ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(iQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(dQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(cQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(mQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(fQ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_T,"id","transformers.AutoModelForQuestionAnswering"),c(_T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_T,"href","#transformers.AutoModelForQuestionAnswering"),c(gd,"class","relative group"),c(gQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(_Q,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(bQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(vQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(FQ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(TQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(MQ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(EQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(CQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(wQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(AQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(LQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(yQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(xQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c($Q,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(kQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(SQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(RQ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(PQ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(BQ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(IQ,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(NQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(qQ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(jQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(DQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(GQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(OQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(VQ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(XQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(zQ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(QQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(WQ,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(HQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(UQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(JQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(YQ,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(KQ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(ZQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(eW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(oW,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(rW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(tW,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dM,"id","transformers.AutoModelForTableQuestionAnswering"),c(dM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dM,"href","#transformers.AutoModelForTableQuestionAnswering"),c(pd,"class","relative group"),c(aW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hM,"id","transformers.AutoModelForImageClassification"),c(hM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hM,"href","#transformers.AutoModelForImageClassification"),c(vd,"class","relative group"),c(iW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mW,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(fW,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(gW,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(hW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(uW,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(pW,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(_W,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(bW,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(vW,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(FW,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(TW,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(MW,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(EW,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(CW,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(wW,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(AW,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(LW,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(yW,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(xW,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c($W,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kM,"id","transformers.AutoModelForVision2Seq"),c(kM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kM,"href","#transformers.AutoModelForVision2Seq"),c(Md,"class","relative group"),c(kW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PW,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IM,"id","transformers.AutoModelForVisualQuestionAnswering"),c(IM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IM,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(wd,"class","relative group"),c(BW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qW,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GM,"id","transformers.AutoModelForAudioClassification"),c(GM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GM,"href","#transformers.AutoModelForAudioClassification"),c(yd,"class","relative group"),c(jW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(VW,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(XW,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(zW,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(QW,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(WW,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(HW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(UW,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(JW,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e4,"id","transformers.AutoModelForAudioFrameClassification"),c(e4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e4,"href","#transformers.AutoModelForAudioFrameClassification"),c(kd,"class","relative group"),c(YW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(oH,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(rH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(tH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(aH,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d4,"id","transformers.AutoModelForCTC"),c(d4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d4,"href","#transformers.AutoModelForCTC"),c(Pd,"class","relative group"),c(nH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(dH,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(cH,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),c(mH,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(fH,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(gH,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(hH,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(uH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(pH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(_H,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E4,"id","transformers.AutoModelForSpeechSeq2Seq"),c(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E4,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Nd,"class","relative group"),c(bH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(MH,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x4,"id","transformers.AutoModelForAudioXVector"),c(x4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x4,"href","#transformers.AutoModelForAudioXVector"),c(Dd,"class","relative group"),c(EH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(LH,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(yH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(xH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c($H,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q4,"id","transformers.AutoModelForMaskedImageModeling"),c(q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q4,"href","#transformers.AutoModelForMaskedImageModeling"),c(Vd,"class","relative group"),c(kH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(BH,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(IH,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z4,"id","transformers.AutoModelForObjectDetection"),c(z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z4,"href","#transformers.AutoModelForObjectDetection"),c(Wd,"class","relative group"),c(NH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DH,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(GH,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y4,"id","transformers.AutoModelForImageSegmentation"),c(Y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y4,"href","#transformers.AutoModelForImageSegmentation"),c(Jd,"class","relative group"),c(OH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zH,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rE,"id","transformers.AutoModelForSemanticSegmentation"),c(rE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rE,"href","#transformers.AutoModelForSemanticSegmentation"),c(Zd,"class","relative group"),c(QH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UH,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(JH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(YH,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(KH,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(ZH,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mE,"id","transformers.AutoModelForInstanceSegmentation"),c(mE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mE,"href","#transformers.AutoModelForInstanceSegmentation"),c(rc,"class","relative group"),c(eU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tU,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pE,"id","transformers.TFAutoModel"),c(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pE,"href","#transformers.TFAutoModel"),c(nc,"class","relative group"),c(aU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(iU,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(dU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(cU,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(mU,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(fU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(gU,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(hU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(uU,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(pU,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(_U,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(bU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(vU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(FU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(TU,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(MU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(EU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(CU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(wU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(AU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(LU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(yU,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(xU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c($U,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(kU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(SU,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(RU,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(PU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(BU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(IU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(NU,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(qU,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(jU,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(DU,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(GU,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),c(OU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(VU,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel"),c(XU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(zU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(QU,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(WU,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(HU,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(UU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(JU,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(YU,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(KU,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(ZU,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(eJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(oJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(rJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gC,"id","transformers.TFAutoModelForPreTraining"),c(gC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gC,"href","#transformers.TFAutoModelForPreTraining"),c(ic,"class","relative group"),c(tJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(lJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(iJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(dJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(cJ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(mJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(fJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(gJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(hJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(uJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(pJ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(_J,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(bJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(vJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(FJ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(TJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(MJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(EJ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(CJ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(wJ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(AJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(LJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(yJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jC,"id","transformers.TFAutoModelForCausalLM"),c(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jC,"href","#transformers.TFAutoModelForCausalLM"),c(mc,"class","relative group"),c(xJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($J,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(RJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(PJ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(BJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(IJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(NJ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(qJ,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(jJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(DJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(GJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(OJ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(VJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(XJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o3,"id","transformers.TFAutoModelForImageClassification"),c(o3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o3,"href","#transformers.TFAutoModelForImageClassification"),c(hc,"class","relative group"),c(zJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(UJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(JJ,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(YJ,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(KJ,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(ZJ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c3,"id","transformers.TFAutoModelForMaskedLM"),c(c3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c3,"href","#transformers.TFAutoModelForMaskedLM"),c(_c,"class","relative group"),c(eY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tY,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(aY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(nY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(sY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(lY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(iY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(dY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(cY,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(mY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(fY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(gY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(hY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(uY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(pY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(_Y,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(bY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(vY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(FY,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(TY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(MY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R3,"id","transformers.TFAutoModelForSeq2SeqLM"),c(R3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R3,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Fc,"class","relative group"),c(EY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AY,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(LY,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(yY,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(xY,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c($Y,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(kY,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(SY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(RY,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(PY,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(BY,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q3,"id","transformers.TFAutoModelForSequenceClassification"),c(Q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q3,"href","#transformers.TFAutoModelForSequenceClassification"),c(Ec,"class","relative group"),c(IY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jY,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(DY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(GY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(OY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(VY,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(XY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(zY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(QY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(WY,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(HY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(UY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(JY,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(YY,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(KY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(ZY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(eK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(oK,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(rK,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(tK,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(aK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(nK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(sK,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(lK,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(iK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(dK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(cK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T5,"id","transformers.TFAutoModelForMultipleChoice"),c(T5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T5,"href","#transformers.TFAutoModelForMultipleChoice"),c(Ac,"class","relative group"),c(mK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hK,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(uK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(pK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(_K,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(bK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(vK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(FK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(TK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(MK,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(EK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(CK,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(wK,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(AK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(LK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(yK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(xK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c($K,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G5,"id","transformers.TFAutoModelForNextSentencePrediction"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(xc,"class","relative group"),c(kK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(BK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(Q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Sc,"class","relative group"),c(IK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jK,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.TFAutoModelForTokenClassification"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.TFAutoModelForTokenClassification"),c(Bc,"class","relative group"),c(DK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VK,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(XK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(zK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(QK,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(WK,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(HK,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(UK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(JK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(YK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(KK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(ZK,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(eZ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(oZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(rZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(tZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(aZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(nZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(sZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(lZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(iZ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v0,"id","transformers.TFAutoModelForQuestionAnswering"),c(v0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v0,"href","#transformers.TFAutoModelForQuestionAnswering"),c(qc,"class","relative group"),c(dZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(gZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(hZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(uZ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(pZ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(_Z,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(bZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(vZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(FZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(TZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(MZ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(EZ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(CZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(wZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(AZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(LZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(yZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(xZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c($Z,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(kZ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O0,"id","transformers.TFAutoModelForVision2Seq"),c(O0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O0,"href","#transformers.TFAutoModelForVision2Seq"),c(Gc,"class","relative group"),c(SZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BZ,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q0,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(Q0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q0,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Xc,"class","relative group"),c(IZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jZ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J0,"id","transformers.FlaxAutoModel"),c(J0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J0,"href","#transformers.FlaxAutoModel"),c(Wc,"class","relative group"),c(DZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(XZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(zZ,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(QZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(WZ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(HZ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(UZ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(JZ,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(YZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(KZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(ZZ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(eee,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(oee,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(ree,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(tee,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(aee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(nee,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(see,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(lee,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(iee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(dee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(cee,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(mee,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(fee,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(gee,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(hee,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(uee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aw,"id","transformers.FlaxAutoModelForCausalLM"),c(Aw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Aw,"href","#transformers.FlaxAutoModelForCausalLM"),c(Jc,"class","relative group"),c(pee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_ee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vee,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Fee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Tee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Mee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Eee,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Cee,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(wee,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Aee,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Lee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(yee,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jw,"id","transformers.FlaxAutoModelForPreTraining"),c(jw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jw,"href","#transformers.FlaxAutoModelForPreTraining"),c(Zc,"class","relative group"),c(xee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($ee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(See,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Ree,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Pee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Bee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Iee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Nee,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(qee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(jee,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Dee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Gee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Oee,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vee,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Xee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oA,"id","transformers.FlaxAutoModelForMaskedLM"),c(oA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oA,"href","#transformers.FlaxAutoModelForMaskedLM"),c(rm,"class","relative group"),c(zee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hee,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(Uee,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Jee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(Yee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(Kee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(Zee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(eoe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(ooe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(roe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(toe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hA,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(hA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hA,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(nm,"class","relative group"),c(aoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(noe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(soe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(loe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ioe,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(doe,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(coe,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(moe,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(foe,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(goe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(hoe,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(uoe,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(poe,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LA,"id","transformers.FlaxAutoModelForSequenceClassification"),c(LA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LA,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(im,"class","relative group"),c(_oe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(boe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(voe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Foe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Toe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Moe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Eoe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Coe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(woe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Aoe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Loe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(yoe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(xoe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DA,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(DA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DA,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(mm,"class","relative group"),c($oe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(koe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Soe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Roe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Poe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Boe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Ioe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Noe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(qoe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(joe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Doe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Goe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Ooe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZA,"id","transformers.FlaxAutoModelForTokenClassification"),c(ZA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZA,"href","#transformers.FlaxAutoModelForTokenClassification"),c(hm,"class","relative group"),c(Voe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qoe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Woe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Hoe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Uoe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Joe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Yoe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Koe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Zoe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c6,"id","transformers.FlaxAutoModelForMultipleChoice"),c(c6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c6,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(_m,"class","relative group"),c(ere,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ore,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tre,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(are,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(nre,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(sre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(lre,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(ire,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(dre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(cre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T6,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(T6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T6,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Fm,"class","relative group"),c(mre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w6,"id","transformers.FlaxAutoModelForImageClassification"),c(w6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w6,"href","#transformers.FlaxAutoModelForImageClassification"),c(Em,"class","relative group"),c(ure,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_re,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bre,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(vre,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($6,"id","transformers.FlaxAutoModelForVision2Seq"),c($6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($6,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Am,"class","relative group"),c(Fre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ere,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Eo),e(Eo,Ai),b(m,Sm,_),b(m,st,_),e(st,Li),e(st,yi),e(yi,KL),e(st,Rm),b(m,Oe,_),b(m,Qe,_),e(Qe,xi),e(Qe,Pn),e(Pn,ZL),e(Qe,Bn),e(Qe,In),e(In,ey),e(Qe,$i),e(Qe,Nn),e(Nn,oy),e(Qe,ki),b(m,Pm,_),M(Sa,m,_),b(m,We,_),b(m,Ae,_),e(Ae,SS),e(Ae,Si),e(Si,RS),e(Ae,PS),b(m,Co,_),b(m,Ra,_),e(Ra,BS),e(Ra,Bm),e(Bm,IS),e(Ra,tHe),b(m,OVe,_),b(m,Ri,_),e(Ri,Im),e(Im,bae),M(ry,bae,null),e(Ri,aHe),e(Ri,vae),e(vae,nHe),b(m,VVe,_),b(m,qn,_),e(qn,sHe),e(qn,Fae),e(Fae,lHe),e(qn,iHe),e(qn,Tae),e(Tae,dHe),e(qn,cHe),b(m,XVe,_),M(ty,m,_),b(m,zVe,_),b(m,NS,_),e(NS,mHe),b(m,QVe,_),M(Nm,m,_),b(m,WVe,_),b(m,Pi,_),e(Pi,qm),e(qm,Mae),M(ay,Mae,null),e(Pi,fHe),e(Pi,Eae),e(Eae,gHe),b(m,HVe,_),b(m,wo,_),M(ny,wo,null),e(wo,hHe),e(wo,sy),e(sy,uHe),e(sy,qS),e(qS,pHe),e(sy,_He),e(wo,bHe),e(wo,ly),e(ly,vHe),e(ly,Cae),e(Cae,FHe),e(ly,THe),e(wo,MHe),e(wo,Lr),M(iy,Lr,null),e(Lr,EHe),e(Lr,wae),e(wae,CHe),e(Lr,wHe),e(Lr,Bi),e(Bi,AHe),e(Bi,Aae),e(Aae,LHe),e(Bi,yHe),e(Bi,Lae),e(Lae,xHe),e(Bi,$He),e(Lr,kHe),e(Lr,A),e(A,jm),e(jm,yae),e(yae,SHe),e(jm,RHe),e(jm,jS),e(jS,PHe),e(jm,BHe),e(A,IHe),e(A,Dm),e(Dm,xae),e(xae,NHe),e(Dm,qHe),e(Dm,DS),e(DS,jHe),e(Dm,DHe),e(A,GHe),e(A,Gm),e(Gm,$ae),e($ae,OHe),e(Gm,VHe),e(Gm,GS),e(GS,XHe),e(Gm,zHe),e(A,QHe),e(A,Om),e(Om,kae),e(kae,WHe),e(Om,HHe),e(Om,OS),e(OS,UHe),e(Om,JHe),e(A,YHe),e(A,Vm),e(Vm,Sae),e(Sae,KHe),e(Vm,ZHe),e(Vm,VS),e(VS,eUe),e(Vm,oUe),e(A,rUe),e(A,Xm),e(Xm,Rae),e(Rae,tUe),e(Xm,aUe),e(Xm,XS),e(XS,nUe),e(Xm,sUe),e(A,lUe),e(A,zm),e(zm,Pae),e(Pae,iUe),e(zm,dUe),e(zm,zS),e(zS,cUe),e(zm,mUe),e(A,fUe),e(A,Qm),e(Qm,Bae),e(Bae,gUe),e(Qm,hUe),e(Qm,QS),e(QS,uUe),e(Qm,pUe),e(A,_Ue),e(A,Wm),e(Wm,Iae),e(Iae,bUe),e(Wm,vUe),e(Wm,WS),e(WS,FUe),e(Wm,TUe),e(A,MUe),e(A,Hm),e(Hm,Nae),e(Nae,EUe),e(Hm,CUe),e(Hm,HS),e(HS,wUe),e(Hm,AUe),e(A,LUe),e(A,Um),e(Um,qae),e(qae,yUe),e(Um,xUe),e(Um,US),e(US,$Ue),e(Um,kUe),e(A,SUe),e(A,Jm),e(Jm,jae),e(jae,RUe),e(Jm,PUe),e(Jm,JS),e(JS,BUe),e(Jm,IUe),e(A,NUe),e(A,Ym),e(Ym,Dae),e(Dae,qUe),e(Ym,jUe),e(Ym,YS),e(YS,DUe),e(Ym,GUe),e(A,OUe),e(A,Km),e(Km,Gae),e(Gae,VUe),e(Km,XUe),e(Km,KS),e(KS,zUe),e(Km,QUe),e(A,WUe),e(A,Zm),e(Zm,Oae),e(Oae,HUe),e(Zm,UUe),e(Zm,ZS),e(ZS,JUe),e(Zm,YUe),e(A,KUe),e(A,ef),e(ef,Vae),e(Vae,ZUe),e(ef,eJe),e(ef,eR),e(eR,oJe),e(ef,rJe),e(A,tJe),e(A,of),e(of,Xae),e(Xae,aJe),e(of,nJe),e(of,oR),e(oR,sJe),e(of,lJe),e(A,iJe),e(A,rf),e(rf,zae),e(zae,dJe),e(rf,cJe),e(rf,rR),e(rR,mJe),e(rf,fJe),e(A,gJe),e(A,tf),e(tf,Qae),e(Qae,hJe),e(tf,uJe),e(tf,tR),e(tR,pJe),e(tf,_Je),e(A,bJe),e(A,af),e(af,Wae),e(Wae,vJe),e(af,FJe),e(af,aR),e(aR,TJe),e(af,MJe),e(A,EJe),e(A,nf),e(nf,Hae),e(Hae,CJe),e(nf,wJe),e(nf,nR),e(nR,AJe),e(nf,LJe),e(A,yJe),e(A,sf),e(sf,Uae),e(Uae,xJe),e(sf,$Je),e(sf,sR),e(sR,kJe),e(sf,SJe),e(A,RJe),e(A,lf),e(lf,Jae),e(Jae,PJe),e(lf,BJe),e(lf,lR),e(lR,IJe),e(lf,NJe),e(A,qJe),e(A,df),e(df,Yae),e(Yae,jJe),e(df,DJe),e(df,iR),e(iR,GJe),e(df,OJe),e(A,VJe),e(A,cf),e(cf,Kae),e(Kae,XJe),e(cf,zJe),e(cf,dR),e(dR,QJe),e(cf,WJe),e(A,HJe),e(A,mf),e(mf,Zae),e(Zae,UJe),e(mf,JJe),e(mf,cR),e(cR,YJe),e(mf,KJe),e(A,ZJe),e(A,ff),e(ff,ene),e(ene,eYe),e(ff,oYe),e(ff,mR),e(mR,rYe),e(ff,tYe),e(A,aYe),e(A,gf),e(gf,one),e(one,nYe),e(gf,sYe),e(gf,fR),e(fR,lYe),e(gf,iYe),e(A,dYe),e(A,hf),e(hf,rne),e(rne,cYe),e(hf,mYe),e(hf,gR),e(gR,fYe),e(hf,gYe),e(A,hYe),e(A,uf),e(uf,tne),e(tne,uYe),e(uf,pYe),e(uf,hR),e(hR,_Ye),e(uf,bYe),e(A,vYe),e(A,pf),e(pf,ane),e(ane,FYe),e(pf,TYe),e(pf,uR),e(uR,MYe),e(pf,EYe),e(A,CYe),e(A,_f),e(_f,nne),e(nne,wYe),e(_f,AYe),e(_f,pR),e(pR,LYe),e(_f,yYe),e(A,xYe),e(A,bf),e(bf,sne),e(sne,$Ye),e(bf,kYe),e(bf,_R),e(_R,SYe),e(bf,RYe),e(A,PYe),e(A,vf),e(vf,lne),e(lne,BYe),e(vf,IYe),e(vf,bR),e(bR,NYe),e(vf,qYe),e(A,jYe),e(A,Ff),e(Ff,ine),e(ine,DYe),e(Ff,GYe),e(Ff,vR),e(vR,OYe),e(Ff,VYe),e(A,XYe),e(A,Tf),e(Tf,dne),e(dne,zYe),e(Tf,QYe),e(Tf,FR),e(FR,WYe),e(Tf,HYe),e(A,UYe),e(A,Mf),e(Mf,cne),e(cne,JYe),e(Mf,YYe),e(Mf,TR),e(TR,KYe),e(Mf,ZYe),e(A,eKe),e(A,Ef),e(Ef,mne),e(mne,oKe),e(Ef,rKe),e(Ef,MR),e(MR,tKe),e(Ef,aKe),e(A,nKe),e(A,Cf),e(Cf,fne),e(fne,sKe),e(Cf,lKe),e(Cf,ER),e(ER,iKe),e(Cf,dKe),e(A,cKe),e(A,wf),e(wf,gne),e(gne,mKe),e(wf,fKe),e(wf,CR),e(CR,gKe),e(wf,hKe),e(A,uKe),e(A,Af),e(Af,hne),e(hne,pKe),e(Af,_Ke),e(Af,wR),e(wR,bKe),e(Af,vKe),e(A,FKe),e(A,Lf),e(Lf,une),e(une,TKe),e(Lf,MKe),e(Lf,AR),e(AR,EKe),e(Lf,CKe),e(A,wKe),e(A,yf),e(yf,pne),e(pne,AKe),e(yf,LKe),e(yf,LR),e(LR,yKe),e(yf,xKe),e(A,$Ke),e(A,xf),e(xf,_ne),e(_ne,kKe),e(xf,SKe),e(xf,yR),e(yR,RKe),e(xf,PKe),e(A,BKe),e(A,$f),e($f,bne),e(bne,IKe),e($f,NKe),e($f,xR),e(xR,qKe),e($f,jKe),e(A,DKe),e(A,kf),e(kf,vne),e(vne,GKe),e(kf,OKe),e(kf,$R),e($R,VKe),e(kf,XKe),e(A,zKe),e(A,Sf),e(Sf,Fne),e(Fne,QKe),e(Sf,WKe),e(Sf,kR),e(kR,HKe),e(Sf,UKe),e(A,JKe),e(A,Rf),e(Rf,Tne),e(Tne,YKe),e(Rf,KKe),e(Rf,SR),e(SR,ZKe),e(Rf,eZe),e(A,oZe),e(A,Pf),e(Pf,Mne),e(Mne,rZe),e(Pf,tZe),e(Pf,RR),e(RR,aZe),e(Pf,nZe),e(A,sZe),e(A,Bf),e(Bf,Ene),e(Ene,lZe),e(Bf,iZe),e(Bf,PR),e(PR,dZe),e(Bf,cZe),e(A,mZe),e(A,If),e(If,Cne),e(Cne,fZe),e(If,gZe),e(If,BR),e(BR,hZe),e(If,uZe),e(A,pZe),e(A,Nf),e(Nf,wne),e(wne,_Ze),e(Nf,bZe),e(Nf,IR),e(IR,vZe),e(Nf,FZe),e(A,TZe),e(A,qf),e(qf,Ane),e(Ane,MZe),e(qf,EZe),e(qf,NR),e(NR,CZe),e(qf,wZe),e(A,AZe),e(A,jf),e(jf,Lne),e(Lne,LZe),e(jf,yZe),e(jf,qR),e(qR,xZe),e(jf,$Ze),e(A,kZe),e(A,Df),e(Df,yne),e(yne,SZe),e(Df,RZe),e(Df,jR),e(jR,PZe),e(Df,BZe),e(A,IZe),e(A,Gf),e(Gf,xne),e(xne,NZe),e(Gf,qZe),e(Gf,DR),e(DR,jZe),e(Gf,DZe),e(A,GZe),e(A,Of),e(Of,$ne),e($ne,OZe),e(Of,VZe),e(Of,GR),e(GR,XZe),e(Of,zZe),e(A,QZe),e(A,Vf),e(Vf,kne),e(kne,WZe),e(Vf,HZe),e(Vf,OR),e(OR,UZe),e(Vf,JZe),e(A,YZe),e(A,Xf),e(Xf,Sne),e(Sne,KZe),e(Xf,ZZe),e(Xf,VR),e(VR,eeo),e(Xf,oeo),e(A,reo),e(A,zf),e(zf,Rne),e(Rne,teo),e(zf,aeo),e(zf,XR),e(XR,neo),e(zf,seo),e(A,leo),e(A,Qf),e(Qf,Pne),e(Pne,ieo),e(Qf,deo),e(Qf,zR),e(zR,ceo),e(Qf,meo),e(A,feo),e(A,Wf),e(Wf,Bne),e(Bne,geo),e(Wf,heo),e(Wf,QR),e(QR,ueo),e(Wf,peo),e(A,_eo),e(A,Hf),e(Hf,Ine),e(Ine,beo),e(Hf,veo),e(Hf,WR),e(WR,Feo),e(Hf,Teo),e(A,Meo),e(A,Uf),e(Uf,Nne),e(Nne,Eeo),e(Uf,Ceo),e(Uf,HR),e(HR,weo),e(Uf,Aeo),e(A,Leo),e(A,Jf),e(Jf,qne),e(qne,yeo),e(Jf,xeo),e(Jf,UR),e(UR,$eo),e(Jf,keo),e(A,Seo),e(A,Yf),e(Yf,jne),e(jne,Reo),e(Yf,Peo),e(Yf,JR),e(JR,Beo),e(Yf,Ieo),e(A,Neo),e(A,Kf),e(Kf,Dne),e(Dne,qeo),e(Kf,jeo),e(Kf,YR),e(YR,Deo),e(Kf,Geo),e(A,Oeo),e(A,Zf),e(Zf,Gne),e(Gne,Veo),e(Zf,Xeo),e(Zf,KR),e(KR,zeo),e(Zf,Qeo),e(A,Weo),e(A,eg),e(eg,One),e(One,Heo),e(eg,Ueo),e(eg,ZR),e(ZR,Jeo),e(eg,Yeo),e(A,Keo),e(A,og),e(og,Vne),e(Vne,Zeo),e(og,eoo),e(og,eP),e(eP,ooo),e(og,roo),e(A,too),e(A,rg),e(rg,Xne),e(Xne,aoo),e(rg,noo),e(rg,oP),e(oP,soo),e(rg,loo),e(A,ioo),e(A,tg),e(tg,zne),e(zne,doo),e(tg,coo),e(tg,rP),e(rP,moo),e(tg,foo),e(A,goo),e(A,ag),e(ag,Qne),e(Qne,hoo),e(ag,uoo),e(ag,tP),e(tP,poo),e(ag,_oo),e(A,boo),e(A,ng),e(ng,Wne),e(Wne,voo),e(ng,Foo),e(ng,aP),e(aP,Too),e(ng,Moo),e(A,Eoo),e(A,sg),e(sg,Hne),e(Hne,Coo),e(sg,woo),e(sg,nP),e(nP,Aoo),e(sg,Loo),e(A,yoo),e(A,lg),e(lg,Une),e(Une,xoo),e(lg,$oo),e(lg,sP),e(sP,koo),e(lg,Soo),e(A,Roo),e(A,ig),e(ig,Jne),e(Jne,Poo),e(ig,Boo),e(ig,lP),e(lP,Ioo),e(ig,Noo),e(A,qoo),e(A,dg),e(dg,Yne),e(Yne,joo),e(dg,Doo),e(dg,iP),e(iP,Goo),e(dg,Ooo),e(A,Voo),e(A,cg),e(cg,Kne),e(Kne,Xoo),e(cg,zoo),e(cg,dP),e(dP,Qoo),e(cg,Woo),e(A,Hoo),e(A,mg),e(mg,Zne),e(Zne,Uoo),e(mg,Joo),e(mg,cP),e(cP,Yoo),e(mg,Koo),e(A,Zoo),e(A,fg),e(fg,ese),e(ese,ero),e(fg,oro),e(fg,mP),e(mP,rro),e(fg,tro),e(A,aro),e(A,gg),e(gg,ose),e(ose,nro),e(gg,sro),e(gg,fP),e(fP,lro),e(gg,iro),e(A,dro),e(A,hg),e(hg,rse),e(rse,cro),e(hg,mro),e(hg,gP),e(gP,fro),e(hg,gro),e(A,hro),e(A,ug),e(ug,tse),e(tse,uro),e(ug,pro),e(ug,hP),e(hP,_ro),e(ug,bro),e(A,vro),e(A,pg),e(pg,ase),e(ase,Fro),e(pg,Tro),e(pg,uP),e(uP,Mro),e(pg,Ero),e(A,Cro),e(A,_g),e(_g,nse),e(nse,wro),e(_g,Aro),e(_g,pP),e(pP,Lro),e(_g,yro),e(A,xro),e(A,bg),e(bg,sse),e(sse,$ro),e(bg,kro),e(bg,_P),e(_P,Sro),e(bg,Rro),e(A,Pro),e(A,vg),e(vg,lse),e(lse,Bro),e(vg,Iro),e(vg,bP),e(bP,Nro),e(vg,qro),e(A,jro),e(A,Fg),e(Fg,ise),e(ise,Dro),e(Fg,Gro),e(Fg,vP),e(vP,Oro),e(Fg,Vro),e(A,Xro),e(A,Tg),e(Tg,dse),e(dse,zro),e(Tg,Qro),e(Tg,FP),e(FP,Wro),e(Tg,Hro),e(A,Uro),e(A,Mg),e(Mg,cse),e(cse,Jro),e(Mg,Yro),e(Mg,TP),e(TP,Kro),e(Mg,Zro),e(A,eto),e(A,Eg),e(Eg,mse),e(mse,oto),e(Eg,rto),e(Eg,MP),e(MP,tto),e(Eg,ato),e(A,nto),e(A,Cg),e(Cg,fse),e(fse,sto),e(Cg,lto),e(Cg,EP),e(EP,ito),e(Cg,dto),e(A,cto),e(A,wg),e(wg,gse),e(gse,mto),e(wg,fto),e(wg,CP),e(CP,gto),e(wg,hto),e(A,uto),e(A,Ag),e(Ag,hse),e(hse,pto),e(Ag,_to),e(Ag,wP),e(wP,bto),e(Ag,vto),e(A,Fto),e(A,Lg),e(Lg,use),e(use,Tto),e(Lg,Mto),e(Lg,AP),e(AP,Eto),e(Lg,Cto),e(A,wto),e(A,yg),e(yg,pse),e(pse,Ato),e(yg,Lto),e(yg,LP),e(LP,yto),e(yg,xto),e(A,$to),e(A,xg),e(xg,_se),e(_se,kto),e(xg,Sto),e(xg,yP),e(yP,Rto),e(xg,Pto),e(A,Bto),e(A,$g),e($g,bse),e(bse,Ito),e($g,Nto),e($g,xP),e(xP,qto),e($g,jto),e(A,Dto),e(A,kg),e(kg,vse),e(vse,Gto),e(kg,Oto),e(kg,$P),e($P,Vto),e(kg,Xto),e(A,zto),e(A,Sg),e(Sg,Fse),e(Fse,Qto),e(Sg,Wto),e(Sg,kP),e(kP,Hto),e(Sg,Uto),e(A,Jto),e(A,Rg),e(Rg,Tse),e(Tse,Yto),e(Rg,Kto),e(Rg,SP),e(SP,Zto),e(Rg,eao),e(A,oao),e(A,Pg),e(Pg,Mse),e(Mse,rao),e(Pg,tao),e(Pg,RP),e(RP,aao),e(Pg,nao),e(A,sao),e(A,Bg),e(Bg,Ese),e(Ese,lao),e(Bg,iao),e(Bg,PP),e(PP,dao),e(Bg,cao),e(A,mao),e(A,Ig),e(Ig,Cse),e(Cse,fao),e(Ig,gao),e(Ig,BP),e(BP,hao),e(Ig,uao),e(A,pao),e(A,Ng),e(Ng,wse),e(wse,_ao),e(Ng,bao),e(Ng,IP),e(IP,vao),e(Ng,Fao),e(A,Tao),e(A,qg),e(qg,Ase),e(Ase,Mao),e(qg,Eao),e(qg,NP),e(NP,Cao),e(qg,wao),e(A,Aao),e(A,jg),e(jg,Lse),e(Lse,Lao),e(jg,yao),e(jg,qP),e(qP,xao),e(jg,$ao),e(A,kao),e(A,Dg),e(Dg,yse),e(yse,Sao),e(Dg,Rao),e(Dg,jP),e(jP,Pao),e(Dg,Bao),e(A,Iao),e(A,Gg),e(Gg,xse),e(xse,Nao),e(Gg,qao),e(Gg,DP),e(DP,jao),e(Gg,Dao),e(A,Gao),e(A,Og),e(Og,$se),e($se,Oao),e(Og,Vao),e(Og,GP),e(GP,Xao),e(Og,zao),e(A,Qao),e(A,Vg),e(Vg,kse),e(kse,Wao),e(Vg,Hao),e(Vg,OP),e(OP,Uao),e(Vg,Jao),e(A,Yao),e(A,Xg),e(Xg,Sse),e(Sse,Kao),e(Xg,Zao),e(Xg,VP),e(VP,eno),e(Xg,ono),e(A,rno),e(A,zg),e(zg,Rse),e(Rse,tno),e(zg,ano),e(zg,XP),e(XP,nno),e(zg,sno),e(A,lno),e(A,Qg),e(Qg,Pse),e(Pse,ino),e(Qg,dno),e(Qg,zP),e(zP,cno),e(Qg,mno),e(A,fno),e(A,Wg),e(Wg,Bse),e(Bse,gno),e(Wg,hno),e(Wg,QP),e(QP,uno),e(Wg,pno),e(A,_no),e(A,Hg),e(Hg,Ise),e(Ise,bno),e(Hg,vno),e(Hg,WP),e(WP,Fno),e(Hg,Tno),e(A,Mno),e(A,Ug),e(Ug,Nse),e(Nse,Eno),e(Ug,Cno),e(Ug,HP),e(HP,wno),e(Ug,Ano),e(Lr,Lno),M(Jg,Lr,null),e(wo,yno),e(wo,Yg),M(dy,Yg,null),e(Yg,xno),e(Yg,qse),e(qse,$no),b(m,UVe,_),b(m,Ii,_),e(Ii,Kg),e(Kg,jse),M(cy,jse,null),e(Ii,kno),e(Ii,Dse),e(Dse,Sno),b(m,JVe,_),b(m,Ao,_),M(my,Ao,null),e(Ao,Rno),e(Ao,fy),e(fy,Pno),e(fy,UP),e(UP,Bno),e(fy,Ino),e(Ao,Nno),e(Ao,gy),e(gy,qno),e(gy,Gse),e(Gse,jno),e(gy,Dno),e(Ao,Gno),e(Ao,yr),M(hy,yr,null),e(yr,Ono),e(yr,Ose),e(Ose,Vno),e(yr,Xno),e(yr,Pa),e(Pa,zno),e(Pa,Vse),e(Vse,Qno),e(Pa,Wno),e(Pa,Xse),e(Xse,Hno),e(Pa,Uno),e(Pa,zse),e(zse,Jno),e(Pa,Yno),e(yr,Kno),e(yr,k),e(k,jn),e(jn,Qse),e(Qse,Zno),e(jn,eso),e(jn,JP),e(JP,oso),e(jn,rso),e(jn,YP),e(YP,tso),e(jn,aso),e(k,nso),e(k,Dn),e(Dn,Wse),e(Wse,sso),e(Dn,lso),e(Dn,KP),e(KP,iso),e(Dn,dso),e(Dn,ZP),e(ZP,cso),e(Dn,mso),e(k,fso),e(k,Gn),e(Gn,Hse),e(Hse,gso),e(Gn,hso),e(Gn,eB),e(eB,uso),e(Gn,pso),e(Gn,oB),e(oB,_so),e(Gn,bso),e(k,vso),e(k,Zg),e(Zg,Use),e(Use,Fso),e(Zg,Tso),e(Zg,rB),e(rB,Mso),e(Zg,Eso),e(k,Cso),e(k,On),e(On,Jse),e(Jse,wso),e(On,Aso),e(On,tB),e(tB,Lso),e(On,yso),e(On,aB),e(aB,xso),e(On,$so),e(k,kso),e(k,eh),e(eh,Yse),e(Yse,Sso),e(eh,Rso),e(eh,nB),e(nB,Pso),e(eh,Bso),e(k,Iso),e(k,oh),e(oh,Kse),e(Kse,Nso),e(oh,qso),e(oh,sB),e(sB,jso),e(oh,Dso),e(k,Gso),e(k,rh),e(rh,Zse),e(Zse,Oso),e(rh,Vso),e(rh,lB),e(lB,Xso),e(rh,zso),e(k,Qso),e(k,Vn),e(Vn,ele),e(ele,Wso),e(Vn,Hso),e(Vn,iB),e(iB,Uso),e(Vn,Jso),e(Vn,dB),e(dB,Yso),e(Vn,Kso),e(k,Zso),e(k,Xn),e(Xn,ole),e(ole,elo),e(Xn,olo),e(Xn,cB),e(cB,rlo),e(Xn,tlo),e(Xn,mB),e(mB,alo),e(Xn,nlo),e(k,slo),e(k,zn),e(zn,rle),e(rle,llo),e(zn,ilo),e(zn,fB),e(fB,dlo),e(zn,clo),e(zn,gB),e(gB,mlo),e(zn,flo),e(k,glo),e(k,th),e(th,tle),e(tle,hlo),e(th,ulo),e(th,hB),e(hB,plo),e(th,_lo),e(k,blo),e(k,ah),e(ah,ale),e(ale,vlo),e(ah,Flo),e(ah,uB),e(uB,Tlo),e(ah,Mlo),e(k,Elo),e(k,nh),e(nh,nle),e(nle,Clo),e(nh,wlo),e(nh,pB),e(pB,Alo),e(nh,Llo),e(k,ylo),e(k,Qn),e(Qn,sle),e(sle,xlo),e(Qn,$lo),e(Qn,_B),e(_B,klo),e(Qn,Slo),e(Qn,bB),e(bB,Rlo),e(Qn,Plo),e(k,Blo),e(k,sh),e(sh,lle),e(lle,Ilo),e(sh,Nlo),e(sh,vB),e(vB,qlo),e(sh,jlo),e(k,Dlo),e(k,Wn),e(Wn,ile),e(ile,Glo),e(Wn,Olo),e(Wn,FB),e(FB,Vlo),e(Wn,Xlo),e(Wn,TB),e(TB,zlo),e(Wn,Qlo),e(k,Wlo),e(k,Hn),e(Hn,dle),e(dle,Hlo),e(Hn,Ulo),e(Hn,MB),e(MB,Jlo),e(Hn,Ylo),e(Hn,EB),e(EB,Klo),e(Hn,Zlo),e(k,eio),e(k,Un),e(Un,cle),e(cle,oio),e(Un,rio),e(Un,CB),e(CB,tio),e(Un,aio),e(Un,wB),e(wB,nio),e(Un,sio),e(k,lio),e(k,Jn),e(Jn,mle),e(mle,iio),e(Jn,dio),e(Jn,AB),e(AB,cio),e(Jn,mio),e(Jn,LB),e(LB,fio),e(Jn,gio),e(k,hio),e(k,lh),e(lh,fle),e(fle,uio),e(lh,pio),e(lh,yB),e(yB,_io),e(lh,bio),e(k,vio),e(k,Yn),e(Yn,gle),e(gle,Fio),e(Yn,Tio),e(Yn,xB),e(xB,Mio),e(Yn,Eio),e(Yn,$B),e($B,Cio),e(Yn,wio),e(k,Aio),e(k,Kn),e(Kn,hle),e(hle,Lio),e(Kn,yio),e(Kn,kB),e(kB,xio),e(Kn,$io),e(Kn,SB),e(SB,kio),e(Kn,Sio),e(k,Rio),e(k,Zn),e(Zn,ule),e(ule,Pio),e(Zn,Bio),e(Zn,RB),e(RB,Iio),e(Zn,Nio),e(Zn,PB),e(PB,qio),e(Zn,jio),e(k,Dio),e(k,es),e(es,ple),e(ple,Gio),e(es,Oio),e(es,BB),e(BB,Vio),e(es,Xio),e(es,IB),e(IB,zio),e(es,Qio),e(k,Wio),e(k,os),e(os,_le),e(_le,Hio),e(os,Uio),e(os,NB),e(NB,Jio),e(os,Yio),e(os,qB),e(qB,Kio),e(os,Zio),e(k,edo),e(k,rs),e(rs,ble),e(ble,odo),e(rs,rdo),e(rs,jB),e(jB,tdo),e(rs,ado),e(rs,DB),e(DB,ndo),e(rs,sdo),e(k,ldo),e(k,ih),e(ih,vle),e(vle,ido),e(ih,ddo),e(ih,GB),e(GB,cdo),e(ih,mdo),e(k,fdo),e(k,ts),e(ts,Fle),e(Fle,gdo),e(ts,hdo),e(ts,OB),e(OB,udo),e(ts,pdo),e(ts,VB),e(VB,_do),e(ts,bdo),e(k,vdo),e(k,dh),e(dh,Tle),e(Tle,Fdo),e(dh,Tdo),e(dh,XB),e(XB,Mdo),e(dh,Edo),e(k,Cdo),e(k,as),e(as,Mle),e(Mle,wdo),e(as,Ado),e(as,zB),e(zB,Ldo),e(as,ydo),e(as,QB),e(QB,xdo),e(as,$do),e(k,kdo),e(k,ns),e(ns,Ele),e(Ele,Sdo),e(ns,Rdo),e(ns,WB),e(WB,Pdo),e(ns,Bdo),e(ns,HB),e(HB,Ido),e(ns,Ndo),e(k,qdo),e(k,ss),e(ss,Cle),e(Cle,jdo),e(ss,Ddo),e(ss,UB),e(UB,Gdo),e(ss,Odo),e(ss,JB),e(JB,Vdo),e(ss,Xdo),e(k,zdo),e(k,ch),e(ch,wle),e(wle,Qdo),e(ch,Wdo),e(ch,YB),e(YB,Hdo),e(ch,Udo),e(k,Jdo),e(k,ls),e(ls,Ale),e(Ale,Ydo),e(ls,Kdo),e(ls,KB),e(KB,Zdo),e(ls,eco),e(ls,ZB),e(ZB,oco),e(ls,rco),e(k,tco),e(k,is),e(is,Lle),e(Lle,aco),e(is,nco),e(is,eI),e(eI,sco),e(is,lco),e(is,oI),e(oI,ico),e(is,dco),e(k,cco),e(k,ds),e(ds,yle),e(yle,mco),e(ds,fco),e(ds,rI),e(rI,gco),e(ds,hco),e(ds,tI),e(tI,uco),e(ds,pco),e(k,_co),e(k,mh),e(mh,xle),e(xle,bco),e(mh,vco),e(mh,aI),e(aI,Fco),e(mh,Tco),e(k,Mco),e(k,cs),e(cs,$le),e($le,Eco),e(cs,Cco),e(cs,nI),e(nI,wco),e(cs,Aco),e(cs,sI),e(sI,Lco),e(cs,yco),e(k,xco),e(k,ms),e(ms,kle),e(kle,$co),e(ms,kco),e(ms,lI),e(lI,Sco),e(ms,Rco),e(ms,iI),e(iI,Pco),e(ms,Bco),e(k,Ico),e(k,fs),e(fs,Sle),e(Sle,Nco),e(fs,qco),e(fs,dI),e(dI,jco),e(fs,Dco),e(fs,cI),e(cI,Gco),e(fs,Oco),e(k,Vco),e(k,gs),e(gs,Rle),e(Rle,Xco),e(gs,zco),e(gs,mI),e(mI,Qco),e(gs,Wco),e(gs,fI),e(fI,Hco),e(gs,Uco),e(k,Jco),e(k,hs),e(hs,Ple),e(Ple,Yco),e(hs,Kco),e(hs,gI),e(gI,Zco),e(hs,emo),e(hs,hI),e(hI,omo),e(hs,rmo),e(k,tmo),e(k,us),e(us,Ble),e(Ble,amo),e(us,nmo),e(us,uI),e(uI,smo),e(us,lmo),e(us,pI),e(pI,imo),e(us,dmo),e(k,cmo),e(k,ps),e(ps,Ile),e(Ile,mmo),e(ps,fmo),e(ps,_I),e(_I,gmo),e(ps,hmo),e(ps,bI),e(bI,umo),e(ps,pmo),e(k,_mo),e(k,_s),e(_s,Nle),e(Nle,bmo),e(_s,vmo),e(_s,vI),e(vI,Fmo),e(_s,Tmo),e(_s,FI),e(FI,Mmo),e(_s,Emo),e(k,Cmo),e(k,fh),e(fh,qle),e(qle,wmo),e(fh,Amo),e(fh,TI),e(TI,Lmo),e(fh,ymo),e(k,xmo),e(k,bs),e(bs,jle),e(jle,$mo),e(bs,kmo),e(bs,MI),e(MI,Smo),e(bs,Rmo),e(bs,EI),e(EI,Pmo),e(bs,Bmo),e(k,Imo),e(k,gh),e(gh,Dle),e(Dle,Nmo),e(gh,qmo),e(gh,CI),e(CI,jmo),e(gh,Dmo),e(k,Gmo),e(k,hh),e(hh,Gle),e(Gle,Omo),e(hh,Vmo),e(hh,wI),e(wI,Xmo),e(hh,zmo),e(k,Qmo),e(k,vs),e(vs,Ole),e(Ole,Wmo),e(vs,Hmo),e(vs,AI),e(AI,Umo),e(vs,Jmo),e(vs,LI),e(LI,Ymo),e(vs,Kmo),e(k,Zmo),e(k,Fs),e(Fs,Vle),e(Vle,efo),e(Fs,ofo),e(Fs,yI),e(yI,rfo),e(Fs,tfo),e(Fs,xI),e(xI,afo),e(Fs,nfo),e(k,sfo),e(k,Ts),e(Ts,Xle),e(Xle,lfo),e(Ts,ifo),e(Ts,$I),e($I,dfo),e(Ts,cfo),e(Ts,kI),e(kI,mfo),e(Ts,ffo),e(k,gfo),e(k,uh),e(uh,zle),e(zle,hfo),e(uh,ufo),e(uh,SI),e(SI,pfo),e(uh,_fo),e(k,bfo),e(k,Ms),e(Ms,Qle),e(Qle,vfo),e(Ms,Ffo),e(Ms,RI),e(RI,Tfo),e(Ms,Mfo),e(Ms,PI),e(PI,Efo),e(Ms,Cfo),e(k,wfo),e(k,Es),e(Es,Wle),e(Wle,Afo),e(Es,Lfo),e(Es,BI),e(BI,yfo),e(Es,xfo),e(Es,II),e(II,$fo),e(Es,kfo),e(k,Sfo),e(k,Cs),e(Cs,Hle),e(Hle,Rfo),e(Cs,Pfo),e(Cs,NI),e(NI,Bfo),e(Cs,Ifo),e(Cs,qI),e(qI,Nfo),e(Cs,qfo),e(k,jfo),e(k,ws),e(ws,Ule),e(Ule,Dfo),e(ws,Gfo),e(ws,jI),e(jI,Ofo),e(ws,Vfo),e(ws,DI),e(DI,Xfo),e(ws,zfo),e(k,Qfo),e(k,As),e(As,Jle),e(Jle,Wfo),e(As,Hfo),e(As,GI),e(GI,Ufo),e(As,Jfo),e(As,OI),e(OI,Yfo),e(As,Kfo),e(k,Zfo),e(k,Ls),e(Ls,Yle),e(Yle,ego),e(Ls,ogo),e(Ls,VI),e(VI,rgo),e(Ls,tgo),e(Ls,XI),e(XI,ago),e(Ls,ngo),e(k,sgo),e(k,ys),e(ys,Kle),e(Kle,lgo),e(ys,igo),e(ys,zI),e(zI,dgo),e(ys,cgo),e(ys,QI),e(QI,mgo),e(ys,fgo),e(k,ggo),e(k,ph),e(ph,Zle),e(Zle,hgo),e(ph,ugo),e(ph,WI),e(WI,pgo),e(ph,_go),e(k,bgo),e(k,xs),e(xs,eie),e(eie,vgo),e(xs,Fgo),e(xs,HI),e(HI,Tgo),e(xs,Mgo),e(xs,UI),e(UI,Ego),e(xs,Cgo),e(k,wgo),e(k,_h),e(_h,oie),e(oie,Ago),e(_h,Lgo),e(_h,JI),e(JI,ygo),e(_h,xgo),e(k,$go),e(k,bh),e(bh,rie),e(rie,kgo),e(bh,Sgo),e(bh,YI),e(YI,Rgo),e(bh,Pgo),e(k,Bgo),e(k,vh),e(vh,tie),e(tie,Igo),e(vh,Ngo),e(vh,KI),e(KI,qgo),e(vh,jgo),e(k,Dgo),e(k,Fh),e(Fh,aie),e(aie,Ggo),e(Fh,Ogo),e(Fh,ZI),e(ZI,Vgo),e(Fh,Xgo),e(k,zgo),e(k,$s),e($s,nie),e(nie,Qgo),e($s,Wgo),e($s,eN),e(eN,Hgo),e($s,Ugo),e($s,oN),e(oN,Jgo),e($s,Ygo),e(k,Kgo),e(k,Th),e(Th,sie),e(sie,Zgo),e(Th,eho),e(Th,rN),e(rN,oho),e(Th,rho),e(k,tho),e(k,ks),e(ks,lie),e(lie,aho),e(ks,nho),e(ks,tN),e(tN,sho),e(ks,lho),e(ks,aN),e(aN,iho),e(ks,dho),e(k,cho),e(k,Ss),e(Ss,iie),e(iie,mho),e(Ss,fho),e(Ss,nN),e(nN,gho),e(Ss,hho),e(Ss,sN),e(sN,uho),e(Ss,pho),e(k,_ho),e(k,Rs),e(Rs,die),e(die,bho),e(Rs,vho),e(Rs,lN),e(lN,Fho),e(Rs,Tho),e(Rs,iN),e(iN,Mho),e(Rs,Eho),e(k,Cho),e(k,Ps),e(Ps,cie),e(cie,who),e(Ps,Aho),e(Ps,dN),e(dN,Lho),e(Ps,yho),e(Ps,cN),e(cN,xho),e(Ps,$ho),e(k,kho),e(k,Bs),e(Bs,mie),e(mie,Sho),e(Bs,Rho),e(Bs,mN),e(mN,Pho),e(Bs,Bho),e(Bs,fN),e(fN,Iho),e(Bs,Nho),e(k,qho),e(k,Is),e(Is,fie),e(fie,jho),e(Is,Dho),e(Is,gN),e(gN,Gho),e(Is,Oho),e(Is,hN),e(hN,Vho),e(Is,Xho),e(k,zho),e(k,Mh),e(Mh,gie),e(gie,Qho),e(Mh,Who),e(Mh,uN),e(uN,Hho),e(Mh,Uho),e(k,Jho),e(k,Eh),e(Eh,hie),e(hie,Yho),e(Eh,Kho),e(Eh,pN),e(pN,Zho),e(Eh,euo),e(k,ouo),e(k,Ns),e(Ns,uie),e(uie,ruo),e(Ns,tuo),e(Ns,_N),e(_N,auo),e(Ns,nuo),e(Ns,bN),e(bN,suo),e(Ns,luo),e(k,iuo),e(k,qs),e(qs,pie),e(pie,duo),e(qs,cuo),e(qs,vN),e(vN,muo),e(qs,fuo),e(qs,FN),e(FN,guo),e(qs,huo),e(k,uuo),e(k,js),e(js,_ie),e(_ie,puo),e(js,_uo),e(js,TN),e(TN,buo),e(js,vuo),e(js,MN),e(MN,Fuo),e(js,Tuo),e(k,Muo),e(k,Ch),e(Ch,bie),e(bie,Euo),e(Ch,Cuo),e(Ch,EN),e(EN,wuo),e(Ch,Auo),e(k,Luo),e(k,wh),e(wh,vie),e(vie,yuo),e(wh,xuo),e(wh,CN),e(CN,$uo),e(wh,kuo),e(k,Suo),e(k,Ah),e(Ah,Fie),e(Fie,Ruo),e(Ah,Puo),e(Ah,wN),e(wN,Buo),e(Ah,Iuo),e(k,Nuo),e(k,Ds),e(Ds,Tie),e(Tie,quo),e(Ds,juo),e(Ds,AN),e(AN,Duo),e(Ds,Guo),e(Ds,LN),e(LN,Ouo),e(Ds,Vuo),e(k,Xuo),e(k,Gs),e(Gs,Mie),e(Mie,zuo),e(Gs,Quo),e(Gs,yN),e(yN,Wuo),e(Gs,Huo),e(Gs,xN),e(xN,Uuo),e(Gs,Juo),e(k,Yuo),e(k,Lh),e(Lh,Eie),e(Eie,Kuo),e(Lh,Zuo),e(Lh,$N),e($N,epo),e(Lh,opo),e(k,rpo),e(k,yh),e(yh,Cie),e(Cie,tpo),e(yh,apo),e(yh,kN),e(kN,npo),e(yh,spo),e(k,lpo),e(k,xh),e(xh,wie),e(wie,ipo),e(xh,dpo),e(xh,SN),e(SN,cpo),e(xh,mpo),e(k,fpo),e(k,Os),e(Os,Aie),e(Aie,gpo),e(Os,hpo),e(Os,RN),e(RN,upo),e(Os,ppo),e(Os,PN),e(PN,_po),e(Os,bpo),e(k,vpo),e(k,$h),e($h,Lie),e(Lie,Fpo),e($h,Tpo),e($h,BN),e(BN,Mpo),e($h,Epo),e(k,Cpo),e(k,kh),e(kh,yie),e(yie,wpo),e(kh,Apo),e(kh,IN),e(IN,Lpo),e(kh,ypo),e(k,xpo),e(k,Vs),e(Vs,xie),e(xie,$po),e(Vs,kpo),e(Vs,NN),e(NN,Spo),e(Vs,Rpo),e(Vs,qN),e(qN,Ppo),e(Vs,Bpo),e(k,Ipo),e(k,Xs),e(Xs,$ie),e($ie,Npo),e(Xs,qpo),e(Xs,jN),e(jN,jpo),e(Xs,Dpo),e(Xs,DN),e(DN,Gpo),e(Xs,Opo),e(k,Vpo),e(k,zs),e(zs,kie),e(kie,Xpo),e(zs,zpo),e(zs,GN),e(GN,Qpo),e(zs,Wpo),e(zs,ON),e(ON,Hpo),e(zs,Upo),e(k,Jpo),e(k,Qs),e(Qs,Sie),e(Sie,Ypo),e(Qs,Kpo),e(Qs,VN),e(VN,Zpo),e(Qs,e_o),e(Qs,XN),e(XN,o_o),e(Qs,r_o),e(yr,t_o),M(Sh,yr,null),e(Ao,a_o),e(Ao,Rh),M(uy,Rh,null),e(Rh,n_o),e(Rh,Rie),e(Rie,s_o),b(m,YVe,_),b(m,Ni,_),e(Ni,Ph),e(Ph,Pie),M(py,Pie,null),e(Ni,l_o),e(Ni,Bie),e(Bie,i_o),b(m,KVe,_),b(m,Lo,_),M(_y,Lo,null),e(Lo,d_o),e(Lo,by),e(by,c_o),e(by,zN),e(zN,m_o),e(by,f_o),e(Lo,g_o),e(Lo,vy),e(vy,h_o),e(vy,Iie),e(Iie,u_o),e(vy,p_o),e(Lo,__o),e(Lo,He),M(Fy,He,null),e(He,b_o),e(He,Nie),e(Nie,v_o),e(He,F_o),e(He,Ba),e(Ba,T_o),e(Ba,qie),e(qie,M_o),e(Ba,E_o),e(Ba,jie),e(jie,C_o),e(Ba,w_o),e(Ba,Die),e(Die,A_o),e(Ba,L_o),e(He,y_o),e(He,Y),e(Y,Bh),e(Bh,Gie),e(Gie,x_o),e(Bh,$_o),e(Bh,QN),e(QN,k_o),e(Bh,S_o),e(Y,R_o),e(Y,Ih),e(Ih,Oie),e(Oie,P_o),e(Ih,B_o),e(Ih,WN),e(WN,I_o),e(Ih,N_o),e(Y,q_o),e(Y,Nh),e(Nh,Vie),e(Vie,j_o),e(Nh,D_o),e(Nh,HN),e(HN,G_o),e(Nh,O_o),e(Y,V_o),e(Y,qh),e(qh,Xie),e(Xie,X_o),e(qh,z_o),e(qh,UN),e(UN,Q_o),e(qh,W_o),e(Y,H_o),e(Y,jh),e(jh,zie),e(zie,U_o),e(jh,J_o),e(jh,JN),e(JN,Y_o),e(jh,K_o),e(Y,Z_o),e(Y,Dh),e(Dh,Qie),e(Qie,e2o),e(Dh,o2o),e(Dh,YN),e(YN,r2o),e(Dh,t2o),e(Y,a2o),e(Y,Gh),e(Gh,Wie),e(Wie,n2o),e(Gh,s2o),e(Gh,KN),e(KN,l2o),e(Gh,i2o),e(Y,d2o),e(Y,Oh),e(Oh,Hie),e(Hie,c2o),e(Oh,m2o),e(Oh,ZN),e(ZN,f2o),e(Oh,g2o),e(Y,h2o),e(Y,Vh),e(Vh,Uie),e(Uie,u2o),e(Vh,p2o),e(Vh,eq),e(eq,_2o),e(Vh,b2o),e(Y,v2o),e(Y,Xh),e(Xh,Jie),e(Jie,F2o),e(Xh,T2o),e(Xh,oq),e(oq,M2o),e(Xh,E2o),e(Y,C2o),e(Y,zh),e(zh,Yie),e(Yie,w2o),e(zh,A2o),e(zh,rq),e(rq,L2o),e(zh,y2o),e(Y,x2o),e(Y,Qh),e(Qh,Kie),e(Kie,$2o),e(Qh,k2o),e(Qh,tq),e(tq,S2o),e(Qh,R2o),e(Y,P2o),e(Y,Wh),e(Wh,Zie),e(Zie,B2o),e(Wh,I2o),e(Wh,aq),e(aq,N2o),e(Wh,q2o),e(Y,j2o),e(Y,Hh),e(Hh,ede),e(ede,D2o),e(Hh,G2o),e(Hh,nq),e(nq,O2o),e(Hh,V2o),e(Y,X2o),e(Y,Uh),e(Uh,ode),e(ode,z2o),e(Uh,Q2o),e(Uh,sq),e(sq,W2o),e(Uh,H2o),e(Y,U2o),e(Y,Jh),e(Jh,rde),e(rde,J2o),e(Jh,Y2o),e(Jh,lq),e(lq,K2o),e(Jh,Z2o),e(Y,ebo),e(Y,Yh),e(Yh,tde),e(tde,obo),e(Yh,rbo),e(Yh,iq),e(iq,tbo),e(Yh,abo),e(Y,nbo),e(Y,Kh),e(Kh,ade),e(ade,sbo),e(Kh,lbo),e(Kh,dq),e(dq,ibo),e(Kh,dbo),e(Y,cbo),e(Y,Zh),e(Zh,nde),e(nde,mbo),e(Zh,fbo),e(Zh,cq),e(cq,gbo),e(Zh,hbo),e(Y,ubo),e(Y,eu),e(eu,sde),e(sde,pbo),e(eu,_bo),e(eu,mq),e(mq,bbo),e(eu,vbo),e(Y,Fbo),e(Y,ou),e(ou,lde),e(lde,Tbo),e(ou,Mbo),e(ou,fq),e(fq,Ebo),e(ou,Cbo),e(Y,wbo),e(Y,ru),e(ru,ide),e(ide,Abo),e(ru,Lbo),e(ru,gq),e(gq,ybo),e(ru,xbo),e(Y,$bo),e(Y,tu),e(tu,dde),e(dde,kbo),e(tu,Sbo),e(tu,hq),e(hq,Rbo),e(tu,Pbo),e(Y,Bbo),e(Y,au),e(au,cde),e(cde,Ibo),e(au,Nbo),e(au,uq),e(uq,qbo),e(au,jbo),e(Y,Dbo),e(Y,nu),e(nu,mde),e(mde,Gbo),e(nu,Obo),e(nu,pq),e(pq,Vbo),e(nu,Xbo),e(Y,zbo),e(Y,su),e(su,fde),e(fde,Qbo),e(su,Wbo),e(su,_q),e(_q,Hbo),e(su,Ubo),e(Y,Jbo),e(Y,lu),e(lu,gde),e(gde,Ybo),e(lu,Kbo),e(lu,bq),e(bq,Zbo),e(lu,evo),e(Y,ovo),e(Y,iu),e(iu,hde),e(hde,rvo),e(iu,tvo),e(iu,vq),e(vq,avo),e(iu,nvo),e(Y,svo),e(Y,du),e(du,ude),e(ude,lvo),e(du,ivo),e(du,Fq),e(Fq,dvo),e(du,cvo),e(Y,mvo),e(Y,cu),e(cu,pde),e(pde,fvo),e(cu,gvo),e(cu,Tq),e(Tq,hvo),e(cu,uvo),e(Y,pvo),e(Y,mu),e(mu,_de),e(_de,_vo),e(mu,bvo),e(mu,Mq),e(Mq,vvo),e(mu,Fvo),e(Y,Tvo),e(Y,fu),e(fu,bde),e(bde,Mvo),e(fu,Evo),e(fu,Eq),e(Eq,Cvo),e(fu,wvo),e(Y,Avo),e(Y,gu),e(gu,vde),e(vde,Lvo),e(gu,yvo),e(gu,Cq),e(Cq,xvo),e(gu,$vo),e(Y,kvo),e(Y,hu),e(hu,Fde),e(Fde,Svo),e(hu,Rvo),e(hu,wq),e(wq,Pvo),e(hu,Bvo),e(He,Ivo),M(uu,He,null),e(He,Nvo),M(pu,He,null),e(Lo,qvo),e(Lo,_u),M(Ty,_u,null),e(_u,jvo),e(_u,Tde),e(Tde,Dvo),b(m,ZVe,_),b(m,qi,_),e(qi,bu),e(bu,Mde),M(My,Mde,null),e(qi,Gvo),e(qi,Ede),e(Ede,Ovo),b(m,eXe,_),b(m,yo,_),M(Ey,yo,null),e(yo,Vvo),e(yo,Cy),e(Cy,Xvo),e(Cy,Aq),e(Aq,zvo),e(Cy,Qvo),e(yo,Wvo),e(yo,wy),e(wy,Hvo),e(wy,Cde),e(Cde,Uvo),e(wy,Jvo),e(yo,Yvo),e(yo,Ue),M(Ay,Ue,null),e(Ue,Kvo),e(Ue,wde),e(wde,Zvo),e(Ue,e1o),e(Ue,ji),e(ji,o1o),e(ji,Ade),e(Ade,r1o),e(ji,t1o),e(ji,Lde),e(Lde,a1o),e(ji,n1o),e(Ue,s1o),e(Ue,he),e(he,vu),e(vu,yde),e(yde,l1o),e(vu,i1o),e(vu,Lq),e(Lq,d1o),e(vu,c1o),e(he,m1o),e(he,Fu),e(Fu,xde),e(xde,f1o),e(Fu,g1o),e(Fu,$de),e($de,h1o),e(Fu,u1o),e(he,p1o),e(he,Tu),e(Tu,kde),e(kde,_1o),e(Tu,b1o),e(Tu,yq),e(yq,v1o),e(Tu,F1o),e(he,T1o),e(he,Mu),e(Mu,Sde),e(Sde,M1o),e(Mu,E1o),e(Mu,xq),e(xq,C1o),e(Mu,w1o),e(he,A1o),e(he,Eu),e(Eu,Rde),e(Rde,L1o),e(Eu,y1o),e(Eu,$q),e($q,x1o),e(Eu,$1o),e(he,k1o),e(he,Cu),e(Cu,Pde),e(Pde,S1o),e(Cu,R1o),e(Cu,kq),e(kq,P1o),e(Cu,B1o),e(he,I1o),e(he,wu),e(wu,Bde),e(Bde,N1o),e(wu,q1o),e(wu,Sq),e(Sq,j1o),e(wu,D1o),e(he,G1o),e(he,Au),e(Au,Ide),e(Ide,O1o),e(Au,V1o),e(Au,Rq),e(Rq,X1o),e(Au,z1o),e(he,Q1o),e(he,Lu),e(Lu,Nde),e(Nde,W1o),e(Lu,H1o),e(Lu,Pq),e(Pq,U1o),e(Lu,J1o),e(he,Y1o),e(he,yu),e(yu,qde),e(qde,K1o),e(yu,Z1o),e(yu,Bq),e(Bq,eFo),e(yu,oFo),e(he,rFo),e(he,xu),e(xu,jde),e(jde,tFo),e(xu,aFo),e(xu,Iq),e(Iq,nFo),e(xu,sFo),e(he,lFo),e(he,$u),e($u,Dde),e(Dde,iFo),e($u,dFo),e($u,Nq),e(Nq,cFo),e($u,mFo),e(he,fFo),e(he,ku),e(ku,Gde),e(Gde,gFo),e(ku,hFo),e(ku,qq),e(qq,uFo),e(ku,pFo),e(he,_Fo),e(he,Su),e(Su,Ode),e(Ode,bFo),e(Su,vFo),e(Su,jq),e(jq,FFo),e(Su,TFo),e(he,MFo),e(he,Ru),e(Ru,Vde),e(Vde,EFo),e(Ru,CFo),e(Ru,Dq),e(Dq,wFo),e(Ru,AFo),e(he,LFo),e(he,Pu),e(Pu,Xde),e(Xde,yFo),e(Pu,xFo),e(Pu,Gq),e(Gq,$Fo),e(Pu,kFo),e(he,SFo),e(he,Bu),e(Bu,zde),e(zde,RFo),e(Bu,PFo),e(Bu,Oq),e(Oq,BFo),e(Bu,IFo),e(he,NFo),e(he,Iu),e(Iu,Qde),e(Qde,qFo),e(Iu,jFo),e(Iu,Vq),e(Vq,DFo),e(Iu,GFo),e(Ue,OFo),M(Nu,Ue,null),e(Ue,VFo),M(qu,Ue,null),e(yo,XFo),e(yo,ju),M(Ly,ju,null),e(ju,zFo),e(ju,Wde),e(Wde,QFo),b(m,oXe,_),b(m,Di,_),e(Di,Du),e(Du,Hde),M(yy,Hde,null),e(Di,WFo),e(Di,Ude),e(Ude,HFo),b(m,rXe,_),b(m,xo,_),M(xy,xo,null),e(xo,UFo),e(xo,Gi),e(Gi,JFo),e(Gi,Xq),e(Xq,YFo),e(Gi,KFo),e(Gi,zq),e(zq,ZFo),e(Gi,eTo),e(xo,oTo),e(xo,$y),e($y,rTo),e($y,Jde),e(Jde,tTo),e($y,aTo),e(xo,nTo),e(xo,lt),M(ky,lt,null),e(lt,sTo),e(lt,Yde),e(Yde,lTo),e(lt,iTo),e(lt,Oi),e(Oi,dTo),e(Oi,Kde),e(Kde,cTo),e(Oi,mTo),e(Oi,Qq),e(Qq,fTo),e(Oi,gTo),e(lt,hTo),M(Gu,lt,null),e(xo,uTo),e(xo,Je),M(Sy,Je,null),e(Je,pTo),e(Je,Zde),e(Zde,_To),e(Je,bTo),e(Je,Ia),e(Ia,vTo),e(Ia,ece),e(ece,FTo),e(Ia,TTo),e(Ia,oce),e(oce,MTo),e(Ia,ETo),e(Ia,rce),e(rce,CTo),e(Ia,wTo),e(Je,ATo),e(Je,y),e(y,Ou),e(Ou,tce),e(tce,LTo),e(Ou,yTo),e(Ou,Wq),e(Wq,xTo),e(Ou,$To),e(y,kTo),e(y,Vu),e(Vu,ace),e(ace,STo),e(Vu,RTo),e(Vu,Hq),e(Hq,PTo),e(Vu,BTo),e(y,ITo),e(y,Xu),e(Xu,nce),e(nce,NTo),e(Xu,qTo),e(Xu,Uq),e(Uq,jTo),e(Xu,DTo),e(y,GTo),e(y,zu),e(zu,sce),e(sce,OTo),e(zu,VTo),e(zu,Jq),e(Jq,XTo),e(zu,zTo),e(y,QTo),e(y,Qu),e(Qu,lce),e(lce,WTo),e(Qu,HTo),e(Qu,Yq),e(Yq,UTo),e(Qu,JTo),e(y,YTo),e(y,Wu),e(Wu,ice),e(ice,KTo),e(Wu,ZTo),e(Wu,Kq),e(Kq,eMo),e(Wu,oMo),e(y,rMo),e(y,Hu),e(Hu,dce),e(dce,tMo),e(Hu,aMo),e(Hu,Zq),e(Zq,nMo),e(Hu,sMo),e(y,lMo),e(y,Uu),e(Uu,cce),e(cce,iMo),e(Uu,dMo),e(Uu,ej),e(ej,cMo),e(Uu,mMo),e(y,fMo),e(y,Ju),e(Ju,mce),e(mce,gMo),e(Ju,hMo),e(Ju,oj),e(oj,uMo),e(Ju,pMo),e(y,_Mo),e(y,Yu),e(Yu,fce),e(fce,bMo),e(Yu,vMo),e(Yu,rj),e(rj,FMo),e(Yu,TMo),e(y,MMo),e(y,Ku),e(Ku,gce),e(gce,EMo),e(Ku,CMo),e(Ku,tj),e(tj,wMo),e(Ku,AMo),e(y,LMo),e(y,Zu),e(Zu,hce),e(hce,yMo),e(Zu,xMo),e(Zu,aj),e(aj,$Mo),e(Zu,kMo),e(y,SMo),e(y,ep),e(ep,uce),e(uce,RMo),e(ep,PMo),e(ep,nj),e(nj,BMo),e(ep,IMo),e(y,NMo),e(y,op),e(op,pce),e(pce,qMo),e(op,jMo),e(op,sj),e(sj,DMo),e(op,GMo),e(y,OMo),e(y,rp),e(rp,_ce),e(_ce,VMo),e(rp,XMo),e(rp,lj),e(lj,zMo),e(rp,QMo),e(y,WMo),e(y,tp),e(tp,bce),e(bce,HMo),e(tp,UMo),e(tp,ij),e(ij,JMo),e(tp,YMo),e(y,KMo),e(y,ap),e(ap,vce),e(vce,ZMo),e(ap,e4o),e(ap,dj),e(dj,o4o),e(ap,r4o),e(y,t4o),e(y,np),e(np,Fce),e(Fce,a4o),e(np,n4o),e(np,cj),e(cj,s4o),e(np,l4o),e(y,i4o),e(y,sp),e(sp,Tce),e(Tce,d4o),e(sp,c4o),e(sp,mj),e(mj,m4o),e(sp,f4o),e(y,g4o),e(y,lp),e(lp,Mce),e(Mce,h4o),e(lp,u4o),e(lp,fj),e(fj,p4o),e(lp,_4o),e(y,b4o),e(y,ip),e(ip,Ece),e(Ece,v4o),e(ip,F4o),e(ip,gj),e(gj,T4o),e(ip,M4o),e(y,E4o),e(y,dp),e(dp,Cce),e(Cce,C4o),e(dp,w4o),e(dp,hj),e(hj,A4o),e(dp,L4o),e(y,y4o),e(y,cp),e(cp,wce),e(wce,x4o),e(cp,$4o),e(cp,uj),e(uj,k4o),e(cp,S4o),e(y,R4o),e(y,mp),e(mp,Ace),e(Ace,P4o),e(mp,B4o),e(mp,pj),e(pj,I4o),e(mp,N4o),e(y,q4o),e(y,fp),e(fp,Lce),e(Lce,j4o),e(fp,D4o),e(fp,_j),e(_j,G4o),e(fp,O4o),e(y,V4o),e(y,gp),e(gp,yce),e(yce,X4o),e(gp,z4o),e(gp,bj),e(bj,Q4o),e(gp,W4o),e(y,H4o),e(y,hp),e(hp,xce),e(xce,U4o),e(hp,J4o),e(hp,vj),e(vj,Y4o),e(hp,K4o),e(y,Z4o),e(y,up),e(up,$ce),e($ce,eEo),e(up,oEo),e(up,Fj),e(Fj,rEo),e(up,tEo),e(y,aEo),e(y,pp),e(pp,kce),e(kce,nEo),e(pp,sEo),e(pp,Tj),e(Tj,lEo),e(pp,iEo),e(y,dEo),e(y,_p),e(_p,Sce),e(Sce,cEo),e(_p,mEo),e(_p,Mj),e(Mj,fEo),e(_p,gEo),e(y,hEo),e(y,bp),e(bp,Rce),e(Rce,uEo),e(bp,pEo),e(bp,Ej),e(Ej,_Eo),e(bp,bEo),e(y,vEo),e(y,vp),e(vp,Pce),e(Pce,FEo),e(vp,TEo),e(vp,Cj),e(Cj,MEo),e(vp,EEo),e(y,CEo),e(y,Fp),e(Fp,Bce),e(Bce,wEo),e(Fp,AEo),e(Fp,wj),e(wj,LEo),e(Fp,yEo),e(y,xEo),e(y,Tp),e(Tp,Ice),e(Ice,$Eo),e(Tp,kEo),e(Tp,Aj),e(Aj,SEo),e(Tp,REo),e(y,PEo),e(y,Ws),e(Ws,Nce),e(Nce,BEo),e(Ws,IEo),e(Ws,Lj),e(Lj,NEo),e(Ws,qEo),e(Ws,yj),e(yj,jEo),e(Ws,DEo),e(y,GEo),e(y,Mp),e(Mp,qce),e(qce,OEo),e(Mp,VEo),e(Mp,xj),e(xj,XEo),e(Mp,zEo),e(y,QEo),e(y,Ep),e(Ep,jce),e(jce,WEo),e(Ep,HEo),e(Ep,$j),e($j,UEo),e(Ep,JEo),e(y,YEo),e(y,Cp),e(Cp,Dce),e(Dce,KEo),e(Cp,ZEo),e(Cp,kj),e(kj,eCo),e(Cp,oCo),e(y,rCo),e(y,wp),e(wp,Gce),e(Gce,tCo),e(wp,aCo),e(wp,Sj),e(Sj,nCo),e(wp,sCo),e(y,lCo),e(y,Ap),e(Ap,Oce),e(Oce,iCo),e(Ap,dCo),e(Ap,Rj),e(Rj,cCo),e(Ap,mCo),e(y,fCo),e(y,Lp),e(Lp,Vce),e(Vce,gCo),e(Lp,hCo),e(Lp,Pj),e(Pj,uCo),e(Lp,pCo),e(y,_Co),e(y,yp),e(yp,Xce),e(Xce,bCo),e(yp,vCo),e(yp,Bj),e(Bj,FCo),e(yp,TCo),e(y,MCo),e(y,xp),e(xp,zce),e(zce,ECo),e(xp,CCo),e(xp,Ij),e(Ij,wCo),e(xp,ACo),e(y,LCo),e(y,$p),e($p,Qce),e(Qce,yCo),e($p,xCo),e($p,Nj),e(Nj,$Co),e($p,kCo),e(y,SCo),e(y,kp),e(kp,Wce),e(Wce,RCo),e(kp,PCo),e(kp,qj),e(qj,BCo),e(kp,ICo),e(y,NCo),e(y,Sp),e(Sp,Hce),e(Hce,qCo),e(Sp,jCo),e(Sp,jj),e(jj,DCo),e(Sp,GCo),e(y,OCo),e(y,Rp),e(Rp,Uce),e(Uce,VCo),e(Rp,XCo),e(Rp,Dj),e(Dj,zCo),e(Rp,QCo),e(y,WCo),e(y,Pp),e(Pp,Jce),e(Jce,HCo),e(Pp,UCo),e(Pp,Gj),e(Gj,JCo),e(Pp,YCo),e(y,KCo),e(y,Bp),e(Bp,Yce),e(Yce,ZCo),e(Bp,e3o),e(Bp,Oj),e(Oj,o3o),e(Bp,r3o),e(y,t3o),e(y,Ip),e(Ip,Kce),e(Kce,a3o),e(Ip,n3o),e(Ip,Vj),e(Vj,s3o),e(Ip,l3o),e(y,i3o),e(y,Np),e(Np,Zce),e(Zce,d3o),e(Np,c3o),e(Np,Xj),e(Xj,m3o),e(Np,f3o),e(y,g3o),e(y,qp),e(qp,eme),e(eme,h3o),e(qp,u3o),e(qp,zj),e(zj,p3o),e(qp,_3o),e(y,b3o),e(y,jp),e(jp,ome),e(ome,v3o),e(jp,F3o),e(jp,Qj),e(Qj,T3o),e(jp,M3o),e(y,E3o),e(y,Dp),e(Dp,rme),e(rme,C3o),e(Dp,w3o),e(Dp,Wj),e(Wj,A3o),e(Dp,L3o),e(y,y3o),e(y,Gp),e(Gp,tme),e(tme,x3o),e(Gp,$3o),e(Gp,Hj),e(Hj,k3o),e(Gp,S3o),e(y,R3o),e(y,Op),e(Op,ame),e(ame,P3o),e(Op,B3o),e(Op,Uj),e(Uj,I3o),e(Op,N3o),e(y,q3o),e(y,Vp),e(Vp,nme),e(nme,j3o),e(Vp,D3o),e(Vp,Jj),e(Jj,G3o),e(Vp,O3o),e(y,V3o),e(y,Xp),e(Xp,sme),e(sme,X3o),e(Xp,z3o),e(Xp,Yj),e(Yj,Q3o),e(Xp,W3o),e(y,H3o),e(y,zp),e(zp,lme),e(lme,U3o),e(zp,J3o),e(zp,Kj),e(Kj,Y3o),e(zp,K3o),e(y,Z3o),e(y,Qp),e(Qp,ime),e(ime,e5o),e(Qp,o5o),e(Qp,Zj),e(Zj,r5o),e(Qp,t5o),e(y,a5o),e(y,Wp),e(Wp,dme),e(dme,n5o),e(Wp,s5o),e(Wp,eD),e(eD,l5o),e(Wp,i5o),e(y,d5o),e(y,Hp),e(Hp,cme),e(cme,c5o),e(Hp,m5o),e(Hp,oD),e(oD,f5o),e(Hp,g5o),e(y,h5o),e(y,Up),e(Up,mme),e(mme,u5o),e(Up,p5o),e(Up,rD),e(rD,_5o),e(Up,b5o),e(y,v5o),e(y,Jp),e(Jp,fme),e(fme,F5o),e(Jp,T5o),e(Jp,tD),e(tD,M5o),e(Jp,E5o),e(y,C5o),e(y,Yp),e(Yp,gme),e(gme,w5o),e(Yp,A5o),e(Yp,aD),e(aD,L5o),e(Yp,y5o),e(y,x5o),e(y,Kp),e(Kp,hme),e(hme,$5o),e(Kp,k5o),e(Kp,nD),e(nD,S5o),e(Kp,R5o),e(y,P5o),e(y,Zp),e(Zp,ume),e(ume,B5o),e(Zp,I5o),e(Zp,sD),e(sD,N5o),e(Zp,q5o),e(y,j5o),e(y,e_),e(e_,pme),e(pme,D5o),e(e_,G5o),e(e_,lD),e(lD,O5o),e(e_,V5o),e(y,X5o),e(y,o_),e(o_,_me),e(_me,z5o),e(o_,Q5o),e(o_,iD),e(iD,W5o),e(o_,H5o),e(y,U5o),e(y,r_),e(r_,bme),e(bme,J5o),e(r_,Y5o),e(r_,dD),e(dD,K5o),e(r_,Z5o),e(y,e0o),e(y,t_),e(t_,vme),e(vme,o0o),e(t_,r0o),e(t_,cD),e(cD,t0o),e(t_,a0o),e(y,n0o),e(y,a_),e(a_,Fme),e(Fme,s0o),e(a_,l0o),e(a_,mD),e(mD,i0o),e(a_,d0o),e(y,c0o),e(y,n_),e(n_,Tme),e(Tme,m0o),e(n_,f0o),e(n_,fD),e(fD,g0o),e(n_,h0o),e(y,u0o),e(y,s_),e(s_,Mme),e(Mme,p0o),e(s_,_0o),e(s_,gD),e(gD,b0o),e(s_,v0o),e(y,F0o),e(y,l_),e(l_,Eme),e(Eme,T0o),e(l_,M0o),e(l_,hD),e(hD,E0o),e(l_,C0o),e(y,w0o),e(y,i_),e(i_,Cme),e(Cme,A0o),e(i_,L0o),e(i_,uD),e(uD,y0o),e(i_,x0o),e(y,$0o),e(y,d_),e(d_,wme),e(wme,k0o),e(d_,S0o),e(d_,pD),e(pD,R0o),e(d_,P0o),e(y,B0o),e(y,c_),e(c_,Ame),e(Ame,I0o),e(c_,N0o),e(c_,_D),e(_D,q0o),e(c_,j0o),e(y,D0o),e(y,m_),e(m_,Lme),e(Lme,G0o),e(m_,O0o),e(m_,bD),e(bD,V0o),e(m_,X0o),e(y,z0o),e(y,f_),e(f_,yme),e(yme,Q0o),e(f_,W0o),e(f_,vD),e(vD,H0o),e(f_,U0o),e(y,J0o),e(y,g_),e(g_,xme),e(xme,Y0o),e(g_,K0o),e(g_,FD),e(FD,Z0o),e(g_,ewo),e(y,owo),e(y,h_),e(h_,$me),e($me,rwo),e(h_,two),e(h_,TD),e(TD,awo),e(h_,nwo),e(y,swo),e(y,u_),e(u_,kme),e(kme,lwo),e(u_,iwo),e(u_,MD),e(MD,dwo),e(u_,cwo),e(y,mwo),e(y,p_),e(p_,Sme),e(Sme,fwo),e(p_,gwo),e(p_,ED),e(ED,hwo),e(p_,uwo),e(y,pwo),e(y,__),e(__,Rme),e(Rme,_wo),e(__,bwo),e(__,CD),e(CD,vwo),e(__,Fwo),e(y,Two),e(y,b_),e(b_,Pme),e(Pme,Mwo),e(b_,Ewo),e(b_,wD),e(wD,Cwo),e(b_,wwo),e(y,Awo),e(y,v_),e(v_,Bme),e(Bme,Lwo),e(v_,ywo),e(v_,AD),e(AD,xwo),e(v_,$wo),e(y,kwo),e(y,F_),e(F_,Ime),e(Ime,Swo),e(F_,Rwo),e(F_,LD),e(LD,Pwo),e(F_,Bwo),e(y,Iwo),e(y,T_),e(T_,Nme),e(Nme,Nwo),e(T_,qwo),e(T_,yD),e(yD,jwo),e(T_,Dwo),e(y,Gwo),e(y,M_),e(M_,qme),e(qme,Owo),e(M_,Vwo),e(M_,xD),e(xD,Xwo),e(M_,zwo),e(y,Qwo),e(y,E_),e(E_,jme),e(jme,Wwo),e(E_,Hwo),e(E_,$D),e($D,Uwo),e(E_,Jwo),e(y,Ywo),e(y,C_),e(C_,Dme),e(Dme,Kwo),e(C_,Zwo),e(C_,kD),e(kD,eAo),e(C_,oAo),e(y,rAo),e(y,w_),e(w_,Gme),e(Gme,tAo),e(w_,aAo),e(w_,SD),e(SD,nAo),e(w_,sAo),e(y,lAo),e(y,A_),e(A_,Ome),e(Ome,iAo),e(A_,dAo),e(A_,RD),e(RD,cAo),e(A_,mAo),e(y,fAo),e(y,L_),e(L_,Vme),e(Vme,gAo),e(L_,hAo),e(L_,PD),e(PD,uAo),e(L_,pAo),e(y,_Ao),e(y,y_),e(y_,Xme),e(Xme,bAo),e(y_,vAo),e(y_,BD),e(BD,FAo),e(y_,TAo),e(y,MAo),e(y,x_),e(x_,zme),e(zme,EAo),e(x_,CAo),e(x_,ID),e(ID,wAo),e(x_,AAo),e(y,LAo),e(y,$_),e($_,Qme),e(Qme,yAo),e($_,xAo),e($_,ND),e(ND,$Ao),e($_,kAo),e(y,SAo),e(y,k_),e(k_,Wme),e(Wme,RAo),e(k_,PAo),e(k_,qD),e(qD,BAo),e(k_,IAo),e(y,NAo),e(y,S_),e(S_,Hme),e(Hme,qAo),e(S_,jAo),e(S_,jD),e(jD,DAo),e(S_,GAo),e(y,OAo),e(y,R_),e(R_,Ume),e(Ume,VAo),e(R_,XAo),e(R_,DD),e(DD,zAo),e(R_,QAo),e(y,WAo),e(y,P_),e(P_,Jme),e(Jme,HAo),e(P_,UAo),e(P_,GD),e(GD,JAo),e(P_,YAo),e(y,KAo),e(y,B_),e(B_,Yme),e(Yme,ZAo),e(B_,e6o),e(B_,OD),e(OD,o6o),e(B_,r6o),e(y,t6o),e(y,I_),e(I_,Kme),e(Kme,a6o),e(I_,n6o),e(I_,VD),e(VD,s6o),e(I_,l6o),e(y,i6o),e(y,N_),e(N_,Zme),e(Zme,d6o),e(N_,c6o),e(N_,XD),e(XD,m6o),e(N_,f6o),e(y,g6o),e(y,q_),e(q_,efe),e(efe,h6o),e(q_,u6o),e(q_,zD),e(zD,p6o),e(q_,_6o),e(y,b6o),e(y,j_),e(j_,ofe),e(ofe,v6o),e(j_,F6o),e(j_,QD),e(QD,T6o),e(j_,M6o),e(y,E6o),e(y,D_),e(D_,rfe),e(rfe,C6o),e(D_,w6o),e(D_,WD),e(WD,A6o),e(D_,L6o),e(y,y6o),e(y,G_),e(G_,tfe),e(tfe,x6o),e(G_,$6o),e(G_,HD),e(HD,k6o),e(G_,S6o),e(y,R6o),e(y,O_),e(O_,afe),e(afe,P6o),e(O_,B6o),e(O_,UD),e(UD,I6o),e(O_,N6o),e(y,q6o),e(y,V_),e(V_,nfe),e(nfe,j6o),e(V_,D6o),e(V_,JD),e(JD,G6o),e(V_,O6o),e(Je,V6o),e(Je,X_),e(X_,X6o),e(X_,sfe),e(sfe,z6o),e(X_,Q6o),e(X_,lfe),e(lfe,W6o),e(Je,H6o),M(z_,Je,null),b(m,tXe,_),b(m,Vi,_),e(Vi,Q_),e(Q_,ife),M(Ry,ife,null),e(Vi,U6o),e(Vi,dfe),e(dfe,J6o),b(m,aXe,_),b(m,$o,_),M(Py,$o,null),e($o,Y6o),e($o,Xi),e(Xi,K6o),e(Xi,YD),e(YD,Z6o),e(Xi,e7o),e(Xi,KD),e(KD,o7o),e(Xi,r7o),e($o,t7o),e($o,By),e(By,a7o),e(By,cfe),e(cfe,n7o),e(By,s7o),e($o,l7o),e($o,it),M(Iy,it,null),e(it,i7o),e(it,mfe),e(mfe,d7o),e(it,c7o),e(it,zi),e(zi,m7o),e(zi,ffe),e(ffe,f7o),e(zi,g7o),e(zi,ZD),e(ZD,h7o),e(zi,u7o),e(it,p7o),M(W_,it,null),e($o,_7o),e($o,Ye),M(Ny,Ye,null),e(Ye,b7o),e(Ye,gfe),e(gfe,v7o),e(Ye,F7o),e(Ye,Na),e(Na,T7o),e(Na,hfe),e(hfe,M7o),e(Na,E7o),e(Na,ufe),e(ufe,C7o),e(Na,w7o),e(Na,pfe),e(pfe,A7o),e(Na,L7o),e(Ye,y7o),e(Ye,G),e(G,H_),e(H_,_fe),e(_fe,x7o),e(H_,$7o),e(H_,eG),e(eG,k7o),e(H_,S7o),e(G,R7o),e(G,U_),e(U_,bfe),e(bfe,P7o),e(U_,B7o),e(U_,oG),e(oG,I7o),e(U_,N7o),e(G,q7o),e(G,J_),e(J_,vfe),e(vfe,j7o),e(J_,D7o),e(J_,rG),e(rG,G7o),e(J_,O7o),e(G,V7o),e(G,Y_),e(Y_,Ffe),e(Ffe,X7o),e(Y_,z7o),e(Y_,tG),e(tG,Q7o),e(Y_,W7o),e(G,H7o),e(G,K_),e(K_,Tfe),e(Tfe,U7o),e(K_,J7o),e(K_,aG),e(aG,Y7o),e(K_,K7o),e(G,Z7o),e(G,Z_),e(Z_,Mfe),e(Mfe,eLo),e(Z_,oLo),e(Z_,nG),e(nG,rLo),e(Z_,tLo),e(G,aLo),e(G,e2),e(e2,Efe),e(Efe,nLo),e(e2,sLo),e(e2,sG),e(sG,lLo),e(e2,iLo),e(G,dLo),e(G,o2),e(o2,Cfe),e(Cfe,cLo),e(o2,mLo),e(o2,lG),e(lG,fLo),e(o2,gLo),e(G,hLo),e(G,r2),e(r2,wfe),e(wfe,uLo),e(r2,pLo),e(r2,iG),e(iG,_Lo),e(r2,bLo),e(G,vLo),e(G,t2),e(t2,Afe),e(Afe,FLo),e(t2,TLo),e(t2,dG),e(dG,MLo),e(t2,ELo),e(G,CLo),e(G,a2),e(a2,Lfe),e(Lfe,wLo),e(a2,ALo),e(a2,cG),e(cG,LLo),e(a2,yLo),e(G,xLo),e(G,n2),e(n2,yfe),e(yfe,$Lo),e(n2,kLo),e(n2,mG),e(mG,SLo),e(n2,RLo),e(G,PLo),e(G,s2),e(s2,xfe),e(xfe,BLo),e(s2,ILo),e(s2,fG),e(fG,NLo),e(s2,qLo),e(G,jLo),e(G,l2),e(l2,$fe),e($fe,DLo),e(l2,GLo),e(l2,gG),e(gG,OLo),e(l2,VLo),e(G,XLo),e(G,i2),e(i2,kfe),e(kfe,zLo),e(i2,QLo),e(i2,hG),e(hG,WLo),e(i2,HLo),e(G,ULo),e(G,d2),e(d2,Sfe),e(Sfe,JLo),e(d2,YLo),e(d2,uG),e(uG,KLo),e(d2,ZLo),e(G,eyo),e(G,c2),e(c2,Rfe),e(Rfe,oyo),e(c2,ryo),e(c2,pG),e(pG,tyo),e(c2,ayo),e(G,nyo),e(G,m2),e(m2,Pfe),e(Pfe,syo),e(m2,lyo),e(m2,_G),e(_G,iyo),e(m2,dyo),e(G,cyo),e(G,f2),e(f2,Bfe),e(Bfe,myo),e(f2,fyo),e(f2,bG),e(bG,gyo),e(f2,hyo),e(G,uyo),e(G,g2),e(g2,Ife),e(Ife,pyo),e(g2,_yo),e(g2,vG),e(vG,byo),e(g2,vyo),e(G,Fyo),e(G,h2),e(h2,Nfe),e(Nfe,Tyo),e(h2,Myo),e(h2,FG),e(FG,Eyo),e(h2,Cyo),e(G,wyo),e(G,u2),e(u2,qfe),e(qfe,Ayo),e(u2,Lyo),e(u2,TG),e(TG,yyo),e(u2,xyo),e(G,$yo),e(G,p2),e(p2,jfe),e(jfe,kyo),e(p2,Syo),e(p2,MG),e(MG,Ryo),e(p2,Pyo),e(G,Byo),e(G,_2),e(_2,Dfe),e(Dfe,Iyo),e(_2,Nyo),e(_2,EG),e(EG,qyo),e(_2,jyo),e(G,Dyo),e(G,b2),e(b2,Gfe),e(Gfe,Gyo),e(b2,Oyo),e(b2,CG),e(CG,Vyo),e(b2,Xyo),e(G,zyo),e(G,v2),e(v2,Ofe),e(Ofe,Qyo),e(v2,Wyo),e(v2,wG),e(wG,Hyo),e(v2,Uyo),e(G,Jyo),e(G,F2),e(F2,Vfe),e(Vfe,Yyo),e(F2,Kyo),e(F2,AG),e(AG,Zyo),e(F2,e8o),e(G,o8o),e(G,T2),e(T2,Xfe),e(Xfe,r8o),e(T2,t8o),e(T2,LG),e(LG,a8o),e(T2,n8o),e(G,s8o),e(G,M2),e(M2,zfe),e(zfe,l8o),e(M2,i8o),e(M2,yG),e(yG,d8o),e(M2,c8o),e(G,m8o),e(G,E2),e(E2,Qfe),e(Qfe,f8o),e(E2,g8o),e(E2,xG),e(xG,h8o),e(E2,u8o),e(G,p8o),e(G,C2),e(C2,Wfe),e(Wfe,_8o),e(C2,b8o),e(C2,$G),e($G,v8o),e(C2,F8o),e(G,T8o),e(G,w2),e(w2,Hfe),e(Hfe,M8o),e(w2,E8o),e(w2,kG),e(kG,C8o),e(w2,w8o),e(G,A8o),e(G,A2),e(A2,Ufe),e(Ufe,L8o),e(A2,y8o),e(A2,SG),e(SG,x8o),e(A2,$8o),e(G,k8o),e(G,L2),e(L2,Jfe),e(Jfe,S8o),e(L2,R8o),e(L2,RG),e(RG,P8o),e(L2,B8o),e(G,I8o),e(G,y2),e(y2,Yfe),e(Yfe,N8o),e(y2,q8o),e(y2,PG),e(PG,j8o),e(y2,D8o),e(G,G8o),e(G,x2),e(x2,Kfe),e(Kfe,O8o),e(x2,V8o),e(x2,BG),e(BG,X8o),e(x2,z8o),e(G,Q8o),e(G,$2),e($2,Zfe),e(Zfe,W8o),e($2,H8o),e($2,IG),e(IG,U8o),e($2,J8o),e(G,Y8o),e(G,k2),e(k2,ege),e(ege,K8o),e(k2,Z8o),e(k2,NG),e(NG,e9o),e(k2,o9o),e(G,r9o),e(G,S2),e(S2,oge),e(oge,t9o),e(S2,a9o),e(S2,qG),e(qG,n9o),e(S2,s9o),e(G,l9o),e(G,R2),e(R2,rge),e(rge,i9o),e(R2,d9o),e(R2,jG),e(jG,c9o),e(R2,m9o),e(G,f9o),e(G,P2),e(P2,tge),e(tge,g9o),e(P2,h9o),e(P2,DG),e(DG,u9o),e(P2,p9o),e(G,_9o),e(G,B2),e(B2,age),e(age,b9o),e(B2,v9o),e(B2,GG),e(GG,F9o),e(B2,T9o),e(G,M9o),e(G,I2),e(I2,nge),e(nge,E9o),e(I2,C9o),e(I2,OG),e(OG,w9o),e(I2,A9o),e(G,L9o),e(G,N2),e(N2,sge),e(sge,y9o),e(N2,x9o),e(N2,VG),e(VG,$9o),e(N2,k9o),e(G,S9o),e(G,q2),e(q2,lge),e(lge,R9o),e(q2,P9o),e(q2,XG),e(XG,B9o),e(q2,I9o),e(Ye,N9o),e(Ye,j2),e(j2,q9o),e(j2,ige),e(ige,j9o),e(j2,D9o),e(j2,dge),e(dge,G9o),e(Ye,O9o),M(D2,Ye,null),b(m,nXe,_),b(m,Qi,_),e(Qi,G2),e(G2,cge),M(qy,cge,null),e(Qi,V9o),e(Qi,mge),e(mge,X9o),b(m,sXe,_),b(m,ko,_),M(jy,ko,null),e(ko,z9o),e(ko,Wi),e(Wi,Q9o),e(Wi,zG),e(zG,W9o),e(Wi,H9o),e(Wi,QG),e(QG,U9o),e(Wi,J9o),e(ko,Y9o),e(ko,Dy),e(Dy,K9o),e(Dy,fge),e(fge,Z9o),e(Dy,exo),e(ko,oxo),e(ko,dt),M(Gy,dt,null),e(dt,rxo),e(dt,gge),e(gge,txo),e(dt,axo),e(dt,Hi),e(Hi,nxo),e(Hi,hge),e(hge,sxo),e(Hi,lxo),e(Hi,WG),e(WG,ixo),e(Hi,dxo),e(dt,cxo),M(O2,dt,null),e(ko,mxo),e(ko,Ke),M(Oy,Ke,null),e(Ke,fxo),e(Ke,uge),e(uge,gxo),e(Ke,hxo),e(Ke,qa),e(qa,uxo),e(qa,pge),e(pge,pxo),e(qa,_xo),e(qa,_ge),e(_ge,bxo),e(qa,vxo),e(qa,bge),e(bge,Fxo),e(qa,Txo),e(Ke,Mxo),e(Ke,z),e(z,V2),e(V2,vge),e(vge,Exo),e(V2,Cxo),e(V2,HG),e(HG,wxo),e(V2,Axo),e(z,Lxo),e(z,X2),e(X2,Fge),e(Fge,yxo),e(X2,xxo),e(X2,UG),e(UG,$xo),e(X2,kxo),e(z,Sxo),e(z,z2),e(z2,Tge),e(Tge,Rxo),e(z2,Pxo),e(z2,JG),e(JG,Bxo),e(z2,Ixo),e(z,Nxo),e(z,Q2),e(Q2,Mge),e(Mge,qxo),e(Q2,jxo),e(Q2,YG),e(YG,Dxo),e(Q2,Gxo),e(z,Oxo),e(z,W2),e(W2,Ege),e(Ege,Vxo),e(W2,Xxo),e(W2,KG),e(KG,zxo),e(W2,Qxo),e(z,Wxo),e(z,H2),e(H2,Cge),e(Cge,Hxo),e(H2,Uxo),e(H2,ZG),e(ZG,Jxo),e(H2,Yxo),e(z,Kxo),e(z,U2),e(U2,wge),e(wge,Zxo),e(U2,e$o),e(U2,eO),e(eO,o$o),e(U2,r$o),e(z,t$o),e(z,J2),e(J2,Age),e(Age,a$o),e(J2,n$o),e(J2,oO),e(oO,s$o),e(J2,l$o),e(z,i$o),e(z,Y2),e(Y2,Lge),e(Lge,d$o),e(Y2,c$o),e(Y2,rO),e(rO,m$o),e(Y2,f$o),e(z,g$o),e(z,K2),e(K2,yge),e(yge,h$o),e(K2,u$o),e(K2,tO),e(tO,p$o),e(K2,_$o),e(z,b$o),e(z,Z2),e(Z2,xge),e(xge,v$o),e(Z2,F$o),e(Z2,aO),e(aO,T$o),e(Z2,M$o),e(z,E$o),e(z,eb),e(eb,$ge),e($ge,C$o),e(eb,w$o),e(eb,nO),e(nO,A$o),e(eb,L$o),e(z,y$o),e(z,ob),e(ob,kge),e(kge,x$o),e(ob,$$o),e(ob,sO),e(sO,k$o),e(ob,S$o),e(z,R$o),e(z,rb),e(rb,Sge),e(Sge,P$o),e(rb,B$o),e(rb,lO),e(lO,I$o),e(rb,N$o),e(z,q$o),e(z,tb),e(tb,Rge),e(Rge,j$o),e(tb,D$o),e(tb,iO),e(iO,G$o),e(tb,O$o),e(z,V$o),e(z,ab),e(ab,Pge),e(Pge,X$o),e(ab,z$o),e(ab,dO),e(dO,Q$o),e(ab,W$o),e(z,H$o),e(z,nb),e(nb,Bge),e(Bge,U$o),e(nb,J$o),e(nb,cO),e(cO,Y$o),e(nb,K$o),e(z,Z$o),e(z,sb),e(sb,Ige),e(Ige,eko),e(sb,oko),e(sb,mO),e(mO,rko),e(sb,tko),e(z,ako),e(z,lb),e(lb,Nge),e(Nge,nko),e(lb,sko),e(lb,fO),e(fO,lko),e(lb,iko),e(z,dko),e(z,ib),e(ib,qge),e(qge,cko),e(ib,mko),e(ib,gO),e(gO,fko),e(ib,gko),e(z,hko),e(z,db),e(db,jge),e(jge,uko),e(db,pko),e(db,hO),e(hO,_ko),e(db,bko),e(z,vko),e(z,cb),e(cb,Dge),e(Dge,Fko),e(cb,Tko),e(cb,uO),e(uO,Mko),e(cb,Eko),e(z,Cko),e(z,mb),e(mb,Gge),e(Gge,wko),e(mb,Ako),e(mb,pO),e(pO,Lko),e(mb,yko),e(z,xko),e(z,fb),e(fb,Oge),e(Oge,$ko),e(fb,kko),e(fb,_O),e(_O,Sko),e(fb,Rko),e(z,Pko),e(z,gb),e(gb,Vge),e(Vge,Bko),e(gb,Iko),e(gb,bO),e(bO,Nko),e(gb,qko),e(z,jko),e(z,hb),e(hb,Xge),e(Xge,Dko),e(hb,Gko),e(hb,vO),e(vO,Oko),e(hb,Vko),e(z,Xko),e(z,ub),e(ub,zge),e(zge,zko),e(ub,Qko),e(ub,FO),e(FO,Wko),e(ub,Hko),e(z,Uko),e(z,pb),e(pb,Qge),e(Qge,Jko),e(pb,Yko),e(pb,TO),e(TO,Kko),e(pb,Zko),e(z,eSo),e(z,_b),e(_b,Wge),e(Wge,oSo),e(_b,rSo),e(_b,MO),e(MO,tSo),e(_b,aSo),e(z,nSo),e(z,bb),e(bb,Hge),e(Hge,sSo),e(bb,lSo),e(bb,EO),e(EO,iSo),e(bb,dSo),e(z,cSo),e(z,vb),e(vb,Uge),e(Uge,mSo),e(vb,fSo),e(vb,CO),e(CO,gSo),e(vb,hSo),e(z,uSo),e(z,Fb),e(Fb,Jge),e(Jge,pSo),e(Fb,_So),e(Fb,wO),e(wO,bSo),e(Fb,vSo),e(z,FSo),e(z,Tb),e(Tb,Yge),e(Yge,TSo),e(Tb,MSo),e(Tb,AO),e(AO,ESo),e(Tb,CSo),e(z,wSo),e(z,Mb),e(Mb,Kge),e(Kge,ASo),e(Mb,LSo),e(Mb,LO),e(LO,ySo),e(Mb,xSo),e(z,$So),e(z,Eb),e(Eb,Zge),e(Zge,kSo),e(Eb,SSo),e(Eb,yO),e(yO,RSo),e(Eb,PSo),e(z,BSo),e(z,Cb),e(Cb,ehe),e(ehe,ISo),e(Cb,NSo),e(Cb,xO),e(xO,qSo),e(Cb,jSo),e(z,DSo),e(z,wb),e(wb,ohe),e(ohe,GSo),e(wb,OSo),e(wb,$O),e($O,VSo),e(wb,XSo),e(z,zSo),e(z,Ab),e(Ab,rhe),e(rhe,QSo),e(Ab,WSo),e(Ab,kO),e(kO,HSo),e(Ab,USo),e(z,JSo),e(z,Lb),e(Lb,the),e(the,YSo),e(Lb,KSo),e(Lb,SO),e(SO,ZSo),e(Lb,eRo),e(z,oRo),e(z,yb),e(yb,ahe),e(ahe,rRo),e(yb,tRo),e(yb,RO),e(RO,aRo),e(yb,nRo),e(Ke,sRo),e(Ke,xb),e(xb,lRo),e(xb,nhe),e(nhe,iRo),e(xb,dRo),e(xb,she),e(she,cRo),e(Ke,mRo),M($b,Ke,null),b(m,lXe,_),b(m,Ui,_),e(Ui,kb),e(kb,lhe),M(Vy,lhe,null),e(Ui,fRo),e(Ui,ihe),e(ihe,gRo),b(m,iXe,_),b(m,So,_),M(Xy,So,null),e(So,hRo),e(So,Ji),e(Ji,uRo),e(Ji,PO),e(PO,pRo),e(Ji,_Ro),e(Ji,BO),e(BO,bRo),e(Ji,vRo),e(So,FRo),e(So,zy),e(zy,TRo),e(zy,dhe),e(dhe,MRo),e(zy,ERo),e(So,CRo),e(So,ct),M(Qy,ct,null),e(ct,wRo),e(ct,che),e(che,ARo),e(ct,LRo),e(ct,Yi),e(Yi,yRo),e(Yi,mhe),e(mhe,xRo),e(Yi,$Ro),e(Yi,IO),e(IO,kRo),e(Yi,SRo),e(ct,RRo),M(Sb,ct,null),e(So,PRo),e(So,Ze),M(Wy,Ze,null),e(Ze,BRo),e(Ze,fhe),e(fhe,IRo),e(Ze,NRo),e(Ze,ja),e(ja,qRo),e(ja,ghe),e(ghe,jRo),e(ja,DRo),e(ja,hhe),e(hhe,GRo),e(ja,ORo),e(ja,uhe),e(uhe,VRo),e(ja,XRo),e(Ze,zRo),e(Ze,W),e(W,Rb),e(Rb,phe),e(phe,QRo),e(Rb,WRo),e(Rb,NO),e(NO,HRo),e(Rb,URo),e(W,JRo),e(W,Pb),e(Pb,_he),e(_he,YRo),e(Pb,KRo),e(Pb,qO),e(qO,ZRo),e(Pb,ePo),e(W,oPo),e(W,Bb),e(Bb,bhe),e(bhe,rPo),e(Bb,tPo),e(Bb,jO),e(jO,aPo),e(Bb,nPo),e(W,sPo),e(W,Ib),e(Ib,vhe),e(vhe,lPo),e(Ib,iPo),e(Ib,DO),e(DO,dPo),e(Ib,cPo),e(W,mPo),e(W,Nb),e(Nb,Fhe),e(Fhe,fPo),e(Nb,gPo),e(Nb,GO),e(GO,hPo),e(Nb,uPo),e(W,pPo),e(W,qb),e(qb,The),e(The,_Po),e(qb,bPo),e(qb,OO),e(OO,vPo),e(qb,FPo),e(W,TPo),e(W,jb),e(jb,Mhe),e(Mhe,MPo),e(jb,EPo),e(jb,VO),e(VO,CPo),e(jb,wPo),e(W,APo),e(W,Db),e(Db,Ehe),e(Ehe,LPo),e(Db,yPo),e(Db,XO),e(XO,xPo),e(Db,$Po),e(W,kPo),e(W,Gb),e(Gb,Che),e(Che,SPo),e(Gb,RPo),e(Gb,zO),e(zO,PPo),e(Gb,BPo),e(W,IPo),e(W,Ob),e(Ob,whe),e(whe,NPo),e(Ob,qPo),e(Ob,QO),e(QO,jPo),e(Ob,DPo),e(W,GPo),e(W,Vb),e(Vb,Ahe),e(Ahe,OPo),e(Vb,VPo),e(Vb,WO),e(WO,XPo),e(Vb,zPo),e(W,QPo),e(W,Xb),e(Xb,Lhe),e(Lhe,WPo),e(Xb,HPo),e(Xb,HO),e(HO,UPo),e(Xb,JPo),e(W,YPo),e(W,zb),e(zb,yhe),e(yhe,KPo),e(zb,ZPo),e(zb,UO),e(UO,eBo),e(zb,oBo),e(W,rBo),e(W,Qb),e(Qb,xhe),e(xhe,tBo),e(Qb,aBo),e(Qb,JO),e(JO,nBo),e(Qb,sBo),e(W,lBo),e(W,Wb),e(Wb,$he),e($he,iBo),e(Wb,dBo),e(Wb,YO),e(YO,cBo),e(Wb,mBo),e(W,fBo),e(W,Hb),e(Hb,khe),e(khe,gBo),e(Hb,hBo),e(Hb,KO),e(KO,uBo),e(Hb,pBo),e(W,_Bo),e(W,Ub),e(Ub,She),e(She,bBo),e(Ub,vBo),e(Ub,ZO),e(ZO,FBo),e(Ub,TBo),e(W,MBo),e(W,Jb),e(Jb,Rhe),e(Rhe,EBo),e(Jb,CBo),e(Jb,eV),e(eV,wBo),e(Jb,ABo),e(W,LBo),e(W,Yb),e(Yb,Phe),e(Phe,yBo),e(Yb,xBo),e(Yb,oV),e(oV,$Bo),e(Yb,kBo),e(W,SBo),e(W,Kb),e(Kb,Bhe),e(Bhe,RBo),e(Kb,PBo),e(Kb,rV),e(rV,BBo),e(Kb,IBo),e(W,NBo),e(W,Zb),e(Zb,Ihe),e(Ihe,qBo),e(Zb,jBo),e(Zb,tV),e(tV,DBo),e(Zb,GBo),e(W,OBo),e(W,ev),e(ev,Nhe),e(Nhe,VBo),e(ev,XBo),e(ev,aV),e(aV,zBo),e(ev,QBo),e(W,WBo),e(W,ov),e(ov,qhe),e(qhe,HBo),e(ov,UBo),e(ov,nV),e(nV,JBo),e(ov,YBo),e(W,KBo),e(W,rv),e(rv,jhe),e(jhe,ZBo),e(rv,eIo),e(rv,sV),e(sV,oIo),e(rv,rIo),e(W,tIo),e(W,tv),e(tv,Dhe),e(Dhe,aIo),e(tv,nIo),e(tv,lV),e(lV,sIo),e(tv,lIo),e(W,iIo),e(W,av),e(av,Ghe),e(Ghe,dIo),e(av,cIo),e(av,iV),e(iV,mIo),e(av,fIo),e(W,gIo),e(W,nv),e(nv,Ohe),e(Ohe,hIo),e(nv,uIo),e(nv,dV),e(dV,pIo),e(nv,_Io),e(W,bIo),e(W,sv),e(sv,Vhe),e(Vhe,vIo),e(sv,FIo),e(sv,cV),e(cV,TIo),e(sv,MIo),e(W,EIo),e(W,lv),e(lv,Xhe),e(Xhe,CIo),e(lv,wIo),e(lv,mV),e(mV,AIo),e(lv,LIo),e(W,yIo),e(W,iv),e(iv,zhe),e(zhe,xIo),e(iv,$Io),e(iv,fV),e(fV,kIo),e(iv,SIo),e(W,RIo),e(W,dv),e(dv,Qhe),e(Qhe,PIo),e(dv,BIo),e(dv,gV),e(gV,IIo),e(dv,NIo),e(W,qIo),e(W,cv),e(cv,Whe),e(Whe,jIo),e(cv,DIo),e(cv,hV),e(hV,GIo),e(cv,OIo),e(W,VIo),e(W,mv),e(mv,Hhe),e(Hhe,XIo),e(mv,zIo),e(mv,uV),e(uV,QIo),e(mv,WIo),e(W,HIo),e(W,fv),e(fv,Uhe),e(Uhe,UIo),e(fv,JIo),e(fv,Jhe),e(Jhe,YIo),e(fv,KIo),e(W,ZIo),e(W,gv),e(gv,Yhe),e(Yhe,eNo),e(gv,oNo),e(gv,pV),e(pV,rNo),e(gv,tNo),e(W,aNo),e(W,hv),e(hv,Khe),e(Khe,nNo),e(hv,sNo),e(hv,_V),e(_V,lNo),e(hv,iNo),e(W,dNo),e(W,uv),e(uv,Zhe),e(Zhe,cNo),e(uv,mNo),e(uv,bV),e(bV,fNo),e(uv,gNo),e(W,hNo),e(W,pv),e(pv,eue),e(eue,uNo),e(pv,pNo),e(pv,vV),e(vV,_No),e(pv,bNo),e(Ze,vNo),e(Ze,_v),e(_v,FNo),e(_v,oue),e(oue,TNo),e(_v,MNo),e(_v,rue),e(rue,ENo),e(Ze,CNo),M(bv,Ze,null),b(m,dXe,_),b(m,Ki,_),e(Ki,vv),e(vv,tue),M(Hy,tue,null),e(Ki,wNo),e(Ki,aue),e(aue,ANo),b(m,cXe,_),b(m,Ro,_),M(Uy,Ro,null),e(Ro,LNo),e(Ro,Zi),e(Zi,yNo),e(Zi,FV),e(FV,xNo),e(Zi,$No),e(Zi,TV),e(TV,kNo),e(Zi,SNo),e(Ro,RNo),e(Ro,Jy),e(Jy,PNo),e(Jy,nue),e(nue,BNo),e(Jy,INo),e(Ro,NNo),e(Ro,mt),M(Yy,mt,null),e(mt,qNo),e(mt,sue),e(sue,jNo),e(mt,DNo),e(mt,ed),e(ed,GNo),e(ed,lue),e(lue,ONo),e(ed,VNo),e(ed,MV),e(MV,XNo),e(ed,zNo),e(mt,QNo),M(Fv,mt,null),e(Ro,WNo),e(Ro,eo),M(Ky,eo,null),e(eo,HNo),e(eo,iue),e(iue,UNo),e(eo,JNo),e(eo,Da),e(Da,YNo),e(Da,due),e(due,KNo),e(Da,ZNo),e(Da,cue),e(cue,eqo),e(Da,oqo),e(Da,mue),e(mue,rqo),e(Da,tqo),e(eo,aqo),e(eo,ue),e(ue,Tv),e(Tv,fue),e(fue,nqo),e(Tv,sqo),e(Tv,EV),e(EV,lqo),e(Tv,iqo),e(ue,dqo),e(ue,Mv),e(Mv,gue),e(gue,cqo),e(Mv,mqo),e(Mv,CV),e(CV,fqo),e(Mv,gqo),e(ue,hqo),e(ue,Ev),e(Ev,hue),e(hue,uqo),e(Ev,pqo),e(Ev,wV),e(wV,_qo),e(Ev,bqo),e(ue,vqo),e(ue,Cv),e(Cv,uue),e(uue,Fqo),e(Cv,Tqo),e(Cv,AV),e(AV,Mqo),e(Cv,Eqo),e(ue,Cqo),e(ue,wv),e(wv,pue),e(pue,wqo),e(wv,Aqo),e(wv,LV),e(LV,Lqo),e(wv,yqo),e(ue,xqo),e(ue,Av),e(Av,_ue),e(_ue,$qo),e(Av,kqo),e(Av,yV),e(yV,Sqo),e(Av,Rqo),e(ue,Pqo),e(ue,Lv),e(Lv,bue),e(bue,Bqo),e(Lv,Iqo),e(Lv,xV),e(xV,Nqo),e(Lv,qqo),e(ue,jqo),e(ue,yv),e(yv,vue),e(vue,Dqo),e(yv,Gqo),e(yv,$V),e($V,Oqo),e(yv,Vqo),e(ue,Xqo),e(ue,xv),e(xv,Fue),e(Fue,zqo),e(xv,Qqo),e(xv,kV),e(kV,Wqo),e(xv,Hqo),e(ue,Uqo),e(ue,$v),e($v,Tue),e(Tue,Jqo),e($v,Yqo),e($v,SV),e(SV,Kqo),e($v,Zqo),e(ue,ejo),e(ue,kv),e(kv,Mue),e(Mue,ojo),e(kv,rjo),e(kv,RV),e(RV,tjo),e(kv,ajo),e(ue,njo),e(ue,Sv),e(Sv,Eue),e(Eue,sjo),e(Sv,ljo),e(Sv,PV),e(PV,ijo),e(Sv,djo),e(ue,cjo),e(ue,Rv),e(Rv,Cue),e(Cue,mjo),e(Rv,fjo),e(Rv,BV),e(BV,gjo),e(Rv,hjo),e(ue,ujo),e(ue,Pv),e(Pv,wue),e(wue,pjo),e(Pv,_jo),e(Pv,IV),e(IV,bjo),e(Pv,vjo),e(ue,Fjo),e(ue,Bv),e(Bv,Aue),e(Aue,Tjo),e(Bv,Mjo),e(Bv,NV),e(NV,Ejo),e(Bv,Cjo),e(ue,wjo),e(ue,Iv),e(Iv,Lue),e(Lue,Ajo),e(Iv,Ljo),e(Iv,qV),e(qV,yjo),e(Iv,xjo),e(ue,$jo),e(ue,Nv),e(Nv,yue),e(yue,kjo),e(Nv,Sjo),e(Nv,jV),e(jV,Rjo),e(Nv,Pjo),e(ue,Bjo),e(ue,qv),e(qv,xue),e(xue,Ijo),e(qv,Njo),e(qv,DV),e(DV,qjo),e(qv,jjo),e(eo,Djo),e(eo,jv),e(jv,Gjo),e(jv,$ue),e($ue,Ojo),e(jv,Vjo),e(jv,kue),e(kue,Xjo),e(eo,zjo),M(Dv,eo,null),b(m,mXe,_),b(m,od,_),e(od,Gv),e(Gv,Sue),M(Zy,Sue,null),e(od,Qjo),e(od,Rue),e(Rue,Wjo),b(m,fXe,_),b(m,Po,_),M(e8,Po,null),e(Po,Hjo),e(Po,rd),e(rd,Ujo),e(rd,GV),e(GV,Jjo),e(rd,Yjo),e(rd,OV),e(OV,Kjo),e(rd,Zjo),e(Po,eDo),e(Po,o8),e(o8,oDo),e(o8,Pue),e(Pue,rDo),e(o8,tDo),e(Po,aDo),e(Po,ft),M(r8,ft,null),e(ft,nDo),e(ft,Bue),e(Bue,sDo),e(ft,lDo),e(ft,td),e(td,iDo),e(td,Iue),e(Iue,dDo),e(td,cDo),e(td,VV),e(VV,mDo),e(td,fDo),e(ft,gDo),M(Ov,ft,null),e(Po,hDo),e(Po,oo),M(t8,oo,null),e(oo,uDo),e(oo,Nue),e(Nue,pDo),e(oo,_Do),e(oo,Ga),e(Ga,bDo),e(Ga,que),e(que,vDo),e(Ga,FDo),e(Ga,jue),e(jue,TDo),e(Ga,MDo),e(Ga,Due),e(Due,EDo),e(Ga,CDo),e(oo,wDo),e(oo,N),e(N,Vv),e(Vv,Gue),e(Gue,ADo),e(Vv,LDo),e(Vv,XV),e(XV,yDo),e(Vv,xDo),e(N,$Do),e(N,Xv),e(Xv,Oue),e(Oue,kDo),e(Xv,SDo),e(Xv,zV),e(zV,RDo),e(Xv,PDo),e(N,BDo),e(N,zv),e(zv,Vue),e(Vue,IDo),e(zv,NDo),e(zv,QV),e(QV,qDo),e(zv,jDo),e(N,DDo),e(N,Qv),e(Qv,Xue),e(Xue,GDo),e(Qv,ODo),e(Qv,WV),e(WV,VDo),e(Qv,XDo),e(N,zDo),e(N,Wv),e(Wv,zue),e(zue,QDo),e(Wv,WDo),e(Wv,HV),e(HV,HDo),e(Wv,UDo),e(N,JDo),e(N,Hv),e(Hv,Que),e(Que,YDo),e(Hv,KDo),e(Hv,UV),e(UV,ZDo),e(Hv,eGo),e(N,oGo),e(N,Uv),e(Uv,Wue),e(Wue,rGo),e(Uv,tGo),e(Uv,JV),e(JV,aGo),e(Uv,nGo),e(N,sGo),e(N,Jv),e(Jv,Hue),e(Hue,lGo),e(Jv,iGo),e(Jv,YV),e(YV,dGo),e(Jv,cGo),e(N,mGo),e(N,Yv),e(Yv,Uue),e(Uue,fGo),e(Yv,gGo),e(Yv,KV),e(KV,hGo),e(Yv,uGo),e(N,pGo),e(N,Kv),e(Kv,Jue),e(Jue,_Go),e(Kv,bGo),e(Kv,ZV),e(ZV,vGo),e(Kv,FGo),e(N,TGo),e(N,Zv),e(Zv,Yue),e(Yue,MGo),e(Zv,EGo),e(Zv,eX),e(eX,CGo),e(Zv,wGo),e(N,AGo),e(N,e1),e(e1,Kue),e(Kue,LGo),e(e1,yGo),e(e1,oX),e(oX,xGo),e(e1,$Go),e(N,kGo),e(N,o1),e(o1,Zue),e(Zue,SGo),e(o1,RGo),e(o1,rX),e(rX,PGo),e(o1,BGo),e(N,IGo),e(N,r1),e(r1,epe),e(epe,NGo),e(r1,qGo),e(r1,tX),e(tX,jGo),e(r1,DGo),e(N,GGo),e(N,t1),e(t1,ope),e(ope,OGo),e(t1,VGo),e(t1,aX),e(aX,XGo),e(t1,zGo),e(N,QGo),e(N,a1),e(a1,rpe),e(rpe,WGo),e(a1,HGo),e(a1,nX),e(nX,UGo),e(a1,JGo),e(N,YGo),e(N,n1),e(n1,tpe),e(tpe,KGo),e(n1,ZGo),e(n1,sX),e(sX,eOo),e(n1,oOo),e(N,rOo),e(N,s1),e(s1,ape),e(ape,tOo),e(s1,aOo),e(s1,lX),e(lX,nOo),e(s1,sOo),e(N,lOo),e(N,l1),e(l1,npe),e(npe,iOo),e(l1,dOo),e(l1,iX),e(iX,cOo),e(l1,mOo),e(N,fOo),e(N,i1),e(i1,spe),e(spe,gOo),e(i1,hOo),e(i1,dX),e(dX,uOo),e(i1,pOo),e(N,_Oo),e(N,d1),e(d1,lpe),e(lpe,bOo),e(d1,vOo),e(d1,cX),e(cX,FOo),e(d1,TOo),e(N,MOo),e(N,c1),e(c1,ipe),e(ipe,EOo),e(c1,COo),e(c1,mX),e(mX,wOo),e(c1,AOo),e(N,LOo),e(N,m1),e(m1,dpe),e(dpe,yOo),e(m1,xOo),e(m1,fX),e(fX,$Oo),e(m1,kOo),e(N,SOo),e(N,f1),e(f1,cpe),e(cpe,ROo),e(f1,POo),e(f1,gX),e(gX,BOo),e(f1,IOo),e(N,NOo),e(N,g1),e(g1,mpe),e(mpe,qOo),e(g1,jOo),e(g1,hX),e(hX,DOo),e(g1,GOo),e(N,OOo),e(N,h1),e(h1,fpe),e(fpe,VOo),e(h1,XOo),e(h1,uX),e(uX,zOo),e(h1,QOo),e(N,WOo),e(N,u1),e(u1,gpe),e(gpe,HOo),e(u1,UOo),e(u1,pX),e(pX,JOo),e(u1,YOo),e(N,KOo),e(N,p1),e(p1,hpe),e(hpe,ZOo),e(p1,eVo),e(p1,_X),e(_X,oVo),e(p1,rVo),e(N,tVo),e(N,_1),e(_1,upe),e(upe,aVo),e(_1,nVo),e(_1,bX),e(bX,sVo),e(_1,lVo),e(N,iVo),e(N,b1),e(b1,ppe),e(ppe,dVo),e(b1,cVo),e(b1,vX),e(vX,mVo),e(b1,fVo),e(N,gVo),e(N,v1),e(v1,_pe),e(_pe,hVo),e(v1,uVo),e(v1,FX),e(FX,pVo),e(v1,_Vo),e(N,bVo),e(N,F1),e(F1,bpe),e(bpe,vVo),e(F1,FVo),e(F1,TX),e(TX,TVo),e(F1,MVo),e(N,EVo),e(N,T1),e(T1,vpe),e(vpe,CVo),e(T1,wVo),e(T1,MX),e(MX,AVo),e(T1,LVo),e(N,yVo),e(N,M1),e(M1,Fpe),e(Fpe,xVo),e(M1,$Vo),e(M1,EX),e(EX,kVo),e(M1,SVo),e(N,RVo),e(N,E1),e(E1,Tpe),e(Tpe,PVo),e(E1,BVo),e(E1,CX),e(CX,IVo),e(E1,NVo),e(N,qVo),e(N,C1),e(C1,Mpe),e(Mpe,jVo),e(C1,DVo),e(C1,wX),e(wX,GVo),e(C1,OVo),e(N,VVo),e(N,w1),e(w1,Epe),e(Epe,XVo),e(w1,zVo),e(w1,AX),e(AX,QVo),e(w1,WVo),e(N,HVo),e(N,A1),e(A1,Cpe),e(Cpe,UVo),e(A1,JVo),e(A1,LX),e(LX,YVo),e(A1,KVo),e(N,ZVo),e(N,L1),e(L1,wpe),e(wpe,eXo),e(L1,oXo),e(L1,yX),e(yX,rXo),e(L1,tXo),e(N,aXo),e(N,y1),e(y1,Ape),e(Ape,nXo),e(y1,sXo),e(y1,xX),e(xX,lXo),e(y1,iXo),e(N,dXo),e(N,x1),e(x1,Lpe),e(Lpe,cXo),e(x1,mXo),e(x1,$X),e($X,fXo),e(x1,gXo),e(N,hXo),e(N,$1),e($1,ype),e(ype,uXo),e($1,pXo),e($1,kX),e(kX,_Xo),e($1,bXo),e(N,vXo),e(N,k1),e(k1,xpe),e(xpe,FXo),e(k1,TXo),e(k1,SX),e(SX,MXo),e(k1,EXo),e(N,CXo),e(N,S1),e(S1,$pe),e($pe,wXo),e(S1,AXo),e(S1,RX),e(RX,LXo),e(S1,yXo),e(N,xXo),e(N,R1),e(R1,kpe),e(kpe,$Xo),e(R1,kXo),e(R1,PX),e(PX,SXo),e(R1,RXo),e(N,PXo),e(N,P1),e(P1,Spe),e(Spe,BXo),e(P1,IXo),e(P1,BX),e(BX,NXo),e(P1,qXo),e(N,jXo),e(N,B1),e(B1,Rpe),e(Rpe,DXo),e(B1,GXo),e(B1,IX),e(IX,OXo),e(B1,VXo),e(N,XXo),e(N,I1),e(I1,Ppe),e(Ppe,zXo),e(I1,QXo),e(I1,NX),e(NX,WXo),e(I1,HXo),e(N,UXo),e(N,N1),e(N1,Bpe),e(Bpe,JXo),e(N1,YXo),e(N1,qX),e(qX,KXo),e(N1,ZXo),e(N,ezo),e(N,q1),e(q1,Ipe),e(Ipe,ozo),e(q1,rzo),e(q1,jX),e(jX,tzo),e(q1,azo),e(oo,nzo),e(oo,j1),e(j1,szo),e(j1,Npe),e(Npe,lzo),e(j1,izo),e(j1,qpe),e(qpe,dzo),e(oo,czo),M(D1,oo,null),b(m,gXe,_),b(m,ad,_),e(ad,G1),e(G1,jpe),M(a8,jpe,null),e(ad,mzo),e(ad,Dpe),e(Dpe,fzo),b(m,hXe,_),b(m,Bo,_),M(n8,Bo,null),e(Bo,gzo),e(Bo,nd),e(nd,hzo),e(nd,DX),e(DX,uzo),e(nd,pzo),e(nd,GX),e(GX,_zo),e(nd,bzo),e(Bo,vzo),e(Bo,s8),e(s8,Fzo),e(s8,Gpe),e(Gpe,Tzo),e(s8,Mzo),e(Bo,Ezo),e(Bo,gt),M(l8,gt,null),e(gt,Czo),e(gt,Ope),e(Ope,wzo),e(gt,Azo),e(gt,sd),e(sd,Lzo),e(sd,Vpe),e(Vpe,yzo),e(sd,xzo),e(sd,OX),e(OX,$zo),e(sd,kzo),e(gt,Szo),M(O1,gt,null),e(Bo,Rzo),e(Bo,ro),M(i8,ro,null),e(ro,Pzo),e(ro,Xpe),e(Xpe,Bzo),e(ro,Izo),e(ro,Oa),e(Oa,Nzo),e(Oa,zpe),e(zpe,qzo),e(Oa,jzo),e(Oa,Qpe),e(Qpe,Dzo),e(Oa,Gzo),e(Oa,Wpe),e(Wpe,Ozo),e(Oa,Vzo),e(ro,Xzo),e(ro,Z),e(Z,V1),e(V1,Hpe),e(Hpe,zzo),e(V1,Qzo),e(V1,VX),e(VX,Wzo),e(V1,Hzo),e(Z,Uzo),e(Z,X1),e(X1,Upe),e(Upe,Jzo),e(X1,Yzo),e(X1,XX),e(XX,Kzo),e(X1,Zzo),e(Z,eQo),e(Z,z1),e(z1,Jpe),e(Jpe,oQo),e(z1,rQo),e(z1,zX),e(zX,tQo),e(z1,aQo),e(Z,nQo),e(Z,Q1),e(Q1,Ype),e(Ype,sQo),e(Q1,lQo),e(Q1,QX),e(QX,iQo),e(Q1,dQo),e(Z,cQo),e(Z,W1),e(W1,Kpe),e(Kpe,mQo),e(W1,fQo),e(W1,WX),e(WX,gQo),e(W1,hQo),e(Z,uQo),e(Z,H1),e(H1,Zpe),e(Zpe,pQo),e(H1,_Qo),e(H1,HX),e(HX,bQo),e(H1,vQo),e(Z,FQo),e(Z,U1),e(U1,e_e),e(e_e,TQo),e(U1,MQo),e(U1,UX),e(UX,EQo),e(U1,CQo),e(Z,wQo),e(Z,J1),e(J1,o_e),e(o_e,AQo),e(J1,LQo),e(J1,JX),e(JX,yQo),e(J1,xQo),e(Z,$Qo),e(Z,Y1),e(Y1,r_e),e(r_e,kQo),e(Y1,SQo),e(Y1,YX),e(YX,RQo),e(Y1,PQo),e(Z,BQo),e(Z,K1),e(K1,t_e),e(t_e,IQo),e(K1,NQo),e(K1,KX),e(KX,qQo),e(K1,jQo),e(Z,DQo),e(Z,Z1),e(Z1,a_e),e(a_e,GQo),e(Z1,OQo),e(Z1,ZX),e(ZX,VQo),e(Z1,XQo),e(Z,zQo),e(Z,eF),e(eF,n_e),e(n_e,QQo),e(eF,WQo),e(eF,ez),e(ez,HQo),e(eF,UQo),e(Z,JQo),e(Z,oF),e(oF,s_e),e(s_e,YQo),e(oF,KQo),e(oF,oz),e(oz,ZQo),e(oF,eWo),e(Z,oWo),e(Z,rF),e(rF,l_e),e(l_e,rWo),e(rF,tWo),e(rF,rz),e(rz,aWo),e(rF,nWo),e(Z,sWo),e(Z,tF),e(tF,i_e),e(i_e,lWo),e(tF,iWo),e(tF,tz),e(tz,dWo),e(tF,cWo),e(Z,mWo),e(Z,aF),e(aF,d_e),e(d_e,fWo),e(aF,gWo),e(aF,az),e(az,hWo),e(aF,uWo),e(Z,pWo),e(Z,nF),e(nF,c_e),e(c_e,_Wo),e(nF,bWo),e(nF,nz),e(nz,vWo),e(nF,FWo),e(Z,TWo),e(Z,sF),e(sF,m_e),e(m_e,MWo),e(sF,EWo),e(sF,sz),e(sz,CWo),e(sF,wWo),e(Z,AWo),e(Z,lF),e(lF,f_e),e(f_e,LWo),e(lF,yWo),e(lF,lz),e(lz,xWo),e(lF,$Wo),e(Z,kWo),e(Z,iF),e(iF,g_e),e(g_e,SWo),e(iF,RWo),e(iF,iz),e(iz,PWo),e(iF,BWo),e(Z,IWo),e(Z,dF),e(dF,h_e),e(h_e,NWo),e(dF,qWo),e(dF,dz),e(dz,jWo),e(dF,DWo),e(Z,GWo),e(Z,cF),e(cF,u_e),e(u_e,OWo),e(cF,VWo),e(cF,cz),e(cz,XWo),e(cF,zWo),e(Z,QWo),e(Z,mF),e(mF,p_e),e(p_e,WWo),e(mF,HWo),e(mF,mz),e(mz,UWo),e(mF,JWo),e(Z,YWo),e(Z,fF),e(fF,__e),e(__e,KWo),e(fF,ZWo),e(fF,fz),e(fz,eHo),e(fF,oHo),e(Z,rHo),e(Z,gF),e(gF,b_e),e(b_e,tHo),e(gF,aHo),e(gF,gz),e(gz,nHo),e(gF,sHo),e(Z,lHo),e(Z,hF),e(hF,v_e),e(v_e,iHo),e(hF,dHo),e(hF,hz),e(hz,cHo),e(hF,mHo),e(Z,fHo),e(Z,uF),e(uF,F_e),e(F_e,gHo),e(uF,hHo),e(uF,uz),e(uz,uHo),e(uF,pHo),e(Z,_Ho),e(Z,pF),e(pF,T_e),e(T_e,bHo),e(pF,vHo),e(pF,pz),e(pz,FHo),e(pF,THo),e(Z,MHo),e(Z,_F),e(_F,M_e),e(M_e,EHo),e(_F,CHo),e(_F,_z),e(_z,wHo),e(_F,AHo),e(Z,LHo),e(Z,bF),e(bF,E_e),e(E_e,yHo),e(bF,xHo),e(bF,bz),e(bz,$Ho),e(bF,kHo),e(ro,SHo),e(ro,vF),e(vF,RHo),e(vF,C_e),e(C_e,PHo),e(vF,BHo),e(vF,w_e),e(w_e,IHo),e(ro,NHo),M(FF,ro,null),b(m,uXe,_),b(m,ld,_),e(ld,TF),e(TF,A_e),M(d8,A_e,null),e(ld,qHo),e(ld,L_e),e(L_e,jHo),b(m,pXe,_),b(m,Io,_),M(c8,Io,null),e(Io,DHo),e(Io,id),e(id,GHo),e(id,vz),e(vz,OHo),e(id,VHo),e(id,Fz),e(Fz,XHo),e(id,zHo),e(Io,QHo),e(Io,m8),e(m8,WHo),e(m8,y_e),e(y_e,HHo),e(m8,UHo),e(Io,JHo),e(Io,ht),M(f8,ht,null),e(ht,YHo),e(ht,x_e),e(x_e,KHo),e(ht,ZHo),e(ht,dd),e(dd,eUo),e(dd,$_e),e($_e,oUo),e(dd,rUo),e(dd,Tz),e(Tz,tUo),e(dd,aUo),e(ht,nUo),M(MF,ht,null),e(Io,sUo),e(Io,to),M(g8,to,null),e(to,lUo),e(to,k_e),e(k_e,iUo),e(to,dUo),e(to,Va),e(Va,cUo),e(Va,S_e),e(S_e,mUo),e(Va,fUo),e(Va,R_e),e(R_e,gUo),e(Va,hUo),e(Va,P_e),e(P_e,uUo),e(Va,pUo),e(to,_Uo),e(to,No),e(No,EF),e(EF,B_e),e(B_e,bUo),e(EF,vUo),e(EF,Mz),e(Mz,FUo),e(EF,TUo),e(No,MUo),e(No,CF),e(CF,I_e),e(I_e,EUo),e(CF,CUo),e(CF,Ez),e(Ez,wUo),e(CF,AUo),e(No,LUo),e(No,wF),e(wF,N_e),e(N_e,yUo),e(wF,xUo),e(wF,Cz),e(Cz,$Uo),e(wF,kUo),e(No,SUo),e(No,AF),e(AF,q_e),e(q_e,RUo),e(AF,PUo),e(AF,wz),e(wz,BUo),e(AF,IUo),e(No,NUo),e(No,LF),e(LF,j_e),e(j_e,qUo),e(LF,jUo),e(LF,Az),e(Az,DUo),e(LF,GUo),e(No,OUo),e(No,yF),e(yF,D_e),e(D_e,VUo),e(yF,XUo),e(yF,Lz),e(Lz,zUo),e(yF,QUo),e(to,WUo),e(to,xF),e(xF,HUo),e(xF,G_e),e(G_e,UUo),e(xF,JUo),e(xF,O_e),e(O_e,YUo),e(to,KUo),M($F,to,null),b(m,_Xe,_),b(m,cd,_),e(cd,kF),e(kF,V_e),M(h8,V_e,null),e(cd,ZUo),e(cd,X_e),e(X_e,eJo),b(m,bXe,_),b(m,qo,_),M(u8,qo,null),e(qo,oJo),e(qo,md),e(md,rJo),e(md,yz),e(yz,tJo),e(md,aJo),e(md,xz),e(xz,nJo),e(md,sJo),e(qo,lJo),e(qo,p8),e(p8,iJo),e(p8,z_e),e(z_e,dJo),e(p8,cJo),e(qo,mJo),e(qo,ut),M(_8,ut,null),e(ut,fJo),e(ut,Q_e),e(Q_e,gJo),e(ut,hJo),e(ut,fd),e(fd,uJo),e(fd,W_e),e(W_e,pJo),e(fd,_Jo),e(fd,$z),e($z,bJo),e(fd,vJo),e(ut,FJo),M(SF,ut,null),e(qo,TJo),e(qo,ao),M(b8,ao,null),e(ao,MJo),e(ao,H_e),e(H_e,EJo),e(ao,CJo),e(ao,Xa),e(Xa,wJo),e(Xa,U_e),e(U_e,AJo),e(Xa,LJo),e(Xa,J_e),e(J_e,yJo),e(Xa,xJo),e(Xa,Y_e),e(Y_e,$Jo),e(Xa,kJo),e(ao,SJo),e(ao,U),e(U,RF),e(RF,K_e),e(K_e,RJo),e(RF,PJo),e(RF,kz),e(kz,BJo),e(RF,IJo),e(U,NJo),e(U,PF),e(PF,Z_e),e(Z_e,qJo),e(PF,jJo),e(PF,Sz),e(Sz,DJo),e(PF,GJo),e(U,OJo),e(U,BF),e(BF,e2e),e(e2e,VJo),e(BF,XJo),e(BF,Rz),e(Rz,zJo),e(BF,QJo),e(U,WJo),e(U,IF),e(IF,o2e),e(o2e,HJo),e(IF,UJo),e(IF,Pz),e(Pz,JJo),e(IF,YJo),e(U,KJo),e(U,NF),e(NF,r2e),e(r2e,ZJo),e(NF,eYo),e(NF,Bz),e(Bz,oYo),e(NF,rYo),e(U,tYo),e(U,qF),e(qF,t2e),e(t2e,aYo),e(qF,nYo),e(qF,Iz),e(Iz,sYo),e(qF,lYo),e(U,iYo),e(U,jF),e(jF,a2e),e(a2e,dYo),e(jF,cYo),e(jF,Nz),e(Nz,mYo),e(jF,fYo),e(U,gYo),e(U,DF),e(DF,n2e),e(n2e,hYo),e(DF,uYo),e(DF,qz),e(qz,pYo),e(DF,_Yo),e(U,bYo),e(U,GF),e(GF,s2e),e(s2e,vYo),e(GF,FYo),e(GF,jz),e(jz,TYo),e(GF,MYo),e(U,EYo),e(U,OF),e(OF,l2e),e(l2e,CYo),e(OF,wYo),e(OF,Dz),e(Dz,AYo),e(OF,LYo),e(U,yYo),e(U,VF),e(VF,i2e),e(i2e,xYo),e(VF,$Yo),e(VF,Gz),e(Gz,kYo),e(VF,SYo),e(U,RYo),e(U,XF),e(XF,d2e),e(d2e,PYo),e(XF,BYo),e(XF,Oz),e(Oz,IYo),e(XF,NYo),e(U,qYo),e(U,zF),e(zF,c2e),e(c2e,jYo),e(zF,DYo),e(zF,Vz),e(Vz,GYo),e(zF,OYo),e(U,VYo),e(U,QF),e(QF,m2e),e(m2e,XYo),e(QF,zYo),e(QF,Xz),e(Xz,QYo),e(QF,WYo),e(U,HYo),e(U,WF),e(WF,f2e),e(f2e,UYo),e(WF,JYo),e(WF,zz),e(zz,YYo),e(WF,KYo),e(U,ZYo),e(U,HF),e(HF,g2e),e(g2e,eKo),e(HF,oKo),e(HF,Qz),e(Qz,rKo),e(HF,tKo),e(U,aKo),e(U,UF),e(UF,h2e),e(h2e,nKo),e(UF,sKo),e(UF,Wz),e(Wz,lKo),e(UF,iKo),e(U,dKo),e(U,JF),e(JF,u2e),e(u2e,cKo),e(JF,mKo),e(JF,Hz),e(Hz,fKo),e(JF,gKo),e(U,hKo),e(U,YF),e(YF,p2e),e(p2e,uKo),e(YF,pKo),e(YF,Uz),e(Uz,_Ko),e(YF,bKo),e(U,vKo),e(U,KF),e(KF,_2e),e(_2e,FKo),e(KF,TKo),e(KF,Jz),e(Jz,MKo),e(KF,EKo),e(U,CKo),e(U,ZF),e(ZF,b2e),e(b2e,wKo),e(ZF,AKo),e(ZF,Yz),e(Yz,LKo),e(ZF,yKo),e(U,xKo),e(U,eT),e(eT,v2e),e(v2e,$Ko),e(eT,kKo),e(eT,Kz),e(Kz,SKo),e(eT,RKo),e(U,PKo),e(U,oT),e(oT,F2e),e(F2e,BKo),e(oT,IKo),e(oT,Zz),e(Zz,NKo),e(oT,qKo),e(U,jKo),e(U,rT),e(rT,T2e),e(T2e,DKo),e(rT,GKo),e(rT,eQ),e(eQ,OKo),e(rT,VKo),e(U,XKo),e(U,tT),e(tT,M2e),e(M2e,zKo),e(tT,QKo),e(tT,oQ),e(oQ,WKo),e(tT,HKo),e(U,UKo),e(U,aT),e(aT,E2e),e(E2e,JKo),e(aT,YKo),e(aT,rQ),e(rQ,KKo),e(aT,ZKo),e(U,eZo),e(U,nT),e(nT,C2e),e(C2e,oZo),e(nT,rZo),e(nT,tQ),e(tQ,tZo),e(nT,aZo),e(U,nZo),e(U,sT),e(sT,w2e),e(w2e,sZo),e(sT,lZo),e(sT,aQ),e(aQ,iZo),e(sT,dZo),e(U,cZo),e(U,lT),e(lT,A2e),e(A2e,mZo),e(lT,fZo),e(lT,nQ),e(nQ,gZo),e(lT,hZo),e(U,uZo),e(U,iT),e(iT,L2e),e(L2e,pZo),e(iT,_Zo),e(iT,sQ),e(sQ,bZo),e(iT,vZo),e(U,FZo),e(U,dT),e(dT,y2e),e(y2e,TZo),e(dT,MZo),e(dT,lQ),e(lQ,EZo),e(dT,CZo),e(U,wZo),e(U,cT),e(cT,x2e),e(x2e,AZo),e(cT,LZo),e(cT,iQ),e(iQ,yZo),e(cT,xZo),e(U,$Zo),e(U,mT),e(mT,$2e),e($2e,kZo),e(mT,SZo),e(mT,dQ),e(dQ,RZo),e(mT,PZo),e(U,BZo),e(U,fT),e(fT,k2e),e(k2e,IZo),e(fT,NZo),e(fT,cQ),e(cQ,qZo),e(fT,jZo),e(U,DZo),e(U,gT),e(gT,S2e),e(S2e,GZo),e(gT,OZo),e(gT,mQ),e(mQ,VZo),e(gT,XZo),e(U,zZo),e(U,hT),e(hT,R2e),e(R2e,QZo),e(hT,WZo),e(hT,fQ),e(fQ,HZo),e(hT,UZo),e(ao,JZo),e(ao,uT),e(uT,YZo),e(uT,P2e),e(P2e,KZo),e(uT,ZZo),e(uT,B2e),e(B2e,eer),e(ao,oer),M(pT,ao,null),b(m,vXe,_),b(m,gd,_),e(gd,_T),e(_T,I2e),M(v8,I2e,null),e(gd,rer),e(gd,N2e),e(N2e,ter),b(m,FXe,_),b(m,jo,_),M(F8,jo,null),e(jo,aer),e(jo,hd),e(hd,ner),e(hd,gQ),e(gQ,ser),e(hd,ler),e(hd,hQ),e(hQ,ier),e(hd,der),e(jo,cer),e(jo,T8),e(T8,mer),e(T8,q2e),e(q2e,fer),e(T8,ger),e(jo,her),e(jo,pt),M(M8,pt,null),e(pt,uer),e(pt,j2e),e(j2e,per),e(pt,_er),e(pt,ud),e(ud,ber),e(ud,D2e),e(D2e,ver),e(ud,Fer),e(ud,uQ),e(uQ,Ter),e(ud,Mer),e(pt,Eer),M(bT,pt,null),e(jo,Cer),e(jo,no),M(E8,no,null),e(no,wer),e(no,G2e),e(G2e,Aer),e(no,Ler),e(no,za),e(za,yer),e(za,O2e),e(O2e,xer),e(za,$er),e(za,V2e),e(V2e,ker),e(za,Ser),e(za,X2e),e(X2e,Rer),e(za,Per),e(no,Ber),e(no,V),e(V,vT),e(vT,z2e),e(z2e,Ier),e(vT,Ner),e(vT,pQ),e(pQ,qer),e(vT,jer),e(V,Der),e(V,FT),e(FT,Q2e),e(Q2e,Ger),e(FT,Oer),e(FT,_Q),e(_Q,Ver),e(FT,Xer),e(V,zer),e(V,TT),e(TT,W2e),e(W2e,Qer),e(TT,Wer),e(TT,bQ),e(bQ,Her),e(TT,Uer),e(V,Jer),e(V,MT),e(MT,H2e),e(H2e,Yer),e(MT,Ker),e(MT,vQ),e(vQ,Zer),e(MT,eor),e(V,oor),e(V,ET),e(ET,U2e),e(U2e,ror),e(ET,tor),e(ET,FQ),e(FQ,aor),e(ET,nor),e(V,sor),e(V,CT),e(CT,J2e),e(J2e,lor),e(CT,ior),e(CT,TQ),e(TQ,dor),e(CT,cor),e(V,mor),e(V,wT),e(wT,Y2e),e(Y2e,gor),e(wT,hor),e(wT,MQ),e(MQ,uor),e(wT,por),e(V,_or),e(V,AT),e(AT,K2e),e(K2e,bor),e(AT,vor),e(AT,EQ),e(EQ,For),e(AT,Tor),e(V,Mor),e(V,LT),e(LT,Z2e),e(Z2e,Eor),e(LT,Cor),e(LT,CQ),e(CQ,wor),e(LT,Aor),e(V,Lor),e(V,yT),e(yT,ebe),e(ebe,yor),e(yT,xor),e(yT,wQ),e(wQ,$or),e(yT,kor),e(V,Sor),e(V,xT),e(xT,obe),e(obe,Ror),e(xT,Por),e(xT,AQ),e(AQ,Bor),e(xT,Ior),e(V,Nor),e(V,$T),e($T,rbe),e(rbe,qor),e($T,jor),e($T,LQ),e(LQ,Dor),e($T,Gor),e(V,Oor),e(V,kT),e(kT,tbe),e(tbe,Vor),e(kT,Xor),e(kT,yQ),e(yQ,zor),e(kT,Qor),e(V,Wor),e(V,ST),e(ST,abe),e(abe,Hor),e(ST,Uor),e(ST,xQ),e(xQ,Jor),e(ST,Yor),e(V,Kor),e(V,RT),e(RT,nbe),e(nbe,Zor),e(RT,err),e(RT,$Q),e($Q,orr),e(RT,rrr),e(V,trr),e(V,PT),e(PT,sbe),e(sbe,arr),e(PT,nrr),e(PT,kQ),e(kQ,srr),e(PT,lrr),e(V,irr),e(V,BT),e(BT,lbe),e(lbe,drr),e(BT,crr),e(BT,SQ),e(SQ,mrr),e(BT,frr),e(V,grr),e(V,IT),e(IT,ibe),e(ibe,hrr),e(IT,urr),e(IT,RQ),e(RQ,prr),e(IT,_rr),e(V,brr),e(V,NT),e(NT,dbe),e(dbe,vrr),e(NT,Frr),e(NT,PQ),e(PQ,Trr),e(NT,Mrr),e(V,Err),e(V,qT),e(qT,cbe),e(cbe,Crr),e(qT,wrr),e(qT,BQ),e(BQ,Arr),e(qT,Lrr),e(V,yrr),e(V,jT),e(jT,mbe),e(mbe,xrr),e(jT,$rr),e(jT,IQ),e(IQ,krr),e(jT,Srr),e(V,Rrr),e(V,DT),e(DT,fbe),e(fbe,Prr),e(DT,Brr),e(DT,NQ),e(NQ,Irr),e(DT,Nrr),e(V,qrr),e(V,GT),e(GT,gbe),e(gbe,jrr),e(GT,Drr),e(GT,qQ),e(qQ,Grr),e(GT,Orr),e(V,Vrr),e(V,OT),e(OT,hbe),e(hbe,Xrr),e(OT,zrr),e(OT,jQ),e(jQ,Qrr),e(OT,Wrr),e(V,Hrr),e(V,VT),e(VT,ube),e(ube,Urr),e(VT,Jrr),e(VT,DQ),e(DQ,Yrr),e(VT,Krr),e(V,Zrr),e(V,XT),e(XT,pbe),e(pbe,etr),e(XT,otr),e(XT,GQ),e(GQ,rtr),e(XT,ttr),e(V,atr),e(V,zT),e(zT,_be),e(_be,ntr),e(zT,str),e(zT,OQ),e(OQ,ltr),e(zT,itr),e(V,dtr),e(V,QT),e(QT,bbe),e(bbe,ctr),e(QT,mtr),e(QT,VQ),e(VQ,ftr),e(QT,gtr),e(V,htr),e(V,WT),e(WT,vbe),e(vbe,utr),e(WT,ptr),e(WT,XQ),e(XQ,_tr),e(WT,btr),e(V,vtr),e(V,HT),e(HT,Fbe),e(Fbe,Ftr),e(HT,Ttr),e(HT,zQ),e(zQ,Mtr),e(HT,Etr),e(V,Ctr),e(V,UT),e(UT,Tbe),e(Tbe,wtr),e(UT,Atr),e(UT,QQ),e(QQ,Ltr),e(UT,ytr),e(V,xtr),e(V,JT),e(JT,Mbe),e(Mbe,$tr),e(JT,ktr),e(JT,WQ),e(WQ,Str),e(JT,Rtr),e(V,Ptr),e(V,YT),e(YT,Ebe),e(Ebe,Btr),e(YT,Itr),e(YT,HQ),e(HQ,Ntr),e(YT,qtr),e(V,jtr),e(V,KT),e(KT,Cbe),e(Cbe,Dtr),e(KT,Gtr),e(KT,UQ),e(UQ,Otr),e(KT,Vtr),e(V,Xtr),e(V,ZT),e(ZT,wbe),e(wbe,ztr),e(ZT,Qtr),e(ZT,JQ),e(JQ,Wtr),e(ZT,Htr),e(V,Utr),e(V,eM),e(eM,Abe),e(Abe,Jtr),e(eM,Ytr),e(eM,YQ),e(YQ,Ktr),e(eM,Ztr),e(V,ear),e(V,oM),e(oM,Lbe),e(Lbe,oar),e(oM,rar),e(oM,KQ),e(KQ,tar),e(oM,aar),e(V,nar),e(V,rM),e(rM,ybe),e(ybe,sar),e(rM,lar),e(rM,ZQ),e(ZQ,iar),e(rM,dar),e(V,car),e(V,tM),e(tM,xbe),e(xbe,mar),e(tM,far),e(tM,eW),e(eW,gar),e(tM,har),e(V,uar),e(V,aM),e(aM,$be),e($be,par),e(aM,_ar),e(aM,oW),e(oW,bar),e(aM,Far),e(V,Tar),e(V,nM),e(nM,kbe),e(kbe,Mar),e(nM,Ear),e(nM,rW),e(rW,Car),e(nM,war),e(V,Aar),e(V,sM),e(sM,Sbe),e(Sbe,Lar),e(sM,yar),e(sM,tW),e(tW,xar),e(sM,$ar),e(no,kar),e(no,lM),e(lM,Sar),e(lM,Rbe),e(Rbe,Rar),e(lM,Par),e(lM,Pbe),e(Pbe,Bar),e(no,Iar),M(iM,no,null),b(m,TXe,_),b(m,pd,_),e(pd,dM),e(dM,Bbe),M(C8,Bbe,null),e(pd,Nar),e(pd,Ibe),e(Ibe,qar),b(m,MXe,_),b(m,Do,_),M(w8,Do,null),e(Do,jar),e(Do,_d),e(_d,Dar),e(_d,aW),e(aW,Gar),e(_d,Oar),e(_d,nW),e(nW,Var),e(_d,Xar),e(Do,zar),e(Do,A8),e(A8,Qar),e(A8,Nbe),e(Nbe,War),e(A8,Har),e(Do,Uar),e(Do,_t),M(L8,_t,null),e(_t,Jar),e(_t,qbe),e(qbe,Yar),e(_t,Kar),e(_t,bd),e(bd,Zar),e(bd,jbe),e(jbe,enr),e(bd,onr),e(bd,sW),e(sW,rnr),e(bd,tnr),e(_t,anr),M(cM,_t,null),e(Do,nnr),e(Do,so),M(y8,so,null),e(so,snr),e(so,Dbe),e(Dbe,lnr),e(so,inr),e(so,Qa),e(Qa,dnr),e(Qa,Gbe),e(Gbe,cnr),e(Qa,mnr),e(Qa,Obe),e(Obe,fnr),e(Qa,gnr),e(Qa,Vbe),e(Vbe,hnr),e(Qa,unr),e(so,pnr),e(so,Xbe),e(Xbe,mM),e(mM,zbe),e(zbe,_nr),e(mM,bnr),e(mM,lW),e(lW,vnr),e(mM,Fnr),e(so,Tnr),e(so,fM),e(fM,Mnr),e(fM,Qbe),e(Qbe,Enr),e(fM,Cnr),e(fM,Wbe),e(Wbe,wnr),e(so,Anr),M(gM,so,null),b(m,EXe,_),b(m,vd,_),e(vd,hM),e(hM,Hbe),M(x8,Hbe,null),e(vd,Lnr),e(vd,Ube),e(Ube,ynr),b(m,CXe,_),b(m,Go,_),M($8,Go,null),e(Go,xnr),e(Go,Fd),e(Fd,$nr),e(Fd,iW),e(iW,knr),e(Fd,Snr),e(Fd,dW),e(dW,Rnr),e(Fd,Pnr),e(Go,Bnr),e(Go,k8),e(k8,Inr),e(k8,Jbe),e(Jbe,Nnr),e(k8,qnr),e(Go,jnr),e(Go,bt),M(S8,bt,null),e(bt,Dnr),e(bt,Ybe),e(Ybe,Gnr),e(bt,Onr),e(bt,Td),e(Td,Vnr),e(Td,Kbe),e(Kbe,Xnr),e(Td,znr),e(Td,cW),e(cW,Qnr),e(Td,Wnr),e(bt,Hnr),M(uM,bt,null),e(Go,Unr),e(Go,lo),M(R8,lo,null),e(lo,Jnr),e(lo,Zbe),e(Zbe,Ynr),e(lo,Knr),e(lo,Wa),e(Wa,Znr),e(Wa,eve),e(eve,esr),e(Wa,osr),e(Wa,ove),e(ove,rsr),e(Wa,tsr),e(Wa,rve),e(rve,asr),e(Wa,nsr),e(lo,ssr),e(lo,ve),e(ve,pM),e(pM,tve),e(tve,lsr),e(pM,isr),e(pM,mW),e(mW,dsr),e(pM,csr),e(ve,msr),e(ve,_M),e(_M,ave),e(ave,fsr),e(_M,gsr),e(_M,fW),e(fW,hsr),e(_M,usr),e(ve,psr),e(ve,bM),e(bM,nve),e(nve,_sr),e(bM,bsr),e(bM,gW),e(gW,vsr),e(bM,Fsr),e(ve,Tsr),e(ve,vM),e(vM,sve),e(sve,Msr),e(vM,Esr),e(vM,hW),e(hW,Csr),e(vM,wsr),e(ve,Asr),e(ve,Hs),e(Hs,lve),e(lve,Lsr),e(Hs,ysr),e(Hs,uW),e(uW,xsr),e(Hs,$sr),e(Hs,pW),e(pW,ksr),e(Hs,Ssr),e(ve,Rsr),e(ve,FM),e(FM,ive),e(ive,Psr),e(FM,Bsr),e(FM,_W),e(_W,Isr),e(FM,Nsr),e(ve,qsr),e(ve,Us),e(Us,dve),e(dve,jsr),e(Us,Dsr),e(Us,bW),e(bW,Gsr),e(Us,Osr),e(Us,vW),e(vW,Vsr),e(Us,Xsr),e(ve,zsr),e(ve,TM),e(TM,cve),e(cve,Qsr),e(TM,Wsr),e(TM,FW),e(FW,Hsr),e(TM,Usr),e(ve,Jsr),e(ve,vt),e(vt,mve),e(mve,Ysr),e(vt,Ksr),e(vt,TW),e(TW,Zsr),e(vt,elr),e(vt,MW),e(MW,olr),e(vt,rlr),e(vt,EW),e(EW,tlr),e(vt,alr),e(ve,nlr),e(ve,MM),e(MM,fve),e(fve,slr),e(MM,llr),e(MM,CW),e(CW,ilr),e(MM,dlr),e(ve,clr),e(ve,EM),e(EM,gve),e(gve,mlr),e(EM,flr),e(EM,wW),e(wW,glr),e(EM,hlr),e(ve,ulr),e(ve,CM),e(CM,hve),e(hve,plr),e(CM,_lr),e(CM,AW),e(AW,blr),e(CM,vlr),e(ve,Flr),e(ve,wM),e(wM,uve),e(uve,Tlr),e(wM,Mlr),e(wM,LW),e(LW,Elr),e(wM,Clr),e(ve,wlr),e(ve,AM),e(AM,pve),e(pve,Alr),e(AM,Llr),e(AM,yW),e(yW,ylr),e(AM,xlr),e(ve,$lr),e(ve,LM),e(LM,_ve),e(_ve,klr),e(LM,Slr),e(LM,xW),e(xW,Rlr),e(LM,Plr),e(ve,Blr),e(ve,yM),e(yM,bve),e(bve,Ilr),e(yM,Nlr),e(yM,$W),e($W,qlr),e(yM,jlr),e(lo,Dlr),e(lo,xM),e(xM,Glr),e(xM,vve),e(vve,Olr),e(xM,Vlr),e(xM,Fve),e(Fve,Xlr),e(lo,zlr),M($M,lo,null),b(m,wXe,_),b(m,Md,_),e(Md,kM),e(kM,Tve),M(P8,Tve,null),e(Md,Qlr),e(Md,Mve),e(Mve,Wlr),b(m,AXe,_),b(m,Oo,_),M(B8,Oo,null),e(Oo,Hlr),e(Oo,Ed),e(Ed,Ulr),e(Ed,kW),e(kW,Jlr),e(Ed,Ylr),e(Ed,SW),e(SW,Klr),e(Ed,Zlr),e(Oo,eir),e(Oo,I8),e(I8,oir),e(I8,Eve),e(Eve,rir),e(I8,tir),e(Oo,air),e(Oo,Ft),M(N8,Ft,null),e(Ft,nir),e(Ft,Cve),e(Cve,sir),e(Ft,lir),e(Ft,Cd),e(Cd,iir),e(Cd,wve),e(wve,dir),e(Cd,cir),e(Cd,RW),e(RW,mir),e(Cd,fir),e(Ft,gir),M(SM,Ft,null),e(Oo,hir),e(Oo,io),M(q8,io,null),e(io,uir),e(io,Ave),e(Ave,pir),e(io,_ir),e(io,Ha),e(Ha,bir),e(Ha,Lve),e(Lve,vir),e(Ha,Fir),e(Ha,yve),e(yve,Tir),e(Ha,Mir),e(Ha,xve),e(xve,Eir),e(Ha,Cir),e(io,wir),e(io,$ve),e($ve,RM),e(RM,kve),e(kve,Air),e(RM,Lir),e(RM,PW),e(PW,yir),e(RM,xir),e(io,$ir),e(io,PM),e(PM,kir),e(PM,Sve),e(Sve,Sir),e(PM,Rir),e(PM,Rve),e(Rve,Pir),e(io,Bir),M(BM,io,null),b(m,LXe,_),b(m,wd,_),e(wd,IM),e(IM,Pve),M(j8,Pve,null),e(wd,Iir),e(wd,Bve),e(Bve,Nir),b(m,yXe,_),b(m,Vo,_),M(D8,Vo,null),e(Vo,qir),e(Vo,Ad),e(Ad,jir),e(Ad,BW),e(BW,Dir),e(Ad,Gir),e(Ad,IW),e(IW,Oir),e(Ad,Vir),e(Vo,Xir),e(Vo,G8),e(G8,zir),e(G8,Ive),e(Ive,Qir),e(G8,Wir),e(Vo,Hir),e(Vo,Tt),M(O8,Tt,null),e(Tt,Uir),e(Tt,Nve),e(Nve,Jir),e(Tt,Yir),e(Tt,Ld),e(Ld,Kir),e(Ld,qve),e(qve,Zir),e(Ld,edr),e(Ld,NW),e(NW,odr),e(Ld,rdr),e(Tt,tdr),M(NM,Tt,null),e(Vo,adr),e(Vo,co),M(V8,co,null),e(co,ndr),e(co,jve),e(jve,sdr),e(co,ldr),e(co,Ua),e(Ua,idr),e(Ua,Dve),e(Dve,ddr),e(Ua,cdr),e(Ua,Gve),e(Gve,mdr),e(Ua,fdr),e(Ua,Ove),e(Ove,gdr),e(Ua,hdr),e(co,udr),e(co,Vve),e(Vve,qM),e(qM,Xve),e(Xve,pdr),e(qM,_dr),e(qM,qW),e(qW,bdr),e(qM,vdr),e(co,Fdr),e(co,jM),e(jM,Tdr),e(jM,zve),e(zve,Mdr),e(jM,Edr),e(jM,Qve),e(Qve,Cdr),e(co,wdr),M(DM,co,null),b(m,xXe,_),b(m,yd,_),e(yd,GM),e(GM,Wve),M(X8,Wve,null),e(yd,Adr),e(yd,Hve),e(Hve,Ldr),b(m,$Xe,_),b(m,Xo,_),M(z8,Xo,null),e(Xo,ydr),e(Xo,xd),e(xd,xdr),e(xd,jW),e(jW,$dr),e(xd,kdr),e(xd,DW),e(DW,Sdr),e(xd,Rdr),e(Xo,Pdr),e(Xo,Q8),e(Q8,Bdr),e(Q8,Uve),e(Uve,Idr),e(Q8,Ndr),e(Xo,qdr),e(Xo,Mt),M(W8,Mt,null),e(Mt,jdr),e(Mt,Jve),e(Jve,Ddr),e(Mt,Gdr),e(Mt,$d),e($d,Odr),e($d,Yve),e(Yve,Vdr),e($d,Xdr),e($d,GW),e(GW,zdr),e($d,Qdr),e(Mt,Wdr),M(OM,Mt,null),e(Xo,Hdr),e(Xo,mo),M(H8,mo,null),e(mo,Udr),e(mo,Kve),e(Kve,Jdr),e(mo,Ydr),e(mo,Ja),e(Ja,Kdr),e(Ja,Zve),e(Zve,Zdr),e(Ja,ecr),e(Ja,e1e),e(e1e,ocr),e(Ja,rcr),e(Ja,o1e),e(o1e,tcr),e(Ja,acr),e(mo,ncr),e(mo,Pe),e(Pe,VM),e(VM,r1e),e(r1e,scr),e(VM,lcr),e(VM,OW),e(OW,icr),e(VM,dcr),e(Pe,ccr),e(Pe,XM),e(XM,t1e),e(t1e,mcr),e(XM,fcr),e(XM,VW),e(VW,gcr),e(XM,hcr),e(Pe,ucr),e(Pe,zM),e(zM,a1e),e(a1e,pcr),e(zM,_cr),e(zM,XW),e(XW,bcr),e(zM,vcr),e(Pe,Fcr),e(Pe,QM),e(QM,n1e),e(n1e,Tcr),e(QM,Mcr),e(QM,zW),e(zW,Ecr),e(QM,Ccr),e(Pe,wcr),e(Pe,WM),e(WM,s1e),e(s1e,Acr),e(WM,Lcr),e(WM,QW),e(QW,ycr),e(WM,xcr),e(Pe,$cr),e(Pe,HM),e(HM,l1e),e(l1e,kcr),e(HM,Scr),e(HM,WW),e(WW,Rcr),e(HM,Pcr),e(Pe,Bcr),e(Pe,UM),e(UM,i1e),e(i1e,Icr),e(UM,Ncr),e(UM,HW),e(HW,qcr),e(UM,jcr),e(Pe,Dcr),e(Pe,JM),e(JM,d1e),e(d1e,Gcr),e(JM,Ocr),e(JM,UW),e(UW,Vcr),e(JM,Xcr),e(Pe,zcr),e(Pe,YM),e(YM,c1e),e(c1e,Qcr),e(YM,Wcr),e(YM,JW),e(JW,Hcr),e(YM,Ucr),e(mo,Jcr),e(mo,KM),e(KM,Ycr),e(KM,m1e),e(m1e,Kcr),e(KM,Zcr),e(KM,f1e),e(f1e,emr),e(mo,omr),M(ZM,mo,null),b(m,kXe,_),b(m,kd,_),e(kd,e4),e(e4,g1e),M(U8,g1e,null),e(kd,rmr),e(kd,h1e),e(h1e,tmr),b(m,SXe,_),b(m,zo,_),M(J8,zo,null),e(zo,amr),e(zo,Sd),e(Sd,nmr),e(Sd,YW),e(YW,smr),e(Sd,lmr),e(Sd,KW),e(KW,imr),e(Sd,dmr),e(zo,cmr),e(zo,Y8),e(Y8,mmr),e(Y8,u1e),e(u1e,fmr),e(Y8,gmr),e(zo,hmr),e(zo,Et),M(K8,Et,null),e(Et,umr),e(Et,p1e),e(p1e,pmr),e(Et,_mr),e(Et,Rd),e(Rd,bmr),e(Rd,_1e),e(_1e,vmr),e(Rd,Fmr),e(Rd,ZW),e(ZW,Tmr),e(Rd,Mmr),e(Et,Emr),M(o4,Et,null),e(zo,Cmr),e(zo,fo),M(Z8,fo,null),e(fo,wmr),e(fo,b1e),e(b1e,Amr),e(fo,Lmr),e(fo,Ya),e(Ya,ymr),e(Ya,v1e),e(v1e,xmr),e(Ya,$mr),e(Ya,F1e),e(F1e,kmr),e(Ya,Smr),e(Ya,T1e),e(T1e,Rmr),e(Ya,Pmr),e(fo,Bmr),e(fo,ot),e(ot,r4),e(r4,M1e),e(M1e,Imr),e(r4,Nmr),e(r4,eH),e(eH,qmr),e(r4,jmr),e(ot,Dmr),e(ot,t4),e(t4,E1e),e(E1e,Gmr),e(t4,Omr),e(t4,oH),e(oH,Vmr),e(t4,Xmr),e(ot,zmr),e(ot,a4),e(a4,C1e),e(C1e,Qmr),e(a4,Wmr),e(a4,rH),e(rH,Hmr),e(a4,Umr),e(ot,Jmr),e(ot,n4),e(n4,w1e),e(w1e,Ymr),e(n4,Kmr),e(n4,tH),e(tH,Zmr),e(n4,efr),e(ot,ofr),e(ot,s4),e(s4,A1e),e(A1e,rfr),e(s4,tfr),e(s4,aH),e(aH,afr),e(s4,nfr),e(fo,sfr),e(fo,l4),e(l4,lfr),e(l4,L1e),e(L1e,ifr),e(l4,dfr),e(l4,y1e),e(y1e,cfr),e(fo,mfr),M(i4,fo,null),b(m,RXe,_),b(m,Pd,_),e(Pd,d4),e(d4,x1e),M(e9,x1e,null),e(Pd,ffr),e(Pd,$1e),e($1e,gfr),b(m,PXe,_),b(m,Qo,_),M(o9,Qo,null),e(Qo,hfr),e(Qo,Bd),e(Bd,ufr),e(Bd,nH),e(nH,pfr),e(Bd,_fr),e(Bd,sH),e(sH,bfr),e(Bd,vfr),e(Qo,Ffr),e(Qo,r9),e(r9,Tfr),e(r9,k1e),e(k1e,Mfr),e(r9,Efr),e(Qo,Cfr),e(Qo,Ct),M(t9,Ct,null),e(Ct,wfr),e(Ct,S1e),e(S1e,Afr),e(Ct,Lfr),e(Ct,Id),e(Id,yfr),e(Id,R1e),e(R1e,xfr),e(Id,$fr),e(Id,lH),e(lH,kfr),e(Id,Sfr),e(Ct,Rfr),M(c4,Ct,null),e(Qo,Pfr),e(Qo,go),M(a9,go,null),e(go,Bfr),e(go,P1e),e(P1e,Ifr),e(go,Nfr),e(go,Ka),e(Ka,qfr),e(Ka,B1e),e(B1e,jfr),e(Ka,Dfr),e(Ka,I1e),e(I1e,Gfr),e(Ka,Ofr),e(Ka,N1e),e(N1e,Vfr),e(Ka,Xfr),e(go,zfr),e(go,Le),e(Le,m4),e(m4,q1e),e(q1e,Qfr),e(m4,Wfr),e(m4,iH),e(iH,Hfr),e(m4,Ufr),e(Le,Jfr),e(Le,f4),e(f4,j1e),e(j1e,Yfr),e(f4,Kfr),e(f4,dH),e(dH,Zfr),e(f4,egr),e(Le,ogr),e(Le,g4),e(g4,D1e),e(D1e,rgr),e(g4,tgr),e(g4,cH),e(cH,agr),e(g4,ngr),e(Le,sgr),e(Le,h4),e(h4,G1e),e(G1e,lgr),e(h4,igr),e(h4,mH),e(mH,dgr),e(h4,cgr),e(Le,mgr),e(Le,u4),e(u4,O1e),e(O1e,fgr),e(u4,ggr),e(u4,fH),e(fH,hgr),e(u4,ugr),e(Le,pgr),e(Le,p4),e(p4,V1e),e(V1e,_gr),e(p4,bgr),e(p4,gH),e(gH,vgr),e(p4,Fgr),e(Le,Tgr),e(Le,_4),e(_4,X1e),e(X1e,Mgr),e(_4,Egr),e(_4,hH),e(hH,Cgr),e(_4,wgr),e(Le,Agr),e(Le,b4),e(b4,z1e),e(z1e,Lgr),e(b4,ygr),e(b4,uH),e(uH,xgr),e(b4,$gr),e(Le,kgr),e(Le,v4),e(v4,Q1e),e(Q1e,Sgr),e(v4,Rgr),e(v4,pH),e(pH,Pgr),e(v4,Bgr),e(Le,Igr),e(Le,F4),e(F4,W1e),e(W1e,Ngr),e(F4,qgr),e(F4,_H),e(_H,jgr),e(F4,Dgr),e(go,Ggr),e(go,T4),e(T4,Ogr),e(T4,H1e),e(H1e,Vgr),e(T4,Xgr),e(T4,U1e),e(U1e,zgr),e(go,Qgr),M(M4,go,null),b(m,BXe,_),b(m,Nd,_),e(Nd,E4),e(E4,J1e),M(n9,J1e,null),e(Nd,Wgr),e(Nd,Y1e),e(Y1e,Hgr),b(m,IXe,_),b(m,Wo,_),M(s9,Wo,null),e(Wo,Ugr),e(Wo,qd),e(qd,Jgr),e(qd,bH),e(bH,Ygr),e(qd,Kgr),e(qd,vH),e(vH,Zgr),e(qd,ehr),e(Wo,ohr),e(Wo,l9),e(l9,rhr),e(l9,K1e),e(K1e,thr),e(l9,ahr),e(Wo,nhr),e(Wo,wt),M(i9,wt,null),e(wt,shr),e(wt,Z1e),e(Z1e,lhr),e(wt,ihr),e(wt,jd),e(jd,dhr),e(jd,eFe),e(eFe,chr),e(jd,mhr),e(jd,FH),e(FH,fhr),e(jd,ghr),e(wt,hhr),M(C4,wt,null),e(Wo,uhr),e(Wo,ho),M(d9,ho,null),e(ho,phr),e(ho,oFe),e(oFe,_hr),e(ho,bhr),e(ho,Za),e(Za,vhr),e(Za,rFe),e(rFe,Fhr),e(Za,Thr),e(Za,tFe),e(tFe,Mhr),e(Za,Ehr),e(Za,aFe),e(aFe,Chr),e(Za,whr),e(ho,Ahr),e(ho,c9),e(c9,w4),e(w4,nFe),e(nFe,Lhr),e(w4,yhr),e(w4,TH),e(TH,xhr),e(w4,$hr),e(c9,khr),e(c9,A4),e(A4,sFe),e(sFe,Shr),e(A4,Rhr),e(A4,MH),e(MH,Phr),e(A4,Bhr),e(ho,Ihr),e(ho,L4),e(L4,Nhr),e(L4,lFe),e(lFe,qhr),e(L4,jhr),e(L4,iFe),e(iFe,Dhr),e(ho,Ghr),M(y4,ho,null),b(m,NXe,_),b(m,Dd,_),e(Dd,x4),e(x4,dFe),M(m9,dFe,null),e(Dd,Ohr),e(Dd,cFe),e(cFe,Vhr),b(m,qXe,_),b(m,Ho,_),M(f9,Ho,null),e(Ho,Xhr),e(Ho,Gd),e(Gd,zhr),e(Gd,EH),e(EH,Qhr),e(Gd,Whr),e(Gd,CH),e(CH,Hhr),e(Gd,Uhr),e(Ho,Jhr),e(Ho,g9),e(g9,Yhr),e(g9,mFe),e(mFe,Khr),e(g9,Zhr),e(Ho,eur),e(Ho,At),M(h9,At,null),e(At,our),e(At,fFe),e(fFe,rur),e(At,tur),e(At,Od),e(Od,aur),e(Od,gFe),e(gFe,nur),e(Od,sur),e(Od,wH),e(wH,lur),e(Od,iur),e(At,dur),M($4,At,null),e(Ho,cur),e(Ho,uo),M(u9,uo,null),e(uo,mur),e(uo,hFe),e(hFe,fur),e(uo,gur),e(uo,en),e(en,hur),e(en,uFe),e(uFe,uur),e(en,pur),e(en,pFe),e(pFe,_ur),e(en,bur),e(en,_Fe),e(_Fe,vur),e(en,Fur),e(uo,Tur),e(uo,rt),e(rt,k4),e(k4,bFe),e(bFe,Mur),e(k4,Eur),e(k4,AH),e(AH,Cur),e(k4,wur),e(rt,Aur),e(rt,S4),e(S4,vFe),e(vFe,Lur),e(S4,yur),e(S4,LH),e(LH,xur),e(S4,$ur),e(rt,kur),e(rt,R4),e(R4,FFe),e(FFe,Sur),e(R4,Rur),e(R4,yH),e(yH,Pur),e(R4,Bur),e(rt,Iur),e(rt,P4),e(P4,TFe),e(TFe,Nur),e(P4,qur),e(P4,xH),e(xH,jur),e(P4,Dur),e(rt,Gur),e(rt,B4),e(B4,MFe),e(MFe,Our),e(B4,Vur),e(B4,$H),e($H,Xur),e(B4,zur),e(uo,Qur),e(uo,I4),e(I4,Wur),e(I4,EFe),e(EFe,Hur),e(I4,Uur),e(I4,CFe),e(CFe,Jur),e(uo,Yur),M(N4,uo,null),b(m,jXe,_),b(m,Vd,_),e(Vd,q4),e(q4,wFe),M(p9,wFe,null),e(Vd,Kur),e(Vd,AFe),e(AFe,Zur),b(m,DXe,_),b(m,Uo,_),M(_9,Uo,null),e(Uo,epr),e(Uo,Xd),e(Xd,opr),e(Xd,kH),e(kH,rpr),e(Xd,tpr),e(Xd,SH),e(SH,apr),e(Xd,npr),e(Uo,spr),e(Uo,b9),e(b9,lpr),e(b9,LFe),e(LFe,ipr),e(b9,dpr),e(Uo,cpr),e(Uo,Lt),M(v9,Lt,null),e(Lt,mpr),e(Lt,yFe),e(yFe,fpr),e(Lt,gpr),e(Lt,zd),e(zd,hpr),e(zd,xFe),e(xFe,upr),e(zd,ppr),e(zd,RH),e(RH,_pr),e(zd,bpr),e(Lt,vpr),M(j4,Lt,null),e(Uo,Fpr),e(Uo,po),M(F9,po,null),e(po,Tpr),e(po,$Fe),e($Fe,Mpr),e(po,Epr),e(po,on),e(on,Cpr),e(on,kFe),e(kFe,wpr),e(on,Apr),e(on,SFe),e(SFe,Lpr),e(on,ypr),e(on,RFe),e(RFe,xpr),e(on,$pr),e(po,kpr),e(po,Qd),e(Qd,D4),e(D4,PFe),e(PFe,Spr),e(D4,Rpr),e(D4,PH),e(PH,Ppr),e(D4,Bpr),e(Qd,Ipr),e(Qd,G4),e(G4,BFe),e(BFe,Npr),e(G4,qpr),e(G4,BH),e(BH,jpr),e(G4,Dpr),e(Qd,Gpr),e(Qd,O4),e(O4,IFe),e(IFe,Opr),e(O4,Vpr),e(O4,IH),e(IH,Xpr),e(O4,zpr),e(po,Qpr),e(po,V4),e(V4,Wpr),e(V4,NFe),e(NFe,Hpr),e(V4,Upr),e(V4,qFe),e(qFe,Jpr),e(po,Ypr),M(X4,po,null),b(m,GXe,_),b(m,Wd,_),e(Wd,z4),e(z4,jFe),M(T9,jFe,null),e(Wd,Kpr),e(Wd,DFe),e(DFe,Zpr),b(m,OXe,_),b(m,Jo,_),M(M9,Jo,null),e(Jo,e_r),e(Jo,Hd),e(Hd,o_r),e(Hd,NH),e(NH,r_r),e(Hd,t_r),e(Hd,qH),e(qH,a_r),e(Hd,n_r),e(Jo,s_r),e(Jo,E9),e(E9,l_r),e(E9,GFe),e(GFe,i_r),e(E9,d_r),e(Jo,c_r),e(Jo,yt),M(C9,yt,null),e(yt,m_r),e(yt,OFe),e(OFe,f_r),e(yt,g_r),e(yt,Ud),e(Ud,h_r),e(Ud,VFe),e(VFe,u_r),e(Ud,p_r),e(Ud,jH),e(jH,__r),e(Ud,b_r),e(yt,v_r),M(Q4,yt,null),e(Jo,F_r),e(Jo,_o),M(w9,_o,null),e(_o,T_r),e(_o,XFe),e(XFe,M_r),e(_o,E_r),e(_o,rn),e(rn,C_r),e(rn,zFe),e(zFe,w_r),e(rn,A_r),e(rn,QFe),e(QFe,L_r),e(rn,y_r),e(rn,WFe),e(WFe,x_r),e(rn,$_r),e(_o,k_r),e(_o,A9),e(A9,W4),e(W4,HFe),e(HFe,S_r),e(W4,R_r),e(W4,DH),e(DH,P_r),e(W4,B_r),e(A9,I_r),e(A9,H4),e(H4,UFe),e(UFe,N_r),e(H4,q_r),e(H4,GH),e(GH,j_r),e(H4,D_r),e(_o,G_r),e(_o,U4),e(U4,O_r),e(U4,JFe),e(JFe,V_r),e(U4,X_r),e(U4,YFe),e(YFe,z_r),e(_o,Q_r),M(J4,_o,null),b(m,VXe,_),b(m,Jd,_),e(Jd,Y4),e(Y4,KFe),M(L9,KFe,null),e(Jd,W_r),e(Jd,ZFe),e(ZFe,H_r),b(m,XXe,_),b(m,Yo,_),M(y9,Yo,null),e(Yo,U_r),e(Yo,Yd),e(Yd,J_r),e(Yd,OH),e(OH,Y_r),e(Yd,K_r),e(Yd,VH),e(VH,Z_r),e(Yd,e2r),e(Yo,o2r),e(Yo,x9),e(x9,r2r),e(x9,eTe),e(eTe,t2r),e(x9,a2r),e(Yo,n2r),e(Yo,xt),M($9,xt,null),e(xt,s2r),e(xt,oTe),e(oTe,l2r),e(xt,i2r),e(xt,Kd),e(Kd,d2r),e(Kd,rTe),e(rTe,c2r),e(Kd,m2r),e(Kd,XH),e(XH,f2r),e(Kd,g2r),e(xt,h2r),M(K4,xt,null),e(Yo,u2r),e(Yo,bo),M(k9,bo,null),e(bo,p2r),e(bo,tTe),e(tTe,_2r),e(bo,b2r),e(bo,tn),e(tn,v2r),e(tn,aTe),e(aTe,F2r),e(tn,T2r),e(tn,nTe),e(nTe,M2r),e(tn,E2r),e(tn,sTe),e(sTe,C2r),e(tn,w2r),e(bo,A2r),e(bo,lTe),e(lTe,Z4),e(Z4,iTe),e(iTe,L2r),e(Z4,y2r),e(Z4,zH),e(zH,x2r),e(Z4,$2r),e(bo,k2r),e(bo,eE),e(eE,S2r),e(eE,dTe),e(dTe,R2r),e(eE,P2r),e(eE,cTe),e(cTe,B2r),e(bo,I2r),M(oE,bo,null),b(m,zXe,_),b(m,Zd,_),e(Zd,rE),e(rE,mTe),M(S9,mTe,null),e(Zd,N2r),e(Zd,fTe),e(fTe,q2r),b(m,QXe,_),b(m,Ko,_),M(R9,Ko,null),e(Ko,j2r),e(Ko,ec),e(ec,D2r),e(ec,QH),e(QH,G2r),e(ec,O2r),e(ec,WH),e(WH,V2r),e(ec,X2r),e(Ko,z2r),e(Ko,P9),e(P9,Q2r),e(P9,gTe),e(gTe,W2r),e(P9,H2r),e(Ko,U2r),e(Ko,$t),M(B9,$t,null),e($t,J2r),e($t,hTe),e(hTe,Y2r),e($t,K2r),e($t,oc),e(oc,Z2r),e(oc,uTe),e(uTe,ebr),e(oc,obr),e(oc,HH),e(HH,rbr),e(oc,tbr),e($t,abr),M(tE,$t,null),e(Ko,nbr),e(Ko,vo),M(I9,vo,null),e(vo,sbr),e(vo,pTe),e(pTe,lbr),e(vo,ibr),e(vo,an),e(an,dbr),e(an,_Te),e(_Te,cbr),e(an,mbr),e(an,bTe),e(bTe,fbr),e(an,gbr),e(an,vTe),e(vTe,hbr),e(an,ubr),e(vo,pbr),e(vo,tt),e(tt,aE),e(aE,FTe),e(FTe,_br),e(aE,bbr),e(aE,UH),e(UH,vbr),e(aE,Fbr),e(tt,Tbr),e(tt,nE),e(nE,TTe),e(TTe,Mbr),e(nE,Ebr),e(nE,JH),e(JH,Cbr),e(nE,wbr),e(tt,Abr),e(tt,sE),e(sE,MTe),e(MTe,Lbr),e(sE,ybr),e(sE,YH),e(YH,xbr),e(sE,$br),e(tt,kbr),e(tt,lE),e(lE,ETe),e(ETe,Sbr),e(lE,Rbr),e(lE,KH),e(KH,Pbr),e(lE,Bbr),e(tt,Ibr),e(tt,iE),e(iE,CTe),e(CTe,Nbr),e(iE,qbr),e(iE,ZH),e(ZH,jbr),e(iE,Dbr),e(vo,Gbr),e(vo,dE),e(dE,Obr),e(dE,wTe),e(wTe,Vbr),e(dE,Xbr),e(dE,ATe),e(ATe,zbr),e(vo,Qbr),M(cE,vo,null),b(m,WXe,_),b(m,rc,_),e(rc,mE),e(mE,LTe),M(N9,LTe,null),e(rc,Wbr),e(rc,yTe),e(yTe,Hbr),b(m,HXe,_),b(m,Zo,_),M(q9,Zo,null),e(Zo,Ubr),e(Zo,tc),e(tc,Jbr),e(tc,eU),e(eU,Ybr),e(tc,Kbr),e(tc,oU),e(oU,Zbr),e(tc,evr),e(Zo,ovr),e(Zo,j9),e(j9,rvr),e(j9,xTe),e(xTe,tvr),e(j9,avr),e(Zo,nvr),e(Zo,kt),M(D9,kt,null),e(kt,svr),e(kt,$Te),e($Te,lvr),e(kt,ivr),e(kt,ac),e(ac,dvr),e(ac,kTe),e(kTe,cvr),e(ac,mvr),e(ac,rU),e(rU,fvr),e(ac,gvr),e(kt,hvr),M(fE,kt,null),e(Zo,uvr),e(Zo,Fo),M(G9,Fo,null),e(Fo,pvr),e(Fo,STe),e(STe,_vr),e(Fo,bvr),e(Fo,nn),e(nn,vvr),e(nn,RTe),e(RTe,Fvr),e(nn,Tvr),e(nn,PTe),e(PTe,Mvr),e(nn,Evr),e(nn,BTe),e(BTe,Cvr),e(nn,wvr),e(Fo,Avr),e(Fo,ITe),e(ITe,gE),e(gE,NTe),e(NTe,Lvr),e(gE,yvr),e(gE,tU),e(tU,xvr),e(gE,$vr),e(Fo,kvr),e(Fo,hE),e(hE,Svr),e(hE,qTe),e(qTe,Rvr),e(hE,Pvr),e(hE,jTe),e(jTe,Bvr),e(Fo,Ivr),M(uE,Fo,null),b(m,UXe,_),b(m,nc,_),e(nc,pE),e(pE,DTe),M(O9,DTe,null),e(nc,Nvr),e(nc,GTe),e(GTe,qvr),b(m,JXe,_),b(m,er,_),M(V9,er,null),e(er,jvr),e(er,sc),e(sc,Dvr),e(sc,aU),e(aU,Gvr),e(sc,Ovr),e(sc,nU),e(nU,Vvr),e(sc,Xvr),e(er,zvr),e(er,X9),e(X9,Qvr),e(X9,OTe),e(OTe,Wvr),e(X9,Hvr),e(er,Uvr),e(er,St),M(z9,St,null),e(St,Jvr),e(St,VTe),e(VTe,Yvr),e(St,Kvr),e(St,lc),e(lc,Zvr),e(lc,XTe),e(XTe,e1r),e(lc,o1r),e(lc,sU),e(sU,r1r),e(lc,t1r),e(St,a1r),M(_E,St,null),e(er,n1r),e(er,xr),M(Q9,xr,null),e(xr,s1r),e(xr,zTe),e(zTe,l1r),e(xr,i1r),e(xr,sn),e(sn,d1r),e(sn,QTe),e(QTe,c1r),e(sn,m1r),e(sn,WTe),e(WTe,f1r),e(sn,g1r),e(sn,HTe),e(HTe,h1r),e(sn,u1r),e(xr,p1r),e(xr,q),e(q,bE),e(bE,UTe),e(UTe,_1r),e(bE,b1r),e(bE,lU),e(lU,v1r),e(bE,F1r),e(q,T1r),e(q,vE),e(vE,JTe),e(JTe,M1r),e(vE,E1r),e(vE,iU),e(iU,C1r),e(vE,w1r),e(q,A1r),e(q,FE),e(FE,YTe),e(YTe,L1r),e(FE,y1r),e(FE,dU),e(dU,x1r),e(FE,$1r),e(q,k1r),e(q,TE),e(TE,KTe),e(KTe,S1r),e(TE,R1r),e(TE,cU),e(cU,P1r),e(TE,B1r),e(q,I1r),e(q,ME),e(ME,ZTe),e(ZTe,N1r),e(ME,q1r),e(ME,mU),e(mU,j1r),e(ME,D1r),e(q,G1r),e(q,EE),e(EE,eMe),e(eMe,O1r),e(EE,V1r),e(EE,fU),e(fU,X1r),e(EE,z1r),e(q,Q1r),e(q,CE),e(CE,oMe),e(oMe,W1r),e(CE,H1r),e(CE,gU),e(gU,U1r),e(CE,J1r),e(q,Y1r),e(q,wE),e(wE,rMe),e(rMe,K1r),e(wE,Z1r),e(wE,hU),e(hU,eFr),e(wE,oFr),e(q,rFr),e(q,AE),e(AE,tMe),e(tMe,tFr),e(AE,aFr),e(AE,uU),e(uU,nFr),e(AE,sFr),e(q,lFr),e(q,LE),e(LE,aMe),e(aMe,iFr),e(LE,dFr),e(LE,pU),e(pU,cFr),e(LE,mFr),e(q,fFr),e(q,yE),e(yE,nMe),e(nMe,gFr),e(yE,hFr),e(yE,_U),e(_U,uFr),e(yE,pFr),e(q,_Fr),e(q,xE),e(xE,sMe),e(sMe,bFr),e(xE,vFr),e(xE,bU),e(bU,FFr),e(xE,TFr),e(q,MFr),e(q,$E),e($E,lMe),e(lMe,EFr),e($E,CFr),e($E,vU),e(vU,wFr),e($E,AFr),e(q,LFr),e(q,kE),e(kE,iMe),e(iMe,yFr),e(kE,xFr),e(kE,FU),e(FU,$Fr),e(kE,kFr),e(q,SFr),e(q,SE),e(SE,dMe),e(dMe,RFr),e(SE,PFr),e(SE,TU),e(TU,BFr),e(SE,IFr),e(q,NFr),e(q,RE),e(RE,cMe),e(cMe,qFr),e(RE,jFr),e(RE,MU),e(MU,DFr),e(RE,GFr),e(q,OFr),e(q,PE),e(PE,mMe),e(mMe,VFr),e(PE,XFr),e(PE,EU),e(EU,zFr),e(PE,QFr),e(q,WFr),e(q,Js),e(Js,fMe),e(fMe,HFr),e(Js,UFr),e(Js,CU),e(CU,JFr),e(Js,YFr),e(Js,wU),e(wU,KFr),e(Js,ZFr),e(q,eTr),e(q,BE),e(BE,gMe),e(gMe,oTr),e(BE,rTr),e(BE,AU),e(AU,tTr),e(BE,aTr),e(q,nTr),e(q,IE),e(IE,hMe),e(hMe,sTr),e(IE,lTr),e(IE,LU),e(LU,iTr),e(IE,dTr),e(q,cTr),e(q,NE),e(NE,uMe),e(uMe,mTr),e(NE,fTr),e(NE,yU),e(yU,gTr),e(NE,hTr),e(q,uTr),e(q,qE),e(qE,pMe),e(pMe,pTr),e(qE,_Tr),e(qE,xU),e(xU,bTr),e(qE,vTr),e(q,FTr),e(q,jE),e(jE,_Me),e(_Me,TTr),e(jE,MTr),e(jE,$U),e($U,ETr),e(jE,CTr),e(q,wTr),e(q,DE),e(DE,bMe),e(bMe,ATr),e(DE,LTr),e(DE,kU),e(kU,yTr),e(DE,xTr),e(q,$Tr),e(q,GE),e(GE,vMe),e(vMe,kTr),e(GE,STr),e(GE,SU),e(SU,RTr),e(GE,PTr),e(q,BTr),e(q,OE),e(OE,FMe),e(FMe,ITr),e(OE,NTr),e(OE,RU),e(RU,qTr),e(OE,jTr),e(q,DTr),e(q,VE),e(VE,TMe),e(TMe,GTr),e(VE,OTr),e(VE,PU),e(PU,VTr),e(VE,XTr),e(q,zTr),e(q,XE),e(XE,MMe),e(MMe,QTr),e(XE,WTr),e(XE,BU),e(BU,HTr),e(XE,UTr),e(q,JTr),e(q,zE),e(zE,EMe),e(EMe,YTr),e(zE,KTr),e(zE,IU),e(IU,ZTr),e(zE,eMr),e(q,oMr),e(q,QE),e(QE,CMe),e(CMe,rMr),e(QE,tMr),e(QE,NU),e(NU,aMr),e(QE,nMr),e(q,sMr),e(q,WE),e(WE,wMe),e(wMe,lMr),e(WE,iMr),e(WE,qU),e(qU,dMr),e(WE,cMr),e(q,mMr),e(q,HE),e(HE,AMe),e(AMe,fMr),e(HE,gMr),e(HE,jU),e(jU,hMr),e(HE,uMr),e(q,pMr),e(q,UE),e(UE,LMe),e(LMe,_Mr),e(UE,bMr),e(UE,DU),e(DU,vMr),e(UE,FMr),e(q,TMr),e(q,JE),e(JE,yMe),e(yMe,MMr),e(JE,EMr),e(JE,GU),e(GU,CMr),e(JE,wMr),e(q,AMr),e(q,YE),e(YE,xMe),e(xMe,LMr),e(YE,yMr),e(YE,OU),e(OU,xMr),e(YE,$Mr),e(q,kMr),e(q,KE),e(KE,$Me),e($Me,SMr),e(KE,RMr),e(KE,VU),e(VU,PMr),e(KE,BMr),e(q,IMr),e(q,ZE),e(ZE,kMe),e(kMe,NMr),e(ZE,qMr),e(ZE,XU),e(XU,jMr),e(ZE,DMr),e(q,GMr),e(q,eC),e(eC,SMe),e(SMe,OMr),e(eC,VMr),e(eC,zU),e(zU,XMr),e(eC,zMr),e(q,QMr),e(q,oC),e(oC,RMe),e(RMe,WMr),e(oC,HMr),e(oC,QU),e(QU,UMr),e(oC,JMr),e(q,YMr),e(q,rC),e(rC,PMe),e(PMe,KMr),e(rC,ZMr),e(rC,WU),e(WU,e4r),e(rC,o4r),e(q,r4r),e(q,tC),e(tC,BMe),e(BMe,t4r),e(tC,a4r),e(tC,HU),e(HU,n4r),e(tC,s4r),e(q,l4r),e(q,aC),e(aC,IMe),e(IMe,i4r),e(aC,d4r),e(aC,UU),e(UU,c4r),e(aC,m4r),e(q,f4r),e(q,nC),e(nC,NMe),e(NMe,g4r),e(nC,h4r),e(nC,JU),e(JU,u4r),e(nC,p4r),e(q,_4r),e(q,sC),e(sC,qMe),e(qMe,b4r),e(sC,v4r),e(sC,YU),e(YU,F4r),e(sC,T4r),e(q,M4r),e(q,lC),e(lC,jMe),e(jMe,E4r),e(lC,C4r),e(lC,KU),e(KU,w4r),e(lC,A4r),e(q,L4r),e(q,iC),e(iC,DMe),e(DMe,y4r),e(iC,x4r),e(iC,ZU),e(ZU,$4r),e(iC,k4r),e(q,S4r),e(q,dC),e(dC,GMe),e(GMe,R4r),e(dC,P4r),e(dC,eJ),e(eJ,B4r),e(dC,I4r),e(q,N4r),e(q,cC),e(cC,OMe),e(OMe,q4r),e(cC,j4r),e(cC,oJ),e(oJ,D4r),e(cC,G4r),e(q,O4r),e(q,mC),e(mC,VMe),e(VMe,V4r),e(mC,X4r),e(mC,rJ),e(rJ,z4r),e(mC,Q4r),e(xr,W4r),M(fC,xr,null),b(m,YXe,_),b(m,ic,_),e(ic,gC),e(gC,XMe),M(W9,XMe,null),e(ic,H4r),e(ic,zMe),e(zMe,U4r),b(m,KXe,_),b(m,or,_),M(H9,or,null),e(or,J4r),e(or,dc),e(dc,Y4r),e(dc,tJ),e(tJ,K4r),e(dc,Z4r),e(dc,aJ),e(aJ,eEr),e(dc,oEr),e(or,rEr),e(or,U9),e(U9,tEr),e(U9,QMe),e(QMe,aEr),e(U9,nEr),e(or,sEr),e(or,Rt),M(J9,Rt,null),e(Rt,lEr),e(Rt,WMe),e(WMe,iEr),e(Rt,dEr),e(Rt,cc),e(cc,cEr),e(cc,HMe),e(HMe,mEr),e(cc,fEr),e(cc,nJ),e(nJ,gEr),e(cc,hEr),e(Rt,uEr),M(hC,Rt,null),e(or,pEr),e(or,$r),M(Y9,$r,null),e($r,_Er),e($r,UMe),e(UMe,bEr),e($r,vEr),e($r,ln),e(ln,FEr),e(ln,JMe),e(JMe,TEr),e(ln,MEr),e(ln,YMe),e(YMe,EEr),e(ln,CEr),e(ln,KMe),e(KMe,wEr),e(ln,AEr),e($r,LEr),e($r,se),e(se,uC),e(uC,ZMe),e(ZMe,yEr),e(uC,xEr),e(uC,sJ),e(sJ,$Er),e(uC,kEr),e(se,SEr),e(se,pC),e(pC,e4e),e(e4e,REr),e(pC,PEr),e(pC,lJ),e(lJ,BEr),e(pC,IEr),e(se,NEr),e(se,_C),e(_C,o4e),e(o4e,qEr),e(_C,jEr),e(_C,iJ),e(iJ,DEr),e(_C,GEr),e(se,OEr),e(se,bC),e(bC,r4e),e(r4e,VEr),e(bC,XEr),e(bC,dJ),e(dJ,zEr),e(bC,QEr),e(se,WEr),e(se,vC),e(vC,t4e),e(t4e,HEr),e(vC,UEr),e(vC,cJ),e(cJ,JEr),e(vC,YEr),e(se,KEr),e(se,FC),e(FC,a4e),e(a4e,ZEr),e(FC,eCr),e(FC,mJ),e(mJ,oCr),e(FC,rCr),e(se,tCr),e(se,TC),e(TC,n4e),e(n4e,aCr),e(TC,nCr),e(TC,fJ),e(fJ,sCr),e(TC,lCr),e(se,iCr),e(se,MC),e(MC,s4e),e(s4e,dCr),e(MC,cCr),e(MC,gJ),e(gJ,mCr),e(MC,fCr),e(se,gCr),e(se,EC),e(EC,l4e),e(l4e,hCr),e(EC,uCr),e(EC,hJ),e(hJ,pCr),e(EC,_Cr),e(se,bCr),e(se,CC),e(CC,i4e),e(i4e,vCr),e(CC,FCr),e(CC,uJ),e(uJ,TCr),e(CC,MCr),e(se,ECr),e(se,wC),e(wC,d4e),e(d4e,CCr),e(wC,wCr),e(wC,pJ),e(pJ,ACr),e(wC,LCr),e(se,yCr),e(se,AC),e(AC,c4e),e(c4e,xCr),e(AC,$Cr),e(AC,_J),e(_J,kCr),e(AC,SCr),e(se,RCr),e(se,LC),e(LC,m4e),e(m4e,PCr),e(LC,BCr),e(LC,bJ),e(bJ,ICr),e(LC,NCr),e(se,qCr),e(se,yC),e(yC,f4e),e(f4e,jCr),e(yC,DCr),e(yC,vJ),e(vJ,GCr),e(yC,OCr),e(se,VCr),e(se,xC),e(xC,g4e),e(g4e,XCr),e(xC,zCr),e(xC,FJ),e(FJ,QCr),e(xC,WCr),e(se,HCr),e(se,$C),e($C,h4e),e(h4e,UCr),e($C,JCr),e($C,TJ),e(TJ,YCr),e($C,KCr),e(se,ZCr),e(se,kC),e(kC,u4e),e(u4e,e3r),e(kC,o3r),e(kC,MJ),e(MJ,r3r),e(kC,t3r),e(se,a3r),e(se,SC),e(SC,p4e),e(p4e,n3r),e(SC,s3r),e(SC,EJ),e(EJ,l3r),e(SC,i3r),e(se,d3r),e(se,RC),e(RC,_4e),e(_4e,c3r),e(RC,m3r),e(RC,CJ),e(CJ,f3r),e(RC,g3r),e(se,h3r),e(se,PC),e(PC,b4e),e(b4e,u3r),e(PC,p3r),e(PC,wJ),e(wJ,_3r),e(PC,b3r),e(se,v3r),e(se,BC),e(BC,v4e),e(v4e,F3r),e(BC,T3r),e(BC,AJ),e(AJ,M3r),e(BC,E3r),e(se,C3r),e(se,IC),e(IC,F4e),e(F4e,w3r),e(IC,A3r),e(IC,LJ),e(LJ,L3r),e(IC,y3r),e(se,x3r),e(se,NC),e(NC,T4e),e(T4e,$3r),e(NC,k3r),e(NC,yJ),e(yJ,S3r),e(NC,R3r),e($r,P3r),M(qC,$r,null),b(m,ZXe,_),b(m,mc,_),e(mc,jC),e(jC,M4e),M(K9,M4e,null),e(mc,B3r),e(mc,E4e),e(E4e,I3r),b(m,eze,_),b(m,rr,_),M(Z9,rr,null),e(rr,N3r),e(rr,fc),e(fc,q3r),e(fc,xJ),e(xJ,j3r),e(fc,D3r),e(fc,$J),e($J,G3r),e(fc,O3r),e(rr,V3r),e(rr,ex),e(ex,X3r),e(ex,C4e),e(C4e,z3r),e(ex,Q3r),e(rr,W3r),e(rr,Pt),M(ox,Pt,null),e(Pt,H3r),e(Pt,w4e),e(w4e,U3r),e(Pt,J3r),e(Pt,gc),e(gc,Y3r),e(gc,A4e),e(A4e,K3r),e(gc,Z3r),e(gc,kJ),e(kJ,e5r),e(gc,o5r),e(Pt,r5r),M(DC,Pt,null),e(rr,t5r),e(rr,kr),M(rx,kr,null),e(kr,a5r),e(kr,L4e),e(L4e,n5r),e(kr,s5r),e(kr,dn),e(dn,l5r),e(dn,y4e),e(y4e,i5r),e(dn,d5r),e(dn,x4e),e(x4e,c5r),e(dn,m5r),e(dn,$4e),e($4e,f5r),e(dn,g5r),e(kr,h5r),e(kr,Me),e(Me,GC),e(GC,k4e),e(k4e,u5r),e(GC,p5r),e(GC,SJ),e(SJ,_5r),e(GC,b5r),e(Me,v5r),e(Me,OC),e(OC,S4e),e(S4e,F5r),e(OC,T5r),e(OC,RJ),e(RJ,M5r),e(OC,E5r),e(Me,C5r),e(Me,VC),e(VC,R4e),e(R4e,w5r),e(VC,A5r),e(VC,PJ),e(PJ,L5r),e(VC,y5r),e(Me,x5r),e(Me,XC),e(XC,P4e),e(P4e,$5r),e(XC,k5r),e(XC,BJ),e(BJ,S5r),e(XC,R5r),e(Me,P5r),e(Me,zC),e(zC,B4e),e(B4e,B5r),e(zC,I5r),e(zC,IJ),e(IJ,N5r),e(zC,q5r),e(Me,j5r),e(Me,QC),e(QC,I4e),e(I4e,D5r),e(QC,G5r),e(QC,NJ),e(NJ,O5r),e(QC,V5r),e(Me,X5r),e(Me,WC),e(WC,N4e),e(N4e,z5r),e(WC,Q5r),e(WC,qJ),e(qJ,W5r),e(WC,H5r),e(Me,U5r),e(Me,HC),e(HC,q4e),e(q4e,J5r),e(HC,Y5r),e(HC,jJ),e(jJ,K5r),e(HC,Z5r),e(Me,e0r),e(Me,UC),e(UC,j4e),e(j4e,o0r),e(UC,r0r),e(UC,DJ),e(DJ,t0r),e(UC,a0r),e(Me,n0r),e(Me,JC),e(JC,D4e),e(D4e,s0r),e(JC,l0r),e(JC,GJ),e(GJ,i0r),e(JC,d0r),e(Me,c0r),e(Me,YC),e(YC,G4e),e(G4e,m0r),e(YC,f0r),e(YC,OJ),e(OJ,g0r),e(YC,h0r),e(Me,u0r),e(Me,KC),e(KC,O4e),e(O4e,p0r),e(KC,_0r),e(KC,VJ),e(VJ,b0r),e(KC,v0r),e(Me,F0r),e(Me,ZC),e(ZC,V4e),e(V4e,T0r),e(ZC,M0r),e(ZC,XJ),e(XJ,E0r),e(ZC,C0r),e(kr,w0r),M(e3,kr,null),b(m,oze,_),b(m,hc,_),e(hc,o3),e(o3,X4e),M(tx,X4e,null),e(hc,A0r),e(hc,z4e),e(z4e,L0r),b(m,rze,_),b(m,tr,_),M(ax,tr,null),e(tr,y0r),e(tr,uc),e(uc,x0r),e(uc,zJ),e(zJ,$0r),e(uc,k0r),e(uc,QJ),e(QJ,S0r),e(uc,R0r),e(tr,P0r),e(tr,nx),e(nx,B0r),e(nx,Q4e),e(Q4e,I0r),e(nx,N0r),e(tr,q0r),e(tr,Bt),M(sx,Bt,null),e(Bt,j0r),e(Bt,W4e),e(W4e,D0r),e(Bt,G0r),e(Bt,pc),e(pc,O0r),e(pc,H4e),e(H4e,V0r),e(pc,X0r),e(pc,WJ),e(WJ,z0r),e(pc,Q0r),e(Bt,W0r),M(r3,Bt,null),e(tr,H0r),e(tr,Sr),M(lx,Sr,null),e(Sr,U0r),e(Sr,U4e),e(U4e,J0r),e(Sr,Y0r),e(Sr,cn),e(cn,K0r),e(cn,J4e),e(J4e,Z0r),e(cn,ewr),e(cn,Y4e),e(Y4e,owr),e(cn,rwr),e(cn,K4e),e(K4e,twr),e(cn,awr),e(Sr,nwr),e(Sr,ar),e(ar,t3),e(t3,Z4e),e(Z4e,swr),e(t3,lwr),e(t3,HJ),e(HJ,iwr),e(t3,dwr),e(ar,cwr),e(ar,a3),e(a3,eEe),e(eEe,mwr),e(a3,fwr),e(a3,UJ),e(UJ,gwr),e(a3,hwr),e(ar,uwr),e(ar,n3),e(n3,oEe),e(oEe,pwr),e(n3,_wr),e(n3,JJ),e(JJ,bwr),e(n3,vwr),e(ar,Fwr),e(ar,s3),e(s3,rEe),e(rEe,Twr),e(s3,Mwr),e(s3,YJ),e(YJ,Ewr),e(s3,Cwr),e(ar,wwr),e(ar,l3),e(l3,tEe),e(tEe,Awr),e(l3,Lwr),e(l3,KJ),e(KJ,ywr),e(l3,xwr),e(ar,$wr),e(ar,i3),e(i3,aEe),e(aEe,kwr),e(i3,Swr),e(i3,ZJ),e(ZJ,Rwr),e(i3,Pwr),e(Sr,Bwr),M(d3,Sr,null),b(m,tze,_),b(m,_c,_),e(_c,c3),e(c3,nEe),M(ix,nEe,null),e(_c,Iwr),e(_c,sEe),e(sEe,Nwr),b(m,aze,_),b(m,nr,_),M(dx,nr,null),e(nr,qwr),e(nr,bc),e(bc,jwr),e(bc,eY),e(eY,Dwr),e(bc,Gwr),e(bc,oY),e(oY,Owr),e(bc,Vwr),e(nr,Xwr),e(nr,cx),e(cx,zwr),e(cx,lEe),e(lEe,Qwr),e(cx,Wwr),e(nr,Hwr),e(nr,It),M(mx,It,null),e(It,Uwr),e(It,iEe),e(iEe,Jwr),e(It,Ywr),e(It,vc),e(vc,Kwr),e(vc,dEe),e(dEe,Zwr),e(vc,eAr),e(vc,rY),e(rY,oAr),e(vc,rAr),e(It,tAr),M(m3,It,null),e(nr,aAr),e(nr,Rr),M(fx,Rr,null),e(Rr,nAr),e(Rr,cEe),e(cEe,sAr),e(Rr,lAr),e(Rr,mn),e(mn,iAr),e(mn,mEe),e(mEe,dAr),e(mn,cAr),e(mn,fEe),e(fEe,mAr),e(mn,fAr),e(mn,gEe),e(gEe,gAr),e(mn,hAr),e(Rr,uAr),e(Rr,ie),e(ie,f3),e(f3,hEe),e(hEe,pAr),e(f3,_Ar),e(f3,tY),e(tY,bAr),e(f3,vAr),e(ie,FAr),e(ie,g3),e(g3,uEe),e(uEe,TAr),e(g3,MAr),e(g3,aY),e(aY,EAr),e(g3,CAr),e(ie,wAr),e(ie,h3),e(h3,pEe),e(pEe,AAr),e(h3,LAr),e(h3,nY),e(nY,yAr),e(h3,xAr),e(ie,$Ar),e(ie,u3),e(u3,_Ee),e(_Ee,kAr),e(u3,SAr),e(u3,sY),e(sY,RAr),e(u3,PAr),e(ie,BAr),e(ie,p3),e(p3,bEe),e(bEe,IAr),e(p3,NAr),e(p3,lY),e(lY,qAr),e(p3,jAr),e(ie,DAr),e(ie,_3),e(_3,vEe),e(vEe,GAr),e(_3,OAr),e(_3,iY),e(iY,VAr),e(_3,XAr),e(ie,zAr),e(ie,b3),e(b3,FEe),e(FEe,QAr),e(b3,WAr),e(b3,dY),e(dY,HAr),e(b3,UAr),e(ie,JAr),e(ie,v3),e(v3,TEe),e(TEe,YAr),e(v3,KAr),e(v3,cY),e(cY,ZAr),e(v3,e6r),e(ie,o6r),e(ie,F3),e(F3,MEe),e(MEe,r6r),e(F3,t6r),e(F3,mY),e(mY,a6r),e(F3,n6r),e(ie,s6r),e(ie,T3),e(T3,EEe),e(EEe,l6r),e(T3,i6r),e(T3,fY),e(fY,d6r),e(T3,c6r),e(ie,m6r),e(ie,M3),e(M3,CEe),e(CEe,f6r),e(M3,g6r),e(M3,gY),e(gY,h6r),e(M3,u6r),e(ie,p6r),e(ie,E3),e(E3,wEe),e(wEe,_6r),e(E3,b6r),e(E3,hY),e(hY,v6r),e(E3,F6r),e(ie,T6r),e(ie,C3),e(C3,AEe),e(AEe,M6r),e(C3,E6r),e(C3,uY),e(uY,C6r),e(C3,w6r),e(ie,A6r),e(ie,w3),e(w3,LEe),e(LEe,L6r),e(w3,y6r),e(w3,pY),e(pY,x6r),e(w3,$6r),e(ie,k6r),e(ie,A3),e(A3,yEe),e(yEe,S6r),e(A3,R6r),e(A3,_Y),e(_Y,P6r),e(A3,B6r),e(ie,I6r),e(ie,L3),e(L3,xEe),e(xEe,N6r),e(L3,q6r),e(L3,bY),e(bY,j6r),e(L3,D6r),e(ie,G6r),e(ie,y3),e(y3,$Ee),e($Ee,O6r),e(y3,V6r),e(y3,vY),e(vY,X6r),e(y3,z6r),e(ie,Q6r),e(ie,x3),e(x3,kEe),e(kEe,W6r),e(x3,H6r),e(x3,FY),e(FY,U6r),e(x3,J6r),e(ie,Y6r),e(ie,$3),e($3,SEe),e(SEe,K6r),e($3,Z6r),e($3,TY),e(TY,e7r),e($3,o7r),e(ie,r7r),e(ie,k3),e(k3,REe),e(REe,t7r),e(k3,a7r),e(k3,MY),e(MY,n7r),e(k3,s7r),e(Rr,l7r),M(S3,Rr,null),b(m,nze,_),b(m,Fc,_),e(Fc,R3),e(R3,PEe),M(gx,PEe,null),e(Fc,i7r),e(Fc,BEe),e(BEe,d7r),b(m,sze,_),b(m,sr,_),M(hx,sr,null),e(sr,c7r),e(sr,Tc),e(Tc,m7r),e(Tc,EY),e(EY,f7r),e(Tc,g7r),e(Tc,CY),e(CY,h7r),e(Tc,u7r),e(sr,p7r),e(sr,ux),e(ux,_7r),e(ux,IEe),e(IEe,b7r),e(ux,v7r),e(sr,F7r),e(sr,Nt),M(px,Nt,null),e(Nt,T7r),e(Nt,NEe),e(NEe,M7r),e(Nt,E7r),e(Nt,Mc),e(Mc,C7r),e(Mc,qEe),e(qEe,w7r),e(Mc,A7r),e(Mc,wY),e(wY,L7r),e(Mc,y7r),e(Nt,x7r),M(P3,Nt,null),e(sr,$7r),e(sr,Pr),M(_x,Pr,null),e(Pr,k7r),e(Pr,jEe),e(jEe,S7r),e(Pr,R7r),e(Pr,fn),e(fn,P7r),e(fn,DEe),e(DEe,B7r),e(fn,I7r),e(fn,GEe),e(GEe,N7r),e(fn,q7r),e(fn,OEe),e(OEe,j7r),e(fn,D7r),e(Pr,G7r),e(Pr,ye),e(ye,B3),e(B3,VEe),e(VEe,O7r),e(B3,V7r),e(B3,AY),e(AY,X7r),e(B3,z7r),e(ye,Q7r),e(ye,I3),e(I3,XEe),e(XEe,W7r),e(I3,H7r),e(I3,LY),e(LY,U7r),e(I3,J7r),e(ye,Y7r),e(ye,N3),e(N3,zEe),e(zEe,K7r),e(N3,Z7r),e(N3,yY),e(yY,eLr),e(N3,oLr),e(ye,rLr),e(ye,q3),e(q3,QEe),e(QEe,tLr),e(q3,aLr),e(q3,xY),e(xY,nLr),e(q3,sLr),e(ye,lLr),e(ye,j3),e(j3,WEe),e(WEe,iLr),e(j3,dLr),e(j3,$Y),e($Y,cLr),e(j3,mLr),e(ye,fLr),e(ye,D3),e(D3,HEe),e(HEe,gLr),e(D3,hLr),e(D3,kY),e(kY,uLr),e(D3,pLr),e(ye,_Lr),e(ye,G3),e(G3,UEe),e(UEe,bLr),e(G3,vLr),e(G3,SY),e(SY,FLr),e(G3,TLr),e(ye,MLr),e(ye,O3),e(O3,JEe),e(JEe,ELr),e(O3,CLr),e(O3,RY),e(RY,wLr),e(O3,ALr),e(ye,LLr),e(ye,V3),e(V3,YEe),e(YEe,yLr),e(V3,xLr),e(V3,PY),e(PY,$Lr),e(V3,kLr),e(ye,SLr),e(ye,X3),e(X3,KEe),e(KEe,RLr),e(X3,PLr),e(X3,BY),e(BY,BLr),e(X3,ILr),e(Pr,NLr),M(z3,Pr,null),b(m,lze,_),b(m,Ec,_),e(Ec,Q3),e(Q3,ZEe),M(bx,ZEe,null),e(Ec,qLr),e(Ec,eCe),e(eCe,jLr),b(m,ize,_),b(m,lr,_),M(vx,lr,null),e(lr,DLr),e(lr,Cc),e(Cc,GLr),e(Cc,IY),e(IY,OLr),e(Cc,VLr),e(Cc,NY),e(NY,XLr),e(Cc,zLr),e(lr,QLr),e(lr,Fx),e(Fx,WLr),e(Fx,oCe),e(oCe,HLr),e(Fx,ULr),e(lr,JLr),e(lr,qt),M(Tx,qt,null),e(qt,YLr),e(qt,rCe),e(rCe,KLr),e(qt,ZLr),e(qt,wc),e(wc,eyr),e(wc,tCe),e(tCe,oyr),e(wc,ryr),e(wc,qY),e(qY,tyr),e(wc,ayr),e(qt,nyr),M(W3,qt,null),e(lr,syr),e(lr,Br),M(Mx,Br,null),e(Br,lyr),e(Br,aCe),e(aCe,iyr),e(Br,dyr),e(Br,gn),e(gn,cyr),e(gn,nCe),e(nCe,myr),e(gn,fyr),e(gn,sCe),e(sCe,gyr),e(gn,hyr),e(gn,lCe),e(lCe,uyr),e(gn,pyr),e(Br,_yr),e(Br,te),e(te,H3),e(H3,iCe),e(iCe,byr),e(H3,vyr),e(H3,jY),e(jY,Fyr),e(H3,Tyr),e(te,Myr),e(te,U3),e(U3,dCe),e(dCe,Eyr),e(U3,Cyr),e(U3,DY),e(DY,wyr),e(U3,Ayr),e(te,Lyr),e(te,J3),e(J3,cCe),e(cCe,yyr),e(J3,xyr),e(J3,GY),e(GY,$yr),e(J3,kyr),e(te,Syr),e(te,Y3),e(Y3,mCe),e(mCe,Ryr),e(Y3,Pyr),e(Y3,OY),e(OY,Byr),e(Y3,Iyr),e(te,Nyr),e(te,K3),e(K3,fCe),e(fCe,qyr),e(K3,jyr),e(K3,VY),e(VY,Dyr),e(K3,Gyr),e(te,Oyr),e(te,Z3),e(Z3,gCe),e(gCe,Vyr),e(Z3,Xyr),e(Z3,XY),e(XY,zyr),e(Z3,Qyr),e(te,Wyr),e(te,e5),e(e5,hCe),e(hCe,Hyr),e(e5,Uyr),e(e5,zY),e(zY,Jyr),e(e5,Yyr),e(te,Kyr),e(te,o5),e(o5,uCe),e(uCe,Zyr),e(o5,e8r),e(o5,QY),e(QY,o8r),e(o5,r8r),e(te,t8r),e(te,r5),e(r5,pCe),e(pCe,a8r),e(r5,n8r),e(r5,WY),e(WY,s8r),e(r5,l8r),e(te,i8r),e(te,t5),e(t5,_Ce),e(_Ce,d8r),e(t5,c8r),e(t5,HY),e(HY,m8r),e(t5,f8r),e(te,g8r),e(te,a5),e(a5,bCe),e(bCe,h8r),e(a5,u8r),e(a5,UY),e(UY,p8r),e(a5,_8r),e(te,b8r),e(te,n5),e(n5,vCe),e(vCe,v8r),e(n5,F8r),e(n5,JY),e(JY,T8r),e(n5,M8r),e(te,E8r),e(te,s5),e(s5,FCe),e(FCe,C8r),e(s5,w8r),e(s5,YY),e(YY,A8r),e(s5,L8r),e(te,y8r),e(te,l5),e(l5,TCe),e(TCe,x8r),e(l5,$8r),e(l5,KY),e(KY,k8r),e(l5,S8r),e(te,R8r),e(te,i5),e(i5,MCe),e(MCe,P8r),e(i5,B8r),e(i5,ZY),e(ZY,I8r),e(i5,N8r),e(te,q8r),e(te,d5),e(d5,ECe),e(ECe,j8r),e(d5,D8r),e(d5,eK),e(eK,G8r),e(d5,O8r),e(te,V8r),e(te,c5),e(c5,CCe),e(CCe,X8r),e(c5,z8r),e(c5,oK),e(oK,Q8r),e(c5,W8r),e(te,H8r),e(te,m5),e(m5,wCe),e(wCe,U8r),e(m5,J8r),e(m5,rK),e(rK,Y8r),e(m5,K8r),e(te,Z8r),e(te,f5),e(f5,ACe),e(ACe,e9r),e(f5,o9r),e(f5,tK),e(tK,r9r),e(f5,t9r),e(te,a9r),e(te,g5),e(g5,LCe),e(LCe,n9r),e(g5,s9r),e(g5,aK),e(aK,l9r),e(g5,i9r),e(te,d9r),e(te,h5),e(h5,yCe),e(yCe,c9r),e(h5,m9r),e(h5,nK),e(nK,f9r),e(h5,g9r),e(te,h9r),e(te,u5),e(u5,xCe),e(xCe,u9r),e(u5,p9r),e(u5,sK),e(sK,_9r),e(u5,b9r),e(te,v9r),e(te,p5),e(p5,$Ce),e($Ce,F9r),e(p5,T9r),e(p5,lK),e(lK,M9r),e(p5,E9r),e(te,C9r),e(te,_5),e(_5,kCe),e(kCe,w9r),e(_5,A9r),e(_5,iK),e(iK,L9r),e(_5,y9r),e(te,x9r),e(te,b5),e(b5,SCe),e(SCe,$9r),e(b5,k9r),e(b5,dK),e(dK,S9r),e(b5,R9r),e(te,P9r),e(te,v5),e(v5,RCe),e(RCe,B9r),e(v5,I9r),e(v5,cK),e(cK,N9r),e(v5,q9r),e(Br,j9r),M(F5,Br,null),b(m,dze,_),b(m,Ac,_),e(Ac,T5),e(T5,PCe),M(Ex,PCe,null),e(Ac,D9r),e(Ac,BCe),e(BCe,G9r),b(m,cze,_),b(m,ir,_),M(Cx,ir,null),e(ir,O9r),e(ir,Lc),e(Lc,V9r),e(Lc,mK),e(mK,X9r),e(Lc,z9r),e(Lc,fK),e(fK,Q9r),e(Lc,W9r),e(ir,H9r),e(ir,wx),e(wx,U9r),e(wx,ICe),e(ICe,J9r),e(wx,Y9r),e(ir,K9r),e(ir,jt),M(Ax,jt,null),e(jt,Z9r),e(jt,NCe),e(NCe,exr),e(jt,oxr),e(jt,yc),e(yc,rxr),e(yc,qCe),e(qCe,txr),e(yc,axr),e(yc,gK),e(gK,nxr),e(yc,sxr),e(jt,lxr),M(M5,jt,null),e(ir,ixr),e(ir,Ir),M(Lx,Ir,null),e(Ir,dxr),e(Ir,jCe),e(jCe,cxr),e(Ir,mxr),e(Ir,hn),e(hn,fxr),e(hn,DCe),e(DCe,gxr),e(hn,hxr),e(hn,GCe),e(GCe,uxr),e(hn,pxr),e(hn,OCe),e(OCe,_xr),e(hn,bxr),e(Ir,vxr),e(Ir,pe),e(pe,E5),e(E5,VCe),e(VCe,Fxr),e(E5,Txr),e(E5,hK),e(hK,Mxr),e(E5,Exr),e(pe,Cxr),e(pe,C5),e(C5,XCe),e(XCe,wxr),e(C5,Axr),e(C5,uK),e(uK,Lxr),e(C5,yxr),e(pe,xxr),e(pe,w5),e(w5,zCe),e(zCe,$xr),e(w5,kxr),e(w5,pK),e(pK,Sxr),e(w5,Rxr),e(pe,Pxr),e(pe,A5),e(A5,QCe),e(QCe,Bxr),e(A5,Ixr),e(A5,_K),e(_K,Nxr),e(A5,qxr),e(pe,jxr),e(pe,L5),e(L5,WCe),e(WCe,Dxr),e(L5,Gxr),e(L5,bK),e(bK,Oxr),e(L5,Vxr),e(pe,Xxr),e(pe,y5),e(y5,HCe),e(HCe,zxr),e(y5,Qxr),e(y5,vK),e(vK,Wxr),e(y5,Hxr),e(pe,Uxr),e(pe,x5),e(x5,UCe),e(UCe,Jxr),e(x5,Yxr),e(x5,FK),e(FK,Kxr),e(x5,Zxr),e(pe,e$r),e(pe,$5),e($5,JCe),e(JCe,o$r),e($5,r$r),e($5,TK),e(TK,t$r),e($5,a$r),e(pe,n$r),e(pe,k5),e(k5,YCe),e(YCe,s$r),e(k5,l$r),e(k5,MK),e(MK,i$r),e(k5,d$r),e(pe,c$r),e(pe,S5),e(S5,KCe),e(KCe,m$r),e(S5,f$r),e(S5,EK),e(EK,g$r),e(S5,h$r),e(pe,u$r),e(pe,R5),e(R5,ZCe),e(ZCe,p$r),e(R5,_$r),e(R5,CK),e(CK,b$r),e(R5,v$r),e(pe,F$r),e(pe,P5),e(P5,e3e),e(e3e,T$r),e(P5,M$r),e(P5,wK),e(wK,E$r),e(P5,C$r),e(pe,w$r),e(pe,B5),e(B5,o3e),e(o3e,A$r),e(B5,L$r),e(B5,AK),e(AK,y$r),e(B5,x$r),e(pe,$$r),e(pe,I5),e(I5,r3e),e(r3e,k$r),e(I5,S$r),e(I5,LK),e(LK,R$r),e(I5,P$r),e(pe,B$r),e(pe,N5),e(N5,t3e),e(t3e,I$r),e(N5,N$r),e(N5,yK),e(yK,q$r),e(N5,j$r),e(pe,D$r),e(pe,q5),e(q5,a3e),e(a3e,G$r),e(q5,O$r),e(q5,xK),e(xK,V$r),e(q5,X$r),e(pe,z$r),e(pe,j5),e(j5,n3e),e(n3e,Q$r),e(j5,W$r),e(j5,$K),e($K,H$r),e(j5,U$r),e(Ir,J$r),M(D5,Ir,null),b(m,mze,_),b(m,xc,_),e(xc,G5),e(G5,s3e),M(yx,s3e,null),e(xc,Y$r),e(xc,l3e),e(l3e,K$r),b(m,fze,_),b(m,dr,_),M(xx,dr,null),e(dr,Z$r),e(dr,$c),e($c,ekr),e($c,kK),e(kK,okr),e($c,rkr),e($c,SK),e(SK,tkr),e($c,akr),e(dr,nkr),e(dr,$x),e($x,skr),e($x,i3e),e(i3e,lkr),e($x,ikr),e(dr,dkr),e(dr,Dt),M(kx,Dt,null),e(Dt,ckr),e(Dt,d3e),e(d3e,mkr),e(Dt,fkr),e(Dt,kc),e(kc,gkr),e(kc,c3e),e(c3e,hkr),e(kc,ukr),e(kc,RK),e(RK,pkr),e(kc,_kr),e(Dt,bkr),M(O5,Dt,null),e(dr,vkr),e(dr,Nr),M(Sx,Nr,null),e(Nr,Fkr),e(Nr,m3e),e(m3e,Tkr),e(Nr,Mkr),e(Nr,un),e(un,Ekr),e(un,f3e),e(f3e,Ckr),e(un,wkr),e(un,g3e),e(g3e,Akr),e(un,Lkr),e(un,h3e),e(h3e,ykr),e(un,xkr),e(Nr,$kr),e(Nr,Rx),e(Rx,V5),e(V5,u3e),e(u3e,kkr),e(V5,Skr),e(V5,PK),e(PK,Rkr),e(V5,Pkr),e(Rx,Bkr),e(Rx,X5),e(X5,p3e),e(p3e,Ikr),e(X5,Nkr),e(X5,BK),e(BK,qkr),e(X5,jkr),e(Nr,Dkr),M(z5,Nr,null),b(m,gze,_),b(m,Sc,_),e(Sc,Q5),e(Q5,_3e),M(Px,_3e,null),e(Sc,Gkr),e(Sc,b3e),e(b3e,Okr),b(m,hze,_),b(m,cr,_),M(Bx,cr,null),e(cr,Vkr),e(cr,Rc),e(Rc,Xkr),e(Rc,IK),e(IK,zkr),e(Rc,Qkr),e(Rc,NK),e(NK,Wkr),e(Rc,Hkr),e(cr,Ukr),e(cr,Ix),e(Ix,Jkr),e(Ix,v3e),e(v3e,Ykr),e(Ix,Kkr),e(cr,Zkr),e(cr,Gt),M(Nx,Gt,null),e(Gt,eSr),e(Gt,F3e),e(F3e,oSr),e(Gt,rSr),e(Gt,Pc),e(Pc,tSr),e(Pc,T3e),e(T3e,aSr),e(Pc,nSr),e(Pc,qK),e(qK,sSr),e(Pc,lSr),e(Gt,iSr),M(W5,Gt,null),e(cr,dSr),e(cr,qr),M(qx,qr,null),e(qr,cSr),e(qr,M3e),e(M3e,mSr),e(qr,fSr),e(qr,pn),e(pn,gSr),e(pn,E3e),e(E3e,hSr),e(pn,uSr),e(pn,C3e),e(C3e,pSr),e(pn,_Sr),e(pn,w3e),e(w3e,bSr),e(pn,vSr),e(qr,FSr),e(qr,A3e),e(A3e,H5),e(H5,L3e),e(L3e,TSr),e(H5,MSr),e(H5,jK),e(jK,ESr),e(H5,CSr),e(qr,wSr),M(U5,qr,null),b(m,uze,_),b(m,Bc,_),e(Bc,J5),e(J5,y3e),M(jx,y3e,null),e(Bc,ASr),e(Bc,x3e),e(x3e,LSr),b(m,pze,_),b(m,mr,_),M(Dx,mr,null),e(mr,ySr),e(mr,Ic),e(Ic,xSr),e(Ic,DK),e(DK,$Sr),e(Ic,kSr),e(Ic,GK),e(GK,SSr),e(Ic,RSr),e(mr,PSr),e(mr,Gx),e(Gx,BSr),e(Gx,$3e),e($3e,ISr),e(Gx,NSr),e(mr,qSr),e(mr,Ot),M(Ox,Ot,null),e(Ot,jSr),e(Ot,k3e),e(k3e,DSr),e(Ot,GSr),e(Ot,Nc),e(Nc,OSr),e(Nc,S3e),e(S3e,VSr),e(Nc,XSr),e(Nc,OK),e(OK,zSr),e(Nc,QSr),e(Ot,WSr),M(Y5,Ot,null),e(mr,HSr),e(mr,jr),M(Vx,jr,null),e(jr,USr),e(jr,R3e),e(R3e,JSr),e(jr,YSr),e(jr,_n),e(_n,KSr),e(_n,P3e),e(P3e,ZSr),e(_n,eRr),e(_n,B3e),e(B3e,oRr),e(_n,rRr),e(_n,I3e),e(I3e,tRr),e(_n,aRr),e(jr,nRr),e(jr,de),e(de,K5),e(K5,N3e),e(N3e,sRr),e(K5,lRr),e(K5,VK),e(VK,iRr),e(K5,dRr),e(de,cRr),e(de,Z5),e(Z5,q3e),e(q3e,mRr),e(Z5,fRr),e(Z5,XK),e(XK,gRr),e(Z5,hRr),e(de,uRr),e(de,e0),e(e0,j3e),e(j3e,pRr),e(e0,_Rr),e(e0,zK),e(zK,bRr),e(e0,vRr),e(de,FRr),e(de,o0),e(o0,D3e),e(D3e,TRr),e(o0,MRr),e(o0,QK),e(QK,ERr),e(o0,CRr),e(de,wRr),e(de,r0),e(r0,G3e),e(G3e,ARr),e(r0,LRr),e(r0,WK),e(WK,yRr),e(r0,xRr),e(de,$Rr),e(de,t0),e(t0,O3e),e(O3e,kRr),e(t0,SRr),e(t0,HK),e(HK,RRr),e(t0,PRr),e(de,BRr),e(de,a0),e(a0,V3e),e(V3e,IRr),e(a0,NRr),e(a0,UK),e(UK,qRr),e(a0,jRr),e(de,DRr),e(de,n0),e(n0,X3e),e(X3e,GRr),e(n0,ORr),e(n0,JK),e(JK,VRr),e(n0,XRr),e(de,zRr),e(de,s0),e(s0,z3e),e(z3e,QRr),e(s0,WRr),e(s0,YK),e(YK,HRr),e(s0,URr),e(de,JRr),e(de,l0),e(l0,Q3e),e(Q3e,YRr),e(l0,KRr),e(l0,KK),e(KK,ZRr),e(l0,ePr),e(de,oPr),e(de,i0),e(i0,W3e),e(W3e,rPr),e(i0,tPr),e(i0,ZK),e(ZK,aPr),e(i0,nPr),e(de,sPr),e(de,d0),e(d0,H3e),e(H3e,lPr),e(d0,iPr),e(d0,eZ),e(eZ,dPr),e(d0,cPr),e(de,mPr),e(de,c0),e(c0,U3e),e(U3e,fPr),e(c0,gPr),e(c0,oZ),e(oZ,hPr),e(c0,uPr),e(de,pPr),e(de,m0),e(m0,J3e),e(J3e,_Pr),e(m0,bPr),e(m0,rZ),e(rZ,vPr),e(m0,FPr),e(de,TPr),e(de,f0),e(f0,Y3e),e(Y3e,MPr),e(f0,EPr),e(f0,tZ),e(tZ,CPr),e(f0,wPr),e(de,APr),e(de,g0),e(g0,K3e),e(K3e,LPr),e(g0,yPr),e(g0,aZ),e(aZ,xPr),e(g0,$Pr),e(de,kPr),e(de,h0),e(h0,Z3e),e(Z3e,SPr),e(h0,RPr),e(h0,nZ),e(nZ,PPr),e(h0,BPr),e(de,IPr),e(de,u0),e(u0,e5e),e(e5e,NPr),e(u0,qPr),e(u0,sZ),e(sZ,jPr),e(u0,DPr),e(de,GPr),e(de,p0),e(p0,o5e),e(o5e,OPr),e(p0,VPr),e(p0,lZ),e(lZ,XPr),e(p0,zPr),e(de,QPr),e(de,_0),e(_0,r5e),e(r5e,WPr),e(_0,HPr),e(_0,iZ),e(iZ,UPr),e(_0,JPr),e(jr,YPr),M(b0,jr,null),b(m,_ze,_),b(m,qc,_),e(qc,v0),e(v0,t5e),M(Xx,t5e,null),e(qc,KPr),e(qc,a5e),e(a5e,ZPr),b(m,bze,_),b(m,fr,_),M(zx,fr,null),e(fr,eBr),e(fr,jc),e(jc,oBr),e(jc,dZ),e(dZ,rBr),e(jc,tBr),e(jc,cZ),e(cZ,aBr),e(jc,nBr),e(fr,sBr),e(fr,Qx),e(Qx,lBr),e(Qx,n5e),e(n5e,iBr),e(Qx,dBr),e(fr,cBr),e(fr,Vt),M(Wx,Vt,null),e(Vt,mBr),e(Vt,s5e),e(s5e,fBr),e(Vt,gBr),e(Vt,Dc),e(Dc,hBr),e(Dc,l5e),e(l5e,uBr),e(Dc,pBr),e(Dc,mZ),e(mZ,_Br),e(Dc,bBr),e(Vt,vBr),M(F0,Vt,null),e(fr,FBr),e(fr,Dr),M(Hx,Dr,null),e(Dr,TBr),e(Dr,i5e),e(i5e,MBr),e(Dr,EBr),e(Dr,bn),e(bn,CBr),e(bn,d5e),e(d5e,wBr),e(bn,ABr),e(bn,c5e),e(c5e,LBr),e(bn,yBr),e(bn,m5e),e(m5e,xBr),e(bn,$Br),e(Dr,kBr),e(Dr,ce),e(ce,T0),e(T0,f5e),e(f5e,SBr),e(T0,RBr),e(T0,fZ),e(fZ,PBr),e(T0,BBr),e(ce,IBr),e(ce,M0),e(M0,g5e),e(g5e,NBr),e(M0,qBr),e(M0,gZ),e(gZ,jBr),e(M0,DBr),e(ce,GBr),e(ce,E0),e(E0,h5e),e(h5e,OBr),e(E0,VBr),e(E0,hZ),e(hZ,XBr),e(E0,zBr),e(ce,QBr),e(ce,C0),e(C0,u5e),e(u5e,WBr),e(C0,HBr),e(C0,uZ),e(uZ,UBr),e(C0,JBr),e(ce,YBr),e(ce,w0),e(w0,p5e),e(p5e,KBr),e(w0,ZBr),e(w0,pZ),e(pZ,eIr),e(w0,oIr),e(ce,rIr),e(ce,A0),e(A0,_5e),e(_5e,tIr),e(A0,aIr),e(A0,_Z),e(_Z,nIr),e(A0,sIr),e(ce,lIr),e(ce,L0),e(L0,b5e),e(b5e,iIr),e(L0,dIr),e(L0,bZ),e(bZ,cIr),e(L0,mIr),e(ce,fIr),e(ce,y0),e(y0,v5e),e(v5e,gIr),e(y0,hIr),e(y0,vZ),e(vZ,uIr),e(y0,pIr),e(ce,_Ir),e(ce,x0),e(x0,F5e),e(F5e,bIr),e(x0,vIr),e(x0,FZ),e(FZ,FIr),e(x0,TIr),e(ce,MIr),e(ce,$0),e($0,T5e),e(T5e,EIr),e($0,CIr),e($0,TZ),e(TZ,wIr),e($0,AIr),e(ce,LIr),e(ce,k0),e(k0,M5e),e(M5e,yIr),e(k0,xIr),e(k0,MZ),e(MZ,$Ir),e(k0,kIr),e(ce,SIr),e(ce,S0),e(S0,E5e),e(E5e,RIr),e(S0,PIr),e(S0,EZ),e(EZ,BIr),e(S0,IIr),e(ce,NIr),e(ce,R0),e(R0,C5e),e(C5e,qIr),e(R0,jIr),e(R0,CZ),e(CZ,DIr),e(R0,GIr),e(ce,OIr),e(ce,P0),e(P0,w5e),e(w5e,VIr),e(P0,XIr),e(P0,wZ),e(wZ,zIr),e(P0,QIr),e(ce,WIr),e(ce,B0),e(B0,A5e),e(A5e,HIr),e(B0,UIr),e(B0,AZ),e(AZ,JIr),e(B0,YIr),e(ce,KIr),e(ce,I0),e(I0,L5e),e(L5e,ZIr),e(I0,eNr),e(I0,LZ),e(LZ,oNr),e(I0,rNr),e(ce,tNr),e(ce,N0),e(N0,y5e),e(y5e,aNr),e(N0,nNr),e(N0,yZ),e(yZ,sNr),e(N0,lNr),e(ce,iNr),e(ce,q0),e(q0,x5e),e(x5e,dNr),e(q0,cNr),e(q0,xZ),e(xZ,mNr),e(q0,fNr),e(ce,gNr),e(ce,j0),e(j0,$5e),e($5e,hNr),e(j0,uNr),e(j0,$Z),e($Z,pNr),e(j0,_Nr),e(ce,bNr),e(ce,D0),e(D0,k5e),e(k5e,vNr),e(D0,FNr),e(D0,kZ),e(kZ,TNr),e(D0,MNr),e(Dr,ENr),M(G0,Dr,null),b(m,vze,_),b(m,Gc,_),e(Gc,O0),e(O0,S5e),M(Ux,S5e,null),e(Gc,CNr),e(Gc,R5e),e(R5e,wNr),b(m,Fze,_),b(m,gr,_),M(Jx,gr,null),e(gr,ANr),e(gr,Oc),e(Oc,LNr),e(Oc,SZ),e(SZ,yNr),e(Oc,xNr),e(Oc,RZ),e(RZ,$Nr),e(Oc,kNr),e(gr,SNr),e(gr,Yx),e(Yx,RNr),e(Yx,P5e),e(P5e,PNr),e(Yx,BNr),e(gr,INr),e(gr,Xt),M(Kx,Xt,null),e(Xt,NNr),e(Xt,B5e),e(B5e,qNr),e(Xt,jNr),e(Xt,Vc),e(Vc,DNr),e(Vc,I5e),e(I5e,GNr),e(Vc,ONr),e(Vc,PZ),e(PZ,VNr),e(Vc,XNr),e(Xt,zNr),M(V0,Xt,null),e(gr,QNr),e(gr,Gr),M(Zx,Gr,null),e(Gr,WNr),e(Gr,N5e),e(N5e,HNr),e(Gr,UNr),e(Gr,vn),e(vn,JNr),e(vn,q5e),e(q5e,YNr),e(vn,KNr),e(vn,j5e),e(j5e,ZNr),e(vn,eqr),e(vn,D5e),e(D5e,oqr),e(vn,rqr),e(Gr,tqr),e(Gr,G5e),e(G5e,X0),e(X0,O5e),e(O5e,aqr),e(X0,nqr),e(X0,BZ),e(BZ,sqr),e(X0,lqr),e(Gr,iqr),M(z0,Gr,null),b(m,Tze,_),b(m,Xc,_),e(Xc,Q0),e(Q0,V5e),M(e$,V5e,null),e(Xc,dqr),e(Xc,X5e),e(X5e,cqr),b(m,Mze,_),b(m,hr,_),M(o$,hr,null),e(hr,mqr),e(hr,zc),e(zc,fqr),e(zc,IZ),e(IZ,gqr),e(zc,hqr),e(zc,NZ),e(NZ,uqr),e(zc,pqr),e(hr,_qr),e(hr,r$),e(r$,bqr),e(r$,z5e),e(z5e,vqr),e(r$,Fqr),e(hr,Tqr),e(hr,zt),M(t$,zt,null),e(zt,Mqr),e(zt,Q5e),e(Q5e,Eqr),e(zt,Cqr),e(zt,Qc),e(Qc,wqr),e(Qc,W5e),e(W5e,Aqr),e(Qc,Lqr),e(Qc,qZ),e(qZ,yqr),e(Qc,xqr),e(zt,$qr),M(W0,zt,null),e(hr,kqr),e(hr,Or),M(a$,Or,null),e(Or,Sqr),e(Or,H5e),e(H5e,Rqr),e(Or,Pqr),e(Or,Fn),e(Fn,Bqr),e(Fn,U5e),e(U5e,Iqr),e(Fn,Nqr),e(Fn,J5e),e(J5e,qqr),e(Fn,jqr),e(Fn,Y5e),e(Y5e,Dqr),e(Fn,Gqr),e(Or,Oqr),e(Or,K5e),e(K5e,H0),e(H0,Z5e),e(Z5e,Vqr),e(H0,Xqr),e(H0,jZ),e(jZ,zqr),e(H0,Qqr),e(Or,Wqr),M(U0,Or,null),b(m,Eze,_),b(m,Wc,_),e(Wc,J0),e(J0,e0e),M(n$,e0e,null),e(Wc,Hqr),e(Wc,o0e),e(o0e,Uqr),b(m,Cze,_),b(m,ur,_),M(s$,ur,null),e(ur,Jqr),e(ur,Hc),e(Hc,Yqr),e(Hc,DZ),e(DZ,Kqr),e(Hc,Zqr),e(Hc,GZ),e(GZ,ejr),e(Hc,ojr),e(ur,rjr),e(ur,l$),e(l$,tjr),e(l$,r0e),e(r0e,ajr),e(l$,njr),e(ur,sjr),e(ur,Qt),M(i$,Qt,null),e(Qt,ljr),e(Qt,t0e),e(t0e,ijr),e(Qt,djr),e(Qt,Uc),e(Uc,cjr),e(Uc,a0e),e(a0e,mjr),e(Uc,fjr),e(Uc,OZ),e(OZ,gjr),e(Uc,hjr),e(Qt,ujr),M(Y0,Qt,null),e(ur,pjr),e(ur,Vr),M(d$,Vr,null),e(Vr,_jr),e(Vr,n0e),e(n0e,bjr),e(Vr,vjr),e(Vr,Tn),e(Tn,Fjr),e(Tn,s0e),e(s0e,Tjr),e(Tn,Mjr),e(Tn,l0e),e(l0e,Ejr),e(Tn,Cjr),e(Tn,i0e),e(i0e,wjr),e(Tn,Ajr),e(Vr,Ljr),e(Vr,oe),e(oe,K0),e(K0,d0e),e(d0e,yjr),e(K0,xjr),e(K0,VZ),e(VZ,$jr),e(K0,kjr),e(oe,Sjr),e(oe,Z0),e(Z0,c0e),e(c0e,Rjr),e(Z0,Pjr),e(Z0,XZ),e(XZ,Bjr),e(Z0,Ijr),e(oe,Njr),e(oe,ew),e(ew,m0e),e(m0e,qjr),e(ew,jjr),e(ew,zZ),e(zZ,Djr),e(ew,Gjr),e(oe,Ojr),e(oe,ow),e(ow,f0e),e(f0e,Vjr),e(ow,Xjr),e(ow,QZ),e(QZ,zjr),e(ow,Qjr),e(oe,Wjr),e(oe,rw),e(rw,g0e),e(g0e,Hjr),e(rw,Ujr),e(rw,WZ),e(WZ,Jjr),e(rw,Yjr),e(oe,Kjr),e(oe,tw),e(tw,h0e),e(h0e,Zjr),e(tw,eDr),e(tw,HZ),e(HZ,oDr),e(tw,rDr),e(oe,tDr),e(oe,aw),e(aw,u0e),e(u0e,aDr),e(aw,nDr),e(aw,UZ),e(UZ,sDr),e(aw,lDr),e(oe,iDr),e(oe,nw),e(nw,p0e),e(p0e,dDr),e(nw,cDr),e(nw,JZ),e(JZ,mDr),e(nw,fDr),e(oe,gDr),e(oe,sw),e(sw,_0e),e(_0e,hDr),e(sw,uDr),e(sw,YZ),e(YZ,pDr),e(sw,_Dr),e(oe,bDr),e(oe,lw),e(lw,b0e),e(b0e,vDr),e(lw,FDr),e(lw,KZ),e(KZ,TDr),e(lw,MDr),e(oe,EDr),e(oe,iw),e(iw,v0e),e(v0e,CDr),e(iw,wDr),e(iw,ZZ),e(ZZ,ADr),e(iw,LDr),e(oe,yDr),e(oe,dw),e(dw,F0e),e(F0e,xDr),e(dw,$Dr),e(dw,eee),e(eee,kDr),e(dw,SDr),e(oe,RDr),e(oe,cw),e(cw,T0e),e(T0e,PDr),e(cw,BDr),e(cw,oee),e(oee,IDr),e(cw,NDr),e(oe,qDr),e(oe,mw),e(mw,M0e),e(M0e,jDr),e(mw,DDr),e(mw,ree),e(ree,GDr),e(mw,ODr),e(oe,VDr),e(oe,fw),e(fw,E0e),e(E0e,XDr),e(fw,zDr),e(fw,tee),e(tee,QDr),e(fw,WDr),e(oe,HDr),e(oe,gw),e(gw,C0e),e(C0e,UDr),e(gw,JDr),e(gw,aee),e(aee,YDr),e(gw,KDr),e(oe,ZDr),e(oe,hw),e(hw,w0e),e(w0e,eGr),e(hw,oGr),e(hw,nee),e(nee,rGr),e(hw,tGr),e(oe,aGr),e(oe,uw),e(uw,A0e),e(A0e,nGr),e(uw,sGr),e(uw,see),e(see,lGr),e(uw,iGr),e(oe,dGr),e(oe,pw),e(pw,L0e),e(L0e,cGr),e(pw,mGr),e(pw,lee),e(lee,fGr),e(pw,gGr),e(oe,hGr),e(oe,_w),e(_w,y0e),e(y0e,uGr),e(_w,pGr),e(_w,iee),e(iee,_Gr),e(_w,bGr),e(oe,vGr),e(oe,bw),e(bw,x0e),e(x0e,FGr),e(bw,TGr),e(bw,dee),e(dee,MGr),e(bw,EGr),e(oe,CGr),e(oe,vw),e(vw,$0e),e($0e,wGr),e(vw,AGr),e(vw,cee),e(cee,LGr),e(vw,yGr),e(oe,xGr),e(oe,Fw),e(Fw,k0e),e(k0e,$Gr),e(Fw,kGr),e(Fw,mee),e(mee,SGr),e(Fw,RGr),e(oe,PGr),e(oe,Tw),e(Tw,S0e),e(S0e,BGr),e(Tw,IGr),e(Tw,fee),e(fee,NGr),e(Tw,qGr),e(oe,jGr),e(oe,Mw),e(Mw,R0e),e(R0e,DGr),e(Mw,GGr),e(Mw,gee),e(gee,OGr),e(Mw,VGr),e(oe,XGr),e(oe,Ew),e(Ew,P0e),e(P0e,zGr),e(Ew,QGr),e(Ew,hee),e(hee,WGr),e(Ew,HGr),e(oe,UGr),e(oe,Cw),e(Cw,B0e),e(B0e,JGr),e(Cw,YGr),e(Cw,uee),e(uee,KGr),e(Cw,ZGr),e(Vr,eOr),M(ww,Vr,null),b(m,wze,_),b(m,Jc,_),e(Jc,Aw),e(Aw,I0e),M(c$,I0e,null),e(Jc,oOr),e(Jc,N0e),e(N0e,rOr),b(m,Aze,_),b(m,pr,_),M(m$,pr,null),e(pr,tOr),e(pr,Yc),e(Yc,aOr),e(Yc,pee),e(pee,nOr),e(Yc,sOr),e(Yc,_ee),e(_ee,lOr),e(Yc,iOr),e(pr,dOr),e(pr,f$),e(f$,cOr),e(f$,q0e),e(q0e,mOr),e(f$,fOr),e(pr,gOr),e(pr,Wt),M(g$,Wt,null),e(Wt,hOr),e(Wt,j0e),e(j0e,uOr),e(Wt,pOr),e(Wt,Kc),e(Kc,_Or),e(Kc,D0e),e(D0e,bOr),e(Kc,vOr),e(Kc,bee),e(bee,FOr),e(Kc,TOr),e(Wt,MOr),M(Lw,Wt,null),e(pr,EOr),e(pr,Xr),M(h$,Xr,null),e(Xr,COr),e(Xr,G0e),e(G0e,wOr),e(Xr,AOr),e(Xr,Mn),e(Mn,LOr),e(Mn,O0e),e(O0e,yOr),e(Mn,xOr),e(Mn,V0e),e(V0e,$Or),e(Mn,kOr),e(Mn,X0e),e(X0e,SOr),e(Mn,ROr),e(Xr,POr),e(Xr,xe),e(xe,yw),e(yw,z0e),e(z0e,BOr),e(yw,IOr),e(yw,vee),e(vee,NOr),e(yw,qOr),e(xe,jOr),e(xe,xw),e(xw,Q0e),e(Q0e,DOr),e(xw,GOr),e(xw,Fee),e(Fee,OOr),e(xw,VOr),e(xe,XOr),e(xe,$w),e($w,W0e),e(W0e,zOr),e($w,QOr),e($w,Tee),e(Tee,WOr),e($w,HOr),e(xe,UOr),e(xe,kw),e(kw,H0e),e(H0e,JOr),e(kw,YOr),e(kw,Mee),e(Mee,KOr),e(kw,ZOr),e(xe,eVr),e(xe,Sw),e(Sw,U0e),e(U0e,oVr),e(Sw,rVr),e(Sw,Eee),e(Eee,tVr),e(Sw,aVr),e(xe,nVr),e(xe,Rw),e(Rw,J0e),e(J0e,sVr),e(Rw,lVr),e(Rw,Cee),e(Cee,iVr),e(Rw,dVr),e(xe,cVr),e(xe,Pw),e(Pw,Y0e),e(Y0e,mVr),e(Pw,fVr),e(Pw,wee),e(wee,gVr),e(Pw,hVr),e(xe,uVr),e(xe,Bw),e(Bw,K0e),e(K0e,pVr),e(Bw,_Vr),e(Bw,Aee),e(Aee,bVr),e(Bw,vVr),e(xe,FVr),e(xe,Iw),e(Iw,Z0e),e(Z0e,TVr),e(Iw,MVr),e(Iw,Lee),e(Lee,EVr),e(Iw,CVr),e(xe,wVr),e(xe,Nw),e(Nw,ewe),e(ewe,AVr),e(Nw,LVr),e(Nw,yee),e(yee,yVr),e(Nw,xVr),e(Xr,$Vr),M(qw,Xr,null),b(m,Lze,_),b(m,Zc,_),e(Zc,jw),e(jw,owe),M(u$,owe,null),e(Zc,kVr),e(Zc,rwe),e(rwe,SVr),b(m,yze,_),b(m,_r,_),M(p$,_r,null),e(_r,RVr),e(_r,em),e(em,PVr),e(em,xee),e(xee,BVr),e(em,IVr),e(em,$ee),e($ee,NVr),e(em,qVr),e(_r,jVr),e(_r,_$),e(_$,DVr),e(_$,twe),e(twe,GVr),e(_$,OVr),e(_r,VVr),e(_r,Ht),M(b$,Ht,null),e(Ht,XVr),e(Ht,awe),e(awe,zVr),e(Ht,QVr),e(Ht,om),e(om,WVr),e(om,nwe),e(nwe,HVr),e(om,UVr),e(om,kee),e(kee,JVr),e(om,YVr),e(Ht,KVr),M(Dw,Ht,null),e(_r,ZVr),e(_r,zr),M(v$,zr,null),e(zr,eXr),e(zr,swe),e(swe,oXr),e(zr,rXr),e(zr,En),e(En,tXr),e(En,lwe),e(lwe,aXr),e(En,nXr),e(En,iwe),e(iwe,sXr),e(En,lXr),e(En,dwe),e(dwe,iXr),e(En,dXr),e(zr,cXr),e(zr,Ee),e(Ee,Gw),e(Gw,cwe),e(cwe,mXr),e(Gw,fXr),e(Gw,See),e(See,gXr),e(Gw,hXr),e(Ee,uXr),e(Ee,Ow),e(Ow,mwe),e(mwe,pXr),e(Ow,_Xr),e(Ow,Ree),e(Ree,bXr),e(Ow,vXr),e(Ee,FXr),e(Ee,Vw),e(Vw,fwe),e(fwe,TXr),e(Vw,MXr),e(Vw,Pee),e(Pee,EXr),e(Vw,CXr),e(Ee,wXr),e(Ee,Xw),e(Xw,gwe),e(gwe,AXr),e(Xw,LXr),e(Xw,Bee),e(Bee,yXr),e(Xw,xXr),e(Ee,$Xr),e(Ee,zw),e(zw,hwe),e(hwe,kXr),e(zw,SXr),e(zw,Iee),e(Iee,RXr),e(zw,PXr),e(Ee,BXr),e(Ee,Qw),e(Qw,uwe),e(uwe,IXr),e(Qw,NXr),e(Qw,Nee),e(Nee,qXr),e(Qw,jXr),e(Ee,DXr),e(Ee,Ww),e(Ww,pwe),e(pwe,GXr),e(Ww,OXr),e(Ww,qee),e(qee,VXr),e(Ww,XXr),e(Ee,zXr),e(Ee,Hw),e(Hw,_we),e(_we,QXr),e(Hw,WXr),e(Hw,jee),e(jee,HXr),e(Hw,UXr),e(Ee,JXr),e(Ee,Uw),e(Uw,bwe),e(bwe,YXr),e(Uw,KXr),e(Uw,Dee),e(Dee,ZXr),e(Uw,ezr),e(Ee,ozr),e(Ee,Jw),e(Jw,vwe),e(vwe,rzr),e(Jw,tzr),e(Jw,Gee),e(Gee,azr),e(Jw,nzr),e(Ee,szr),e(Ee,Yw),e(Yw,Fwe),e(Fwe,lzr),e(Yw,izr),e(Yw,Oee),e(Oee,dzr),e(Yw,czr),e(Ee,mzr),e(Ee,Kw),e(Kw,Twe),e(Twe,fzr),e(Kw,gzr),e(Kw,Vee),e(Vee,hzr),e(Kw,uzr),e(Ee,pzr),e(Ee,Zw),e(Zw,Mwe),e(Mwe,_zr),e(Zw,bzr),e(Zw,Xee),e(Xee,vzr),e(Zw,Fzr),e(zr,Tzr),M(eA,zr,null),b(m,xze,_),b(m,rm,_),e(rm,oA),e(oA,Ewe),M(F$,Ewe,null),e(rm,Mzr),e(rm,Cwe),e(Cwe,Ezr),b(m,$ze,_),b(m,br,_),M(T$,br,null),e(br,Czr),e(br,tm),e(tm,wzr),e(tm,zee),e(zee,Azr),e(tm,Lzr),e(tm,Qee),e(Qee,yzr),e(tm,xzr),e(br,$zr),e(br,M$),e(M$,kzr),e(M$,wwe),e(wwe,Szr),e(M$,Rzr),e(br,Pzr),e(br,Ut),M(E$,Ut,null),e(Ut,Bzr),e(Ut,Awe),e(Awe,Izr),e(Ut,Nzr),e(Ut,am),e(am,qzr),e(am,Lwe),e(Lwe,jzr),e(am,Dzr),e(am,Wee),e(Wee,Gzr),e(am,Ozr),e(Ut,Vzr),M(rA,Ut,null),e(br,Xzr),e(br,Qr),M(C$,Qr,null),e(Qr,zzr),e(Qr,ywe),e(ywe,Qzr),e(Qr,Wzr),e(Qr,Cn),e(Cn,Hzr),e(Cn,xwe),e(xwe,Uzr),e(Cn,Jzr),e(Cn,$we),e($we,Yzr),e(Cn,Kzr),e(Cn,kwe),e(kwe,Zzr),e(Cn,eQr),e(Qr,oQr),e(Qr,$e),e($e,tA),e(tA,Swe),e(Swe,rQr),e(tA,tQr),e(tA,Hee),e(Hee,aQr),e(tA,nQr),e($e,sQr),e($e,aA),e(aA,Rwe),e(Rwe,lQr),e(aA,iQr),e(aA,Uee),e(Uee,dQr),e(aA,cQr),e($e,mQr),e($e,nA),e(nA,Pwe),e(Pwe,fQr),e(nA,gQr),e(nA,Jee),e(Jee,hQr),e(nA,uQr),e($e,pQr),e($e,sA),e(sA,Bwe),e(Bwe,_Qr),e(sA,bQr),e(sA,Yee),e(Yee,vQr),e(sA,FQr),e($e,TQr),e($e,lA),e(lA,Iwe),e(Iwe,MQr),e(lA,EQr),e(lA,Kee),e(Kee,CQr),e(lA,wQr),e($e,AQr),e($e,iA),e(iA,Nwe),e(Nwe,LQr),e(iA,yQr),e(iA,Zee),e(Zee,xQr),e(iA,$Qr),e($e,kQr),e($e,dA),e(dA,qwe),e(qwe,SQr),e(dA,RQr),e(dA,eoe),e(eoe,PQr),e(dA,BQr),e($e,IQr),e($e,cA),e(cA,jwe),e(jwe,NQr),e(cA,qQr),e(cA,ooe),e(ooe,jQr),e(cA,DQr),e($e,GQr),e($e,mA),e(mA,Dwe),e(Dwe,OQr),e(mA,VQr),e(mA,roe),e(roe,XQr),e(mA,zQr),e($e,QQr),e($e,fA),e(fA,Gwe),e(Gwe,WQr),e(fA,HQr),e(fA,toe),e(toe,UQr),e(fA,JQr),e(Qr,YQr),M(gA,Qr,null),b(m,kze,_),b(m,nm,_),e(nm,hA),e(hA,Owe),M(w$,Owe,null),e(nm,KQr),e(nm,Vwe),e(Vwe,ZQr),b(m,Sze,_),b(m,vr,_),M(A$,vr,null),e(vr,eWr),e(vr,sm),e(sm,oWr),e(sm,aoe),e(aoe,rWr),e(sm,tWr),e(sm,noe),e(noe,aWr),e(sm,nWr),e(vr,sWr),e(vr,L$),e(L$,lWr),e(L$,Xwe),e(Xwe,iWr),e(L$,dWr),e(vr,cWr),e(vr,Jt),M(y$,Jt,null),e(Jt,mWr),e(Jt,zwe),e(zwe,fWr),e(Jt,gWr),e(Jt,lm),e(lm,hWr),e(lm,Qwe),e(Qwe,uWr),e(lm,pWr),e(lm,soe),e(soe,_Wr),e(lm,bWr),e(Jt,vWr),M(uA,Jt,null),e(vr,FWr),e(vr,Wr),M(x$,Wr,null),e(Wr,TWr),e(Wr,Wwe),e(Wwe,MWr),e(Wr,EWr),e(Wr,wn),e(wn,CWr),e(wn,Hwe),e(Hwe,wWr),e(wn,AWr),e(wn,Uwe),e(Uwe,LWr),e(wn,yWr),e(wn,Jwe),e(Jwe,xWr),e(wn,$Wr),e(Wr,kWr),e(Wr,ke),e(ke,pA),e(pA,Ywe),e(Ywe,SWr),e(pA,RWr),e(pA,loe),e(loe,PWr),e(pA,BWr),e(ke,IWr),e(ke,_A),e(_A,Kwe),e(Kwe,NWr),e(_A,qWr),e(_A,ioe),e(ioe,jWr),e(_A,DWr),e(ke,GWr),e(ke,bA),e(bA,Zwe),e(Zwe,OWr),e(bA,VWr),e(bA,doe),e(doe,XWr),e(bA,zWr),e(ke,QWr),e(ke,vA),e(vA,eAe),e(eAe,WWr),e(vA,HWr),e(vA,coe),e(coe,UWr),e(vA,JWr),e(ke,YWr),e(ke,FA),e(FA,oAe),e(oAe,KWr),e(FA,ZWr),e(FA,moe),e(moe,eHr),e(FA,oHr),e(ke,rHr),e(ke,TA),e(TA,rAe),e(rAe,tHr),e(TA,aHr),e(TA,foe),e(foe,nHr),e(TA,sHr),e(ke,lHr),e(ke,MA),e(MA,tAe),e(tAe,iHr),e(MA,dHr),e(MA,goe),e(goe,cHr),e(MA,mHr),e(ke,fHr),e(ke,EA),e(EA,aAe),e(aAe,gHr),e(EA,hHr),e(EA,hoe),e(hoe,uHr),e(EA,pHr),e(ke,_Hr),e(ke,CA),e(CA,nAe),e(nAe,bHr),e(CA,vHr),e(CA,uoe),e(uoe,FHr),e(CA,THr),e(ke,MHr),e(ke,wA),e(wA,sAe),e(sAe,EHr),e(wA,CHr),e(wA,poe),e(poe,wHr),e(wA,AHr),e(Wr,LHr),M(AA,Wr,null),b(m,Rze,_),b(m,im,_),e(im,LA),e(LA,lAe),M($$,lAe,null),e(im,yHr),e(im,iAe),e(iAe,xHr),b(m,Pze,_),b(m,Fr,_),M(k$,Fr,null),e(Fr,$Hr),e(Fr,dm),e(dm,kHr),e(dm,_oe),e(_oe,SHr),e(dm,RHr),e(dm,boe),e(boe,PHr),e(dm,BHr),e(Fr,IHr),e(Fr,S$),e(S$,NHr),e(S$,dAe),e(dAe,qHr),e(S$,jHr),e(Fr,DHr),e(Fr,Yt),M(R$,Yt,null),e(Yt,GHr),e(Yt,cAe),e(cAe,OHr),e(Yt,VHr),e(Yt,cm),e(cm,XHr),e(cm,mAe),e(mAe,zHr),e(cm,QHr),e(cm,voe),e(voe,WHr),e(cm,HHr),e(Yt,UHr),M(yA,Yt,null),e(Fr,JHr),e(Fr,Hr),M(P$,Hr,null),e(Hr,YHr),e(Hr,fAe),e(fAe,KHr),e(Hr,ZHr),e(Hr,An),e(An,eUr),e(An,gAe),e(gAe,oUr),e(An,rUr),e(An,hAe),e(hAe,tUr),e(An,aUr),e(An,uAe),e(uAe,nUr),e(An,sUr),e(Hr,lUr),e(Hr,Se),e(Se,xA),e(xA,pAe),e(pAe,iUr),e(xA,dUr),e(xA,Foe),e(Foe,cUr),e(xA,mUr),e(Se,fUr),e(Se,$A),e($A,_Ae),e(_Ae,gUr),e($A,hUr),e($A,Toe),e(Toe,uUr),e($A,pUr),e(Se,_Ur),e(Se,kA),e(kA,bAe),e(bAe,bUr),e(kA,vUr),e(kA,Moe),e(Moe,FUr),e(kA,TUr),e(Se,MUr),e(Se,SA),e(SA,vAe),e(vAe,EUr),e(SA,CUr),e(SA,Eoe),e(Eoe,wUr),e(SA,AUr),e(Se,LUr),e(Se,RA),e(RA,FAe),e(FAe,yUr),e(RA,xUr),e(RA,Coe),e(Coe,$Ur),e(RA,kUr),e(Se,SUr),e(Se,PA),e(PA,TAe),e(TAe,RUr),e(PA,PUr),e(PA,woe),e(woe,BUr),e(PA,IUr),e(Se,NUr),e(Se,BA),e(BA,MAe),e(MAe,qUr),e(BA,jUr),e(BA,Aoe),e(Aoe,DUr),e(BA,GUr),e(Se,OUr),e(Se,IA),e(IA,EAe),e(EAe,VUr),e(IA,XUr),e(IA,Loe),e(Loe,zUr),e(IA,QUr),e(Se,WUr),e(Se,NA),e(NA,CAe),e(CAe,HUr),e(NA,UUr),e(NA,yoe),e(yoe,JUr),e(NA,YUr),e(Se,KUr),e(Se,qA),e(qA,wAe),e(wAe,ZUr),e(qA,eJr),e(qA,xoe),e(xoe,oJr),e(qA,rJr),e(Hr,tJr),M(jA,Hr,null),b(m,Bze,_),b(m,mm,_),e(mm,DA),e(DA,AAe),M(B$,AAe,null),e(mm,aJr),e(mm,LAe),e(LAe,nJr),b(m,Ize,_),b(m,Tr,_),M(I$,Tr,null),e(Tr,sJr),e(Tr,fm),e(fm,lJr),e(fm,$oe),e($oe,iJr),e(fm,dJr),e(fm,koe),e(koe,cJr),e(fm,mJr),e(Tr,fJr),e(Tr,N$),e(N$,gJr),e(N$,yAe),e(yAe,hJr),e(N$,uJr),e(Tr,pJr),e(Tr,Kt),M(q$,Kt,null),e(Kt,_Jr),e(Kt,xAe),e(xAe,bJr),e(Kt,vJr),e(Kt,gm),e(gm,FJr),e(gm,$Ae),e($Ae,TJr),e(gm,MJr),e(gm,Soe),e(Soe,EJr),e(gm,CJr),e(Kt,wJr),M(GA,Kt,null),e(Tr,AJr),e(Tr,Ur),M(j$,Ur,null),e(Ur,LJr),e(Ur,kAe),e(kAe,yJr),e(Ur,xJr),e(Ur,Ln),e(Ln,$Jr),e(Ln,SAe),e(SAe,kJr),e(Ln,SJr),e(Ln,RAe),e(RAe,RJr),e(Ln,PJr),e(Ln,PAe),e(PAe,BJr),e(Ln,IJr),e(Ur,NJr),e(Ur,Re),e(Re,OA),e(OA,BAe),e(BAe,qJr),e(OA,jJr),e(OA,Roe),e(Roe,DJr),e(OA,GJr),e(Re,OJr),e(Re,VA),e(VA,IAe),e(IAe,VJr),e(VA,XJr),e(VA,Poe),e(Poe,zJr),e(VA,QJr),e(Re,WJr),e(Re,XA),e(XA,NAe),e(NAe,HJr),e(XA,UJr),e(XA,Boe),e(Boe,JJr),e(XA,YJr),e(Re,KJr),e(Re,zA),e(zA,qAe),e(qAe,ZJr),e(zA,eYr),e(zA,Ioe),e(Ioe,oYr),e(zA,rYr),e(Re,tYr),e(Re,QA),e(QA,jAe),e(jAe,aYr),e(QA,nYr),e(QA,Noe),e(Noe,sYr),e(QA,lYr),e(Re,iYr),e(Re,WA),e(WA,DAe),e(DAe,dYr),e(WA,cYr),e(WA,qoe),e(qoe,mYr),e(WA,fYr),e(Re,gYr),e(Re,HA),e(HA,GAe),e(GAe,hYr),e(HA,uYr),e(HA,joe),e(joe,pYr),e(HA,_Yr),e(Re,bYr),e(Re,UA),e(UA,OAe),e(OAe,vYr),e(UA,FYr),e(UA,Doe),e(Doe,TYr),e(UA,MYr),e(Re,EYr),e(Re,JA),e(JA,VAe),e(VAe,CYr),e(JA,wYr),e(JA,Goe),e(Goe,AYr),e(JA,LYr),e(Re,yYr),e(Re,YA),e(YA,XAe),e(XAe,xYr),e(YA,$Yr),e(YA,Ooe),e(Ooe,kYr),e(YA,SYr),e(Ur,RYr),M(KA,Ur,null),b(m,Nze,_),b(m,hm,_),e(hm,ZA),e(ZA,zAe),M(D$,zAe,null),e(hm,PYr),e(hm,QAe),e(QAe,BYr),b(m,qze,_),b(m,Mr,_),M(G$,Mr,null),e(Mr,IYr),e(Mr,um),e(um,NYr),e(um,Voe),e(Voe,qYr),e(um,jYr),e(um,Xoe),e(Xoe,DYr),e(um,GYr),e(Mr,OYr),e(Mr,O$),e(O$,VYr),e(O$,WAe),e(WAe,XYr),e(O$,zYr),e(Mr,QYr),e(Mr,Zt),M(V$,Zt,null),e(Zt,WYr),e(Zt,HAe),e(HAe,HYr),e(Zt,UYr),e(Zt,pm),e(pm,JYr),e(pm,UAe),e(UAe,YYr),e(pm,KYr),e(pm,zoe),e(zoe,ZYr),e(pm,eKr),e(Zt,oKr),M(e6,Zt,null),e(Mr,rKr),e(Mr,Jr),M(X$,Jr,null),e(Jr,tKr),e(Jr,JAe),e(JAe,aKr),e(Jr,nKr),e(Jr,yn),e(yn,sKr),e(yn,YAe),e(YAe,lKr),e(yn,iKr),e(yn,KAe),e(KAe,dKr),e(yn,cKr),e(yn,ZAe),e(ZAe,mKr),e(yn,fKr),e(Jr,gKr),e(Jr,Ve),e(Ve,o6),e(o6,e6e),e(e6e,hKr),e(o6,uKr),e(o6,Qoe),e(Qoe,pKr),e(o6,_Kr),e(Ve,bKr),e(Ve,r6),e(r6,o6e),e(o6e,vKr),e(r6,FKr),e(r6,Woe),e(Woe,TKr),e(r6,MKr),e(Ve,EKr),e(Ve,t6),e(t6,r6e),e(r6e,CKr),e(t6,wKr),e(t6,Hoe),e(Hoe,AKr),e(t6,LKr),e(Ve,yKr),e(Ve,a6),e(a6,t6e),e(t6e,xKr),e(a6,$Kr),e(a6,Uoe),e(Uoe,kKr),e(a6,SKr),e(Ve,RKr),e(Ve,n6),e(n6,a6e),e(a6e,PKr),e(n6,BKr),e(n6,Joe),e(Joe,IKr),e(n6,NKr),e(Ve,qKr),e(Ve,s6),e(s6,n6e),e(n6e,jKr),e(s6,DKr),e(s6,Yoe),e(Yoe,GKr),e(s6,OKr),e(Ve,VKr),e(Ve,l6),e(l6,s6e),e(s6e,XKr),e(l6,zKr),e(l6,Koe),e(Koe,QKr),e(l6,WKr),e(Ve,HKr),e(Ve,i6),e(i6,l6e),e(l6e,UKr),e(i6,JKr),e(i6,Zoe),e(Zoe,YKr),e(i6,KKr),e(Jr,ZKr),M(d6,Jr,null),b(m,jze,_),b(m,_m,_),e(_m,c6),e(c6,i6e),M(z$,i6e,null),e(_m,eZr),e(_m,d6e),e(d6e,oZr),b(m,Dze,_),b(m,Er,_),M(Q$,Er,null),e(Er,rZr),e(Er,bm),e(bm,tZr),e(bm,ere),e(ere,aZr),e(bm,nZr),e(bm,ore),e(ore,sZr),e(bm,lZr),e(Er,iZr),e(Er,W$),e(W$,dZr),e(W$,c6e),e(c6e,cZr),e(W$,mZr),e(Er,fZr),e(Er,ea),M(H$,ea,null),e(ea,gZr),e(ea,m6e),e(m6e,hZr),e(ea,uZr),e(ea,vm),e(vm,pZr),e(vm,f6e),e(f6e,_Zr),e(vm,bZr),e(vm,rre),e(rre,vZr),e(vm,FZr),e(ea,TZr),M(m6,ea,null),e(Er,MZr),e(Er,Yr),M(U$,Yr,null),e(Yr,EZr),e(Yr,g6e),e(g6e,CZr),e(Yr,wZr),e(Yr,xn),e(xn,AZr),e(xn,h6e),e(h6e,LZr),e(xn,yZr),e(xn,u6e),e(u6e,xZr),e(xn,$Zr),e(xn,p6e),e(p6e,kZr),e(xn,SZr),e(Yr,RZr),e(Yr,Xe),e(Xe,f6),e(f6,_6e),e(_6e,PZr),e(f6,BZr),e(f6,tre),e(tre,IZr),e(f6,NZr),e(Xe,qZr),e(Xe,g6),e(g6,b6e),e(b6e,jZr),e(g6,DZr),e(g6,are),e(are,GZr),e(g6,OZr),e(Xe,VZr),e(Xe,h6),e(h6,v6e),e(v6e,XZr),e(h6,zZr),e(h6,nre),e(nre,QZr),e(h6,WZr),e(Xe,HZr),e(Xe,u6),e(u6,F6e),e(F6e,UZr),e(u6,JZr),e(u6,sre),e(sre,YZr),e(u6,KZr),e(Xe,ZZr),e(Xe,p6),e(p6,T6e),e(T6e,eet),e(p6,oet),e(p6,lre),e(lre,ret),e(p6,tet),e(Xe,aet),e(Xe,_6),e(_6,M6e),e(M6e,net),e(_6,set),e(_6,ire),e(ire,iet),e(_6,det),e(Xe,cet),e(Xe,b6),e(b6,E6e),e(E6e,met),e(b6,fet),e(b6,dre),e(dre,get),e(b6,het),e(Xe,uet),e(Xe,v6),e(v6,C6e),e(C6e,pet),e(v6,_et),e(v6,cre),e(cre,bet),e(v6,vet),e(Yr,Fet),M(F6,Yr,null),b(m,Gze,_),b(m,Fm,_),e(Fm,T6),e(T6,w6e),M(J$,w6e,null),e(Fm,Tet),e(Fm,A6e),e(A6e,Met),b(m,Oze,_),b(m,Cr,_),M(Y$,Cr,null),e(Cr,Eet),e(Cr,Tm),e(Tm,Cet),e(Tm,mre),e(mre,wet),e(Tm,Aet),e(Tm,fre),e(fre,Let),e(Tm,yet),e(Cr,xet),e(Cr,K$),e(K$,$et),e(K$,L6e),e(L6e,ket),e(K$,Set),e(Cr,Ret),e(Cr,oa),M(Z$,oa,null),e(oa,Pet),e(oa,y6e),e(y6e,Bet),e(oa,Iet),e(oa,Mm),e(Mm,Net),e(Mm,x6e),e(x6e,qet),e(Mm,jet),e(Mm,gre),e(gre,Det),e(Mm,Get),e(oa,Oet),M(M6,oa,null),e(Cr,Vet),e(Cr,Kr),M(ek,Kr,null),e(Kr,Xet),e(Kr,$6e),e($6e,zet),e(Kr,Qet),e(Kr,$n),e($n,Wet),e($n,k6e),e(k6e,Het),e($n,Uet),e($n,S6e),e(S6e,Jet),e($n,Yet),e($n,R6e),e(R6e,Ket),e($n,Zet),e(Kr,eot),e(Kr,P6e),e(P6e,E6),e(E6,B6e),e(B6e,oot),e(E6,rot),e(E6,hre),e(hre,tot),e(E6,aot),e(Kr,not),M(C6,Kr,null),b(m,Vze,_),b(m,Em,_),e(Em,w6),e(w6,I6e),M(ok,I6e,null),e(Em,sot),e(Em,N6e),e(N6e,lot),b(m,Xze,_),b(m,wr,_),M(rk,wr,null),e(wr,iot),e(wr,Cm),e(Cm,dot),e(Cm,ure),e(ure,cot),e(Cm,mot),e(Cm,pre),e(pre,fot),e(Cm,got),e(wr,hot),e(wr,tk),e(tk,uot),e(tk,q6e),e(q6e,pot),e(tk,_ot),e(wr,bot),e(wr,ra),M(ak,ra,null),e(ra,vot),e(ra,j6e),e(j6e,Fot),e(ra,Tot),e(ra,wm),e(wm,Mot),e(wm,D6e),e(D6e,Eot),e(wm,Cot),e(wm,_re),e(_re,wot),e(wm,Aot),e(ra,Lot),M(A6,ra,null),e(wr,yot),e(wr,Zr),M(nk,Zr,null),e(Zr,xot),e(Zr,G6e),e(G6e,$ot),e(Zr,kot),e(Zr,kn),e(kn,Sot),e(kn,O6e),e(O6e,Rot),e(kn,Pot),e(kn,V6e),e(V6e,Bot),e(kn,Iot),e(kn,X6e),e(X6e,Not),e(kn,qot),e(Zr,jot),e(Zr,sk),e(sk,L6),e(L6,z6e),e(z6e,Dot),e(L6,Got),e(L6,bre),e(bre,Oot),e(L6,Vot),e(sk,Xot),e(sk,y6),e(y6,Q6e),e(Q6e,zot),e(y6,Qot),e(y6,vre),e(vre,Wot),e(y6,Hot),e(Zr,Uot),M(x6,Zr,null),b(m,zze,_),b(m,Am,_),e(Am,$6),e($6,W6e),M(lk,W6e,null),e(Am,Jot),e(Am,H6e),e(H6e,Yot),b(m,Qze,_),b(m,Ar,_),M(ik,Ar,null),e(Ar,Kot),e(Ar,Lm),e(Lm,Zot),e(Lm,Fre),e(Fre,ert),e(Lm,ort),e(Lm,Tre),e(Tre,rrt),e(Lm,trt),e(Ar,art),e(Ar,dk),e(dk,nrt),e(dk,U6e),e(U6e,srt),e(dk,lrt),e(Ar,irt),e(Ar,ta),M(ck,ta,null),e(ta,drt),e(ta,J6e),e(J6e,crt),e(ta,mrt),e(ta,ym),e(ym,frt),e(ym,Y6e),e(Y6e,grt),e(ym,hrt),e(ym,Mre),e(Mre,urt),e(ym,prt),e(ta,_rt),M(k6,ta,null),e(Ar,brt),e(Ar,et),M(mk,et,null),e(et,vrt),e(et,K6e),e(K6e,Frt),e(et,Trt),e(et,Sn),e(Sn,Mrt),e(Sn,Z6e),e(Z6e,Ert),e(Sn,Crt),e(Sn,e7e),e(e7e,wrt),e(Sn,Art),e(Sn,o7e),e(o7e,Lrt),e(Sn,yrt),e(et,xrt),e(et,r7e),e(r7e,S6),e(S6,t7e),e(t7e,$rt),e(S6,krt),e(S6,Ere),e(Ere,Srt),e(S6,Rrt),e(et,Prt),M(R6,et,null),Wze=!0},p(m,[_]){const fk={};_&2&&(fk.$$scope={dirty:_,ctx:m}),Nm.$set(fk);const a7e={};_&2&&(a7e.$$scope={dirty:_,ctx:m}),Jg.$set(a7e);const n7e={};_&2&&(n7e.$$scope={dirty:_,ctx:m}),Sh.$set(n7e);const s7e={};_&2&&(s7e.$$scope={dirty:_,ctx:m}),uu.$set(s7e);const gk={};_&2&&(gk.$$scope={dirty:_,ctx:m}),pu.$set(gk);const l7e={};_&2&&(l7e.$$scope={dirty:_,ctx:m}),Nu.$set(l7e);const Rn={};_&2&&(Rn.$$scope={dirty:_,ctx:m}),qu.$set(Rn);const i7e={};_&2&&(i7e.$$scope={dirty:_,ctx:m}),Gu.$set(i7e);const d7e={};_&2&&(d7e.$$scope={dirty:_,ctx:m}),z_.$set(d7e);const c7e={};_&2&&(c7e.$$scope={dirty:_,ctx:m}),W_.$set(c7e);const hk={};_&2&&(hk.$$scope={dirty:_,ctx:m}),D2.$set(hk);const m7e={};_&2&&(m7e.$$scope={dirty:_,ctx:m}),O2.$set(m7e);const uk={};_&2&&(uk.$$scope={dirty:_,ctx:m}),$b.$set(uk);const f7e={};_&2&&(f7e.$$scope={dirty:_,ctx:m}),Sb.$set(f7e);const pk={};_&2&&(pk.$$scope={dirty:_,ctx:m}),bv.$set(pk);const g7e={};_&2&&(g7e.$$scope={dirty:_,ctx:m}),Fv.$set(g7e);const h7e={};_&2&&(h7e.$$scope={dirty:_,ctx:m}),Dv.$set(h7e);const u7e={};_&2&&(u7e.$$scope={dirty:_,ctx:m}),Ov.$set(u7e);const xm={};_&2&&(xm.$$scope={dirty:_,ctx:m}),D1.$set(xm);const p7e={};_&2&&(p7e.$$scope={dirty:_,ctx:m}),O1.$set(p7e);const _7e={};_&2&&(_7e.$$scope={dirty:_,ctx:m}),FF.$set(_7e);const b7e={};_&2&&(b7e.$$scope={dirty:_,ctx:m}),MF.$set(b7e);const _k={};_&2&&(_k.$$scope={dirty:_,ctx:m}),$F.$set(_k);const v7e={};_&2&&(v7e.$$scope={dirty:_,ctx:m}),SF.$set(v7e);const F7e={};_&2&&(F7e.$$scope={dirty:_,ctx:m}),pT.$set(F7e);const T7e={};_&2&&(T7e.$$scope={dirty:_,ctx:m}),bT.$set(T7e);const at={};_&2&&(at.$$scope={dirty:_,ctx:m}),iM.$set(at);const bk={};_&2&&(bk.$$scope={dirty:_,ctx:m}),cM.$set(bk);const M7e={};_&2&&(M7e.$$scope={dirty:_,ctx:m}),gM.$set(M7e);const vk={};_&2&&(vk.$$scope={dirty:_,ctx:m}),uM.$set(vk);const E7e={};_&2&&(E7e.$$scope={dirty:_,ctx:m}),$M.$set(E7e);const nt={};_&2&&(nt.$$scope={dirty:_,ctx:m}),SM.$set(nt);const C7e={};_&2&&(C7e.$$scope={dirty:_,ctx:m}),BM.$set(C7e);const $m={};_&2&&($m.$$scope={dirty:_,ctx:m}),NM.$set($m);const w7e={};_&2&&(w7e.$$scope={dirty:_,ctx:m}),DM.$set(w7e);const A7e={};_&2&&(A7e.$$scope={dirty:_,ctx:m}),OM.$set(A7e);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),ZM.$set(L);const P6={};_&2&&(P6.$$scope={dirty:_,ctx:m}),o4.$set(P6);const L7e={};_&2&&(L7e.$$scope={dirty:_,ctx:m}),i4.$set(L7e);const y7e={};_&2&&(y7e.$$scope={dirty:_,ctx:m}),c4.$set(y7e);const B6={};_&2&&(B6.$$scope={dirty:_,ctx:m}),M4.$set(B6);const x7e={};_&2&&(x7e.$$scope={dirty:_,ctx:m}),C4.$set(x7e);const $7e={};_&2&&($7e.$$scope={dirty:_,ctx:m}),y4.$set($7e);const I6={};_&2&&(I6.$$scope={dirty:_,ctx:m}),$4.$set(I6);const k7e={};_&2&&(k7e.$$scope={dirty:_,ctx:m}),N4.$set(k7e);const S7e={};_&2&&(S7e.$$scope={dirty:_,ctx:m}),j4.$set(S7e);const N6={};_&2&&(N6.$$scope={dirty:_,ctx:m}),X4.$set(N6);const R7e={};_&2&&(R7e.$$scope={dirty:_,ctx:m}),Q4.$set(R7e);const P7e={};_&2&&(P7e.$$scope={dirty:_,ctx:m}),J4.$set(P7e);const q6={};_&2&&(q6.$$scope={dirty:_,ctx:m}),K4.$set(q6);const B7e={};_&2&&(B7e.$$scope={dirty:_,ctx:m}),oE.$set(B7e);const I7e={};_&2&&(I7e.$$scope={dirty:_,ctx:m}),tE.$set(I7e);const j6={};_&2&&(j6.$$scope={dirty:_,ctx:m}),cE.$set(j6);const N7e={};_&2&&(N7e.$$scope={dirty:_,ctx:m}),fE.$set(N7e);const q7e={};_&2&&(q7e.$$scope={dirty:_,ctx:m}),uE.$set(q7e);const D6={};_&2&&(D6.$$scope={dirty:_,ctx:m}),_E.$set(D6);const j7e={};_&2&&(j7e.$$scope={dirty:_,ctx:m}),fC.$set(j7e);const D7e={};_&2&&(D7e.$$scope={dirty:_,ctx:m}),hC.$set(D7e);const G6={};_&2&&(G6.$$scope={dirty:_,ctx:m}),qC.$set(G6);const G7e={};_&2&&(G7e.$$scope={dirty:_,ctx:m}),DC.$set(G7e);const O7e={};_&2&&(O7e.$$scope={dirty:_,ctx:m}),e3.$set(O7e);const O6={};_&2&&(O6.$$scope={dirty:_,ctx:m}),r3.$set(O6);const V7e={};_&2&&(V7e.$$scope={dirty:_,ctx:m}),d3.$set(V7e);const X7e={};_&2&&(X7e.$$scope={dirty:_,ctx:m}),m3.$set(X7e);const V6={};_&2&&(V6.$$scope={dirty:_,ctx:m}),S3.$set(V6);const z7e={};_&2&&(z7e.$$scope={dirty:_,ctx:m}),P3.$set(z7e);const Q7e={};_&2&&(Q7e.$$scope={dirty:_,ctx:m}),z3.$set(Q7e);const X6={};_&2&&(X6.$$scope={dirty:_,ctx:m}),W3.$set(X6);const W7e={};_&2&&(W7e.$$scope={dirty:_,ctx:m}),F5.$set(W7e);const H7e={};_&2&&(H7e.$$scope={dirty:_,ctx:m}),M5.$set(H7e);const z6={};_&2&&(z6.$$scope={dirty:_,ctx:m}),D5.$set(z6);const U7e={};_&2&&(U7e.$$scope={dirty:_,ctx:m}),O5.$set(U7e);const J7e={};_&2&&(J7e.$$scope={dirty:_,ctx:m}),z5.$set(J7e);const Q6={};_&2&&(Q6.$$scope={dirty:_,ctx:m}),W5.$set(Q6);const Y7e={};_&2&&(Y7e.$$scope={dirty:_,ctx:m}),U5.$set(Y7e);const K7e={};_&2&&(K7e.$$scope={dirty:_,ctx:m}),Y5.$set(K7e);const W6={};_&2&&(W6.$$scope={dirty:_,ctx:m}),b0.$set(W6);const Z7e={};_&2&&(Z7e.$$scope={dirty:_,ctx:m}),F0.$set(Z7e);const eLe={};_&2&&(eLe.$$scope={dirty:_,ctx:m}),G0.$set(eLe);const H6={};_&2&&(H6.$$scope={dirty:_,ctx:m}),V0.$set(H6);const oLe={};_&2&&(oLe.$$scope={dirty:_,ctx:m}),z0.$set(oLe);const rLe={};_&2&&(rLe.$$scope={dirty:_,ctx:m}),W0.$set(rLe);const U6={};_&2&&(U6.$$scope={dirty:_,ctx:m}),U0.$set(U6);const tLe={};_&2&&(tLe.$$scope={dirty:_,ctx:m}),Y0.$set(tLe);const aLe={};_&2&&(aLe.$$scope={dirty:_,ctx:m}),ww.$set(aLe);const J6={};_&2&&(J6.$$scope={dirty:_,ctx:m}),Lw.$set(J6);const nLe={};_&2&&(nLe.$$scope={dirty:_,ctx:m}),qw.$set(nLe);const sLe={};_&2&&(sLe.$$scope={dirty:_,ctx:m}),Dw.$set(sLe);const Y6={};_&2&&(Y6.$$scope={dirty:_,ctx:m}),eA.$set(Y6);const lLe={};_&2&&(lLe.$$scope={dirty:_,ctx:m}),rA.$set(lLe);const iLe={};_&2&&(iLe.$$scope={dirty:_,ctx:m}),gA.$set(iLe);const K6={};_&2&&(K6.$$scope={dirty:_,ctx:m}),uA.$set(K6);const dLe={};_&2&&(dLe.$$scope={dirty:_,ctx:m}),AA.$set(dLe);const cLe={};_&2&&(cLe.$$scope={dirty:_,ctx:m}),yA.$set(cLe);const Z6={};_&2&&(Z6.$$scope={dirty:_,ctx:m}),jA.$set(Z6);const mLe={};_&2&&(mLe.$$scope={dirty:_,ctx:m}),GA.$set(mLe);const fLe={};_&2&&(fLe.$$scope={dirty:_,ctx:m}),KA.$set(fLe);const e7={};_&2&&(e7.$$scope={dirty:_,ctx:m}),e6.$set(e7);const gLe={};_&2&&(gLe.$$scope={dirty:_,ctx:m}),d6.$set(gLe);const hLe={};_&2&&(hLe.$$scope={dirty:_,ctx:m}),m6.$set(hLe);const o7={};_&2&&(o7.$$scope={dirty:_,ctx:m}),F6.$set(o7);const uLe={};_&2&&(uLe.$$scope={dirty:_,ctx:m}),M6.$set(uLe);const pLe={};_&2&&(pLe.$$scope={dirty:_,ctx:m}),C6.$set(pLe);const r7={};_&2&&(r7.$$scope={dirty:_,ctx:m}),A6.$set(r7);const _Le={};_&2&&(_Le.$$scope={dirty:_,ctx:m}),x6.$set(_Le);const bLe={};_&2&&(bLe.$$scope={dirty:_,ctx:m}),k6.$set(bLe);const t7={};_&2&&(t7.$$scope={dirty:_,ctx:m}),R6.$set(t7)},i(m){Wze||(E(d.$$.fragment,m),E(Sa.$$.fragment,m),E(ry.$$.fragment,m),E(ty.$$.fragment,m),E(Nm.$$.fragment,m),E(ay.$$.fragment,m),E(ny.$$.fragment,m),E(iy.$$.fragment,m),E(Jg.$$.fragment,m),E(dy.$$.fragment,m),E(cy.$$.fragment,m),E(my.$$.fragment,m),E(hy.$$.fragment,m),E(Sh.$$.fragment,m),E(uy.$$.fragment,m),E(py.$$.fragment,m),E(_y.$$.fragment,m),E(Fy.$$.fragment,m),E(uu.$$.fragment,m),E(pu.$$.fragment,m),E(Ty.$$.fragment,m),E(My.$$.fragment,m),E(Ey.$$.fragment,m),E(Ay.$$.fragment,m),E(Nu.$$.fragment,m),E(qu.$$.fragment,m),E(Ly.$$.fragment,m),E(yy.$$.fragment,m),E(xy.$$.fragment,m),E(ky.$$.fragment,m),E(Gu.$$.fragment,m),E(Sy.$$.fragment,m),E(z_.$$.fragment,m),E(Ry.$$.fragment,m),E(Py.$$.fragment,m),E(Iy.$$.fragment,m),E(W_.$$.fragment,m),E(Ny.$$.fragment,m),E(D2.$$.fragment,m),E(qy.$$.fragment,m),E(jy.$$.fragment,m),E(Gy.$$.fragment,m),E(O2.$$.fragment,m),E(Oy.$$.fragment,m),E($b.$$.fragment,m),E(Vy.$$.fragment,m),E(Xy.$$.fragment,m),E(Qy.$$.fragment,m),E(Sb.$$.fragment,m),E(Wy.$$.fragment,m),E(bv.$$.fragment,m),E(Hy.$$.fragment,m),E(Uy.$$.fragment,m),E(Yy.$$.fragment,m),E(Fv.$$.fragment,m),E(Ky.$$.fragment,m),E(Dv.$$.fragment,m),E(Zy.$$.fragment,m),E(e8.$$.fragment,m),E(r8.$$.fragment,m),E(Ov.$$.fragment,m),E(t8.$$.fragment,m),E(D1.$$.fragment,m),E(a8.$$.fragment,m),E(n8.$$.fragment,m),E(l8.$$.fragment,m),E(O1.$$.fragment,m),E(i8.$$.fragment,m),E(FF.$$.fragment,m),E(d8.$$.fragment,m),E(c8.$$.fragment,m),E(f8.$$.fragment,m),E(MF.$$.fragment,m),E(g8.$$.fragment,m),E($F.$$.fragment,m),E(h8.$$.fragment,m),E(u8.$$.fragment,m),E(_8.$$.fragment,m),E(SF.$$.fragment,m),E(b8.$$.fragment,m),E(pT.$$.fragment,m),E(v8.$$.fragment,m),E(F8.$$.fragment,m),E(M8.$$.fragment,m),E(bT.$$.fragment,m),E(E8.$$.fragment,m),E(iM.$$.fragment,m),E(C8.$$.fragment,m),E(w8.$$.fragment,m),E(L8.$$.fragment,m),E(cM.$$.fragment,m),E(y8.$$.fragment,m),E(gM.$$.fragment,m),E(x8.$$.fragment,m),E($8.$$.fragment,m),E(S8.$$.fragment,m),E(uM.$$.fragment,m),E(R8.$$.fragment,m),E($M.$$.fragment,m),E(P8.$$.fragment,m),E(B8.$$.fragment,m),E(N8.$$.fragment,m),E(SM.$$.fragment,m),E(q8.$$.fragment,m),E(BM.$$.fragment,m),E(j8.$$.fragment,m),E(D8.$$.fragment,m),E(O8.$$.fragment,m),E(NM.$$.fragment,m),E(V8.$$.fragment,m),E(DM.$$.fragment,m),E(X8.$$.fragment,m),E(z8.$$.fragment,m),E(W8.$$.fragment,m),E(OM.$$.fragment,m),E(H8.$$.fragment,m),E(ZM.$$.fragment,m),E(U8.$$.fragment,m),E(J8.$$.fragment,m),E(K8.$$.fragment,m),E(o4.$$.fragment,m),E(Z8.$$.fragment,m),E(i4.$$.fragment,m),E(e9.$$.fragment,m),E(o9.$$.fragment,m),E(t9.$$.fragment,m),E(c4.$$.fragment,m),E(a9.$$.fragment,m),E(M4.$$.fragment,m),E(n9.$$.fragment,m),E(s9.$$.fragment,m),E(i9.$$.fragment,m),E(C4.$$.fragment,m),E(d9.$$.fragment,m),E(y4.$$.fragment,m),E(m9.$$.fragment,m),E(f9.$$.fragment,m),E(h9.$$.fragment,m),E($4.$$.fragment,m),E(u9.$$.fragment,m),E(N4.$$.fragment,m),E(p9.$$.fragment,m),E(_9.$$.fragment,m),E(v9.$$.fragment,m),E(j4.$$.fragment,m),E(F9.$$.fragment,m),E(X4.$$.fragment,m),E(T9.$$.fragment,m),E(M9.$$.fragment,m),E(C9.$$.fragment,m),E(Q4.$$.fragment,m),E(w9.$$.fragment,m),E(J4.$$.fragment,m),E(L9.$$.fragment,m),E(y9.$$.fragment,m),E($9.$$.fragment,m),E(K4.$$.fragment,m),E(k9.$$.fragment,m),E(oE.$$.fragment,m),E(S9.$$.fragment,m),E(R9.$$.fragment,m),E(B9.$$.fragment,m),E(tE.$$.fragment,m),E(I9.$$.fragment,m),E(cE.$$.fragment,m),E(N9.$$.fragment,m),E(q9.$$.fragment,m),E(D9.$$.fragment,m),E(fE.$$.fragment,m),E(G9.$$.fragment,m),E(uE.$$.fragment,m),E(O9.$$.fragment,m),E(V9.$$.fragment,m),E(z9.$$.fragment,m),E(_E.$$.fragment,m),E(Q9.$$.fragment,m),E(fC.$$.fragment,m),E(W9.$$.fragment,m),E(H9.$$.fragment,m),E(J9.$$.fragment,m),E(hC.$$.fragment,m),E(Y9.$$.fragment,m),E(qC.$$.fragment,m),E(K9.$$.fragment,m),E(Z9.$$.fragment,m),E(ox.$$.fragment,m),E(DC.$$.fragment,m),E(rx.$$.fragment,m),E(e3.$$.fragment,m),E(tx.$$.fragment,m),E(ax.$$.fragment,m),E(sx.$$.fragment,m),E(r3.$$.fragment,m),E(lx.$$.fragment,m),E(d3.$$.fragment,m),E(ix.$$.fragment,m),E(dx.$$.fragment,m),E(mx.$$.fragment,m),E(m3.$$.fragment,m),E(fx.$$.fragment,m),E(S3.$$.fragment,m),E(gx.$$.fragment,m),E(hx.$$.fragment,m),E(px.$$.fragment,m),E(P3.$$.fragment,m),E(_x.$$.fragment,m),E(z3.$$.fragment,m),E(bx.$$.fragment,m),E(vx.$$.fragment,m),E(Tx.$$.fragment,m),E(W3.$$.fragment,m),E(Mx.$$.fragment,m),E(F5.$$.fragment,m),E(Ex.$$.fragment,m),E(Cx.$$.fragment,m),E(Ax.$$.fragment,m),E(M5.$$.fragment,m),E(Lx.$$.fragment,m),E(D5.$$.fragment,m),E(yx.$$.fragment,m),E(xx.$$.fragment,m),E(kx.$$.fragment,m),E(O5.$$.fragment,m),E(Sx.$$.fragment,m),E(z5.$$.fragment,m),E(Px.$$.fragment,m),E(Bx.$$.fragment,m),E(Nx.$$.fragment,m),E(W5.$$.fragment,m),E(qx.$$.fragment,m),E(U5.$$.fragment,m),E(jx.$$.fragment,m),E(Dx.$$.fragment,m),E(Ox.$$.fragment,m),E(Y5.$$.fragment,m),E(Vx.$$.fragment,m),E(b0.$$.fragment,m),E(Xx.$$.fragment,m),E(zx.$$.fragment,m),E(Wx.$$.fragment,m),E(F0.$$.fragment,m),E(Hx.$$.fragment,m),E(G0.$$.fragment,m),E(Ux.$$.fragment,m),E(Jx.$$.fragment,m),E(Kx.$$.fragment,m),E(V0.$$.fragment,m),E(Zx.$$.fragment,m),E(z0.$$.fragment,m),E(e$.$$.fragment,m),E(o$.$$.fragment,m),E(t$.$$.fragment,m),E(W0.$$.fragment,m),E(a$.$$.fragment,m),E(U0.$$.fragment,m),E(n$.$$.fragment,m),E(s$.$$.fragment,m),E(i$.$$.fragment,m),E(Y0.$$.fragment,m),E(d$.$$.fragment,m),E(ww.$$.fragment,m),E(c$.$$.fragment,m),E(m$.$$.fragment,m),E(g$.$$.fragment,m),E(Lw.$$.fragment,m),E(h$.$$.fragment,m),E(qw.$$.fragment,m),E(u$.$$.fragment,m),E(p$.$$.fragment,m),E(b$.$$.fragment,m),E(Dw.$$.fragment,m),E(v$.$$.fragment,m),E(eA.$$.fragment,m),E(F$.$$.fragment,m),E(T$.$$.fragment,m),E(E$.$$.fragment,m),E(rA.$$.fragment,m),E(C$.$$.fragment,m),E(gA.$$.fragment,m),E(w$.$$.fragment,m),E(A$.$$.fragment,m),E(y$.$$.fragment,m),E(uA.$$.fragment,m),E(x$.$$.fragment,m),E(AA.$$.fragment,m),E($$.$$.fragment,m),E(k$.$$.fragment,m),E(R$.$$.fragment,m),E(yA.$$.fragment,m),E(P$.$$.fragment,m),E(jA.$$.fragment,m),E(B$.$$.fragment,m),E(I$.$$.fragment,m),E(q$.$$.fragment,m),E(GA.$$.fragment,m),E(j$.$$.fragment,m),E(KA.$$.fragment,m),E(D$.$$.fragment,m),E(G$.$$.fragment,m),E(V$.$$.fragment,m),E(e6.$$.fragment,m),E(X$.$$.fragment,m),E(d6.$$.fragment,m),E(z$.$$.fragment,m),E(Q$.$$.fragment,m),E(H$.$$.fragment,m),E(m6.$$.fragment,m),E(U$.$$.fragment,m),E(F6.$$.fragment,m),E(J$.$$.fragment,m),E(Y$.$$.fragment,m),E(Z$.$$.fragment,m),E(M6.$$.fragment,m),E(ek.$$.fragment,m),E(C6.$$.fragment,m),E(ok.$$.fragment,m),E(rk.$$.fragment,m),E(ak.$$.fragment,m),E(A6.$$.fragment,m),E(nk.$$.fragment,m),E(x6.$$.fragment,m),E(lk.$$.fragment,m),E(ik.$$.fragment,m),E(ck.$$.fragment,m),E(k6.$$.fragment,m),E(mk.$$.fragment,m),E(R6.$$.fragment,m),Wze=!0)},o(m){C(d.$$.fragment,m),C(Sa.$$.fragment,m),C(ry.$$.fragment,m),C(ty.$$.fragment,m),C(Nm.$$.fragment,m),C(ay.$$.fragment,m),C(ny.$$.fragment,m),C(iy.$$.fragment,m),C(Jg.$$.fragment,m),C(dy.$$.fragment,m),C(cy.$$.fragment,m),C(my.$$.fragment,m),C(hy.$$.fragment,m),C(Sh.$$.fragment,m),C(uy.$$.fragment,m),C(py.$$.fragment,m),C(_y.$$.fragment,m),C(Fy.$$.fragment,m),C(uu.$$.fragment,m),C(pu.$$.fragment,m),C(Ty.$$.fragment,m),C(My.$$.fragment,m),C(Ey.$$.fragment,m),C(Ay.$$.fragment,m),C(Nu.$$.fragment,m),C(qu.$$.fragment,m),C(Ly.$$.fragment,m),C(yy.$$.fragment,m),C(xy.$$.fragment,m),C(ky.$$.fragment,m),C(Gu.$$.fragment,m),C(Sy.$$.fragment,m),C(z_.$$.fragment,m),C(Ry.$$.fragment,m),C(Py.$$.fragment,m),C(Iy.$$.fragment,m),C(W_.$$.fragment,m),C(Ny.$$.fragment,m),C(D2.$$.fragment,m),C(qy.$$.fragment,m),C(jy.$$.fragment,m),C(Gy.$$.fragment,m),C(O2.$$.fragment,m),C(Oy.$$.fragment,m),C($b.$$.fragment,m),C(Vy.$$.fragment,m),C(Xy.$$.fragment,m),C(Qy.$$.fragment,m),C(Sb.$$.fragment,m),C(Wy.$$.fragment,m),C(bv.$$.fragment,m),C(Hy.$$.fragment,m),C(Uy.$$.fragment,m),C(Yy.$$.fragment,m),C(Fv.$$.fragment,m),C(Ky.$$.fragment,m),C(Dv.$$.fragment,m),C(Zy.$$.fragment,m),C(e8.$$.fragment,m),C(r8.$$.fragment,m),C(Ov.$$.fragment,m),C(t8.$$.fragment,m),C(D1.$$.fragment,m),C(a8.$$.fragment,m),C(n8.$$.fragment,m),C(l8.$$.fragment,m),C(O1.$$.fragment,m),C(i8.$$.fragment,m),C(FF.$$.fragment,m),C(d8.$$.fragment,m),C(c8.$$.fragment,m),C(f8.$$.fragment,m),C(MF.$$.fragment,m),C(g8.$$.fragment,m),C($F.$$.fragment,m),C(h8.$$.fragment,m),C(u8.$$.fragment,m),C(_8.$$.fragment,m),C(SF.$$.fragment,m),C(b8.$$.fragment,m),C(pT.$$.fragment,m),C(v8.$$.fragment,m),C(F8.$$.fragment,m),C(M8.$$.fragment,m),C(bT.$$.fragment,m),C(E8.$$.fragment,m),C(iM.$$.fragment,m),C(C8.$$.fragment,m),C(w8.$$.fragment,m),C(L8.$$.fragment,m),C(cM.$$.fragment,m),C(y8.$$.fragment,m),C(gM.$$.fragment,m),C(x8.$$.fragment,m),C($8.$$.fragment,m),C(S8.$$.fragment,m),C(uM.$$.fragment,m),C(R8.$$.fragment,m),C($M.$$.fragment,m),C(P8.$$.fragment,m),C(B8.$$.fragment,m),C(N8.$$.fragment,m),C(SM.$$.fragment,m),C(q8.$$.fragment,m),C(BM.$$.fragment,m),C(j8.$$.fragment,m),C(D8.$$.fragment,m),C(O8.$$.fragment,m),C(NM.$$.fragment,m),C(V8.$$.fragment,m),C(DM.$$.fragment,m),C(X8.$$.fragment,m),C(z8.$$.fragment,m),C(W8.$$.fragment,m),C(OM.$$.fragment,m),C(H8.$$.fragment,m),C(ZM.$$.fragment,m),C(U8.$$.fragment,m),C(J8.$$.fragment,m),C(K8.$$.fragment,m),C(o4.$$.fragment,m),C(Z8.$$.fragment,m),C(i4.$$.fragment,m),C(e9.$$.fragment,m),C(o9.$$.fragment,m),C(t9.$$.fragment,m),C(c4.$$.fragment,m),C(a9.$$.fragment,m),C(M4.$$.fragment,m),C(n9.$$.fragment,m),C(s9.$$.fragment,m),C(i9.$$.fragment,m),C(C4.$$.fragment,m),C(d9.$$.fragment,m),C(y4.$$.fragment,m),C(m9.$$.fragment,m),C(f9.$$.fragment,m),C(h9.$$.fragment,m),C($4.$$.fragment,m),C(u9.$$.fragment,m),C(N4.$$.fragment,m),C(p9.$$.fragment,m),C(_9.$$.fragment,m),C(v9.$$.fragment,m),C(j4.$$.fragment,m),C(F9.$$.fragment,m),C(X4.$$.fragment,m),C(T9.$$.fragment,m),C(M9.$$.fragment,m),C(C9.$$.fragment,m),C(Q4.$$.fragment,m),C(w9.$$.fragment,m),C(J4.$$.fragment,m),C(L9.$$.fragment,m),C(y9.$$.fragment,m),C($9.$$.fragment,m),C(K4.$$.fragment,m),C(k9.$$.fragment,m),C(oE.$$.fragment,m),C(S9.$$.fragment,m),C(R9.$$.fragment,m),C(B9.$$.fragment,m),C(tE.$$.fragment,m),C(I9.$$.fragment,m),C(cE.$$.fragment,m),C(N9.$$.fragment,m),C(q9.$$.fragment,m),C(D9.$$.fragment,m),C(fE.$$.fragment,m),C(G9.$$.fragment,m),C(uE.$$.fragment,m),C(O9.$$.fragment,m),C(V9.$$.fragment,m),C(z9.$$.fragment,m),C(_E.$$.fragment,m),C(Q9.$$.fragment,m),C(fC.$$.fragment,m),C(W9.$$.fragment,m),C(H9.$$.fragment,m),C(J9.$$.fragment,m),C(hC.$$.fragment,m),C(Y9.$$.fragment,m),C(qC.$$.fragment,m),C(K9.$$.fragment,m),C(Z9.$$.fragment,m),C(ox.$$.fragment,m),C(DC.$$.fragment,m),C(rx.$$.fragment,m),C(e3.$$.fragment,m),C(tx.$$.fragment,m),C(ax.$$.fragment,m),C(sx.$$.fragment,m),C(r3.$$.fragment,m),C(lx.$$.fragment,m),C(d3.$$.fragment,m),C(ix.$$.fragment,m),C(dx.$$.fragment,m),C(mx.$$.fragment,m),C(m3.$$.fragment,m),C(fx.$$.fragment,m),C(S3.$$.fragment,m),C(gx.$$.fragment,m),C(hx.$$.fragment,m),C(px.$$.fragment,m),C(P3.$$.fragment,m),C(_x.$$.fragment,m),C(z3.$$.fragment,m),C(bx.$$.fragment,m),C(vx.$$.fragment,m),C(Tx.$$.fragment,m),C(W3.$$.fragment,m),C(Mx.$$.fragment,m),C(F5.$$.fragment,m),C(Ex.$$.fragment,m),C(Cx.$$.fragment,m),C(Ax.$$.fragment,m),C(M5.$$.fragment,m),C(Lx.$$.fragment,m),C(D5.$$.fragment,m),C(yx.$$.fragment,m),C(xx.$$.fragment,m),C(kx.$$.fragment,m),C(O5.$$.fragment,m),C(Sx.$$.fragment,m),C(z5.$$.fragment,m),C(Px.$$.fragment,m),C(Bx.$$.fragment,m),C(Nx.$$.fragment,m),C(W5.$$.fragment,m),C(qx.$$.fragment,m),C(U5.$$.fragment,m),C(jx.$$.fragment,m),C(Dx.$$.fragment,m),C(Ox.$$.fragment,m),C(Y5.$$.fragment,m),C(Vx.$$.fragment,m),C(b0.$$.fragment,m),C(Xx.$$.fragment,m),C(zx.$$.fragment,m),C(Wx.$$.fragment,m),C(F0.$$.fragment,m),C(Hx.$$.fragment,m),C(G0.$$.fragment,m),C(Ux.$$.fragment,m),C(Jx.$$.fragment,m),C(Kx.$$.fragment,m),C(V0.$$.fragment,m),C(Zx.$$.fragment,m),C(z0.$$.fragment,m),C(e$.$$.fragment,m),C(o$.$$.fragment,m),C(t$.$$.fragment,m),C(W0.$$.fragment,m),C(a$.$$.fragment,m),C(U0.$$.fragment,m),C(n$.$$.fragment,m),C(s$.$$.fragment,m),C(i$.$$.fragment,m),C(Y0.$$.fragment,m),C(d$.$$.fragment,m),C(ww.$$.fragment,m),C(c$.$$.fragment,m),C(m$.$$.fragment,m),C(g$.$$.fragment,m),C(Lw.$$.fragment,m),C(h$.$$.fragment,m),C(qw.$$.fragment,m),C(u$.$$.fragment,m),C(p$.$$.fragment,m),C(b$.$$.fragment,m),C(Dw.$$.fragment,m),C(v$.$$.fragment,m),C(eA.$$.fragment,m),C(F$.$$.fragment,m),C(T$.$$.fragment,m),C(E$.$$.fragment,m),C(rA.$$.fragment,m),C(C$.$$.fragment,m),C(gA.$$.fragment,m),C(w$.$$.fragment,m),C(A$.$$.fragment,m),C(y$.$$.fragment,m),C(uA.$$.fragment,m),C(x$.$$.fragment,m),C(AA.$$.fragment,m),C($$.$$.fragment,m),C(k$.$$.fragment,m),C(R$.$$.fragment,m),C(yA.$$.fragment,m),C(P$.$$.fragment,m),C(jA.$$.fragment,m),C(B$.$$.fragment,m),C(I$.$$.fragment,m),C(q$.$$.fragment,m),C(GA.$$.fragment,m),C(j$.$$.fragment,m),C(KA.$$.fragment,m),C(D$.$$.fragment,m),C(G$.$$.fragment,m),C(V$.$$.fragment,m),C(e6.$$.fragment,m),C(X$.$$.fragment,m),C(d6.$$.fragment,m),C(z$.$$.fragment,m),C(Q$.$$.fragment,m),C(H$.$$.fragment,m),C(m6.$$.fragment,m),C(U$.$$.fragment,m),C(F6.$$.fragment,m),C(J$.$$.fragment,m),C(Y$.$$.fragment,m),C(Z$.$$.fragment,m),C(M6.$$.fragment,m),C(ek.$$.fragment,m),C(C6.$$.fragment,m),C(ok.$$.fragment,m),C(rk.$$.fragment,m),C(ak.$$.fragment,m),C(A6.$$.fragment,m),C(nk.$$.fragment,m),C(x6.$$.fragment,m),C(lk.$$.fragment,m),C(ik.$$.fragment,m),C(ck.$$.fragment,m),C(k6.$$.fragment,m),C(mk.$$.fragment,m),C(R6.$$.fragment,m),Wze=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(Sm),m&&t(st),m&&t(Oe),m&&t(Qe),m&&t(Pm),w(Sa,m),m&&t(We),m&&t(Ae),m&&t(Co),m&&t(Ra),m&&t(OVe),m&&t(Ri),w(ry),m&&t(VVe),m&&t(qn),m&&t(XVe),w(ty,m),m&&t(zVe),m&&t(NS),m&&t(QVe),w(Nm,m),m&&t(WVe),m&&t(Pi),w(ay),m&&t(HVe),m&&t(wo),w(ny),w(iy),w(Jg),w(dy),m&&t(UVe),m&&t(Ii),w(cy),m&&t(JVe),m&&t(Ao),w(my),w(hy),w(Sh),w(uy),m&&t(YVe),m&&t(Ni),w(py),m&&t(KVe),m&&t(Lo),w(_y),w(Fy),w(uu),w(pu),w(Ty),m&&t(ZVe),m&&t(qi),w(My),m&&t(eXe),m&&t(yo),w(Ey),w(Ay),w(Nu),w(qu),w(Ly),m&&t(oXe),m&&t(Di),w(yy),m&&t(rXe),m&&t(xo),w(xy),w(ky),w(Gu),w(Sy),w(z_),m&&t(tXe),m&&t(Vi),w(Ry),m&&t(aXe),m&&t($o),w(Py),w(Iy),w(W_),w(Ny),w(D2),m&&t(nXe),m&&t(Qi),w(qy),m&&t(sXe),m&&t(ko),w(jy),w(Gy),w(O2),w(Oy),w($b),m&&t(lXe),m&&t(Ui),w(Vy),m&&t(iXe),m&&t(So),w(Xy),w(Qy),w(Sb),w(Wy),w(bv),m&&t(dXe),m&&t(Ki),w(Hy),m&&t(cXe),m&&t(Ro),w(Uy),w(Yy),w(Fv),w(Ky),w(Dv),m&&t(mXe),m&&t(od),w(Zy),m&&t(fXe),m&&t(Po),w(e8),w(r8),w(Ov),w(t8),w(D1),m&&t(gXe),m&&t(ad),w(a8),m&&t(hXe),m&&t(Bo),w(n8),w(l8),w(O1),w(i8),w(FF),m&&t(uXe),m&&t(ld),w(d8),m&&t(pXe),m&&t(Io),w(c8),w(f8),w(MF),w(g8),w($F),m&&t(_Xe),m&&t(cd),w(h8),m&&t(bXe),m&&t(qo),w(u8),w(_8),w(SF),w(b8),w(pT),m&&t(vXe),m&&t(gd),w(v8),m&&t(FXe),m&&t(jo),w(F8),w(M8),w(bT),w(E8),w(iM),m&&t(TXe),m&&t(pd),w(C8),m&&t(MXe),m&&t(Do),w(w8),w(L8),w(cM),w(y8),w(gM),m&&t(EXe),m&&t(vd),w(x8),m&&t(CXe),m&&t(Go),w($8),w(S8),w(uM),w(R8),w($M),m&&t(wXe),m&&t(Md),w(P8),m&&t(AXe),m&&t(Oo),w(B8),w(N8),w(SM),w(q8),w(BM),m&&t(LXe),m&&t(wd),w(j8),m&&t(yXe),m&&t(Vo),w(D8),w(O8),w(NM),w(V8),w(DM),m&&t(xXe),m&&t(yd),w(X8),m&&t($Xe),m&&t(Xo),w(z8),w(W8),w(OM),w(H8),w(ZM),m&&t(kXe),m&&t(kd),w(U8),m&&t(SXe),m&&t(zo),w(J8),w(K8),w(o4),w(Z8),w(i4),m&&t(RXe),m&&t(Pd),w(e9),m&&t(PXe),m&&t(Qo),w(o9),w(t9),w(c4),w(a9),w(M4),m&&t(BXe),m&&t(Nd),w(n9),m&&t(IXe),m&&t(Wo),w(s9),w(i9),w(C4),w(d9),w(y4),m&&t(NXe),m&&t(Dd),w(m9),m&&t(qXe),m&&t(Ho),w(f9),w(h9),w($4),w(u9),w(N4),m&&t(jXe),m&&t(Vd),w(p9),m&&t(DXe),m&&t(Uo),w(_9),w(v9),w(j4),w(F9),w(X4),m&&t(GXe),m&&t(Wd),w(T9),m&&t(OXe),m&&t(Jo),w(M9),w(C9),w(Q4),w(w9),w(J4),m&&t(VXe),m&&t(Jd),w(L9),m&&t(XXe),m&&t(Yo),w(y9),w($9),w(K4),w(k9),w(oE),m&&t(zXe),m&&t(Zd),w(S9),m&&t(QXe),m&&t(Ko),w(R9),w(B9),w(tE),w(I9),w(cE),m&&t(WXe),m&&t(rc),w(N9),m&&t(HXe),m&&t(Zo),w(q9),w(D9),w(fE),w(G9),w(uE),m&&t(UXe),m&&t(nc),w(O9),m&&t(JXe),m&&t(er),w(V9),w(z9),w(_E),w(Q9),w(fC),m&&t(YXe),m&&t(ic),w(W9),m&&t(KXe),m&&t(or),w(H9),w(J9),w(hC),w(Y9),w(qC),m&&t(ZXe),m&&t(mc),w(K9),m&&t(eze),m&&t(rr),w(Z9),w(ox),w(DC),w(rx),w(e3),m&&t(oze),m&&t(hc),w(tx),m&&t(rze),m&&t(tr),w(ax),w(sx),w(r3),w(lx),w(d3),m&&t(tze),m&&t(_c),w(ix),m&&t(aze),m&&t(nr),w(dx),w(mx),w(m3),w(fx),w(S3),m&&t(nze),m&&t(Fc),w(gx),m&&t(sze),m&&t(sr),w(hx),w(px),w(P3),w(_x),w(z3),m&&t(lze),m&&t(Ec),w(bx),m&&t(ize),m&&t(lr),w(vx),w(Tx),w(W3),w(Mx),w(F5),m&&t(dze),m&&t(Ac),w(Ex),m&&t(cze),m&&t(ir),w(Cx),w(Ax),w(M5),w(Lx),w(D5),m&&t(mze),m&&t(xc),w(yx),m&&t(fze),m&&t(dr),w(xx),w(kx),w(O5),w(Sx),w(z5),m&&t(gze),m&&t(Sc),w(Px),m&&t(hze),m&&t(cr),w(Bx),w(Nx),w(W5),w(qx),w(U5),m&&t(uze),m&&t(Bc),w(jx),m&&t(pze),m&&t(mr),w(Dx),w(Ox),w(Y5),w(Vx),w(b0),m&&t(_ze),m&&t(qc),w(Xx),m&&t(bze),m&&t(fr),w(zx),w(Wx),w(F0),w(Hx),w(G0),m&&t(vze),m&&t(Gc),w(Ux),m&&t(Fze),m&&t(gr),w(Jx),w(Kx),w(V0),w(Zx),w(z0),m&&t(Tze),m&&t(Xc),w(e$),m&&t(Mze),m&&t(hr),w(o$),w(t$),w(W0),w(a$),w(U0),m&&t(Eze),m&&t(Wc),w(n$),m&&t(Cze),m&&t(ur),w(s$),w(i$),w(Y0),w(d$),w(ww),m&&t(wze),m&&t(Jc),w(c$),m&&t(Aze),m&&t(pr),w(m$),w(g$),w(Lw),w(h$),w(qw),m&&t(Lze),m&&t(Zc),w(u$),m&&t(yze),m&&t(_r),w(p$),w(b$),w(Dw),w(v$),w(eA),m&&t(xze),m&&t(rm),w(F$),m&&t($ze),m&&t(br),w(T$),w(E$),w(rA),w(C$),w(gA),m&&t(kze),m&&t(nm),w(w$),m&&t(Sze),m&&t(vr),w(A$),w(y$),w(uA),w(x$),w(AA),m&&t(Rze),m&&t(im),w($$),m&&t(Pze),m&&t(Fr),w(k$),w(R$),w(yA),w(P$),w(jA),m&&t(Bze),m&&t(mm),w(B$),m&&t(Ize),m&&t(Tr),w(I$),w(q$),w(GA),w(j$),w(KA),m&&t(Nze),m&&t(hm),w(D$),m&&t(qze),m&&t(Mr),w(G$),w(V$),w(e6),w(X$),w(d6),m&&t(jze),m&&t(_m),w(z$),m&&t(Dze),m&&t(Er),w(Q$),w(H$),w(m6),w(U$),w(F6),m&&t(Gze),m&&t(Fm),w(J$),m&&t(Oze),m&&t(Cr),w(Y$),w(Z$),w(M6),w(ek),w(C6),m&&t(Vze),m&&t(Em),w(ok),m&&t(Xze),m&&t(wr),w(rk),w(ak),w(A6),w(nk),w(x6),m&&t(zze),m&&t(Am),w(lk),m&&t(Qze),m&&t(Ar),w(ik),w(ck),w(k6),w(mk),w(R6)}}}const dHt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function cHt($){return iQt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class _Ht extends aQt{constructor(g){super();nQt(this,g,cHt,iHt,sQt,{})}}export{_Ht as default,dHt as metadata};
