import{S as KUt,i as ZUt,s as eJt,e as a,k as l,w as F,t as o,M as oJt,c as n,d as t,m as i,a as s,x as T,h as r,b as d,G as e,g as b,y as M,q as E,o as C,B as w,v as rJt,L as q}from"../../chunks/vendor-hf-doc-builder.js";import{T as Xnt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as N}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function tJt($){let g,v,u,f,p,c,h,wo,$i,Bm,lt,ki,Si,_y,Im,Oe,Qe,Ri,Bn,by,In,Nn,vy,Pi,qn,Fy,Bi,Nm,Sa;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),c=a("code"),h=o("PretrainedConfig"),wo=o(`, make sure its
`),$i=a("code"),Bm=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),ki=a("code"),Si=o('"new-model"'),_y=o(")."),Im=l(),Oe=a("p"),Qe=o("Likewise, if your "),Ri=a("code"),Bn=o("NewModel"),by=o(" is a subclass of "),In=a("a"),Nn=o("PreTrainedModel"),vy=o(`, make sure its
`),Pi=a("code"),qn=o("config_class"),Fy=o(` attribute is set to the same class you use when registering the model (here
`),Bi=a("code"),Nm=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var eR=s(u);f=r(eR,"NewModelConfig"),eR.forEach(t),p=r(Ae," is a subclass of "),c=n(Ae,"CODE",{});var Ii=s(c);h=r(Ii,"PretrainedConfig"),Ii.forEach(t),wo=r(Ae,`, make sure its
`),$i=n(Ae,"CODE",{});var oR=s($i);Bm=r(oR,"model_type"),oR.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),ki=n(Ae,"CODE",{});var rR=s(ki);Si=r(rR,'"new-model"'),rR.forEach(t),_y=r(Ae,")."),Ae.forEach(t),Im=i(He),Oe=n(He,"P",{});var Ao=s(Oe);Qe=r(Ao,"Likewise, if your "),Ri=n(Ao,"CODE",{});var Ra=s(Ri);Bn=r(Ra,"NewModel"),Ra.forEach(t),by=r(Ao," is a subclass of "),In=n(Ao,"A",{href:!0});var tR=s(In);Nn=r(tR,"PreTrainedModel"),tR.forEach(t),vy=r(Ao,`, make sure its
`),Pi=n(Ao,"CODE",{});var qm=s(Pi);qn=r(qm,"config_class"),qm.forEach(t),Fy=r(Ao,` attribute is set to the same class you use when registering the model (here
`),Bi=n(Ao,"CODE",{});var aR=s(Bi);Nm=r(aR,"NewModelConfig"),aR.forEach(t),Sa=r(Ao,")."),Ao.forEach(t),this.h()},h(){d(In,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,c),e(c,h),e(g,wo),e(g,$i),e($i,Bm),e(g,lt),e(g,ki),e(ki,Si),e(g,_y),b(He,Im,Ae),b(He,Oe,Ae),e(Oe,Qe),e(Oe,Ri),e(Ri,Bn),e(Oe,by),e(Oe,In),e(In,Nn),e(Oe,vy),e(Oe,Pi),e(Pi,qn),e(Oe,Fy),e(Oe,Bi),e(Bi,Nm),e(Oe,Sa)},d(He){He&&t(g),He&&t(Im),He&&t(Oe)}}}function aJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function nJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function sJt($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var wo=s(u);f=r(wo,"use_auth_token=True"),wo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(c,h){b(c,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(c){c&&t(g)}}}function lJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function iJt($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var wo=s(u);f=r(wo,"use_auth_token=True"),wo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(c,h){b(c,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(c){c&&t(g)}}}function dJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function cJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function mJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function fJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function gJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function hJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function uJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function pJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function _Jt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function bJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function vJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function FJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function TJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function MJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function EJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function CJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function wJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function AJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function LJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function yJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function xJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function $Jt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function kJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function SJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function RJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function PJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function BJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function IJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function NJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function qJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function jJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function DJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function GJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function OJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function VJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function XJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function zJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function WJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function QJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function HJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function UJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function JJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function YJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function KJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function ZJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function eYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function oYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function rYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function tYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function aYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function nYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function sYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function lYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function iYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function dYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function cYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function mYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function fYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function gYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function hYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function uYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function pYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function _Yt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function bYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function vYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function FYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function TYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function MYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function EYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function CYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function wYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function AYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function LYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function yYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function xYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function $Yt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function kYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function SYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function RYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function PYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function BYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function IYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function NYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function qYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function jYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function DYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function GYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function OYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function VYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function XYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function zYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function WYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function QYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function HYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function UYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function JYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function YYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function KYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function ZYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function eKt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function oKt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function rKt($){let g,v,u,f,p,c,h,wo,$i,Bm,lt,ki,Si,_y,Im,Oe,Qe,Ri,Bn,by,In,Nn,vy,Pi,qn,Fy,Bi,Nm,Sa,He,Ae,eR,Ii,oR,rR,Ao,Ra,tR,qm,aR,CUe,dze,Ni,jm,lne,Ty,wUe,ine,AUe,cze,jn,LUe,dne,yUe,xUe,cne,$Ue,kUe,mze,My,fze,nR,SUe,gze,Dm,hze,qi,Gm,mne,Ey,RUe,fne,PUe,uze,Lo,Cy,BUe,wy,IUe,sR,NUe,qUe,jUe,Ay,DUe,gne,GUe,OUe,VUe,yr,Ly,XUe,hne,zUe,WUe,ji,QUe,une,HUe,UUe,pne,JUe,YUe,KUe,A,Om,_ne,ZUe,eJe,lR,oJe,rJe,tJe,Vm,bne,aJe,nJe,iR,sJe,lJe,iJe,Xm,vne,dJe,cJe,dR,mJe,fJe,gJe,zm,Fne,hJe,uJe,cR,pJe,_Je,bJe,Wm,Tne,vJe,FJe,mR,TJe,MJe,EJe,Qm,Mne,CJe,wJe,fR,AJe,LJe,yJe,Hm,Ene,xJe,$Je,gR,kJe,SJe,RJe,Um,Cne,PJe,BJe,hR,IJe,NJe,qJe,Jm,wne,jJe,DJe,uR,GJe,OJe,VJe,Ym,Ane,XJe,zJe,pR,WJe,QJe,HJe,Km,Lne,UJe,JJe,_R,YJe,KJe,ZJe,Zm,yne,eYe,oYe,bR,rYe,tYe,aYe,ef,xne,nYe,sYe,vR,lYe,iYe,dYe,of,$ne,cYe,mYe,FR,fYe,gYe,hYe,rf,kne,uYe,pYe,TR,_Ye,bYe,vYe,tf,Sne,FYe,TYe,MR,MYe,EYe,CYe,af,Rne,wYe,AYe,ER,LYe,yYe,xYe,nf,Pne,$Ye,kYe,CR,SYe,RYe,PYe,sf,Bne,BYe,IYe,wR,NYe,qYe,jYe,lf,Ine,DYe,GYe,AR,OYe,VYe,XYe,df,Nne,zYe,WYe,LR,QYe,HYe,UYe,cf,qne,JYe,YYe,yR,KYe,ZYe,eKe,mf,jne,oKe,rKe,xR,tKe,aKe,nKe,ff,Dne,sKe,lKe,$R,iKe,dKe,cKe,gf,Gne,mKe,fKe,kR,gKe,hKe,uKe,hf,One,pKe,_Ke,SR,bKe,vKe,FKe,uf,Vne,TKe,MKe,RR,EKe,CKe,wKe,pf,Xne,AKe,LKe,PR,yKe,xKe,$Ke,_f,zne,kKe,SKe,BR,RKe,PKe,BKe,bf,Wne,IKe,NKe,IR,qKe,jKe,DKe,vf,Qne,GKe,OKe,NR,VKe,XKe,zKe,Ff,Hne,WKe,QKe,qR,HKe,UKe,JKe,Tf,Une,YKe,KKe,jR,ZKe,eZe,oZe,Mf,Jne,rZe,tZe,DR,aZe,nZe,sZe,Ef,Yne,lZe,iZe,GR,dZe,cZe,mZe,Cf,Kne,fZe,gZe,OR,hZe,uZe,pZe,wf,Zne,_Ze,bZe,VR,vZe,FZe,TZe,Af,ese,MZe,EZe,XR,CZe,wZe,AZe,Lf,ose,LZe,yZe,zR,xZe,$Ze,kZe,yf,rse,SZe,RZe,WR,PZe,BZe,IZe,xf,tse,NZe,qZe,QR,jZe,DZe,GZe,$f,ase,OZe,VZe,HR,XZe,zZe,WZe,kf,nse,QZe,HZe,UR,UZe,JZe,YZe,Sf,sse,KZe,ZZe,JR,eeo,oeo,reo,Rf,lse,teo,aeo,YR,neo,seo,leo,Pf,ise,ieo,deo,KR,ceo,meo,feo,Bf,dse,geo,heo,ZR,ueo,peo,_eo,If,cse,beo,veo,eP,Feo,Teo,Meo,Nf,mse,Eeo,Ceo,oP,weo,Aeo,Leo,qf,fse,yeo,xeo,rP,$eo,keo,Seo,jf,gse,Reo,Peo,tP,Beo,Ieo,Neo,Df,hse,qeo,jeo,aP,Deo,Geo,Oeo,Gf,use,Veo,Xeo,nP,zeo,Weo,Qeo,Of,pse,Heo,Ueo,sP,Jeo,Yeo,Keo,Vf,_se,Zeo,eoo,lP,ooo,roo,too,Xf,bse,aoo,noo,iP,soo,loo,ioo,zf,vse,doo,coo,dP,moo,foo,goo,Wf,Fse,hoo,uoo,cP,poo,_oo,boo,Qf,Tse,voo,Foo,mP,Too,Moo,Eoo,Hf,Mse,Coo,woo,fP,Aoo,Loo,yoo,Uf,Ese,xoo,$oo,gP,koo,Soo,Roo,Jf,Cse,Poo,Boo,hP,Ioo,Noo,qoo,Yf,wse,joo,Doo,uP,Goo,Ooo,Voo,Kf,Ase,Xoo,zoo,pP,Woo,Qoo,Hoo,Zf,Lse,Uoo,Joo,_P,Yoo,Koo,Zoo,eg,yse,ero,oro,bP,rro,tro,aro,og,xse,nro,sro,vP,lro,iro,dro,rg,$se,cro,mro,FP,fro,gro,hro,tg,kse,uro,pro,TP,_ro,bro,vro,ag,Sse,Fro,Tro,MP,Mro,Ero,Cro,ng,Rse,wro,Aro,EP,Lro,yro,xro,sg,Pse,$ro,kro,CP,Sro,Rro,Pro,lg,Bse,Bro,Iro,wP,Nro,qro,jro,ig,Ise,Dro,Gro,AP,Oro,Vro,Xro,dg,Nse,zro,Wro,LP,Qro,Hro,Uro,cg,qse,Jro,Yro,yP,Kro,Zro,eto,mg,jse,oto,rto,xP,tto,ato,nto,fg,Dse,sto,lto,$P,ito,dto,cto,gg,Gse,mto,fto,kP,gto,hto,uto,hg,Ose,pto,_to,SP,bto,vto,Fto,ug,Vse,Tto,Mto,RP,Eto,Cto,wto,pg,Xse,Ato,Lto,PP,yto,xto,$to,_g,zse,kto,Sto,BP,Rto,Pto,Bto,bg,Wse,Ito,Nto,IP,qto,jto,Dto,vg,Qse,Gto,Oto,NP,Vto,Xto,zto,Fg,Hse,Wto,Qto,qP,Hto,Uto,Jto,Tg,Use,Yto,Kto,jP,Zto,eao,oao,Mg,Jse,rao,tao,DP,aao,nao,sao,Eg,Yse,lao,iao,GP,dao,cao,mao,Cg,Kse,fao,gao,OP,hao,uao,pao,wg,Zse,_ao,bao,VP,vao,Fao,Tao,Ag,ele,Mao,Eao,XP,Cao,wao,Aao,Lg,ole,Lao,yao,zP,xao,$ao,kao,yg,rle,Sao,Rao,WP,Pao,Bao,Iao,xg,tle,Nao,qao,QP,jao,Dao,Gao,$g,ale,Oao,Vao,HP,Xao,zao,Wao,kg,nle,Qao,Hao,UP,Uao,Jao,Yao,Sg,sle,Kao,Zao,JP,eno,ono,rno,Rg,lle,tno,ano,YP,nno,sno,lno,Pg,ile,ino,dno,KP,cno,mno,fno,Bg,dle,gno,hno,ZP,uno,pno,_no,Ig,cle,bno,vno,eB,Fno,Tno,Mno,Ng,mle,Eno,Cno,oB,wno,Ano,Lno,qg,fle,yno,xno,rB,$no,kno,Sno,jg,gle,Rno,Pno,tB,Bno,Ino,Nno,Dg,hle,qno,jno,aB,Dno,Gno,Ono,Gg,ule,Vno,Xno,nB,zno,Wno,Qno,Og,ple,Hno,Uno,sB,Jno,Yno,Kno,Vg,_le,Zno,eso,lB,oso,rso,tso,Xg,ble,aso,nso,iB,sso,lso,iso,zg,vle,dso,cso,dB,mso,fso,gso,Wg,Fle,hso,uso,cB,pso,_so,bso,Qg,Tle,vso,Fso,mB,Tso,Mso,Eso,Hg,Mle,Cso,wso,fB,Aso,Lso,yso,Ug,Ele,xso,$so,gB,kso,Sso,Rso,Jg,Cle,Pso,Bso,hB,Iso,Nso,qso,Yg,wle,jso,Dso,uB,Gso,Oso,Vso,Kg,Ale,Xso,zso,pB,Wso,Qso,Hso,Zg,Lle,Uso,Jso,_B,Yso,Kso,Zso,eh,yle,elo,olo,bB,rlo,tlo,alo,oh,nlo,rh,yy,slo,xle,llo,pze,Di,th,$le,xy,ilo,kle,dlo,_ze,yo,$y,clo,ky,mlo,vB,flo,glo,hlo,Sy,ulo,Sle,plo,_lo,blo,xr,Ry,vlo,Rle,Flo,Tlo,Pa,Mlo,Ple,Elo,Clo,Ble,wlo,Alo,Ile,Llo,ylo,xlo,k,Dn,Nle,$lo,klo,FB,Slo,Rlo,TB,Plo,Blo,Ilo,Gn,qle,Nlo,qlo,MB,jlo,Dlo,EB,Glo,Olo,Vlo,On,jle,Xlo,zlo,CB,Wlo,Qlo,wB,Hlo,Ulo,Jlo,ah,Dle,Ylo,Klo,AB,Zlo,eio,oio,Vn,Gle,rio,tio,LB,aio,nio,yB,sio,lio,iio,nh,Ole,dio,cio,xB,mio,fio,gio,sh,Vle,hio,uio,$B,pio,_io,bio,lh,Xle,vio,Fio,kB,Tio,Mio,Eio,Xn,zle,Cio,wio,SB,Aio,Lio,RB,yio,xio,$io,zn,Wle,kio,Sio,PB,Rio,Pio,BB,Bio,Iio,Nio,Wn,Qle,qio,jio,IB,Dio,Gio,NB,Oio,Vio,Xio,ih,Hle,zio,Wio,qB,Qio,Hio,Uio,dh,Ule,Jio,Yio,jB,Kio,Zio,edo,ch,Jle,odo,rdo,DB,tdo,ado,ndo,Qn,Yle,sdo,ldo,GB,ido,ddo,OB,cdo,mdo,fdo,mh,Kle,gdo,hdo,VB,udo,pdo,_do,Hn,Zle,bdo,vdo,XB,Fdo,Tdo,zB,Mdo,Edo,Cdo,Un,eie,wdo,Ado,WB,Ldo,ydo,QB,xdo,$do,kdo,Jn,oie,Sdo,Rdo,HB,Pdo,Bdo,UB,Ido,Ndo,qdo,Yn,rie,jdo,Ddo,JB,Gdo,Odo,YB,Vdo,Xdo,zdo,fh,tie,Wdo,Qdo,KB,Hdo,Udo,Jdo,Kn,aie,Ydo,Kdo,ZB,Zdo,eco,eI,oco,rco,tco,Zn,nie,aco,nco,oI,sco,lco,rI,ico,dco,cco,es,sie,mco,fco,tI,gco,hco,aI,uco,pco,_co,os,lie,bco,vco,nI,Fco,Tco,sI,Mco,Eco,Cco,rs,iie,wco,Aco,lI,Lco,yco,iI,xco,$co,kco,ts,die,Sco,Rco,dI,Pco,Bco,cI,Ico,Nco,qco,gh,cie,jco,Dco,mI,Gco,Oco,Vco,as,mie,Xco,zco,fI,Wco,Qco,gI,Hco,Uco,Jco,hh,fie,Yco,Kco,hI,Zco,emo,omo,ns,gie,rmo,tmo,uI,amo,nmo,pI,smo,lmo,imo,ss,hie,dmo,cmo,_I,mmo,fmo,bI,gmo,hmo,umo,ls,uie,pmo,_mo,vI,bmo,vmo,FI,Fmo,Tmo,Mmo,uh,pie,Emo,Cmo,TI,wmo,Amo,Lmo,is,_ie,ymo,xmo,MI,$mo,kmo,EI,Smo,Rmo,Pmo,ds,bie,Bmo,Imo,CI,Nmo,qmo,wI,jmo,Dmo,Gmo,cs,vie,Omo,Vmo,AI,Xmo,zmo,LI,Wmo,Qmo,Hmo,ph,Fie,Umo,Jmo,yI,Ymo,Kmo,Zmo,ms,Tie,efo,ofo,xI,rfo,tfo,$I,afo,nfo,sfo,fs,Mie,lfo,ifo,kI,dfo,cfo,SI,mfo,ffo,gfo,gs,Eie,hfo,ufo,RI,pfo,_fo,PI,bfo,vfo,Ffo,hs,Cie,Tfo,Mfo,BI,Efo,Cfo,II,wfo,Afo,Lfo,us,wie,yfo,xfo,NI,$fo,kfo,qI,Sfo,Rfo,Pfo,ps,Aie,Bfo,Ifo,jI,Nfo,qfo,DI,jfo,Dfo,Gfo,_s,Lie,Ofo,Vfo,GI,Xfo,zfo,OI,Wfo,Qfo,Hfo,bs,yie,Ufo,Jfo,VI,Yfo,Kfo,XI,Zfo,ego,ogo,_h,xie,rgo,tgo,zI,ago,ngo,sgo,vs,$ie,lgo,igo,WI,dgo,cgo,QI,mgo,fgo,ggo,bh,kie,hgo,ugo,HI,pgo,_go,bgo,vh,Sie,vgo,Fgo,UI,Tgo,Mgo,Ego,Fs,Rie,Cgo,wgo,JI,Ago,Lgo,YI,ygo,xgo,$go,Ts,Pie,kgo,Sgo,KI,Rgo,Pgo,ZI,Bgo,Igo,Ngo,Ms,Bie,qgo,jgo,eN,Dgo,Ggo,oN,Ogo,Vgo,Xgo,Fh,Iie,zgo,Wgo,rN,Qgo,Hgo,Ugo,Es,Nie,Jgo,Ygo,tN,Kgo,Zgo,aN,eho,oho,rho,Cs,qie,tho,aho,nN,nho,sho,sN,lho,iho,dho,ws,jie,cho,mho,lN,fho,gho,iN,hho,uho,pho,As,Die,_ho,bho,dN,vho,Fho,cN,Tho,Mho,Eho,Ls,Gie,Cho,who,mN,Aho,Lho,fN,yho,xho,$ho,ys,Oie,kho,Sho,gN,Rho,Pho,hN,Bho,Iho,Nho,xs,Vie,qho,jho,uN,Dho,Gho,pN,Oho,Vho,Xho,$s,Xie,zho,Who,_N,Qho,Hho,bN,Uho,Jho,Yho,Th,zie,Kho,Zho,vN,euo,ouo,ruo,ks,Wie,tuo,auo,FN,nuo,suo,TN,luo,iuo,duo,Ss,Qie,cuo,muo,MN,fuo,guo,EN,huo,uuo,puo,Mh,Hie,_uo,buo,CN,vuo,Fuo,Tuo,Eh,Uie,Muo,Euo,wN,Cuo,wuo,Auo,Ch,Jie,Luo,yuo,AN,xuo,$uo,kuo,wh,Yie,Suo,Ruo,LN,Puo,Buo,Iuo,Rs,Kie,Nuo,quo,yN,juo,Duo,xN,Guo,Ouo,Vuo,Ah,Zie,Xuo,zuo,$N,Wuo,Quo,Huo,Ps,ede,Uuo,Juo,kN,Yuo,Kuo,SN,Zuo,epo,opo,Bs,ode,rpo,tpo,RN,apo,npo,PN,spo,lpo,ipo,Is,rde,dpo,cpo,BN,mpo,fpo,IN,gpo,hpo,upo,Ns,tde,ppo,_po,NN,bpo,vpo,qN,Fpo,Tpo,Mpo,qs,ade,Epo,Cpo,jN,wpo,Apo,DN,Lpo,ypo,xpo,js,nde,$po,kpo,GN,Spo,Rpo,ON,Ppo,Bpo,Ipo,Lh,sde,Npo,qpo,VN,jpo,Dpo,Gpo,yh,lde,Opo,Vpo,XN,Xpo,zpo,Wpo,Ds,ide,Qpo,Hpo,zN,Upo,Jpo,WN,Ypo,Kpo,Zpo,Gs,dde,e_o,o_o,QN,r_o,t_o,HN,a_o,n_o,s_o,Os,cde,l_o,i_o,UN,d_o,c_o,JN,m_o,f_o,g_o,xh,mde,h_o,u_o,YN,p_o,__o,b_o,$h,fde,v_o,F_o,KN,T_o,M_o,E_o,kh,gde,C_o,w_o,ZN,A_o,L_o,y_o,Vs,hde,x_o,$_o,eq,k_o,S_o,oq,R_o,P_o,B_o,Xs,ude,I_o,N_o,rq,q_o,j_o,tq,D_o,G_o,O_o,Sh,pde,V_o,X_o,aq,z_o,W_o,Q_o,Rh,_de,H_o,U_o,nq,J_o,Y_o,K_o,Ph,bde,Z_o,e2o,sq,o2o,r2o,t2o,zs,vde,a2o,n2o,lq,s2o,l2o,iq,i2o,d2o,c2o,Bh,Fde,m2o,f2o,dq,g2o,h2o,u2o,Ih,Tde,p2o,_2o,cq,b2o,v2o,F2o,Ws,Mde,T2o,M2o,mq,E2o,C2o,fq,w2o,A2o,L2o,Qs,Ede,y2o,x2o,gq,$2o,k2o,hq,S2o,R2o,P2o,Hs,Cde,B2o,I2o,uq,N2o,q2o,pq,j2o,D2o,G2o,Us,wde,O2o,V2o,_q,X2o,z2o,bq,W2o,Q2o,H2o,Nh,U2o,qh,Py,J2o,Ade,Y2o,bze,Gi,jh,Lde,By,K2o,yde,Z2o,vze,xo,Iy,ebo,Ny,obo,vq,rbo,tbo,abo,qy,nbo,xde,sbo,lbo,ibo,Ue,jy,dbo,$de,cbo,mbo,Ba,fbo,kde,gbo,hbo,Sde,ubo,pbo,Rde,_bo,bbo,vbo,U,Dh,Pde,Fbo,Tbo,Fq,Mbo,Ebo,Cbo,Gh,Bde,wbo,Abo,Tq,Lbo,ybo,xbo,Oh,Ide,$bo,kbo,Mq,Sbo,Rbo,Pbo,Vh,Nde,Bbo,Ibo,Eq,Nbo,qbo,jbo,Xh,qde,Dbo,Gbo,Cq,Obo,Vbo,Xbo,zh,jde,zbo,Wbo,wq,Qbo,Hbo,Ubo,Wh,Dde,Jbo,Ybo,Aq,Kbo,Zbo,evo,Qh,Gde,ovo,rvo,Lq,tvo,avo,nvo,Hh,Ode,svo,lvo,yq,ivo,dvo,cvo,Uh,Vde,mvo,fvo,xq,gvo,hvo,uvo,Jh,Xde,pvo,_vo,$q,bvo,vvo,Fvo,Yh,zde,Tvo,Mvo,kq,Evo,Cvo,wvo,Kh,Wde,Avo,Lvo,Sq,yvo,xvo,$vo,Zh,Qde,kvo,Svo,Rq,Rvo,Pvo,Bvo,eu,Hde,Ivo,Nvo,Pq,qvo,jvo,Dvo,ou,Ude,Gvo,Ovo,Bq,Vvo,Xvo,zvo,ru,Jde,Wvo,Qvo,Iq,Hvo,Uvo,Jvo,tu,Yde,Yvo,Kvo,Nq,Zvo,e1o,o1o,au,Kde,r1o,t1o,qq,a1o,n1o,s1o,nu,Zde,l1o,i1o,jq,d1o,c1o,m1o,su,ece,f1o,g1o,Dq,h1o,u1o,p1o,lu,oce,_1o,b1o,Gq,v1o,F1o,T1o,iu,rce,M1o,E1o,Oq,C1o,w1o,A1o,du,tce,L1o,y1o,Vq,x1o,$1o,k1o,cu,ace,S1o,R1o,Xq,P1o,B1o,I1o,mu,nce,N1o,q1o,zq,j1o,D1o,G1o,fu,sce,O1o,V1o,Wq,X1o,z1o,W1o,gu,lce,Q1o,H1o,Qq,U1o,J1o,Y1o,hu,ice,K1o,Z1o,Hq,eFo,oFo,rFo,uu,dce,tFo,aFo,Uq,nFo,sFo,lFo,pu,cce,iFo,dFo,Jq,cFo,mFo,fFo,_u,mce,gFo,hFo,Yq,uFo,pFo,_Fo,bu,fce,bFo,vFo,Kq,FFo,TFo,MFo,vu,gce,EFo,CFo,Zq,wFo,AFo,LFo,Fu,hce,yFo,xFo,ej,$Fo,kFo,SFo,Tu,uce,RFo,PFo,oj,BFo,IFo,NFo,Mu,qFo,Eu,jFo,Cu,Dy,DFo,pce,GFo,Fze,Oi,wu,_ce,Gy,OFo,bce,VFo,Tze,$o,Oy,XFo,Vy,zFo,rj,WFo,QFo,HFo,Xy,UFo,vce,JFo,YFo,KFo,Je,zy,ZFo,Fce,eTo,oTo,Vi,rTo,Tce,tTo,aTo,Mce,nTo,sTo,lTo,me,Au,Ece,iTo,dTo,tj,cTo,mTo,fTo,Lu,Cce,gTo,hTo,aj,uTo,pTo,_To,yu,wce,bTo,vTo,nj,FTo,TTo,MTo,xu,Ace,ETo,CTo,sj,wTo,ATo,LTo,$u,Lce,yTo,xTo,lj,$To,kTo,STo,ku,yce,RTo,PTo,ij,BTo,ITo,NTo,Su,xce,qTo,jTo,dj,DTo,GTo,OTo,Ru,$ce,VTo,XTo,cj,zTo,WTo,QTo,Pu,kce,HTo,UTo,mj,JTo,YTo,KTo,Bu,Sce,ZTo,eMo,fj,oMo,rMo,tMo,Iu,Rce,aMo,nMo,gj,sMo,lMo,iMo,Nu,Pce,dMo,cMo,hj,mMo,fMo,gMo,qu,Bce,hMo,uMo,uj,pMo,_Mo,bMo,ju,Ice,vMo,FMo,pj,TMo,MMo,EMo,Du,Nce,CMo,wMo,_j,AMo,LMo,yMo,Gu,qce,xMo,$Mo,bj,kMo,SMo,RMo,Ou,jce,PMo,BMo,vj,IMo,NMo,qMo,Vu,Dce,jMo,DMo,Fj,GMo,OMo,VMo,Xu,Gce,XMo,zMo,Tj,WMo,QMo,HMo,zu,UMo,Wu,JMo,Qu,Wy,YMo,Oce,KMo,Mze,Xi,Hu,Vce,Qy,ZMo,Xce,e4o,Eze,ko,Hy,o4o,zi,r4o,Mj,t4o,a4o,Ej,n4o,s4o,l4o,Uy,i4o,zce,d4o,c4o,m4o,it,Jy,f4o,Wce,g4o,h4o,Wi,u4o,Qce,p4o,_4o,Cj,b4o,v4o,F4o,Uu,T4o,Ye,Yy,M4o,Hce,E4o,C4o,Ia,w4o,Uce,A4o,L4o,Jce,y4o,x4o,Yce,$4o,k4o,S4o,y,Ju,Kce,R4o,P4o,wj,B4o,I4o,N4o,Yu,Zce,q4o,j4o,Aj,D4o,G4o,O4o,Ku,eme,V4o,X4o,Lj,z4o,W4o,Q4o,Zu,ome,H4o,U4o,yj,J4o,Y4o,K4o,ep,rme,Z4o,eEo,xj,oEo,rEo,tEo,op,tme,aEo,nEo,$j,sEo,lEo,iEo,rp,ame,dEo,cEo,kj,mEo,fEo,gEo,tp,nme,hEo,uEo,Sj,pEo,_Eo,bEo,ap,sme,vEo,FEo,Rj,TEo,MEo,EEo,np,lme,CEo,wEo,Pj,AEo,LEo,yEo,sp,ime,xEo,$Eo,Bj,kEo,SEo,REo,lp,dme,PEo,BEo,Ij,IEo,NEo,qEo,ip,cme,jEo,DEo,Nj,GEo,OEo,VEo,dp,mme,XEo,zEo,qj,WEo,QEo,HEo,cp,fme,UEo,JEo,jj,YEo,KEo,ZEo,mp,gme,eCo,oCo,Dj,rCo,tCo,aCo,fp,hme,nCo,sCo,Gj,lCo,iCo,dCo,gp,ume,cCo,mCo,Oj,fCo,gCo,hCo,hp,pme,uCo,pCo,Vj,_Co,bCo,vCo,up,_me,FCo,TCo,Xj,MCo,ECo,CCo,pp,bme,wCo,ACo,zj,LCo,yCo,xCo,_p,vme,$Co,kCo,Wj,SCo,RCo,PCo,bp,Fme,BCo,ICo,Qj,NCo,qCo,jCo,vp,Tme,DCo,GCo,Hj,OCo,VCo,XCo,Fp,Mme,zCo,WCo,Uj,QCo,HCo,UCo,Tp,Eme,JCo,YCo,Jj,KCo,ZCo,e5o,Mp,Cme,o5o,r5o,Yj,t5o,a5o,n5o,Ep,wme,s5o,l5o,Kj,i5o,d5o,c5o,Cp,Ame,m5o,f5o,Zj,g5o,h5o,u5o,wp,Lme,p5o,_5o,eD,b5o,v5o,F5o,Ap,yme,T5o,M5o,oD,E5o,C5o,w5o,Lp,xme,A5o,L5o,rD,y5o,x5o,$5o,yp,$me,k5o,S5o,tD,R5o,P5o,B5o,xp,kme,I5o,N5o,aD,q5o,j5o,D5o,Js,Sme,G5o,O5o,nD,V5o,X5o,sD,z5o,W5o,Q5o,$p,Rme,H5o,U5o,lD,J5o,Y5o,K5o,kp,Pme,Z5o,e3o,iD,o3o,r3o,t3o,Sp,Bme,a3o,n3o,dD,s3o,l3o,i3o,Rp,Ime,d3o,c3o,cD,m3o,f3o,g3o,Pp,Nme,h3o,u3o,mD,p3o,_3o,b3o,Bp,qme,v3o,F3o,fD,T3o,M3o,E3o,Ip,jme,C3o,w3o,gD,A3o,L3o,y3o,Np,Dme,x3o,$3o,hD,k3o,S3o,R3o,qp,Gme,P3o,B3o,uD,I3o,N3o,q3o,jp,Ome,j3o,D3o,pD,G3o,O3o,V3o,Dp,Vme,X3o,z3o,_D,W3o,Q3o,H3o,Gp,Xme,U3o,J3o,bD,Y3o,K3o,Z3o,Op,zme,e0o,o0o,vD,r0o,t0o,a0o,Vp,Wme,n0o,s0o,FD,l0o,i0o,d0o,Xp,Qme,c0o,m0o,TD,f0o,g0o,h0o,zp,Hme,u0o,p0o,MD,_0o,b0o,v0o,Wp,Ume,F0o,T0o,ED,M0o,E0o,C0o,Qp,Jme,w0o,A0o,CD,L0o,y0o,x0o,Hp,Yme,$0o,k0o,wD,S0o,R0o,P0o,Up,Kme,B0o,I0o,AD,N0o,q0o,j0o,Jp,Zme,D0o,G0o,LD,O0o,V0o,X0o,Yp,efe,z0o,W0o,yD,Q0o,H0o,U0o,Kp,ofe,J0o,Y0o,xD,K0o,Z0o,ewo,Zp,rfe,owo,rwo,$D,two,awo,nwo,e_,tfe,swo,lwo,kD,iwo,dwo,cwo,o_,afe,mwo,fwo,SD,gwo,hwo,uwo,r_,nfe,pwo,_wo,RD,bwo,vwo,Fwo,t_,sfe,Two,Mwo,PD,Ewo,Cwo,wwo,a_,lfe,Awo,Lwo,BD,ywo,xwo,$wo,n_,ife,kwo,Swo,ID,Rwo,Pwo,Bwo,s_,dfe,Iwo,Nwo,ND,qwo,jwo,Dwo,l_,cfe,Gwo,Owo,qD,Vwo,Xwo,zwo,i_,mfe,Wwo,Qwo,jD,Hwo,Uwo,Jwo,d_,ffe,Ywo,Kwo,DD,Zwo,eAo,oAo,c_,gfe,rAo,tAo,GD,aAo,nAo,sAo,m_,hfe,lAo,iAo,OD,dAo,cAo,mAo,f_,ufe,fAo,gAo,VD,hAo,uAo,pAo,g_,pfe,_Ao,bAo,XD,vAo,FAo,TAo,h_,_fe,MAo,EAo,zD,CAo,wAo,AAo,u_,bfe,LAo,yAo,WD,xAo,$Ao,kAo,p_,vfe,SAo,RAo,QD,PAo,BAo,IAo,__,Ffe,NAo,qAo,HD,jAo,DAo,GAo,b_,Tfe,OAo,VAo,UD,XAo,zAo,WAo,v_,Mfe,QAo,HAo,JD,UAo,JAo,YAo,F_,Efe,KAo,ZAo,YD,e6o,o6o,r6o,T_,Cfe,t6o,a6o,KD,n6o,s6o,l6o,M_,wfe,i6o,d6o,ZD,c6o,m6o,f6o,E_,Afe,g6o,h6o,eG,u6o,p6o,_6o,C_,Lfe,b6o,v6o,oG,F6o,T6o,M6o,w_,yfe,E6o,C6o,rG,w6o,A6o,L6o,A_,xfe,y6o,x6o,tG,$6o,k6o,S6o,L_,$fe,R6o,P6o,aG,B6o,I6o,N6o,y_,kfe,q6o,j6o,nG,D6o,G6o,O6o,x_,Sfe,V6o,X6o,sG,z6o,W6o,Q6o,$_,Rfe,H6o,U6o,lG,J6o,Y6o,K6o,k_,Pfe,Z6o,e7o,iG,o7o,r7o,t7o,S_,Bfe,a7o,n7o,dG,s7o,l7o,i7o,R_,Ife,d7o,c7o,cG,m7o,f7o,g7o,P_,Nfe,h7o,u7o,mG,p7o,_7o,b7o,B_,qfe,v7o,F7o,fG,T7o,M7o,E7o,I_,jfe,C7o,w7o,gG,A7o,L7o,y7o,N_,Dfe,x7o,$7o,hG,k7o,S7o,R7o,q_,Gfe,P7o,B7o,uG,I7o,N7o,q7o,j_,Ofe,j7o,D7o,pG,G7o,O7o,V7o,D_,Vfe,X7o,z7o,_G,W7o,Q7o,H7o,G_,Xfe,U7o,J7o,bG,Y7o,K7o,Z7o,O_,zfe,eLo,oLo,vG,rLo,tLo,aLo,V_,Wfe,nLo,sLo,FG,lLo,iLo,dLo,X_,Qfe,cLo,mLo,TG,fLo,gLo,hLo,z_,Hfe,uLo,pLo,MG,_Lo,bLo,vLo,W_,Ufe,FLo,TLo,EG,MLo,ELo,CLo,Q_,Jfe,wLo,ALo,CG,LLo,yLo,xLo,H_,Yfe,$Lo,kLo,wG,SLo,RLo,PLo,U_,Kfe,BLo,ILo,AG,NLo,qLo,jLo,J_,Zfe,DLo,GLo,LG,OLo,VLo,XLo,Y_,ege,zLo,WLo,yG,QLo,HLo,ULo,K_,oge,JLo,YLo,xG,KLo,ZLo,eyo,Z_,rge,oyo,ryo,$G,tyo,ayo,nyo,e2,tge,syo,lyo,kG,iyo,dyo,cyo,o2,myo,age,fyo,gyo,nge,hyo,uyo,r2,Cze,Qi,t2,sge,Ky,pyo,lge,_yo,wze,So,Zy,byo,Hi,vyo,SG,Fyo,Tyo,RG,Myo,Eyo,Cyo,e8,wyo,ige,Ayo,Lyo,yyo,dt,o8,xyo,dge,$yo,kyo,Ui,Syo,cge,Ryo,Pyo,PG,Byo,Iyo,Nyo,a2,qyo,Ke,r8,jyo,mge,Dyo,Gyo,Na,Oyo,fge,Vyo,Xyo,gge,zyo,Wyo,hge,Qyo,Hyo,Uyo,G,n2,uge,Jyo,Yyo,BG,Kyo,Zyo,e8o,s2,pge,o8o,r8o,IG,t8o,a8o,n8o,l2,_ge,s8o,l8o,NG,i8o,d8o,c8o,i2,bge,m8o,f8o,qG,g8o,h8o,u8o,d2,vge,p8o,_8o,jG,b8o,v8o,F8o,c2,Fge,T8o,M8o,DG,E8o,C8o,w8o,m2,Tge,A8o,L8o,GG,y8o,x8o,$8o,f2,Mge,k8o,S8o,OG,R8o,P8o,B8o,g2,Ege,I8o,N8o,VG,q8o,j8o,D8o,h2,Cge,G8o,O8o,XG,V8o,X8o,z8o,u2,wge,W8o,Q8o,zG,H8o,U8o,J8o,p2,Age,Y8o,K8o,WG,Z8o,e9o,o9o,_2,Lge,r9o,t9o,QG,a9o,n9o,s9o,b2,yge,l9o,i9o,HG,d9o,c9o,m9o,v2,xge,f9o,g9o,UG,h9o,u9o,p9o,F2,$ge,_9o,b9o,JG,v9o,F9o,T9o,T2,kge,M9o,E9o,YG,C9o,w9o,A9o,M2,Sge,L9o,y9o,KG,x9o,$9o,k9o,E2,Rge,S9o,R9o,ZG,P9o,B9o,I9o,C2,Pge,N9o,q9o,eO,j9o,D9o,G9o,w2,Bge,O9o,V9o,oO,X9o,z9o,W9o,A2,Ige,Q9o,H9o,rO,U9o,J9o,Y9o,L2,Nge,K9o,Z9o,tO,exo,oxo,rxo,y2,qge,txo,axo,aO,nxo,sxo,lxo,x2,jge,ixo,dxo,nO,cxo,mxo,fxo,$2,Dge,gxo,hxo,sO,uxo,pxo,_xo,k2,Gge,bxo,vxo,lO,Fxo,Txo,Mxo,S2,Oge,Exo,Cxo,iO,wxo,Axo,Lxo,R2,Vge,yxo,xxo,dO,$xo,kxo,Sxo,P2,Xge,Rxo,Pxo,cO,Bxo,Ixo,Nxo,B2,zge,qxo,jxo,mO,Dxo,Gxo,Oxo,I2,Wge,Vxo,Xxo,fO,zxo,Wxo,Qxo,N2,Qge,Hxo,Uxo,gO,Jxo,Yxo,Kxo,q2,Hge,Zxo,e$o,hO,o$o,r$o,t$o,j2,Uge,a$o,n$o,uO,s$o,l$o,i$o,D2,Jge,d$o,c$o,pO,m$o,f$o,g$o,G2,Yge,h$o,u$o,_O,p$o,_$o,b$o,O2,Kge,v$o,F$o,bO,T$o,M$o,E$o,V2,Zge,C$o,w$o,vO,A$o,L$o,y$o,X2,ehe,x$o,$$o,FO,k$o,S$o,R$o,z2,ohe,P$o,B$o,TO,I$o,N$o,q$o,W2,rhe,j$o,D$o,MO,G$o,O$o,V$o,Q2,the,X$o,z$o,EO,W$o,Q$o,H$o,H2,ahe,U$o,J$o,CO,Y$o,K$o,Z$o,U2,nhe,eko,oko,wO,rko,tko,ako,J2,nko,she,sko,lko,lhe,iko,dko,Y2,Aze,Ji,K2,ihe,t8,cko,dhe,mko,Lze,Ro,a8,fko,Yi,gko,AO,hko,uko,LO,pko,_ko,bko,n8,vko,che,Fko,Tko,Mko,ct,s8,Eko,mhe,Cko,wko,Ki,Ako,fhe,Lko,yko,yO,xko,$ko,kko,Z2,Sko,Ze,l8,Rko,ghe,Pko,Bko,qa,Iko,hhe,Nko,qko,uhe,jko,Dko,phe,Gko,Oko,Vko,z,eb,_he,Xko,zko,xO,Wko,Qko,Hko,ob,bhe,Uko,Jko,$O,Yko,Kko,Zko,rb,vhe,eSo,oSo,kO,rSo,tSo,aSo,tb,Fhe,nSo,sSo,SO,lSo,iSo,dSo,ab,The,cSo,mSo,RO,fSo,gSo,hSo,nb,Mhe,uSo,pSo,PO,_So,bSo,vSo,sb,Ehe,FSo,TSo,BO,MSo,ESo,CSo,lb,Che,wSo,ASo,IO,LSo,ySo,xSo,ib,whe,$So,kSo,NO,SSo,RSo,PSo,db,Ahe,BSo,ISo,qO,NSo,qSo,jSo,cb,Lhe,DSo,GSo,jO,OSo,VSo,XSo,mb,yhe,zSo,WSo,DO,QSo,HSo,USo,fb,xhe,JSo,YSo,GO,KSo,ZSo,eRo,gb,$he,oRo,rRo,OO,tRo,aRo,nRo,hb,khe,sRo,lRo,VO,iRo,dRo,cRo,ub,She,mRo,fRo,XO,gRo,hRo,uRo,pb,Rhe,pRo,_Ro,zO,bRo,vRo,FRo,_b,Phe,TRo,MRo,WO,ERo,CRo,wRo,bb,Bhe,ARo,LRo,QO,yRo,xRo,$Ro,vb,Ihe,kRo,SRo,HO,RRo,PRo,BRo,Fb,Nhe,IRo,NRo,UO,qRo,jRo,DRo,Tb,qhe,GRo,ORo,JO,VRo,XRo,zRo,Mb,jhe,WRo,QRo,YO,HRo,URo,JRo,Eb,Dhe,YRo,KRo,KO,ZRo,ePo,oPo,Cb,Ghe,rPo,tPo,ZO,aPo,nPo,sPo,wb,Ohe,lPo,iPo,eV,dPo,cPo,mPo,Ab,Vhe,fPo,gPo,oV,hPo,uPo,pPo,Lb,Xhe,_Po,bPo,rV,vPo,FPo,TPo,yb,zhe,MPo,EPo,tV,CPo,wPo,APo,xb,Whe,LPo,yPo,aV,xPo,$Po,kPo,$b,Qhe,SPo,RPo,nV,PPo,BPo,IPo,kb,Hhe,NPo,qPo,sV,jPo,DPo,GPo,Sb,Uhe,OPo,VPo,lV,XPo,zPo,WPo,Rb,Jhe,QPo,HPo,iV,UPo,JPo,YPo,Pb,Yhe,KPo,ZPo,dV,eBo,oBo,rBo,Bb,Khe,tBo,aBo,cV,nBo,sBo,lBo,Ib,Zhe,iBo,dBo,mV,cBo,mBo,fBo,Nb,eue,gBo,hBo,fV,uBo,pBo,_Bo,qb,oue,bBo,vBo,gV,FBo,TBo,MBo,jb,rue,EBo,CBo,hV,wBo,ABo,LBo,Db,yBo,tue,xBo,$Bo,aue,kBo,SBo,Gb,yze,Zi,Ob,nue,i8,RBo,sue,PBo,xze,Po,d8,BBo,ed,IBo,uV,NBo,qBo,pV,jBo,DBo,GBo,c8,OBo,lue,VBo,XBo,zBo,mt,m8,WBo,iue,QBo,HBo,od,UBo,due,JBo,YBo,_V,KBo,ZBo,eIo,Vb,oIo,eo,f8,rIo,cue,tIo,aIo,ja,nIo,mue,sIo,lIo,fue,iIo,dIo,gue,cIo,mIo,fIo,Q,Xb,hue,gIo,hIo,bV,uIo,pIo,_Io,zb,uue,bIo,vIo,vV,FIo,TIo,MIo,Wb,pue,EIo,CIo,FV,wIo,AIo,LIo,Qb,_ue,yIo,xIo,TV,$Io,kIo,SIo,Hb,bue,RIo,PIo,MV,BIo,IIo,NIo,Ub,vue,qIo,jIo,EV,DIo,GIo,OIo,Jb,Fue,VIo,XIo,CV,zIo,WIo,QIo,Yb,Tue,HIo,UIo,wV,JIo,YIo,KIo,Kb,Mue,ZIo,eNo,AV,oNo,rNo,tNo,Zb,Eue,aNo,nNo,LV,sNo,lNo,iNo,ev,Cue,dNo,cNo,yV,mNo,fNo,gNo,ov,wue,hNo,uNo,xV,pNo,_No,bNo,rv,Aue,vNo,FNo,$V,TNo,MNo,ENo,tv,Lue,CNo,wNo,kV,ANo,LNo,yNo,av,yue,xNo,$No,SV,kNo,SNo,RNo,nv,xue,PNo,BNo,RV,INo,NNo,qNo,sv,$ue,jNo,DNo,PV,GNo,ONo,VNo,lv,kue,XNo,zNo,BV,WNo,QNo,HNo,iv,Sue,UNo,JNo,IV,YNo,KNo,ZNo,dv,Rue,eqo,oqo,NV,rqo,tqo,aqo,cv,Pue,nqo,sqo,qV,lqo,iqo,dqo,mv,Bue,cqo,mqo,jV,fqo,gqo,hqo,fv,Iue,uqo,pqo,DV,_qo,bqo,vqo,gv,Nue,Fqo,Tqo,GV,Mqo,Eqo,Cqo,hv,que,wqo,Aqo,OV,Lqo,yqo,xqo,uv,jue,$qo,kqo,VV,Sqo,Rqo,Pqo,pv,Due,Bqo,Iqo,XV,Nqo,qqo,jqo,_v,Gue,Dqo,Gqo,zV,Oqo,Vqo,Xqo,bv,Oue,zqo,Wqo,WV,Qqo,Hqo,Uqo,vv,Vue,Jqo,Yqo,QV,Kqo,Zqo,ejo,Fv,Xue,ojo,rjo,HV,tjo,ajo,njo,Tv,zue,sjo,ljo,UV,ijo,djo,cjo,Mv,Wue,mjo,fjo,JV,gjo,hjo,ujo,Ev,Que,pjo,_jo,Hue,bjo,vjo,Fjo,Cv,Uue,Tjo,Mjo,YV,Ejo,Cjo,wjo,wv,Jue,Ajo,Ljo,KV,yjo,xjo,$jo,Av,Yue,kjo,Sjo,ZV,Rjo,Pjo,Bjo,Lv,Kue,Ijo,Njo,eX,qjo,jjo,Djo,yv,Gjo,Zue,Ojo,Vjo,epe,Xjo,zjo,xv,$ze,rd,$v,ope,g8,Wjo,rpe,Qjo,kze,Bo,h8,Hjo,td,Ujo,oX,Jjo,Yjo,rX,Kjo,Zjo,eDo,u8,oDo,tpe,rDo,tDo,aDo,ft,p8,nDo,ape,sDo,lDo,ad,iDo,npe,dDo,cDo,tX,mDo,fDo,gDo,kv,hDo,oo,_8,uDo,spe,pDo,_Do,Da,bDo,lpe,vDo,FDo,ipe,TDo,MDo,dpe,EDo,CDo,wDo,fe,Sv,cpe,ADo,LDo,aX,yDo,xDo,$Do,Rv,mpe,kDo,SDo,nX,RDo,PDo,BDo,Pv,fpe,IDo,NDo,sX,qDo,jDo,DDo,Bv,gpe,GDo,ODo,lX,VDo,XDo,zDo,Iv,hpe,WDo,QDo,iX,HDo,UDo,JDo,Nv,upe,YDo,KDo,dX,ZDo,eGo,oGo,qv,ppe,rGo,tGo,cX,aGo,nGo,sGo,jv,_pe,lGo,iGo,mX,dGo,cGo,mGo,Dv,bpe,fGo,gGo,fX,hGo,uGo,pGo,Gv,vpe,_Go,bGo,gX,vGo,FGo,TGo,Ov,Fpe,MGo,EGo,hX,CGo,wGo,AGo,Vv,Tpe,LGo,yGo,uX,xGo,$Go,kGo,Xv,Mpe,SGo,RGo,pX,PGo,BGo,IGo,zv,Epe,NGo,qGo,_X,jGo,DGo,GGo,Wv,Cpe,OGo,VGo,bX,XGo,zGo,WGo,Qv,wpe,QGo,HGo,vX,UGo,JGo,YGo,Hv,Ape,KGo,ZGo,FX,eOo,oOo,rOo,Uv,Lpe,tOo,aOo,TX,nOo,sOo,lOo,Jv,ype,iOo,dOo,MX,cOo,mOo,fOo,Yv,gOo,xpe,hOo,uOo,$pe,pOo,_Oo,Kv,Sze,nd,Zv,kpe,b8,bOo,Spe,vOo,Rze,Io,v8,FOo,sd,TOo,EX,MOo,EOo,CX,COo,wOo,AOo,F8,LOo,Rpe,yOo,xOo,$Oo,gt,T8,kOo,Ppe,SOo,ROo,ld,POo,Bpe,BOo,IOo,wX,NOo,qOo,jOo,e1,DOo,ro,M8,GOo,Ipe,OOo,VOo,Ga,XOo,Npe,zOo,WOo,qpe,QOo,HOo,jpe,UOo,JOo,YOo,B,o1,Dpe,KOo,ZOo,AX,eVo,oVo,rVo,r1,Gpe,tVo,aVo,LX,nVo,sVo,lVo,t1,Ope,iVo,dVo,yX,cVo,mVo,fVo,a1,Vpe,gVo,hVo,xX,uVo,pVo,_Vo,n1,Xpe,bVo,vVo,$X,FVo,TVo,MVo,s1,zpe,EVo,CVo,kX,wVo,AVo,LVo,l1,Wpe,yVo,xVo,SX,$Vo,kVo,SVo,i1,Qpe,RVo,PVo,RX,BVo,IVo,NVo,d1,Hpe,qVo,jVo,PX,DVo,GVo,OVo,c1,Upe,VVo,XVo,BX,zVo,WVo,QVo,m1,Jpe,HVo,UVo,IX,JVo,YVo,KVo,f1,Ype,ZVo,eXo,NX,oXo,rXo,tXo,g1,Kpe,aXo,nXo,qX,sXo,lXo,iXo,h1,Zpe,dXo,cXo,jX,mXo,fXo,gXo,u1,e_e,hXo,uXo,DX,pXo,_Xo,bXo,p1,o_e,vXo,FXo,GX,TXo,MXo,EXo,_1,r_e,CXo,wXo,OX,AXo,LXo,yXo,b1,t_e,xXo,$Xo,VX,kXo,SXo,RXo,v1,a_e,PXo,BXo,XX,IXo,NXo,qXo,F1,n_e,jXo,DXo,zX,GXo,OXo,VXo,T1,s_e,XXo,zXo,WX,WXo,QXo,HXo,M1,l_e,UXo,JXo,QX,YXo,KXo,ZXo,E1,i_e,ezo,ozo,HX,rzo,tzo,azo,C1,d_e,nzo,szo,UX,lzo,izo,dzo,w1,c_e,czo,mzo,JX,fzo,gzo,hzo,A1,m_e,uzo,pzo,YX,_zo,bzo,vzo,L1,f_e,Fzo,Tzo,KX,Mzo,Ezo,Czo,y1,g_e,wzo,Azo,ZX,Lzo,yzo,xzo,x1,h_e,$zo,kzo,ez,Szo,Rzo,Pzo,$1,u_e,Bzo,Izo,oz,Nzo,qzo,jzo,k1,p_e,Dzo,Gzo,rz,Ozo,Vzo,Xzo,S1,__e,zzo,Wzo,tz,Qzo,Hzo,Uzo,R1,b_e,Jzo,Yzo,az,Kzo,Zzo,eWo,P1,v_e,oWo,rWo,nz,tWo,aWo,nWo,B1,F_e,sWo,lWo,sz,iWo,dWo,cWo,I1,T_e,mWo,fWo,lz,gWo,hWo,uWo,N1,M_e,pWo,_Wo,iz,bWo,vWo,FWo,q1,E_e,TWo,MWo,dz,EWo,CWo,wWo,j1,C_e,AWo,LWo,cz,yWo,xWo,$Wo,D1,w_e,kWo,SWo,mz,RWo,PWo,BWo,G1,A_e,IWo,NWo,fz,qWo,jWo,DWo,O1,L_e,GWo,OWo,gz,VWo,XWo,zWo,V1,y_e,WWo,QWo,hz,HWo,UWo,JWo,X1,x_e,YWo,KWo,uz,ZWo,eQo,oQo,z1,$_e,rQo,tQo,pz,aQo,nQo,sQo,W1,k_e,lQo,iQo,_z,dQo,cQo,mQo,Q1,S_e,fQo,gQo,bz,hQo,uQo,pQo,H1,R_e,_Qo,bQo,vz,vQo,FQo,TQo,U1,P_e,MQo,EQo,Fz,CQo,wQo,AQo,J1,B_e,LQo,yQo,Tz,xQo,$Qo,kQo,Y1,I_e,SQo,RQo,Mz,PQo,BQo,IQo,K1,NQo,N_e,qQo,jQo,q_e,DQo,GQo,Z1,Pze,id,eF,j_e,E8,OQo,D_e,VQo,Bze,No,C8,XQo,dd,zQo,Ez,WQo,QQo,Cz,HQo,UQo,JQo,w8,YQo,G_e,KQo,ZQo,eHo,ht,A8,oHo,O_e,rHo,tHo,cd,aHo,V_e,nHo,sHo,wz,lHo,iHo,dHo,oF,cHo,to,L8,mHo,X_e,fHo,gHo,Oa,hHo,z_e,uHo,pHo,W_e,_Ho,bHo,Q_e,vHo,FHo,THo,Z,rF,H_e,MHo,EHo,Az,CHo,wHo,AHo,tF,U_e,LHo,yHo,Lz,xHo,$Ho,kHo,aF,J_e,SHo,RHo,yz,PHo,BHo,IHo,nF,Y_e,NHo,qHo,xz,jHo,DHo,GHo,sF,K_e,OHo,VHo,$z,XHo,zHo,WHo,lF,Z_e,QHo,HHo,kz,UHo,JHo,YHo,iF,e2e,KHo,ZHo,Sz,eUo,oUo,rUo,dF,o2e,tUo,aUo,Rz,nUo,sUo,lUo,cF,r2e,iUo,dUo,Pz,cUo,mUo,fUo,mF,t2e,gUo,hUo,Bz,uUo,pUo,_Uo,fF,a2e,bUo,vUo,Iz,FUo,TUo,MUo,gF,n2e,EUo,CUo,Nz,wUo,AUo,LUo,hF,s2e,yUo,xUo,qz,$Uo,kUo,SUo,uF,l2e,RUo,PUo,jz,BUo,IUo,NUo,pF,i2e,qUo,jUo,Dz,DUo,GUo,OUo,_F,d2e,VUo,XUo,Gz,zUo,WUo,QUo,bF,c2e,HUo,UUo,Oz,JUo,YUo,KUo,vF,m2e,ZUo,eJo,Vz,oJo,rJo,tJo,FF,f2e,aJo,nJo,Xz,sJo,lJo,iJo,TF,g2e,dJo,cJo,zz,mJo,fJo,gJo,MF,h2e,hJo,uJo,Wz,pJo,_Jo,bJo,EF,u2e,vJo,FJo,Qz,TJo,MJo,EJo,CF,p2e,CJo,wJo,Hz,AJo,LJo,yJo,wF,_2e,xJo,$Jo,Uz,kJo,SJo,RJo,AF,b2e,PJo,BJo,Jz,IJo,NJo,qJo,LF,v2e,jJo,DJo,Yz,GJo,OJo,VJo,yF,F2e,XJo,zJo,Kz,WJo,QJo,HJo,xF,T2e,UJo,JJo,Zz,YJo,KJo,ZJo,$F,M2e,eYo,oYo,eW,rYo,tYo,aYo,kF,E2e,nYo,sYo,oW,lYo,iYo,dYo,SF,cYo,C2e,mYo,fYo,w2e,gYo,hYo,RF,Ize,md,PF,A2e,y8,uYo,L2e,pYo,Nze,qo,x8,_Yo,fd,bYo,rW,vYo,FYo,tW,TYo,MYo,EYo,$8,CYo,y2e,wYo,AYo,LYo,ut,k8,yYo,x2e,xYo,$Yo,gd,kYo,$2e,SYo,RYo,aW,PYo,BYo,IYo,BF,NYo,ao,S8,qYo,k2e,jYo,DYo,Va,GYo,S2e,OYo,VYo,R2e,XYo,zYo,P2e,WYo,QYo,HYo,jo,IF,B2e,UYo,JYo,nW,YYo,KYo,ZYo,NF,I2e,eKo,oKo,sW,rKo,tKo,aKo,qF,N2e,nKo,sKo,lW,lKo,iKo,dKo,jF,q2e,cKo,mKo,iW,fKo,gKo,hKo,DF,j2e,uKo,pKo,dW,_Ko,bKo,vKo,GF,D2e,FKo,TKo,cW,MKo,EKo,CKo,OF,wKo,G2e,AKo,LKo,O2e,yKo,xKo,VF,qze,hd,XF,V2e,R8,$Ko,X2e,kKo,jze,Do,P8,SKo,ud,RKo,mW,PKo,BKo,fW,IKo,NKo,qKo,B8,jKo,z2e,DKo,GKo,OKo,pt,I8,VKo,W2e,XKo,zKo,pd,WKo,Q2e,QKo,HKo,gW,UKo,JKo,YKo,zF,KKo,no,N8,ZKo,H2e,eZo,oZo,Xa,rZo,U2e,tZo,aZo,J2e,nZo,sZo,Y2e,lZo,iZo,dZo,J,WF,K2e,cZo,mZo,hW,fZo,gZo,hZo,QF,Z2e,uZo,pZo,uW,_Zo,bZo,vZo,HF,ebe,FZo,TZo,pW,MZo,EZo,CZo,UF,obe,wZo,AZo,_W,LZo,yZo,xZo,JF,rbe,$Zo,kZo,bW,SZo,RZo,PZo,YF,tbe,BZo,IZo,vW,NZo,qZo,jZo,KF,abe,DZo,GZo,FW,OZo,VZo,XZo,ZF,nbe,zZo,WZo,TW,QZo,HZo,UZo,eT,sbe,JZo,YZo,MW,KZo,ZZo,eer,oT,lbe,oer,rer,EW,ter,aer,ner,rT,ibe,ser,ler,CW,ier,der,cer,tT,dbe,mer,fer,wW,ger,her,uer,aT,cbe,per,_er,AW,ber,ver,Fer,nT,mbe,Ter,Mer,LW,Eer,Cer,wer,sT,fbe,Aer,Ler,yW,yer,xer,$er,lT,gbe,ker,Ser,xW,Rer,Per,Ber,iT,hbe,Ier,Ner,$W,qer,jer,Der,dT,ube,Ger,Oer,kW,Ver,Xer,zer,cT,pbe,Wer,Qer,SW,Her,Uer,Jer,mT,_be,Yer,Ker,RW,Zer,eor,oor,fT,bbe,ror,tor,PW,aor,nor,sor,gT,vbe,lor,ior,BW,dor,cor,mor,hT,Fbe,gor,hor,IW,uor,por,_or,uT,Tbe,bor,vor,NW,For,Tor,Mor,pT,Mbe,Eor,Cor,qW,wor,Aor,Lor,_T,Ebe,yor,xor,jW,$or,kor,Sor,bT,Cbe,Ror,Por,DW,Bor,Ior,Nor,vT,wbe,qor,jor,GW,Dor,Gor,Oor,FT,Abe,Vor,Xor,OW,zor,Wor,Qor,TT,Lbe,Hor,Uor,VW,Jor,Yor,Kor,MT,ybe,Zor,err,XW,orr,rrr,trr,ET,xbe,arr,nrr,zW,srr,lrr,irr,CT,$be,drr,crr,WW,mrr,frr,grr,wT,kbe,hrr,urr,QW,prr,_rr,brr,AT,Sbe,vrr,Frr,HW,Trr,Mrr,Err,LT,Rbe,Crr,wrr,UW,Arr,Lrr,yrr,yT,xrr,Pbe,$rr,krr,Bbe,Srr,Rrr,xT,Dze,_d,$T,Ibe,q8,Prr,Nbe,Brr,Gze,Go,j8,Irr,bd,Nrr,JW,qrr,jrr,YW,Drr,Grr,Orr,D8,Vrr,qbe,Xrr,zrr,Wrr,_t,G8,Qrr,jbe,Hrr,Urr,vd,Jrr,Dbe,Yrr,Krr,KW,Zrr,etr,otr,kT,rtr,so,O8,ttr,Gbe,atr,ntr,za,str,Obe,ltr,itr,Vbe,dtr,ctr,Xbe,mtr,ftr,gtr,V,ST,zbe,htr,utr,ZW,ptr,_tr,btr,RT,Wbe,vtr,Ftr,eQ,Ttr,Mtr,Etr,PT,Qbe,Ctr,wtr,oQ,Atr,Ltr,ytr,BT,Hbe,xtr,$tr,rQ,ktr,Str,Rtr,IT,Ube,Ptr,Btr,tQ,Itr,Ntr,qtr,NT,Jbe,jtr,Dtr,aQ,Gtr,Otr,Vtr,qT,Ybe,Xtr,ztr,nQ,Wtr,Qtr,Htr,jT,Kbe,Utr,Jtr,sQ,Ytr,Ktr,Ztr,DT,Zbe,ear,oar,lQ,rar,tar,aar,GT,eve,nar,sar,iQ,lar,iar,dar,OT,ove,car,mar,dQ,far,gar,har,VT,rve,uar,par,cQ,_ar,bar,Far,XT,tve,Tar,Mar,mQ,Ear,Car,war,zT,ave,Aar,Lar,fQ,yar,xar,$ar,WT,nve,kar,Sar,gQ,Rar,Par,Bar,QT,sve,Iar,Nar,hQ,qar,jar,Dar,HT,lve,Gar,Oar,uQ,Var,Xar,zar,UT,ive,War,Qar,pQ,Har,Uar,Jar,JT,dve,Yar,Kar,_Q,Zar,enr,onr,YT,cve,rnr,tnr,bQ,anr,nnr,snr,KT,mve,lnr,inr,vQ,dnr,cnr,mnr,ZT,fve,fnr,gnr,FQ,hnr,unr,pnr,eM,gve,_nr,bnr,TQ,vnr,Fnr,Tnr,oM,hve,Mnr,Enr,MQ,Cnr,wnr,Anr,rM,uve,Lnr,ynr,EQ,xnr,$nr,knr,tM,pve,Snr,Rnr,CQ,Pnr,Bnr,Inr,aM,_ve,Nnr,qnr,wQ,jnr,Dnr,Gnr,nM,bve,Onr,Vnr,AQ,Xnr,znr,Wnr,sM,vve,Qnr,Hnr,LQ,Unr,Jnr,Ynr,lM,Fve,Knr,Znr,yQ,esr,osr,rsr,iM,Tve,tsr,asr,xQ,nsr,ssr,lsr,dM,Mve,isr,dsr,$Q,csr,msr,fsr,cM,Eve,gsr,hsr,kQ,usr,psr,_sr,mM,Cve,bsr,vsr,SQ,Fsr,Tsr,Msr,fM,wve,Esr,Csr,RQ,wsr,Asr,Lsr,gM,Ave,ysr,xsr,PQ,$sr,ksr,Ssr,hM,Lve,Rsr,Psr,BQ,Bsr,Isr,Nsr,uM,yve,qsr,jsr,IQ,Dsr,Gsr,Osr,pM,xve,Vsr,Xsr,NQ,zsr,Wsr,Qsr,_M,$ve,Hsr,Usr,qQ,Jsr,Ysr,Ksr,bM,kve,Zsr,elr,jQ,olr,rlr,tlr,vM,Sve,alr,nlr,DQ,slr,llr,ilr,FM,dlr,Rve,clr,mlr,Pve,flr,glr,TM,Oze,Fd,MM,Bve,V8,hlr,Ive,ulr,Vze,Oo,X8,plr,Td,_lr,GQ,blr,vlr,OQ,Flr,Tlr,Mlr,z8,Elr,Nve,Clr,wlr,Alr,bt,W8,Llr,qve,ylr,xlr,Md,$lr,jve,klr,Slr,VQ,Rlr,Plr,Blr,EM,Ilr,lo,Q8,Nlr,Dve,qlr,jlr,Wa,Dlr,Gve,Glr,Olr,Ove,Vlr,Xlr,Vve,zlr,Wlr,Qlr,Xve,CM,zve,Hlr,Ulr,XQ,Jlr,Ylr,Klr,wM,Zlr,Wve,eir,oir,Qve,rir,tir,AM,Xze,Ed,LM,Hve,H8,air,Uve,nir,zze,Vo,U8,sir,Cd,lir,zQ,iir,dir,WQ,cir,mir,fir,J8,gir,Jve,hir,uir,pir,vt,Y8,_ir,Yve,bir,vir,wd,Fir,Kve,Tir,Mir,QQ,Eir,Cir,wir,yM,Air,io,K8,Lir,Zve,yir,xir,Qa,$ir,e1e,kir,Sir,o1e,Rir,Pir,r1e,Bir,Iir,Nir,be,xM,t1e,qir,jir,HQ,Dir,Gir,Oir,$M,a1e,Vir,Xir,UQ,zir,Wir,Qir,kM,n1e,Hir,Uir,JQ,Jir,Yir,Kir,SM,s1e,Zir,edr,YQ,odr,rdr,tdr,Ys,l1e,adr,ndr,KQ,sdr,ldr,ZQ,idr,ddr,cdr,RM,i1e,mdr,fdr,eH,gdr,hdr,udr,Ks,d1e,pdr,_dr,oH,bdr,vdr,rH,Fdr,Tdr,Mdr,PM,c1e,Edr,Cdr,tH,wdr,Adr,Ldr,Ft,m1e,ydr,xdr,aH,$dr,kdr,nH,Sdr,Rdr,sH,Pdr,Bdr,Idr,BM,f1e,Ndr,qdr,lH,jdr,Ddr,Gdr,IM,g1e,Odr,Vdr,iH,Xdr,zdr,Wdr,NM,h1e,Qdr,Hdr,dH,Udr,Jdr,Ydr,qM,u1e,Kdr,Zdr,cH,ecr,ocr,rcr,jM,p1e,tcr,acr,mH,ncr,scr,lcr,DM,_1e,icr,dcr,fH,ccr,mcr,fcr,GM,b1e,gcr,hcr,gH,ucr,pcr,_cr,OM,v1e,bcr,vcr,hH,Fcr,Tcr,Mcr,VM,Ecr,F1e,Ccr,wcr,T1e,Acr,Lcr,XM,Wze,Ad,zM,M1e,Z8,ycr,E1e,xcr,Qze,Xo,e9,$cr,Ld,kcr,uH,Scr,Rcr,pH,Pcr,Bcr,Icr,o9,Ncr,C1e,qcr,jcr,Dcr,Tt,r9,Gcr,w1e,Ocr,Vcr,yd,Xcr,A1e,zcr,Wcr,_H,Qcr,Hcr,Ucr,WM,Jcr,co,t9,Ycr,L1e,Kcr,Zcr,Ha,emr,y1e,omr,rmr,x1e,tmr,amr,$1e,nmr,smr,lmr,k1e,QM,S1e,imr,dmr,bH,cmr,mmr,fmr,HM,gmr,R1e,hmr,umr,P1e,pmr,_mr,UM,Hze,xd,JM,B1e,a9,bmr,I1e,vmr,Uze,zo,n9,Fmr,$d,Tmr,vH,Mmr,Emr,FH,Cmr,wmr,Amr,s9,Lmr,N1e,ymr,xmr,$mr,Mt,l9,kmr,q1e,Smr,Rmr,kd,Pmr,j1e,Bmr,Imr,TH,Nmr,qmr,jmr,YM,Dmr,mo,i9,Gmr,D1e,Omr,Vmr,Ua,Xmr,G1e,zmr,Wmr,O1e,Qmr,Hmr,V1e,Umr,Jmr,Ymr,X1e,KM,z1e,Kmr,Zmr,MH,efr,ofr,rfr,ZM,tfr,W1e,afr,nfr,Q1e,sfr,lfr,e4,Jze,Sd,o4,H1e,d9,ifr,U1e,dfr,Yze,Wo,c9,cfr,Rd,mfr,EH,ffr,gfr,CH,hfr,ufr,pfr,m9,_fr,J1e,bfr,vfr,Ffr,Et,f9,Tfr,Y1e,Mfr,Efr,Pd,Cfr,K1e,wfr,Afr,wH,Lfr,yfr,xfr,r4,$fr,fo,g9,kfr,Z1e,Sfr,Rfr,Ja,Pfr,eFe,Bfr,Ifr,oFe,Nfr,qfr,rFe,jfr,Dfr,Gfr,Pe,t4,tFe,Ofr,Vfr,AH,Xfr,zfr,Wfr,a4,aFe,Qfr,Hfr,LH,Ufr,Jfr,Yfr,n4,nFe,Kfr,Zfr,yH,egr,ogr,rgr,s4,sFe,tgr,agr,xH,ngr,sgr,lgr,l4,lFe,igr,dgr,$H,cgr,mgr,fgr,i4,iFe,ggr,hgr,kH,ugr,pgr,_gr,d4,dFe,bgr,vgr,SH,Fgr,Tgr,Mgr,c4,cFe,Egr,Cgr,RH,wgr,Agr,Lgr,m4,mFe,ygr,xgr,PH,$gr,kgr,Sgr,f4,Rgr,fFe,Pgr,Bgr,gFe,Igr,Ngr,g4,Kze,Bd,h4,hFe,h9,qgr,uFe,jgr,Zze,Qo,u9,Dgr,Id,Ggr,BH,Ogr,Vgr,IH,Xgr,zgr,Wgr,p9,Qgr,pFe,Hgr,Ugr,Jgr,Ct,_9,Ygr,_Fe,Kgr,Zgr,Nd,ehr,bFe,ohr,rhr,NH,thr,ahr,nhr,u4,shr,go,b9,lhr,vFe,ihr,dhr,Ya,chr,FFe,mhr,fhr,TFe,ghr,hhr,MFe,uhr,phr,_hr,rt,p4,EFe,bhr,vhr,qH,Fhr,Thr,Mhr,_4,CFe,Ehr,Chr,jH,whr,Ahr,Lhr,b4,wFe,yhr,xhr,DH,$hr,khr,Shr,v4,AFe,Rhr,Phr,GH,Bhr,Ihr,Nhr,F4,LFe,qhr,jhr,OH,Dhr,Ghr,Ohr,T4,Vhr,yFe,Xhr,zhr,xFe,Whr,Qhr,M4,eWe,qd,E4,$Fe,v9,Hhr,kFe,Uhr,oWe,Ho,F9,Jhr,jd,Yhr,VH,Khr,Zhr,XH,eur,our,rur,T9,tur,SFe,aur,nur,sur,wt,M9,lur,RFe,iur,dur,Dd,cur,PFe,mur,fur,zH,gur,hur,uur,C4,pur,ho,E9,_ur,BFe,bur,vur,Ka,Fur,IFe,Tur,Mur,NFe,Eur,Cur,qFe,wur,Aur,Lur,Le,w4,jFe,yur,xur,WH,$ur,kur,Sur,A4,DFe,Rur,Pur,QH,Bur,Iur,Nur,L4,GFe,qur,jur,HH,Dur,Gur,Our,y4,OFe,Vur,Xur,UH,zur,Wur,Qur,x4,VFe,Hur,Uur,JH,Jur,Yur,Kur,$4,XFe,Zur,epr,YH,opr,rpr,tpr,k4,zFe,apr,npr,KH,spr,lpr,ipr,S4,WFe,dpr,cpr,ZH,mpr,fpr,gpr,R4,QFe,hpr,upr,eU,ppr,_pr,bpr,P4,HFe,vpr,Fpr,oU,Tpr,Mpr,Epr,B4,Cpr,UFe,wpr,Apr,JFe,Lpr,ypr,I4,rWe,Gd,N4,YFe,C9,xpr,KFe,$pr,tWe,Uo,w9,kpr,Od,Spr,rU,Rpr,Ppr,tU,Bpr,Ipr,Npr,A9,qpr,ZFe,jpr,Dpr,Gpr,At,L9,Opr,eTe,Vpr,Xpr,Vd,zpr,oTe,Wpr,Qpr,aU,Hpr,Upr,Jpr,q4,Ypr,uo,y9,Kpr,rTe,Zpr,e_r,Za,o_r,tTe,r_r,t_r,aTe,a_r,n_r,nTe,s_r,l_r,i_r,x9,j4,sTe,d_r,c_r,nU,m_r,f_r,g_r,D4,lTe,h_r,u_r,sU,p_r,__r,b_r,G4,v_r,iTe,F_r,T_r,dTe,M_r,E_r,O4,aWe,Xd,V4,cTe,$9,C_r,mTe,w_r,nWe,Jo,k9,A_r,zd,L_r,lU,y_r,x_r,iU,$_r,k_r,S_r,S9,R_r,fTe,P_r,B_r,I_r,Lt,R9,N_r,gTe,q_r,j_r,Wd,D_r,hTe,G_r,O_r,dU,V_r,X_r,z_r,X4,W_r,po,P9,Q_r,uTe,H_r,U_r,en,J_r,pTe,Y_r,K_r,_Te,Z_r,e2r,bTe,o2r,r2r,t2r,tt,z4,vTe,a2r,n2r,cU,s2r,l2r,i2r,W4,FTe,d2r,c2r,mU,m2r,f2r,g2r,Q4,TTe,h2r,u2r,fU,p2r,_2r,b2r,H4,MTe,v2r,F2r,gU,T2r,M2r,E2r,U4,ETe,C2r,w2r,hU,A2r,L2r,y2r,J4,x2r,CTe,$2r,k2r,wTe,S2r,R2r,Y4,sWe,Qd,K4,ATe,B9,P2r,LTe,B2r,lWe,Yo,I9,I2r,Hd,N2r,uU,q2r,j2r,pU,D2r,G2r,O2r,N9,V2r,yTe,X2r,z2r,W2r,yt,q9,Q2r,xTe,H2r,U2r,Ud,J2r,$Te,Y2r,K2r,_U,Z2r,ebr,obr,Z4,rbr,_o,j9,tbr,kTe,abr,nbr,on,sbr,STe,lbr,ibr,RTe,dbr,cbr,PTe,mbr,fbr,gbr,rn,eE,BTe,hbr,ubr,bU,pbr,_br,bbr,oE,ITe,vbr,Fbr,vU,Tbr,Mbr,Ebr,rE,NTe,Cbr,wbr,FU,Abr,Lbr,ybr,tE,qTe,xbr,$br,TU,kbr,Sbr,Rbr,aE,Pbr,jTe,Bbr,Ibr,DTe,Nbr,qbr,nE,iWe,Jd,sE,GTe,D9,jbr,OTe,Dbr,dWe,Ko,G9,Gbr,Yd,Obr,MU,Vbr,Xbr,EU,zbr,Wbr,Qbr,O9,Hbr,VTe,Ubr,Jbr,Ybr,xt,V9,Kbr,XTe,Zbr,evr,Kd,ovr,zTe,rvr,tvr,CU,avr,nvr,svr,lE,lvr,bo,X9,ivr,WTe,dvr,cvr,tn,mvr,QTe,fvr,gvr,HTe,hvr,uvr,UTe,pvr,_vr,bvr,z9,iE,JTe,vvr,Fvr,wU,Tvr,Mvr,Evr,dE,YTe,Cvr,wvr,AU,Avr,Lvr,yvr,cE,xvr,KTe,$vr,kvr,ZTe,Svr,Rvr,mE,cWe,Zd,fE,eMe,W9,Pvr,oMe,Bvr,mWe,Zo,Q9,Ivr,ec,Nvr,LU,qvr,jvr,yU,Dvr,Gvr,Ovr,H9,Vvr,rMe,Xvr,zvr,Wvr,$t,U9,Qvr,tMe,Hvr,Uvr,oc,Jvr,aMe,Yvr,Kvr,xU,Zvr,e1r,o1r,gE,r1r,vo,J9,t1r,nMe,a1r,n1r,an,s1r,sMe,l1r,i1r,lMe,d1r,c1r,iMe,m1r,f1r,g1r,dMe,hE,cMe,h1r,u1r,$U,p1r,_1r,b1r,uE,v1r,mMe,F1r,T1r,fMe,M1r,E1r,pE,fWe,rc,_E,gMe,Y9,C1r,hMe,w1r,gWe,er,K9,A1r,tc,L1r,kU,y1r,x1r,SU,$1r,k1r,S1r,Z9,R1r,uMe,P1r,B1r,I1r,kt,ex,N1r,pMe,q1r,j1r,ac,D1r,_Me,G1r,O1r,RU,V1r,X1r,z1r,bE,W1r,Fo,ox,Q1r,bMe,H1r,U1r,nn,J1r,vMe,Y1r,K1r,FMe,Z1r,eFr,TMe,oFr,rFr,tFr,at,vE,MMe,aFr,nFr,PU,sFr,lFr,iFr,FE,EMe,dFr,cFr,BU,mFr,fFr,gFr,TE,CMe,hFr,uFr,IU,pFr,_Fr,bFr,ME,wMe,vFr,FFr,NU,TFr,MFr,EFr,EE,AMe,CFr,wFr,qU,AFr,LFr,yFr,CE,xFr,LMe,$Fr,kFr,yMe,SFr,RFr,wE,hWe,nc,AE,xMe,rx,PFr,$Me,BFr,uWe,or,tx,IFr,sc,NFr,jU,qFr,jFr,DU,DFr,GFr,OFr,ax,VFr,kMe,XFr,zFr,WFr,St,nx,QFr,SMe,HFr,UFr,lc,JFr,RMe,YFr,KFr,GU,ZFr,eTr,oTr,LE,rTr,To,sx,tTr,PMe,aTr,nTr,sn,sTr,BMe,lTr,iTr,IMe,dTr,cTr,NMe,mTr,fTr,gTr,qMe,yE,jMe,hTr,uTr,OU,pTr,_Tr,bTr,xE,vTr,DMe,FTr,TTr,GMe,MTr,ETr,$E,pWe,ic,kE,OMe,lx,CTr,VMe,wTr,_We,rr,ix,ATr,dc,LTr,VU,yTr,xTr,XU,$Tr,kTr,STr,dx,RTr,XMe,PTr,BTr,ITr,Rt,cx,NTr,zMe,qTr,jTr,cc,DTr,WMe,GTr,OTr,zU,VTr,XTr,zTr,SE,WTr,$r,mx,QTr,QMe,HTr,UTr,ln,JTr,HMe,YTr,KTr,UMe,ZTr,eMr,JMe,oMr,rMr,tMr,I,RE,YMe,aMr,nMr,WU,sMr,lMr,iMr,PE,KMe,dMr,cMr,QU,mMr,fMr,gMr,BE,ZMe,hMr,uMr,HU,pMr,_Mr,bMr,IE,e4e,vMr,FMr,UU,TMr,MMr,EMr,NE,o4e,CMr,wMr,JU,AMr,LMr,yMr,qE,r4e,xMr,$Mr,YU,kMr,SMr,RMr,jE,t4e,PMr,BMr,KU,IMr,NMr,qMr,DE,a4e,jMr,DMr,ZU,GMr,OMr,VMr,GE,n4e,XMr,zMr,eJ,WMr,QMr,HMr,OE,s4e,UMr,JMr,oJ,YMr,KMr,ZMr,VE,l4e,e4r,o4r,rJ,r4r,t4r,a4r,XE,i4e,n4r,s4r,tJ,l4r,i4r,d4r,zE,d4e,c4r,m4r,aJ,f4r,g4r,h4r,WE,c4e,u4r,p4r,nJ,_4r,b4r,v4r,QE,m4e,F4r,T4r,sJ,M4r,E4r,C4r,HE,f4e,w4r,A4r,lJ,L4r,y4r,x4r,UE,g4e,$4r,k4r,iJ,S4r,R4r,P4r,JE,h4e,B4r,I4r,dJ,N4r,q4r,j4r,Zs,u4e,D4r,G4r,cJ,O4r,V4r,mJ,X4r,z4r,W4r,YE,p4e,Q4r,H4r,fJ,U4r,J4r,Y4r,KE,_4e,K4r,Z4r,gJ,eEr,oEr,rEr,ZE,b4e,tEr,aEr,hJ,nEr,sEr,lEr,eC,v4e,iEr,dEr,uJ,cEr,mEr,fEr,oC,F4e,gEr,hEr,pJ,uEr,pEr,_Er,rC,T4e,bEr,vEr,_J,FEr,TEr,MEr,tC,M4e,EEr,CEr,bJ,wEr,AEr,LEr,aC,E4e,yEr,xEr,vJ,$Er,kEr,SEr,nC,C4e,REr,PEr,FJ,BEr,IEr,NEr,sC,w4e,qEr,jEr,TJ,DEr,GEr,OEr,lC,A4e,VEr,XEr,MJ,zEr,WEr,QEr,iC,L4e,HEr,UEr,EJ,JEr,YEr,KEr,dC,y4e,ZEr,eCr,CJ,oCr,rCr,tCr,cC,x4e,aCr,nCr,wJ,sCr,lCr,iCr,mC,$4e,dCr,cCr,AJ,mCr,fCr,gCr,fC,k4e,hCr,uCr,LJ,pCr,_Cr,bCr,gC,S4e,vCr,FCr,yJ,TCr,MCr,ECr,hC,R4e,CCr,wCr,xJ,ACr,LCr,yCr,uC,P4e,xCr,$Cr,$J,kCr,SCr,RCr,pC,B4e,PCr,BCr,kJ,ICr,NCr,qCr,_C,I4e,jCr,DCr,SJ,GCr,OCr,VCr,bC,N4e,XCr,zCr,RJ,WCr,QCr,HCr,vC,q4e,UCr,JCr,PJ,YCr,KCr,ZCr,FC,j4e,e5r,o5r,BJ,r5r,t5r,a5r,TC,D4e,n5r,s5r,IJ,l5r,i5r,d5r,MC,G4e,c5r,m5r,NJ,f5r,g5r,h5r,EC,O4e,u5r,p5r,qJ,_5r,b5r,v5r,CC,V4e,F5r,T5r,jJ,M5r,E5r,C5r,wC,X4e,w5r,A5r,DJ,L5r,y5r,x5r,AC,z4e,$5r,k5r,GJ,S5r,R5r,P5r,LC,W4e,B5r,I5r,OJ,N5r,q5r,j5r,yC,Q4e,D5r,G5r,VJ,O5r,V5r,X5r,xC,bWe,mc,$C,H4e,fx,z5r,U4e,W5r,vWe,tr,gx,Q5r,fc,H5r,XJ,U5r,J5r,zJ,Y5r,K5r,Z5r,hx,e3r,J4e,o3r,r3r,t3r,Pt,ux,a3r,Y4e,n3r,s3r,gc,l3r,K4e,i3r,d3r,WJ,c3r,m3r,f3r,kC,g3r,kr,px,h3r,Z4e,u3r,p3r,dn,_3r,eEe,b3r,v3r,oEe,F3r,T3r,rEe,M3r,E3r,C3r,se,SC,tEe,w3r,A3r,QJ,L3r,y3r,x3r,RC,aEe,$3r,k3r,HJ,S3r,R3r,P3r,PC,nEe,B3r,I3r,UJ,N3r,q3r,j3r,BC,sEe,D3r,G3r,JJ,O3r,V3r,X3r,IC,lEe,z3r,W3r,YJ,Q3r,H3r,U3r,NC,iEe,J3r,Y3r,KJ,K3r,Z3r,e0r,qC,dEe,o0r,r0r,ZJ,t0r,a0r,n0r,jC,cEe,s0r,l0r,eY,i0r,d0r,c0r,DC,mEe,m0r,f0r,oY,g0r,h0r,u0r,GC,fEe,p0r,_0r,rY,b0r,v0r,F0r,OC,gEe,T0r,M0r,tY,E0r,C0r,w0r,VC,hEe,A0r,L0r,aY,y0r,x0r,$0r,XC,uEe,k0r,S0r,nY,R0r,P0r,B0r,zC,pEe,I0r,N0r,sY,q0r,j0r,D0r,WC,_Ee,G0r,O0r,lY,V0r,X0r,z0r,QC,bEe,W0r,Q0r,iY,H0r,U0r,J0r,HC,vEe,Y0r,K0r,dY,Z0r,ewr,owr,UC,FEe,rwr,twr,cY,awr,nwr,swr,JC,TEe,lwr,iwr,mY,dwr,cwr,mwr,YC,MEe,fwr,gwr,fY,hwr,uwr,pwr,KC,EEe,_wr,bwr,gY,vwr,Fwr,Twr,ZC,CEe,Mwr,Ewr,hY,Cwr,wwr,Awr,e5,wEe,Lwr,ywr,uY,xwr,$wr,kwr,o5,FWe,hc,r5,AEe,_x,Swr,LEe,Rwr,TWe,ar,bx,Pwr,uc,Bwr,pY,Iwr,Nwr,_Y,qwr,jwr,Dwr,vx,Gwr,yEe,Owr,Vwr,Xwr,Bt,Fx,zwr,xEe,Wwr,Qwr,pc,Hwr,$Ee,Uwr,Jwr,bY,Ywr,Kwr,Zwr,t5,eAr,Sr,Tx,oAr,kEe,rAr,tAr,cn,aAr,SEe,nAr,sAr,REe,lAr,iAr,PEe,dAr,cAr,mAr,Me,a5,BEe,fAr,gAr,vY,hAr,uAr,pAr,n5,IEe,_Ar,bAr,FY,vAr,FAr,TAr,s5,NEe,MAr,EAr,TY,CAr,wAr,AAr,l5,qEe,LAr,yAr,MY,xAr,$Ar,kAr,i5,jEe,SAr,RAr,EY,PAr,BAr,IAr,d5,DEe,NAr,qAr,CY,jAr,DAr,GAr,c5,GEe,OAr,VAr,wY,XAr,zAr,WAr,m5,OEe,QAr,HAr,AY,UAr,JAr,YAr,f5,VEe,KAr,ZAr,LY,e6r,o6r,r6r,g5,XEe,t6r,a6r,yY,n6r,s6r,l6r,h5,zEe,i6r,d6r,xY,c6r,m6r,f6r,u5,WEe,g6r,h6r,$Y,u6r,p6r,_6r,p5,QEe,b6r,v6r,kY,F6r,T6r,M6r,_5,MWe,_c,b5,HEe,Mx,E6r,UEe,C6r,EWe,nr,Ex,w6r,bc,A6r,SY,L6r,y6r,RY,x6r,$6r,k6r,Cx,S6r,JEe,R6r,P6r,B6r,It,wx,I6r,YEe,N6r,q6r,vc,j6r,KEe,D6r,G6r,PY,O6r,V6r,X6r,v5,z6r,Rr,Ax,W6r,ZEe,Q6r,H6r,mn,U6r,eCe,J6r,Y6r,oCe,K6r,Z6r,rCe,e7r,o7r,r7r,Ve,F5,tCe,t7r,a7r,BY,n7r,s7r,l7r,T5,aCe,i7r,d7r,IY,c7r,m7r,f7r,el,nCe,g7r,h7r,NY,u7r,p7r,qY,_7r,b7r,v7r,M5,sCe,F7r,T7r,jY,M7r,E7r,C7r,E5,lCe,w7r,A7r,DY,L7r,y7r,x7r,C5,iCe,$7r,k7r,GY,S7r,R7r,P7r,w5,dCe,B7r,I7r,OY,N7r,q7r,j7r,A5,cCe,D7r,G7r,VY,O7r,V7r,X7r,L5,CWe,Fc,y5,mCe,Lx,z7r,fCe,W7r,wWe,sr,yx,Q7r,Tc,H7r,XY,U7r,J7r,zY,Y7r,K7r,Z7r,xx,eLr,gCe,oLr,rLr,tLr,Nt,$x,aLr,hCe,nLr,sLr,Mc,lLr,uCe,iLr,dLr,WY,cLr,mLr,fLr,x5,gLr,Pr,kx,hLr,pCe,uLr,pLr,fn,_Lr,_Ce,bLr,vLr,bCe,FLr,TLr,vCe,MLr,ELr,CLr,ie,$5,FCe,wLr,ALr,QY,LLr,yLr,xLr,k5,TCe,$Lr,kLr,HY,SLr,RLr,PLr,S5,MCe,BLr,ILr,UY,NLr,qLr,jLr,R5,ECe,DLr,GLr,JY,OLr,VLr,XLr,P5,CCe,zLr,WLr,YY,QLr,HLr,ULr,B5,wCe,JLr,YLr,KY,KLr,ZLr,eyr,I5,ACe,oyr,ryr,ZY,tyr,ayr,nyr,N5,LCe,syr,lyr,eK,iyr,dyr,cyr,q5,yCe,myr,fyr,oK,gyr,hyr,uyr,j5,xCe,pyr,_yr,rK,byr,vyr,Fyr,D5,$Ce,Tyr,Myr,tK,Eyr,Cyr,wyr,G5,kCe,Ayr,Lyr,aK,yyr,xyr,$yr,O5,SCe,kyr,Syr,nK,Ryr,Pyr,Byr,V5,RCe,Iyr,Nyr,sK,qyr,jyr,Dyr,X5,PCe,Gyr,Oyr,lK,Vyr,Xyr,zyr,z5,BCe,Wyr,Qyr,iK,Hyr,Uyr,Jyr,W5,ICe,Yyr,Kyr,dK,Zyr,e8r,o8r,Q5,NCe,r8r,t8r,cK,a8r,n8r,s8r,H5,qCe,l8r,i8r,mK,d8r,c8r,m8r,U5,jCe,f8r,g8r,fK,h8r,u8r,p8r,J5,AWe,Ec,Y5,DCe,Sx,_8r,GCe,b8r,LWe,lr,Rx,v8r,Cc,F8r,gK,T8r,M8r,hK,E8r,C8r,w8r,Px,A8r,OCe,L8r,y8r,x8r,qt,Bx,$8r,VCe,k8r,S8r,wc,R8r,XCe,P8r,B8r,uK,I8r,N8r,q8r,K5,j8r,Br,Ix,D8r,zCe,G8r,O8r,gn,V8r,WCe,X8r,z8r,QCe,W8r,Q8r,HCe,H8r,U8r,J8r,ye,Z5,UCe,Y8r,K8r,pK,Z8r,e9r,o9r,e3,JCe,r9r,t9r,_K,a9r,n9r,s9r,o3,YCe,l9r,i9r,bK,d9r,c9r,m9r,r3,KCe,f9r,g9r,vK,h9r,u9r,p9r,t3,ZCe,_9r,b9r,FK,v9r,F9r,T9r,a3,e5e,M9r,E9r,TK,C9r,w9r,A9r,n3,o5e,L9r,y9r,MK,x9r,$9r,k9r,s3,r5e,S9r,R9r,EK,P9r,B9r,I9r,l3,t5e,N9r,q9r,CK,j9r,D9r,G9r,i3,a5e,O9r,V9r,wK,X9r,z9r,W9r,d3,yWe,Ac,c3,n5e,Nx,Q9r,s5e,H9r,xWe,ir,qx,U9r,Lc,J9r,AK,Y9r,K9r,LK,Z9r,exr,oxr,jx,rxr,l5e,txr,axr,nxr,jt,Dx,sxr,i5e,lxr,ixr,yc,dxr,d5e,cxr,mxr,yK,fxr,gxr,hxr,m3,uxr,Ir,Gx,pxr,c5e,_xr,bxr,hn,vxr,m5e,Fxr,Txr,f5e,Mxr,Exr,g5e,Cxr,wxr,Axr,te,f3,h5e,Lxr,yxr,xK,xxr,$xr,kxr,g3,u5e,Sxr,Rxr,$K,Pxr,Bxr,Ixr,h3,p5e,Nxr,qxr,kK,jxr,Dxr,Gxr,u3,_5e,Oxr,Vxr,SK,Xxr,zxr,Wxr,p3,b5e,Qxr,Hxr,RK,Uxr,Jxr,Yxr,_3,v5e,Kxr,Zxr,PK,e$r,o$r,r$r,b3,F5e,t$r,a$r,BK,n$r,s$r,l$r,v3,T5e,i$r,d$r,IK,c$r,m$r,f$r,F3,M5e,g$r,h$r,NK,u$r,p$r,_$r,T3,E5e,b$r,v$r,qK,F$r,T$r,M$r,M3,C5e,E$r,C$r,jK,w$r,A$r,L$r,E3,w5e,y$r,x$r,DK,$$r,k$r,S$r,C3,A5e,R$r,P$r,GK,B$r,I$r,N$r,w3,L5e,q$r,j$r,OK,D$r,G$r,O$r,A3,y5e,V$r,X$r,VK,z$r,W$r,Q$r,L3,x5e,H$r,U$r,XK,J$r,Y$r,K$r,y3,$5e,Z$r,ekr,zK,okr,rkr,tkr,x3,k5e,akr,nkr,WK,skr,lkr,ikr,$3,S5e,dkr,ckr,QK,mkr,fkr,gkr,k3,R5e,hkr,ukr,HK,pkr,_kr,bkr,S3,P5e,vkr,Fkr,UK,Tkr,Mkr,Ekr,R3,B5e,Ckr,wkr,JK,Akr,Lkr,ykr,P3,I5e,xkr,$kr,YK,kkr,Skr,Rkr,B3,N5e,Pkr,Bkr,KK,Ikr,Nkr,qkr,I3,q5e,jkr,Dkr,ZK,Gkr,Okr,Vkr,N3,j5e,Xkr,zkr,eZ,Wkr,Qkr,Hkr,q3,$We,xc,j3,D5e,Ox,Ukr,G5e,Jkr,kWe,dr,Vx,Ykr,$c,Kkr,oZ,Zkr,eSr,rZ,oSr,rSr,tSr,Xx,aSr,O5e,nSr,sSr,lSr,Dt,zx,iSr,V5e,dSr,cSr,kc,mSr,X5e,fSr,gSr,tZ,hSr,uSr,pSr,D3,_Sr,Nr,Wx,bSr,z5e,vSr,FSr,un,TSr,W5e,MSr,ESr,Q5e,CSr,wSr,H5e,ASr,LSr,ySr,ve,G3,U5e,xSr,$Sr,aZ,kSr,SSr,RSr,O3,J5e,PSr,BSr,nZ,ISr,NSr,qSr,V3,Y5e,jSr,DSr,sZ,GSr,OSr,VSr,X3,K5e,XSr,zSr,lZ,WSr,QSr,HSr,z3,Z5e,USr,JSr,iZ,YSr,KSr,ZSr,W3,e3e,eRr,oRr,dZ,rRr,tRr,aRr,Q3,o3e,nRr,sRr,cZ,lRr,iRr,dRr,H3,r3e,cRr,mRr,mZ,fRr,gRr,hRr,U3,t3e,uRr,pRr,fZ,_Rr,bRr,vRr,J3,a3e,FRr,TRr,gZ,MRr,ERr,CRr,Y3,n3e,wRr,ARr,hZ,LRr,yRr,xRr,K3,s3e,$Rr,kRr,uZ,SRr,RRr,PRr,Z3,l3e,BRr,IRr,pZ,NRr,qRr,jRr,e0,i3e,DRr,GRr,_Z,ORr,VRr,XRr,o0,d3e,zRr,WRr,bZ,QRr,HRr,URr,r0,c3e,JRr,YRr,vZ,KRr,ZRr,ePr,t0,m3e,oPr,rPr,FZ,tPr,aPr,nPr,a0,SWe,Sc,n0,f3e,Qx,sPr,g3e,lPr,RWe,cr,Hx,iPr,Rc,dPr,TZ,cPr,mPr,MZ,fPr,gPr,hPr,Ux,uPr,h3e,pPr,_Pr,bPr,Gt,Jx,vPr,u3e,FPr,TPr,Pc,MPr,p3e,EPr,CPr,EZ,wPr,APr,LPr,s0,yPr,qr,Yx,xPr,_3e,$Pr,kPr,pn,SPr,b3e,RPr,PPr,v3e,BPr,IPr,F3e,NPr,qPr,jPr,Kx,l0,T3e,DPr,GPr,CZ,OPr,VPr,XPr,i0,M3e,zPr,WPr,wZ,QPr,HPr,UPr,d0,PWe,Bc,c0,E3e,Zx,JPr,C3e,YPr,BWe,mr,e$,KPr,Ic,ZPr,AZ,eBr,oBr,LZ,rBr,tBr,aBr,o$,nBr,w3e,sBr,lBr,iBr,Ot,r$,dBr,A3e,cBr,mBr,Nc,fBr,L3e,gBr,hBr,yZ,uBr,pBr,_Br,m0,bBr,jr,t$,vBr,y3e,FBr,TBr,_n,MBr,x3e,EBr,CBr,$3e,wBr,ABr,k3e,LBr,yBr,xBr,S3e,f0,R3e,$Br,kBr,xZ,SBr,RBr,PBr,g0,IWe,qc,h0,P3e,a$,BBr,B3e,IBr,NWe,fr,n$,NBr,jc,qBr,$Z,jBr,DBr,kZ,GBr,OBr,VBr,s$,XBr,I3e,zBr,WBr,QBr,Vt,l$,HBr,N3e,UBr,JBr,Dc,YBr,q3e,KBr,ZBr,SZ,eIr,oIr,rIr,u0,tIr,Dr,i$,aIr,j3e,nIr,sIr,bn,lIr,D3e,iIr,dIr,G3e,cIr,mIr,O3e,fIr,gIr,hIr,de,p0,V3e,uIr,pIr,RZ,_Ir,bIr,vIr,_0,X3e,FIr,TIr,PZ,MIr,EIr,CIr,b0,z3e,wIr,AIr,BZ,LIr,yIr,xIr,v0,W3e,$Ir,kIr,IZ,SIr,RIr,PIr,F0,Q3e,BIr,IIr,NZ,NIr,qIr,jIr,T0,H3e,DIr,GIr,qZ,OIr,VIr,XIr,M0,U3e,zIr,WIr,jZ,QIr,HIr,UIr,E0,J3e,JIr,YIr,DZ,KIr,ZIr,eNr,C0,Y3e,oNr,rNr,GZ,tNr,aNr,nNr,w0,K3e,sNr,lNr,OZ,iNr,dNr,cNr,A0,Z3e,mNr,fNr,VZ,gNr,hNr,uNr,L0,e0e,pNr,_Nr,XZ,bNr,vNr,FNr,y0,o0e,TNr,MNr,zZ,ENr,CNr,wNr,x0,r0e,ANr,LNr,WZ,yNr,xNr,$Nr,$0,t0e,kNr,SNr,QZ,RNr,PNr,BNr,k0,a0e,INr,NNr,HZ,qNr,jNr,DNr,S0,n0e,GNr,ONr,UZ,VNr,XNr,zNr,R0,s0e,WNr,QNr,JZ,HNr,UNr,JNr,P0,l0e,YNr,KNr,YZ,ZNr,eqr,oqr,B0,i0e,rqr,tqr,KZ,aqr,nqr,sqr,I0,qWe,Gc,N0,d0e,d$,lqr,c0e,iqr,jWe,gr,c$,dqr,Oc,cqr,ZZ,mqr,fqr,eee,gqr,hqr,uqr,m$,pqr,m0e,_qr,bqr,vqr,Xt,f$,Fqr,f0e,Tqr,Mqr,Vc,Eqr,g0e,Cqr,wqr,oee,Aqr,Lqr,yqr,q0,xqr,Gr,g$,$qr,h0e,kqr,Sqr,vn,Rqr,u0e,Pqr,Bqr,p0e,Iqr,Nqr,_0e,qqr,jqr,Dqr,ce,j0,b0e,Gqr,Oqr,ree,Vqr,Xqr,zqr,D0,v0e,Wqr,Qqr,tee,Hqr,Uqr,Jqr,G0,F0e,Yqr,Kqr,aee,Zqr,ejr,ojr,O0,T0e,rjr,tjr,nee,ajr,njr,sjr,V0,M0e,ljr,ijr,see,djr,cjr,mjr,X0,E0e,fjr,gjr,lee,hjr,ujr,pjr,z0,C0e,_jr,bjr,iee,vjr,Fjr,Tjr,W0,w0e,Mjr,Ejr,dee,Cjr,wjr,Ajr,Q0,A0e,Ljr,yjr,cee,xjr,$jr,kjr,H0,L0e,Sjr,Rjr,mee,Pjr,Bjr,Ijr,U0,y0e,Njr,qjr,fee,jjr,Djr,Gjr,J0,x0e,Ojr,Vjr,gee,Xjr,zjr,Wjr,Y0,$0e,Qjr,Hjr,hee,Ujr,Jjr,Yjr,K0,k0e,Kjr,Zjr,uee,eDr,oDr,rDr,Z0,S0e,tDr,aDr,pee,nDr,sDr,lDr,ew,R0e,iDr,dDr,_ee,cDr,mDr,fDr,ow,P0e,gDr,hDr,bee,uDr,pDr,_Dr,rw,B0e,bDr,vDr,vee,FDr,TDr,MDr,tw,I0e,EDr,CDr,Fee,wDr,ADr,LDr,aw,N0e,yDr,xDr,Tee,$Dr,kDr,SDr,nw,DWe,Xc,sw,q0e,h$,RDr,j0e,PDr,GWe,hr,u$,BDr,zc,IDr,Mee,NDr,qDr,Eee,jDr,DDr,GDr,p$,ODr,D0e,VDr,XDr,zDr,zt,_$,WDr,G0e,QDr,HDr,Wc,UDr,O0e,JDr,YDr,Cee,KDr,ZDr,eGr,lw,oGr,Or,b$,rGr,V0e,tGr,aGr,Fn,nGr,X0e,sGr,lGr,z0e,iGr,dGr,W0e,cGr,mGr,fGr,Q0e,iw,H0e,gGr,hGr,wee,uGr,pGr,_Gr,dw,OWe,Qc,cw,U0e,v$,bGr,J0e,vGr,VWe,ur,F$,FGr,Hc,TGr,Aee,MGr,EGr,Lee,CGr,wGr,AGr,T$,LGr,Y0e,yGr,xGr,$Gr,Wt,M$,kGr,K0e,SGr,RGr,Uc,PGr,Z0e,BGr,IGr,yee,NGr,qGr,jGr,mw,DGr,Vr,E$,GGr,ewe,OGr,VGr,Tn,XGr,owe,zGr,WGr,rwe,QGr,HGr,twe,UGr,JGr,YGr,awe,fw,nwe,KGr,ZGr,xee,eOr,oOr,rOr,gw,XWe,Jc,hw,swe,C$,tOr,lwe,aOr,zWe,pr,w$,nOr,Yc,sOr,$ee,lOr,iOr,kee,dOr,cOr,mOr,A$,fOr,iwe,gOr,hOr,uOr,Qt,L$,pOr,dwe,_Or,bOr,Kc,vOr,cwe,FOr,TOr,See,MOr,EOr,COr,uw,wOr,Xr,y$,AOr,mwe,LOr,yOr,Mn,xOr,fwe,$Or,kOr,gwe,SOr,ROr,hwe,POr,BOr,IOr,oe,pw,uwe,NOr,qOr,Ree,jOr,DOr,GOr,_w,pwe,OOr,VOr,Pee,XOr,zOr,WOr,bw,_we,QOr,HOr,Bee,UOr,JOr,YOr,vw,bwe,KOr,ZOr,Iee,eVr,oVr,rVr,Fw,vwe,tVr,aVr,Nee,nVr,sVr,lVr,Tw,Fwe,iVr,dVr,qee,cVr,mVr,fVr,Mw,Twe,gVr,hVr,jee,uVr,pVr,_Vr,Ew,Mwe,bVr,vVr,Dee,FVr,TVr,MVr,Cw,Ewe,EVr,CVr,Gee,wVr,AVr,LVr,ww,Cwe,yVr,xVr,Oee,$Vr,kVr,SVr,Aw,wwe,RVr,PVr,Vee,BVr,IVr,NVr,Lw,Awe,qVr,jVr,Xee,DVr,GVr,OVr,yw,Lwe,VVr,XVr,zee,zVr,WVr,QVr,xw,ywe,HVr,UVr,Wee,JVr,YVr,KVr,$w,xwe,ZVr,eXr,Qee,oXr,rXr,tXr,kw,$we,aXr,nXr,Hee,sXr,lXr,iXr,Sw,kwe,dXr,cXr,Uee,mXr,fXr,gXr,Rw,Swe,hXr,uXr,Jee,pXr,_Xr,bXr,Pw,Rwe,vXr,FXr,Yee,TXr,MXr,EXr,Bw,Pwe,CXr,wXr,Kee,AXr,LXr,yXr,Iw,Bwe,xXr,$Xr,Zee,kXr,SXr,RXr,Nw,Iwe,PXr,BXr,eoe,IXr,NXr,qXr,qw,Nwe,jXr,DXr,ooe,GXr,OXr,VXr,jw,qwe,XXr,zXr,roe,WXr,QXr,HXr,Dw,jwe,UXr,JXr,toe,YXr,KXr,ZXr,Gw,Dwe,ezr,ozr,aoe,rzr,tzr,azr,Ow,Gwe,nzr,szr,noe,lzr,izr,dzr,Vw,WWe,Zc,Xw,Owe,x$,czr,Vwe,mzr,QWe,_r,$$,fzr,em,gzr,soe,hzr,uzr,loe,pzr,_zr,bzr,k$,vzr,Xwe,Fzr,Tzr,Mzr,Ht,S$,Ezr,zwe,Czr,wzr,om,Azr,Wwe,Lzr,yzr,ioe,xzr,$zr,kzr,zw,Szr,zr,R$,Rzr,Qwe,Pzr,Bzr,En,Izr,Hwe,Nzr,qzr,Uwe,jzr,Dzr,Jwe,Gzr,Ozr,Vzr,xe,Ww,Ywe,Xzr,zzr,doe,Wzr,Qzr,Hzr,Qw,Kwe,Uzr,Jzr,coe,Yzr,Kzr,Zzr,Hw,Zwe,eWr,oWr,moe,rWr,tWr,aWr,Uw,eAe,nWr,sWr,foe,lWr,iWr,dWr,Jw,oAe,cWr,mWr,goe,fWr,gWr,hWr,Yw,rAe,uWr,pWr,hoe,_Wr,bWr,vWr,Kw,tAe,FWr,TWr,uoe,MWr,EWr,CWr,Zw,aAe,wWr,AWr,poe,LWr,yWr,xWr,eA,nAe,$Wr,kWr,_oe,SWr,RWr,PWr,oA,sAe,BWr,IWr,boe,NWr,qWr,jWr,rA,HWe,rm,tA,lAe,P$,DWr,iAe,GWr,UWe,br,B$,OWr,tm,VWr,voe,XWr,zWr,Foe,WWr,QWr,HWr,I$,UWr,dAe,JWr,YWr,KWr,Ut,N$,ZWr,cAe,eQr,oQr,am,rQr,mAe,tQr,aQr,Toe,nQr,sQr,lQr,aA,iQr,Wr,q$,dQr,fAe,cQr,mQr,Cn,fQr,gAe,gQr,hQr,hAe,uQr,pQr,uAe,_Qr,bQr,vQr,Ee,nA,pAe,FQr,TQr,Moe,MQr,EQr,CQr,sA,_Ae,wQr,AQr,Eoe,LQr,yQr,xQr,lA,bAe,$Qr,kQr,Coe,SQr,RQr,PQr,iA,vAe,BQr,IQr,woe,NQr,qQr,jQr,dA,FAe,DQr,GQr,Aoe,OQr,VQr,XQr,cA,TAe,zQr,WQr,Loe,QQr,HQr,UQr,mA,MAe,JQr,YQr,yoe,KQr,ZQr,eHr,fA,EAe,oHr,rHr,xoe,tHr,aHr,nHr,gA,CAe,sHr,lHr,$oe,iHr,dHr,cHr,hA,wAe,mHr,fHr,koe,gHr,hHr,uHr,uA,AAe,pHr,_Hr,Soe,bHr,vHr,FHr,pA,LAe,THr,MHr,Roe,EHr,CHr,wHr,_A,yAe,AHr,LHr,Poe,yHr,xHr,$Hr,bA,JWe,nm,vA,xAe,j$,kHr,$Ae,SHr,YWe,vr,D$,RHr,sm,PHr,Boe,BHr,IHr,Ioe,NHr,qHr,jHr,G$,DHr,kAe,GHr,OHr,VHr,Jt,O$,XHr,SAe,zHr,WHr,lm,QHr,RAe,HHr,UHr,Noe,JHr,YHr,KHr,FA,ZHr,Qr,V$,eUr,PAe,oUr,rUr,wn,tUr,BAe,aUr,nUr,IAe,sUr,lUr,NAe,iUr,dUr,cUr,$e,TA,qAe,mUr,fUr,qoe,gUr,hUr,uUr,MA,jAe,pUr,_Ur,joe,bUr,vUr,FUr,EA,DAe,TUr,MUr,Doe,EUr,CUr,wUr,CA,GAe,AUr,LUr,Goe,yUr,xUr,$Ur,wA,OAe,kUr,SUr,Ooe,RUr,PUr,BUr,AA,VAe,IUr,NUr,Voe,qUr,jUr,DUr,LA,XAe,GUr,OUr,Xoe,VUr,XUr,zUr,yA,zAe,WUr,QUr,zoe,HUr,UUr,JUr,xA,WAe,YUr,KUr,Woe,ZUr,eJr,oJr,$A,QAe,rJr,tJr,Qoe,aJr,nJr,sJr,kA,KWe,im,SA,HAe,X$,lJr,UAe,iJr,ZWe,Fr,z$,dJr,dm,cJr,Hoe,mJr,fJr,Uoe,gJr,hJr,uJr,W$,pJr,JAe,_Jr,bJr,vJr,Yt,Q$,FJr,YAe,TJr,MJr,cm,EJr,KAe,CJr,wJr,Joe,AJr,LJr,yJr,RA,xJr,Hr,H$,$Jr,ZAe,kJr,SJr,An,RJr,e6e,PJr,BJr,o6e,IJr,NJr,r6e,qJr,jJr,DJr,ke,PA,t6e,GJr,OJr,Yoe,VJr,XJr,zJr,BA,a6e,WJr,QJr,Koe,HJr,UJr,JJr,IA,n6e,YJr,KJr,Zoe,ZJr,eYr,oYr,NA,s6e,rYr,tYr,ere,aYr,nYr,sYr,qA,l6e,lYr,iYr,ore,dYr,cYr,mYr,jA,i6e,fYr,gYr,rre,hYr,uYr,pYr,DA,d6e,_Yr,bYr,tre,vYr,FYr,TYr,GA,c6e,MYr,EYr,are,CYr,wYr,AYr,OA,m6e,LYr,yYr,nre,xYr,$Yr,kYr,VA,f6e,SYr,RYr,sre,PYr,BYr,IYr,XA,eQe,mm,zA,g6e,U$,NYr,h6e,qYr,oQe,Tr,J$,jYr,fm,DYr,lre,GYr,OYr,ire,VYr,XYr,zYr,Y$,WYr,u6e,QYr,HYr,UYr,Kt,K$,JYr,p6e,YYr,KYr,gm,ZYr,_6e,eKr,oKr,dre,rKr,tKr,aKr,WA,nKr,Ur,Z$,sKr,b6e,lKr,iKr,Ln,dKr,v6e,cKr,mKr,F6e,fKr,gKr,T6e,hKr,uKr,pKr,Se,QA,M6e,_Kr,bKr,cre,vKr,FKr,TKr,HA,E6e,MKr,EKr,mre,CKr,wKr,AKr,UA,C6e,LKr,yKr,fre,xKr,$Kr,kKr,JA,w6e,SKr,RKr,gre,PKr,BKr,IKr,YA,A6e,NKr,qKr,hre,jKr,DKr,GKr,KA,L6e,OKr,VKr,ure,XKr,zKr,WKr,ZA,y6e,QKr,HKr,pre,UKr,JKr,YKr,e6,x6e,KKr,ZKr,_re,eZr,oZr,rZr,o6,$6e,tZr,aZr,bre,nZr,sZr,lZr,r6,k6e,iZr,dZr,vre,cZr,mZr,fZr,t6,rQe,hm,a6,S6e,ek,gZr,R6e,hZr,tQe,Mr,ok,uZr,um,pZr,Fre,_Zr,bZr,Tre,vZr,FZr,TZr,rk,MZr,P6e,EZr,CZr,wZr,Zt,tk,AZr,B6e,LZr,yZr,pm,xZr,I6e,$Zr,kZr,Mre,SZr,RZr,PZr,n6,BZr,Jr,ak,IZr,N6e,NZr,qZr,yn,jZr,q6e,DZr,GZr,j6e,OZr,VZr,D6e,XZr,zZr,WZr,Re,s6,G6e,QZr,HZr,Ere,UZr,JZr,YZr,l6,O6e,KZr,ZZr,Cre,eet,oet,ret,i6,V6e,tet,aet,wre,net,set,iet,d6,X6e,det,cet,Are,met,fet,get,c6,z6e,het,uet,Lre,pet,_et,bet,m6,W6e,vet,Fet,yre,Tet,Met,Eet,f6,Q6e,Cet,wet,xre,Aet,Let,yet,g6,H6e,xet,$et,$re,ket,Set,Ret,h6,U6e,Pet,Bet,kre,Iet,Net,qet,u6,J6e,jet,Det,Sre,Get,Oet,Vet,p6,aQe,_m,_6,Y6e,nk,Xet,K6e,zet,nQe,Er,sk,Wet,bm,Qet,Rre,Het,Uet,Pre,Jet,Yet,Ket,lk,Zet,Z6e,eot,oot,rot,ea,ik,tot,e7e,aot,not,vm,sot,o7e,lot,iot,Bre,dot,cot,mot,b6,fot,Yr,dk,got,r7e,hot,uot,xn,pot,t7e,_ot,bot,a7e,vot,Fot,n7e,Tot,Mot,Eot,Xe,v6,s7e,Cot,wot,Ire,Aot,Lot,yot,F6,l7e,xot,$ot,Nre,kot,Sot,Rot,T6,i7e,Pot,Bot,qre,Iot,Not,qot,M6,d7e,jot,Dot,jre,Got,Oot,Vot,E6,c7e,Xot,zot,Dre,Wot,Qot,Hot,C6,m7e,Uot,Jot,Gre,Yot,Kot,Zot,w6,f7e,ert,ort,Ore,rrt,trt,art,A6,g7e,nrt,srt,Vre,lrt,irt,drt,L6,sQe,Fm,y6,h7e,ck,crt,u7e,mrt,lQe,Cr,mk,frt,Tm,grt,Xre,hrt,urt,zre,prt,_rt,brt,fk,vrt,p7e,Frt,Trt,Mrt,oa,gk,Ert,_7e,Crt,wrt,Mm,Art,b7e,Lrt,yrt,Wre,xrt,$rt,krt,x6,Srt,Kr,hk,Rrt,v7e,Prt,Brt,$n,Irt,F7e,Nrt,qrt,T7e,jrt,Drt,M7e,Grt,Ort,Vrt,ze,$6,E7e,Xrt,zrt,Qre,Wrt,Qrt,Hrt,k6,C7e,Urt,Jrt,Hre,Yrt,Krt,Zrt,S6,w7e,ett,ott,Ure,rtt,ttt,att,R6,A7e,ntt,stt,Jre,ltt,itt,dtt,P6,L7e,ctt,mtt,Yre,ftt,gtt,htt,B6,y7e,utt,ptt,Kre,_tt,btt,vtt,I6,x7e,Ftt,Ttt,Zre,Mtt,Ett,Ctt,N6,$7e,wtt,Att,ete,Ltt,ytt,xtt,q6,iQe,Em,j6,k7e,uk,$tt,S7e,ktt,dQe,wr,pk,Stt,Cm,Rtt,ote,Ptt,Btt,rte,Itt,Ntt,qtt,_k,jtt,R7e,Dtt,Gtt,Ott,ra,bk,Vtt,P7e,Xtt,ztt,wm,Wtt,B7e,Qtt,Htt,tte,Utt,Jtt,Ytt,D6,Ktt,Zr,vk,Ztt,I7e,eat,oat,kn,rat,N7e,tat,aat,q7e,nat,sat,j7e,lat,iat,dat,D7e,G6,G7e,cat,mat,ate,fat,gat,hat,O6,cQe,Am,V6,O7e,Fk,uat,V7e,pat,mQe,Ar,Tk,_at,Lm,bat,nte,vat,Fat,ste,Tat,Mat,Eat,Mk,Cat,X7e,wat,Aat,Lat,ta,Ek,yat,z7e,xat,$at,ym,kat,W7e,Sat,Rat,lte,Pat,Bat,Iat,X6,Nat,et,Ck,qat,Q7e,jat,Dat,Sn,Gat,H7e,Oat,Vat,U7e,Xat,zat,J7e,Wat,Qat,Hat,wk,z6,Y7e,Uat,Jat,ite,Yat,Kat,Zat,W6,K7e,ent,ont,dte,rnt,tnt,ant,Q6,fQe,xm,H6,Z7e,Ak,nnt,eLe,snt,gQe,Lr,Lk,lnt,$m,int,cte,dnt,cnt,mte,mnt,fnt,gnt,yk,hnt,oLe,unt,pnt,_nt,aa,xk,bnt,rLe,vnt,Fnt,km,Tnt,tLe,Mnt,Ent,fte,Cnt,wnt,Ant,U6,Lnt,ot,$k,ynt,aLe,xnt,$nt,Rn,knt,nLe,Snt,Rnt,sLe,Pnt,Bnt,lLe,Int,Nnt,qnt,iLe,J6,dLe,jnt,Dnt,gte,Gnt,Ont,Vnt,Y6,hQe;return c=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Ty=new re({}),My=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Dm=new Xnt({props:{warning:!0,$$slots:{default:[tJt]},$$scope:{ctx:$}}}),Ey=new re({}),Cy=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L617"}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L640"}}),oh=new N({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[aJt]},$$scope:{ctx:$}}}),yy=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L763"}}),xy=new re({}),$y=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L411"}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L425"}}),Nh=new N({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[nJt]},$$scope:{ctx:$}}}),Py=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L624"}}),By=new re({}),Iy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L197"}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L211"}}),Mu=new Xnt({props:{$$slots:{default:[sJt]},$$scope:{ctx:$}}}),Eu=new N({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[lJt]},$$scope:{ctx:$}}}),Dy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L338"}}),Gy=new re({}),Oy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L90"}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L104"}}),zu=new Xnt({props:{$$slots:{default:[iJt]},$$scope:{ctx:$}}}),Wu=new N({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[dJt]},$$scope:{ctx:$}}}),Wy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L257"}}),Qy=new re({}),Hy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L790"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Uu=new N({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[cJt]},$$scope:{ctx:$}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),r2=new N({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[mJt]},$$scope:{ctx:$}}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L797"}}),o8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),a2=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[fJt]},$$scope:{ctx:$}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Y2=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[gJt]},$$scope:{ctx:$}}}),t8=new re({}),a8=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L812"}}),s8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Z2=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[hJt]},$$scope:{ctx:$}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Gb=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[uJt]},$$scope:{ctx:$}}}),i8=new re({}),d8=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L819"}}),m8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Vb=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[pJt]},$$scope:{ctx:$}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),xv=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[_Jt]},$$scope:{ctx:$}}}),g8=new re({}),h8=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L826"}}),p8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),kv=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[bJt]},$$scope:{ctx:$}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Kv=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[vJt]},$$scope:{ctx:$}}}),b8=new re({}),v8=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L835"}}),T8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),e1=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[FJt]},$$scope:{ctx:$}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z1=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[TJt]},$$scope:{ctx:$}}}),E8=new re({}),C8=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L880"}}),A8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[MJt]},$$scope:{ctx:$}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),RF=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[EJt]},$$scope:{ctx:$}}}),y8=new re({}),x8=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L887"}}),k8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),BF=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[CJt]},$$scope:{ctx:$}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),VF=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[wJt]},$$scope:{ctx:$}}}),R8=new re({}),P8=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L873"}}),I8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zF=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[AJt]},$$scope:{ctx:$}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),xT=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[LJt]},$$scope:{ctx:$}}}),q8=new re({}),j8=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L844"}}),G8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),kT=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[yJt]},$$scope:{ctx:$}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),TM=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[xJt]},$$scope:{ctx:$}}}),V8=new re({}),X8=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L851"}}),W8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),EM=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[$Jt]},$$scope:{ctx:$}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),AM=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[kJt]},$$scope:{ctx:$}}}),H8=new re({}),U8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L896"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yM=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[SJt]},$$scope:{ctx:$}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),XM=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[RJt]},$$scope:{ctx:$}}}),Z8=new re({}),e9=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L935"}}),r9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),WM=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[PJt]},$$scope:{ctx:$}}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),UM=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[BJt]},$$scope:{ctx:$}}}),a9=new re({}),n9=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L862"}}),l9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),YM=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[IJt]},$$scope:{ctx:$}}}),i9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),e4=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[NJt]},$$scope:{ctx:$}}}),d9=new re({}),c9=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L942"}}),f9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),r4=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[qJt]},$$scope:{ctx:$}}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),g4=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[jJt]},$$scope:{ctx:$}}}),h9=new re({}),u9=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L965"}}),_9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),u4=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[DJt]},$$scope:{ctx:$}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),M4=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[GJt]},$$scope:{ctx:$}}}),v9=new re({}),F9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L949"}}),M9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),C4=new N({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[OJt]},$$scope:{ctx:$}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),I4=new N({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[VJt]},$$scope:{ctx:$}}}),C9=new re({}),w9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L956"}}),L9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),q4=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[XJt]},$$scope:{ctx:$}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),O4=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[zJt]},$$scope:{ctx:$}}}),$9=new re({}),k9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L974"}}),R9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),X4=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[WJt]},$$scope:{ctx:$}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Y4=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[QJt]},$$scope:{ctx:$}}}),B9=new re({}),I9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L981"}}),q9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Z4=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[HJt]},$$scope:{ctx:$}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),nE=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[UJt]},$$scope:{ctx:$}}}),D9=new re({}),G9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L928"}}),V9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),lE=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[JJt]},$$scope:{ctx:$}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),mE=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[YJt]},$$scope:{ctx:$}}}),W9=new re({}),Q9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L903"}}),U9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gE=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[KJt]},$$scope:{ctx:$}}}),J9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),pE=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[ZJt]},$$scope:{ctx:$}}}),Y9=new re({}),K9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L910"}}),ex=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),bE=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[eYt]},$$scope:{ctx:$}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),wE=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[oYt]},$$scope:{ctx:$}}}),rx=new re({}),tx=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L919"}}),nx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),LE=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[rYt]},$$scope:{ctx:$}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$E=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[tYt]},$$scope:{ctx:$}}}),lx=new re({}),ix=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),SE=new N({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[aYt]},$$scope:{ctx:$}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),xC=new N({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[nYt]},$$scope:{ctx:$}}}),fx=new re({}),gx=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),ux=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),kC=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[sYt]},$$scope:{ctx:$}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),o5=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[lYt]},$$scope:{ctx:$}}}),_x=new re({}),bx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),t5=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[iYt]},$$scope:{ctx:$}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_5=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[dYt]},$$scope:{ctx:$}}}),Mx=new re({}),Ex=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),wx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),v5=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[cYt]},$$scope:{ctx:$}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),L5=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[mYt]},$$scope:{ctx:$}}}),Lx=new re({}),yx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),$x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),x5=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[fYt]},$$scope:{ctx:$}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),J5=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[gYt]},$$scope:{ctx:$}}}),Sx=new re({}),Rx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L486"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),K5=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[hYt]},$$scope:{ctx:$}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d3=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[uYt]},$$scope:{ctx:$}}}),Nx=new re({}),qx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L495"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),m3=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[pYt]},$$scope:{ctx:$}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),q3=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[_Yt]},$$scope:{ctx:$}}}),Ox=new re({}),Vx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L531"}}),zx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),D3=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[bYt]},$$scope:{ctx:$}}}),Wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a0=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[vYt]},$$scope:{ctx:$}}}),Qx=new re({}),Hx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L538"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s0=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[FYt]},$$scope:{ctx:$}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d0=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[TYt]},$$scope:{ctx:$}}}),Zx=new re({}),e$=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L511"}}),r$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),m0=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[MYt]},$$scope:{ctx:$}}}),t$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),g0=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[EYt]},$$scope:{ctx:$}}}),a$=new re({}),n$=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L522"}}),l$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),u0=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[CYt]},$$scope:{ctx:$}}}),i$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),I0=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[wYt]},$$scope:{ctx:$}}}),d$=new re({}),c$=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),f$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),q0=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[AYt]},$$scope:{ctx:$}}}),g$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),nw=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[LYt]},$$scope:{ctx:$}}}),h$=new re({}),u$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),_$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),lw=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[yYt]},$$scope:{ctx:$}}}),b$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),dw=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[xYt]},$$scope:{ctx:$}}}),v$=new re({}),F$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L547"}}),M$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),mw=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[$Yt]},$$scope:{ctx:$}}}),E$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gw=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[kYt]},$$scope:{ctx:$}}}),C$=new re({}),w$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),L$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uw=new N({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[SYt]},$$scope:{ctx:$}}}),y$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Vw=new N({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[RYt]},$$scope:{ctx:$}}}),x$=new re({}),$$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),S$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zw=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[PYt]},$$scope:{ctx:$}}}),R$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rA=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[BYt]},$$scope:{ctx:$}}}),P$=new re({}),B$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),N$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),aA=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[IYt]},$$scope:{ctx:$}}}),q$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bA=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[NYt]},$$scope:{ctx:$}}}),j$=new re({}),D$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),O$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),FA=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[qYt]},$$scope:{ctx:$}}}),V$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kA=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[jYt]},$$scope:{ctx:$}}}),X$=new re({}),z$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),RA=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[DYt]},$$scope:{ctx:$}}}),H$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),XA=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[GYt]},$$scope:{ctx:$}}}),U$=new re({}),J$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),K$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),WA=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[OYt]},$$scope:{ctx:$}}}),Z$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),t6=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[VYt]},$$scope:{ctx:$}}}),ek=new re({}),ok=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),tk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),n6=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[XYt]},$$scope:{ctx:$}}}),ak=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),p6=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[zYt]},$$scope:{ctx:$}}}),nk=new re({}),sk=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),ik=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),b6=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[WYt]},$$scope:{ctx:$}}}),dk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),L6=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[QYt]},$$scope:{ctx:$}}}),ck=new re({}),mk=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),gk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),x6=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[HYt]},$$scope:{ctx:$}}}),hk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),q6=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[UYt]},$$scope:{ctx:$}}}),uk=new re({}),pk=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),bk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),D6=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[JYt]},$$scope:{ctx:$}}}),vk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),O6=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[YYt]},$$scope:{ctx:$}}}),Fk=new re({}),Tk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),Ek=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),X6=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[KYt]},$$scope:{ctx:$}}}),Ck=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Q6=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ZYt]},$$scope:{ctx:$}}}),Ak=new re({}),Lk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),xk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),U6=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[eKt]},$$scope:{ctx:$}}}),$k=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Y6=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[oKt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(c.$$.fragment),h=l(),wo=a("span"),$i=o("Auto Classes"),Bm=l(),lt=a("p"),ki=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Si=a("code"),_y=o("from_pretrained()"),Im=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),Ri=o("Instantiating one of "),Bn=a("a"),by=o("AutoConfig"),In=o(", "),Nn=a("a"),vy=o("AutoModel"),Pi=o(`, and
`),qn=a("a"),Fy=o("AutoTokenizer"),Bi=o(" will directly create a class of the relevant architecture. For instance"),Nm=l(),F(Sa.$$.fragment),He=l(),Ae=a("p"),eR=o("will create a model that is an instance of "),Ii=a("a"),oR=o("BertModel"),rR=o("."),Ao=l(),Ra=a("p"),tR=o("There is one class of "),qm=a("code"),aR=o("AutoModel"),CUe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),dze=l(),Ni=a("h2"),jm=a("a"),lne=a("span"),F(Ty.$$.fragment),wUe=l(),ine=a("span"),AUe=o("Extending the Auto Classes"),cze=l(),jn=a("p"),LUe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),dne=a("code"),yUe=o("NewModel"),xUe=o(", make sure you have a "),cne=a("code"),$Ue=o("NewModelConfig"),kUe=o(` then you can add those to the auto
classes like this:`),mze=l(),F(My.$$.fragment),fze=l(),nR=a("p"),SUe=o("You will then be able to use the auto classes like you would usually do!"),gze=l(),F(Dm.$$.fragment),hze=l(),qi=a("h2"),Gm=a("a"),mne=a("span"),F(Ey.$$.fragment),RUe=l(),fne=a("span"),PUe=o("AutoConfig"),uze=l(),Lo=a("div"),F(Cy.$$.fragment),BUe=l(),wy=a("p"),IUe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),sR=a("a"),NUe=o("from_pretrained()"),qUe=o(" class method."),jUe=l(),Ay=a("p"),DUe=o("This class cannot be instantiated directly using "),gne=a("code"),GUe=o("__init__()"),OUe=o(" (throws an error)."),VUe=l(),yr=a("div"),F(Ly.$$.fragment),XUe=l(),hne=a("p"),zUe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),WUe=l(),ji=a("p"),QUe=o("The configuration class to instantiate is selected based on the "),une=a("code"),HUe=o("model_type"),UUe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),pne=a("code"),JUe=o("pretrained_model_name_or_path"),YUe=o(":"),KUe=l(),A=a("ul"),Om=a("li"),_ne=a("strong"),ZUe=o("albert"),eJe=o(" \u2014 "),lR=a("a"),oJe=o("AlbertConfig"),rJe=o(" (ALBERT model)"),tJe=l(),Vm=a("li"),bne=a("strong"),aJe=o("bart"),nJe=o(" \u2014 "),iR=a("a"),sJe=o("BartConfig"),lJe=o(" (BART model)"),iJe=l(),Xm=a("li"),vne=a("strong"),dJe=o("beit"),cJe=o(" \u2014 "),dR=a("a"),mJe=o("BeitConfig"),fJe=o(" (BEiT model)"),gJe=l(),zm=a("li"),Fne=a("strong"),hJe=o("bert"),uJe=o(" \u2014 "),cR=a("a"),pJe=o("BertConfig"),_Je=o(" (BERT model)"),bJe=l(),Wm=a("li"),Tne=a("strong"),vJe=o("bert-generation"),FJe=o(" \u2014 "),mR=a("a"),TJe=o("BertGenerationConfig"),MJe=o(" (Bert Generation model)"),EJe=l(),Qm=a("li"),Mne=a("strong"),CJe=o("big_bird"),wJe=o(" \u2014 "),fR=a("a"),AJe=o("BigBirdConfig"),LJe=o(" (BigBird model)"),yJe=l(),Hm=a("li"),Ene=a("strong"),xJe=o("bigbird_pegasus"),$Je=o(" \u2014 "),gR=a("a"),kJe=o("BigBirdPegasusConfig"),SJe=o(" (BigBird-Pegasus model)"),RJe=l(),Um=a("li"),Cne=a("strong"),PJe=o("blenderbot"),BJe=o(" \u2014 "),hR=a("a"),IJe=o("BlenderbotConfig"),NJe=o(" (Blenderbot model)"),qJe=l(),Jm=a("li"),wne=a("strong"),jJe=o("blenderbot-small"),DJe=o(" \u2014 "),uR=a("a"),GJe=o("BlenderbotSmallConfig"),OJe=o(" (BlenderbotSmall model)"),VJe=l(),Ym=a("li"),Ane=a("strong"),XJe=o("bloom"),zJe=o(" \u2014 "),pR=a("a"),WJe=o("BloomConfig"),QJe=o(" (BLOOM model)"),HJe=l(),Km=a("li"),Lne=a("strong"),UJe=o("camembert"),JJe=o(" \u2014 "),_R=a("a"),YJe=o("CamembertConfig"),KJe=o(" (CamemBERT model)"),ZJe=l(),Zm=a("li"),yne=a("strong"),eYe=o("canine"),oYe=o(" \u2014 "),bR=a("a"),rYe=o("CanineConfig"),tYe=o(" (CANINE model)"),aYe=l(),ef=a("li"),xne=a("strong"),nYe=o("clip"),sYe=o(" \u2014 "),vR=a("a"),lYe=o("CLIPConfig"),iYe=o(" (CLIP model)"),dYe=l(),of=a("li"),$ne=a("strong"),cYe=o("codegen"),mYe=o(" \u2014 "),FR=a("a"),fYe=o("CodeGenConfig"),gYe=o(" (CodeGen model)"),hYe=l(),rf=a("li"),kne=a("strong"),uYe=o("convbert"),pYe=o(" \u2014 "),TR=a("a"),_Ye=o("ConvBertConfig"),bYe=o(" (ConvBERT model)"),vYe=l(),tf=a("li"),Sne=a("strong"),FYe=o("convnext"),TYe=o(" \u2014 "),MR=a("a"),MYe=o("ConvNextConfig"),EYe=o(" (ConvNeXT model)"),CYe=l(),af=a("li"),Rne=a("strong"),wYe=o("ctrl"),AYe=o(" \u2014 "),ER=a("a"),LYe=o("CTRLConfig"),yYe=o(" (CTRL model)"),xYe=l(),nf=a("li"),Pne=a("strong"),$Ye=o("cvt"),kYe=o(" \u2014 "),CR=a("a"),SYe=o("CvtConfig"),RYe=o(" (CvT model)"),PYe=l(),sf=a("li"),Bne=a("strong"),BYe=o("data2vec-audio"),IYe=o(" \u2014 "),wR=a("a"),NYe=o("Data2VecAudioConfig"),qYe=o(" (Data2VecAudio model)"),jYe=l(),lf=a("li"),Ine=a("strong"),DYe=o("data2vec-text"),GYe=o(" \u2014 "),AR=a("a"),OYe=o("Data2VecTextConfig"),VYe=o(" (Data2VecText model)"),XYe=l(),df=a("li"),Nne=a("strong"),zYe=o("data2vec-vision"),WYe=o(" \u2014 "),LR=a("a"),QYe=o("Data2VecVisionConfig"),HYe=o(" (Data2VecVision model)"),UYe=l(),cf=a("li"),qne=a("strong"),JYe=o("deberta"),YYe=o(" \u2014 "),yR=a("a"),KYe=o("DebertaConfig"),ZYe=o(" (DeBERTa model)"),eKe=l(),mf=a("li"),jne=a("strong"),oKe=o("deberta-v2"),rKe=o(" \u2014 "),xR=a("a"),tKe=o("DebertaV2Config"),aKe=o(" (DeBERTa-v2 model)"),nKe=l(),ff=a("li"),Dne=a("strong"),sKe=o("decision_transformer"),lKe=o(" \u2014 "),$R=a("a"),iKe=o("DecisionTransformerConfig"),dKe=o(" (Decision Transformer model)"),cKe=l(),gf=a("li"),Gne=a("strong"),mKe=o("deit"),fKe=o(" \u2014 "),kR=a("a"),gKe=o("DeiTConfig"),hKe=o(" (DeiT model)"),uKe=l(),hf=a("li"),One=a("strong"),pKe=o("detr"),_Ke=o(" \u2014 "),SR=a("a"),bKe=o("DetrConfig"),vKe=o(" (DETR model)"),FKe=l(),uf=a("li"),Vne=a("strong"),TKe=o("distilbert"),MKe=o(" \u2014 "),RR=a("a"),EKe=o("DistilBertConfig"),CKe=o(" (DistilBERT model)"),wKe=l(),pf=a("li"),Xne=a("strong"),AKe=o("dpr"),LKe=o(" \u2014 "),PR=a("a"),yKe=o("DPRConfig"),xKe=o(" (DPR model)"),$Ke=l(),_f=a("li"),zne=a("strong"),kKe=o("dpt"),SKe=o(" \u2014 "),BR=a("a"),RKe=o("DPTConfig"),PKe=o(" (DPT model)"),BKe=l(),bf=a("li"),Wne=a("strong"),IKe=o("electra"),NKe=o(" \u2014 "),IR=a("a"),qKe=o("ElectraConfig"),jKe=o(" (ELECTRA model)"),DKe=l(),vf=a("li"),Qne=a("strong"),GKe=o("encoder-decoder"),OKe=o(" \u2014 "),NR=a("a"),VKe=o("EncoderDecoderConfig"),XKe=o(" (Encoder decoder model)"),zKe=l(),Ff=a("li"),Hne=a("strong"),WKe=o("flaubert"),QKe=o(" \u2014 "),qR=a("a"),HKe=o("FlaubertConfig"),UKe=o(" (FlauBERT model)"),JKe=l(),Tf=a("li"),Une=a("strong"),YKe=o("flava"),KKe=o(" \u2014 "),jR=a("a"),ZKe=o("FlavaConfig"),eZe=o(" (FLAVA model)"),oZe=l(),Mf=a("li"),Jne=a("strong"),rZe=o("fnet"),tZe=o(" \u2014 "),DR=a("a"),aZe=o("FNetConfig"),nZe=o(" (FNet model)"),sZe=l(),Ef=a("li"),Yne=a("strong"),lZe=o("fsmt"),iZe=o(" \u2014 "),GR=a("a"),dZe=o("FSMTConfig"),cZe=o(" (FairSeq Machine-Translation model)"),mZe=l(),Cf=a("li"),Kne=a("strong"),fZe=o("funnel"),gZe=o(" \u2014 "),OR=a("a"),hZe=o("FunnelConfig"),uZe=o(" (Funnel Transformer model)"),pZe=l(),wf=a("li"),Zne=a("strong"),_Ze=o("glpn"),bZe=o(" \u2014 "),VR=a("a"),vZe=o("GLPNConfig"),FZe=o(" (GLPN model)"),TZe=l(),Af=a("li"),ese=a("strong"),MZe=o("gpt2"),EZe=o(" \u2014 "),XR=a("a"),CZe=o("GPT2Config"),wZe=o(" (OpenAI GPT-2 model)"),AZe=l(),Lf=a("li"),ose=a("strong"),LZe=o("gpt_neo"),yZe=o(" \u2014 "),zR=a("a"),xZe=o("GPTNeoConfig"),$Ze=o(" (GPT Neo model)"),kZe=l(),yf=a("li"),rse=a("strong"),SZe=o("gpt_neox"),RZe=o(" \u2014 "),WR=a("a"),PZe=o("GPTNeoXConfig"),BZe=o(" (GPT NeoX model)"),IZe=l(),xf=a("li"),tse=a("strong"),NZe=o("gptj"),qZe=o(" \u2014 "),QR=a("a"),jZe=o("GPTJConfig"),DZe=o(" (GPT-J model)"),GZe=l(),$f=a("li"),ase=a("strong"),OZe=o("groupvit"),VZe=o(" \u2014 "),HR=a("a"),XZe=o("GroupViTConfig"),zZe=o(" (GroupViT model)"),WZe=l(),kf=a("li"),nse=a("strong"),QZe=o("hubert"),HZe=o(" \u2014 "),UR=a("a"),UZe=o("HubertConfig"),JZe=o(" (Hubert model)"),YZe=l(),Sf=a("li"),sse=a("strong"),KZe=o("ibert"),ZZe=o(" \u2014 "),JR=a("a"),eeo=o("IBertConfig"),oeo=o(" (I-BERT model)"),reo=l(),Rf=a("li"),lse=a("strong"),teo=o("imagegpt"),aeo=o(" \u2014 "),YR=a("a"),neo=o("ImageGPTConfig"),seo=o(" (ImageGPT model)"),leo=l(),Pf=a("li"),ise=a("strong"),ieo=o("layoutlm"),deo=o(" \u2014 "),KR=a("a"),ceo=o("LayoutLMConfig"),meo=o(" (LayoutLM model)"),feo=l(),Bf=a("li"),dse=a("strong"),geo=o("layoutlmv2"),heo=o(" \u2014 "),ZR=a("a"),ueo=o("LayoutLMv2Config"),peo=o(" (LayoutLMv2 model)"),_eo=l(),If=a("li"),cse=a("strong"),beo=o("layoutlmv3"),veo=o(" \u2014 "),eP=a("a"),Feo=o("LayoutLMv3Config"),Teo=o(" (LayoutLMv3 model)"),Meo=l(),Nf=a("li"),mse=a("strong"),Eeo=o("led"),Ceo=o(" \u2014 "),oP=a("a"),weo=o("LEDConfig"),Aeo=o(" (LED model)"),Leo=l(),qf=a("li"),fse=a("strong"),yeo=o("levit"),xeo=o(" \u2014 "),rP=a("a"),$eo=o("LevitConfig"),keo=o(" (LeViT model)"),Seo=l(),jf=a("li"),gse=a("strong"),Reo=o("longformer"),Peo=o(" \u2014 "),tP=a("a"),Beo=o("LongformerConfig"),Ieo=o(" (Longformer model)"),Neo=l(),Df=a("li"),hse=a("strong"),qeo=o("longt5"),jeo=o(" \u2014 "),aP=a("a"),Deo=o("LongT5Config"),Geo=o(" (LongT5 model)"),Oeo=l(),Gf=a("li"),use=a("strong"),Veo=o("luke"),Xeo=o(" \u2014 "),nP=a("a"),zeo=o("LukeConfig"),Weo=o(" (LUKE model)"),Qeo=l(),Of=a("li"),pse=a("strong"),Heo=o("lxmert"),Ueo=o(" \u2014 "),sP=a("a"),Jeo=o("LxmertConfig"),Yeo=o(" (LXMERT model)"),Keo=l(),Vf=a("li"),_se=a("strong"),Zeo=o("m2m_100"),eoo=o(" \u2014 "),lP=a("a"),ooo=o("M2M100Config"),roo=o(" (M2M100 model)"),too=l(),Xf=a("li"),bse=a("strong"),aoo=o("marian"),noo=o(" \u2014 "),iP=a("a"),soo=o("MarianConfig"),loo=o(" (Marian model)"),ioo=l(),zf=a("li"),vse=a("strong"),doo=o("maskformer"),coo=o(" \u2014 "),dP=a("a"),moo=o("MaskFormerConfig"),foo=o(" (MaskFormer model)"),goo=l(),Wf=a("li"),Fse=a("strong"),hoo=o("mbart"),uoo=o(" \u2014 "),cP=a("a"),poo=o("MBartConfig"),_oo=o(" (mBART model)"),boo=l(),Qf=a("li"),Tse=a("strong"),voo=o("mctct"),Foo=o(" \u2014 "),mP=a("a"),Too=o("MCTCTConfig"),Moo=o(" (M-CTC-T model)"),Eoo=l(),Hf=a("li"),Mse=a("strong"),Coo=o("megatron-bert"),woo=o(" \u2014 "),fP=a("a"),Aoo=o("MegatronBertConfig"),Loo=o(" (Megatron-BERT model)"),yoo=l(),Uf=a("li"),Ese=a("strong"),xoo=o("mobilebert"),$oo=o(" \u2014 "),gP=a("a"),koo=o("MobileBertConfig"),Soo=o(" (MobileBERT model)"),Roo=l(),Jf=a("li"),Cse=a("strong"),Poo=o("mobilevit"),Boo=o(" \u2014 "),hP=a("a"),Ioo=o("MobileViTConfig"),Noo=o(" (MobileViT model)"),qoo=l(),Yf=a("li"),wse=a("strong"),joo=o("mpnet"),Doo=o(" \u2014 "),uP=a("a"),Goo=o("MPNetConfig"),Ooo=o(" (MPNet model)"),Voo=l(),Kf=a("li"),Ase=a("strong"),Xoo=o("mt5"),zoo=o(" \u2014 "),pP=a("a"),Woo=o("MT5Config"),Qoo=o(" (MT5 model)"),Hoo=l(),Zf=a("li"),Lse=a("strong"),Uoo=o("mvp"),Joo=o(" \u2014 "),_P=a("a"),Yoo=o("MvpConfig"),Koo=o(" (MVP model)"),Zoo=l(),eg=a("li"),yse=a("strong"),ero=o("nezha"),oro=o(" \u2014 "),bP=a("a"),rro=o("NezhaConfig"),tro=o(" (Nezha model)"),aro=l(),og=a("li"),xse=a("strong"),nro=o("nystromformer"),sro=o(" \u2014 "),vP=a("a"),lro=o("NystromformerConfig"),iro=o(" (Nystr\xF6mformer model)"),dro=l(),rg=a("li"),$se=a("strong"),cro=o("openai-gpt"),mro=o(" \u2014 "),FP=a("a"),fro=o("OpenAIGPTConfig"),gro=o(" (OpenAI GPT model)"),hro=l(),tg=a("li"),kse=a("strong"),uro=o("opt"),pro=o(" \u2014 "),TP=a("a"),_ro=o("OPTConfig"),bro=o(" (OPT model)"),vro=l(),ag=a("li"),Sse=a("strong"),Fro=o("owlvit"),Tro=o(" \u2014 "),MP=a("a"),Mro=o("OwlViTConfig"),Ero=o(" (OWL-ViT model)"),Cro=l(),ng=a("li"),Rse=a("strong"),wro=o("pegasus"),Aro=o(" \u2014 "),EP=a("a"),Lro=o("PegasusConfig"),yro=o(" (Pegasus model)"),xro=l(),sg=a("li"),Pse=a("strong"),$ro=o("perceiver"),kro=o(" \u2014 "),CP=a("a"),Sro=o("PerceiverConfig"),Rro=o(" (Perceiver model)"),Pro=l(),lg=a("li"),Bse=a("strong"),Bro=o("plbart"),Iro=o(" \u2014 "),wP=a("a"),Nro=o("PLBartConfig"),qro=o(" (PLBart model)"),jro=l(),ig=a("li"),Ise=a("strong"),Dro=o("poolformer"),Gro=o(" \u2014 "),AP=a("a"),Oro=o("PoolFormerConfig"),Vro=o(" (PoolFormer model)"),Xro=l(),dg=a("li"),Nse=a("strong"),zro=o("prophetnet"),Wro=o(" \u2014 "),LP=a("a"),Qro=o("ProphetNetConfig"),Hro=o(" (ProphetNet model)"),Uro=l(),cg=a("li"),qse=a("strong"),Jro=o("qdqbert"),Yro=o(" \u2014 "),yP=a("a"),Kro=o("QDQBertConfig"),Zro=o(" (QDQBert model)"),eto=l(),mg=a("li"),jse=a("strong"),oto=o("rag"),rto=o(" \u2014 "),xP=a("a"),tto=o("RagConfig"),ato=o(" (RAG model)"),nto=l(),fg=a("li"),Dse=a("strong"),sto=o("realm"),lto=o(" \u2014 "),$P=a("a"),ito=o("RealmConfig"),dto=o(" (REALM model)"),cto=l(),gg=a("li"),Gse=a("strong"),mto=o("reformer"),fto=o(" \u2014 "),kP=a("a"),gto=o("ReformerConfig"),hto=o(" (Reformer model)"),uto=l(),hg=a("li"),Ose=a("strong"),pto=o("regnet"),_to=o(" \u2014 "),SP=a("a"),bto=o("RegNetConfig"),vto=o(" (RegNet model)"),Fto=l(),ug=a("li"),Vse=a("strong"),Tto=o("rembert"),Mto=o(" \u2014 "),RP=a("a"),Eto=o("RemBertConfig"),Cto=o(" (RemBERT model)"),wto=l(),pg=a("li"),Xse=a("strong"),Ato=o("resnet"),Lto=o(" \u2014 "),PP=a("a"),yto=o("ResNetConfig"),xto=o(" (ResNet model)"),$to=l(),_g=a("li"),zse=a("strong"),kto=o("retribert"),Sto=o(" \u2014 "),BP=a("a"),Rto=o("RetriBertConfig"),Pto=o(" (RetriBERT model)"),Bto=l(),bg=a("li"),Wse=a("strong"),Ito=o("roberta"),Nto=o(" \u2014 "),IP=a("a"),qto=o("RobertaConfig"),jto=o(" (RoBERTa model)"),Dto=l(),vg=a("li"),Qse=a("strong"),Gto=o("roformer"),Oto=o(" \u2014 "),NP=a("a"),Vto=o("RoFormerConfig"),Xto=o(" (RoFormer model)"),zto=l(),Fg=a("li"),Hse=a("strong"),Wto=o("segformer"),Qto=o(" \u2014 "),qP=a("a"),Hto=o("SegformerConfig"),Uto=o(" (SegFormer model)"),Jto=l(),Tg=a("li"),Use=a("strong"),Yto=o("sew"),Kto=o(" \u2014 "),jP=a("a"),Zto=o("SEWConfig"),eao=o(" (SEW model)"),oao=l(),Mg=a("li"),Jse=a("strong"),rao=o("sew-d"),tao=o(" \u2014 "),DP=a("a"),aao=o("SEWDConfig"),nao=o(" (SEW-D model)"),sao=l(),Eg=a("li"),Yse=a("strong"),lao=o("speech-encoder-decoder"),iao=o(" \u2014 "),GP=a("a"),dao=o("SpeechEncoderDecoderConfig"),cao=o(" (Speech Encoder decoder model)"),mao=l(),Cg=a("li"),Kse=a("strong"),fao=o("speech_to_text"),gao=o(" \u2014 "),OP=a("a"),hao=o("Speech2TextConfig"),uao=o(" (Speech2Text model)"),pao=l(),wg=a("li"),Zse=a("strong"),_ao=o("speech_to_text_2"),bao=o(" \u2014 "),VP=a("a"),vao=o("Speech2Text2Config"),Fao=o(" (Speech2Text2 model)"),Tao=l(),Ag=a("li"),ele=a("strong"),Mao=o("splinter"),Eao=o(" \u2014 "),XP=a("a"),Cao=o("SplinterConfig"),wao=o(" (Splinter model)"),Aao=l(),Lg=a("li"),ole=a("strong"),Lao=o("squeezebert"),yao=o(" \u2014 "),zP=a("a"),xao=o("SqueezeBertConfig"),$ao=o(" (SqueezeBERT model)"),kao=l(),yg=a("li"),rle=a("strong"),Sao=o("swin"),Rao=o(" \u2014 "),WP=a("a"),Pao=o("SwinConfig"),Bao=o(" (Swin Transformer model)"),Iao=l(),xg=a("li"),tle=a("strong"),Nao=o("swinv2"),qao=o(" \u2014 "),QP=a("a"),jao=o("Swinv2Config"),Dao=o(" (Swin Transformer V2 model)"),Gao=l(),$g=a("li"),ale=a("strong"),Oao=o("t5"),Vao=o(" \u2014 "),HP=a("a"),Xao=o("T5Config"),zao=o(" (T5 model)"),Wao=l(),kg=a("li"),nle=a("strong"),Qao=o("tapas"),Hao=o(" \u2014 "),UP=a("a"),Uao=o("TapasConfig"),Jao=o(" (TAPAS model)"),Yao=l(),Sg=a("li"),sle=a("strong"),Kao=o("trajectory_transformer"),Zao=o(" \u2014 "),JP=a("a"),eno=o("TrajectoryTransformerConfig"),ono=o(" (Trajectory Transformer model)"),rno=l(),Rg=a("li"),lle=a("strong"),tno=o("transfo-xl"),ano=o(" \u2014 "),YP=a("a"),nno=o("TransfoXLConfig"),sno=o(" (Transformer-XL model)"),lno=l(),Pg=a("li"),ile=a("strong"),ino=o("trocr"),dno=o(" \u2014 "),KP=a("a"),cno=o("TrOCRConfig"),mno=o(" (TrOCR model)"),fno=l(),Bg=a("li"),dle=a("strong"),gno=o("unispeech"),hno=o(" \u2014 "),ZP=a("a"),uno=o("UniSpeechConfig"),pno=o(" (UniSpeech model)"),_no=l(),Ig=a("li"),cle=a("strong"),bno=o("unispeech-sat"),vno=o(" \u2014 "),eB=a("a"),Fno=o("UniSpeechSatConfig"),Tno=o(" (UniSpeechSat model)"),Mno=l(),Ng=a("li"),mle=a("strong"),Eno=o("van"),Cno=o(" \u2014 "),oB=a("a"),wno=o("VanConfig"),Ano=o(" (VAN model)"),Lno=l(),qg=a("li"),fle=a("strong"),yno=o("vilt"),xno=o(" \u2014 "),rB=a("a"),$no=o("ViltConfig"),kno=o(" (ViLT model)"),Sno=l(),jg=a("li"),gle=a("strong"),Rno=o("vision-encoder-decoder"),Pno=o(" \u2014 "),tB=a("a"),Bno=o("VisionEncoderDecoderConfig"),Ino=o(" (Vision Encoder decoder model)"),Nno=l(),Dg=a("li"),hle=a("strong"),qno=o("vision-text-dual-encoder"),jno=o(" \u2014 "),aB=a("a"),Dno=o("VisionTextDualEncoderConfig"),Gno=o(" (VisionTextDualEncoder model)"),Ono=l(),Gg=a("li"),ule=a("strong"),Vno=o("visual_bert"),Xno=o(" \u2014 "),nB=a("a"),zno=o("VisualBertConfig"),Wno=o(" (VisualBERT model)"),Qno=l(),Og=a("li"),ple=a("strong"),Hno=o("vit"),Uno=o(" \u2014 "),sB=a("a"),Jno=o("ViTConfig"),Yno=o(" (ViT model)"),Kno=l(),Vg=a("li"),_le=a("strong"),Zno=o("vit_mae"),eso=o(" \u2014 "),lB=a("a"),oso=o("ViTMAEConfig"),rso=o(" (ViTMAE model)"),tso=l(),Xg=a("li"),ble=a("strong"),aso=o("wav2vec2"),nso=o(" \u2014 "),iB=a("a"),sso=o("Wav2Vec2Config"),lso=o(" (Wav2Vec2 model)"),iso=l(),zg=a("li"),vle=a("strong"),dso=o("wav2vec2-conformer"),cso=o(" \u2014 "),dB=a("a"),mso=o("Wav2Vec2ConformerConfig"),fso=o(" (Wav2Vec2-Conformer model)"),gso=l(),Wg=a("li"),Fle=a("strong"),hso=o("wavlm"),uso=o(" \u2014 "),cB=a("a"),pso=o("WavLMConfig"),_so=o(" (WavLM model)"),bso=l(),Qg=a("li"),Tle=a("strong"),vso=o("xglm"),Fso=o(" \u2014 "),mB=a("a"),Tso=o("XGLMConfig"),Mso=o(" (XGLM model)"),Eso=l(),Hg=a("li"),Mle=a("strong"),Cso=o("xlm"),wso=o(" \u2014 "),fB=a("a"),Aso=o("XLMConfig"),Lso=o(" (XLM model)"),yso=l(),Ug=a("li"),Ele=a("strong"),xso=o("xlm-prophetnet"),$so=o(" \u2014 "),gB=a("a"),kso=o("XLMProphetNetConfig"),Sso=o(" (XLM-ProphetNet model)"),Rso=l(),Jg=a("li"),Cle=a("strong"),Pso=o("xlm-roberta"),Bso=o(" \u2014 "),hB=a("a"),Iso=o("XLMRobertaConfig"),Nso=o(" (XLM-RoBERTa model)"),qso=l(),Yg=a("li"),wle=a("strong"),jso=o("xlm-roberta-xl"),Dso=o(" \u2014 "),uB=a("a"),Gso=o("XLMRobertaXLConfig"),Oso=o(" (XLM-RoBERTa-XL model)"),Vso=l(),Kg=a("li"),Ale=a("strong"),Xso=o("xlnet"),zso=o(" \u2014 "),pB=a("a"),Wso=o("XLNetConfig"),Qso=o(" (XLNet model)"),Hso=l(),Zg=a("li"),Lle=a("strong"),Uso=o("yolos"),Jso=o(" \u2014 "),_B=a("a"),Yso=o("YolosConfig"),Kso=o(" (YOLOS model)"),Zso=l(),eh=a("li"),yle=a("strong"),elo=o("yoso"),olo=o(" \u2014 "),bB=a("a"),rlo=o("YosoConfig"),tlo=o(" (YOSO model)"),alo=l(),F(oh.$$.fragment),nlo=l(),rh=a("div"),F(yy.$$.fragment),slo=l(),xle=a("p"),llo=o("Register a new configuration for this class."),pze=l(),Di=a("h2"),th=a("a"),$le=a("span"),F(xy.$$.fragment),ilo=l(),kle=a("span"),dlo=o("AutoTokenizer"),_ze=l(),yo=a("div"),F($y.$$.fragment),clo=l(),ky=a("p"),mlo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),vB=a("a"),flo=o("AutoTokenizer.from_pretrained()"),glo=o(" class method."),hlo=l(),Sy=a("p"),ulo=o("This class cannot be instantiated directly using "),Sle=a("code"),plo=o("__init__()"),_lo=o(" (throws an error)."),blo=l(),xr=a("div"),F(Ry.$$.fragment),vlo=l(),Rle=a("p"),Flo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Tlo=l(),Pa=a("p"),Mlo=o("The tokenizer class to instantiate is selected based on the "),Ple=a("code"),Elo=o("model_type"),Clo=o(` property of the config object (either
passed as an argument or loaded from `),Ble=a("code"),wlo=o("pretrained_model_name_or_path"),Alo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ile=a("code"),Llo=o("pretrained_model_name_or_path"),ylo=o(":"),xlo=l(),k=a("ul"),Dn=a("li"),Nle=a("strong"),$lo=o("albert"),klo=o(" \u2014 "),FB=a("a"),Slo=o("AlbertTokenizer"),Rlo=o(" or "),TB=a("a"),Plo=o("AlbertTokenizerFast"),Blo=o(" (ALBERT model)"),Ilo=l(),Gn=a("li"),qle=a("strong"),Nlo=o("bart"),qlo=o(" \u2014 "),MB=a("a"),jlo=o("BartTokenizer"),Dlo=o(" or "),EB=a("a"),Glo=o("BartTokenizerFast"),Olo=o(" (BART model)"),Vlo=l(),On=a("li"),jle=a("strong"),Xlo=o("barthez"),zlo=o(" \u2014 "),CB=a("a"),Wlo=o("BarthezTokenizer"),Qlo=o(" or "),wB=a("a"),Hlo=o("BarthezTokenizerFast"),Ulo=o(" (BARThez model)"),Jlo=l(),ah=a("li"),Dle=a("strong"),Ylo=o("bartpho"),Klo=o(" \u2014 "),AB=a("a"),Zlo=o("BartphoTokenizer"),eio=o(" (BARTpho model)"),oio=l(),Vn=a("li"),Gle=a("strong"),rio=o("bert"),tio=o(" \u2014 "),LB=a("a"),aio=o("BertTokenizer"),nio=o(" or "),yB=a("a"),sio=o("BertTokenizerFast"),lio=o(" (BERT model)"),iio=l(),nh=a("li"),Ole=a("strong"),dio=o("bert-generation"),cio=o(" \u2014 "),xB=a("a"),mio=o("BertGenerationTokenizer"),fio=o(" (Bert Generation model)"),gio=l(),sh=a("li"),Vle=a("strong"),hio=o("bert-japanese"),uio=o(" \u2014 "),$B=a("a"),pio=o("BertJapaneseTokenizer"),_io=o(" (BertJapanese model)"),bio=l(),lh=a("li"),Xle=a("strong"),vio=o("bertweet"),Fio=o(" \u2014 "),kB=a("a"),Tio=o("BertweetTokenizer"),Mio=o(" (BERTweet model)"),Eio=l(),Xn=a("li"),zle=a("strong"),Cio=o("big_bird"),wio=o(" \u2014 "),SB=a("a"),Aio=o("BigBirdTokenizer"),Lio=o(" or "),RB=a("a"),yio=o("BigBirdTokenizerFast"),xio=o(" (BigBird model)"),$io=l(),zn=a("li"),Wle=a("strong"),kio=o("bigbird_pegasus"),Sio=o(" \u2014 "),PB=a("a"),Rio=o("PegasusTokenizer"),Pio=o(" or "),BB=a("a"),Bio=o("PegasusTokenizerFast"),Iio=o(" (BigBird-Pegasus model)"),Nio=l(),Wn=a("li"),Qle=a("strong"),qio=o("blenderbot"),jio=o(" \u2014 "),IB=a("a"),Dio=o("BlenderbotTokenizer"),Gio=o(" or "),NB=a("a"),Oio=o("BlenderbotTokenizerFast"),Vio=o(" (Blenderbot model)"),Xio=l(),ih=a("li"),Hle=a("strong"),zio=o("blenderbot-small"),Wio=o(" \u2014 "),qB=a("a"),Qio=o("BlenderbotSmallTokenizer"),Hio=o(" (BlenderbotSmall model)"),Uio=l(),dh=a("li"),Ule=a("strong"),Jio=o("bloom"),Yio=o(" \u2014 "),jB=a("a"),Kio=o("BloomTokenizerFast"),Zio=o(" (BLOOM model)"),edo=l(),ch=a("li"),Jle=a("strong"),odo=o("byt5"),rdo=o(" \u2014 "),DB=a("a"),tdo=o("ByT5Tokenizer"),ado=o(" (ByT5 model)"),ndo=l(),Qn=a("li"),Yle=a("strong"),sdo=o("camembert"),ldo=o(" \u2014 "),GB=a("a"),ido=o("CamembertTokenizer"),ddo=o(" or "),OB=a("a"),cdo=o("CamembertTokenizerFast"),mdo=o(" (CamemBERT model)"),fdo=l(),mh=a("li"),Kle=a("strong"),gdo=o("canine"),hdo=o(" \u2014 "),VB=a("a"),udo=o("CanineTokenizer"),pdo=o(" (CANINE model)"),_do=l(),Hn=a("li"),Zle=a("strong"),bdo=o("clip"),vdo=o(" \u2014 "),XB=a("a"),Fdo=o("CLIPTokenizer"),Tdo=o(" or "),zB=a("a"),Mdo=o("CLIPTokenizerFast"),Edo=o(" (CLIP model)"),Cdo=l(),Un=a("li"),eie=a("strong"),wdo=o("codegen"),Ado=o(" \u2014 "),WB=a("a"),Ldo=o("CodeGenTokenizer"),ydo=o(" or "),QB=a("a"),xdo=o("CodeGenTokenizerFast"),$do=o(" (CodeGen model)"),kdo=l(),Jn=a("li"),oie=a("strong"),Sdo=o("convbert"),Rdo=o(" \u2014 "),HB=a("a"),Pdo=o("ConvBertTokenizer"),Bdo=o(" or "),UB=a("a"),Ido=o("ConvBertTokenizerFast"),Ndo=o(" (ConvBERT model)"),qdo=l(),Yn=a("li"),rie=a("strong"),jdo=o("cpm"),Ddo=o(" \u2014 "),JB=a("a"),Gdo=o("CpmTokenizer"),Odo=o(" or "),YB=a("a"),Vdo=o("CpmTokenizerFast"),Xdo=o(" (CPM model)"),zdo=l(),fh=a("li"),tie=a("strong"),Wdo=o("ctrl"),Qdo=o(" \u2014 "),KB=a("a"),Hdo=o("CTRLTokenizer"),Udo=o(" (CTRL model)"),Jdo=l(),Kn=a("li"),aie=a("strong"),Ydo=o("data2vec-text"),Kdo=o(" \u2014 "),ZB=a("a"),Zdo=o("RobertaTokenizer"),eco=o(" or "),eI=a("a"),oco=o("RobertaTokenizerFast"),rco=o(" (Data2VecText model)"),tco=l(),Zn=a("li"),nie=a("strong"),aco=o("deberta"),nco=o(" \u2014 "),oI=a("a"),sco=o("DebertaTokenizer"),lco=o(" or "),rI=a("a"),ico=o("DebertaTokenizerFast"),dco=o(" (DeBERTa model)"),cco=l(),es=a("li"),sie=a("strong"),mco=o("deberta-v2"),fco=o(" \u2014 "),tI=a("a"),gco=o("DebertaV2Tokenizer"),hco=o(" or "),aI=a("a"),uco=o("DebertaV2TokenizerFast"),pco=o(" (DeBERTa-v2 model)"),_co=l(),os=a("li"),lie=a("strong"),bco=o("distilbert"),vco=o(" \u2014 "),nI=a("a"),Fco=o("DistilBertTokenizer"),Tco=o(" or "),sI=a("a"),Mco=o("DistilBertTokenizerFast"),Eco=o(" (DistilBERT model)"),Cco=l(),rs=a("li"),iie=a("strong"),wco=o("dpr"),Aco=o(" \u2014 "),lI=a("a"),Lco=o("DPRQuestionEncoderTokenizer"),yco=o(" or "),iI=a("a"),xco=o("DPRQuestionEncoderTokenizerFast"),$co=o(" (DPR model)"),kco=l(),ts=a("li"),die=a("strong"),Sco=o("electra"),Rco=o(" \u2014 "),dI=a("a"),Pco=o("ElectraTokenizer"),Bco=o(" or "),cI=a("a"),Ico=o("ElectraTokenizerFast"),Nco=o(" (ELECTRA model)"),qco=l(),gh=a("li"),cie=a("strong"),jco=o("flaubert"),Dco=o(" \u2014 "),mI=a("a"),Gco=o("FlaubertTokenizer"),Oco=o(" (FlauBERT model)"),Vco=l(),as=a("li"),mie=a("strong"),Xco=o("fnet"),zco=o(" \u2014 "),fI=a("a"),Wco=o("FNetTokenizer"),Qco=o(" or "),gI=a("a"),Hco=o("FNetTokenizerFast"),Uco=o(" (FNet model)"),Jco=l(),hh=a("li"),fie=a("strong"),Yco=o("fsmt"),Kco=o(" \u2014 "),hI=a("a"),Zco=o("FSMTTokenizer"),emo=o(" (FairSeq Machine-Translation model)"),omo=l(),ns=a("li"),gie=a("strong"),rmo=o("funnel"),tmo=o(" \u2014 "),uI=a("a"),amo=o("FunnelTokenizer"),nmo=o(" or "),pI=a("a"),smo=o("FunnelTokenizerFast"),lmo=o(" (Funnel Transformer model)"),imo=l(),ss=a("li"),hie=a("strong"),dmo=o("gpt2"),cmo=o(" \u2014 "),_I=a("a"),mmo=o("GPT2Tokenizer"),fmo=o(" or "),bI=a("a"),gmo=o("GPT2TokenizerFast"),hmo=o(" (OpenAI GPT-2 model)"),umo=l(),ls=a("li"),uie=a("strong"),pmo=o("gpt_neo"),_mo=o(" \u2014 "),vI=a("a"),bmo=o("GPT2Tokenizer"),vmo=o(" or "),FI=a("a"),Fmo=o("GPT2TokenizerFast"),Tmo=o(" (GPT Neo model)"),Mmo=l(),uh=a("li"),pie=a("strong"),Emo=o("gpt_neox"),Cmo=o(" \u2014 "),TI=a("a"),wmo=o("GPTNeoXTokenizerFast"),Amo=o(" (GPT NeoX model)"),Lmo=l(),is=a("li"),_ie=a("strong"),ymo=o("gptj"),xmo=o(" \u2014 "),MI=a("a"),$mo=o("GPT2Tokenizer"),kmo=o(" or "),EI=a("a"),Smo=o("GPT2TokenizerFast"),Rmo=o(" (GPT-J model)"),Pmo=l(),ds=a("li"),bie=a("strong"),Bmo=o("groupvit"),Imo=o(" \u2014 "),CI=a("a"),Nmo=o("CLIPTokenizer"),qmo=o(" or "),wI=a("a"),jmo=o("CLIPTokenizerFast"),Dmo=o(" (GroupViT model)"),Gmo=l(),cs=a("li"),vie=a("strong"),Omo=o("herbert"),Vmo=o(" \u2014 "),AI=a("a"),Xmo=o("HerbertTokenizer"),zmo=o(" or "),LI=a("a"),Wmo=o("HerbertTokenizerFast"),Qmo=o(" (HerBERT model)"),Hmo=l(),ph=a("li"),Fie=a("strong"),Umo=o("hubert"),Jmo=o(" \u2014 "),yI=a("a"),Ymo=o("Wav2Vec2CTCTokenizer"),Kmo=o(" (Hubert model)"),Zmo=l(),ms=a("li"),Tie=a("strong"),efo=o("ibert"),ofo=o(" \u2014 "),xI=a("a"),rfo=o("RobertaTokenizer"),tfo=o(" or "),$I=a("a"),afo=o("RobertaTokenizerFast"),nfo=o(" (I-BERT model)"),sfo=l(),fs=a("li"),Mie=a("strong"),lfo=o("layoutlm"),ifo=o(" \u2014 "),kI=a("a"),dfo=o("LayoutLMTokenizer"),cfo=o(" or "),SI=a("a"),mfo=o("LayoutLMTokenizerFast"),ffo=o(" (LayoutLM model)"),gfo=l(),gs=a("li"),Eie=a("strong"),hfo=o("layoutlmv2"),ufo=o(" \u2014 "),RI=a("a"),pfo=o("LayoutLMv2Tokenizer"),_fo=o(" or "),PI=a("a"),bfo=o("LayoutLMv2TokenizerFast"),vfo=o(" (LayoutLMv2 model)"),Ffo=l(),hs=a("li"),Cie=a("strong"),Tfo=o("layoutlmv3"),Mfo=o(" \u2014 "),BI=a("a"),Efo=o("LayoutLMv3Tokenizer"),Cfo=o(" or "),II=a("a"),wfo=o("LayoutLMv3TokenizerFast"),Afo=o(" (LayoutLMv3 model)"),Lfo=l(),us=a("li"),wie=a("strong"),yfo=o("layoutxlm"),xfo=o(" \u2014 "),NI=a("a"),$fo=o("LayoutXLMTokenizer"),kfo=o(" or "),qI=a("a"),Sfo=o("LayoutXLMTokenizerFast"),Rfo=o(" (LayoutXLM model)"),Pfo=l(),ps=a("li"),Aie=a("strong"),Bfo=o("led"),Ifo=o(" \u2014 "),jI=a("a"),Nfo=o("LEDTokenizer"),qfo=o(" or "),DI=a("a"),jfo=o("LEDTokenizerFast"),Dfo=o(" (LED model)"),Gfo=l(),_s=a("li"),Lie=a("strong"),Ofo=o("longformer"),Vfo=o(" \u2014 "),GI=a("a"),Xfo=o("LongformerTokenizer"),zfo=o(" or "),OI=a("a"),Wfo=o("LongformerTokenizerFast"),Qfo=o(" (Longformer model)"),Hfo=l(),bs=a("li"),yie=a("strong"),Ufo=o("longt5"),Jfo=o(" \u2014 "),VI=a("a"),Yfo=o("T5Tokenizer"),Kfo=o(" or "),XI=a("a"),Zfo=o("T5TokenizerFast"),ego=o(" (LongT5 model)"),ogo=l(),_h=a("li"),xie=a("strong"),rgo=o("luke"),tgo=o(" \u2014 "),zI=a("a"),ago=o("LukeTokenizer"),ngo=o(" (LUKE model)"),sgo=l(),vs=a("li"),$ie=a("strong"),lgo=o("lxmert"),igo=o(" \u2014 "),WI=a("a"),dgo=o("LxmertTokenizer"),cgo=o(" or "),QI=a("a"),mgo=o("LxmertTokenizerFast"),fgo=o(" (LXMERT model)"),ggo=l(),bh=a("li"),kie=a("strong"),hgo=o("m2m_100"),ugo=o(" \u2014 "),HI=a("a"),pgo=o("M2M100Tokenizer"),_go=o(" (M2M100 model)"),bgo=l(),vh=a("li"),Sie=a("strong"),vgo=o("marian"),Fgo=o(" \u2014 "),UI=a("a"),Tgo=o("MarianTokenizer"),Mgo=o(" (Marian model)"),Ego=l(),Fs=a("li"),Rie=a("strong"),Cgo=o("mbart"),wgo=o(" \u2014 "),JI=a("a"),Ago=o("MBartTokenizer"),Lgo=o(" or "),YI=a("a"),ygo=o("MBartTokenizerFast"),xgo=o(" (mBART model)"),$go=l(),Ts=a("li"),Pie=a("strong"),kgo=o("mbart50"),Sgo=o(" \u2014 "),KI=a("a"),Rgo=o("MBart50Tokenizer"),Pgo=o(" or "),ZI=a("a"),Bgo=o("MBart50TokenizerFast"),Igo=o(" (mBART-50 model)"),Ngo=l(),Ms=a("li"),Bie=a("strong"),qgo=o("megatron-bert"),jgo=o(" \u2014 "),eN=a("a"),Dgo=o("BertTokenizer"),Ggo=o(" or "),oN=a("a"),Ogo=o("BertTokenizerFast"),Vgo=o(" (Megatron-BERT model)"),Xgo=l(),Fh=a("li"),Iie=a("strong"),zgo=o("mluke"),Wgo=o(" \u2014 "),rN=a("a"),Qgo=o("MLukeTokenizer"),Hgo=o(" (mLUKE model)"),Ugo=l(),Es=a("li"),Nie=a("strong"),Jgo=o("mobilebert"),Ygo=o(" \u2014 "),tN=a("a"),Kgo=o("MobileBertTokenizer"),Zgo=o(" or "),aN=a("a"),eho=o("MobileBertTokenizerFast"),oho=o(" (MobileBERT model)"),rho=l(),Cs=a("li"),qie=a("strong"),tho=o("mpnet"),aho=o(" \u2014 "),nN=a("a"),nho=o("MPNetTokenizer"),sho=o(" or "),sN=a("a"),lho=o("MPNetTokenizerFast"),iho=o(" (MPNet model)"),dho=l(),ws=a("li"),jie=a("strong"),cho=o("mt5"),mho=o(" \u2014 "),lN=a("a"),fho=o("MT5Tokenizer"),gho=o(" or "),iN=a("a"),hho=o("MT5TokenizerFast"),uho=o(" (MT5 model)"),pho=l(),As=a("li"),Die=a("strong"),_ho=o("mvp"),bho=o(" \u2014 "),dN=a("a"),vho=o("MvpTokenizer"),Fho=o(" or "),cN=a("a"),Tho=o("MvpTokenizerFast"),Mho=o(" (MVP model)"),Eho=l(),Ls=a("li"),Gie=a("strong"),Cho=o("nezha"),who=o(" \u2014 "),mN=a("a"),Aho=o("BertTokenizer"),Lho=o(" or "),fN=a("a"),yho=o("BertTokenizerFast"),xho=o(" (Nezha model)"),$ho=l(),ys=a("li"),Oie=a("strong"),kho=o("nllb"),Sho=o(" \u2014 "),gN=a("a"),Rho=o("NllbTokenizer"),Pho=o(" or "),hN=a("a"),Bho=o("NllbTokenizerFast"),Iho=o(" (NLLB model)"),Nho=l(),xs=a("li"),Vie=a("strong"),qho=o("nystromformer"),jho=o(" \u2014 "),uN=a("a"),Dho=o("AlbertTokenizer"),Gho=o(" or "),pN=a("a"),Oho=o("AlbertTokenizerFast"),Vho=o(" (Nystr\xF6mformer model)"),Xho=l(),$s=a("li"),Xie=a("strong"),zho=o("openai-gpt"),Who=o(" \u2014 "),_N=a("a"),Qho=o("OpenAIGPTTokenizer"),Hho=o(" or "),bN=a("a"),Uho=o("OpenAIGPTTokenizerFast"),Jho=o(" (OpenAI GPT model)"),Yho=l(),Th=a("li"),zie=a("strong"),Kho=o("opt"),Zho=o(" \u2014 "),vN=a("a"),euo=o("GPT2Tokenizer"),ouo=o(" (OPT model)"),ruo=l(),ks=a("li"),Wie=a("strong"),tuo=o("owlvit"),auo=o(" \u2014 "),FN=a("a"),nuo=o("CLIPTokenizer"),suo=o(" or "),TN=a("a"),luo=o("CLIPTokenizerFast"),iuo=o(" (OWL-ViT model)"),duo=l(),Ss=a("li"),Qie=a("strong"),cuo=o("pegasus"),muo=o(" \u2014 "),MN=a("a"),fuo=o("PegasusTokenizer"),guo=o(" or "),EN=a("a"),huo=o("PegasusTokenizerFast"),uuo=o(" (Pegasus model)"),puo=l(),Mh=a("li"),Hie=a("strong"),_uo=o("perceiver"),buo=o(" \u2014 "),CN=a("a"),vuo=o("PerceiverTokenizer"),Fuo=o(" (Perceiver model)"),Tuo=l(),Eh=a("li"),Uie=a("strong"),Muo=o("phobert"),Euo=o(" \u2014 "),wN=a("a"),Cuo=o("PhobertTokenizer"),wuo=o(" (PhoBERT model)"),Auo=l(),Ch=a("li"),Jie=a("strong"),Luo=o("plbart"),yuo=o(" \u2014 "),AN=a("a"),xuo=o("PLBartTokenizer"),$uo=o(" (PLBart model)"),kuo=l(),wh=a("li"),Yie=a("strong"),Suo=o("prophetnet"),Ruo=o(" \u2014 "),LN=a("a"),Puo=o("ProphetNetTokenizer"),Buo=o(" (ProphetNet model)"),Iuo=l(),Rs=a("li"),Kie=a("strong"),Nuo=o("qdqbert"),quo=o(" \u2014 "),yN=a("a"),juo=o("BertTokenizer"),Duo=o(" or "),xN=a("a"),Guo=o("BertTokenizerFast"),Ouo=o(" (QDQBert model)"),Vuo=l(),Ah=a("li"),Zie=a("strong"),Xuo=o("rag"),zuo=o(" \u2014 "),$N=a("a"),Wuo=o("RagTokenizer"),Quo=o(" (RAG model)"),Huo=l(),Ps=a("li"),ede=a("strong"),Uuo=o("realm"),Juo=o(" \u2014 "),kN=a("a"),Yuo=o("RealmTokenizer"),Kuo=o(" or "),SN=a("a"),Zuo=o("RealmTokenizerFast"),epo=o(" (REALM model)"),opo=l(),Bs=a("li"),ode=a("strong"),rpo=o("reformer"),tpo=o(" \u2014 "),RN=a("a"),apo=o("ReformerTokenizer"),npo=o(" or "),PN=a("a"),spo=o("ReformerTokenizerFast"),lpo=o(" (Reformer model)"),ipo=l(),Is=a("li"),rde=a("strong"),dpo=o("rembert"),cpo=o(" \u2014 "),BN=a("a"),mpo=o("RemBertTokenizer"),fpo=o(" or "),IN=a("a"),gpo=o("RemBertTokenizerFast"),hpo=o(" (RemBERT model)"),upo=l(),Ns=a("li"),tde=a("strong"),ppo=o("retribert"),_po=o(" \u2014 "),NN=a("a"),bpo=o("RetriBertTokenizer"),vpo=o(" or "),qN=a("a"),Fpo=o("RetriBertTokenizerFast"),Tpo=o(" (RetriBERT model)"),Mpo=l(),qs=a("li"),ade=a("strong"),Epo=o("roberta"),Cpo=o(" \u2014 "),jN=a("a"),wpo=o("RobertaTokenizer"),Apo=o(" or "),DN=a("a"),Lpo=o("RobertaTokenizerFast"),ypo=o(" (RoBERTa model)"),xpo=l(),js=a("li"),nde=a("strong"),$po=o("roformer"),kpo=o(" \u2014 "),GN=a("a"),Spo=o("RoFormerTokenizer"),Rpo=o(" or "),ON=a("a"),Ppo=o("RoFormerTokenizerFast"),Bpo=o(" (RoFormer model)"),Ipo=l(),Lh=a("li"),sde=a("strong"),Npo=o("speech_to_text"),qpo=o(" \u2014 "),VN=a("a"),jpo=o("Speech2TextTokenizer"),Dpo=o(" (Speech2Text model)"),Gpo=l(),yh=a("li"),lde=a("strong"),Opo=o("speech_to_text_2"),Vpo=o(" \u2014 "),XN=a("a"),Xpo=o("Speech2Text2Tokenizer"),zpo=o(" (Speech2Text2 model)"),Wpo=l(),Ds=a("li"),ide=a("strong"),Qpo=o("splinter"),Hpo=o(" \u2014 "),zN=a("a"),Upo=o("SplinterTokenizer"),Jpo=o(" or "),WN=a("a"),Ypo=o("SplinterTokenizerFast"),Kpo=o(" (Splinter model)"),Zpo=l(),Gs=a("li"),dde=a("strong"),e_o=o("squeezebert"),o_o=o(" \u2014 "),QN=a("a"),r_o=o("SqueezeBertTokenizer"),t_o=o(" or "),HN=a("a"),a_o=o("SqueezeBertTokenizerFast"),n_o=o(" (SqueezeBERT model)"),s_o=l(),Os=a("li"),cde=a("strong"),l_o=o("t5"),i_o=o(" \u2014 "),UN=a("a"),d_o=o("T5Tokenizer"),c_o=o(" or "),JN=a("a"),m_o=o("T5TokenizerFast"),f_o=o(" (T5 model)"),g_o=l(),xh=a("li"),mde=a("strong"),h_o=o("tapas"),u_o=o(" \u2014 "),YN=a("a"),p_o=o("TapasTokenizer"),__o=o(" (TAPAS model)"),b_o=l(),$h=a("li"),fde=a("strong"),v_o=o("tapex"),F_o=o(" \u2014 "),KN=a("a"),T_o=o("TapexTokenizer"),M_o=o(" (TAPEX model)"),E_o=l(),kh=a("li"),gde=a("strong"),C_o=o("transfo-xl"),w_o=o(" \u2014 "),ZN=a("a"),A_o=o("TransfoXLTokenizer"),L_o=o(" (Transformer-XL model)"),y_o=l(),Vs=a("li"),hde=a("strong"),x_o=o("vilt"),$_o=o(" \u2014 "),eq=a("a"),k_o=o("BertTokenizer"),S_o=o(" or "),oq=a("a"),R_o=o("BertTokenizerFast"),P_o=o(" (ViLT model)"),B_o=l(),Xs=a("li"),ude=a("strong"),I_o=o("visual_bert"),N_o=o(" \u2014 "),rq=a("a"),q_o=o("BertTokenizer"),j_o=o(" or "),tq=a("a"),D_o=o("BertTokenizerFast"),G_o=o(" (VisualBERT model)"),O_o=l(),Sh=a("li"),pde=a("strong"),V_o=o("wav2vec2"),X_o=o(" \u2014 "),aq=a("a"),z_o=o("Wav2Vec2CTCTokenizer"),W_o=o(" (Wav2Vec2 model)"),Q_o=l(),Rh=a("li"),_de=a("strong"),H_o=o("wav2vec2-conformer"),U_o=o(" \u2014 "),nq=a("a"),J_o=o("Wav2Vec2CTCTokenizer"),Y_o=o(" (Wav2Vec2-Conformer model)"),K_o=l(),Ph=a("li"),bde=a("strong"),Z_o=o("wav2vec2_phoneme"),e2o=o(" \u2014 "),sq=a("a"),o2o=o("Wav2Vec2PhonemeCTCTokenizer"),r2o=o(" (Wav2Vec2Phoneme model)"),t2o=l(),zs=a("li"),vde=a("strong"),a2o=o("xglm"),n2o=o(" \u2014 "),lq=a("a"),s2o=o("XGLMTokenizer"),l2o=o(" or "),iq=a("a"),i2o=o("XGLMTokenizerFast"),d2o=o(" (XGLM model)"),c2o=l(),Bh=a("li"),Fde=a("strong"),m2o=o("xlm"),f2o=o(" \u2014 "),dq=a("a"),g2o=o("XLMTokenizer"),h2o=o(" (XLM model)"),u2o=l(),Ih=a("li"),Tde=a("strong"),p2o=o("xlm-prophetnet"),_2o=o(" \u2014 "),cq=a("a"),b2o=o("XLMProphetNetTokenizer"),v2o=o(" (XLM-ProphetNet model)"),F2o=l(),Ws=a("li"),Mde=a("strong"),T2o=o("xlm-roberta"),M2o=o(" \u2014 "),mq=a("a"),E2o=o("XLMRobertaTokenizer"),C2o=o(" or "),fq=a("a"),w2o=o("XLMRobertaTokenizerFast"),A2o=o(" (XLM-RoBERTa model)"),L2o=l(),Qs=a("li"),Ede=a("strong"),y2o=o("xlm-roberta-xl"),x2o=o(" \u2014 "),gq=a("a"),$2o=o("RobertaTokenizer"),k2o=o(" or "),hq=a("a"),S2o=o("RobertaTokenizerFast"),R2o=o(" (XLM-RoBERTa-XL model)"),P2o=l(),Hs=a("li"),Cde=a("strong"),B2o=o("xlnet"),I2o=o(" \u2014 "),uq=a("a"),N2o=o("XLNetTokenizer"),q2o=o(" or "),pq=a("a"),j2o=o("XLNetTokenizerFast"),D2o=o(" (XLNet model)"),G2o=l(),Us=a("li"),wde=a("strong"),O2o=o("yoso"),V2o=o(" \u2014 "),_q=a("a"),X2o=o("AlbertTokenizer"),z2o=o(" or "),bq=a("a"),W2o=o("AlbertTokenizerFast"),Q2o=o(" (YOSO model)"),H2o=l(),F(Nh.$$.fragment),U2o=l(),qh=a("div"),F(Py.$$.fragment),J2o=l(),Ade=a("p"),Y2o=o("Register a new tokenizer in this mapping."),bze=l(),Gi=a("h2"),jh=a("a"),Lde=a("span"),F(By.$$.fragment),K2o=l(),yde=a("span"),Z2o=o("AutoFeatureExtractor"),vze=l(),xo=a("div"),F(Iy.$$.fragment),ebo=l(),Ny=a("p"),obo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),vq=a("a"),rbo=o("AutoFeatureExtractor.from_pretrained()"),tbo=o(" class method."),abo=l(),qy=a("p"),nbo=o("This class cannot be instantiated directly using "),xde=a("code"),sbo=o("__init__()"),lbo=o(" (throws an error)."),ibo=l(),Ue=a("div"),F(jy.$$.fragment),dbo=l(),$de=a("p"),cbo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),mbo=l(),Ba=a("p"),fbo=o("The feature extractor class to instantiate is selected based on the "),kde=a("code"),gbo=o("model_type"),hbo=o(` property of the config object
(either passed as an argument or loaded from `),Sde=a("code"),ubo=o("pretrained_model_name_or_path"),pbo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Rde=a("code"),_bo=o("pretrained_model_name_or_path"),bbo=o(":"),vbo=l(),U=a("ul"),Dh=a("li"),Pde=a("strong"),Fbo=o("beit"),Tbo=o(" \u2014 "),Fq=a("a"),Mbo=o("BeitFeatureExtractor"),Ebo=o(" (BEiT model)"),Cbo=l(),Gh=a("li"),Bde=a("strong"),wbo=o("clip"),Abo=o(" \u2014 "),Tq=a("a"),Lbo=o("CLIPFeatureExtractor"),ybo=o(" (CLIP model)"),xbo=l(),Oh=a("li"),Ide=a("strong"),$bo=o("convnext"),kbo=o(" \u2014 "),Mq=a("a"),Sbo=o("ConvNextFeatureExtractor"),Rbo=o(" (ConvNeXT model)"),Pbo=l(),Vh=a("li"),Nde=a("strong"),Bbo=o("cvt"),Ibo=o(" \u2014 "),Eq=a("a"),Nbo=o("ConvNextFeatureExtractor"),qbo=o(" (CvT model)"),jbo=l(),Xh=a("li"),qde=a("strong"),Dbo=o("data2vec-audio"),Gbo=o(" \u2014 "),Cq=a("a"),Obo=o("Wav2Vec2FeatureExtractor"),Vbo=o(" (Data2VecAudio model)"),Xbo=l(),zh=a("li"),jde=a("strong"),zbo=o("data2vec-vision"),Wbo=o(" \u2014 "),wq=a("a"),Qbo=o("BeitFeatureExtractor"),Hbo=o(" (Data2VecVision model)"),Ubo=l(),Wh=a("li"),Dde=a("strong"),Jbo=o("deit"),Ybo=o(" \u2014 "),Aq=a("a"),Kbo=o("DeiTFeatureExtractor"),Zbo=o(" (DeiT model)"),evo=l(),Qh=a("li"),Gde=a("strong"),ovo=o("detr"),rvo=o(" \u2014 "),Lq=a("a"),tvo=o("DetrFeatureExtractor"),avo=o(" (DETR model)"),nvo=l(),Hh=a("li"),Ode=a("strong"),svo=o("dpt"),lvo=o(" \u2014 "),yq=a("a"),ivo=o("DPTFeatureExtractor"),dvo=o(" (DPT model)"),cvo=l(),Uh=a("li"),Vde=a("strong"),mvo=o("flava"),fvo=o(" \u2014 "),xq=a("a"),gvo=o("FlavaFeatureExtractor"),hvo=o(" (FLAVA model)"),uvo=l(),Jh=a("li"),Xde=a("strong"),pvo=o("glpn"),_vo=o(" \u2014 "),$q=a("a"),bvo=o("GLPNFeatureExtractor"),vvo=o(" (GLPN model)"),Fvo=l(),Yh=a("li"),zde=a("strong"),Tvo=o("groupvit"),Mvo=o(" \u2014 "),kq=a("a"),Evo=o("CLIPFeatureExtractor"),Cvo=o(" (GroupViT model)"),wvo=l(),Kh=a("li"),Wde=a("strong"),Avo=o("hubert"),Lvo=o(" \u2014 "),Sq=a("a"),yvo=o("Wav2Vec2FeatureExtractor"),xvo=o(" (Hubert model)"),$vo=l(),Zh=a("li"),Qde=a("strong"),kvo=o("imagegpt"),Svo=o(" \u2014 "),Rq=a("a"),Rvo=o("ImageGPTFeatureExtractor"),Pvo=o(" (ImageGPT model)"),Bvo=l(),eu=a("li"),Hde=a("strong"),Ivo=o("layoutlmv2"),Nvo=o(" \u2014 "),Pq=a("a"),qvo=o("LayoutLMv2FeatureExtractor"),jvo=o(" (LayoutLMv2 model)"),Dvo=l(),ou=a("li"),Ude=a("strong"),Gvo=o("layoutlmv3"),Ovo=o(" \u2014 "),Bq=a("a"),Vvo=o("LayoutLMv3FeatureExtractor"),Xvo=o(" (LayoutLMv3 model)"),zvo=l(),ru=a("li"),Jde=a("strong"),Wvo=o("levit"),Qvo=o(" \u2014 "),Iq=a("a"),Hvo=o("LevitFeatureExtractor"),Uvo=o(" (LeViT model)"),Jvo=l(),tu=a("li"),Yde=a("strong"),Yvo=o("maskformer"),Kvo=o(" \u2014 "),Nq=a("a"),Zvo=o("MaskFormerFeatureExtractor"),e1o=o(" (MaskFormer model)"),o1o=l(),au=a("li"),Kde=a("strong"),r1o=o("mctct"),t1o=o(" \u2014 "),qq=a("a"),a1o=o("MCTCTFeatureExtractor"),n1o=o(" (M-CTC-T model)"),s1o=l(),nu=a("li"),Zde=a("strong"),l1o=o("mobilevit"),i1o=o(" \u2014 "),jq=a("a"),d1o=o("MobileViTFeatureExtractor"),c1o=o(" (MobileViT model)"),m1o=l(),su=a("li"),ece=a("strong"),f1o=o("owlvit"),g1o=o(" \u2014 "),Dq=a("a"),h1o=o("OwlViTFeatureExtractor"),u1o=o(" (OWL-ViT model)"),p1o=l(),lu=a("li"),oce=a("strong"),_1o=o("perceiver"),b1o=o(" \u2014 "),Gq=a("a"),v1o=o("PerceiverFeatureExtractor"),F1o=o(" (Perceiver model)"),T1o=l(),iu=a("li"),rce=a("strong"),M1o=o("poolformer"),E1o=o(" \u2014 "),Oq=a("a"),C1o=o("PoolFormerFeatureExtractor"),w1o=o(" (PoolFormer model)"),A1o=l(),du=a("li"),tce=a("strong"),L1o=o("regnet"),y1o=o(" \u2014 "),Vq=a("a"),x1o=o("ConvNextFeatureExtractor"),$1o=o(" (RegNet model)"),k1o=l(),cu=a("li"),ace=a("strong"),S1o=o("resnet"),R1o=o(" \u2014 "),Xq=a("a"),P1o=o("ConvNextFeatureExtractor"),B1o=o(" (ResNet model)"),I1o=l(),mu=a("li"),nce=a("strong"),N1o=o("segformer"),q1o=o(" \u2014 "),zq=a("a"),j1o=o("SegformerFeatureExtractor"),D1o=o(" (SegFormer model)"),G1o=l(),fu=a("li"),sce=a("strong"),O1o=o("speech_to_text"),V1o=o(" \u2014 "),Wq=a("a"),X1o=o("Speech2TextFeatureExtractor"),z1o=o(" (Speech2Text model)"),W1o=l(),gu=a("li"),lce=a("strong"),Q1o=o("swin"),H1o=o(" \u2014 "),Qq=a("a"),U1o=o("ViTFeatureExtractor"),J1o=o(" (Swin Transformer model)"),Y1o=l(),hu=a("li"),ice=a("strong"),K1o=o("swinv2"),Z1o=o(" \u2014 "),Hq=a("a"),eFo=o("ViTFeatureExtractor"),oFo=o(" (Swin Transformer V2 model)"),rFo=l(),uu=a("li"),dce=a("strong"),tFo=o("van"),aFo=o(" \u2014 "),Uq=a("a"),nFo=o("ConvNextFeatureExtractor"),sFo=o(" (VAN model)"),lFo=l(),pu=a("li"),cce=a("strong"),iFo=o("vilt"),dFo=o(" \u2014 "),Jq=a("a"),cFo=o("ViltFeatureExtractor"),mFo=o(" (ViLT model)"),fFo=l(),_u=a("li"),mce=a("strong"),gFo=o("vit"),hFo=o(" \u2014 "),Yq=a("a"),uFo=o("ViTFeatureExtractor"),pFo=o(" (ViT model)"),_Fo=l(),bu=a("li"),fce=a("strong"),bFo=o("vit_mae"),vFo=o(" \u2014 "),Kq=a("a"),FFo=o("ViTFeatureExtractor"),TFo=o(" (ViTMAE model)"),MFo=l(),vu=a("li"),gce=a("strong"),EFo=o("wav2vec2"),CFo=o(" \u2014 "),Zq=a("a"),wFo=o("Wav2Vec2FeatureExtractor"),AFo=o(" (Wav2Vec2 model)"),LFo=l(),Fu=a("li"),hce=a("strong"),yFo=o("wav2vec2-conformer"),xFo=o(" \u2014 "),ej=a("a"),$Fo=o("Wav2Vec2FeatureExtractor"),kFo=o(" (Wav2Vec2-Conformer model)"),SFo=l(),Tu=a("li"),uce=a("strong"),RFo=o("yolos"),PFo=o(" \u2014 "),oj=a("a"),BFo=o("YolosFeatureExtractor"),IFo=o(" (YOLOS model)"),NFo=l(),F(Mu.$$.fragment),qFo=l(),F(Eu.$$.fragment),jFo=l(),Cu=a("div"),F(Dy.$$.fragment),DFo=l(),pce=a("p"),GFo=o("Register a new feature extractor for this class."),Fze=l(),Oi=a("h2"),wu=a("a"),_ce=a("span"),F(Gy.$$.fragment),OFo=l(),bce=a("span"),VFo=o("AutoProcessor"),Tze=l(),$o=a("div"),F(Oy.$$.fragment),XFo=l(),Vy=a("p"),zFo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),rj=a("a"),WFo=o("AutoProcessor.from_pretrained()"),QFo=o(" class method."),HFo=l(),Xy=a("p"),UFo=o("This class cannot be instantiated directly using "),vce=a("code"),JFo=o("__init__()"),YFo=o(" (throws an error)."),KFo=l(),Je=a("div"),F(zy.$$.fragment),ZFo=l(),Fce=a("p"),eTo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),oTo=l(),Vi=a("p"),rTo=o("The processor class to instantiate is selected based on the "),Tce=a("code"),tTo=o("model_type"),aTo=o(` property of the config object (either
passed as an argument or loaded from `),Mce=a("code"),nTo=o("pretrained_model_name_or_path"),sTo=o(" if possible):"),lTo=l(),me=a("ul"),Au=a("li"),Ece=a("strong"),iTo=o("clip"),dTo=o(" \u2014 "),tj=a("a"),cTo=o("CLIPProcessor"),mTo=o(" (CLIP model)"),fTo=l(),Lu=a("li"),Cce=a("strong"),gTo=o("flava"),hTo=o(" \u2014 "),aj=a("a"),uTo=o("FlavaProcessor"),pTo=o(" (FLAVA model)"),_To=l(),yu=a("li"),wce=a("strong"),bTo=o("groupvit"),vTo=o(" \u2014 "),nj=a("a"),FTo=o("CLIPProcessor"),TTo=o(" (GroupViT model)"),MTo=l(),xu=a("li"),Ace=a("strong"),ETo=o("layoutlmv2"),CTo=o(" \u2014 "),sj=a("a"),wTo=o("LayoutLMv2Processor"),ATo=o(" (LayoutLMv2 model)"),LTo=l(),$u=a("li"),Lce=a("strong"),yTo=o("layoutlmv3"),xTo=o(" \u2014 "),lj=a("a"),$To=o("LayoutLMv3Processor"),kTo=o(" (LayoutLMv3 model)"),STo=l(),ku=a("li"),yce=a("strong"),RTo=o("layoutxlm"),PTo=o(" \u2014 "),ij=a("a"),BTo=o("LayoutXLMProcessor"),ITo=o(" (LayoutXLM model)"),NTo=l(),Su=a("li"),xce=a("strong"),qTo=o("owlvit"),jTo=o(" \u2014 "),dj=a("a"),DTo=o("OwlViTProcessor"),GTo=o(" (OWL-ViT model)"),OTo=l(),Ru=a("li"),$ce=a("strong"),VTo=o("sew"),XTo=o(" \u2014 "),cj=a("a"),zTo=o("Wav2Vec2Processor"),WTo=o(" (SEW model)"),QTo=l(),Pu=a("li"),kce=a("strong"),HTo=o("sew-d"),UTo=o(" \u2014 "),mj=a("a"),JTo=o("Wav2Vec2Processor"),YTo=o(" (SEW-D model)"),KTo=l(),Bu=a("li"),Sce=a("strong"),ZTo=o("speech_to_text"),eMo=o(" \u2014 "),fj=a("a"),oMo=o("Speech2TextProcessor"),rMo=o(" (Speech2Text model)"),tMo=l(),Iu=a("li"),Rce=a("strong"),aMo=o("speech_to_text_2"),nMo=o(" \u2014 "),gj=a("a"),sMo=o("Speech2Text2Processor"),lMo=o(" (Speech2Text2 model)"),iMo=l(),Nu=a("li"),Pce=a("strong"),dMo=o("trocr"),cMo=o(" \u2014 "),hj=a("a"),mMo=o("TrOCRProcessor"),fMo=o(" (TrOCR model)"),gMo=l(),qu=a("li"),Bce=a("strong"),hMo=o("unispeech"),uMo=o(" \u2014 "),uj=a("a"),pMo=o("Wav2Vec2Processor"),_Mo=o(" (UniSpeech model)"),bMo=l(),ju=a("li"),Ice=a("strong"),vMo=o("unispeech-sat"),FMo=o(" \u2014 "),pj=a("a"),TMo=o("Wav2Vec2Processor"),MMo=o(" (UniSpeechSat model)"),EMo=l(),Du=a("li"),Nce=a("strong"),CMo=o("vilt"),wMo=o(" \u2014 "),_j=a("a"),AMo=o("ViltProcessor"),LMo=o(" (ViLT model)"),yMo=l(),Gu=a("li"),qce=a("strong"),xMo=o("vision-text-dual-encoder"),$Mo=o(" \u2014 "),bj=a("a"),kMo=o("VisionTextDualEncoderProcessor"),SMo=o(" (VisionTextDualEncoder model)"),RMo=l(),Ou=a("li"),jce=a("strong"),PMo=o("wav2vec2"),BMo=o(" \u2014 "),vj=a("a"),IMo=o("Wav2Vec2Processor"),NMo=o(" (Wav2Vec2 model)"),qMo=l(),Vu=a("li"),Dce=a("strong"),jMo=o("wav2vec2-conformer"),DMo=o(" \u2014 "),Fj=a("a"),GMo=o("Wav2Vec2Processor"),OMo=o(" (Wav2Vec2-Conformer model)"),VMo=l(),Xu=a("li"),Gce=a("strong"),XMo=o("wavlm"),zMo=o(" \u2014 "),Tj=a("a"),WMo=o("Wav2Vec2Processor"),QMo=o(" (WavLM model)"),HMo=l(),F(zu.$$.fragment),UMo=l(),F(Wu.$$.fragment),JMo=l(),Qu=a("div"),F(Wy.$$.fragment),YMo=l(),Oce=a("p"),KMo=o("Register a new processor for this class."),Mze=l(),Xi=a("h2"),Hu=a("a"),Vce=a("span"),F(Qy.$$.fragment),ZMo=l(),Xce=a("span"),e4o=o("AutoModel"),Eze=l(),ko=a("div"),F(Hy.$$.fragment),o4o=l(),zi=a("p"),r4o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Mj=a("a"),t4o=o("from_pretrained()"),a4o=o(" class method or the "),Ej=a("a"),n4o=o("from_config()"),s4o=o(` class
method.`),l4o=l(),Uy=a("p"),i4o=o("This class cannot be instantiated directly using "),zce=a("code"),d4o=o("__init__()"),c4o=o(" (throws an error)."),m4o=l(),it=a("div"),F(Jy.$$.fragment),f4o=l(),Wce=a("p"),g4o=o("Instantiates one of the base model classes of the library from a configuration."),h4o=l(),Wi=a("p"),u4o=o(`Note:
Loading a model from its configuration file does `),Qce=a("strong"),p4o=o("not"),_4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=a("a"),b4o=o("from_pretrained()"),v4o=o(" to load the model weights."),F4o=l(),F(Uu.$$.fragment),T4o=l(),Ye=a("div"),F(Yy.$$.fragment),M4o=l(),Hce=a("p"),E4o=o("Instantiate one of the base model classes of the library from a pretrained model."),C4o=l(),Ia=a("p"),w4o=o("The model class to instantiate is selected based on the "),Uce=a("code"),A4o=o("model_type"),L4o=o(` property of the config object (either
passed as an argument or loaded from `),Jce=a("code"),y4o=o("pretrained_model_name_or_path"),x4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yce=a("code"),$4o=o("pretrained_model_name_or_path"),k4o=o(":"),S4o=l(),y=a("ul"),Ju=a("li"),Kce=a("strong"),R4o=o("albert"),P4o=o(" \u2014 "),wj=a("a"),B4o=o("AlbertModel"),I4o=o(" (ALBERT model)"),N4o=l(),Yu=a("li"),Zce=a("strong"),q4o=o("bart"),j4o=o(" \u2014 "),Aj=a("a"),D4o=o("BartModel"),G4o=o(" (BART model)"),O4o=l(),Ku=a("li"),eme=a("strong"),V4o=o("beit"),X4o=o(" \u2014 "),Lj=a("a"),z4o=o("BeitModel"),W4o=o(" (BEiT model)"),Q4o=l(),Zu=a("li"),ome=a("strong"),H4o=o("bert"),U4o=o(" \u2014 "),yj=a("a"),J4o=o("BertModel"),Y4o=o(" (BERT model)"),K4o=l(),ep=a("li"),rme=a("strong"),Z4o=o("bert-generation"),eEo=o(" \u2014 "),xj=a("a"),oEo=o("BertGenerationEncoder"),rEo=o(" (Bert Generation model)"),tEo=l(),op=a("li"),tme=a("strong"),aEo=o("big_bird"),nEo=o(" \u2014 "),$j=a("a"),sEo=o("BigBirdModel"),lEo=o(" (BigBird model)"),iEo=l(),rp=a("li"),ame=a("strong"),dEo=o("bigbird_pegasus"),cEo=o(" \u2014 "),kj=a("a"),mEo=o("BigBirdPegasusModel"),fEo=o(" (BigBird-Pegasus model)"),gEo=l(),tp=a("li"),nme=a("strong"),hEo=o("blenderbot"),uEo=o(" \u2014 "),Sj=a("a"),pEo=o("BlenderbotModel"),_Eo=o(" (Blenderbot model)"),bEo=l(),ap=a("li"),sme=a("strong"),vEo=o("blenderbot-small"),FEo=o(" \u2014 "),Rj=a("a"),TEo=o("BlenderbotSmallModel"),MEo=o(" (BlenderbotSmall model)"),EEo=l(),np=a("li"),lme=a("strong"),CEo=o("bloom"),wEo=o(" \u2014 "),Pj=a("a"),AEo=o("BloomModel"),LEo=o(" (BLOOM model)"),yEo=l(),sp=a("li"),ime=a("strong"),xEo=o("camembert"),$Eo=o(" \u2014 "),Bj=a("a"),kEo=o("CamembertModel"),SEo=o(" (CamemBERT model)"),REo=l(),lp=a("li"),dme=a("strong"),PEo=o("canine"),BEo=o(" \u2014 "),Ij=a("a"),IEo=o("CanineModel"),NEo=o(" (CANINE model)"),qEo=l(),ip=a("li"),cme=a("strong"),jEo=o("clip"),DEo=o(" \u2014 "),Nj=a("a"),GEo=o("CLIPModel"),OEo=o(" (CLIP model)"),VEo=l(),dp=a("li"),mme=a("strong"),XEo=o("codegen"),zEo=o(" \u2014 "),qj=a("a"),WEo=o("CodeGenModel"),QEo=o(" (CodeGen model)"),HEo=l(),cp=a("li"),fme=a("strong"),UEo=o("convbert"),JEo=o(" \u2014 "),jj=a("a"),YEo=o("ConvBertModel"),KEo=o(" (ConvBERT model)"),ZEo=l(),mp=a("li"),gme=a("strong"),eCo=o("convnext"),oCo=o(" \u2014 "),Dj=a("a"),rCo=o("ConvNextModel"),tCo=o(" (ConvNeXT model)"),aCo=l(),fp=a("li"),hme=a("strong"),nCo=o("ctrl"),sCo=o(" \u2014 "),Gj=a("a"),lCo=o("CTRLModel"),iCo=o(" (CTRL model)"),dCo=l(),gp=a("li"),ume=a("strong"),cCo=o("cvt"),mCo=o(" \u2014 "),Oj=a("a"),fCo=o("CvtModel"),gCo=o(" (CvT model)"),hCo=l(),hp=a("li"),pme=a("strong"),uCo=o("data2vec-audio"),pCo=o(" \u2014 "),Vj=a("a"),_Co=o("Data2VecAudioModel"),bCo=o(" (Data2VecAudio model)"),vCo=l(),up=a("li"),_me=a("strong"),FCo=o("data2vec-text"),TCo=o(" \u2014 "),Xj=a("a"),MCo=o("Data2VecTextModel"),ECo=o(" (Data2VecText model)"),CCo=l(),pp=a("li"),bme=a("strong"),wCo=o("data2vec-vision"),ACo=o(" \u2014 "),zj=a("a"),LCo=o("Data2VecVisionModel"),yCo=o(" (Data2VecVision model)"),xCo=l(),_p=a("li"),vme=a("strong"),$Co=o("deberta"),kCo=o(" \u2014 "),Wj=a("a"),SCo=o("DebertaModel"),RCo=o(" (DeBERTa model)"),PCo=l(),bp=a("li"),Fme=a("strong"),BCo=o("deberta-v2"),ICo=o(" \u2014 "),Qj=a("a"),NCo=o("DebertaV2Model"),qCo=o(" (DeBERTa-v2 model)"),jCo=l(),vp=a("li"),Tme=a("strong"),DCo=o("decision_transformer"),GCo=o(" \u2014 "),Hj=a("a"),OCo=o("DecisionTransformerModel"),VCo=o(" (Decision Transformer model)"),XCo=l(),Fp=a("li"),Mme=a("strong"),zCo=o("deit"),WCo=o(" \u2014 "),Uj=a("a"),QCo=o("DeiTModel"),HCo=o(" (DeiT model)"),UCo=l(),Tp=a("li"),Eme=a("strong"),JCo=o("detr"),YCo=o(" \u2014 "),Jj=a("a"),KCo=o("DetrModel"),ZCo=o(" (DETR model)"),e5o=l(),Mp=a("li"),Cme=a("strong"),o5o=o("distilbert"),r5o=o(" \u2014 "),Yj=a("a"),t5o=o("DistilBertModel"),a5o=o(" (DistilBERT model)"),n5o=l(),Ep=a("li"),wme=a("strong"),s5o=o("dpr"),l5o=o(" \u2014 "),Kj=a("a"),i5o=o("DPRQuestionEncoder"),d5o=o(" (DPR model)"),c5o=l(),Cp=a("li"),Ame=a("strong"),m5o=o("dpt"),f5o=o(" \u2014 "),Zj=a("a"),g5o=o("DPTModel"),h5o=o(" (DPT model)"),u5o=l(),wp=a("li"),Lme=a("strong"),p5o=o("electra"),_5o=o(" \u2014 "),eD=a("a"),b5o=o("ElectraModel"),v5o=o(" (ELECTRA model)"),F5o=l(),Ap=a("li"),yme=a("strong"),T5o=o("flaubert"),M5o=o(" \u2014 "),oD=a("a"),E5o=o("FlaubertModel"),C5o=o(" (FlauBERT model)"),w5o=l(),Lp=a("li"),xme=a("strong"),A5o=o("flava"),L5o=o(" \u2014 "),rD=a("a"),y5o=o("FlavaModel"),x5o=o(" (FLAVA model)"),$5o=l(),yp=a("li"),$me=a("strong"),k5o=o("fnet"),S5o=o(" \u2014 "),tD=a("a"),R5o=o("FNetModel"),P5o=o(" (FNet model)"),B5o=l(),xp=a("li"),kme=a("strong"),I5o=o("fsmt"),N5o=o(" \u2014 "),aD=a("a"),q5o=o("FSMTModel"),j5o=o(" (FairSeq Machine-Translation model)"),D5o=l(),Js=a("li"),Sme=a("strong"),G5o=o("funnel"),O5o=o(" \u2014 "),nD=a("a"),V5o=o("FunnelModel"),X5o=o(" or "),sD=a("a"),z5o=o("FunnelBaseModel"),W5o=o(" (Funnel Transformer model)"),Q5o=l(),$p=a("li"),Rme=a("strong"),H5o=o("glpn"),U5o=o(" \u2014 "),lD=a("a"),J5o=o("GLPNModel"),Y5o=o(" (GLPN model)"),K5o=l(),kp=a("li"),Pme=a("strong"),Z5o=o("gpt2"),e3o=o(" \u2014 "),iD=a("a"),o3o=o("GPT2Model"),r3o=o(" (OpenAI GPT-2 model)"),t3o=l(),Sp=a("li"),Bme=a("strong"),a3o=o("gpt_neo"),n3o=o(" \u2014 "),dD=a("a"),s3o=o("GPTNeoModel"),l3o=o(" (GPT Neo model)"),i3o=l(),Rp=a("li"),Ime=a("strong"),d3o=o("gpt_neox"),c3o=o(" \u2014 "),cD=a("a"),m3o=o("GPTNeoXModel"),f3o=o(" (GPT NeoX model)"),g3o=l(),Pp=a("li"),Nme=a("strong"),h3o=o("gptj"),u3o=o(" \u2014 "),mD=a("a"),p3o=o("GPTJModel"),_3o=o(" (GPT-J model)"),b3o=l(),Bp=a("li"),qme=a("strong"),v3o=o("groupvit"),F3o=o(" \u2014 "),fD=a("a"),T3o=o("GroupViTModel"),M3o=o(" (GroupViT model)"),E3o=l(),Ip=a("li"),jme=a("strong"),C3o=o("hubert"),w3o=o(" \u2014 "),gD=a("a"),A3o=o("HubertModel"),L3o=o(" (Hubert model)"),y3o=l(),Np=a("li"),Dme=a("strong"),x3o=o("ibert"),$3o=o(" \u2014 "),hD=a("a"),k3o=o("IBertModel"),S3o=o(" (I-BERT model)"),R3o=l(),qp=a("li"),Gme=a("strong"),P3o=o("imagegpt"),B3o=o(" \u2014 "),uD=a("a"),I3o=o("ImageGPTModel"),N3o=o(" (ImageGPT model)"),q3o=l(),jp=a("li"),Ome=a("strong"),j3o=o("layoutlm"),D3o=o(" \u2014 "),pD=a("a"),G3o=o("LayoutLMModel"),O3o=o(" (LayoutLM model)"),V3o=l(),Dp=a("li"),Vme=a("strong"),X3o=o("layoutlmv2"),z3o=o(" \u2014 "),_D=a("a"),W3o=o("LayoutLMv2Model"),Q3o=o(" (LayoutLMv2 model)"),H3o=l(),Gp=a("li"),Xme=a("strong"),U3o=o("layoutlmv3"),J3o=o(" \u2014 "),bD=a("a"),Y3o=o("LayoutLMv3Model"),K3o=o(" (LayoutLMv3 model)"),Z3o=l(),Op=a("li"),zme=a("strong"),e0o=o("led"),o0o=o(" \u2014 "),vD=a("a"),r0o=o("LEDModel"),t0o=o(" (LED model)"),a0o=l(),Vp=a("li"),Wme=a("strong"),n0o=o("levit"),s0o=o(" \u2014 "),FD=a("a"),l0o=o("LevitModel"),i0o=o(" (LeViT model)"),d0o=l(),Xp=a("li"),Qme=a("strong"),c0o=o("longformer"),m0o=o(" \u2014 "),TD=a("a"),f0o=o("LongformerModel"),g0o=o(" (Longformer model)"),h0o=l(),zp=a("li"),Hme=a("strong"),u0o=o("longt5"),p0o=o(" \u2014 "),MD=a("a"),_0o=o("LongT5Model"),b0o=o(" (LongT5 model)"),v0o=l(),Wp=a("li"),Ume=a("strong"),F0o=o("luke"),T0o=o(" \u2014 "),ED=a("a"),M0o=o("LukeModel"),E0o=o(" (LUKE model)"),C0o=l(),Qp=a("li"),Jme=a("strong"),w0o=o("lxmert"),A0o=o(" \u2014 "),CD=a("a"),L0o=o("LxmertModel"),y0o=o(" (LXMERT model)"),x0o=l(),Hp=a("li"),Yme=a("strong"),$0o=o("m2m_100"),k0o=o(" \u2014 "),wD=a("a"),S0o=o("M2M100Model"),R0o=o(" (M2M100 model)"),P0o=l(),Up=a("li"),Kme=a("strong"),B0o=o("marian"),I0o=o(" \u2014 "),AD=a("a"),N0o=o("MarianModel"),q0o=o(" (Marian model)"),j0o=l(),Jp=a("li"),Zme=a("strong"),D0o=o("maskformer"),G0o=o(" \u2014 "),LD=a("a"),O0o=o("MaskFormerModel"),V0o=o(" (MaskFormer model)"),X0o=l(),Yp=a("li"),efe=a("strong"),z0o=o("mbart"),W0o=o(" \u2014 "),yD=a("a"),Q0o=o("MBartModel"),H0o=o(" (mBART model)"),U0o=l(),Kp=a("li"),ofe=a("strong"),J0o=o("mctct"),Y0o=o(" \u2014 "),xD=a("a"),K0o=o("MCTCTModel"),Z0o=o(" (M-CTC-T model)"),ewo=l(),Zp=a("li"),rfe=a("strong"),owo=o("megatron-bert"),rwo=o(" \u2014 "),$D=a("a"),two=o("MegatronBertModel"),awo=o(" (Megatron-BERT model)"),nwo=l(),e_=a("li"),tfe=a("strong"),swo=o("mobilebert"),lwo=o(" \u2014 "),kD=a("a"),iwo=o("MobileBertModel"),dwo=o(" (MobileBERT model)"),cwo=l(),o_=a("li"),afe=a("strong"),mwo=o("mobilevit"),fwo=o(" \u2014 "),SD=a("a"),gwo=o("MobileViTModel"),hwo=o(" (MobileViT model)"),uwo=l(),r_=a("li"),nfe=a("strong"),pwo=o("mpnet"),_wo=o(" \u2014 "),RD=a("a"),bwo=o("MPNetModel"),vwo=o(" (MPNet model)"),Fwo=l(),t_=a("li"),sfe=a("strong"),Two=o("mt5"),Mwo=o(" \u2014 "),PD=a("a"),Ewo=o("MT5Model"),Cwo=o(" (MT5 model)"),wwo=l(),a_=a("li"),lfe=a("strong"),Awo=o("mvp"),Lwo=o(" \u2014 "),BD=a("a"),ywo=o("MvpModel"),xwo=o(" (MVP model)"),$wo=l(),n_=a("li"),ife=a("strong"),kwo=o("nezha"),Swo=o(" \u2014 "),ID=a("a"),Rwo=o("NezhaModel"),Pwo=o(" (Nezha model)"),Bwo=l(),s_=a("li"),dfe=a("strong"),Iwo=o("nllb"),Nwo=o(" \u2014 "),ND=a("a"),qwo=o("M2M100Model"),jwo=o(" (NLLB model)"),Dwo=l(),l_=a("li"),cfe=a("strong"),Gwo=o("nystromformer"),Owo=o(" \u2014 "),qD=a("a"),Vwo=o("NystromformerModel"),Xwo=o(" (Nystr\xF6mformer model)"),zwo=l(),i_=a("li"),mfe=a("strong"),Wwo=o("openai-gpt"),Qwo=o(" \u2014 "),jD=a("a"),Hwo=o("OpenAIGPTModel"),Uwo=o(" (OpenAI GPT model)"),Jwo=l(),d_=a("li"),ffe=a("strong"),Ywo=o("opt"),Kwo=o(" \u2014 "),DD=a("a"),Zwo=o("OPTModel"),eAo=o(" (OPT model)"),oAo=l(),c_=a("li"),gfe=a("strong"),rAo=o("owlvit"),tAo=o(" \u2014 "),GD=a("a"),aAo=o("OwlViTModel"),nAo=o(" (OWL-ViT model)"),sAo=l(),m_=a("li"),hfe=a("strong"),lAo=o("pegasus"),iAo=o(" \u2014 "),OD=a("a"),dAo=o("PegasusModel"),cAo=o(" (Pegasus model)"),mAo=l(),f_=a("li"),ufe=a("strong"),fAo=o("perceiver"),gAo=o(" \u2014 "),VD=a("a"),hAo=o("PerceiverModel"),uAo=o(" (Perceiver model)"),pAo=l(),g_=a("li"),pfe=a("strong"),_Ao=o("plbart"),bAo=o(" \u2014 "),XD=a("a"),vAo=o("PLBartModel"),FAo=o(" (PLBart model)"),TAo=l(),h_=a("li"),_fe=a("strong"),MAo=o("poolformer"),EAo=o(" \u2014 "),zD=a("a"),CAo=o("PoolFormerModel"),wAo=o(" (PoolFormer model)"),AAo=l(),u_=a("li"),bfe=a("strong"),LAo=o("prophetnet"),yAo=o(" \u2014 "),WD=a("a"),xAo=o("ProphetNetModel"),$Ao=o(" (ProphetNet model)"),kAo=l(),p_=a("li"),vfe=a("strong"),SAo=o("qdqbert"),RAo=o(" \u2014 "),QD=a("a"),PAo=o("QDQBertModel"),BAo=o(" (QDQBert model)"),IAo=l(),__=a("li"),Ffe=a("strong"),NAo=o("reformer"),qAo=o(" \u2014 "),HD=a("a"),jAo=o("ReformerModel"),DAo=o(" (Reformer model)"),GAo=l(),b_=a("li"),Tfe=a("strong"),OAo=o("regnet"),VAo=o(" \u2014 "),UD=a("a"),XAo=o("RegNetModel"),zAo=o(" (RegNet model)"),WAo=l(),v_=a("li"),Mfe=a("strong"),QAo=o("rembert"),HAo=o(" \u2014 "),JD=a("a"),UAo=o("RemBertModel"),JAo=o(" (RemBERT model)"),YAo=l(),F_=a("li"),Efe=a("strong"),KAo=o("resnet"),ZAo=o(" \u2014 "),YD=a("a"),e6o=o("ResNetModel"),o6o=o(" (ResNet model)"),r6o=l(),T_=a("li"),Cfe=a("strong"),t6o=o("retribert"),a6o=o(" \u2014 "),KD=a("a"),n6o=o("RetriBertModel"),s6o=o(" (RetriBERT model)"),l6o=l(),M_=a("li"),wfe=a("strong"),i6o=o("roberta"),d6o=o(" \u2014 "),ZD=a("a"),c6o=o("RobertaModel"),m6o=o(" (RoBERTa model)"),f6o=l(),E_=a("li"),Afe=a("strong"),g6o=o("roformer"),h6o=o(" \u2014 "),eG=a("a"),u6o=o("RoFormerModel"),p6o=o(" (RoFormer model)"),_6o=l(),C_=a("li"),Lfe=a("strong"),b6o=o("segformer"),v6o=o(" \u2014 "),oG=a("a"),F6o=o("SegformerModel"),T6o=o(" (SegFormer model)"),M6o=l(),w_=a("li"),yfe=a("strong"),E6o=o("sew"),C6o=o(" \u2014 "),rG=a("a"),w6o=o("SEWModel"),A6o=o(" (SEW model)"),L6o=l(),A_=a("li"),xfe=a("strong"),y6o=o("sew-d"),x6o=o(" \u2014 "),tG=a("a"),$6o=o("SEWDModel"),k6o=o(" (SEW-D model)"),S6o=l(),L_=a("li"),$fe=a("strong"),R6o=o("speech_to_text"),P6o=o(" \u2014 "),aG=a("a"),B6o=o("Speech2TextModel"),I6o=o(" (Speech2Text model)"),N6o=l(),y_=a("li"),kfe=a("strong"),q6o=o("splinter"),j6o=o(" \u2014 "),nG=a("a"),D6o=o("SplinterModel"),G6o=o(" (Splinter model)"),O6o=l(),x_=a("li"),Sfe=a("strong"),V6o=o("squeezebert"),X6o=o(" \u2014 "),sG=a("a"),z6o=o("SqueezeBertModel"),W6o=o(" (SqueezeBERT model)"),Q6o=l(),$_=a("li"),Rfe=a("strong"),H6o=o("swin"),U6o=o(" \u2014 "),lG=a("a"),J6o=o("SwinModel"),Y6o=o(" (Swin Transformer model)"),K6o=l(),k_=a("li"),Pfe=a("strong"),Z6o=o("swinv2"),e7o=o(" \u2014 "),iG=a("a"),o7o=o("Swinv2Model"),r7o=o(" (Swin Transformer V2 model)"),t7o=l(),S_=a("li"),Bfe=a("strong"),a7o=o("t5"),n7o=o(" \u2014 "),dG=a("a"),s7o=o("T5Model"),l7o=o(" (T5 model)"),i7o=l(),R_=a("li"),Ife=a("strong"),d7o=o("tapas"),c7o=o(" \u2014 "),cG=a("a"),m7o=o("TapasModel"),f7o=o(" (TAPAS model)"),g7o=l(),P_=a("li"),Nfe=a("strong"),h7o=o("trajectory_transformer"),u7o=o(" \u2014 "),mG=a("a"),p7o=o("TrajectoryTransformerModel"),_7o=o(" (Trajectory Transformer model)"),b7o=l(),B_=a("li"),qfe=a("strong"),v7o=o("transfo-xl"),F7o=o(" \u2014 "),fG=a("a"),T7o=o("TransfoXLModel"),M7o=o(" (Transformer-XL model)"),E7o=l(),I_=a("li"),jfe=a("strong"),C7o=o("unispeech"),w7o=o(" \u2014 "),gG=a("a"),A7o=o("UniSpeechModel"),L7o=o(" (UniSpeech model)"),y7o=l(),N_=a("li"),Dfe=a("strong"),x7o=o("unispeech-sat"),$7o=o(" \u2014 "),hG=a("a"),k7o=o("UniSpeechSatModel"),S7o=o(" (UniSpeechSat model)"),R7o=l(),q_=a("li"),Gfe=a("strong"),P7o=o("van"),B7o=o(" \u2014 "),uG=a("a"),I7o=o("VanModel"),N7o=o(" (VAN model)"),q7o=l(),j_=a("li"),Ofe=a("strong"),j7o=o("vilt"),D7o=o(" \u2014 "),pG=a("a"),G7o=o("ViltModel"),O7o=o(" (ViLT model)"),V7o=l(),D_=a("li"),Vfe=a("strong"),X7o=o("vision-text-dual-encoder"),z7o=o(" \u2014 "),_G=a("a"),W7o=o("VisionTextDualEncoderModel"),Q7o=o(" (VisionTextDualEncoder model)"),H7o=l(),G_=a("li"),Xfe=a("strong"),U7o=o("visual_bert"),J7o=o(" \u2014 "),bG=a("a"),Y7o=o("VisualBertModel"),K7o=o(" (VisualBERT model)"),Z7o=l(),O_=a("li"),zfe=a("strong"),eLo=o("vit"),oLo=o(" \u2014 "),vG=a("a"),rLo=o("ViTModel"),tLo=o(" (ViT model)"),aLo=l(),V_=a("li"),Wfe=a("strong"),nLo=o("vit_mae"),sLo=o(" \u2014 "),FG=a("a"),lLo=o("ViTMAEModel"),iLo=o(" (ViTMAE model)"),dLo=l(),X_=a("li"),Qfe=a("strong"),cLo=o("wav2vec2"),mLo=o(" \u2014 "),TG=a("a"),fLo=o("Wav2Vec2Model"),gLo=o(" (Wav2Vec2 model)"),hLo=l(),z_=a("li"),Hfe=a("strong"),uLo=o("wav2vec2-conformer"),pLo=o(" \u2014 "),MG=a("a"),_Lo=o("Wav2Vec2ConformerModel"),bLo=o(" (Wav2Vec2-Conformer model)"),vLo=l(),W_=a("li"),Ufe=a("strong"),FLo=o("wavlm"),TLo=o(" \u2014 "),EG=a("a"),MLo=o("WavLMModel"),ELo=o(" (WavLM model)"),CLo=l(),Q_=a("li"),Jfe=a("strong"),wLo=o("xglm"),ALo=o(" \u2014 "),CG=a("a"),LLo=o("XGLMModel"),yLo=o(" (XGLM model)"),xLo=l(),H_=a("li"),Yfe=a("strong"),$Lo=o("xlm"),kLo=o(" \u2014 "),wG=a("a"),SLo=o("XLMModel"),RLo=o(" (XLM model)"),PLo=l(),U_=a("li"),Kfe=a("strong"),BLo=o("xlm-prophetnet"),ILo=o(" \u2014 "),AG=a("a"),NLo=o("XLMProphetNetModel"),qLo=o(" (XLM-ProphetNet model)"),jLo=l(),J_=a("li"),Zfe=a("strong"),DLo=o("xlm-roberta"),GLo=o(" \u2014 "),LG=a("a"),OLo=o("XLMRobertaModel"),VLo=o(" (XLM-RoBERTa model)"),XLo=l(),Y_=a("li"),ege=a("strong"),zLo=o("xlm-roberta-xl"),WLo=o(" \u2014 "),yG=a("a"),QLo=o("XLMRobertaXLModel"),HLo=o(" (XLM-RoBERTa-XL model)"),ULo=l(),K_=a("li"),oge=a("strong"),JLo=o("xlnet"),YLo=o(" \u2014 "),xG=a("a"),KLo=o("XLNetModel"),ZLo=o(" (XLNet model)"),eyo=l(),Z_=a("li"),rge=a("strong"),oyo=o("yolos"),ryo=o(" \u2014 "),$G=a("a"),tyo=o("YolosModel"),ayo=o(" (YOLOS model)"),nyo=l(),e2=a("li"),tge=a("strong"),syo=o("yoso"),lyo=o(" \u2014 "),kG=a("a"),iyo=o("YosoModel"),dyo=o(" (YOSO model)"),cyo=l(),o2=a("p"),myo=o("The model is set in evaluation mode by default using "),age=a("code"),fyo=o("model.eval()"),gyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=a("code"),hyo=o("model.train()"),uyo=l(),F(r2.$$.fragment),Cze=l(),Qi=a("h2"),t2=a("a"),sge=a("span"),F(Ky.$$.fragment),pyo=l(),lge=a("span"),_yo=o("AutoModelForPreTraining"),wze=l(),So=a("div"),F(Zy.$$.fragment),byo=l(),Hi=a("p"),vyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),SG=a("a"),Fyo=o("from_pretrained()"),Tyo=o(" class method or the "),RG=a("a"),Myo=o("from_config()"),Eyo=o(` class
method.`),Cyo=l(),e8=a("p"),wyo=o("This class cannot be instantiated directly using "),ige=a("code"),Ayo=o("__init__()"),Lyo=o(" (throws an error)."),yyo=l(),dt=a("div"),F(o8.$$.fragment),xyo=l(),dge=a("p"),$yo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kyo=l(),Ui=a("p"),Syo=o(`Note:
Loading a model from its configuration file does `),cge=a("strong"),Ryo=o("not"),Pyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=a("a"),Byo=o("from_pretrained()"),Iyo=o(" to load the model weights."),Nyo=l(),F(a2.$$.fragment),qyo=l(),Ke=a("div"),F(r8.$$.fragment),jyo=l(),mge=a("p"),Dyo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Gyo=l(),Na=a("p"),Oyo=o("The model class to instantiate is selected based on the "),fge=a("code"),Vyo=o("model_type"),Xyo=o(` property of the config object (either
passed as an argument or loaded from `),gge=a("code"),zyo=o("pretrained_model_name_or_path"),Wyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=a("code"),Qyo=o("pretrained_model_name_or_path"),Hyo=o(":"),Uyo=l(),G=a("ul"),n2=a("li"),uge=a("strong"),Jyo=o("albert"),Yyo=o(" \u2014 "),BG=a("a"),Kyo=o("AlbertForPreTraining"),Zyo=o(" (ALBERT model)"),e8o=l(),s2=a("li"),pge=a("strong"),o8o=o("bart"),r8o=o(" \u2014 "),IG=a("a"),t8o=o("BartForConditionalGeneration"),a8o=o(" (BART model)"),n8o=l(),l2=a("li"),_ge=a("strong"),s8o=o("bert"),l8o=o(" \u2014 "),NG=a("a"),i8o=o("BertForPreTraining"),d8o=o(" (BERT model)"),c8o=l(),i2=a("li"),bge=a("strong"),m8o=o("big_bird"),f8o=o(" \u2014 "),qG=a("a"),g8o=o("BigBirdForPreTraining"),h8o=o(" (BigBird model)"),u8o=l(),d2=a("li"),vge=a("strong"),p8o=o("bloom"),_8o=o(" \u2014 "),jG=a("a"),b8o=o("BloomForCausalLM"),v8o=o(" (BLOOM model)"),F8o=l(),c2=a("li"),Fge=a("strong"),T8o=o("camembert"),M8o=o(" \u2014 "),DG=a("a"),E8o=o("CamembertForMaskedLM"),C8o=o(" (CamemBERT model)"),w8o=l(),m2=a("li"),Tge=a("strong"),A8o=o("ctrl"),L8o=o(" \u2014 "),GG=a("a"),y8o=o("CTRLLMHeadModel"),x8o=o(" (CTRL model)"),$8o=l(),f2=a("li"),Mge=a("strong"),k8o=o("data2vec-text"),S8o=o(" \u2014 "),OG=a("a"),R8o=o("Data2VecTextForMaskedLM"),P8o=o(" (Data2VecText model)"),B8o=l(),g2=a("li"),Ege=a("strong"),I8o=o("deberta"),N8o=o(" \u2014 "),VG=a("a"),q8o=o("DebertaForMaskedLM"),j8o=o(" (DeBERTa model)"),D8o=l(),h2=a("li"),Cge=a("strong"),G8o=o("deberta-v2"),O8o=o(" \u2014 "),XG=a("a"),V8o=o("DebertaV2ForMaskedLM"),X8o=o(" (DeBERTa-v2 model)"),z8o=l(),u2=a("li"),wge=a("strong"),W8o=o("distilbert"),Q8o=o(" \u2014 "),zG=a("a"),H8o=o("DistilBertForMaskedLM"),U8o=o(" (DistilBERT model)"),J8o=l(),p2=a("li"),Age=a("strong"),Y8o=o("electra"),K8o=o(" \u2014 "),WG=a("a"),Z8o=o("ElectraForPreTraining"),e9o=o(" (ELECTRA model)"),o9o=l(),_2=a("li"),Lge=a("strong"),r9o=o("flaubert"),t9o=o(" \u2014 "),QG=a("a"),a9o=o("FlaubertWithLMHeadModel"),n9o=o(" (FlauBERT model)"),s9o=l(),b2=a("li"),yge=a("strong"),l9o=o("flava"),i9o=o(" \u2014 "),HG=a("a"),d9o=o("FlavaForPreTraining"),c9o=o(" (FLAVA model)"),m9o=l(),v2=a("li"),xge=a("strong"),f9o=o("fnet"),g9o=o(" \u2014 "),UG=a("a"),h9o=o("FNetForPreTraining"),u9o=o(" (FNet model)"),p9o=l(),F2=a("li"),$ge=a("strong"),_9o=o("fsmt"),b9o=o(" \u2014 "),JG=a("a"),v9o=o("FSMTForConditionalGeneration"),F9o=o(" (FairSeq Machine-Translation model)"),T9o=l(),T2=a("li"),kge=a("strong"),M9o=o("funnel"),E9o=o(" \u2014 "),YG=a("a"),C9o=o("FunnelForPreTraining"),w9o=o(" (Funnel Transformer model)"),A9o=l(),M2=a("li"),Sge=a("strong"),L9o=o("gpt2"),y9o=o(" \u2014 "),KG=a("a"),x9o=o("GPT2LMHeadModel"),$9o=o(" (OpenAI GPT-2 model)"),k9o=l(),E2=a("li"),Rge=a("strong"),S9o=o("ibert"),R9o=o(" \u2014 "),ZG=a("a"),P9o=o("IBertForMaskedLM"),B9o=o(" (I-BERT model)"),I9o=l(),C2=a("li"),Pge=a("strong"),N9o=o("layoutlm"),q9o=o(" \u2014 "),eO=a("a"),j9o=o("LayoutLMForMaskedLM"),D9o=o(" (LayoutLM model)"),G9o=l(),w2=a("li"),Bge=a("strong"),O9o=o("longformer"),V9o=o(" \u2014 "),oO=a("a"),X9o=o("LongformerForMaskedLM"),z9o=o(" (Longformer model)"),W9o=l(),A2=a("li"),Ige=a("strong"),Q9o=o("lxmert"),H9o=o(" \u2014 "),rO=a("a"),U9o=o("LxmertForPreTraining"),J9o=o(" (LXMERT model)"),Y9o=l(),L2=a("li"),Nge=a("strong"),K9o=o("megatron-bert"),Z9o=o(" \u2014 "),tO=a("a"),exo=o("MegatronBertForPreTraining"),oxo=o(" (Megatron-BERT model)"),rxo=l(),y2=a("li"),qge=a("strong"),txo=o("mobilebert"),axo=o(" \u2014 "),aO=a("a"),nxo=o("MobileBertForPreTraining"),sxo=o(" (MobileBERT model)"),lxo=l(),x2=a("li"),jge=a("strong"),ixo=o("mpnet"),dxo=o(" \u2014 "),nO=a("a"),cxo=o("MPNetForMaskedLM"),mxo=o(" (MPNet model)"),fxo=l(),$2=a("li"),Dge=a("strong"),gxo=o("mvp"),hxo=o(" \u2014 "),sO=a("a"),uxo=o("MvpForConditionalGeneration"),pxo=o(" (MVP model)"),_xo=l(),k2=a("li"),Gge=a("strong"),bxo=o("nezha"),vxo=o(" \u2014 "),lO=a("a"),Fxo=o("NezhaForPreTraining"),Txo=o(" (Nezha model)"),Mxo=l(),S2=a("li"),Oge=a("strong"),Exo=o("openai-gpt"),Cxo=o(" \u2014 "),iO=a("a"),wxo=o("OpenAIGPTLMHeadModel"),Axo=o(" (OpenAI GPT model)"),Lxo=l(),R2=a("li"),Vge=a("strong"),yxo=o("retribert"),xxo=o(" \u2014 "),dO=a("a"),$xo=o("RetriBertModel"),kxo=o(" (RetriBERT model)"),Sxo=l(),P2=a("li"),Xge=a("strong"),Rxo=o("roberta"),Pxo=o(" \u2014 "),cO=a("a"),Bxo=o("RobertaForMaskedLM"),Ixo=o(" (RoBERTa model)"),Nxo=l(),B2=a("li"),zge=a("strong"),qxo=o("splinter"),jxo=o(" \u2014 "),mO=a("a"),Dxo=o("SplinterForPreTraining"),Gxo=o(" (Splinter model)"),Oxo=l(),I2=a("li"),Wge=a("strong"),Vxo=o("squeezebert"),Xxo=o(" \u2014 "),fO=a("a"),zxo=o("SqueezeBertForMaskedLM"),Wxo=o(" (SqueezeBERT model)"),Qxo=l(),N2=a("li"),Qge=a("strong"),Hxo=o("t5"),Uxo=o(" \u2014 "),gO=a("a"),Jxo=o("T5ForConditionalGeneration"),Yxo=o(" (T5 model)"),Kxo=l(),q2=a("li"),Hge=a("strong"),Zxo=o("tapas"),e$o=o(" \u2014 "),hO=a("a"),o$o=o("TapasForMaskedLM"),r$o=o(" (TAPAS model)"),t$o=l(),j2=a("li"),Uge=a("strong"),a$o=o("transfo-xl"),n$o=o(" \u2014 "),uO=a("a"),s$o=o("TransfoXLLMHeadModel"),l$o=o(" (Transformer-XL model)"),i$o=l(),D2=a("li"),Jge=a("strong"),d$o=o("unispeech"),c$o=o(" \u2014 "),pO=a("a"),m$o=o("UniSpeechForPreTraining"),f$o=o(" (UniSpeech model)"),g$o=l(),G2=a("li"),Yge=a("strong"),h$o=o("unispeech-sat"),u$o=o(" \u2014 "),_O=a("a"),p$o=o("UniSpeechSatForPreTraining"),_$o=o(" (UniSpeechSat model)"),b$o=l(),O2=a("li"),Kge=a("strong"),v$o=o("visual_bert"),F$o=o(" \u2014 "),bO=a("a"),T$o=o("VisualBertForPreTraining"),M$o=o(" (VisualBERT model)"),E$o=l(),V2=a("li"),Zge=a("strong"),C$o=o("vit_mae"),w$o=o(" \u2014 "),vO=a("a"),A$o=o("ViTMAEForPreTraining"),L$o=o(" (ViTMAE model)"),y$o=l(),X2=a("li"),ehe=a("strong"),x$o=o("wav2vec2"),$$o=o(" \u2014 "),FO=a("a"),k$o=o("Wav2Vec2ForPreTraining"),S$o=o(" (Wav2Vec2 model)"),R$o=l(),z2=a("li"),ohe=a("strong"),P$o=o("wav2vec2-conformer"),B$o=o(" \u2014 "),TO=a("a"),I$o=o("Wav2Vec2ConformerForPreTraining"),N$o=o(" (Wav2Vec2-Conformer model)"),q$o=l(),W2=a("li"),rhe=a("strong"),j$o=o("xlm"),D$o=o(" \u2014 "),MO=a("a"),G$o=o("XLMWithLMHeadModel"),O$o=o(" (XLM model)"),V$o=l(),Q2=a("li"),the=a("strong"),X$o=o("xlm-roberta"),z$o=o(" \u2014 "),EO=a("a"),W$o=o("XLMRobertaForMaskedLM"),Q$o=o(" (XLM-RoBERTa model)"),H$o=l(),H2=a("li"),ahe=a("strong"),U$o=o("xlm-roberta-xl"),J$o=o(" \u2014 "),CO=a("a"),Y$o=o("XLMRobertaXLForMaskedLM"),K$o=o(" (XLM-RoBERTa-XL model)"),Z$o=l(),U2=a("li"),nhe=a("strong"),eko=o("xlnet"),oko=o(" \u2014 "),wO=a("a"),rko=o("XLNetLMHeadModel"),tko=o(" (XLNet model)"),ako=l(),J2=a("p"),nko=o("The model is set in evaluation mode by default using "),she=a("code"),sko=o("model.eval()"),lko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=a("code"),iko=o("model.train()"),dko=l(),F(Y2.$$.fragment),Aze=l(),Ji=a("h2"),K2=a("a"),ihe=a("span"),F(t8.$$.fragment),cko=l(),dhe=a("span"),mko=o("AutoModelForCausalLM"),Lze=l(),Ro=a("div"),F(a8.$$.fragment),fko=l(),Yi=a("p"),gko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),AO=a("a"),hko=o("from_pretrained()"),uko=o(" class method or the "),LO=a("a"),pko=o("from_config()"),_ko=o(` class
method.`),bko=l(),n8=a("p"),vko=o("This class cannot be instantiated directly using "),che=a("code"),Fko=o("__init__()"),Tko=o(" (throws an error)."),Mko=l(),ct=a("div"),F(s8.$$.fragment),Eko=l(),mhe=a("p"),Cko=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wko=l(),Ki=a("p"),Ako=o(`Note:
Loading a model from its configuration file does `),fhe=a("strong"),Lko=o("not"),yko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=a("a"),xko=o("from_pretrained()"),$ko=o(" to load the model weights."),kko=l(),F(Z2.$$.fragment),Sko=l(),Ze=a("div"),F(l8.$$.fragment),Rko=l(),ghe=a("p"),Pko=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Bko=l(),qa=a("p"),Iko=o("The model class to instantiate is selected based on the "),hhe=a("code"),Nko=o("model_type"),qko=o(` property of the config object (either
passed as an argument or loaded from `),uhe=a("code"),jko=o("pretrained_model_name_or_path"),Dko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),phe=a("code"),Gko=o("pretrained_model_name_or_path"),Oko=o(":"),Vko=l(),z=a("ul"),eb=a("li"),_he=a("strong"),Xko=o("bart"),zko=o(" \u2014 "),xO=a("a"),Wko=o("BartForCausalLM"),Qko=o(" (BART model)"),Hko=l(),ob=a("li"),bhe=a("strong"),Uko=o("bert"),Jko=o(" \u2014 "),$O=a("a"),Yko=o("BertLMHeadModel"),Kko=o(" (BERT model)"),Zko=l(),rb=a("li"),vhe=a("strong"),eSo=o("bert-generation"),oSo=o(" \u2014 "),kO=a("a"),rSo=o("BertGenerationDecoder"),tSo=o(" (Bert Generation model)"),aSo=l(),tb=a("li"),Fhe=a("strong"),nSo=o("big_bird"),sSo=o(" \u2014 "),SO=a("a"),lSo=o("BigBirdForCausalLM"),iSo=o(" (BigBird model)"),dSo=l(),ab=a("li"),The=a("strong"),cSo=o("bigbird_pegasus"),mSo=o(" \u2014 "),RO=a("a"),fSo=o("BigBirdPegasusForCausalLM"),gSo=o(" (BigBird-Pegasus model)"),hSo=l(),nb=a("li"),Mhe=a("strong"),uSo=o("blenderbot"),pSo=o(" \u2014 "),PO=a("a"),_So=o("BlenderbotForCausalLM"),bSo=o(" (Blenderbot model)"),vSo=l(),sb=a("li"),Ehe=a("strong"),FSo=o("blenderbot-small"),TSo=o(" \u2014 "),BO=a("a"),MSo=o("BlenderbotSmallForCausalLM"),ESo=o(" (BlenderbotSmall model)"),CSo=l(),lb=a("li"),Che=a("strong"),wSo=o("bloom"),ASo=o(" \u2014 "),IO=a("a"),LSo=o("BloomForCausalLM"),ySo=o(" (BLOOM model)"),xSo=l(),ib=a("li"),whe=a("strong"),$So=o("camembert"),kSo=o(" \u2014 "),NO=a("a"),SSo=o("CamembertForCausalLM"),RSo=o(" (CamemBERT model)"),PSo=l(),db=a("li"),Ahe=a("strong"),BSo=o("codegen"),ISo=o(" \u2014 "),qO=a("a"),NSo=o("CodeGenForCausalLM"),qSo=o(" (CodeGen model)"),jSo=l(),cb=a("li"),Lhe=a("strong"),DSo=o("ctrl"),GSo=o(" \u2014 "),jO=a("a"),OSo=o("CTRLLMHeadModel"),VSo=o(" (CTRL model)"),XSo=l(),mb=a("li"),yhe=a("strong"),zSo=o("data2vec-text"),WSo=o(" \u2014 "),DO=a("a"),QSo=o("Data2VecTextForCausalLM"),HSo=o(" (Data2VecText model)"),USo=l(),fb=a("li"),xhe=a("strong"),JSo=o("electra"),YSo=o(" \u2014 "),GO=a("a"),KSo=o("ElectraForCausalLM"),ZSo=o(" (ELECTRA model)"),eRo=l(),gb=a("li"),$he=a("strong"),oRo=o("gpt2"),rRo=o(" \u2014 "),OO=a("a"),tRo=o("GPT2LMHeadModel"),aRo=o(" (OpenAI GPT-2 model)"),nRo=l(),hb=a("li"),khe=a("strong"),sRo=o("gpt_neo"),lRo=o(" \u2014 "),VO=a("a"),iRo=o("GPTNeoForCausalLM"),dRo=o(" (GPT Neo model)"),cRo=l(),ub=a("li"),She=a("strong"),mRo=o("gpt_neox"),fRo=o(" \u2014 "),XO=a("a"),gRo=o("GPTNeoXForCausalLM"),hRo=o(" (GPT NeoX model)"),uRo=l(),pb=a("li"),Rhe=a("strong"),pRo=o("gptj"),_Ro=o(" \u2014 "),zO=a("a"),bRo=o("GPTJForCausalLM"),vRo=o(" (GPT-J model)"),FRo=l(),_b=a("li"),Phe=a("strong"),TRo=o("marian"),MRo=o(" \u2014 "),WO=a("a"),ERo=o("MarianForCausalLM"),CRo=o(" (Marian model)"),wRo=l(),bb=a("li"),Bhe=a("strong"),ARo=o("mbart"),LRo=o(" \u2014 "),QO=a("a"),yRo=o("MBartForCausalLM"),xRo=o(" (mBART model)"),$Ro=l(),vb=a("li"),Ihe=a("strong"),kRo=o("megatron-bert"),SRo=o(" \u2014 "),HO=a("a"),RRo=o("MegatronBertForCausalLM"),PRo=o(" (Megatron-BERT model)"),BRo=l(),Fb=a("li"),Nhe=a("strong"),IRo=o("mvp"),NRo=o(" \u2014 "),UO=a("a"),qRo=o("MvpForCausalLM"),jRo=o(" (MVP model)"),DRo=l(),Tb=a("li"),qhe=a("strong"),GRo=o("openai-gpt"),ORo=o(" \u2014 "),JO=a("a"),VRo=o("OpenAIGPTLMHeadModel"),XRo=o(" (OpenAI GPT model)"),zRo=l(),Mb=a("li"),jhe=a("strong"),WRo=o("opt"),QRo=o(" \u2014 "),YO=a("a"),HRo=o("OPTForCausalLM"),URo=o(" (OPT model)"),JRo=l(),Eb=a("li"),Dhe=a("strong"),YRo=o("pegasus"),KRo=o(" \u2014 "),KO=a("a"),ZRo=o("PegasusForCausalLM"),ePo=o(" (Pegasus model)"),oPo=l(),Cb=a("li"),Ghe=a("strong"),rPo=o("plbart"),tPo=o(" \u2014 "),ZO=a("a"),aPo=o("PLBartForCausalLM"),nPo=o(" (PLBart model)"),sPo=l(),wb=a("li"),Ohe=a("strong"),lPo=o("prophetnet"),iPo=o(" \u2014 "),eV=a("a"),dPo=o("ProphetNetForCausalLM"),cPo=o(" (ProphetNet model)"),mPo=l(),Ab=a("li"),Vhe=a("strong"),fPo=o("qdqbert"),gPo=o(" \u2014 "),oV=a("a"),hPo=o("QDQBertLMHeadModel"),uPo=o(" (QDQBert model)"),pPo=l(),Lb=a("li"),Xhe=a("strong"),_Po=o("reformer"),bPo=o(" \u2014 "),rV=a("a"),vPo=o("ReformerModelWithLMHead"),FPo=o(" (Reformer model)"),TPo=l(),yb=a("li"),zhe=a("strong"),MPo=o("rembert"),EPo=o(" \u2014 "),tV=a("a"),CPo=o("RemBertForCausalLM"),wPo=o(" (RemBERT model)"),APo=l(),xb=a("li"),Whe=a("strong"),LPo=o("roberta"),yPo=o(" \u2014 "),aV=a("a"),xPo=o("RobertaForCausalLM"),$Po=o(" (RoBERTa model)"),kPo=l(),$b=a("li"),Qhe=a("strong"),SPo=o("roformer"),RPo=o(" \u2014 "),nV=a("a"),PPo=o("RoFormerForCausalLM"),BPo=o(" (RoFormer model)"),IPo=l(),kb=a("li"),Hhe=a("strong"),NPo=o("speech_to_text_2"),qPo=o(" \u2014 "),sV=a("a"),jPo=o("Speech2Text2ForCausalLM"),DPo=o(" (Speech2Text2 model)"),GPo=l(),Sb=a("li"),Uhe=a("strong"),OPo=o("transfo-xl"),VPo=o(" \u2014 "),lV=a("a"),XPo=o("TransfoXLLMHeadModel"),zPo=o(" (Transformer-XL model)"),WPo=l(),Rb=a("li"),Jhe=a("strong"),QPo=o("trocr"),HPo=o(" \u2014 "),iV=a("a"),UPo=o("TrOCRForCausalLM"),JPo=o(" (TrOCR model)"),YPo=l(),Pb=a("li"),Yhe=a("strong"),KPo=o("xglm"),ZPo=o(" \u2014 "),dV=a("a"),eBo=o("XGLMForCausalLM"),oBo=o(" (XGLM model)"),rBo=l(),Bb=a("li"),Khe=a("strong"),tBo=o("xlm"),aBo=o(" \u2014 "),cV=a("a"),nBo=o("XLMWithLMHeadModel"),sBo=o(" (XLM model)"),lBo=l(),Ib=a("li"),Zhe=a("strong"),iBo=o("xlm-prophetnet"),dBo=o(" \u2014 "),mV=a("a"),cBo=o("XLMProphetNetForCausalLM"),mBo=o(" (XLM-ProphetNet model)"),fBo=l(),Nb=a("li"),eue=a("strong"),gBo=o("xlm-roberta"),hBo=o(" \u2014 "),fV=a("a"),uBo=o("XLMRobertaForCausalLM"),pBo=o(" (XLM-RoBERTa model)"),_Bo=l(),qb=a("li"),oue=a("strong"),bBo=o("xlm-roberta-xl"),vBo=o(" \u2014 "),gV=a("a"),FBo=o("XLMRobertaXLForCausalLM"),TBo=o(" (XLM-RoBERTa-XL model)"),MBo=l(),jb=a("li"),rue=a("strong"),EBo=o("xlnet"),CBo=o(" \u2014 "),hV=a("a"),wBo=o("XLNetLMHeadModel"),ABo=o(" (XLNet model)"),LBo=l(),Db=a("p"),yBo=o("The model is set in evaluation mode by default using "),tue=a("code"),xBo=o("model.eval()"),$Bo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=a("code"),kBo=o("model.train()"),SBo=l(),F(Gb.$$.fragment),yze=l(),Zi=a("h2"),Ob=a("a"),nue=a("span"),F(i8.$$.fragment),RBo=l(),sue=a("span"),PBo=o("AutoModelForMaskedLM"),xze=l(),Po=a("div"),F(d8.$$.fragment),BBo=l(),ed=a("p"),IBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uV=a("a"),NBo=o("from_pretrained()"),qBo=o(" class method or the "),pV=a("a"),jBo=o("from_config()"),DBo=o(` class
method.`),GBo=l(),c8=a("p"),OBo=o("This class cannot be instantiated directly using "),lue=a("code"),VBo=o("__init__()"),XBo=o(" (throws an error)."),zBo=l(),mt=a("div"),F(m8.$$.fragment),WBo=l(),iue=a("p"),QBo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),HBo=l(),od=a("p"),UBo=o(`Note:
Loading a model from its configuration file does `),due=a("strong"),JBo=o("not"),YBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=a("a"),KBo=o("from_pretrained()"),ZBo=o(" to load the model weights."),eIo=l(),F(Vb.$$.fragment),oIo=l(),eo=a("div"),F(f8.$$.fragment),rIo=l(),cue=a("p"),tIo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),aIo=l(),ja=a("p"),nIo=o("The model class to instantiate is selected based on the "),mue=a("code"),sIo=o("model_type"),lIo=o(` property of the config object (either
passed as an argument or loaded from `),fue=a("code"),iIo=o("pretrained_model_name_or_path"),dIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=a("code"),cIo=o("pretrained_model_name_or_path"),mIo=o(":"),fIo=l(),Q=a("ul"),Xb=a("li"),hue=a("strong"),gIo=o("albert"),hIo=o(" \u2014 "),bV=a("a"),uIo=o("AlbertForMaskedLM"),pIo=o(" (ALBERT model)"),_Io=l(),zb=a("li"),uue=a("strong"),bIo=o("bart"),vIo=o(" \u2014 "),vV=a("a"),FIo=o("BartForConditionalGeneration"),TIo=o(" (BART model)"),MIo=l(),Wb=a("li"),pue=a("strong"),EIo=o("bert"),CIo=o(" \u2014 "),FV=a("a"),wIo=o("BertForMaskedLM"),AIo=o(" (BERT model)"),LIo=l(),Qb=a("li"),_ue=a("strong"),yIo=o("big_bird"),xIo=o(" \u2014 "),TV=a("a"),$Io=o("BigBirdForMaskedLM"),kIo=o(" (BigBird model)"),SIo=l(),Hb=a("li"),bue=a("strong"),RIo=o("camembert"),PIo=o(" \u2014 "),MV=a("a"),BIo=o("CamembertForMaskedLM"),IIo=o(" (CamemBERT model)"),NIo=l(),Ub=a("li"),vue=a("strong"),qIo=o("convbert"),jIo=o(" \u2014 "),EV=a("a"),DIo=o("ConvBertForMaskedLM"),GIo=o(" (ConvBERT model)"),OIo=l(),Jb=a("li"),Fue=a("strong"),VIo=o("data2vec-text"),XIo=o(" \u2014 "),CV=a("a"),zIo=o("Data2VecTextForMaskedLM"),WIo=o(" (Data2VecText model)"),QIo=l(),Yb=a("li"),Tue=a("strong"),HIo=o("deberta"),UIo=o(" \u2014 "),wV=a("a"),JIo=o("DebertaForMaskedLM"),YIo=o(" (DeBERTa model)"),KIo=l(),Kb=a("li"),Mue=a("strong"),ZIo=o("deberta-v2"),eNo=o(" \u2014 "),AV=a("a"),oNo=o("DebertaV2ForMaskedLM"),rNo=o(" (DeBERTa-v2 model)"),tNo=l(),Zb=a("li"),Eue=a("strong"),aNo=o("distilbert"),nNo=o(" \u2014 "),LV=a("a"),sNo=o("DistilBertForMaskedLM"),lNo=o(" (DistilBERT model)"),iNo=l(),ev=a("li"),Cue=a("strong"),dNo=o("electra"),cNo=o(" \u2014 "),yV=a("a"),mNo=o("ElectraForMaskedLM"),fNo=o(" (ELECTRA model)"),gNo=l(),ov=a("li"),wue=a("strong"),hNo=o("flaubert"),uNo=o(" \u2014 "),xV=a("a"),pNo=o("FlaubertWithLMHeadModel"),_No=o(" (FlauBERT model)"),bNo=l(),rv=a("li"),Aue=a("strong"),vNo=o("fnet"),FNo=o(" \u2014 "),$V=a("a"),TNo=o("FNetForMaskedLM"),MNo=o(" (FNet model)"),ENo=l(),tv=a("li"),Lue=a("strong"),CNo=o("funnel"),wNo=o(" \u2014 "),kV=a("a"),ANo=o("FunnelForMaskedLM"),LNo=o(" (Funnel Transformer model)"),yNo=l(),av=a("li"),yue=a("strong"),xNo=o("ibert"),$No=o(" \u2014 "),SV=a("a"),kNo=o("IBertForMaskedLM"),SNo=o(" (I-BERT model)"),RNo=l(),nv=a("li"),xue=a("strong"),PNo=o("layoutlm"),BNo=o(" \u2014 "),RV=a("a"),INo=o("LayoutLMForMaskedLM"),NNo=o(" (LayoutLM model)"),qNo=l(),sv=a("li"),$ue=a("strong"),jNo=o("longformer"),DNo=o(" \u2014 "),PV=a("a"),GNo=o("LongformerForMaskedLM"),ONo=o(" (Longformer model)"),VNo=l(),lv=a("li"),kue=a("strong"),XNo=o("luke"),zNo=o(" \u2014 "),BV=a("a"),WNo=o("LukeForMaskedLM"),QNo=o(" (LUKE model)"),HNo=l(),iv=a("li"),Sue=a("strong"),UNo=o("mbart"),JNo=o(" \u2014 "),IV=a("a"),YNo=o("MBartForConditionalGeneration"),KNo=o(" (mBART model)"),ZNo=l(),dv=a("li"),Rue=a("strong"),eqo=o("megatron-bert"),oqo=o(" \u2014 "),NV=a("a"),rqo=o("MegatronBertForMaskedLM"),tqo=o(" (Megatron-BERT model)"),aqo=l(),cv=a("li"),Pue=a("strong"),nqo=o("mobilebert"),sqo=o(" \u2014 "),qV=a("a"),lqo=o("MobileBertForMaskedLM"),iqo=o(" (MobileBERT model)"),dqo=l(),mv=a("li"),Bue=a("strong"),cqo=o("mpnet"),mqo=o(" \u2014 "),jV=a("a"),fqo=o("MPNetForMaskedLM"),gqo=o(" (MPNet model)"),hqo=l(),fv=a("li"),Iue=a("strong"),uqo=o("mvp"),pqo=o(" \u2014 "),DV=a("a"),_qo=o("MvpForConditionalGeneration"),bqo=o(" (MVP model)"),vqo=l(),gv=a("li"),Nue=a("strong"),Fqo=o("nezha"),Tqo=o(" \u2014 "),GV=a("a"),Mqo=o("NezhaForMaskedLM"),Eqo=o(" (Nezha model)"),Cqo=l(),hv=a("li"),que=a("strong"),wqo=o("nystromformer"),Aqo=o(" \u2014 "),OV=a("a"),Lqo=o("NystromformerForMaskedLM"),yqo=o(" (Nystr\xF6mformer model)"),xqo=l(),uv=a("li"),jue=a("strong"),$qo=o("perceiver"),kqo=o(" \u2014 "),VV=a("a"),Sqo=o("PerceiverForMaskedLM"),Rqo=o(" (Perceiver model)"),Pqo=l(),pv=a("li"),Due=a("strong"),Bqo=o("qdqbert"),Iqo=o(" \u2014 "),XV=a("a"),Nqo=o("QDQBertForMaskedLM"),qqo=o(" (QDQBert model)"),jqo=l(),_v=a("li"),Gue=a("strong"),Dqo=o("reformer"),Gqo=o(" \u2014 "),zV=a("a"),Oqo=o("ReformerForMaskedLM"),Vqo=o(" (Reformer model)"),Xqo=l(),bv=a("li"),Oue=a("strong"),zqo=o("rembert"),Wqo=o(" \u2014 "),WV=a("a"),Qqo=o("RemBertForMaskedLM"),Hqo=o(" (RemBERT model)"),Uqo=l(),vv=a("li"),Vue=a("strong"),Jqo=o("roberta"),Yqo=o(" \u2014 "),QV=a("a"),Kqo=o("RobertaForMaskedLM"),Zqo=o(" (RoBERTa model)"),ejo=l(),Fv=a("li"),Xue=a("strong"),ojo=o("roformer"),rjo=o(" \u2014 "),HV=a("a"),tjo=o("RoFormerForMaskedLM"),ajo=o(" (RoFormer model)"),njo=l(),Tv=a("li"),zue=a("strong"),sjo=o("squeezebert"),ljo=o(" \u2014 "),UV=a("a"),ijo=o("SqueezeBertForMaskedLM"),djo=o(" (SqueezeBERT model)"),cjo=l(),Mv=a("li"),Wue=a("strong"),mjo=o("tapas"),fjo=o(" \u2014 "),JV=a("a"),gjo=o("TapasForMaskedLM"),hjo=o(" (TAPAS model)"),ujo=l(),Ev=a("li"),Que=a("strong"),pjo=o("wav2vec2"),_jo=o(" \u2014 "),Hue=a("code"),bjo=o("Wav2Vec2ForMaskedLM"),vjo=o(" (Wav2Vec2 model)"),Fjo=l(),Cv=a("li"),Uue=a("strong"),Tjo=o("xlm"),Mjo=o(" \u2014 "),YV=a("a"),Ejo=o("XLMWithLMHeadModel"),Cjo=o(" (XLM model)"),wjo=l(),wv=a("li"),Jue=a("strong"),Ajo=o("xlm-roberta"),Ljo=o(" \u2014 "),KV=a("a"),yjo=o("XLMRobertaForMaskedLM"),xjo=o(" (XLM-RoBERTa model)"),$jo=l(),Av=a("li"),Yue=a("strong"),kjo=o("xlm-roberta-xl"),Sjo=o(" \u2014 "),ZV=a("a"),Rjo=o("XLMRobertaXLForMaskedLM"),Pjo=o(" (XLM-RoBERTa-XL model)"),Bjo=l(),Lv=a("li"),Kue=a("strong"),Ijo=o("yoso"),Njo=o(" \u2014 "),eX=a("a"),qjo=o("YosoForMaskedLM"),jjo=o(" (YOSO model)"),Djo=l(),yv=a("p"),Gjo=o("The model is set in evaluation mode by default using "),Zue=a("code"),Ojo=o("model.eval()"),Vjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=a("code"),Xjo=o("model.train()"),zjo=l(),F(xv.$$.fragment),$ze=l(),rd=a("h2"),$v=a("a"),ope=a("span"),F(g8.$$.fragment),Wjo=l(),rpe=a("span"),Qjo=o("AutoModelForSeq2SeqLM"),kze=l(),Bo=a("div"),F(h8.$$.fragment),Hjo=l(),td=a("p"),Ujo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oX=a("a"),Jjo=o("from_pretrained()"),Yjo=o(" class method or the "),rX=a("a"),Kjo=o("from_config()"),Zjo=o(` class
method.`),eDo=l(),u8=a("p"),oDo=o("This class cannot be instantiated directly using "),tpe=a("code"),rDo=o("__init__()"),tDo=o(" (throws an error)."),aDo=l(),ft=a("div"),F(p8.$$.fragment),nDo=l(),ape=a("p"),sDo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lDo=l(),ad=a("p"),iDo=o(`Note:
Loading a model from its configuration file does `),npe=a("strong"),dDo=o("not"),cDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=a("a"),mDo=o("from_pretrained()"),fDo=o(" to load the model weights."),gDo=l(),F(kv.$$.fragment),hDo=l(),oo=a("div"),F(_8.$$.fragment),uDo=l(),spe=a("p"),pDo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_Do=l(),Da=a("p"),bDo=o("The model class to instantiate is selected based on the "),lpe=a("code"),vDo=o("model_type"),FDo=o(` property of the config object (either
passed as an argument or loaded from `),ipe=a("code"),TDo=o("pretrained_model_name_or_path"),MDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=a("code"),EDo=o("pretrained_model_name_or_path"),CDo=o(":"),wDo=l(),fe=a("ul"),Sv=a("li"),cpe=a("strong"),ADo=o("bart"),LDo=o(" \u2014 "),aX=a("a"),yDo=o("BartForConditionalGeneration"),xDo=o(" (BART model)"),$Do=l(),Rv=a("li"),mpe=a("strong"),kDo=o("bigbird_pegasus"),SDo=o(" \u2014 "),nX=a("a"),RDo=o("BigBirdPegasusForConditionalGeneration"),PDo=o(" (BigBird-Pegasus model)"),BDo=l(),Pv=a("li"),fpe=a("strong"),IDo=o("blenderbot"),NDo=o(" \u2014 "),sX=a("a"),qDo=o("BlenderbotForConditionalGeneration"),jDo=o(" (Blenderbot model)"),DDo=l(),Bv=a("li"),gpe=a("strong"),GDo=o("blenderbot-small"),ODo=o(" \u2014 "),lX=a("a"),VDo=o("BlenderbotSmallForConditionalGeneration"),XDo=o(" (BlenderbotSmall model)"),zDo=l(),Iv=a("li"),hpe=a("strong"),WDo=o("encoder-decoder"),QDo=o(" \u2014 "),iX=a("a"),HDo=o("EncoderDecoderModel"),UDo=o(" (Encoder decoder model)"),JDo=l(),Nv=a("li"),upe=a("strong"),YDo=o("fsmt"),KDo=o(" \u2014 "),dX=a("a"),ZDo=o("FSMTForConditionalGeneration"),eGo=o(" (FairSeq Machine-Translation model)"),oGo=l(),qv=a("li"),ppe=a("strong"),rGo=o("led"),tGo=o(" \u2014 "),cX=a("a"),aGo=o("LEDForConditionalGeneration"),nGo=o(" (LED model)"),sGo=l(),jv=a("li"),_pe=a("strong"),lGo=o("longt5"),iGo=o(" \u2014 "),mX=a("a"),dGo=o("LongT5ForConditionalGeneration"),cGo=o(" (LongT5 model)"),mGo=l(),Dv=a("li"),bpe=a("strong"),fGo=o("m2m_100"),gGo=o(" \u2014 "),fX=a("a"),hGo=o("M2M100ForConditionalGeneration"),uGo=o(" (M2M100 model)"),pGo=l(),Gv=a("li"),vpe=a("strong"),_Go=o("marian"),bGo=o(" \u2014 "),gX=a("a"),vGo=o("MarianMTModel"),FGo=o(" (Marian model)"),TGo=l(),Ov=a("li"),Fpe=a("strong"),MGo=o("mbart"),EGo=o(" \u2014 "),hX=a("a"),CGo=o("MBartForConditionalGeneration"),wGo=o(" (mBART model)"),AGo=l(),Vv=a("li"),Tpe=a("strong"),LGo=o("mt5"),yGo=o(" \u2014 "),uX=a("a"),xGo=o("MT5ForConditionalGeneration"),$Go=o(" (MT5 model)"),kGo=l(),Xv=a("li"),Mpe=a("strong"),SGo=o("mvp"),RGo=o(" \u2014 "),pX=a("a"),PGo=o("MvpForConditionalGeneration"),BGo=o(" (MVP model)"),IGo=l(),zv=a("li"),Epe=a("strong"),NGo=o("nllb"),qGo=o(" \u2014 "),_X=a("a"),jGo=o("M2M100ForConditionalGeneration"),DGo=o(" (NLLB model)"),GGo=l(),Wv=a("li"),Cpe=a("strong"),OGo=o("pegasus"),VGo=o(" \u2014 "),bX=a("a"),XGo=o("PegasusForConditionalGeneration"),zGo=o(" (Pegasus model)"),WGo=l(),Qv=a("li"),wpe=a("strong"),QGo=o("plbart"),HGo=o(" \u2014 "),vX=a("a"),UGo=o("PLBartForConditionalGeneration"),JGo=o(" (PLBart model)"),YGo=l(),Hv=a("li"),Ape=a("strong"),KGo=o("prophetnet"),ZGo=o(" \u2014 "),FX=a("a"),eOo=o("ProphetNetForConditionalGeneration"),oOo=o(" (ProphetNet model)"),rOo=l(),Uv=a("li"),Lpe=a("strong"),tOo=o("t5"),aOo=o(" \u2014 "),TX=a("a"),nOo=o("T5ForConditionalGeneration"),sOo=o(" (T5 model)"),lOo=l(),Jv=a("li"),ype=a("strong"),iOo=o("xlm-prophetnet"),dOo=o(" \u2014 "),MX=a("a"),cOo=o("XLMProphetNetForConditionalGeneration"),mOo=o(" (XLM-ProphetNet model)"),fOo=l(),Yv=a("p"),gOo=o("The model is set in evaluation mode by default using "),xpe=a("code"),hOo=o("model.eval()"),uOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=a("code"),pOo=o("model.train()"),_Oo=l(),F(Kv.$$.fragment),Sze=l(),nd=a("h2"),Zv=a("a"),kpe=a("span"),F(b8.$$.fragment),bOo=l(),Spe=a("span"),vOo=o("AutoModelForSequenceClassification"),Rze=l(),Io=a("div"),F(v8.$$.fragment),FOo=l(),sd=a("p"),TOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EX=a("a"),MOo=o("from_pretrained()"),EOo=o(" class method or the "),CX=a("a"),COo=o("from_config()"),wOo=o(` class
method.`),AOo=l(),F8=a("p"),LOo=o("This class cannot be instantiated directly using "),Rpe=a("code"),yOo=o("__init__()"),xOo=o(" (throws an error)."),$Oo=l(),gt=a("div"),F(T8.$$.fragment),kOo=l(),Ppe=a("p"),SOo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ROo=l(),ld=a("p"),POo=o(`Note:
Loading a model from its configuration file does `),Bpe=a("strong"),BOo=o("not"),IOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wX=a("a"),NOo=o("from_pretrained()"),qOo=o(" to load the model weights."),jOo=l(),F(e1.$$.fragment),DOo=l(),ro=a("div"),F(M8.$$.fragment),GOo=l(),Ipe=a("p"),OOo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),VOo=l(),Ga=a("p"),XOo=o("The model class to instantiate is selected based on the "),Npe=a("code"),zOo=o("model_type"),WOo=o(` property of the config object (either
passed as an argument or loaded from `),qpe=a("code"),QOo=o("pretrained_model_name_or_path"),HOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=a("code"),UOo=o("pretrained_model_name_or_path"),JOo=o(":"),YOo=l(),B=a("ul"),o1=a("li"),Dpe=a("strong"),KOo=o("albert"),ZOo=o(" \u2014 "),AX=a("a"),eVo=o("AlbertForSequenceClassification"),oVo=o(" (ALBERT model)"),rVo=l(),r1=a("li"),Gpe=a("strong"),tVo=o("bart"),aVo=o(" \u2014 "),LX=a("a"),nVo=o("BartForSequenceClassification"),sVo=o(" (BART model)"),lVo=l(),t1=a("li"),Ope=a("strong"),iVo=o("bert"),dVo=o(" \u2014 "),yX=a("a"),cVo=o("BertForSequenceClassification"),mVo=o(" (BERT model)"),fVo=l(),a1=a("li"),Vpe=a("strong"),gVo=o("big_bird"),hVo=o(" \u2014 "),xX=a("a"),uVo=o("BigBirdForSequenceClassification"),pVo=o(" (BigBird model)"),_Vo=l(),n1=a("li"),Xpe=a("strong"),bVo=o("bigbird_pegasus"),vVo=o(" \u2014 "),$X=a("a"),FVo=o("BigBirdPegasusForSequenceClassification"),TVo=o(" (BigBird-Pegasus model)"),MVo=l(),s1=a("li"),zpe=a("strong"),EVo=o("bloom"),CVo=o(" \u2014 "),kX=a("a"),wVo=o("BloomForSequenceClassification"),AVo=o(" (BLOOM model)"),LVo=l(),l1=a("li"),Wpe=a("strong"),yVo=o("camembert"),xVo=o(" \u2014 "),SX=a("a"),$Vo=o("CamembertForSequenceClassification"),kVo=o(" (CamemBERT model)"),SVo=l(),i1=a("li"),Qpe=a("strong"),RVo=o("canine"),PVo=o(" \u2014 "),RX=a("a"),BVo=o("CanineForSequenceClassification"),IVo=o(" (CANINE model)"),NVo=l(),d1=a("li"),Hpe=a("strong"),qVo=o("convbert"),jVo=o(" \u2014 "),PX=a("a"),DVo=o("ConvBertForSequenceClassification"),GVo=o(" (ConvBERT model)"),OVo=l(),c1=a("li"),Upe=a("strong"),VVo=o("ctrl"),XVo=o(" \u2014 "),BX=a("a"),zVo=o("CTRLForSequenceClassification"),WVo=o(" (CTRL model)"),QVo=l(),m1=a("li"),Jpe=a("strong"),HVo=o("data2vec-text"),UVo=o(" \u2014 "),IX=a("a"),JVo=o("Data2VecTextForSequenceClassification"),YVo=o(" (Data2VecText model)"),KVo=l(),f1=a("li"),Ype=a("strong"),ZVo=o("deberta"),eXo=o(" \u2014 "),NX=a("a"),oXo=o("DebertaForSequenceClassification"),rXo=o(" (DeBERTa model)"),tXo=l(),g1=a("li"),Kpe=a("strong"),aXo=o("deberta-v2"),nXo=o(" \u2014 "),qX=a("a"),sXo=o("DebertaV2ForSequenceClassification"),lXo=o(" (DeBERTa-v2 model)"),iXo=l(),h1=a("li"),Zpe=a("strong"),dXo=o("distilbert"),cXo=o(" \u2014 "),jX=a("a"),mXo=o("DistilBertForSequenceClassification"),fXo=o(" (DistilBERT model)"),gXo=l(),u1=a("li"),e_e=a("strong"),hXo=o("electra"),uXo=o(" \u2014 "),DX=a("a"),pXo=o("ElectraForSequenceClassification"),_Xo=o(" (ELECTRA model)"),bXo=l(),p1=a("li"),o_e=a("strong"),vXo=o("flaubert"),FXo=o(" \u2014 "),GX=a("a"),TXo=o("FlaubertForSequenceClassification"),MXo=o(" (FlauBERT model)"),EXo=l(),_1=a("li"),r_e=a("strong"),CXo=o("fnet"),wXo=o(" \u2014 "),OX=a("a"),AXo=o("FNetForSequenceClassification"),LXo=o(" (FNet model)"),yXo=l(),b1=a("li"),t_e=a("strong"),xXo=o("funnel"),$Xo=o(" \u2014 "),VX=a("a"),kXo=o("FunnelForSequenceClassification"),SXo=o(" (Funnel Transformer model)"),RXo=l(),v1=a("li"),a_e=a("strong"),PXo=o("gpt2"),BXo=o(" \u2014 "),XX=a("a"),IXo=o("GPT2ForSequenceClassification"),NXo=o(" (OpenAI GPT-2 model)"),qXo=l(),F1=a("li"),n_e=a("strong"),jXo=o("gpt_neo"),DXo=o(" \u2014 "),zX=a("a"),GXo=o("GPTNeoForSequenceClassification"),OXo=o(" (GPT Neo model)"),VXo=l(),T1=a("li"),s_e=a("strong"),XXo=o("gptj"),zXo=o(" \u2014 "),WX=a("a"),WXo=o("GPTJForSequenceClassification"),QXo=o(" (GPT-J model)"),HXo=l(),M1=a("li"),l_e=a("strong"),UXo=o("ibert"),JXo=o(" \u2014 "),QX=a("a"),YXo=o("IBertForSequenceClassification"),KXo=o(" (I-BERT model)"),ZXo=l(),E1=a("li"),i_e=a("strong"),ezo=o("layoutlm"),ozo=o(" \u2014 "),HX=a("a"),rzo=o("LayoutLMForSequenceClassification"),tzo=o(" (LayoutLM model)"),azo=l(),C1=a("li"),d_e=a("strong"),nzo=o("layoutlmv2"),szo=o(" \u2014 "),UX=a("a"),lzo=o("LayoutLMv2ForSequenceClassification"),izo=o(" (LayoutLMv2 model)"),dzo=l(),w1=a("li"),c_e=a("strong"),czo=o("layoutlmv3"),mzo=o(" \u2014 "),JX=a("a"),fzo=o("LayoutLMv3ForSequenceClassification"),gzo=o(" (LayoutLMv3 model)"),hzo=l(),A1=a("li"),m_e=a("strong"),uzo=o("led"),pzo=o(" \u2014 "),YX=a("a"),_zo=o("LEDForSequenceClassification"),bzo=o(" (LED model)"),vzo=l(),L1=a("li"),f_e=a("strong"),Fzo=o("longformer"),Tzo=o(" \u2014 "),KX=a("a"),Mzo=o("LongformerForSequenceClassification"),Ezo=o(" (Longformer model)"),Czo=l(),y1=a("li"),g_e=a("strong"),wzo=o("mbart"),Azo=o(" \u2014 "),ZX=a("a"),Lzo=o("MBartForSequenceClassification"),yzo=o(" (mBART model)"),xzo=l(),x1=a("li"),h_e=a("strong"),$zo=o("megatron-bert"),kzo=o(" \u2014 "),ez=a("a"),Szo=o("MegatronBertForSequenceClassification"),Rzo=o(" (Megatron-BERT model)"),Pzo=l(),$1=a("li"),u_e=a("strong"),Bzo=o("mobilebert"),Izo=o(" \u2014 "),oz=a("a"),Nzo=o("MobileBertForSequenceClassification"),qzo=o(" (MobileBERT model)"),jzo=l(),k1=a("li"),p_e=a("strong"),Dzo=o("mpnet"),Gzo=o(" \u2014 "),rz=a("a"),Ozo=o("MPNetForSequenceClassification"),Vzo=o(" (MPNet model)"),Xzo=l(),S1=a("li"),__e=a("strong"),zzo=o("mvp"),Wzo=o(" \u2014 "),tz=a("a"),Qzo=o("MvpForSequenceClassification"),Hzo=o(" (MVP model)"),Uzo=l(),R1=a("li"),b_e=a("strong"),Jzo=o("nezha"),Yzo=o(" \u2014 "),az=a("a"),Kzo=o("NezhaForSequenceClassification"),Zzo=o(" (Nezha model)"),eWo=l(),P1=a("li"),v_e=a("strong"),oWo=o("nystromformer"),rWo=o(" \u2014 "),nz=a("a"),tWo=o("NystromformerForSequenceClassification"),aWo=o(" (Nystr\xF6mformer model)"),nWo=l(),B1=a("li"),F_e=a("strong"),sWo=o("openai-gpt"),lWo=o(" \u2014 "),sz=a("a"),iWo=o("OpenAIGPTForSequenceClassification"),dWo=o(" (OpenAI GPT model)"),cWo=l(),I1=a("li"),T_e=a("strong"),mWo=o("opt"),fWo=o(" \u2014 "),lz=a("a"),gWo=o("OPTForSequenceClassification"),hWo=o(" (OPT model)"),uWo=l(),N1=a("li"),M_e=a("strong"),pWo=o("perceiver"),_Wo=o(" \u2014 "),iz=a("a"),bWo=o("PerceiverForSequenceClassification"),vWo=o(" (Perceiver model)"),FWo=l(),q1=a("li"),E_e=a("strong"),TWo=o("plbart"),MWo=o(" \u2014 "),dz=a("a"),EWo=o("PLBartForSequenceClassification"),CWo=o(" (PLBart model)"),wWo=l(),j1=a("li"),C_e=a("strong"),AWo=o("qdqbert"),LWo=o(" \u2014 "),cz=a("a"),yWo=o("QDQBertForSequenceClassification"),xWo=o(" (QDQBert model)"),$Wo=l(),D1=a("li"),w_e=a("strong"),kWo=o("reformer"),SWo=o(" \u2014 "),mz=a("a"),RWo=o("ReformerForSequenceClassification"),PWo=o(" (Reformer model)"),BWo=l(),G1=a("li"),A_e=a("strong"),IWo=o("rembert"),NWo=o(" \u2014 "),fz=a("a"),qWo=o("RemBertForSequenceClassification"),jWo=o(" (RemBERT model)"),DWo=l(),O1=a("li"),L_e=a("strong"),GWo=o("roberta"),OWo=o(" \u2014 "),gz=a("a"),VWo=o("RobertaForSequenceClassification"),XWo=o(" (RoBERTa model)"),zWo=l(),V1=a("li"),y_e=a("strong"),WWo=o("roformer"),QWo=o(" \u2014 "),hz=a("a"),HWo=o("RoFormerForSequenceClassification"),UWo=o(" (RoFormer model)"),JWo=l(),X1=a("li"),x_e=a("strong"),YWo=o("squeezebert"),KWo=o(" \u2014 "),uz=a("a"),ZWo=o("SqueezeBertForSequenceClassification"),eQo=o(" (SqueezeBERT model)"),oQo=l(),z1=a("li"),$_e=a("strong"),rQo=o("tapas"),tQo=o(" \u2014 "),pz=a("a"),aQo=o("TapasForSequenceClassification"),nQo=o(" (TAPAS model)"),sQo=l(),W1=a("li"),k_e=a("strong"),lQo=o("transfo-xl"),iQo=o(" \u2014 "),_z=a("a"),dQo=o("TransfoXLForSequenceClassification"),cQo=o(" (Transformer-XL model)"),mQo=l(),Q1=a("li"),S_e=a("strong"),fQo=o("xlm"),gQo=o(" \u2014 "),bz=a("a"),hQo=o("XLMForSequenceClassification"),uQo=o(" (XLM model)"),pQo=l(),H1=a("li"),R_e=a("strong"),_Qo=o("xlm-roberta"),bQo=o(" \u2014 "),vz=a("a"),vQo=o("XLMRobertaForSequenceClassification"),FQo=o(" (XLM-RoBERTa model)"),TQo=l(),U1=a("li"),P_e=a("strong"),MQo=o("xlm-roberta-xl"),EQo=o(" \u2014 "),Fz=a("a"),CQo=o("XLMRobertaXLForSequenceClassification"),wQo=o(" (XLM-RoBERTa-XL model)"),AQo=l(),J1=a("li"),B_e=a("strong"),LQo=o("xlnet"),yQo=o(" \u2014 "),Tz=a("a"),xQo=o("XLNetForSequenceClassification"),$Qo=o(" (XLNet model)"),kQo=l(),Y1=a("li"),I_e=a("strong"),SQo=o("yoso"),RQo=o(" \u2014 "),Mz=a("a"),PQo=o("YosoForSequenceClassification"),BQo=o(" (YOSO model)"),IQo=l(),K1=a("p"),NQo=o("The model is set in evaluation mode by default using "),N_e=a("code"),qQo=o("model.eval()"),jQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q_e=a("code"),DQo=o("model.train()"),GQo=l(),F(Z1.$$.fragment),Pze=l(),id=a("h2"),eF=a("a"),j_e=a("span"),F(E8.$$.fragment),OQo=l(),D_e=a("span"),VQo=o("AutoModelForMultipleChoice"),Bze=l(),No=a("div"),F(C8.$$.fragment),XQo=l(),dd=a("p"),zQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Ez=a("a"),WQo=o("from_pretrained()"),QQo=o(" class method or the "),Cz=a("a"),HQo=o("from_config()"),UQo=o(` class
method.`),JQo=l(),w8=a("p"),YQo=o("This class cannot be instantiated directly using "),G_e=a("code"),KQo=o("__init__()"),ZQo=o(" (throws an error)."),eHo=l(),ht=a("div"),F(A8.$$.fragment),oHo=l(),O_e=a("p"),rHo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tHo=l(),cd=a("p"),aHo=o(`Note:
Loading a model from its configuration file does `),V_e=a("strong"),nHo=o("not"),sHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=a("a"),lHo=o("from_pretrained()"),iHo=o(" to load the model weights."),dHo=l(),F(oF.$$.fragment),cHo=l(),to=a("div"),F(L8.$$.fragment),mHo=l(),X_e=a("p"),fHo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gHo=l(),Oa=a("p"),hHo=o("The model class to instantiate is selected based on the "),z_e=a("code"),uHo=o("model_type"),pHo=o(` property of the config object (either
passed as an argument or loaded from `),W_e=a("code"),_Ho=o("pretrained_model_name_or_path"),bHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q_e=a("code"),vHo=o("pretrained_model_name_or_path"),FHo=o(":"),THo=l(),Z=a("ul"),rF=a("li"),H_e=a("strong"),MHo=o("albert"),EHo=o(" \u2014 "),Az=a("a"),CHo=o("AlbertForMultipleChoice"),wHo=o(" (ALBERT model)"),AHo=l(),tF=a("li"),U_e=a("strong"),LHo=o("bert"),yHo=o(" \u2014 "),Lz=a("a"),xHo=o("BertForMultipleChoice"),$Ho=o(" (BERT model)"),kHo=l(),aF=a("li"),J_e=a("strong"),SHo=o("big_bird"),RHo=o(" \u2014 "),yz=a("a"),PHo=o("BigBirdForMultipleChoice"),BHo=o(" (BigBird model)"),IHo=l(),nF=a("li"),Y_e=a("strong"),NHo=o("camembert"),qHo=o(" \u2014 "),xz=a("a"),jHo=o("CamembertForMultipleChoice"),DHo=o(" (CamemBERT model)"),GHo=l(),sF=a("li"),K_e=a("strong"),OHo=o("canine"),VHo=o(" \u2014 "),$z=a("a"),XHo=o("CanineForMultipleChoice"),zHo=o(" (CANINE model)"),WHo=l(),lF=a("li"),Z_e=a("strong"),QHo=o("convbert"),HHo=o(" \u2014 "),kz=a("a"),UHo=o("ConvBertForMultipleChoice"),JHo=o(" (ConvBERT model)"),YHo=l(),iF=a("li"),e2e=a("strong"),KHo=o("data2vec-text"),ZHo=o(" \u2014 "),Sz=a("a"),eUo=o("Data2VecTextForMultipleChoice"),oUo=o(" (Data2VecText model)"),rUo=l(),dF=a("li"),o2e=a("strong"),tUo=o("deberta-v2"),aUo=o(" \u2014 "),Rz=a("a"),nUo=o("DebertaV2ForMultipleChoice"),sUo=o(" (DeBERTa-v2 model)"),lUo=l(),cF=a("li"),r2e=a("strong"),iUo=o("distilbert"),dUo=o(" \u2014 "),Pz=a("a"),cUo=o("DistilBertForMultipleChoice"),mUo=o(" (DistilBERT model)"),fUo=l(),mF=a("li"),t2e=a("strong"),gUo=o("electra"),hUo=o(" \u2014 "),Bz=a("a"),uUo=o("ElectraForMultipleChoice"),pUo=o(" (ELECTRA model)"),_Uo=l(),fF=a("li"),a2e=a("strong"),bUo=o("flaubert"),vUo=o(" \u2014 "),Iz=a("a"),FUo=o("FlaubertForMultipleChoice"),TUo=o(" (FlauBERT model)"),MUo=l(),gF=a("li"),n2e=a("strong"),EUo=o("fnet"),CUo=o(" \u2014 "),Nz=a("a"),wUo=o("FNetForMultipleChoice"),AUo=o(" (FNet model)"),LUo=l(),hF=a("li"),s2e=a("strong"),yUo=o("funnel"),xUo=o(" \u2014 "),qz=a("a"),$Uo=o("FunnelForMultipleChoice"),kUo=o(" (Funnel Transformer model)"),SUo=l(),uF=a("li"),l2e=a("strong"),RUo=o("ibert"),PUo=o(" \u2014 "),jz=a("a"),BUo=o("IBertForMultipleChoice"),IUo=o(" (I-BERT model)"),NUo=l(),pF=a("li"),i2e=a("strong"),qUo=o("longformer"),jUo=o(" \u2014 "),Dz=a("a"),DUo=o("LongformerForMultipleChoice"),GUo=o(" (Longformer model)"),OUo=l(),_F=a("li"),d2e=a("strong"),VUo=o("megatron-bert"),XUo=o(" \u2014 "),Gz=a("a"),zUo=o("MegatronBertForMultipleChoice"),WUo=o(" (Megatron-BERT model)"),QUo=l(),bF=a("li"),c2e=a("strong"),HUo=o("mobilebert"),UUo=o(" \u2014 "),Oz=a("a"),JUo=o("MobileBertForMultipleChoice"),YUo=o(" (MobileBERT model)"),KUo=l(),vF=a("li"),m2e=a("strong"),ZUo=o("mpnet"),eJo=o(" \u2014 "),Vz=a("a"),oJo=o("MPNetForMultipleChoice"),rJo=o(" (MPNet model)"),tJo=l(),FF=a("li"),f2e=a("strong"),aJo=o("nezha"),nJo=o(" \u2014 "),Xz=a("a"),sJo=o("NezhaForMultipleChoice"),lJo=o(" (Nezha model)"),iJo=l(),TF=a("li"),g2e=a("strong"),dJo=o("nystromformer"),cJo=o(" \u2014 "),zz=a("a"),mJo=o("NystromformerForMultipleChoice"),fJo=o(" (Nystr\xF6mformer model)"),gJo=l(),MF=a("li"),h2e=a("strong"),hJo=o("qdqbert"),uJo=o(" \u2014 "),Wz=a("a"),pJo=o("QDQBertForMultipleChoice"),_Jo=o(" (QDQBert model)"),bJo=l(),EF=a("li"),u2e=a("strong"),vJo=o("rembert"),FJo=o(" \u2014 "),Qz=a("a"),TJo=o("RemBertForMultipleChoice"),MJo=o(" (RemBERT model)"),EJo=l(),CF=a("li"),p2e=a("strong"),CJo=o("roberta"),wJo=o(" \u2014 "),Hz=a("a"),AJo=o("RobertaForMultipleChoice"),LJo=o(" (RoBERTa model)"),yJo=l(),wF=a("li"),_2e=a("strong"),xJo=o("roformer"),$Jo=o(" \u2014 "),Uz=a("a"),kJo=o("RoFormerForMultipleChoice"),SJo=o(" (RoFormer model)"),RJo=l(),AF=a("li"),b2e=a("strong"),PJo=o("squeezebert"),BJo=o(" \u2014 "),Jz=a("a"),IJo=o("SqueezeBertForMultipleChoice"),NJo=o(" (SqueezeBERT model)"),qJo=l(),LF=a("li"),v2e=a("strong"),jJo=o("xlm"),DJo=o(" \u2014 "),Yz=a("a"),GJo=o("XLMForMultipleChoice"),OJo=o(" (XLM model)"),VJo=l(),yF=a("li"),F2e=a("strong"),XJo=o("xlm-roberta"),zJo=o(" \u2014 "),Kz=a("a"),WJo=o("XLMRobertaForMultipleChoice"),QJo=o(" (XLM-RoBERTa model)"),HJo=l(),xF=a("li"),T2e=a("strong"),UJo=o("xlm-roberta-xl"),JJo=o(" \u2014 "),Zz=a("a"),YJo=o("XLMRobertaXLForMultipleChoice"),KJo=o(" (XLM-RoBERTa-XL model)"),ZJo=l(),$F=a("li"),M2e=a("strong"),eYo=o("xlnet"),oYo=o(" \u2014 "),eW=a("a"),rYo=o("XLNetForMultipleChoice"),tYo=o(" (XLNet model)"),aYo=l(),kF=a("li"),E2e=a("strong"),nYo=o("yoso"),sYo=o(" \u2014 "),oW=a("a"),lYo=o("YosoForMultipleChoice"),iYo=o(" (YOSO model)"),dYo=l(),SF=a("p"),cYo=o("The model is set in evaluation mode by default using "),C2e=a("code"),mYo=o("model.eval()"),fYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w2e=a("code"),gYo=o("model.train()"),hYo=l(),F(RF.$$.fragment),Ize=l(),md=a("h2"),PF=a("a"),A2e=a("span"),F(y8.$$.fragment),uYo=l(),L2e=a("span"),pYo=o("AutoModelForNextSentencePrediction"),Nze=l(),qo=a("div"),F(x8.$$.fragment),_Yo=l(),fd=a("p"),bYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rW=a("a"),vYo=o("from_pretrained()"),FYo=o(" class method or the "),tW=a("a"),TYo=o("from_config()"),MYo=o(` class
method.`),EYo=l(),$8=a("p"),CYo=o("This class cannot be instantiated directly using "),y2e=a("code"),wYo=o("__init__()"),AYo=o(" (throws an error)."),LYo=l(),ut=a("div"),F(k8.$$.fragment),yYo=l(),x2e=a("p"),xYo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Yo=l(),gd=a("p"),kYo=o(`Note:
Loading a model from its configuration file does `),$2e=a("strong"),SYo=o("not"),RYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=a("a"),PYo=o("from_pretrained()"),BYo=o(" to load the model weights."),IYo=l(),F(BF.$$.fragment),NYo=l(),ao=a("div"),F(S8.$$.fragment),qYo=l(),k2e=a("p"),jYo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DYo=l(),Va=a("p"),GYo=o("The model class to instantiate is selected based on the "),S2e=a("code"),OYo=o("model_type"),VYo=o(` property of the config object (either
passed as an argument or loaded from `),R2e=a("code"),XYo=o("pretrained_model_name_or_path"),zYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P2e=a("code"),WYo=o("pretrained_model_name_or_path"),QYo=o(":"),HYo=l(),jo=a("ul"),IF=a("li"),B2e=a("strong"),UYo=o("bert"),JYo=o(" \u2014 "),nW=a("a"),YYo=o("BertForNextSentencePrediction"),KYo=o(" (BERT model)"),ZYo=l(),NF=a("li"),I2e=a("strong"),eKo=o("fnet"),oKo=o(" \u2014 "),sW=a("a"),rKo=o("FNetForNextSentencePrediction"),tKo=o(" (FNet model)"),aKo=l(),qF=a("li"),N2e=a("strong"),nKo=o("megatron-bert"),sKo=o(" \u2014 "),lW=a("a"),lKo=o("MegatronBertForNextSentencePrediction"),iKo=o(" (Megatron-BERT model)"),dKo=l(),jF=a("li"),q2e=a("strong"),cKo=o("mobilebert"),mKo=o(" \u2014 "),iW=a("a"),fKo=o("MobileBertForNextSentencePrediction"),gKo=o(" (MobileBERT model)"),hKo=l(),DF=a("li"),j2e=a("strong"),uKo=o("nezha"),pKo=o(" \u2014 "),dW=a("a"),_Ko=o("NezhaForNextSentencePrediction"),bKo=o(" (Nezha model)"),vKo=l(),GF=a("li"),D2e=a("strong"),FKo=o("qdqbert"),TKo=o(" \u2014 "),cW=a("a"),MKo=o("QDQBertForNextSentencePrediction"),EKo=o(" (QDQBert model)"),CKo=l(),OF=a("p"),wKo=o("The model is set in evaluation mode by default using "),G2e=a("code"),AKo=o("model.eval()"),LKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O2e=a("code"),yKo=o("model.train()"),xKo=l(),F(VF.$$.fragment),qze=l(),hd=a("h2"),XF=a("a"),V2e=a("span"),F(R8.$$.fragment),$Ko=l(),X2e=a("span"),kKo=o("AutoModelForTokenClassification"),jze=l(),Do=a("div"),F(P8.$$.fragment),SKo=l(),ud=a("p"),RKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mW=a("a"),PKo=o("from_pretrained()"),BKo=o(" class method or the "),fW=a("a"),IKo=o("from_config()"),NKo=o(` class
method.`),qKo=l(),B8=a("p"),jKo=o("This class cannot be instantiated directly using "),z2e=a("code"),DKo=o("__init__()"),GKo=o(" (throws an error)."),OKo=l(),pt=a("div"),F(I8.$$.fragment),VKo=l(),W2e=a("p"),XKo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zKo=l(),pd=a("p"),WKo=o(`Note:
Loading a model from its configuration file does `),Q2e=a("strong"),QKo=o("not"),HKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=a("a"),UKo=o("from_pretrained()"),JKo=o(" to load the model weights."),YKo=l(),F(zF.$$.fragment),KKo=l(),no=a("div"),F(N8.$$.fragment),ZKo=l(),H2e=a("p"),eZo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),oZo=l(),Xa=a("p"),rZo=o("The model class to instantiate is selected based on the "),U2e=a("code"),tZo=o("model_type"),aZo=o(` property of the config object (either
passed as an argument or loaded from `),J2e=a("code"),nZo=o("pretrained_model_name_or_path"),sZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=a("code"),lZo=o("pretrained_model_name_or_path"),iZo=o(":"),dZo=l(),J=a("ul"),WF=a("li"),K2e=a("strong"),cZo=o("albert"),mZo=o(" \u2014 "),hW=a("a"),fZo=o("AlbertForTokenClassification"),gZo=o(" (ALBERT model)"),hZo=l(),QF=a("li"),Z2e=a("strong"),uZo=o("bert"),pZo=o(" \u2014 "),uW=a("a"),_Zo=o("BertForTokenClassification"),bZo=o(" (BERT model)"),vZo=l(),HF=a("li"),ebe=a("strong"),FZo=o("big_bird"),TZo=o(" \u2014 "),pW=a("a"),MZo=o("BigBirdForTokenClassification"),EZo=o(" (BigBird model)"),CZo=l(),UF=a("li"),obe=a("strong"),wZo=o("bloom"),AZo=o(" \u2014 "),_W=a("a"),LZo=o("BloomForTokenClassification"),yZo=o(" (BLOOM model)"),xZo=l(),JF=a("li"),rbe=a("strong"),$Zo=o("camembert"),kZo=o(" \u2014 "),bW=a("a"),SZo=o("CamembertForTokenClassification"),RZo=o(" (CamemBERT model)"),PZo=l(),YF=a("li"),tbe=a("strong"),BZo=o("canine"),IZo=o(" \u2014 "),vW=a("a"),NZo=o("CanineForTokenClassification"),qZo=o(" (CANINE model)"),jZo=l(),KF=a("li"),abe=a("strong"),DZo=o("convbert"),GZo=o(" \u2014 "),FW=a("a"),OZo=o("ConvBertForTokenClassification"),VZo=o(" (ConvBERT model)"),XZo=l(),ZF=a("li"),nbe=a("strong"),zZo=o("data2vec-text"),WZo=o(" \u2014 "),TW=a("a"),QZo=o("Data2VecTextForTokenClassification"),HZo=o(" (Data2VecText model)"),UZo=l(),eT=a("li"),sbe=a("strong"),JZo=o("deberta"),YZo=o(" \u2014 "),MW=a("a"),KZo=o("DebertaForTokenClassification"),ZZo=o(" (DeBERTa model)"),eer=l(),oT=a("li"),lbe=a("strong"),oer=o("deberta-v2"),rer=o(" \u2014 "),EW=a("a"),ter=o("DebertaV2ForTokenClassification"),aer=o(" (DeBERTa-v2 model)"),ner=l(),rT=a("li"),ibe=a("strong"),ser=o("distilbert"),ler=o(" \u2014 "),CW=a("a"),ier=o("DistilBertForTokenClassification"),der=o(" (DistilBERT model)"),cer=l(),tT=a("li"),dbe=a("strong"),mer=o("electra"),fer=o(" \u2014 "),wW=a("a"),ger=o("ElectraForTokenClassification"),her=o(" (ELECTRA model)"),uer=l(),aT=a("li"),cbe=a("strong"),per=o("flaubert"),_er=o(" \u2014 "),AW=a("a"),ber=o("FlaubertForTokenClassification"),ver=o(" (FlauBERT model)"),Fer=l(),nT=a("li"),mbe=a("strong"),Ter=o("fnet"),Mer=o(" \u2014 "),LW=a("a"),Eer=o("FNetForTokenClassification"),Cer=o(" (FNet model)"),wer=l(),sT=a("li"),fbe=a("strong"),Aer=o("funnel"),Ler=o(" \u2014 "),yW=a("a"),yer=o("FunnelForTokenClassification"),xer=o(" (Funnel Transformer model)"),$er=l(),lT=a("li"),gbe=a("strong"),ker=o("gpt2"),Ser=o(" \u2014 "),xW=a("a"),Rer=o("GPT2ForTokenClassification"),Per=o(" (OpenAI GPT-2 model)"),Ber=l(),iT=a("li"),hbe=a("strong"),Ier=o("ibert"),Ner=o(" \u2014 "),$W=a("a"),qer=o("IBertForTokenClassification"),jer=o(" (I-BERT model)"),Der=l(),dT=a("li"),ube=a("strong"),Ger=o("layoutlm"),Oer=o(" \u2014 "),kW=a("a"),Ver=o("LayoutLMForTokenClassification"),Xer=o(" (LayoutLM model)"),zer=l(),cT=a("li"),pbe=a("strong"),Wer=o("layoutlmv2"),Qer=o(" \u2014 "),SW=a("a"),Her=o("LayoutLMv2ForTokenClassification"),Uer=o(" (LayoutLMv2 model)"),Jer=l(),mT=a("li"),_be=a("strong"),Yer=o("layoutlmv3"),Ker=o(" \u2014 "),RW=a("a"),Zer=o("LayoutLMv3ForTokenClassification"),eor=o(" (LayoutLMv3 model)"),oor=l(),fT=a("li"),bbe=a("strong"),ror=o("longformer"),tor=o(" \u2014 "),PW=a("a"),aor=o("LongformerForTokenClassification"),nor=o(" (Longformer model)"),sor=l(),gT=a("li"),vbe=a("strong"),lor=o("megatron-bert"),ior=o(" \u2014 "),BW=a("a"),dor=o("MegatronBertForTokenClassification"),cor=o(" (Megatron-BERT model)"),mor=l(),hT=a("li"),Fbe=a("strong"),gor=o("mobilebert"),hor=o(" \u2014 "),IW=a("a"),uor=o("MobileBertForTokenClassification"),por=o(" (MobileBERT model)"),_or=l(),uT=a("li"),Tbe=a("strong"),bor=o("mpnet"),vor=o(" \u2014 "),NW=a("a"),For=o("MPNetForTokenClassification"),Tor=o(" (MPNet model)"),Mor=l(),pT=a("li"),Mbe=a("strong"),Eor=o("nezha"),Cor=o(" \u2014 "),qW=a("a"),wor=o("NezhaForTokenClassification"),Aor=o(" (Nezha model)"),Lor=l(),_T=a("li"),Ebe=a("strong"),yor=o("nystromformer"),xor=o(" \u2014 "),jW=a("a"),$or=o("NystromformerForTokenClassification"),kor=o(" (Nystr\xF6mformer model)"),Sor=l(),bT=a("li"),Cbe=a("strong"),Ror=o("qdqbert"),Por=o(" \u2014 "),DW=a("a"),Bor=o("QDQBertForTokenClassification"),Ior=o(" (QDQBert model)"),Nor=l(),vT=a("li"),wbe=a("strong"),qor=o("rembert"),jor=o(" \u2014 "),GW=a("a"),Dor=o("RemBertForTokenClassification"),Gor=o(" (RemBERT model)"),Oor=l(),FT=a("li"),Abe=a("strong"),Vor=o("roberta"),Xor=o(" \u2014 "),OW=a("a"),zor=o("RobertaForTokenClassification"),Wor=o(" (RoBERTa model)"),Qor=l(),TT=a("li"),Lbe=a("strong"),Hor=o("roformer"),Uor=o(" \u2014 "),VW=a("a"),Jor=o("RoFormerForTokenClassification"),Yor=o(" (RoFormer model)"),Kor=l(),MT=a("li"),ybe=a("strong"),Zor=o("squeezebert"),err=o(" \u2014 "),XW=a("a"),orr=o("SqueezeBertForTokenClassification"),rrr=o(" (SqueezeBERT model)"),trr=l(),ET=a("li"),xbe=a("strong"),arr=o("xlm"),nrr=o(" \u2014 "),zW=a("a"),srr=o("XLMForTokenClassification"),lrr=o(" (XLM model)"),irr=l(),CT=a("li"),$be=a("strong"),drr=o("xlm-roberta"),crr=o(" \u2014 "),WW=a("a"),mrr=o("XLMRobertaForTokenClassification"),frr=o(" (XLM-RoBERTa model)"),grr=l(),wT=a("li"),kbe=a("strong"),hrr=o("xlm-roberta-xl"),urr=o(" \u2014 "),QW=a("a"),prr=o("XLMRobertaXLForTokenClassification"),_rr=o(" (XLM-RoBERTa-XL model)"),brr=l(),AT=a("li"),Sbe=a("strong"),vrr=o("xlnet"),Frr=o(" \u2014 "),HW=a("a"),Trr=o("XLNetForTokenClassification"),Mrr=o(" (XLNet model)"),Err=l(),LT=a("li"),Rbe=a("strong"),Crr=o("yoso"),wrr=o(" \u2014 "),UW=a("a"),Arr=o("YosoForTokenClassification"),Lrr=o(" (YOSO model)"),yrr=l(),yT=a("p"),xrr=o("The model is set in evaluation mode by default using "),Pbe=a("code"),$rr=o("model.eval()"),krr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bbe=a("code"),Srr=o("model.train()"),Rrr=l(),F(xT.$$.fragment),Dze=l(),_d=a("h2"),$T=a("a"),Ibe=a("span"),F(q8.$$.fragment),Prr=l(),Nbe=a("span"),Brr=o("AutoModelForQuestionAnswering"),Gze=l(),Go=a("div"),F(j8.$$.fragment),Irr=l(),bd=a("p"),Nrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JW=a("a"),qrr=o("from_pretrained()"),jrr=o(" class method or the "),YW=a("a"),Drr=o("from_config()"),Grr=o(` class
method.`),Orr=l(),D8=a("p"),Vrr=o("This class cannot be instantiated directly using "),qbe=a("code"),Xrr=o("__init__()"),zrr=o(" (throws an error)."),Wrr=l(),_t=a("div"),F(G8.$$.fragment),Qrr=l(),jbe=a("p"),Hrr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Urr=l(),vd=a("p"),Jrr=o(`Note:
Loading a model from its configuration file does `),Dbe=a("strong"),Yrr=o("not"),Krr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=a("a"),Zrr=o("from_pretrained()"),etr=o(" to load the model weights."),otr=l(),F(kT.$$.fragment),rtr=l(),so=a("div"),F(O8.$$.fragment),ttr=l(),Gbe=a("p"),atr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ntr=l(),za=a("p"),str=o("The model class to instantiate is selected based on the "),Obe=a("code"),ltr=o("model_type"),itr=o(` property of the config object (either
passed as an argument or loaded from `),Vbe=a("code"),dtr=o("pretrained_model_name_or_path"),ctr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xbe=a("code"),mtr=o("pretrained_model_name_or_path"),ftr=o(":"),gtr=l(),V=a("ul"),ST=a("li"),zbe=a("strong"),htr=o("albert"),utr=o(" \u2014 "),ZW=a("a"),ptr=o("AlbertForQuestionAnswering"),_tr=o(" (ALBERT model)"),btr=l(),RT=a("li"),Wbe=a("strong"),vtr=o("bart"),Ftr=o(" \u2014 "),eQ=a("a"),Ttr=o("BartForQuestionAnswering"),Mtr=o(" (BART model)"),Etr=l(),PT=a("li"),Qbe=a("strong"),Ctr=o("bert"),wtr=o(" \u2014 "),oQ=a("a"),Atr=o("BertForQuestionAnswering"),Ltr=o(" (BERT model)"),ytr=l(),BT=a("li"),Hbe=a("strong"),xtr=o("big_bird"),$tr=o(" \u2014 "),rQ=a("a"),ktr=o("BigBirdForQuestionAnswering"),Str=o(" (BigBird model)"),Rtr=l(),IT=a("li"),Ube=a("strong"),Ptr=o("bigbird_pegasus"),Btr=o(" \u2014 "),tQ=a("a"),Itr=o("BigBirdPegasusForQuestionAnswering"),Ntr=o(" (BigBird-Pegasus model)"),qtr=l(),NT=a("li"),Jbe=a("strong"),jtr=o("camembert"),Dtr=o(" \u2014 "),aQ=a("a"),Gtr=o("CamembertForQuestionAnswering"),Otr=o(" (CamemBERT model)"),Vtr=l(),qT=a("li"),Ybe=a("strong"),Xtr=o("canine"),ztr=o(" \u2014 "),nQ=a("a"),Wtr=o("CanineForQuestionAnswering"),Qtr=o(" (CANINE model)"),Htr=l(),jT=a("li"),Kbe=a("strong"),Utr=o("convbert"),Jtr=o(" \u2014 "),sQ=a("a"),Ytr=o("ConvBertForQuestionAnswering"),Ktr=o(" (ConvBERT model)"),Ztr=l(),DT=a("li"),Zbe=a("strong"),ear=o("data2vec-text"),oar=o(" \u2014 "),lQ=a("a"),rar=o("Data2VecTextForQuestionAnswering"),tar=o(" (Data2VecText model)"),aar=l(),GT=a("li"),eve=a("strong"),nar=o("deberta"),sar=o(" \u2014 "),iQ=a("a"),lar=o("DebertaForQuestionAnswering"),iar=o(" (DeBERTa model)"),dar=l(),OT=a("li"),ove=a("strong"),car=o("deberta-v2"),mar=o(" \u2014 "),dQ=a("a"),far=o("DebertaV2ForQuestionAnswering"),gar=o(" (DeBERTa-v2 model)"),har=l(),VT=a("li"),rve=a("strong"),uar=o("distilbert"),par=o(" \u2014 "),cQ=a("a"),_ar=o("DistilBertForQuestionAnswering"),bar=o(" (DistilBERT model)"),Far=l(),XT=a("li"),tve=a("strong"),Tar=o("electra"),Mar=o(" \u2014 "),mQ=a("a"),Ear=o("ElectraForQuestionAnswering"),Car=o(" (ELECTRA model)"),war=l(),zT=a("li"),ave=a("strong"),Aar=o("flaubert"),Lar=o(" \u2014 "),fQ=a("a"),yar=o("FlaubertForQuestionAnsweringSimple"),xar=o(" (FlauBERT model)"),$ar=l(),WT=a("li"),nve=a("strong"),kar=o("fnet"),Sar=o(" \u2014 "),gQ=a("a"),Rar=o("FNetForQuestionAnswering"),Par=o(" (FNet model)"),Bar=l(),QT=a("li"),sve=a("strong"),Iar=o("funnel"),Nar=o(" \u2014 "),hQ=a("a"),qar=o("FunnelForQuestionAnswering"),jar=o(" (Funnel Transformer model)"),Dar=l(),HT=a("li"),lve=a("strong"),Gar=o("gptj"),Oar=o(" \u2014 "),uQ=a("a"),Var=o("GPTJForQuestionAnswering"),Xar=o(" (GPT-J model)"),zar=l(),UT=a("li"),ive=a("strong"),War=o("ibert"),Qar=o(" \u2014 "),pQ=a("a"),Har=o("IBertForQuestionAnswering"),Uar=o(" (I-BERT model)"),Jar=l(),JT=a("li"),dve=a("strong"),Yar=o("layoutlmv2"),Kar=o(" \u2014 "),_Q=a("a"),Zar=o("LayoutLMv2ForQuestionAnswering"),enr=o(" (LayoutLMv2 model)"),onr=l(),YT=a("li"),cve=a("strong"),rnr=o("layoutlmv3"),tnr=o(" \u2014 "),bQ=a("a"),anr=o("LayoutLMv3ForQuestionAnswering"),nnr=o(" (LayoutLMv3 model)"),snr=l(),KT=a("li"),mve=a("strong"),lnr=o("led"),inr=o(" \u2014 "),vQ=a("a"),dnr=o("LEDForQuestionAnswering"),cnr=o(" (LED model)"),mnr=l(),ZT=a("li"),fve=a("strong"),fnr=o("longformer"),gnr=o(" \u2014 "),FQ=a("a"),hnr=o("LongformerForQuestionAnswering"),unr=o(" (Longformer model)"),pnr=l(),eM=a("li"),gve=a("strong"),_nr=o("lxmert"),bnr=o(" \u2014 "),TQ=a("a"),vnr=o("LxmertForQuestionAnswering"),Fnr=o(" (LXMERT model)"),Tnr=l(),oM=a("li"),hve=a("strong"),Mnr=o("mbart"),Enr=o(" \u2014 "),MQ=a("a"),Cnr=o("MBartForQuestionAnswering"),wnr=o(" (mBART model)"),Anr=l(),rM=a("li"),uve=a("strong"),Lnr=o("megatron-bert"),ynr=o(" \u2014 "),EQ=a("a"),xnr=o("MegatronBertForQuestionAnswering"),$nr=o(" (Megatron-BERT model)"),knr=l(),tM=a("li"),pve=a("strong"),Snr=o("mobilebert"),Rnr=o(" \u2014 "),CQ=a("a"),Pnr=o("MobileBertForQuestionAnswering"),Bnr=o(" (MobileBERT model)"),Inr=l(),aM=a("li"),_ve=a("strong"),Nnr=o("mpnet"),qnr=o(" \u2014 "),wQ=a("a"),jnr=o("MPNetForQuestionAnswering"),Dnr=o(" (MPNet model)"),Gnr=l(),nM=a("li"),bve=a("strong"),Onr=o("mvp"),Vnr=o(" \u2014 "),AQ=a("a"),Xnr=o("MvpForQuestionAnswering"),znr=o(" (MVP model)"),Wnr=l(),sM=a("li"),vve=a("strong"),Qnr=o("nezha"),Hnr=o(" \u2014 "),LQ=a("a"),Unr=o("NezhaForQuestionAnswering"),Jnr=o(" (Nezha model)"),Ynr=l(),lM=a("li"),Fve=a("strong"),Knr=o("nystromformer"),Znr=o(" \u2014 "),yQ=a("a"),esr=o("NystromformerForQuestionAnswering"),osr=o(" (Nystr\xF6mformer model)"),rsr=l(),iM=a("li"),Tve=a("strong"),tsr=o("qdqbert"),asr=o(" \u2014 "),xQ=a("a"),nsr=o("QDQBertForQuestionAnswering"),ssr=o(" (QDQBert model)"),lsr=l(),dM=a("li"),Mve=a("strong"),isr=o("reformer"),dsr=o(" \u2014 "),$Q=a("a"),csr=o("ReformerForQuestionAnswering"),msr=o(" (Reformer model)"),fsr=l(),cM=a("li"),Eve=a("strong"),gsr=o("rembert"),hsr=o(" \u2014 "),kQ=a("a"),usr=o("RemBertForQuestionAnswering"),psr=o(" (RemBERT model)"),_sr=l(),mM=a("li"),Cve=a("strong"),bsr=o("roberta"),vsr=o(" \u2014 "),SQ=a("a"),Fsr=o("RobertaForQuestionAnswering"),Tsr=o(" (RoBERTa model)"),Msr=l(),fM=a("li"),wve=a("strong"),Esr=o("roformer"),Csr=o(" \u2014 "),RQ=a("a"),wsr=o("RoFormerForQuestionAnswering"),Asr=o(" (RoFormer model)"),Lsr=l(),gM=a("li"),Ave=a("strong"),ysr=o("splinter"),xsr=o(" \u2014 "),PQ=a("a"),$sr=o("SplinterForQuestionAnswering"),ksr=o(" (Splinter model)"),Ssr=l(),hM=a("li"),Lve=a("strong"),Rsr=o("squeezebert"),Psr=o(" \u2014 "),BQ=a("a"),Bsr=o("SqueezeBertForQuestionAnswering"),Isr=o(" (SqueezeBERT model)"),Nsr=l(),uM=a("li"),yve=a("strong"),qsr=o("xlm"),jsr=o(" \u2014 "),IQ=a("a"),Dsr=o("XLMForQuestionAnsweringSimple"),Gsr=o(" (XLM model)"),Osr=l(),pM=a("li"),xve=a("strong"),Vsr=o("xlm-roberta"),Xsr=o(" \u2014 "),NQ=a("a"),zsr=o("XLMRobertaForQuestionAnswering"),Wsr=o(" (XLM-RoBERTa model)"),Qsr=l(),_M=a("li"),$ve=a("strong"),Hsr=o("xlm-roberta-xl"),Usr=o(" \u2014 "),qQ=a("a"),Jsr=o("XLMRobertaXLForQuestionAnswering"),Ysr=o(" (XLM-RoBERTa-XL model)"),Ksr=l(),bM=a("li"),kve=a("strong"),Zsr=o("xlnet"),elr=o(" \u2014 "),jQ=a("a"),olr=o("XLNetForQuestionAnsweringSimple"),rlr=o(" (XLNet model)"),tlr=l(),vM=a("li"),Sve=a("strong"),alr=o("yoso"),nlr=o(" \u2014 "),DQ=a("a"),slr=o("YosoForQuestionAnswering"),llr=o(" (YOSO model)"),ilr=l(),FM=a("p"),dlr=o("The model is set in evaluation mode by default using "),Rve=a("code"),clr=o("model.eval()"),mlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pve=a("code"),flr=o("model.train()"),glr=l(),F(TM.$$.fragment),Oze=l(),Fd=a("h2"),MM=a("a"),Bve=a("span"),F(V8.$$.fragment),hlr=l(),Ive=a("span"),ulr=o("AutoModelForTableQuestionAnswering"),Vze=l(),Oo=a("div"),F(X8.$$.fragment),plr=l(),Td=a("p"),_lr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),GQ=a("a"),blr=o("from_pretrained()"),vlr=o(" class method or the "),OQ=a("a"),Flr=o("from_config()"),Tlr=o(` class
method.`),Mlr=l(),z8=a("p"),Elr=o("This class cannot be instantiated directly using "),Nve=a("code"),Clr=o("__init__()"),wlr=o(" (throws an error)."),Alr=l(),bt=a("div"),F(W8.$$.fragment),Llr=l(),qve=a("p"),ylr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xlr=l(),Md=a("p"),$lr=o(`Note:
Loading a model from its configuration file does `),jve=a("strong"),klr=o("not"),Slr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=a("a"),Rlr=o("from_pretrained()"),Plr=o(" to load the model weights."),Blr=l(),F(EM.$$.fragment),Ilr=l(),lo=a("div"),F(Q8.$$.fragment),Nlr=l(),Dve=a("p"),qlr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),jlr=l(),Wa=a("p"),Dlr=o("The model class to instantiate is selected based on the "),Gve=a("code"),Glr=o("model_type"),Olr=o(` property of the config object (either
passed as an argument or loaded from `),Ove=a("code"),Vlr=o("pretrained_model_name_or_path"),Xlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=a("code"),zlr=o("pretrained_model_name_or_path"),Wlr=o(":"),Qlr=l(),Xve=a("ul"),CM=a("li"),zve=a("strong"),Hlr=o("tapas"),Ulr=o(" \u2014 "),XQ=a("a"),Jlr=o("TapasForQuestionAnswering"),Ylr=o(" (TAPAS model)"),Klr=l(),wM=a("p"),Zlr=o("The model is set in evaluation mode by default using "),Wve=a("code"),eir=o("model.eval()"),oir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qve=a("code"),rir=o("model.train()"),tir=l(),F(AM.$$.fragment),Xze=l(),Ed=a("h2"),LM=a("a"),Hve=a("span"),F(H8.$$.fragment),air=l(),Uve=a("span"),nir=o("AutoModelForImageClassification"),zze=l(),Vo=a("div"),F(U8.$$.fragment),sir=l(),Cd=a("p"),lir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zQ=a("a"),iir=o("from_pretrained()"),dir=o(" class method or the "),WQ=a("a"),cir=o("from_config()"),mir=o(` class
method.`),fir=l(),J8=a("p"),gir=o("This class cannot be instantiated directly using "),Jve=a("code"),hir=o("__init__()"),uir=o(" (throws an error)."),pir=l(),vt=a("div"),F(Y8.$$.fragment),_ir=l(),Yve=a("p"),bir=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vir=l(),wd=a("p"),Fir=o(`Note:
Loading a model from its configuration file does `),Kve=a("strong"),Tir=o("not"),Mir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=a("a"),Eir=o("from_pretrained()"),Cir=o(" to load the model weights."),wir=l(),F(yM.$$.fragment),Air=l(),io=a("div"),F(K8.$$.fragment),Lir=l(),Zve=a("p"),yir=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xir=l(),Qa=a("p"),$ir=o("The model class to instantiate is selected based on the "),e1e=a("code"),kir=o("model_type"),Sir=o(` property of the config object (either
passed as an argument or loaded from `),o1e=a("code"),Rir=o("pretrained_model_name_or_path"),Pir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r1e=a("code"),Bir=o("pretrained_model_name_or_path"),Iir=o(":"),Nir=l(),be=a("ul"),xM=a("li"),t1e=a("strong"),qir=o("beit"),jir=o(" \u2014 "),HQ=a("a"),Dir=o("BeitForImageClassification"),Gir=o(" (BEiT model)"),Oir=l(),$M=a("li"),a1e=a("strong"),Vir=o("convnext"),Xir=o(" \u2014 "),UQ=a("a"),zir=o("ConvNextForImageClassification"),Wir=o(" (ConvNeXT model)"),Qir=l(),kM=a("li"),n1e=a("strong"),Hir=o("cvt"),Uir=o(" \u2014 "),JQ=a("a"),Jir=o("CvtForImageClassification"),Yir=o(" (CvT model)"),Kir=l(),SM=a("li"),s1e=a("strong"),Zir=o("data2vec-vision"),edr=o(" \u2014 "),YQ=a("a"),odr=o("Data2VecVisionForImageClassification"),rdr=o(" (Data2VecVision model)"),tdr=l(),Ys=a("li"),l1e=a("strong"),adr=o("deit"),ndr=o(" \u2014 "),KQ=a("a"),sdr=o("DeiTForImageClassification"),ldr=o(" or "),ZQ=a("a"),idr=o("DeiTForImageClassificationWithTeacher"),ddr=o(" (DeiT model)"),cdr=l(),RM=a("li"),i1e=a("strong"),mdr=o("imagegpt"),fdr=o(" \u2014 "),eH=a("a"),gdr=o("ImageGPTForImageClassification"),hdr=o(" (ImageGPT model)"),udr=l(),Ks=a("li"),d1e=a("strong"),pdr=o("levit"),_dr=o(" \u2014 "),oH=a("a"),bdr=o("LevitForImageClassification"),vdr=o(" or "),rH=a("a"),Fdr=o("LevitForImageClassificationWithTeacher"),Tdr=o(" (LeViT model)"),Mdr=l(),PM=a("li"),c1e=a("strong"),Edr=o("mobilevit"),Cdr=o(" \u2014 "),tH=a("a"),wdr=o("MobileViTForImageClassification"),Adr=o(" (MobileViT model)"),Ldr=l(),Ft=a("li"),m1e=a("strong"),ydr=o("perceiver"),xdr=o(" \u2014 "),aH=a("a"),$dr=o("PerceiverForImageClassificationLearned"),kdr=o(" or "),nH=a("a"),Sdr=o("PerceiverForImageClassificationFourier"),Rdr=o(" or "),sH=a("a"),Pdr=o("PerceiverForImageClassificationConvProcessing"),Bdr=o(" (Perceiver model)"),Idr=l(),BM=a("li"),f1e=a("strong"),Ndr=o("poolformer"),qdr=o(" \u2014 "),lH=a("a"),jdr=o("PoolFormerForImageClassification"),Ddr=o(" (PoolFormer model)"),Gdr=l(),IM=a("li"),g1e=a("strong"),Odr=o("regnet"),Vdr=o(" \u2014 "),iH=a("a"),Xdr=o("RegNetForImageClassification"),zdr=o(" (RegNet model)"),Wdr=l(),NM=a("li"),h1e=a("strong"),Qdr=o("resnet"),Hdr=o(" \u2014 "),dH=a("a"),Udr=o("ResNetForImageClassification"),Jdr=o(" (ResNet model)"),Ydr=l(),qM=a("li"),u1e=a("strong"),Kdr=o("segformer"),Zdr=o(" \u2014 "),cH=a("a"),ecr=o("SegformerForImageClassification"),ocr=o(" (SegFormer model)"),rcr=l(),jM=a("li"),p1e=a("strong"),tcr=o("swin"),acr=o(" \u2014 "),mH=a("a"),ncr=o("SwinForImageClassification"),scr=o(" (Swin Transformer model)"),lcr=l(),DM=a("li"),_1e=a("strong"),icr=o("swinv2"),dcr=o(" \u2014 "),fH=a("a"),ccr=o("Swinv2ForImageClassification"),mcr=o(" (Swin Transformer V2 model)"),fcr=l(),GM=a("li"),b1e=a("strong"),gcr=o("van"),hcr=o(" \u2014 "),gH=a("a"),ucr=o("VanForImageClassification"),pcr=o(" (VAN model)"),_cr=l(),OM=a("li"),v1e=a("strong"),bcr=o("vit"),vcr=o(" \u2014 "),hH=a("a"),Fcr=o("ViTForImageClassification"),Tcr=o(" (ViT model)"),Mcr=l(),VM=a("p"),Ecr=o("The model is set in evaluation mode by default using "),F1e=a("code"),Ccr=o("model.eval()"),wcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T1e=a("code"),Acr=o("model.train()"),Lcr=l(),F(XM.$$.fragment),Wze=l(),Ad=a("h2"),zM=a("a"),M1e=a("span"),F(Z8.$$.fragment),ycr=l(),E1e=a("span"),xcr=o("AutoModelForVision2Seq"),Qze=l(),Xo=a("div"),F(e9.$$.fragment),$cr=l(),Ld=a("p"),kcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),uH=a("a"),Scr=o("from_pretrained()"),Rcr=o(" class method or the "),pH=a("a"),Pcr=o("from_config()"),Bcr=o(` class
method.`),Icr=l(),o9=a("p"),Ncr=o("This class cannot be instantiated directly using "),C1e=a("code"),qcr=o("__init__()"),jcr=o(" (throws an error)."),Dcr=l(),Tt=a("div"),F(r9.$$.fragment),Gcr=l(),w1e=a("p"),Ocr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Vcr=l(),yd=a("p"),Xcr=o(`Note:
Loading a model from its configuration file does `),A1e=a("strong"),zcr=o("not"),Wcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=a("a"),Qcr=o("from_pretrained()"),Hcr=o(" to load the model weights."),Ucr=l(),F(WM.$$.fragment),Jcr=l(),co=a("div"),F(t9.$$.fragment),Ycr=l(),L1e=a("p"),Kcr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Zcr=l(),Ha=a("p"),emr=o("The model class to instantiate is selected based on the "),y1e=a("code"),omr=o("model_type"),rmr=o(` property of the config object (either
passed as an argument or loaded from `),x1e=a("code"),tmr=o("pretrained_model_name_or_path"),amr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=a("code"),nmr=o("pretrained_model_name_or_path"),smr=o(":"),lmr=l(),k1e=a("ul"),QM=a("li"),S1e=a("strong"),imr=o("vision-encoder-decoder"),dmr=o(" \u2014 "),bH=a("a"),cmr=o("VisionEncoderDecoderModel"),mmr=o(" (Vision Encoder decoder model)"),fmr=l(),HM=a("p"),gmr=o("The model is set in evaluation mode by default using "),R1e=a("code"),hmr=o("model.eval()"),umr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=a("code"),pmr=o("model.train()"),_mr=l(),F(UM.$$.fragment),Hze=l(),xd=a("h2"),JM=a("a"),B1e=a("span"),F(a9.$$.fragment),bmr=l(),I1e=a("span"),vmr=o("AutoModelForVisualQuestionAnswering"),Uze=l(),zo=a("div"),F(n9.$$.fragment),Fmr=l(),$d=a("p"),Tmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),vH=a("a"),Mmr=o("from_pretrained()"),Emr=o(" class method or the "),FH=a("a"),Cmr=o("from_config()"),wmr=o(` class
method.`),Amr=l(),s9=a("p"),Lmr=o("This class cannot be instantiated directly using "),N1e=a("code"),ymr=o("__init__()"),xmr=o(" (throws an error)."),$mr=l(),Mt=a("div"),F(l9.$$.fragment),kmr=l(),q1e=a("p"),Smr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Rmr=l(),kd=a("p"),Pmr=o(`Note:
Loading a model from its configuration file does `),j1e=a("strong"),Bmr=o("not"),Imr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=a("a"),Nmr=o("from_pretrained()"),qmr=o(" to load the model weights."),jmr=l(),F(YM.$$.fragment),Dmr=l(),mo=a("div"),F(i9.$$.fragment),Gmr=l(),D1e=a("p"),Omr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Vmr=l(),Ua=a("p"),Xmr=o("The model class to instantiate is selected based on the "),G1e=a("code"),zmr=o("model_type"),Wmr=o(` property of the config object (either
passed as an argument or loaded from `),O1e=a("code"),Qmr=o("pretrained_model_name_or_path"),Hmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=a("code"),Umr=o("pretrained_model_name_or_path"),Jmr=o(":"),Ymr=l(),X1e=a("ul"),KM=a("li"),z1e=a("strong"),Kmr=o("vilt"),Zmr=o(" \u2014 "),MH=a("a"),efr=o("ViltForQuestionAnswering"),ofr=o(" (ViLT model)"),rfr=l(),ZM=a("p"),tfr=o("The model is set in evaluation mode by default using "),W1e=a("code"),afr=o("model.eval()"),nfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q1e=a("code"),sfr=o("model.train()"),lfr=l(),F(e4.$$.fragment),Jze=l(),Sd=a("h2"),o4=a("a"),H1e=a("span"),F(d9.$$.fragment),ifr=l(),U1e=a("span"),dfr=o("AutoModelForAudioClassification"),Yze=l(),Wo=a("div"),F(c9.$$.fragment),cfr=l(),Rd=a("p"),mfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),EH=a("a"),ffr=o("from_pretrained()"),gfr=o(" class method or the "),CH=a("a"),hfr=o("from_config()"),ufr=o(` class
method.`),pfr=l(),m9=a("p"),_fr=o("This class cannot be instantiated directly using "),J1e=a("code"),bfr=o("__init__()"),vfr=o(" (throws an error)."),Ffr=l(),Et=a("div"),F(f9.$$.fragment),Tfr=l(),Y1e=a("p"),Mfr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Efr=l(),Pd=a("p"),Cfr=o(`Note:
Loading a model from its configuration file does `),K1e=a("strong"),wfr=o("not"),Afr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),Lfr=o("from_pretrained()"),yfr=o(" to load the model weights."),xfr=l(),F(r4.$$.fragment),$fr=l(),fo=a("div"),F(g9.$$.fragment),kfr=l(),Z1e=a("p"),Sfr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Rfr=l(),Ja=a("p"),Pfr=o("The model class to instantiate is selected based on the "),eFe=a("code"),Bfr=o("model_type"),Ifr=o(` property of the config object (either
passed as an argument or loaded from `),oFe=a("code"),Nfr=o("pretrained_model_name_or_path"),qfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=a("code"),jfr=o("pretrained_model_name_or_path"),Dfr=o(":"),Gfr=l(),Pe=a("ul"),t4=a("li"),tFe=a("strong"),Ofr=o("data2vec-audio"),Vfr=o(" \u2014 "),AH=a("a"),Xfr=o("Data2VecAudioForSequenceClassification"),zfr=o(" (Data2VecAudio model)"),Wfr=l(),a4=a("li"),aFe=a("strong"),Qfr=o("hubert"),Hfr=o(" \u2014 "),LH=a("a"),Ufr=o("HubertForSequenceClassification"),Jfr=o(" (Hubert model)"),Yfr=l(),n4=a("li"),nFe=a("strong"),Kfr=o("sew"),Zfr=o(" \u2014 "),yH=a("a"),egr=o("SEWForSequenceClassification"),ogr=o(" (SEW model)"),rgr=l(),s4=a("li"),sFe=a("strong"),tgr=o("sew-d"),agr=o(" \u2014 "),xH=a("a"),ngr=o("SEWDForSequenceClassification"),sgr=o(" (SEW-D model)"),lgr=l(),l4=a("li"),lFe=a("strong"),igr=o("unispeech"),dgr=o(" \u2014 "),$H=a("a"),cgr=o("UniSpeechForSequenceClassification"),mgr=o(" (UniSpeech model)"),fgr=l(),i4=a("li"),iFe=a("strong"),ggr=o("unispeech-sat"),hgr=o(" \u2014 "),kH=a("a"),ugr=o("UniSpeechSatForSequenceClassification"),pgr=o(" (UniSpeechSat model)"),_gr=l(),d4=a("li"),dFe=a("strong"),bgr=o("wav2vec2"),vgr=o(" \u2014 "),SH=a("a"),Fgr=o("Wav2Vec2ForSequenceClassification"),Tgr=o(" (Wav2Vec2 model)"),Mgr=l(),c4=a("li"),cFe=a("strong"),Egr=o("wav2vec2-conformer"),Cgr=o(" \u2014 "),RH=a("a"),wgr=o("Wav2Vec2ConformerForSequenceClassification"),Agr=o(" (Wav2Vec2-Conformer model)"),Lgr=l(),m4=a("li"),mFe=a("strong"),ygr=o("wavlm"),xgr=o(" \u2014 "),PH=a("a"),$gr=o("WavLMForSequenceClassification"),kgr=o(" (WavLM model)"),Sgr=l(),f4=a("p"),Rgr=o("The model is set in evaluation mode by default using "),fFe=a("code"),Pgr=o("model.eval()"),Bgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gFe=a("code"),Igr=o("model.train()"),Ngr=l(),F(g4.$$.fragment),Kze=l(),Bd=a("h2"),h4=a("a"),hFe=a("span"),F(h9.$$.fragment),qgr=l(),uFe=a("span"),jgr=o("AutoModelForAudioFrameClassification"),Zze=l(),Qo=a("div"),F(u9.$$.fragment),Dgr=l(),Id=a("p"),Ggr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),BH=a("a"),Ogr=o("from_pretrained()"),Vgr=o(" class method or the "),IH=a("a"),Xgr=o("from_config()"),zgr=o(` class
method.`),Wgr=l(),p9=a("p"),Qgr=o("This class cannot be instantiated directly using "),pFe=a("code"),Hgr=o("__init__()"),Ugr=o(" (throws an error)."),Jgr=l(),Ct=a("div"),F(_9.$$.fragment),Ygr=l(),_Fe=a("p"),Kgr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Zgr=l(),Nd=a("p"),ehr=o(`Note:
Loading a model from its configuration file does `),bFe=a("strong"),ohr=o("not"),rhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),thr=o("from_pretrained()"),ahr=o(" to load the model weights."),nhr=l(),F(u4.$$.fragment),shr=l(),go=a("div"),F(b9.$$.fragment),lhr=l(),vFe=a("p"),ihr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),dhr=l(),Ya=a("p"),chr=o("The model class to instantiate is selected based on the "),FFe=a("code"),mhr=o("model_type"),fhr=o(` property of the config object (either
passed as an argument or loaded from `),TFe=a("code"),ghr=o("pretrained_model_name_or_path"),hhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=a("code"),uhr=o("pretrained_model_name_or_path"),phr=o(":"),_hr=l(),rt=a("ul"),p4=a("li"),EFe=a("strong"),bhr=o("data2vec-audio"),vhr=o(" \u2014 "),qH=a("a"),Fhr=o("Data2VecAudioForAudioFrameClassification"),Thr=o(" (Data2VecAudio model)"),Mhr=l(),_4=a("li"),CFe=a("strong"),Ehr=o("unispeech-sat"),Chr=o(" \u2014 "),jH=a("a"),whr=o("UniSpeechSatForAudioFrameClassification"),Ahr=o(" (UniSpeechSat model)"),Lhr=l(),b4=a("li"),wFe=a("strong"),yhr=o("wav2vec2"),xhr=o(" \u2014 "),DH=a("a"),$hr=o("Wav2Vec2ForAudioFrameClassification"),khr=o(" (Wav2Vec2 model)"),Shr=l(),v4=a("li"),AFe=a("strong"),Rhr=o("wav2vec2-conformer"),Phr=o(" \u2014 "),GH=a("a"),Bhr=o("Wav2Vec2ConformerForAudioFrameClassification"),Ihr=o(" (Wav2Vec2-Conformer model)"),Nhr=l(),F4=a("li"),LFe=a("strong"),qhr=o("wavlm"),jhr=o(" \u2014 "),OH=a("a"),Dhr=o("WavLMForAudioFrameClassification"),Ghr=o(" (WavLM model)"),Ohr=l(),T4=a("p"),Vhr=o("The model is set in evaluation mode by default using "),yFe=a("code"),Xhr=o("model.eval()"),zhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xFe=a("code"),Whr=o("model.train()"),Qhr=l(),F(M4.$$.fragment),eWe=l(),qd=a("h2"),E4=a("a"),$Fe=a("span"),F(v9.$$.fragment),Hhr=l(),kFe=a("span"),Uhr=o("AutoModelForCTC"),oWe=l(),Ho=a("div"),F(F9.$$.fragment),Jhr=l(),jd=a("p"),Yhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),VH=a("a"),Khr=o("from_pretrained()"),Zhr=o(" class method or the "),XH=a("a"),eur=o("from_config()"),our=o(` class
method.`),rur=l(),T9=a("p"),tur=o("This class cannot be instantiated directly using "),SFe=a("code"),aur=o("__init__()"),nur=o(" (throws an error)."),sur=l(),wt=a("div"),F(M9.$$.fragment),lur=l(),RFe=a("p"),iur=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),dur=l(),Dd=a("p"),cur=o(`Note:
Loading a model from its configuration file does `),PFe=a("strong"),mur=o("not"),fur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=a("a"),gur=o("from_pretrained()"),hur=o(" to load the model weights."),uur=l(),F(C4.$$.fragment),pur=l(),ho=a("div"),F(E9.$$.fragment),_ur=l(),BFe=a("p"),bur=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),vur=l(),Ka=a("p"),Fur=o("The model class to instantiate is selected based on the "),IFe=a("code"),Tur=o("model_type"),Mur=o(` property of the config object (either
passed as an argument or loaded from `),NFe=a("code"),Eur=o("pretrained_model_name_or_path"),Cur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=a("code"),wur=o("pretrained_model_name_or_path"),Aur=o(":"),Lur=l(),Le=a("ul"),w4=a("li"),jFe=a("strong"),yur=o("data2vec-audio"),xur=o(" \u2014 "),WH=a("a"),$ur=o("Data2VecAudioForCTC"),kur=o(" (Data2VecAudio model)"),Sur=l(),A4=a("li"),DFe=a("strong"),Rur=o("hubert"),Pur=o(" \u2014 "),QH=a("a"),Bur=o("HubertForCTC"),Iur=o(" (Hubert model)"),Nur=l(),L4=a("li"),GFe=a("strong"),qur=o("mctct"),jur=o(" \u2014 "),HH=a("a"),Dur=o("MCTCTForCTC"),Gur=o(" (M-CTC-T model)"),Our=l(),y4=a("li"),OFe=a("strong"),Vur=o("sew"),Xur=o(" \u2014 "),UH=a("a"),zur=o("SEWForCTC"),Wur=o(" (SEW model)"),Qur=l(),x4=a("li"),VFe=a("strong"),Hur=o("sew-d"),Uur=o(" \u2014 "),JH=a("a"),Jur=o("SEWDForCTC"),Yur=o(" (SEW-D model)"),Kur=l(),$4=a("li"),XFe=a("strong"),Zur=o("unispeech"),epr=o(" \u2014 "),YH=a("a"),opr=o("UniSpeechForCTC"),rpr=o(" (UniSpeech model)"),tpr=l(),k4=a("li"),zFe=a("strong"),apr=o("unispeech-sat"),npr=o(" \u2014 "),KH=a("a"),spr=o("UniSpeechSatForCTC"),lpr=o(" (UniSpeechSat model)"),ipr=l(),S4=a("li"),WFe=a("strong"),dpr=o("wav2vec2"),cpr=o(" \u2014 "),ZH=a("a"),mpr=o("Wav2Vec2ForCTC"),fpr=o(" (Wav2Vec2 model)"),gpr=l(),R4=a("li"),QFe=a("strong"),hpr=o("wav2vec2-conformer"),upr=o(" \u2014 "),eU=a("a"),ppr=o("Wav2Vec2ConformerForCTC"),_pr=o(" (Wav2Vec2-Conformer model)"),bpr=l(),P4=a("li"),HFe=a("strong"),vpr=o("wavlm"),Fpr=o(" \u2014 "),oU=a("a"),Tpr=o("WavLMForCTC"),Mpr=o(" (WavLM model)"),Epr=l(),B4=a("p"),Cpr=o("The model is set in evaluation mode by default using "),UFe=a("code"),wpr=o("model.eval()"),Apr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),JFe=a("code"),Lpr=o("model.train()"),ypr=l(),F(I4.$$.fragment),rWe=l(),Gd=a("h2"),N4=a("a"),YFe=a("span"),F(C9.$$.fragment),xpr=l(),KFe=a("span"),$pr=o("AutoModelForSpeechSeq2Seq"),tWe=l(),Uo=a("div"),F(w9.$$.fragment),kpr=l(),Od=a("p"),Spr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),rU=a("a"),Rpr=o("from_pretrained()"),Ppr=o(" class method or the "),tU=a("a"),Bpr=o("from_config()"),Ipr=o(` class
method.`),Npr=l(),A9=a("p"),qpr=o("This class cannot be instantiated directly using "),ZFe=a("code"),jpr=o("__init__()"),Dpr=o(" (throws an error)."),Gpr=l(),At=a("div"),F(L9.$$.fragment),Opr=l(),eTe=a("p"),Vpr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Xpr=l(),Vd=a("p"),zpr=o(`Note:
Loading a model from its configuration file does `),oTe=a("strong"),Wpr=o("not"),Qpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=a("a"),Hpr=o("from_pretrained()"),Upr=o(" to load the model weights."),Jpr=l(),F(q4.$$.fragment),Ypr=l(),uo=a("div"),F(y9.$$.fragment),Kpr=l(),rTe=a("p"),Zpr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),e_r=l(),Za=a("p"),o_r=o("The model class to instantiate is selected based on the "),tTe=a("code"),r_r=o("model_type"),t_r=o(` property of the config object (either
passed as an argument or loaded from `),aTe=a("code"),a_r=o("pretrained_model_name_or_path"),n_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=a("code"),s_r=o("pretrained_model_name_or_path"),l_r=o(":"),i_r=l(),x9=a("ul"),j4=a("li"),sTe=a("strong"),d_r=o("speech-encoder-decoder"),c_r=o(" \u2014 "),nU=a("a"),m_r=o("SpeechEncoderDecoderModel"),f_r=o(" (Speech Encoder decoder model)"),g_r=l(),D4=a("li"),lTe=a("strong"),h_r=o("speech_to_text"),u_r=o(" \u2014 "),sU=a("a"),p_r=o("Speech2TextForConditionalGeneration"),__r=o(" (Speech2Text model)"),b_r=l(),G4=a("p"),v_r=o("The model is set in evaluation mode by default using "),iTe=a("code"),F_r=o("model.eval()"),T_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dTe=a("code"),M_r=o("model.train()"),E_r=l(),F(O4.$$.fragment),aWe=l(),Xd=a("h2"),V4=a("a"),cTe=a("span"),F($9.$$.fragment),C_r=l(),mTe=a("span"),w_r=o("AutoModelForAudioXVector"),nWe=l(),Jo=a("div"),F(k9.$$.fragment),A_r=l(),zd=a("p"),L_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),lU=a("a"),y_r=o("from_pretrained()"),x_r=o(" class method or the "),iU=a("a"),$_r=o("from_config()"),k_r=o(` class
method.`),S_r=l(),S9=a("p"),R_r=o("This class cannot be instantiated directly using "),fTe=a("code"),P_r=o("__init__()"),B_r=o(" (throws an error)."),I_r=l(),Lt=a("div"),F(R9.$$.fragment),N_r=l(),gTe=a("p"),q_r=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),j_r=l(),Wd=a("p"),D_r=o(`Note:
Loading a model from its configuration file does `),hTe=a("strong"),G_r=o("not"),O_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=a("a"),V_r=o("from_pretrained()"),X_r=o(" to load the model weights."),z_r=l(),F(X4.$$.fragment),W_r=l(),po=a("div"),F(P9.$$.fragment),Q_r=l(),uTe=a("p"),H_r=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),U_r=l(),en=a("p"),J_r=o("The model class to instantiate is selected based on the "),pTe=a("code"),Y_r=o("model_type"),K_r=o(` property of the config object (either
passed as an argument or loaded from `),_Te=a("code"),Z_r=o("pretrained_model_name_or_path"),e2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=a("code"),o2r=o("pretrained_model_name_or_path"),r2r=o(":"),t2r=l(),tt=a("ul"),z4=a("li"),vTe=a("strong"),a2r=o("data2vec-audio"),n2r=o(" \u2014 "),cU=a("a"),s2r=o("Data2VecAudioForXVector"),l2r=o(" (Data2VecAudio model)"),i2r=l(),W4=a("li"),FTe=a("strong"),d2r=o("unispeech-sat"),c2r=o(" \u2014 "),mU=a("a"),m2r=o("UniSpeechSatForXVector"),f2r=o(" (UniSpeechSat model)"),g2r=l(),Q4=a("li"),TTe=a("strong"),h2r=o("wav2vec2"),u2r=o(" \u2014 "),fU=a("a"),p2r=o("Wav2Vec2ForXVector"),_2r=o(" (Wav2Vec2 model)"),b2r=l(),H4=a("li"),MTe=a("strong"),v2r=o("wav2vec2-conformer"),F2r=o(" \u2014 "),gU=a("a"),T2r=o("Wav2Vec2ConformerForXVector"),M2r=o(" (Wav2Vec2-Conformer model)"),E2r=l(),U4=a("li"),ETe=a("strong"),C2r=o("wavlm"),w2r=o(" \u2014 "),hU=a("a"),A2r=o("WavLMForXVector"),L2r=o(" (WavLM model)"),y2r=l(),J4=a("p"),x2r=o("The model is set in evaluation mode by default using "),CTe=a("code"),$2r=o("model.eval()"),k2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wTe=a("code"),S2r=o("model.train()"),R2r=l(),F(Y4.$$.fragment),sWe=l(),Qd=a("h2"),K4=a("a"),ATe=a("span"),F(B9.$$.fragment),P2r=l(),LTe=a("span"),B2r=o("AutoModelForMaskedImageModeling"),lWe=l(),Yo=a("div"),F(I9.$$.fragment),I2r=l(),Hd=a("p"),N2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),uU=a("a"),q2r=o("from_pretrained()"),j2r=o(" class method or the "),pU=a("a"),D2r=o("from_config()"),G2r=o(` class
method.`),O2r=l(),N9=a("p"),V2r=o("This class cannot be instantiated directly using "),yTe=a("code"),X2r=o("__init__()"),z2r=o(" (throws an error)."),W2r=l(),yt=a("div"),F(q9.$$.fragment),Q2r=l(),xTe=a("p"),H2r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),U2r=l(),Ud=a("p"),J2r=o(`Note:
Loading a model from its configuration file does `),$Te=a("strong"),Y2r=o("not"),K2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=a("a"),Z2r=o("from_pretrained()"),ebr=o(" to load the model weights."),obr=l(),F(Z4.$$.fragment),rbr=l(),_o=a("div"),F(j9.$$.fragment),tbr=l(),kTe=a("p"),abr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),nbr=l(),on=a("p"),sbr=o("The model class to instantiate is selected based on the "),STe=a("code"),lbr=o("model_type"),ibr=o(` property of the config object (either
passed as an argument or loaded from `),RTe=a("code"),dbr=o("pretrained_model_name_or_path"),cbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=a("code"),mbr=o("pretrained_model_name_or_path"),fbr=o(":"),gbr=l(),rn=a("ul"),eE=a("li"),BTe=a("strong"),hbr=o("deit"),ubr=o(" \u2014 "),bU=a("a"),pbr=o("DeiTForMaskedImageModeling"),_br=o(" (DeiT model)"),bbr=l(),oE=a("li"),ITe=a("strong"),vbr=o("swin"),Fbr=o(" \u2014 "),vU=a("a"),Tbr=o("SwinForMaskedImageModeling"),Mbr=o(" (Swin Transformer model)"),Ebr=l(),rE=a("li"),NTe=a("strong"),Cbr=o("swinv2"),wbr=o(" \u2014 "),FU=a("a"),Abr=o("Swinv2ForMaskedImageModeling"),Lbr=o(" (Swin Transformer V2 model)"),ybr=l(),tE=a("li"),qTe=a("strong"),xbr=o("vit"),$br=o(" \u2014 "),TU=a("a"),kbr=o("ViTForMaskedImageModeling"),Sbr=o(" (ViT model)"),Rbr=l(),aE=a("p"),Pbr=o("The model is set in evaluation mode by default using "),jTe=a("code"),Bbr=o("model.eval()"),Ibr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),DTe=a("code"),Nbr=o("model.train()"),qbr=l(),F(nE.$$.fragment),iWe=l(),Jd=a("h2"),sE=a("a"),GTe=a("span"),F(D9.$$.fragment),jbr=l(),OTe=a("span"),Dbr=o("AutoModelForObjectDetection"),dWe=l(),Ko=a("div"),F(G9.$$.fragment),Gbr=l(),Yd=a("p"),Obr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),MU=a("a"),Vbr=o("from_pretrained()"),Xbr=o(" class method or the "),EU=a("a"),zbr=o("from_config()"),Wbr=o(` class
method.`),Qbr=l(),O9=a("p"),Hbr=o("This class cannot be instantiated directly using "),VTe=a("code"),Ubr=o("__init__()"),Jbr=o(" (throws an error)."),Ybr=l(),xt=a("div"),F(V9.$$.fragment),Kbr=l(),XTe=a("p"),Zbr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),evr=l(),Kd=a("p"),ovr=o(`Note:
Loading a model from its configuration file does `),zTe=a("strong"),rvr=o("not"),tvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=a("a"),avr=o("from_pretrained()"),nvr=o(" to load the model weights."),svr=l(),F(lE.$$.fragment),lvr=l(),bo=a("div"),F(X9.$$.fragment),ivr=l(),WTe=a("p"),dvr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),cvr=l(),tn=a("p"),mvr=o("The model class to instantiate is selected based on the "),QTe=a("code"),fvr=o("model_type"),gvr=o(` property of the config object (either
passed as an argument or loaded from `),HTe=a("code"),hvr=o("pretrained_model_name_or_path"),uvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=a("code"),pvr=o("pretrained_model_name_or_path"),_vr=o(":"),bvr=l(),z9=a("ul"),iE=a("li"),JTe=a("strong"),vvr=o("detr"),Fvr=o(" \u2014 "),wU=a("a"),Tvr=o("DetrForObjectDetection"),Mvr=o(" (DETR model)"),Evr=l(),dE=a("li"),YTe=a("strong"),Cvr=o("yolos"),wvr=o(" \u2014 "),AU=a("a"),Avr=o("YolosForObjectDetection"),Lvr=o(" (YOLOS model)"),yvr=l(),cE=a("p"),xvr=o("The model is set in evaluation mode by default using "),KTe=a("code"),$vr=o("model.eval()"),kvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ZTe=a("code"),Svr=o("model.train()"),Rvr=l(),F(mE.$$.fragment),cWe=l(),Zd=a("h2"),fE=a("a"),eMe=a("span"),F(W9.$$.fragment),Pvr=l(),oMe=a("span"),Bvr=o("AutoModelForImageSegmentation"),mWe=l(),Zo=a("div"),F(Q9.$$.fragment),Ivr=l(),ec=a("p"),Nvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),LU=a("a"),qvr=o("from_pretrained()"),jvr=o(" class method or the "),yU=a("a"),Dvr=o("from_config()"),Gvr=o(` class
method.`),Ovr=l(),H9=a("p"),Vvr=o("This class cannot be instantiated directly using "),rMe=a("code"),Xvr=o("__init__()"),zvr=o(" (throws an error)."),Wvr=l(),$t=a("div"),F(U9.$$.fragment),Qvr=l(),tMe=a("p"),Hvr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Uvr=l(),oc=a("p"),Jvr=o(`Note:
Loading a model from its configuration file does `),aMe=a("strong"),Yvr=o("not"),Kvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=a("a"),Zvr=o("from_pretrained()"),e1r=o(" to load the model weights."),o1r=l(),F(gE.$$.fragment),r1r=l(),vo=a("div"),F(J9.$$.fragment),t1r=l(),nMe=a("p"),a1r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),n1r=l(),an=a("p"),s1r=o("The model class to instantiate is selected based on the "),sMe=a("code"),l1r=o("model_type"),i1r=o(` property of the config object (either
passed as an argument or loaded from `),lMe=a("code"),d1r=o("pretrained_model_name_or_path"),c1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iMe=a("code"),m1r=o("pretrained_model_name_or_path"),f1r=o(":"),g1r=l(),dMe=a("ul"),hE=a("li"),cMe=a("strong"),h1r=o("detr"),u1r=o(" \u2014 "),$U=a("a"),p1r=o("DetrForSegmentation"),_1r=o(" (DETR model)"),b1r=l(),uE=a("p"),v1r=o("The model is set in evaluation mode by default using "),mMe=a("code"),F1r=o("model.eval()"),T1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fMe=a("code"),M1r=o("model.train()"),E1r=l(),F(pE.$$.fragment),fWe=l(),rc=a("h2"),_E=a("a"),gMe=a("span"),F(Y9.$$.fragment),C1r=l(),hMe=a("span"),w1r=o("AutoModelForSemanticSegmentation"),gWe=l(),er=a("div"),F(K9.$$.fragment),A1r=l(),tc=a("p"),L1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),kU=a("a"),y1r=o("from_pretrained()"),x1r=o(" class method or the "),SU=a("a"),$1r=o("from_config()"),k1r=o(` class
method.`),S1r=l(),Z9=a("p"),R1r=o("This class cannot be instantiated directly using "),uMe=a("code"),P1r=o("__init__()"),B1r=o(" (throws an error)."),I1r=l(),kt=a("div"),F(ex.$$.fragment),N1r=l(),pMe=a("p"),q1r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),j1r=l(),ac=a("p"),D1r=o(`Note:
Loading a model from its configuration file does `),_Me=a("strong"),G1r=o("not"),O1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RU=a("a"),V1r=o("from_pretrained()"),X1r=o(" to load the model weights."),z1r=l(),F(bE.$$.fragment),W1r=l(),Fo=a("div"),F(ox.$$.fragment),Q1r=l(),bMe=a("p"),H1r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),U1r=l(),nn=a("p"),J1r=o("The model class to instantiate is selected based on the "),vMe=a("code"),Y1r=o("model_type"),K1r=o(` property of the config object (either
passed as an argument or loaded from `),FMe=a("code"),Z1r=o("pretrained_model_name_or_path"),eFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TMe=a("code"),oFr=o("pretrained_model_name_or_path"),rFr=o(":"),tFr=l(),at=a("ul"),vE=a("li"),MMe=a("strong"),aFr=o("beit"),nFr=o(" \u2014 "),PU=a("a"),sFr=o("BeitForSemanticSegmentation"),lFr=o(" (BEiT model)"),iFr=l(),FE=a("li"),EMe=a("strong"),dFr=o("data2vec-vision"),cFr=o(" \u2014 "),BU=a("a"),mFr=o("Data2VecVisionForSemanticSegmentation"),fFr=o(" (Data2VecVision model)"),gFr=l(),TE=a("li"),CMe=a("strong"),hFr=o("dpt"),uFr=o(" \u2014 "),IU=a("a"),pFr=o("DPTForSemanticSegmentation"),_Fr=o(" (DPT model)"),bFr=l(),ME=a("li"),wMe=a("strong"),vFr=o("mobilevit"),FFr=o(" \u2014 "),NU=a("a"),TFr=o("MobileViTForSemanticSegmentation"),MFr=o(" (MobileViT model)"),EFr=l(),EE=a("li"),AMe=a("strong"),CFr=o("segformer"),wFr=o(" \u2014 "),qU=a("a"),AFr=o("SegformerForSemanticSegmentation"),LFr=o(" (SegFormer model)"),yFr=l(),CE=a("p"),xFr=o("The model is set in evaluation mode by default using "),LMe=a("code"),$Fr=o("model.eval()"),kFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yMe=a("code"),SFr=o("model.train()"),RFr=l(),F(wE.$$.fragment),hWe=l(),nc=a("h2"),AE=a("a"),xMe=a("span"),F(rx.$$.fragment),PFr=l(),$Me=a("span"),BFr=o("AutoModelForInstanceSegmentation"),uWe=l(),or=a("div"),F(tx.$$.fragment),IFr=l(),sc=a("p"),NFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),jU=a("a"),qFr=o("from_pretrained()"),jFr=o(" class method or the "),DU=a("a"),DFr=o("from_config()"),GFr=o(` class
method.`),OFr=l(),ax=a("p"),VFr=o("This class cannot be instantiated directly using "),kMe=a("code"),XFr=o("__init__()"),zFr=o(" (throws an error)."),WFr=l(),St=a("div"),F(nx.$$.fragment),QFr=l(),SMe=a("p"),HFr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),UFr=l(),lc=a("p"),JFr=o(`Note:
Loading a model from its configuration file does `),RMe=a("strong"),YFr=o("not"),KFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=a("a"),ZFr=o("from_pretrained()"),eTr=o(" to load the model weights."),oTr=l(),F(LE.$$.fragment),rTr=l(),To=a("div"),F(sx.$$.fragment),tTr=l(),PMe=a("p"),aTr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),nTr=l(),sn=a("p"),sTr=o("The model class to instantiate is selected based on the "),BMe=a("code"),lTr=o("model_type"),iTr=o(` property of the config object (either
passed as an argument or loaded from `),IMe=a("code"),dTr=o("pretrained_model_name_or_path"),cTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NMe=a("code"),mTr=o("pretrained_model_name_or_path"),fTr=o(":"),gTr=l(),qMe=a("ul"),yE=a("li"),jMe=a("strong"),hTr=o("maskformer"),uTr=o(" \u2014 "),OU=a("a"),pTr=o("MaskFormerForInstanceSegmentation"),_Tr=o(" (MaskFormer model)"),bTr=l(),xE=a("p"),vTr=o("The model is set in evaluation mode by default using "),DMe=a("code"),FTr=o("model.eval()"),TTr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),GMe=a("code"),MTr=o("model.train()"),ETr=l(),F($E.$$.fragment),pWe=l(),ic=a("h2"),kE=a("a"),OMe=a("span"),F(lx.$$.fragment),CTr=l(),VMe=a("span"),wTr=o("TFAutoModel"),_We=l(),rr=a("div"),F(ix.$$.fragment),ATr=l(),dc=a("p"),LTr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VU=a("a"),yTr=o("from_pretrained()"),xTr=o(" class method or the "),XU=a("a"),$Tr=o("from_config()"),kTr=o(` class
method.`),STr=l(),dx=a("p"),RTr=o("This class cannot be instantiated directly using "),XMe=a("code"),PTr=o("__init__()"),BTr=o(" (throws an error)."),ITr=l(),Rt=a("div"),F(cx.$$.fragment),NTr=l(),zMe=a("p"),qTr=o("Instantiates one of the base model classes of the library from a configuration."),jTr=l(),cc=a("p"),DTr=o(`Note:
Loading a model from its configuration file does `),WMe=a("strong"),GTr=o("not"),OTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=a("a"),VTr=o("from_pretrained()"),XTr=o(" to load the model weights."),zTr=l(),F(SE.$$.fragment),WTr=l(),$r=a("div"),F(mx.$$.fragment),QTr=l(),QMe=a("p"),HTr=o("Instantiate one of the base model classes of the library from a pretrained model."),UTr=l(),ln=a("p"),JTr=o("The model class to instantiate is selected based on the "),HMe=a("code"),YTr=o("model_type"),KTr=o(` property of the config object (either
passed as an argument or loaded from `),UMe=a("code"),ZTr=o("pretrained_model_name_or_path"),eMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JMe=a("code"),oMr=o("pretrained_model_name_or_path"),rMr=o(":"),tMr=l(),I=a("ul"),RE=a("li"),YMe=a("strong"),aMr=o("albert"),nMr=o(" \u2014 "),WU=a("a"),sMr=o("TFAlbertModel"),lMr=o(" (ALBERT model)"),iMr=l(),PE=a("li"),KMe=a("strong"),dMr=o("bart"),cMr=o(" \u2014 "),QU=a("a"),mMr=o("TFBartModel"),fMr=o(" (BART model)"),gMr=l(),BE=a("li"),ZMe=a("strong"),hMr=o("bert"),uMr=o(" \u2014 "),HU=a("a"),pMr=o("TFBertModel"),_Mr=o(" (BERT model)"),bMr=l(),IE=a("li"),e4e=a("strong"),vMr=o("blenderbot"),FMr=o(" \u2014 "),UU=a("a"),TMr=o("TFBlenderbotModel"),MMr=o(" (Blenderbot model)"),EMr=l(),NE=a("li"),o4e=a("strong"),CMr=o("blenderbot-small"),wMr=o(" \u2014 "),JU=a("a"),AMr=o("TFBlenderbotSmallModel"),LMr=o(" (BlenderbotSmall model)"),yMr=l(),qE=a("li"),r4e=a("strong"),xMr=o("camembert"),$Mr=o(" \u2014 "),YU=a("a"),kMr=o("TFCamembertModel"),SMr=o(" (CamemBERT model)"),RMr=l(),jE=a("li"),t4e=a("strong"),PMr=o("clip"),BMr=o(" \u2014 "),KU=a("a"),IMr=o("TFCLIPModel"),NMr=o(" (CLIP model)"),qMr=l(),DE=a("li"),a4e=a("strong"),jMr=o("convbert"),DMr=o(" \u2014 "),ZU=a("a"),GMr=o("TFConvBertModel"),OMr=o(" (ConvBERT model)"),VMr=l(),GE=a("li"),n4e=a("strong"),XMr=o("convnext"),zMr=o(" \u2014 "),eJ=a("a"),WMr=o("TFConvNextModel"),QMr=o(" (ConvNeXT model)"),HMr=l(),OE=a("li"),s4e=a("strong"),UMr=o("ctrl"),JMr=o(" \u2014 "),oJ=a("a"),YMr=o("TFCTRLModel"),KMr=o(" (CTRL model)"),ZMr=l(),VE=a("li"),l4e=a("strong"),e4r=o("data2vec-vision"),o4r=o(" \u2014 "),rJ=a("a"),r4r=o("TFData2VecVisionModel"),t4r=o(" (Data2VecVision model)"),a4r=l(),XE=a("li"),i4e=a("strong"),n4r=o("deberta"),s4r=o(" \u2014 "),tJ=a("a"),l4r=o("TFDebertaModel"),i4r=o(" (DeBERTa model)"),d4r=l(),zE=a("li"),d4e=a("strong"),c4r=o("deberta-v2"),m4r=o(" \u2014 "),aJ=a("a"),f4r=o("TFDebertaV2Model"),g4r=o(" (DeBERTa-v2 model)"),h4r=l(),WE=a("li"),c4e=a("strong"),u4r=o("deit"),p4r=o(" \u2014 "),nJ=a("a"),_4r=o("TFDeiTModel"),b4r=o(" (DeiT model)"),v4r=l(),QE=a("li"),m4e=a("strong"),F4r=o("distilbert"),T4r=o(" \u2014 "),sJ=a("a"),M4r=o("TFDistilBertModel"),E4r=o(" (DistilBERT model)"),C4r=l(),HE=a("li"),f4e=a("strong"),w4r=o("dpr"),A4r=o(" \u2014 "),lJ=a("a"),L4r=o("TFDPRQuestionEncoder"),y4r=o(" (DPR model)"),x4r=l(),UE=a("li"),g4e=a("strong"),$4r=o("electra"),k4r=o(" \u2014 "),iJ=a("a"),S4r=o("TFElectraModel"),R4r=o(" (ELECTRA model)"),P4r=l(),JE=a("li"),h4e=a("strong"),B4r=o("flaubert"),I4r=o(" \u2014 "),dJ=a("a"),N4r=o("TFFlaubertModel"),q4r=o(" (FlauBERT model)"),j4r=l(),Zs=a("li"),u4e=a("strong"),D4r=o("funnel"),G4r=o(" \u2014 "),cJ=a("a"),O4r=o("TFFunnelModel"),V4r=o(" or "),mJ=a("a"),X4r=o("TFFunnelBaseModel"),z4r=o(" (Funnel Transformer model)"),W4r=l(),YE=a("li"),p4e=a("strong"),Q4r=o("gpt2"),H4r=o(" \u2014 "),fJ=a("a"),U4r=o("TFGPT2Model"),J4r=o(" (OpenAI GPT-2 model)"),Y4r=l(),KE=a("li"),_4e=a("strong"),K4r=o("gptj"),Z4r=o(" \u2014 "),gJ=a("a"),eEr=o("TFGPTJModel"),oEr=o(" (GPT-J model)"),rEr=l(),ZE=a("li"),b4e=a("strong"),tEr=o("hubert"),aEr=o(" \u2014 "),hJ=a("a"),nEr=o("TFHubertModel"),sEr=o(" (Hubert model)"),lEr=l(),eC=a("li"),v4e=a("strong"),iEr=o("layoutlm"),dEr=o(" \u2014 "),uJ=a("a"),cEr=o("TFLayoutLMModel"),mEr=o(" (LayoutLM model)"),fEr=l(),oC=a("li"),F4e=a("strong"),gEr=o("led"),hEr=o(" \u2014 "),pJ=a("a"),uEr=o("TFLEDModel"),pEr=o(" (LED model)"),_Er=l(),rC=a("li"),T4e=a("strong"),bEr=o("longformer"),vEr=o(" \u2014 "),_J=a("a"),FEr=o("TFLongformerModel"),TEr=o(" (Longformer model)"),MEr=l(),tC=a("li"),M4e=a("strong"),EEr=o("lxmert"),CEr=o(" \u2014 "),bJ=a("a"),wEr=o("TFLxmertModel"),AEr=o(" (LXMERT model)"),LEr=l(),aC=a("li"),E4e=a("strong"),yEr=o("marian"),xEr=o(" \u2014 "),vJ=a("a"),$Er=o("TFMarianModel"),kEr=o(" (Marian model)"),SEr=l(),nC=a("li"),C4e=a("strong"),REr=o("mbart"),PEr=o(" \u2014 "),FJ=a("a"),BEr=o("TFMBartModel"),IEr=o(" (mBART model)"),NEr=l(),sC=a("li"),w4e=a("strong"),qEr=o("mobilebert"),jEr=o(" \u2014 "),TJ=a("a"),DEr=o("TFMobileBertModel"),GEr=o(" (MobileBERT model)"),OEr=l(),lC=a("li"),A4e=a("strong"),VEr=o("mpnet"),XEr=o(" \u2014 "),MJ=a("a"),zEr=o("TFMPNetModel"),WEr=o(" (MPNet model)"),QEr=l(),iC=a("li"),L4e=a("strong"),HEr=o("mt5"),UEr=o(" \u2014 "),EJ=a("a"),JEr=o("TFMT5Model"),YEr=o(" (MT5 model)"),KEr=l(),dC=a("li"),y4e=a("strong"),ZEr=o("openai-gpt"),eCr=o(" \u2014 "),CJ=a("a"),oCr=o("TFOpenAIGPTModel"),rCr=o(" (OpenAI GPT model)"),tCr=l(),cC=a("li"),x4e=a("strong"),aCr=o("opt"),nCr=o(" \u2014 "),wJ=a("a"),sCr=o("TFOPTModel"),lCr=o(" (OPT model)"),iCr=l(),mC=a("li"),$4e=a("strong"),dCr=o("pegasus"),cCr=o(" \u2014 "),AJ=a("a"),mCr=o("TFPegasusModel"),fCr=o(" (Pegasus model)"),gCr=l(),fC=a("li"),k4e=a("strong"),hCr=o("regnet"),uCr=o(" \u2014 "),LJ=a("a"),pCr=o("TFRegNetModel"),_Cr=o(" (RegNet model)"),bCr=l(),gC=a("li"),S4e=a("strong"),vCr=o("rembert"),FCr=o(" \u2014 "),yJ=a("a"),TCr=o("TFRemBertModel"),MCr=o(" (RemBERT model)"),ECr=l(),hC=a("li"),R4e=a("strong"),CCr=o("resnet"),wCr=o(" \u2014 "),xJ=a("a"),ACr=o("TFResNetModel"),LCr=o(" (ResNet model)"),yCr=l(),uC=a("li"),P4e=a("strong"),xCr=o("roberta"),$Cr=o(" \u2014 "),$J=a("a"),kCr=o("TFRobertaModel"),SCr=o(" (RoBERTa model)"),RCr=l(),pC=a("li"),B4e=a("strong"),PCr=o("roformer"),BCr=o(" \u2014 "),kJ=a("a"),ICr=o("TFRoFormerModel"),NCr=o(" (RoFormer model)"),qCr=l(),_C=a("li"),I4e=a("strong"),jCr=o("segformer"),DCr=o(" \u2014 "),SJ=a("a"),GCr=o("TFSegformerModel"),OCr=o(" (SegFormer model)"),VCr=l(),bC=a("li"),N4e=a("strong"),XCr=o("speech_to_text"),zCr=o(" \u2014 "),RJ=a("a"),WCr=o("TFSpeech2TextModel"),QCr=o(" (Speech2Text model)"),HCr=l(),vC=a("li"),q4e=a("strong"),UCr=o("swin"),JCr=o(" \u2014 "),PJ=a("a"),YCr=o("TFSwinModel"),KCr=o(" (Swin Transformer model)"),ZCr=l(),FC=a("li"),j4e=a("strong"),e5r=o("t5"),o5r=o(" \u2014 "),BJ=a("a"),r5r=o("TFT5Model"),t5r=o(" (T5 model)"),a5r=l(),TC=a("li"),D4e=a("strong"),n5r=o("tapas"),s5r=o(" \u2014 "),IJ=a("a"),l5r=o("TFTapasModel"),i5r=o(" (TAPAS model)"),d5r=l(),MC=a("li"),G4e=a("strong"),c5r=o("transfo-xl"),m5r=o(" \u2014 "),NJ=a("a"),f5r=o("TFTransfoXLModel"),g5r=o(" (Transformer-XL model)"),h5r=l(),EC=a("li"),O4e=a("strong"),u5r=o("vit"),p5r=o(" \u2014 "),qJ=a("a"),_5r=o("TFViTModel"),b5r=o(" (ViT model)"),v5r=l(),CC=a("li"),V4e=a("strong"),F5r=o("vit_mae"),T5r=o(" \u2014 "),jJ=a("a"),M5r=o("TFViTMAEModel"),E5r=o(" (ViTMAE model)"),C5r=l(),wC=a("li"),X4e=a("strong"),w5r=o("wav2vec2"),A5r=o(" \u2014 "),DJ=a("a"),L5r=o("TFWav2Vec2Model"),y5r=o(" (Wav2Vec2 model)"),x5r=l(),AC=a("li"),z4e=a("strong"),$5r=o("xlm"),k5r=o(" \u2014 "),GJ=a("a"),S5r=o("TFXLMModel"),R5r=o(" (XLM model)"),P5r=l(),LC=a("li"),W4e=a("strong"),B5r=o("xlm-roberta"),I5r=o(" \u2014 "),OJ=a("a"),N5r=o("TFXLMRobertaModel"),q5r=o(" (XLM-RoBERTa model)"),j5r=l(),yC=a("li"),Q4e=a("strong"),D5r=o("xlnet"),G5r=o(" \u2014 "),VJ=a("a"),O5r=o("TFXLNetModel"),V5r=o(" (XLNet model)"),X5r=l(),F(xC.$$.fragment),bWe=l(),mc=a("h2"),$C=a("a"),H4e=a("span"),F(fx.$$.fragment),z5r=l(),U4e=a("span"),W5r=o("TFAutoModelForPreTraining"),vWe=l(),tr=a("div"),F(gx.$$.fragment),Q5r=l(),fc=a("p"),H5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),XJ=a("a"),U5r=o("from_pretrained()"),J5r=o(" class method or the "),zJ=a("a"),Y5r=o("from_config()"),K5r=o(` class
method.`),Z5r=l(),hx=a("p"),e3r=o("This class cannot be instantiated directly using "),J4e=a("code"),o3r=o("__init__()"),r3r=o(" (throws an error)."),t3r=l(),Pt=a("div"),F(ux.$$.fragment),a3r=l(),Y4e=a("p"),n3r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),s3r=l(),gc=a("p"),l3r=o(`Note:
Loading a model from its configuration file does `),K4e=a("strong"),i3r=o("not"),d3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=a("a"),c3r=o("from_pretrained()"),m3r=o(" to load the model weights."),f3r=l(),F(kC.$$.fragment),g3r=l(),kr=a("div"),F(px.$$.fragment),h3r=l(),Z4e=a("p"),u3r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),p3r=l(),dn=a("p"),_3r=o("The model class to instantiate is selected based on the "),eEe=a("code"),b3r=o("model_type"),v3r=o(` property of the config object (either
passed as an argument or loaded from `),oEe=a("code"),F3r=o("pretrained_model_name_or_path"),T3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rEe=a("code"),M3r=o("pretrained_model_name_or_path"),E3r=o(":"),C3r=l(),se=a("ul"),SC=a("li"),tEe=a("strong"),w3r=o("albert"),A3r=o(" \u2014 "),QJ=a("a"),L3r=o("TFAlbertForPreTraining"),y3r=o(" (ALBERT model)"),x3r=l(),RC=a("li"),aEe=a("strong"),$3r=o("bart"),k3r=o(" \u2014 "),HJ=a("a"),S3r=o("TFBartForConditionalGeneration"),R3r=o(" (BART model)"),P3r=l(),PC=a("li"),nEe=a("strong"),B3r=o("bert"),I3r=o(" \u2014 "),UJ=a("a"),N3r=o("TFBertForPreTraining"),q3r=o(" (BERT model)"),j3r=l(),BC=a("li"),sEe=a("strong"),D3r=o("camembert"),G3r=o(" \u2014 "),JJ=a("a"),O3r=o("TFCamembertForMaskedLM"),V3r=o(" (CamemBERT model)"),X3r=l(),IC=a("li"),lEe=a("strong"),z3r=o("ctrl"),W3r=o(" \u2014 "),YJ=a("a"),Q3r=o("TFCTRLLMHeadModel"),H3r=o(" (CTRL model)"),U3r=l(),NC=a("li"),iEe=a("strong"),J3r=o("distilbert"),Y3r=o(" \u2014 "),KJ=a("a"),K3r=o("TFDistilBertForMaskedLM"),Z3r=o(" (DistilBERT model)"),e0r=l(),qC=a("li"),dEe=a("strong"),o0r=o("electra"),r0r=o(" \u2014 "),ZJ=a("a"),t0r=o("TFElectraForPreTraining"),a0r=o(" (ELECTRA model)"),n0r=l(),jC=a("li"),cEe=a("strong"),s0r=o("flaubert"),l0r=o(" \u2014 "),eY=a("a"),i0r=o("TFFlaubertWithLMHeadModel"),d0r=o(" (FlauBERT model)"),c0r=l(),DC=a("li"),mEe=a("strong"),m0r=o("funnel"),f0r=o(" \u2014 "),oY=a("a"),g0r=o("TFFunnelForPreTraining"),h0r=o(" (Funnel Transformer model)"),u0r=l(),GC=a("li"),fEe=a("strong"),p0r=o("gpt2"),_0r=o(" \u2014 "),rY=a("a"),b0r=o("TFGPT2LMHeadModel"),v0r=o(" (OpenAI GPT-2 model)"),F0r=l(),OC=a("li"),gEe=a("strong"),T0r=o("layoutlm"),M0r=o(" \u2014 "),tY=a("a"),E0r=o("TFLayoutLMForMaskedLM"),C0r=o(" (LayoutLM model)"),w0r=l(),VC=a("li"),hEe=a("strong"),A0r=o("lxmert"),L0r=o(" \u2014 "),aY=a("a"),y0r=o("TFLxmertForPreTraining"),x0r=o(" (LXMERT model)"),$0r=l(),XC=a("li"),uEe=a("strong"),k0r=o("mobilebert"),S0r=o(" \u2014 "),nY=a("a"),R0r=o("TFMobileBertForPreTraining"),P0r=o(" (MobileBERT model)"),B0r=l(),zC=a("li"),pEe=a("strong"),I0r=o("mpnet"),N0r=o(" \u2014 "),sY=a("a"),q0r=o("TFMPNetForMaskedLM"),j0r=o(" (MPNet model)"),D0r=l(),WC=a("li"),_Ee=a("strong"),G0r=o("openai-gpt"),O0r=o(" \u2014 "),lY=a("a"),V0r=o("TFOpenAIGPTLMHeadModel"),X0r=o(" (OpenAI GPT model)"),z0r=l(),QC=a("li"),bEe=a("strong"),W0r=o("roberta"),Q0r=o(" \u2014 "),iY=a("a"),H0r=o("TFRobertaForMaskedLM"),U0r=o(" (RoBERTa model)"),J0r=l(),HC=a("li"),vEe=a("strong"),Y0r=o("t5"),K0r=o(" \u2014 "),dY=a("a"),Z0r=o("TFT5ForConditionalGeneration"),ewr=o(" (T5 model)"),owr=l(),UC=a("li"),FEe=a("strong"),rwr=o("tapas"),twr=o(" \u2014 "),cY=a("a"),awr=o("TFTapasForMaskedLM"),nwr=o(" (TAPAS model)"),swr=l(),JC=a("li"),TEe=a("strong"),lwr=o("transfo-xl"),iwr=o(" \u2014 "),mY=a("a"),dwr=o("TFTransfoXLLMHeadModel"),cwr=o(" (Transformer-XL model)"),mwr=l(),YC=a("li"),MEe=a("strong"),fwr=o("vit_mae"),gwr=o(" \u2014 "),fY=a("a"),hwr=o("TFViTMAEForPreTraining"),uwr=o(" (ViTMAE model)"),pwr=l(),KC=a("li"),EEe=a("strong"),_wr=o("xlm"),bwr=o(" \u2014 "),gY=a("a"),vwr=o("TFXLMWithLMHeadModel"),Fwr=o(" (XLM model)"),Twr=l(),ZC=a("li"),CEe=a("strong"),Mwr=o("xlm-roberta"),Ewr=o(" \u2014 "),hY=a("a"),Cwr=o("TFXLMRobertaForMaskedLM"),wwr=o(" (XLM-RoBERTa model)"),Awr=l(),e5=a("li"),wEe=a("strong"),Lwr=o("xlnet"),ywr=o(" \u2014 "),uY=a("a"),xwr=o("TFXLNetLMHeadModel"),$wr=o(" (XLNet model)"),kwr=l(),F(o5.$$.fragment),FWe=l(),hc=a("h2"),r5=a("a"),AEe=a("span"),F(_x.$$.fragment),Swr=l(),LEe=a("span"),Rwr=o("TFAutoModelForCausalLM"),TWe=l(),ar=a("div"),F(bx.$$.fragment),Pwr=l(),uc=a("p"),Bwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),pY=a("a"),Iwr=o("from_pretrained()"),Nwr=o(" class method or the "),_Y=a("a"),qwr=o("from_config()"),jwr=o(` class
method.`),Dwr=l(),vx=a("p"),Gwr=o("This class cannot be instantiated directly using "),yEe=a("code"),Owr=o("__init__()"),Vwr=o(" (throws an error)."),Xwr=l(),Bt=a("div"),F(Fx.$$.fragment),zwr=l(),xEe=a("p"),Wwr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Qwr=l(),pc=a("p"),Hwr=o(`Note:
Loading a model from its configuration file does `),$Ee=a("strong"),Uwr=o("not"),Jwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=a("a"),Ywr=o("from_pretrained()"),Kwr=o(" to load the model weights."),Zwr=l(),F(t5.$$.fragment),eAr=l(),Sr=a("div"),F(Tx.$$.fragment),oAr=l(),kEe=a("p"),rAr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),tAr=l(),cn=a("p"),aAr=o("The model class to instantiate is selected based on the "),SEe=a("code"),nAr=o("model_type"),sAr=o(` property of the config object (either
passed as an argument or loaded from `),REe=a("code"),lAr=o("pretrained_model_name_or_path"),iAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PEe=a("code"),dAr=o("pretrained_model_name_or_path"),cAr=o(":"),mAr=l(),Me=a("ul"),a5=a("li"),BEe=a("strong"),fAr=o("bert"),gAr=o(" \u2014 "),vY=a("a"),hAr=o("TFBertLMHeadModel"),uAr=o(" (BERT model)"),pAr=l(),n5=a("li"),IEe=a("strong"),_Ar=o("camembert"),bAr=o(" \u2014 "),FY=a("a"),vAr=o("TFCamembertForCausalLM"),FAr=o(" (CamemBERT model)"),TAr=l(),s5=a("li"),NEe=a("strong"),MAr=o("ctrl"),EAr=o(" \u2014 "),TY=a("a"),CAr=o("TFCTRLLMHeadModel"),wAr=o(" (CTRL model)"),AAr=l(),l5=a("li"),qEe=a("strong"),LAr=o("gpt2"),yAr=o(" \u2014 "),MY=a("a"),xAr=o("TFGPT2LMHeadModel"),$Ar=o(" (OpenAI GPT-2 model)"),kAr=l(),i5=a("li"),jEe=a("strong"),SAr=o("gptj"),RAr=o(" \u2014 "),EY=a("a"),PAr=o("TFGPTJForCausalLM"),BAr=o(" (GPT-J model)"),IAr=l(),d5=a("li"),DEe=a("strong"),NAr=o("openai-gpt"),qAr=o(" \u2014 "),CY=a("a"),jAr=o("TFOpenAIGPTLMHeadModel"),DAr=o(" (OpenAI GPT model)"),GAr=l(),c5=a("li"),GEe=a("strong"),OAr=o("opt"),VAr=o(" \u2014 "),wY=a("a"),XAr=o("TFOPTForCausalLM"),zAr=o(" (OPT model)"),WAr=l(),m5=a("li"),OEe=a("strong"),QAr=o("rembert"),HAr=o(" \u2014 "),AY=a("a"),UAr=o("TFRemBertForCausalLM"),JAr=o(" (RemBERT model)"),YAr=l(),f5=a("li"),VEe=a("strong"),KAr=o("roberta"),ZAr=o(" \u2014 "),LY=a("a"),e6r=o("TFRobertaForCausalLM"),o6r=o(" (RoBERTa model)"),r6r=l(),g5=a("li"),XEe=a("strong"),t6r=o("roformer"),a6r=o(" \u2014 "),yY=a("a"),n6r=o("TFRoFormerForCausalLM"),s6r=o(" (RoFormer model)"),l6r=l(),h5=a("li"),zEe=a("strong"),i6r=o("transfo-xl"),d6r=o(" \u2014 "),xY=a("a"),c6r=o("TFTransfoXLLMHeadModel"),m6r=o(" (Transformer-XL model)"),f6r=l(),u5=a("li"),WEe=a("strong"),g6r=o("xlm"),h6r=o(" \u2014 "),$Y=a("a"),u6r=o("TFXLMWithLMHeadModel"),p6r=o(" (XLM model)"),_6r=l(),p5=a("li"),QEe=a("strong"),b6r=o("xlnet"),v6r=o(" \u2014 "),kY=a("a"),F6r=o("TFXLNetLMHeadModel"),T6r=o(" (XLNet model)"),M6r=l(),F(_5.$$.fragment),MWe=l(),_c=a("h2"),b5=a("a"),HEe=a("span"),F(Mx.$$.fragment),E6r=l(),UEe=a("span"),C6r=o("TFAutoModelForImageClassification"),EWe=l(),nr=a("div"),F(Ex.$$.fragment),w6r=l(),bc=a("p"),A6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SY=a("a"),L6r=o("from_pretrained()"),y6r=o(" class method or the "),RY=a("a"),x6r=o("from_config()"),$6r=o(` class
method.`),k6r=l(),Cx=a("p"),S6r=o("This class cannot be instantiated directly using "),JEe=a("code"),R6r=o("__init__()"),P6r=o(" (throws an error)."),B6r=l(),It=a("div"),F(wx.$$.fragment),I6r=l(),YEe=a("p"),N6r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),q6r=l(),vc=a("p"),j6r=o(`Note:
Loading a model from its configuration file does `),KEe=a("strong"),D6r=o("not"),G6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=a("a"),O6r=o("from_pretrained()"),V6r=o(" to load the model weights."),X6r=l(),F(v5.$$.fragment),z6r=l(),Rr=a("div"),F(Ax.$$.fragment),W6r=l(),ZEe=a("p"),Q6r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),H6r=l(),mn=a("p"),U6r=o("The model class to instantiate is selected based on the "),eCe=a("code"),J6r=o("model_type"),Y6r=o(` property of the config object (either
passed as an argument or loaded from `),oCe=a("code"),K6r=o("pretrained_model_name_or_path"),Z6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rCe=a("code"),e7r=o("pretrained_model_name_or_path"),o7r=o(":"),r7r=l(),Ve=a("ul"),F5=a("li"),tCe=a("strong"),t7r=o("convnext"),a7r=o(" \u2014 "),BY=a("a"),n7r=o("TFConvNextForImageClassification"),s7r=o(" (ConvNeXT model)"),l7r=l(),T5=a("li"),aCe=a("strong"),i7r=o("data2vec-vision"),d7r=o(" \u2014 "),IY=a("a"),c7r=o("TFData2VecVisionForImageClassification"),m7r=o(" (Data2VecVision model)"),f7r=l(),el=a("li"),nCe=a("strong"),g7r=o("deit"),h7r=o(" \u2014 "),NY=a("a"),u7r=o("TFDeiTForImageClassification"),p7r=o(" or "),qY=a("a"),_7r=o("TFDeiTForImageClassificationWithTeacher"),b7r=o(" (DeiT model)"),v7r=l(),M5=a("li"),sCe=a("strong"),F7r=o("regnet"),T7r=o(" \u2014 "),jY=a("a"),M7r=o("TFRegNetForImageClassification"),E7r=o(" (RegNet model)"),C7r=l(),E5=a("li"),lCe=a("strong"),w7r=o("resnet"),A7r=o(" \u2014 "),DY=a("a"),L7r=o("TFResNetForImageClassification"),y7r=o(" (ResNet model)"),x7r=l(),C5=a("li"),iCe=a("strong"),$7r=o("segformer"),k7r=o(" \u2014 "),GY=a("a"),S7r=o("TFSegformerForImageClassification"),R7r=o(" (SegFormer model)"),P7r=l(),w5=a("li"),dCe=a("strong"),B7r=o("swin"),I7r=o(" \u2014 "),OY=a("a"),N7r=o("TFSwinForImageClassification"),q7r=o(" (Swin Transformer model)"),j7r=l(),A5=a("li"),cCe=a("strong"),D7r=o("vit"),G7r=o(" \u2014 "),VY=a("a"),O7r=o("TFViTForImageClassification"),V7r=o(" (ViT model)"),X7r=l(),F(L5.$$.fragment),CWe=l(),Fc=a("h2"),y5=a("a"),mCe=a("span"),F(Lx.$$.fragment),z7r=l(),fCe=a("span"),W7r=o("TFAutoModelForMaskedLM"),wWe=l(),sr=a("div"),F(yx.$$.fragment),Q7r=l(),Tc=a("p"),H7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XY=a("a"),U7r=o("from_pretrained()"),J7r=o(" class method or the "),zY=a("a"),Y7r=o("from_config()"),K7r=o(` class
method.`),Z7r=l(),xx=a("p"),eLr=o("This class cannot be instantiated directly using "),gCe=a("code"),oLr=o("__init__()"),rLr=o(" (throws an error)."),tLr=l(),Nt=a("div"),F($x.$$.fragment),aLr=l(),hCe=a("p"),nLr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),sLr=l(),Mc=a("p"),lLr=o(`Note:
Loading a model from its configuration file does `),uCe=a("strong"),iLr=o("not"),dLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WY=a("a"),cLr=o("from_pretrained()"),mLr=o(" to load the model weights."),fLr=l(),F(x5.$$.fragment),gLr=l(),Pr=a("div"),F(kx.$$.fragment),hLr=l(),pCe=a("p"),uLr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pLr=l(),fn=a("p"),_Lr=o("The model class to instantiate is selected based on the "),_Ce=a("code"),bLr=o("model_type"),vLr=o(` property of the config object (either
passed as an argument or loaded from `),bCe=a("code"),FLr=o("pretrained_model_name_or_path"),TLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vCe=a("code"),MLr=o("pretrained_model_name_or_path"),ELr=o(":"),CLr=l(),ie=a("ul"),$5=a("li"),FCe=a("strong"),wLr=o("albert"),ALr=o(" \u2014 "),QY=a("a"),LLr=o("TFAlbertForMaskedLM"),yLr=o(" (ALBERT model)"),xLr=l(),k5=a("li"),TCe=a("strong"),$Lr=o("bert"),kLr=o(" \u2014 "),HY=a("a"),SLr=o("TFBertForMaskedLM"),RLr=o(" (BERT model)"),PLr=l(),S5=a("li"),MCe=a("strong"),BLr=o("camembert"),ILr=o(" \u2014 "),UY=a("a"),NLr=o("TFCamembertForMaskedLM"),qLr=o(" (CamemBERT model)"),jLr=l(),R5=a("li"),ECe=a("strong"),DLr=o("convbert"),GLr=o(" \u2014 "),JY=a("a"),OLr=o("TFConvBertForMaskedLM"),VLr=o(" (ConvBERT model)"),XLr=l(),P5=a("li"),CCe=a("strong"),zLr=o("deberta"),WLr=o(" \u2014 "),YY=a("a"),QLr=o("TFDebertaForMaskedLM"),HLr=o(" (DeBERTa model)"),ULr=l(),B5=a("li"),wCe=a("strong"),JLr=o("deberta-v2"),YLr=o(" \u2014 "),KY=a("a"),KLr=o("TFDebertaV2ForMaskedLM"),ZLr=o(" (DeBERTa-v2 model)"),eyr=l(),I5=a("li"),ACe=a("strong"),oyr=o("distilbert"),ryr=o(" \u2014 "),ZY=a("a"),tyr=o("TFDistilBertForMaskedLM"),ayr=o(" (DistilBERT model)"),nyr=l(),N5=a("li"),LCe=a("strong"),syr=o("electra"),lyr=o(" \u2014 "),eK=a("a"),iyr=o("TFElectraForMaskedLM"),dyr=o(" (ELECTRA model)"),cyr=l(),q5=a("li"),yCe=a("strong"),myr=o("flaubert"),fyr=o(" \u2014 "),oK=a("a"),gyr=o("TFFlaubertWithLMHeadModel"),hyr=o(" (FlauBERT model)"),uyr=l(),j5=a("li"),xCe=a("strong"),pyr=o("funnel"),_yr=o(" \u2014 "),rK=a("a"),byr=o("TFFunnelForMaskedLM"),vyr=o(" (Funnel Transformer model)"),Fyr=l(),D5=a("li"),$Ce=a("strong"),Tyr=o("layoutlm"),Myr=o(" \u2014 "),tK=a("a"),Eyr=o("TFLayoutLMForMaskedLM"),Cyr=o(" (LayoutLM model)"),wyr=l(),G5=a("li"),kCe=a("strong"),Ayr=o("longformer"),Lyr=o(" \u2014 "),aK=a("a"),yyr=o("TFLongformerForMaskedLM"),xyr=o(" (Longformer model)"),$yr=l(),O5=a("li"),SCe=a("strong"),kyr=o("mobilebert"),Syr=o(" \u2014 "),nK=a("a"),Ryr=o("TFMobileBertForMaskedLM"),Pyr=o(" (MobileBERT model)"),Byr=l(),V5=a("li"),RCe=a("strong"),Iyr=o("mpnet"),Nyr=o(" \u2014 "),sK=a("a"),qyr=o("TFMPNetForMaskedLM"),jyr=o(" (MPNet model)"),Dyr=l(),X5=a("li"),PCe=a("strong"),Gyr=o("rembert"),Oyr=o(" \u2014 "),lK=a("a"),Vyr=o("TFRemBertForMaskedLM"),Xyr=o(" (RemBERT model)"),zyr=l(),z5=a("li"),BCe=a("strong"),Wyr=o("roberta"),Qyr=o(" \u2014 "),iK=a("a"),Hyr=o("TFRobertaForMaskedLM"),Uyr=o(" (RoBERTa model)"),Jyr=l(),W5=a("li"),ICe=a("strong"),Yyr=o("roformer"),Kyr=o(" \u2014 "),dK=a("a"),Zyr=o("TFRoFormerForMaskedLM"),e8r=o(" (RoFormer model)"),o8r=l(),Q5=a("li"),NCe=a("strong"),r8r=o("tapas"),t8r=o(" \u2014 "),cK=a("a"),a8r=o("TFTapasForMaskedLM"),n8r=o(" (TAPAS model)"),s8r=l(),H5=a("li"),qCe=a("strong"),l8r=o("xlm"),i8r=o(" \u2014 "),mK=a("a"),d8r=o("TFXLMWithLMHeadModel"),c8r=o(" (XLM model)"),m8r=l(),U5=a("li"),jCe=a("strong"),f8r=o("xlm-roberta"),g8r=o(" \u2014 "),fK=a("a"),h8r=o("TFXLMRobertaForMaskedLM"),u8r=o(" (XLM-RoBERTa model)"),p8r=l(),F(J5.$$.fragment),AWe=l(),Ec=a("h2"),Y5=a("a"),DCe=a("span"),F(Sx.$$.fragment),_8r=l(),GCe=a("span"),b8r=o("TFAutoModelForSeq2SeqLM"),LWe=l(),lr=a("div"),F(Rx.$$.fragment),v8r=l(),Cc=a("p"),F8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gK=a("a"),T8r=o("from_pretrained()"),M8r=o(" class method or the "),hK=a("a"),E8r=o("from_config()"),C8r=o(` class
method.`),w8r=l(),Px=a("p"),A8r=o("This class cannot be instantiated directly using "),OCe=a("code"),L8r=o("__init__()"),y8r=o(" (throws an error)."),x8r=l(),qt=a("div"),F(Bx.$$.fragment),$8r=l(),VCe=a("p"),k8r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),S8r=l(),wc=a("p"),R8r=o(`Note:
Loading a model from its configuration file does `),XCe=a("strong"),P8r=o("not"),B8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("a"),I8r=o("from_pretrained()"),N8r=o(" to load the model weights."),q8r=l(),F(K5.$$.fragment),j8r=l(),Br=a("div"),F(Ix.$$.fragment),D8r=l(),zCe=a("p"),G8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),O8r=l(),gn=a("p"),V8r=o("The model class to instantiate is selected based on the "),WCe=a("code"),X8r=o("model_type"),z8r=o(` property of the config object (either
passed as an argument or loaded from `),QCe=a("code"),W8r=o("pretrained_model_name_or_path"),Q8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HCe=a("code"),H8r=o("pretrained_model_name_or_path"),U8r=o(":"),J8r=l(),ye=a("ul"),Z5=a("li"),UCe=a("strong"),Y8r=o("bart"),K8r=o(" \u2014 "),pK=a("a"),Z8r=o("TFBartForConditionalGeneration"),e9r=o(" (BART model)"),o9r=l(),e3=a("li"),JCe=a("strong"),r9r=o("blenderbot"),t9r=o(" \u2014 "),_K=a("a"),a9r=o("TFBlenderbotForConditionalGeneration"),n9r=o(" (Blenderbot model)"),s9r=l(),o3=a("li"),YCe=a("strong"),l9r=o("blenderbot-small"),i9r=o(" \u2014 "),bK=a("a"),d9r=o("TFBlenderbotSmallForConditionalGeneration"),c9r=o(" (BlenderbotSmall model)"),m9r=l(),r3=a("li"),KCe=a("strong"),f9r=o("encoder-decoder"),g9r=o(" \u2014 "),vK=a("a"),h9r=o("TFEncoderDecoderModel"),u9r=o(" (Encoder decoder model)"),p9r=l(),t3=a("li"),ZCe=a("strong"),_9r=o("led"),b9r=o(" \u2014 "),FK=a("a"),v9r=o("TFLEDForConditionalGeneration"),F9r=o(" (LED model)"),T9r=l(),a3=a("li"),e5e=a("strong"),M9r=o("marian"),E9r=o(" \u2014 "),TK=a("a"),C9r=o("TFMarianMTModel"),w9r=o(" (Marian model)"),A9r=l(),n3=a("li"),o5e=a("strong"),L9r=o("mbart"),y9r=o(" \u2014 "),MK=a("a"),x9r=o("TFMBartForConditionalGeneration"),$9r=o(" (mBART model)"),k9r=l(),s3=a("li"),r5e=a("strong"),S9r=o("mt5"),R9r=o(" \u2014 "),EK=a("a"),P9r=o("TFMT5ForConditionalGeneration"),B9r=o(" (MT5 model)"),I9r=l(),l3=a("li"),t5e=a("strong"),N9r=o("pegasus"),q9r=o(" \u2014 "),CK=a("a"),j9r=o("TFPegasusForConditionalGeneration"),D9r=o(" (Pegasus model)"),G9r=l(),i3=a("li"),a5e=a("strong"),O9r=o("t5"),V9r=o(" \u2014 "),wK=a("a"),X9r=o("TFT5ForConditionalGeneration"),z9r=o(" (T5 model)"),W9r=l(),F(d3.$$.fragment),yWe=l(),Ac=a("h2"),c3=a("a"),n5e=a("span"),F(Nx.$$.fragment),Q9r=l(),s5e=a("span"),H9r=o("TFAutoModelForSequenceClassification"),xWe=l(),ir=a("div"),F(qx.$$.fragment),U9r=l(),Lc=a("p"),J9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AK=a("a"),Y9r=o("from_pretrained()"),K9r=o(" class method or the "),LK=a("a"),Z9r=o("from_config()"),exr=o(` class
method.`),oxr=l(),jx=a("p"),rxr=o("This class cannot be instantiated directly using "),l5e=a("code"),txr=o("__init__()"),axr=o(" (throws an error)."),nxr=l(),jt=a("div"),F(Dx.$$.fragment),sxr=l(),i5e=a("p"),lxr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ixr=l(),yc=a("p"),dxr=o(`Note:
Loading a model from its configuration file does `),d5e=a("strong"),cxr=o("not"),mxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=a("a"),fxr=o("from_pretrained()"),gxr=o(" to load the model weights."),hxr=l(),F(m3.$$.fragment),uxr=l(),Ir=a("div"),F(Gx.$$.fragment),pxr=l(),c5e=a("p"),_xr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),bxr=l(),hn=a("p"),vxr=o("The model class to instantiate is selected based on the "),m5e=a("code"),Fxr=o("model_type"),Txr=o(` property of the config object (either
passed as an argument or loaded from `),f5e=a("code"),Mxr=o("pretrained_model_name_or_path"),Exr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g5e=a("code"),Cxr=o("pretrained_model_name_or_path"),wxr=o(":"),Axr=l(),te=a("ul"),f3=a("li"),h5e=a("strong"),Lxr=o("albert"),yxr=o(" \u2014 "),xK=a("a"),xxr=o("TFAlbertForSequenceClassification"),$xr=o(" (ALBERT model)"),kxr=l(),g3=a("li"),u5e=a("strong"),Sxr=o("bert"),Rxr=o(" \u2014 "),$K=a("a"),Pxr=o("TFBertForSequenceClassification"),Bxr=o(" (BERT model)"),Ixr=l(),h3=a("li"),p5e=a("strong"),Nxr=o("camembert"),qxr=o(" \u2014 "),kK=a("a"),jxr=o("TFCamembertForSequenceClassification"),Dxr=o(" (CamemBERT model)"),Gxr=l(),u3=a("li"),_5e=a("strong"),Oxr=o("convbert"),Vxr=o(" \u2014 "),SK=a("a"),Xxr=o("TFConvBertForSequenceClassification"),zxr=o(" (ConvBERT model)"),Wxr=l(),p3=a("li"),b5e=a("strong"),Qxr=o("ctrl"),Hxr=o(" \u2014 "),RK=a("a"),Uxr=o("TFCTRLForSequenceClassification"),Jxr=o(" (CTRL model)"),Yxr=l(),_3=a("li"),v5e=a("strong"),Kxr=o("deberta"),Zxr=o(" \u2014 "),PK=a("a"),e$r=o("TFDebertaForSequenceClassification"),o$r=o(" (DeBERTa model)"),r$r=l(),b3=a("li"),F5e=a("strong"),t$r=o("deberta-v2"),a$r=o(" \u2014 "),BK=a("a"),n$r=o("TFDebertaV2ForSequenceClassification"),s$r=o(" (DeBERTa-v2 model)"),l$r=l(),v3=a("li"),T5e=a("strong"),i$r=o("distilbert"),d$r=o(" \u2014 "),IK=a("a"),c$r=o("TFDistilBertForSequenceClassification"),m$r=o(" (DistilBERT model)"),f$r=l(),F3=a("li"),M5e=a("strong"),g$r=o("electra"),h$r=o(" \u2014 "),NK=a("a"),u$r=o("TFElectraForSequenceClassification"),p$r=o(" (ELECTRA model)"),_$r=l(),T3=a("li"),E5e=a("strong"),b$r=o("flaubert"),v$r=o(" \u2014 "),qK=a("a"),F$r=o("TFFlaubertForSequenceClassification"),T$r=o(" (FlauBERT model)"),M$r=l(),M3=a("li"),C5e=a("strong"),E$r=o("funnel"),C$r=o(" \u2014 "),jK=a("a"),w$r=o("TFFunnelForSequenceClassification"),A$r=o(" (Funnel Transformer model)"),L$r=l(),E3=a("li"),w5e=a("strong"),y$r=o("gpt2"),x$r=o(" \u2014 "),DK=a("a"),$$r=o("TFGPT2ForSequenceClassification"),k$r=o(" (OpenAI GPT-2 model)"),S$r=l(),C3=a("li"),A5e=a("strong"),R$r=o("gptj"),P$r=o(" \u2014 "),GK=a("a"),B$r=o("TFGPTJForSequenceClassification"),I$r=o(" (GPT-J model)"),N$r=l(),w3=a("li"),L5e=a("strong"),q$r=o("layoutlm"),j$r=o(" \u2014 "),OK=a("a"),D$r=o("TFLayoutLMForSequenceClassification"),G$r=o(" (LayoutLM model)"),O$r=l(),A3=a("li"),y5e=a("strong"),V$r=o("longformer"),X$r=o(" \u2014 "),VK=a("a"),z$r=o("TFLongformerForSequenceClassification"),W$r=o(" (Longformer model)"),Q$r=l(),L3=a("li"),x5e=a("strong"),H$r=o("mobilebert"),U$r=o(" \u2014 "),XK=a("a"),J$r=o("TFMobileBertForSequenceClassification"),Y$r=o(" (MobileBERT model)"),K$r=l(),y3=a("li"),$5e=a("strong"),Z$r=o("mpnet"),ekr=o(" \u2014 "),zK=a("a"),okr=o("TFMPNetForSequenceClassification"),rkr=o(" (MPNet model)"),tkr=l(),x3=a("li"),k5e=a("strong"),akr=o("openai-gpt"),nkr=o(" \u2014 "),WK=a("a"),skr=o("TFOpenAIGPTForSequenceClassification"),lkr=o(" (OpenAI GPT model)"),ikr=l(),$3=a("li"),S5e=a("strong"),dkr=o("rembert"),ckr=o(" \u2014 "),QK=a("a"),mkr=o("TFRemBertForSequenceClassification"),fkr=o(" (RemBERT model)"),gkr=l(),k3=a("li"),R5e=a("strong"),hkr=o("roberta"),ukr=o(" \u2014 "),HK=a("a"),pkr=o("TFRobertaForSequenceClassification"),_kr=o(" (RoBERTa model)"),bkr=l(),S3=a("li"),P5e=a("strong"),vkr=o("roformer"),Fkr=o(" \u2014 "),UK=a("a"),Tkr=o("TFRoFormerForSequenceClassification"),Mkr=o(" (RoFormer model)"),Ekr=l(),R3=a("li"),B5e=a("strong"),Ckr=o("tapas"),wkr=o(" \u2014 "),JK=a("a"),Akr=o("TFTapasForSequenceClassification"),Lkr=o(" (TAPAS model)"),ykr=l(),P3=a("li"),I5e=a("strong"),xkr=o("transfo-xl"),$kr=o(" \u2014 "),YK=a("a"),kkr=o("TFTransfoXLForSequenceClassification"),Skr=o(" (Transformer-XL model)"),Rkr=l(),B3=a("li"),N5e=a("strong"),Pkr=o("xlm"),Bkr=o(" \u2014 "),KK=a("a"),Ikr=o("TFXLMForSequenceClassification"),Nkr=o(" (XLM model)"),qkr=l(),I3=a("li"),q5e=a("strong"),jkr=o("xlm-roberta"),Dkr=o(" \u2014 "),ZK=a("a"),Gkr=o("TFXLMRobertaForSequenceClassification"),Okr=o(" (XLM-RoBERTa model)"),Vkr=l(),N3=a("li"),j5e=a("strong"),Xkr=o("xlnet"),zkr=o(" \u2014 "),eZ=a("a"),Wkr=o("TFXLNetForSequenceClassification"),Qkr=o(" (XLNet model)"),Hkr=l(),F(q3.$$.fragment),$We=l(),xc=a("h2"),j3=a("a"),D5e=a("span"),F(Ox.$$.fragment),Ukr=l(),G5e=a("span"),Jkr=o("TFAutoModelForMultipleChoice"),kWe=l(),dr=a("div"),F(Vx.$$.fragment),Ykr=l(),$c=a("p"),Kkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oZ=a("a"),Zkr=o("from_pretrained()"),eSr=o(" class method or the "),rZ=a("a"),oSr=o("from_config()"),rSr=o(` class
method.`),tSr=l(),Xx=a("p"),aSr=o("This class cannot be instantiated directly using "),O5e=a("code"),nSr=o("__init__()"),sSr=o(" (throws an error)."),lSr=l(),Dt=a("div"),F(zx.$$.fragment),iSr=l(),V5e=a("p"),dSr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cSr=l(),kc=a("p"),mSr=o(`Note:
Loading a model from its configuration file does `),X5e=a("strong"),fSr=o("not"),gSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=a("a"),hSr=o("from_pretrained()"),uSr=o(" to load the model weights."),pSr=l(),F(D3.$$.fragment),_Sr=l(),Nr=a("div"),F(Wx.$$.fragment),bSr=l(),z5e=a("p"),vSr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),FSr=l(),un=a("p"),TSr=o("The model class to instantiate is selected based on the "),W5e=a("code"),MSr=o("model_type"),ESr=o(` property of the config object (either
passed as an argument or loaded from `),Q5e=a("code"),CSr=o("pretrained_model_name_or_path"),wSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=a("code"),ASr=o("pretrained_model_name_or_path"),LSr=o(":"),ySr=l(),ve=a("ul"),G3=a("li"),U5e=a("strong"),xSr=o("albert"),$Sr=o(" \u2014 "),aZ=a("a"),kSr=o("TFAlbertForMultipleChoice"),SSr=o(" (ALBERT model)"),RSr=l(),O3=a("li"),J5e=a("strong"),PSr=o("bert"),BSr=o(" \u2014 "),nZ=a("a"),ISr=o("TFBertForMultipleChoice"),NSr=o(" (BERT model)"),qSr=l(),V3=a("li"),Y5e=a("strong"),jSr=o("camembert"),DSr=o(" \u2014 "),sZ=a("a"),GSr=o("TFCamembertForMultipleChoice"),OSr=o(" (CamemBERT model)"),VSr=l(),X3=a("li"),K5e=a("strong"),XSr=o("convbert"),zSr=o(" \u2014 "),lZ=a("a"),WSr=o("TFConvBertForMultipleChoice"),QSr=o(" (ConvBERT model)"),HSr=l(),z3=a("li"),Z5e=a("strong"),USr=o("distilbert"),JSr=o(" \u2014 "),iZ=a("a"),YSr=o("TFDistilBertForMultipleChoice"),KSr=o(" (DistilBERT model)"),ZSr=l(),W3=a("li"),e3e=a("strong"),eRr=o("electra"),oRr=o(" \u2014 "),dZ=a("a"),rRr=o("TFElectraForMultipleChoice"),tRr=o(" (ELECTRA model)"),aRr=l(),Q3=a("li"),o3e=a("strong"),nRr=o("flaubert"),sRr=o(" \u2014 "),cZ=a("a"),lRr=o("TFFlaubertForMultipleChoice"),iRr=o(" (FlauBERT model)"),dRr=l(),H3=a("li"),r3e=a("strong"),cRr=o("funnel"),mRr=o(" \u2014 "),mZ=a("a"),fRr=o("TFFunnelForMultipleChoice"),gRr=o(" (Funnel Transformer model)"),hRr=l(),U3=a("li"),t3e=a("strong"),uRr=o("longformer"),pRr=o(" \u2014 "),fZ=a("a"),_Rr=o("TFLongformerForMultipleChoice"),bRr=o(" (Longformer model)"),vRr=l(),J3=a("li"),a3e=a("strong"),FRr=o("mobilebert"),TRr=o(" \u2014 "),gZ=a("a"),MRr=o("TFMobileBertForMultipleChoice"),ERr=o(" (MobileBERT model)"),CRr=l(),Y3=a("li"),n3e=a("strong"),wRr=o("mpnet"),ARr=o(" \u2014 "),hZ=a("a"),LRr=o("TFMPNetForMultipleChoice"),yRr=o(" (MPNet model)"),xRr=l(),K3=a("li"),s3e=a("strong"),$Rr=o("rembert"),kRr=o(" \u2014 "),uZ=a("a"),SRr=o("TFRemBertForMultipleChoice"),RRr=o(" (RemBERT model)"),PRr=l(),Z3=a("li"),l3e=a("strong"),BRr=o("roberta"),IRr=o(" \u2014 "),pZ=a("a"),NRr=o("TFRobertaForMultipleChoice"),qRr=o(" (RoBERTa model)"),jRr=l(),e0=a("li"),i3e=a("strong"),DRr=o("roformer"),GRr=o(" \u2014 "),_Z=a("a"),ORr=o("TFRoFormerForMultipleChoice"),VRr=o(" (RoFormer model)"),XRr=l(),o0=a("li"),d3e=a("strong"),zRr=o("xlm"),WRr=o(" \u2014 "),bZ=a("a"),QRr=o("TFXLMForMultipleChoice"),HRr=o(" (XLM model)"),URr=l(),r0=a("li"),c3e=a("strong"),JRr=o("xlm-roberta"),YRr=o(" \u2014 "),vZ=a("a"),KRr=o("TFXLMRobertaForMultipleChoice"),ZRr=o(" (XLM-RoBERTa model)"),ePr=l(),t0=a("li"),m3e=a("strong"),oPr=o("xlnet"),rPr=o(" \u2014 "),FZ=a("a"),tPr=o("TFXLNetForMultipleChoice"),aPr=o(" (XLNet model)"),nPr=l(),F(a0.$$.fragment),SWe=l(),Sc=a("h2"),n0=a("a"),f3e=a("span"),F(Qx.$$.fragment),sPr=l(),g3e=a("span"),lPr=o("TFAutoModelForNextSentencePrediction"),RWe=l(),cr=a("div"),F(Hx.$$.fragment),iPr=l(),Rc=a("p"),dPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),TZ=a("a"),cPr=o("from_pretrained()"),mPr=o(" class method or the "),MZ=a("a"),fPr=o("from_config()"),gPr=o(` class
method.`),hPr=l(),Ux=a("p"),uPr=o("This class cannot be instantiated directly using "),h3e=a("code"),pPr=o("__init__()"),_Pr=o(" (throws an error)."),bPr=l(),Gt=a("div"),F(Jx.$$.fragment),vPr=l(),u3e=a("p"),FPr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),TPr=l(),Pc=a("p"),MPr=o(`Note:
Loading a model from its configuration file does `),p3e=a("strong"),EPr=o("not"),CPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=a("a"),wPr=o("from_pretrained()"),APr=o(" to load the model weights."),LPr=l(),F(s0.$$.fragment),yPr=l(),qr=a("div"),F(Yx.$$.fragment),xPr=l(),_3e=a("p"),$Pr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kPr=l(),pn=a("p"),SPr=o("The model class to instantiate is selected based on the "),b3e=a("code"),RPr=o("model_type"),PPr=o(` property of the config object (either
passed as an argument or loaded from `),v3e=a("code"),BPr=o("pretrained_model_name_or_path"),IPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F3e=a("code"),NPr=o("pretrained_model_name_or_path"),qPr=o(":"),jPr=l(),Kx=a("ul"),l0=a("li"),T3e=a("strong"),DPr=o("bert"),GPr=o(" \u2014 "),CZ=a("a"),OPr=o("TFBertForNextSentencePrediction"),VPr=o(" (BERT model)"),XPr=l(),i0=a("li"),M3e=a("strong"),zPr=o("mobilebert"),WPr=o(" \u2014 "),wZ=a("a"),QPr=o("TFMobileBertForNextSentencePrediction"),HPr=o(" (MobileBERT model)"),UPr=l(),F(d0.$$.fragment),PWe=l(),Bc=a("h2"),c0=a("a"),E3e=a("span"),F(Zx.$$.fragment),JPr=l(),C3e=a("span"),YPr=o("TFAutoModelForTableQuestionAnswering"),BWe=l(),mr=a("div"),F(e$.$$.fragment),KPr=l(),Ic=a("p"),ZPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AZ=a("a"),eBr=o("from_pretrained()"),oBr=o(" class method or the "),LZ=a("a"),rBr=o("from_config()"),tBr=o(` class
method.`),aBr=l(),o$=a("p"),nBr=o("This class cannot be instantiated directly using "),w3e=a("code"),sBr=o("__init__()"),lBr=o(" (throws an error)."),iBr=l(),Ot=a("div"),F(r$.$$.fragment),dBr=l(),A3e=a("p"),cBr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),mBr=l(),Nc=a("p"),fBr=o(`Note:
Loading a model from its configuration file does `),L3e=a("strong"),gBr=o("not"),hBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=a("a"),uBr=o("from_pretrained()"),pBr=o(" to load the model weights."),_Br=l(),F(m0.$$.fragment),bBr=l(),jr=a("div"),F(t$.$$.fragment),vBr=l(),y3e=a("p"),FBr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),TBr=l(),_n=a("p"),MBr=o("The model class to instantiate is selected based on the "),x3e=a("code"),EBr=o("model_type"),CBr=o(` property of the config object (either
passed as an argument or loaded from `),$3e=a("code"),wBr=o("pretrained_model_name_or_path"),ABr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k3e=a("code"),LBr=o("pretrained_model_name_or_path"),yBr=o(":"),xBr=l(),S3e=a("ul"),f0=a("li"),R3e=a("strong"),$Br=o("tapas"),kBr=o(" \u2014 "),xZ=a("a"),SBr=o("TFTapasForQuestionAnswering"),RBr=o(" (TAPAS model)"),PBr=l(),F(g0.$$.fragment),IWe=l(),qc=a("h2"),h0=a("a"),P3e=a("span"),F(a$.$$.fragment),BBr=l(),B3e=a("span"),IBr=o("TFAutoModelForTokenClassification"),NWe=l(),fr=a("div"),F(n$.$$.fragment),NBr=l(),jc=a("p"),qBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$Z=a("a"),jBr=o("from_pretrained()"),DBr=o(" class method or the "),kZ=a("a"),GBr=o("from_config()"),OBr=o(` class
method.`),VBr=l(),s$=a("p"),XBr=o("This class cannot be instantiated directly using "),I3e=a("code"),zBr=o("__init__()"),WBr=o(" (throws an error)."),QBr=l(),Vt=a("div"),F(l$.$$.fragment),HBr=l(),N3e=a("p"),UBr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JBr=l(),Dc=a("p"),YBr=o(`Note:
Loading a model from its configuration file does `),q3e=a("strong"),KBr=o("not"),ZBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=a("a"),eIr=o("from_pretrained()"),oIr=o(" to load the model weights."),rIr=l(),F(u0.$$.fragment),tIr=l(),Dr=a("div"),F(i$.$$.fragment),aIr=l(),j3e=a("p"),nIr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sIr=l(),bn=a("p"),lIr=o("The model class to instantiate is selected based on the "),D3e=a("code"),iIr=o("model_type"),dIr=o(` property of the config object (either
passed as an argument or loaded from `),G3e=a("code"),cIr=o("pretrained_model_name_or_path"),mIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O3e=a("code"),fIr=o("pretrained_model_name_or_path"),gIr=o(":"),hIr=l(),de=a("ul"),p0=a("li"),V3e=a("strong"),uIr=o("albert"),pIr=o(" \u2014 "),RZ=a("a"),_Ir=o("TFAlbertForTokenClassification"),bIr=o(" (ALBERT model)"),vIr=l(),_0=a("li"),X3e=a("strong"),FIr=o("bert"),TIr=o(" \u2014 "),PZ=a("a"),MIr=o("TFBertForTokenClassification"),EIr=o(" (BERT model)"),CIr=l(),b0=a("li"),z3e=a("strong"),wIr=o("camembert"),AIr=o(" \u2014 "),BZ=a("a"),LIr=o("TFCamembertForTokenClassification"),yIr=o(" (CamemBERT model)"),xIr=l(),v0=a("li"),W3e=a("strong"),$Ir=o("convbert"),kIr=o(" \u2014 "),IZ=a("a"),SIr=o("TFConvBertForTokenClassification"),RIr=o(" (ConvBERT model)"),PIr=l(),F0=a("li"),Q3e=a("strong"),BIr=o("deberta"),IIr=o(" \u2014 "),NZ=a("a"),NIr=o("TFDebertaForTokenClassification"),qIr=o(" (DeBERTa model)"),jIr=l(),T0=a("li"),H3e=a("strong"),DIr=o("deberta-v2"),GIr=o(" \u2014 "),qZ=a("a"),OIr=o("TFDebertaV2ForTokenClassification"),VIr=o(" (DeBERTa-v2 model)"),XIr=l(),M0=a("li"),U3e=a("strong"),zIr=o("distilbert"),WIr=o(" \u2014 "),jZ=a("a"),QIr=o("TFDistilBertForTokenClassification"),HIr=o(" (DistilBERT model)"),UIr=l(),E0=a("li"),J3e=a("strong"),JIr=o("electra"),YIr=o(" \u2014 "),DZ=a("a"),KIr=o("TFElectraForTokenClassification"),ZIr=o(" (ELECTRA model)"),eNr=l(),C0=a("li"),Y3e=a("strong"),oNr=o("flaubert"),rNr=o(" \u2014 "),GZ=a("a"),tNr=o("TFFlaubertForTokenClassification"),aNr=o(" (FlauBERT model)"),nNr=l(),w0=a("li"),K3e=a("strong"),sNr=o("funnel"),lNr=o(" \u2014 "),OZ=a("a"),iNr=o("TFFunnelForTokenClassification"),dNr=o(" (Funnel Transformer model)"),cNr=l(),A0=a("li"),Z3e=a("strong"),mNr=o("layoutlm"),fNr=o(" \u2014 "),VZ=a("a"),gNr=o("TFLayoutLMForTokenClassification"),hNr=o(" (LayoutLM model)"),uNr=l(),L0=a("li"),e0e=a("strong"),pNr=o("longformer"),_Nr=o(" \u2014 "),XZ=a("a"),bNr=o("TFLongformerForTokenClassification"),vNr=o(" (Longformer model)"),FNr=l(),y0=a("li"),o0e=a("strong"),TNr=o("mobilebert"),MNr=o(" \u2014 "),zZ=a("a"),ENr=o("TFMobileBertForTokenClassification"),CNr=o(" (MobileBERT model)"),wNr=l(),x0=a("li"),r0e=a("strong"),ANr=o("mpnet"),LNr=o(" \u2014 "),WZ=a("a"),yNr=o("TFMPNetForTokenClassification"),xNr=o(" (MPNet model)"),$Nr=l(),$0=a("li"),t0e=a("strong"),kNr=o("rembert"),SNr=o(" \u2014 "),QZ=a("a"),RNr=o("TFRemBertForTokenClassification"),PNr=o(" (RemBERT model)"),BNr=l(),k0=a("li"),a0e=a("strong"),INr=o("roberta"),NNr=o(" \u2014 "),HZ=a("a"),qNr=o("TFRobertaForTokenClassification"),jNr=o(" (RoBERTa model)"),DNr=l(),S0=a("li"),n0e=a("strong"),GNr=o("roformer"),ONr=o(" \u2014 "),UZ=a("a"),VNr=o("TFRoFormerForTokenClassification"),XNr=o(" (RoFormer model)"),zNr=l(),R0=a("li"),s0e=a("strong"),WNr=o("xlm"),QNr=o(" \u2014 "),JZ=a("a"),HNr=o("TFXLMForTokenClassification"),UNr=o(" (XLM model)"),JNr=l(),P0=a("li"),l0e=a("strong"),YNr=o("xlm-roberta"),KNr=o(" \u2014 "),YZ=a("a"),ZNr=o("TFXLMRobertaForTokenClassification"),eqr=o(" (XLM-RoBERTa model)"),oqr=l(),B0=a("li"),i0e=a("strong"),rqr=o("xlnet"),tqr=o(" \u2014 "),KZ=a("a"),aqr=o("TFXLNetForTokenClassification"),nqr=o(" (XLNet model)"),sqr=l(),F(I0.$$.fragment),qWe=l(),Gc=a("h2"),N0=a("a"),d0e=a("span"),F(d$.$$.fragment),lqr=l(),c0e=a("span"),iqr=o("TFAutoModelForQuestionAnswering"),jWe=l(),gr=a("div"),F(c$.$$.fragment),dqr=l(),Oc=a("p"),cqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ZZ=a("a"),mqr=o("from_pretrained()"),fqr=o(" class method or the "),eee=a("a"),gqr=o("from_config()"),hqr=o(` class
method.`),uqr=l(),m$=a("p"),pqr=o("This class cannot be instantiated directly using "),m0e=a("code"),_qr=o("__init__()"),bqr=o(" (throws an error)."),vqr=l(),Xt=a("div"),F(f$.$$.fragment),Fqr=l(),f0e=a("p"),Tqr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Mqr=l(),Vc=a("p"),Eqr=o(`Note:
Loading a model from its configuration file does `),g0e=a("strong"),Cqr=o("not"),wqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=a("a"),Aqr=o("from_pretrained()"),Lqr=o(" to load the model weights."),yqr=l(),F(q0.$$.fragment),xqr=l(),Gr=a("div"),F(g$.$$.fragment),$qr=l(),h0e=a("p"),kqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Sqr=l(),vn=a("p"),Rqr=o("The model class to instantiate is selected based on the "),u0e=a("code"),Pqr=o("model_type"),Bqr=o(` property of the config object (either
passed as an argument or loaded from `),p0e=a("code"),Iqr=o("pretrained_model_name_or_path"),Nqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_0e=a("code"),qqr=o("pretrained_model_name_or_path"),jqr=o(":"),Dqr=l(),ce=a("ul"),j0=a("li"),b0e=a("strong"),Gqr=o("albert"),Oqr=o(" \u2014 "),ree=a("a"),Vqr=o("TFAlbertForQuestionAnswering"),Xqr=o(" (ALBERT model)"),zqr=l(),D0=a("li"),v0e=a("strong"),Wqr=o("bert"),Qqr=o(" \u2014 "),tee=a("a"),Hqr=o("TFBertForQuestionAnswering"),Uqr=o(" (BERT model)"),Jqr=l(),G0=a("li"),F0e=a("strong"),Yqr=o("camembert"),Kqr=o(" \u2014 "),aee=a("a"),Zqr=o("TFCamembertForQuestionAnswering"),ejr=o(" (CamemBERT model)"),ojr=l(),O0=a("li"),T0e=a("strong"),rjr=o("convbert"),tjr=o(" \u2014 "),nee=a("a"),ajr=o("TFConvBertForQuestionAnswering"),njr=o(" (ConvBERT model)"),sjr=l(),V0=a("li"),M0e=a("strong"),ljr=o("deberta"),ijr=o(" \u2014 "),see=a("a"),djr=o("TFDebertaForQuestionAnswering"),cjr=o(" (DeBERTa model)"),mjr=l(),X0=a("li"),E0e=a("strong"),fjr=o("deberta-v2"),gjr=o(" \u2014 "),lee=a("a"),hjr=o("TFDebertaV2ForQuestionAnswering"),ujr=o(" (DeBERTa-v2 model)"),pjr=l(),z0=a("li"),C0e=a("strong"),_jr=o("distilbert"),bjr=o(" \u2014 "),iee=a("a"),vjr=o("TFDistilBertForQuestionAnswering"),Fjr=o(" (DistilBERT model)"),Tjr=l(),W0=a("li"),w0e=a("strong"),Mjr=o("electra"),Ejr=o(" \u2014 "),dee=a("a"),Cjr=o("TFElectraForQuestionAnswering"),wjr=o(" (ELECTRA model)"),Ajr=l(),Q0=a("li"),A0e=a("strong"),Ljr=o("flaubert"),yjr=o(" \u2014 "),cee=a("a"),xjr=o("TFFlaubertForQuestionAnsweringSimple"),$jr=o(" (FlauBERT model)"),kjr=l(),H0=a("li"),L0e=a("strong"),Sjr=o("funnel"),Rjr=o(" \u2014 "),mee=a("a"),Pjr=o("TFFunnelForQuestionAnswering"),Bjr=o(" (Funnel Transformer model)"),Ijr=l(),U0=a("li"),y0e=a("strong"),Njr=o("gptj"),qjr=o(" \u2014 "),fee=a("a"),jjr=o("TFGPTJForQuestionAnswering"),Djr=o(" (GPT-J model)"),Gjr=l(),J0=a("li"),x0e=a("strong"),Ojr=o("longformer"),Vjr=o(" \u2014 "),gee=a("a"),Xjr=o("TFLongformerForQuestionAnswering"),zjr=o(" (Longformer model)"),Wjr=l(),Y0=a("li"),$0e=a("strong"),Qjr=o("mobilebert"),Hjr=o(" \u2014 "),hee=a("a"),Ujr=o("TFMobileBertForQuestionAnswering"),Jjr=o(" (MobileBERT model)"),Yjr=l(),K0=a("li"),k0e=a("strong"),Kjr=o("mpnet"),Zjr=o(" \u2014 "),uee=a("a"),eDr=o("TFMPNetForQuestionAnswering"),oDr=o(" (MPNet model)"),rDr=l(),Z0=a("li"),S0e=a("strong"),tDr=o("rembert"),aDr=o(" \u2014 "),pee=a("a"),nDr=o("TFRemBertForQuestionAnswering"),sDr=o(" (RemBERT model)"),lDr=l(),ew=a("li"),R0e=a("strong"),iDr=o("roberta"),dDr=o(" \u2014 "),_ee=a("a"),cDr=o("TFRobertaForQuestionAnswering"),mDr=o(" (RoBERTa model)"),fDr=l(),ow=a("li"),P0e=a("strong"),gDr=o("roformer"),hDr=o(" \u2014 "),bee=a("a"),uDr=o("TFRoFormerForQuestionAnswering"),pDr=o(" (RoFormer model)"),_Dr=l(),rw=a("li"),B0e=a("strong"),bDr=o("xlm"),vDr=o(" \u2014 "),vee=a("a"),FDr=o("TFXLMForQuestionAnsweringSimple"),TDr=o(" (XLM model)"),MDr=l(),tw=a("li"),I0e=a("strong"),EDr=o("xlm-roberta"),CDr=o(" \u2014 "),Fee=a("a"),wDr=o("TFXLMRobertaForQuestionAnswering"),ADr=o(" (XLM-RoBERTa model)"),LDr=l(),aw=a("li"),N0e=a("strong"),yDr=o("xlnet"),xDr=o(" \u2014 "),Tee=a("a"),$Dr=o("TFXLNetForQuestionAnsweringSimple"),kDr=o(" (XLNet model)"),SDr=l(),F(nw.$$.fragment),DWe=l(),Xc=a("h2"),sw=a("a"),q0e=a("span"),F(h$.$$.fragment),RDr=l(),j0e=a("span"),PDr=o("TFAutoModelForVision2Seq"),GWe=l(),hr=a("div"),F(u$.$$.fragment),BDr=l(),zc=a("p"),IDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Mee=a("a"),NDr=o("from_pretrained()"),qDr=o(" class method or the "),Eee=a("a"),jDr=o("from_config()"),DDr=o(` class
method.`),GDr=l(),p$=a("p"),ODr=o("This class cannot be instantiated directly using "),D0e=a("code"),VDr=o("__init__()"),XDr=o(" (throws an error)."),zDr=l(),zt=a("div"),F(_$.$$.fragment),WDr=l(),G0e=a("p"),QDr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),HDr=l(),Wc=a("p"),UDr=o(`Note:
Loading a model from its configuration file does `),O0e=a("strong"),JDr=o("not"),YDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cee=a("a"),KDr=o("from_pretrained()"),ZDr=o(" to load the model weights."),eGr=l(),F(lw.$$.fragment),oGr=l(),Or=a("div"),F(b$.$$.fragment),rGr=l(),V0e=a("p"),tGr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),aGr=l(),Fn=a("p"),nGr=o("The model class to instantiate is selected based on the "),X0e=a("code"),sGr=o("model_type"),lGr=o(` property of the config object (either
passed as an argument or loaded from `),z0e=a("code"),iGr=o("pretrained_model_name_or_path"),dGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W0e=a("code"),cGr=o("pretrained_model_name_or_path"),mGr=o(":"),fGr=l(),Q0e=a("ul"),iw=a("li"),H0e=a("strong"),gGr=o("vision-encoder-decoder"),hGr=o(" \u2014 "),wee=a("a"),uGr=o("TFVisionEncoderDecoderModel"),pGr=o(" (Vision Encoder decoder model)"),_Gr=l(),F(dw.$$.fragment),OWe=l(),Qc=a("h2"),cw=a("a"),U0e=a("span"),F(v$.$$.fragment),bGr=l(),J0e=a("span"),vGr=o("TFAutoModelForSpeechSeq2Seq"),VWe=l(),ur=a("div"),F(F$.$$.fragment),FGr=l(),Hc=a("p"),TGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Aee=a("a"),MGr=o("from_pretrained()"),EGr=o(" class method or the "),Lee=a("a"),CGr=o("from_config()"),wGr=o(` class
method.`),AGr=l(),T$=a("p"),LGr=o("This class cannot be instantiated directly using "),Y0e=a("code"),yGr=o("__init__()"),xGr=o(" (throws an error)."),$Gr=l(),Wt=a("div"),F(M$.$$.fragment),kGr=l(),K0e=a("p"),SGr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),RGr=l(),Uc=a("p"),PGr=o(`Note:
Loading a model from its configuration file does `),Z0e=a("strong"),BGr=o("not"),IGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yee=a("a"),NGr=o("from_pretrained()"),qGr=o(" to load the model weights."),jGr=l(),F(mw.$$.fragment),DGr=l(),Vr=a("div"),F(E$.$$.fragment),GGr=l(),ewe=a("p"),OGr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),VGr=l(),Tn=a("p"),XGr=o("The model class to instantiate is selected based on the "),owe=a("code"),zGr=o("model_type"),WGr=o(` property of the config object (either
passed as an argument or loaded from `),rwe=a("code"),QGr=o("pretrained_model_name_or_path"),HGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),twe=a("code"),UGr=o("pretrained_model_name_or_path"),JGr=o(":"),YGr=l(),awe=a("ul"),fw=a("li"),nwe=a("strong"),KGr=o("speech_to_text"),ZGr=o(" \u2014 "),xee=a("a"),eOr=o("TFSpeech2TextForConditionalGeneration"),oOr=o(" (Speech2Text model)"),rOr=l(),F(gw.$$.fragment),XWe=l(),Jc=a("h2"),hw=a("a"),swe=a("span"),F(C$.$$.fragment),tOr=l(),lwe=a("span"),aOr=o("FlaxAutoModel"),zWe=l(),pr=a("div"),F(w$.$$.fragment),nOr=l(),Yc=a("p"),sOr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$ee=a("a"),lOr=o("from_pretrained()"),iOr=o(" class method or the "),kee=a("a"),dOr=o("from_config()"),cOr=o(` class
method.`),mOr=l(),A$=a("p"),fOr=o("This class cannot be instantiated directly using "),iwe=a("code"),gOr=o("__init__()"),hOr=o(" (throws an error)."),uOr=l(),Qt=a("div"),F(L$.$$.fragment),pOr=l(),dwe=a("p"),_Or=o("Instantiates one of the base model classes of the library from a configuration."),bOr=l(),Kc=a("p"),vOr=o(`Note:
Loading a model from its configuration file does `),cwe=a("strong"),FOr=o("not"),TOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),See=a("a"),MOr=o("from_pretrained()"),EOr=o(" to load the model weights."),COr=l(),F(uw.$$.fragment),wOr=l(),Xr=a("div"),F(y$.$$.fragment),AOr=l(),mwe=a("p"),LOr=o("Instantiate one of the base model classes of the library from a pretrained model."),yOr=l(),Mn=a("p"),xOr=o("The model class to instantiate is selected based on the "),fwe=a("code"),$Or=o("model_type"),kOr=o(` property of the config object (either
passed as an argument or loaded from `),gwe=a("code"),SOr=o("pretrained_model_name_or_path"),ROr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hwe=a("code"),POr=o("pretrained_model_name_or_path"),BOr=o(":"),IOr=l(),oe=a("ul"),pw=a("li"),uwe=a("strong"),NOr=o("albert"),qOr=o(" \u2014 "),Ree=a("a"),jOr=o("FlaxAlbertModel"),DOr=o(" (ALBERT model)"),GOr=l(),_w=a("li"),pwe=a("strong"),OOr=o("bart"),VOr=o(" \u2014 "),Pee=a("a"),XOr=o("FlaxBartModel"),zOr=o(" (BART model)"),WOr=l(),bw=a("li"),_we=a("strong"),QOr=o("beit"),HOr=o(" \u2014 "),Bee=a("a"),UOr=o("FlaxBeitModel"),JOr=o(" (BEiT model)"),YOr=l(),vw=a("li"),bwe=a("strong"),KOr=o("bert"),ZOr=o(" \u2014 "),Iee=a("a"),eVr=o("FlaxBertModel"),oVr=o(" (BERT model)"),rVr=l(),Fw=a("li"),vwe=a("strong"),tVr=o("big_bird"),aVr=o(" \u2014 "),Nee=a("a"),nVr=o("FlaxBigBirdModel"),sVr=o(" (BigBird model)"),lVr=l(),Tw=a("li"),Fwe=a("strong"),iVr=o("blenderbot"),dVr=o(" \u2014 "),qee=a("a"),cVr=o("FlaxBlenderbotModel"),mVr=o(" (Blenderbot model)"),fVr=l(),Mw=a("li"),Twe=a("strong"),gVr=o("blenderbot-small"),hVr=o(" \u2014 "),jee=a("a"),uVr=o("FlaxBlenderbotSmallModel"),pVr=o(" (BlenderbotSmall model)"),_Vr=l(),Ew=a("li"),Mwe=a("strong"),bVr=o("clip"),vVr=o(" \u2014 "),Dee=a("a"),FVr=o("FlaxCLIPModel"),TVr=o(" (CLIP model)"),MVr=l(),Cw=a("li"),Ewe=a("strong"),EVr=o("distilbert"),CVr=o(" \u2014 "),Gee=a("a"),wVr=o("FlaxDistilBertModel"),AVr=o(" (DistilBERT model)"),LVr=l(),ww=a("li"),Cwe=a("strong"),yVr=o("electra"),xVr=o(" \u2014 "),Oee=a("a"),$Vr=o("FlaxElectraModel"),kVr=o(" (ELECTRA model)"),SVr=l(),Aw=a("li"),wwe=a("strong"),RVr=o("gpt2"),PVr=o(" \u2014 "),Vee=a("a"),BVr=o("FlaxGPT2Model"),IVr=o(" (OpenAI GPT-2 model)"),NVr=l(),Lw=a("li"),Awe=a("strong"),qVr=o("gpt_neo"),jVr=o(" \u2014 "),Xee=a("a"),DVr=o("FlaxGPTNeoModel"),GVr=o(" (GPT Neo model)"),OVr=l(),yw=a("li"),Lwe=a("strong"),VVr=o("gptj"),XVr=o(" \u2014 "),zee=a("a"),zVr=o("FlaxGPTJModel"),WVr=o(" (GPT-J model)"),QVr=l(),xw=a("li"),ywe=a("strong"),HVr=o("longt5"),UVr=o(" \u2014 "),Wee=a("a"),JVr=o("FlaxLongT5Model"),YVr=o(" (LongT5 model)"),KVr=l(),$w=a("li"),xwe=a("strong"),ZVr=o("marian"),eXr=o(" \u2014 "),Qee=a("a"),oXr=o("FlaxMarianModel"),rXr=o(" (Marian model)"),tXr=l(),kw=a("li"),$we=a("strong"),aXr=o("mbart"),nXr=o(" \u2014 "),Hee=a("a"),sXr=o("FlaxMBartModel"),lXr=o(" (mBART model)"),iXr=l(),Sw=a("li"),kwe=a("strong"),dXr=o("mt5"),cXr=o(" \u2014 "),Uee=a("a"),mXr=o("FlaxMT5Model"),fXr=o(" (MT5 model)"),gXr=l(),Rw=a("li"),Swe=a("strong"),hXr=o("opt"),uXr=o(" \u2014 "),Jee=a("a"),pXr=o("FlaxOPTModel"),_Xr=o(" (OPT model)"),bXr=l(),Pw=a("li"),Rwe=a("strong"),vXr=o("pegasus"),FXr=o(" \u2014 "),Yee=a("a"),TXr=o("FlaxPegasusModel"),MXr=o(" (Pegasus model)"),EXr=l(),Bw=a("li"),Pwe=a("strong"),CXr=o("roberta"),wXr=o(" \u2014 "),Kee=a("a"),AXr=o("FlaxRobertaModel"),LXr=o(" (RoBERTa model)"),yXr=l(),Iw=a("li"),Bwe=a("strong"),xXr=o("roformer"),$Xr=o(" \u2014 "),Zee=a("a"),kXr=o("FlaxRoFormerModel"),SXr=o(" (RoFormer model)"),RXr=l(),Nw=a("li"),Iwe=a("strong"),PXr=o("t5"),BXr=o(" \u2014 "),eoe=a("a"),IXr=o("FlaxT5Model"),NXr=o(" (T5 model)"),qXr=l(),qw=a("li"),Nwe=a("strong"),jXr=o("vision-text-dual-encoder"),DXr=o(" \u2014 "),ooe=a("a"),GXr=o("FlaxVisionTextDualEncoderModel"),OXr=o(" (VisionTextDualEncoder model)"),VXr=l(),jw=a("li"),qwe=a("strong"),XXr=o("vit"),zXr=o(" \u2014 "),roe=a("a"),WXr=o("FlaxViTModel"),QXr=o(" (ViT model)"),HXr=l(),Dw=a("li"),jwe=a("strong"),UXr=o("wav2vec2"),JXr=o(" \u2014 "),toe=a("a"),YXr=o("FlaxWav2Vec2Model"),KXr=o(" (Wav2Vec2 model)"),ZXr=l(),Gw=a("li"),Dwe=a("strong"),ezr=o("xglm"),ozr=o(" \u2014 "),aoe=a("a"),rzr=o("FlaxXGLMModel"),tzr=o(" (XGLM model)"),azr=l(),Ow=a("li"),Gwe=a("strong"),nzr=o("xlm-roberta"),szr=o(" \u2014 "),noe=a("a"),lzr=o("FlaxXLMRobertaModel"),izr=o(" (XLM-RoBERTa model)"),dzr=l(),F(Vw.$$.fragment),WWe=l(),Zc=a("h2"),Xw=a("a"),Owe=a("span"),F(x$.$$.fragment),czr=l(),Vwe=a("span"),mzr=o("FlaxAutoModelForCausalLM"),QWe=l(),_r=a("div"),F($$.$$.fragment),fzr=l(),em=a("p"),gzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),soe=a("a"),hzr=o("from_pretrained()"),uzr=o(" class method or the "),loe=a("a"),pzr=o("from_config()"),_zr=o(` class
method.`),bzr=l(),k$=a("p"),vzr=o("This class cannot be instantiated directly using "),Xwe=a("code"),Fzr=o("__init__()"),Tzr=o(" (throws an error)."),Mzr=l(),Ht=a("div"),F(S$.$$.fragment),Ezr=l(),zwe=a("p"),Czr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wzr=l(),om=a("p"),Azr=o(`Note:
Loading a model from its configuration file does `),Wwe=a("strong"),Lzr=o("not"),yzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ioe=a("a"),xzr=o("from_pretrained()"),$zr=o(" to load the model weights."),kzr=l(),F(zw.$$.fragment),Szr=l(),zr=a("div"),F(R$.$$.fragment),Rzr=l(),Qwe=a("p"),Pzr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Bzr=l(),En=a("p"),Izr=o("The model class to instantiate is selected based on the "),Hwe=a("code"),Nzr=o("model_type"),qzr=o(` property of the config object (either
passed as an argument or loaded from `),Uwe=a("code"),jzr=o("pretrained_model_name_or_path"),Dzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jwe=a("code"),Gzr=o("pretrained_model_name_or_path"),Ozr=o(":"),Vzr=l(),xe=a("ul"),Ww=a("li"),Ywe=a("strong"),Xzr=o("bart"),zzr=o(" \u2014 "),doe=a("a"),Wzr=o("FlaxBartForCausalLM"),Qzr=o(" (BART model)"),Hzr=l(),Qw=a("li"),Kwe=a("strong"),Uzr=o("bert"),Jzr=o(" \u2014 "),coe=a("a"),Yzr=o("FlaxBertForCausalLM"),Kzr=o(" (BERT model)"),Zzr=l(),Hw=a("li"),Zwe=a("strong"),eWr=o("big_bird"),oWr=o(" \u2014 "),moe=a("a"),rWr=o("FlaxBigBirdForCausalLM"),tWr=o(" (BigBird model)"),aWr=l(),Uw=a("li"),eAe=a("strong"),nWr=o("electra"),sWr=o(" \u2014 "),foe=a("a"),lWr=o("FlaxElectraForCausalLM"),iWr=o(" (ELECTRA model)"),dWr=l(),Jw=a("li"),oAe=a("strong"),cWr=o("gpt2"),mWr=o(" \u2014 "),goe=a("a"),fWr=o("FlaxGPT2LMHeadModel"),gWr=o(" (OpenAI GPT-2 model)"),hWr=l(),Yw=a("li"),rAe=a("strong"),uWr=o("gpt_neo"),pWr=o(" \u2014 "),hoe=a("a"),_Wr=o("FlaxGPTNeoForCausalLM"),bWr=o(" (GPT Neo model)"),vWr=l(),Kw=a("li"),tAe=a("strong"),FWr=o("gptj"),TWr=o(" \u2014 "),uoe=a("a"),MWr=o("FlaxGPTJForCausalLM"),EWr=o(" (GPT-J model)"),CWr=l(),Zw=a("li"),aAe=a("strong"),wWr=o("opt"),AWr=o(" \u2014 "),poe=a("a"),LWr=o("FlaxOPTForCausalLM"),yWr=o(" (OPT model)"),xWr=l(),eA=a("li"),nAe=a("strong"),$Wr=o("roberta"),kWr=o(" \u2014 "),_oe=a("a"),SWr=o("FlaxRobertaForCausalLM"),RWr=o(" (RoBERTa model)"),PWr=l(),oA=a("li"),sAe=a("strong"),BWr=o("xglm"),IWr=o(" \u2014 "),boe=a("a"),NWr=o("FlaxXGLMForCausalLM"),qWr=o(" (XGLM model)"),jWr=l(),F(rA.$$.fragment),HWe=l(),rm=a("h2"),tA=a("a"),lAe=a("span"),F(P$.$$.fragment),DWr=l(),iAe=a("span"),GWr=o("FlaxAutoModelForPreTraining"),UWe=l(),br=a("div"),F(B$.$$.fragment),OWr=l(),tm=a("p"),VWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),voe=a("a"),XWr=o("from_pretrained()"),zWr=o(" class method or the "),Foe=a("a"),WWr=o("from_config()"),QWr=o(` class
method.`),HWr=l(),I$=a("p"),UWr=o("This class cannot be instantiated directly using "),dAe=a("code"),JWr=o("__init__()"),YWr=o(" (throws an error)."),KWr=l(),Ut=a("div"),F(N$.$$.fragment),ZWr=l(),cAe=a("p"),eQr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),oQr=l(),am=a("p"),rQr=o(`Note:
Loading a model from its configuration file does `),mAe=a("strong"),tQr=o("not"),aQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Toe=a("a"),nQr=o("from_pretrained()"),sQr=o(" to load the model weights."),lQr=l(),F(aA.$$.fragment),iQr=l(),Wr=a("div"),F(q$.$$.fragment),dQr=l(),fAe=a("p"),cQr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mQr=l(),Cn=a("p"),fQr=o("The model class to instantiate is selected based on the "),gAe=a("code"),gQr=o("model_type"),hQr=o(` property of the config object (either
passed as an argument or loaded from `),hAe=a("code"),uQr=o("pretrained_model_name_or_path"),pQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uAe=a("code"),_Qr=o("pretrained_model_name_or_path"),bQr=o(":"),vQr=l(),Ee=a("ul"),nA=a("li"),pAe=a("strong"),FQr=o("albert"),TQr=o(" \u2014 "),Moe=a("a"),MQr=o("FlaxAlbertForPreTraining"),EQr=o(" (ALBERT model)"),CQr=l(),sA=a("li"),_Ae=a("strong"),wQr=o("bart"),AQr=o(" \u2014 "),Eoe=a("a"),LQr=o("FlaxBartForConditionalGeneration"),yQr=o(" (BART model)"),xQr=l(),lA=a("li"),bAe=a("strong"),$Qr=o("bert"),kQr=o(" \u2014 "),Coe=a("a"),SQr=o("FlaxBertForPreTraining"),RQr=o(" (BERT model)"),PQr=l(),iA=a("li"),vAe=a("strong"),BQr=o("big_bird"),IQr=o(" \u2014 "),woe=a("a"),NQr=o("FlaxBigBirdForPreTraining"),qQr=o(" (BigBird model)"),jQr=l(),dA=a("li"),FAe=a("strong"),DQr=o("electra"),GQr=o(" \u2014 "),Aoe=a("a"),OQr=o("FlaxElectraForPreTraining"),VQr=o(" (ELECTRA model)"),XQr=l(),cA=a("li"),TAe=a("strong"),zQr=o("longt5"),WQr=o(" \u2014 "),Loe=a("a"),QQr=o("FlaxLongT5ForConditionalGeneration"),HQr=o(" (LongT5 model)"),UQr=l(),mA=a("li"),MAe=a("strong"),JQr=o("mbart"),YQr=o(" \u2014 "),yoe=a("a"),KQr=o("FlaxMBartForConditionalGeneration"),ZQr=o(" (mBART model)"),eHr=l(),fA=a("li"),EAe=a("strong"),oHr=o("mt5"),rHr=o(" \u2014 "),xoe=a("a"),tHr=o("FlaxMT5ForConditionalGeneration"),aHr=o(" (MT5 model)"),nHr=l(),gA=a("li"),CAe=a("strong"),sHr=o("roberta"),lHr=o(" \u2014 "),$oe=a("a"),iHr=o("FlaxRobertaForMaskedLM"),dHr=o(" (RoBERTa model)"),cHr=l(),hA=a("li"),wAe=a("strong"),mHr=o("roformer"),fHr=o(" \u2014 "),koe=a("a"),gHr=o("FlaxRoFormerForMaskedLM"),hHr=o(" (RoFormer model)"),uHr=l(),uA=a("li"),AAe=a("strong"),pHr=o("t5"),_Hr=o(" \u2014 "),Soe=a("a"),bHr=o("FlaxT5ForConditionalGeneration"),vHr=o(" (T5 model)"),FHr=l(),pA=a("li"),LAe=a("strong"),THr=o("wav2vec2"),MHr=o(" \u2014 "),Roe=a("a"),EHr=o("FlaxWav2Vec2ForPreTraining"),CHr=o(" (Wav2Vec2 model)"),wHr=l(),_A=a("li"),yAe=a("strong"),AHr=o("xlm-roberta"),LHr=o(" \u2014 "),Poe=a("a"),yHr=o("FlaxXLMRobertaForMaskedLM"),xHr=o(" (XLM-RoBERTa model)"),$Hr=l(),F(bA.$$.fragment),JWe=l(),nm=a("h2"),vA=a("a"),xAe=a("span"),F(j$.$$.fragment),kHr=l(),$Ae=a("span"),SHr=o("FlaxAutoModelForMaskedLM"),YWe=l(),vr=a("div"),F(D$.$$.fragment),RHr=l(),sm=a("p"),PHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Boe=a("a"),BHr=o("from_pretrained()"),IHr=o(" class method or the "),Ioe=a("a"),NHr=o("from_config()"),qHr=o(` class
method.`),jHr=l(),G$=a("p"),DHr=o("This class cannot be instantiated directly using "),kAe=a("code"),GHr=o("__init__()"),OHr=o(" (throws an error)."),VHr=l(),Jt=a("div"),F(O$.$$.fragment),XHr=l(),SAe=a("p"),zHr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),WHr=l(),lm=a("p"),QHr=o(`Note:
Loading a model from its configuration file does `),RAe=a("strong"),HHr=o("not"),UHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Noe=a("a"),JHr=o("from_pretrained()"),YHr=o(" to load the model weights."),KHr=l(),F(FA.$$.fragment),ZHr=l(),Qr=a("div"),F(V$.$$.fragment),eUr=l(),PAe=a("p"),oUr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rUr=l(),wn=a("p"),tUr=o("The model class to instantiate is selected based on the "),BAe=a("code"),aUr=o("model_type"),nUr=o(` property of the config object (either
passed as an argument or loaded from `),IAe=a("code"),sUr=o("pretrained_model_name_or_path"),lUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NAe=a("code"),iUr=o("pretrained_model_name_or_path"),dUr=o(":"),cUr=l(),$e=a("ul"),TA=a("li"),qAe=a("strong"),mUr=o("albert"),fUr=o(" \u2014 "),qoe=a("a"),gUr=o("FlaxAlbertForMaskedLM"),hUr=o(" (ALBERT model)"),uUr=l(),MA=a("li"),jAe=a("strong"),pUr=o("bart"),_Ur=o(" \u2014 "),joe=a("a"),bUr=o("FlaxBartForConditionalGeneration"),vUr=o(" (BART model)"),FUr=l(),EA=a("li"),DAe=a("strong"),TUr=o("bert"),MUr=o(" \u2014 "),Doe=a("a"),EUr=o("FlaxBertForMaskedLM"),CUr=o(" (BERT model)"),wUr=l(),CA=a("li"),GAe=a("strong"),AUr=o("big_bird"),LUr=o(" \u2014 "),Goe=a("a"),yUr=o("FlaxBigBirdForMaskedLM"),xUr=o(" (BigBird model)"),$Ur=l(),wA=a("li"),OAe=a("strong"),kUr=o("distilbert"),SUr=o(" \u2014 "),Ooe=a("a"),RUr=o("FlaxDistilBertForMaskedLM"),PUr=o(" (DistilBERT model)"),BUr=l(),AA=a("li"),VAe=a("strong"),IUr=o("electra"),NUr=o(" \u2014 "),Voe=a("a"),qUr=o("FlaxElectraForMaskedLM"),jUr=o(" (ELECTRA model)"),DUr=l(),LA=a("li"),XAe=a("strong"),GUr=o("mbart"),OUr=o(" \u2014 "),Xoe=a("a"),VUr=o("FlaxMBartForConditionalGeneration"),XUr=o(" (mBART model)"),zUr=l(),yA=a("li"),zAe=a("strong"),WUr=o("roberta"),QUr=o(" \u2014 "),zoe=a("a"),HUr=o("FlaxRobertaForMaskedLM"),UUr=o(" (RoBERTa model)"),JUr=l(),xA=a("li"),WAe=a("strong"),YUr=o("roformer"),KUr=o(" \u2014 "),Woe=a("a"),ZUr=o("FlaxRoFormerForMaskedLM"),eJr=o(" (RoFormer model)"),oJr=l(),$A=a("li"),QAe=a("strong"),rJr=o("xlm-roberta"),tJr=o(" \u2014 "),Qoe=a("a"),aJr=o("FlaxXLMRobertaForMaskedLM"),nJr=o(" (XLM-RoBERTa model)"),sJr=l(),F(kA.$$.fragment),KWe=l(),im=a("h2"),SA=a("a"),HAe=a("span"),F(X$.$$.fragment),lJr=l(),UAe=a("span"),iJr=o("FlaxAutoModelForSeq2SeqLM"),ZWe=l(),Fr=a("div"),F(z$.$$.fragment),dJr=l(),dm=a("p"),cJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Hoe=a("a"),mJr=o("from_pretrained()"),fJr=o(" class method or the "),Uoe=a("a"),gJr=o("from_config()"),hJr=o(` class
method.`),uJr=l(),W$=a("p"),pJr=o("This class cannot be instantiated directly using "),JAe=a("code"),_Jr=o("__init__()"),bJr=o(" (throws an error)."),vJr=l(),Yt=a("div"),F(Q$.$$.fragment),FJr=l(),YAe=a("p"),TJr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),MJr=l(),cm=a("p"),EJr=o(`Note:
Loading a model from its configuration file does `),KAe=a("strong"),CJr=o("not"),wJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Joe=a("a"),AJr=o("from_pretrained()"),LJr=o(" to load the model weights."),yJr=l(),F(RA.$$.fragment),xJr=l(),Hr=a("div"),F(H$.$$.fragment),$Jr=l(),ZAe=a("p"),kJr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),SJr=l(),An=a("p"),RJr=o("The model class to instantiate is selected based on the "),e6e=a("code"),PJr=o("model_type"),BJr=o(` property of the config object (either
passed as an argument or loaded from `),o6e=a("code"),IJr=o("pretrained_model_name_or_path"),NJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r6e=a("code"),qJr=o("pretrained_model_name_or_path"),jJr=o(":"),DJr=l(),ke=a("ul"),PA=a("li"),t6e=a("strong"),GJr=o("bart"),OJr=o(" \u2014 "),Yoe=a("a"),VJr=o("FlaxBartForConditionalGeneration"),XJr=o(" (BART model)"),zJr=l(),BA=a("li"),a6e=a("strong"),WJr=o("blenderbot"),QJr=o(" \u2014 "),Koe=a("a"),HJr=o("FlaxBlenderbotForConditionalGeneration"),UJr=o(" (Blenderbot model)"),JJr=l(),IA=a("li"),n6e=a("strong"),YJr=o("blenderbot-small"),KJr=o(" \u2014 "),Zoe=a("a"),ZJr=o("FlaxBlenderbotSmallForConditionalGeneration"),eYr=o(" (BlenderbotSmall model)"),oYr=l(),NA=a("li"),s6e=a("strong"),rYr=o("encoder-decoder"),tYr=o(" \u2014 "),ere=a("a"),aYr=o("FlaxEncoderDecoderModel"),nYr=o(" (Encoder decoder model)"),sYr=l(),qA=a("li"),l6e=a("strong"),lYr=o("longt5"),iYr=o(" \u2014 "),ore=a("a"),dYr=o("FlaxLongT5ForConditionalGeneration"),cYr=o(" (LongT5 model)"),mYr=l(),jA=a("li"),i6e=a("strong"),fYr=o("marian"),gYr=o(" \u2014 "),rre=a("a"),hYr=o("FlaxMarianMTModel"),uYr=o(" (Marian model)"),pYr=l(),DA=a("li"),d6e=a("strong"),_Yr=o("mbart"),bYr=o(" \u2014 "),tre=a("a"),vYr=o("FlaxMBartForConditionalGeneration"),FYr=o(" (mBART model)"),TYr=l(),GA=a("li"),c6e=a("strong"),MYr=o("mt5"),EYr=o(" \u2014 "),are=a("a"),CYr=o("FlaxMT5ForConditionalGeneration"),wYr=o(" (MT5 model)"),AYr=l(),OA=a("li"),m6e=a("strong"),LYr=o("pegasus"),yYr=o(" \u2014 "),nre=a("a"),xYr=o("FlaxPegasusForConditionalGeneration"),$Yr=o(" (Pegasus model)"),kYr=l(),VA=a("li"),f6e=a("strong"),SYr=o("t5"),RYr=o(" \u2014 "),sre=a("a"),PYr=o("FlaxT5ForConditionalGeneration"),BYr=o(" (T5 model)"),IYr=l(),F(XA.$$.fragment),eQe=l(),mm=a("h2"),zA=a("a"),g6e=a("span"),F(U$.$$.fragment),NYr=l(),h6e=a("span"),qYr=o("FlaxAutoModelForSequenceClassification"),oQe=l(),Tr=a("div"),F(J$.$$.fragment),jYr=l(),fm=a("p"),DYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lre=a("a"),GYr=o("from_pretrained()"),OYr=o(" class method or the "),ire=a("a"),VYr=o("from_config()"),XYr=o(` class
method.`),zYr=l(),Y$=a("p"),WYr=o("This class cannot be instantiated directly using "),u6e=a("code"),QYr=o("__init__()"),HYr=o(" (throws an error)."),UYr=l(),Kt=a("div"),F(K$.$$.fragment),JYr=l(),p6e=a("p"),YYr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),KYr=l(),gm=a("p"),ZYr=o(`Note:
Loading a model from its configuration file does `),_6e=a("strong"),eKr=o("not"),oKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dre=a("a"),rKr=o("from_pretrained()"),tKr=o(" to load the model weights."),aKr=l(),F(WA.$$.fragment),nKr=l(),Ur=a("div"),F(Z$.$$.fragment),sKr=l(),b6e=a("p"),lKr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),iKr=l(),Ln=a("p"),dKr=o("The model class to instantiate is selected based on the "),v6e=a("code"),cKr=o("model_type"),mKr=o(` property of the config object (either
passed as an argument or loaded from `),F6e=a("code"),fKr=o("pretrained_model_name_or_path"),gKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T6e=a("code"),hKr=o("pretrained_model_name_or_path"),uKr=o(":"),pKr=l(),Se=a("ul"),QA=a("li"),M6e=a("strong"),_Kr=o("albert"),bKr=o(" \u2014 "),cre=a("a"),vKr=o("FlaxAlbertForSequenceClassification"),FKr=o(" (ALBERT model)"),TKr=l(),HA=a("li"),E6e=a("strong"),MKr=o("bart"),EKr=o(" \u2014 "),mre=a("a"),CKr=o("FlaxBartForSequenceClassification"),wKr=o(" (BART model)"),AKr=l(),UA=a("li"),C6e=a("strong"),LKr=o("bert"),yKr=o(" \u2014 "),fre=a("a"),xKr=o("FlaxBertForSequenceClassification"),$Kr=o(" (BERT model)"),kKr=l(),JA=a("li"),w6e=a("strong"),SKr=o("big_bird"),RKr=o(" \u2014 "),gre=a("a"),PKr=o("FlaxBigBirdForSequenceClassification"),BKr=o(" (BigBird model)"),IKr=l(),YA=a("li"),A6e=a("strong"),NKr=o("distilbert"),qKr=o(" \u2014 "),hre=a("a"),jKr=o("FlaxDistilBertForSequenceClassification"),DKr=o(" (DistilBERT model)"),GKr=l(),KA=a("li"),L6e=a("strong"),OKr=o("electra"),VKr=o(" \u2014 "),ure=a("a"),XKr=o("FlaxElectraForSequenceClassification"),zKr=o(" (ELECTRA model)"),WKr=l(),ZA=a("li"),y6e=a("strong"),QKr=o("mbart"),HKr=o(" \u2014 "),pre=a("a"),UKr=o("FlaxMBartForSequenceClassification"),JKr=o(" (mBART model)"),YKr=l(),e6=a("li"),x6e=a("strong"),KKr=o("roberta"),ZKr=o(" \u2014 "),_re=a("a"),eZr=o("FlaxRobertaForSequenceClassification"),oZr=o(" (RoBERTa model)"),rZr=l(),o6=a("li"),$6e=a("strong"),tZr=o("roformer"),aZr=o(" \u2014 "),bre=a("a"),nZr=o("FlaxRoFormerForSequenceClassification"),sZr=o(" (RoFormer model)"),lZr=l(),r6=a("li"),k6e=a("strong"),iZr=o("xlm-roberta"),dZr=o(" \u2014 "),vre=a("a"),cZr=o("FlaxXLMRobertaForSequenceClassification"),mZr=o(" (XLM-RoBERTa model)"),fZr=l(),F(t6.$$.fragment),rQe=l(),hm=a("h2"),a6=a("a"),S6e=a("span"),F(ek.$$.fragment),gZr=l(),R6e=a("span"),hZr=o("FlaxAutoModelForQuestionAnswering"),tQe=l(),Mr=a("div"),F(ok.$$.fragment),uZr=l(),um=a("p"),pZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Fre=a("a"),_Zr=o("from_pretrained()"),bZr=o(" class method or the "),Tre=a("a"),vZr=o("from_config()"),FZr=o(` class
method.`),TZr=l(),rk=a("p"),MZr=o("This class cannot be instantiated directly using "),P6e=a("code"),EZr=o("__init__()"),CZr=o(" (throws an error)."),wZr=l(),Zt=a("div"),F(tk.$$.fragment),AZr=l(),B6e=a("p"),LZr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yZr=l(),pm=a("p"),xZr=o(`Note:
Loading a model from its configuration file does `),I6e=a("strong"),$Zr=o("not"),kZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mre=a("a"),SZr=o("from_pretrained()"),RZr=o(" to load the model weights."),PZr=l(),F(n6.$$.fragment),BZr=l(),Jr=a("div"),F(ak.$$.fragment),IZr=l(),N6e=a("p"),NZr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qZr=l(),yn=a("p"),jZr=o("The model class to instantiate is selected based on the "),q6e=a("code"),DZr=o("model_type"),GZr=o(` property of the config object (either
passed as an argument or loaded from `),j6e=a("code"),OZr=o("pretrained_model_name_or_path"),VZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D6e=a("code"),XZr=o("pretrained_model_name_or_path"),zZr=o(":"),WZr=l(),Re=a("ul"),s6=a("li"),G6e=a("strong"),QZr=o("albert"),HZr=o(" \u2014 "),Ere=a("a"),UZr=o("FlaxAlbertForQuestionAnswering"),JZr=o(" (ALBERT model)"),YZr=l(),l6=a("li"),O6e=a("strong"),KZr=o("bart"),ZZr=o(" \u2014 "),Cre=a("a"),eet=o("FlaxBartForQuestionAnswering"),oet=o(" (BART model)"),ret=l(),i6=a("li"),V6e=a("strong"),tet=o("bert"),aet=o(" \u2014 "),wre=a("a"),net=o("FlaxBertForQuestionAnswering"),set=o(" (BERT model)"),iet=l(),d6=a("li"),X6e=a("strong"),det=o("big_bird"),cet=o(" \u2014 "),Are=a("a"),met=o("FlaxBigBirdForQuestionAnswering"),fet=o(" (BigBird model)"),get=l(),c6=a("li"),z6e=a("strong"),het=o("distilbert"),uet=o(" \u2014 "),Lre=a("a"),pet=o("FlaxDistilBertForQuestionAnswering"),_et=o(" (DistilBERT model)"),bet=l(),m6=a("li"),W6e=a("strong"),vet=o("electra"),Fet=o(" \u2014 "),yre=a("a"),Tet=o("FlaxElectraForQuestionAnswering"),Met=o(" (ELECTRA model)"),Eet=l(),f6=a("li"),Q6e=a("strong"),Cet=o("mbart"),wet=o(" \u2014 "),xre=a("a"),Aet=o("FlaxMBartForQuestionAnswering"),Let=o(" (mBART model)"),yet=l(),g6=a("li"),H6e=a("strong"),xet=o("roberta"),$et=o(" \u2014 "),$re=a("a"),ket=o("FlaxRobertaForQuestionAnswering"),Set=o(" (RoBERTa model)"),Ret=l(),h6=a("li"),U6e=a("strong"),Pet=o("roformer"),Bet=o(" \u2014 "),kre=a("a"),Iet=o("FlaxRoFormerForQuestionAnswering"),Net=o(" (RoFormer model)"),qet=l(),u6=a("li"),J6e=a("strong"),jet=o("xlm-roberta"),Det=o(" \u2014 "),Sre=a("a"),Get=o("FlaxXLMRobertaForQuestionAnswering"),Oet=o(" (XLM-RoBERTa model)"),Vet=l(),F(p6.$$.fragment),aQe=l(),_m=a("h2"),_6=a("a"),Y6e=a("span"),F(nk.$$.fragment),Xet=l(),K6e=a("span"),zet=o("FlaxAutoModelForTokenClassification"),nQe=l(),Er=a("div"),F(sk.$$.fragment),Wet=l(),bm=a("p"),Qet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Rre=a("a"),Het=o("from_pretrained()"),Uet=o(" class method or the "),Pre=a("a"),Jet=o("from_config()"),Yet=o(` class
method.`),Ket=l(),lk=a("p"),Zet=o("This class cannot be instantiated directly using "),Z6e=a("code"),eot=o("__init__()"),oot=o(" (throws an error)."),rot=l(),ea=a("div"),F(ik.$$.fragment),tot=l(),e7e=a("p"),aot=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),not=l(),vm=a("p"),sot=o(`Note:
Loading a model from its configuration file does `),o7e=a("strong"),lot=o("not"),iot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bre=a("a"),dot=o("from_pretrained()"),cot=o(" to load the model weights."),mot=l(),F(b6.$$.fragment),fot=l(),Yr=a("div"),F(dk.$$.fragment),got=l(),r7e=a("p"),hot=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uot=l(),xn=a("p"),pot=o("The model class to instantiate is selected based on the "),t7e=a("code"),_ot=o("model_type"),bot=o(` property of the config object (either
passed as an argument or loaded from `),a7e=a("code"),vot=o("pretrained_model_name_or_path"),Fot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n7e=a("code"),Tot=o("pretrained_model_name_or_path"),Mot=o(":"),Eot=l(),Xe=a("ul"),v6=a("li"),s7e=a("strong"),Cot=o("albert"),wot=o(" \u2014 "),Ire=a("a"),Aot=o("FlaxAlbertForTokenClassification"),Lot=o(" (ALBERT model)"),yot=l(),F6=a("li"),l7e=a("strong"),xot=o("bert"),$ot=o(" \u2014 "),Nre=a("a"),kot=o("FlaxBertForTokenClassification"),Sot=o(" (BERT model)"),Rot=l(),T6=a("li"),i7e=a("strong"),Pot=o("big_bird"),Bot=o(" \u2014 "),qre=a("a"),Iot=o("FlaxBigBirdForTokenClassification"),Not=o(" (BigBird model)"),qot=l(),M6=a("li"),d7e=a("strong"),jot=o("distilbert"),Dot=o(" \u2014 "),jre=a("a"),Got=o("FlaxDistilBertForTokenClassification"),Oot=o(" (DistilBERT model)"),Vot=l(),E6=a("li"),c7e=a("strong"),Xot=o("electra"),zot=o(" \u2014 "),Dre=a("a"),Wot=o("FlaxElectraForTokenClassification"),Qot=o(" (ELECTRA model)"),Hot=l(),C6=a("li"),m7e=a("strong"),Uot=o("roberta"),Jot=o(" \u2014 "),Gre=a("a"),Yot=o("FlaxRobertaForTokenClassification"),Kot=o(" (RoBERTa model)"),Zot=l(),w6=a("li"),f7e=a("strong"),ert=o("roformer"),ort=o(" \u2014 "),Ore=a("a"),rrt=o("FlaxRoFormerForTokenClassification"),trt=o(" (RoFormer model)"),art=l(),A6=a("li"),g7e=a("strong"),nrt=o("xlm-roberta"),srt=o(" \u2014 "),Vre=a("a"),lrt=o("FlaxXLMRobertaForTokenClassification"),irt=o(" (XLM-RoBERTa model)"),drt=l(),F(L6.$$.fragment),sQe=l(),Fm=a("h2"),y6=a("a"),h7e=a("span"),F(ck.$$.fragment),crt=l(),u7e=a("span"),mrt=o("FlaxAutoModelForMultipleChoice"),lQe=l(),Cr=a("div"),F(mk.$$.fragment),frt=l(),Tm=a("p"),grt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Xre=a("a"),hrt=o("from_pretrained()"),urt=o(" class method or the "),zre=a("a"),prt=o("from_config()"),_rt=o(` class
method.`),brt=l(),fk=a("p"),vrt=o("This class cannot be instantiated directly using "),p7e=a("code"),Frt=o("__init__()"),Trt=o(" (throws an error)."),Mrt=l(),oa=a("div"),F(gk.$$.fragment),Ert=l(),_7e=a("p"),Crt=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),wrt=l(),Mm=a("p"),Art=o(`Note:
Loading a model from its configuration file does `),b7e=a("strong"),Lrt=o("not"),yrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wre=a("a"),xrt=o("from_pretrained()"),$rt=o(" to load the model weights."),krt=l(),F(x6.$$.fragment),Srt=l(),Kr=a("div"),F(hk.$$.fragment),Rrt=l(),v7e=a("p"),Prt=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Brt=l(),$n=a("p"),Irt=o("The model class to instantiate is selected based on the "),F7e=a("code"),Nrt=o("model_type"),qrt=o(` property of the config object (either
passed as an argument or loaded from `),T7e=a("code"),jrt=o("pretrained_model_name_or_path"),Drt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M7e=a("code"),Grt=o("pretrained_model_name_or_path"),Ort=o(":"),Vrt=l(),ze=a("ul"),$6=a("li"),E7e=a("strong"),Xrt=o("albert"),zrt=o(" \u2014 "),Qre=a("a"),Wrt=o("FlaxAlbertForMultipleChoice"),Qrt=o(" (ALBERT model)"),Hrt=l(),k6=a("li"),C7e=a("strong"),Urt=o("bert"),Jrt=o(" \u2014 "),Hre=a("a"),Yrt=o("FlaxBertForMultipleChoice"),Krt=o(" (BERT model)"),Zrt=l(),S6=a("li"),w7e=a("strong"),ett=o("big_bird"),ott=o(" \u2014 "),Ure=a("a"),rtt=o("FlaxBigBirdForMultipleChoice"),ttt=o(" (BigBird model)"),att=l(),R6=a("li"),A7e=a("strong"),ntt=o("distilbert"),stt=o(" \u2014 "),Jre=a("a"),ltt=o("FlaxDistilBertForMultipleChoice"),itt=o(" (DistilBERT model)"),dtt=l(),P6=a("li"),L7e=a("strong"),ctt=o("electra"),mtt=o(" \u2014 "),Yre=a("a"),ftt=o("FlaxElectraForMultipleChoice"),gtt=o(" (ELECTRA model)"),htt=l(),B6=a("li"),y7e=a("strong"),utt=o("roberta"),ptt=o(" \u2014 "),Kre=a("a"),_tt=o("FlaxRobertaForMultipleChoice"),btt=o(" (RoBERTa model)"),vtt=l(),I6=a("li"),x7e=a("strong"),Ftt=o("roformer"),Ttt=o(" \u2014 "),Zre=a("a"),Mtt=o("FlaxRoFormerForMultipleChoice"),Ett=o(" (RoFormer model)"),Ctt=l(),N6=a("li"),$7e=a("strong"),wtt=o("xlm-roberta"),Att=o(" \u2014 "),ete=a("a"),Ltt=o("FlaxXLMRobertaForMultipleChoice"),ytt=o(" (XLM-RoBERTa model)"),xtt=l(),F(q6.$$.fragment),iQe=l(),Em=a("h2"),j6=a("a"),k7e=a("span"),F(uk.$$.fragment),$tt=l(),S7e=a("span"),ktt=o("FlaxAutoModelForNextSentencePrediction"),dQe=l(),wr=a("div"),F(pk.$$.fragment),Stt=l(),Cm=a("p"),Rtt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ote=a("a"),Ptt=o("from_pretrained()"),Btt=o(" class method or the "),rte=a("a"),Itt=o("from_config()"),Ntt=o(` class
method.`),qtt=l(),_k=a("p"),jtt=o("This class cannot be instantiated directly using "),R7e=a("code"),Dtt=o("__init__()"),Gtt=o(" (throws an error)."),Ott=l(),ra=a("div"),F(bk.$$.fragment),Vtt=l(),P7e=a("p"),Xtt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ztt=l(),wm=a("p"),Wtt=o(`Note:
Loading a model from its configuration file does `),B7e=a("strong"),Qtt=o("not"),Htt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tte=a("a"),Utt=o("from_pretrained()"),Jtt=o(" to load the model weights."),Ytt=l(),F(D6.$$.fragment),Ktt=l(),Zr=a("div"),F(vk.$$.fragment),Ztt=l(),I7e=a("p"),eat=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oat=l(),kn=a("p"),rat=o("The model class to instantiate is selected based on the "),N7e=a("code"),tat=o("model_type"),aat=o(` property of the config object (either
passed as an argument or loaded from `),q7e=a("code"),nat=o("pretrained_model_name_or_path"),sat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=a("code"),lat=o("pretrained_model_name_or_path"),iat=o(":"),dat=l(),D7e=a("ul"),G6=a("li"),G7e=a("strong"),cat=o("bert"),mat=o(" \u2014 "),ate=a("a"),fat=o("FlaxBertForNextSentencePrediction"),gat=o(" (BERT model)"),hat=l(),F(O6.$$.fragment),cQe=l(),Am=a("h2"),V6=a("a"),O7e=a("span"),F(Fk.$$.fragment),uat=l(),V7e=a("span"),pat=o("FlaxAutoModelForImageClassification"),mQe=l(),Ar=a("div"),F(Tk.$$.fragment),_at=l(),Lm=a("p"),bat=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nte=a("a"),vat=o("from_pretrained()"),Fat=o(" class method or the "),ste=a("a"),Tat=o("from_config()"),Mat=o(` class
method.`),Eat=l(),Mk=a("p"),Cat=o("This class cannot be instantiated directly using "),X7e=a("code"),wat=o("__init__()"),Aat=o(" (throws an error)."),Lat=l(),ta=a("div"),F(Ek.$$.fragment),yat=l(),z7e=a("p"),xat=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$at=l(),ym=a("p"),kat=o(`Note:
Loading a model from its configuration file does `),W7e=a("strong"),Sat=o("not"),Rat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lte=a("a"),Pat=o("from_pretrained()"),Bat=o(" to load the model weights."),Iat=l(),F(X6.$$.fragment),Nat=l(),et=a("div"),F(Ck.$$.fragment),qat=l(),Q7e=a("p"),jat=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Dat=l(),Sn=a("p"),Gat=o("The model class to instantiate is selected based on the "),H7e=a("code"),Oat=o("model_type"),Vat=o(` property of the config object (either
passed as an argument or loaded from `),U7e=a("code"),Xat=o("pretrained_model_name_or_path"),zat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J7e=a("code"),Wat=o("pretrained_model_name_or_path"),Qat=o(":"),Hat=l(),wk=a("ul"),z6=a("li"),Y7e=a("strong"),Uat=o("beit"),Jat=o(" \u2014 "),ite=a("a"),Yat=o("FlaxBeitForImageClassification"),Kat=o(" (BEiT model)"),Zat=l(),W6=a("li"),K7e=a("strong"),ent=o("vit"),ont=o(" \u2014 "),dte=a("a"),rnt=o("FlaxViTForImageClassification"),tnt=o(" (ViT model)"),ant=l(),F(Q6.$$.fragment),fQe=l(),xm=a("h2"),H6=a("a"),Z7e=a("span"),F(Ak.$$.fragment),nnt=l(),eLe=a("span"),snt=o("FlaxAutoModelForVision2Seq"),gQe=l(),Lr=a("div"),F(Lk.$$.fragment),lnt=l(),$m=a("p"),int=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cte=a("a"),dnt=o("from_pretrained()"),cnt=o(" class method or the "),mte=a("a"),mnt=o("from_config()"),fnt=o(` class
method.`),gnt=l(),yk=a("p"),hnt=o("This class cannot be instantiated directly using "),oLe=a("code"),unt=o("__init__()"),pnt=o(" (throws an error)."),_nt=l(),aa=a("div"),F(xk.$$.fragment),bnt=l(),rLe=a("p"),vnt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Fnt=l(),km=a("p"),Tnt=o(`Note:
Loading a model from its configuration file does `),tLe=a("strong"),Mnt=o("not"),Ent=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fte=a("a"),Cnt=o("from_pretrained()"),wnt=o(" to load the model weights."),Ant=l(),F(U6.$$.fragment),Lnt=l(),ot=a("div"),F($k.$$.fragment),ynt=l(),aLe=a("p"),xnt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$nt=l(),Rn=a("p"),knt=o("The model class to instantiate is selected based on the "),nLe=a("code"),Snt=o("model_type"),Rnt=o(` property of the config object (either
passed as an argument or loaded from `),sLe=a("code"),Pnt=o("pretrained_model_name_or_path"),Bnt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lLe=a("code"),Int=o("pretrained_model_name_or_path"),Nnt=o(":"),qnt=l(),iLe=a("ul"),J6=a("li"),dLe=a("strong"),jnt=o("vision-encoder-decoder"),Dnt=o(" \u2014 "),gte=a("a"),Gnt=o("FlaxVisionEncoderDecoderModel"),Ont=o(" (Vision Encoder decoder model)"),Vnt=l(),F(Y6.$$.fragment),this.h()},l(m){const _=oJt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var kk=s(u);f=n(kk,"A",{id:!0,class:!0,href:!0});var cLe=s(f);p=n(cLe,"SPAN",{});var mLe=s(p);T(c.$$.fragment,mLe),mLe.forEach(t),cLe.forEach(t),h=i(kk),wo=n(kk,"SPAN",{});var fLe=s(wo);$i=r(fLe,"Auto Classes"),fLe.forEach(t),kk.forEach(t),Bm=i(m),lt=n(m,"P",{});var Sk=s(lt);ki=r(Sk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Si=n(Sk,"CODE",{});var gLe=s(Si);_y=r(gLe,"from_pretrained()"),gLe.forEach(t),Im=r(Sk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Sk.forEach(t),Oe=i(m),Qe=n(m,"P",{});var Pn=s(Qe);Ri=r(Pn,"Instantiating one of "),Bn=n(Pn,"A",{href:!0});var hLe=s(Bn);by=r(hLe,"AutoConfig"),hLe.forEach(t),In=r(Pn,", "),Nn=n(Pn,"A",{href:!0});var uLe=s(Nn);vy=r(uLe,"AutoModel"),uLe.forEach(t),Pi=r(Pn,`, and
`),qn=n(Pn,"A",{href:!0});var pLe=s(qn);Fy=r(pLe,"AutoTokenizer"),pLe.forEach(t),Bi=r(Pn," will directly create a class of the relevant architecture. For instance"),Pn.forEach(t),Nm=i(m),T(Sa.$$.fragment,m),He=i(m),Ae=n(m,"P",{});var Rk=s(Ae);eR=r(Rk,"will create a model that is an instance of "),Ii=n(Rk,"A",{href:!0});var _Le=s(Ii);oR=r(_Le,"BertModel"),_Le.forEach(t),rR=r(Rk,"."),Rk.forEach(t),Ao=i(m),Ra=n(m,"P",{});var Pk=s(Ra);tR=r(Pk,"There is one class of "),qm=n(Pk,"CODE",{});var bLe=s(qm);aR=r(bLe,"AutoModel"),bLe.forEach(t),CUe=r(Pk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Pk.forEach(t),dze=i(m),Ni=n(m,"H2",{class:!0});var Bk=s(Ni);jm=n(Bk,"A",{id:!0,class:!0,href:!0});var vLe=s(jm);lne=n(vLe,"SPAN",{});var FLe=s(lne);T(Ty.$$.fragment,FLe),FLe.forEach(t),vLe.forEach(t),wUe=i(Bk),ine=n(Bk,"SPAN",{});var TLe=s(ine);AUe=r(TLe,"Extending the Auto Classes"),TLe.forEach(t),Bk.forEach(t),cze=i(m),jn=n(m,"P",{});var Sm=s(jn);LUe=r(Sm,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),dne=n(Sm,"CODE",{});var MLe=s(dne);yUe=r(MLe,"NewModel"),MLe.forEach(t),xUe=r(Sm,", make sure you have a "),cne=n(Sm,"CODE",{});var ELe=s(cne);$Ue=r(ELe,"NewModelConfig"),ELe.forEach(t),kUe=r(Sm,` then you can add those to the auto
classes like this:`),Sm.forEach(t),mze=i(m),T(My.$$.fragment,m),fze=i(m),nR=n(m,"P",{});var CLe=s(nR);SUe=r(CLe,"You will then be able to use the auto classes like you would usually do!"),CLe.forEach(t),gze=i(m),T(Dm.$$.fragment,m),hze=i(m),qi=n(m,"H2",{class:!0});var Ik=s(qi);Gm=n(Ik,"A",{id:!0,class:!0,href:!0});var wLe=s(Gm);mne=n(wLe,"SPAN",{});var ALe=s(mne);T(Ey.$$.fragment,ALe),ALe.forEach(t),wLe.forEach(t),RUe=i(Ik),fne=n(Ik,"SPAN",{});var LLe=s(fne);PUe=r(LLe,"AutoConfig"),LLe.forEach(t),Ik.forEach(t),uze=i(m),Lo=n(m,"DIV",{class:!0});var nt=s(Lo);T(Cy.$$.fragment,nt),BUe=i(nt),wy=n(nt,"P",{});var Nk=s(wy);IUe=r(Nk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),sR=n(Nk,"A",{href:!0});var yLe=s(sR);NUe=r(yLe,"from_pretrained()"),yLe.forEach(t),qUe=r(Nk," class method."),Nk.forEach(t),jUe=i(nt),Ay=n(nt,"P",{});var qk=s(Ay);DUe=r(qk,"This class cannot be instantiated directly using "),gne=n(qk,"CODE",{});var xLe=s(gne);GUe=r(xLe,"__init__()"),xLe.forEach(t),OUe=r(qk," (throws an error)."),qk.forEach(t),VUe=i(nt),yr=n(nt,"DIV",{class:!0});var st=s(yr);T(Ly.$$.fragment,st),XUe=i(st),hne=n(st,"P",{});var $Le=s(hne);zUe=r($Le,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),$Le.forEach(t),WUe=i(st),ji=n(st,"P",{});var Rm=s(ji);QUe=r(Rm,"The configuration class to instantiate is selected based on the "),une=n(Rm,"CODE",{});var kLe=s(une);HUe=r(kLe,"model_type"),kLe.forEach(t),UUe=r(Rm,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),pne=n(Rm,"CODE",{});var SLe=s(pne);JUe=r(SLe,"pretrained_model_name_or_path"),SLe.forEach(t),YUe=r(Rm,":"),Rm.forEach(t),KUe=i(st),A=n(st,"UL",{});var L=s(A);Om=n(L,"LI",{});var K6=s(Om);_ne=n(K6,"STRONG",{});var RLe=s(_ne);ZUe=r(RLe,"albert"),RLe.forEach(t),eJe=r(K6," \u2014 "),lR=n(K6,"A",{href:!0});var PLe=s(lR);oJe=r(PLe,"AlbertConfig"),PLe.forEach(t),rJe=r(K6," (ALBERT model)"),K6.forEach(t),tJe=i(L),Vm=n(L,"LI",{});var Z6=s(Vm);bne=n(Z6,"STRONG",{});var BLe=s(bne);aJe=r(BLe,"bart"),BLe.forEach(t),nJe=r(Z6," \u2014 "),iR=n(Z6,"A",{href:!0});var ILe=s(iR);sJe=r(ILe,"BartConfig"),ILe.forEach(t),lJe=r(Z6," (BART model)"),Z6.forEach(t),iJe=i(L),Xm=n(L,"LI",{});var e7=s(Xm);vne=n(e7,"STRONG",{});var NLe=s(vne);dJe=r(NLe,"beit"),NLe.forEach(t),cJe=r(e7," \u2014 "),dR=n(e7,"A",{href:!0});var qLe=s(dR);mJe=r(qLe,"BeitConfig"),qLe.forEach(t),fJe=r(e7," (BEiT model)"),e7.forEach(t),gJe=i(L),zm=n(L,"LI",{});var o7=s(zm);Fne=n(o7,"STRONG",{});var jLe=s(Fne);hJe=r(jLe,"bert"),jLe.forEach(t),uJe=r(o7," \u2014 "),cR=n(o7,"A",{href:!0});var DLe=s(cR);pJe=r(DLe,"BertConfig"),DLe.forEach(t),_Je=r(o7," (BERT model)"),o7.forEach(t),bJe=i(L),Wm=n(L,"LI",{});var r7=s(Wm);Tne=n(r7,"STRONG",{});var GLe=s(Tne);vJe=r(GLe,"bert-generation"),GLe.forEach(t),FJe=r(r7," \u2014 "),mR=n(r7,"A",{href:!0});var OLe=s(mR);TJe=r(OLe,"BertGenerationConfig"),OLe.forEach(t),MJe=r(r7," (Bert Generation model)"),r7.forEach(t),EJe=i(L),Qm=n(L,"LI",{});var t7=s(Qm);Mne=n(t7,"STRONG",{});var VLe=s(Mne);CJe=r(VLe,"big_bird"),VLe.forEach(t),wJe=r(t7," \u2014 "),fR=n(t7,"A",{href:!0});var XLe=s(fR);AJe=r(XLe,"BigBirdConfig"),XLe.forEach(t),LJe=r(t7," (BigBird model)"),t7.forEach(t),yJe=i(L),Hm=n(L,"LI",{});var a7=s(Hm);Ene=n(a7,"STRONG",{});var zLe=s(Ene);xJe=r(zLe,"bigbird_pegasus"),zLe.forEach(t),$Je=r(a7," \u2014 "),gR=n(a7,"A",{href:!0});var WLe=s(gR);kJe=r(WLe,"BigBirdPegasusConfig"),WLe.forEach(t),SJe=r(a7," (BigBird-Pegasus model)"),a7.forEach(t),RJe=i(L),Um=n(L,"LI",{});var n7=s(Um);Cne=n(n7,"STRONG",{});var QLe=s(Cne);PJe=r(QLe,"blenderbot"),QLe.forEach(t),BJe=r(n7," \u2014 "),hR=n(n7,"A",{href:!0});var HLe=s(hR);IJe=r(HLe,"BlenderbotConfig"),HLe.forEach(t),NJe=r(n7," (Blenderbot model)"),n7.forEach(t),qJe=i(L),Jm=n(L,"LI",{});var s7=s(Jm);wne=n(s7,"STRONG",{});var ULe=s(wne);jJe=r(ULe,"blenderbot-small"),ULe.forEach(t),DJe=r(s7," \u2014 "),uR=n(s7,"A",{href:!0});var JLe=s(uR);GJe=r(JLe,"BlenderbotSmallConfig"),JLe.forEach(t),OJe=r(s7," (BlenderbotSmall model)"),s7.forEach(t),VJe=i(L),Ym=n(L,"LI",{});var l7=s(Ym);Ane=n(l7,"STRONG",{});var YLe=s(Ane);XJe=r(YLe,"bloom"),YLe.forEach(t),zJe=r(l7," \u2014 "),pR=n(l7,"A",{href:!0});var KLe=s(pR);WJe=r(KLe,"BloomConfig"),KLe.forEach(t),QJe=r(l7," (BLOOM model)"),l7.forEach(t),HJe=i(L),Km=n(L,"LI",{});var i7=s(Km);Lne=n(i7,"STRONG",{});var ZLe=s(Lne);UJe=r(ZLe,"camembert"),ZLe.forEach(t),JJe=r(i7," \u2014 "),_R=n(i7,"A",{href:!0});var eye=s(_R);YJe=r(eye,"CamembertConfig"),eye.forEach(t),KJe=r(i7," (CamemBERT model)"),i7.forEach(t),ZJe=i(L),Zm=n(L,"LI",{});var d7=s(Zm);yne=n(d7,"STRONG",{});var oye=s(yne);eYe=r(oye,"canine"),oye.forEach(t),oYe=r(d7," \u2014 "),bR=n(d7,"A",{href:!0});var rye=s(bR);rYe=r(rye,"CanineConfig"),rye.forEach(t),tYe=r(d7," (CANINE model)"),d7.forEach(t),aYe=i(L),ef=n(L,"LI",{});var c7=s(ef);xne=n(c7,"STRONG",{});var tye=s(xne);nYe=r(tye,"clip"),tye.forEach(t),sYe=r(c7," \u2014 "),vR=n(c7,"A",{href:!0});var aye=s(vR);lYe=r(aye,"CLIPConfig"),aye.forEach(t),iYe=r(c7," (CLIP model)"),c7.forEach(t),dYe=i(L),of=n(L,"LI",{});var m7=s(of);$ne=n(m7,"STRONG",{});var nye=s($ne);cYe=r(nye,"codegen"),nye.forEach(t),mYe=r(m7," \u2014 "),FR=n(m7,"A",{href:!0});var sye=s(FR);fYe=r(sye,"CodeGenConfig"),sye.forEach(t),gYe=r(m7," (CodeGen model)"),m7.forEach(t),hYe=i(L),rf=n(L,"LI",{});var f7=s(rf);kne=n(f7,"STRONG",{});var lye=s(kne);uYe=r(lye,"convbert"),lye.forEach(t),pYe=r(f7," \u2014 "),TR=n(f7,"A",{href:!0});var iye=s(TR);_Ye=r(iye,"ConvBertConfig"),iye.forEach(t),bYe=r(f7," (ConvBERT model)"),f7.forEach(t),vYe=i(L),tf=n(L,"LI",{});var g7=s(tf);Sne=n(g7,"STRONG",{});var dye=s(Sne);FYe=r(dye,"convnext"),dye.forEach(t),TYe=r(g7," \u2014 "),MR=n(g7,"A",{href:!0});var cye=s(MR);MYe=r(cye,"ConvNextConfig"),cye.forEach(t),EYe=r(g7," (ConvNeXT model)"),g7.forEach(t),CYe=i(L),af=n(L,"LI",{});var h7=s(af);Rne=n(h7,"STRONG",{});var mye=s(Rne);wYe=r(mye,"ctrl"),mye.forEach(t),AYe=r(h7," \u2014 "),ER=n(h7,"A",{href:!0});var fye=s(ER);LYe=r(fye,"CTRLConfig"),fye.forEach(t),yYe=r(h7," (CTRL model)"),h7.forEach(t),xYe=i(L),nf=n(L,"LI",{});var u7=s(nf);Pne=n(u7,"STRONG",{});var gye=s(Pne);$Ye=r(gye,"cvt"),gye.forEach(t),kYe=r(u7," \u2014 "),CR=n(u7,"A",{href:!0});var hye=s(CR);SYe=r(hye,"CvtConfig"),hye.forEach(t),RYe=r(u7," (CvT model)"),u7.forEach(t),PYe=i(L),sf=n(L,"LI",{});var p7=s(sf);Bne=n(p7,"STRONG",{});var uye=s(Bne);BYe=r(uye,"data2vec-audio"),uye.forEach(t),IYe=r(p7," \u2014 "),wR=n(p7,"A",{href:!0});var pye=s(wR);NYe=r(pye,"Data2VecAudioConfig"),pye.forEach(t),qYe=r(p7," (Data2VecAudio model)"),p7.forEach(t),jYe=i(L),lf=n(L,"LI",{});var _7=s(lf);Ine=n(_7,"STRONG",{});var _ye=s(Ine);DYe=r(_ye,"data2vec-text"),_ye.forEach(t),GYe=r(_7," \u2014 "),AR=n(_7,"A",{href:!0});var bye=s(AR);OYe=r(bye,"Data2VecTextConfig"),bye.forEach(t),VYe=r(_7," (Data2VecText model)"),_7.forEach(t),XYe=i(L),df=n(L,"LI",{});var b7=s(df);Nne=n(b7,"STRONG",{});var vye=s(Nne);zYe=r(vye,"data2vec-vision"),vye.forEach(t),WYe=r(b7," \u2014 "),LR=n(b7,"A",{href:!0});var Fye=s(LR);QYe=r(Fye,"Data2VecVisionConfig"),Fye.forEach(t),HYe=r(b7," (Data2VecVision model)"),b7.forEach(t),UYe=i(L),cf=n(L,"LI",{});var v7=s(cf);qne=n(v7,"STRONG",{});var Tye=s(qne);JYe=r(Tye,"deberta"),Tye.forEach(t),YYe=r(v7," \u2014 "),yR=n(v7,"A",{href:!0});var Mye=s(yR);KYe=r(Mye,"DebertaConfig"),Mye.forEach(t),ZYe=r(v7," (DeBERTa model)"),v7.forEach(t),eKe=i(L),mf=n(L,"LI",{});var F7=s(mf);jne=n(F7,"STRONG",{});var Eye=s(jne);oKe=r(Eye,"deberta-v2"),Eye.forEach(t),rKe=r(F7," \u2014 "),xR=n(F7,"A",{href:!0});var Cye=s(xR);tKe=r(Cye,"DebertaV2Config"),Cye.forEach(t),aKe=r(F7," (DeBERTa-v2 model)"),F7.forEach(t),nKe=i(L),ff=n(L,"LI",{});var T7=s(ff);Dne=n(T7,"STRONG",{});var znt=s(Dne);sKe=r(znt,"decision_transformer"),znt.forEach(t),lKe=r(T7," \u2014 "),$R=n(T7,"A",{href:!0});var Wnt=s($R);iKe=r(Wnt,"DecisionTransformerConfig"),Wnt.forEach(t),dKe=r(T7," (Decision Transformer model)"),T7.forEach(t),cKe=i(L),gf=n(L,"LI",{});var wye=s(gf);Gne=n(wye,"STRONG",{});var Qnt=s(Gne);mKe=r(Qnt,"deit"),Qnt.forEach(t),fKe=r(wye," \u2014 "),kR=n(wye,"A",{href:!0});var Hnt=s(kR);gKe=r(Hnt,"DeiTConfig"),Hnt.forEach(t),hKe=r(wye," (DeiT model)"),wye.forEach(t),uKe=i(L),hf=n(L,"LI",{});var Aye=s(hf);One=n(Aye,"STRONG",{});var Unt=s(One);pKe=r(Unt,"detr"),Unt.forEach(t),_Ke=r(Aye," \u2014 "),SR=n(Aye,"A",{href:!0});var Jnt=s(SR);bKe=r(Jnt,"DetrConfig"),Jnt.forEach(t),vKe=r(Aye," (DETR model)"),Aye.forEach(t),FKe=i(L),uf=n(L,"LI",{});var Lye=s(uf);Vne=n(Lye,"STRONG",{});var Ynt=s(Vne);TKe=r(Ynt,"distilbert"),Ynt.forEach(t),MKe=r(Lye," \u2014 "),RR=n(Lye,"A",{href:!0});var Knt=s(RR);EKe=r(Knt,"DistilBertConfig"),Knt.forEach(t),CKe=r(Lye," (DistilBERT model)"),Lye.forEach(t),wKe=i(L),pf=n(L,"LI",{});var yye=s(pf);Xne=n(yye,"STRONG",{});var Znt=s(Xne);AKe=r(Znt,"dpr"),Znt.forEach(t),LKe=r(yye," \u2014 "),PR=n(yye,"A",{href:!0});var est=s(PR);yKe=r(est,"DPRConfig"),est.forEach(t),xKe=r(yye," (DPR model)"),yye.forEach(t),$Ke=i(L),_f=n(L,"LI",{});var xye=s(_f);zne=n(xye,"STRONG",{});var ost=s(zne);kKe=r(ost,"dpt"),ost.forEach(t),SKe=r(xye," \u2014 "),BR=n(xye,"A",{href:!0});var rst=s(BR);RKe=r(rst,"DPTConfig"),rst.forEach(t),PKe=r(xye," (DPT model)"),xye.forEach(t),BKe=i(L),bf=n(L,"LI",{});var $ye=s(bf);Wne=n($ye,"STRONG",{});var tst=s(Wne);IKe=r(tst,"electra"),tst.forEach(t),NKe=r($ye," \u2014 "),IR=n($ye,"A",{href:!0});var ast=s(IR);qKe=r(ast,"ElectraConfig"),ast.forEach(t),jKe=r($ye," (ELECTRA model)"),$ye.forEach(t),DKe=i(L),vf=n(L,"LI",{});var kye=s(vf);Qne=n(kye,"STRONG",{});var nst=s(Qne);GKe=r(nst,"encoder-decoder"),nst.forEach(t),OKe=r(kye," \u2014 "),NR=n(kye,"A",{href:!0});var sst=s(NR);VKe=r(sst,"EncoderDecoderConfig"),sst.forEach(t),XKe=r(kye," (Encoder decoder model)"),kye.forEach(t),zKe=i(L),Ff=n(L,"LI",{});var Sye=s(Ff);Hne=n(Sye,"STRONG",{});var lst=s(Hne);WKe=r(lst,"flaubert"),lst.forEach(t),QKe=r(Sye," \u2014 "),qR=n(Sye,"A",{href:!0});var ist=s(qR);HKe=r(ist,"FlaubertConfig"),ist.forEach(t),UKe=r(Sye," (FlauBERT model)"),Sye.forEach(t),JKe=i(L),Tf=n(L,"LI",{});var Rye=s(Tf);Une=n(Rye,"STRONG",{});var dst=s(Une);YKe=r(dst,"flava"),dst.forEach(t),KKe=r(Rye," \u2014 "),jR=n(Rye,"A",{href:!0});var cst=s(jR);ZKe=r(cst,"FlavaConfig"),cst.forEach(t),eZe=r(Rye," (FLAVA model)"),Rye.forEach(t),oZe=i(L),Mf=n(L,"LI",{});var Pye=s(Mf);Jne=n(Pye,"STRONG",{});var mst=s(Jne);rZe=r(mst,"fnet"),mst.forEach(t),tZe=r(Pye," \u2014 "),DR=n(Pye,"A",{href:!0});var fst=s(DR);aZe=r(fst,"FNetConfig"),fst.forEach(t),nZe=r(Pye," (FNet model)"),Pye.forEach(t),sZe=i(L),Ef=n(L,"LI",{});var Bye=s(Ef);Yne=n(Bye,"STRONG",{});var gst=s(Yne);lZe=r(gst,"fsmt"),gst.forEach(t),iZe=r(Bye," \u2014 "),GR=n(Bye,"A",{href:!0});var hst=s(GR);dZe=r(hst,"FSMTConfig"),hst.forEach(t),cZe=r(Bye," (FairSeq Machine-Translation model)"),Bye.forEach(t),mZe=i(L),Cf=n(L,"LI",{});var Iye=s(Cf);Kne=n(Iye,"STRONG",{});var ust=s(Kne);fZe=r(ust,"funnel"),ust.forEach(t),gZe=r(Iye," \u2014 "),OR=n(Iye,"A",{href:!0});var pst=s(OR);hZe=r(pst,"FunnelConfig"),pst.forEach(t),uZe=r(Iye," (Funnel Transformer model)"),Iye.forEach(t),pZe=i(L),wf=n(L,"LI",{});var Nye=s(wf);Zne=n(Nye,"STRONG",{});var _st=s(Zne);_Ze=r(_st,"glpn"),_st.forEach(t),bZe=r(Nye," \u2014 "),VR=n(Nye,"A",{href:!0});var bst=s(VR);vZe=r(bst,"GLPNConfig"),bst.forEach(t),FZe=r(Nye," (GLPN model)"),Nye.forEach(t),TZe=i(L),Af=n(L,"LI",{});var qye=s(Af);ese=n(qye,"STRONG",{});var vst=s(ese);MZe=r(vst,"gpt2"),vst.forEach(t),EZe=r(qye," \u2014 "),XR=n(qye,"A",{href:!0});var Fst=s(XR);CZe=r(Fst,"GPT2Config"),Fst.forEach(t),wZe=r(qye," (OpenAI GPT-2 model)"),qye.forEach(t),AZe=i(L),Lf=n(L,"LI",{});var jye=s(Lf);ose=n(jye,"STRONG",{});var Tst=s(ose);LZe=r(Tst,"gpt_neo"),Tst.forEach(t),yZe=r(jye," \u2014 "),zR=n(jye,"A",{href:!0});var Mst=s(zR);xZe=r(Mst,"GPTNeoConfig"),Mst.forEach(t),$Ze=r(jye," (GPT Neo model)"),jye.forEach(t),kZe=i(L),yf=n(L,"LI",{});var Dye=s(yf);rse=n(Dye,"STRONG",{});var Est=s(rse);SZe=r(Est,"gpt_neox"),Est.forEach(t),RZe=r(Dye," \u2014 "),WR=n(Dye,"A",{href:!0});var Cst=s(WR);PZe=r(Cst,"GPTNeoXConfig"),Cst.forEach(t),BZe=r(Dye," (GPT NeoX model)"),Dye.forEach(t),IZe=i(L),xf=n(L,"LI",{});var Gye=s(xf);tse=n(Gye,"STRONG",{});var wst=s(tse);NZe=r(wst,"gptj"),wst.forEach(t),qZe=r(Gye," \u2014 "),QR=n(Gye,"A",{href:!0});var Ast=s(QR);jZe=r(Ast,"GPTJConfig"),Ast.forEach(t),DZe=r(Gye," (GPT-J model)"),Gye.forEach(t),GZe=i(L),$f=n(L,"LI",{});var Oye=s($f);ase=n(Oye,"STRONG",{});var Lst=s(ase);OZe=r(Lst,"groupvit"),Lst.forEach(t),VZe=r(Oye," \u2014 "),HR=n(Oye,"A",{href:!0});var yst=s(HR);XZe=r(yst,"GroupViTConfig"),yst.forEach(t),zZe=r(Oye," (GroupViT model)"),Oye.forEach(t),WZe=i(L),kf=n(L,"LI",{});var Vye=s(kf);nse=n(Vye,"STRONG",{});var xst=s(nse);QZe=r(xst,"hubert"),xst.forEach(t),HZe=r(Vye," \u2014 "),UR=n(Vye,"A",{href:!0});var $st=s(UR);UZe=r($st,"HubertConfig"),$st.forEach(t),JZe=r(Vye," (Hubert model)"),Vye.forEach(t),YZe=i(L),Sf=n(L,"LI",{});var Xye=s(Sf);sse=n(Xye,"STRONG",{});var kst=s(sse);KZe=r(kst,"ibert"),kst.forEach(t),ZZe=r(Xye," \u2014 "),JR=n(Xye,"A",{href:!0});var Sst=s(JR);eeo=r(Sst,"IBertConfig"),Sst.forEach(t),oeo=r(Xye," (I-BERT model)"),Xye.forEach(t),reo=i(L),Rf=n(L,"LI",{});var zye=s(Rf);lse=n(zye,"STRONG",{});var Rst=s(lse);teo=r(Rst,"imagegpt"),Rst.forEach(t),aeo=r(zye," \u2014 "),YR=n(zye,"A",{href:!0});var Pst=s(YR);neo=r(Pst,"ImageGPTConfig"),Pst.forEach(t),seo=r(zye," (ImageGPT model)"),zye.forEach(t),leo=i(L),Pf=n(L,"LI",{});var Wye=s(Pf);ise=n(Wye,"STRONG",{});var Bst=s(ise);ieo=r(Bst,"layoutlm"),Bst.forEach(t),deo=r(Wye," \u2014 "),KR=n(Wye,"A",{href:!0});var Ist=s(KR);ceo=r(Ist,"LayoutLMConfig"),Ist.forEach(t),meo=r(Wye," (LayoutLM model)"),Wye.forEach(t),feo=i(L),Bf=n(L,"LI",{});var Qye=s(Bf);dse=n(Qye,"STRONG",{});var Nst=s(dse);geo=r(Nst,"layoutlmv2"),Nst.forEach(t),heo=r(Qye," \u2014 "),ZR=n(Qye,"A",{href:!0});var qst=s(ZR);ueo=r(qst,"LayoutLMv2Config"),qst.forEach(t),peo=r(Qye," (LayoutLMv2 model)"),Qye.forEach(t),_eo=i(L),If=n(L,"LI",{});var Hye=s(If);cse=n(Hye,"STRONG",{});var jst=s(cse);beo=r(jst,"layoutlmv3"),jst.forEach(t),veo=r(Hye," \u2014 "),eP=n(Hye,"A",{href:!0});var Dst=s(eP);Feo=r(Dst,"LayoutLMv3Config"),Dst.forEach(t),Teo=r(Hye," (LayoutLMv3 model)"),Hye.forEach(t),Meo=i(L),Nf=n(L,"LI",{});var Uye=s(Nf);mse=n(Uye,"STRONG",{});var Gst=s(mse);Eeo=r(Gst,"led"),Gst.forEach(t),Ceo=r(Uye," \u2014 "),oP=n(Uye,"A",{href:!0});var Ost=s(oP);weo=r(Ost,"LEDConfig"),Ost.forEach(t),Aeo=r(Uye," (LED model)"),Uye.forEach(t),Leo=i(L),qf=n(L,"LI",{});var Jye=s(qf);fse=n(Jye,"STRONG",{});var Vst=s(fse);yeo=r(Vst,"levit"),Vst.forEach(t),xeo=r(Jye," \u2014 "),rP=n(Jye,"A",{href:!0});var Xst=s(rP);$eo=r(Xst,"LevitConfig"),Xst.forEach(t),keo=r(Jye," (LeViT model)"),Jye.forEach(t),Seo=i(L),jf=n(L,"LI",{});var Yye=s(jf);gse=n(Yye,"STRONG",{});var zst=s(gse);Reo=r(zst,"longformer"),zst.forEach(t),Peo=r(Yye," \u2014 "),tP=n(Yye,"A",{href:!0});var Wst=s(tP);Beo=r(Wst,"LongformerConfig"),Wst.forEach(t),Ieo=r(Yye," (Longformer model)"),Yye.forEach(t),Neo=i(L),Df=n(L,"LI",{});var Kye=s(Df);hse=n(Kye,"STRONG",{});var Qst=s(hse);qeo=r(Qst,"longt5"),Qst.forEach(t),jeo=r(Kye," \u2014 "),aP=n(Kye,"A",{href:!0});var Hst=s(aP);Deo=r(Hst,"LongT5Config"),Hst.forEach(t),Geo=r(Kye," (LongT5 model)"),Kye.forEach(t),Oeo=i(L),Gf=n(L,"LI",{});var Zye=s(Gf);use=n(Zye,"STRONG",{});var Ust=s(use);Veo=r(Ust,"luke"),Ust.forEach(t),Xeo=r(Zye," \u2014 "),nP=n(Zye,"A",{href:!0});var Jst=s(nP);zeo=r(Jst,"LukeConfig"),Jst.forEach(t),Weo=r(Zye," (LUKE model)"),Zye.forEach(t),Qeo=i(L),Of=n(L,"LI",{});var e8e=s(Of);pse=n(e8e,"STRONG",{});var Yst=s(pse);Heo=r(Yst,"lxmert"),Yst.forEach(t),Ueo=r(e8e," \u2014 "),sP=n(e8e,"A",{href:!0});var Kst=s(sP);Jeo=r(Kst,"LxmertConfig"),Kst.forEach(t),Yeo=r(e8e," (LXMERT model)"),e8e.forEach(t),Keo=i(L),Vf=n(L,"LI",{});var o8e=s(Vf);_se=n(o8e,"STRONG",{});var Zst=s(_se);Zeo=r(Zst,"m2m_100"),Zst.forEach(t),eoo=r(o8e," \u2014 "),lP=n(o8e,"A",{href:!0});var elt=s(lP);ooo=r(elt,"M2M100Config"),elt.forEach(t),roo=r(o8e," (M2M100 model)"),o8e.forEach(t),too=i(L),Xf=n(L,"LI",{});var r8e=s(Xf);bse=n(r8e,"STRONG",{});var olt=s(bse);aoo=r(olt,"marian"),olt.forEach(t),noo=r(r8e," \u2014 "),iP=n(r8e,"A",{href:!0});var rlt=s(iP);soo=r(rlt,"MarianConfig"),rlt.forEach(t),loo=r(r8e," (Marian model)"),r8e.forEach(t),ioo=i(L),zf=n(L,"LI",{});var t8e=s(zf);vse=n(t8e,"STRONG",{});var tlt=s(vse);doo=r(tlt,"maskformer"),tlt.forEach(t),coo=r(t8e," \u2014 "),dP=n(t8e,"A",{href:!0});var alt=s(dP);moo=r(alt,"MaskFormerConfig"),alt.forEach(t),foo=r(t8e," (MaskFormer model)"),t8e.forEach(t),goo=i(L),Wf=n(L,"LI",{});var a8e=s(Wf);Fse=n(a8e,"STRONG",{});var nlt=s(Fse);hoo=r(nlt,"mbart"),nlt.forEach(t),uoo=r(a8e," \u2014 "),cP=n(a8e,"A",{href:!0});var slt=s(cP);poo=r(slt,"MBartConfig"),slt.forEach(t),_oo=r(a8e," (mBART model)"),a8e.forEach(t),boo=i(L),Qf=n(L,"LI",{});var n8e=s(Qf);Tse=n(n8e,"STRONG",{});var llt=s(Tse);voo=r(llt,"mctct"),llt.forEach(t),Foo=r(n8e," \u2014 "),mP=n(n8e,"A",{href:!0});var ilt=s(mP);Too=r(ilt,"MCTCTConfig"),ilt.forEach(t),Moo=r(n8e," (M-CTC-T model)"),n8e.forEach(t),Eoo=i(L),Hf=n(L,"LI",{});var s8e=s(Hf);Mse=n(s8e,"STRONG",{});var dlt=s(Mse);Coo=r(dlt,"megatron-bert"),dlt.forEach(t),woo=r(s8e," \u2014 "),fP=n(s8e,"A",{href:!0});var clt=s(fP);Aoo=r(clt,"MegatronBertConfig"),clt.forEach(t),Loo=r(s8e," (Megatron-BERT model)"),s8e.forEach(t),yoo=i(L),Uf=n(L,"LI",{});var l8e=s(Uf);Ese=n(l8e,"STRONG",{});var mlt=s(Ese);xoo=r(mlt,"mobilebert"),mlt.forEach(t),$oo=r(l8e," \u2014 "),gP=n(l8e,"A",{href:!0});var flt=s(gP);koo=r(flt,"MobileBertConfig"),flt.forEach(t),Soo=r(l8e," (MobileBERT model)"),l8e.forEach(t),Roo=i(L),Jf=n(L,"LI",{});var i8e=s(Jf);Cse=n(i8e,"STRONG",{});var glt=s(Cse);Poo=r(glt,"mobilevit"),glt.forEach(t),Boo=r(i8e," \u2014 "),hP=n(i8e,"A",{href:!0});var hlt=s(hP);Ioo=r(hlt,"MobileViTConfig"),hlt.forEach(t),Noo=r(i8e," (MobileViT model)"),i8e.forEach(t),qoo=i(L),Yf=n(L,"LI",{});var d8e=s(Yf);wse=n(d8e,"STRONG",{});var ult=s(wse);joo=r(ult,"mpnet"),ult.forEach(t),Doo=r(d8e," \u2014 "),uP=n(d8e,"A",{href:!0});var plt=s(uP);Goo=r(plt,"MPNetConfig"),plt.forEach(t),Ooo=r(d8e," (MPNet model)"),d8e.forEach(t),Voo=i(L),Kf=n(L,"LI",{});var c8e=s(Kf);Ase=n(c8e,"STRONG",{});var _lt=s(Ase);Xoo=r(_lt,"mt5"),_lt.forEach(t),zoo=r(c8e," \u2014 "),pP=n(c8e,"A",{href:!0});var blt=s(pP);Woo=r(blt,"MT5Config"),blt.forEach(t),Qoo=r(c8e," (MT5 model)"),c8e.forEach(t),Hoo=i(L),Zf=n(L,"LI",{});var m8e=s(Zf);Lse=n(m8e,"STRONG",{});var vlt=s(Lse);Uoo=r(vlt,"mvp"),vlt.forEach(t),Joo=r(m8e," \u2014 "),_P=n(m8e,"A",{href:!0});var Flt=s(_P);Yoo=r(Flt,"MvpConfig"),Flt.forEach(t),Koo=r(m8e," (MVP model)"),m8e.forEach(t),Zoo=i(L),eg=n(L,"LI",{});var f8e=s(eg);yse=n(f8e,"STRONG",{});var Tlt=s(yse);ero=r(Tlt,"nezha"),Tlt.forEach(t),oro=r(f8e," \u2014 "),bP=n(f8e,"A",{href:!0});var Mlt=s(bP);rro=r(Mlt,"NezhaConfig"),Mlt.forEach(t),tro=r(f8e," (Nezha model)"),f8e.forEach(t),aro=i(L),og=n(L,"LI",{});var g8e=s(og);xse=n(g8e,"STRONG",{});var Elt=s(xse);nro=r(Elt,"nystromformer"),Elt.forEach(t),sro=r(g8e," \u2014 "),vP=n(g8e,"A",{href:!0});var Clt=s(vP);lro=r(Clt,"NystromformerConfig"),Clt.forEach(t),iro=r(g8e," (Nystr\xF6mformer model)"),g8e.forEach(t),dro=i(L),rg=n(L,"LI",{});var h8e=s(rg);$se=n(h8e,"STRONG",{});var wlt=s($se);cro=r(wlt,"openai-gpt"),wlt.forEach(t),mro=r(h8e," \u2014 "),FP=n(h8e,"A",{href:!0});var Alt=s(FP);fro=r(Alt,"OpenAIGPTConfig"),Alt.forEach(t),gro=r(h8e," (OpenAI GPT model)"),h8e.forEach(t),hro=i(L),tg=n(L,"LI",{});var u8e=s(tg);kse=n(u8e,"STRONG",{});var Llt=s(kse);uro=r(Llt,"opt"),Llt.forEach(t),pro=r(u8e," \u2014 "),TP=n(u8e,"A",{href:!0});var ylt=s(TP);_ro=r(ylt,"OPTConfig"),ylt.forEach(t),bro=r(u8e," (OPT model)"),u8e.forEach(t),vro=i(L),ag=n(L,"LI",{});var p8e=s(ag);Sse=n(p8e,"STRONG",{});var xlt=s(Sse);Fro=r(xlt,"owlvit"),xlt.forEach(t),Tro=r(p8e," \u2014 "),MP=n(p8e,"A",{href:!0});var $lt=s(MP);Mro=r($lt,"OwlViTConfig"),$lt.forEach(t),Ero=r(p8e," (OWL-ViT model)"),p8e.forEach(t),Cro=i(L),ng=n(L,"LI",{});var _8e=s(ng);Rse=n(_8e,"STRONG",{});var klt=s(Rse);wro=r(klt,"pegasus"),klt.forEach(t),Aro=r(_8e," \u2014 "),EP=n(_8e,"A",{href:!0});var Slt=s(EP);Lro=r(Slt,"PegasusConfig"),Slt.forEach(t),yro=r(_8e," (Pegasus model)"),_8e.forEach(t),xro=i(L),sg=n(L,"LI",{});var b8e=s(sg);Pse=n(b8e,"STRONG",{});var Rlt=s(Pse);$ro=r(Rlt,"perceiver"),Rlt.forEach(t),kro=r(b8e," \u2014 "),CP=n(b8e,"A",{href:!0});var Plt=s(CP);Sro=r(Plt,"PerceiverConfig"),Plt.forEach(t),Rro=r(b8e," (Perceiver model)"),b8e.forEach(t),Pro=i(L),lg=n(L,"LI",{});var v8e=s(lg);Bse=n(v8e,"STRONG",{});var Blt=s(Bse);Bro=r(Blt,"plbart"),Blt.forEach(t),Iro=r(v8e," \u2014 "),wP=n(v8e,"A",{href:!0});var Ilt=s(wP);Nro=r(Ilt,"PLBartConfig"),Ilt.forEach(t),qro=r(v8e," (PLBart model)"),v8e.forEach(t),jro=i(L),ig=n(L,"LI",{});var F8e=s(ig);Ise=n(F8e,"STRONG",{});var Nlt=s(Ise);Dro=r(Nlt,"poolformer"),Nlt.forEach(t),Gro=r(F8e," \u2014 "),AP=n(F8e,"A",{href:!0});var qlt=s(AP);Oro=r(qlt,"PoolFormerConfig"),qlt.forEach(t),Vro=r(F8e," (PoolFormer model)"),F8e.forEach(t),Xro=i(L),dg=n(L,"LI",{});var T8e=s(dg);Nse=n(T8e,"STRONG",{});var jlt=s(Nse);zro=r(jlt,"prophetnet"),jlt.forEach(t),Wro=r(T8e," \u2014 "),LP=n(T8e,"A",{href:!0});var Dlt=s(LP);Qro=r(Dlt,"ProphetNetConfig"),Dlt.forEach(t),Hro=r(T8e," (ProphetNet model)"),T8e.forEach(t),Uro=i(L),cg=n(L,"LI",{});var M8e=s(cg);qse=n(M8e,"STRONG",{});var Glt=s(qse);Jro=r(Glt,"qdqbert"),Glt.forEach(t),Yro=r(M8e," \u2014 "),yP=n(M8e,"A",{href:!0});var Olt=s(yP);Kro=r(Olt,"QDQBertConfig"),Olt.forEach(t),Zro=r(M8e," (QDQBert model)"),M8e.forEach(t),eto=i(L),mg=n(L,"LI",{});var E8e=s(mg);jse=n(E8e,"STRONG",{});var Vlt=s(jse);oto=r(Vlt,"rag"),Vlt.forEach(t),rto=r(E8e," \u2014 "),xP=n(E8e,"A",{href:!0});var Xlt=s(xP);tto=r(Xlt,"RagConfig"),Xlt.forEach(t),ato=r(E8e," (RAG model)"),E8e.forEach(t),nto=i(L),fg=n(L,"LI",{});var C8e=s(fg);Dse=n(C8e,"STRONG",{});var zlt=s(Dse);sto=r(zlt,"realm"),zlt.forEach(t),lto=r(C8e," \u2014 "),$P=n(C8e,"A",{href:!0});var Wlt=s($P);ito=r(Wlt,"RealmConfig"),Wlt.forEach(t),dto=r(C8e," (REALM model)"),C8e.forEach(t),cto=i(L),gg=n(L,"LI",{});var w8e=s(gg);Gse=n(w8e,"STRONG",{});var Qlt=s(Gse);mto=r(Qlt,"reformer"),Qlt.forEach(t),fto=r(w8e," \u2014 "),kP=n(w8e,"A",{href:!0});var Hlt=s(kP);gto=r(Hlt,"ReformerConfig"),Hlt.forEach(t),hto=r(w8e," (Reformer model)"),w8e.forEach(t),uto=i(L),hg=n(L,"LI",{});var A8e=s(hg);Ose=n(A8e,"STRONG",{});var Ult=s(Ose);pto=r(Ult,"regnet"),Ult.forEach(t),_to=r(A8e," \u2014 "),SP=n(A8e,"A",{href:!0});var Jlt=s(SP);bto=r(Jlt,"RegNetConfig"),Jlt.forEach(t),vto=r(A8e," (RegNet model)"),A8e.forEach(t),Fto=i(L),ug=n(L,"LI",{});var L8e=s(ug);Vse=n(L8e,"STRONG",{});var Ylt=s(Vse);Tto=r(Ylt,"rembert"),Ylt.forEach(t),Mto=r(L8e," \u2014 "),RP=n(L8e,"A",{href:!0});var Klt=s(RP);Eto=r(Klt,"RemBertConfig"),Klt.forEach(t),Cto=r(L8e," (RemBERT model)"),L8e.forEach(t),wto=i(L),pg=n(L,"LI",{});var y8e=s(pg);Xse=n(y8e,"STRONG",{});var Zlt=s(Xse);Ato=r(Zlt,"resnet"),Zlt.forEach(t),Lto=r(y8e," \u2014 "),PP=n(y8e,"A",{href:!0});var eit=s(PP);yto=r(eit,"ResNetConfig"),eit.forEach(t),xto=r(y8e," (ResNet model)"),y8e.forEach(t),$to=i(L),_g=n(L,"LI",{});var x8e=s(_g);zse=n(x8e,"STRONG",{});var oit=s(zse);kto=r(oit,"retribert"),oit.forEach(t),Sto=r(x8e," \u2014 "),BP=n(x8e,"A",{href:!0});var rit=s(BP);Rto=r(rit,"RetriBertConfig"),rit.forEach(t),Pto=r(x8e," (RetriBERT model)"),x8e.forEach(t),Bto=i(L),bg=n(L,"LI",{});var $8e=s(bg);Wse=n($8e,"STRONG",{});var tit=s(Wse);Ito=r(tit,"roberta"),tit.forEach(t),Nto=r($8e," \u2014 "),IP=n($8e,"A",{href:!0});var ait=s(IP);qto=r(ait,"RobertaConfig"),ait.forEach(t),jto=r($8e," (RoBERTa model)"),$8e.forEach(t),Dto=i(L),vg=n(L,"LI",{});var k8e=s(vg);Qse=n(k8e,"STRONG",{});var nit=s(Qse);Gto=r(nit,"roformer"),nit.forEach(t),Oto=r(k8e," \u2014 "),NP=n(k8e,"A",{href:!0});var sit=s(NP);Vto=r(sit,"RoFormerConfig"),sit.forEach(t),Xto=r(k8e," (RoFormer model)"),k8e.forEach(t),zto=i(L),Fg=n(L,"LI",{});var S8e=s(Fg);Hse=n(S8e,"STRONG",{});var lit=s(Hse);Wto=r(lit,"segformer"),lit.forEach(t),Qto=r(S8e," \u2014 "),qP=n(S8e,"A",{href:!0});var iit=s(qP);Hto=r(iit,"SegformerConfig"),iit.forEach(t),Uto=r(S8e," (SegFormer model)"),S8e.forEach(t),Jto=i(L),Tg=n(L,"LI",{});var R8e=s(Tg);Use=n(R8e,"STRONG",{});var dit=s(Use);Yto=r(dit,"sew"),dit.forEach(t),Kto=r(R8e," \u2014 "),jP=n(R8e,"A",{href:!0});var cit=s(jP);Zto=r(cit,"SEWConfig"),cit.forEach(t),eao=r(R8e," (SEW model)"),R8e.forEach(t),oao=i(L),Mg=n(L,"LI",{});var P8e=s(Mg);Jse=n(P8e,"STRONG",{});var mit=s(Jse);rao=r(mit,"sew-d"),mit.forEach(t),tao=r(P8e," \u2014 "),DP=n(P8e,"A",{href:!0});var fit=s(DP);aao=r(fit,"SEWDConfig"),fit.forEach(t),nao=r(P8e," (SEW-D model)"),P8e.forEach(t),sao=i(L),Eg=n(L,"LI",{});var B8e=s(Eg);Yse=n(B8e,"STRONG",{});var git=s(Yse);lao=r(git,"speech-encoder-decoder"),git.forEach(t),iao=r(B8e," \u2014 "),GP=n(B8e,"A",{href:!0});var hit=s(GP);dao=r(hit,"SpeechEncoderDecoderConfig"),hit.forEach(t),cao=r(B8e," (Speech Encoder decoder model)"),B8e.forEach(t),mao=i(L),Cg=n(L,"LI",{});var I8e=s(Cg);Kse=n(I8e,"STRONG",{});var uit=s(Kse);fao=r(uit,"speech_to_text"),uit.forEach(t),gao=r(I8e," \u2014 "),OP=n(I8e,"A",{href:!0});var pit=s(OP);hao=r(pit,"Speech2TextConfig"),pit.forEach(t),uao=r(I8e," (Speech2Text model)"),I8e.forEach(t),pao=i(L),wg=n(L,"LI",{});var N8e=s(wg);Zse=n(N8e,"STRONG",{});var _it=s(Zse);_ao=r(_it,"speech_to_text_2"),_it.forEach(t),bao=r(N8e," \u2014 "),VP=n(N8e,"A",{href:!0});var bit=s(VP);vao=r(bit,"Speech2Text2Config"),bit.forEach(t),Fao=r(N8e," (Speech2Text2 model)"),N8e.forEach(t),Tao=i(L),Ag=n(L,"LI",{});var q8e=s(Ag);ele=n(q8e,"STRONG",{});var vit=s(ele);Mao=r(vit,"splinter"),vit.forEach(t),Eao=r(q8e," \u2014 "),XP=n(q8e,"A",{href:!0});var Fit=s(XP);Cao=r(Fit,"SplinterConfig"),Fit.forEach(t),wao=r(q8e," (Splinter model)"),q8e.forEach(t),Aao=i(L),Lg=n(L,"LI",{});var j8e=s(Lg);ole=n(j8e,"STRONG",{});var Tit=s(ole);Lao=r(Tit,"squeezebert"),Tit.forEach(t),yao=r(j8e," \u2014 "),zP=n(j8e,"A",{href:!0});var Mit=s(zP);xao=r(Mit,"SqueezeBertConfig"),Mit.forEach(t),$ao=r(j8e," (SqueezeBERT model)"),j8e.forEach(t),kao=i(L),yg=n(L,"LI",{});var D8e=s(yg);rle=n(D8e,"STRONG",{});var Eit=s(rle);Sao=r(Eit,"swin"),Eit.forEach(t),Rao=r(D8e," \u2014 "),WP=n(D8e,"A",{href:!0});var Cit=s(WP);Pao=r(Cit,"SwinConfig"),Cit.forEach(t),Bao=r(D8e," (Swin Transformer model)"),D8e.forEach(t),Iao=i(L),xg=n(L,"LI",{});var G8e=s(xg);tle=n(G8e,"STRONG",{});var wit=s(tle);Nao=r(wit,"swinv2"),wit.forEach(t),qao=r(G8e," \u2014 "),QP=n(G8e,"A",{href:!0});var Ait=s(QP);jao=r(Ait,"Swinv2Config"),Ait.forEach(t),Dao=r(G8e," (Swin Transformer V2 model)"),G8e.forEach(t),Gao=i(L),$g=n(L,"LI",{});var O8e=s($g);ale=n(O8e,"STRONG",{});var Lit=s(ale);Oao=r(Lit,"t5"),Lit.forEach(t),Vao=r(O8e," \u2014 "),HP=n(O8e,"A",{href:!0});var yit=s(HP);Xao=r(yit,"T5Config"),yit.forEach(t),zao=r(O8e," (T5 model)"),O8e.forEach(t),Wao=i(L),kg=n(L,"LI",{});var V8e=s(kg);nle=n(V8e,"STRONG",{});var xit=s(nle);Qao=r(xit,"tapas"),xit.forEach(t),Hao=r(V8e," \u2014 "),UP=n(V8e,"A",{href:!0});var $it=s(UP);Uao=r($it,"TapasConfig"),$it.forEach(t),Jao=r(V8e," (TAPAS model)"),V8e.forEach(t),Yao=i(L),Sg=n(L,"LI",{});var X8e=s(Sg);sle=n(X8e,"STRONG",{});var kit=s(sle);Kao=r(kit,"trajectory_transformer"),kit.forEach(t),Zao=r(X8e," \u2014 "),JP=n(X8e,"A",{href:!0});var Sit=s(JP);eno=r(Sit,"TrajectoryTransformerConfig"),Sit.forEach(t),ono=r(X8e," (Trajectory Transformer model)"),X8e.forEach(t),rno=i(L),Rg=n(L,"LI",{});var z8e=s(Rg);lle=n(z8e,"STRONG",{});var Rit=s(lle);tno=r(Rit,"transfo-xl"),Rit.forEach(t),ano=r(z8e," \u2014 "),YP=n(z8e,"A",{href:!0});var Pit=s(YP);nno=r(Pit,"TransfoXLConfig"),Pit.forEach(t),sno=r(z8e," (Transformer-XL model)"),z8e.forEach(t),lno=i(L),Pg=n(L,"LI",{});var W8e=s(Pg);ile=n(W8e,"STRONG",{});var Bit=s(ile);ino=r(Bit,"trocr"),Bit.forEach(t),dno=r(W8e," \u2014 "),KP=n(W8e,"A",{href:!0});var Iit=s(KP);cno=r(Iit,"TrOCRConfig"),Iit.forEach(t),mno=r(W8e," (TrOCR model)"),W8e.forEach(t),fno=i(L),Bg=n(L,"LI",{});var Q8e=s(Bg);dle=n(Q8e,"STRONG",{});var Nit=s(dle);gno=r(Nit,"unispeech"),Nit.forEach(t),hno=r(Q8e," \u2014 "),ZP=n(Q8e,"A",{href:!0});var qit=s(ZP);uno=r(qit,"UniSpeechConfig"),qit.forEach(t),pno=r(Q8e," (UniSpeech model)"),Q8e.forEach(t),_no=i(L),Ig=n(L,"LI",{});var H8e=s(Ig);cle=n(H8e,"STRONG",{});var jit=s(cle);bno=r(jit,"unispeech-sat"),jit.forEach(t),vno=r(H8e," \u2014 "),eB=n(H8e,"A",{href:!0});var Dit=s(eB);Fno=r(Dit,"UniSpeechSatConfig"),Dit.forEach(t),Tno=r(H8e," (UniSpeechSat model)"),H8e.forEach(t),Mno=i(L),Ng=n(L,"LI",{});var U8e=s(Ng);mle=n(U8e,"STRONG",{});var Git=s(mle);Eno=r(Git,"van"),Git.forEach(t),Cno=r(U8e," \u2014 "),oB=n(U8e,"A",{href:!0});var Oit=s(oB);wno=r(Oit,"VanConfig"),Oit.forEach(t),Ano=r(U8e," (VAN model)"),U8e.forEach(t),Lno=i(L),qg=n(L,"LI",{});var J8e=s(qg);fle=n(J8e,"STRONG",{});var Vit=s(fle);yno=r(Vit,"vilt"),Vit.forEach(t),xno=r(J8e," \u2014 "),rB=n(J8e,"A",{href:!0});var Xit=s(rB);$no=r(Xit,"ViltConfig"),Xit.forEach(t),kno=r(J8e," (ViLT model)"),J8e.forEach(t),Sno=i(L),jg=n(L,"LI",{});var Y8e=s(jg);gle=n(Y8e,"STRONG",{});var zit=s(gle);Rno=r(zit,"vision-encoder-decoder"),zit.forEach(t),Pno=r(Y8e," \u2014 "),tB=n(Y8e,"A",{href:!0});var Wit=s(tB);Bno=r(Wit,"VisionEncoderDecoderConfig"),Wit.forEach(t),Ino=r(Y8e," (Vision Encoder decoder model)"),Y8e.forEach(t),Nno=i(L),Dg=n(L,"LI",{});var K8e=s(Dg);hle=n(K8e,"STRONG",{});var Qit=s(hle);qno=r(Qit,"vision-text-dual-encoder"),Qit.forEach(t),jno=r(K8e," \u2014 "),aB=n(K8e,"A",{href:!0});var Hit=s(aB);Dno=r(Hit,"VisionTextDualEncoderConfig"),Hit.forEach(t),Gno=r(K8e," (VisionTextDualEncoder model)"),K8e.forEach(t),Ono=i(L),Gg=n(L,"LI",{});var Z8e=s(Gg);ule=n(Z8e,"STRONG",{});var Uit=s(ule);Vno=r(Uit,"visual_bert"),Uit.forEach(t),Xno=r(Z8e," \u2014 "),nB=n(Z8e,"A",{href:!0});var Jit=s(nB);zno=r(Jit,"VisualBertConfig"),Jit.forEach(t),Wno=r(Z8e," (VisualBERT model)"),Z8e.forEach(t),Qno=i(L),Og=n(L,"LI",{});var e9e=s(Og);ple=n(e9e,"STRONG",{});var Yit=s(ple);Hno=r(Yit,"vit"),Yit.forEach(t),Uno=r(e9e," \u2014 "),sB=n(e9e,"A",{href:!0});var Kit=s(sB);Jno=r(Kit,"ViTConfig"),Kit.forEach(t),Yno=r(e9e," (ViT model)"),e9e.forEach(t),Kno=i(L),Vg=n(L,"LI",{});var o9e=s(Vg);_le=n(o9e,"STRONG",{});var Zit=s(_le);Zno=r(Zit,"vit_mae"),Zit.forEach(t),eso=r(o9e," \u2014 "),lB=n(o9e,"A",{href:!0});var edt=s(lB);oso=r(edt,"ViTMAEConfig"),edt.forEach(t),rso=r(o9e," (ViTMAE model)"),o9e.forEach(t),tso=i(L),Xg=n(L,"LI",{});var r9e=s(Xg);ble=n(r9e,"STRONG",{});var odt=s(ble);aso=r(odt,"wav2vec2"),odt.forEach(t),nso=r(r9e," \u2014 "),iB=n(r9e,"A",{href:!0});var rdt=s(iB);sso=r(rdt,"Wav2Vec2Config"),rdt.forEach(t),lso=r(r9e," (Wav2Vec2 model)"),r9e.forEach(t),iso=i(L),zg=n(L,"LI",{});var t9e=s(zg);vle=n(t9e,"STRONG",{});var tdt=s(vle);dso=r(tdt,"wav2vec2-conformer"),tdt.forEach(t),cso=r(t9e," \u2014 "),dB=n(t9e,"A",{href:!0});var adt=s(dB);mso=r(adt,"Wav2Vec2ConformerConfig"),adt.forEach(t),fso=r(t9e," (Wav2Vec2-Conformer model)"),t9e.forEach(t),gso=i(L),Wg=n(L,"LI",{});var a9e=s(Wg);Fle=n(a9e,"STRONG",{});var ndt=s(Fle);hso=r(ndt,"wavlm"),ndt.forEach(t),uso=r(a9e," \u2014 "),cB=n(a9e,"A",{href:!0});var sdt=s(cB);pso=r(sdt,"WavLMConfig"),sdt.forEach(t),_so=r(a9e," (WavLM model)"),a9e.forEach(t),bso=i(L),Qg=n(L,"LI",{});var n9e=s(Qg);Tle=n(n9e,"STRONG",{});var ldt=s(Tle);vso=r(ldt,"xglm"),ldt.forEach(t),Fso=r(n9e," \u2014 "),mB=n(n9e,"A",{href:!0});var idt=s(mB);Tso=r(idt,"XGLMConfig"),idt.forEach(t),Mso=r(n9e," (XGLM model)"),n9e.forEach(t),Eso=i(L),Hg=n(L,"LI",{});var s9e=s(Hg);Mle=n(s9e,"STRONG",{});var ddt=s(Mle);Cso=r(ddt,"xlm"),ddt.forEach(t),wso=r(s9e," \u2014 "),fB=n(s9e,"A",{href:!0});var cdt=s(fB);Aso=r(cdt,"XLMConfig"),cdt.forEach(t),Lso=r(s9e," (XLM model)"),s9e.forEach(t),yso=i(L),Ug=n(L,"LI",{});var l9e=s(Ug);Ele=n(l9e,"STRONG",{});var mdt=s(Ele);xso=r(mdt,"xlm-prophetnet"),mdt.forEach(t),$so=r(l9e," \u2014 "),gB=n(l9e,"A",{href:!0});var fdt=s(gB);kso=r(fdt,"XLMProphetNetConfig"),fdt.forEach(t),Sso=r(l9e," (XLM-ProphetNet model)"),l9e.forEach(t),Rso=i(L),Jg=n(L,"LI",{});var i9e=s(Jg);Cle=n(i9e,"STRONG",{});var gdt=s(Cle);Pso=r(gdt,"xlm-roberta"),gdt.forEach(t),Bso=r(i9e," \u2014 "),hB=n(i9e,"A",{href:!0});var hdt=s(hB);Iso=r(hdt,"XLMRobertaConfig"),hdt.forEach(t),Nso=r(i9e," (XLM-RoBERTa model)"),i9e.forEach(t),qso=i(L),Yg=n(L,"LI",{});var d9e=s(Yg);wle=n(d9e,"STRONG",{});var udt=s(wle);jso=r(udt,"xlm-roberta-xl"),udt.forEach(t),Dso=r(d9e," \u2014 "),uB=n(d9e,"A",{href:!0});var pdt=s(uB);Gso=r(pdt,"XLMRobertaXLConfig"),pdt.forEach(t),Oso=r(d9e," (XLM-RoBERTa-XL model)"),d9e.forEach(t),Vso=i(L),Kg=n(L,"LI",{});var c9e=s(Kg);Ale=n(c9e,"STRONG",{});var _dt=s(Ale);Xso=r(_dt,"xlnet"),_dt.forEach(t),zso=r(c9e," \u2014 "),pB=n(c9e,"A",{href:!0});var bdt=s(pB);Wso=r(bdt,"XLNetConfig"),bdt.forEach(t),Qso=r(c9e," (XLNet model)"),c9e.forEach(t),Hso=i(L),Zg=n(L,"LI",{});var m9e=s(Zg);Lle=n(m9e,"STRONG",{});var vdt=s(Lle);Uso=r(vdt,"yolos"),vdt.forEach(t),Jso=r(m9e," \u2014 "),_B=n(m9e,"A",{href:!0});var Fdt=s(_B);Yso=r(Fdt,"YolosConfig"),Fdt.forEach(t),Kso=r(m9e," (YOLOS model)"),m9e.forEach(t),Zso=i(L),eh=n(L,"LI",{});var f9e=s(eh);yle=n(f9e,"STRONG",{});var Tdt=s(yle);elo=r(Tdt,"yoso"),Tdt.forEach(t),olo=r(f9e," \u2014 "),bB=n(f9e,"A",{href:!0});var Mdt=s(bB);rlo=r(Mdt,"YosoConfig"),Mdt.forEach(t),tlo=r(f9e," (YOSO model)"),f9e.forEach(t),L.forEach(t),alo=i(st),T(oh.$$.fragment,st),st.forEach(t),nlo=i(nt),rh=n(nt,"DIV",{class:!0});var uQe=s(rh);T(yy.$$.fragment,uQe),slo=i(uQe),xle=n(uQe,"P",{});var Edt=s(xle);llo=r(Edt,"Register a new configuration for this class."),Edt.forEach(t),uQe.forEach(t),nt.forEach(t),pze=i(m),Di=n(m,"H2",{class:!0});var pQe=s(Di);th=n(pQe,"A",{id:!0,class:!0,href:!0});var Cdt=s(th);$le=n(Cdt,"SPAN",{});var wdt=s($le);T(xy.$$.fragment,wdt),wdt.forEach(t),Cdt.forEach(t),ilo=i(pQe),kle=n(pQe,"SPAN",{});var Adt=s(kle);dlo=r(Adt,"AutoTokenizer"),Adt.forEach(t),pQe.forEach(t),_ze=i(m),yo=n(m,"DIV",{class:!0});var ol=s(yo);T($y.$$.fragment,ol),clo=i(ol),ky=n(ol,"P",{});var _Qe=s(ky);mlo=r(_Qe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),vB=n(_Qe,"A",{href:!0});var Ldt=s(vB);flo=r(Ldt,"AutoTokenizer.from_pretrained()"),Ldt.forEach(t),glo=r(_Qe," class method."),_Qe.forEach(t),hlo=i(ol),Sy=n(ol,"P",{});var bQe=s(Sy);ulo=r(bQe,"This class cannot be instantiated directly using "),Sle=n(bQe,"CODE",{});var ydt=s(Sle);plo=r(ydt,"__init__()"),ydt.forEach(t),_lo=r(bQe," (throws an error)."),bQe.forEach(t),blo=i(ol),xr=n(ol,"DIV",{class:!0});var rl=s(xr);T(Ry.$$.fragment,rl),vlo=i(rl),Rle=n(rl,"P",{});var xdt=s(Rle);Flo=r(xdt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),xdt.forEach(t),Tlo=i(rl),Pa=n(rl,"P",{});var M7=s(Pa);Mlo=r(M7,"The tokenizer class to instantiate is selected based on the "),Ple=n(M7,"CODE",{});var $dt=s(Ple);Elo=r($dt,"model_type"),$dt.forEach(t),Clo=r(M7,` property of the config object (either
passed as an argument or loaded from `),Ble=n(M7,"CODE",{});var kdt=s(Ble);wlo=r(kdt,"pretrained_model_name_or_path"),kdt.forEach(t),Alo=r(M7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ile=n(M7,"CODE",{});var Sdt=s(Ile);Llo=r(Sdt,"pretrained_model_name_or_path"),Sdt.forEach(t),ylo=r(M7,":"),M7.forEach(t),xlo=i(rl),k=n(rl,"UL",{});var S=s(k);Dn=n(S,"LI",{});var jk=s(Dn);Nle=n(jk,"STRONG",{});var Rdt=s(Nle);$lo=r(Rdt,"albert"),Rdt.forEach(t),klo=r(jk," \u2014 "),FB=n(jk,"A",{href:!0});var Pdt=s(FB);Slo=r(Pdt,"AlbertTokenizer"),Pdt.forEach(t),Rlo=r(jk," or "),TB=n(jk,"A",{href:!0});var Bdt=s(TB);Plo=r(Bdt,"AlbertTokenizerFast"),Bdt.forEach(t),Blo=r(jk," (ALBERT model)"),jk.forEach(t),Ilo=i(S),Gn=n(S,"LI",{});var Dk=s(Gn);qle=n(Dk,"STRONG",{});var Idt=s(qle);Nlo=r(Idt,"bart"),Idt.forEach(t),qlo=r(Dk," \u2014 "),MB=n(Dk,"A",{href:!0});var Ndt=s(MB);jlo=r(Ndt,"BartTokenizer"),Ndt.forEach(t),Dlo=r(Dk," or "),EB=n(Dk,"A",{href:!0});var qdt=s(EB);Glo=r(qdt,"BartTokenizerFast"),qdt.forEach(t),Olo=r(Dk," (BART model)"),Dk.forEach(t),Vlo=i(S),On=n(S,"LI",{});var Gk=s(On);jle=n(Gk,"STRONG",{});var jdt=s(jle);Xlo=r(jdt,"barthez"),jdt.forEach(t),zlo=r(Gk," \u2014 "),CB=n(Gk,"A",{href:!0});var Ddt=s(CB);Wlo=r(Ddt,"BarthezTokenizer"),Ddt.forEach(t),Qlo=r(Gk," or "),wB=n(Gk,"A",{href:!0});var Gdt=s(wB);Hlo=r(Gdt,"BarthezTokenizerFast"),Gdt.forEach(t),Ulo=r(Gk," (BARThez model)"),Gk.forEach(t),Jlo=i(S),ah=n(S,"LI",{});var g9e=s(ah);Dle=n(g9e,"STRONG",{});var Odt=s(Dle);Ylo=r(Odt,"bartpho"),Odt.forEach(t),Klo=r(g9e," \u2014 "),AB=n(g9e,"A",{href:!0});var Vdt=s(AB);Zlo=r(Vdt,"BartphoTokenizer"),Vdt.forEach(t),eio=r(g9e," (BARTpho model)"),g9e.forEach(t),oio=i(S),Vn=n(S,"LI",{});var Ok=s(Vn);Gle=n(Ok,"STRONG",{});var Xdt=s(Gle);rio=r(Xdt,"bert"),Xdt.forEach(t),tio=r(Ok," \u2014 "),LB=n(Ok,"A",{href:!0});var zdt=s(LB);aio=r(zdt,"BertTokenizer"),zdt.forEach(t),nio=r(Ok," or "),yB=n(Ok,"A",{href:!0});var Wdt=s(yB);sio=r(Wdt,"BertTokenizerFast"),Wdt.forEach(t),lio=r(Ok," (BERT model)"),Ok.forEach(t),iio=i(S),nh=n(S,"LI",{});var h9e=s(nh);Ole=n(h9e,"STRONG",{});var Qdt=s(Ole);dio=r(Qdt,"bert-generation"),Qdt.forEach(t),cio=r(h9e," \u2014 "),xB=n(h9e,"A",{href:!0});var Hdt=s(xB);mio=r(Hdt,"BertGenerationTokenizer"),Hdt.forEach(t),fio=r(h9e," (Bert Generation model)"),h9e.forEach(t),gio=i(S),sh=n(S,"LI",{});var u9e=s(sh);Vle=n(u9e,"STRONG",{});var Udt=s(Vle);hio=r(Udt,"bert-japanese"),Udt.forEach(t),uio=r(u9e," \u2014 "),$B=n(u9e,"A",{href:!0});var Jdt=s($B);pio=r(Jdt,"BertJapaneseTokenizer"),Jdt.forEach(t),_io=r(u9e," (BertJapanese model)"),u9e.forEach(t),bio=i(S),lh=n(S,"LI",{});var p9e=s(lh);Xle=n(p9e,"STRONG",{});var Ydt=s(Xle);vio=r(Ydt,"bertweet"),Ydt.forEach(t),Fio=r(p9e," \u2014 "),kB=n(p9e,"A",{href:!0});var Kdt=s(kB);Tio=r(Kdt,"BertweetTokenizer"),Kdt.forEach(t),Mio=r(p9e," (BERTweet model)"),p9e.forEach(t),Eio=i(S),Xn=n(S,"LI",{});var Vk=s(Xn);zle=n(Vk,"STRONG",{});var Zdt=s(zle);Cio=r(Zdt,"big_bird"),Zdt.forEach(t),wio=r(Vk," \u2014 "),SB=n(Vk,"A",{href:!0});var ect=s(SB);Aio=r(ect,"BigBirdTokenizer"),ect.forEach(t),Lio=r(Vk," or "),RB=n(Vk,"A",{href:!0});var oct=s(RB);yio=r(oct,"BigBirdTokenizerFast"),oct.forEach(t),xio=r(Vk," (BigBird model)"),Vk.forEach(t),$io=i(S),zn=n(S,"LI",{});var Xk=s(zn);Wle=n(Xk,"STRONG",{});var rct=s(Wle);kio=r(rct,"bigbird_pegasus"),rct.forEach(t),Sio=r(Xk," \u2014 "),PB=n(Xk,"A",{href:!0});var tct=s(PB);Rio=r(tct,"PegasusTokenizer"),tct.forEach(t),Pio=r(Xk," or "),BB=n(Xk,"A",{href:!0});var act=s(BB);Bio=r(act,"PegasusTokenizerFast"),act.forEach(t),Iio=r(Xk," (BigBird-Pegasus model)"),Xk.forEach(t),Nio=i(S),Wn=n(S,"LI",{});var zk=s(Wn);Qle=n(zk,"STRONG",{});var nct=s(Qle);qio=r(nct,"blenderbot"),nct.forEach(t),jio=r(zk," \u2014 "),IB=n(zk,"A",{href:!0});var sct=s(IB);Dio=r(sct,"BlenderbotTokenizer"),sct.forEach(t),Gio=r(zk," or "),NB=n(zk,"A",{href:!0});var lct=s(NB);Oio=r(lct,"BlenderbotTokenizerFast"),lct.forEach(t),Vio=r(zk," (Blenderbot model)"),zk.forEach(t),Xio=i(S),ih=n(S,"LI",{});var _9e=s(ih);Hle=n(_9e,"STRONG",{});var ict=s(Hle);zio=r(ict,"blenderbot-small"),ict.forEach(t),Wio=r(_9e," \u2014 "),qB=n(_9e,"A",{href:!0});var dct=s(qB);Qio=r(dct,"BlenderbotSmallTokenizer"),dct.forEach(t),Hio=r(_9e," (BlenderbotSmall model)"),_9e.forEach(t),Uio=i(S),dh=n(S,"LI",{});var b9e=s(dh);Ule=n(b9e,"STRONG",{});var cct=s(Ule);Jio=r(cct,"bloom"),cct.forEach(t),Yio=r(b9e," \u2014 "),jB=n(b9e,"A",{href:!0});var mct=s(jB);Kio=r(mct,"BloomTokenizerFast"),mct.forEach(t),Zio=r(b9e," (BLOOM model)"),b9e.forEach(t),edo=i(S),ch=n(S,"LI",{});var v9e=s(ch);Jle=n(v9e,"STRONG",{});var fct=s(Jle);odo=r(fct,"byt5"),fct.forEach(t),rdo=r(v9e," \u2014 "),DB=n(v9e,"A",{href:!0});var gct=s(DB);tdo=r(gct,"ByT5Tokenizer"),gct.forEach(t),ado=r(v9e," (ByT5 model)"),v9e.forEach(t),ndo=i(S),Qn=n(S,"LI",{});var Wk=s(Qn);Yle=n(Wk,"STRONG",{});var hct=s(Yle);sdo=r(hct,"camembert"),hct.forEach(t),ldo=r(Wk," \u2014 "),GB=n(Wk,"A",{href:!0});var uct=s(GB);ido=r(uct,"CamembertTokenizer"),uct.forEach(t),ddo=r(Wk," or "),OB=n(Wk,"A",{href:!0});var pct=s(OB);cdo=r(pct,"CamembertTokenizerFast"),pct.forEach(t),mdo=r(Wk," (CamemBERT model)"),Wk.forEach(t),fdo=i(S),mh=n(S,"LI",{});var F9e=s(mh);Kle=n(F9e,"STRONG",{});var _ct=s(Kle);gdo=r(_ct,"canine"),_ct.forEach(t),hdo=r(F9e," \u2014 "),VB=n(F9e,"A",{href:!0});var bct=s(VB);udo=r(bct,"CanineTokenizer"),bct.forEach(t),pdo=r(F9e," (CANINE model)"),F9e.forEach(t),_do=i(S),Hn=n(S,"LI",{});var Qk=s(Hn);Zle=n(Qk,"STRONG",{});var vct=s(Zle);bdo=r(vct,"clip"),vct.forEach(t),vdo=r(Qk," \u2014 "),XB=n(Qk,"A",{href:!0});var Fct=s(XB);Fdo=r(Fct,"CLIPTokenizer"),Fct.forEach(t),Tdo=r(Qk," or "),zB=n(Qk,"A",{href:!0});var Tct=s(zB);Mdo=r(Tct,"CLIPTokenizerFast"),Tct.forEach(t),Edo=r(Qk," (CLIP model)"),Qk.forEach(t),Cdo=i(S),Un=n(S,"LI",{});var Hk=s(Un);eie=n(Hk,"STRONG",{});var Mct=s(eie);wdo=r(Mct,"codegen"),Mct.forEach(t),Ado=r(Hk," \u2014 "),WB=n(Hk,"A",{href:!0});var Ect=s(WB);Ldo=r(Ect,"CodeGenTokenizer"),Ect.forEach(t),ydo=r(Hk," or "),QB=n(Hk,"A",{href:!0});var Cct=s(QB);xdo=r(Cct,"CodeGenTokenizerFast"),Cct.forEach(t),$do=r(Hk," (CodeGen model)"),Hk.forEach(t),kdo=i(S),Jn=n(S,"LI",{});var Uk=s(Jn);oie=n(Uk,"STRONG",{});var wct=s(oie);Sdo=r(wct,"convbert"),wct.forEach(t),Rdo=r(Uk," \u2014 "),HB=n(Uk,"A",{href:!0});var Act=s(HB);Pdo=r(Act,"ConvBertTokenizer"),Act.forEach(t),Bdo=r(Uk," or "),UB=n(Uk,"A",{href:!0});var Lct=s(UB);Ido=r(Lct,"ConvBertTokenizerFast"),Lct.forEach(t),Ndo=r(Uk," (ConvBERT model)"),Uk.forEach(t),qdo=i(S),Yn=n(S,"LI",{});var Jk=s(Yn);rie=n(Jk,"STRONG",{});var yct=s(rie);jdo=r(yct,"cpm"),yct.forEach(t),Ddo=r(Jk," \u2014 "),JB=n(Jk,"A",{href:!0});var xct=s(JB);Gdo=r(xct,"CpmTokenizer"),xct.forEach(t),Odo=r(Jk," or "),YB=n(Jk,"A",{href:!0});var $ct=s(YB);Vdo=r($ct,"CpmTokenizerFast"),$ct.forEach(t),Xdo=r(Jk," (CPM model)"),Jk.forEach(t),zdo=i(S),fh=n(S,"LI",{});var T9e=s(fh);tie=n(T9e,"STRONG",{});var kct=s(tie);Wdo=r(kct,"ctrl"),kct.forEach(t),Qdo=r(T9e," \u2014 "),KB=n(T9e,"A",{href:!0});var Sct=s(KB);Hdo=r(Sct,"CTRLTokenizer"),Sct.forEach(t),Udo=r(T9e," (CTRL model)"),T9e.forEach(t),Jdo=i(S),Kn=n(S,"LI",{});var Yk=s(Kn);aie=n(Yk,"STRONG",{});var Rct=s(aie);Ydo=r(Rct,"data2vec-text"),Rct.forEach(t),Kdo=r(Yk," \u2014 "),ZB=n(Yk,"A",{href:!0});var Pct=s(ZB);Zdo=r(Pct,"RobertaTokenizer"),Pct.forEach(t),eco=r(Yk," or "),eI=n(Yk,"A",{href:!0});var Bct=s(eI);oco=r(Bct,"RobertaTokenizerFast"),Bct.forEach(t),rco=r(Yk," (Data2VecText model)"),Yk.forEach(t),tco=i(S),Zn=n(S,"LI",{});var Kk=s(Zn);nie=n(Kk,"STRONG",{});var Ict=s(nie);aco=r(Ict,"deberta"),Ict.forEach(t),nco=r(Kk," \u2014 "),oI=n(Kk,"A",{href:!0});var Nct=s(oI);sco=r(Nct,"DebertaTokenizer"),Nct.forEach(t),lco=r(Kk," or "),rI=n(Kk,"A",{href:!0});var qct=s(rI);ico=r(qct,"DebertaTokenizerFast"),qct.forEach(t),dco=r(Kk," (DeBERTa model)"),Kk.forEach(t),cco=i(S),es=n(S,"LI",{});var Zk=s(es);sie=n(Zk,"STRONG",{});var jct=s(sie);mco=r(jct,"deberta-v2"),jct.forEach(t),fco=r(Zk," \u2014 "),tI=n(Zk,"A",{href:!0});var Dct=s(tI);gco=r(Dct,"DebertaV2Tokenizer"),Dct.forEach(t),hco=r(Zk," or "),aI=n(Zk,"A",{href:!0});var Gct=s(aI);uco=r(Gct,"DebertaV2TokenizerFast"),Gct.forEach(t),pco=r(Zk," (DeBERTa-v2 model)"),Zk.forEach(t),_co=i(S),os=n(S,"LI",{});var eS=s(os);lie=n(eS,"STRONG",{});var Oct=s(lie);bco=r(Oct,"distilbert"),Oct.forEach(t),vco=r(eS," \u2014 "),nI=n(eS,"A",{href:!0});var Vct=s(nI);Fco=r(Vct,"DistilBertTokenizer"),Vct.forEach(t),Tco=r(eS," or "),sI=n(eS,"A",{href:!0});var Xct=s(sI);Mco=r(Xct,"DistilBertTokenizerFast"),Xct.forEach(t),Eco=r(eS," (DistilBERT model)"),eS.forEach(t),Cco=i(S),rs=n(S,"LI",{});var oS=s(rs);iie=n(oS,"STRONG",{});var zct=s(iie);wco=r(zct,"dpr"),zct.forEach(t),Aco=r(oS," \u2014 "),lI=n(oS,"A",{href:!0});var Wct=s(lI);Lco=r(Wct,"DPRQuestionEncoderTokenizer"),Wct.forEach(t),yco=r(oS," or "),iI=n(oS,"A",{href:!0});var Qct=s(iI);xco=r(Qct,"DPRQuestionEncoderTokenizerFast"),Qct.forEach(t),$co=r(oS," (DPR model)"),oS.forEach(t),kco=i(S),ts=n(S,"LI",{});var rS=s(ts);die=n(rS,"STRONG",{});var Hct=s(die);Sco=r(Hct,"electra"),Hct.forEach(t),Rco=r(rS," \u2014 "),dI=n(rS,"A",{href:!0});var Uct=s(dI);Pco=r(Uct,"ElectraTokenizer"),Uct.forEach(t),Bco=r(rS," or "),cI=n(rS,"A",{href:!0});var Jct=s(cI);Ico=r(Jct,"ElectraTokenizerFast"),Jct.forEach(t),Nco=r(rS," (ELECTRA model)"),rS.forEach(t),qco=i(S),gh=n(S,"LI",{});var M9e=s(gh);cie=n(M9e,"STRONG",{});var Yct=s(cie);jco=r(Yct,"flaubert"),Yct.forEach(t),Dco=r(M9e," \u2014 "),mI=n(M9e,"A",{href:!0});var Kct=s(mI);Gco=r(Kct,"FlaubertTokenizer"),Kct.forEach(t),Oco=r(M9e," (FlauBERT model)"),M9e.forEach(t),Vco=i(S),as=n(S,"LI",{});var tS=s(as);mie=n(tS,"STRONG",{});var Zct=s(mie);Xco=r(Zct,"fnet"),Zct.forEach(t),zco=r(tS," \u2014 "),fI=n(tS,"A",{href:!0});var emt=s(fI);Wco=r(emt,"FNetTokenizer"),emt.forEach(t),Qco=r(tS," or "),gI=n(tS,"A",{href:!0});var omt=s(gI);Hco=r(omt,"FNetTokenizerFast"),omt.forEach(t),Uco=r(tS," (FNet model)"),tS.forEach(t),Jco=i(S),hh=n(S,"LI",{});var E9e=s(hh);fie=n(E9e,"STRONG",{});var rmt=s(fie);Yco=r(rmt,"fsmt"),rmt.forEach(t),Kco=r(E9e," \u2014 "),hI=n(E9e,"A",{href:!0});var tmt=s(hI);Zco=r(tmt,"FSMTTokenizer"),tmt.forEach(t),emo=r(E9e," (FairSeq Machine-Translation model)"),E9e.forEach(t),omo=i(S),ns=n(S,"LI",{});var aS=s(ns);gie=n(aS,"STRONG",{});var amt=s(gie);rmo=r(amt,"funnel"),amt.forEach(t),tmo=r(aS," \u2014 "),uI=n(aS,"A",{href:!0});var nmt=s(uI);amo=r(nmt,"FunnelTokenizer"),nmt.forEach(t),nmo=r(aS," or "),pI=n(aS,"A",{href:!0});var smt=s(pI);smo=r(smt,"FunnelTokenizerFast"),smt.forEach(t),lmo=r(aS," (Funnel Transformer model)"),aS.forEach(t),imo=i(S),ss=n(S,"LI",{});var nS=s(ss);hie=n(nS,"STRONG",{});var lmt=s(hie);dmo=r(lmt,"gpt2"),lmt.forEach(t),cmo=r(nS," \u2014 "),_I=n(nS,"A",{href:!0});var imt=s(_I);mmo=r(imt,"GPT2Tokenizer"),imt.forEach(t),fmo=r(nS," or "),bI=n(nS,"A",{href:!0});var dmt=s(bI);gmo=r(dmt,"GPT2TokenizerFast"),dmt.forEach(t),hmo=r(nS," (OpenAI GPT-2 model)"),nS.forEach(t),umo=i(S),ls=n(S,"LI",{});var sS=s(ls);uie=n(sS,"STRONG",{});var cmt=s(uie);pmo=r(cmt,"gpt_neo"),cmt.forEach(t),_mo=r(sS," \u2014 "),vI=n(sS,"A",{href:!0});var mmt=s(vI);bmo=r(mmt,"GPT2Tokenizer"),mmt.forEach(t),vmo=r(sS," or "),FI=n(sS,"A",{href:!0});var fmt=s(FI);Fmo=r(fmt,"GPT2TokenizerFast"),fmt.forEach(t),Tmo=r(sS," (GPT Neo model)"),sS.forEach(t),Mmo=i(S),uh=n(S,"LI",{});var C9e=s(uh);pie=n(C9e,"STRONG",{});var gmt=s(pie);Emo=r(gmt,"gpt_neox"),gmt.forEach(t),Cmo=r(C9e," \u2014 "),TI=n(C9e,"A",{href:!0});var hmt=s(TI);wmo=r(hmt,"GPTNeoXTokenizerFast"),hmt.forEach(t),Amo=r(C9e," (GPT NeoX model)"),C9e.forEach(t),Lmo=i(S),is=n(S,"LI",{});var lS=s(is);_ie=n(lS,"STRONG",{});var umt=s(_ie);ymo=r(umt,"gptj"),umt.forEach(t),xmo=r(lS," \u2014 "),MI=n(lS,"A",{href:!0});var pmt=s(MI);$mo=r(pmt,"GPT2Tokenizer"),pmt.forEach(t),kmo=r(lS," or "),EI=n(lS,"A",{href:!0});var _mt=s(EI);Smo=r(_mt,"GPT2TokenizerFast"),_mt.forEach(t),Rmo=r(lS," (GPT-J model)"),lS.forEach(t),Pmo=i(S),ds=n(S,"LI",{});var iS=s(ds);bie=n(iS,"STRONG",{});var bmt=s(bie);Bmo=r(bmt,"groupvit"),bmt.forEach(t),Imo=r(iS," \u2014 "),CI=n(iS,"A",{href:!0});var vmt=s(CI);Nmo=r(vmt,"CLIPTokenizer"),vmt.forEach(t),qmo=r(iS," or "),wI=n(iS,"A",{href:!0});var Fmt=s(wI);jmo=r(Fmt,"CLIPTokenizerFast"),Fmt.forEach(t),Dmo=r(iS," (GroupViT model)"),iS.forEach(t),Gmo=i(S),cs=n(S,"LI",{});var dS=s(cs);vie=n(dS,"STRONG",{});var Tmt=s(vie);Omo=r(Tmt,"herbert"),Tmt.forEach(t),Vmo=r(dS," \u2014 "),AI=n(dS,"A",{href:!0});var Mmt=s(AI);Xmo=r(Mmt,"HerbertTokenizer"),Mmt.forEach(t),zmo=r(dS," or "),LI=n(dS,"A",{href:!0});var Emt=s(LI);Wmo=r(Emt,"HerbertTokenizerFast"),Emt.forEach(t),Qmo=r(dS," (HerBERT model)"),dS.forEach(t),Hmo=i(S),ph=n(S,"LI",{});var w9e=s(ph);Fie=n(w9e,"STRONG",{});var Cmt=s(Fie);Umo=r(Cmt,"hubert"),Cmt.forEach(t),Jmo=r(w9e," \u2014 "),yI=n(w9e,"A",{href:!0});var wmt=s(yI);Ymo=r(wmt,"Wav2Vec2CTCTokenizer"),wmt.forEach(t),Kmo=r(w9e," (Hubert model)"),w9e.forEach(t),Zmo=i(S),ms=n(S,"LI",{});var cS=s(ms);Tie=n(cS,"STRONG",{});var Amt=s(Tie);efo=r(Amt,"ibert"),Amt.forEach(t),ofo=r(cS," \u2014 "),xI=n(cS,"A",{href:!0});var Lmt=s(xI);rfo=r(Lmt,"RobertaTokenizer"),Lmt.forEach(t),tfo=r(cS," or "),$I=n(cS,"A",{href:!0});var ymt=s($I);afo=r(ymt,"RobertaTokenizerFast"),ymt.forEach(t),nfo=r(cS," (I-BERT model)"),cS.forEach(t),sfo=i(S),fs=n(S,"LI",{});var mS=s(fs);Mie=n(mS,"STRONG",{});var xmt=s(Mie);lfo=r(xmt,"layoutlm"),xmt.forEach(t),ifo=r(mS," \u2014 "),kI=n(mS,"A",{href:!0});var $mt=s(kI);dfo=r($mt,"LayoutLMTokenizer"),$mt.forEach(t),cfo=r(mS," or "),SI=n(mS,"A",{href:!0});var kmt=s(SI);mfo=r(kmt,"LayoutLMTokenizerFast"),kmt.forEach(t),ffo=r(mS," (LayoutLM model)"),mS.forEach(t),gfo=i(S),gs=n(S,"LI",{});var fS=s(gs);Eie=n(fS,"STRONG",{});var Smt=s(Eie);hfo=r(Smt,"layoutlmv2"),Smt.forEach(t),ufo=r(fS," \u2014 "),RI=n(fS,"A",{href:!0});var Rmt=s(RI);pfo=r(Rmt,"LayoutLMv2Tokenizer"),Rmt.forEach(t),_fo=r(fS," or "),PI=n(fS,"A",{href:!0});var Pmt=s(PI);bfo=r(Pmt,"LayoutLMv2TokenizerFast"),Pmt.forEach(t),vfo=r(fS," (LayoutLMv2 model)"),fS.forEach(t),Ffo=i(S),hs=n(S,"LI",{});var gS=s(hs);Cie=n(gS,"STRONG",{});var Bmt=s(Cie);Tfo=r(Bmt,"layoutlmv3"),Bmt.forEach(t),Mfo=r(gS," \u2014 "),BI=n(gS,"A",{href:!0});var Imt=s(BI);Efo=r(Imt,"LayoutLMv3Tokenizer"),Imt.forEach(t),Cfo=r(gS," or "),II=n(gS,"A",{href:!0});var Nmt=s(II);wfo=r(Nmt,"LayoutLMv3TokenizerFast"),Nmt.forEach(t),Afo=r(gS," (LayoutLMv3 model)"),gS.forEach(t),Lfo=i(S),us=n(S,"LI",{});var hS=s(us);wie=n(hS,"STRONG",{});var qmt=s(wie);yfo=r(qmt,"layoutxlm"),qmt.forEach(t),xfo=r(hS," \u2014 "),NI=n(hS,"A",{href:!0});var jmt=s(NI);$fo=r(jmt,"LayoutXLMTokenizer"),jmt.forEach(t),kfo=r(hS," or "),qI=n(hS,"A",{href:!0});var Dmt=s(qI);Sfo=r(Dmt,"LayoutXLMTokenizerFast"),Dmt.forEach(t),Rfo=r(hS," (LayoutXLM model)"),hS.forEach(t),Pfo=i(S),ps=n(S,"LI",{});var uS=s(ps);Aie=n(uS,"STRONG",{});var Gmt=s(Aie);Bfo=r(Gmt,"led"),Gmt.forEach(t),Ifo=r(uS," \u2014 "),jI=n(uS,"A",{href:!0});var Omt=s(jI);Nfo=r(Omt,"LEDTokenizer"),Omt.forEach(t),qfo=r(uS," or "),DI=n(uS,"A",{href:!0});var Vmt=s(DI);jfo=r(Vmt,"LEDTokenizerFast"),Vmt.forEach(t),Dfo=r(uS," (LED model)"),uS.forEach(t),Gfo=i(S),_s=n(S,"LI",{});var pS=s(_s);Lie=n(pS,"STRONG",{});var Xmt=s(Lie);Ofo=r(Xmt,"longformer"),Xmt.forEach(t),Vfo=r(pS," \u2014 "),GI=n(pS,"A",{href:!0});var zmt=s(GI);Xfo=r(zmt,"LongformerTokenizer"),zmt.forEach(t),zfo=r(pS," or "),OI=n(pS,"A",{href:!0});var Wmt=s(OI);Wfo=r(Wmt,"LongformerTokenizerFast"),Wmt.forEach(t),Qfo=r(pS," (Longformer model)"),pS.forEach(t),Hfo=i(S),bs=n(S,"LI",{});var _S=s(bs);yie=n(_S,"STRONG",{});var Qmt=s(yie);Ufo=r(Qmt,"longt5"),Qmt.forEach(t),Jfo=r(_S," \u2014 "),VI=n(_S,"A",{href:!0});var Hmt=s(VI);Yfo=r(Hmt,"T5Tokenizer"),Hmt.forEach(t),Kfo=r(_S," or "),XI=n(_S,"A",{href:!0});var Umt=s(XI);Zfo=r(Umt,"T5TokenizerFast"),Umt.forEach(t),ego=r(_S," (LongT5 model)"),_S.forEach(t),ogo=i(S),_h=n(S,"LI",{});var A9e=s(_h);xie=n(A9e,"STRONG",{});var Jmt=s(xie);rgo=r(Jmt,"luke"),Jmt.forEach(t),tgo=r(A9e," \u2014 "),zI=n(A9e,"A",{href:!0});var Ymt=s(zI);ago=r(Ymt,"LukeTokenizer"),Ymt.forEach(t),ngo=r(A9e," (LUKE model)"),A9e.forEach(t),sgo=i(S),vs=n(S,"LI",{});var bS=s(vs);$ie=n(bS,"STRONG",{});var Kmt=s($ie);lgo=r(Kmt,"lxmert"),Kmt.forEach(t),igo=r(bS," \u2014 "),WI=n(bS,"A",{href:!0});var Zmt=s(WI);dgo=r(Zmt,"LxmertTokenizer"),Zmt.forEach(t),cgo=r(bS," or "),QI=n(bS,"A",{href:!0});var eft=s(QI);mgo=r(eft,"LxmertTokenizerFast"),eft.forEach(t),fgo=r(bS," (LXMERT model)"),bS.forEach(t),ggo=i(S),bh=n(S,"LI",{});var L9e=s(bh);kie=n(L9e,"STRONG",{});var oft=s(kie);hgo=r(oft,"m2m_100"),oft.forEach(t),ugo=r(L9e," \u2014 "),HI=n(L9e,"A",{href:!0});var rft=s(HI);pgo=r(rft,"M2M100Tokenizer"),rft.forEach(t),_go=r(L9e," (M2M100 model)"),L9e.forEach(t),bgo=i(S),vh=n(S,"LI",{});var y9e=s(vh);Sie=n(y9e,"STRONG",{});var tft=s(Sie);vgo=r(tft,"marian"),tft.forEach(t),Fgo=r(y9e," \u2014 "),UI=n(y9e,"A",{href:!0});var aft=s(UI);Tgo=r(aft,"MarianTokenizer"),aft.forEach(t),Mgo=r(y9e," (Marian model)"),y9e.forEach(t),Ego=i(S),Fs=n(S,"LI",{});var vS=s(Fs);Rie=n(vS,"STRONG",{});var nft=s(Rie);Cgo=r(nft,"mbart"),nft.forEach(t),wgo=r(vS," \u2014 "),JI=n(vS,"A",{href:!0});var sft=s(JI);Ago=r(sft,"MBartTokenizer"),sft.forEach(t),Lgo=r(vS," or "),YI=n(vS,"A",{href:!0});var lft=s(YI);ygo=r(lft,"MBartTokenizerFast"),lft.forEach(t),xgo=r(vS," (mBART model)"),vS.forEach(t),$go=i(S),Ts=n(S,"LI",{});var FS=s(Ts);Pie=n(FS,"STRONG",{});var ift=s(Pie);kgo=r(ift,"mbart50"),ift.forEach(t),Sgo=r(FS," \u2014 "),KI=n(FS,"A",{href:!0});var dft=s(KI);Rgo=r(dft,"MBart50Tokenizer"),dft.forEach(t),Pgo=r(FS," or "),ZI=n(FS,"A",{href:!0});var cft=s(ZI);Bgo=r(cft,"MBart50TokenizerFast"),cft.forEach(t),Igo=r(FS," (mBART-50 model)"),FS.forEach(t),Ngo=i(S),Ms=n(S,"LI",{});var TS=s(Ms);Bie=n(TS,"STRONG",{});var mft=s(Bie);qgo=r(mft,"megatron-bert"),mft.forEach(t),jgo=r(TS," \u2014 "),eN=n(TS,"A",{href:!0});var fft=s(eN);Dgo=r(fft,"BertTokenizer"),fft.forEach(t),Ggo=r(TS," or "),oN=n(TS,"A",{href:!0});var gft=s(oN);Ogo=r(gft,"BertTokenizerFast"),gft.forEach(t),Vgo=r(TS," (Megatron-BERT model)"),TS.forEach(t),Xgo=i(S),Fh=n(S,"LI",{});var x9e=s(Fh);Iie=n(x9e,"STRONG",{});var hft=s(Iie);zgo=r(hft,"mluke"),hft.forEach(t),Wgo=r(x9e," \u2014 "),rN=n(x9e,"A",{href:!0});var uft=s(rN);Qgo=r(uft,"MLukeTokenizer"),uft.forEach(t),Hgo=r(x9e," (mLUKE model)"),x9e.forEach(t),Ugo=i(S),Es=n(S,"LI",{});var MS=s(Es);Nie=n(MS,"STRONG",{});var pft=s(Nie);Jgo=r(pft,"mobilebert"),pft.forEach(t),Ygo=r(MS," \u2014 "),tN=n(MS,"A",{href:!0});var _ft=s(tN);Kgo=r(_ft,"MobileBertTokenizer"),_ft.forEach(t),Zgo=r(MS," or "),aN=n(MS,"A",{href:!0});var bft=s(aN);eho=r(bft,"MobileBertTokenizerFast"),bft.forEach(t),oho=r(MS," (MobileBERT model)"),MS.forEach(t),rho=i(S),Cs=n(S,"LI",{});var ES=s(Cs);qie=n(ES,"STRONG",{});var vft=s(qie);tho=r(vft,"mpnet"),vft.forEach(t),aho=r(ES," \u2014 "),nN=n(ES,"A",{href:!0});var Fft=s(nN);nho=r(Fft,"MPNetTokenizer"),Fft.forEach(t),sho=r(ES," or "),sN=n(ES,"A",{href:!0});var Tft=s(sN);lho=r(Tft,"MPNetTokenizerFast"),Tft.forEach(t),iho=r(ES," (MPNet model)"),ES.forEach(t),dho=i(S),ws=n(S,"LI",{});var CS=s(ws);jie=n(CS,"STRONG",{});var Mft=s(jie);cho=r(Mft,"mt5"),Mft.forEach(t),mho=r(CS," \u2014 "),lN=n(CS,"A",{href:!0});var Eft=s(lN);fho=r(Eft,"MT5Tokenizer"),Eft.forEach(t),gho=r(CS," or "),iN=n(CS,"A",{href:!0});var Cft=s(iN);hho=r(Cft,"MT5TokenizerFast"),Cft.forEach(t),uho=r(CS," (MT5 model)"),CS.forEach(t),pho=i(S),As=n(S,"LI",{});var wS=s(As);Die=n(wS,"STRONG",{});var wft=s(Die);_ho=r(wft,"mvp"),wft.forEach(t),bho=r(wS," \u2014 "),dN=n(wS,"A",{href:!0});var Aft=s(dN);vho=r(Aft,"MvpTokenizer"),Aft.forEach(t),Fho=r(wS," or "),cN=n(wS,"A",{href:!0});var Lft=s(cN);Tho=r(Lft,"MvpTokenizerFast"),Lft.forEach(t),Mho=r(wS," (MVP model)"),wS.forEach(t),Eho=i(S),Ls=n(S,"LI",{});var AS=s(Ls);Gie=n(AS,"STRONG",{});var yft=s(Gie);Cho=r(yft,"nezha"),yft.forEach(t),who=r(AS," \u2014 "),mN=n(AS,"A",{href:!0});var xft=s(mN);Aho=r(xft,"BertTokenizer"),xft.forEach(t),Lho=r(AS," or "),fN=n(AS,"A",{href:!0});var $ft=s(fN);yho=r($ft,"BertTokenizerFast"),$ft.forEach(t),xho=r(AS," (Nezha model)"),AS.forEach(t),$ho=i(S),ys=n(S,"LI",{});var LS=s(ys);Oie=n(LS,"STRONG",{});var kft=s(Oie);kho=r(kft,"nllb"),kft.forEach(t),Sho=r(LS," \u2014 "),gN=n(LS,"A",{href:!0});var Sft=s(gN);Rho=r(Sft,"NllbTokenizer"),Sft.forEach(t),Pho=r(LS," or "),hN=n(LS,"A",{href:!0});var Rft=s(hN);Bho=r(Rft,"NllbTokenizerFast"),Rft.forEach(t),Iho=r(LS," (NLLB model)"),LS.forEach(t),Nho=i(S),xs=n(S,"LI",{});var yS=s(xs);Vie=n(yS,"STRONG",{});var Pft=s(Vie);qho=r(Pft,"nystromformer"),Pft.forEach(t),jho=r(yS," \u2014 "),uN=n(yS,"A",{href:!0});var Bft=s(uN);Dho=r(Bft,"AlbertTokenizer"),Bft.forEach(t),Gho=r(yS," or "),pN=n(yS,"A",{href:!0});var Ift=s(pN);Oho=r(Ift,"AlbertTokenizerFast"),Ift.forEach(t),Vho=r(yS," (Nystr\xF6mformer model)"),yS.forEach(t),Xho=i(S),$s=n(S,"LI",{});var xS=s($s);Xie=n(xS,"STRONG",{});var Nft=s(Xie);zho=r(Nft,"openai-gpt"),Nft.forEach(t),Who=r(xS," \u2014 "),_N=n(xS,"A",{href:!0});var qft=s(_N);Qho=r(qft,"OpenAIGPTTokenizer"),qft.forEach(t),Hho=r(xS," or "),bN=n(xS,"A",{href:!0});var jft=s(bN);Uho=r(jft,"OpenAIGPTTokenizerFast"),jft.forEach(t),Jho=r(xS," (OpenAI GPT model)"),xS.forEach(t),Yho=i(S),Th=n(S,"LI",{});var $9e=s(Th);zie=n($9e,"STRONG",{});var Dft=s(zie);Kho=r(Dft,"opt"),Dft.forEach(t),Zho=r($9e," \u2014 "),vN=n($9e,"A",{href:!0});var Gft=s(vN);euo=r(Gft,"GPT2Tokenizer"),Gft.forEach(t),ouo=r($9e," (OPT model)"),$9e.forEach(t),ruo=i(S),ks=n(S,"LI",{});var $S=s(ks);Wie=n($S,"STRONG",{});var Oft=s(Wie);tuo=r(Oft,"owlvit"),Oft.forEach(t),auo=r($S," \u2014 "),FN=n($S,"A",{href:!0});var Vft=s(FN);nuo=r(Vft,"CLIPTokenizer"),Vft.forEach(t),suo=r($S," or "),TN=n($S,"A",{href:!0});var Xft=s(TN);luo=r(Xft,"CLIPTokenizerFast"),Xft.forEach(t),iuo=r($S," (OWL-ViT model)"),$S.forEach(t),duo=i(S),Ss=n(S,"LI",{});var kS=s(Ss);Qie=n(kS,"STRONG",{});var zft=s(Qie);cuo=r(zft,"pegasus"),zft.forEach(t),muo=r(kS," \u2014 "),MN=n(kS,"A",{href:!0});var Wft=s(MN);fuo=r(Wft,"PegasusTokenizer"),Wft.forEach(t),guo=r(kS," or "),EN=n(kS,"A",{href:!0});var Qft=s(EN);huo=r(Qft,"PegasusTokenizerFast"),Qft.forEach(t),uuo=r(kS," (Pegasus model)"),kS.forEach(t),puo=i(S),Mh=n(S,"LI",{});var k9e=s(Mh);Hie=n(k9e,"STRONG",{});var Hft=s(Hie);_uo=r(Hft,"perceiver"),Hft.forEach(t),buo=r(k9e," \u2014 "),CN=n(k9e,"A",{href:!0});var Uft=s(CN);vuo=r(Uft,"PerceiverTokenizer"),Uft.forEach(t),Fuo=r(k9e," (Perceiver model)"),k9e.forEach(t),Tuo=i(S),Eh=n(S,"LI",{});var S9e=s(Eh);Uie=n(S9e,"STRONG",{});var Jft=s(Uie);Muo=r(Jft,"phobert"),Jft.forEach(t),Euo=r(S9e," \u2014 "),wN=n(S9e,"A",{href:!0});var Yft=s(wN);Cuo=r(Yft,"PhobertTokenizer"),Yft.forEach(t),wuo=r(S9e," (PhoBERT model)"),S9e.forEach(t),Auo=i(S),Ch=n(S,"LI",{});var R9e=s(Ch);Jie=n(R9e,"STRONG",{});var Kft=s(Jie);Luo=r(Kft,"plbart"),Kft.forEach(t),yuo=r(R9e," \u2014 "),AN=n(R9e,"A",{href:!0});var Zft=s(AN);xuo=r(Zft,"PLBartTokenizer"),Zft.forEach(t),$uo=r(R9e," (PLBart model)"),R9e.forEach(t),kuo=i(S),wh=n(S,"LI",{});var P9e=s(wh);Yie=n(P9e,"STRONG",{});var egt=s(Yie);Suo=r(egt,"prophetnet"),egt.forEach(t),Ruo=r(P9e," \u2014 "),LN=n(P9e,"A",{href:!0});var ogt=s(LN);Puo=r(ogt,"ProphetNetTokenizer"),ogt.forEach(t),Buo=r(P9e," (ProphetNet model)"),P9e.forEach(t),Iuo=i(S),Rs=n(S,"LI",{});var SS=s(Rs);Kie=n(SS,"STRONG",{});var rgt=s(Kie);Nuo=r(rgt,"qdqbert"),rgt.forEach(t),quo=r(SS," \u2014 "),yN=n(SS,"A",{href:!0});var tgt=s(yN);juo=r(tgt,"BertTokenizer"),tgt.forEach(t),Duo=r(SS," or "),xN=n(SS,"A",{href:!0});var agt=s(xN);Guo=r(agt,"BertTokenizerFast"),agt.forEach(t),Ouo=r(SS," (QDQBert model)"),SS.forEach(t),Vuo=i(S),Ah=n(S,"LI",{});var B9e=s(Ah);Zie=n(B9e,"STRONG",{});var ngt=s(Zie);Xuo=r(ngt,"rag"),ngt.forEach(t),zuo=r(B9e," \u2014 "),$N=n(B9e,"A",{href:!0});var sgt=s($N);Wuo=r(sgt,"RagTokenizer"),sgt.forEach(t),Quo=r(B9e," (RAG model)"),B9e.forEach(t),Huo=i(S),Ps=n(S,"LI",{});var RS=s(Ps);ede=n(RS,"STRONG",{});var lgt=s(ede);Uuo=r(lgt,"realm"),lgt.forEach(t),Juo=r(RS," \u2014 "),kN=n(RS,"A",{href:!0});var igt=s(kN);Yuo=r(igt,"RealmTokenizer"),igt.forEach(t),Kuo=r(RS," or "),SN=n(RS,"A",{href:!0});var dgt=s(SN);Zuo=r(dgt,"RealmTokenizerFast"),dgt.forEach(t),epo=r(RS," (REALM model)"),RS.forEach(t),opo=i(S),Bs=n(S,"LI",{});var PS=s(Bs);ode=n(PS,"STRONG",{});var cgt=s(ode);rpo=r(cgt,"reformer"),cgt.forEach(t),tpo=r(PS," \u2014 "),RN=n(PS,"A",{href:!0});var mgt=s(RN);apo=r(mgt,"ReformerTokenizer"),mgt.forEach(t),npo=r(PS," or "),PN=n(PS,"A",{href:!0});var fgt=s(PN);spo=r(fgt,"ReformerTokenizerFast"),fgt.forEach(t),lpo=r(PS," (Reformer model)"),PS.forEach(t),ipo=i(S),Is=n(S,"LI",{});var BS=s(Is);rde=n(BS,"STRONG",{});var ggt=s(rde);dpo=r(ggt,"rembert"),ggt.forEach(t),cpo=r(BS," \u2014 "),BN=n(BS,"A",{href:!0});var hgt=s(BN);mpo=r(hgt,"RemBertTokenizer"),hgt.forEach(t),fpo=r(BS," or "),IN=n(BS,"A",{href:!0});var ugt=s(IN);gpo=r(ugt,"RemBertTokenizerFast"),ugt.forEach(t),hpo=r(BS," (RemBERT model)"),BS.forEach(t),upo=i(S),Ns=n(S,"LI",{});var IS=s(Ns);tde=n(IS,"STRONG",{});var pgt=s(tde);ppo=r(pgt,"retribert"),pgt.forEach(t),_po=r(IS," \u2014 "),NN=n(IS,"A",{href:!0});var _gt=s(NN);bpo=r(_gt,"RetriBertTokenizer"),_gt.forEach(t),vpo=r(IS," or "),qN=n(IS,"A",{href:!0});var bgt=s(qN);Fpo=r(bgt,"RetriBertTokenizerFast"),bgt.forEach(t),Tpo=r(IS," (RetriBERT model)"),IS.forEach(t),Mpo=i(S),qs=n(S,"LI",{});var NS=s(qs);ade=n(NS,"STRONG",{});var vgt=s(ade);Epo=r(vgt,"roberta"),vgt.forEach(t),Cpo=r(NS," \u2014 "),jN=n(NS,"A",{href:!0});var Fgt=s(jN);wpo=r(Fgt,"RobertaTokenizer"),Fgt.forEach(t),Apo=r(NS," or "),DN=n(NS,"A",{href:!0});var Tgt=s(DN);Lpo=r(Tgt,"RobertaTokenizerFast"),Tgt.forEach(t),ypo=r(NS," (RoBERTa model)"),NS.forEach(t),xpo=i(S),js=n(S,"LI",{});var qS=s(js);nde=n(qS,"STRONG",{});var Mgt=s(nde);$po=r(Mgt,"roformer"),Mgt.forEach(t),kpo=r(qS," \u2014 "),GN=n(qS,"A",{href:!0});var Egt=s(GN);Spo=r(Egt,"RoFormerTokenizer"),Egt.forEach(t),Rpo=r(qS," or "),ON=n(qS,"A",{href:!0});var Cgt=s(ON);Ppo=r(Cgt,"RoFormerTokenizerFast"),Cgt.forEach(t),Bpo=r(qS," (RoFormer model)"),qS.forEach(t),Ipo=i(S),Lh=n(S,"LI",{});var I9e=s(Lh);sde=n(I9e,"STRONG",{});var wgt=s(sde);Npo=r(wgt,"speech_to_text"),wgt.forEach(t),qpo=r(I9e," \u2014 "),VN=n(I9e,"A",{href:!0});var Agt=s(VN);jpo=r(Agt,"Speech2TextTokenizer"),Agt.forEach(t),Dpo=r(I9e," (Speech2Text model)"),I9e.forEach(t),Gpo=i(S),yh=n(S,"LI",{});var N9e=s(yh);lde=n(N9e,"STRONG",{});var Lgt=s(lde);Opo=r(Lgt,"speech_to_text_2"),Lgt.forEach(t),Vpo=r(N9e," \u2014 "),XN=n(N9e,"A",{href:!0});var ygt=s(XN);Xpo=r(ygt,"Speech2Text2Tokenizer"),ygt.forEach(t),zpo=r(N9e," (Speech2Text2 model)"),N9e.forEach(t),Wpo=i(S),Ds=n(S,"LI",{});var jS=s(Ds);ide=n(jS,"STRONG",{});var xgt=s(ide);Qpo=r(xgt,"splinter"),xgt.forEach(t),Hpo=r(jS," \u2014 "),zN=n(jS,"A",{href:!0});var $gt=s(zN);Upo=r($gt,"SplinterTokenizer"),$gt.forEach(t),Jpo=r(jS," or "),WN=n(jS,"A",{href:!0});var kgt=s(WN);Ypo=r(kgt,"SplinterTokenizerFast"),kgt.forEach(t),Kpo=r(jS," (Splinter model)"),jS.forEach(t),Zpo=i(S),Gs=n(S,"LI",{});var DS=s(Gs);dde=n(DS,"STRONG",{});var Sgt=s(dde);e_o=r(Sgt,"squeezebert"),Sgt.forEach(t),o_o=r(DS," \u2014 "),QN=n(DS,"A",{href:!0});var Rgt=s(QN);r_o=r(Rgt,"SqueezeBertTokenizer"),Rgt.forEach(t),t_o=r(DS," or "),HN=n(DS,"A",{href:!0});var Pgt=s(HN);a_o=r(Pgt,"SqueezeBertTokenizerFast"),Pgt.forEach(t),n_o=r(DS," (SqueezeBERT model)"),DS.forEach(t),s_o=i(S),Os=n(S,"LI",{});var GS=s(Os);cde=n(GS,"STRONG",{});var Bgt=s(cde);l_o=r(Bgt,"t5"),Bgt.forEach(t),i_o=r(GS," \u2014 "),UN=n(GS,"A",{href:!0});var Igt=s(UN);d_o=r(Igt,"T5Tokenizer"),Igt.forEach(t),c_o=r(GS," or "),JN=n(GS,"A",{href:!0});var Ngt=s(JN);m_o=r(Ngt,"T5TokenizerFast"),Ngt.forEach(t),f_o=r(GS," (T5 model)"),GS.forEach(t),g_o=i(S),xh=n(S,"LI",{});var q9e=s(xh);mde=n(q9e,"STRONG",{});var qgt=s(mde);h_o=r(qgt,"tapas"),qgt.forEach(t),u_o=r(q9e," \u2014 "),YN=n(q9e,"A",{href:!0});var jgt=s(YN);p_o=r(jgt,"TapasTokenizer"),jgt.forEach(t),__o=r(q9e," (TAPAS model)"),q9e.forEach(t),b_o=i(S),$h=n(S,"LI",{});var j9e=s($h);fde=n(j9e,"STRONG",{});var Dgt=s(fde);v_o=r(Dgt,"tapex"),Dgt.forEach(t),F_o=r(j9e," \u2014 "),KN=n(j9e,"A",{href:!0});var Ggt=s(KN);T_o=r(Ggt,"TapexTokenizer"),Ggt.forEach(t),M_o=r(j9e," (TAPEX model)"),j9e.forEach(t),E_o=i(S),kh=n(S,"LI",{});var D9e=s(kh);gde=n(D9e,"STRONG",{});var Ogt=s(gde);C_o=r(Ogt,"transfo-xl"),Ogt.forEach(t),w_o=r(D9e," \u2014 "),ZN=n(D9e,"A",{href:!0});var Vgt=s(ZN);A_o=r(Vgt,"TransfoXLTokenizer"),Vgt.forEach(t),L_o=r(D9e," (Transformer-XL model)"),D9e.forEach(t),y_o=i(S),Vs=n(S,"LI",{});var OS=s(Vs);hde=n(OS,"STRONG",{});var Xgt=s(hde);x_o=r(Xgt,"vilt"),Xgt.forEach(t),$_o=r(OS," \u2014 "),eq=n(OS,"A",{href:!0});var zgt=s(eq);k_o=r(zgt,"BertTokenizer"),zgt.forEach(t),S_o=r(OS," or "),oq=n(OS,"A",{href:!0});var Wgt=s(oq);R_o=r(Wgt,"BertTokenizerFast"),Wgt.forEach(t),P_o=r(OS," (ViLT model)"),OS.forEach(t),B_o=i(S),Xs=n(S,"LI",{});var VS=s(Xs);ude=n(VS,"STRONG",{});var Qgt=s(ude);I_o=r(Qgt,"visual_bert"),Qgt.forEach(t),N_o=r(VS," \u2014 "),rq=n(VS,"A",{href:!0});var Hgt=s(rq);q_o=r(Hgt,"BertTokenizer"),Hgt.forEach(t),j_o=r(VS," or "),tq=n(VS,"A",{href:!0});var Ugt=s(tq);D_o=r(Ugt,"BertTokenizerFast"),Ugt.forEach(t),G_o=r(VS," (VisualBERT model)"),VS.forEach(t),O_o=i(S),Sh=n(S,"LI",{});var G9e=s(Sh);pde=n(G9e,"STRONG",{});var Jgt=s(pde);V_o=r(Jgt,"wav2vec2"),Jgt.forEach(t),X_o=r(G9e," \u2014 "),aq=n(G9e,"A",{href:!0});var Ygt=s(aq);z_o=r(Ygt,"Wav2Vec2CTCTokenizer"),Ygt.forEach(t),W_o=r(G9e," (Wav2Vec2 model)"),G9e.forEach(t),Q_o=i(S),Rh=n(S,"LI",{});var O9e=s(Rh);_de=n(O9e,"STRONG",{});var Kgt=s(_de);H_o=r(Kgt,"wav2vec2-conformer"),Kgt.forEach(t),U_o=r(O9e," \u2014 "),nq=n(O9e,"A",{href:!0});var Zgt=s(nq);J_o=r(Zgt,"Wav2Vec2CTCTokenizer"),Zgt.forEach(t),Y_o=r(O9e," (Wav2Vec2-Conformer model)"),O9e.forEach(t),K_o=i(S),Ph=n(S,"LI",{});var V9e=s(Ph);bde=n(V9e,"STRONG",{});var eht=s(bde);Z_o=r(eht,"wav2vec2_phoneme"),eht.forEach(t),e2o=r(V9e," \u2014 "),sq=n(V9e,"A",{href:!0});var oht=s(sq);o2o=r(oht,"Wav2Vec2PhonemeCTCTokenizer"),oht.forEach(t),r2o=r(V9e," (Wav2Vec2Phoneme model)"),V9e.forEach(t),t2o=i(S),zs=n(S,"LI",{});var XS=s(zs);vde=n(XS,"STRONG",{});var rht=s(vde);a2o=r(rht,"xglm"),rht.forEach(t),n2o=r(XS," \u2014 "),lq=n(XS,"A",{href:!0});var tht=s(lq);s2o=r(tht,"XGLMTokenizer"),tht.forEach(t),l2o=r(XS," or "),iq=n(XS,"A",{href:!0});var aht=s(iq);i2o=r(aht,"XGLMTokenizerFast"),aht.forEach(t),d2o=r(XS," (XGLM model)"),XS.forEach(t),c2o=i(S),Bh=n(S,"LI",{});var X9e=s(Bh);Fde=n(X9e,"STRONG",{});var nht=s(Fde);m2o=r(nht,"xlm"),nht.forEach(t),f2o=r(X9e," \u2014 "),dq=n(X9e,"A",{href:!0});var sht=s(dq);g2o=r(sht,"XLMTokenizer"),sht.forEach(t),h2o=r(X9e," (XLM model)"),X9e.forEach(t),u2o=i(S),Ih=n(S,"LI",{});var z9e=s(Ih);Tde=n(z9e,"STRONG",{});var lht=s(Tde);p2o=r(lht,"xlm-prophetnet"),lht.forEach(t),_2o=r(z9e," \u2014 "),cq=n(z9e,"A",{href:!0});var iht=s(cq);b2o=r(iht,"XLMProphetNetTokenizer"),iht.forEach(t),v2o=r(z9e," (XLM-ProphetNet model)"),z9e.forEach(t),F2o=i(S),Ws=n(S,"LI",{});var zS=s(Ws);Mde=n(zS,"STRONG",{});var dht=s(Mde);T2o=r(dht,"xlm-roberta"),dht.forEach(t),M2o=r(zS," \u2014 "),mq=n(zS,"A",{href:!0});var cht=s(mq);E2o=r(cht,"XLMRobertaTokenizer"),cht.forEach(t),C2o=r(zS," or "),fq=n(zS,"A",{href:!0});var mht=s(fq);w2o=r(mht,"XLMRobertaTokenizerFast"),mht.forEach(t),A2o=r(zS," (XLM-RoBERTa model)"),zS.forEach(t),L2o=i(S),Qs=n(S,"LI",{});var WS=s(Qs);Ede=n(WS,"STRONG",{});var fht=s(Ede);y2o=r(fht,"xlm-roberta-xl"),fht.forEach(t),x2o=r(WS," \u2014 "),gq=n(WS,"A",{href:!0});var ght=s(gq);$2o=r(ght,"RobertaTokenizer"),ght.forEach(t),k2o=r(WS," or "),hq=n(WS,"A",{href:!0});var hht=s(hq);S2o=r(hht,"RobertaTokenizerFast"),hht.forEach(t),R2o=r(WS," (XLM-RoBERTa-XL model)"),WS.forEach(t),P2o=i(S),Hs=n(S,"LI",{});var QS=s(Hs);Cde=n(QS,"STRONG",{});var uht=s(Cde);B2o=r(uht,"xlnet"),uht.forEach(t),I2o=r(QS," \u2014 "),uq=n(QS,"A",{href:!0});var pht=s(uq);N2o=r(pht,"XLNetTokenizer"),pht.forEach(t),q2o=r(QS," or "),pq=n(QS,"A",{href:!0});var _ht=s(pq);j2o=r(_ht,"XLNetTokenizerFast"),_ht.forEach(t),D2o=r(QS," (XLNet model)"),QS.forEach(t),G2o=i(S),Us=n(S,"LI",{});var HS=s(Us);wde=n(HS,"STRONG",{});var bht=s(wde);O2o=r(bht,"yoso"),bht.forEach(t),V2o=r(HS," \u2014 "),_q=n(HS,"A",{href:!0});var vht=s(_q);X2o=r(vht,"AlbertTokenizer"),vht.forEach(t),z2o=r(HS," or "),bq=n(HS,"A",{href:!0});var Fht=s(bq);W2o=r(Fht,"AlbertTokenizerFast"),Fht.forEach(t),Q2o=r(HS," (YOSO model)"),HS.forEach(t),S.forEach(t),H2o=i(rl),T(Nh.$$.fragment,rl),rl.forEach(t),U2o=i(ol),qh=n(ol,"DIV",{class:!0});var vQe=s(qh);T(Py.$$.fragment,vQe),J2o=i(vQe),Ade=n(vQe,"P",{});var Tht=s(Ade);Y2o=r(Tht,"Register a new tokenizer in this mapping."),Tht.forEach(t),vQe.forEach(t),ol.forEach(t),bze=i(m),Gi=n(m,"H2",{class:!0});var FQe=s(Gi);jh=n(FQe,"A",{id:!0,class:!0,href:!0});var Mht=s(jh);Lde=n(Mht,"SPAN",{});var Eht=s(Lde);T(By.$$.fragment,Eht),Eht.forEach(t),Mht.forEach(t),K2o=i(FQe),yde=n(FQe,"SPAN",{});var Cht=s(yde);Z2o=r(Cht,"AutoFeatureExtractor"),Cht.forEach(t),FQe.forEach(t),vze=i(m),xo=n(m,"DIV",{class:!0});var tl=s(xo);T(Iy.$$.fragment,tl),ebo=i(tl),Ny=n(tl,"P",{});var TQe=s(Ny);obo=r(TQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),vq=n(TQe,"A",{href:!0});var wht=s(vq);rbo=r(wht,"AutoFeatureExtractor.from_pretrained()"),wht.forEach(t),tbo=r(TQe," class method."),TQe.forEach(t),abo=i(tl),qy=n(tl,"P",{});var MQe=s(qy);nbo=r(MQe,"This class cannot be instantiated directly using "),xde=n(MQe,"CODE",{});var Aht=s(xde);sbo=r(Aht,"__init__()"),Aht.forEach(t),lbo=r(MQe," (throws an error)."),MQe.forEach(t),ibo=i(tl),Ue=n(tl,"DIV",{class:!0});var na=s(Ue);T(jy.$$.fragment,na),dbo=i(na),$de=n(na,"P",{});var Lht=s($de);cbo=r(Lht,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Lht.forEach(t),mbo=i(na),Ba=n(na,"P",{});var E7=s(Ba);fbo=r(E7,"The feature extractor class to instantiate is selected based on the "),kde=n(E7,"CODE",{});var yht=s(kde);gbo=r(yht,"model_type"),yht.forEach(t),hbo=r(E7,` property of the config object
(either passed as an argument or loaded from `),Sde=n(E7,"CODE",{});var xht=s(Sde);ubo=r(xht,"pretrained_model_name_or_path"),xht.forEach(t),pbo=r(E7,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Rde=n(E7,"CODE",{});var $ht=s(Rde);_bo=r($ht,"pretrained_model_name_or_path"),$ht.forEach(t),bbo=r(E7,":"),E7.forEach(t),vbo=i(na),U=n(na,"UL",{});var Y=s(U);Dh=n(Y,"LI",{});var W9e=s(Dh);Pde=n(W9e,"STRONG",{});var kht=s(Pde);Fbo=r(kht,"beit"),kht.forEach(t),Tbo=r(W9e," \u2014 "),Fq=n(W9e,"A",{href:!0});var Sht=s(Fq);Mbo=r(Sht,"BeitFeatureExtractor"),Sht.forEach(t),Ebo=r(W9e," (BEiT model)"),W9e.forEach(t),Cbo=i(Y),Gh=n(Y,"LI",{});var Q9e=s(Gh);Bde=n(Q9e,"STRONG",{});var Rht=s(Bde);wbo=r(Rht,"clip"),Rht.forEach(t),Abo=r(Q9e," \u2014 "),Tq=n(Q9e,"A",{href:!0});var Pht=s(Tq);Lbo=r(Pht,"CLIPFeatureExtractor"),Pht.forEach(t),ybo=r(Q9e," (CLIP model)"),Q9e.forEach(t),xbo=i(Y),Oh=n(Y,"LI",{});var H9e=s(Oh);Ide=n(H9e,"STRONG",{});var Bht=s(Ide);$bo=r(Bht,"convnext"),Bht.forEach(t),kbo=r(H9e," \u2014 "),Mq=n(H9e,"A",{href:!0});var Iht=s(Mq);Sbo=r(Iht,"ConvNextFeatureExtractor"),Iht.forEach(t),Rbo=r(H9e," (ConvNeXT model)"),H9e.forEach(t),Pbo=i(Y),Vh=n(Y,"LI",{});var U9e=s(Vh);Nde=n(U9e,"STRONG",{});var Nht=s(Nde);Bbo=r(Nht,"cvt"),Nht.forEach(t),Ibo=r(U9e," \u2014 "),Eq=n(U9e,"A",{href:!0});var qht=s(Eq);Nbo=r(qht,"ConvNextFeatureExtractor"),qht.forEach(t),qbo=r(U9e," (CvT model)"),U9e.forEach(t),jbo=i(Y),Xh=n(Y,"LI",{});var J9e=s(Xh);qde=n(J9e,"STRONG",{});var jht=s(qde);Dbo=r(jht,"data2vec-audio"),jht.forEach(t),Gbo=r(J9e," \u2014 "),Cq=n(J9e,"A",{href:!0});var Dht=s(Cq);Obo=r(Dht,"Wav2Vec2FeatureExtractor"),Dht.forEach(t),Vbo=r(J9e," (Data2VecAudio model)"),J9e.forEach(t),Xbo=i(Y),zh=n(Y,"LI",{});var Y9e=s(zh);jde=n(Y9e,"STRONG",{});var Ght=s(jde);zbo=r(Ght,"data2vec-vision"),Ght.forEach(t),Wbo=r(Y9e," \u2014 "),wq=n(Y9e,"A",{href:!0});var Oht=s(wq);Qbo=r(Oht,"BeitFeatureExtractor"),Oht.forEach(t),Hbo=r(Y9e," (Data2VecVision model)"),Y9e.forEach(t),Ubo=i(Y),Wh=n(Y,"LI",{});var K9e=s(Wh);Dde=n(K9e,"STRONG",{});var Vht=s(Dde);Jbo=r(Vht,"deit"),Vht.forEach(t),Ybo=r(K9e," \u2014 "),Aq=n(K9e,"A",{href:!0});var Xht=s(Aq);Kbo=r(Xht,"DeiTFeatureExtractor"),Xht.forEach(t),Zbo=r(K9e," (DeiT model)"),K9e.forEach(t),evo=i(Y),Qh=n(Y,"LI",{});var Z9e=s(Qh);Gde=n(Z9e,"STRONG",{});var zht=s(Gde);ovo=r(zht,"detr"),zht.forEach(t),rvo=r(Z9e," \u2014 "),Lq=n(Z9e,"A",{href:!0});var Wht=s(Lq);tvo=r(Wht,"DetrFeatureExtractor"),Wht.forEach(t),avo=r(Z9e," (DETR model)"),Z9e.forEach(t),nvo=i(Y),Hh=n(Y,"LI",{});var exe=s(Hh);Ode=n(exe,"STRONG",{});var Qht=s(Ode);svo=r(Qht,"dpt"),Qht.forEach(t),lvo=r(exe," \u2014 "),yq=n(exe,"A",{href:!0});var Hht=s(yq);ivo=r(Hht,"DPTFeatureExtractor"),Hht.forEach(t),dvo=r(exe," (DPT model)"),exe.forEach(t),cvo=i(Y),Uh=n(Y,"LI",{});var oxe=s(Uh);Vde=n(oxe,"STRONG",{});var Uht=s(Vde);mvo=r(Uht,"flava"),Uht.forEach(t),fvo=r(oxe," \u2014 "),xq=n(oxe,"A",{href:!0});var Jht=s(xq);gvo=r(Jht,"FlavaFeatureExtractor"),Jht.forEach(t),hvo=r(oxe," (FLAVA model)"),oxe.forEach(t),uvo=i(Y),Jh=n(Y,"LI",{});var rxe=s(Jh);Xde=n(rxe,"STRONG",{});var Yht=s(Xde);pvo=r(Yht,"glpn"),Yht.forEach(t),_vo=r(rxe," \u2014 "),$q=n(rxe,"A",{href:!0});var Kht=s($q);bvo=r(Kht,"GLPNFeatureExtractor"),Kht.forEach(t),vvo=r(rxe," (GLPN model)"),rxe.forEach(t),Fvo=i(Y),Yh=n(Y,"LI",{});var txe=s(Yh);zde=n(txe,"STRONG",{});var Zht=s(zde);Tvo=r(Zht,"groupvit"),Zht.forEach(t),Mvo=r(txe," \u2014 "),kq=n(txe,"A",{href:!0});var eut=s(kq);Evo=r(eut,"CLIPFeatureExtractor"),eut.forEach(t),Cvo=r(txe," (GroupViT model)"),txe.forEach(t),wvo=i(Y),Kh=n(Y,"LI",{});var axe=s(Kh);Wde=n(axe,"STRONG",{});var out=s(Wde);Avo=r(out,"hubert"),out.forEach(t),Lvo=r(axe," \u2014 "),Sq=n(axe,"A",{href:!0});var rut=s(Sq);yvo=r(rut,"Wav2Vec2FeatureExtractor"),rut.forEach(t),xvo=r(axe," (Hubert model)"),axe.forEach(t),$vo=i(Y),Zh=n(Y,"LI",{});var nxe=s(Zh);Qde=n(nxe,"STRONG",{});var tut=s(Qde);kvo=r(tut,"imagegpt"),tut.forEach(t),Svo=r(nxe," \u2014 "),Rq=n(nxe,"A",{href:!0});var aut=s(Rq);Rvo=r(aut,"ImageGPTFeatureExtractor"),aut.forEach(t),Pvo=r(nxe," (ImageGPT model)"),nxe.forEach(t),Bvo=i(Y),eu=n(Y,"LI",{});var sxe=s(eu);Hde=n(sxe,"STRONG",{});var nut=s(Hde);Ivo=r(nut,"layoutlmv2"),nut.forEach(t),Nvo=r(sxe," \u2014 "),Pq=n(sxe,"A",{href:!0});var sut=s(Pq);qvo=r(sut,"LayoutLMv2FeatureExtractor"),sut.forEach(t),jvo=r(sxe," (LayoutLMv2 model)"),sxe.forEach(t),Dvo=i(Y),ou=n(Y,"LI",{});var lxe=s(ou);Ude=n(lxe,"STRONG",{});var lut=s(Ude);Gvo=r(lut,"layoutlmv3"),lut.forEach(t),Ovo=r(lxe," \u2014 "),Bq=n(lxe,"A",{href:!0});var iut=s(Bq);Vvo=r(iut,"LayoutLMv3FeatureExtractor"),iut.forEach(t),Xvo=r(lxe," (LayoutLMv3 model)"),lxe.forEach(t),zvo=i(Y),ru=n(Y,"LI",{});var ixe=s(ru);Jde=n(ixe,"STRONG",{});var dut=s(Jde);Wvo=r(dut,"levit"),dut.forEach(t),Qvo=r(ixe," \u2014 "),Iq=n(ixe,"A",{href:!0});var cut=s(Iq);Hvo=r(cut,"LevitFeatureExtractor"),cut.forEach(t),Uvo=r(ixe," (LeViT model)"),ixe.forEach(t),Jvo=i(Y),tu=n(Y,"LI",{});var dxe=s(tu);Yde=n(dxe,"STRONG",{});var mut=s(Yde);Yvo=r(mut,"maskformer"),mut.forEach(t),Kvo=r(dxe," \u2014 "),Nq=n(dxe,"A",{href:!0});var fut=s(Nq);Zvo=r(fut,"MaskFormerFeatureExtractor"),fut.forEach(t),e1o=r(dxe," (MaskFormer model)"),dxe.forEach(t),o1o=i(Y),au=n(Y,"LI",{});var cxe=s(au);Kde=n(cxe,"STRONG",{});var gut=s(Kde);r1o=r(gut,"mctct"),gut.forEach(t),t1o=r(cxe," \u2014 "),qq=n(cxe,"A",{href:!0});var hut=s(qq);a1o=r(hut,"MCTCTFeatureExtractor"),hut.forEach(t),n1o=r(cxe," (M-CTC-T model)"),cxe.forEach(t),s1o=i(Y),nu=n(Y,"LI",{});var mxe=s(nu);Zde=n(mxe,"STRONG",{});var uut=s(Zde);l1o=r(uut,"mobilevit"),uut.forEach(t),i1o=r(mxe," \u2014 "),jq=n(mxe,"A",{href:!0});var put=s(jq);d1o=r(put,"MobileViTFeatureExtractor"),put.forEach(t),c1o=r(mxe," (MobileViT model)"),mxe.forEach(t),m1o=i(Y),su=n(Y,"LI",{});var fxe=s(su);ece=n(fxe,"STRONG",{});var _ut=s(ece);f1o=r(_ut,"owlvit"),_ut.forEach(t),g1o=r(fxe," \u2014 "),Dq=n(fxe,"A",{href:!0});var but=s(Dq);h1o=r(but,"OwlViTFeatureExtractor"),but.forEach(t),u1o=r(fxe," (OWL-ViT model)"),fxe.forEach(t),p1o=i(Y),lu=n(Y,"LI",{});var gxe=s(lu);oce=n(gxe,"STRONG",{});var vut=s(oce);_1o=r(vut,"perceiver"),vut.forEach(t),b1o=r(gxe," \u2014 "),Gq=n(gxe,"A",{href:!0});var Fut=s(Gq);v1o=r(Fut,"PerceiverFeatureExtractor"),Fut.forEach(t),F1o=r(gxe," (Perceiver model)"),gxe.forEach(t),T1o=i(Y),iu=n(Y,"LI",{});var hxe=s(iu);rce=n(hxe,"STRONG",{});var Tut=s(rce);M1o=r(Tut,"poolformer"),Tut.forEach(t),E1o=r(hxe," \u2014 "),Oq=n(hxe,"A",{href:!0});var Mut=s(Oq);C1o=r(Mut,"PoolFormerFeatureExtractor"),Mut.forEach(t),w1o=r(hxe," (PoolFormer model)"),hxe.forEach(t),A1o=i(Y),du=n(Y,"LI",{});var uxe=s(du);tce=n(uxe,"STRONG",{});var Eut=s(tce);L1o=r(Eut,"regnet"),Eut.forEach(t),y1o=r(uxe," \u2014 "),Vq=n(uxe,"A",{href:!0});var Cut=s(Vq);x1o=r(Cut,"ConvNextFeatureExtractor"),Cut.forEach(t),$1o=r(uxe," (RegNet model)"),uxe.forEach(t),k1o=i(Y),cu=n(Y,"LI",{});var pxe=s(cu);ace=n(pxe,"STRONG",{});var wut=s(ace);S1o=r(wut,"resnet"),wut.forEach(t),R1o=r(pxe," \u2014 "),Xq=n(pxe,"A",{href:!0});var Aut=s(Xq);P1o=r(Aut,"ConvNextFeatureExtractor"),Aut.forEach(t),B1o=r(pxe," (ResNet model)"),pxe.forEach(t),I1o=i(Y),mu=n(Y,"LI",{});var _xe=s(mu);nce=n(_xe,"STRONG",{});var Lut=s(nce);N1o=r(Lut,"segformer"),Lut.forEach(t),q1o=r(_xe," \u2014 "),zq=n(_xe,"A",{href:!0});var yut=s(zq);j1o=r(yut,"SegformerFeatureExtractor"),yut.forEach(t),D1o=r(_xe," (SegFormer model)"),_xe.forEach(t),G1o=i(Y),fu=n(Y,"LI",{});var bxe=s(fu);sce=n(bxe,"STRONG",{});var xut=s(sce);O1o=r(xut,"speech_to_text"),xut.forEach(t),V1o=r(bxe," \u2014 "),Wq=n(bxe,"A",{href:!0});var $ut=s(Wq);X1o=r($ut,"Speech2TextFeatureExtractor"),$ut.forEach(t),z1o=r(bxe," (Speech2Text model)"),bxe.forEach(t),W1o=i(Y),gu=n(Y,"LI",{});var vxe=s(gu);lce=n(vxe,"STRONG",{});var kut=s(lce);Q1o=r(kut,"swin"),kut.forEach(t),H1o=r(vxe," \u2014 "),Qq=n(vxe,"A",{href:!0});var Sut=s(Qq);U1o=r(Sut,"ViTFeatureExtractor"),Sut.forEach(t),J1o=r(vxe," (Swin Transformer model)"),vxe.forEach(t),Y1o=i(Y),hu=n(Y,"LI",{});var Fxe=s(hu);ice=n(Fxe,"STRONG",{});var Rut=s(ice);K1o=r(Rut,"swinv2"),Rut.forEach(t),Z1o=r(Fxe," \u2014 "),Hq=n(Fxe,"A",{href:!0});var Put=s(Hq);eFo=r(Put,"ViTFeatureExtractor"),Put.forEach(t),oFo=r(Fxe," (Swin Transformer V2 model)"),Fxe.forEach(t),rFo=i(Y),uu=n(Y,"LI",{});var Txe=s(uu);dce=n(Txe,"STRONG",{});var But=s(dce);tFo=r(But,"van"),But.forEach(t),aFo=r(Txe," \u2014 "),Uq=n(Txe,"A",{href:!0});var Iut=s(Uq);nFo=r(Iut,"ConvNextFeatureExtractor"),Iut.forEach(t),sFo=r(Txe," (VAN model)"),Txe.forEach(t),lFo=i(Y),pu=n(Y,"LI",{});var Mxe=s(pu);cce=n(Mxe,"STRONG",{});var Nut=s(cce);iFo=r(Nut,"vilt"),Nut.forEach(t),dFo=r(Mxe," \u2014 "),Jq=n(Mxe,"A",{href:!0});var qut=s(Jq);cFo=r(qut,"ViltFeatureExtractor"),qut.forEach(t),mFo=r(Mxe," (ViLT model)"),Mxe.forEach(t),fFo=i(Y),_u=n(Y,"LI",{});var Exe=s(_u);mce=n(Exe,"STRONG",{});var jut=s(mce);gFo=r(jut,"vit"),jut.forEach(t),hFo=r(Exe," \u2014 "),Yq=n(Exe,"A",{href:!0});var Dut=s(Yq);uFo=r(Dut,"ViTFeatureExtractor"),Dut.forEach(t),pFo=r(Exe," (ViT model)"),Exe.forEach(t),_Fo=i(Y),bu=n(Y,"LI",{});var Cxe=s(bu);fce=n(Cxe,"STRONG",{});var Gut=s(fce);bFo=r(Gut,"vit_mae"),Gut.forEach(t),vFo=r(Cxe," \u2014 "),Kq=n(Cxe,"A",{href:!0});var Out=s(Kq);FFo=r(Out,"ViTFeatureExtractor"),Out.forEach(t),TFo=r(Cxe," (ViTMAE model)"),Cxe.forEach(t),MFo=i(Y),vu=n(Y,"LI",{});var wxe=s(vu);gce=n(wxe,"STRONG",{});var Vut=s(gce);EFo=r(Vut,"wav2vec2"),Vut.forEach(t),CFo=r(wxe," \u2014 "),Zq=n(wxe,"A",{href:!0});var Xut=s(Zq);wFo=r(Xut,"Wav2Vec2FeatureExtractor"),Xut.forEach(t),AFo=r(wxe," (Wav2Vec2 model)"),wxe.forEach(t),LFo=i(Y),Fu=n(Y,"LI",{});var Axe=s(Fu);hce=n(Axe,"STRONG",{});var zut=s(hce);yFo=r(zut,"wav2vec2-conformer"),zut.forEach(t),xFo=r(Axe," \u2014 "),ej=n(Axe,"A",{href:!0});var Wut=s(ej);$Fo=r(Wut,"Wav2Vec2FeatureExtractor"),Wut.forEach(t),kFo=r(Axe," (Wav2Vec2-Conformer model)"),Axe.forEach(t),SFo=i(Y),Tu=n(Y,"LI",{});var Lxe=s(Tu);uce=n(Lxe,"STRONG",{});var Qut=s(uce);RFo=r(Qut,"yolos"),Qut.forEach(t),PFo=r(Lxe," \u2014 "),oj=n(Lxe,"A",{href:!0});var Hut=s(oj);BFo=r(Hut,"YolosFeatureExtractor"),Hut.forEach(t),IFo=r(Lxe," (YOLOS model)"),Lxe.forEach(t),Y.forEach(t),NFo=i(na),T(Mu.$$.fragment,na),qFo=i(na),T(Eu.$$.fragment,na),na.forEach(t),jFo=i(tl),Cu=n(tl,"DIV",{class:!0});var EQe=s(Cu);T(Dy.$$.fragment,EQe),DFo=i(EQe),pce=n(EQe,"P",{});var Uut=s(pce);GFo=r(Uut,"Register a new feature extractor for this class."),Uut.forEach(t),EQe.forEach(t),tl.forEach(t),Fze=i(m),Oi=n(m,"H2",{class:!0});var CQe=s(Oi);wu=n(CQe,"A",{id:!0,class:!0,href:!0});var Jut=s(wu);_ce=n(Jut,"SPAN",{});var Yut=s(_ce);T(Gy.$$.fragment,Yut),Yut.forEach(t),Jut.forEach(t),OFo=i(CQe),bce=n(CQe,"SPAN",{});var Kut=s(bce);VFo=r(Kut,"AutoProcessor"),Kut.forEach(t),CQe.forEach(t),Tze=i(m),$o=n(m,"DIV",{class:!0});var al=s($o);T(Oy.$$.fragment,al),XFo=i(al),Vy=n(al,"P",{});var wQe=s(Vy);zFo=r(wQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),rj=n(wQe,"A",{href:!0});var Zut=s(rj);WFo=r(Zut,"AutoProcessor.from_pretrained()"),Zut.forEach(t),QFo=r(wQe," class method."),wQe.forEach(t),HFo=i(al),Xy=n(al,"P",{});var AQe=s(Xy);UFo=r(AQe,"This class cannot be instantiated directly using "),vce=n(AQe,"CODE",{});var ept=s(vce);JFo=r(ept,"__init__()"),ept.forEach(t),YFo=r(AQe," (throws an error)."),AQe.forEach(t),KFo=i(al),Je=n(al,"DIV",{class:!0});var sa=s(Je);T(zy.$$.fragment,sa),ZFo=i(sa),Fce=n(sa,"P",{});var opt=s(Fce);eTo=r(opt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),opt.forEach(t),oTo=i(sa),Vi=n(sa,"P",{});var hte=s(Vi);rTo=r(hte,"The processor class to instantiate is selected based on the "),Tce=n(hte,"CODE",{});var rpt=s(Tce);tTo=r(rpt,"model_type"),rpt.forEach(t),aTo=r(hte,` property of the config object (either
passed as an argument or loaded from `),Mce=n(hte,"CODE",{});var tpt=s(Mce);nTo=r(tpt,"pretrained_model_name_or_path"),tpt.forEach(t),sTo=r(hte," if possible):"),hte.forEach(t),lTo=i(sa),me=n(sa,"UL",{});var pe=s(me);Au=n(pe,"LI",{});var yxe=s(Au);Ece=n(yxe,"STRONG",{});var apt=s(Ece);iTo=r(apt,"clip"),apt.forEach(t),dTo=r(yxe," \u2014 "),tj=n(yxe,"A",{href:!0});var npt=s(tj);cTo=r(npt,"CLIPProcessor"),npt.forEach(t),mTo=r(yxe," (CLIP model)"),yxe.forEach(t),fTo=i(pe),Lu=n(pe,"LI",{});var xxe=s(Lu);Cce=n(xxe,"STRONG",{});var spt=s(Cce);gTo=r(spt,"flava"),spt.forEach(t),hTo=r(xxe," \u2014 "),aj=n(xxe,"A",{href:!0});var lpt=s(aj);uTo=r(lpt,"FlavaProcessor"),lpt.forEach(t),pTo=r(xxe," (FLAVA model)"),xxe.forEach(t),_To=i(pe),yu=n(pe,"LI",{});var $xe=s(yu);wce=n($xe,"STRONG",{});var ipt=s(wce);bTo=r(ipt,"groupvit"),ipt.forEach(t),vTo=r($xe," \u2014 "),nj=n($xe,"A",{href:!0});var dpt=s(nj);FTo=r(dpt,"CLIPProcessor"),dpt.forEach(t),TTo=r($xe," (GroupViT model)"),$xe.forEach(t),MTo=i(pe),xu=n(pe,"LI",{});var kxe=s(xu);Ace=n(kxe,"STRONG",{});var cpt=s(Ace);ETo=r(cpt,"layoutlmv2"),cpt.forEach(t),CTo=r(kxe," \u2014 "),sj=n(kxe,"A",{href:!0});var mpt=s(sj);wTo=r(mpt,"LayoutLMv2Processor"),mpt.forEach(t),ATo=r(kxe," (LayoutLMv2 model)"),kxe.forEach(t),LTo=i(pe),$u=n(pe,"LI",{});var Sxe=s($u);Lce=n(Sxe,"STRONG",{});var fpt=s(Lce);yTo=r(fpt,"layoutlmv3"),fpt.forEach(t),xTo=r(Sxe," \u2014 "),lj=n(Sxe,"A",{href:!0});var gpt=s(lj);$To=r(gpt,"LayoutLMv3Processor"),gpt.forEach(t),kTo=r(Sxe," (LayoutLMv3 model)"),Sxe.forEach(t),STo=i(pe),ku=n(pe,"LI",{});var Rxe=s(ku);yce=n(Rxe,"STRONG",{});var hpt=s(yce);RTo=r(hpt,"layoutxlm"),hpt.forEach(t),PTo=r(Rxe," \u2014 "),ij=n(Rxe,"A",{href:!0});var upt=s(ij);BTo=r(upt,"LayoutXLMProcessor"),upt.forEach(t),ITo=r(Rxe," (LayoutXLM model)"),Rxe.forEach(t),NTo=i(pe),Su=n(pe,"LI",{});var Pxe=s(Su);xce=n(Pxe,"STRONG",{});var ppt=s(xce);qTo=r(ppt,"owlvit"),ppt.forEach(t),jTo=r(Pxe," \u2014 "),dj=n(Pxe,"A",{href:!0});var _pt=s(dj);DTo=r(_pt,"OwlViTProcessor"),_pt.forEach(t),GTo=r(Pxe," (OWL-ViT model)"),Pxe.forEach(t),OTo=i(pe),Ru=n(pe,"LI",{});var Bxe=s(Ru);$ce=n(Bxe,"STRONG",{});var bpt=s($ce);VTo=r(bpt,"sew"),bpt.forEach(t),XTo=r(Bxe," \u2014 "),cj=n(Bxe,"A",{href:!0});var vpt=s(cj);zTo=r(vpt,"Wav2Vec2Processor"),vpt.forEach(t),WTo=r(Bxe," (SEW model)"),Bxe.forEach(t),QTo=i(pe),Pu=n(pe,"LI",{});var Ixe=s(Pu);kce=n(Ixe,"STRONG",{});var Fpt=s(kce);HTo=r(Fpt,"sew-d"),Fpt.forEach(t),UTo=r(Ixe," \u2014 "),mj=n(Ixe,"A",{href:!0});var Tpt=s(mj);JTo=r(Tpt,"Wav2Vec2Processor"),Tpt.forEach(t),YTo=r(Ixe," (SEW-D model)"),Ixe.forEach(t),KTo=i(pe),Bu=n(pe,"LI",{});var Nxe=s(Bu);Sce=n(Nxe,"STRONG",{});var Mpt=s(Sce);ZTo=r(Mpt,"speech_to_text"),Mpt.forEach(t),eMo=r(Nxe," \u2014 "),fj=n(Nxe,"A",{href:!0});var Ept=s(fj);oMo=r(Ept,"Speech2TextProcessor"),Ept.forEach(t),rMo=r(Nxe," (Speech2Text model)"),Nxe.forEach(t),tMo=i(pe),Iu=n(pe,"LI",{});var qxe=s(Iu);Rce=n(qxe,"STRONG",{});var Cpt=s(Rce);aMo=r(Cpt,"speech_to_text_2"),Cpt.forEach(t),nMo=r(qxe," \u2014 "),gj=n(qxe,"A",{href:!0});var wpt=s(gj);sMo=r(wpt,"Speech2Text2Processor"),wpt.forEach(t),lMo=r(qxe," (Speech2Text2 model)"),qxe.forEach(t),iMo=i(pe),Nu=n(pe,"LI",{});var jxe=s(Nu);Pce=n(jxe,"STRONG",{});var Apt=s(Pce);dMo=r(Apt,"trocr"),Apt.forEach(t),cMo=r(jxe," \u2014 "),hj=n(jxe,"A",{href:!0});var Lpt=s(hj);mMo=r(Lpt,"TrOCRProcessor"),Lpt.forEach(t),fMo=r(jxe," (TrOCR model)"),jxe.forEach(t),gMo=i(pe),qu=n(pe,"LI",{});var Dxe=s(qu);Bce=n(Dxe,"STRONG",{});var ypt=s(Bce);hMo=r(ypt,"unispeech"),ypt.forEach(t),uMo=r(Dxe," \u2014 "),uj=n(Dxe,"A",{href:!0});var xpt=s(uj);pMo=r(xpt,"Wav2Vec2Processor"),xpt.forEach(t),_Mo=r(Dxe," (UniSpeech model)"),Dxe.forEach(t),bMo=i(pe),ju=n(pe,"LI",{});var Gxe=s(ju);Ice=n(Gxe,"STRONG",{});var $pt=s(Ice);vMo=r($pt,"unispeech-sat"),$pt.forEach(t),FMo=r(Gxe," \u2014 "),pj=n(Gxe,"A",{href:!0});var kpt=s(pj);TMo=r(kpt,"Wav2Vec2Processor"),kpt.forEach(t),MMo=r(Gxe," (UniSpeechSat model)"),Gxe.forEach(t),EMo=i(pe),Du=n(pe,"LI",{});var Oxe=s(Du);Nce=n(Oxe,"STRONG",{});var Spt=s(Nce);CMo=r(Spt,"vilt"),Spt.forEach(t),wMo=r(Oxe," \u2014 "),_j=n(Oxe,"A",{href:!0});var Rpt=s(_j);AMo=r(Rpt,"ViltProcessor"),Rpt.forEach(t),LMo=r(Oxe," (ViLT model)"),Oxe.forEach(t),yMo=i(pe),Gu=n(pe,"LI",{});var Vxe=s(Gu);qce=n(Vxe,"STRONG",{});var Ppt=s(qce);xMo=r(Ppt,"vision-text-dual-encoder"),Ppt.forEach(t),$Mo=r(Vxe," \u2014 "),bj=n(Vxe,"A",{href:!0});var Bpt=s(bj);kMo=r(Bpt,"VisionTextDualEncoderProcessor"),Bpt.forEach(t),SMo=r(Vxe," (VisionTextDualEncoder model)"),Vxe.forEach(t),RMo=i(pe),Ou=n(pe,"LI",{});var Xxe=s(Ou);jce=n(Xxe,"STRONG",{});var Ipt=s(jce);PMo=r(Ipt,"wav2vec2"),Ipt.forEach(t),BMo=r(Xxe," \u2014 "),vj=n(Xxe,"A",{href:!0});var Npt=s(vj);IMo=r(Npt,"Wav2Vec2Processor"),Npt.forEach(t),NMo=r(Xxe," (Wav2Vec2 model)"),Xxe.forEach(t),qMo=i(pe),Vu=n(pe,"LI",{});var zxe=s(Vu);Dce=n(zxe,"STRONG",{});var qpt=s(Dce);jMo=r(qpt,"wav2vec2-conformer"),qpt.forEach(t),DMo=r(zxe," \u2014 "),Fj=n(zxe,"A",{href:!0});var jpt=s(Fj);GMo=r(jpt,"Wav2Vec2Processor"),jpt.forEach(t),OMo=r(zxe," (Wav2Vec2-Conformer model)"),zxe.forEach(t),VMo=i(pe),Xu=n(pe,"LI",{});var Wxe=s(Xu);Gce=n(Wxe,"STRONG",{});var Dpt=s(Gce);XMo=r(Dpt,"wavlm"),Dpt.forEach(t),zMo=r(Wxe," \u2014 "),Tj=n(Wxe,"A",{href:!0});var Gpt=s(Tj);WMo=r(Gpt,"Wav2Vec2Processor"),Gpt.forEach(t),QMo=r(Wxe," (WavLM model)"),Wxe.forEach(t),pe.forEach(t),HMo=i(sa),T(zu.$$.fragment,sa),UMo=i(sa),T(Wu.$$.fragment,sa),sa.forEach(t),JMo=i(al),Qu=n(al,"DIV",{class:!0});var LQe=s(Qu);T(Wy.$$.fragment,LQe),YMo=i(LQe),Oce=n(LQe,"P",{});var Opt=s(Oce);KMo=r(Opt,"Register a new processor for this class."),Opt.forEach(t),LQe.forEach(t),al.forEach(t),Mze=i(m),Xi=n(m,"H2",{class:!0});var yQe=s(Xi);Hu=n(yQe,"A",{id:!0,class:!0,href:!0});var Vpt=s(Hu);Vce=n(Vpt,"SPAN",{});var Xpt=s(Vce);T(Qy.$$.fragment,Xpt),Xpt.forEach(t),Vpt.forEach(t),ZMo=i(yQe),Xce=n(yQe,"SPAN",{});var zpt=s(Xce);e4o=r(zpt,"AutoModel"),zpt.forEach(t),yQe.forEach(t),Eze=i(m),ko=n(m,"DIV",{class:!0});var nl=s(ko);T(Hy.$$.fragment,nl),o4o=i(nl),zi=n(nl,"P",{});var ute=s(zi);r4o=r(ute,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Mj=n(ute,"A",{href:!0});var Wpt=s(Mj);t4o=r(Wpt,"from_pretrained()"),Wpt.forEach(t),a4o=r(ute," class method or the "),Ej=n(ute,"A",{href:!0});var Qpt=s(Ej);n4o=r(Qpt,"from_config()"),Qpt.forEach(t),s4o=r(ute,` class
method.`),ute.forEach(t),l4o=i(nl),Uy=n(nl,"P",{});var xQe=s(Uy);i4o=r(xQe,"This class cannot be instantiated directly using "),zce=n(xQe,"CODE",{});var Hpt=s(zce);d4o=r(Hpt,"__init__()"),Hpt.forEach(t),c4o=r(xQe," (throws an error)."),xQe.forEach(t),m4o=i(nl),it=n(nl,"DIV",{class:!0});var C7=s(it);T(Jy.$$.fragment,C7),f4o=i(C7),Wce=n(C7,"P",{});var Upt=s(Wce);g4o=r(Upt,"Instantiates one of the base model classes of the library from a configuration."),Upt.forEach(t),h4o=i(C7),Wi=n(C7,"P",{});var pte=s(Wi);u4o=r(pte,`Note:
Loading a model from its configuration file does `),Qce=n(pte,"STRONG",{});var Jpt=s(Qce);p4o=r(Jpt,"not"),Jpt.forEach(t),_4o=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=n(pte,"A",{href:!0});var Ypt=s(Cj);b4o=r(Ypt,"from_pretrained()"),Ypt.forEach(t),v4o=r(pte," to load the model weights."),pte.forEach(t),F4o=i(C7),T(Uu.$$.fragment,C7),C7.forEach(t),T4o=i(nl),Ye=n(nl,"DIV",{class:!0});var la=s(Ye);T(Yy.$$.fragment,la),M4o=i(la),Hce=n(la,"P",{});var Kpt=s(Hce);E4o=r(Kpt,"Instantiate one of the base model classes of the library from a pretrained model."),Kpt.forEach(t),C4o=i(la),Ia=n(la,"P",{});var w7=s(Ia);w4o=r(w7,"The model class to instantiate is selected based on the "),Uce=n(w7,"CODE",{});var Zpt=s(Uce);A4o=r(Zpt,"model_type"),Zpt.forEach(t),L4o=r(w7,` property of the config object (either
passed as an argument or loaded from `),Jce=n(w7,"CODE",{});var e_t=s(Jce);y4o=r(e_t,"pretrained_model_name_or_path"),e_t.forEach(t),x4o=r(w7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yce=n(w7,"CODE",{});var o_t=s(Yce);$4o=r(o_t,"pretrained_model_name_or_path"),o_t.forEach(t),k4o=r(w7,":"),w7.forEach(t),S4o=i(la),y=n(la,"UL",{});var x=s(y);Ju=n(x,"LI",{});var Qxe=s(Ju);Kce=n(Qxe,"STRONG",{});var r_t=s(Kce);R4o=r(r_t,"albert"),r_t.forEach(t),P4o=r(Qxe," \u2014 "),wj=n(Qxe,"A",{href:!0});var t_t=s(wj);B4o=r(t_t,"AlbertModel"),t_t.forEach(t),I4o=r(Qxe," (ALBERT model)"),Qxe.forEach(t),N4o=i(x),Yu=n(x,"LI",{});var Hxe=s(Yu);Zce=n(Hxe,"STRONG",{});var a_t=s(Zce);q4o=r(a_t,"bart"),a_t.forEach(t),j4o=r(Hxe," \u2014 "),Aj=n(Hxe,"A",{href:!0});var n_t=s(Aj);D4o=r(n_t,"BartModel"),n_t.forEach(t),G4o=r(Hxe," (BART model)"),Hxe.forEach(t),O4o=i(x),Ku=n(x,"LI",{});var Uxe=s(Ku);eme=n(Uxe,"STRONG",{});var s_t=s(eme);V4o=r(s_t,"beit"),s_t.forEach(t),X4o=r(Uxe," \u2014 "),Lj=n(Uxe,"A",{href:!0});var l_t=s(Lj);z4o=r(l_t,"BeitModel"),l_t.forEach(t),W4o=r(Uxe," (BEiT model)"),Uxe.forEach(t),Q4o=i(x),Zu=n(x,"LI",{});var Jxe=s(Zu);ome=n(Jxe,"STRONG",{});var i_t=s(ome);H4o=r(i_t,"bert"),i_t.forEach(t),U4o=r(Jxe," \u2014 "),yj=n(Jxe,"A",{href:!0});var d_t=s(yj);J4o=r(d_t,"BertModel"),d_t.forEach(t),Y4o=r(Jxe," (BERT model)"),Jxe.forEach(t),K4o=i(x),ep=n(x,"LI",{});var Yxe=s(ep);rme=n(Yxe,"STRONG",{});var c_t=s(rme);Z4o=r(c_t,"bert-generation"),c_t.forEach(t),eEo=r(Yxe," \u2014 "),xj=n(Yxe,"A",{href:!0});var m_t=s(xj);oEo=r(m_t,"BertGenerationEncoder"),m_t.forEach(t),rEo=r(Yxe," (Bert Generation model)"),Yxe.forEach(t),tEo=i(x),op=n(x,"LI",{});var Kxe=s(op);tme=n(Kxe,"STRONG",{});var f_t=s(tme);aEo=r(f_t,"big_bird"),f_t.forEach(t),nEo=r(Kxe," \u2014 "),$j=n(Kxe,"A",{href:!0});var g_t=s($j);sEo=r(g_t,"BigBirdModel"),g_t.forEach(t),lEo=r(Kxe," (BigBird model)"),Kxe.forEach(t),iEo=i(x),rp=n(x,"LI",{});var Zxe=s(rp);ame=n(Zxe,"STRONG",{});var h_t=s(ame);dEo=r(h_t,"bigbird_pegasus"),h_t.forEach(t),cEo=r(Zxe," \u2014 "),kj=n(Zxe,"A",{href:!0});var u_t=s(kj);mEo=r(u_t,"BigBirdPegasusModel"),u_t.forEach(t),fEo=r(Zxe," (BigBird-Pegasus model)"),Zxe.forEach(t),gEo=i(x),tp=n(x,"LI",{});var e$e=s(tp);nme=n(e$e,"STRONG",{});var p_t=s(nme);hEo=r(p_t,"blenderbot"),p_t.forEach(t),uEo=r(e$e," \u2014 "),Sj=n(e$e,"A",{href:!0});var __t=s(Sj);pEo=r(__t,"BlenderbotModel"),__t.forEach(t),_Eo=r(e$e," (Blenderbot model)"),e$e.forEach(t),bEo=i(x),ap=n(x,"LI",{});var o$e=s(ap);sme=n(o$e,"STRONG",{});var b_t=s(sme);vEo=r(b_t,"blenderbot-small"),b_t.forEach(t),FEo=r(o$e," \u2014 "),Rj=n(o$e,"A",{href:!0});var v_t=s(Rj);TEo=r(v_t,"BlenderbotSmallModel"),v_t.forEach(t),MEo=r(o$e," (BlenderbotSmall model)"),o$e.forEach(t),EEo=i(x),np=n(x,"LI",{});var r$e=s(np);lme=n(r$e,"STRONG",{});var F_t=s(lme);CEo=r(F_t,"bloom"),F_t.forEach(t),wEo=r(r$e," \u2014 "),Pj=n(r$e,"A",{href:!0});var T_t=s(Pj);AEo=r(T_t,"BloomModel"),T_t.forEach(t),LEo=r(r$e," (BLOOM model)"),r$e.forEach(t),yEo=i(x),sp=n(x,"LI",{});var t$e=s(sp);ime=n(t$e,"STRONG",{});var M_t=s(ime);xEo=r(M_t,"camembert"),M_t.forEach(t),$Eo=r(t$e," \u2014 "),Bj=n(t$e,"A",{href:!0});var E_t=s(Bj);kEo=r(E_t,"CamembertModel"),E_t.forEach(t),SEo=r(t$e," (CamemBERT model)"),t$e.forEach(t),REo=i(x),lp=n(x,"LI",{});var a$e=s(lp);dme=n(a$e,"STRONG",{});var C_t=s(dme);PEo=r(C_t,"canine"),C_t.forEach(t),BEo=r(a$e," \u2014 "),Ij=n(a$e,"A",{href:!0});var w_t=s(Ij);IEo=r(w_t,"CanineModel"),w_t.forEach(t),NEo=r(a$e," (CANINE model)"),a$e.forEach(t),qEo=i(x),ip=n(x,"LI",{});var n$e=s(ip);cme=n(n$e,"STRONG",{});var A_t=s(cme);jEo=r(A_t,"clip"),A_t.forEach(t),DEo=r(n$e," \u2014 "),Nj=n(n$e,"A",{href:!0});var L_t=s(Nj);GEo=r(L_t,"CLIPModel"),L_t.forEach(t),OEo=r(n$e," (CLIP model)"),n$e.forEach(t),VEo=i(x),dp=n(x,"LI",{});var s$e=s(dp);mme=n(s$e,"STRONG",{});var y_t=s(mme);XEo=r(y_t,"codegen"),y_t.forEach(t),zEo=r(s$e," \u2014 "),qj=n(s$e,"A",{href:!0});var x_t=s(qj);WEo=r(x_t,"CodeGenModel"),x_t.forEach(t),QEo=r(s$e," (CodeGen model)"),s$e.forEach(t),HEo=i(x),cp=n(x,"LI",{});var l$e=s(cp);fme=n(l$e,"STRONG",{});var $_t=s(fme);UEo=r($_t,"convbert"),$_t.forEach(t),JEo=r(l$e," \u2014 "),jj=n(l$e,"A",{href:!0});var k_t=s(jj);YEo=r(k_t,"ConvBertModel"),k_t.forEach(t),KEo=r(l$e," (ConvBERT model)"),l$e.forEach(t),ZEo=i(x),mp=n(x,"LI",{});var i$e=s(mp);gme=n(i$e,"STRONG",{});var S_t=s(gme);eCo=r(S_t,"convnext"),S_t.forEach(t),oCo=r(i$e," \u2014 "),Dj=n(i$e,"A",{href:!0});var R_t=s(Dj);rCo=r(R_t,"ConvNextModel"),R_t.forEach(t),tCo=r(i$e," (ConvNeXT model)"),i$e.forEach(t),aCo=i(x),fp=n(x,"LI",{});var d$e=s(fp);hme=n(d$e,"STRONG",{});var P_t=s(hme);nCo=r(P_t,"ctrl"),P_t.forEach(t),sCo=r(d$e," \u2014 "),Gj=n(d$e,"A",{href:!0});var B_t=s(Gj);lCo=r(B_t,"CTRLModel"),B_t.forEach(t),iCo=r(d$e," (CTRL model)"),d$e.forEach(t),dCo=i(x),gp=n(x,"LI",{});var c$e=s(gp);ume=n(c$e,"STRONG",{});var I_t=s(ume);cCo=r(I_t,"cvt"),I_t.forEach(t),mCo=r(c$e," \u2014 "),Oj=n(c$e,"A",{href:!0});var N_t=s(Oj);fCo=r(N_t,"CvtModel"),N_t.forEach(t),gCo=r(c$e," (CvT model)"),c$e.forEach(t),hCo=i(x),hp=n(x,"LI",{});var m$e=s(hp);pme=n(m$e,"STRONG",{});var q_t=s(pme);uCo=r(q_t,"data2vec-audio"),q_t.forEach(t),pCo=r(m$e," \u2014 "),Vj=n(m$e,"A",{href:!0});var j_t=s(Vj);_Co=r(j_t,"Data2VecAudioModel"),j_t.forEach(t),bCo=r(m$e," (Data2VecAudio model)"),m$e.forEach(t),vCo=i(x),up=n(x,"LI",{});var f$e=s(up);_me=n(f$e,"STRONG",{});var D_t=s(_me);FCo=r(D_t,"data2vec-text"),D_t.forEach(t),TCo=r(f$e," \u2014 "),Xj=n(f$e,"A",{href:!0});var G_t=s(Xj);MCo=r(G_t,"Data2VecTextModel"),G_t.forEach(t),ECo=r(f$e," (Data2VecText model)"),f$e.forEach(t),CCo=i(x),pp=n(x,"LI",{});var g$e=s(pp);bme=n(g$e,"STRONG",{});var O_t=s(bme);wCo=r(O_t,"data2vec-vision"),O_t.forEach(t),ACo=r(g$e," \u2014 "),zj=n(g$e,"A",{href:!0});var V_t=s(zj);LCo=r(V_t,"Data2VecVisionModel"),V_t.forEach(t),yCo=r(g$e," (Data2VecVision model)"),g$e.forEach(t),xCo=i(x),_p=n(x,"LI",{});var h$e=s(_p);vme=n(h$e,"STRONG",{});var X_t=s(vme);$Co=r(X_t,"deberta"),X_t.forEach(t),kCo=r(h$e," \u2014 "),Wj=n(h$e,"A",{href:!0});var z_t=s(Wj);SCo=r(z_t,"DebertaModel"),z_t.forEach(t),RCo=r(h$e," (DeBERTa model)"),h$e.forEach(t),PCo=i(x),bp=n(x,"LI",{});var u$e=s(bp);Fme=n(u$e,"STRONG",{});var W_t=s(Fme);BCo=r(W_t,"deberta-v2"),W_t.forEach(t),ICo=r(u$e," \u2014 "),Qj=n(u$e,"A",{href:!0});var Q_t=s(Qj);NCo=r(Q_t,"DebertaV2Model"),Q_t.forEach(t),qCo=r(u$e," (DeBERTa-v2 model)"),u$e.forEach(t),jCo=i(x),vp=n(x,"LI",{});var p$e=s(vp);Tme=n(p$e,"STRONG",{});var H_t=s(Tme);DCo=r(H_t,"decision_transformer"),H_t.forEach(t),GCo=r(p$e," \u2014 "),Hj=n(p$e,"A",{href:!0});var U_t=s(Hj);OCo=r(U_t,"DecisionTransformerModel"),U_t.forEach(t),VCo=r(p$e," (Decision Transformer model)"),p$e.forEach(t),XCo=i(x),Fp=n(x,"LI",{});var _$e=s(Fp);Mme=n(_$e,"STRONG",{});var J_t=s(Mme);zCo=r(J_t,"deit"),J_t.forEach(t),WCo=r(_$e," \u2014 "),Uj=n(_$e,"A",{href:!0});var Y_t=s(Uj);QCo=r(Y_t,"DeiTModel"),Y_t.forEach(t),HCo=r(_$e," (DeiT model)"),_$e.forEach(t),UCo=i(x),Tp=n(x,"LI",{});var b$e=s(Tp);Eme=n(b$e,"STRONG",{});var K_t=s(Eme);JCo=r(K_t,"detr"),K_t.forEach(t),YCo=r(b$e," \u2014 "),Jj=n(b$e,"A",{href:!0});var Z_t=s(Jj);KCo=r(Z_t,"DetrModel"),Z_t.forEach(t),ZCo=r(b$e," (DETR model)"),b$e.forEach(t),e5o=i(x),Mp=n(x,"LI",{});var v$e=s(Mp);Cme=n(v$e,"STRONG",{});var e2t=s(Cme);o5o=r(e2t,"distilbert"),e2t.forEach(t),r5o=r(v$e," \u2014 "),Yj=n(v$e,"A",{href:!0});var o2t=s(Yj);t5o=r(o2t,"DistilBertModel"),o2t.forEach(t),a5o=r(v$e," (DistilBERT model)"),v$e.forEach(t),n5o=i(x),Ep=n(x,"LI",{});var F$e=s(Ep);wme=n(F$e,"STRONG",{});var r2t=s(wme);s5o=r(r2t,"dpr"),r2t.forEach(t),l5o=r(F$e," \u2014 "),Kj=n(F$e,"A",{href:!0});var t2t=s(Kj);i5o=r(t2t,"DPRQuestionEncoder"),t2t.forEach(t),d5o=r(F$e," (DPR model)"),F$e.forEach(t),c5o=i(x),Cp=n(x,"LI",{});var T$e=s(Cp);Ame=n(T$e,"STRONG",{});var a2t=s(Ame);m5o=r(a2t,"dpt"),a2t.forEach(t),f5o=r(T$e," \u2014 "),Zj=n(T$e,"A",{href:!0});var n2t=s(Zj);g5o=r(n2t,"DPTModel"),n2t.forEach(t),h5o=r(T$e," (DPT model)"),T$e.forEach(t),u5o=i(x),wp=n(x,"LI",{});var M$e=s(wp);Lme=n(M$e,"STRONG",{});var s2t=s(Lme);p5o=r(s2t,"electra"),s2t.forEach(t),_5o=r(M$e," \u2014 "),eD=n(M$e,"A",{href:!0});var l2t=s(eD);b5o=r(l2t,"ElectraModel"),l2t.forEach(t),v5o=r(M$e," (ELECTRA model)"),M$e.forEach(t),F5o=i(x),Ap=n(x,"LI",{});var E$e=s(Ap);yme=n(E$e,"STRONG",{});var i2t=s(yme);T5o=r(i2t,"flaubert"),i2t.forEach(t),M5o=r(E$e," \u2014 "),oD=n(E$e,"A",{href:!0});var d2t=s(oD);E5o=r(d2t,"FlaubertModel"),d2t.forEach(t),C5o=r(E$e," (FlauBERT model)"),E$e.forEach(t),w5o=i(x),Lp=n(x,"LI",{});var C$e=s(Lp);xme=n(C$e,"STRONG",{});var c2t=s(xme);A5o=r(c2t,"flava"),c2t.forEach(t),L5o=r(C$e," \u2014 "),rD=n(C$e,"A",{href:!0});var m2t=s(rD);y5o=r(m2t,"FlavaModel"),m2t.forEach(t),x5o=r(C$e," (FLAVA model)"),C$e.forEach(t),$5o=i(x),yp=n(x,"LI",{});var w$e=s(yp);$me=n(w$e,"STRONG",{});var f2t=s($me);k5o=r(f2t,"fnet"),f2t.forEach(t),S5o=r(w$e," \u2014 "),tD=n(w$e,"A",{href:!0});var g2t=s(tD);R5o=r(g2t,"FNetModel"),g2t.forEach(t),P5o=r(w$e," (FNet model)"),w$e.forEach(t),B5o=i(x),xp=n(x,"LI",{});var A$e=s(xp);kme=n(A$e,"STRONG",{});var h2t=s(kme);I5o=r(h2t,"fsmt"),h2t.forEach(t),N5o=r(A$e," \u2014 "),aD=n(A$e,"A",{href:!0});var u2t=s(aD);q5o=r(u2t,"FSMTModel"),u2t.forEach(t),j5o=r(A$e," (FairSeq Machine-Translation model)"),A$e.forEach(t),D5o=i(x),Js=n(x,"LI",{});var US=s(Js);Sme=n(US,"STRONG",{});var p2t=s(Sme);G5o=r(p2t,"funnel"),p2t.forEach(t),O5o=r(US," \u2014 "),nD=n(US,"A",{href:!0});var _2t=s(nD);V5o=r(_2t,"FunnelModel"),_2t.forEach(t),X5o=r(US," or "),sD=n(US,"A",{href:!0});var b2t=s(sD);z5o=r(b2t,"FunnelBaseModel"),b2t.forEach(t),W5o=r(US," (Funnel Transformer model)"),US.forEach(t),Q5o=i(x),$p=n(x,"LI",{});var L$e=s($p);Rme=n(L$e,"STRONG",{});var v2t=s(Rme);H5o=r(v2t,"glpn"),v2t.forEach(t),U5o=r(L$e," \u2014 "),lD=n(L$e,"A",{href:!0});var F2t=s(lD);J5o=r(F2t,"GLPNModel"),F2t.forEach(t),Y5o=r(L$e," (GLPN model)"),L$e.forEach(t),K5o=i(x),kp=n(x,"LI",{});var y$e=s(kp);Pme=n(y$e,"STRONG",{});var T2t=s(Pme);Z5o=r(T2t,"gpt2"),T2t.forEach(t),e3o=r(y$e," \u2014 "),iD=n(y$e,"A",{href:!0});var M2t=s(iD);o3o=r(M2t,"GPT2Model"),M2t.forEach(t),r3o=r(y$e," (OpenAI GPT-2 model)"),y$e.forEach(t),t3o=i(x),Sp=n(x,"LI",{});var x$e=s(Sp);Bme=n(x$e,"STRONG",{});var E2t=s(Bme);a3o=r(E2t,"gpt_neo"),E2t.forEach(t),n3o=r(x$e," \u2014 "),dD=n(x$e,"A",{href:!0});var C2t=s(dD);s3o=r(C2t,"GPTNeoModel"),C2t.forEach(t),l3o=r(x$e," (GPT Neo model)"),x$e.forEach(t),i3o=i(x),Rp=n(x,"LI",{});var $$e=s(Rp);Ime=n($$e,"STRONG",{});var w2t=s(Ime);d3o=r(w2t,"gpt_neox"),w2t.forEach(t),c3o=r($$e," \u2014 "),cD=n($$e,"A",{href:!0});var A2t=s(cD);m3o=r(A2t,"GPTNeoXModel"),A2t.forEach(t),f3o=r($$e," (GPT NeoX model)"),$$e.forEach(t),g3o=i(x),Pp=n(x,"LI",{});var k$e=s(Pp);Nme=n(k$e,"STRONG",{});var L2t=s(Nme);h3o=r(L2t,"gptj"),L2t.forEach(t),u3o=r(k$e," \u2014 "),mD=n(k$e,"A",{href:!0});var y2t=s(mD);p3o=r(y2t,"GPTJModel"),y2t.forEach(t),_3o=r(k$e," (GPT-J model)"),k$e.forEach(t),b3o=i(x),Bp=n(x,"LI",{});var S$e=s(Bp);qme=n(S$e,"STRONG",{});var x2t=s(qme);v3o=r(x2t,"groupvit"),x2t.forEach(t),F3o=r(S$e," \u2014 "),fD=n(S$e,"A",{href:!0});var $2t=s(fD);T3o=r($2t,"GroupViTModel"),$2t.forEach(t),M3o=r(S$e," (GroupViT model)"),S$e.forEach(t),E3o=i(x),Ip=n(x,"LI",{});var R$e=s(Ip);jme=n(R$e,"STRONG",{});var k2t=s(jme);C3o=r(k2t,"hubert"),k2t.forEach(t),w3o=r(R$e," \u2014 "),gD=n(R$e,"A",{href:!0});var S2t=s(gD);A3o=r(S2t,"HubertModel"),S2t.forEach(t),L3o=r(R$e," (Hubert model)"),R$e.forEach(t),y3o=i(x),Np=n(x,"LI",{});var P$e=s(Np);Dme=n(P$e,"STRONG",{});var R2t=s(Dme);x3o=r(R2t,"ibert"),R2t.forEach(t),$3o=r(P$e," \u2014 "),hD=n(P$e,"A",{href:!0});var P2t=s(hD);k3o=r(P2t,"IBertModel"),P2t.forEach(t),S3o=r(P$e," (I-BERT model)"),P$e.forEach(t),R3o=i(x),qp=n(x,"LI",{});var B$e=s(qp);Gme=n(B$e,"STRONG",{});var B2t=s(Gme);P3o=r(B2t,"imagegpt"),B2t.forEach(t),B3o=r(B$e," \u2014 "),uD=n(B$e,"A",{href:!0});var I2t=s(uD);I3o=r(I2t,"ImageGPTModel"),I2t.forEach(t),N3o=r(B$e," (ImageGPT model)"),B$e.forEach(t),q3o=i(x),jp=n(x,"LI",{});var I$e=s(jp);Ome=n(I$e,"STRONG",{});var N2t=s(Ome);j3o=r(N2t,"layoutlm"),N2t.forEach(t),D3o=r(I$e," \u2014 "),pD=n(I$e,"A",{href:!0});var q2t=s(pD);G3o=r(q2t,"LayoutLMModel"),q2t.forEach(t),O3o=r(I$e," (LayoutLM model)"),I$e.forEach(t),V3o=i(x),Dp=n(x,"LI",{});var N$e=s(Dp);Vme=n(N$e,"STRONG",{});var j2t=s(Vme);X3o=r(j2t,"layoutlmv2"),j2t.forEach(t),z3o=r(N$e," \u2014 "),_D=n(N$e,"A",{href:!0});var D2t=s(_D);W3o=r(D2t,"LayoutLMv2Model"),D2t.forEach(t),Q3o=r(N$e," (LayoutLMv2 model)"),N$e.forEach(t),H3o=i(x),Gp=n(x,"LI",{});var q$e=s(Gp);Xme=n(q$e,"STRONG",{});var G2t=s(Xme);U3o=r(G2t,"layoutlmv3"),G2t.forEach(t),J3o=r(q$e," \u2014 "),bD=n(q$e,"A",{href:!0});var O2t=s(bD);Y3o=r(O2t,"LayoutLMv3Model"),O2t.forEach(t),K3o=r(q$e," (LayoutLMv3 model)"),q$e.forEach(t),Z3o=i(x),Op=n(x,"LI",{});var j$e=s(Op);zme=n(j$e,"STRONG",{});var V2t=s(zme);e0o=r(V2t,"led"),V2t.forEach(t),o0o=r(j$e," \u2014 "),vD=n(j$e,"A",{href:!0});var X2t=s(vD);r0o=r(X2t,"LEDModel"),X2t.forEach(t),t0o=r(j$e," (LED model)"),j$e.forEach(t),a0o=i(x),Vp=n(x,"LI",{});var D$e=s(Vp);Wme=n(D$e,"STRONG",{});var z2t=s(Wme);n0o=r(z2t,"levit"),z2t.forEach(t),s0o=r(D$e," \u2014 "),FD=n(D$e,"A",{href:!0});var W2t=s(FD);l0o=r(W2t,"LevitModel"),W2t.forEach(t),i0o=r(D$e," (LeViT model)"),D$e.forEach(t),d0o=i(x),Xp=n(x,"LI",{});var G$e=s(Xp);Qme=n(G$e,"STRONG",{});var Q2t=s(Qme);c0o=r(Q2t,"longformer"),Q2t.forEach(t),m0o=r(G$e," \u2014 "),TD=n(G$e,"A",{href:!0});var H2t=s(TD);f0o=r(H2t,"LongformerModel"),H2t.forEach(t),g0o=r(G$e," (Longformer model)"),G$e.forEach(t),h0o=i(x),zp=n(x,"LI",{});var O$e=s(zp);Hme=n(O$e,"STRONG",{});var U2t=s(Hme);u0o=r(U2t,"longt5"),U2t.forEach(t),p0o=r(O$e," \u2014 "),MD=n(O$e,"A",{href:!0});var J2t=s(MD);_0o=r(J2t,"LongT5Model"),J2t.forEach(t),b0o=r(O$e," (LongT5 model)"),O$e.forEach(t),v0o=i(x),Wp=n(x,"LI",{});var V$e=s(Wp);Ume=n(V$e,"STRONG",{});var Y2t=s(Ume);F0o=r(Y2t,"luke"),Y2t.forEach(t),T0o=r(V$e," \u2014 "),ED=n(V$e,"A",{href:!0});var K2t=s(ED);M0o=r(K2t,"LukeModel"),K2t.forEach(t),E0o=r(V$e," (LUKE model)"),V$e.forEach(t),C0o=i(x),Qp=n(x,"LI",{});var X$e=s(Qp);Jme=n(X$e,"STRONG",{});var Z2t=s(Jme);w0o=r(Z2t,"lxmert"),Z2t.forEach(t),A0o=r(X$e," \u2014 "),CD=n(X$e,"A",{href:!0});var ebt=s(CD);L0o=r(ebt,"LxmertModel"),ebt.forEach(t),y0o=r(X$e," (LXMERT model)"),X$e.forEach(t),x0o=i(x),Hp=n(x,"LI",{});var z$e=s(Hp);Yme=n(z$e,"STRONG",{});var obt=s(Yme);$0o=r(obt,"m2m_100"),obt.forEach(t),k0o=r(z$e," \u2014 "),wD=n(z$e,"A",{href:!0});var rbt=s(wD);S0o=r(rbt,"M2M100Model"),rbt.forEach(t),R0o=r(z$e," (M2M100 model)"),z$e.forEach(t),P0o=i(x),Up=n(x,"LI",{});var W$e=s(Up);Kme=n(W$e,"STRONG",{});var tbt=s(Kme);B0o=r(tbt,"marian"),tbt.forEach(t),I0o=r(W$e," \u2014 "),AD=n(W$e,"A",{href:!0});var abt=s(AD);N0o=r(abt,"MarianModel"),abt.forEach(t),q0o=r(W$e," (Marian model)"),W$e.forEach(t),j0o=i(x),Jp=n(x,"LI",{});var Q$e=s(Jp);Zme=n(Q$e,"STRONG",{});var nbt=s(Zme);D0o=r(nbt,"maskformer"),nbt.forEach(t),G0o=r(Q$e," \u2014 "),LD=n(Q$e,"A",{href:!0});var sbt=s(LD);O0o=r(sbt,"MaskFormerModel"),sbt.forEach(t),V0o=r(Q$e," (MaskFormer model)"),Q$e.forEach(t),X0o=i(x),Yp=n(x,"LI",{});var H$e=s(Yp);efe=n(H$e,"STRONG",{});var lbt=s(efe);z0o=r(lbt,"mbart"),lbt.forEach(t),W0o=r(H$e," \u2014 "),yD=n(H$e,"A",{href:!0});var ibt=s(yD);Q0o=r(ibt,"MBartModel"),ibt.forEach(t),H0o=r(H$e," (mBART model)"),H$e.forEach(t),U0o=i(x),Kp=n(x,"LI",{});var U$e=s(Kp);ofe=n(U$e,"STRONG",{});var dbt=s(ofe);J0o=r(dbt,"mctct"),dbt.forEach(t),Y0o=r(U$e," \u2014 "),xD=n(U$e,"A",{href:!0});var cbt=s(xD);K0o=r(cbt,"MCTCTModel"),cbt.forEach(t),Z0o=r(U$e," (M-CTC-T model)"),U$e.forEach(t),ewo=i(x),Zp=n(x,"LI",{});var J$e=s(Zp);rfe=n(J$e,"STRONG",{});var mbt=s(rfe);owo=r(mbt,"megatron-bert"),mbt.forEach(t),rwo=r(J$e," \u2014 "),$D=n(J$e,"A",{href:!0});var fbt=s($D);two=r(fbt,"MegatronBertModel"),fbt.forEach(t),awo=r(J$e," (Megatron-BERT model)"),J$e.forEach(t),nwo=i(x),e_=n(x,"LI",{});var Y$e=s(e_);tfe=n(Y$e,"STRONG",{});var gbt=s(tfe);swo=r(gbt,"mobilebert"),gbt.forEach(t),lwo=r(Y$e," \u2014 "),kD=n(Y$e,"A",{href:!0});var hbt=s(kD);iwo=r(hbt,"MobileBertModel"),hbt.forEach(t),dwo=r(Y$e," (MobileBERT model)"),Y$e.forEach(t),cwo=i(x),o_=n(x,"LI",{});var K$e=s(o_);afe=n(K$e,"STRONG",{});var ubt=s(afe);mwo=r(ubt,"mobilevit"),ubt.forEach(t),fwo=r(K$e," \u2014 "),SD=n(K$e,"A",{href:!0});var pbt=s(SD);gwo=r(pbt,"MobileViTModel"),pbt.forEach(t),hwo=r(K$e," (MobileViT model)"),K$e.forEach(t),uwo=i(x),r_=n(x,"LI",{});var Z$e=s(r_);nfe=n(Z$e,"STRONG",{});var _bt=s(nfe);pwo=r(_bt,"mpnet"),_bt.forEach(t),_wo=r(Z$e," \u2014 "),RD=n(Z$e,"A",{href:!0});var bbt=s(RD);bwo=r(bbt,"MPNetModel"),bbt.forEach(t),vwo=r(Z$e," (MPNet model)"),Z$e.forEach(t),Fwo=i(x),t_=n(x,"LI",{});var eke=s(t_);sfe=n(eke,"STRONG",{});var vbt=s(sfe);Two=r(vbt,"mt5"),vbt.forEach(t),Mwo=r(eke," \u2014 "),PD=n(eke,"A",{href:!0});var Fbt=s(PD);Ewo=r(Fbt,"MT5Model"),Fbt.forEach(t),Cwo=r(eke," (MT5 model)"),eke.forEach(t),wwo=i(x),a_=n(x,"LI",{});var oke=s(a_);lfe=n(oke,"STRONG",{});var Tbt=s(lfe);Awo=r(Tbt,"mvp"),Tbt.forEach(t),Lwo=r(oke," \u2014 "),BD=n(oke,"A",{href:!0});var Mbt=s(BD);ywo=r(Mbt,"MvpModel"),Mbt.forEach(t),xwo=r(oke," (MVP model)"),oke.forEach(t),$wo=i(x),n_=n(x,"LI",{});var rke=s(n_);ife=n(rke,"STRONG",{});var Ebt=s(ife);kwo=r(Ebt,"nezha"),Ebt.forEach(t),Swo=r(rke," \u2014 "),ID=n(rke,"A",{href:!0});var Cbt=s(ID);Rwo=r(Cbt,"NezhaModel"),Cbt.forEach(t),Pwo=r(rke," (Nezha model)"),rke.forEach(t),Bwo=i(x),s_=n(x,"LI",{});var tke=s(s_);dfe=n(tke,"STRONG",{});var wbt=s(dfe);Iwo=r(wbt,"nllb"),wbt.forEach(t),Nwo=r(tke," \u2014 "),ND=n(tke,"A",{href:!0});var Abt=s(ND);qwo=r(Abt,"M2M100Model"),Abt.forEach(t),jwo=r(tke," (NLLB model)"),tke.forEach(t),Dwo=i(x),l_=n(x,"LI",{});var ake=s(l_);cfe=n(ake,"STRONG",{});var Lbt=s(cfe);Gwo=r(Lbt,"nystromformer"),Lbt.forEach(t),Owo=r(ake," \u2014 "),qD=n(ake,"A",{href:!0});var ybt=s(qD);Vwo=r(ybt,"NystromformerModel"),ybt.forEach(t),Xwo=r(ake," (Nystr\xF6mformer model)"),ake.forEach(t),zwo=i(x),i_=n(x,"LI",{});var nke=s(i_);mfe=n(nke,"STRONG",{});var xbt=s(mfe);Wwo=r(xbt,"openai-gpt"),xbt.forEach(t),Qwo=r(nke," \u2014 "),jD=n(nke,"A",{href:!0});var $bt=s(jD);Hwo=r($bt,"OpenAIGPTModel"),$bt.forEach(t),Uwo=r(nke," (OpenAI GPT model)"),nke.forEach(t),Jwo=i(x),d_=n(x,"LI",{});var ske=s(d_);ffe=n(ske,"STRONG",{});var kbt=s(ffe);Ywo=r(kbt,"opt"),kbt.forEach(t),Kwo=r(ske," \u2014 "),DD=n(ske,"A",{href:!0});var Sbt=s(DD);Zwo=r(Sbt,"OPTModel"),Sbt.forEach(t),eAo=r(ske," (OPT model)"),ske.forEach(t),oAo=i(x),c_=n(x,"LI",{});var lke=s(c_);gfe=n(lke,"STRONG",{});var Rbt=s(gfe);rAo=r(Rbt,"owlvit"),Rbt.forEach(t),tAo=r(lke," \u2014 "),GD=n(lke,"A",{href:!0});var Pbt=s(GD);aAo=r(Pbt,"OwlViTModel"),Pbt.forEach(t),nAo=r(lke," (OWL-ViT model)"),lke.forEach(t),sAo=i(x),m_=n(x,"LI",{});var ike=s(m_);hfe=n(ike,"STRONG",{});var Bbt=s(hfe);lAo=r(Bbt,"pegasus"),Bbt.forEach(t),iAo=r(ike," \u2014 "),OD=n(ike,"A",{href:!0});var Ibt=s(OD);dAo=r(Ibt,"PegasusModel"),Ibt.forEach(t),cAo=r(ike," (Pegasus model)"),ike.forEach(t),mAo=i(x),f_=n(x,"LI",{});var dke=s(f_);ufe=n(dke,"STRONG",{});var Nbt=s(ufe);fAo=r(Nbt,"perceiver"),Nbt.forEach(t),gAo=r(dke," \u2014 "),VD=n(dke,"A",{href:!0});var qbt=s(VD);hAo=r(qbt,"PerceiverModel"),qbt.forEach(t),uAo=r(dke," (Perceiver model)"),dke.forEach(t),pAo=i(x),g_=n(x,"LI",{});var cke=s(g_);pfe=n(cke,"STRONG",{});var jbt=s(pfe);_Ao=r(jbt,"plbart"),jbt.forEach(t),bAo=r(cke," \u2014 "),XD=n(cke,"A",{href:!0});var Dbt=s(XD);vAo=r(Dbt,"PLBartModel"),Dbt.forEach(t),FAo=r(cke," (PLBart model)"),cke.forEach(t),TAo=i(x),h_=n(x,"LI",{});var mke=s(h_);_fe=n(mke,"STRONG",{});var Gbt=s(_fe);MAo=r(Gbt,"poolformer"),Gbt.forEach(t),EAo=r(mke," \u2014 "),zD=n(mke,"A",{href:!0});var Obt=s(zD);CAo=r(Obt,"PoolFormerModel"),Obt.forEach(t),wAo=r(mke," (PoolFormer model)"),mke.forEach(t),AAo=i(x),u_=n(x,"LI",{});var fke=s(u_);bfe=n(fke,"STRONG",{});var Vbt=s(bfe);LAo=r(Vbt,"prophetnet"),Vbt.forEach(t),yAo=r(fke," \u2014 "),WD=n(fke,"A",{href:!0});var Xbt=s(WD);xAo=r(Xbt,"ProphetNetModel"),Xbt.forEach(t),$Ao=r(fke," (ProphetNet model)"),fke.forEach(t),kAo=i(x),p_=n(x,"LI",{});var gke=s(p_);vfe=n(gke,"STRONG",{});var zbt=s(vfe);SAo=r(zbt,"qdqbert"),zbt.forEach(t),RAo=r(gke," \u2014 "),QD=n(gke,"A",{href:!0});var Wbt=s(QD);PAo=r(Wbt,"QDQBertModel"),Wbt.forEach(t),BAo=r(gke," (QDQBert model)"),gke.forEach(t),IAo=i(x),__=n(x,"LI",{});var hke=s(__);Ffe=n(hke,"STRONG",{});var Qbt=s(Ffe);NAo=r(Qbt,"reformer"),Qbt.forEach(t),qAo=r(hke," \u2014 "),HD=n(hke,"A",{href:!0});var Hbt=s(HD);jAo=r(Hbt,"ReformerModel"),Hbt.forEach(t),DAo=r(hke," (Reformer model)"),hke.forEach(t),GAo=i(x),b_=n(x,"LI",{});var uke=s(b_);Tfe=n(uke,"STRONG",{});var Ubt=s(Tfe);OAo=r(Ubt,"regnet"),Ubt.forEach(t),VAo=r(uke," \u2014 "),UD=n(uke,"A",{href:!0});var Jbt=s(UD);XAo=r(Jbt,"RegNetModel"),Jbt.forEach(t),zAo=r(uke," (RegNet model)"),uke.forEach(t),WAo=i(x),v_=n(x,"LI",{});var pke=s(v_);Mfe=n(pke,"STRONG",{});var Ybt=s(Mfe);QAo=r(Ybt,"rembert"),Ybt.forEach(t),HAo=r(pke," \u2014 "),JD=n(pke,"A",{href:!0});var Kbt=s(JD);UAo=r(Kbt,"RemBertModel"),Kbt.forEach(t),JAo=r(pke," (RemBERT model)"),pke.forEach(t),YAo=i(x),F_=n(x,"LI",{});var _ke=s(F_);Efe=n(_ke,"STRONG",{});var Zbt=s(Efe);KAo=r(Zbt,"resnet"),Zbt.forEach(t),ZAo=r(_ke," \u2014 "),YD=n(_ke,"A",{href:!0});var evt=s(YD);e6o=r(evt,"ResNetModel"),evt.forEach(t),o6o=r(_ke," (ResNet model)"),_ke.forEach(t),r6o=i(x),T_=n(x,"LI",{});var bke=s(T_);Cfe=n(bke,"STRONG",{});var ovt=s(Cfe);t6o=r(ovt,"retribert"),ovt.forEach(t),a6o=r(bke," \u2014 "),KD=n(bke,"A",{href:!0});var rvt=s(KD);n6o=r(rvt,"RetriBertModel"),rvt.forEach(t),s6o=r(bke," (RetriBERT model)"),bke.forEach(t),l6o=i(x),M_=n(x,"LI",{});var vke=s(M_);wfe=n(vke,"STRONG",{});var tvt=s(wfe);i6o=r(tvt,"roberta"),tvt.forEach(t),d6o=r(vke," \u2014 "),ZD=n(vke,"A",{href:!0});var avt=s(ZD);c6o=r(avt,"RobertaModel"),avt.forEach(t),m6o=r(vke," (RoBERTa model)"),vke.forEach(t),f6o=i(x),E_=n(x,"LI",{});var Fke=s(E_);Afe=n(Fke,"STRONG",{});var nvt=s(Afe);g6o=r(nvt,"roformer"),nvt.forEach(t),h6o=r(Fke," \u2014 "),eG=n(Fke,"A",{href:!0});var svt=s(eG);u6o=r(svt,"RoFormerModel"),svt.forEach(t),p6o=r(Fke," (RoFormer model)"),Fke.forEach(t),_6o=i(x),C_=n(x,"LI",{});var Tke=s(C_);Lfe=n(Tke,"STRONG",{});var lvt=s(Lfe);b6o=r(lvt,"segformer"),lvt.forEach(t),v6o=r(Tke," \u2014 "),oG=n(Tke,"A",{href:!0});var ivt=s(oG);F6o=r(ivt,"SegformerModel"),ivt.forEach(t),T6o=r(Tke," (SegFormer model)"),Tke.forEach(t),M6o=i(x),w_=n(x,"LI",{});var Mke=s(w_);yfe=n(Mke,"STRONG",{});var dvt=s(yfe);E6o=r(dvt,"sew"),dvt.forEach(t),C6o=r(Mke," \u2014 "),rG=n(Mke,"A",{href:!0});var cvt=s(rG);w6o=r(cvt,"SEWModel"),cvt.forEach(t),A6o=r(Mke," (SEW model)"),Mke.forEach(t),L6o=i(x),A_=n(x,"LI",{});var Eke=s(A_);xfe=n(Eke,"STRONG",{});var mvt=s(xfe);y6o=r(mvt,"sew-d"),mvt.forEach(t),x6o=r(Eke," \u2014 "),tG=n(Eke,"A",{href:!0});var fvt=s(tG);$6o=r(fvt,"SEWDModel"),fvt.forEach(t),k6o=r(Eke," (SEW-D model)"),Eke.forEach(t),S6o=i(x),L_=n(x,"LI",{});var Cke=s(L_);$fe=n(Cke,"STRONG",{});var gvt=s($fe);R6o=r(gvt,"speech_to_text"),gvt.forEach(t),P6o=r(Cke," \u2014 "),aG=n(Cke,"A",{href:!0});var hvt=s(aG);B6o=r(hvt,"Speech2TextModel"),hvt.forEach(t),I6o=r(Cke," (Speech2Text model)"),Cke.forEach(t),N6o=i(x),y_=n(x,"LI",{});var wke=s(y_);kfe=n(wke,"STRONG",{});var uvt=s(kfe);q6o=r(uvt,"splinter"),uvt.forEach(t),j6o=r(wke," \u2014 "),nG=n(wke,"A",{href:!0});var pvt=s(nG);D6o=r(pvt,"SplinterModel"),pvt.forEach(t),G6o=r(wke," (Splinter model)"),wke.forEach(t),O6o=i(x),x_=n(x,"LI",{});var Ake=s(x_);Sfe=n(Ake,"STRONG",{});var _vt=s(Sfe);V6o=r(_vt,"squeezebert"),_vt.forEach(t),X6o=r(Ake," \u2014 "),sG=n(Ake,"A",{href:!0});var bvt=s(sG);z6o=r(bvt,"SqueezeBertModel"),bvt.forEach(t),W6o=r(Ake," (SqueezeBERT model)"),Ake.forEach(t),Q6o=i(x),$_=n(x,"LI",{});var Lke=s($_);Rfe=n(Lke,"STRONG",{});var vvt=s(Rfe);H6o=r(vvt,"swin"),vvt.forEach(t),U6o=r(Lke," \u2014 "),lG=n(Lke,"A",{href:!0});var Fvt=s(lG);J6o=r(Fvt,"SwinModel"),Fvt.forEach(t),Y6o=r(Lke," (Swin Transformer model)"),Lke.forEach(t),K6o=i(x),k_=n(x,"LI",{});var yke=s(k_);Pfe=n(yke,"STRONG",{});var Tvt=s(Pfe);Z6o=r(Tvt,"swinv2"),Tvt.forEach(t),e7o=r(yke," \u2014 "),iG=n(yke,"A",{href:!0});var Mvt=s(iG);o7o=r(Mvt,"Swinv2Model"),Mvt.forEach(t),r7o=r(yke," (Swin Transformer V2 model)"),yke.forEach(t),t7o=i(x),S_=n(x,"LI",{});var xke=s(S_);Bfe=n(xke,"STRONG",{});var Evt=s(Bfe);a7o=r(Evt,"t5"),Evt.forEach(t),n7o=r(xke," \u2014 "),dG=n(xke,"A",{href:!0});var Cvt=s(dG);s7o=r(Cvt,"T5Model"),Cvt.forEach(t),l7o=r(xke," (T5 model)"),xke.forEach(t),i7o=i(x),R_=n(x,"LI",{});var $ke=s(R_);Ife=n($ke,"STRONG",{});var wvt=s(Ife);d7o=r(wvt,"tapas"),wvt.forEach(t),c7o=r($ke," \u2014 "),cG=n($ke,"A",{href:!0});var Avt=s(cG);m7o=r(Avt,"TapasModel"),Avt.forEach(t),f7o=r($ke," (TAPAS model)"),$ke.forEach(t),g7o=i(x),P_=n(x,"LI",{});var kke=s(P_);Nfe=n(kke,"STRONG",{});var Lvt=s(Nfe);h7o=r(Lvt,"trajectory_transformer"),Lvt.forEach(t),u7o=r(kke," \u2014 "),mG=n(kke,"A",{href:!0});var yvt=s(mG);p7o=r(yvt,"TrajectoryTransformerModel"),yvt.forEach(t),_7o=r(kke," (Trajectory Transformer model)"),kke.forEach(t),b7o=i(x),B_=n(x,"LI",{});var Ske=s(B_);qfe=n(Ske,"STRONG",{});var xvt=s(qfe);v7o=r(xvt,"transfo-xl"),xvt.forEach(t),F7o=r(Ske," \u2014 "),fG=n(Ske,"A",{href:!0});var $vt=s(fG);T7o=r($vt,"TransfoXLModel"),$vt.forEach(t),M7o=r(Ske," (Transformer-XL model)"),Ske.forEach(t),E7o=i(x),I_=n(x,"LI",{});var Rke=s(I_);jfe=n(Rke,"STRONG",{});var kvt=s(jfe);C7o=r(kvt,"unispeech"),kvt.forEach(t),w7o=r(Rke," \u2014 "),gG=n(Rke,"A",{href:!0});var Svt=s(gG);A7o=r(Svt,"UniSpeechModel"),Svt.forEach(t),L7o=r(Rke," (UniSpeech model)"),Rke.forEach(t),y7o=i(x),N_=n(x,"LI",{});var Pke=s(N_);Dfe=n(Pke,"STRONG",{});var Rvt=s(Dfe);x7o=r(Rvt,"unispeech-sat"),Rvt.forEach(t),$7o=r(Pke," \u2014 "),hG=n(Pke,"A",{href:!0});var Pvt=s(hG);k7o=r(Pvt,"UniSpeechSatModel"),Pvt.forEach(t),S7o=r(Pke," (UniSpeechSat model)"),Pke.forEach(t),R7o=i(x),q_=n(x,"LI",{});var Bke=s(q_);Gfe=n(Bke,"STRONG",{});var Bvt=s(Gfe);P7o=r(Bvt,"van"),Bvt.forEach(t),B7o=r(Bke," \u2014 "),uG=n(Bke,"A",{href:!0});var Ivt=s(uG);I7o=r(Ivt,"VanModel"),Ivt.forEach(t),N7o=r(Bke," (VAN model)"),Bke.forEach(t),q7o=i(x),j_=n(x,"LI",{});var Ike=s(j_);Ofe=n(Ike,"STRONG",{});var Nvt=s(Ofe);j7o=r(Nvt,"vilt"),Nvt.forEach(t),D7o=r(Ike," \u2014 "),pG=n(Ike,"A",{href:!0});var qvt=s(pG);G7o=r(qvt,"ViltModel"),qvt.forEach(t),O7o=r(Ike," (ViLT model)"),Ike.forEach(t),V7o=i(x),D_=n(x,"LI",{});var Nke=s(D_);Vfe=n(Nke,"STRONG",{});var jvt=s(Vfe);X7o=r(jvt,"vision-text-dual-encoder"),jvt.forEach(t),z7o=r(Nke," \u2014 "),_G=n(Nke,"A",{href:!0});var Dvt=s(_G);W7o=r(Dvt,"VisionTextDualEncoderModel"),Dvt.forEach(t),Q7o=r(Nke," (VisionTextDualEncoder model)"),Nke.forEach(t),H7o=i(x),G_=n(x,"LI",{});var qke=s(G_);Xfe=n(qke,"STRONG",{});var Gvt=s(Xfe);U7o=r(Gvt,"visual_bert"),Gvt.forEach(t),J7o=r(qke," \u2014 "),bG=n(qke,"A",{href:!0});var Ovt=s(bG);Y7o=r(Ovt,"VisualBertModel"),Ovt.forEach(t),K7o=r(qke," (VisualBERT model)"),qke.forEach(t),Z7o=i(x),O_=n(x,"LI",{});var jke=s(O_);zfe=n(jke,"STRONG",{});var Vvt=s(zfe);eLo=r(Vvt,"vit"),Vvt.forEach(t),oLo=r(jke," \u2014 "),vG=n(jke,"A",{href:!0});var Xvt=s(vG);rLo=r(Xvt,"ViTModel"),Xvt.forEach(t),tLo=r(jke," (ViT model)"),jke.forEach(t),aLo=i(x),V_=n(x,"LI",{});var Dke=s(V_);Wfe=n(Dke,"STRONG",{});var zvt=s(Wfe);nLo=r(zvt,"vit_mae"),zvt.forEach(t),sLo=r(Dke," \u2014 "),FG=n(Dke,"A",{href:!0});var Wvt=s(FG);lLo=r(Wvt,"ViTMAEModel"),Wvt.forEach(t),iLo=r(Dke," (ViTMAE model)"),Dke.forEach(t),dLo=i(x),X_=n(x,"LI",{});var Gke=s(X_);Qfe=n(Gke,"STRONG",{});var Qvt=s(Qfe);cLo=r(Qvt,"wav2vec2"),Qvt.forEach(t),mLo=r(Gke," \u2014 "),TG=n(Gke,"A",{href:!0});var Hvt=s(TG);fLo=r(Hvt,"Wav2Vec2Model"),Hvt.forEach(t),gLo=r(Gke," (Wav2Vec2 model)"),Gke.forEach(t),hLo=i(x),z_=n(x,"LI",{});var Oke=s(z_);Hfe=n(Oke,"STRONG",{});var Uvt=s(Hfe);uLo=r(Uvt,"wav2vec2-conformer"),Uvt.forEach(t),pLo=r(Oke," \u2014 "),MG=n(Oke,"A",{href:!0});var Jvt=s(MG);_Lo=r(Jvt,"Wav2Vec2ConformerModel"),Jvt.forEach(t),bLo=r(Oke," (Wav2Vec2-Conformer model)"),Oke.forEach(t),vLo=i(x),W_=n(x,"LI",{});var Vke=s(W_);Ufe=n(Vke,"STRONG",{});var Yvt=s(Ufe);FLo=r(Yvt,"wavlm"),Yvt.forEach(t),TLo=r(Vke," \u2014 "),EG=n(Vke,"A",{href:!0});var Kvt=s(EG);MLo=r(Kvt,"WavLMModel"),Kvt.forEach(t),ELo=r(Vke," (WavLM model)"),Vke.forEach(t),CLo=i(x),Q_=n(x,"LI",{});var Xke=s(Q_);Jfe=n(Xke,"STRONG",{});var Zvt=s(Jfe);wLo=r(Zvt,"xglm"),Zvt.forEach(t),ALo=r(Xke," \u2014 "),CG=n(Xke,"A",{href:!0});var e1t=s(CG);LLo=r(e1t,"XGLMModel"),e1t.forEach(t),yLo=r(Xke," (XGLM model)"),Xke.forEach(t),xLo=i(x),H_=n(x,"LI",{});var zke=s(H_);Yfe=n(zke,"STRONG",{});var o1t=s(Yfe);$Lo=r(o1t,"xlm"),o1t.forEach(t),kLo=r(zke," \u2014 "),wG=n(zke,"A",{href:!0});var r1t=s(wG);SLo=r(r1t,"XLMModel"),r1t.forEach(t),RLo=r(zke," (XLM model)"),zke.forEach(t),PLo=i(x),U_=n(x,"LI",{});var Wke=s(U_);Kfe=n(Wke,"STRONG",{});var t1t=s(Kfe);BLo=r(t1t,"xlm-prophetnet"),t1t.forEach(t),ILo=r(Wke," \u2014 "),AG=n(Wke,"A",{href:!0});var a1t=s(AG);NLo=r(a1t,"XLMProphetNetModel"),a1t.forEach(t),qLo=r(Wke," (XLM-ProphetNet model)"),Wke.forEach(t),jLo=i(x),J_=n(x,"LI",{});var Qke=s(J_);Zfe=n(Qke,"STRONG",{});var n1t=s(Zfe);DLo=r(n1t,"xlm-roberta"),n1t.forEach(t),GLo=r(Qke," \u2014 "),LG=n(Qke,"A",{href:!0});var s1t=s(LG);OLo=r(s1t,"XLMRobertaModel"),s1t.forEach(t),VLo=r(Qke," (XLM-RoBERTa model)"),Qke.forEach(t),XLo=i(x),Y_=n(x,"LI",{});var Hke=s(Y_);ege=n(Hke,"STRONG",{});var l1t=s(ege);zLo=r(l1t,"xlm-roberta-xl"),l1t.forEach(t),WLo=r(Hke," \u2014 "),yG=n(Hke,"A",{href:!0});var i1t=s(yG);QLo=r(i1t,"XLMRobertaXLModel"),i1t.forEach(t),HLo=r(Hke," (XLM-RoBERTa-XL model)"),Hke.forEach(t),ULo=i(x),K_=n(x,"LI",{});var Uke=s(K_);oge=n(Uke,"STRONG",{});var d1t=s(oge);JLo=r(d1t,"xlnet"),d1t.forEach(t),YLo=r(Uke," \u2014 "),xG=n(Uke,"A",{href:!0});var c1t=s(xG);KLo=r(c1t,"XLNetModel"),c1t.forEach(t),ZLo=r(Uke," (XLNet model)"),Uke.forEach(t),eyo=i(x),Z_=n(x,"LI",{});var Jke=s(Z_);rge=n(Jke,"STRONG",{});var m1t=s(rge);oyo=r(m1t,"yolos"),m1t.forEach(t),ryo=r(Jke," \u2014 "),$G=n(Jke,"A",{href:!0});var f1t=s($G);tyo=r(f1t,"YolosModel"),f1t.forEach(t),ayo=r(Jke," (YOLOS model)"),Jke.forEach(t),nyo=i(x),e2=n(x,"LI",{});var Yke=s(e2);tge=n(Yke,"STRONG",{});var g1t=s(tge);syo=r(g1t,"yoso"),g1t.forEach(t),lyo=r(Yke," \u2014 "),kG=n(Yke,"A",{href:!0});var h1t=s(kG);iyo=r(h1t,"YosoModel"),h1t.forEach(t),dyo=r(Yke," (YOSO model)"),Yke.forEach(t),x.forEach(t),cyo=i(la),o2=n(la,"P",{});var Kke=s(o2);myo=r(Kke,"The model is set in evaluation mode by default using "),age=n(Kke,"CODE",{});var u1t=s(age);fyo=r(u1t,"model.eval()"),u1t.forEach(t),gyo=r(Kke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=n(Kke,"CODE",{});var p1t=s(nge);hyo=r(p1t,"model.train()"),p1t.forEach(t),Kke.forEach(t),uyo=i(la),T(r2.$$.fragment,la),la.forEach(t),nl.forEach(t),Cze=i(m),Qi=n(m,"H2",{class:!0});var $Qe=s(Qi);t2=n($Qe,"A",{id:!0,class:!0,href:!0});var _1t=s(t2);sge=n(_1t,"SPAN",{});var b1t=s(sge);T(Ky.$$.fragment,b1t),b1t.forEach(t),_1t.forEach(t),pyo=i($Qe),lge=n($Qe,"SPAN",{});var v1t=s(lge);_yo=r(v1t,"AutoModelForPreTraining"),v1t.forEach(t),$Qe.forEach(t),wze=i(m),So=n(m,"DIV",{class:!0});var sl=s(So);T(Zy.$$.fragment,sl),byo=i(sl),Hi=n(sl,"P",{});var _te=s(Hi);vyo=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),SG=n(_te,"A",{href:!0});var F1t=s(SG);Fyo=r(F1t,"from_pretrained()"),F1t.forEach(t),Tyo=r(_te," class method or the "),RG=n(_te,"A",{href:!0});var T1t=s(RG);Myo=r(T1t,"from_config()"),T1t.forEach(t),Eyo=r(_te,` class
method.`),_te.forEach(t),Cyo=i(sl),e8=n(sl,"P",{});var kQe=s(e8);wyo=r(kQe,"This class cannot be instantiated directly using "),ige=n(kQe,"CODE",{});var M1t=s(ige);Ayo=r(M1t,"__init__()"),M1t.forEach(t),Lyo=r(kQe," (throws an error)."),kQe.forEach(t),yyo=i(sl),dt=n(sl,"DIV",{class:!0});var A7=s(dt);T(o8.$$.fragment,A7),xyo=i(A7),dge=n(A7,"P",{});var E1t=s(dge);$yo=r(E1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),E1t.forEach(t),kyo=i(A7),Ui=n(A7,"P",{});var bte=s(Ui);Syo=r(bte,`Note:
Loading a model from its configuration file does `),cge=n(bte,"STRONG",{});var C1t=s(cge);Ryo=r(C1t,"not"),C1t.forEach(t),Pyo=r(bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=n(bte,"A",{href:!0});var w1t=s(PG);Byo=r(w1t,"from_pretrained()"),w1t.forEach(t),Iyo=r(bte," to load the model weights."),bte.forEach(t),Nyo=i(A7),T(a2.$$.fragment,A7),A7.forEach(t),qyo=i(sl),Ke=n(sl,"DIV",{class:!0});var ia=s(Ke);T(r8.$$.fragment,ia),jyo=i(ia),mge=n(ia,"P",{});var A1t=s(mge);Dyo=r(A1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),A1t.forEach(t),Gyo=i(ia),Na=n(ia,"P",{});var L7=s(Na);Oyo=r(L7,"The model class to instantiate is selected based on the "),fge=n(L7,"CODE",{});var L1t=s(fge);Vyo=r(L1t,"model_type"),L1t.forEach(t),Xyo=r(L7,` property of the config object (either
passed as an argument or loaded from `),gge=n(L7,"CODE",{});var y1t=s(gge);zyo=r(y1t,"pretrained_model_name_or_path"),y1t.forEach(t),Wyo=r(L7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=n(L7,"CODE",{});var x1t=s(hge);Qyo=r(x1t,"pretrained_model_name_or_path"),x1t.forEach(t),Hyo=r(L7,":"),L7.forEach(t),Uyo=i(ia),G=n(ia,"UL",{});var O=s(G);n2=n(O,"LI",{});var Zke=s(n2);uge=n(Zke,"STRONG",{});var $1t=s(uge);Jyo=r($1t,"albert"),$1t.forEach(t),Yyo=r(Zke," \u2014 "),BG=n(Zke,"A",{href:!0});var k1t=s(BG);Kyo=r(k1t,"AlbertForPreTraining"),k1t.forEach(t),Zyo=r(Zke," (ALBERT model)"),Zke.forEach(t),e8o=i(O),s2=n(O,"LI",{});var eSe=s(s2);pge=n(eSe,"STRONG",{});var S1t=s(pge);o8o=r(S1t,"bart"),S1t.forEach(t),r8o=r(eSe," \u2014 "),IG=n(eSe,"A",{href:!0});var R1t=s(IG);t8o=r(R1t,"BartForConditionalGeneration"),R1t.forEach(t),a8o=r(eSe," (BART model)"),eSe.forEach(t),n8o=i(O),l2=n(O,"LI",{});var oSe=s(l2);_ge=n(oSe,"STRONG",{});var P1t=s(_ge);s8o=r(P1t,"bert"),P1t.forEach(t),l8o=r(oSe," \u2014 "),NG=n(oSe,"A",{href:!0});var B1t=s(NG);i8o=r(B1t,"BertForPreTraining"),B1t.forEach(t),d8o=r(oSe," (BERT model)"),oSe.forEach(t),c8o=i(O),i2=n(O,"LI",{});var rSe=s(i2);bge=n(rSe,"STRONG",{});var I1t=s(bge);m8o=r(I1t,"big_bird"),I1t.forEach(t),f8o=r(rSe," \u2014 "),qG=n(rSe,"A",{href:!0});var N1t=s(qG);g8o=r(N1t,"BigBirdForPreTraining"),N1t.forEach(t),h8o=r(rSe," (BigBird model)"),rSe.forEach(t),u8o=i(O),d2=n(O,"LI",{});var tSe=s(d2);vge=n(tSe,"STRONG",{});var q1t=s(vge);p8o=r(q1t,"bloom"),q1t.forEach(t),_8o=r(tSe," \u2014 "),jG=n(tSe,"A",{href:!0});var j1t=s(jG);b8o=r(j1t,"BloomForCausalLM"),j1t.forEach(t),v8o=r(tSe," (BLOOM model)"),tSe.forEach(t),F8o=i(O),c2=n(O,"LI",{});var aSe=s(c2);Fge=n(aSe,"STRONG",{});var D1t=s(Fge);T8o=r(D1t,"camembert"),D1t.forEach(t),M8o=r(aSe," \u2014 "),DG=n(aSe,"A",{href:!0});var G1t=s(DG);E8o=r(G1t,"CamembertForMaskedLM"),G1t.forEach(t),C8o=r(aSe," (CamemBERT model)"),aSe.forEach(t),w8o=i(O),m2=n(O,"LI",{});var nSe=s(m2);Tge=n(nSe,"STRONG",{});var O1t=s(Tge);A8o=r(O1t,"ctrl"),O1t.forEach(t),L8o=r(nSe," \u2014 "),GG=n(nSe,"A",{href:!0});var V1t=s(GG);y8o=r(V1t,"CTRLLMHeadModel"),V1t.forEach(t),x8o=r(nSe," (CTRL model)"),nSe.forEach(t),$8o=i(O),f2=n(O,"LI",{});var sSe=s(f2);Mge=n(sSe,"STRONG",{});var X1t=s(Mge);k8o=r(X1t,"data2vec-text"),X1t.forEach(t),S8o=r(sSe," \u2014 "),OG=n(sSe,"A",{href:!0});var z1t=s(OG);R8o=r(z1t,"Data2VecTextForMaskedLM"),z1t.forEach(t),P8o=r(sSe," (Data2VecText model)"),sSe.forEach(t),B8o=i(O),g2=n(O,"LI",{});var lSe=s(g2);Ege=n(lSe,"STRONG",{});var W1t=s(Ege);I8o=r(W1t,"deberta"),W1t.forEach(t),N8o=r(lSe," \u2014 "),VG=n(lSe,"A",{href:!0});var Q1t=s(VG);q8o=r(Q1t,"DebertaForMaskedLM"),Q1t.forEach(t),j8o=r(lSe," (DeBERTa model)"),lSe.forEach(t),D8o=i(O),h2=n(O,"LI",{});var iSe=s(h2);Cge=n(iSe,"STRONG",{});var H1t=s(Cge);G8o=r(H1t,"deberta-v2"),H1t.forEach(t),O8o=r(iSe," \u2014 "),XG=n(iSe,"A",{href:!0});var U1t=s(XG);V8o=r(U1t,"DebertaV2ForMaskedLM"),U1t.forEach(t),X8o=r(iSe," (DeBERTa-v2 model)"),iSe.forEach(t),z8o=i(O),u2=n(O,"LI",{});var dSe=s(u2);wge=n(dSe,"STRONG",{});var J1t=s(wge);W8o=r(J1t,"distilbert"),J1t.forEach(t),Q8o=r(dSe," \u2014 "),zG=n(dSe,"A",{href:!0});var Y1t=s(zG);H8o=r(Y1t,"DistilBertForMaskedLM"),Y1t.forEach(t),U8o=r(dSe," (DistilBERT model)"),dSe.forEach(t),J8o=i(O),p2=n(O,"LI",{});var cSe=s(p2);Age=n(cSe,"STRONG",{});var K1t=s(Age);Y8o=r(K1t,"electra"),K1t.forEach(t),K8o=r(cSe," \u2014 "),WG=n(cSe,"A",{href:!0});var Z1t=s(WG);Z8o=r(Z1t,"ElectraForPreTraining"),Z1t.forEach(t),e9o=r(cSe," (ELECTRA model)"),cSe.forEach(t),o9o=i(O),_2=n(O,"LI",{});var mSe=s(_2);Lge=n(mSe,"STRONG",{});var eFt=s(Lge);r9o=r(eFt,"flaubert"),eFt.forEach(t),t9o=r(mSe," \u2014 "),QG=n(mSe,"A",{href:!0});var oFt=s(QG);a9o=r(oFt,"FlaubertWithLMHeadModel"),oFt.forEach(t),n9o=r(mSe," (FlauBERT model)"),mSe.forEach(t),s9o=i(O),b2=n(O,"LI",{});var fSe=s(b2);yge=n(fSe,"STRONG",{});var rFt=s(yge);l9o=r(rFt,"flava"),rFt.forEach(t),i9o=r(fSe," \u2014 "),HG=n(fSe,"A",{href:!0});var tFt=s(HG);d9o=r(tFt,"FlavaForPreTraining"),tFt.forEach(t),c9o=r(fSe," (FLAVA model)"),fSe.forEach(t),m9o=i(O),v2=n(O,"LI",{});var gSe=s(v2);xge=n(gSe,"STRONG",{});var aFt=s(xge);f9o=r(aFt,"fnet"),aFt.forEach(t),g9o=r(gSe," \u2014 "),UG=n(gSe,"A",{href:!0});var nFt=s(UG);h9o=r(nFt,"FNetForPreTraining"),nFt.forEach(t),u9o=r(gSe," (FNet model)"),gSe.forEach(t),p9o=i(O),F2=n(O,"LI",{});var hSe=s(F2);$ge=n(hSe,"STRONG",{});var sFt=s($ge);_9o=r(sFt,"fsmt"),sFt.forEach(t),b9o=r(hSe," \u2014 "),JG=n(hSe,"A",{href:!0});var lFt=s(JG);v9o=r(lFt,"FSMTForConditionalGeneration"),lFt.forEach(t),F9o=r(hSe," (FairSeq Machine-Translation model)"),hSe.forEach(t),T9o=i(O),T2=n(O,"LI",{});var uSe=s(T2);kge=n(uSe,"STRONG",{});var iFt=s(kge);M9o=r(iFt,"funnel"),iFt.forEach(t),E9o=r(uSe," \u2014 "),YG=n(uSe,"A",{href:!0});var dFt=s(YG);C9o=r(dFt,"FunnelForPreTraining"),dFt.forEach(t),w9o=r(uSe," (Funnel Transformer model)"),uSe.forEach(t),A9o=i(O),M2=n(O,"LI",{});var pSe=s(M2);Sge=n(pSe,"STRONG",{});var cFt=s(Sge);L9o=r(cFt,"gpt2"),cFt.forEach(t),y9o=r(pSe," \u2014 "),KG=n(pSe,"A",{href:!0});var mFt=s(KG);x9o=r(mFt,"GPT2LMHeadModel"),mFt.forEach(t),$9o=r(pSe," (OpenAI GPT-2 model)"),pSe.forEach(t),k9o=i(O),E2=n(O,"LI",{});var _Se=s(E2);Rge=n(_Se,"STRONG",{});var fFt=s(Rge);S9o=r(fFt,"ibert"),fFt.forEach(t),R9o=r(_Se," \u2014 "),ZG=n(_Se,"A",{href:!0});var gFt=s(ZG);P9o=r(gFt,"IBertForMaskedLM"),gFt.forEach(t),B9o=r(_Se," (I-BERT model)"),_Se.forEach(t),I9o=i(O),C2=n(O,"LI",{});var bSe=s(C2);Pge=n(bSe,"STRONG",{});var hFt=s(Pge);N9o=r(hFt,"layoutlm"),hFt.forEach(t),q9o=r(bSe," \u2014 "),eO=n(bSe,"A",{href:!0});var uFt=s(eO);j9o=r(uFt,"LayoutLMForMaskedLM"),uFt.forEach(t),D9o=r(bSe," (LayoutLM model)"),bSe.forEach(t),G9o=i(O),w2=n(O,"LI",{});var vSe=s(w2);Bge=n(vSe,"STRONG",{});var pFt=s(Bge);O9o=r(pFt,"longformer"),pFt.forEach(t),V9o=r(vSe," \u2014 "),oO=n(vSe,"A",{href:!0});var _Ft=s(oO);X9o=r(_Ft,"LongformerForMaskedLM"),_Ft.forEach(t),z9o=r(vSe," (Longformer model)"),vSe.forEach(t),W9o=i(O),A2=n(O,"LI",{});var FSe=s(A2);Ige=n(FSe,"STRONG",{});var bFt=s(Ige);Q9o=r(bFt,"lxmert"),bFt.forEach(t),H9o=r(FSe," \u2014 "),rO=n(FSe,"A",{href:!0});var vFt=s(rO);U9o=r(vFt,"LxmertForPreTraining"),vFt.forEach(t),J9o=r(FSe," (LXMERT model)"),FSe.forEach(t),Y9o=i(O),L2=n(O,"LI",{});var TSe=s(L2);Nge=n(TSe,"STRONG",{});var FFt=s(Nge);K9o=r(FFt,"megatron-bert"),FFt.forEach(t),Z9o=r(TSe," \u2014 "),tO=n(TSe,"A",{href:!0});var TFt=s(tO);exo=r(TFt,"MegatronBertForPreTraining"),TFt.forEach(t),oxo=r(TSe," (Megatron-BERT model)"),TSe.forEach(t),rxo=i(O),y2=n(O,"LI",{});var MSe=s(y2);qge=n(MSe,"STRONG",{});var MFt=s(qge);txo=r(MFt,"mobilebert"),MFt.forEach(t),axo=r(MSe," \u2014 "),aO=n(MSe,"A",{href:!0});var EFt=s(aO);nxo=r(EFt,"MobileBertForPreTraining"),EFt.forEach(t),sxo=r(MSe," (MobileBERT model)"),MSe.forEach(t),lxo=i(O),x2=n(O,"LI",{});var ESe=s(x2);jge=n(ESe,"STRONG",{});var CFt=s(jge);ixo=r(CFt,"mpnet"),CFt.forEach(t),dxo=r(ESe," \u2014 "),nO=n(ESe,"A",{href:!0});var wFt=s(nO);cxo=r(wFt,"MPNetForMaskedLM"),wFt.forEach(t),mxo=r(ESe," (MPNet model)"),ESe.forEach(t),fxo=i(O),$2=n(O,"LI",{});var CSe=s($2);Dge=n(CSe,"STRONG",{});var AFt=s(Dge);gxo=r(AFt,"mvp"),AFt.forEach(t),hxo=r(CSe," \u2014 "),sO=n(CSe,"A",{href:!0});var LFt=s(sO);uxo=r(LFt,"MvpForConditionalGeneration"),LFt.forEach(t),pxo=r(CSe," (MVP model)"),CSe.forEach(t),_xo=i(O),k2=n(O,"LI",{});var wSe=s(k2);Gge=n(wSe,"STRONG",{});var yFt=s(Gge);bxo=r(yFt,"nezha"),yFt.forEach(t),vxo=r(wSe," \u2014 "),lO=n(wSe,"A",{href:!0});var xFt=s(lO);Fxo=r(xFt,"NezhaForPreTraining"),xFt.forEach(t),Txo=r(wSe," (Nezha model)"),wSe.forEach(t),Mxo=i(O),S2=n(O,"LI",{});var ASe=s(S2);Oge=n(ASe,"STRONG",{});var $Ft=s(Oge);Exo=r($Ft,"openai-gpt"),$Ft.forEach(t),Cxo=r(ASe," \u2014 "),iO=n(ASe,"A",{href:!0});var kFt=s(iO);wxo=r(kFt,"OpenAIGPTLMHeadModel"),kFt.forEach(t),Axo=r(ASe," (OpenAI GPT model)"),ASe.forEach(t),Lxo=i(O),R2=n(O,"LI",{});var LSe=s(R2);Vge=n(LSe,"STRONG",{});var SFt=s(Vge);yxo=r(SFt,"retribert"),SFt.forEach(t),xxo=r(LSe," \u2014 "),dO=n(LSe,"A",{href:!0});var RFt=s(dO);$xo=r(RFt,"RetriBertModel"),RFt.forEach(t),kxo=r(LSe," (RetriBERT model)"),LSe.forEach(t),Sxo=i(O),P2=n(O,"LI",{});var ySe=s(P2);Xge=n(ySe,"STRONG",{});var PFt=s(Xge);Rxo=r(PFt,"roberta"),PFt.forEach(t),Pxo=r(ySe," \u2014 "),cO=n(ySe,"A",{href:!0});var BFt=s(cO);Bxo=r(BFt,"RobertaForMaskedLM"),BFt.forEach(t),Ixo=r(ySe," (RoBERTa model)"),ySe.forEach(t),Nxo=i(O),B2=n(O,"LI",{});var xSe=s(B2);zge=n(xSe,"STRONG",{});var IFt=s(zge);qxo=r(IFt,"splinter"),IFt.forEach(t),jxo=r(xSe," \u2014 "),mO=n(xSe,"A",{href:!0});var NFt=s(mO);Dxo=r(NFt,"SplinterForPreTraining"),NFt.forEach(t),Gxo=r(xSe," (Splinter model)"),xSe.forEach(t),Oxo=i(O),I2=n(O,"LI",{});var $Se=s(I2);Wge=n($Se,"STRONG",{});var qFt=s(Wge);Vxo=r(qFt,"squeezebert"),qFt.forEach(t),Xxo=r($Se," \u2014 "),fO=n($Se,"A",{href:!0});var jFt=s(fO);zxo=r(jFt,"SqueezeBertForMaskedLM"),jFt.forEach(t),Wxo=r($Se," (SqueezeBERT model)"),$Se.forEach(t),Qxo=i(O),N2=n(O,"LI",{});var kSe=s(N2);Qge=n(kSe,"STRONG",{});var DFt=s(Qge);Hxo=r(DFt,"t5"),DFt.forEach(t),Uxo=r(kSe," \u2014 "),gO=n(kSe,"A",{href:!0});var GFt=s(gO);Jxo=r(GFt,"T5ForConditionalGeneration"),GFt.forEach(t),Yxo=r(kSe," (T5 model)"),kSe.forEach(t),Kxo=i(O),q2=n(O,"LI",{});var SSe=s(q2);Hge=n(SSe,"STRONG",{});var OFt=s(Hge);Zxo=r(OFt,"tapas"),OFt.forEach(t),e$o=r(SSe," \u2014 "),hO=n(SSe,"A",{href:!0});var VFt=s(hO);o$o=r(VFt,"TapasForMaskedLM"),VFt.forEach(t),r$o=r(SSe," (TAPAS model)"),SSe.forEach(t),t$o=i(O),j2=n(O,"LI",{});var RSe=s(j2);Uge=n(RSe,"STRONG",{});var XFt=s(Uge);a$o=r(XFt,"transfo-xl"),XFt.forEach(t),n$o=r(RSe," \u2014 "),uO=n(RSe,"A",{href:!0});var zFt=s(uO);s$o=r(zFt,"TransfoXLLMHeadModel"),zFt.forEach(t),l$o=r(RSe," (Transformer-XL model)"),RSe.forEach(t),i$o=i(O),D2=n(O,"LI",{});var PSe=s(D2);Jge=n(PSe,"STRONG",{});var WFt=s(Jge);d$o=r(WFt,"unispeech"),WFt.forEach(t),c$o=r(PSe," \u2014 "),pO=n(PSe,"A",{href:!0});var QFt=s(pO);m$o=r(QFt,"UniSpeechForPreTraining"),QFt.forEach(t),f$o=r(PSe," (UniSpeech model)"),PSe.forEach(t),g$o=i(O),G2=n(O,"LI",{});var BSe=s(G2);Yge=n(BSe,"STRONG",{});var HFt=s(Yge);h$o=r(HFt,"unispeech-sat"),HFt.forEach(t),u$o=r(BSe," \u2014 "),_O=n(BSe,"A",{href:!0});var UFt=s(_O);p$o=r(UFt,"UniSpeechSatForPreTraining"),UFt.forEach(t),_$o=r(BSe," (UniSpeechSat model)"),BSe.forEach(t),b$o=i(O),O2=n(O,"LI",{});var ISe=s(O2);Kge=n(ISe,"STRONG",{});var JFt=s(Kge);v$o=r(JFt,"visual_bert"),JFt.forEach(t),F$o=r(ISe," \u2014 "),bO=n(ISe,"A",{href:!0});var YFt=s(bO);T$o=r(YFt,"VisualBertForPreTraining"),YFt.forEach(t),M$o=r(ISe," (VisualBERT model)"),ISe.forEach(t),E$o=i(O),V2=n(O,"LI",{});var NSe=s(V2);Zge=n(NSe,"STRONG",{});var KFt=s(Zge);C$o=r(KFt,"vit_mae"),KFt.forEach(t),w$o=r(NSe," \u2014 "),vO=n(NSe,"A",{href:!0});var ZFt=s(vO);A$o=r(ZFt,"ViTMAEForPreTraining"),ZFt.forEach(t),L$o=r(NSe," (ViTMAE model)"),NSe.forEach(t),y$o=i(O),X2=n(O,"LI",{});var qSe=s(X2);ehe=n(qSe,"STRONG",{});var eTt=s(ehe);x$o=r(eTt,"wav2vec2"),eTt.forEach(t),$$o=r(qSe," \u2014 "),FO=n(qSe,"A",{href:!0});var oTt=s(FO);k$o=r(oTt,"Wav2Vec2ForPreTraining"),oTt.forEach(t),S$o=r(qSe," (Wav2Vec2 model)"),qSe.forEach(t),R$o=i(O),z2=n(O,"LI",{});var jSe=s(z2);ohe=n(jSe,"STRONG",{});var rTt=s(ohe);P$o=r(rTt,"wav2vec2-conformer"),rTt.forEach(t),B$o=r(jSe," \u2014 "),TO=n(jSe,"A",{href:!0});var tTt=s(TO);I$o=r(tTt,"Wav2Vec2ConformerForPreTraining"),tTt.forEach(t),N$o=r(jSe," (Wav2Vec2-Conformer model)"),jSe.forEach(t),q$o=i(O),W2=n(O,"LI",{});var DSe=s(W2);rhe=n(DSe,"STRONG",{});var aTt=s(rhe);j$o=r(aTt,"xlm"),aTt.forEach(t),D$o=r(DSe," \u2014 "),MO=n(DSe,"A",{href:!0});var nTt=s(MO);G$o=r(nTt,"XLMWithLMHeadModel"),nTt.forEach(t),O$o=r(DSe," (XLM model)"),DSe.forEach(t),V$o=i(O),Q2=n(O,"LI",{});var GSe=s(Q2);the=n(GSe,"STRONG",{});var sTt=s(the);X$o=r(sTt,"xlm-roberta"),sTt.forEach(t),z$o=r(GSe," \u2014 "),EO=n(GSe,"A",{href:!0});var lTt=s(EO);W$o=r(lTt,"XLMRobertaForMaskedLM"),lTt.forEach(t),Q$o=r(GSe," (XLM-RoBERTa model)"),GSe.forEach(t),H$o=i(O),H2=n(O,"LI",{});var OSe=s(H2);ahe=n(OSe,"STRONG",{});var iTt=s(ahe);U$o=r(iTt,"xlm-roberta-xl"),iTt.forEach(t),J$o=r(OSe," \u2014 "),CO=n(OSe,"A",{href:!0});var dTt=s(CO);Y$o=r(dTt,"XLMRobertaXLForMaskedLM"),dTt.forEach(t),K$o=r(OSe," (XLM-RoBERTa-XL model)"),OSe.forEach(t),Z$o=i(O),U2=n(O,"LI",{});var VSe=s(U2);nhe=n(VSe,"STRONG",{});var cTt=s(nhe);eko=r(cTt,"xlnet"),cTt.forEach(t),oko=r(VSe," \u2014 "),wO=n(VSe,"A",{href:!0});var mTt=s(wO);rko=r(mTt,"XLNetLMHeadModel"),mTt.forEach(t),tko=r(VSe," (XLNet model)"),VSe.forEach(t),O.forEach(t),ako=i(ia),J2=n(ia,"P",{});var XSe=s(J2);nko=r(XSe,"The model is set in evaluation mode by default using "),she=n(XSe,"CODE",{});var fTt=s(she);sko=r(fTt,"model.eval()"),fTt.forEach(t),lko=r(XSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=n(XSe,"CODE",{});var gTt=s(lhe);iko=r(gTt,"model.train()"),gTt.forEach(t),XSe.forEach(t),dko=i(ia),T(Y2.$$.fragment,ia),ia.forEach(t),sl.forEach(t),Aze=i(m),Ji=n(m,"H2",{class:!0});var SQe=s(Ji);K2=n(SQe,"A",{id:!0,class:!0,href:!0});var hTt=s(K2);ihe=n(hTt,"SPAN",{});var uTt=s(ihe);T(t8.$$.fragment,uTt),uTt.forEach(t),hTt.forEach(t),cko=i(SQe),dhe=n(SQe,"SPAN",{});var pTt=s(dhe);mko=r(pTt,"AutoModelForCausalLM"),pTt.forEach(t),SQe.forEach(t),Lze=i(m),Ro=n(m,"DIV",{class:!0});var ll=s(Ro);T(a8.$$.fragment,ll),fko=i(ll),Yi=n(ll,"P",{});var vte=s(Yi);gko=r(vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),AO=n(vte,"A",{href:!0});var _Tt=s(AO);hko=r(_Tt,"from_pretrained()"),_Tt.forEach(t),uko=r(vte," class method or the "),LO=n(vte,"A",{href:!0});var bTt=s(LO);pko=r(bTt,"from_config()"),bTt.forEach(t),_ko=r(vte,` class
method.`),vte.forEach(t),bko=i(ll),n8=n(ll,"P",{});var RQe=s(n8);vko=r(RQe,"This class cannot be instantiated directly using "),che=n(RQe,"CODE",{});var vTt=s(che);Fko=r(vTt,"__init__()"),vTt.forEach(t),Tko=r(RQe," (throws an error)."),RQe.forEach(t),Mko=i(ll),ct=n(ll,"DIV",{class:!0});var y7=s(ct);T(s8.$$.fragment,y7),Eko=i(y7),mhe=n(y7,"P",{});var FTt=s(mhe);Cko=r(FTt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),FTt.forEach(t),wko=i(y7),Ki=n(y7,"P",{});var Fte=s(Ki);Ako=r(Fte,`Note:
Loading a model from its configuration file does `),fhe=n(Fte,"STRONG",{});var TTt=s(fhe);Lko=r(TTt,"not"),TTt.forEach(t),yko=r(Fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=n(Fte,"A",{href:!0});var MTt=s(yO);xko=r(MTt,"from_pretrained()"),MTt.forEach(t),$ko=r(Fte," to load the model weights."),Fte.forEach(t),kko=i(y7),T(Z2.$$.fragment,y7),y7.forEach(t),Sko=i(ll),Ze=n(ll,"DIV",{class:!0});var da=s(Ze);T(l8.$$.fragment,da),Rko=i(da),ghe=n(da,"P",{});var ETt=s(ghe);Pko=r(ETt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ETt.forEach(t),Bko=i(da),qa=n(da,"P",{});var x7=s(qa);Iko=r(x7,"The model class to instantiate is selected based on the "),hhe=n(x7,"CODE",{});var CTt=s(hhe);Nko=r(CTt,"model_type"),CTt.forEach(t),qko=r(x7,` property of the config object (either
passed as an argument or loaded from `),uhe=n(x7,"CODE",{});var wTt=s(uhe);jko=r(wTt,"pretrained_model_name_or_path"),wTt.forEach(t),Dko=r(x7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),phe=n(x7,"CODE",{});var ATt=s(phe);Gko=r(ATt,"pretrained_model_name_or_path"),ATt.forEach(t),Oko=r(x7,":"),x7.forEach(t),Vko=i(da),z=n(da,"UL",{});var W=s(z);eb=n(W,"LI",{});var zSe=s(eb);_he=n(zSe,"STRONG",{});var LTt=s(_he);Xko=r(LTt,"bart"),LTt.forEach(t),zko=r(zSe," \u2014 "),xO=n(zSe,"A",{href:!0});var yTt=s(xO);Wko=r(yTt,"BartForCausalLM"),yTt.forEach(t),Qko=r(zSe," (BART model)"),zSe.forEach(t),Hko=i(W),ob=n(W,"LI",{});var WSe=s(ob);bhe=n(WSe,"STRONG",{});var xTt=s(bhe);Uko=r(xTt,"bert"),xTt.forEach(t),Jko=r(WSe," \u2014 "),$O=n(WSe,"A",{href:!0});var $Tt=s($O);Yko=r($Tt,"BertLMHeadModel"),$Tt.forEach(t),Kko=r(WSe," (BERT model)"),WSe.forEach(t),Zko=i(W),rb=n(W,"LI",{});var QSe=s(rb);vhe=n(QSe,"STRONG",{});var kTt=s(vhe);eSo=r(kTt,"bert-generation"),kTt.forEach(t),oSo=r(QSe," \u2014 "),kO=n(QSe,"A",{href:!0});var STt=s(kO);rSo=r(STt,"BertGenerationDecoder"),STt.forEach(t),tSo=r(QSe," (Bert Generation model)"),QSe.forEach(t),aSo=i(W),tb=n(W,"LI",{});var HSe=s(tb);Fhe=n(HSe,"STRONG",{});var RTt=s(Fhe);nSo=r(RTt,"big_bird"),RTt.forEach(t),sSo=r(HSe," \u2014 "),SO=n(HSe,"A",{href:!0});var PTt=s(SO);lSo=r(PTt,"BigBirdForCausalLM"),PTt.forEach(t),iSo=r(HSe," (BigBird model)"),HSe.forEach(t),dSo=i(W),ab=n(W,"LI",{});var USe=s(ab);The=n(USe,"STRONG",{});var BTt=s(The);cSo=r(BTt,"bigbird_pegasus"),BTt.forEach(t),mSo=r(USe," \u2014 "),RO=n(USe,"A",{href:!0});var ITt=s(RO);fSo=r(ITt,"BigBirdPegasusForCausalLM"),ITt.forEach(t),gSo=r(USe," (BigBird-Pegasus model)"),USe.forEach(t),hSo=i(W),nb=n(W,"LI",{});var JSe=s(nb);Mhe=n(JSe,"STRONG",{});var NTt=s(Mhe);uSo=r(NTt,"blenderbot"),NTt.forEach(t),pSo=r(JSe," \u2014 "),PO=n(JSe,"A",{href:!0});var qTt=s(PO);_So=r(qTt,"BlenderbotForCausalLM"),qTt.forEach(t),bSo=r(JSe," (Blenderbot model)"),JSe.forEach(t),vSo=i(W),sb=n(W,"LI",{});var YSe=s(sb);Ehe=n(YSe,"STRONG",{});var jTt=s(Ehe);FSo=r(jTt,"blenderbot-small"),jTt.forEach(t),TSo=r(YSe," \u2014 "),BO=n(YSe,"A",{href:!0});var DTt=s(BO);MSo=r(DTt,"BlenderbotSmallForCausalLM"),DTt.forEach(t),ESo=r(YSe," (BlenderbotSmall model)"),YSe.forEach(t),CSo=i(W),lb=n(W,"LI",{});var KSe=s(lb);Che=n(KSe,"STRONG",{});var GTt=s(Che);wSo=r(GTt,"bloom"),GTt.forEach(t),ASo=r(KSe," \u2014 "),IO=n(KSe,"A",{href:!0});var OTt=s(IO);LSo=r(OTt,"BloomForCausalLM"),OTt.forEach(t),ySo=r(KSe," (BLOOM model)"),KSe.forEach(t),xSo=i(W),ib=n(W,"LI",{});var ZSe=s(ib);whe=n(ZSe,"STRONG",{});var VTt=s(whe);$So=r(VTt,"camembert"),VTt.forEach(t),kSo=r(ZSe," \u2014 "),NO=n(ZSe,"A",{href:!0});var XTt=s(NO);SSo=r(XTt,"CamembertForCausalLM"),XTt.forEach(t),RSo=r(ZSe," (CamemBERT model)"),ZSe.forEach(t),PSo=i(W),db=n(W,"LI",{});var eRe=s(db);Ahe=n(eRe,"STRONG",{});var zTt=s(Ahe);BSo=r(zTt,"codegen"),zTt.forEach(t),ISo=r(eRe," \u2014 "),qO=n(eRe,"A",{href:!0});var WTt=s(qO);NSo=r(WTt,"CodeGenForCausalLM"),WTt.forEach(t),qSo=r(eRe," (CodeGen model)"),eRe.forEach(t),jSo=i(W),cb=n(W,"LI",{});var oRe=s(cb);Lhe=n(oRe,"STRONG",{});var QTt=s(Lhe);DSo=r(QTt,"ctrl"),QTt.forEach(t),GSo=r(oRe," \u2014 "),jO=n(oRe,"A",{href:!0});var HTt=s(jO);OSo=r(HTt,"CTRLLMHeadModel"),HTt.forEach(t),VSo=r(oRe," (CTRL model)"),oRe.forEach(t),XSo=i(W),mb=n(W,"LI",{});var rRe=s(mb);yhe=n(rRe,"STRONG",{});var UTt=s(yhe);zSo=r(UTt,"data2vec-text"),UTt.forEach(t),WSo=r(rRe," \u2014 "),DO=n(rRe,"A",{href:!0});var JTt=s(DO);QSo=r(JTt,"Data2VecTextForCausalLM"),JTt.forEach(t),HSo=r(rRe," (Data2VecText model)"),rRe.forEach(t),USo=i(W),fb=n(W,"LI",{});var tRe=s(fb);xhe=n(tRe,"STRONG",{});var YTt=s(xhe);JSo=r(YTt,"electra"),YTt.forEach(t),YSo=r(tRe," \u2014 "),GO=n(tRe,"A",{href:!0});var KTt=s(GO);KSo=r(KTt,"ElectraForCausalLM"),KTt.forEach(t),ZSo=r(tRe," (ELECTRA model)"),tRe.forEach(t),eRo=i(W),gb=n(W,"LI",{});var aRe=s(gb);$he=n(aRe,"STRONG",{});var ZTt=s($he);oRo=r(ZTt,"gpt2"),ZTt.forEach(t),rRo=r(aRe," \u2014 "),OO=n(aRe,"A",{href:!0});var eMt=s(OO);tRo=r(eMt,"GPT2LMHeadModel"),eMt.forEach(t),aRo=r(aRe," (OpenAI GPT-2 model)"),aRe.forEach(t),nRo=i(W),hb=n(W,"LI",{});var nRe=s(hb);khe=n(nRe,"STRONG",{});var oMt=s(khe);sRo=r(oMt,"gpt_neo"),oMt.forEach(t),lRo=r(nRe," \u2014 "),VO=n(nRe,"A",{href:!0});var rMt=s(VO);iRo=r(rMt,"GPTNeoForCausalLM"),rMt.forEach(t),dRo=r(nRe," (GPT Neo model)"),nRe.forEach(t),cRo=i(W),ub=n(W,"LI",{});var sRe=s(ub);She=n(sRe,"STRONG",{});var tMt=s(She);mRo=r(tMt,"gpt_neox"),tMt.forEach(t),fRo=r(sRe," \u2014 "),XO=n(sRe,"A",{href:!0});var aMt=s(XO);gRo=r(aMt,"GPTNeoXForCausalLM"),aMt.forEach(t),hRo=r(sRe," (GPT NeoX model)"),sRe.forEach(t),uRo=i(W),pb=n(W,"LI",{});var lRe=s(pb);Rhe=n(lRe,"STRONG",{});var nMt=s(Rhe);pRo=r(nMt,"gptj"),nMt.forEach(t),_Ro=r(lRe," \u2014 "),zO=n(lRe,"A",{href:!0});var sMt=s(zO);bRo=r(sMt,"GPTJForCausalLM"),sMt.forEach(t),vRo=r(lRe," (GPT-J model)"),lRe.forEach(t),FRo=i(W),_b=n(W,"LI",{});var iRe=s(_b);Phe=n(iRe,"STRONG",{});var lMt=s(Phe);TRo=r(lMt,"marian"),lMt.forEach(t),MRo=r(iRe," \u2014 "),WO=n(iRe,"A",{href:!0});var iMt=s(WO);ERo=r(iMt,"MarianForCausalLM"),iMt.forEach(t),CRo=r(iRe," (Marian model)"),iRe.forEach(t),wRo=i(W),bb=n(W,"LI",{});var dRe=s(bb);Bhe=n(dRe,"STRONG",{});var dMt=s(Bhe);ARo=r(dMt,"mbart"),dMt.forEach(t),LRo=r(dRe," \u2014 "),QO=n(dRe,"A",{href:!0});var cMt=s(QO);yRo=r(cMt,"MBartForCausalLM"),cMt.forEach(t),xRo=r(dRe," (mBART model)"),dRe.forEach(t),$Ro=i(W),vb=n(W,"LI",{});var cRe=s(vb);Ihe=n(cRe,"STRONG",{});var mMt=s(Ihe);kRo=r(mMt,"megatron-bert"),mMt.forEach(t),SRo=r(cRe," \u2014 "),HO=n(cRe,"A",{href:!0});var fMt=s(HO);RRo=r(fMt,"MegatronBertForCausalLM"),fMt.forEach(t),PRo=r(cRe," (Megatron-BERT model)"),cRe.forEach(t),BRo=i(W),Fb=n(W,"LI",{});var mRe=s(Fb);Nhe=n(mRe,"STRONG",{});var gMt=s(Nhe);IRo=r(gMt,"mvp"),gMt.forEach(t),NRo=r(mRe," \u2014 "),UO=n(mRe,"A",{href:!0});var hMt=s(UO);qRo=r(hMt,"MvpForCausalLM"),hMt.forEach(t),jRo=r(mRe," (MVP model)"),mRe.forEach(t),DRo=i(W),Tb=n(W,"LI",{});var fRe=s(Tb);qhe=n(fRe,"STRONG",{});var uMt=s(qhe);GRo=r(uMt,"openai-gpt"),uMt.forEach(t),ORo=r(fRe," \u2014 "),JO=n(fRe,"A",{href:!0});var pMt=s(JO);VRo=r(pMt,"OpenAIGPTLMHeadModel"),pMt.forEach(t),XRo=r(fRe," (OpenAI GPT model)"),fRe.forEach(t),zRo=i(W),Mb=n(W,"LI",{});var gRe=s(Mb);jhe=n(gRe,"STRONG",{});var _Mt=s(jhe);WRo=r(_Mt,"opt"),_Mt.forEach(t),QRo=r(gRe," \u2014 "),YO=n(gRe,"A",{href:!0});var bMt=s(YO);HRo=r(bMt,"OPTForCausalLM"),bMt.forEach(t),URo=r(gRe," (OPT model)"),gRe.forEach(t),JRo=i(W),Eb=n(W,"LI",{});var hRe=s(Eb);Dhe=n(hRe,"STRONG",{});var vMt=s(Dhe);YRo=r(vMt,"pegasus"),vMt.forEach(t),KRo=r(hRe," \u2014 "),KO=n(hRe,"A",{href:!0});var FMt=s(KO);ZRo=r(FMt,"PegasusForCausalLM"),FMt.forEach(t),ePo=r(hRe," (Pegasus model)"),hRe.forEach(t),oPo=i(W),Cb=n(W,"LI",{});var uRe=s(Cb);Ghe=n(uRe,"STRONG",{});var TMt=s(Ghe);rPo=r(TMt,"plbart"),TMt.forEach(t),tPo=r(uRe," \u2014 "),ZO=n(uRe,"A",{href:!0});var MMt=s(ZO);aPo=r(MMt,"PLBartForCausalLM"),MMt.forEach(t),nPo=r(uRe," (PLBart model)"),uRe.forEach(t),sPo=i(W),wb=n(W,"LI",{});var pRe=s(wb);Ohe=n(pRe,"STRONG",{});var EMt=s(Ohe);lPo=r(EMt,"prophetnet"),EMt.forEach(t),iPo=r(pRe," \u2014 "),eV=n(pRe,"A",{href:!0});var CMt=s(eV);dPo=r(CMt,"ProphetNetForCausalLM"),CMt.forEach(t),cPo=r(pRe," (ProphetNet model)"),pRe.forEach(t),mPo=i(W),Ab=n(W,"LI",{});var _Re=s(Ab);Vhe=n(_Re,"STRONG",{});var wMt=s(Vhe);fPo=r(wMt,"qdqbert"),wMt.forEach(t),gPo=r(_Re," \u2014 "),oV=n(_Re,"A",{href:!0});var AMt=s(oV);hPo=r(AMt,"QDQBertLMHeadModel"),AMt.forEach(t),uPo=r(_Re," (QDQBert model)"),_Re.forEach(t),pPo=i(W),Lb=n(W,"LI",{});var bRe=s(Lb);Xhe=n(bRe,"STRONG",{});var LMt=s(Xhe);_Po=r(LMt,"reformer"),LMt.forEach(t),bPo=r(bRe," \u2014 "),rV=n(bRe,"A",{href:!0});var yMt=s(rV);vPo=r(yMt,"ReformerModelWithLMHead"),yMt.forEach(t),FPo=r(bRe," (Reformer model)"),bRe.forEach(t),TPo=i(W),yb=n(W,"LI",{});var vRe=s(yb);zhe=n(vRe,"STRONG",{});var xMt=s(zhe);MPo=r(xMt,"rembert"),xMt.forEach(t),EPo=r(vRe," \u2014 "),tV=n(vRe,"A",{href:!0});var $Mt=s(tV);CPo=r($Mt,"RemBertForCausalLM"),$Mt.forEach(t),wPo=r(vRe," (RemBERT model)"),vRe.forEach(t),APo=i(W),xb=n(W,"LI",{});var FRe=s(xb);Whe=n(FRe,"STRONG",{});var kMt=s(Whe);LPo=r(kMt,"roberta"),kMt.forEach(t),yPo=r(FRe," \u2014 "),aV=n(FRe,"A",{href:!0});var SMt=s(aV);xPo=r(SMt,"RobertaForCausalLM"),SMt.forEach(t),$Po=r(FRe," (RoBERTa model)"),FRe.forEach(t),kPo=i(W),$b=n(W,"LI",{});var TRe=s($b);Qhe=n(TRe,"STRONG",{});var RMt=s(Qhe);SPo=r(RMt,"roformer"),RMt.forEach(t),RPo=r(TRe," \u2014 "),nV=n(TRe,"A",{href:!0});var PMt=s(nV);PPo=r(PMt,"RoFormerForCausalLM"),PMt.forEach(t),BPo=r(TRe," (RoFormer model)"),TRe.forEach(t),IPo=i(W),kb=n(W,"LI",{});var MRe=s(kb);Hhe=n(MRe,"STRONG",{});var BMt=s(Hhe);NPo=r(BMt,"speech_to_text_2"),BMt.forEach(t),qPo=r(MRe," \u2014 "),sV=n(MRe,"A",{href:!0});var IMt=s(sV);jPo=r(IMt,"Speech2Text2ForCausalLM"),IMt.forEach(t),DPo=r(MRe," (Speech2Text2 model)"),MRe.forEach(t),GPo=i(W),Sb=n(W,"LI",{});var ERe=s(Sb);Uhe=n(ERe,"STRONG",{});var NMt=s(Uhe);OPo=r(NMt,"transfo-xl"),NMt.forEach(t),VPo=r(ERe," \u2014 "),lV=n(ERe,"A",{href:!0});var qMt=s(lV);XPo=r(qMt,"TransfoXLLMHeadModel"),qMt.forEach(t),zPo=r(ERe," (Transformer-XL model)"),ERe.forEach(t),WPo=i(W),Rb=n(W,"LI",{});var CRe=s(Rb);Jhe=n(CRe,"STRONG",{});var jMt=s(Jhe);QPo=r(jMt,"trocr"),jMt.forEach(t),HPo=r(CRe," \u2014 "),iV=n(CRe,"A",{href:!0});var DMt=s(iV);UPo=r(DMt,"TrOCRForCausalLM"),DMt.forEach(t),JPo=r(CRe," (TrOCR model)"),CRe.forEach(t),YPo=i(W),Pb=n(W,"LI",{});var wRe=s(Pb);Yhe=n(wRe,"STRONG",{});var GMt=s(Yhe);KPo=r(GMt,"xglm"),GMt.forEach(t),ZPo=r(wRe," \u2014 "),dV=n(wRe,"A",{href:!0});var OMt=s(dV);eBo=r(OMt,"XGLMForCausalLM"),OMt.forEach(t),oBo=r(wRe," (XGLM model)"),wRe.forEach(t),rBo=i(W),Bb=n(W,"LI",{});var ARe=s(Bb);Khe=n(ARe,"STRONG",{});var VMt=s(Khe);tBo=r(VMt,"xlm"),VMt.forEach(t),aBo=r(ARe," \u2014 "),cV=n(ARe,"A",{href:!0});var XMt=s(cV);nBo=r(XMt,"XLMWithLMHeadModel"),XMt.forEach(t),sBo=r(ARe," (XLM model)"),ARe.forEach(t),lBo=i(W),Ib=n(W,"LI",{});var LRe=s(Ib);Zhe=n(LRe,"STRONG",{});var zMt=s(Zhe);iBo=r(zMt,"xlm-prophetnet"),zMt.forEach(t),dBo=r(LRe," \u2014 "),mV=n(LRe,"A",{href:!0});var WMt=s(mV);cBo=r(WMt,"XLMProphetNetForCausalLM"),WMt.forEach(t),mBo=r(LRe," (XLM-ProphetNet model)"),LRe.forEach(t),fBo=i(W),Nb=n(W,"LI",{});var yRe=s(Nb);eue=n(yRe,"STRONG",{});var QMt=s(eue);gBo=r(QMt,"xlm-roberta"),QMt.forEach(t),hBo=r(yRe," \u2014 "),fV=n(yRe,"A",{href:!0});var HMt=s(fV);uBo=r(HMt,"XLMRobertaForCausalLM"),HMt.forEach(t),pBo=r(yRe," (XLM-RoBERTa model)"),yRe.forEach(t),_Bo=i(W),qb=n(W,"LI",{});var xRe=s(qb);oue=n(xRe,"STRONG",{});var UMt=s(oue);bBo=r(UMt,"xlm-roberta-xl"),UMt.forEach(t),vBo=r(xRe," \u2014 "),gV=n(xRe,"A",{href:!0});var JMt=s(gV);FBo=r(JMt,"XLMRobertaXLForCausalLM"),JMt.forEach(t),TBo=r(xRe," (XLM-RoBERTa-XL model)"),xRe.forEach(t),MBo=i(W),jb=n(W,"LI",{});var $Re=s(jb);rue=n($Re,"STRONG",{});var YMt=s(rue);EBo=r(YMt,"xlnet"),YMt.forEach(t),CBo=r($Re," \u2014 "),hV=n($Re,"A",{href:!0});var KMt=s(hV);wBo=r(KMt,"XLNetLMHeadModel"),KMt.forEach(t),ABo=r($Re," (XLNet model)"),$Re.forEach(t),W.forEach(t),LBo=i(da),Db=n(da,"P",{});var kRe=s(Db);yBo=r(kRe,"The model is set in evaluation mode by default using "),tue=n(kRe,"CODE",{});var ZMt=s(tue);xBo=r(ZMt,"model.eval()"),ZMt.forEach(t),$Bo=r(kRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=n(kRe,"CODE",{});var e4t=s(aue);kBo=r(e4t,"model.train()"),e4t.forEach(t),kRe.forEach(t),SBo=i(da),T(Gb.$$.fragment,da),da.forEach(t),ll.forEach(t),yze=i(m),Zi=n(m,"H2",{class:!0});var PQe=s(Zi);Ob=n(PQe,"A",{id:!0,class:!0,href:!0});var o4t=s(Ob);nue=n(o4t,"SPAN",{});var r4t=s(nue);T(i8.$$.fragment,r4t),r4t.forEach(t),o4t.forEach(t),RBo=i(PQe),sue=n(PQe,"SPAN",{});var t4t=s(sue);PBo=r(t4t,"AutoModelForMaskedLM"),t4t.forEach(t),PQe.forEach(t),xze=i(m),Po=n(m,"DIV",{class:!0});var il=s(Po);T(d8.$$.fragment,il),BBo=i(il),ed=n(il,"P",{});var Tte=s(ed);IBo=r(Tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uV=n(Tte,"A",{href:!0});var a4t=s(uV);NBo=r(a4t,"from_pretrained()"),a4t.forEach(t),qBo=r(Tte," class method or the "),pV=n(Tte,"A",{href:!0});var n4t=s(pV);jBo=r(n4t,"from_config()"),n4t.forEach(t),DBo=r(Tte,` class
method.`),Tte.forEach(t),GBo=i(il),c8=n(il,"P",{});var BQe=s(c8);OBo=r(BQe,"This class cannot be instantiated directly using "),lue=n(BQe,"CODE",{});var s4t=s(lue);VBo=r(s4t,"__init__()"),s4t.forEach(t),XBo=r(BQe," (throws an error)."),BQe.forEach(t),zBo=i(il),mt=n(il,"DIV",{class:!0});var $7=s(mt);T(m8.$$.fragment,$7),WBo=i($7),iue=n($7,"P",{});var l4t=s(iue);QBo=r(l4t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),l4t.forEach(t),HBo=i($7),od=n($7,"P",{});var Mte=s(od);UBo=r(Mte,`Note:
Loading a model from its configuration file does `),due=n(Mte,"STRONG",{});var i4t=s(due);JBo=r(i4t,"not"),i4t.forEach(t),YBo=r(Mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=n(Mte,"A",{href:!0});var d4t=s(_V);KBo=r(d4t,"from_pretrained()"),d4t.forEach(t),ZBo=r(Mte," to load the model weights."),Mte.forEach(t),eIo=i($7),T(Vb.$$.fragment,$7),$7.forEach(t),oIo=i(il),eo=n(il,"DIV",{class:!0});var ca=s(eo);T(f8.$$.fragment,ca),rIo=i(ca),cue=n(ca,"P",{});var c4t=s(cue);tIo=r(c4t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),c4t.forEach(t),aIo=i(ca),ja=n(ca,"P",{});var k7=s(ja);nIo=r(k7,"The model class to instantiate is selected based on the "),mue=n(k7,"CODE",{});var m4t=s(mue);sIo=r(m4t,"model_type"),m4t.forEach(t),lIo=r(k7,` property of the config object (either
passed as an argument or loaded from `),fue=n(k7,"CODE",{});var f4t=s(fue);iIo=r(f4t,"pretrained_model_name_or_path"),f4t.forEach(t),dIo=r(k7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=n(k7,"CODE",{});var g4t=s(gue);cIo=r(g4t,"pretrained_model_name_or_path"),g4t.forEach(t),mIo=r(k7,":"),k7.forEach(t),fIo=i(ca),Q=n(ca,"UL",{});var H=s(Q);Xb=n(H,"LI",{});var SRe=s(Xb);hue=n(SRe,"STRONG",{});var h4t=s(hue);gIo=r(h4t,"albert"),h4t.forEach(t),hIo=r(SRe," \u2014 "),bV=n(SRe,"A",{href:!0});var u4t=s(bV);uIo=r(u4t,"AlbertForMaskedLM"),u4t.forEach(t),pIo=r(SRe," (ALBERT model)"),SRe.forEach(t),_Io=i(H),zb=n(H,"LI",{});var RRe=s(zb);uue=n(RRe,"STRONG",{});var p4t=s(uue);bIo=r(p4t,"bart"),p4t.forEach(t),vIo=r(RRe," \u2014 "),vV=n(RRe,"A",{href:!0});var _4t=s(vV);FIo=r(_4t,"BartForConditionalGeneration"),_4t.forEach(t),TIo=r(RRe," (BART model)"),RRe.forEach(t),MIo=i(H),Wb=n(H,"LI",{});var PRe=s(Wb);pue=n(PRe,"STRONG",{});var b4t=s(pue);EIo=r(b4t,"bert"),b4t.forEach(t),CIo=r(PRe," \u2014 "),FV=n(PRe,"A",{href:!0});var v4t=s(FV);wIo=r(v4t,"BertForMaskedLM"),v4t.forEach(t),AIo=r(PRe," (BERT model)"),PRe.forEach(t),LIo=i(H),Qb=n(H,"LI",{});var BRe=s(Qb);_ue=n(BRe,"STRONG",{});var F4t=s(_ue);yIo=r(F4t,"big_bird"),F4t.forEach(t),xIo=r(BRe," \u2014 "),TV=n(BRe,"A",{href:!0});var T4t=s(TV);$Io=r(T4t,"BigBirdForMaskedLM"),T4t.forEach(t),kIo=r(BRe," (BigBird model)"),BRe.forEach(t),SIo=i(H),Hb=n(H,"LI",{});var IRe=s(Hb);bue=n(IRe,"STRONG",{});var M4t=s(bue);RIo=r(M4t,"camembert"),M4t.forEach(t),PIo=r(IRe," \u2014 "),MV=n(IRe,"A",{href:!0});var E4t=s(MV);BIo=r(E4t,"CamembertForMaskedLM"),E4t.forEach(t),IIo=r(IRe," (CamemBERT model)"),IRe.forEach(t),NIo=i(H),Ub=n(H,"LI",{});var NRe=s(Ub);vue=n(NRe,"STRONG",{});var C4t=s(vue);qIo=r(C4t,"convbert"),C4t.forEach(t),jIo=r(NRe," \u2014 "),EV=n(NRe,"A",{href:!0});var w4t=s(EV);DIo=r(w4t,"ConvBertForMaskedLM"),w4t.forEach(t),GIo=r(NRe," (ConvBERT model)"),NRe.forEach(t),OIo=i(H),Jb=n(H,"LI",{});var qRe=s(Jb);Fue=n(qRe,"STRONG",{});var A4t=s(Fue);VIo=r(A4t,"data2vec-text"),A4t.forEach(t),XIo=r(qRe," \u2014 "),CV=n(qRe,"A",{href:!0});var L4t=s(CV);zIo=r(L4t,"Data2VecTextForMaskedLM"),L4t.forEach(t),WIo=r(qRe," (Data2VecText model)"),qRe.forEach(t),QIo=i(H),Yb=n(H,"LI",{});var jRe=s(Yb);Tue=n(jRe,"STRONG",{});var y4t=s(Tue);HIo=r(y4t,"deberta"),y4t.forEach(t),UIo=r(jRe," \u2014 "),wV=n(jRe,"A",{href:!0});var x4t=s(wV);JIo=r(x4t,"DebertaForMaskedLM"),x4t.forEach(t),YIo=r(jRe," (DeBERTa model)"),jRe.forEach(t),KIo=i(H),Kb=n(H,"LI",{});var DRe=s(Kb);Mue=n(DRe,"STRONG",{});var $4t=s(Mue);ZIo=r($4t,"deberta-v2"),$4t.forEach(t),eNo=r(DRe," \u2014 "),AV=n(DRe,"A",{href:!0});var k4t=s(AV);oNo=r(k4t,"DebertaV2ForMaskedLM"),k4t.forEach(t),rNo=r(DRe," (DeBERTa-v2 model)"),DRe.forEach(t),tNo=i(H),Zb=n(H,"LI",{});var GRe=s(Zb);Eue=n(GRe,"STRONG",{});var S4t=s(Eue);aNo=r(S4t,"distilbert"),S4t.forEach(t),nNo=r(GRe," \u2014 "),LV=n(GRe,"A",{href:!0});var R4t=s(LV);sNo=r(R4t,"DistilBertForMaskedLM"),R4t.forEach(t),lNo=r(GRe," (DistilBERT model)"),GRe.forEach(t),iNo=i(H),ev=n(H,"LI",{});var ORe=s(ev);Cue=n(ORe,"STRONG",{});var P4t=s(Cue);dNo=r(P4t,"electra"),P4t.forEach(t),cNo=r(ORe," \u2014 "),yV=n(ORe,"A",{href:!0});var B4t=s(yV);mNo=r(B4t,"ElectraForMaskedLM"),B4t.forEach(t),fNo=r(ORe," (ELECTRA model)"),ORe.forEach(t),gNo=i(H),ov=n(H,"LI",{});var VRe=s(ov);wue=n(VRe,"STRONG",{});var I4t=s(wue);hNo=r(I4t,"flaubert"),I4t.forEach(t),uNo=r(VRe," \u2014 "),xV=n(VRe,"A",{href:!0});var N4t=s(xV);pNo=r(N4t,"FlaubertWithLMHeadModel"),N4t.forEach(t),_No=r(VRe," (FlauBERT model)"),VRe.forEach(t),bNo=i(H),rv=n(H,"LI",{});var XRe=s(rv);Aue=n(XRe,"STRONG",{});var q4t=s(Aue);vNo=r(q4t,"fnet"),q4t.forEach(t),FNo=r(XRe," \u2014 "),$V=n(XRe,"A",{href:!0});var j4t=s($V);TNo=r(j4t,"FNetForMaskedLM"),j4t.forEach(t),MNo=r(XRe," (FNet model)"),XRe.forEach(t),ENo=i(H),tv=n(H,"LI",{});var zRe=s(tv);Lue=n(zRe,"STRONG",{});var D4t=s(Lue);CNo=r(D4t,"funnel"),D4t.forEach(t),wNo=r(zRe," \u2014 "),kV=n(zRe,"A",{href:!0});var G4t=s(kV);ANo=r(G4t,"FunnelForMaskedLM"),G4t.forEach(t),LNo=r(zRe," (Funnel Transformer model)"),zRe.forEach(t),yNo=i(H),av=n(H,"LI",{});var WRe=s(av);yue=n(WRe,"STRONG",{});var O4t=s(yue);xNo=r(O4t,"ibert"),O4t.forEach(t),$No=r(WRe," \u2014 "),SV=n(WRe,"A",{href:!0});var V4t=s(SV);kNo=r(V4t,"IBertForMaskedLM"),V4t.forEach(t),SNo=r(WRe," (I-BERT model)"),WRe.forEach(t),RNo=i(H),nv=n(H,"LI",{});var QRe=s(nv);xue=n(QRe,"STRONG",{});var X4t=s(xue);PNo=r(X4t,"layoutlm"),X4t.forEach(t),BNo=r(QRe," \u2014 "),RV=n(QRe,"A",{href:!0});var z4t=s(RV);INo=r(z4t,"LayoutLMForMaskedLM"),z4t.forEach(t),NNo=r(QRe," (LayoutLM model)"),QRe.forEach(t),qNo=i(H),sv=n(H,"LI",{});var HRe=s(sv);$ue=n(HRe,"STRONG",{});var W4t=s($ue);jNo=r(W4t,"longformer"),W4t.forEach(t),DNo=r(HRe," \u2014 "),PV=n(HRe,"A",{href:!0});var Q4t=s(PV);GNo=r(Q4t,"LongformerForMaskedLM"),Q4t.forEach(t),ONo=r(HRe," (Longformer model)"),HRe.forEach(t),VNo=i(H),lv=n(H,"LI",{});var URe=s(lv);kue=n(URe,"STRONG",{});var H4t=s(kue);XNo=r(H4t,"luke"),H4t.forEach(t),zNo=r(URe," \u2014 "),BV=n(URe,"A",{href:!0});var U4t=s(BV);WNo=r(U4t,"LukeForMaskedLM"),U4t.forEach(t),QNo=r(URe," (LUKE model)"),URe.forEach(t),HNo=i(H),iv=n(H,"LI",{});var JRe=s(iv);Sue=n(JRe,"STRONG",{});var J4t=s(Sue);UNo=r(J4t,"mbart"),J4t.forEach(t),JNo=r(JRe," \u2014 "),IV=n(JRe,"A",{href:!0});var Y4t=s(IV);YNo=r(Y4t,"MBartForConditionalGeneration"),Y4t.forEach(t),KNo=r(JRe," (mBART model)"),JRe.forEach(t),ZNo=i(H),dv=n(H,"LI",{});var YRe=s(dv);Rue=n(YRe,"STRONG",{});var K4t=s(Rue);eqo=r(K4t,"megatron-bert"),K4t.forEach(t),oqo=r(YRe," \u2014 "),NV=n(YRe,"A",{href:!0});var Z4t=s(NV);rqo=r(Z4t,"MegatronBertForMaskedLM"),Z4t.forEach(t),tqo=r(YRe," (Megatron-BERT model)"),YRe.forEach(t),aqo=i(H),cv=n(H,"LI",{});var KRe=s(cv);Pue=n(KRe,"STRONG",{});var eEt=s(Pue);nqo=r(eEt,"mobilebert"),eEt.forEach(t),sqo=r(KRe," \u2014 "),qV=n(KRe,"A",{href:!0});var oEt=s(qV);lqo=r(oEt,"MobileBertForMaskedLM"),oEt.forEach(t),iqo=r(KRe," (MobileBERT model)"),KRe.forEach(t),dqo=i(H),mv=n(H,"LI",{});var ZRe=s(mv);Bue=n(ZRe,"STRONG",{});var rEt=s(Bue);cqo=r(rEt,"mpnet"),rEt.forEach(t),mqo=r(ZRe," \u2014 "),jV=n(ZRe,"A",{href:!0});var tEt=s(jV);fqo=r(tEt,"MPNetForMaskedLM"),tEt.forEach(t),gqo=r(ZRe," (MPNet model)"),ZRe.forEach(t),hqo=i(H),fv=n(H,"LI",{});var ePe=s(fv);Iue=n(ePe,"STRONG",{});var aEt=s(Iue);uqo=r(aEt,"mvp"),aEt.forEach(t),pqo=r(ePe," \u2014 "),DV=n(ePe,"A",{href:!0});var nEt=s(DV);_qo=r(nEt,"MvpForConditionalGeneration"),nEt.forEach(t),bqo=r(ePe," (MVP model)"),ePe.forEach(t),vqo=i(H),gv=n(H,"LI",{});var oPe=s(gv);Nue=n(oPe,"STRONG",{});var sEt=s(Nue);Fqo=r(sEt,"nezha"),sEt.forEach(t),Tqo=r(oPe," \u2014 "),GV=n(oPe,"A",{href:!0});var lEt=s(GV);Mqo=r(lEt,"NezhaForMaskedLM"),lEt.forEach(t),Eqo=r(oPe," (Nezha model)"),oPe.forEach(t),Cqo=i(H),hv=n(H,"LI",{});var rPe=s(hv);que=n(rPe,"STRONG",{});var iEt=s(que);wqo=r(iEt,"nystromformer"),iEt.forEach(t),Aqo=r(rPe," \u2014 "),OV=n(rPe,"A",{href:!0});var dEt=s(OV);Lqo=r(dEt,"NystromformerForMaskedLM"),dEt.forEach(t),yqo=r(rPe," (Nystr\xF6mformer model)"),rPe.forEach(t),xqo=i(H),uv=n(H,"LI",{});var tPe=s(uv);jue=n(tPe,"STRONG",{});var cEt=s(jue);$qo=r(cEt,"perceiver"),cEt.forEach(t),kqo=r(tPe," \u2014 "),VV=n(tPe,"A",{href:!0});var mEt=s(VV);Sqo=r(mEt,"PerceiverForMaskedLM"),mEt.forEach(t),Rqo=r(tPe," (Perceiver model)"),tPe.forEach(t),Pqo=i(H),pv=n(H,"LI",{});var aPe=s(pv);Due=n(aPe,"STRONG",{});var fEt=s(Due);Bqo=r(fEt,"qdqbert"),fEt.forEach(t),Iqo=r(aPe," \u2014 "),XV=n(aPe,"A",{href:!0});var gEt=s(XV);Nqo=r(gEt,"QDQBertForMaskedLM"),gEt.forEach(t),qqo=r(aPe," (QDQBert model)"),aPe.forEach(t),jqo=i(H),_v=n(H,"LI",{});var nPe=s(_v);Gue=n(nPe,"STRONG",{});var hEt=s(Gue);Dqo=r(hEt,"reformer"),hEt.forEach(t),Gqo=r(nPe," \u2014 "),zV=n(nPe,"A",{href:!0});var uEt=s(zV);Oqo=r(uEt,"ReformerForMaskedLM"),uEt.forEach(t),Vqo=r(nPe," (Reformer model)"),nPe.forEach(t),Xqo=i(H),bv=n(H,"LI",{});var sPe=s(bv);Oue=n(sPe,"STRONG",{});var pEt=s(Oue);zqo=r(pEt,"rembert"),pEt.forEach(t),Wqo=r(sPe," \u2014 "),WV=n(sPe,"A",{href:!0});var _Et=s(WV);Qqo=r(_Et,"RemBertForMaskedLM"),_Et.forEach(t),Hqo=r(sPe," (RemBERT model)"),sPe.forEach(t),Uqo=i(H),vv=n(H,"LI",{});var lPe=s(vv);Vue=n(lPe,"STRONG",{});var bEt=s(Vue);Jqo=r(bEt,"roberta"),bEt.forEach(t),Yqo=r(lPe," \u2014 "),QV=n(lPe,"A",{href:!0});var vEt=s(QV);Kqo=r(vEt,"RobertaForMaskedLM"),vEt.forEach(t),Zqo=r(lPe," (RoBERTa model)"),lPe.forEach(t),ejo=i(H),Fv=n(H,"LI",{});var iPe=s(Fv);Xue=n(iPe,"STRONG",{});var FEt=s(Xue);ojo=r(FEt,"roformer"),FEt.forEach(t),rjo=r(iPe," \u2014 "),HV=n(iPe,"A",{href:!0});var TEt=s(HV);tjo=r(TEt,"RoFormerForMaskedLM"),TEt.forEach(t),ajo=r(iPe," (RoFormer model)"),iPe.forEach(t),njo=i(H),Tv=n(H,"LI",{});var dPe=s(Tv);zue=n(dPe,"STRONG",{});var MEt=s(zue);sjo=r(MEt,"squeezebert"),MEt.forEach(t),ljo=r(dPe," \u2014 "),UV=n(dPe,"A",{href:!0});var EEt=s(UV);ijo=r(EEt,"SqueezeBertForMaskedLM"),EEt.forEach(t),djo=r(dPe," (SqueezeBERT model)"),dPe.forEach(t),cjo=i(H),Mv=n(H,"LI",{});var cPe=s(Mv);Wue=n(cPe,"STRONG",{});var CEt=s(Wue);mjo=r(CEt,"tapas"),CEt.forEach(t),fjo=r(cPe," \u2014 "),JV=n(cPe,"A",{href:!0});var wEt=s(JV);gjo=r(wEt,"TapasForMaskedLM"),wEt.forEach(t),hjo=r(cPe," (TAPAS model)"),cPe.forEach(t),ujo=i(H),Ev=n(H,"LI",{});var mPe=s(Ev);Que=n(mPe,"STRONG",{});var AEt=s(Que);pjo=r(AEt,"wav2vec2"),AEt.forEach(t),_jo=r(mPe," \u2014 "),Hue=n(mPe,"CODE",{});var LEt=s(Hue);bjo=r(LEt,"Wav2Vec2ForMaskedLM"),LEt.forEach(t),vjo=r(mPe," (Wav2Vec2 model)"),mPe.forEach(t),Fjo=i(H),Cv=n(H,"LI",{});var fPe=s(Cv);Uue=n(fPe,"STRONG",{});var yEt=s(Uue);Tjo=r(yEt,"xlm"),yEt.forEach(t),Mjo=r(fPe," \u2014 "),YV=n(fPe,"A",{href:!0});var xEt=s(YV);Ejo=r(xEt,"XLMWithLMHeadModel"),xEt.forEach(t),Cjo=r(fPe," (XLM model)"),fPe.forEach(t),wjo=i(H),wv=n(H,"LI",{});var gPe=s(wv);Jue=n(gPe,"STRONG",{});var $Et=s(Jue);Ajo=r($Et,"xlm-roberta"),$Et.forEach(t),Ljo=r(gPe," \u2014 "),KV=n(gPe,"A",{href:!0});var kEt=s(KV);yjo=r(kEt,"XLMRobertaForMaskedLM"),kEt.forEach(t),xjo=r(gPe," (XLM-RoBERTa model)"),gPe.forEach(t),$jo=i(H),Av=n(H,"LI",{});var hPe=s(Av);Yue=n(hPe,"STRONG",{});var SEt=s(Yue);kjo=r(SEt,"xlm-roberta-xl"),SEt.forEach(t),Sjo=r(hPe," \u2014 "),ZV=n(hPe,"A",{href:!0});var REt=s(ZV);Rjo=r(REt,"XLMRobertaXLForMaskedLM"),REt.forEach(t),Pjo=r(hPe," (XLM-RoBERTa-XL model)"),hPe.forEach(t),Bjo=i(H),Lv=n(H,"LI",{});var uPe=s(Lv);Kue=n(uPe,"STRONG",{});var PEt=s(Kue);Ijo=r(PEt,"yoso"),PEt.forEach(t),Njo=r(uPe," \u2014 "),eX=n(uPe,"A",{href:!0});var BEt=s(eX);qjo=r(BEt,"YosoForMaskedLM"),BEt.forEach(t),jjo=r(uPe," (YOSO model)"),uPe.forEach(t),H.forEach(t),Djo=i(ca),yv=n(ca,"P",{});var pPe=s(yv);Gjo=r(pPe,"The model is set in evaluation mode by default using "),Zue=n(pPe,"CODE",{});var IEt=s(Zue);Ojo=r(IEt,"model.eval()"),IEt.forEach(t),Vjo=r(pPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=n(pPe,"CODE",{});var NEt=s(epe);Xjo=r(NEt,"model.train()"),NEt.forEach(t),pPe.forEach(t),zjo=i(ca),T(xv.$$.fragment,ca),ca.forEach(t),il.forEach(t),$ze=i(m),rd=n(m,"H2",{class:!0});var IQe=s(rd);$v=n(IQe,"A",{id:!0,class:!0,href:!0});var qEt=s($v);ope=n(qEt,"SPAN",{});var jEt=s(ope);T(g8.$$.fragment,jEt),jEt.forEach(t),qEt.forEach(t),Wjo=i(IQe),rpe=n(IQe,"SPAN",{});var DEt=s(rpe);Qjo=r(DEt,"AutoModelForSeq2SeqLM"),DEt.forEach(t),IQe.forEach(t),kze=i(m),Bo=n(m,"DIV",{class:!0});var dl=s(Bo);T(h8.$$.fragment,dl),Hjo=i(dl),td=n(dl,"P",{});var Ete=s(td);Ujo=r(Ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oX=n(Ete,"A",{href:!0});var GEt=s(oX);Jjo=r(GEt,"from_pretrained()"),GEt.forEach(t),Yjo=r(Ete," class method or the "),rX=n(Ete,"A",{href:!0});var OEt=s(rX);Kjo=r(OEt,"from_config()"),OEt.forEach(t),Zjo=r(Ete,` class
method.`),Ete.forEach(t),eDo=i(dl),u8=n(dl,"P",{});var NQe=s(u8);oDo=r(NQe,"This class cannot be instantiated directly using "),tpe=n(NQe,"CODE",{});var VEt=s(tpe);rDo=r(VEt,"__init__()"),VEt.forEach(t),tDo=r(NQe," (throws an error)."),NQe.forEach(t),aDo=i(dl),ft=n(dl,"DIV",{class:!0});var S7=s(ft);T(p8.$$.fragment,S7),nDo=i(S7),ape=n(S7,"P",{});var XEt=s(ape);sDo=r(XEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),XEt.forEach(t),lDo=i(S7),ad=n(S7,"P",{});var Cte=s(ad);iDo=r(Cte,`Note:
Loading a model from its configuration file does `),npe=n(Cte,"STRONG",{});var zEt=s(npe);dDo=r(zEt,"not"),zEt.forEach(t),cDo=r(Cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=n(Cte,"A",{href:!0});var WEt=s(tX);mDo=r(WEt,"from_pretrained()"),WEt.forEach(t),fDo=r(Cte," to load the model weights."),Cte.forEach(t),gDo=i(S7),T(kv.$$.fragment,S7),S7.forEach(t),hDo=i(dl),oo=n(dl,"DIV",{class:!0});var ma=s(oo);T(_8.$$.fragment,ma),uDo=i(ma),spe=n(ma,"P",{});var QEt=s(spe);pDo=r(QEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),QEt.forEach(t),_Do=i(ma),Da=n(ma,"P",{});var R7=s(Da);bDo=r(R7,"The model class to instantiate is selected based on the "),lpe=n(R7,"CODE",{});var HEt=s(lpe);vDo=r(HEt,"model_type"),HEt.forEach(t),FDo=r(R7,` property of the config object (either
passed as an argument or loaded from `),ipe=n(R7,"CODE",{});var UEt=s(ipe);TDo=r(UEt,"pretrained_model_name_or_path"),UEt.forEach(t),MDo=r(R7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=n(R7,"CODE",{});var JEt=s(dpe);EDo=r(JEt,"pretrained_model_name_or_path"),JEt.forEach(t),CDo=r(R7,":"),R7.forEach(t),wDo=i(ma),fe=n(ma,"UL",{});var _e=s(fe);Sv=n(_e,"LI",{});var _Pe=s(Sv);cpe=n(_Pe,"STRONG",{});var YEt=s(cpe);ADo=r(YEt,"bart"),YEt.forEach(t),LDo=r(_Pe," \u2014 "),aX=n(_Pe,"A",{href:!0});var KEt=s(aX);yDo=r(KEt,"BartForConditionalGeneration"),KEt.forEach(t),xDo=r(_Pe," (BART model)"),_Pe.forEach(t),$Do=i(_e),Rv=n(_e,"LI",{});var bPe=s(Rv);mpe=n(bPe,"STRONG",{});var ZEt=s(mpe);kDo=r(ZEt,"bigbird_pegasus"),ZEt.forEach(t),SDo=r(bPe," \u2014 "),nX=n(bPe,"A",{href:!0});var eCt=s(nX);RDo=r(eCt,"BigBirdPegasusForConditionalGeneration"),eCt.forEach(t),PDo=r(bPe," (BigBird-Pegasus model)"),bPe.forEach(t),BDo=i(_e),Pv=n(_e,"LI",{});var vPe=s(Pv);fpe=n(vPe,"STRONG",{});var oCt=s(fpe);IDo=r(oCt,"blenderbot"),oCt.forEach(t),NDo=r(vPe," \u2014 "),sX=n(vPe,"A",{href:!0});var rCt=s(sX);qDo=r(rCt,"BlenderbotForConditionalGeneration"),rCt.forEach(t),jDo=r(vPe," (Blenderbot model)"),vPe.forEach(t),DDo=i(_e),Bv=n(_e,"LI",{});var FPe=s(Bv);gpe=n(FPe,"STRONG",{});var tCt=s(gpe);GDo=r(tCt,"blenderbot-small"),tCt.forEach(t),ODo=r(FPe," \u2014 "),lX=n(FPe,"A",{href:!0});var aCt=s(lX);VDo=r(aCt,"BlenderbotSmallForConditionalGeneration"),aCt.forEach(t),XDo=r(FPe," (BlenderbotSmall model)"),FPe.forEach(t),zDo=i(_e),Iv=n(_e,"LI",{});var TPe=s(Iv);hpe=n(TPe,"STRONG",{});var nCt=s(hpe);WDo=r(nCt,"encoder-decoder"),nCt.forEach(t),QDo=r(TPe," \u2014 "),iX=n(TPe,"A",{href:!0});var sCt=s(iX);HDo=r(sCt,"EncoderDecoderModel"),sCt.forEach(t),UDo=r(TPe," (Encoder decoder model)"),TPe.forEach(t),JDo=i(_e),Nv=n(_e,"LI",{});var MPe=s(Nv);upe=n(MPe,"STRONG",{});var lCt=s(upe);YDo=r(lCt,"fsmt"),lCt.forEach(t),KDo=r(MPe," \u2014 "),dX=n(MPe,"A",{href:!0});var iCt=s(dX);ZDo=r(iCt,"FSMTForConditionalGeneration"),iCt.forEach(t),eGo=r(MPe," (FairSeq Machine-Translation model)"),MPe.forEach(t),oGo=i(_e),qv=n(_e,"LI",{});var EPe=s(qv);ppe=n(EPe,"STRONG",{});var dCt=s(ppe);rGo=r(dCt,"led"),dCt.forEach(t),tGo=r(EPe," \u2014 "),cX=n(EPe,"A",{href:!0});var cCt=s(cX);aGo=r(cCt,"LEDForConditionalGeneration"),cCt.forEach(t),nGo=r(EPe," (LED model)"),EPe.forEach(t),sGo=i(_e),jv=n(_e,"LI",{});var CPe=s(jv);_pe=n(CPe,"STRONG",{});var mCt=s(_pe);lGo=r(mCt,"longt5"),mCt.forEach(t),iGo=r(CPe," \u2014 "),mX=n(CPe,"A",{href:!0});var fCt=s(mX);dGo=r(fCt,"LongT5ForConditionalGeneration"),fCt.forEach(t),cGo=r(CPe," (LongT5 model)"),CPe.forEach(t),mGo=i(_e),Dv=n(_e,"LI",{});var wPe=s(Dv);bpe=n(wPe,"STRONG",{});var gCt=s(bpe);fGo=r(gCt,"m2m_100"),gCt.forEach(t),gGo=r(wPe," \u2014 "),fX=n(wPe,"A",{href:!0});var hCt=s(fX);hGo=r(hCt,"M2M100ForConditionalGeneration"),hCt.forEach(t),uGo=r(wPe," (M2M100 model)"),wPe.forEach(t),pGo=i(_e),Gv=n(_e,"LI",{});var APe=s(Gv);vpe=n(APe,"STRONG",{});var uCt=s(vpe);_Go=r(uCt,"marian"),uCt.forEach(t),bGo=r(APe," \u2014 "),gX=n(APe,"A",{href:!0});var pCt=s(gX);vGo=r(pCt,"MarianMTModel"),pCt.forEach(t),FGo=r(APe," (Marian model)"),APe.forEach(t),TGo=i(_e),Ov=n(_e,"LI",{});var LPe=s(Ov);Fpe=n(LPe,"STRONG",{});var _Ct=s(Fpe);MGo=r(_Ct,"mbart"),_Ct.forEach(t),EGo=r(LPe," \u2014 "),hX=n(LPe,"A",{href:!0});var bCt=s(hX);CGo=r(bCt,"MBartForConditionalGeneration"),bCt.forEach(t),wGo=r(LPe," (mBART model)"),LPe.forEach(t),AGo=i(_e),Vv=n(_e,"LI",{});var yPe=s(Vv);Tpe=n(yPe,"STRONG",{});var vCt=s(Tpe);LGo=r(vCt,"mt5"),vCt.forEach(t),yGo=r(yPe," \u2014 "),uX=n(yPe,"A",{href:!0});var FCt=s(uX);xGo=r(FCt,"MT5ForConditionalGeneration"),FCt.forEach(t),$Go=r(yPe," (MT5 model)"),yPe.forEach(t),kGo=i(_e),Xv=n(_e,"LI",{});var xPe=s(Xv);Mpe=n(xPe,"STRONG",{});var TCt=s(Mpe);SGo=r(TCt,"mvp"),TCt.forEach(t),RGo=r(xPe," \u2014 "),pX=n(xPe,"A",{href:!0});var MCt=s(pX);PGo=r(MCt,"MvpForConditionalGeneration"),MCt.forEach(t),BGo=r(xPe," (MVP model)"),xPe.forEach(t),IGo=i(_e),zv=n(_e,"LI",{});var $Pe=s(zv);Epe=n($Pe,"STRONG",{});var ECt=s(Epe);NGo=r(ECt,"nllb"),ECt.forEach(t),qGo=r($Pe," \u2014 "),_X=n($Pe,"A",{href:!0});var CCt=s(_X);jGo=r(CCt,"M2M100ForConditionalGeneration"),CCt.forEach(t),DGo=r($Pe," (NLLB model)"),$Pe.forEach(t),GGo=i(_e),Wv=n(_e,"LI",{});var kPe=s(Wv);Cpe=n(kPe,"STRONG",{});var wCt=s(Cpe);OGo=r(wCt,"pegasus"),wCt.forEach(t),VGo=r(kPe," \u2014 "),bX=n(kPe,"A",{href:!0});var ACt=s(bX);XGo=r(ACt,"PegasusForConditionalGeneration"),ACt.forEach(t),zGo=r(kPe," (Pegasus model)"),kPe.forEach(t),WGo=i(_e),Qv=n(_e,"LI",{});var SPe=s(Qv);wpe=n(SPe,"STRONG",{});var LCt=s(wpe);QGo=r(LCt,"plbart"),LCt.forEach(t),HGo=r(SPe," \u2014 "),vX=n(SPe,"A",{href:!0});var yCt=s(vX);UGo=r(yCt,"PLBartForConditionalGeneration"),yCt.forEach(t),JGo=r(SPe," (PLBart model)"),SPe.forEach(t),YGo=i(_e),Hv=n(_e,"LI",{});var RPe=s(Hv);Ape=n(RPe,"STRONG",{});var xCt=s(Ape);KGo=r(xCt,"prophetnet"),xCt.forEach(t),ZGo=r(RPe," \u2014 "),FX=n(RPe,"A",{href:!0});var $Ct=s(FX);eOo=r($Ct,"ProphetNetForConditionalGeneration"),$Ct.forEach(t),oOo=r(RPe," (ProphetNet model)"),RPe.forEach(t),rOo=i(_e),Uv=n(_e,"LI",{});var PPe=s(Uv);Lpe=n(PPe,"STRONG",{});var kCt=s(Lpe);tOo=r(kCt,"t5"),kCt.forEach(t),aOo=r(PPe," \u2014 "),TX=n(PPe,"A",{href:!0});var SCt=s(TX);nOo=r(SCt,"T5ForConditionalGeneration"),SCt.forEach(t),sOo=r(PPe," (T5 model)"),PPe.forEach(t),lOo=i(_e),Jv=n(_e,"LI",{});var BPe=s(Jv);ype=n(BPe,"STRONG",{});var RCt=s(ype);iOo=r(RCt,"xlm-prophetnet"),RCt.forEach(t),dOo=r(BPe," \u2014 "),MX=n(BPe,"A",{href:!0});var PCt=s(MX);cOo=r(PCt,"XLMProphetNetForConditionalGeneration"),PCt.forEach(t),mOo=r(BPe," (XLM-ProphetNet model)"),BPe.forEach(t),_e.forEach(t),fOo=i(ma),Yv=n(ma,"P",{});var IPe=s(Yv);gOo=r(IPe,"The model is set in evaluation mode by default using "),xpe=n(IPe,"CODE",{});var BCt=s(xpe);hOo=r(BCt,"model.eval()"),BCt.forEach(t),uOo=r(IPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=n(IPe,"CODE",{});var ICt=s($pe);pOo=r(ICt,"model.train()"),ICt.forEach(t),IPe.forEach(t),_Oo=i(ma),T(Kv.$$.fragment,ma),ma.forEach(t),dl.forEach(t),Sze=i(m),nd=n(m,"H2",{class:!0});var qQe=s(nd);Zv=n(qQe,"A",{id:!0,class:!0,href:!0});var NCt=s(Zv);kpe=n(NCt,"SPAN",{});var qCt=s(kpe);T(b8.$$.fragment,qCt),qCt.forEach(t),NCt.forEach(t),bOo=i(qQe),Spe=n(qQe,"SPAN",{});var jCt=s(Spe);vOo=r(jCt,"AutoModelForSequenceClassification"),jCt.forEach(t),qQe.forEach(t),Rze=i(m),Io=n(m,"DIV",{class:!0});var cl=s(Io);T(v8.$$.fragment,cl),FOo=i(cl),sd=n(cl,"P",{});var wte=s(sd);TOo=r(wte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EX=n(wte,"A",{href:!0});var DCt=s(EX);MOo=r(DCt,"from_pretrained()"),DCt.forEach(t),EOo=r(wte," class method or the "),CX=n(wte,"A",{href:!0});var GCt=s(CX);COo=r(GCt,"from_config()"),GCt.forEach(t),wOo=r(wte,` class
method.`),wte.forEach(t),AOo=i(cl),F8=n(cl,"P",{});var jQe=s(F8);LOo=r(jQe,"This class cannot be instantiated directly using "),Rpe=n(jQe,"CODE",{});var OCt=s(Rpe);yOo=r(OCt,"__init__()"),OCt.forEach(t),xOo=r(jQe," (throws an error)."),jQe.forEach(t),$Oo=i(cl),gt=n(cl,"DIV",{class:!0});var P7=s(gt);T(T8.$$.fragment,P7),kOo=i(P7),Ppe=n(P7,"P",{});var VCt=s(Ppe);SOo=r(VCt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),VCt.forEach(t),ROo=i(P7),ld=n(P7,"P",{});var Ate=s(ld);POo=r(Ate,`Note:
Loading a model from its configuration file does `),Bpe=n(Ate,"STRONG",{});var XCt=s(Bpe);BOo=r(XCt,"not"),XCt.forEach(t),IOo=r(Ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),wX=n(Ate,"A",{href:!0});var zCt=s(wX);NOo=r(zCt,"from_pretrained()"),zCt.forEach(t),qOo=r(Ate," to load the model weights."),Ate.forEach(t),jOo=i(P7),T(e1.$$.fragment,P7),P7.forEach(t),DOo=i(cl),ro=n(cl,"DIV",{class:!0});var fa=s(ro);T(M8.$$.fragment,fa),GOo=i(fa),Ipe=n(fa,"P",{});var WCt=s(Ipe);OOo=r(WCt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),WCt.forEach(t),VOo=i(fa),Ga=n(fa,"P",{});var B7=s(Ga);XOo=r(B7,"The model class to instantiate is selected based on the "),Npe=n(B7,"CODE",{});var QCt=s(Npe);zOo=r(QCt,"model_type"),QCt.forEach(t),WOo=r(B7,` property of the config object (either
passed as an argument or loaded from `),qpe=n(B7,"CODE",{});var HCt=s(qpe);QOo=r(HCt,"pretrained_model_name_or_path"),HCt.forEach(t),HOo=r(B7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=n(B7,"CODE",{});var UCt=s(jpe);UOo=r(UCt,"pretrained_model_name_or_path"),UCt.forEach(t),JOo=r(B7,":"),B7.forEach(t),YOo=i(fa),B=n(fa,"UL",{});var j=s(B);o1=n(j,"LI",{});var NPe=s(o1);Dpe=n(NPe,"STRONG",{});var JCt=s(Dpe);KOo=r(JCt,"albert"),JCt.forEach(t),ZOo=r(NPe," \u2014 "),AX=n(NPe,"A",{href:!0});var YCt=s(AX);eVo=r(YCt,"AlbertForSequenceClassification"),YCt.forEach(t),oVo=r(NPe," (ALBERT model)"),NPe.forEach(t),rVo=i(j),r1=n(j,"LI",{});var qPe=s(r1);Gpe=n(qPe,"STRONG",{});var KCt=s(Gpe);tVo=r(KCt,"bart"),KCt.forEach(t),aVo=r(qPe," \u2014 "),LX=n(qPe,"A",{href:!0});var ZCt=s(LX);nVo=r(ZCt,"BartForSequenceClassification"),ZCt.forEach(t),sVo=r(qPe," (BART model)"),qPe.forEach(t),lVo=i(j),t1=n(j,"LI",{});var jPe=s(t1);Ope=n(jPe,"STRONG",{});var e5t=s(Ope);iVo=r(e5t,"bert"),e5t.forEach(t),dVo=r(jPe," \u2014 "),yX=n(jPe,"A",{href:!0});var o5t=s(yX);cVo=r(o5t,"BertForSequenceClassification"),o5t.forEach(t),mVo=r(jPe," (BERT model)"),jPe.forEach(t),fVo=i(j),a1=n(j,"LI",{});var DPe=s(a1);Vpe=n(DPe,"STRONG",{});var r5t=s(Vpe);gVo=r(r5t,"big_bird"),r5t.forEach(t),hVo=r(DPe," \u2014 "),xX=n(DPe,"A",{href:!0});var t5t=s(xX);uVo=r(t5t,"BigBirdForSequenceClassification"),t5t.forEach(t),pVo=r(DPe," (BigBird model)"),DPe.forEach(t),_Vo=i(j),n1=n(j,"LI",{});var GPe=s(n1);Xpe=n(GPe,"STRONG",{});var a5t=s(Xpe);bVo=r(a5t,"bigbird_pegasus"),a5t.forEach(t),vVo=r(GPe," \u2014 "),$X=n(GPe,"A",{href:!0});var n5t=s($X);FVo=r(n5t,"BigBirdPegasusForSequenceClassification"),n5t.forEach(t),TVo=r(GPe," (BigBird-Pegasus model)"),GPe.forEach(t),MVo=i(j),s1=n(j,"LI",{});var OPe=s(s1);zpe=n(OPe,"STRONG",{});var s5t=s(zpe);EVo=r(s5t,"bloom"),s5t.forEach(t),CVo=r(OPe," \u2014 "),kX=n(OPe,"A",{href:!0});var l5t=s(kX);wVo=r(l5t,"BloomForSequenceClassification"),l5t.forEach(t),AVo=r(OPe," (BLOOM model)"),OPe.forEach(t),LVo=i(j),l1=n(j,"LI",{});var VPe=s(l1);Wpe=n(VPe,"STRONG",{});var i5t=s(Wpe);yVo=r(i5t,"camembert"),i5t.forEach(t),xVo=r(VPe," \u2014 "),SX=n(VPe,"A",{href:!0});var d5t=s(SX);$Vo=r(d5t,"CamembertForSequenceClassification"),d5t.forEach(t),kVo=r(VPe," (CamemBERT model)"),VPe.forEach(t),SVo=i(j),i1=n(j,"LI",{});var XPe=s(i1);Qpe=n(XPe,"STRONG",{});var c5t=s(Qpe);RVo=r(c5t,"canine"),c5t.forEach(t),PVo=r(XPe," \u2014 "),RX=n(XPe,"A",{href:!0});var m5t=s(RX);BVo=r(m5t,"CanineForSequenceClassification"),m5t.forEach(t),IVo=r(XPe," (CANINE model)"),XPe.forEach(t),NVo=i(j),d1=n(j,"LI",{});var zPe=s(d1);Hpe=n(zPe,"STRONG",{});var f5t=s(Hpe);qVo=r(f5t,"convbert"),f5t.forEach(t),jVo=r(zPe," \u2014 "),PX=n(zPe,"A",{href:!0});var g5t=s(PX);DVo=r(g5t,"ConvBertForSequenceClassification"),g5t.forEach(t),GVo=r(zPe," (ConvBERT model)"),zPe.forEach(t),OVo=i(j),c1=n(j,"LI",{});var WPe=s(c1);Upe=n(WPe,"STRONG",{});var h5t=s(Upe);VVo=r(h5t,"ctrl"),h5t.forEach(t),XVo=r(WPe," \u2014 "),BX=n(WPe,"A",{href:!0});var u5t=s(BX);zVo=r(u5t,"CTRLForSequenceClassification"),u5t.forEach(t),WVo=r(WPe," (CTRL model)"),WPe.forEach(t),QVo=i(j),m1=n(j,"LI",{});var QPe=s(m1);Jpe=n(QPe,"STRONG",{});var p5t=s(Jpe);HVo=r(p5t,"data2vec-text"),p5t.forEach(t),UVo=r(QPe," \u2014 "),IX=n(QPe,"A",{href:!0});var _5t=s(IX);JVo=r(_5t,"Data2VecTextForSequenceClassification"),_5t.forEach(t),YVo=r(QPe," (Data2VecText model)"),QPe.forEach(t),KVo=i(j),f1=n(j,"LI",{});var HPe=s(f1);Ype=n(HPe,"STRONG",{});var b5t=s(Ype);ZVo=r(b5t,"deberta"),b5t.forEach(t),eXo=r(HPe," \u2014 "),NX=n(HPe,"A",{href:!0});var v5t=s(NX);oXo=r(v5t,"DebertaForSequenceClassification"),v5t.forEach(t),rXo=r(HPe," (DeBERTa model)"),HPe.forEach(t),tXo=i(j),g1=n(j,"LI",{});var UPe=s(g1);Kpe=n(UPe,"STRONG",{});var F5t=s(Kpe);aXo=r(F5t,"deberta-v2"),F5t.forEach(t),nXo=r(UPe," \u2014 "),qX=n(UPe,"A",{href:!0});var T5t=s(qX);sXo=r(T5t,"DebertaV2ForSequenceClassification"),T5t.forEach(t),lXo=r(UPe," (DeBERTa-v2 model)"),UPe.forEach(t),iXo=i(j),h1=n(j,"LI",{});var JPe=s(h1);Zpe=n(JPe,"STRONG",{});var M5t=s(Zpe);dXo=r(M5t,"distilbert"),M5t.forEach(t),cXo=r(JPe," \u2014 "),jX=n(JPe,"A",{href:!0});var E5t=s(jX);mXo=r(E5t,"DistilBertForSequenceClassification"),E5t.forEach(t),fXo=r(JPe," (DistilBERT model)"),JPe.forEach(t),gXo=i(j),u1=n(j,"LI",{});var YPe=s(u1);e_e=n(YPe,"STRONG",{});var C5t=s(e_e);hXo=r(C5t,"electra"),C5t.forEach(t),uXo=r(YPe," \u2014 "),DX=n(YPe,"A",{href:!0});var w5t=s(DX);pXo=r(w5t,"ElectraForSequenceClassification"),w5t.forEach(t),_Xo=r(YPe," (ELECTRA model)"),YPe.forEach(t),bXo=i(j),p1=n(j,"LI",{});var KPe=s(p1);o_e=n(KPe,"STRONG",{});var A5t=s(o_e);vXo=r(A5t,"flaubert"),A5t.forEach(t),FXo=r(KPe," \u2014 "),GX=n(KPe,"A",{href:!0});var L5t=s(GX);TXo=r(L5t,"FlaubertForSequenceClassification"),L5t.forEach(t),MXo=r(KPe," (FlauBERT model)"),KPe.forEach(t),EXo=i(j),_1=n(j,"LI",{});var ZPe=s(_1);r_e=n(ZPe,"STRONG",{});var y5t=s(r_e);CXo=r(y5t,"fnet"),y5t.forEach(t),wXo=r(ZPe," \u2014 "),OX=n(ZPe,"A",{href:!0});var x5t=s(OX);AXo=r(x5t,"FNetForSequenceClassification"),x5t.forEach(t),LXo=r(ZPe," (FNet model)"),ZPe.forEach(t),yXo=i(j),b1=n(j,"LI",{});var eBe=s(b1);t_e=n(eBe,"STRONG",{});var $5t=s(t_e);xXo=r($5t,"funnel"),$5t.forEach(t),$Xo=r(eBe," \u2014 "),VX=n(eBe,"A",{href:!0});var k5t=s(VX);kXo=r(k5t,"FunnelForSequenceClassification"),k5t.forEach(t),SXo=r(eBe," (Funnel Transformer model)"),eBe.forEach(t),RXo=i(j),v1=n(j,"LI",{});var oBe=s(v1);a_e=n(oBe,"STRONG",{});var S5t=s(a_e);PXo=r(S5t,"gpt2"),S5t.forEach(t),BXo=r(oBe," \u2014 "),XX=n(oBe,"A",{href:!0});var R5t=s(XX);IXo=r(R5t,"GPT2ForSequenceClassification"),R5t.forEach(t),NXo=r(oBe," (OpenAI GPT-2 model)"),oBe.forEach(t),qXo=i(j),F1=n(j,"LI",{});var rBe=s(F1);n_e=n(rBe,"STRONG",{});var P5t=s(n_e);jXo=r(P5t,"gpt_neo"),P5t.forEach(t),DXo=r(rBe," \u2014 "),zX=n(rBe,"A",{href:!0});var B5t=s(zX);GXo=r(B5t,"GPTNeoForSequenceClassification"),B5t.forEach(t),OXo=r(rBe," (GPT Neo model)"),rBe.forEach(t),VXo=i(j),T1=n(j,"LI",{});var tBe=s(T1);s_e=n(tBe,"STRONG",{});var I5t=s(s_e);XXo=r(I5t,"gptj"),I5t.forEach(t),zXo=r(tBe," \u2014 "),WX=n(tBe,"A",{href:!0});var N5t=s(WX);WXo=r(N5t,"GPTJForSequenceClassification"),N5t.forEach(t),QXo=r(tBe," (GPT-J model)"),tBe.forEach(t),HXo=i(j),M1=n(j,"LI",{});var aBe=s(M1);l_e=n(aBe,"STRONG",{});var q5t=s(l_e);UXo=r(q5t,"ibert"),q5t.forEach(t),JXo=r(aBe," \u2014 "),QX=n(aBe,"A",{href:!0});var j5t=s(QX);YXo=r(j5t,"IBertForSequenceClassification"),j5t.forEach(t),KXo=r(aBe," (I-BERT model)"),aBe.forEach(t),ZXo=i(j),E1=n(j,"LI",{});var nBe=s(E1);i_e=n(nBe,"STRONG",{});var D5t=s(i_e);ezo=r(D5t,"layoutlm"),D5t.forEach(t),ozo=r(nBe," \u2014 "),HX=n(nBe,"A",{href:!0});var G5t=s(HX);rzo=r(G5t,"LayoutLMForSequenceClassification"),G5t.forEach(t),tzo=r(nBe," (LayoutLM model)"),nBe.forEach(t),azo=i(j),C1=n(j,"LI",{});var sBe=s(C1);d_e=n(sBe,"STRONG",{});var O5t=s(d_e);nzo=r(O5t,"layoutlmv2"),O5t.forEach(t),szo=r(sBe," \u2014 "),UX=n(sBe,"A",{href:!0});var V5t=s(UX);lzo=r(V5t,"LayoutLMv2ForSequenceClassification"),V5t.forEach(t),izo=r(sBe," (LayoutLMv2 model)"),sBe.forEach(t),dzo=i(j),w1=n(j,"LI",{});var lBe=s(w1);c_e=n(lBe,"STRONG",{});var X5t=s(c_e);czo=r(X5t,"layoutlmv3"),X5t.forEach(t),mzo=r(lBe," \u2014 "),JX=n(lBe,"A",{href:!0});var z5t=s(JX);fzo=r(z5t,"LayoutLMv3ForSequenceClassification"),z5t.forEach(t),gzo=r(lBe," (LayoutLMv3 model)"),lBe.forEach(t),hzo=i(j),A1=n(j,"LI",{});var iBe=s(A1);m_e=n(iBe,"STRONG",{});var W5t=s(m_e);uzo=r(W5t,"led"),W5t.forEach(t),pzo=r(iBe," \u2014 "),YX=n(iBe,"A",{href:!0});var Q5t=s(YX);_zo=r(Q5t,"LEDForSequenceClassification"),Q5t.forEach(t),bzo=r(iBe," (LED model)"),iBe.forEach(t),vzo=i(j),L1=n(j,"LI",{});var dBe=s(L1);f_e=n(dBe,"STRONG",{});var H5t=s(f_e);Fzo=r(H5t,"longformer"),H5t.forEach(t),Tzo=r(dBe," \u2014 "),KX=n(dBe,"A",{href:!0});var U5t=s(KX);Mzo=r(U5t,"LongformerForSequenceClassification"),U5t.forEach(t),Ezo=r(dBe," (Longformer model)"),dBe.forEach(t),Czo=i(j),y1=n(j,"LI",{});var cBe=s(y1);g_e=n(cBe,"STRONG",{});var J5t=s(g_e);wzo=r(J5t,"mbart"),J5t.forEach(t),Azo=r(cBe," \u2014 "),ZX=n(cBe,"A",{href:!0});var Y5t=s(ZX);Lzo=r(Y5t,"MBartForSequenceClassification"),Y5t.forEach(t),yzo=r(cBe," (mBART model)"),cBe.forEach(t),xzo=i(j),x1=n(j,"LI",{});var mBe=s(x1);h_e=n(mBe,"STRONG",{});var K5t=s(h_e);$zo=r(K5t,"megatron-bert"),K5t.forEach(t),kzo=r(mBe," \u2014 "),ez=n(mBe,"A",{href:!0});var Z5t=s(ez);Szo=r(Z5t,"MegatronBertForSequenceClassification"),Z5t.forEach(t),Rzo=r(mBe," (Megatron-BERT model)"),mBe.forEach(t),Pzo=i(j),$1=n(j,"LI",{});var fBe=s($1);u_e=n(fBe,"STRONG",{});var e3t=s(u_e);Bzo=r(e3t,"mobilebert"),e3t.forEach(t),Izo=r(fBe," \u2014 "),oz=n(fBe,"A",{href:!0});var o3t=s(oz);Nzo=r(o3t,"MobileBertForSequenceClassification"),o3t.forEach(t),qzo=r(fBe," (MobileBERT model)"),fBe.forEach(t),jzo=i(j),k1=n(j,"LI",{});var gBe=s(k1);p_e=n(gBe,"STRONG",{});var r3t=s(p_e);Dzo=r(r3t,"mpnet"),r3t.forEach(t),Gzo=r(gBe," \u2014 "),rz=n(gBe,"A",{href:!0});var t3t=s(rz);Ozo=r(t3t,"MPNetForSequenceClassification"),t3t.forEach(t),Vzo=r(gBe," (MPNet model)"),gBe.forEach(t),Xzo=i(j),S1=n(j,"LI",{});var hBe=s(S1);__e=n(hBe,"STRONG",{});var a3t=s(__e);zzo=r(a3t,"mvp"),a3t.forEach(t),Wzo=r(hBe," \u2014 "),tz=n(hBe,"A",{href:!0});var n3t=s(tz);Qzo=r(n3t,"MvpForSequenceClassification"),n3t.forEach(t),Hzo=r(hBe," (MVP model)"),hBe.forEach(t),Uzo=i(j),R1=n(j,"LI",{});var uBe=s(R1);b_e=n(uBe,"STRONG",{});var s3t=s(b_e);Jzo=r(s3t,"nezha"),s3t.forEach(t),Yzo=r(uBe," \u2014 "),az=n(uBe,"A",{href:!0});var l3t=s(az);Kzo=r(l3t,"NezhaForSequenceClassification"),l3t.forEach(t),Zzo=r(uBe," (Nezha model)"),uBe.forEach(t),eWo=i(j),P1=n(j,"LI",{});var pBe=s(P1);v_e=n(pBe,"STRONG",{});var i3t=s(v_e);oWo=r(i3t,"nystromformer"),i3t.forEach(t),rWo=r(pBe," \u2014 "),nz=n(pBe,"A",{href:!0});var d3t=s(nz);tWo=r(d3t,"NystromformerForSequenceClassification"),d3t.forEach(t),aWo=r(pBe," (Nystr\xF6mformer model)"),pBe.forEach(t),nWo=i(j),B1=n(j,"LI",{});var _Be=s(B1);F_e=n(_Be,"STRONG",{});var c3t=s(F_e);sWo=r(c3t,"openai-gpt"),c3t.forEach(t),lWo=r(_Be," \u2014 "),sz=n(_Be,"A",{href:!0});var m3t=s(sz);iWo=r(m3t,"OpenAIGPTForSequenceClassification"),m3t.forEach(t),dWo=r(_Be," (OpenAI GPT model)"),_Be.forEach(t),cWo=i(j),I1=n(j,"LI",{});var bBe=s(I1);T_e=n(bBe,"STRONG",{});var f3t=s(T_e);mWo=r(f3t,"opt"),f3t.forEach(t),fWo=r(bBe," \u2014 "),lz=n(bBe,"A",{href:!0});var g3t=s(lz);gWo=r(g3t,"OPTForSequenceClassification"),g3t.forEach(t),hWo=r(bBe," (OPT model)"),bBe.forEach(t),uWo=i(j),N1=n(j,"LI",{});var vBe=s(N1);M_e=n(vBe,"STRONG",{});var h3t=s(M_e);pWo=r(h3t,"perceiver"),h3t.forEach(t),_Wo=r(vBe," \u2014 "),iz=n(vBe,"A",{href:!0});var u3t=s(iz);bWo=r(u3t,"PerceiverForSequenceClassification"),u3t.forEach(t),vWo=r(vBe," (Perceiver model)"),vBe.forEach(t),FWo=i(j),q1=n(j,"LI",{});var FBe=s(q1);E_e=n(FBe,"STRONG",{});var p3t=s(E_e);TWo=r(p3t,"plbart"),p3t.forEach(t),MWo=r(FBe," \u2014 "),dz=n(FBe,"A",{href:!0});var _3t=s(dz);EWo=r(_3t,"PLBartForSequenceClassification"),_3t.forEach(t),CWo=r(FBe," (PLBart model)"),FBe.forEach(t),wWo=i(j),j1=n(j,"LI",{});var TBe=s(j1);C_e=n(TBe,"STRONG",{});var b3t=s(C_e);AWo=r(b3t,"qdqbert"),b3t.forEach(t),LWo=r(TBe," \u2014 "),cz=n(TBe,"A",{href:!0});var v3t=s(cz);yWo=r(v3t,"QDQBertForSequenceClassification"),v3t.forEach(t),xWo=r(TBe," (QDQBert model)"),TBe.forEach(t),$Wo=i(j),D1=n(j,"LI",{});var MBe=s(D1);w_e=n(MBe,"STRONG",{});var F3t=s(w_e);kWo=r(F3t,"reformer"),F3t.forEach(t),SWo=r(MBe," \u2014 "),mz=n(MBe,"A",{href:!0});var T3t=s(mz);RWo=r(T3t,"ReformerForSequenceClassification"),T3t.forEach(t),PWo=r(MBe," (Reformer model)"),MBe.forEach(t),BWo=i(j),G1=n(j,"LI",{});var EBe=s(G1);A_e=n(EBe,"STRONG",{});var M3t=s(A_e);IWo=r(M3t,"rembert"),M3t.forEach(t),NWo=r(EBe," \u2014 "),fz=n(EBe,"A",{href:!0});var E3t=s(fz);qWo=r(E3t,"RemBertForSequenceClassification"),E3t.forEach(t),jWo=r(EBe," (RemBERT model)"),EBe.forEach(t),DWo=i(j),O1=n(j,"LI",{});var CBe=s(O1);L_e=n(CBe,"STRONG",{});var C3t=s(L_e);GWo=r(C3t,"roberta"),C3t.forEach(t),OWo=r(CBe," \u2014 "),gz=n(CBe,"A",{href:!0});var w3t=s(gz);VWo=r(w3t,"RobertaForSequenceClassification"),w3t.forEach(t),XWo=r(CBe," (RoBERTa model)"),CBe.forEach(t),zWo=i(j),V1=n(j,"LI",{});var wBe=s(V1);y_e=n(wBe,"STRONG",{});var A3t=s(y_e);WWo=r(A3t,"roformer"),A3t.forEach(t),QWo=r(wBe," \u2014 "),hz=n(wBe,"A",{href:!0});var L3t=s(hz);HWo=r(L3t,"RoFormerForSequenceClassification"),L3t.forEach(t),UWo=r(wBe," (RoFormer model)"),wBe.forEach(t),JWo=i(j),X1=n(j,"LI",{});var ABe=s(X1);x_e=n(ABe,"STRONG",{});var y3t=s(x_e);YWo=r(y3t,"squeezebert"),y3t.forEach(t),KWo=r(ABe," \u2014 "),uz=n(ABe,"A",{href:!0});var x3t=s(uz);ZWo=r(x3t,"SqueezeBertForSequenceClassification"),x3t.forEach(t),eQo=r(ABe," (SqueezeBERT model)"),ABe.forEach(t),oQo=i(j),z1=n(j,"LI",{});var LBe=s(z1);$_e=n(LBe,"STRONG",{});var $3t=s($_e);rQo=r($3t,"tapas"),$3t.forEach(t),tQo=r(LBe," \u2014 "),pz=n(LBe,"A",{href:!0});var k3t=s(pz);aQo=r(k3t,"TapasForSequenceClassification"),k3t.forEach(t),nQo=r(LBe," (TAPAS model)"),LBe.forEach(t),sQo=i(j),W1=n(j,"LI",{});var yBe=s(W1);k_e=n(yBe,"STRONG",{});var S3t=s(k_e);lQo=r(S3t,"transfo-xl"),S3t.forEach(t),iQo=r(yBe," \u2014 "),_z=n(yBe,"A",{href:!0});var R3t=s(_z);dQo=r(R3t,"TransfoXLForSequenceClassification"),R3t.forEach(t),cQo=r(yBe," (Transformer-XL model)"),yBe.forEach(t),mQo=i(j),Q1=n(j,"LI",{});var xBe=s(Q1);S_e=n(xBe,"STRONG",{});var P3t=s(S_e);fQo=r(P3t,"xlm"),P3t.forEach(t),gQo=r(xBe," \u2014 "),bz=n(xBe,"A",{href:!0});var B3t=s(bz);hQo=r(B3t,"XLMForSequenceClassification"),B3t.forEach(t),uQo=r(xBe," (XLM model)"),xBe.forEach(t),pQo=i(j),H1=n(j,"LI",{});var $Be=s(H1);R_e=n($Be,"STRONG",{});var I3t=s(R_e);_Qo=r(I3t,"xlm-roberta"),I3t.forEach(t),bQo=r($Be," \u2014 "),vz=n($Be,"A",{href:!0});var N3t=s(vz);vQo=r(N3t,"XLMRobertaForSequenceClassification"),N3t.forEach(t),FQo=r($Be," (XLM-RoBERTa model)"),$Be.forEach(t),TQo=i(j),U1=n(j,"LI",{});var kBe=s(U1);P_e=n(kBe,"STRONG",{});var q3t=s(P_e);MQo=r(q3t,"xlm-roberta-xl"),q3t.forEach(t),EQo=r(kBe," \u2014 "),Fz=n(kBe,"A",{href:!0});var j3t=s(Fz);CQo=r(j3t,"XLMRobertaXLForSequenceClassification"),j3t.forEach(t),wQo=r(kBe," (XLM-RoBERTa-XL model)"),kBe.forEach(t),AQo=i(j),J1=n(j,"LI",{});var SBe=s(J1);B_e=n(SBe,"STRONG",{});var D3t=s(B_e);LQo=r(D3t,"xlnet"),D3t.forEach(t),yQo=r(SBe," \u2014 "),Tz=n(SBe,"A",{href:!0});var G3t=s(Tz);xQo=r(G3t,"XLNetForSequenceClassification"),G3t.forEach(t),$Qo=r(SBe," (XLNet model)"),SBe.forEach(t),kQo=i(j),Y1=n(j,"LI",{});var RBe=s(Y1);I_e=n(RBe,"STRONG",{});var O3t=s(I_e);SQo=r(O3t,"yoso"),O3t.forEach(t),RQo=r(RBe," \u2014 "),Mz=n(RBe,"A",{href:!0});var V3t=s(Mz);PQo=r(V3t,"YosoForSequenceClassification"),V3t.forEach(t),BQo=r(RBe," (YOSO model)"),RBe.forEach(t),j.forEach(t),IQo=i(fa),K1=n(fa,"P",{});var PBe=s(K1);NQo=r(PBe,"The model is set in evaluation mode by default using "),N_e=n(PBe,"CODE",{});var X3t=s(N_e);qQo=r(X3t,"model.eval()"),X3t.forEach(t),jQo=r(PBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q_e=n(PBe,"CODE",{});var z3t=s(q_e);DQo=r(z3t,"model.train()"),z3t.forEach(t),PBe.forEach(t),GQo=i(fa),T(Z1.$$.fragment,fa),fa.forEach(t),cl.forEach(t),Pze=i(m),id=n(m,"H2",{class:!0});var DQe=s(id);eF=n(DQe,"A",{id:!0,class:!0,href:!0});var W3t=s(eF);j_e=n(W3t,"SPAN",{});var Q3t=s(j_e);T(E8.$$.fragment,Q3t),Q3t.forEach(t),W3t.forEach(t),OQo=i(DQe),D_e=n(DQe,"SPAN",{});var H3t=s(D_e);VQo=r(H3t,"AutoModelForMultipleChoice"),H3t.forEach(t),DQe.forEach(t),Bze=i(m),No=n(m,"DIV",{class:!0});var ml=s(No);T(C8.$$.fragment,ml),XQo=i(ml),dd=n(ml,"P",{});var Lte=s(dd);zQo=r(Lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Ez=n(Lte,"A",{href:!0});var U3t=s(Ez);WQo=r(U3t,"from_pretrained()"),U3t.forEach(t),QQo=r(Lte," class method or the "),Cz=n(Lte,"A",{href:!0});var J3t=s(Cz);HQo=r(J3t,"from_config()"),J3t.forEach(t),UQo=r(Lte,` class
method.`),Lte.forEach(t),JQo=i(ml),w8=n(ml,"P",{});var GQe=s(w8);YQo=r(GQe,"This class cannot be instantiated directly using "),G_e=n(GQe,"CODE",{});var Y3t=s(G_e);KQo=r(Y3t,"__init__()"),Y3t.forEach(t),ZQo=r(GQe," (throws an error)."),GQe.forEach(t),eHo=i(ml),ht=n(ml,"DIV",{class:!0});var I7=s(ht);T(A8.$$.fragment,I7),oHo=i(I7),O_e=n(I7,"P",{});var K3t=s(O_e);rHo=r(K3t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),K3t.forEach(t),tHo=i(I7),cd=n(I7,"P",{});var yte=s(cd);aHo=r(yte,`Note:
Loading a model from its configuration file does `),V_e=n(yte,"STRONG",{});var Z3t=s(V_e);nHo=r(Z3t,"not"),Z3t.forEach(t),sHo=r(yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=n(yte,"A",{href:!0});var e0t=s(wz);lHo=r(e0t,"from_pretrained()"),e0t.forEach(t),iHo=r(yte," to load the model weights."),yte.forEach(t),dHo=i(I7),T(oF.$$.fragment,I7),I7.forEach(t),cHo=i(ml),to=n(ml,"DIV",{class:!0});var ga=s(to);T(L8.$$.fragment,ga),mHo=i(ga),X_e=n(ga,"P",{});var o0t=s(X_e);fHo=r(o0t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),o0t.forEach(t),gHo=i(ga),Oa=n(ga,"P",{});var N7=s(Oa);hHo=r(N7,"The model class to instantiate is selected based on the "),z_e=n(N7,"CODE",{});var r0t=s(z_e);uHo=r(r0t,"model_type"),r0t.forEach(t),pHo=r(N7,` property of the config object (either
passed as an argument or loaded from `),W_e=n(N7,"CODE",{});var t0t=s(W_e);_Ho=r(t0t,"pretrained_model_name_or_path"),t0t.forEach(t),bHo=r(N7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q_e=n(N7,"CODE",{});var a0t=s(Q_e);vHo=r(a0t,"pretrained_model_name_or_path"),a0t.forEach(t),FHo=r(N7,":"),N7.forEach(t),THo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);rF=n(ee,"LI",{});var BBe=s(rF);H_e=n(BBe,"STRONG",{});var n0t=s(H_e);MHo=r(n0t,"albert"),n0t.forEach(t),EHo=r(BBe," \u2014 "),Az=n(BBe,"A",{href:!0});var s0t=s(Az);CHo=r(s0t,"AlbertForMultipleChoice"),s0t.forEach(t),wHo=r(BBe," (ALBERT model)"),BBe.forEach(t),AHo=i(ee),tF=n(ee,"LI",{});var IBe=s(tF);U_e=n(IBe,"STRONG",{});var l0t=s(U_e);LHo=r(l0t,"bert"),l0t.forEach(t),yHo=r(IBe," \u2014 "),Lz=n(IBe,"A",{href:!0});var i0t=s(Lz);xHo=r(i0t,"BertForMultipleChoice"),i0t.forEach(t),$Ho=r(IBe," (BERT model)"),IBe.forEach(t),kHo=i(ee),aF=n(ee,"LI",{});var NBe=s(aF);J_e=n(NBe,"STRONG",{});var d0t=s(J_e);SHo=r(d0t,"big_bird"),d0t.forEach(t),RHo=r(NBe," \u2014 "),yz=n(NBe,"A",{href:!0});var c0t=s(yz);PHo=r(c0t,"BigBirdForMultipleChoice"),c0t.forEach(t),BHo=r(NBe," (BigBird model)"),NBe.forEach(t),IHo=i(ee),nF=n(ee,"LI",{});var qBe=s(nF);Y_e=n(qBe,"STRONG",{});var m0t=s(Y_e);NHo=r(m0t,"camembert"),m0t.forEach(t),qHo=r(qBe," \u2014 "),xz=n(qBe,"A",{href:!0});var f0t=s(xz);jHo=r(f0t,"CamembertForMultipleChoice"),f0t.forEach(t),DHo=r(qBe," (CamemBERT model)"),qBe.forEach(t),GHo=i(ee),sF=n(ee,"LI",{});var jBe=s(sF);K_e=n(jBe,"STRONG",{});var g0t=s(K_e);OHo=r(g0t,"canine"),g0t.forEach(t),VHo=r(jBe," \u2014 "),$z=n(jBe,"A",{href:!0});var h0t=s($z);XHo=r(h0t,"CanineForMultipleChoice"),h0t.forEach(t),zHo=r(jBe," (CANINE model)"),jBe.forEach(t),WHo=i(ee),lF=n(ee,"LI",{});var DBe=s(lF);Z_e=n(DBe,"STRONG",{});var u0t=s(Z_e);QHo=r(u0t,"convbert"),u0t.forEach(t),HHo=r(DBe," \u2014 "),kz=n(DBe,"A",{href:!0});var p0t=s(kz);UHo=r(p0t,"ConvBertForMultipleChoice"),p0t.forEach(t),JHo=r(DBe," (ConvBERT model)"),DBe.forEach(t),YHo=i(ee),iF=n(ee,"LI",{});var GBe=s(iF);e2e=n(GBe,"STRONG",{});var _0t=s(e2e);KHo=r(_0t,"data2vec-text"),_0t.forEach(t),ZHo=r(GBe," \u2014 "),Sz=n(GBe,"A",{href:!0});var b0t=s(Sz);eUo=r(b0t,"Data2VecTextForMultipleChoice"),b0t.forEach(t),oUo=r(GBe," (Data2VecText model)"),GBe.forEach(t),rUo=i(ee),dF=n(ee,"LI",{});var OBe=s(dF);o2e=n(OBe,"STRONG",{});var v0t=s(o2e);tUo=r(v0t,"deberta-v2"),v0t.forEach(t),aUo=r(OBe," \u2014 "),Rz=n(OBe,"A",{href:!0});var F0t=s(Rz);nUo=r(F0t,"DebertaV2ForMultipleChoice"),F0t.forEach(t),sUo=r(OBe," (DeBERTa-v2 model)"),OBe.forEach(t),lUo=i(ee),cF=n(ee,"LI",{});var VBe=s(cF);r2e=n(VBe,"STRONG",{});var T0t=s(r2e);iUo=r(T0t,"distilbert"),T0t.forEach(t),dUo=r(VBe," \u2014 "),Pz=n(VBe,"A",{href:!0});var M0t=s(Pz);cUo=r(M0t,"DistilBertForMultipleChoice"),M0t.forEach(t),mUo=r(VBe," (DistilBERT model)"),VBe.forEach(t),fUo=i(ee),mF=n(ee,"LI",{});var XBe=s(mF);t2e=n(XBe,"STRONG",{});var E0t=s(t2e);gUo=r(E0t,"electra"),E0t.forEach(t),hUo=r(XBe," \u2014 "),Bz=n(XBe,"A",{href:!0});var C0t=s(Bz);uUo=r(C0t,"ElectraForMultipleChoice"),C0t.forEach(t),pUo=r(XBe," (ELECTRA model)"),XBe.forEach(t),_Uo=i(ee),fF=n(ee,"LI",{});var zBe=s(fF);a2e=n(zBe,"STRONG",{});var w0t=s(a2e);bUo=r(w0t,"flaubert"),w0t.forEach(t),vUo=r(zBe," \u2014 "),Iz=n(zBe,"A",{href:!0});var A0t=s(Iz);FUo=r(A0t,"FlaubertForMultipleChoice"),A0t.forEach(t),TUo=r(zBe," (FlauBERT model)"),zBe.forEach(t),MUo=i(ee),gF=n(ee,"LI",{});var WBe=s(gF);n2e=n(WBe,"STRONG",{});var L0t=s(n2e);EUo=r(L0t,"fnet"),L0t.forEach(t),CUo=r(WBe," \u2014 "),Nz=n(WBe,"A",{href:!0});var y0t=s(Nz);wUo=r(y0t,"FNetForMultipleChoice"),y0t.forEach(t),AUo=r(WBe," (FNet model)"),WBe.forEach(t),LUo=i(ee),hF=n(ee,"LI",{});var QBe=s(hF);s2e=n(QBe,"STRONG",{});var x0t=s(s2e);yUo=r(x0t,"funnel"),x0t.forEach(t),xUo=r(QBe," \u2014 "),qz=n(QBe,"A",{href:!0});var $0t=s(qz);$Uo=r($0t,"FunnelForMultipleChoice"),$0t.forEach(t),kUo=r(QBe," (Funnel Transformer model)"),QBe.forEach(t),SUo=i(ee),uF=n(ee,"LI",{});var HBe=s(uF);l2e=n(HBe,"STRONG",{});var k0t=s(l2e);RUo=r(k0t,"ibert"),k0t.forEach(t),PUo=r(HBe," \u2014 "),jz=n(HBe,"A",{href:!0});var S0t=s(jz);BUo=r(S0t,"IBertForMultipleChoice"),S0t.forEach(t),IUo=r(HBe," (I-BERT model)"),HBe.forEach(t),NUo=i(ee),pF=n(ee,"LI",{});var UBe=s(pF);i2e=n(UBe,"STRONG",{});var R0t=s(i2e);qUo=r(R0t,"longformer"),R0t.forEach(t),jUo=r(UBe," \u2014 "),Dz=n(UBe,"A",{href:!0});var P0t=s(Dz);DUo=r(P0t,"LongformerForMultipleChoice"),P0t.forEach(t),GUo=r(UBe," (Longformer model)"),UBe.forEach(t),OUo=i(ee),_F=n(ee,"LI",{});var JBe=s(_F);d2e=n(JBe,"STRONG",{});var B0t=s(d2e);VUo=r(B0t,"megatron-bert"),B0t.forEach(t),XUo=r(JBe," \u2014 "),Gz=n(JBe,"A",{href:!0});var I0t=s(Gz);zUo=r(I0t,"MegatronBertForMultipleChoice"),I0t.forEach(t),WUo=r(JBe," (Megatron-BERT model)"),JBe.forEach(t),QUo=i(ee),bF=n(ee,"LI",{});var YBe=s(bF);c2e=n(YBe,"STRONG",{});var N0t=s(c2e);HUo=r(N0t,"mobilebert"),N0t.forEach(t),UUo=r(YBe," \u2014 "),Oz=n(YBe,"A",{href:!0});var q0t=s(Oz);JUo=r(q0t,"MobileBertForMultipleChoice"),q0t.forEach(t),YUo=r(YBe," (MobileBERT model)"),YBe.forEach(t),KUo=i(ee),vF=n(ee,"LI",{});var KBe=s(vF);m2e=n(KBe,"STRONG",{});var j0t=s(m2e);ZUo=r(j0t,"mpnet"),j0t.forEach(t),eJo=r(KBe," \u2014 "),Vz=n(KBe,"A",{href:!0});var D0t=s(Vz);oJo=r(D0t,"MPNetForMultipleChoice"),D0t.forEach(t),rJo=r(KBe," (MPNet model)"),KBe.forEach(t),tJo=i(ee),FF=n(ee,"LI",{});var ZBe=s(FF);f2e=n(ZBe,"STRONG",{});var G0t=s(f2e);aJo=r(G0t,"nezha"),G0t.forEach(t),nJo=r(ZBe," \u2014 "),Xz=n(ZBe,"A",{href:!0});var O0t=s(Xz);sJo=r(O0t,"NezhaForMultipleChoice"),O0t.forEach(t),lJo=r(ZBe," (Nezha model)"),ZBe.forEach(t),iJo=i(ee),TF=n(ee,"LI",{});var eIe=s(TF);g2e=n(eIe,"STRONG",{});var V0t=s(g2e);dJo=r(V0t,"nystromformer"),V0t.forEach(t),cJo=r(eIe," \u2014 "),zz=n(eIe,"A",{href:!0});var X0t=s(zz);mJo=r(X0t,"NystromformerForMultipleChoice"),X0t.forEach(t),fJo=r(eIe," (Nystr\xF6mformer model)"),eIe.forEach(t),gJo=i(ee),MF=n(ee,"LI",{});var oIe=s(MF);h2e=n(oIe,"STRONG",{});var z0t=s(h2e);hJo=r(z0t,"qdqbert"),z0t.forEach(t),uJo=r(oIe," \u2014 "),Wz=n(oIe,"A",{href:!0});var W0t=s(Wz);pJo=r(W0t,"QDQBertForMultipleChoice"),W0t.forEach(t),_Jo=r(oIe," (QDQBert model)"),oIe.forEach(t),bJo=i(ee),EF=n(ee,"LI",{});var rIe=s(EF);u2e=n(rIe,"STRONG",{});var Q0t=s(u2e);vJo=r(Q0t,"rembert"),Q0t.forEach(t),FJo=r(rIe," \u2014 "),Qz=n(rIe,"A",{href:!0});var H0t=s(Qz);TJo=r(H0t,"RemBertForMultipleChoice"),H0t.forEach(t),MJo=r(rIe," (RemBERT model)"),rIe.forEach(t),EJo=i(ee),CF=n(ee,"LI",{});var tIe=s(CF);p2e=n(tIe,"STRONG",{});var U0t=s(p2e);CJo=r(U0t,"roberta"),U0t.forEach(t),wJo=r(tIe," \u2014 "),Hz=n(tIe,"A",{href:!0});var J0t=s(Hz);AJo=r(J0t,"RobertaForMultipleChoice"),J0t.forEach(t),LJo=r(tIe," (RoBERTa model)"),tIe.forEach(t),yJo=i(ee),wF=n(ee,"LI",{});var aIe=s(wF);_2e=n(aIe,"STRONG",{});var Y0t=s(_2e);xJo=r(Y0t,"roformer"),Y0t.forEach(t),$Jo=r(aIe," \u2014 "),Uz=n(aIe,"A",{href:!0});var K0t=s(Uz);kJo=r(K0t,"RoFormerForMultipleChoice"),K0t.forEach(t),SJo=r(aIe," (RoFormer model)"),aIe.forEach(t),RJo=i(ee),AF=n(ee,"LI",{});var nIe=s(AF);b2e=n(nIe,"STRONG",{});var Z0t=s(b2e);PJo=r(Z0t,"squeezebert"),Z0t.forEach(t),BJo=r(nIe," \u2014 "),Jz=n(nIe,"A",{href:!0});var ewt=s(Jz);IJo=r(ewt,"SqueezeBertForMultipleChoice"),ewt.forEach(t),NJo=r(nIe," (SqueezeBERT model)"),nIe.forEach(t),qJo=i(ee),LF=n(ee,"LI",{});var sIe=s(LF);v2e=n(sIe,"STRONG",{});var owt=s(v2e);jJo=r(owt,"xlm"),owt.forEach(t),DJo=r(sIe," \u2014 "),Yz=n(sIe,"A",{href:!0});var rwt=s(Yz);GJo=r(rwt,"XLMForMultipleChoice"),rwt.forEach(t),OJo=r(sIe," (XLM model)"),sIe.forEach(t),VJo=i(ee),yF=n(ee,"LI",{});var lIe=s(yF);F2e=n(lIe,"STRONG",{});var twt=s(F2e);XJo=r(twt,"xlm-roberta"),twt.forEach(t),zJo=r(lIe," \u2014 "),Kz=n(lIe,"A",{href:!0});var awt=s(Kz);WJo=r(awt,"XLMRobertaForMultipleChoice"),awt.forEach(t),QJo=r(lIe," (XLM-RoBERTa model)"),lIe.forEach(t),HJo=i(ee),xF=n(ee,"LI",{});var iIe=s(xF);T2e=n(iIe,"STRONG",{});var nwt=s(T2e);UJo=r(nwt,"xlm-roberta-xl"),nwt.forEach(t),JJo=r(iIe," \u2014 "),Zz=n(iIe,"A",{href:!0});var swt=s(Zz);YJo=r(swt,"XLMRobertaXLForMultipleChoice"),swt.forEach(t),KJo=r(iIe," (XLM-RoBERTa-XL model)"),iIe.forEach(t),ZJo=i(ee),$F=n(ee,"LI",{});var dIe=s($F);M2e=n(dIe,"STRONG",{});var lwt=s(M2e);eYo=r(lwt,"xlnet"),lwt.forEach(t),oYo=r(dIe," \u2014 "),eW=n(dIe,"A",{href:!0});var iwt=s(eW);rYo=r(iwt,"XLNetForMultipleChoice"),iwt.forEach(t),tYo=r(dIe," (XLNet model)"),dIe.forEach(t),aYo=i(ee),kF=n(ee,"LI",{});var cIe=s(kF);E2e=n(cIe,"STRONG",{});var dwt=s(E2e);nYo=r(dwt,"yoso"),dwt.forEach(t),sYo=r(cIe," \u2014 "),oW=n(cIe,"A",{href:!0});var cwt=s(oW);lYo=r(cwt,"YosoForMultipleChoice"),cwt.forEach(t),iYo=r(cIe," (YOSO model)"),cIe.forEach(t),ee.forEach(t),dYo=i(ga),SF=n(ga,"P",{});var mIe=s(SF);cYo=r(mIe,"The model is set in evaluation mode by default using "),C2e=n(mIe,"CODE",{});var mwt=s(C2e);mYo=r(mwt,"model.eval()"),mwt.forEach(t),fYo=r(mIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w2e=n(mIe,"CODE",{});var fwt=s(w2e);gYo=r(fwt,"model.train()"),fwt.forEach(t),mIe.forEach(t),hYo=i(ga),T(RF.$$.fragment,ga),ga.forEach(t),ml.forEach(t),Ize=i(m),md=n(m,"H2",{class:!0});var OQe=s(md);PF=n(OQe,"A",{id:!0,class:!0,href:!0});var gwt=s(PF);A2e=n(gwt,"SPAN",{});var hwt=s(A2e);T(y8.$$.fragment,hwt),hwt.forEach(t),gwt.forEach(t),uYo=i(OQe),L2e=n(OQe,"SPAN",{});var uwt=s(L2e);pYo=r(uwt,"AutoModelForNextSentencePrediction"),uwt.forEach(t),OQe.forEach(t),Nze=i(m),qo=n(m,"DIV",{class:!0});var fl=s(qo);T(x8.$$.fragment,fl),_Yo=i(fl),fd=n(fl,"P",{});var xte=s(fd);bYo=r(xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rW=n(xte,"A",{href:!0});var pwt=s(rW);vYo=r(pwt,"from_pretrained()"),pwt.forEach(t),FYo=r(xte," class method or the "),tW=n(xte,"A",{href:!0});var _wt=s(tW);TYo=r(_wt,"from_config()"),_wt.forEach(t),MYo=r(xte,` class
method.`),xte.forEach(t),EYo=i(fl),$8=n(fl,"P",{});var VQe=s($8);CYo=r(VQe,"This class cannot be instantiated directly using "),y2e=n(VQe,"CODE",{});var bwt=s(y2e);wYo=r(bwt,"__init__()"),bwt.forEach(t),AYo=r(VQe," (throws an error)."),VQe.forEach(t),LYo=i(fl),ut=n(fl,"DIV",{class:!0});var q7=s(ut);T(k8.$$.fragment,q7),yYo=i(q7),x2e=n(q7,"P",{});var vwt=s(x2e);xYo=r(vwt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vwt.forEach(t),$Yo=i(q7),gd=n(q7,"P",{});var $te=s(gd);kYo=r($te,`Note:
Loading a model from its configuration file does `),$2e=n($te,"STRONG",{});var Fwt=s($2e);SYo=r(Fwt,"not"),Fwt.forEach(t),RYo=r($te,` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=n($te,"A",{href:!0});var Twt=s(aW);PYo=r(Twt,"from_pretrained()"),Twt.forEach(t),BYo=r($te," to load the model weights."),$te.forEach(t),IYo=i(q7),T(BF.$$.fragment,q7),q7.forEach(t),NYo=i(fl),ao=n(fl,"DIV",{class:!0});var ha=s(ao);T(S8.$$.fragment,ha),qYo=i(ha),k2e=n(ha,"P",{});var Mwt=s(k2e);jYo=r(Mwt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Mwt.forEach(t),DYo=i(ha),Va=n(ha,"P",{});var j7=s(Va);GYo=r(j7,"The model class to instantiate is selected based on the "),S2e=n(j7,"CODE",{});var Ewt=s(S2e);OYo=r(Ewt,"model_type"),Ewt.forEach(t),VYo=r(j7,` property of the config object (either
passed as an argument or loaded from `),R2e=n(j7,"CODE",{});var Cwt=s(R2e);XYo=r(Cwt,"pretrained_model_name_or_path"),Cwt.forEach(t),zYo=r(j7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P2e=n(j7,"CODE",{});var wwt=s(P2e);WYo=r(wwt,"pretrained_model_name_or_path"),wwt.forEach(t),QYo=r(j7,":"),j7.forEach(t),HYo=i(ha),jo=n(ha,"UL",{});var ua=s(jo);IF=n(ua,"LI",{});var fIe=s(IF);B2e=n(fIe,"STRONG",{});var Awt=s(B2e);UYo=r(Awt,"bert"),Awt.forEach(t),JYo=r(fIe," \u2014 "),nW=n(fIe,"A",{href:!0});var Lwt=s(nW);YYo=r(Lwt,"BertForNextSentencePrediction"),Lwt.forEach(t),KYo=r(fIe," (BERT model)"),fIe.forEach(t),ZYo=i(ua),NF=n(ua,"LI",{});var gIe=s(NF);I2e=n(gIe,"STRONG",{});var ywt=s(I2e);eKo=r(ywt,"fnet"),ywt.forEach(t),oKo=r(gIe," \u2014 "),sW=n(gIe,"A",{href:!0});var xwt=s(sW);rKo=r(xwt,"FNetForNextSentencePrediction"),xwt.forEach(t),tKo=r(gIe," (FNet model)"),gIe.forEach(t),aKo=i(ua),qF=n(ua,"LI",{});var hIe=s(qF);N2e=n(hIe,"STRONG",{});var $wt=s(N2e);nKo=r($wt,"megatron-bert"),$wt.forEach(t),sKo=r(hIe," \u2014 "),lW=n(hIe,"A",{href:!0});var kwt=s(lW);lKo=r(kwt,"MegatronBertForNextSentencePrediction"),kwt.forEach(t),iKo=r(hIe," (Megatron-BERT model)"),hIe.forEach(t),dKo=i(ua),jF=n(ua,"LI",{});var uIe=s(jF);q2e=n(uIe,"STRONG",{});var Swt=s(q2e);cKo=r(Swt,"mobilebert"),Swt.forEach(t),mKo=r(uIe," \u2014 "),iW=n(uIe,"A",{href:!0});var Rwt=s(iW);fKo=r(Rwt,"MobileBertForNextSentencePrediction"),Rwt.forEach(t),gKo=r(uIe," (MobileBERT model)"),uIe.forEach(t),hKo=i(ua),DF=n(ua,"LI",{});var pIe=s(DF);j2e=n(pIe,"STRONG",{});var Pwt=s(j2e);uKo=r(Pwt,"nezha"),Pwt.forEach(t),pKo=r(pIe," \u2014 "),dW=n(pIe,"A",{href:!0});var Bwt=s(dW);_Ko=r(Bwt,"NezhaForNextSentencePrediction"),Bwt.forEach(t),bKo=r(pIe," (Nezha model)"),pIe.forEach(t),vKo=i(ua),GF=n(ua,"LI",{});var _Ie=s(GF);D2e=n(_Ie,"STRONG",{});var Iwt=s(D2e);FKo=r(Iwt,"qdqbert"),Iwt.forEach(t),TKo=r(_Ie," \u2014 "),cW=n(_Ie,"A",{href:!0});var Nwt=s(cW);MKo=r(Nwt,"QDQBertForNextSentencePrediction"),Nwt.forEach(t),EKo=r(_Ie," (QDQBert model)"),_Ie.forEach(t),ua.forEach(t),CKo=i(ha),OF=n(ha,"P",{});var bIe=s(OF);wKo=r(bIe,"The model is set in evaluation mode by default using "),G2e=n(bIe,"CODE",{});var qwt=s(G2e);AKo=r(qwt,"model.eval()"),qwt.forEach(t),LKo=r(bIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O2e=n(bIe,"CODE",{});var jwt=s(O2e);yKo=r(jwt,"model.train()"),jwt.forEach(t),bIe.forEach(t),xKo=i(ha),T(VF.$$.fragment,ha),ha.forEach(t),fl.forEach(t),qze=i(m),hd=n(m,"H2",{class:!0});var XQe=s(hd);XF=n(XQe,"A",{id:!0,class:!0,href:!0});var Dwt=s(XF);V2e=n(Dwt,"SPAN",{});var Gwt=s(V2e);T(R8.$$.fragment,Gwt),Gwt.forEach(t),Dwt.forEach(t),$Ko=i(XQe),X2e=n(XQe,"SPAN",{});var Owt=s(X2e);kKo=r(Owt,"AutoModelForTokenClassification"),Owt.forEach(t),XQe.forEach(t),jze=i(m),Do=n(m,"DIV",{class:!0});var gl=s(Do);T(P8.$$.fragment,gl),SKo=i(gl),ud=n(gl,"P",{});var kte=s(ud);RKo=r(kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mW=n(kte,"A",{href:!0});var Vwt=s(mW);PKo=r(Vwt,"from_pretrained()"),Vwt.forEach(t),BKo=r(kte," class method or the "),fW=n(kte,"A",{href:!0});var Xwt=s(fW);IKo=r(Xwt,"from_config()"),Xwt.forEach(t),NKo=r(kte,` class
method.`),kte.forEach(t),qKo=i(gl),B8=n(gl,"P",{});var zQe=s(B8);jKo=r(zQe,"This class cannot be instantiated directly using "),z2e=n(zQe,"CODE",{});var zwt=s(z2e);DKo=r(zwt,"__init__()"),zwt.forEach(t),GKo=r(zQe," (throws an error)."),zQe.forEach(t),OKo=i(gl),pt=n(gl,"DIV",{class:!0});var D7=s(pt);T(I8.$$.fragment,D7),VKo=i(D7),W2e=n(D7,"P",{});var Wwt=s(W2e);XKo=r(Wwt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Wwt.forEach(t),zKo=i(D7),pd=n(D7,"P",{});var Ste=s(pd);WKo=r(Ste,`Note:
Loading a model from its configuration file does `),Q2e=n(Ste,"STRONG",{});var Qwt=s(Q2e);QKo=r(Qwt,"not"),Qwt.forEach(t),HKo=r(Ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=n(Ste,"A",{href:!0});var Hwt=s(gW);UKo=r(Hwt,"from_pretrained()"),Hwt.forEach(t),JKo=r(Ste," to load the model weights."),Ste.forEach(t),YKo=i(D7),T(zF.$$.fragment,D7),D7.forEach(t),KKo=i(gl),no=n(gl,"DIV",{class:!0});var pa=s(no);T(N8.$$.fragment,pa),ZKo=i(pa),H2e=n(pa,"P",{});var Uwt=s(H2e);eZo=r(Uwt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Uwt.forEach(t),oZo=i(pa),Xa=n(pa,"P",{});var G7=s(Xa);rZo=r(G7,"The model class to instantiate is selected based on the "),U2e=n(G7,"CODE",{});var Jwt=s(U2e);tZo=r(Jwt,"model_type"),Jwt.forEach(t),aZo=r(G7,` property of the config object (either
passed as an argument or loaded from `),J2e=n(G7,"CODE",{});var Ywt=s(J2e);nZo=r(Ywt,"pretrained_model_name_or_path"),Ywt.forEach(t),sZo=r(G7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=n(G7,"CODE",{});var Kwt=s(Y2e);lZo=r(Kwt,"pretrained_model_name_or_path"),Kwt.forEach(t),iZo=r(G7,":"),G7.forEach(t),dZo=i(pa),J=n(pa,"UL",{});var K=s(J);WF=n(K,"LI",{});var vIe=s(WF);K2e=n(vIe,"STRONG",{});var Zwt=s(K2e);cZo=r(Zwt,"albert"),Zwt.forEach(t),mZo=r(vIe," \u2014 "),hW=n(vIe,"A",{href:!0});var eAt=s(hW);fZo=r(eAt,"AlbertForTokenClassification"),eAt.forEach(t),gZo=r(vIe," (ALBERT model)"),vIe.forEach(t),hZo=i(K),QF=n(K,"LI",{});var FIe=s(QF);Z2e=n(FIe,"STRONG",{});var oAt=s(Z2e);uZo=r(oAt,"bert"),oAt.forEach(t),pZo=r(FIe," \u2014 "),uW=n(FIe,"A",{href:!0});var rAt=s(uW);_Zo=r(rAt,"BertForTokenClassification"),rAt.forEach(t),bZo=r(FIe," (BERT model)"),FIe.forEach(t),vZo=i(K),HF=n(K,"LI",{});var TIe=s(HF);ebe=n(TIe,"STRONG",{});var tAt=s(ebe);FZo=r(tAt,"big_bird"),tAt.forEach(t),TZo=r(TIe," \u2014 "),pW=n(TIe,"A",{href:!0});var aAt=s(pW);MZo=r(aAt,"BigBirdForTokenClassification"),aAt.forEach(t),EZo=r(TIe," (BigBird model)"),TIe.forEach(t),CZo=i(K),UF=n(K,"LI",{});var MIe=s(UF);obe=n(MIe,"STRONG",{});var nAt=s(obe);wZo=r(nAt,"bloom"),nAt.forEach(t),AZo=r(MIe," \u2014 "),_W=n(MIe,"A",{href:!0});var sAt=s(_W);LZo=r(sAt,"BloomForTokenClassification"),sAt.forEach(t),yZo=r(MIe," (BLOOM model)"),MIe.forEach(t),xZo=i(K),JF=n(K,"LI",{});var EIe=s(JF);rbe=n(EIe,"STRONG",{});var lAt=s(rbe);$Zo=r(lAt,"camembert"),lAt.forEach(t),kZo=r(EIe," \u2014 "),bW=n(EIe,"A",{href:!0});var iAt=s(bW);SZo=r(iAt,"CamembertForTokenClassification"),iAt.forEach(t),RZo=r(EIe," (CamemBERT model)"),EIe.forEach(t),PZo=i(K),YF=n(K,"LI",{});var CIe=s(YF);tbe=n(CIe,"STRONG",{});var dAt=s(tbe);BZo=r(dAt,"canine"),dAt.forEach(t),IZo=r(CIe," \u2014 "),vW=n(CIe,"A",{href:!0});var cAt=s(vW);NZo=r(cAt,"CanineForTokenClassification"),cAt.forEach(t),qZo=r(CIe," (CANINE model)"),CIe.forEach(t),jZo=i(K),KF=n(K,"LI",{});var wIe=s(KF);abe=n(wIe,"STRONG",{});var mAt=s(abe);DZo=r(mAt,"convbert"),mAt.forEach(t),GZo=r(wIe," \u2014 "),FW=n(wIe,"A",{href:!0});var fAt=s(FW);OZo=r(fAt,"ConvBertForTokenClassification"),fAt.forEach(t),VZo=r(wIe," (ConvBERT model)"),wIe.forEach(t),XZo=i(K),ZF=n(K,"LI",{});var AIe=s(ZF);nbe=n(AIe,"STRONG",{});var gAt=s(nbe);zZo=r(gAt,"data2vec-text"),gAt.forEach(t),WZo=r(AIe," \u2014 "),TW=n(AIe,"A",{href:!0});var hAt=s(TW);QZo=r(hAt,"Data2VecTextForTokenClassification"),hAt.forEach(t),HZo=r(AIe," (Data2VecText model)"),AIe.forEach(t),UZo=i(K),eT=n(K,"LI",{});var LIe=s(eT);sbe=n(LIe,"STRONG",{});var uAt=s(sbe);JZo=r(uAt,"deberta"),uAt.forEach(t),YZo=r(LIe," \u2014 "),MW=n(LIe,"A",{href:!0});var pAt=s(MW);KZo=r(pAt,"DebertaForTokenClassification"),pAt.forEach(t),ZZo=r(LIe," (DeBERTa model)"),LIe.forEach(t),eer=i(K),oT=n(K,"LI",{});var yIe=s(oT);lbe=n(yIe,"STRONG",{});var _At=s(lbe);oer=r(_At,"deberta-v2"),_At.forEach(t),rer=r(yIe," \u2014 "),EW=n(yIe,"A",{href:!0});var bAt=s(EW);ter=r(bAt,"DebertaV2ForTokenClassification"),bAt.forEach(t),aer=r(yIe," (DeBERTa-v2 model)"),yIe.forEach(t),ner=i(K),rT=n(K,"LI",{});var xIe=s(rT);ibe=n(xIe,"STRONG",{});var vAt=s(ibe);ser=r(vAt,"distilbert"),vAt.forEach(t),ler=r(xIe," \u2014 "),CW=n(xIe,"A",{href:!0});var FAt=s(CW);ier=r(FAt,"DistilBertForTokenClassification"),FAt.forEach(t),der=r(xIe," (DistilBERT model)"),xIe.forEach(t),cer=i(K),tT=n(K,"LI",{});var $Ie=s(tT);dbe=n($Ie,"STRONG",{});var TAt=s(dbe);mer=r(TAt,"electra"),TAt.forEach(t),fer=r($Ie," \u2014 "),wW=n($Ie,"A",{href:!0});var MAt=s(wW);ger=r(MAt,"ElectraForTokenClassification"),MAt.forEach(t),her=r($Ie," (ELECTRA model)"),$Ie.forEach(t),uer=i(K),aT=n(K,"LI",{});var kIe=s(aT);cbe=n(kIe,"STRONG",{});var EAt=s(cbe);per=r(EAt,"flaubert"),EAt.forEach(t),_er=r(kIe," \u2014 "),AW=n(kIe,"A",{href:!0});var CAt=s(AW);ber=r(CAt,"FlaubertForTokenClassification"),CAt.forEach(t),ver=r(kIe," (FlauBERT model)"),kIe.forEach(t),Fer=i(K),nT=n(K,"LI",{});var SIe=s(nT);mbe=n(SIe,"STRONG",{});var wAt=s(mbe);Ter=r(wAt,"fnet"),wAt.forEach(t),Mer=r(SIe," \u2014 "),LW=n(SIe,"A",{href:!0});var AAt=s(LW);Eer=r(AAt,"FNetForTokenClassification"),AAt.forEach(t),Cer=r(SIe," (FNet model)"),SIe.forEach(t),wer=i(K),sT=n(K,"LI",{});var RIe=s(sT);fbe=n(RIe,"STRONG",{});var LAt=s(fbe);Aer=r(LAt,"funnel"),LAt.forEach(t),Ler=r(RIe," \u2014 "),yW=n(RIe,"A",{href:!0});var yAt=s(yW);yer=r(yAt,"FunnelForTokenClassification"),yAt.forEach(t),xer=r(RIe," (Funnel Transformer model)"),RIe.forEach(t),$er=i(K),lT=n(K,"LI",{});var PIe=s(lT);gbe=n(PIe,"STRONG",{});var xAt=s(gbe);ker=r(xAt,"gpt2"),xAt.forEach(t),Ser=r(PIe," \u2014 "),xW=n(PIe,"A",{href:!0});var $At=s(xW);Rer=r($At,"GPT2ForTokenClassification"),$At.forEach(t),Per=r(PIe," (OpenAI GPT-2 model)"),PIe.forEach(t),Ber=i(K),iT=n(K,"LI",{});var BIe=s(iT);hbe=n(BIe,"STRONG",{});var kAt=s(hbe);Ier=r(kAt,"ibert"),kAt.forEach(t),Ner=r(BIe," \u2014 "),$W=n(BIe,"A",{href:!0});var SAt=s($W);qer=r(SAt,"IBertForTokenClassification"),SAt.forEach(t),jer=r(BIe," (I-BERT model)"),BIe.forEach(t),Der=i(K),dT=n(K,"LI",{});var IIe=s(dT);ube=n(IIe,"STRONG",{});var RAt=s(ube);Ger=r(RAt,"layoutlm"),RAt.forEach(t),Oer=r(IIe," \u2014 "),kW=n(IIe,"A",{href:!0});var PAt=s(kW);Ver=r(PAt,"LayoutLMForTokenClassification"),PAt.forEach(t),Xer=r(IIe," (LayoutLM model)"),IIe.forEach(t),zer=i(K),cT=n(K,"LI",{});var NIe=s(cT);pbe=n(NIe,"STRONG",{});var BAt=s(pbe);Wer=r(BAt,"layoutlmv2"),BAt.forEach(t),Qer=r(NIe," \u2014 "),SW=n(NIe,"A",{href:!0});var IAt=s(SW);Her=r(IAt,"LayoutLMv2ForTokenClassification"),IAt.forEach(t),Uer=r(NIe," (LayoutLMv2 model)"),NIe.forEach(t),Jer=i(K),mT=n(K,"LI",{});var qIe=s(mT);_be=n(qIe,"STRONG",{});var NAt=s(_be);Yer=r(NAt,"layoutlmv3"),NAt.forEach(t),Ker=r(qIe," \u2014 "),RW=n(qIe,"A",{href:!0});var qAt=s(RW);Zer=r(qAt,"LayoutLMv3ForTokenClassification"),qAt.forEach(t),eor=r(qIe," (LayoutLMv3 model)"),qIe.forEach(t),oor=i(K),fT=n(K,"LI",{});var jIe=s(fT);bbe=n(jIe,"STRONG",{});var jAt=s(bbe);ror=r(jAt,"longformer"),jAt.forEach(t),tor=r(jIe," \u2014 "),PW=n(jIe,"A",{href:!0});var DAt=s(PW);aor=r(DAt,"LongformerForTokenClassification"),DAt.forEach(t),nor=r(jIe," (Longformer model)"),jIe.forEach(t),sor=i(K),gT=n(K,"LI",{});var DIe=s(gT);vbe=n(DIe,"STRONG",{});var GAt=s(vbe);lor=r(GAt,"megatron-bert"),GAt.forEach(t),ior=r(DIe," \u2014 "),BW=n(DIe,"A",{href:!0});var OAt=s(BW);dor=r(OAt,"MegatronBertForTokenClassification"),OAt.forEach(t),cor=r(DIe," (Megatron-BERT model)"),DIe.forEach(t),mor=i(K),hT=n(K,"LI",{});var GIe=s(hT);Fbe=n(GIe,"STRONG",{});var VAt=s(Fbe);gor=r(VAt,"mobilebert"),VAt.forEach(t),hor=r(GIe," \u2014 "),IW=n(GIe,"A",{href:!0});var XAt=s(IW);uor=r(XAt,"MobileBertForTokenClassification"),XAt.forEach(t),por=r(GIe," (MobileBERT model)"),GIe.forEach(t),_or=i(K),uT=n(K,"LI",{});var OIe=s(uT);Tbe=n(OIe,"STRONG",{});var zAt=s(Tbe);bor=r(zAt,"mpnet"),zAt.forEach(t),vor=r(OIe," \u2014 "),NW=n(OIe,"A",{href:!0});var WAt=s(NW);For=r(WAt,"MPNetForTokenClassification"),WAt.forEach(t),Tor=r(OIe," (MPNet model)"),OIe.forEach(t),Mor=i(K),pT=n(K,"LI",{});var VIe=s(pT);Mbe=n(VIe,"STRONG",{});var QAt=s(Mbe);Eor=r(QAt,"nezha"),QAt.forEach(t),Cor=r(VIe," \u2014 "),qW=n(VIe,"A",{href:!0});var HAt=s(qW);wor=r(HAt,"NezhaForTokenClassification"),HAt.forEach(t),Aor=r(VIe," (Nezha model)"),VIe.forEach(t),Lor=i(K),_T=n(K,"LI",{});var XIe=s(_T);Ebe=n(XIe,"STRONG",{});var UAt=s(Ebe);yor=r(UAt,"nystromformer"),UAt.forEach(t),xor=r(XIe," \u2014 "),jW=n(XIe,"A",{href:!0});var JAt=s(jW);$or=r(JAt,"NystromformerForTokenClassification"),JAt.forEach(t),kor=r(XIe," (Nystr\xF6mformer model)"),XIe.forEach(t),Sor=i(K),bT=n(K,"LI",{});var zIe=s(bT);Cbe=n(zIe,"STRONG",{});var YAt=s(Cbe);Ror=r(YAt,"qdqbert"),YAt.forEach(t),Por=r(zIe," \u2014 "),DW=n(zIe,"A",{href:!0});var KAt=s(DW);Bor=r(KAt,"QDQBertForTokenClassification"),KAt.forEach(t),Ior=r(zIe," (QDQBert model)"),zIe.forEach(t),Nor=i(K),vT=n(K,"LI",{});var WIe=s(vT);wbe=n(WIe,"STRONG",{});var ZAt=s(wbe);qor=r(ZAt,"rembert"),ZAt.forEach(t),jor=r(WIe," \u2014 "),GW=n(WIe,"A",{href:!0});var e6t=s(GW);Dor=r(e6t,"RemBertForTokenClassification"),e6t.forEach(t),Gor=r(WIe," (RemBERT model)"),WIe.forEach(t),Oor=i(K),FT=n(K,"LI",{});var QIe=s(FT);Abe=n(QIe,"STRONG",{});var o6t=s(Abe);Vor=r(o6t,"roberta"),o6t.forEach(t),Xor=r(QIe," \u2014 "),OW=n(QIe,"A",{href:!0});var r6t=s(OW);zor=r(r6t,"RobertaForTokenClassification"),r6t.forEach(t),Wor=r(QIe," (RoBERTa model)"),QIe.forEach(t),Qor=i(K),TT=n(K,"LI",{});var HIe=s(TT);Lbe=n(HIe,"STRONG",{});var t6t=s(Lbe);Hor=r(t6t,"roformer"),t6t.forEach(t),Uor=r(HIe," \u2014 "),VW=n(HIe,"A",{href:!0});var a6t=s(VW);Jor=r(a6t,"RoFormerForTokenClassification"),a6t.forEach(t),Yor=r(HIe," (RoFormer model)"),HIe.forEach(t),Kor=i(K),MT=n(K,"LI",{});var UIe=s(MT);ybe=n(UIe,"STRONG",{});var n6t=s(ybe);Zor=r(n6t,"squeezebert"),n6t.forEach(t),err=r(UIe," \u2014 "),XW=n(UIe,"A",{href:!0});var s6t=s(XW);orr=r(s6t,"SqueezeBertForTokenClassification"),s6t.forEach(t),rrr=r(UIe," (SqueezeBERT model)"),UIe.forEach(t),trr=i(K),ET=n(K,"LI",{});var JIe=s(ET);xbe=n(JIe,"STRONG",{});var l6t=s(xbe);arr=r(l6t,"xlm"),l6t.forEach(t),nrr=r(JIe," \u2014 "),zW=n(JIe,"A",{href:!0});var i6t=s(zW);srr=r(i6t,"XLMForTokenClassification"),i6t.forEach(t),lrr=r(JIe," (XLM model)"),JIe.forEach(t),irr=i(K),CT=n(K,"LI",{});var YIe=s(CT);$be=n(YIe,"STRONG",{});var d6t=s($be);drr=r(d6t,"xlm-roberta"),d6t.forEach(t),crr=r(YIe," \u2014 "),WW=n(YIe,"A",{href:!0});var c6t=s(WW);mrr=r(c6t,"XLMRobertaForTokenClassification"),c6t.forEach(t),frr=r(YIe," (XLM-RoBERTa model)"),YIe.forEach(t),grr=i(K),wT=n(K,"LI",{});var KIe=s(wT);kbe=n(KIe,"STRONG",{});var m6t=s(kbe);hrr=r(m6t,"xlm-roberta-xl"),m6t.forEach(t),urr=r(KIe," \u2014 "),QW=n(KIe,"A",{href:!0});var f6t=s(QW);prr=r(f6t,"XLMRobertaXLForTokenClassification"),f6t.forEach(t),_rr=r(KIe," (XLM-RoBERTa-XL model)"),KIe.forEach(t),brr=i(K),AT=n(K,"LI",{});var ZIe=s(AT);Sbe=n(ZIe,"STRONG",{});var g6t=s(Sbe);vrr=r(g6t,"xlnet"),g6t.forEach(t),Frr=r(ZIe," \u2014 "),HW=n(ZIe,"A",{href:!0});var h6t=s(HW);Trr=r(h6t,"XLNetForTokenClassification"),h6t.forEach(t),Mrr=r(ZIe," (XLNet model)"),ZIe.forEach(t),Err=i(K),LT=n(K,"LI",{});var eNe=s(LT);Rbe=n(eNe,"STRONG",{});var u6t=s(Rbe);Crr=r(u6t,"yoso"),u6t.forEach(t),wrr=r(eNe," \u2014 "),UW=n(eNe,"A",{href:!0});var p6t=s(UW);Arr=r(p6t,"YosoForTokenClassification"),p6t.forEach(t),Lrr=r(eNe," (YOSO model)"),eNe.forEach(t),K.forEach(t),yrr=i(pa),yT=n(pa,"P",{});var oNe=s(yT);xrr=r(oNe,"The model is set in evaluation mode by default using "),Pbe=n(oNe,"CODE",{});var _6t=s(Pbe);$rr=r(_6t,"model.eval()"),_6t.forEach(t),krr=r(oNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bbe=n(oNe,"CODE",{});var b6t=s(Bbe);Srr=r(b6t,"model.train()"),b6t.forEach(t),oNe.forEach(t),Rrr=i(pa),T(xT.$$.fragment,pa),pa.forEach(t),gl.forEach(t),Dze=i(m),_d=n(m,"H2",{class:!0});var WQe=s(_d);$T=n(WQe,"A",{id:!0,class:!0,href:!0});var v6t=s($T);Ibe=n(v6t,"SPAN",{});var F6t=s(Ibe);T(q8.$$.fragment,F6t),F6t.forEach(t),v6t.forEach(t),Prr=i(WQe),Nbe=n(WQe,"SPAN",{});var T6t=s(Nbe);Brr=r(T6t,"AutoModelForQuestionAnswering"),T6t.forEach(t),WQe.forEach(t),Gze=i(m),Go=n(m,"DIV",{class:!0});var hl=s(Go);T(j8.$$.fragment,hl),Irr=i(hl),bd=n(hl,"P",{});var Rte=s(bd);Nrr=r(Rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JW=n(Rte,"A",{href:!0});var M6t=s(JW);qrr=r(M6t,"from_pretrained()"),M6t.forEach(t),jrr=r(Rte," class method or the "),YW=n(Rte,"A",{href:!0});var E6t=s(YW);Drr=r(E6t,"from_config()"),E6t.forEach(t),Grr=r(Rte,` class
method.`),Rte.forEach(t),Orr=i(hl),D8=n(hl,"P",{});var QQe=s(D8);Vrr=r(QQe,"This class cannot be instantiated directly using "),qbe=n(QQe,"CODE",{});var C6t=s(qbe);Xrr=r(C6t,"__init__()"),C6t.forEach(t),zrr=r(QQe," (throws an error)."),QQe.forEach(t),Wrr=i(hl),_t=n(hl,"DIV",{class:!0});var O7=s(_t);T(G8.$$.fragment,O7),Qrr=i(O7),jbe=n(O7,"P",{});var w6t=s(jbe);Hrr=r(w6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),w6t.forEach(t),Urr=i(O7),vd=n(O7,"P",{});var Pte=s(vd);Jrr=r(Pte,`Note:
Loading a model from its configuration file does `),Dbe=n(Pte,"STRONG",{});var A6t=s(Dbe);Yrr=r(A6t,"not"),A6t.forEach(t),Krr=r(Pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=n(Pte,"A",{href:!0});var L6t=s(KW);Zrr=r(L6t,"from_pretrained()"),L6t.forEach(t),etr=r(Pte," to load the model weights."),Pte.forEach(t),otr=i(O7),T(kT.$$.fragment,O7),O7.forEach(t),rtr=i(hl),so=n(hl,"DIV",{class:!0});var _a=s(so);T(O8.$$.fragment,_a),ttr=i(_a),Gbe=n(_a,"P",{});var y6t=s(Gbe);atr=r(y6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),y6t.forEach(t),ntr=i(_a),za=n(_a,"P",{});var V7=s(za);str=r(V7,"The model class to instantiate is selected based on the "),Obe=n(V7,"CODE",{});var x6t=s(Obe);ltr=r(x6t,"model_type"),x6t.forEach(t),itr=r(V7,` property of the config object (either
passed as an argument or loaded from `),Vbe=n(V7,"CODE",{});var $6t=s(Vbe);dtr=r($6t,"pretrained_model_name_or_path"),$6t.forEach(t),ctr=r(V7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xbe=n(V7,"CODE",{});var k6t=s(Xbe);mtr=r(k6t,"pretrained_model_name_or_path"),k6t.forEach(t),ftr=r(V7,":"),V7.forEach(t),gtr=i(_a),V=n(_a,"UL",{});var X=s(V);ST=n(X,"LI",{});var rNe=s(ST);zbe=n(rNe,"STRONG",{});var S6t=s(zbe);htr=r(S6t,"albert"),S6t.forEach(t),utr=r(rNe," \u2014 "),ZW=n(rNe,"A",{href:!0});var R6t=s(ZW);ptr=r(R6t,"AlbertForQuestionAnswering"),R6t.forEach(t),_tr=r(rNe," (ALBERT model)"),rNe.forEach(t),btr=i(X),RT=n(X,"LI",{});var tNe=s(RT);Wbe=n(tNe,"STRONG",{});var P6t=s(Wbe);vtr=r(P6t,"bart"),P6t.forEach(t),Ftr=r(tNe," \u2014 "),eQ=n(tNe,"A",{href:!0});var B6t=s(eQ);Ttr=r(B6t,"BartForQuestionAnswering"),B6t.forEach(t),Mtr=r(tNe," (BART model)"),tNe.forEach(t),Etr=i(X),PT=n(X,"LI",{});var aNe=s(PT);Qbe=n(aNe,"STRONG",{});var I6t=s(Qbe);Ctr=r(I6t,"bert"),I6t.forEach(t),wtr=r(aNe," \u2014 "),oQ=n(aNe,"A",{href:!0});var N6t=s(oQ);Atr=r(N6t,"BertForQuestionAnswering"),N6t.forEach(t),Ltr=r(aNe," (BERT model)"),aNe.forEach(t),ytr=i(X),BT=n(X,"LI",{});var nNe=s(BT);Hbe=n(nNe,"STRONG",{});var q6t=s(Hbe);xtr=r(q6t,"big_bird"),q6t.forEach(t),$tr=r(nNe," \u2014 "),rQ=n(nNe,"A",{href:!0});var j6t=s(rQ);ktr=r(j6t,"BigBirdForQuestionAnswering"),j6t.forEach(t),Str=r(nNe," (BigBird model)"),nNe.forEach(t),Rtr=i(X),IT=n(X,"LI",{});var sNe=s(IT);Ube=n(sNe,"STRONG",{});var D6t=s(Ube);Ptr=r(D6t,"bigbird_pegasus"),D6t.forEach(t),Btr=r(sNe," \u2014 "),tQ=n(sNe,"A",{href:!0});var G6t=s(tQ);Itr=r(G6t,"BigBirdPegasusForQuestionAnswering"),G6t.forEach(t),Ntr=r(sNe," (BigBird-Pegasus model)"),sNe.forEach(t),qtr=i(X),NT=n(X,"LI",{});var lNe=s(NT);Jbe=n(lNe,"STRONG",{});var O6t=s(Jbe);jtr=r(O6t,"camembert"),O6t.forEach(t),Dtr=r(lNe," \u2014 "),aQ=n(lNe,"A",{href:!0});var V6t=s(aQ);Gtr=r(V6t,"CamembertForQuestionAnswering"),V6t.forEach(t),Otr=r(lNe," (CamemBERT model)"),lNe.forEach(t),Vtr=i(X),qT=n(X,"LI",{});var iNe=s(qT);Ybe=n(iNe,"STRONG",{});var X6t=s(Ybe);Xtr=r(X6t,"canine"),X6t.forEach(t),ztr=r(iNe," \u2014 "),nQ=n(iNe,"A",{href:!0});var z6t=s(nQ);Wtr=r(z6t,"CanineForQuestionAnswering"),z6t.forEach(t),Qtr=r(iNe," (CANINE model)"),iNe.forEach(t),Htr=i(X),jT=n(X,"LI",{});var dNe=s(jT);Kbe=n(dNe,"STRONG",{});var W6t=s(Kbe);Utr=r(W6t,"convbert"),W6t.forEach(t),Jtr=r(dNe," \u2014 "),sQ=n(dNe,"A",{href:!0});var Q6t=s(sQ);Ytr=r(Q6t,"ConvBertForQuestionAnswering"),Q6t.forEach(t),Ktr=r(dNe," (ConvBERT model)"),dNe.forEach(t),Ztr=i(X),DT=n(X,"LI",{});var cNe=s(DT);Zbe=n(cNe,"STRONG",{});var H6t=s(Zbe);ear=r(H6t,"data2vec-text"),H6t.forEach(t),oar=r(cNe," \u2014 "),lQ=n(cNe,"A",{href:!0});var U6t=s(lQ);rar=r(U6t,"Data2VecTextForQuestionAnswering"),U6t.forEach(t),tar=r(cNe," (Data2VecText model)"),cNe.forEach(t),aar=i(X),GT=n(X,"LI",{});var mNe=s(GT);eve=n(mNe,"STRONG",{});var J6t=s(eve);nar=r(J6t,"deberta"),J6t.forEach(t),sar=r(mNe," \u2014 "),iQ=n(mNe,"A",{href:!0});var Y6t=s(iQ);lar=r(Y6t,"DebertaForQuestionAnswering"),Y6t.forEach(t),iar=r(mNe," (DeBERTa model)"),mNe.forEach(t),dar=i(X),OT=n(X,"LI",{});var fNe=s(OT);ove=n(fNe,"STRONG",{});var K6t=s(ove);car=r(K6t,"deberta-v2"),K6t.forEach(t),mar=r(fNe," \u2014 "),dQ=n(fNe,"A",{href:!0});var Z6t=s(dQ);far=r(Z6t,"DebertaV2ForQuestionAnswering"),Z6t.forEach(t),gar=r(fNe," (DeBERTa-v2 model)"),fNe.forEach(t),har=i(X),VT=n(X,"LI",{});var gNe=s(VT);rve=n(gNe,"STRONG",{});var e7t=s(rve);uar=r(e7t,"distilbert"),e7t.forEach(t),par=r(gNe," \u2014 "),cQ=n(gNe,"A",{href:!0});var o7t=s(cQ);_ar=r(o7t,"DistilBertForQuestionAnswering"),o7t.forEach(t),bar=r(gNe," (DistilBERT model)"),gNe.forEach(t),Far=i(X),XT=n(X,"LI",{});var hNe=s(XT);tve=n(hNe,"STRONG",{});var r7t=s(tve);Tar=r(r7t,"electra"),r7t.forEach(t),Mar=r(hNe," \u2014 "),mQ=n(hNe,"A",{href:!0});var t7t=s(mQ);Ear=r(t7t,"ElectraForQuestionAnswering"),t7t.forEach(t),Car=r(hNe," (ELECTRA model)"),hNe.forEach(t),war=i(X),zT=n(X,"LI",{});var uNe=s(zT);ave=n(uNe,"STRONG",{});var a7t=s(ave);Aar=r(a7t,"flaubert"),a7t.forEach(t),Lar=r(uNe," \u2014 "),fQ=n(uNe,"A",{href:!0});var n7t=s(fQ);yar=r(n7t,"FlaubertForQuestionAnsweringSimple"),n7t.forEach(t),xar=r(uNe," (FlauBERT model)"),uNe.forEach(t),$ar=i(X),WT=n(X,"LI",{});var pNe=s(WT);nve=n(pNe,"STRONG",{});var s7t=s(nve);kar=r(s7t,"fnet"),s7t.forEach(t),Sar=r(pNe," \u2014 "),gQ=n(pNe,"A",{href:!0});var l7t=s(gQ);Rar=r(l7t,"FNetForQuestionAnswering"),l7t.forEach(t),Par=r(pNe," (FNet model)"),pNe.forEach(t),Bar=i(X),QT=n(X,"LI",{});var _Ne=s(QT);sve=n(_Ne,"STRONG",{});var i7t=s(sve);Iar=r(i7t,"funnel"),i7t.forEach(t),Nar=r(_Ne," \u2014 "),hQ=n(_Ne,"A",{href:!0});var d7t=s(hQ);qar=r(d7t,"FunnelForQuestionAnswering"),d7t.forEach(t),jar=r(_Ne," (Funnel Transformer model)"),_Ne.forEach(t),Dar=i(X),HT=n(X,"LI",{});var bNe=s(HT);lve=n(bNe,"STRONG",{});var c7t=s(lve);Gar=r(c7t,"gptj"),c7t.forEach(t),Oar=r(bNe," \u2014 "),uQ=n(bNe,"A",{href:!0});var m7t=s(uQ);Var=r(m7t,"GPTJForQuestionAnswering"),m7t.forEach(t),Xar=r(bNe," (GPT-J model)"),bNe.forEach(t),zar=i(X),UT=n(X,"LI",{});var vNe=s(UT);ive=n(vNe,"STRONG",{});var f7t=s(ive);War=r(f7t,"ibert"),f7t.forEach(t),Qar=r(vNe," \u2014 "),pQ=n(vNe,"A",{href:!0});var g7t=s(pQ);Har=r(g7t,"IBertForQuestionAnswering"),g7t.forEach(t),Uar=r(vNe," (I-BERT model)"),vNe.forEach(t),Jar=i(X),JT=n(X,"LI",{});var FNe=s(JT);dve=n(FNe,"STRONG",{});var h7t=s(dve);Yar=r(h7t,"layoutlmv2"),h7t.forEach(t),Kar=r(FNe," \u2014 "),_Q=n(FNe,"A",{href:!0});var u7t=s(_Q);Zar=r(u7t,"LayoutLMv2ForQuestionAnswering"),u7t.forEach(t),enr=r(FNe," (LayoutLMv2 model)"),FNe.forEach(t),onr=i(X),YT=n(X,"LI",{});var TNe=s(YT);cve=n(TNe,"STRONG",{});var p7t=s(cve);rnr=r(p7t,"layoutlmv3"),p7t.forEach(t),tnr=r(TNe," \u2014 "),bQ=n(TNe,"A",{href:!0});var _7t=s(bQ);anr=r(_7t,"LayoutLMv3ForQuestionAnswering"),_7t.forEach(t),nnr=r(TNe," (LayoutLMv3 model)"),TNe.forEach(t),snr=i(X),KT=n(X,"LI",{});var MNe=s(KT);mve=n(MNe,"STRONG",{});var b7t=s(mve);lnr=r(b7t,"led"),b7t.forEach(t),inr=r(MNe," \u2014 "),vQ=n(MNe,"A",{href:!0});var v7t=s(vQ);dnr=r(v7t,"LEDForQuestionAnswering"),v7t.forEach(t),cnr=r(MNe," (LED model)"),MNe.forEach(t),mnr=i(X),ZT=n(X,"LI",{});var ENe=s(ZT);fve=n(ENe,"STRONG",{});var F7t=s(fve);fnr=r(F7t,"longformer"),F7t.forEach(t),gnr=r(ENe," \u2014 "),FQ=n(ENe,"A",{href:!0});var T7t=s(FQ);hnr=r(T7t,"LongformerForQuestionAnswering"),T7t.forEach(t),unr=r(ENe," (Longformer model)"),ENe.forEach(t),pnr=i(X),eM=n(X,"LI",{});var CNe=s(eM);gve=n(CNe,"STRONG",{});var M7t=s(gve);_nr=r(M7t,"lxmert"),M7t.forEach(t),bnr=r(CNe," \u2014 "),TQ=n(CNe,"A",{href:!0});var E7t=s(TQ);vnr=r(E7t,"LxmertForQuestionAnswering"),E7t.forEach(t),Fnr=r(CNe," (LXMERT model)"),CNe.forEach(t),Tnr=i(X),oM=n(X,"LI",{});var wNe=s(oM);hve=n(wNe,"STRONG",{});var C7t=s(hve);Mnr=r(C7t,"mbart"),C7t.forEach(t),Enr=r(wNe," \u2014 "),MQ=n(wNe,"A",{href:!0});var w7t=s(MQ);Cnr=r(w7t,"MBartForQuestionAnswering"),w7t.forEach(t),wnr=r(wNe," (mBART model)"),wNe.forEach(t),Anr=i(X),rM=n(X,"LI",{});var ANe=s(rM);uve=n(ANe,"STRONG",{});var A7t=s(uve);Lnr=r(A7t,"megatron-bert"),A7t.forEach(t),ynr=r(ANe," \u2014 "),EQ=n(ANe,"A",{href:!0});var L7t=s(EQ);xnr=r(L7t,"MegatronBertForQuestionAnswering"),L7t.forEach(t),$nr=r(ANe," (Megatron-BERT model)"),ANe.forEach(t),knr=i(X),tM=n(X,"LI",{});var LNe=s(tM);pve=n(LNe,"STRONG",{});var y7t=s(pve);Snr=r(y7t,"mobilebert"),y7t.forEach(t),Rnr=r(LNe," \u2014 "),CQ=n(LNe,"A",{href:!0});var x7t=s(CQ);Pnr=r(x7t,"MobileBertForQuestionAnswering"),x7t.forEach(t),Bnr=r(LNe," (MobileBERT model)"),LNe.forEach(t),Inr=i(X),aM=n(X,"LI",{});var yNe=s(aM);_ve=n(yNe,"STRONG",{});var $7t=s(_ve);Nnr=r($7t,"mpnet"),$7t.forEach(t),qnr=r(yNe," \u2014 "),wQ=n(yNe,"A",{href:!0});var k7t=s(wQ);jnr=r(k7t,"MPNetForQuestionAnswering"),k7t.forEach(t),Dnr=r(yNe," (MPNet model)"),yNe.forEach(t),Gnr=i(X),nM=n(X,"LI",{});var xNe=s(nM);bve=n(xNe,"STRONG",{});var S7t=s(bve);Onr=r(S7t,"mvp"),S7t.forEach(t),Vnr=r(xNe," \u2014 "),AQ=n(xNe,"A",{href:!0});var R7t=s(AQ);Xnr=r(R7t,"MvpForQuestionAnswering"),R7t.forEach(t),znr=r(xNe," (MVP model)"),xNe.forEach(t),Wnr=i(X),sM=n(X,"LI",{});var $Ne=s(sM);vve=n($Ne,"STRONG",{});var P7t=s(vve);Qnr=r(P7t,"nezha"),P7t.forEach(t),Hnr=r($Ne," \u2014 "),LQ=n($Ne,"A",{href:!0});var B7t=s(LQ);Unr=r(B7t,"NezhaForQuestionAnswering"),B7t.forEach(t),Jnr=r($Ne," (Nezha model)"),$Ne.forEach(t),Ynr=i(X),lM=n(X,"LI",{});var kNe=s(lM);Fve=n(kNe,"STRONG",{});var I7t=s(Fve);Knr=r(I7t,"nystromformer"),I7t.forEach(t),Znr=r(kNe," \u2014 "),yQ=n(kNe,"A",{href:!0});var N7t=s(yQ);esr=r(N7t,"NystromformerForQuestionAnswering"),N7t.forEach(t),osr=r(kNe," (Nystr\xF6mformer model)"),kNe.forEach(t),rsr=i(X),iM=n(X,"LI",{});var SNe=s(iM);Tve=n(SNe,"STRONG",{});var q7t=s(Tve);tsr=r(q7t,"qdqbert"),q7t.forEach(t),asr=r(SNe," \u2014 "),xQ=n(SNe,"A",{href:!0});var j7t=s(xQ);nsr=r(j7t,"QDQBertForQuestionAnswering"),j7t.forEach(t),ssr=r(SNe," (QDQBert model)"),SNe.forEach(t),lsr=i(X),dM=n(X,"LI",{});var RNe=s(dM);Mve=n(RNe,"STRONG",{});var D7t=s(Mve);isr=r(D7t,"reformer"),D7t.forEach(t),dsr=r(RNe," \u2014 "),$Q=n(RNe,"A",{href:!0});var G7t=s($Q);csr=r(G7t,"ReformerForQuestionAnswering"),G7t.forEach(t),msr=r(RNe," (Reformer model)"),RNe.forEach(t),fsr=i(X),cM=n(X,"LI",{});var PNe=s(cM);Eve=n(PNe,"STRONG",{});var O7t=s(Eve);gsr=r(O7t,"rembert"),O7t.forEach(t),hsr=r(PNe," \u2014 "),kQ=n(PNe,"A",{href:!0});var V7t=s(kQ);usr=r(V7t,"RemBertForQuestionAnswering"),V7t.forEach(t),psr=r(PNe," (RemBERT model)"),PNe.forEach(t),_sr=i(X),mM=n(X,"LI",{});var BNe=s(mM);Cve=n(BNe,"STRONG",{});var X7t=s(Cve);bsr=r(X7t,"roberta"),X7t.forEach(t),vsr=r(BNe," \u2014 "),SQ=n(BNe,"A",{href:!0});var z7t=s(SQ);Fsr=r(z7t,"RobertaForQuestionAnswering"),z7t.forEach(t),Tsr=r(BNe," (RoBERTa model)"),BNe.forEach(t),Msr=i(X),fM=n(X,"LI",{});var INe=s(fM);wve=n(INe,"STRONG",{});var W7t=s(wve);Esr=r(W7t,"roformer"),W7t.forEach(t),Csr=r(INe," \u2014 "),RQ=n(INe,"A",{href:!0});var Q7t=s(RQ);wsr=r(Q7t,"RoFormerForQuestionAnswering"),Q7t.forEach(t),Asr=r(INe," (RoFormer model)"),INe.forEach(t),Lsr=i(X),gM=n(X,"LI",{});var NNe=s(gM);Ave=n(NNe,"STRONG",{});var H7t=s(Ave);ysr=r(H7t,"splinter"),H7t.forEach(t),xsr=r(NNe," \u2014 "),PQ=n(NNe,"A",{href:!0});var U7t=s(PQ);$sr=r(U7t,"SplinterForQuestionAnswering"),U7t.forEach(t),ksr=r(NNe," (Splinter model)"),NNe.forEach(t),Ssr=i(X),hM=n(X,"LI",{});var qNe=s(hM);Lve=n(qNe,"STRONG",{});var J7t=s(Lve);Rsr=r(J7t,"squeezebert"),J7t.forEach(t),Psr=r(qNe," \u2014 "),BQ=n(qNe,"A",{href:!0});var Y7t=s(BQ);Bsr=r(Y7t,"SqueezeBertForQuestionAnswering"),Y7t.forEach(t),Isr=r(qNe," (SqueezeBERT model)"),qNe.forEach(t),Nsr=i(X),uM=n(X,"LI",{});var jNe=s(uM);yve=n(jNe,"STRONG",{});var K7t=s(yve);qsr=r(K7t,"xlm"),K7t.forEach(t),jsr=r(jNe," \u2014 "),IQ=n(jNe,"A",{href:!0});var Z7t=s(IQ);Dsr=r(Z7t,"XLMForQuestionAnsweringSimple"),Z7t.forEach(t),Gsr=r(jNe," (XLM model)"),jNe.forEach(t),Osr=i(X),pM=n(X,"LI",{});var DNe=s(pM);xve=n(DNe,"STRONG",{});var eLt=s(xve);Vsr=r(eLt,"xlm-roberta"),eLt.forEach(t),Xsr=r(DNe," \u2014 "),NQ=n(DNe,"A",{href:!0});var oLt=s(NQ);zsr=r(oLt,"XLMRobertaForQuestionAnswering"),oLt.forEach(t),Wsr=r(DNe," (XLM-RoBERTa model)"),DNe.forEach(t),Qsr=i(X),_M=n(X,"LI",{});var GNe=s(_M);$ve=n(GNe,"STRONG",{});var rLt=s($ve);Hsr=r(rLt,"xlm-roberta-xl"),rLt.forEach(t),Usr=r(GNe," \u2014 "),qQ=n(GNe,"A",{href:!0});var tLt=s(qQ);Jsr=r(tLt,"XLMRobertaXLForQuestionAnswering"),tLt.forEach(t),Ysr=r(GNe," (XLM-RoBERTa-XL model)"),GNe.forEach(t),Ksr=i(X),bM=n(X,"LI",{});var ONe=s(bM);kve=n(ONe,"STRONG",{});var aLt=s(kve);Zsr=r(aLt,"xlnet"),aLt.forEach(t),elr=r(ONe," \u2014 "),jQ=n(ONe,"A",{href:!0});var nLt=s(jQ);olr=r(nLt,"XLNetForQuestionAnsweringSimple"),nLt.forEach(t),rlr=r(ONe," (XLNet model)"),ONe.forEach(t),tlr=i(X),vM=n(X,"LI",{});var VNe=s(vM);Sve=n(VNe,"STRONG",{});var sLt=s(Sve);alr=r(sLt,"yoso"),sLt.forEach(t),nlr=r(VNe," \u2014 "),DQ=n(VNe,"A",{href:!0});var lLt=s(DQ);slr=r(lLt,"YosoForQuestionAnswering"),lLt.forEach(t),llr=r(VNe," (YOSO model)"),VNe.forEach(t),X.forEach(t),ilr=i(_a),FM=n(_a,"P",{});var XNe=s(FM);dlr=r(XNe,"The model is set in evaluation mode by default using "),Rve=n(XNe,"CODE",{});var iLt=s(Rve);clr=r(iLt,"model.eval()"),iLt.forEach(t),mlr=r(XNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pve=n(XNe,"CODE",{});var dLt=s(Pve);flr=r(dLt,"model.train()"),dLt.forEach(t),XNe.forEach(t),glr=i(_a),T(TM.$$.fragment,_a),_a.forEach(t),hl.forEach(t),Oze=i(m),Fd=n(m,"H2",{class:!0});var HQe=s(Fd);MM=n(HQe,"A",{id:!0,class:!0,href:!0});var cLt=s(MM);Bve=n(cLt,"SPAN",{});var mLt=s(Bve);T(V8.$$.fragment,mLt),mLt.forEach(t),cLt.forEach(t),hlr=i(HQe),Ive=n(HQe,"SPAN",{});var fLt=s(Ive);ulr=r(fLt,"AutoModelForTableQuestionAnswering"),fLt.forEach(t),HQe.forEach(t),Vze=i(m),Oo=n(m,"DIV",{class:!0});var ul=s(Oo);T(X8.$$.fragment,ul),plr=i(ul),Td=n(ul,"P",{});var Bte=s(Td);_lr=r(Bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),GQ=n(Bte,"A",{href:!0});var gLt=s(GQ);blr=r(gLt,"from_pretrained()"),gLt.forEach(t),vlr=r(Bte," class method or the "),OQ=n(Bte,"A",{href:!0});var hLt=s(OQ);Flr=r(hLt,"from_config()"),hLt.forEach(t),Tlr=r(Bte,` class
method.`),Bte.forEach(t),Mlr=i(ul),z8=n(ul,"P",{});var UQe=s(z8);Elr=r(UQe,"This class cannot be instantiated directly using "),Nve=n(UQe,"CODE",{});var uLt=s(Nve);Clr=r(uLt,"__init__()"),uLt.forEach(t),wlr=r(UQe," (throws an error)."),UQe.forEach(t),Alr=i(ul),bt=n(ul,"DIV",{class:!0});var X7=s(bt);T(W8.$$.fragment,X7),Llr=i(X7),qve=n(X7,"P",{});var pLt=s(qve);ylr=r(pLt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),pLt.forEach(t),xlr=i(X7),Md=n(X7,"P",{});var Ite=s(Md);$lr=r(Ite,`Note:
Loading a model from its configuration file does `),jve=n(Ite,"STRONG",{});var _Lt=s(jve);klr=r(_Lt,"not"),_Lt.forEach(t),Slr=r(Ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=n(Ite,"A",{href:!0});var bLt=s(VQ);Rlr=r(bLt,"from_pretrained()"),bLt.forEach(t),Plr=r(Ite," to load the model weights."),Ite.forEach(t),Blr=i(X7),T(EM.$$.fragment,X7),X7.forEach(t),Ilr=i(ul),lo=n(ul,"DIV",{class:!0});var ba=s(lo);T(Q8.$$.fragment,ba),Nlr=i(ba),Dve=n(ba,"P",{});var vLt=s(Dve);qlr=r(vLt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),vLt.forEach(t),jlr=i(ba),Wa=n(ba,"P",{});var z7=s(Wa);Dlr=r(z7,"The model class to instantiate is selected based on the "),Gve=n(z7,"CODE",{});var FLt=s(Gve);Glr=r(FLt,"model_type"),FLt.forEach(t),Olr=r(z7,` property of the config object (either
passed as an argument or loaded from `),Ove=n(z7,"CODE",{});var TLt=s(Ove);Vlr=r(TLt,"pretrained_model_name_or_path"),TLt.forEach(t),Xlr=r(z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=n(z7,"CODE",{});var MLt=s(Vve);zlr=r(MLt,"pretrained_model_name_or_path"),MLt.forEach(t),Wlr=r(z7,":"),z7.forEach(t),Qlr=i(ba),Xve=n(ba,"UL",{});var ELt=s(Xve);CM=n(ELt,"LI",{});var zNe=s(CM);zve=n(zNe,"STRONG",{});var CLt=s(zve);Hlr=r(CLt,"tapas"),CLt.forEach(t),Ulr=r(zNe," \u2014 "),XQ=n(zNe,"A",{href:!0});var wLt=s(XQ);Jlr=r(wLt,"TapasForQuestionAnswering"),wLt.forEach(t),Ylr=r(zNe," (TAPAS model)"),zNe.forEach(t),ELt.forEach(t),Klr=i(ba),wM=n(ba,"P",{});var WNe=s(wM);Zlr=r(WNe,"The model is set in evaluation mode by default using "),Wve=n(WNe,"CODE",{});var ALt=s(Wve);eir=r(ALt,"model.eval()"),ALt.forEach(t),oir=r(WNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qve=n(WNe,"CODE",{});var LLt=s(Qve);rir=r(LLt,"model.train()"),LLt.forEach(t),WNe.forEach(t),tir=i(ba),T(AM.$$.fragment,ba),ba.forEach(t),ul.forEach(t),Xze=i(m),Ed=n(m,"H2",{class:!0});var JQe=s(Ed);LM=n(JQe,"A",{id:!0,class:!0,href:!0});var yLt=s(LM);Hve=n(yLt,"SPAN",{});var xLt=s(Hve);T(H8.$$.fragment,xLt),xLt.forEach(t),yLt.forEach(t),air=i(JQe),Uve=n(JQe,"SPAN",{});var $Lt=s(Uve);nir=r($Lt,"AutoModelForImageClassification"),$Lt.forEach(t),JQe.forEach(t),zze=i(m),Vo=n(m,"DIV",{class:!0});var pl=s(Vo);T(U8.$$.fragment,pl),sir=i(pl),Cd=n(pl,"P",{});var Nte=s(Cd);lir=r(Nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zQ=n(Nte,"A",{href:!0});var kLt=s(zQ);iir=r(kLt,"from_pretrained()"),kLt.forEach(t),dir=r(Nte," class method or the "),WQ=n(Nte,"A",{href:!0});var SLt=s(WQ);cir=r(SLt,"from_config()"),SLt.forEach(t),mir=r(Nte,` class
method.`),Nte.forEach(t),fir=i(pl),J8=n(pl,"P",{});var YQe=s(J8);gir=r(YQe,"This class cannot be instantiated directly using "),Jve=n(YQe,"CODE",{});var RLt=s(Jve);hir=r(RLt,"__init__()"),RLt.forEach(t),uir=r(YQe," (throws an error)."),YQe.forEach(t),pir=i(pl),vt=n(pl,"DIV",{class:!0});var W7=s(vt);T(Y8.$$.fragment,W7),_ir=i(W7),Yve=n(W7,"P",{});var PLt=s(Yve);bir=r(PLt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),PLt.forEach(t),vir=i(W7),wd=n(W7,"P",{});var qte=s(wd);Fir=r(qte,`Note:
Loading a model from its configuration file does `),Kve=n(qte,"STRONG",{});var BLt=s(Kve);Tir=r(BLt,"not"),BLt.forEach(t),Mir=r(qte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=n(qte,"A",{href:!0});var ILt=s(QQ);Eir=r(ILt,"from_pretrained()"),ILt.forEach(t),Cir=r(qte," to load the model weights."),qte.forEach(t),wir=i(W7),T(yM.$$.fragment,W7),W7.forEach(t),Air=i(pl),io=n(pl,"DIV",{class:!0});var va=s(io);T(K8.$$.fragment,va),Lir=i(va),Zve=n(va,"P",{});var NLt=s(Zve);yir=r(NLt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),NLt.forEach(t),xir=i(va),Qa=n(va,"P",{});var Q7=s(Qa);$ir=r(Q7,"The model class to instantiate is selected based on the "),e1e=n(Q7,"CODE",{});var qLt=s(e1e);kir=r(qLt,"model_type"),qLt.forEach(t),Sir=r(Q7,` property of the config object (either
passed as an argument or loaded from `),o1e=n(Q7,"CODE",{});var jLt=s(o1e);Rir=r(jLt,"pretrained_model_name_or_path"),jLt.forEach(t),Pir=r(Q7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r1e=n(Q7,"CODE",{});var DLt=s(r1e);Bir=r(DLt,"pretrained_model_name_or_path"),DLt.forEach(t),Iir=r(Q7,":"),Q7.forEach(t),Nir=i(va),be=n(va,"UL",{});var Fe=s(be);xM=n(Fe,"LI",{});var QNe=s(xM);t1e=n(QNe,"STRONG",{});var GLt=s(t1e);qir=r(GLt,"beit"),GLt.forEach(t),jir=r(QNe," \u2014 "),HQ=n(QNe,"A",{href:!0});var OLt=s(HQ);Dir=r(OLt,"BeitForImageClassification"),OLt.forEach(t),Gir=r(QNe," (BEiT model)"),QNe.forEach(t),Oir=i(Fe),$M=n(Fe,"LI",{});var HNe=s($M);a1e=n(HNe,"STRONG",{});var VLt=s(a1e);Vir=r(VLt,"convnext"),VLt.forEach(t),Xir=r(HNe," \u2014 "),UQ=n(HNe,"A",{href:!0});var XLt=s(UQ);zir=r(XLt,"ConvNextForImageClassification"),XLt.forEach(t),Wir=r(HNe," (ConvNeXT model)"),HNe.forEach(t),Qir=i(Fe),kM=n(Fe,"LI",{});var UNe=s(kM);n1e=n(UNe,"STRONG",{});var zLt=s(n1e);Hir=r(zLt,"cvt"),zLt.forEach(t),Uir=r(UNe," \u2014 "),JQ=n(UNe,"A",{href:!0});var WLt=s(JQ);Jir=r(WLt,"CvtForImageClassification"),WLt.forEach(t),Yir=r(UNe," (CvT model)"),UNe.forEach(t),Kir=i(Fe),SM=n(Fe,"LI",{});var JNe=s(SM);s1e=n(JNe,"STRONG",{});var QLt=s(s1e);Zir=r(QLt,"data2vec-vision"),QLt.forEach(t),edr=r(JNe," \u2014 "),YQ=n(JNe,"A",{href:!0});var HLt=s(YQ);odr=r(HLt,"Data2VecVisionForImageClassification"),HLt.forEach(t),rdr=r(JNe," (Data2VecVision model)"),JNe.forEach(t),tdr=i(Fe),Ys=n(Fe,"LI",{});var JS=s(Ys);l1e=n(JS,"STRONG",{});var ULt=s(l1e);adr=r(ULt,"deit"),ULt.forEach(t),ndr=r(JS," \u2014 "),KQ=n(JS,"A",{href:!0});var JLt=s(KQ);sdr=r(JLt,"DeiTForImageClassification"),JLt.forEach(t),ldr=r(JS," or "),ZQ=n(JS,"A",{href:!0});var YLt=s(ZQ);idr=r(YLt,"DeiTForImageClassificationWithTeacher"),YLt.forEach(t),ddr=r(JS," (DeiT model)"),JS.forEach(t),cdr=i(Fe),RM=n(Fe,"LI",{});var YNe=s(RM);i1e=n(YNe,"STRONG",{});var KLt=s(i1e);mdr=r(KLt,"imagegpt"),KLt.forEach(t),fdr=r(YNe," \u2014 "),eH=n(YNe,"A",{href:!0});var ZLt=s(eH);gdr=r(ZLt,"ImageGPTForImageClassification"),ZLt.forEach(t),hdr=r(YNe," (ImageGPT model)"),YNe.forEach(t),udr=i(Fe),Ks=n(Fe,"LI",{});var YS=s(Ks);d1e=n(YS,"STRONG",{});var eyt=s(d1e);pdr=r(eyt,"levit"),eyt.forEach(t),_dr=r(YS," \u2014 "),oH=n(YS,"A",{href:!0});var oyt=s(oH);bdr=r(oyt,"LevitForImageClassification"),oyt.forEach(t),vdr=r(YS," or "),rH=n(YS,"A",{href:!0});var ryt=s(rH);Fdr=r(ryt,"LevitForImageClassificationWithTeacher"),ryt.forEach(t),Tdr=r(YS," (LeViT model)"),YS.forEach(t),Mdr=i(Fe),PM=n(Fe,"LI",{});var KNe=s(PM);c1e=n(KNe,"STRONG",{});var tyt=s(c1e);Edr=r(tyt,"mobilevit"),tyt.forEach(t),Cdr=r(KNe," \u2014 "),tH=n(KNe,"A",{href:!0});var ayt=s(tH);wdr=r(ayt,"MobileViTForImageClassification"),ayt.forEach(t),Adr=r(KNe," (MobileViT model)"),KNe.forEach(t),Ldr=i(Fe),Ft=n(Fe,"LI",{});var Pm=s(Ft);m1e=n(Pm,"STRONG",{});var nyt=s(m1e);ydr=r(nyt,"perceiver"),nyt.forEach(t),xdr=r(Pm," \u2014 "),aH=n(Pm,"A",{href:!0});var syt=s(aH);$dr=r(syt,"PerceiverForImageClassificationLearned"),syt.forEach(t),kdr=r(Pm," or "),nH=n(Pm,"A",{href:!0});var lyt=s(nH);Sdr=r(lyt,"PerceiverForImageClassificationFourier"),lyt.forEach(t),Rdr=r(Pm," or "),sH=n(Pm,"A",{href:!0});var iyt=s(sH);Pdr=r(iyt,"PerceiverForImageClassificationConvProcessing"),iyt.forEach(t),Bdr=r(Pm," (Perceiver model)"),Pm.forEach(t),Idr=i(Fe),BM=n(Fe,"LI",{});var ZNe=s(BM);f1e=n(ZNe,"STRONG",{});var dyt=s(f1e);Ndr=r(dyt,"poolformer"),dyt.forEach(t),qdr=r(ZNe," \u2014 "),lH=n(ZNe,"A",{href:!0});var cyt=s(lH);jdr=r(cyt,"PoolFormerForImageClassification"),cyt.forEach(t),Ddr=r(ZNe," (PoolFormer model)"),ZNe.forEach(t),Gdr=i(Fe),IM=n(Fe,"LI",{});var eqe=s(IM);g1e=n(eqe,"STRONG",{});var myt=s(g1e);Odr=r(myt,"regnet"),myt.forEach(t),Vdr=r(eqe," \u2014 "),iH=n(eqe,"A",{href:!0});var fyt=s(iH);Xdr=r(fyt,"RegNetForImageClassification"),fyt.forEach(t),zdr=r(eqe," (RegNet model)"),eqe.forEach(t),Wdr=i(Fe),NM=n(Fe,"LI",{});var oqe=s(NM);h1e=n(oqe,"STRONG",{});var gyt=s(h1e);Qdr=r(gyt,"resnet"),gyt.forEach(t),Hdr=r(oqe," \u2014 "),dH=n(oqe,"A",{href:!0});var hyt=s(dH);Udr=r(hyt,"ResNetForImageClassification"),hyt.forEach(t),Jdr=r(oqe," (ResNet model)"),oqe.forEach(t),Ydr=i(Fe),qM=n(Fe,"LI",{});var rqe=s(qM);u1e=n(rqe,"STRONG",{});var uyt=s(u1e);Kdr=r(uyt,"segformer"),uyt.forEach(t),Zdr=r(rqe," \u2014 "),cH=n(rqe,"A",{href:!0});var pyt=s(cH);ecr=r(pyt,"SegformerForImageClassification"),pyt.forEach(t),ocr=r(rqe," (SegFormer model)"),rqe.forEach(t),rcr=i(Fe),jM=n(Fe,"LI",{});var tqe=s(jM);p1e=n(tqe,"STRONG",{});var _yt=s(p1e);tcr=r(_yt,"swin"),_yt.forEach(t),acr=r(tqe," \u2014 "),mH=n(tqe,"A",{href:!0});var byt=s(mH);ncr=r(byt,"SwinForImageClassification"),byt.forEach(t),scr=r(tqe," (Swin Transformer model)"),tqe.forEach(t),lcr=i(Fe),DM=n(Fe,"LI",{});var aqe=s(DM);_1e=n(aqe,"STRONG",{});var vyt=s(_1e);icr=r(vyt,"swinv2"),vyt.forEach(t),dcr=r(aqe," \u2014 "),fH=n(aqe,"A",{href:!0});var Fyt=s(fH);ccr=r(Fyt,"Swinv2ForImageClassification"),Fyt.forEach(t),mcr=r(aqe," (Swin Transformer V2 model)"),aqe.forEach(t),fcr=i(Fe),GM=n(Fe,"LI",{});var nqe=s(GM);b1e=n(nqe,"STRONG",{});var Tyt=s(b1e);gcr=r(Tyt,"van"),Tyt.forEach(t),hcr=r(nqe," \u2014 "),gH=n(nqe,"A",{href:!0});var Myt=s(gH);ucr=r(Myt,"VanForImageClassification"),Myt.forEach(t),pcr=r(nqe," (VAN model)"),nqe.forEach(t),_cr=i(Fe),OM=n(Fe,"LI",{});var sqe=s(OM);v1e=n(sqe,"STRONG",{});var Eyt=s(v1e);bcr=r(Eyt,"vit"),Eyt.forEach(t),vcr=r(sqe," \u2014 "),hH=n(sqe,"A",{href:!0});var Cyt=s(hH);Fcr=r(Cyt,"ViTForImageClassification"),Cyt.forEach(t),Tcr=r(sqe," (ViT model)"),sqe.forEach(t),Fe.forEach(t),Mcr=i(va),VM=n(va,"P",{});var lqe=s(VM);Ecr=r(lqe,"The model is set in evaluation mode by default using "),F1e=n(lqe,"CODE",{});var wyt=s(F1e);Ccr=r(wyt,"model.eval()"),wyt.forEach(t),wcr=r(lqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T1e=n(lqe,"CODE",{});var Ayt=s(T1e);Acr=r(Ayt,"model.train()"),Ayt.forEach(t),lqe.forEach(t),Lcr=i(va),T(XM.$$.fragment,va),va.forEach(t),pl.forEach(t),Wze=i(m),Ad=n(m,"H2",{class:!0});var KQe=s(Ad);zM=n(KQe,"A",{id:!0,class:!0,href:!0});var Lyt=s(zM);M1e=n(Lyt,"SPAN",{});var yyt=s(M1e);T(Z8.$$.fragment,yyt),yyt.forEach(t),Lyt.forEach(t),ycr=i(KQe),E1e=n(KQe,"SPAN",{});var xyt=s(E1e);xcr=r(xyt,"AutoModelForVision2Seq"),xyt.forEach(t),KQe.forEach(t),Qze=i(m),Xo=n(m,"DIV",{class:!0});var _l=s(Xo);T(e9.$$.fragment,_l),$cr=i(_l),Ld=n(_l,"P",{});var jte=s(Ld);kcr=r(jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),uH=n(jte,"A",{href:!0});var $yt=s(uH);Scr=r($yt,"from_pretrained()"),$yt.forEach(t),Rcr=r(jte," class method or the "),pH=n(jte,"A",{href:!0});var kyt=s(pH);Pcr=r(kyt,"from_config()"),kyt.forEach(t),Bcr=r(jte,` class
method.`),jte.forEach(t),Icr=i(_l),o9=n(_l,"P",{});var ZQe=s(o9);Ncr=r(ZQe,"This class cannot be instantiated directly using "),C1e=n(ZQe,"CODE",{});var Syt=s(C1e);qcr=r(Syt,"__init__()"),Syt.forEach(t),jcr=r(ZQe," (throws an error)."),ZQe.forEach(t),Dcr=i(_l),Tt=n(_l,"DIV",{class:!0});var H7=s(Tt);T(r9.$$.fragment,H7),Gcr=i(H7),w1e=n(H7,"P",{});var Ryt=s(w1e);Ocr=r(Ryt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ryt.forEach(t),Vcr=i(H7),yd=n(H7,"P",{});var Dte=s(yd);Xcr=r(Dte,`Note:
Loading a model from its configuration file does `),A1e=n(Dte,"STRONG",{});var Pyt=s(A1e);zcr=r(Pyt,"not"),Pyt.forEach(t),Wcr=r(Dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=n(Dte,"A",{href:!0});var Byt=s(_H);Qcr=r(Byt,"from_pretrained()"),Byt.forEach(t),Hcr=r(Dte," to load the model weights."),Dte.forEach(t),Ucr=i(H7),T(WM.$$.fragment,H7),H7.forEach(t),Jcr=i(_l),co=n(_l,"DIV",{class:!0});var Fa=s(co);T(t9.$$.fragment,Fa),Ycr=i(Fa),L1e=n(Fa,"P",{});var Iyt=s(L1e);Kcr=r(Iyt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Iyt.forEach(t),Zcr=i(Fa),Ha=n(Fa,"P",{});var U7=s(Ha);emr=r(U7,"The model class to instantiate is selected based on the "),y1e=n(U7,"CODE",{});var Nyt=s(y1e);omr=r(Nyt,"model_type"),Nyt.forEach(t),rmr=r(U7,` property of the config object (either
passed as an argument or loaded from `),x1e=n(U7,"CODE",{});var qyt=s(x1e);tmr=r(qyt,"pretrained_model_name_or_path"),qyt.forEach(t),amr=r(U7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=n(U7,"CODE",{});var jyt=s($1e);nmr=r(jyt,"pretrained_model_name_or_path"),jyt.forEach(t),smr=r(U7,":"),U7.forEach(t),lmr=i(Fa),k1e=n(Fa,"UL",{});var Dyt=s(k1e);QM=n(Dyt,"LI",{});var iqe=s(QM);S1e=n(iqe,"STRONG",{});var Gyt=s(S1e);imr=r(Gyt,"vision-encoder-decoder"),Gyt.forEach(t),dmr=r(iqe," \u2014 "),bH=n(iqe,"A",{href:!0});var Oyt=s(bH);cmr=r(Oyt,"VisionEncoderDecoderModel"),Oyt.forEach(t),mmr=r(iqe," (Vision Encoder decoder model)"),iqe.forEach(t),Dyt.forEach(t),fmr=i(Fa),HM=n(Fa,"P",{});var dqe=s(HM);gmr=r(dqe,"The model is set in evaluation mode by default using "),R1e=n(dqe,"CODE",{});var Vyt=s(R1e);hmr=r(Vyt,"model.eval()"),Vyt.forEach(t),umr=r(dqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=n(dqe,"CODE",{});var Xyt=s(P1e);pmr=r(Xyt,"model.train()"),Xyt.forEach(t),dqe.forEach(t),_mr=i(Fa),T(UM.$$.fragment,Fa),Fa.forEach(t),_l.forEach(t),Hze=i(m),xd=n(m,"H2",{class:!0});var eHe=s(xd);JM=n(eHe,"A",{id:!0,class:!0,href:!0});var zyt=s(JM);B1e=n(zyt,"SPAN",{});var Wyt=s(B1e);T(a9.$$.fragment,Wyt),Wyt.forEach(t),zyt.forEach(t),bmr=i(eHe),I1e=n(eHe,"SPAN",{});var Qyt=s(I1e);vmr=r(Qyt,"AutoModelForVisualQuestionAnswering"),Qyt.forEach(t),eHe.forEach(t),Uze=i(m),zo=n(m,"DIV",{class:!0});var bl=s(zo);T(n9.$$.fragment,bl),Fmr=i(bl),$d=n(bl,"P",{});var Gte=s($d);Tmr=r(Gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),vH=n(Gte,"A",{href:!0});var Hyt=s(vH);Mmr=r(Hyt,"from_pretrained()"),Hyt.forEach(t),Emr=r(Gte," class method or the "),FH=n(Gte,"A",{href:!0});var Uyt=s(FH);Cmr=r(Uyt,"from_config()"),Uyt.forEach(t),wmr=r(Gte,` class
method.`),Gte.forEach(t),Amr=i(bl),s9=n(bl,"P",{});var oHe=s(s9);Lmr=r(oHe,"This class cannot be instantiated directly using "),N1e=n(oHe,"CODE",{});var Jyt=s(N1e);ymr=r(Jyt,"__init__()"),Jyt.forEach(t),xmr=r(oHe," (throws an error)."),oHe.forEach(t),$mr=i(bl),Mt=n(bl,"DIV",{class:!0});var J7=s(Mt);T(l9.$$.fragment,J7),kmr=i(J7),q1e=n(J7,"P",{});var Yyt=s(q1e);Smr=r(Yyt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Yyt.forEach(t),Rmr=i(J7),kd=n(J7,"P",{});var Ote=s(kd);Pmr=r(Ote,`Note:
Loading a model from its configuration file does `),j1e=n(Ote,"STRONG",{});var Kyt=s(j1e);Bmr=r(Kyt,"not"),Kyt.forEach(t),Imr=r(Ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=n(Ote,"A",{href:!0});var Zyt=s(TH);Nmr=r(Zyt,"from_pretrained()"),Zyt.forEach(t),qmr=r(Ote," to load the model weights."),Ote.forEach(t),jmr=i(J7),T(YM.$$.fragment,J7),J7.forEach(t),Dmr=i(bl),mo=n(bl,"DIV",{class:!0});var Ta=s(mo);T(i9.$$.fragment,Ta),Gmr=i(Ta),D1e=n(Ta,"P",{});var e8t=s(D1e);Omr=r(e8t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),e8t.forEach(t),Vmr=i(Ta),Ua=n(Ta,"P",{});var Y7=s(Ua);Xmr=r(Y7,"The model class to instantiate is selected based on the "),G1e=n(Y7,"CODE",{});var o8t=s(G1e);zmr=r(o8t,"model_type"),o8t.forEach(t),Wmr=r(Y7,` property of the config object (either
passed as an argument or loaded from `),O1e=n(Y7,"CODE",{});var r8t=s(O1e);Qmr=r(r8t,"pretrained_model_name_or_path"),r8t.forEach(t),Hmr=r(Y7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=n(Y7,"CODE",{});var t8t=s(V1e);Umr=r(t8t,"pretrained_model_name_or_path"),t8t.forEach(t),Jmr=r(Y7,":"),Y7.forEach(t),Ymr=i(Ta),X1e=n(Ta,"UL",{});var a8t=s(X1e);KM=n(a8t,"LI",{});var cqe=s(KM);z1e=n(cqe,"STRONG",{});var n8t=s(z1e);Kmr=r(n8t,"vilt"),n8t.forEach(t),Zmr=r(cqe," \u2014 "),MH=n(cqe,"A",{href:!0});var s8t=s(MH);efr=r(s8t,"ViltForQuestionAnswering"),s8t.forEach(t),ofr=r(cqe," (ViLT model)"),cqe.forEach(t),a8t.forEach(t),rfr=i(Ta),ZM=n(Ta,"P",{});var mqe=s(ZM);tfr=r(mqe,"The model is set in evaluation mode by default using "),W1e=n(mqe,"CODE",{});var l8t=s(W1e);afr=r(l8t,"model.eval()"),l8t.forEach(t),nfr=r(mqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q1e=n(mqe,"CODE",{});var i8t=s(Q1e);sfr=r(i8t,"model.train()"),i8t.forEach(t),mqe.forEach(t),lfr=i(Ta),T(e4.$$.fragment,Ta),Ta.forEach(t),bl.forEach(t),Jze=i(m),Sd=n(m,"H2",{class:!0});var rHe=s(Sd);o4=n(rHe,"A",{id:!0,class:!0,href:!0});var d8t=s(o4);H1e=n(d8t,"SPAN",{});var c8t=s(H1e);T(d9.$$.fragment,c8t),c8t.forEach(t),d8t.forEach(t),ifr=i(rHe),U1e=n(rHe,"SPAN",{});var m8t=s(U1e);dfr=r(m8t,"AutoModelForAudioClassification"),m8t.forEach(t),rHe.forEach(t),Yze=i(m),Wo=n(m,"DIV",{class:!0});var vl=s(Wo);T(c9.$$.fragment,vl),cfr=i(vl),Rd=n(vl,"P",{});var Vte=s(Rd);mfr=r(Vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),EH=n(Vte,"A",{href:!0});var f8t=s(EH);ffr=r(f8t,"from_pretrained()"),f8t.forEach(t),gfr=r(Vte," class method or the "),CH=n(Vte,"A",{href:!0});var g8t=s(CH);hfr=r(g8t,"from_config()"),g8t.forEach(t),ufr=r(Vte,` class
method.`),Vte.forEach(t),pfr=i(vl),m9=n(vl,"P",{});var tHe=s(m9);_fr=r(tHe,"This class cannot be instantiated directly using "),J1e=n(tHe,"CODE",{});var h8t=s(J1e);bfr=r(h8t,"__init__()"),h8t.forEach(t),vfr=r(tHe," (throws an error)."),tHe.forEach(t),Ffr=i(vl),Et=n(vl,"DIV",{class:!0});var K7=s(Et);T(f9.$$.fragment,K7),Tfr=i(K7),Y1e=n(K7,"P",{});var u8t=s(Y1e);Mfr=r(u8t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),u8t.forEach(t),Efr=i(K7),Pd=n(K7,"P",{});var Xte=s(Pd);Cfr=r(Xte,`Note:
Loading a model from its configuration file does `),K1e=n(Xte,"STRONG",{});var p8t=s(K1e);wfr=r(p8t,"not"),p8t.forEach(t),Afr=r(Xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(Xte,"A",{href:!0});var _8t=s(wH);Lfr=r(_8t,"from_pretrained()"),_8t.forEach(t),yfr=r(Xte," to load the model weights."),Xte.forEach(t),xfr=i(K7),T(r4.$$.fragment,K7),K7.forEach(t),$fr=i(vl),fo=n(vl,"DIV",{class:!0});var Ma=s(fo);T(g9.$$.fragment,Ma),kfr=i(Ma),Z1e=n(Ma,"P",{});var b8t=s(Z1e);Sfr=r(b8t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),b8t.forEach(t),Rfr=i(Ma),Ja=n(Ma,"P",{});var Z7=s(Ja);Pfr=r(Z7,"The model class to instantiate is selected based on the "),eFe=n(Z7,"CODE",{});var v8t=s(eFe);Bfr=r(v8t,"model_type"),v8t.forEach(t),Ifr=r(Z7,` property of the config object (either
passed as an argument or loaded from `),oFe=n(Z7,"CODE",{});var F8t=s(oFe);Nfr=r(F8t,"pretrained_model_name_or_path"),F8t.forEach(t),qfr=r(Z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=n(Z7,"CODE",{});var T8t=s(rFe);jfr=r(T8t,"pretrained_model_name_or_path"),T8t.forEach(t),Dfr=r(Z7,":"),Z7.forEach(t),Gfr=i(Ma),Pe=n(Ma,"UL",{});var We=s(Pe);t4=n(We,"LI",{});var fqe=s(t4);tFe=n(fqe,"STRONG",{});var M8t=s(tFe);Ofr=r(M8t,"data2vec-audio"),M8t.forEach(t),Vfr=r(fqe," \u2014 "),AH=n(fqe,"A",{href:!0});var E8t=s(AH);Xfr=r(E8t,"Data2VecAudioForSequenceClassification"),E8t.forEach(t),zfr=r(fqe," (Data2VecAudio model)"),fqe.forEach(t),Wfr=i(We),a4=n(We,"LI",{});var gqe=s(a4);aFe=n(gqe,"STRONG",{});var C8t=s(aFe);Qfr=r(C8t,"hubert"),C8t.forEach(t),Hfr=r(gqe," \u2014 "),LH=n(gqe,"A",{href:!0});var w8t=s(LH);Ufr=r(w8t,"HubertForSequenceClassification"),w8t.forEach(t),Jfr=r(gqe," (Hubert model)"),gqe.forEach(t),Yfr=i(We),n4=n(We,"LI",{});var hqe=s(n4);nFe=n(hqe,"STRONG",{});var A8t=s(nFe);Kfr=r(A8t,"sew"),A8t.forEach(t),Zfr=r(hqe," \u2014 "),yH=n(hqe,"A",{href:!0});var L8t=s(yH);egr=r(L8t,"SEWForSequenceClassification"),L8t.forEach(t),ogr=r(hqe," (SEW model)"),hqe.forEach(t),rgr=i(We),s4=n(We,"LI",{});var uqe=s(s4);sFe=n(uqe,"STRONG",{});var y8t=s(sFe);tgr=r(y8t,"sew-d"),y8t.forEach(t),agr=r(uqe," \u2014 "),xH=n(uqe,"A",{href:!0});var x8t=s(xH);ngr=r(x8t,"SEWDForSequenceClassification"),x8t.forEach(t),sgr=r(uqe," (SEW-D model)"),uqe.forEach(t),lgr=i(We),l4=n(We,"LI",{});var pqe=s(l4);lFe=n(pqe,"STRONG",{});var $8t=s(lFe);igr=r($8t,"unispeech"),$8t.forEach(t),dgr=r(pqe," \u2014 "),$H=n(pqe,"A",{href:!0});var k8t=s($H);cgr=r(k8t,"UniSpeechForSequenceClassification"),k8t.forEach(t),mgr=r(pqe," (UniSpeech model)"),pqe.forEach(t),fgr=i(We),i4=n(We,"LI",{});var _qe=s(i4);iFe=n(_qe,"STRONG",{});var S8t=s(iFe);ggr=r(S8t,"unispeech-sat"),S8t.forEach(t),hgr=r(_qe," \u2014 "),kH=n(_qe,"A",{href:!0});var R8t=s(kH);ugr=r(R8t,"UniSpeechSatForSequenceClassification"),R8t.forEach(t),pgr=r(_qe," (UniSpeechSat model)"),_qe.forEach(t),_gr=i(We),d4=n(We,"LI",{});var bqe=s(d4);dFe=n(bqe,"STRONG",{});var P8t=s(dFe);bgr=r(P8t,"wav2vec2"),P8t.forEach(t),vgr=r(bqe," \u2014 "),SH=n(bqe,"A",{href:!0});var B8t=s(SH);Fgr=r(B8t,"Wav2Vec2ForSequenceClassification"),B8t.forEach(t),Tgr=r(bqe," (Wav2Vec2 model)"),bqe.forEach(t),Mgr=i(We),c4=n(We,"LI",{});var vqe=s(c4);cFe=n(vqe,"STRONG",{});var I8t=s(cFe);Egr=r(I8t,"wav2vec2-conformer"),I8t.forEach(t),Cgr=r(vqe," \u2014 "),RH=n(vqe,"A",{href:!0});var N8t=s(RH);wgr=r(N8t,"Wav2Vec2ConformerForSequenceClassification"),N8t.forEach(t),Agr=r(vqe," (Wav2Vec2-Conformer model)"),vqe.forEach(t),Lgr=i(We),m4=n(We,"LI",{});var Fqe=s(m4);mFe=n(Fqe,"STRONG",{});var q8t=s(mFe);ygr=r(q8t,"wavlm"),q8t.forEach(t),xgr=r(Fqe," \u2014 "),PH=n(Fqe,"A",{href:!0});var j8t=s(PH);$gr=r(j8t,"WavLMForSequenceClassification"),j8t.forEach(t),kgr=r(Fqe," (WavLM model)"),Fqe.forEach(t),We.forEach(t),Sgr=i(Ma),f4=n(Ma,"P",{});var Tqe=s(f4);Rgr=r(Tqe,"The model is set in evaluation mode by default using "),fFe=n(Tqe,"CODE",{});var D8t=s(fFe);Pgr=r(D8t,"model.eval()"),D8t.forEach(t),Bgr=r(Tqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gFe=n(Tqe,"CODE",{});var G8t=s(gFe);Igr=r(G8t,"model.train()"),G8t.forEach(t),Tqe.forEach(t),Ngr=i(Ma),T(g4.$$.fragment,Ma),Ma.forEach(t),vl.forEach(t),Kze=i(m),Bd=n(m,"H2",{class:!0});var aHe=s(Bd);h4=n(aHe,"A",{id:!0,class:!0,href:!0});var O8t=s(h4);hFe=n(O8t,"SPAN",{});var V8t=s(hFe);T(h9.$$.fragment,V8t),V8t.forEach(t),O8t.forEach(t),qgr=i(aHe),uFe=n(aHe,"SPAN",{});var X8t=s(uFe);jgr=r(X8t,"AutoModelForAudioFrameClassification"),X8t.forEach(t),aHe.forEach(t),Zze=i(m),Qo=n(m,"DIV",{class:!0});var Fl=s(Qo);T(u9.$$.fragment,Fl),Dgr=i(Fl),Id=n(Fl,"P",{});var zte=s(Id);Ggr=r(zte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),BH=n(zte,"A",{href:!0});var z8t=s(BH);Ogr=r(z8t,"from_pretrained()"),z8t.forEach(t),Vgr=r(zte," class method or the "),IH=n(zte,"A",{href:!0});var W8t=s(IH);Xgr=r(W8t,"from_config()"),W8t.forEach(t),zgr=r(zte,` class
method.`),zte.forEach(t),Wgr=i(Fl),p9=n(Fl,"P",{});var nHe=s(p9);Qgr=r(nHe,"This class cannot be instantiated directly using "),pFe=n(nHe,"CODE",{});var Q8t=s(pFe);Hgr=r(Q8t,"__init__()"),Q8t.forEach(t),Ugr=r(nHe," (throws an error)."),nHe.forEach(t),Jgr=i(Fl),Ct=n(Fl,"DIV",{class:!0});var eL=s(Ct);T(_9.$$.fragment,eL),Ygr=i(eL),_Fe=n(eL,"P",{});var H8t=s(_Fe);Kgr=r(H8t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),H8t.forEach(t),Zgr=i(eL),Nd=n(eL,"P",{});var Wte=s(Nd);ehr=r(Wte,`Note:
Loading a model from its configuration file does `),bFe=n(Wte,"STRONG",{});var U8t=s(bFe);ohr=r(U8t,"not"),U8t.forEach(t),rhr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(Wte,"A",{href:!0});var J8t=s(NH);thr=r(J8t,"from_pretrained()"),J8t.forEach(t),ahr=r(Wte," to load the model weights."),Wte.forEach(t),nhr=i(eL),T(u4.$$.fragment,eL),eL.forEach(t),shr=i(Fl),go=n(Fl,"DIV",{class:!0});var Ea=s(go);T(b9.$$.fragment,Ea),lhr=i(Ea),vFe=n(Ea,"P",{});var Y8t=s(vFe);ihr=r(Y8t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Y8t.forEach(t),dhr=i(Ea),Ya=n(Ea,"P",{});var oL=s(Ya);chr=r(oL,"The model class to instantiate is selected based on the "),FFe=n(oL,"CODE",{});var K8t=s(FFe);mhr=r(K8t,"model_type"),K8t.forEach(t),fhr=r(oL,` property of the config object (either
passed as an argument or loaded from `),TFe=n(oL,"CODE",{});var Z8t=s(TFe);ghr=r(Z8t,"pretrained_model_name_or_path"),Z8t.forEach(t),hhr=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=n(oL,"CODE",{});var e9t=s(MFe);uhr=r(e9t,"pretrained_model_name_or_path"),e9t.forEach(t),phr=r(oL,":"),oL.forEach(t),_hr=i(Ea),rt=n(Ea,"UL",{});var Tl=s(rt);p4=n(Tl,"LI",{});var Mqe=s(p4);EFe=n(Mqe,"STRONG",{});var o9t=s(EFe);bhr=r(o9t,"data2vec-audio"),o9t.forEach(t),vhr=r(Mqe," \u2014 "),qH=n(Mqe,"A",{href:!0});var r9t=s(qH);Fhr=r(r9t,"Data2VecAudioForAudioFrameClassification"),r9t.forEach(t),Thr=r(Mqe," (Data2VecAudio model)"),Mqe.forEach(t),Mhr=i(Tl),_4=n(Tl,"LI",{});var Eqe=s(_4);CFe=n(Eqe,"STRONG",{});var t9t=s(CFe);Ehr=r(t9t,"unispeech-sat"),t9t.forEach(t),Chr=r(Eqe," \u2014 "),jH=n(Eqe,"A",{href:!0});var a9t=s(jH);whr=r(a9t,"UniSpeechSatForAudioFrameClassification"),a9t.forEach(t),Ahr=r(Eqe," (UniSpeechSat model)"),Eqe.forEach(t),Lhr=i(Tl),b4=n(Tl,"LI",{});var Cqe=s(b4);wFe=n(Cqe,"STRONG",{});var n9t=s(wFe);yhr=r(n9t,"wav2vec2"),n9t.forEach(t),xhr=r(Cqe," \u2014 "),DH=n(Cqe,"A",{href:!0});var s9t=s(DH);$hr=r(s9t,"Wav2Vec2ForAudioFrameClassification"),s9t.forEach(t),khr=r(Cqe," (Wav2Vec2 model)"),Cqe.forEach(t),Shr=i(Tl),v4=n(Tl,"LI",{});var wqe=s(v4);AFe=n(wqe,"STRONG",{});var l9t=s(AFe);Rhr=r(l9t,"wav2vec2-conformer"),l9t.forEach(t),Phr=r(wqe," \u2014 "),GH=n(wqe,"A",{href:!0});var i9t=s(GH);Bhr=r(i9t,"Wav2Vec2ConformerForAudioFrameClassification"),i9t.forEach(t),Ihr=r(wqe," (Wav2Vec2-Conformer model)"),wqe.forEach(t),Nhr=i(Tl),F4=n(Tl,"LI",{});var Aqe=s(F4);LFe=n(Aqe,"STRONG",{});var d9t=s(LFe);qhr=r(d9t,"wavlm"),d9t.forEach(t),jhr=r(Aqe," \u2014 "),OH=n(Aqe,"A",{href:!0});var c9t=s(OH);Dhr=r(c9t,"WavLMForAudioFrameClassification"),c9t.forEach(t),Ghr=r(Aqe," (WavLM model)"),Aqe.forEach(t),Tl.forEach(t),Ohr=i(Ea),T4=n(Ea,"P",{});var Lqe=s(T4);Vhr=r(Lqe,"The model is set in evaluation mode by default using "),yFe=n(Lqe,"CODE",{});var m9t=s(yFe);Xhr=r(m9t,"model.eval()"),m9t.forEach(t),zhr=r(Lqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xFe=n(Lqe,"CODE",{});var f9t=s(xFe);Whr=r(f9t,"model.train()"),f9t.forEach(t),Lqe.forEach(t),Qhr=i(Ea),T(M4.$$.fragment,Ea),Ea.forEach(t),Fl.forEach(t),eWe=i(m),qd=n(m,"H2",{class:!0});var sHe=s(qd);E4=n(sHe,"A",{id:!0,class:!0,href:!0});var g9t=s(E4);$Fe=n(g9t,"SPAN",{});var h9t=s($Fe);T(v9.$$.fragment,h9t),h9t.forEach(t),g9t.forEach(t),Hhr=i(sHe),kFe=n(sHe,"SPAN",{});var u9t=s(kFe);Uhr=r(u9t,"AutoModelForCTC"),u9t.forEach(t),sHe.forEach(t),oWe=i(m),Ho=n(m,"DIV",{class:!0});var Ml=s(Ho);T(F9.$$.fragment,Ml),Jhr=i(Ml),jd=n(Ml,"P",{});var Qte=s(jd);Yhr=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),VH=n(Qte,"A",{href:!0});var p9t=s(VH);Khr=r(p9t,"from_pretrained()"),p9t.forEach(t),Zhr=r(Qte," class method or the "),XH=n(Qte,"A",{href:!0});var _9t=s(XH);eur=r(_9t,"from_config()"),_9t.forEach(t),our=r(Qte,` class
method.`),Qte.forEach(t),rur=i(Ml),T9=n(Ml,"P",{});var lHe=s(T9);tur=r(lHe,"This class cannot be instantiated directly using "),SFe=n(lHe,"CODE",{});var b9t=s(SFe);aur=r(b9t,"__init__()"),b9t.forEach(t),nur=r(lHe," (throws an error)."),lHe.forEach(t),sur=i(Ml),wt=n(Ml,"DIV",{class:!0});var rL=s(wt);T(M9.$$.fragment,rL),lur=i(rL),RFe=n(rL,"P",{});var v9t=s(RFe);iur=r(v9t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),v9t.forEach(t),dur=i(rL),Dd=n(rL,"P",{});var Hte=s(Dd);cur=r(Hte,`Note:
Loading a model from its configuration file does `),PFe=n(Hte,"STRONG",{});var F9t=s(PFe);mur=r(F9t,"not"),F9t.forEach(t),fur=r(Hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=n(Hte,"A",{href:!0});var T9t=s(zH);gur=r(T9t,"from_pretrained()"),T9t.forEach(t),hur=r(Hte," to load the model weights."),Hte.forEach(t),uur=i(rL),T(C4.$$.fragment,rL),rL.forEach(t),pur=i(Ml),ho=n(Ml,"DIV",{class:!0});var Ca=s(ho);T(E9.$$.fragment,Ca),_ur=i(Ca),BFe=n(Ca,"P",{});var M9t=s(BFe);bur=r(M9t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),M9t.forEach(t),vur=i(Ca),Ka=n(Ca,"P",{});var tL=s(Ka);Fur=r(tL,"The model class to instantiate is selected based on the "),IFe=n(tL,"CODE",{});var E9t=s(IFe);Tur=r(E9t,"model_type"),E9t.forEach(t),Mur=r(tL,` property of the config object (either
passed as an argument or loaded from `),NFe=n(tL,"CODE",{});var C9t=s(NFe);Eur=r(C9t,"pretrained_model_name_or_path"),C9t.forEach(t),Cur=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=n(tL,"CODE",{});var w9t=s(qFe);wur=r(w9t,"pretrained_model_name_or_path"),w9t.forEach(t),Aur=r(tL,":"),tL.forEach(t),Lur=i(Ca),Le=n(Ca,"UL",{});var Be=s(Le);w4=n(Be,"LI",{});var yqe=s(w4);jFe=n(yqe,"STRONG",{});var A9t=s(jFe);yur=r(A9t,"data2vec-audio"),A9t.forEach(t),xur=r(yqe," \u2014 "),WH=n(yqe,"A",{href:!0});var L9t=s(WH);$ur=r(L9t,"Data2VecAudioForCTC"),L9t.forEach(t),kur=r(yqe," (Data2VecAudio model)"),yqe.forEach(t),Sur=i(Be),A4=n(Be,"LI",{});var xqe=s(A4);DFe=n(xqe,"STRONG",{});var y9t=s(DFe);Rur=r(y9t,"hubert"),y9t.forEach(t),Pur=r(xqe," \u2014 "),QH=n(xqe,"A",{href:!0});var x9t=s(QH);Bur=r(x9t,"HubertForCTC"),x9t.forEach(t),Iur=r(xqe," (Hubert model)"),xqe.forEach(t),Nur=i(Be),L4=n(Be,"LI",{});var $qe=s(L4);GFe=n($qe,"STRONG",{});var $9t=s(GFe);qur=r($9t,"mctct"),$9t.forEach(t),jur=r($qe," \u2014 "),HH=n($qe,"A",{href:!0});var k9t=s(HH);Dur=r(k9t,"MCTCTForCTC"),k9t.forEach(t),Gur=r($qe," (M-CTC-T model)"),$qe.forEach(t),Our=i(Be),y4=n(Be,"LI",{});var kqe=s(y4);OFe=n(kqe,"STRONG",{});var S9t=s(OFe);Vur=r(S9t,"sew"),S9t.forEach(t),Xur=r(kqe," \u2014 "),UH=n(kqe,"A",{href:!0});var R9t=s(UH);zur=r(R9t,"SEWForCTC"),R9t.forEach(t),Wur=r(kqe," (SEW model)"),kqe.forEach(t),Qur=i(Be),x4=n(Be,"LI",{});var Sqe=s(x4);VFe=n(Sqe,"STRONG",{});var P9t=s(VFe);Hur=r(P9t,"sew-d"),P9t.forEach(t),Uur=r(Sqe," \u2014 "),JH=n(Sqe,"A",{href:!0});var B9t=s(JH);Jur=r(B9t,"SEWDForCTC"),B9t.forEach(t),Yur=r(Sqe," (SEW-D model)"),Sqe.forEach(t),Kur=i(Be),$4=n(Be,"LI",{});var Rqe=s($4);XFe=n(Rqe,"STRONG",{});var I9t=s(XFe);Zur=r(I9t,"unispeech"),I9t.forEach(t),epr=r(Rqe," \u2014 "),YH=n(Rqe,"A",{href:!0});var N9t=s(YH);opr=r(N9t,"UniSpeechForCTC"),N9t.forEach(t),rpr=r(Rqe," (UniSpeech model)"),Rqe.forEach(t),tpr=i(Be),k4=n(Be,"LI",{});var Pqe=s(k4);zFe=n(Pqe,"STRONG",{});var q9t=s(zFe);apr=r(q9t,"unispeech-sat"),q9t.forEach(t),npr=r(Pqe," \u2014 "),KH=n(Pqe,"A",{href:!0});var j9t=s(KH);spr=r(j9t,"UniSpeechSatForCTC"),j9t.forEach(t),lpr=r(Pqe," (UniSpeechSat model)"),Pqe.forEach(t),ipr=i(Be),S4=n(Be,"LI",{});var Bqe=s(S4);WFe=n(Bqe,"STRONG",{});var D9t=s(WFe);dpr=r(D9t,"wav2vec2"),D9t.forEach(t),cpr=r(Bqe," \u2014 "),ZH=n(Bqe,"A",{href:!0});var G9t=s(ZH);mpr=r(G9t,"Wav2Vec2ForCTC"),G9t.forEach(t),fpr=r(Bqe," (Wav2Vec2 model)"),Bqe.forEach(t),gpr=i(Be),R4=n(Be,"LI",{});var Iqe=s(R4);QFe=n(Iqe,"STRONG",{});var O9t=s(QFe);hpr=r(O9t,"wav2vec2-conformer"),O9t.forEach(t),upr=r(Iqe," \u2014 "),eU=n(Iqe,"A",{href:!0});var V9t=s(eU);ppr=r(V9t,"Wav2Vec2ConformerForCTC"),V9t.forEach(t),_pr=r(Iqe," (Wav2Vec2-Conformer model)"),Iqe.forEach(t),bpr=i(Be),P4=n(Be,"LI",{});var Nqe=s(P4);HFe=n(Nqe,"STRONG",{});var X9t=s(HFe);vpr=r(X9t,"wavlm"),X9t.forEach(t),Fpr=r(Nqe," \u2014 "),oU=n(Nqe,"A",{href:!0});var z9t=s(oU);Tpr=r(z9t,"WavLMForCTC"),z9t.forEach(t),Mpr=r(Nqe," (WavLM model)"),Nqe.forEach(t),Be.forEach(t),Epr=i(Ca),B4=n(Ca,"P",{});var qqe=s(B4);Cpr=r(qqe,"The model is set in evaluation mode by default using "),UFe=n(qqe,"CODE",{});var W9t=s(UFe);wpr=r(W9t,"model.eval()"),W9t.forEach(t),Apr=r(qqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),JFe=n(qqe,"CODE",{});var Q9t=s(JFe);Lpr=r(Q9t,"model.train()"),Q9t.forEach(t),qqe.forEach(t),ypr=i(Ca),T(I4.$$.fragment,Ca),Ca.forEach(t),Ml.forEach(t),rWe=i(m),Gd=n(m,"H2",{class:!0});var iHe=s(Gd);N4=n(iHe,"A",{id:!0,class:!0,href:!0});var H9t=s(N4);YFe=n(H9t,"SPAN",{});var U9t=s(YFe);T(C9.$$.fragment,U9t),U9t.forEach(t),H9t.forEach(t),xpr=i(iHe),KFe=n(iHe,"SPAN",{});var J9t=s(KFe);$pr=r(J9t,"AutoModelForSpeechSeq2Seq"),J9t.forEach(t),iHe.forEach(t),tWe=i(m),Uo=n(m,"DIV",{class:!0});var El=s(Uo);T(w9.$$.fragment,El),kpr=i(El),Od=n(El,"P",{});var Ute=s(Od);Spr=r(Ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),rU=n(Ute,"A",{href:!0});var Y9t=s(rU);Rpr=r(Y9t,"from_pretrained()"),Y9t.forEach(t),Ppr=r(Ute," class method or the "),tU=n(Ute,"A",{href:!0});var K9t=s(tU);Bpr=r(K9t,"from_config()"),K9t.forEach(t),Ipr=r(Ute,` class
method.`),Ute.forEach(t),Npr=i(El),A9=n(El,"P",{});var dHe=s(A9);qpr=r(dHe,"This class cannot be instantiated directly using "),ZFe=n(dHe,"CODE",{});var Z9t=s(ZFe);jpr=r(Z9t,"__init__()"),Z9t.forEach(t),Dpr=r(dHe," (throws an error)."),dHe.forEach(t),Gpr=i(El),At=n(El,"DIV",{class:!0});var aL=s(At);T(L9.$$.fragment,aL),Opr=i(aL),eTe=n(aL,"P",{});var ext=s(eTe);Vpr=r(ext,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ext.forEach(t),Xpr=i(aL),Vd=n(aL,"P",{});var Jte=s(Vd);zpr=r(Jte,`Note:
Loading a model from its configuration file does `),oTe=n(Jte,"STRONG",{});var oxt=s(oTe);Wpr=r(oxt,"not"),oxt.forEach(t),Qpr=r(Jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=n(Jte,"A",{href:!0});var rxt=s(aU);Hpr=r(rxt,"from_pretrained()"),rxt.forEach(t),Upr=r(Jte," to load the model weights."),Jte.forEach(t),Jpr=i(aL),T(q4.$$.fragment,aL),aL.forEach(t),Ypr=i(El),uo=n(El,"DIV",{class:!0});var wa=s(uo);T(y9.$$.fragment,wa),Kpr=i(wa),rTe=n(wa,"P",{});var txt=s(rTe);Zpr=r(txt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),txt.forEach(t),e_r=i(wa),Za=n(wa,"P",{});var nL=s(Za);o_r=r(nL,"The model class to instantiate is selected based on the "),tTe=n(nL,"CODE",{});var axt=s(tTe);r_r=r(axt,"model_type"),axt.forEach(t),t_r=r(nL,` property of the config object (either
passed as an argument or loaded from `),aTe=n(nL,"CODE",{});var nxt=s(aTe);a_r=r(nxt,"pretrained_model_name_or_path"),nxt.forEach(t),n_r=r(nL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=n(nL,"CODE",{});var sxt=s(nTe);s_r=r(sxt,"pretrained_model_name_or_path"),sxt.forEach(t),l_r=r(nL,":"),nL.forEach(t),i_r=i(wa),x9=n(wa,"UL",{});var cHe=s(x9);j4=n(cHe,"LI",{});var jqe=s(j4);sTe=n(jqe,"STRONG",{});var lxt=s(sTe);d_r=r(lxt,"speech-encoder-decoder"),lxt.forEach(t),c_r=r(jqe," \u2014 "),nU=n(jqe,"A",{href:!0});var ixt=s(nU);m_r=r(ixt,"SpeechEncoderDecoderModel"),ixt.forEach(t),f_r=r(jqe," (Speech Encoder decoder model)"),jqe.forEach(t),g_r=i(cHe),D4=n(cHe,"LI",{});var Dqe=s(D4);lTe=n(Dqe,"STRONG",{});var dxt=s(lTe);h_r=r(dxt,"speech_to_text"),dxt.forEach(t),u_r=r(Dqe," \u2014 "),sU=n(Dqe,"A",{href:!0});var cxt=s(sU);p_r=r(cxt,"Speech2TextForConditionalGeneration"),cxt.forEach(t),__r=r(Dqe," (Speech2Text model)"),Dqe.forEach(t),cHe.forEach(t),b_r=i(wa),G4=n(wa,"P",{});var Gqe=s(G4);v_r=r(Gqe,"The model is set in evaluation mode by default using "),iTe=n(Gqe,"CODE",{});var mxt=s(iTe);F_r=r(mxt,"model.eval()"),mxt.forEach(t),T_r=r(Gqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dTe=n(Gqe,"CODE",{});var fxt=s(dTe);M_r=r(fxt,"model.train()"),fxt.forEach(t),Gqe.forEach(t),E_r=i(wa),T(O4.$$.fragment,wa),wa.forEach(t),El.forEach(t),aWe=i(m),Xd=n(m,"H2",{class:!0});var mHe=s(Xd);V4=n(mHe,"A",{id:!0,class:!0,href:!0});var gxt=s(V4);cTe=n(gxt,"SPAN",{});var hxt=s(cTe);T($9.$$.fragment,hxt),hxt.forEach(t),gxt.forEach(t),C_r=i(mHe),mTe=n(mHe,"SPAN",{});var uxt=s(mTe);w_r=r(uxt,"AutoModelForAudioXVector"),uxt.forEach(t),mHe.forEach(t),nWe=i(m),Jo=n(m,"DIV",{class:!0});var Cl=s(Jo);T(k9.$$.fragment,Cl),A_r=i(Cl),zd=n(Cl,"P",{});var Yte=s(zd);L_r=r(Yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),lU=n(Yte,"A",{href:!0});var pxt=s(lU);y_r=r(pxt,"from_pretrained()"),pxt.forEach(t),x_r=r(Yte," class method or the "),iU=n(Yte,"A",{href:!0});var _xt=s(iU);$_r=r(_xt,"from_config()"),_xt.forEach(t),k_r=r(Yte,` class
method.`),Yte.forEach(t),S_r=i(Cl),S9=n(Cl,"P",{});var fHe=s(S9);R_r=r(fHe,"This class cannot be instantiated directly using "),fTe=n(fHe,"CODE",{});var bxt=s(fTe);P_r=r(bxt,"__init__()"),bxt.forEach(t),B_r=r(fHe," (throws an error)."),fHe.forEach(t),I_r=i(Cl),Lt=n(Cl,"DIV",{class:!0});var sL=s(Lt);T(R9.$$.fragment,sL),N_r=i(sL),gTe=n(sL,"P",{});var vxt=s(gTe);q_r=r(vxt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),vxt.forEach(t),j_r=i(sL),Wd=n(sL,"P",{});var Kte=s(Wd);D_r=r(Kte,`Note:
Loading a model from its configuration file does `),hTe=n(Kte,"STRONG",{});var Fxt=s(hTe);G_r=r(Fxt,"not"),Fxt.forEach(t),O_r=r(Kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=n(Kte,"A",{href:!0});var Txt=s(dU);V_r=r(Txt,"from_pretrained()"),Txt.forEach(t),X_r=r(Kte," to load the model weights."),Kte.forEach(t),z_r=i(sL),T(X4.$$.fragment,sL),sL.forEach(t),W_r=i(Cl),po=n(Cl,"DIV",{class:!0});var Aa=s(po);T(P9.$$.fragment,Aa),Q_r=i(Aa),uTe=n(Aa,"P",{});var Mxt=s(uTe);H_r=r(Mxt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Mxt.forEach(t),U_r=i(Aa),en=n(Aa,"P",{});var lL=s(en);J_r=r(lL,"The model class to instantiate is selected based on the "),pTe=n(lL,"CODE",{});var Ext=s(pTe);Y_r=r(Ext,"model_type"),Ext.forEach(t),K_r=r(lL,` property of the config object (either
passed as an argument or loaded from `),_Te=n(lL,"CODE",{});var Cxt=s(_Te);Z_r=r(Cxt,"pretrained_model_name_or_path"),Cxt.forEach(t),e2r=r(lL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=n(lL,"CODE",{});var wxt=s(bTe);o2r=r(wxt,"pretrained_model_name_or_path"),wxt.forEach(t),r2r=r(lL,":"),lL.forEach(t),t2r=i(Aa),tt=n(Aa,"UL",{});var wl=s(tt);z4=n(wl,"LI",{});var Oqe=s(z4);vTe=n(Oqe,"STRONG",{});var Axt=s(vTe);a2r=r(Axt,"data2vec-audio"),Axt.forEach(t),n2r=r(Oqe," \u2014 "),cU=n(Oqe,"A",{href:!0});var Lxt=s(cU);s2r=r(Lxt,"Data2VecAudioForXVector"),Lxt.forEach(t),l2r=r(Oqe," (Data2VecAudio model)"),Oqe.forEach(t),i2r=i(wl),W4=n(wl,"LI",{});var Vqe=s(W4);FTe=n(Vqe,"STRONG",{});var yxt=s(FTe);d2r=r(yxt,"unispeech-sat"),yxt.forEach(t),c2r=r(Vqe," \u2014 "),mU=n(Vqe,"A",{href:!0});var xxt=s(mU);m2r=r(xxt,"UniSpeechSatForXVector"),xxt.forEach(t),f2r=r(Vqe," (UniSpeechSat model)"),Vqe.forEach(t),g2r=i(wl),Q4=n(wl,"LI",{});var Xqe=s(Q4);TTe=n(Xqe,"STRONG",{});var $xt=s(TTe);h2r=r($xt,"wav2vec2"),$xt.forEach(t),u2r=r(Xqe," \u2014 "),fU=n(Xqe,"A",{href:!0});var kxt=s(fU);p2r=r(kxt,"Wav2Vec2ForXVector"),kxt.forEach(t),_2r=r(Xqe," (Wav2Vec2 model)"),Xqe.forEach(t),b2r=i(wl),H4=n(wl,"LI",{});var zqe=s(H4);MTe=n(zqe,"STRONG",{});var Sxt=s(MTe);v2r=r(Sxt,"wav2vec2-conformer"),Sxt.forEach(t),F2r=r(zqe," \u2014 "),gU=n(zqe,"A",{href:!0});var Rxt=s(gU);T2r=r(Rxt,"Wav2Vec2ConformerForXVector"),Rxt.forEach(t),M2r=r(zqe," (Wav2Vec2-Conformer model)"),zqe.forEach(t),E2r=i(wl),U4=n(wl,"LI",{});var Wqe=s(U4);ETe=n(Wqe,"STRONG",{});var Pxt=s(ETe);C2r=r(Pxt,"wavlm"),Pxt.forEach(t),w2r=r(Wqe," \u2014 "),hU=n(Wqe,"A",{href:!0});var Bxt=s(hU);A2r=r(Bxt,"WavLMForXVector"),Bxt.forEach(t),L2r=r(Wqe," (WavLM model)"),Wqe.forEach(t),wl.forEach(t),y2r=i(Aa),J4=n(Aa,"P",{});var Qqe=s(J4);x2r=r(Qqe,"The model is set in evaluation mode by default using "),CTe=n(Qqe,"CODE",{});var Ixt=s(CTe);$2r=r(Ixt,"model.eval()"),Ixt.forEach(t),k2r=r(Qqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wTe=n(Qqe,"CODE",{});var Nxt=s(wTe);S2r=r(Nxt,"model.train()"),Nxt.forEach(t),Qqe.forEach(t),R2r=i(Aa),T(Y4.$$.fragment,Aa),Aa.forEach(t),Cl.forEach(t),sWe=i(m),Qd=n(m,"H2",{class:!0});var gHe=s(Qd);K4=n(gHe,"A",{id:!0,class:!0,href:!0});var qxt=s(K4);ATe=n(qxt,"SPAN",{});var jxt=s(ATe);T(B9.$$.fragment,jxt),jxt.forEach(t),qxt.forEach(t),P2r=i(gHe),LTe=n(gHe,"SPAN",{});var Dxt=s(LTe);B2r=r(Dxt,"AutoModelForMaskedImageModeling"),Dxt.forEach(t),gHe.forEach(t),lWe=i(m),Yo=n(m,"DIV",{class:!0});var Al=s(Yo);T(I9.$$.fragment,Al),I2r=i(Al),Hd=n(Al,"P",{});var Zte=s(Hd);N2r=r(Zte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),uU=n(Zte,"A",{href:!0});var Gxt=s(uU);q2r=r(Gxt,"from_pretrained()"),Gxt.forEach(t),j2r=r(Zte," class method or the "),pU=n(Zte,"A",{href:!0});var Oxt=s(pU);D2r=r(Oxt,"from_config()"),Oxt.forEach(t),G2r=r(Zte,` class
method.`),Zte.forEach(t),O2r=i(Al),N9=n(Al,"P",{});var hHe=s(N9);V2r=r(hHe,"This class cannot be instantiated directly using "),yTe=n(hHe,"CODE",{});var Vxt=s(yTe);X2r=r(Vxt,"__init__()"),Vxt.forEach(t),z2r=r(hHe," (throws an error)."),hHe.forEach(t),W2r=i(Al),yt=n(Al,"DIV",{class:!0});var iL=s(yt);T(q9.$$.fragment,iL),Q2r=i(iL),xTe=n(iL,"P",{});var Xxt=s(xTe);H2r=r(Xxt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Xxt.forEach(t),U2r=i(iL),Ud=n(iL,"P",{});var eae=s(Ud);J2r=r(eae,`Note:
Loading a model from its configuration file does `),$Te=n(eae,"STRONG",{});var zxt=s($Te);Y2r=r(zxt,"not"),zxt.forEach(t),K2r=r(eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=n(eae,"A",{href:!0});var Wxt=s(_U);Z2r=r(Wxt,"from_pretrained()"),Wxt.forEach(t),ebr=r(eae," to load the model weights."),eae.forEach(t),obr=i(iL),T(Z4.$$.fragment,iL),iL.forEach(t),rbr=i(Al),_o=n(Al,"DIV",{class:!0});var La=s(_o);T(j9.$$.fragment,La),tbr=i(La),kTe=n(La,"P",{});var Qxt=s(kTe);abr=r(Qxt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Qxt.forEach(t),nbr=i(La),on=n(La,"P",{});var dL=s(on);sbr=r(dL,"The model class to instantiate is selected based on the "),STe=n(dL,"CODE",{});var Hxt=s(STe);lbr=r(Hxt,"model_type"),Hxt.forEach(t),ibr=r(dL,` property of the config object (either
passed as an argument or loaded from `),RTe=n(dL,"CODE",{});var Uxt=s(RTe);dbr=r(Uxt,"pretrained_model_name_or_path"),Uxt.forEach(t),cbr=r(dL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=n(dL,"CODE",{});var Jxt=s(PTe);mbr=r(Jxt,"pretrained_model_name_or_path"),Jxt.forEach(t),fbr=r(dL,":"),dL.forEach(t),gbr=i(La),rn=n(La,"UL",{});var cL=s(rn);eE=n(cL,"LI",{});var Hqe=s(eE);BTe=n(Hqe,"STRONG",{});var Yxt=s(BTe);hbr=r(Yxt,"deit"),Yxt.forEach(t),ubr=r(Hqe," \u2014 "),bU=n(Hqe,"A",{href:!0});var Kxt=s(bU);pbr=r(Kxt,"DeiTForMaskedImageModeling"),Kxt.forEach(t),_br=r(Hqe," (DeiT model)"),Hqe.forEach(t),bbr=i(cL),oE=n(cL,"LI",{});var Uqe=s(oE);ITe=n(Uqe,"STRONG",{});var Zxt=s(ITe);vbr=r(Zxt,"swin"),Zxt.forEach(t),Fbr=r(Uqe," \u2014 "),vU=n(Uqe,"A",{href:!0});var e$t=s(vU);Tbr=r(e$t,"SwinForMaskedImageModeling"),e$t.forEach(t),Mbr=r(Uqe," (Swin Transformer model)"),Uqe.forEach(t),Ebr=i(cL),rE=n(cL,"LI",{});var Jqe=s(rE);NTe=n(Jqe,"STRONG",{});var o$t=s(NTe);Cbr=r(o$t,"swinv2"),o$t.forEach(t),wbr=r(Jqe," \u2014 "),FU=n(Jqe,"A",{href:!0});var r$t=s(FU);Abr=r(r$t,"Swinv2ForMaskedImageModeling"),r$t.forEach(t),Lbr=r(Jqe," (Swin Transformer V2 model)"),Jqe.forEach(t),ybr=i(cL),tE=n(cL,"LI",{});var Yqe=s(tE);qTe=n(Yqe,"STRONG",{});var t$t=s(qTe);xbr=r(t$t,"vit"),t$t.forEach(t),$br=r(Yqe," \u2014 "),TU=n(Yqe,"A",{href:!0});var a$t=s(TU);kbr=r(a$t,"ViTForMaskedImageModeling"),a$t.forEach(t),Sbr=r(Yqe," (ViT model)"),Yqe.forEach(t),cL.forEach(t),Rbr=i(La),aE=n(La,"P",{});var Kqe=s(aE);Pbr=r(Kqe,"The model is set in evaluation mode by default using "),jTe=n(Kqe,"CODE",{});var n$t=s(jTe);Bbr=r(n$t,"model.eval()"),n$t.forEach(t),Ibr=r(Kqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),DTe=n(Kqe,"CODE",{});var s$t=s(DTe);Nbr=r(s$t,"model.train()"),s$t.forEach(t),Kqe.forEach(t),qbr=i(La),T(nE.$$.fragment,La),La.forEach(t),Al.forEach(t),iWe=i(m),Jd=n(m,"H2",{class:!0});var uHe=s(Jd);sE=n(uHe,"A",{id:!0,class:!0,href:!0});var l$t=s(sE);GTe=n(l$t,"SPAN",{});var i$t=s(GTe);T(D9.$$.fragment,i$t),i$t.forEach(t),l$t.forEach(t),jbr=i(uHe),OTe=n(uHe,"SPAN",{});var d$t=s(OTe);Dbr=r(d$t,"AutoModelForObjectDetection"),d$t.forEach(t),uHe.forEach(t),dWe=i(m),Ko=n(m,"DIV",{class:!0});var Ll=s(Ko);T(G9.$$.fragment,Ll),Gbr=i(Ll),Yd=n(Ll,"P",{});var oae=s(Yd);Obr=r(oae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),MU=n(oae,"A",{href:!0});var c$t=s(MU);Vbr=r(c$t,"from_pretrained()"),c$t.forEach(t),Xbr=r(oae," class method or the "),EU=n(oae,"A",{href:!0});var m$t=s(EU);zbr=r(m$t,"from_config()"),m$t.forEach(t),Wbr=r(oae,` class
method.`),oae.forEach(t),Qbr=i(Ll),O9=n(Ll,"P",{});var pHe=s(O9);Hbr=r(pHe,"This class cannot be instantiated directly using "),VTe=n(pHe,"CODE",{});var f$t=s(VTe);Ubr=r(f$t,"__init__()"),f$t.forEach(t),Jbr=r(pHe," (throws an error)."),pHe.forEach(t),Ybr=i(Ll),xt=n(Ll,"DIV",{class:!0});var mL=s(xt);T(V9.$$.fragment,mL),Kbr=i(mL),XTe=n(mL,"P",{});var g$t=s(XTe);Zbr=r(g$t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),g$t.forEach(t),evr=i(mL),Kd=n(mL,"P",{});var rae=s(Kd);ovr=r(rae,`Note:
Loading a model from its configuration file does `),zTe=n(rae,"STRONG",{});var h$t=s(zTe);rvr=r(h$t,"not"),h$t.forEach(t),tvr=r(rae,` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=n(rae,"A",{href:!0});var u$t=s(CU);avr=r(u$t,"from_pretrained()"),u$t.forEach(t),nvr=r(rae," to load the model weights."),rae.forEach(t),svr=i(mL),T(lE.$$.fragment,mL),mL.forEach(t),lvr=i(Ll),bo=n(Ll,"DIV",{class:!0});var ya=s(bo);T(X9.$$.fragment,ya),ivr=i(ya),WTe=n(ya,"P",{});var p$t=s(WTe);dvr=r(p$t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),p$t.forEach(t),cvr=i(ya),tn=n(ya,"P",{});var fL=s(tn);mvr=r(fL,"The model class to instantiate is selected based on the "),QTe=n(fL,"CODE",{});var _$t=s(QTe);fvr=r(_$t,"model_type"),_$t.forEach(t),gvr=r(fL,` property of the config object (either
passed as an argument or loaded from `),HTe=n(fL,"CODE",{});var b$t=s(HTe);hvr=r(b$t,"pretrained_model_name_or_path"),b$t.forEach(t),uvr=r(fL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=n(fL,"CODE",{});var v$t=s(UTe);pvr=r(v$t,"pretrained_model_name_or_path"),v$t.forEach(t),_vr=r(fL,":"),fL.forEach(t),bvr=i(ya),z9=n(ya,"UL",{});var _He=s(z9);iE=n(_He,"LI",{});var Zqe=s(iE);JTe=n(Zqe,"STRONG",{});var F$t=s(JTe);vvr=r(F$t,"detr"),F$t.forEach(t),Fvr=r(Zqe," \u2014 "),wU=n(Zqe,"A",{href:!0});var T$t=s(wU);Tvr=r(T$t,"DetrForObjectDetection"),T$t.forEach(t),Mvr=r(Zqe," (DETR model)"),Zqe.forEach(t),Evr=i(_He),dE=n(_He,"LI",{});var eje=s(dE);YTe=n(eje,"STRONG",{});var M$t=s(YTe);Cvr=r(M$t,"yolos"),M$t.forEach(t),wvr=r(eje," \u2014 "),AU=n(eje,"A",{href:!0});var E$t=s(AU);Avr=r(E$t,"YolosForObjectDetection"),E$t.forEach(t),Lvr=r(eje," (YOLOS model)"),eje.forEach(t),_He.forEach(t),yvr=i(ya),cE=n(ya,"P",{});var oje=s(cE);xvr=r(oje,"The model is set in evaluation mode by default using "),KTe=n(oje,"CODE",{});var C$t=s(KTe);$vr=r(C$t,"model.eval()"),C$t.forEach(t),kvr=r(oje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ZTe=n(oje,"CODE",{});var w$t=s(ZTe);Svr=r(w$t,"model.train()"),w$t.forEach(t),oje.forEach(t),Rvr=i(ya),T(mE.$$.fragment,ya),ya.forEach(t),Ll.forEach(t),cWe=i(m),Zd=n(m,"H2",{class:!0});var bHe=s(Zd);fE=n(bHe,"A",{id:!0,class:!0,href:!0});var A$t=s(fE);eMe=n(A$t,"SPAN",{});var L$t=s(eMe);T(W9.$$.fragment,L$t),L$t.forEach(t),A$t.forEach(t),Pvr=i(bHe),oMe=n(bHe,"SPAN",{});var y$t=s(oMe);Bvr=r(y$t,"AutoModelForImageSegmentation"),y$t.forEach(t),bHe.forEach(t),mWe=i(m),Zo=n(m,"DIV",{class:!0});var yl=s(Zo);T(Q9.$$.fragment,yl),Ivr=i(yl),ec=n(yl,"P",{});var tae=s(ec);Nvr=r(tae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),LU=n(tae,"A",{href:!0});var x$t=s(LU);qvr=r(x$t,"from_pretrained()"),x$t.forEach(t),jvr=r(tae," class method or the "),yU=n(tae,"A",{href:!0});var $$t=s(yU);Dvr=r($$t,"from_config()"),$$t.forEach(t),Gvr=r(tae,` class
method.`),tae.forEach(t),Ovr=i(yl),H9=n(yl,"P",{});var vHe=s(H9);Vvr=r(vHe,"This class cannot be instantiated directly using "),rMe=n(vHe,"CODE",{});var k$t=s(rMe);Xvr=r(k$t,"__init__()"),k$t.forEach(t),zvr=r(vHe," (throws an error)."),vHe.forEach(t),Wvr=i(yl),$t=n(yl,"DIV",{class:!0});var gL=s($t);T(U9.$$.fragment,gL),Qvr=i(gL),tMe=n(gL,"P",{});var S$t=s(tMe);Hvr=r(S$t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),S$t.forEach(t),Uvr=i(gL),oc=n(gL,"P",{});var aae=s(oc);Jvr=r(aae,`Note:
Loading a model from its configuration file does `),aMe=n(aae,"STRONG",{});var R$t=s(aMe);Yvr=r(R$t,"not"),R$t.forEach(t),Kvr=r(aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=n(aae,"A",{href:!0});var P$t=s(xU);Zvr=r(P$t,"from_pretrained()"),P$t.forEach(t),e1r=r(aae," to load the model weights."),aae.forEach(t),o1r=i(gL),T(gE.$$.fragment,gL),gL.forEach(t),r1r=i(yl),vo=n(yl,"DIV",{class:!0});var xa=s(vo);T(J9.$$.fragment,xa),t1r=i(xa),nMe=n(xa,"P",{});var B$t=s(nMe);a1r=r(B$t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),B$t.forEach(t),n1r=i(xa),an=n(xa,"P",{});var hL=s(an);s1r=r(hL,"The model class to instantiate is selected based on the "),sMe=n(hL,"CODE",{});var I$t=s(sMe);l1r=r(I$t,"model_type"),I$t.forEach(t),i1r=r(hL,` property of the config object (either
passed as an argument or loaded from `),lMe=n(hL,"CODE",{});var N$t=s(lMe);d1r=r(N$t,"pretrained_model_name_or_path"),N$t.forEach(t),c1r=r(hL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iMe=n(hL,"CODE",{});var q$t=s(iMe);m1r=r(q$t,"pretrained_model_name_or_path"),q$t.forEach(t),f1r=r(hL,":"),hL.forEach(t),g1r=i(xa),dMe=n(xa,"UL",{});var j$t=s(dMe);hE=n(j$t,"LI",{});var rje=s(hE);cMe=n(rje,"STRONG",{});var D$t=s(cMe);h1r=r(D$t,"detr"),D$t.forEach(t),u1r=r(rje," \u2014 "),$U=n(rje,"A",{href:!0});var G$t=s($U);p1r=r(G$t,"DetrForSegmentation"),G$t.forEach(t),_1r=r(rje," (DETR model)"),rje.forEach(t),j$t.forEach(t),b1r=i(xa),uE=n(xa,"P",{});var tje=s(uE);v1r=r(tje,"The model is set in evaluation mode by default using "),mMe=n(tje,"CODE",{});var O$t=s(mMe);F1r=r(O$t,"model.eval()"),O$t.forEach(t),T1r=r(tje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fMe=n(tje,"CODE",{});var V$t=s(fMe);M1r=r(V$t,"model.train()"),V$t.forEach(t),tje.forEach(t),E1r=i(xa),T(pE.$$.fragment,xa),xa.forEach(t),yl.forEach(t),fWe=i(m),rc=n(m,"H2",{class:!0});var FHe=s(rc);_E=n(FHe,"A",{id:!0,class:!0,href:!0});var X$t=s(_E);gMe=n(X$t,"SPAN",{});var z$t=s(gMe);T(Y9.$$.fragment,z$t),z$t.forEach(t),X$t.forEach(t),C1r=i(FHe),hMe=n(FHe,"SPAN",{});var W$t=s(hMe);w1r=r(W$t,"AutoModelForSemanticSegmentation"),W$t.forEach(t),FHe.forEach(t),gWe=i(m),er=n(m,"DIV",{class:!0});var xl=s(er);T(K9.$$.fragment,xl),A1r=i(xl),tc=n(xl,"P",{});var nae=s(tc);L1r=r(nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),kU=n(nae,"A",{href:!0});var Q$t=s(kU);y1r=r(Q$t,"from_pretrained()"),Q$t.forEach(t),x1r=r(nae," class method or the "),SU=n(nae,"A",{href:!0});var H$t=s(SU);$1r=r(H$t,"from_config()"),H$t.forEach(t),k1r=r(nae,` class
method.`),nae.forEach(t),S1r=i(xl),Z9=n(xl,"P",{});var THe=s(Z9);R1r=r(THe,"This class cannot be instantiated directly using "),uMe=n(THe,"CODE",{});var U$t=s(uMe);P1r=r(U$t,"__init__()"),U$t.forEach(t),B1r=r(THe," (throws an error)."),THe.forEach(t),I1r=i(xl),kt=n(xl,"DIV",{class:!0});var uL=s(kt);T(ex.$$.fragment,uL),N1r=i(uL),pMe=n(uL,"P",{});var J$t=s(pMe);q1r=r(J$t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),J$t.forEach(t),j1r=i(uL),ac=n(uL,"P",{});var sae=s(ac);D1r=r(sae,`Note:
Loading a model from its configuration file does `),_Me=n(sae,"STRONG",{});var Y$t=s(_Me);G1r=r(Y$t,"not"),Y$t.forEach(t),O1r=r(sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),RU=n(sae,"A",{href:!0});var K$t=s(RU);V1r=r(K$t,"from_pretrained()"),K$t.forEach(t),X1r=r(sae," to load the model weights."),sae.forEach(t),z1r=i(uL),T(bE.$$.fragment,uL),uL.forEach(t),W1r=i(xl),Fo=n(xl,"DIV",{class:!0});var $a=s(Fo);T(ox.$$.fragment,$a),Q1r=i($a),bMe=n($a,"P",{});var Z$t=s(bMe);H1r=r(Z$t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Z$t.forEach(t),U1r=i($a),nn=n($a,"P",{});var pL=s(nn);J1r=r(pL,"The model class to instantiate is selected based on the "),vMe=n(pL,"CODE",{});var ekt=s(vMe);Y1r=r(ekt,"model_type"),ekt.forEach(t),K1r=r(pL,` property of the config object (either
passed as an argument or loaded from `),FMe=n(pL,"CODE",{});var okt=s(FMe);Z1r=r(okt,"pretrained_model_name_or_path"),okt.forEach(t),eFr=r(pL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TMe=n(pL,"CODE",{});var rkt=s(TMe);oFr=r(rkt,"pretrained_model_name_or_path"),rkt.forEach(t),rFr=r(pL,":"),pL.forEach(t),tFr=i($a),at=n($a,"UL",{});var $l=s(at);vE=n($l,"LI",{});var aje=s(vE);MMe=n(aje,"STRONG",{});var tkt=s(MMe);aFr=r(tkt,"beit"),tkt.forEach(t),nFr=r(aje," \u2014 "),PU=n(aje,"A",{href:!0});var akt=s(PU);sFr=r(akt,"BeitForSemanticSegmentation"),akt.forEach(t),lFr=r(aje," (BEiT model)"),aje.forEach(t),iFr=i($l),FE=n($l,"LI",{});var nje=s(FE);EMe=n(nje,"STRONG",{});var nkt=s(EMe);dFr=r(nkt,"data2vec-vision"),nkt.forEach(t),cFr=r(nje," \u2014 "),BU=n(nje,"A",{href:!0});var skt=s(BU);mFr=r(skt,"Data2VecVisionForSemanticSegmentation"),skt.forEach(t),fFr=r(nje," (Data2VecVision model)"),nje.forEach(t),gFr=i($l),TE=n($l,"LI",{});var sje=s(TE);CMe=n(sje,"STRONG",{});var lkt=s(CMe);hFr=r(lkt,"dpt"),lkt.forEach(t),uFr=r(sje," \u2014 "),IU=n(sje,"A",{href:!0});var ikt=s(IU);pFr=r(ikt,"DPTForSemanticSegmentation"),ikt.forEach(t),_Fr=r(sje," (DPT model)"),sje.forEach(t),bFr=i($l),ME=n($l,"LI",{});var lje=s(ME);wMe=n(lje,"STRONG",{});var dkt=s(wMe);vFr=r(dkt,"mobilevit"),dkt.forEach(t),FFr=r(lje," \u2014 "),NU=n(lje,"A",{href:!0});var ckt=s(NU);TFr=r(ckt,"MobileViTForSemanticSegmentation"),ckt.forEach(t),MFr=r(lje," (MobileViT model)"),lje.forEach(t),EFr=i($l),EE=n($l,"LI",{});var ije=s(EE);AMe=n(ije,"STRONG",{});var mkt=s(AMe);CFr=r(mkt,"segformer"),mkt.forEach(t),wFr=r(ije," \u2014 "),qU=n(ije,"A",{href:!0});var fkt=s(qU);AFr=r(fkt,"SegformerForSemanticSegmentation"),fkt.forEach(t),LFr=r(ije," (SegFormer model)"),ije.forEach(t),$l.forEach(t),yFr=i($a),CE=n($a,"P",{});var dje=s(CE);xFr=r(dje,"The model is set in evaluation mode by default using "),LMe=n(dje,"CODE",{});var gkt=s(LMe);$Fr=r(gkt,"model.eval()"),gkt.forEach(t),kFr=r(dje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yMe=n(dje,"CODE",{});var hkt=s(yMe);SFr=r(hkt,"model.train()"),hkt.forEach(t),dje.forEach(t),RFr=i($a),T(wE.$$.fragment,$a),$a.forEach(t),xl.forEach(t),hWe=i(m),nc=n(m,"H2",{class:!0});var MHe=s(nc);AE=n(MHe,"A",{id:!0,class:!0,href:!0});var ukt=s(AE);xMe=n(ukt,"SPAN",{});var pkt=s(xMe);T(rx.$$.fragment,pkt),pkt.forEach(t),ukt.forEach(t),PFr=i(MHe),$Me=n(MHe,"SPAN",{});var _kt=s($Me);BFr=r(_kt,"AutoModelForInstanceSegmentation"),_kt.forEach(t),MHe.forEach(t),uWe=i(m),or=n(m,"DIV",{class:!0});var kl=s(or);T(tx.$$.fragment,kl),IFr=i(kl),sc=n(kl,"P",{});var lae=s(sc);NFr=r(lae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),jU=n(lae,"A",{href:!0});var bkt=s(jU);qFr=r(bkt,"from_pretrained()"),bkt.forEach(t),jFr=r(lae," class method or the "),DU=n(lae,"A",{href:!0});var vkt=s(DU);DFr=r(vkt,"from_config()"),vkt.forEach(t),GFr=r(lae,` class
method.`),lae.forEach(t),OFr=i(kl),ax=n(kl,"P",{});var EHe=s(ax);VFr=r(EHe,"This class cannot be instantiated directly using "),kMe=n(EHe,"CODE",{});var Fkt=s(kMe);XFr=r(Fkt,"__init__()"),Fkt.forEach(t),zFr=r(EHe," (throws an error)."),EHe.forEach(t),WFr=i(kl),St=n(kl,"DIV",{class:!0});var _L=s(St);T(nx.$$.fragment,_L),QFr=i(_L),SMe=n(_L,"P",{});var Tkt=s(SMe);HFr=r(Tkt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Tkt.forEach(t),UFr=i(_L),lc=n(_L,"P",{});var iae=s(lc);JFr=r(iae,`Note:
Loading a model from its configuration file does `),RMe=n(iae,"STRONG",{});var Mkt=s(RMe);YFr=r(Mkt,"not"),Mkt.forEach(t),KFr=r(iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=n(iae,"A",{href:!0});var Ekt=s(GU);ZFr=r(Ekt,"from_pretrained()"),Ekt.forEach(t),eTr=r(iae," to load the model weights."),iae.forEach(t),oTr=i(_L),T(LE.$$.fragment,_L),_L.forEach(t),rTr=i(kl),To=n(kl,"DIV",{class:!0});var ka=s(To);T(sx.$$.fragment,ka),tTr=i(ka),PMe=n(ka,"P",{});var Ckt=s(PMe);aTr=r(Ckt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Ckt.forEach(t),nTr=i(ka),sn=n(ka,"P",{});var bL=s(sn);sTr=r(bL,"The model class to instantiate is selected based on the "),BMe=n(bL,"CODE",{});var wkt=s(BMe);lTr=r(wkt,"model_type"),wkt.forEach(t),iTr=r(bL,` property of the config object (either
passed as an argument or loaded from `),IMe=n(bL,"CODE",{});var Akt=s(IMe);dTr=r(Akt,"pretrained_model_name_or_path"),Akt.forEach(t),cTr=r(bL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NMe=n(bL,"CODE",{});var Lkt=s(NMe);mTr=r(Lkt,"pretrained_model_name_or_path"),Lkt.forEach(t),fTr=r(bL,":"),bL.forEach(t),gTr=i(ka),qMe=n(ka,"UL",{});var ykt=s(qMe);yE=n(ykt,"LI",{});var cje=s(yE);jMe=n(cje,"STRONG",{});var xkt=s(jMe);hTr=r(xkt,"maskformer"),xkt.forEach(t),uTr=r(cje," \u2014 "),OU=n(cje,"A",{href:!0});var $kt=s(OU);pTr=r($kt,"MaskFormerForInstanceSegmentation"),$kt.forEach(t),_Tr=r(cje," (MaskFormer model)"),cje.forEach(t),ykt.forEach(t),bTr=i(ka),xE=n(ka,"P",{});var mje=s(xE);vTr=r(mje,"The model is set in evaluation mode by default using "),DMe=n(mje,"CODE",{});var kkt=s(DMe);FTr=r(kkt,"model.eval()"),kkt.forEach(t),TTr=r(mje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),GMe=n(mje,"CODE",{});var Skt=s(GMe);MTr=r(Skt,"model.train()"),Skt.forEach(t),mje.forEach(t),ETr=i(ka),T($E.$$.fragment,ka),ka.forEach(t),kl.forEach(t),pWe=i(m),ic=n(m,"H2",{class:!0});var CHe=s(ic);kE=n(CHe,"A",{id:!0,class:!0,href:!0});var Rkt=s(kE);OMe=n(Rkt,"SPAN",{});var Pkt=s(OMe);T(lx.$$.fragment,Pkt),Pkt.forEach(t),Rkt.forEach(t),CTr=i(CHe),VMe=n(CHe,"SPAN",{});var Bkt=s(VMe);wTr=r(Bkt,"TFAutoModel"),Bkt.forEach(t),CHe.forEach(t),_We=i(m),rr=n(m,"DIV",{class:!0});var Sl=s(rr);T(ix.$$.fragment,Sl),ATr=i(Sl),dc=n(Sl,"P",{});var dae=s(dc);LTr=r(dae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VU=n(dae,"A",{href:!0});var Ikt=s(VU);yTr=r(Ikt,"from_pretrained()"),Ikt.forEach(t),xTr=r(dae," class method or the "),XU=n(dae,"A",{href:!0});var Nkt=s(XU);$Tr=r(Nkt,"from_config()"),Nkt.forEach(t),kTr=r(dae,` class
method.`),dae.forEach(t),STr=i(Sl),dx=n(Sl,"P",{});var wHe=s(dx);RTr=r(wHe,"This class cannot be instantiated directly using "),XMe=n(wHe,"CODE",{});var qkt=s(XMe);PTr=r(qkt,"__init__()"),qkt.forEach(t),BTr=r(wHe," (throws an error)."),wHe.forEach(t),ITr=i(Sl),Rt=n(Sl,"DIV",{class:!0});var vL=s(Rt);T(cx.$$.fragment,vL),NTr=i(vL),zMe=n(vL,"P",{});var jkt=s(zMe);qTr=r(jkt,"Instantiates one of the base model classes of the library from a configuration."),jkt.forEach(t),jTr=i(vL),cc=n(vL,"P",{});var cae=s(cc);DTr=r(cae,`Note:
Loading a model from its configuration file does `),WMe=n(cae,"STRONG",{});var Dkt=s(WMe);GTr=r(Dkt,"not"),Dkt.forEach(t),OTr=r(cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=n(cae,"A",{href:!0});var Gkt=s(zU);VTr=r(Gkt,"from_pretrained()"),Gkt.forEach(t),XTr=r(cae," to load the model weights."),cae.forEach(t),zTr=i(vL),T(SE.$$.fragment,vL),vL.forEach(t),WTr=i(Sl),$r=n(Sl,"DIV",{class:!0});var Rl=s($r);T(mx.$$.fragment,Rl),QTr=i(Rl),QMe=n(Rl,"P",{});var Okt=s(QMe);HTr=r(Okt,"Instantiate one of the base model classes of the library from a pretrained model."),Okt.forEach(t),UTr=i(Rl),ln=n(Rl,"P",{});var FL=s(ln);JTr=r(FL,"The model class to instantiate is selected based on the "),HMe=n(FL,"CODE",{});var Vkt=s(HMe);YTr=r(Vkt,"model_type"),Vkt.forEach(t),KTr=r(FL,` property of the config object (either
passed as an argument or loaded from `),UMe=n(FL,"CODE",{});var Xkt=s(UMe);ZTr=r(Xkt,"pretrained_model_name_or_path"),Xkt.forEach(t),eMr=r(FL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JMe=n(FL,"CODE",{});var zkt=s(JMe);oMr=r(zkt,"pretrained_model_name_or_path"),zkt.forEach(t),rMr=r(FL,":"),FL.forEach(t),tMr=i(Rl),I=n(Rl,"UL",{});var D=s(I);RE=n(D,"LI",{});var fje=s(RE);YMe=n(fje,"STRONG",{});var Wkt=s(YMe);aMr=r(Wkt,"albert"),Wkt.forEach(t),nMr=r(fje," \u2014 "),WU=n(fje,"A",{href:!0});var Qkt=s(WU);sMr=r(Qkt,"TFAlbertModel"),Qkt.forEach(t),lMr=r(fje," (ALBERT model)"),fje.forEach(t),iMr=i(D),PE=n(D,"LI",{});var gje=s(PE);KMe=n(gje,"STRONG",{});var Hkt=s(KMe);dMr=r(Hkt,"bart"),Hkt.forEach(t),cMr=r(gje," \u2014 "),QU=n(gje,"A",{href:!0});var Ukt=s(QU);mMr=r(Ukt,"TFBartModel"),Ukt.forEach(t),fMr=r(gje," (BART model)"),gje.forEach(t),gMr=i(D),BE=n(D,"LI",{});var hje=s(BE);ZMe=n(hje,"STRONG",{});var Jkt=s(ZMe);hMr=r(Jkt,"bert"),Jkt.forEach(t),uMr=r(hje," \u2014 "),HU=n(hje,"A",{href:!0});var Ykt=s(HU);pMr=r(Ykt,"TFBertModel"),Ykt.forEach(t),_Mr=r(hje," (BERT model)"),hje.forEach(t),bMr=i(D),IE=n(D,"LI",{});var uje=s(IE);e4e=n(uje,"STRONG",{});var Kkt=s(e4e);vMr=r(Kkt,"blenderbot"),Kkt.forEach(t),FMr=r(uje," \u2014 "),UU=n(uje,"A",{href:!0});var Zkt=s(UU);TMr=r(Zkt,"TFBlenderbotModel"),Zkt.forEach(t),MMr=r(uje," (Blenderbot model)"),uje.forEach(t),EMr=i(D),NE=n(D,"LI",{});var pje=s(NE);o4e=n(pje,"STRONG",{});var eSt=s(o4e);CMr=r(eSt,"blenderbot-small"),eSt.forEach(t),wMr=r(pje," \u2014 "),JU=n(pje,"A",{href:!0});var oSt=s(JU);AMr=r(oSt,"TFBlenderbotSmallModel"),oSt.forEach(t),LMr=r(pje," (BlenderbotSmall model)"),pje.forEach(t),yMr=i(D),qE=n(D,"LI",{});var _je=s(qE);r4e=n(_je,"STRONG",{});var rSt=s(r4e);xMr=r(rSt,"camembert"),rSt.forEach(t),$Mr=r(_je," \u2014 "),YU=n(_je,"A",{href:!0});var tSt=s(YU);kMr=r(tSt,"TFCamembertModel"),tSt.forEach(t),SMr=r(_je," (CamemBERT model)"),_je.forEach(t),RMr=i(D),jE=n(D,"LI",{});var bje=s(jE);t4e=n(bje,"STRONG",{});var aSt=s(t4e);PMr=r(aSt,"clip"),aSt.forEach(t),BMr=r(bje," \u2014 "),KU=n(bje,"A",{href:!0});var nSt=s(KU);IMr=r(nSt,"TFCLIPModel"),nSt.forEach(t),NMr=r(bje," (CLIP model)"),bje.forEach(t),qMr=i(D),DE=n(D,"LI",{});var vje=s(DE);a4e=n(vje,"STRONG",{});var sSt=s(a4e);jMr=r(sSt,"convbert"),sSt.forEach(t),DMr=r(vje," \u2014 "),ZU=n(vje,"A",{href:!0});var lSt=s(ZU);GMr=r(lSt,"TFConvBertModel"),lSt.forEach(t),OMr=r(vje," (ConvBERT model)"),vje.forEach(t),VMr=i(D),GE=n(D,"LI",{});var Fje=s(GE);n4e=n(Fje,"STRONG",{});var iSt=s(n4e);XMr=r(iSt,"convnext"),iSt.forEach(t),zMr=r(Fje," \u2014 "),eJ=n(Fje,"A",{href:!0});var dSt=s(eJ);WMr=r(dSt,"TFConvNextModel"),dSt.forEach(t),QMr=r(Fje," (ConvNeXT model)"),Fje.forEach(t),HMr=i(D),OE=n(D,"LI",{});var Tje=s(OE);s4e=n(Tje,"STRONG",{});var cSt=s(s4e);UMr=r(cSt,"ctrl"),cSt.forEach(t),JMr=r(Tje," \u2014 "),oJ=n(Tje,"A",{href:!0});var mSt=s(oJ);YMr=r(mSt,"TFCTRLModel"),mSt.forEach(t),KMr=r(Tje," (CTRL model)"),Tje.forEach(t),ZMr=i(D),VE=n(D,"LI",{});var Mje=s(VE);l4e=n(Mje,"STRONG",{});var fSt=s(l4e);e4r=r(fSt,"data2vec-vision"),fSt.forEach(t),o4r=r(Mje," \u2014 "),rJ=n(Mje,"A",{href:!0});var gSt=s(rJ);r4r=r(gSt,"TFData2VecVisionModel"),gSt.forEach(t),t4r=r(Mje," (Data2VecVision model)"),Mje.forEach(t),a4r=i(D),XE=n(D,"LI",{});var Eje=s(XE);i4e=n(Eje,"STRONG",{});var hSt=s(i4e);n4r=r(hSt,"deberta"),hSt.forEach(t),s4r=r(Eje," \u2014 "),tJ=n(Eje,"A",{href:!0});var uSt=s(tJ);l4r=r(uSt,"TFDebertaModel"),uSt.forEach(t),i4r=r(Eje," (DeBERTa model)"),Eje.forEach(t),d4r=i(D),zE=n(D,"LI",{});var Cje=s(zE);d4e=n(Cje,"STRONG",{});var pSt=s(d4e);c4r=r(pSt,"deberta-v2"),pSt.forEach(t),m4r=r(Cje," \u2014 "),aJ=n(Cje,"A",{href:!0});var _St=s(aJ);f4r=r(_St,"TFDebertaV2Model"),_St.forEach(t),g4r=r(Cje," (DeBERTa-v2 model)"),Cje.forEach(t),h4r=i(D),WE=n(D,"LI",{});var wje=s(WE);c4e=n(wje,"STRONG",{});var bSt=s(c4e);u4r=r(bSt,"deit"),bSt.forEach(t),p4r=r(wje," \u2014 "),nJ=n(wje,"A",{href:!0});var vSt=s(nJ);_4r=r(vSt,"TFDeiTModel"),vSt.forEach(t),b4r=r(wje," (DeiT model)"),wje.forEach(t),v4r=i(D),QE=n(D,"LI",{});var Aje=s(QE);m4e=n(Aje,"STRONG",{});var FSt=s(m4e);F4r=r(FSt,"distilbert"),FSt.forEach(t),T4r=r(Aje," \u2014 "),sJ=n(Aje,"A",{href:!0});var TSt=s(sJ);M4r=r(TSt,"TFDistilBertModel"),TSt.forEach(t),E4r=r(Aje," (DistilBERT model)"),Aje.forEach(t),C4r=i(D),HE=n(D,"LI",{});var Lje=s(HE);f4e=n(Lje,"STRONG",{});var MSt=s(f4e);w4r=r(MSt,"dpr"),MSt.forEach(t),A4r=r(Lje," \u2014 "),lJ=n(Lje,"A",{href:!0});var ESt=s(lJ);L4r=r(ESt,"TFDPRQuestionEncoder"),ESt.forEach(t),y4r=r(Lje," (DPR model)"),Lje.forEach(t),x4r=i(D),UE=n(D,"LI",{});var yje=s(UE);g4e=n(yje,"STRONG",{});var CSt=s(g4e);$4r=r(CSt,"electra"),CSt.forEach(t),k4r=r(yje," \u2014 "),iJ=n(yje,"A",{href:!0});var wSt=s(iJ);S4r=r(wSt,"TFElectraModel"),wSt.forEach(t),R4r=r(yje," (ELECTRA model)"),yje.forEach(t),P4r=i(D),JE=n(D,"LI",{});var xje=s(JE);h4e=n(xje,"STRONG",{});var ASt=s(h4e);B4r=r(ASt,"flaubert"),ASt.forEach(t),I4r=r(xje," \u2014 "),dJ=n(xje,"A",{href:!0});var LSt=s(dJ);N4r=r(LSt,"TFFlaubertModel"),LSt.forEach(t),q4r=r(xje," (FlauBERT model)"),xje.forEach(t),j4r=i(D),Zs=n(D,"LI",{});var KS=s(Zs);u4e=n(KS,"STRONG",{});var ySt=s(u4e);D4r=r(ySt,"funnel"),ySt.forEach(t),G4r=r(KS," \u2014 "),cJ=n(KS,"A",{href:!0});var xSt=s(cJ);O4r=r(xSt,"TFFunnelModel"),xSt.forEach(t),V4r=r(KS," or "),mJ=n(KS,"A",{href:!0});var $St=s(mJ);X4r=r($St,"TFFunnelBaseModel"),$St.forEach(t),z4r=r(KS," (Funnel Transformer model)"),KS.forEach(t),W4r=i(D),YE=n(D,"LI",{});var $je=s(YE);p4e=n($je,"STRONG",{});var kSt=s(p4e);Q4r=r(kSt,"gpt2"),kSt.forEach(t),H4r=r($je," \u2014 "),fJ=n($je,"A",{href:!0});var SSt=s(fJ);U4r=r(SSt,"TFGPT2Model"),SSt.forEach(t),J4r=r($je," (OpenAI GPT-2 model)"),$je.forEach(t),Y4r=i(D),KE=n(D,"LI",{});var kje=s(KE);_4e=n(kje,"STRONG",{});var RSt=s(_4e);K4r=r(RSt,"gptj"),RSt.forEach(t),Z4r=r(kje," \u2014 "),gJ=n(kje,"A",{href:!0});var PSt=s(gJ);eEr=r(PSt,"TFGPTJModel"),PSt.forEach(t),oEr=r(kje," (GPT-J model)"),kje.forEach(t),rEr=i(D),ZE=n(D,"LI",{});var Sje=s(ZE);b4e=n(Sje,"STRONG",{});var BSt=s(b4e);tEr=r(BSt,"hubert"),BSt.forEach(t),aEr=r(Sje," \u2014 "),hJ=n(Sje,"A",{href:!0});var ISt=s(hJ);nEr=r(ISt,"TFHubertModel"),ISt.forEach(t),sEr=r(Sje," (Hubert model)"),Sje.forEach(t),lEr=i(D),eC=n(D,"LI",{});var Rje=s(eC);v4e=n(Rje,"STRONG",{});var NSt=s(v4e);iEr=r(NSt,"layoutlm"),NSt.forEach(t),dEr=r(Rje," \u2014 "),uJ=n(Rje,"A",{href:!0});var qSt=s(uJ);cEr=r(qSt,"TFLayoutLMModel"),qSt.forEach(t),mEr=r(Rje," (LayoutLM model)"),Rje.forEach(t),fEr=i(D),oC=n(D,"LI",{});var Pje=s(oC);F4e=n(Pje,"STRONG",{});var jSt=s(F4e);gEr=r(jSt,"led"),jSt.forEach(t),hEr=r(Pje," \u2014 "),pJ=n(Pje,"A",{href:!0});var DSt=s(pJ);uEr=r(DSt,"TFLEDModel"),DSt.forEach(t),pEr=r(Pje," (LED model)"),Pje.forEach(t),_Er=i(D),rC=n(D,"LI",{});var Bje=s(rC);T4e=n(Bje,"STRONG",{});var GSt=s(T4e);bEr=r(GSt,"longformer"),GSt.forEach(t),vEr=r(Bje," \u2014 "),_J=n(Bje,"A",{href:!0});var OSt=s(_J);FEr=r(OSt,"TFLongformerModel"),OSt.forEach(t),TEr=r(Bje," (Longformer model)"),Bje.forEach(t),MEr=i(D),tC=n(D,"LI",{});var Ije=s(tC);M4e=n(Ije,"STRONG",{});var VSt=s(M4e);EEr=r(VSt,"lxmert"),VSt.forEach(t),CEr=r(Ije," \u2014 "),bJ=n(Ije,"A",{href:!0});var XSt=s(bJ);wEr=r(XSt,"TFLxmertModel"),XSt.forEach(t),AEr=r(Ije," (LXMERT model)"),Ije.forEach(t),LEr=i(D),aC=n(D,"LI",{});var Nje=s(aC);E4e=n(Nje,"STRONG",{});var zSt=s(E4e);yEr=r(zSt,"marian"),zSt.forEach(t),xEr=r(Nje," \u2014 "),vJ=n(Nje,"A",{href:!0});var WSt=s(vJ);$Er=r(WSt,"TFMarianModel"),WSt.forEach(t),kEr=r(Nje," (Marian model)"),Nje.forEach(t),SEr=i(D),nC=n(D,"LI",{});var qje=s(nC);C4e=n(qje,"STRONG",{});var QSt=s(C4e);REr=r(QSt,"mbart"),QSt.forEach(t),PEr=r(qje," \u2014 "),FJ=n(qje,"A",{href:!0});var HSt=s(FJ);BEr=r(HSt,"TFMBartModel"),HSt.forEach(t),IEr=r(qje," (mBART model)"),qje.forEach(t),NEr=i(D),sC=n(D,"LI",{});var jje=s(sC);w4e=n(jje,"STRONG",{});var USt=s(w4e);qEr=r(USt,"mobilebert"),USt.forEach(t),jEr=r(jje," \u2014 "),TJ=n(jje,"A",{href:!0});var JSt=s(TJ);DEr=r(JSt,"TFMobileBertModel"),JSt.forEach(t),GEr=r(jje," (MobileBERT model)"),jje.forEach(t),OEr=i(D),lC=n(D,"LI",{});var Dje=s(lC);A4e=n(Dje,"STRONG",{});var YSt=s(A4e);VEr=r(YSt,"mpnet"),YSt.forEach(t),XEr=r(Dje," \u2014 "),MJ=n(Dje,"A",{href:!0});var KSt=s(MJ);zEr=r(KSt,"TFMPNetModel"),KSt.forEach(t),WEr=r(Dje," (MPNet model)"),Dje.forEach(t),QEr=i(D),iC=n(D,"LI",{});var Gje=s(iC);L4e=n(Gje,"STRONG",{});var ZSt=s(L4e);HEr=r(ZSt,"mt5"),ZSt.forEach(t),UEr=r(Gje," \u2014 "),EJ=n(Gje,"A",{href:!0});var eRt=s(EJ);JEr=r(eRt,"TFMT5Model"),eRt.forEach(t),YEr=r(Gje," (MT5 model)"),Gje.forEach(t),KEr=i(D),dC=n(D,"LI",{});var Oje=s(dC);y4e=n(Oje,"STRONG",{});var oRt=s(y4e);ZEr=r(oRt,"openai-gpt"),oRt.forEach(t),eCr=r(Oje," \u2014 "),CJ=n(Oje,"A",{href:!0});var rRt=s(CJ);oCr=r(rRt,"TFOpenAIGPTModel"),rRt.forEach(t),rCr=r(Oje," (OpenAI GPT model)"),Oje.forEach(t),tCr=i(D),cC=n(D,"LI",{});var Vje=s(cC);x4e=n(Vje,"STRONG",{});var tRt=s(x4e);aCr=r(tRt,"opt"),tRt.forEach(t),nCr=r(Vje," \u2014 "),wJ=n(Vje,"A",{href:!0});var aRt=s(wJ);sCr=r(aRt,"TFOPTModel"),aRt.forEach(t),lCr=r(Vje," (OPT model)"),Vje.forEach(t),iCr=i(D),mC=n(D,"LI",{});var Xje=s(mC);$4e=n(Xje,"STRONG",{});var nRt=s($4e);dCr=r(nRt,"pegasus"),nRt.forEach(t),cCr=r(Xje," \u2014 "),AJ=n(Xje,"A",{href:!0});var sRt=s(AJ);mCr=r(sRt,"TFPegasusModel"),sRt.forEach(t),fCr=r(Xje," (Pegasus model)"),Xje.forEach(t),gCr=i(D),fC=n(D,"LI",{});var zje=s(fC);k4e=n(zje,"STRONG",{});var lRt=s(k4e);hCr=r(lRt,"regnet"),lRt.forEach(t),uCr=r(zje," \u2014 "),LJ=n(zje,"A",{href:!0});var iRt=s(LJ);pCr=r(iRt,"TFRegNetModel"),iRt.forEach(t),_Cr=r(zje," (RegNet model)"),zje.forEach(t),bCr=i(D),gC=n(D,"LI",{});var Wje=s(gC);S4e=n(Wje,"STRONG",{});var dRt=s(S4e);vCr=r(dRt,"rembert"),dRt.forEach(t),FCr=r(Wje," \u2014 "),yJ=n(Wje,"A",{href:!0});var cRt=s(yJ);TCr=r(cRt,"TFRemBertModel"),cRt.forEach(t),MCr=r(Wje," (RemBERT model)"),Wje.forEach(t),ECr=i(D),hC=n(D,"LI",{});var Qje=s(hC);R4e=n(Qje,"STRONG",{});var mRt=s(R4e);CCr=r(mRt,"resnet"),mRt.forEach(t),wCr=r(Qje," \u2014 "),xJ=n(Qje,"A",{href:!0});var fRt=s(xJ);ACr=r(fRt,"TFResNetModel"),fRt.forEach(t),LCr=r(Qje," (ResNet model)"),Qje.forEach(t),yCr=i(D),uC=n(D,"LI",{});var Hje=s(uC);P4e=n(Hje,"STRONG",{});var gRt=s(P4e);xCr=r(gRt,"roberta"),gRt.forEach(t),$Cr=r(Hje," \u2014 "),$J=n(Hje,"A",{href:!0});var hRt=s($J);kCr=r(hRt,"TFRobertaModel"),hRt.forEach(t),SCr=r(Hje," (RoBERTa model)"),Hje.forEach(t),RCr=i(D),pC=n(D,"LI",{});var Uje=s(pC);B4e=n(Uje,"STRONG",{});var uRt=s(B4e);PCr=r(uRt,"roformer"),uRt.forEach(t),BCr=r(Uje," \u2014 "),kJ=n(Uje,"A",{href:!0});var pRt=s(kJ);ICr=r(pRt,"TFRoFormerModel"),pRt.forEach(t),NCr=r(Uje," (RoFormer model)"),Uje.forEach(t),qCr=i(D),_C=n(D,"LI",{});var Jje=s(_C);I4e=n(Jje,"STRONG",{});var _Rt=s(I4e);jCr=r(_Rt,"segformer"),_Rt.forEach(t),DCr=r(Jje," \u2014 "),SJ=n(Jje,"A",{href:!0});var bRt=s(SJ);GCr=r(bRt,"TFSegformerModel"),bRt.forEach(t),OCr=r(Jje," (SegFormer model)"),Jje.forEach(t),VCr=i(D),bC=n(D,"LI",{});var Yje=s(bC);N4e=n(Yje,"STRONG",{});var vRt=s(N4e);XCr=r(vRt,"speech_to_text"),vRt.forEach(t),zCr=r(Yje," \u2014 "),RJ=n(Yje,"A",{href:!0});var FRt=s(RJ);WCr=r(FRt,"TFSpeech2TextModel"),FRt.forEach(t),QCr=r(Yje," (Speech2Text model)"),Yje.forEach(t),HCr=i(D),vC=n(D,"LI",{});var Kje=s(vC);q4e=n(Kje,"STRONG",{});var TRt=s(q4e);UCr=r(TRt,"swin"),TRt.forEach(t),JCr=r(Kje," \u2014 "),PJ=n(Kje,"A",{href:!0});var MRt=s(PJ);YCr=r(MRt,"TFSwinModel"),MRt.forEach(t),KCr=r(Kje," (Swin Transformer model)"),Kje.forEach(t),ZCr=i(D),FC=n(D,"LI",{});var Zje=s(FC);j4e=n(Zje,"STRONG",{});var ERt=s(j4e);e5r=r(ERt,"t5"),ERt.forEach(t),o5r=r(Zje," \u2014 "),BJ=n(Zje,"A",{href:!0});var CRt=s(BJ);r5r=r(CRt,"TFT5Model"),CRt.forEach(t),t5r=r(Zje," (T5 model)"),Zje.forEach(t),a5r=i(D),TC=n(D,"LI",{});var eDe=s(TC);D4e=n(eDe,"STRONG",{});var wRt=s(D4e);n5r=r(wRt,"tapas"),wRt.forEach(t),s5r=r(eDe," \u2014 "),IJ=n(eDe,"A",{href:!0});var ARt=s(IJ);l5r=r(ARt,"TFTapasModel"),ARt.forEach(t),i5r=r(eDe," (TAPAS model)"),eDe.forEach(t),d5r=i(D),MC=n(D,"LI",{});var oDe=s(MC);G4e=n(oDe,"STRONG",{});var LRt=s(G4e);c5r=r(LRt,"transfo-xl"),LRt.forEach(t),m5r=r(oDe," \u2014 "),NJ=n(oDe,"A",{href:!0});var yRt=s(NJ);f5r=r(yRt,"TFTransfoXLModel"),yRt.forEach(t),g5r=r(oDe," (Transformer-XL model)"),oDe.forEach(t),h5r=i(D),EC=n(D,"LI",{});var rDe=s(EC);O4e=n(rDe,"STRONG",{});var xRt=s(O4e);u5r=r(xRt,"vit"),xRt.forEach(t),p5r=r(rDe," \u2014 "),qJ=n(rDe,"A",{href:!0});var $Rt=s(qJ);_5r=r($Rt,"TFViTModel"),$Rt.forEach(t),b5r=r(rDe," (ViT model)"),rDe.forEach(t),v5r=i(D),CC=n(D,"LI",{});var tDe=s(CC);V4e=n(tDe,"STRONG",{});var kRt=s(V4e);F5r=r(kRt,"vit_mae"),kRt.forEach(t),T5r=r(tDe," \u2014 "),jJ=n(tDe,"A",{href:!0});var SRt=s(jJ);M5r=r(SRt,"TFViTMAEModel"),SRt.forEach(t),E5r=r(tDe," (ViTMAE model)"),tDe.forEach(t),C5r=i(D),wC=n(D,"LI",{});var aDe=s(wC);X4e=n(aDe,"STRONG",{});var RRt=s(X4e);w5r=r(RRt,"wav2vec2"),RRt.forEach(t),A5r=r(aDe," \u2014 "),DJ=n(aDe,"A",{href:!0});var PRt=s(DJ);L5r=r(PRt,"TFWav2Vec2Model"),PRt.forEach(t),y5r=r(aDe," (Wav2Vec2 model)"),aDe.forEach(t),x5r=i(D),AC=n(D,"LI",{});var nDe=s(AC);z4e=n(nDe,"STRONG",{});var BRt=s(z4e);$5r=r(BRt,"xlm"),BRt.forEach(t),k5r=r(nDe," \u2014 "),GJ=n(nDe,"A",{href:!0});var IRt=s(GJ);S5r=r(IRt,"TFXLMModel"),IRt.forEach(t),R5r=r(nDe," (XLM model)"),nDe.forEach(t),P5r=i(D),LC=n(D,"LI",{});var sDe=s(LC);W4e=n(sDe,"STRONG",{});var NRt=s(W4e);B5r=r(NRt,"xlm-roberta"),NRt.forEach(t),I5r=r(sDe," \u2014 "),OJ=n(sDe,"A",{href:!0});var qRt=s(OJ);N5r=r(qRt,"TFXLMRobertaModel"),qRt.forEach(t),q5r=r(sDe," (XLM-RoBERTa model)"),sDe.forEach(t),j5r=i(D),yC=n(D,"LI",{});var lDe=s(yC);Q4e=n(lDe,"STRONG",{});var jRt=s(Q4e);D5r=r(jRt,"xlnet"),jRt.forEach(t),G5r=r(lDe," \u2014 "),VJ=n(lDe,"A",{href:!0});var DRt=s(VJ);O5r=r(DRt,"TFXLNetModel"),DRt.forEach(t),V5r=r(lDe," (XLNet model)"),lDe.forEach(t),D.forEach(t),X5r=i(Rl),T(xC.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),bWe=i(m),mc=n(m,"H2",{class:!0});var AHe=s(mc);$C=n(AHe,"A",{id:!0,class:!0,href:!0});var GRt=s($C);H4e=n(GRt,"SPAN",{});var ORt=s(H4e);T(fx.$$.fragment,ORt),ORt.forEach(t),GRt.forEach(t),z5r=i(AHe),U4e=n(AHe,"SPAN",{});var VRt=s(U4e);W5r=r(VRt,"TFAutoModelForPreTraining"),VRt.forEach(t),AHe.forEach(t),vWe=i(m),tr=n(m,"DIV",{class:!0});var Pl=s(tr);T(gx.$$.fragment,Pl),Q5r=i(Pl),fc=n(Pl,"P",{});var mae=s(fc);H5r=r(mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),XJ=n(mae,"A",{href:!0});var XRt=s(XJ);U5r=r(XRt,"from_pretrained()"),XRt.forEach(t),J5r=r(mae," class method or the "),zJ=n(mae,"A",{href:!0});var zRt=s(zJ);Y5r=r(zRt,"from_config()"),zRt.forEach(t),K5r=r(mae,` class
method.`),mae.forEach(t),Z5r=i(Pl),hx=n(Pl,"P",{});var LHe=s(hx);e3r=r(LHe,"This class cannot be instantiated directly using "),J4e=n(LHe,"CODE",{});var WRt=s(J4e);o3r=r(WRt,"__init__()"),WRt.forEach(t),r3r=r(LHe," (throws an error)."),LHe.forEach(t),t3r=i(Pl),Pt=n(Pl,"DIV",{class:!0});var TL=s(Pt);T(ux.$$.fragment,TL),a3r=i(TL),Y4e=n(TL,"P",{});var QRt=s(Y4e);n3r=r(QRt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),QRt.forEach(t),s3r=i(TL),gc=n(TL,"P",{});var fae=s(gc);l3r=r(fae,`Note:
Loading a model from its configuration file does `),K4e=n(fae,"STRONG",{});var HRt=s(K4e);i3r=r(HRt,"not"),HRt.forEach(t),d3r=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=n(fae,"A",{href:!0});var URt=s(WJ);c3r=r(URt,"from_pretrained()"),URt.forEach(t),m3r=r(fae," to load the model weights."),fae.forEach(t),f3r=i(TL),T(kC.$$.fragment,TL),TL.forEach(t),g3r=i(Pl),kr=n(Pl,"DIV",{class:!0});var Bl=s(kr);T(px.$$.fragment,Bl),h3r=i(Bl),Z4e=n(Bl,"P",{});var JRt=s(Z4e);u3r=r(JRt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),JRt.forEach(t),p3r=i(Bl),dn=n(Bl,"P",{});var ML=s(dn);_3r=r(ML,"The model class to instantiate is selected based on the "),eEe=n(ML,"CODE",{});var YRt=s(eEe);b3r=r(YRt,"model_type"),YRt.forEach(t),v3r=r(ML,` property of the config object (either
passed as an argument or loaded from `),oEe=n(ML,"CODE",{});var KRt=s(oEe);F3r=r(KRt,"pretrained_model_name_or_path"),KRt.forEach(t),T3r=r(ML,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rEe=n(ML,"CODE",{});var ZRt=s(rEe);M3r=r(ZRt,"pretrained_model_name_or_path"),ZRt.forEach(t),E3r=r(ML,":"),ML.forEach(t),C3r=i(Bl),se=n(Bl,"UL",{});var le=s(se);SC=n(le,"LI",{});var iDe=s(SC);tEe=n(iDe,"STRONG",{});var ePt=s(tEe);w3r=r(ePt,"albert"),ePt.forEach(t),A3r=r(iDe," \u2014 "),QJ=n(iDe,"A",{href:!0});var oPt=s(QJ);L3r=r(oPt,"TFAlbertForPreTraining"),oPt.forEach(t),y3r=r(iDe," (ALBERT model)"),iDe.forEach(t),x3r=i(le),RC=n(le,"LI",{});var dDe=s(RC);aEe=n(dDe,"STRONG",{});var rPt=s(aEe);$3r=r(rPt,"bart"),rPt.forEach(t),k3r=r(dDe," \u2014 "),HJ=n(dDe,"A",{href:!0});var tPt=s(HJ);S3r=r(tPt,"TFBartForConditionalGeneration"),tPt.forEach(t),R3r=r(dDe," (BART model)"),dDe.forEach(t),P3r=i(le),PC=n(le,"LI",{});var cDe=s(PC);nEe=n(cDe,"STRONG",{});var aPt=s(nEe);B3r=r(aPt,"bert"),aPt.forEach(t),I3r=r(cDe," \u2014 "),UJ=n(cDe,"A",{href:!0});var nPt=s(UJ);N3r=r(nPt,"TFBertForPreTraining"),nPt.forEach(t),q3r=r(cDe," (BERT model)"),cDe.forEach(t),j3r=i(le),BC=n(le,"LI",{});var mDe=s(BC);sEe=n(mDe,"STRONG",{});var sPt=s(sEe);D3r=r(sPt,"camembert"),sPt.forEach(t),G3r=r(mDe," \u2014 "),JJ=n(mDe,"A",{href:!0});var lPt=s(JJ);O3r=r(lPt,"TFCamembertForMaskedLM"),lPt.forEach(t),V3r=r(mDe," (CamemBERT model)"),mDe.forEach(t),X3r=i(le),IC=n(le,"LI",{});var fDe=s(IC);lEe=n(fDe,"STRONG",{});var iPt=s(lEe);z3r=r(iPt,"ctrl"),iPt.forEach(t),W3r=r(fDe," \u2014 "),YJ=n(fDe,"A",{href:!0});var dPt=s(YJ);Q3r=r(dPt,"TFCTRLLMHeadModel"),dPt.forEach(t),H3r=r(fDe," (CTRL model)"),fDe.forEach(t),U3r=i(le),NC=n(le,"LI",{});var gDe=s(NC);iEe=n(gDe,"STRONG",{});var cPt=s(iEe);J3r=r(cPt,"distilbert"),cPt.forEach(t),Y3r=r(gDe," \u2014 "),KJ=n(gDe,"A",{href:!0});var mPt=s(KJ);K3r=r(mPt,"TFDistilBertForMaskedLM"),mPt.forEach(t),Z3r=r(gDe," (DistilBERT model)"),gDe.forEach(t),e0r=i(le),qC=n(le,"LI",{});var hDe=s(qC);dEe=n(hDe,"STRONG",{});var fPt=s(dEe);o0r=r(fPt,"electra"),fPt.forEach(t),r0r=r(hDe," \u2014 "),ZJ=n(hDe,"A",{href:!0});var gPt=s(ZJ);t0r=r(gPt,"TFElectraForPreTraining"),gPt.forEach(t),a0r=r(hDe," (ELECTRA model)"),hDe.forEach(t),n0r=i(le),jC=n(le,"LI",{});var uDe=s(jC);cEe=n(uDe,"STRONG",{});var hPt=s(cEe);s0r=r(hPt,"flaubert"),hPt.forEach(t),l0r=r(uDe," \u2014 "),eY=n(uDe,"A",{href:!0});var uPt=s(eY);i0r=r(uPt,"TFFlaubertWithLMHeadModel"),uPt.forEach(t),d0r=r(uDe," (FlauBERT model)"),uDe.forEach(t),c0r=i(le),DC=n(le,"LI",{});var pDe=s(DC);mEe=n(pDe,"STRONG",{});var pPt=s(mEe);m0r=r(pPt,"funnel"),pPt.forEach(t),f0r=r(pDe," \u2014 "),oY=n(pDe,"A",{href:!0});var _Pt=s(oY);g0r=r(_Pt,"TFFunnelForPreTraining"),_Pt.forEach(t),h0r=r(pDe," (Funnel Transformer model)"),pDe.forEach(t),u0r=i(le),GC=n(le,"LI",{});var _De=s(GC);fEe=n(_De,"STRONG",{});var bPt=s(fEe);p0r=r(bPt,"gpt2"),bPt.forEach(t),_0r=r(_De," \u2014 "),rY=n(_De,"A",{href:!0});var vPt=s(rY);b0r=r(vPt,"TFGPT2LMHeadModel"),vPt.forEach(t),v0r=r(_De," (OpenAI GPT-2 model)"),_De.forEach(t),F0r=i(le),OC=n(le,"LI",{});var bDe=s(OC);gEe=n(bDe,"STRONG",{});var FPt=s(gEe);T0r=r(FPt,"layoutlm"),FPt.forEach(t),M0r=r(bDe," \u2014 "),tY=n(bDe,"A",{href:!0});var TPt=s(tY);E0r=r(TPt,"TFLayoutLMForMaskedLM"),TPt.forEach(t),C0r=r(bDe," (LayoutLM model)"),bDe.forEach(t),w0r=i(le),VC=n(le,"LI",{});var vDe=s(VC);hEe=n(vDe,"STRONG",{});var MPt=s(hEe);A0r=r(MPt,"lxmert"),MPt.forEach(t),L0r=r(vDe," \u2014 "),aY=n(vDe,"A",{href:!0});var EPt=s(aY);y0r=r(EPt,"TFLxmertForPreTraining"),EPt.forEach(t),x0r=r(vDe," (LXMERT model)"),vDe.forEach(t),$0r=i(le),XC=n(le,"LI",{});var FDe=s(XC);uEe=n(FDe,"STRONG",{});var CPt=s(uEe);k0r=r(CPt,"mobilebert"),CPt.forEach(t),S0r=r(FDe," \u2014 "),nY=n(FDe,"A",{href:!0});var wPt=s(nY);R0r=r(wPt,"TFMobileBertForPreTraining"),wPt.forEach(t),P0r=r(FDe," (MobileBERT model)"),FDe.forEach(t),B0r=i(le),zC=n(le,"LI",{});var TDe=s(zC);pEe=n(TDe,"STRONG",{});var APt=s(pEe);I0r=r(APt,"mpnet"),APt.forEach(t),N0r=r(TDe," \u2014 "),sY=n(TDe,"A",{href:!0});var LPt=s(sY);q0r=r(LPt,"TFMPNetForMaskedLM"),LPt.forEach(t),j0r=r(TDe," (MPNet model)"),TDe.forEach(t),D0r=i(le),WC=n(le,"LI",{});var MDe=s(WC);_Ee=n(MDe,"STRONG",{});var yPt=s(_Ee);G0r=r(yPt,"openai-gpt"),yPt.forEach(t),O0r=r(MDe," \u2014 "),lY=n(MDe,"A",{href:!0});var xPt=s(lY);V0r=r(xPt,"TFOpenAIGPTLMHeadModel"),xPt.forEach(t),X0r=r(MDe," (OpenAI GPT model)"),MDe.forEach(t),z0r=i(le),QC=n(le,"LI",{});var EDe=s(QC);bEe=n(EDe,"STRONG",{});var $Pt=s(bEe);W0r=r($Pt,"roberta"),$Pt.forEach(t),Q0r=r(EDe," \u2014 "),iY=n(EDe,"A",{href:!0});var kPt=s(iY);H0r=r(kPt,"TFRobertaForMaskedLM"),kPt.forEach(t),U0r=r(EDe," (RoBERTa model)"),EDe.forEach(t),J0r=i(le),HC=n(le,"LI",{});var CDe=s(HC);vEe=n(CDe,"STRONG",{});var SPt=s(vEe);Y0r=r(SPt,"t5"),SPt.forEach(t),K0r=r(CDe," \u2014 "),dY=n(CDe,"A",{href:!0});var RPt=s(dY);Z0r=r(RPt,"TFT5ForConditionalGeneration"),RPt.forEach(t),ewr=r(CDe," (T5 model)"),CDe.forEach(t),owr=i(le),UC=n(le,"LI",{});var wDe=s(UC);FEe=n(wDe,"STRONG",{});var PPt=s(FEe);rwr=r(PPt,"tapas"),PPt.forEach(t),twr=r(wDe," \u2014 "),cY=n(wDe,"A",{href:!0});var BPt=s(cY);awr=r(BPt,"TFTapasForMaskedLM"),BPt.forEach(t),nwr=r(wDe," (TAPAS model)"),wDe.forEach(t),swr=i(le),JC=n(le,"LI",{});var ADe=s(JC);TEe=n(ADe,"STRONG",{});var IPt=s(TEe);lwr=r(IPt,"transfo-xl"),IPt.forEach(t),iwr=r(ADe," \u2014 "),mY=n(ADe,"A",{href:!0});var NPt=s(mY);dwr=r(NPt,"TFTransfoXLLMHeadModel"),NPt.forEach(t),cwr=r(ADe," (Transformer-XL model)"),ADe.forEach(t),mwr=i(le),YC=n(le,"LI",{});var LDe=s(YC);MEe=n(LDe,"STRONG",{});var qPt=s(MEe);fwr=r(qPt,"vit_mae"),qPt.forEach(t),gwr=r(LDe," \u2014 "),fY=n(LDe,"A",{href:!0});var jPt=s(fY);hwr=r(jPt,"TFViTMAEForPreTraining"),jPt.forEach(t),uwr=r(LDe," (ViTMAE model)"),LDe.forEach(t),pwr=i(le),KC=n(le,"LI",{});var yDe=s(KC);EEe=n(yDe,"STRONG",{});var DPt=s(EEe);_wr=r(DPt,"xlm"),DPt.forEach(t),bwr=r(yDe," \u2014 "),gY=n(yDe,"A",{href:!0});var GPt=s(gY);vwr=r(GPt,"TFXLMWithLMHeadModel"),GPt.forEach(t),Fwr=r(yDe," (XLM model)"),yDe.forEach(t),Twr=i(le),ZC=n(le,"LI",{});var xDe=s(ZC);CEe=n(xDe,"STRONG",{});var OPt=s(CEe);Mwr=r(OPt,"xlm-roberta"),OPt.forEach(t),Ewr=r(xDe," \u2014 "),hY=n(xDe,"A",{href:!0});var VPt=s(hY);Cwr=r(VPt,"TFXLMRobertaForMaskedLM"),VPt.forEach(t),wwr=r(xDe," (XLM-RoBERTa model)"),xDe.forEach(t),Awr=i(le),e5=n(le,"LI",{});var $De=s(e5);wEe=n($De,"STRONG",{});var XPt=s(wEe);Lwr=r(XPt,"xlnet"),XPt.forEach(t),ywr=r($De," \u2014 "),uY=n($De,"A",{href:!0});var zPt=s(uY);xwr=r(zPt,"TFXLNetLMHeadModel"),zPt.forEach(t),$wr=r($De," (XLNet model)"),$De.forEach(t),le.forEach(t),kwr=i(Bl),T(o5.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),FWe=i(m),hc=n(m,"H2",{class:!0});var yHe=s(hc);r5=n(yHe,"A",{id:!0,class:!0,href:!0});var WPt=s(r5);AEe=n(WPt,"SPAN",{});var QPt=s(AEe);T(_x.$$.fragment,QPt),QPt.forEach(t),WPt.forEach(t),Swr=i(yHe),LEe=n(yHe,"SPAN",{});var HPt=s(LEe);Rwr=r(HPt,"TFAutoModelForCausalLM"),HPt.forEach(t),yHe.forEach(t),TWe=i(m),ar=n(m,"DIV",{class:!0});var Il=s(ar);T(bx.$$.fragment,Il),Pwr=i(Il),uc=n(Il,"P",{});var gae=s(uc);Bwr=r(gae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),pY=n(gae,"A",{href:!0});var UPt=s(pY);Iwr=r(UPt,"from_pretrained()"),UPt.forEach(t),Nwr=r(gae," class method or the "),_Y=n(gae,"A",{href:!0});var JPt=s(_Y);qwr=r(JPt,"from_config()"),JPt.forEach(t),jwr=r(gae,` class
method.`),gae.forEach(t),Dwr=i(Il),vx=n(Il,"P",{});var xHe=s(vx);Gwr=r(xHe,"This class cannot be instantiated directly using "),yEe=n(xHe,"CODE",{});var YPt=s(yEe);Owr=r(YPt,"__init__()"),YPt.forEach(t),Vwr=r(xHe," (throws an error)."),xHe.forEach(t),Xwr=i(Il),Bt=n(Il,"DIV",{class:!0});var EL=s(Bt);T(Fx.$$.fragment,EL),zwr=i(EL),xEe=n(EL,"P",{});var KPt=s(xEe);Wwr=r(KPt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),KPt.forEach(t),Qwr=i(EL),pc=n(EL,"P",{});var hae=s(pc);Hwr=r(hae,`Note:
Loading a model from its configuration file does `),$Ee=n(hae,"STRONG",{});var ZPt=s($Ee);Uwr=r(ZPt,"not"),ZPt.forEach(t),Jwr=r(hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=n(hae,"A",{href:!0});var eBt=s(bY);Ywr=r(eBt,"from_pretrained()"),eBt.forEach(t),Kwr=r(hae," to load the model weights."),hae.forEach(t),Zwr=i(EL),T(t5.$$.fragment,EL),EL.forEach(t),eAr=i(Il),Sr=n(Il,"DIV",{class:!0});var Nl=s(Sr);T(Tx.$$.fragment,Nl),oAr=i(Nl),kEe=n(Nl,"P",{});var oBt=s(kEe);rAr=r(oBt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),oBt.forEach(t),tAr=i(Nl),cn=n(Nl,"P",{});var CL=s(cn);aAr=r(CL,"The model class to instantiate is selected based on the "),SEe=n(CL,"CODE",{});var rBt=s(SEe);nAr=r(rBt,"model_type"),rBt.forEach(t),sAr=r(CL,` property of the config object (either
passed as an argument or loaded from `),REe=n(CL,"CODE",{});var tBt=s(REe);lAr=r(tBt,"pretrained_model_name_or_path"),tBt.forEach(t),iAr=r(CL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PEe=n(CL,"CODE",{});var aBt=s(PEe);dAr=r(aBt,"pretrained_model_name_or_path"),aBt.forEach(t),cAr=r(CL,":"),CL.forEach(t),mAr=i(Nl),Me=n(Nl,"UL",{});var Ce=s(Me);a5=n(Ce,"LI",{});var kDe=s(a5);BEe=n(kDe,"STRONG",{});var nBt=s(BEe);fAr=r(nBt,"bert"),nBt.forEach(t),gAr=r(kDe," \u2014 "),vY=n(kDe,"A",{href:!0});var sBt=s(vY);hAr=r(sBt,"TFBertLMHeadModel"),sBt.forEach(t),uAr=r(kDe," (BERT model)"),kDe.forEach(t),pAr=i(Ce),n5=n(Ce,"LI",{});var SDe=s(n5);IEe=n(SDe,"STRONG",{});var lBt=s(IEe);_Ar=r(lBt,"camembert"),lBt.forEach(t),bAr=r(SDe," \u2014 "),FY=n(SDe,"A",{href:!0});var iBt=s(FY);vAr=r(iBt,"TFCamembertForCausalLM"),iBt.forEach(t),FAr=r(SDe," (CamemBERT model)"),SDe.forEach(t),TAr=i(Ce),s5=n(Ce,"LI",{});var RDe=s(s5);NEe=n(RDe,"STRONG",{});var dBt=s(NEe);MAr=r(dBt,"ctrl"),dBt.forEach(t),EAr=r(RDe," \u2014 "),TY=n(RDe,"A",{href:!0});var cBt=s(TY);CAr=r(cBt,"TFCTRLLMHeadModel"),cBt.forEach(t),wAr=r(RDe," (CTRL model)"),RDe.forEach(t),AAr=i(Ce),l5=n(Ce,"LI",{});var PDe=s(l5);qEe=n(PDe,"STRONG",{});var mBt=s(qEe);LAr=r(mBt,"gpt2"),mBt.forEach(t),yAr=r(PDe," \u2014 "),MY=n(PDe,"A",{href:!0});var fBt=s(MY);xAr=r(fBt,"TFGPT2LMHeadModel"),fBt.forEach(t),$Ar=r(PDe," (OpenAI GPT-2 model)"),PDe.forEach(t),kAr=i(Ce),i5=n(Ce,"LI",{});var BDe=s(i5);jEe=n(BDe,"STRONG",{});var gBt=s(jEe);SAr=r(gBt,"gptj"),gBt.forEach(t),RAr=r(BDe," \u2014 "),EY=n(BDe,"A",{href:!0});var hBt=s(EY);PAr=r(hBt,"TFGPTJForCausalLM"),hBt.forEach(t),BAr=r(BDe," (GPT-J model)"),BDe.forEach(t),IAr=i(Ce),d5=n(Ce,"LI",{});var IDe=s(d5);DEe=n(IDe,"STRONG",{});var uBt=s(DEe);NAr=r(uBt,"openai-gpt"),uBt.forEach(t),qAr=r(IDe," \u2014 "),CY=n(IDe,"A",{href:!0});var pBt=s(CY);jAr=r(pBt,"TFOpenAIGPTLMHeadModel"),pBt.forEach(t),DAr=r(IDe," (OpenAI GPT model)"),IDe.forEach(t),GAr=i(Ce),c5=n(Ce,"LI",{});var NDe=s(c5);GEe=n(NDe,"STRONG",{});var _Bt=s(GEe);OAr=r(_Bt,"opt"),_Bt.forEach(t),VAr=r(NDe," \u2014 "),wY=n(NDe,"A",{href:!0});var bBt=s(wY);XAr=r(bBt,"TFOPTForCausalLM"),bBt.forEach(t),zAr=r(NDe," (OPT model)"),NDe.forEach(t),WAr=i(Ce),m5=n(Ce,"LI",{});var qDe=s(m5);OEe=n(qDe,"STRONG",{});var vBt=s(OEe);QAr=r(vBt,"rembert"),vBt.forEach(t),HAr=r(qDe," \u2014 "),AY=n(qDe,"A",{href:!0});var FBt=s(AY);UAr=r(FBt,"TFRemBertForCausalLM"),FBt.forEach(t),JAr=r(qDe," (RemBERT model)"),qDe.forEach(t),YAr=i(Ce),f5=n(Ce,"LI",{});var jDe=s(f5);VEe=n(jDe,"STRONG",{});var TBt=s(VEe);KAr=r(TBt,"roberta"),TBt.forEach(t),ZAr=r(jDe," \u2014 "),LY=n(jDe,"A",{href:!0});var MBt=s(LY);e6r=r(MBt,"TFRobertaForCausalLM"),MBt.forEach(t),o6r=r(jDe," (RoBERTa model)"),jDe.forEach(t),r6r=i(Ce),g5=n(Ce,"LI",{});var DDe=s(g5);XEe=n(DDe,"STRONG",{});var EBt=s(XEe);t6r=r(EBt,"roformer"),EBt.forEach(t),a6r=r(DDe," \u2014 "),yY=n(DDe,"A",{href:!0});var CBt=s(yY);n6r=r(CBt,"TFRoFormerForCausalLM"),CBt.forEach(t),s6r=r(DDe," (RoFormer model)"),DDe.forEach(t),l6r=i(Ce),h5=n(Ce,"LI",{});var GDe=s(h5);zEe=n(GDe,"STRONG",{});var wBt=s(zEe);i6r=r(wBt,"transfo-xl"),wBt.forEach(t),d6r=r(GDe," \u2014 "),xY=n(GDe,"A",{href:!0});var ABt=s(xY);c6r=r(ABt,"TFTransfoXLLMHeadModel"),ABt.forEach(t),m6r=r(GDe," (Transformer-XL model)"),GDe.forEach(t),f6r=i(Ce),u5=n(Ce,"LI",{});var ODe=s(u5);WEe=n(ODe,"STRONG",{});var LBt=s(WEe);g6r=r(LBt,"xlm"),LBt.forEach(t),h6r=r(ODe," \u2014 "),$Y=n(ODe,"A",{href:!0});var yBt=s($Y);u6r=r(yBt,"TFXLMWithLMHeadModel"),yBt.forEach(t),p6r=r(ODe," (XLM model)"),ODe.forEach(t),_6r=i(Ce),p5=n(Ce,"LI",{});var VDe=s(p5);QEe=n(VDe,"STRONG",{});var xBt=s(QEe);b6r=r(xBt,"xlnet"),xBt.forEach(t),v6r=r(VDe," \u2014 "),kY=n(VDe,"A",{href:!0});var $Bt=s(kY);F6r=r($Bt,"TFXLNetLMHeadModel"),$Bt.forEach(t),T6r=r(VDe," (XLNet model)"),VDe.forEach(t),Ce.forEach(t),M6r=i(Nl),T(_5.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),MWe=i(m),_c=n(m,"H2",{class:!0});var $He=s(_c);b5=n($He,"A",{id:!0,class:!0,href:!0});var kBt=s(b5);HEe=n(kBt,"SPAN",{});var SBt=s(HEe);T(Mx.$$.fragment,SBt),SBt.forEach(t),kBt.forEach(t),E6r=i($He),UEe=n($He,"SPAN",{});var RBt=s(UEe);C6r=r(RBt,"TFAutoModelForImageClassification"),RBt.forEach(t),$He.forEach(t),EWe=i(m),nr=n(m,"DIV",{class:!0});var ql=s(nr);T(Ex.$$.fragment,ql),w6r=i(ql),bc=n(ql,"P",{});var uae=s(bc);A6r=r(uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SY=n(uae,"A",{href:!0});var PBt=s(SY);L6r=r(PBt,"from_pretrained()"),PBt.forEach(t),y6r=r(uae," class method or the "),RY=n(uae,"A",{href:!0});var BBt=s(RY);x6r=r(BBt,"from_config()"),BBt.forEach(t),$6r=r(uae,` class
method.`),uae.forEach(t),k6r=i(ql),Cx=n(ql,"P",{});var kHe=s(Cx);S6r=r(kHe,"This class cannot be instantiated directly using "),JEe=n(kHe,"CODE",{});var IBt=s(JEe);R6r=r(IBt,"__init__()"),IBt.forEach(t),P6r=r(kHe," (throws an error)."),kHe.forEach(t),B6r=i(ql),It=n(ql,"DIV",{class:!0});var wL=s(It);T(wx.$$.fragment,wL),I6r=i(wL),YEe=n(wL,"P",{});var NBt=s(YEe);N6r=r(NBt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),NBt.forEach(t),q6r=i(wL),vc=n(wL,"P",{});var pae=s(vc);j6r=r(pae,`Note:
Loading a model from its configuration file does `),KEe=n(pae,"STRONG",{});var qBt=s(KEe);D6r=r(qBt,"not"),qBt.forEach(t),G6r=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=n(pae,"A",{href:!0});var jBt=s(PY);O6r=r(jBt,"from_pretrained()"),jBt.forEach(t),V6r=r(pae," to load the model weights."),pae.forEach(t),X6r=i(wL),T(v5.$$.fragment,wL),wL.forEach(t),z6r=i(ql),Rr=n(ql,"DIV",{class:!0});var jl=s(Rr);T(Ax.$$.fragment,jl),W6r=i(jl),ZEe=n(jl,"P",{});var DBt=s(ZEe);Q6r=r(DBt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),DBt.forEach(t),H6r=i(jl),mn=n(jl,"P",{});var AL=s(mn);U6r=r(AL,"The model class to instantiate is selected based on the "),eCe=n(AL,"CODE",{});var GBt=s(eCe);J6r=r(GBt,"model_type"),GBt.forEach(t),Y6r=r(AL,` property of the config object (either
passed as an argument or loaded from `),oCe=n(AL,"CODE",{});var OBt=s(oCe);K6r=r(OBt,"pretrained_model_name_or_path"),OBt.forEach(t),Z6r=r(AL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rCe=n(AL,"CODE",{});var VBt=s(rCe);e7r=r(VBt,"pretrained_model_name_or_path"),VBt.forEach(t),o7r=r(AL,":"),AL.forEach(t),r7r=i(jl),Ve=n(jl,"UL",{});var Mo=s(Ve);F5=n(Mo,"LI",{});var XDe=s(F5);tCe=n(XDe,"STRONG",{});var XBt=s(tCe);t7r=r(XBt,"convnext"),XBt.forEach(t),a7r=r(XDe," \u2014 "),BY=n(XDe,"A",{href:!0});var zBt=s(BY);n7r=r(zBt,"TFConvNextForImageClassification"),zBt.forEach(t),s7r=r(XDe," (ConvNeXT model)"),XDe.forEach(t),l7r=i(Mo),T5=n(Mo,"LI",{});var zDe=s(T5);aCe=n(zDe,"STRONG",{});var WBt=s(aCe);i7r=r(WBt,"data2vec-vision"),WBt.forEach(t),d7r=r(zDe," \u2014 "),IY=n(zDe,"A",{href:!0});var QBt=s(IY);c7r=r(QBt,"TFData2VecVisionForImageClassification"),QBt.forEach(t),m7r=r(zDe," (Data2VecVision model)"),zDe.forEach(t),f7r=i(Mo),el=n(Mo,"LI",{});var ZS=s(el);nCe=n(ZS,"STRONG",{});var HBt=s(nCe);g7r=r(HBt,"deit"),HBt.forEach(t),h7r=r(ZS," \u2014 "),NY=n(ZS,"A",{href:!0});var UBt=s(NY);u7r=r(UBt,"TFDeiTForImageClassification"),UBt.forEach(t),p7r=r(ZS," or "),qY=n(ZS,"A",{href:!0});var JBt=s(qY);_7r=r(JBt,"TFDeiTForImageClassificationWithTeacher"),JBt.forEach(t),b7r=r(ZS," (DeiT model)"),ZS.forEach(t),v7r=i(Mo),M5=n(Mo,"LI",{});var WDe=s(M5);sCe=n(WDe,"STRONG",{});var YBt=s(sCe);F7r=r(YBt,"regnet"),YBt.forEach(t),T7r=r(WDe," \u2014 "),jY=n(WDe,"A",{href:!0});var KBt=s(jY);M7r=r(KBt,"TFRegNetForImageClassification"),KBt.forEach(t),E7r=r(WDe," (RegNet model)"),WDe.forEach(t),C7r=i(Mo),E5=n(Mo,"LI",{});var QDe=s(E5);lCe=n(QDe,"STRONG",{});var ZBt=s(lCe);w7r=r(ZBt,"resnet"),ZBt.forEach(t),A7r=r(QDe," \u2014 "),DY=n(QDe,"A",{href:!0});var eIt=s(DY);L7r=r(eIt,"TFResNetForImageClassification"),eIt.forEach(t),y7r=r(QDe," (ResNet model)"),QDe.forEach(t),x7r=i(Mo),C5=n(Mo,"LI",{});var HDe=s(C5);iCe=n(HDe,"STRONG",{});var oIt=s(iCe);$7r=r(oIt,"segformer"),oIt.forEach(t),k7r=r(HDe," \u2014 "),GY=n(HDe,"A",{href:!0});var rIt=s(GY);S7r=r(rIt,"TFSegformerForImageClassification"),rIt.forEach(t),R7r=r(HDe," (SegFormer model)"),HDe.forEach(t),P7r=i(Mo),w5=n(Mo,"LI",{});var UDe=s(w5);dCe=n(UDe,"STRONG",{});var tIt=s(dCe);B7r=r(tIt,"swin"),tIt.forEach(t),I7r=r(UDe," \u2014 "),OY=n(UDe,"A",{href:!0});var aIt=s(OY);N7r=r(aIt,"TFSwinForImageClassification"),aIt.forEach(t),q7r=r(UDe," (Swin Transformer model)"),UDe.forEach(t),j7r=i(Mo),A5=n(Mo,"LI",{});var JDe=s(A5);cCe=n(JDe,"STRONG",{});var nIt=s(cCe);D7r=r(nIt,"vit"),nIt.forEach(t),G7r=r(JDe," \u2014 "),VY=n(JDe,"A",{href:!0});var sIt=s(VY);O7r=r(sIt,"TFViTForImageClassification"),sIt.forEach(t),V7r=r(JDe," (ViT model)"),JDe.forEach(t),Mo.forEach(t),X7r=i(jl),T(L5.$$.fragment,jl),jl.forEach(t),ql.forEach(t),CWe=i(m),Fc=n(m,"H2",{class:!0});var SHe=s(Fc);y5=n(SHe,"A",{id:!0,class:!0,href:!0});var lIt=s(y5);mCe=n(lIt,"SPAN",{});var iIt=s(mCe);T(Lx.$$.fragment,iIt),iIt.forEach(t),lIt.forEach(t),z7r=i(SHe),fCe=n(SHe,"SPAN",{});var dIt=s(fCe);W7r=r(dIt,"TFAutoModelForMaskedLM"),dIt.forEach(t),SHe.forEach(t),wWe=i(m),sr=n(m,"DIV",{class:!0});var Dl=s(sr);T(yx.$$.fragment,Dl),Q7r=i(Dl),Tc=n(Dl,"P",{});var _ae=s(Tc);H7r=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XY=n(_ae,"A",{href:!0});var cIt=s(XY);U7r=r(cIt,"from_pretrained()"),cIt.forEach(t),J7r=r(_ae," class method or the "),zY=n(_ae,"A",{href:!0});var mIt=s(zY);Y7r=r(mIt,"from_config()"),mIt.forEach(t),K7r=r(_ae,` class
method.`),_ae.forEach(t),Z7r=i(Dl),xx=n(Dl,"P",{});var RHe=s(xx);eLr=r(RHe,"This class cannot be instantiated directly using "),gCe=n(RHe,"CODE",{});var fIt=s(gCe);oLr=r(fIt,"__init__()"),fIt.forEach(t),rLr=r(RHe," (throws an error)."),RHe.forEach(t),tLr=i(Dl),Nt=n(Dl,"DIV",{class:!0});var LL=s(Nt);T($x.$$.fragment,LL),aLr=i(LL),hCe=n(LL,"P",{});var gIt=s(hCe);nLr=r(gIt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),gIt.forEach(t),sLr=i(LL),Mc=n(LL,"P",{});var bae=s(Mc);lLr=r(bae,`Note:
Loading a model from its configuration file does `),uCe=n(bae,"STRONG",{});var hIt=s(uCe);iLr=r(hIt,"not"),hIt.forEach(t),dLr=r(bae,` load the model weights. It only affects the
model\u2019s configuration. Use `),WY=n(bae,"A",{href:!0});var uIt=s(WY);cLr=r(uIt,"from_pretrained()"),uIt.forEach(t),mLr=r(bae," to load the model weights."),bae.forEach(t),fLr=i(LL),T(x5.$$.fragment,LL),LL.forEach(t),gLr=i(Dl),Pr=n(Dl,"DIV",{class:!0});var Gl=s(Pr);T(kx.$$.fragment,Gl),hLr=i(Gl),pCe=n(Gl,"P",{});var pIt=s(pCe);uLr=r(pIt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pIt.forEach(t),pLr=i(Gl),fn=n(Gl,"P",{});var yL=s(fn);_Lr=r(yL,"The model class to instantiate is selected based on the "),_Ce=n(yL,"CODE",{});var _It=s(_Ce);bLr=r(_It,"model_type"),_It.forEach(t),vLr=r(yL,` property of the config object (either
passed as an argument or loaded from `),bCe=n(yL,"CODE",{});var bIt=s(bCe);FLr=r(bIt,"pretrained_model_name_or_path"),bIt.forEach(t),TLr=r(yL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vCe=n(yL,"CODE",{});var vIt=s(vCe);MLr=r(vIt,"pretrained_model_name_or_path"),vIt.forEach(t),ELr=r(yL,":"),yL.forEach(t),CLr=i(Gl),ie=n(Gl,"UL",{});var ge=s(ie);$5=n(ge,"LI",{});var YDe=s($5);FCe=n(YDe,"STRONG",{});var FIt=s(FCe);wLr=r(FIt,"albert"),FIt.forEach(t),ALr=r(YDe," \u2014 "),QY=n(YDe,"A",{href:!0});var TIt=s(QY);LLr=r(TIt,"TFAlbertForMaskedLM"),TIt.forEach(t),yLr=r(YDe," (ALBERT model)"),YDe.forEach(t),xLr=i(ge),k5=n(ge,"LI",{});var KDe=s(k5);TCe=n(KDe,"STRONG",{});var MIt=s(TCe);$Lr=r(MIt,"bert"),MIt.forEach(t),kLr=r(KDe," \u2014 "),HY=n(KDe,"A",{href:!0});var EIt=s(HY);SLr=r(EIt,"TFBertForMaskedLM"),EIt.forEach(t),RLr=r(KDe," (BERT model)"),KDe.forEach(t),PLr=i(ge),S5=n(ge,"LI",{});var ZDe=s(S5);MCe=n(ZDe,"STRONG",{});var CIt=s(MCe);BLr=r(CIt,"camembert"),CIt.forEach(t),ILr=r(ZDe," \u2014 "),UY=n(ZDe,"A",{href:!0});var wIt=s(UY);NLr=r(wIt,"TFCamembertForMaskedLM"),wIt.forEach(t),qLr=r(ZDe," (CamemBERT model)"),ZDe.forEach(t),jLr=i(ge),R5=n(ge,"LI",{});var eGe=s(R5);ECe=n(eGe,"STRONG",{});var AIt=s(ECe);DLr=r(AIt,"convbert"),AIt.forEach(t),GLr=r(eGe," \u2014 "),JY=n(eGe,"A",{href:!0});var LIt=s(JY);OLr=r(LIt,"TFConvBertForMaskedLM"),LIt.forEach(t),VLr=r(eGe," (ConvBERT model)"),eGe.forEach(t),XLr=i(ge),P5=n(ge,"LI",{});var oGe=s(P5);CCe=n(oGe,"STRONG",{});var yIt=s(CCe);zLr=r(yIt,"deberta"),yIt.forEach(t),WLr=r(oGe," \u2014 "),YY=n(oGe,"A",{href:!0});var xIt=s(YY);QLr=r(xIt,"TFDebertaForMaskedLM"),xIt.forEach(t),HLr=r(oGe," (DeBERTa model)"),oGe.forEach(t),ULr=i(ge),B5=n(ge,"LI",{});var rGe=s(B5);wCe=n(rGe,"STRONG",{});var $It=s(wCe);JLr=r($It,"deberta-v2"),$It.forEach(t),YLr=r(rGe," \u2014 "),KY=n(rGe,"A",{href:!0});var kIt=s(KY);KLr=r(kIt,"TFDebertaV2ForMaskedLM"),kIt.forEach(t),ZLr=r(rGe," (DeBERTa-v2 model)"),rGe.forEach(t),eyr=i(ge),I5=n(ge,"LI",{});var tGe=s(I5);ACe=n(tGe,"STRONG",{});var SIt=s(ACe);oyr=r(SIt,"distilbert"),SIt.forEach(t),ryr=r(tGe," \u2014 "),ZY=n(tGe,"A",{href:!0});var RIt=s(ZY);tyr=r(RIt,"TFDistilBertForMaskedLM"),RIt.forEach(t),ayr=r(tGe," (DistilBERT model)"),tGe.forEach(t),nyr=i(ge),N5=n(ge,"LI",{});var aGe=s(N5);LCe=n(aGe,"STRONG",{});var PIt=s(LCe);syr=r(PIt,"electra"),PIt.forEach(t),lyr=r(aGe," \u2014 "),eK=n(aGe,"A",{href:!0});var BIt=s(eK);iyr=r(BIt,"TFElectraForMaskedLM"),BIt.forEach(t),dyr=r(aGe," (ELECTRA model)"),aGe.forEach(t),cyr=i(ge),q5=n(ge,"LI",{});var nGe=s(q5);yCe=n(nGe,"STRONG",{});var IIt=s(yCe);myr=r(IIt,"flaubert"),IIt.forEach(t),fyr=r(nGe," \u2014 "),oK=n(nGe,"A",{href:!0});var NIt=s(oK);gyr=r(NIt,"TFFlaubertWithLMHeadModel"),NIt.forEach(t),hyr=r(nGe," (FlauBERT model)"),nGe.forEach(t),uyr=i(ge),j5=n(ge,"LI",{});var sGe=s(j5);xCe=n(sGe,"STRONG",{});var qIt=s(xCe);pyr=r(qIt,"funnel"),qIt.forEach(t),_yr=r(sGe," \u2014 "),rK=n(sGe,"A",{href:!0});var jIt=s(rK);byr=r(jIt,"TFFunnelForMaskedLM"),jIt.forEach(t),vyr=r(sGe," (Funnel Transformer model)"),sGe.forEach(t),Fyr=i(ge),D5=n(ge,"LI",{});var lGe=s(D5);$Ce=n(lGe,"STRONG",{});var DIt=s($Ce);Tyr=r(DIt,"layoutlm"),DIt.forEach(t),Myr=r(lGe," \u2014 "),tK=n(lGe,"A",{href:!0});var GIt=s(tK);Eyr=r(GIt,"TFLayoutLMForMaskedLM"),GIt.forEach(t),Cyr=r(lGe," (LayoutLM model)"),lGe.forEach(t),wyr=i(ge),G5=n(ge,"LI",{});var iGe=s(G5);kCe=n(iGe,"STRONG",{});var OIt=s(kCe);Ayr=r(OIt,"longformer"),OIt.forEach(t),Lyr=r(iGe," \u2014 "),aK=n(iGe,"A",{href:!0});var VIt=s(aK);yyr=r(VIt,"TFLongformerForMaskedLM"),VIt.forEach(t),xyr=r(iGe," (Longformer model)"),iGe.forEach(t),$yr=i(ge),O5=n(ge,"LI",{});var dGe=s(O5);SCe=n(dGe,"STRONG",{});var XIt=s(SCe);kyr=r(XIt,"mobilebert"),XIt.forEach(t),Syr=r(dGe," \u2014 "),nK=n(dGe,"A",{href:!0});var zIt=s(nK);Ryr=r(zIt,"TFMobileBertForMaskedLM"),zIt.forEach(t),Pyr=r(dGe," (MobileBERT model)"),dGe.forEach(t),Byr=i(ge),V5=n(ge,"LI",{});var cGe=s(V5);RCe=n(cGe,"STRONG",{});var WIt=s(RCe);Iyr=r(WIt,"mpnet"),WIt.forEach(t),Nyr=r(cGe," \u2014 "),sK=n(cGe,"A",{href:!0});var QIt=s(sK);qyr=r(QIt,"TFMPNetForMaskedLM"),QIt.forEach(t),jyr=r(cGe," (MPNet model)"),cGe.forEach(t),Dyr=i(ge),X5=n(ge,"LI",{});var mGe=s(X5);PCe=n(mGe,"STRONG",{});var HIt=s(PCe);Gyr=r(HIt,"rembert"),HIt.forEach(t),Oyr=r(mGe," \u2014 "),lK=n(mGe,"A",{href:!0});var UIt=s(lK);Vyr=r(UIt,"TFRemBertForMaskedLM"),UIt.forEach(t),Xyr=r(mGe," (RemBERT model)"),mGe.forEach(t),zyr=i(ge),z5=n(ge,"LI",{});var fGe=s(z5);BCe=n(fGe,"STRONG",{});var JIt=s(BCe);Wyr=r(JIt,"roberta"),JIt.forEach(t),Qyr=r(fGe," \u2014 "),iK=n(fGe,"A",{href:!0});var YIt=s(iK);Hyr=r(YIt,"TFRobertaForMaskedLM"),YIt.forEach(t),Uyr=r(fGe," (RoBERTa model)"),fGe.forEach(t),Jyr=i(ge),W5=n(ge,"LI",{});var gGe=s(W5);ICe=n(gGe,"STRONG",{});var KIt=s(ICe);Yyr=r(KIt,"roformer"),KIt.forEach(t),Kyr=r(gGe," \u2014 "),dK=n(gGe,"A",{href:!0});var ZIt=s(dK);Zyr=r(ZIt,"TFRoFormerForMaskedLM"),ZIt.forEach(t),e8r=r(gGe," (RoFormer model)"),gGe.forEach(t),o8r=i(ge),Q5=n(ge,"LI",{});var hGe=s(Q5);NCe=n(hGe,"STRONG",{});var eNt=s(NCe);r8r=r(eNt,"tapas"),eNt.forEach(t),t8r=r(hGe," \u2014 "),cK=n(hGe,"A",{href:!0});var oNt=s(cK);a8r=r(oNt,"TFTapasForMaskedLM"),oNt.forEach(t),n8r=r(hGe," (TAPAS model)"),hGe.forEach(t),s8r=i(ge),H5=n(ge,"LI",{});var uGe=s(H5);qCe=n(uGe,"STRONG",{});var rNt=s(qCe);l8r=r(rNt,"xlm"),rNt.forEach(t),i8r=r(uGe," \u2014 "),mK=n(uGe,"A",{href:!0});var tNt=s(mK);d8r=r(tNt,"TFXLMWithLMHeadModel"),tNt.forEach(t),c8r=r(uGe," (XLM model)"),uGe.forEach(t),m8r=i(ge),U5=n(ge,"LI",{});var pGe=s(U5);jCe=n(pGe,"STRONG",{});var aNt=s(jCe);f8r=r(aNt,"xlm-roberta"),aNt.forEach(t),g8r=r(pGe," \u2014 "),fK=n(pGe,"A",{href:!0});var nNt=s(fK);h8r=r(nNt,"TFXLMRobertaForMaskedLM"),nNt.forEach(t),u8r=r(pGe," (XLM-RoBERTa model)"),pGe.forEach(t),ge.forEach(t),p8r=i(Gl),T(J5.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),AWe=i(m),Ec=n(m,"H2",{class:!0});var PHe=s(Ec);Y5=n(PHe,"A",{id:!0,class:!0,href:!0});var sNt=s(Y5);DCe=n(sNt,"SPAN",{});var lNt=s(DCe);T(Sx.$$.fragment,lNt),lNt.forEach(t),sNt.forEach(t),_8r=i(PHe),GCe=n(PHe,"SPAN",{});var iNt=s(GCe);b8r=r(iNt,"TFAutoModelForSeq2SeqLM"),iNt.forEach(t),PHe.forEach(t),LWe=i(m),lr=n(m,"DIV",{class:!0});var Ol=s(lr);T(Rx.$$.fragment,Ol),v8r=i(Ol),Cc=n(Ol,"P",{});var vae=s(Cc);F8r=r(vae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gK=n(vae,"A",{href:!0});var dNt=s(gK);T8r=r(dNt,"from_pretrained()"),dNt.forEach(t),M8r=r(vae," class method or the "),hK=n(vae,"A",{href:!0});var cNt=s(hK);E8r=r(cNt,"from_config()"),cNt.forEach(t),C8r=r(vae,` class
method.`),vae.forEach(t),w8r=i(Ol),Px=n(Ol,"P",{});var BHe=s(Px);A8r=r(BHe,"This class cannot be instantiated directly using "),OCe=n(BHe,"CODE",{});var mNt=s(OCe);L8r=r(mNt,"__init__()"),mNt.forEach(t),y8r=r(BHe," (throws an error)."),BHe.forEach(t),x8r=i(Ol),qt=n(Ol,"DIV",{class:!0});var xL=s(qt);T(Bx.$$.fragment,xL),$8r=i(xL),VCe=n(xL,"P",{});var fNt=s(VCe);k8r=r(fNt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fNt.forEach(t),S8r=i(xL),wc=n(xL,"P",{});var Fae=s(wc);R8r=r(Fae,`Note:
Loading a model from its configuration file does `),XCe=n(Fae,"STRONG",{});var gNt=s(XCe);P8r=r(gNt,"not"),gNt.forEach(t),B8r=r(Fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(Fae,"A",{href:!0});var hNt=s(uK);I8r=r(hNt,"from_pretrained()"),hNt.forEach(t),N8r=r(Fae," to load the model weights."),Fae.forEach(t),q8r=i(xL),T(K5.$$.fragment,xL),xL.forEach(t),j8r=i(Ol),Br=n(Ol,"DIV",{class:!0});var Vl=s(Br);T(Ix.$$.fragment,Vl),D8r=i(Vl),zCe=n(Vl,"P",{});var uNt=s(zCe);G8r=r(uNt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uNt.forEach(t),O8r=i(Vl),gn=n(Vl,"P",{});var $L=s(gn);V8r=r($L,"The model class to instantiate is selected based on the "),WCe=n($L,"CODE",{});var pNt=s(WCe);X8r=r(pNt,"model_type"),pNt.forEach(t),z8r=r($L,` property of the config object (either
passed as an argument or loaded from `),QCe=n($L,"CODE",{});var _Nt=s(QCe);W8r=r(_Nt,"pretrained_model_name_or_path"),_Nt.forEach(t),Q8r=r($L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HCe=n($L,"CODE",{});var bNt=s(HCe);H8r=r(bNt,"pretrained_model_name_or_path"),bNt.forEach(t),U8r=r($L,":"),$L.forEach(t),J8r=i(Vl),ye=n(Vl,"UL",{});var Ie=s(ye);Z5=n(Ie,"LI",{});var _Ge=s(Z5);UCe=n(_Ge,"STRONG",{});var vNt=s(UCe);Y8r=r(vNt,"bart"),vNt.forEach(t),K8r=r(_Ge," \u2014 "),pK=n(_Ge,"A",{href:!0});var FNt=s(pK);Z8r=r(FNt,"TFBartForConditionalGeneration"),FNt.forEach(t),e9r=r(_Ge," (BART model)"),_Ge.forEach(t),o9r=i(Ie),e3=n(Ie,"LI",{});var bGe=s(e3);JCe=n(bGe,"STRONG",{});var TNt=s(JCe);r9r=r(TNt,"blenderbot"),TNt.forEach(t),t9r=r(bGe," \u2014 "),_K=n(bGe,"A",{href:!0});var MNt=s(_K);a9r=r(MNt,"TFBlenderbotForConditionalGeneration"),MNt.forEach(t),n9r=r(bGe," (Blenderbot model)"),bGe.forEach(t),s9r=i(Ie),o3=n(Ie,"LI",{});var vGe=s(o3);YCe=n(vGe,"STRONG",{});var ENt=s(YCe);l9r=r(ENt,"blenderbot-small"),ENt.forEach(t),i9r=r(vGe," \u2014 "),bK=n(vGe,"A",{href:!0});var CNt=s(bK);d9r=r(CNt,"TFBlenderbotSmallForConditionalGeneration"),CNt.forEach(t),c9r=r(vGe," (BlenderbotSmall model)"),vGe.forEach(t),m9r=i(Ie),r3=n(Ie,"LI",{});var FGe=s(r3);KCe=n(FGe,"STRONG",{});var wNt=s(KCe);f9r=r(wNt,"encoder-decoder"),wNt.forEach(t),g9r=r(FGe," \u2014 "),vK=n(FGe,"A",{href:!0});var ANt=s(vK);h9r=r(ANt,"TFEncoderDecoderModel"),ANt.forEach(t),u9r=r(FGe," (Encoder decoder model)"),FGe.forEach(t),p9r=i(Ie),t3=n(Ie,"LI",{});var TGe=s(t3);ZCe=n(TGe,"STRONG",{});var LNt=s(ZCe);_9r=r(LNt,"led"),LNt.forEach(t),b9r=r(TGe," \u2014 "),FK=n(TGe,"A",{href:!0});var yNt=s(FK);v9r=r(yNt,"TFLEDForConditionalGeneration"),yNt.forEach(t),F9r=r(TGe," (LED model)"),TGe.forEach(t),T9r=i(Ie),a3=n(Ie,"LI",{});var MGe=s(a3);e5e=n(MGe,"STRONG",{});var xNt=s(e5e);M9r=r(xNt,"marian"),xNt.forEach(t),E9r=r(MGe," \u2014 "),TK=n(MGe,"A",{href:!0});var $Nt=s(TK);C9r=r($Nt,"TFMarianMTModel"),$Nt.forEach(t),w9r=r(MGe," (Marian model)"),MGe.forEach(t),A9r=i(Ie),n3=n(Ie,"LI",{});var EGe=s(n3);o5e=n(EGe,"STRONG",{});var kNt=s(o5e);L9r=r(kNt,"mbart"),kNt.forEach(t),y9r=r(EGe," \u2014 "),MK=n(EGe,"A",{href:!0});var SNt=s(MK);x9r=r(SNt,"TFMBartForConditionalGeneration"),SNt.forEach(t),$9r=r(EGe," (mBART model)"),EGe.forEach(t),k9r=i(Ie),s3=n(Ie,"LI",{});var CGe=s(s3);r5e=n(CGe,"STRONG",{});var RNt=s(r5e);S9r=r(RNt,"mt5"),RNt.forEach(t),R9r=r(CGe," \u2014 "),EK=n(CGe,"A",{href:!0});var PNt=s(EK);P9r=r(PNt,"TFMT5ForConditionalGeneration"),PNt.forEach(t),B9r=r(CGe," (MT5 model)"),CGe.forEach(t),I9r=i(Ie),l3=n(Ie,"LI",{});var wGe=s(l3);t5e=n(wGe,"STRONG",{});var BNt=s(t5e);N9r=r(BNt,"pegasus"),BNt.forEach(t),q9r=r(wGe," \u2014 "),CK=n(wGe,"A",{href:!0});var INt=s(CK);j9r=r(INt,"TFPegasusForConditionalGeneration"),INt.forEach(t),D9r=r(wGe," (Pegasus model)"),wGe.forEach(t),G9r=i(Ie),i3=n(Ie,"LI",{});var AGe=s(i3);a5e=n(AGe,"STRONG",{});var NNt=s(a5e);O9r=r(NNt,"t5"),NNt.forEach(t),V9r=r(AGe," \u2014 "),wK=n(AGe,"A",{href:!0});var qNt=s(wK);X9r=r(qNt,"TFT5ForConditionalGeneration"),qNt.forEach(t),z9r=r(AGe," (T5 model)"),AGe.forEach(t),Ie.forEach(t),W9r=i(Vl),T(d3.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),yWe=i(m),Ac=n(m,"H2",{class:!0});var IHe=s(Ac);c3=n(IHe,"A",{id:!0,class:!0,href:!0});var jNt=s(c3);n5e=n(jNt,"SPAN",{});var DNt=s(n5e);T(Nx.$$.fragment,DNt),DNt.forEach(t),jNt.forEach(t),Q9r=i(IHe),s5e=n(IHe,"SPAN",{});var GNt=s(s5e);H9r=r(GNt,"TFAutoModelForSequenceClassification"),GNt.forEach(t),IHe.forEach(t),xWe=i(m),ir=n(m,"DIV",{class:!0});var Xl=s(ir);T(qx.$$.fragment,Xl),U9r=i(Xl),Lc=n(Xl,"P",{});var Tae=s(Lc);J9r=r(Tae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AK=n(Tae,"A",{href:!0});var ONt=s(AK);Y9r=r(ONt,"from_pretrained()"),ONt.forEach(t),K9r=r(Tae," class method or the "),LK=n(Tae,"A",{href:!0});var VNt=s(LK);Z9r=r(VNt,"from_config()"),VNt.forEach(t),exr=r(Tae,` class
method.`),Tae.forEach(t),oxr=i(Xl),jx=n(Xl,"P",{});var NHe=s(jx);rxr=r(NHe,"This class cannot be instantiated directly using "),l5e=n(NHe,"CODE",{});var XNt=s(l5e);txr=r(XNt,"__init__()"),XNt.forEach(t),axr=r(NHe," (throws an error)."),NHe.forEach(t),nxr=i(Xl),jt=n(Xl,"DIV",{class:!0});var kL=s(jt);T(Dx.$$.fragment,kL),sxr=i(kL),i5e=n(kL,"P",{});var zNt=s(i5e);lxr=r(zNt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zNt.forEach(t),ixr=i(kL),yc=n(kL,"P",{});var Mae=s(yc);dxr=r(Mae,`Note:
Loading a model from its configuration file does `),d5e=n(Mae,"STRONG",{});var WNt=s(d5e);cxr=r(WNt,"not"),WNt.forEach(t),mxr=r(Mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=n(Mae,"A",{href:!0});var QNt=s(yK);fxr=r(QNt,"from_pretrained()"),QNt.forEach(t),gxr=r(Mae," to load the model weights."),Mae.forEach(t),hxr=i(kL),T(m3.$$.fragment,kL),kL.forEach(t),uxr=i(Xl),Ir=n(Xl,"DIV",{class:!0});var zl=s(Ir);T(Gx.$$.fragment,zl),pxr=i(zl),c5e=n(zl,"P",{});var HNt=s(c5e);_xr=r(HNt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),HNt.forEach(t),bxr=i(zl),hn=n(zl,"P",{});var SL=s(hn);vxr=r(SL,"The model class to instantiate is selected based on the "),m5e=n(SL,"CODE",{});var UNt=s(m5e);Fxr=r(UNt,"model_type"),UNt.forEach(t),Txr=r(SL,` property of the config object (either
passed as an argument or loaded from `),f5e=n(SL,"CODE",{});var JNt=s(f5e);Mxr=r(JNt,"pretrained_model_name_or_path"),JNt.forEach(t),Exr=r(SL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g5e=n(SL,"CODE",{});var YNt=s(g5e);Cxr=r(YNt,"pretrained_model_name_or_path"),YNt.forEach(t),wxr=r(SL,":"),SL.forEach(t),Axr=i(zl),te=n(zl,"UL",{});var ne=s(te);f3=n(ne,"LI",{});var LGe=s(f3);h5e=n(LGe,"STRONG",{});var KNt=s(h5e);Lxr=r(KNt,"albert"),KNt.forEach(t),yxr=r(LGe," \u2014 "),xK=n(LGe,"A",{href:!0});var ZNt=s(xK);xxr=r(ZNt,"TFAlbertForSequenceClassification"),ZNt.forEach(t),$xr=r(LGe," (ALBERT model)"),LGe.forEach(t),kxr=i(ne),g3=n(ne,"LI",{});var yGe=s(g3);u5e=n(yGe,"STRONG",{});var eqt=s(u5e);Sxr=r(eqt,"bert"),eqt.forEach(t),Rxr=r(yGe," \u2014 "),$K=n(yGe,"A",{href:!0});var oqt=s($K);Pxr=r(oqt,"TFBertForSequenceClassification"),oqt.forEach(t),Bxr=r(yGe," (BERT model)"),yGe.forEach(t),Ixr=i(ne),h3=n(ne,"LI",{});var xGe=s(h3);p5e=n(xGe,"STRONG",{});var rqt=s(p5e);Nxr=r(rqt,"camembert"),rqt.forEach(t),qxr=r(xGe," \u2014 "),kK=n(xGe,"A",{href:!0});var tqt=s(kK);jxr=r(tqt,"TFCamembertForSequenceClassification"),tqt.forEach(t),Dxr=r(xGe," (CamemBERT model)"),xGe.forEach(t),Gxr=i(ne),u3=n(ne,"LI",{});var $Ge=s(u3);_5e=n($Ge,"STRONG",{});var aqt=s(_5e);Oxr=r(aqt,"convbert"),aqt.forEach(t),Vxr=r($Ge," \u2014 "),SK=n($Ge,"A",{href:!0});var nqt=s(SK);Xxr=r(nqt,"TFConvBertForSequenceClassification"),nqt.forEach(t),zxr=r($Ge," (ConvBERT model)"),$Ge.forEach(t),Wxr=i(ne),p3=n(ne,"LI",{});var kGe=s(p3);b5e=n(kGe,"STRONG",{});var sqt=s(b5e);Qxr=r(sqt,"ctrl"),sqt.forEach(t),Hxr=r(kGe," \u2014 "),RK=n(kGe,"A",{href:!0});var lqt=s(RK);Uxr=r(lqt,"TFCTRLForSequenceClassification"),lqt.forEach(t),Jxr=r(kGe," (CTRL model)"),kGe.forEach(t),Yxr=i(ne),_3=n(ne,"LI",{});var SGe=s(_3);v5e=n(SGe,"STRONG",{});var iqt=s(v5e);Kxr=r(iqt,"deberta"),iqt.forEach(t),Zxr=r(SGe," \u2014 "),PK=n(SGe,"A",{href:!0});var dqt=s(PK);e$r=r(dqt,"TFDebertaForSequenceClassification"),dqt.forEach(t),o$r=r(SGe," (DeBERTa model)"),SGe.forEach(t),r$r=i(ne),b3=n(ne,"LI",{});var RGe=s(b3);F5e=n(RGe,"STRONG",{});var cqt=s(F5e);t$r=r(cqt,"deberta-v2"),cqt.forEach(t),a$r=r(RGe," \u2014 "),BK=n(RGe,"A",{href:!0});var mqt=s(BK);n$r=r(mqt,"TFDebertaV2ForSequenceClassification"),mqt.forEach(t),s$r=r(RGe," (DeBERTa-v2 model)"),RGe.forEach(t),l$r=i(ne),v3=n(ne,"LI",{});var PGe=s(v3);T5e=n(PGe,"STRONG",{});var fqt=s(T5e);i$r=r(fqt,"distilbert"),fqt.forEach(t),d$r=r(PGe," \u2014 "),IK=n(PGe,"A",{href:!0});var gqt=s(IK);c$r=r(gqt,"TFDistilBertForSequenceClassification"),gqt.forEach(t),m$r=r(PGe," (DistilBERT model)"),PGe.forEach(t),f$r=i(ne),F3=n(ne,"LI",{});var BGe=s(F3);M5e=n(BGe,"STRONG",{});var hqt=s(M5e);g$r=r(hqt,"electra"),hqt.forEach(t),h$r=r(BGe," \u2014 "),NK=n(BGe,"A",{href:!0});var uqt=s(NK);u$r=r(uqt,"TFElectraForSequenceClassification"),uqt.forEach(t),p$r=r(BGe," (ELECTRA model)"),BGe.forEach(t),_$r=i(ne),T3=n(ne,"LI",{});var IGe=s(T3);E5e=n(IGe,"STRONG",{});var pqt=s(E5e);b$r=r(pqt,"flaubert"),pqt.forEach(t),v$r=r(IGe," \u2014 "),qK=n(IGe,"A",{href:!0});var _qt=s(qK);F$r=r(_qt,"TFFlaubertForSequenceClassification"),_qt.forEach(t),T$r=r(IGe," (FlauBERT model)"),IGe.forEach(t),M$r=i(ne),M3=n(ne,"LI",{});var NGe=s(M3);C5e=n(NGe,"STRONG",{});var bqt=s(C5e);E$r=r(bqt,"funnel"),bqt.forEach(t),C$r=r(NGe," \u2014 "),jK=n(NGe,"A",{href:!0});var vqt=s(jK);w$r=r(vqt,"TFFunnelForSequenceClassification"),vqt.forEach(t),A$r=r(NGe," (Funnel Transformer model)"),NGe.forEach(t),L$r=i(ne),E3=n(ne,"LI",{});var qGe=s(E3);w5e=n(qGe,"STRONG",{});var Fqt=s(w5e);y$r=r(Fqt,"gpt2"),Fqt.forEach(t),x$r=r(qGe," \u2014 "),DK=n(qGe,"A",{href:!0});var Tqt=s(DK);$$r=r(Tqt,"TFGPT2ForSequenceClassification"),Tqt.forEach(t),k$r=r(qGe," (OpenAI GPT-2 model)"),qGe.forEach(t),S$r=i(ne),C3=n(ne,"LI",{});var jGe=s(C3);A5e=n(jGe,"STRONG",{});var Mqt=s(A5e);R$r=r(Mqt,"gptj"),Mqt.forEach(t),P$r=r(jGe," \u2014 "),GK=n(jGe,"A",{href:!0});var Eqt=s(GK);B$r=r(Eqt,"TFGPTJForSequenceClassification"),Eqt.forEach(t),I$r=r(jGe," (GPT-J model)"),jGe.forEach(t),N$r=i(ne),w3=n(ne,"LI",{});var DGe=s(w3);L5e=n(DGe,"STRONG",{});var Cqt=s(L5e);q$r=r(Cqt,"layoutlm"),Cqt.forEach(t),j$r=r(DGe," \u2014 "),OK=n(DGe,"A",{href:!0});var wqt=s(OK);D$r=r(wqt,"TFLayoutLMForSequenceClassification"),wqt.forEach(t),G$r=r(DGe," (LayoutLM model)"),DGe.forEach(t),O$r=i(ne),A3=n(ne,"LI",{});var GGe=s(A3);y5e=n(GGe,"STRONG",{});var Aqt=s(y5e);V$r=r(Aqt,"longformer"),Aqt.forEach(t),X$r=r(GGe," \u2014 "),VK=n(GGe,"A",{href:!0});var Lqt=s(VK);z$r=r(Lqt,"TFLongformerForSequenceClassification"),Lqt.forEach(t),W$r=r(GGe," (Longformer model)"),GGe.forEach(t),Q$r=i(ne),L3=n(ne,"LI",{});var OGe=s(L3);x5e=n(OGe,"STRONG",{});var yqt=s(x5e);H$r=r(yqt,"mobilebert"),yqt.forEach(t),U$r=r(OGe," \u2014 "),XK=n(OGe,"A",{href:!0});var xqt=s(XK);J$r=r(xqt,"TFMobileBertForSequenceClassification"),xqt.forEach(t),Y$r=r(OGe," (MobileBERT model)"),OGe.forEach(t),K$r=i(ne),y3=n(ne,"LI",{});var VGe=s(y3);$5e=n(VGe,"STRONG",{});var $qt=s($5e);Z$r=r($qt,"mpnet"),$qt.forEach(t),ekr=r(VGe," \u2014 "),zK=n(VGe,"A",{href:!0});var kqt=s(zK);okr=r(kqt,"TFMPNetForSequenceClassification"),kqt.forEach(t),rkr=r(VGe," (MPNet model)"),VGe.forEach(t),tkr=i(ne),x3=n(ne,"LI",{});var XGe=s(x3);k5e=n(XGe,"STRONG",{});var Sqt=s(k5e);akr=r(Sqt,"openai-gpt"),Sqt.forEach(t),nkr=r(XGe," \u2014 "),WK=n(XGe,"A",{href:!0});var Rqt=s(WK);skr=r(Rqt,"TFOpenAIGPTForSequenceClassification"),Rqt.forEach(t),lkr=r(XGe," (OpenAI GPT model)"),XGe.forEach(t),ikr=i(ne),$3=n(ne,"LI",{});var zGe=s($3);S5e=n(zGe,"STRONG",{});var Pqt=s(S5e);dkr=r(Pqt,"rembert"),Pqt.forEach(t),ckr=r(zGe," \u2014 "),QK=n(zGe,"A",{href:!0});var Bqt=s(QK);mkr=r(Bqt,"TFRemBertForSequenceClassification"),Bqt.forEach(t),fkr=r(zGe," (RemBERT model)"),zGe.forEach(t),gkr=i(ne),k3=n(ne,"LI",{});var WGe=s(k3);R5e=n(WGe,"STRONG",{});var Iqt=s(R5e);hkr=r(Iqt,"roberta"),Iqt.forEach(t),ukr=r(WGe," \u2014 "),HK=n(WGe,"A",{href:!0});var Nqt=s(HK);pkr=r(Nqt,"TFRobertaForSequenceClassification"),Nqt.forEach(t),_kr=r(WGe," (RoBERTa model)"),WGe.forEach(t),bkr=i(ne),S3=n(ne,"LI",{});var QGe=s(S3);P5e=n(QGe,"STRONG",{});var qqt=s(P5e);vkr=r(qqt,"roformer"),qqt.forEach(t),Fkr=r(QGe," \u2014 "),UK=n(QGe,"A",{href:!0});var jqt=s(UK);Tkr=r(jqt,"TFRoFormerForSequenceClassification"),jqt.forEach(t),Mkr=r(QGe," (RoFormer model)"),QGe.forEach(t),Ekr=i(ne),R3=n(ne,"LI",{});var HGe=s(R3);B5e=n(HGe,"STRONG",{});var Dqt=s(B5e);Ckr=r(Dqt,"tapas"),Dqt.forEach(t),wkr=r(HGe," \u2014 "),JK=n(HGe,"A",{href:!0});var Gqt=s(JK);Akr=r(Gqt,"TFTapasForSequenceClassification"),Gqt.forEach(t),Lkr=r(HGe," (TAPAS model)"),HGe.forEach(t),ykr=i(ne),P3=n(ne,"LI",{});var UGe=s(P3);I5e=n(UGe,"STRONG",{});var Oqt=s(I5e);xkr=r(Oqt,"transfo-xl"),Oqt.forEach(t),$kr=r(UGe," \u2014 "),YK=n(UGe,"A",{href:!0});var Vqt=s(YK);kkr=r(Vqt,"TFTransfoXLForSequenceClassification"),Vqt.forEach(t),Skr=r(UGe," (Transformer-XL model)"),UGe.forEach(t),Rkr=i(ne),B3=n(ne,"LI",{});var JGe=s(B3);N5e=n(JGe,"STRONG",{});var Xqt=s(N5e);Pkr=r(Xqt,"xlm"),Xqt.forEach(t),Bkr=r(JGe," \u2014 "),KK=n(JGe,"A",{href:!0});var zqt=s(KK);Ikr=r(zqt,"TFXLMForSequenceClassification"),zqt.forEach(t),Nkr=r(JGe," (XLM model)"),JGe.forEach(t),qkr=i(ne),I3=n(ne,"LI",{});var YGe=s(I3);q5e=n(YGe,"STRONG",{});var Wqt=s(q5e);jkr=r(Wqt,"xlm-roberta"),Wqt.forEach(t),Dkr=r(YGe," \u2014 "),ZK=n(YGe,"A",{href:!0});var Qqt=s(ZK);Gkr=r(Qqt,"TFXLMRobertaForSequenceClassification"),Qqt.forEach(t),Okr=r(YGe," (XLM-RoBERTa model)"),YGe.forEach(t),Vkr=i(ne),N3=n(ne,"LI",{});var KGe=s(N3);j5e=n(KGe,"STRONG",{});var Hqt=s(j5e);Xkr=r(Hqt,"xlnet"),Hqt.forEach(t),zkr=r(KGe," \u2014 "),eZ=n(KGe,"A",{href:!0});var Uqt=s(eZ);Wkr=r(Uqt,"TFXLNetForSequenceClassification"),Uqt.forEach(t),Qkr=r(KGe," (XLNet model)"),KGe.forEach(t),ne.forEach(t),Hkr=i(zl),T(q3.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),$We=i(m),xc=n(m,"H2",{class:!0});var qHe=s(xc);j3=n(qHe,"A",{id:!0,class:!0,href:!0});var Jqt=s(j3);D5e=n(Jqt,"SPAN",{});var Yqt=s(D5e);T(Ox.$$.fragment,Yqt),Yqt.forEach(t),Jqt.forEach(t),Ukr=i(qHe),G5e=n(qHe,"SPAN",{});var Kqt=s(G5e);Jkr=r(Kqt,"TFAutoModelForMultipleChoice"),Kqt.forEach(t),qHe.forEach(t),kWe=i(m),dr=n(m,"DIV",{class:!0});var Wl=s(dr);T(Vx.$$.fragment,Wl),Ykr=i(Wl),$c=n(Wl,"P",{});var Eae=s($c);Kkr=r(Eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oZ=n(Eae,"A",{href:!0});var Zqt=s(oZ);Zkr=r(Zqt,"from_pretrained()"),Zqt.forEach(t),eSr=r(Eae," class method or the "),rZ=n(Eae,"A",{href:!0});var ejt=s(rZ);oSr=r(ejt,"from_config()"),ejt.forEach(t),rSr=r(Eae,` class
method.`),Eae.forEach(t),tSr=i(Wl),Xx=n(Wl,"P",{});var jHe=s(Xx);aSr=r(jHe,"This class cannot be instantiated directly using "),O5e=n(jHe,"CODE",{});var ojt=s(O5e);nSr=r(ojt,"__init__()"),ojt.forEach(t),sSr=r(jHe," (throws an error)."),jHe.forEach(t),lSr=i(Wl),Dt=n(Wl,"DIV",{class:!0});var RL=s(Dt);T(zx.$$.fragment,RL),iSr=i(RL),V5e=n(RL,"P",{});var rjt=s(V5e);dSr=r(rjt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rjt.forEach(t),cSr=i(RL),kc=n(RL,"P",{});var Cae=s(kc);mSr=r(Cae,`Note:
Loading a model from its configuration file does `),X5e=n(Cae,"STRONG",{});var tjt=s(X5e);fSr=r(tjt,"not"),tjt.forEach(t),gSr=r(Cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=n(Cae,"A",{href:!0});var ajt=s(tZ);hSr=r(ajt,"from_pretrained()"),ajt.forEach(t),uSr=r(Cae," to load the model weights."),Cae.forEach(t),pSr=i(RL),T(D3.$$.fragment,RL),RL.forEach(t),_Sr=i(Wl),Nr=n(Wl,"DIV",{class:!0});var Ql=s(Nr);T(Wx.$$.fragment,Ql),bSr=i(Ql),z5e=n(Ql,"P",{});var njt=s(z5e);vSr=r(njt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),njt.forEach(t),FSr=i(Ql),un=n(Ql,"P",{});var PL=s(un);TSr=r(PL,"The model class to instantiate is selected based on the "),W5e=n(PL,"CODE",{});var sjt=s(W5e);MSr=r(sjt,"model_type"),sjt.forEach(t),ESr=r(PL,` property of the config object (either
passed as an argument or loaded from `),Q5e=n(PL,"CODE",{});var ljt=s(Q5e);CSr=r(ljt,"pretrained_model_name_or_path"),ljt.forEach(t),wSr=r(PL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=n(PL,"CODE",{});var ijt=s(H5e);ASr=r(ijt,"pretrained_model_name_or_path"),ijt.forEach(t),LSr=r(PL,":"),PL.forEach(t),ySr=i(Ql),ve=n(Ql,"UL",{});var Te=s(ve);G3=n(Te,"LI",{});var ZGe=s(G3);U5e=n(ZGe,"STRONG",{});var djt=s(U5e);xSr=r(djt,"albert"),djt.forEach(t),$Sr=r(ZGe," \u2014 "),aZ=n(ZGe,"A",{href:!0});var cjt=s(aZ);kSr=r(cjt,"TFAlbertForMultipleChoice"),cjt.forEach(t),SSr=r(ZGe," (ALBERT model)"),ZGe.forEach(t),RSr=i(Te),O3=n(Te,"LI",{});var eOe=s(O3);J5e=n(eOe,"STRONG",{});var mjt=s(J5e);PSr=r(mjt,"bert"),mjt.forEach(t),BSr=r(eOe," \u2014 "),nZ=n(eOe,"A",{href:!0});var fjt=s(nZ);ISr=r(fjt,"TFBertForMultipleChoice"),fjt.forEach(t),NSr=r(eOe," (BERT model)"),eOe.forEach(t),qSr=i(Te),V3=n(Te,"LI",{});var oOe=s(V3);Y5e=n(oOe,"STRONG",{});var gjt=s(Y5e);jSr=r(gjt,"camembert"),gjt.forEach(t),DSr=r(oOe," \u2014 "),sZ=n(oOe,"A",{href:!0});var hjt=s(sZ);GSr=r(hjt,"TFCamembertForMultipleChoice"),hjt.forEach(t),OSr=r(oOe," (CamemBERT model)"),oOe.forEach(t),VSr=i(Te),X3=n(Te,"LI",{});var rOe=s(X3);K5e=n(rOe,"STRONG",{});var ujt=s(K5e);XSr=r(ujt,"convbert"),ujt.forEach(t),zSr=r(rOe," \u2014 "),lZ=n(rOe,"A",{href:!0});var pjt=s(lZ);WSr=r(pjt,"TFConvBertForMultipleChoice"),pjt.forEach(t),QSr=r(rOe," (ConvBERT model)"),rOe.forEach(t),HSr=i(Te),z3=n(Te,"LI",{});var tOe=s(z3);Z5e=n(tOe,"STRONG",{});var _jt=s(Z5e);USr=r(_jt,"distilbert"),_jt.forEach(t),JSr=r(tOe," \u2014 "),iZ=n(tOe,"A",{href:!0});var bjt=s(iZ);YSr=r(bjt,"TFDistilBertForMultipleChoice"),bjt.forEach(t),KSr=r(tOe," (DistilBERT model)"),tOe.forEach(t),ZSr=i(Te),W3=n(Te,"LI",{});var aOe=s(W3);e3e=n(aOe,"STRONG",{});var vjt=s(e3e);eRr=r(vjt,"electra"),vjt.forEach(t),oRr=r(aOe," \u2014 "),dZ=n(aOe,"A",{href:!0});var Fjt=s(dZ);rRr=r(Fjt,"TFElectraForMultipleChoice"),Fjt.forEach(t),tRr=r(aOe," (ELECTRA model)"),aOe.forEach(t),aRr=i(Te),Q3=n(Te,"LI",{});var nOe=s(Q3);o3e=n(nOe,"STRONG",{});var Tjt=s(o3e);nRr=r(Tjt,"flaubert"),Tjt.forEach(t),sRr=r(nOe," \u2014 "),cZ=n(nOe,"A",{href:!0});var Mjt=s(cZ);lRr=r(Mjt,"TFFlaubertForMultipleChoice"),Mjt.forEach(t),iRr=r(nOe," (FlauBERT model)"),nOe.forEach(t),dRr=i(Te),H3=n(Te,"LI",{});var sOe=s(H3);r3e=n(sOe,"STRONG",{});var Ejt=s(r3e);cRr=r(Ejt,"funnel"),Ejt.forEach(t),mRr=r(sOe," \u2014 "),mZ=n(sOe,"A",{href:!0});var Cjt=s(mZ);fRr=r(Cjt,"TFFunnelForMultipleChoice"),Cjt.forEach(t),gRr=r(sOe," (Funnel Transformer model)"),sOe.forEach(t),hRr=i(Te),U3=n(Te,"LI",{});var lOe=s(U3);t3e=n(lOe,"STRONG",{});var wjt=s(t3e);uRr=r(wjt,"longformer"),wjt.forEach(t),pRr=r(lOe," \u2014 "),fZ=n(lOe,"A",{href:!0});var Ajt=s(fZ);_Rr=r(Ajt,"TFLongformerForMultipleChoice"),Ajt.forEach(t),bRr=r(lOe," (Longformer model)"),lOe.forEach(t),vRr=i(Te),J3=n(Te,"LI",{});var iOe=s(J3);a3e=n(iOe,"STRONG",{});var Ljt=s(a3e);FRr=r(Ljt,"mobilebert"),Ljt.forEach(t),TRr=r(iOe," \u2014 "),gZ=n(iOe,"A",{href:!0});var yjt=s(gZ);MRr=r(yjt,"TFMobileBertForMultipleChoice"),yjt.forEach(t),ERr=r(iOe," (MobileBERT model)"),iOe.forEach(t),CRr=i(Te),Y3=n(Te,"LI",{});var dOe=s(Y3);n3e=n(dOe,"STRONG",{});var xjt=s(n3e);wRr=r(xjt,"mpnet"),xjt.forEach(t),ARr=r(dOe," \u2014 "),hZ=n(dOe,"A",{href:!0});var $jt=s(hZ);LRr=r($jt,"TFMPNetForMultipleChoice"),$jt.forEach(t),yRr=r(dOe," (MPNet model)"),dOe.forEach(t),xRr=i(Te),K3=n(Te,"LI",{});var cOe=s(K3);s3e=n(cOe,"STRONG",{});var kjt=s(s3e);$Rr=r(kjt,"rembert"),kjt.forEach(t),kRr=r(cOe," \u2014 "),uZ=n(cOe,"A",{href:!0});var Sjt=s(uZ);SRr=r(Sjt,"TFRemBertForMultipleChoice"),Sjt.forEach(t),RRr=r(cOe," (RemBERT model)"),cOe.forEach(t),PRr=i(Te),Z3=n(Te,"LI",{});var mOe=s(Z3);l3e=n(mOe,"STRONG",{});var Rjt=s(l3e);BRr=r(Rjt,"roberta"),Rjt.forEach(t),IRr=r(mOe," \u2014 "),pZ=n(mOe,"A",{href:!0});var Pjt=s(pZ);NRr=r(Pjt,"TFRobertaForMultipleChoice"),Pjt.forEach(t),qRr=r(mOe," (RoBERTa model)"),mOe.forEach(t),jRr=i(Te),e0=n(Te,"LI",{});var fOe=s(e0);i3e=n(fOe,"STRONG",{});var Bjt=s(i3e);DRr=r(Bjt,"roformer"),Bjt.forEach(t),GRr=r(fOe," \u2014 "),_Z=n(fOe,"A",{href:!0});var Ijt=s(_Z);ORr=r(Ijt,"TFRoFormerForMultipleChoice"),Ijt.forEach(t),VRr=r(fOe," (RoFormer model)"),fOe.forEach(t),XRr=i(Te),o0=n(Te,"LI",{});var gOe=s(o0);d3e=n(gOe,"STRONG",{});var Njt=s(d3e);zRr=r(Njt,"xlm"),Njt.forEach(t),WRr=r(gOe," \u2014 "),bZ=n(gOe,"A",{href:!0});var qjt=s(bZ);QRr=r(qjt,"TFXLMForMultipleChoice"),qjt.forEach(t),HRr=r(gOe," (XLM model)"),gOe.forEach(t),URr=i(Te),r0=n(Te,"LI",{});var hOe=s(r0);c3e=n(hOe,"STRONG",{});var jjt=s(c3e);JRr=r(jjt,"xlm-roberta"),jjt.forEach(t),YRr=r(hOe," \u2014 "),vZ=n(hOe,"A",{href:!0});var Djt=s(vZ);KRr=r(Djt,"TFXLMRobertaForMultipleChoice"),Djt.forEach(t),ZRr=r(hOe," (XLM-RoBERTa model)"),hOe.forEach(t),ePr=i(Te),t0=n(Te,"LI",{});var uOe=s(t0);m3e=n(uOe,"STRONG",{});var Gjt=s(m3e);oPr=r(Gjt,"xlnet"),Gjt.forEach(t),rPr=r(uOe," \u2014 "),FZ=n(uOe,"A",{href:!0});var Ojt=s(FZ);tPr=r(Ojt,"TFXLNetForMultipleChoice"),Ojt.forEach(t),aPr=r(uOe," (XLNet model)"),uOe.forEach(t),Te.forEach(t),nPr=i(Ql),T(a0.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),SWe=i(m),Sc=n(m,"H2",{class:!0});var DHe=s(Sc);n0=n(DHe,"A",{id:!0,class:!0,href:!0});var Vjt=s(n0);f3e=n(Vjt,"SPAN",{});var Xjt=s(f3e);T(Qx.$$.fragment,Xjt),Xjt.forEach(t),Vjt.forEach(t),sPr=i(DHe),g3e=n(DHe,"SPAN",{});var zjt=s(g3e);lPr=r(zjt,"TFAutoModelForNextSentencePrediction"),zjt.forEach(t),DHe.forEach(t),RWe=i(m),cr=n(m,"DIV",{class:!0});var Hl=s(cr);T(Hx.$$.fragment,Hl),iPr=i(Hl),Rc=n(Hl,"P",{});var wae=s(Rc);dPr=r(wae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),TZ=n(wae,"A",{href:!0});var Wjt=s(TZ);cPr=r(Wjt,"from_pretrained()"),Wjt.forEach(t),mPr=r(wae," class method or the "),MZ=n(wae,"A",{href:!0});var Qjt=s(MZ);fPr=r(Qjt,"from_config()"),Qjt.forEach(t),gPr=r(wae,` class
method.`),wae.forEach(t),hPr=i(Hl),Ux=n(Hl,"P",{});var GHe=s(Ux);uPr=r(GHe,"This class cannot be instantiated directly using "),h3e=n(GHe,"CODE",{});var Hjt=s(h3e);pPr=r(Hjt,"__init__()"),Hjt.forEach(t),_Pr=r(GHe," (throws an error)."),GHe.forEach(t),bPr=i(Hl),Gt=n(Hl,"DIV",{class:!0});var BL=s(Gt);T(Jx.$$.fragment,BL),vPr=i(BL),u3e=n(BL,"P",{});var Ujt=s(u3e);FPr=r(Ujt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ujt.forEach(t),TPr=i(BL),Pc=n(BL,"P",{});var Aae=s(Pc);MPr=r(Aae,`Note:
Loading a model from its configuration file does `),p3e=n(Aae,"STRONG",{});var Jjt=s(p3e);EPr=r(Jjt,"not"),Jjt.forEach(t),CPr=r(Aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=n(Aae,"A",{href:!0});var Yjt=s(EZ);wPr=r(Yjt,"from_pretrained()"),Yjt.forEach(t),APr=r(Aae," to load the model weights."),Aae.forEach(t),LPr=i(BL),T(s0.$$.fragment,BL),BL.forEach(t),yPr=i(Hl),qr=n(Hl,"DIV",{class:!0});var Ul=s(qr);T(Yx.$$.fragment,Ul),xPr=i(Ul),_3e=n(Ul,"P",{});var Kjt=s(_3e);$Pr=r(Kjt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Kjt.forEach(t),kPr=i(Ul),pn=n(Ul,"P",{});var IL=s(pn);SPr=r(IL,"The model class to instantiate is selected based on the "),b3e=n(IL,"CODE",{});var Zjt=s(b3e);RPr=r(Zjt,"model_type"),Zjt.forEach(t),PPr=r(IL,` property of the config object (either
passed as an argument or loaded from `),v3e=n(IL,"CODE",{});var eDt=s(v3e);BPr=r(eDt,"pretrained_model_name_or_path"),eDt.forEach(t),IPr=r(IL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F3e=n(IL,"CODE",{});var oDt=s(F3e);NPr=r(oDt,"pretrained_model_name_or_path"),oDt.forEach(t),qPr=r(IL,":"),IL.forEach(t),jPr=i(Ul),Kx=n(Ul,"UL",{});var OHe=s(Kx);l0=n(OHe,"LI",{});var pOe=s(l0);T3e=n(pOe,"STRONG",{});var rDt=s(T3e);DPr=r(rDt,"bert"),rDt.forEach(t),GPr=r(pOe," \u2014 "),CZ=n(pOe,"A",{href:!0});var tDt=s(CZ);OPr=r(tDt,"TFBertForNextSentencePrediction"),tDt.forEach(t),VPr=r(pOe," (BERT model)"),pOe.forEach(t),XPr=i(OHe),i0=n(OHe,"LI",{});var _Oe=s(i0);M3e=n(_Oe,"STRONG",{});var aDt=s(M3e);zPr=r(aDt,"mobilebert"),aDt.forEach(t),WPr=r(_Oe," \u2014 "),wZ=n(_Oe,"A",{href:!0});var nDt=s(wZ);QPr=r(nDt,"TFMobileBertForNextSentencePrediction"),nDt.forEach(t),HPr=r(_Oe," (MobileBERT model)"),_Oe.forEach(t),OHe.forEach(t),UPr=i(Ul),T(d0.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),PWe=i(m),Bc=n(m,"H2",{class:!0});var VHe=s(Bc);c0=n(VHe,"A",{id:!0,class:!0,href:!0});var sDt=s(c0);E3e=n(sDt,"SPAN",{});var lDt=s(E3e);T(Zx.$$.fragment,lDt),lDt.forEach(t),sDt.forEach(t),JPr=i(VHe),C3e=n(VHe,"SPAN",{});var iDt=s(C3e);YPr=r(iDt,"TFAutoModelForTableQuestionAnswering"),iDt.forEach(t),VHe.forEach(t),BWe=i(m),mr=n(m,"DIV",{class:!0});var Jl=s(mr);T(e$.$$.fragment,Jl),KPr=i(Jl),Ic=n(Jl,"P",{});var Lae=s(Ic);ZPr=r(Lae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AZ=n(Lae,"A",{href:!0});var dDt=s(AZ);eBr=r(dDt,"from_pretrained()"),dDt.forEach(t),oBr=r(Lae," class method or the "),LZ=n(Lae,"A",{href:!0});var cDt=s(LZ);rBr=r(cDt,"from_config()"),cDt.forEach(t),tBr=r(Lae,` class
method.`),Lae.forEach(t),aBr=i(Jl),o$=n(Jl,"P",{});var XHe=s(o$);nBr=r(XHe,"This class cannot be instantiated directly using "),w3e=n(XHe,"CODE",{});var mDt=s(w3e);sBr=r(mDt,"__init__()"),mDt.forEach(t),lBr=r(XHe," (throws an error)."),XHe.forEach(t),iBr=i(Jl),Ot=n(Jl,"DIV",{class:!0});var NL=s(Ot);T(r$.$$.fragment,NL),dBr=i(NL),A3e=n(NL,"P",{});var fDt=s(A3e);cBr=r(fDt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fDt.forEach(t),mBr=i(NL),Nc=n(NL,"P",{});var yae=s(Nc);fBr=r(yae,`Note:
Loading a model from its configuration file does `),L3e=n(yae,"STRONG",{});var gDt=s(L3e);gBr=r(gDt,"not"),gDt.forEach(t),hBr=r(yae,` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=n(yae,"A",{href:!0});var hDt=s(yZ);uBr=r(hDt,"from_pretrained()"),hDt.forEach(t),pBr=r(yae," to load the model weights."),yae.forEach(t),_Br=i(NL),T(m0.$$.fragment,NL),NL.forEach(t),bBr=i(Jl),jr=n(Jl,"DIV",{class:!0});var Yl=s(jr);T(t$.$$.fragment,Yl),vBr=i(Yl),y3e=n(Yl,"P",{});var uDt=s(y3e);FBr=r(uDt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),uDt.forEach(t),TBr=i(Yl),_n=n(Yl,"P",{});var qL=s(_n);MBr=r(qL,"The model class to instantiate is selected based on the "),x3e=n(qL,"CODE",{});var pDt=s(x3e);EBr=r(pDt,"model_type"),pDt.forEach(t),CBr=r(qL,` property of the config object (either
passed as an argument or loaded from `),$3e=n(qL,"CODE",{});var _Dt=s($3e);wBr=r(_Dt,"pretrained_model_name_or_path"),_Dt.forEach(t),ABr=r(qL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k3e=n(qL,"CODE",{});var bDt=s(k3e);LBr=r(bDt,"pretrained_model_name_or_path"),bDt.forEach(t),yBr=r(qL,":"),qL.forEach(t),xBr=i(Yl),S3e=n(Yl,"UL",{});var vDt=s(S3e);f0=n(vDt,"LI",{});var bOe=s(f0);R3e=n(bOe,"STRONG",{});var FDt=s(R3e);$Br=r(FDt,"tapas"),FDt.forEach(t),kBr=r(bOe," \u2014 "),xZ=n(bOe,"A",{href:!0});var TDt=s(xZ);SBr=r(TDt,"TFTapasForQuestionAnswering"),TDt.forEach(t),RBr=r(bOe," (TAPAS model)"),bOe.forEach(t),vDt.forEach(t),PBr=i(Yl),T(g0.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),IWe=i(m),qc=n(m,"H2",{class:!0});var zHe=s(qc);h0=n(zHe,"A",{id:!0,class:!0,href:!0});var MDt=s(h0);P3e=n(MDt,"SPAN",{});var EDt=s(P3e);T(a$.$$.fragment,EDt),EDt.forEach(t),MDt.forEach(t),BBr=i(zHe),B3e=n(zHe,"SPAN",{});var CDt=s(B3e);IBr=r(CDt,"TFAutoModelForTokenClassification"),CDt.forEach(t),zHe.forEach(t),NWe=i(m),fr=n(m,"DIV",{class:!0});var Kl=s(fr);T(n$.$$.fragment,Kl),NBr=i(Kl),jc=n(Kl,"P",{});var xae=s(jc);qBr=r(xae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$Z=n(xae,"A",{href:!0});var wDt=s($Z);jBr=r(wDt,"from_pretrained()"),wDt.forEach(t),DBr=r(xae," class method or the "),kZ=n(xae,"A",{href:!0});var ADt=s(kZ);GBr=r(ADt,"from_config()"),ADt.forEach(t),OBr=r(xae,` class
method.`),xae.forEach(t),VBr=i(Kl),s$=n(Kl,"P",{});var WHe=s(s$);XBr=r(WHe,"This class cannot be instantiated directly using "),I3e=n(WHe,"CODE",{});var LDt=s(I3e);zBr=r(LDt,"__init__()"),LDt.forEach(t),WBr=r(WHe," (throws an error)."),WHe.forEach(t),QBr=i(Kl),Vt=n(Kl,"DIV",{class:!0});var jL=s(Vt);T(l$.$$.fragment,jL),HBr=i(jL),N3e=n(jL,"P",{});var yDt=s(N3e);UBr=r(yDt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yDt.forEach(t),JBr=i(jL),Dc=n(jL,"P",{});var $ae=s(Dc);YBr=r($ae,`Note:
Loading a model from its configuration file does `),q3e=n($ae,"STRONG",{});var xDt=s(q3e);KBr=r(xDt,"not"),xDt.forEach(t),ZBr=r($ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=n($ae,"A",{href:!0});var $Dt=s(SZ);eIr=r($Dt,"from_pretrained()"),$Dt.forEach(t),oIr=r($ae," to load the model weights."),$ae.forEach(t),rIr=i(jL),T(u0.$$.fragment,jL),jL.forEach(t),tIr=i(Kl),Dr=n(Kl,"DIV",{class:!0});var Zl=s(Dr);T(i$.$$.fragment,Zl),aIr=i(Zl),j3e=n(Zl,"P",{});var kDt=s(j3e);nIr=r(kDt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),kDt.forEach(t),sIr=i(Zl),bn=n(Zl,"P",{});var DL=s(bn);lIr=r(DL,"The model class to instantiate is selected based on the "),D3e=n(DL,"CODE",{});var SDt=s(D3e);iIr=r(SDt,"model_type"),SDt.forEach(t),dIr=r(DL,` property of the config object (either
passed as an argument or loaded from `),G3e=n(DL,"CODE",{});var RDt=s(G3e);cIr=r(RDt,"pretrained_model_name_or_path"),RDt.forEach(t),mIr=r(DL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O3e=n(DL,"CODE",{});var PDt=s(O3e);fIr=r(PDt,"pretrained_model_name_or_path"),PDt.forEach(t),gIr=r(DL,":"),DL.forEach(t),hIr=i(Zl),de=n(Zl,"UL",{});var he=s(de);p0=n(he,"LI",{});var vOe=s(p0);V3e=n(vOe,"STRONG",{});var BDt=s(V3e);uIr=r(BDt,"albert"),BDt.forEach(t),pIr=r(vOe," \u2014 "),RZ=n(vOe,"A",{href:!0});var IDt=s(RZ);_Ir=r(IDt,"TFAlbertForTokenClassification"),IDt.forEach(t),bIr=r(vOe," (ALBERT model)"),vOe.forEach(t),vIr=i(he),_0=n(he,"LI",{});var FOe=s(_0);X3e=n(FOe,"STRONG",{});var NDt=s(X3e);FIr=r(NDt,"bert"),NDt.forEach(t),TIr=r(FOe," \u2014 "),PZ=n(FOe,"A",{href:!0});var qDt=s(PZ);MIr=r(qDt,"TFBertForTokenClassification"),qDt.forEach(t),EIr=r(FOe," (BERT model)"),FOe.forEach(t),CIr=i(he),b0=n(he,"LI",{});var TOe=s(b0);z3e=n(TOe,"STRONG",{});var jDt=s(z3e);wIr=r(jDt,"camembert"),jDt.forEach(t),AIr=r(TOe," \u2014 "),BZ=n(TOe,"A",{href:!0});var DDt=s(BZ);LIr=r(DDt,"TFCamembertForTokenClassification"),DDt.forEach(t),yIr=r(TOe," (CamemBERT model)"),TOe.forEach(t),xIr=i(he),v0=n(he,"LI",{});var MOe=s(v0);W3e=n(MOe,"STRONG",{});var GDt=s(W3e);$Ir=r(GDt,"convbert"),GDt.forEach(t),kIr=r(MOe," \u2014 "),IZ=n(MOe,"A",{href:!0});var ODt=s(IZ);SIr=r(ODt,"TFConvBertForTokenClassification"),ODt.forEach(t),RIr=r(MOe," (ConvBERT model)"),MOe.forEach(t),PIr=i(he),F0=n(he,"LI",{});var EOe=s(F0);Q3e=n(EOe,"STRONG",{});var VDt=s(Q3e);BIr=r(VDt,"deberta"),VDt.forEach(t),IIr=r(EOe," \u2014 "),NZ=n(EOe,"A",{href:!0});var XDt=s(NZ);NIr=r(XDt,"TFDebertaForTokenClassification"),XDt.forEach(t),qIr=r(EOe," (DeBERTa model)"),EOe.forEach(t),jIr=i(he),T0=n(he,"LI",{});var COe=s(T0);H3e=n(COe,"STRONG",{});var zDt=s(H3e);DIr=r(zDt,"deberta-v2"),zDt.forEach(t),GIr=r(COe," \u2014 "),qZ=n(COe,"A",{href:!0});var WDt=s(qZ);OIr=r(WDt,"TFDebertaV2ForTokenClassification"),WDt.forEach(t),VIr=r(COe," (DeBERTa-v2 model)"),COe.forEach(t),XIr=i(he),M0=n(he,"LI",{});var wOe=s(M0);U3e=n(wOe,"STRONG",{});var QDt=s(U3e);zIr=r(QDt,"distilbert"),QDt.forEach(t),WIr=r(wOe," \u2014 "),jZ=n(wOe,"A",{href:!0});var HDt=s(jZ);QIr=r(HDt,"TFDistilBertForTokenClassification"),HDt.forEach(t),HIr=r(wOe," (DistilBERT model)"),wOe.forEach(t),UIr=i(he),E0=n(he,"LI",{});var AOe=s(E0);J3e=n(AOe,"STRONG",{});var UDt=s(J3e);JIr=r(UDt,"electra"),UDt.forEach(t),YIr=r(AOe," \u2014 "),DZ=n(AOe,"A",{href:!0});var JDt=s(DZ);KIr=r(JDt,"TFElectraForTokenClassification"),JDt.forEach(t),ZIr=r(AOe," (ELECTRA model)"),AOe.forEach(t),eNr=i(he),C0=n(he,"LI",{});var LOe=s(C0);Y3e=n(LOe,"STRONG",{});var YDt=s(Y3e);oNr=r(YDt,"flaubert"),YDt.forEach(t),rNr=r(LOe," \u2014 "),GZ=n(LOe,"A",{href:!0});var KDt=s(GZ);tNr=r(KDt,"TFFlaubertForTokenClassification"),KDt.forEach(t),aNr=r(LOe," (FlauBERT model)"),LOe.forEach(t),nNr=i(he),w0=n(he,"LI",{});var yOe=s(w0);K3e=n(yOe,"STRONG",{});var ZDt=s(K3e);sNr=r(ZDt,"funnel"),ZDt.forEach(t),lNr=r(yOe," \u2014 "),OZ=n(yOe,"A",{href:!0});var eGt=s(OZ);iNr=r(eGt,"TFFunnelForTokenClassification"),eGt.forEach(t),dNr=r(yOe," (Funnel Transformer model)"),yOe.forEach(t),cNr=i(he),A0=n(he,"LI",{});var xOe=s(A0);Z3e=n(xOe,"STRONG",{});var oGt=s(Z3e);mNr=r(oGt,"layoutlm"),oGt.forEach(t),fNr=r(xOe," \u2014 "),VZ=n(xOe,"A",{href:!0});var rGt=s(VZ);gNr=r(rGt,"TFLayoutLMForTokenClassification"),rGt.forEach(t),hNr=r(xOe," (LayoutLM model)"),xOe.forEach(t),uNr=i(he),L0=n(he,"LI",{});var $Oe=s(L0);e0e=n($Oe,"STRONG",{});var tGt=s(e0e);pNr=r(tGt,"longformer"),tGt.forEach(t),_Nr=r($Oe," \u2014 "),XZ=n($Oe,"A",{href:!0});var aGt=s(XZ);bNr=r(aGt,"TFLongformerForTokenClassification"),aGt.forEach(t),vNr=r($Oe," (Longformer model)"),$Oe.forEach(t),FNr=i(he),y0=n(he,"LI",{});var kOe=s(y0);o0e=n(kOe,"STRONG",{});var nGt=s(o0e);TNr=r(nGt,"mobilebert"),nGt.forEach(t),MNr=r(kOe," \u2014 "),zZ=n(kOe,"A",{href:!0});var sGt=s(zZ);ENr=r(sGt,"TFMobileBertForTokenClassification"),sGt.forEach(t),CNr=r(kOe," (MobileBERT model)"),kOe.forEach(t),wNr=i(he),x0=n(he,"LI",{});var SOe=s(x0);r0e=n(SOe,"STRONG",{});var lGt=s(r0e);ANr=r(lGt,"mpnet"),lGt.forEach(t),LNr=r(SOe," \u2014 "),WZ=n(SOe,"A",{href:!0});var iGt=s(WZ);yNr=r(iGt,"TFMPNetForTokenClassification"),iGt.forEach(t),xNr=r(SOe," (MPNet model)"),SOe.forEach(t),$Nr=i(he),$0=n(he,"LI",{});var ROe=s($0);t0e=n(ROe,"STRONG",{});var dGt=s(t0e);kNr=r(dGt,"rembert"),dGt.forEach(t),SNr=r(ROe," \u2014 "),QZ=n(ROe,"A",{href:!0});var cGt=s(QZ);RNr=r(cGt,"TFRemBertForTokenClassification"),cGt.forEach(t),PNr=r(ROe," (RemBERT model)"),ROe.forEach(t),BNr=i(he),k0=n(he,"LI",{});var POe=s(k0);a0e=n(POe,"STRONG",{});var mGt=s(a0e);INr=r(mGt,"roberta"),mGt.forEach(t),NNr=r(POe," \u2014 "),HZ=n(POe,"A",{href:!0});var fGt=s(HZ);qNr=r(fGt,"TFRobertaForTokenClassification"),fGt.forEach(t),jNr=r(POe," (RoBERTa model)"),POe.forEach(t),DNr=i(he),S0=n(he,"LI",{});var BOe=s(S0);n0e=n(BOe,"STRONG",{});var gGt=s(n0e);GNr=r(gGt,"roformer"),gGt.forEach(t),ONr=r(BOe," \u2014 "),UZ=n(BOe,"A",{href:!0});var hGt=s(UZ);VNr=r(hGt,"TFRoFormerForTokenClassification"),hGt.forEach(t),XNr=r(BOe," (RoFormer model)"),BOe.forEach(t),zNr=i(he),R0=n(he,"LI",{});var IOe=s(R0);s0e=n(IOe,"STRONG",{});var uGt=s(s0e);WNr=r(uGt,"xlm"),uGt.forEach(t),QNr=r(IOe," \u2014 "),JZ=n(IOe,"A",{href:!0});var pGt=s(JZ);HNr=r(pGt,"TFXLMForTokenClassification"),pGt.forEach(t),UNr=r(IOe," (XLM model)"),IOe.forEach(t),JNr=i(he),P0=n(he,"LI",{});var NOe=s(P0);l0e=n(NOe,"STRONG",{});var _Gt=s(l0e);YNr=r(_Gt,"xlm-roberta"),_Gt.forEach(t),KNr=r(NOe," \u2014 "),YZ=n(NOe,"A",{href:!0});var bGt=s(YZ);ZNr=r(bGt,"TFXLMRobertaForTokenClassification"),bGt.forEach(t),eqr=r(NOe," (XLM-RoBERTa model)"),NOe.forEach(t),oqr=i(he),B0=n(he,"LI",{});var qOe=s(B0);i0e=n(qOe,"STRONG",{});var vGt=s(i0e);rqr=r(vGt,"xlnet"),vGt.forEach(t),tqr=r(qOe," \u2014 "),KZ=n(qOe,"A",{href:!0});var FGt=s(KZ);aqr=r(FGt,"TFXLNetForTokenClassification"),FGt.forEach(t),nqr=r(qOe," (XLNet model)"),qOe.forEach(t),he.forEach(t),sqr=i(Zl),T(I0.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),qWe=i(m),Gc=n(m,"H2",{class:!0});var QHe=s(Gc);N0=n(QHe,"A",{id:!0,class:!0,href:!0});var TGt=s(N0);d0e=n(TGt,"SPAN",{});var MGt=s(d0e);T(d$.$$.fragment,MGt),MGt.forEach(t),TGt.forEach(t),lqr=i(QHe),c0e=n(QHe,"SPAN",{});var EGt=s(c0e);iqr=r(EGt,"TFAutoModelForQuestionAnswering"),EGt.forEach(t),QHe.forEach(t),jWe=i(m),gr=n(m,"DIV",{class:!0});var ei=s(gr);T(c$.$$.fragment,ei),dqr=i(ei),Oc=n(ei,"P",{});var kae=s(Oc);cqr=r(kae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ZZ=n(kae,"A",{href:!0});var CGt=s(ZZ);mqr=r(CGt,"from_pretrained()"),CGt.forEach(t),fqr=r(kae," class method or the "),eee=n(kae,"A",{href:!0});var wGt=s(eee);gqr=r(wGt,"from_config()"),wGt.forEach(t),hqr=r(kae,` class
method.`),kae.forEach(t),uqr=i(ei),m$=n(ei,"P",{});var HHe=s(m$);pqr=r(HHe,"This class cannot be instantiated directly using "),m0e=n(HHe,"CODE",{});var AGt=s(m0e);_qr=r(AGt,"__init__()"),AGt.forEach(t),bqr=r(HHe," (throws an error)."),HHe.forEach(t),vqr=i(ei),Xt=n(ei,"DIV",{class:!0});var GL=s(Xt);T(f$.$$.fragment,GL),Fqr=i(GL),f0e=n(GL,"P",{});var LGt=s(f0e);Tqr=r(LGt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),LGt.forEach(t),Mqr=i(GL),Vc=n(GL,"P",{});var Sae=s(Vc);Eqr=r(Sae,`Note:
Loading a model from its configuration file does `),g0e=n(Sae,"STRONG",{});var yGt=s(g0e);Cqr=r(yGt,"not"),yGt.forEach(t),wqr=r(Sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=n(Sae,"A",{href:!0});var xGt=s(oee);Aqr=r(xGt,"from_pretrained()"),xGt.forEach(t),Lqr=r(Sae," to load the model weights."),Sae.forEach(t),yqr=i(GL),T(q0.$$.fragment,GL),GL.forEach(t),xqr=i(ei),Gr=n(ei,"DIV",{class:!0});var oi=s(Gr);T(g$.$$.fragment,oi),$qr=i(oi),h0e=n(oi,"P",{});var $Gt=s(h0e);kqr=r($Gt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$Gt.forEach(t),Sqr=i(oi),vn=n(oi,"P",{});var OL=s(vn);Rqr=r(OL,"The model class to instantiate is selected based on the "),u0e=n(OL,"CODE",{});var kGt=s(u0e);Pqr=r(kGt,"model_type"),kGt.forEach(t),Bqr=r(OL,` property of the config object (either
passed as an argument or loaded from `),p0e=n(OL,"CODE",{});var SGt=s(p0e);Iqr=r(SGt,"pretrained_model_name_or_path"),SGt.forEach(t),Nqr=r(OL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_0e=n(OL,"CODE",{});var RGt=s(_0e);qqr=r(RGt,"pretrained_model_name_or_path"),RGt.forEach(t),jqr=r(OL,":"),OL.forEach(t),Dqr=i(oi),ce=n(oi,"UL",{});var ue=s(ce);j0=n(ue,"LI",{});var jOe=s(j0);b0e=n(jOe,"STRONG",{});var PGt=s(b0e);Gqr=r(PGt,"albert"),PGt.forEach(t),Oqr=r(jOe," \u2014 "),ree=n(jOe,"A",{href:!0});var BGt=s(ree);Vqr=r(BGt,"TFAlbertForQuestionAnswering"),BGt.forEach(t),Xqr=r(jOe," (ALBERT model)"),jOe.forEach(t),zqr=i(ue),D0=n(ue,"LI",{});var DOe=s(D0);v0e=n(DOe,"STRONG",{});var IGt=s(v0e);Wqr=r(IGt,"bert"),IGt.forEach(t),Qqr=r(DOe," \u2014 "),tee=n(DOe,"A",{href:!0});var NGt=s(tee);Hqr=r(NGt,"TFBertForQuestionAnswering"),NGt.forEach(t),Uqr=r(DOe," (BERT model)"),DOe.forEach(t),Jqr=i(ue),G0=n(ue,"LI",{});var GOe=s(G0);F0e=n(GOe,"STRONG",{});var qGt=s(F0e);Yqr=r(qGt,"camembert"),qGt.forEach(t),Kqr=r(GOe," \u2014 "),aee=n(GOe,"A",{href:!0});var jGt=s(aee);Zqr=r(jGt,"TFCamembertForQuestionAnswering"),jGt.forEach(t),ejr=r(GOe," (CamemBERT model)"),GOe.forEach(t),ojr=i(ue),O0=n(ue,"LI",{});var OOe=s(O0);T0e=n(OOe,"STRONG",{});var DGt=s(T0e);rjr=r(DGt,"convbert"),DGt.forEach(t),tjr=r(OOe," \u2014 "),nee=n(OOe,"A",{href:!0});var GGt=s(nee);ajr=r(GGt,"TFConvBertForQuestionAnswering"),GGt.forEach(t),njr=r(OOe," (ConvBERT model)"),OOe.forEach(t),sjr=i(ue),V0=n(ue,"LI",{});var VOe=s(V0);M0e=n(VOe,"STRONG",{});var OGt=s(M0e);ljr=r(OGt,"deberta"),OGt.forEach(t),ijr=r(VOe," \u2014 "),see=n(VOe,"A",{href:!0});var VGt=s(see);djr=r(VGt,"TFDebertaForQuestionAnswering"),VGt.forEach(t),cjr=r(VOe," (DeBERTa model)"),VOe.forEach(t),mjr=i(ue),X0=n(ue,"LI",{});var XOe=s(X0);E0e=n(XOe,"STRONG",{});var XGt=s(E0e);fjr=r(XGt,"deberta-v2"),XGt.forEach(t),gjr=r(XOe," \u2014 "),lee=n(XOe,"A",{href:!0});var zGt=s(lee);hjr=r(zGt,"TFDebertaV2ForQuestionAnswering"),zGt.forEach(t),ujr=r(XOe," (DeBERTa-v2 model)"),XOe.forEach(t),pjr=i(ue),z0=n(ue,"LI",{});var zOe=s(z0);C0e=n(zOe,"STRONG",{});var WGt=s(C0e);_jr=r(WGt,"distilbert"),WGt.forEach(t),bjr=r(zOe," \u2014 "),iee=n(zOe,"A",{href:!0});var QGt=s(iee);vjr=r(QGt,"TFDistilBertForQuestionAnswering"),QGt.forEach(t),Fjr=r(zOe," (DistilBERT model)"),zOe.forEach(t),Tjr=i(ue),W0=n(ue,"LI",{});var WOe=s(W0);w0e=n(WOe,"STRONG",{});var HGt=s(w0e);Mjr=r(HGt,"electra"),HGt.forEach(t),Ejr=r(WOe," \u2014 "),dee=n(WOe,"A",{href:!0});var UGt=s(dee);Cjr=r(UGt,"TFElectraForQuestionAnswering"),UGt.forEach(t),wjr=r(WOe," (ELECTRA model)"),WOe.forEach(t),Ajr=i(ue),Q0=n(ue,"LI",{});var QOe=s(Q0);A0e=n(QOe,"STRONG",{});var JGt=s(A0e);Ljr=r(JGt,"flaubert"),JGt.forEach(t),yjr=r(QOe," \u2014 "),cee=n(QOe,"A",{href:!0});var YGt=s(cee);xjr=r(YGt,"TFFlaubertForQuestionAnsweringSimple"),YGt.forEach(t),$jr=r(QOe," (FlauBERT model)"),QOe.forEach(t),kjr=i(ue),H0=n(ue,"LI",{});var HOe=s(H0);L0e=n(HOe,"STRONG",{});var KGt=s(L0e);Sjr=r(KGt,"funnel"),KGt.forEach(t),Rjr=r(HOe," \u2014 "),mee=n(HOe,"A",{href:!0});var ZGt=s(mee);Pjr=r(ZGt,"TFFunnelForQuestionAnswering"),ZGt.forEach(t),Bjr=r(HOe," (Funnel Transformer model)"),HOe.forEach(t),Ijr=i(ue),U0=n(ue,"LI",{});var UOe=s(U0);y0e=n(UOe,"STRONG",{});var eOt=s(y0e);Njr=r(eOt,"gptj"),eOt.forEach(t),qjr=r(UOe," \u2014 "),fee=n(UOe,"A",{href:!0});var oOt=s(fee);jjr=r(oOt,"TFGPTJForQuestionAnswering"),oOt.forEach(t),Djr=r(UOe," (GPT-J model)"),UOe.forEach(t),Gjr=i(ue),J0=n(ue,"LI",{});var JOe=s(J0);x0e=n(JOe,"STRONG",{});var rOt=s(x0e);Ojr=r(rOt,"longformer"),rOt.forEach(t),Vjr=r(JOe," \u2014 "),gee=n(JOe,"A",{href:!0});var tOt=s(gee);Xjr=r(tOt,"TFLongformerForQuestionAnswering"),tOt.forEach(t),zjr=r(JOe," (Longformer model)"),JOe.forEach(t),Wjr=i(ue),Y0=n(ue,"LI",{});var YOe=s(Y0);$0e=n(YOe,"STRONG",{});var aOt=s($0e);Qjr=r(aOt,"mobilebert"),aOt.forEach(t),Hjr=r(YOe," \u2014 "),hee=n(YOe,"A",{href:!0});var nOt=s(hee);Ujr=r(nOt,"TFMobileBertForQuestionAnswering"),nOt.forEach(t),Jjr=r(YOe," (MobileBERT model)"),YOe.forEach(t),Yjr=i(ue),K0=n(ue,"LI",{});var KOe=s(K0);k0e=n(KOe,"STRONG",{});var sOt=s(k0e);Kjr=r(sOt,"mpnet"),sOt.forEach(t),Zjr=r(KOe," \u2014 "),uee=n(KOe,"A",{href:!0});var lOt=s(uee);eDr=r(lOt,"TFMPNetForQuestionAnswering"),lOt.forEach(t),oDr=r(KOe," (MPNet model)"),KOe.forEach(t),rDr=i(ue),Z0=n(ue,"LI",{});var ZOe=s(Z0);S0e=n(ZOe,"STRONG",{});var iOt=s(S0e);tDr=r(iOt,"rembert"),iOt.forEach(t),aDr=r(ZOe," \u2014 "),pee=n(ZOe,"A",{href:!0});var dOt=s(pee);nDr=r(dOt,"TFRemBertForQuestionAnswering"),dOt.forEach(t),sDr=r(ZOe," (RemBERT model)"),ZOe.forEach(t),lDr=i(ue),ew=n(ue,"LI",{});var eVe=s(ew);R0e=n(eVe,"STRONG",{});var cOt=s(R0e);iDr=r(cOt,"roberta"),cOt.forEach(t),dDr=r(eVe," \u2014 "),_ee=n(eVe,"A",{href:!0});var mOt=s(_ee);cDr=r(mOt,"TFRobertaForQuestionAnswering"),mOt.forEach(t),mDr=r(eVe," (RoBERTa model)"),eVe.forEach(t),fDr=i(ue),ow=n(ue,"LI",{});var oVe=s(ow);P0e=n(oVe,"STRONG",{});var fOt=s(P0e);gDr=r(fOt,"roformer"),fOt.forEach(t),hDr=r(oVe," \u2014 "),bee=n(oVe,"A",{href:!0});var gOt=s(bee);uDr=r(gOt,"TFRoFormerForQuestionAnswering"),gOt.forEach(t),pDr=r(oVe," (RoFormer model)"),oVe.forEach(t),_Dr=i(ue),rw=n(ue,"LI",{});var rVe=s(rw);B0e=n(rVe,"STRONG",{});var hOt=s(B0e);bDr=r(hOt,"xlm"),hOt.forEach(t),vDr=r(rVe," \u2014 "),vee=n(rVe,"A",{href:!0});var uOt=s(vee);FDr=r(uOt,"TFXLMForQuestionAnsweringSimple"),uOt.forEach(t),TDr=r(rVe," (XLM model)"),rVe.forEach(t),MDr=i(ue),tw=n(ue,"LI",{});var tVe=s(tw);I0e=n(tVe,"STRONG",{});var pOt=s(I0e);EDr=r(pOt,"xlm-roberta"),pOt.forEach(t),CDr=r(tVe," \u2014 "),Fee=n(tVe,"A",{href:!0});var _Ot=s(Fee);wDr=r(_Ot,"TFXLMRobertaForQuestionAnswering"),_Ot.forEach(t),ADr=r(tVe," (XLM-RoBERTa model)"),tVe.forEach(t),LDr=i(ue),aw=n(ue,"LI",{});var aVe=s(aw);N0e=n(aVe,"STRONG",{});var bOt=s(N0e);yDr=r(bOt,"xlnet"),bOt.forEach(t),xDr=r(aVe," \u2014 "),Tee=n(aVe,"A",{href:!0});var vOt=s(Tee);$Dr=r(vOt,"TFXLNetForQuestionAnsweringSimple"),vOt.forEach(t),kDr=r(aVe," (XLNet model)"),aVe.forEach(t),ue.forEach(t),SDr=i(oi),T(nw.$$.fragment,oi),oi.forEach(t),ei.forEach(t),DWe=i(m),Xc=n(m,"H2",{class:!0});var UHe=s(Xc);sw=n(UHe,"A",{id:!0,class:!0,href:!0});var FOt=s(sw);q0e=n(FOt,"SPAN",{});var TOt=s(q0e);T(h$.$$.fragment,TOt),TOt.forEach(t),FOt.forEach(t),RDr=i(UHe),j0e=n(UHe,"SPAN",{});var MOt=s(j0e);PDr=r(MOt,"TFAutoModelForVision2Seq"),MOt.forEach(t),UHe.forEach(t),GWe=i(m),hr=n(m,"DIV",{class:!0});var ri=s(hr);T(u$.$$.fragment,ri),BDr=i(ri),zc=n(ri,"P",{});var Rae=s(zc);IDr=r(Rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Mee=n(Rae,"A",{href:!0});var EOt=s(Mee);NDr=r(EOt,"from_pretrained()"),EOt.forEach(t),qDr=r(Rae," class method or the "),Eee=n(Rae,"A",{href:!0});var COt=s(Eee);jDr=r(COt,"from_config()"),COt.forEach(t),DDr=r(Rae,` class
method.`),Rae.forEach(t),GDr=i(ri),p$=n(ri,"P",{});var JHe=s(p$);ODr=r(JHe,"This class cannot be instantiated directly using "),D0e=n(JHe,"CODE",{});var wOt=s(D0e);VDr=r(wOt,"__init__()"),wOt.forEach(t),XDr=r(JHe," (throws an error)."),JHe.forEach(t),zDr=i(ri),zt=n(ri,"DIV",{class:!0});var VL=s(zt);T(_$.$$.fragment,VL),WDr=i(VL),G0e=n(VL,"P",{});var AOt=s(G0e);QDr=r(AOt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),AOt.forEach(t),HDr=i(VL),Wc=n(VL,"P",{});var Pae=s(Wc);UDr=r(Pae,`Note:
Loading a model from its configuration file does `),O0e=n(Pae,"STRONG",{});var LOt=s(O0e);JDr=r(LOt,"not"),LOt.forEach(t),YDr=r(Pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cee=n(Pae,"A",{href:!0});var yOt=s(Cee);KDr=r(yOt,"from_pretrained()"),yOt.forEach(t),ZDr=r(Pae," to load the model weights."),Pae.forEach(t),eGr=i(VL),T(lw.$$.fragment,VL),VL.forEach(t),oGr=i(ri),Or=n(ri,"DIV",{class:!0});var ti=s(Or);T(b$.$$.fragment,ti),rGr=i(ti),V0e=n(ti,"P",{});var xOt=s(V0e);tGr=r(xOt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),xOt.forEach(t),aGr=i(ti),Fn=n(ti,"P",{});var XL=s(Fn);nGr=r(XL,"The model class to instantiate is selected based on the "),X0e=n(XL,"CODE",{});var $Ot=s(X0e);sGr=r($Ot,"model_type"),$Ot.forEach(t),lGr=r(XL,` property of the config object (either
passed as an argument or loaded from `),z0e=n(XL,"CODE",{});var kOt=s(z0e);iGr=r(kOt,"pretrained_model_name_or_path"),kOt.forEach(t),dGr=r(XL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W0e=n(XL,"CODE",{});var SOt=s(W0e);cGr=r(SOt,"pretrained_model_name_or_path"),SOt.forEach(t),mGr=r(XL,":"),XL.forEach(t),fGr=i(ti),Q0e=n(ti,"UL",{});var ROt=s(Q0e);iw=n(ROt,"LI",{});var nVe=s(iw);H0e=n(nVe,"STRONG",{});var POt=s(H0e);gGr=r(POt,"vision-encoder-decoder"),POt.forEach(t),hGr=r(nVe," \u2014 "),wee=n(nVe,"A",{href:!0});var BOt=s(wee);uGr=r(BOt,"TFVisionEncoderDecoderModel"),BOt.forEach(t),pGr=r(nVe," (Vision Encoder decoder model)"),nVe.forEach(t),ROt.forEach(t),_Gr=i(ti),T(dw.$$.fragment,ti),ti.forEach(t),ri.forEach(t),OWe=i(m),Qc=n(m,"H2",{class:!0});var YHe=s(Qc);cw=n(YHe,"A",{id:!0,class:!0,href:!0});var IOt=s(cw);U0e=n(IOt,"SPAN",{});var NOt=s(U0e);T(v$.$$.fragment,NOt),NOt.forEach(t),IOt.forEach(t),bGr=i(YHe),J0e=n(YHe,"SPAN",{});var qOt=s(J0e);vGr=r(qOt,"TFAutoModelForSpeechSeq2Seq"),qOt.forEach(t),YHe.forEach(t),VWe=i(m),ur=n(m,"DIV",{class:!0});var ai=s(ur);T(F$.$$.fragment,ai),FGr=i(ai),Hc=n(ai,"P",{});var Bae=s(Hc);TGr=r(Bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Aee=n(Bae,"A",{href:!0});var jOt=s(Aee);MGr=r(jOt,"from_pretrained()"),jOt.forEach(t),EGr=r(Bae," class method or the "),Lee=n(Bae,"A",{href:!0});var DOt=s(Lee);CGr=r(DOt,"from_config()"),DOt.forEach(t),wGr=r(Bae,` class
method.`),Bae.forEach(t),AGr=i(ai),T$=n(ai,"P",{});var KHe=s(T$);LGr=r(KHe,"This class cannot be instantiated directly using "),Y0e=n(KHe,"CODE",{});var GOt=s(Y0e);yGr=r(GOt,"__init__()"),GOt.forEach(t),xGr=r(KHe," (throws an error)."),KHe.forEach(t),$Gr=i(ai),Wt=n(ai,"DIV",{class:!0});var zL=s(Wt);T(M$.$$.fragment,zL),kGr=i(zL),K0e=n(zL,"P",{});var OOt=s(K0e);SGr=r(OOt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),OOt.forEach(t),RGr=i(zL),Uc=n(zL,"P",{});var Iae=s(Uc);PGr=r(Iae,`Note:
Loading a model from its configuration file does `),Z0e=n(Iae,"STRONG",{});var VOt=s(Z0e);BGr=r(VOt,"not"),VOt.forEach(t),IGr=r(Iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),yee=n(Iae,"A",{href:!0});var XOt=s(yee);NGr=r(XOt,"from_pretrained()"),XOt.forEach(t),qGr=r(Iae," to load the model weights."),Iae.forEach(t),jGr=i(zL),T(mw.$$.fragment,zL),zL.forEach(t),DGr=i(ai),Vr=n(ai,"DIV",{class:!0});var ni=s(Vr);T(E$.$$.fragment,ni),GGr=i(ni),ewe=n(ni,"P",{});var zOt=s(ewe);OGr=r(zOt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),zOt.forEach(t),VGr=i(ni),Tn=n(ni,"P",{});var WL=s(Tn);XGr=r(WL,"The model class to instantiate is selected based on the "),owe=n(WL,"CODE",{});var WOt=s(owe);zGr=r(WOt,"model_type"),WOt.forEach(t),WGr=r(WL,` property of the config object (either
passed as an argument or loaded from `),rwe=n(WL,"CODE",{});var QOt=s(rwe);QGr=r(QOt,"pretrained_model_name_or_path"),QOt.forEach(t),HGr=r(WL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),twe=n(WL,"CODE",{});var HOt=s(twe);UGr=r(HOt,"pretrained_model_name_or_path"),HOt.forEach(t),JGr=r(WL,":"),WL.forEach(t),YGr=i(ni),awe=n(ni,"UL",{});var UOt=s(awe);fw=n(UOt,"LI",{});var sVe=s(fw);nwe=n(sVe,"STRONG",{});var JOt=s(nwe);KGr=r(JOt,"speech_to_text"),JOt.forEach(t),ZGr=r(sVe," \u2014 "),xee=n(sVe,"A",{href:!0});var YOt=s(xee);eOr=r(YOt,"TFSpeech2TextForConditionalGeneration"),YOt.forEach(t),oOr=r(sVe," (Speech2Text model)"),sVe.forEach(t),UOt.forEach(t),rOr=i(ni),T(gw.$$.fragment,ni),ni.forEach(t),ai.forEach(t),XWe=i(m),Jc=n(m,"H2",{class:!0});var ZHe=s(Jc);hw=n(ZHe,"A",{id:!0,class:!0,href:!0});var KOt=s(hw);swe=n(KOt,"SPAN",{});var ZOt=s(swe);T(C$.$$.fragment,ZOt),ZOt.forEach(t),KOt.forEach(t),tOr=i(ZHe),lwe=n(ZHe,"SPAN",{});var eVt=s(lwe);aOr=r(eVt,"FlaxAutoModel"),eVt.forEach(t),ZHe.forEach(t),zWe=i(m),pr=n(m,"DIV",{class:!0});var si=s(pr);T(w$.$$.fragment,si),nOr=i(si),Yc=n(si,"P",{});var Nae=s(Yc);sOr=r(Nae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$ee=n(Nae,"A",{href:!0});var oVt=s($ee);lOr=r(oVt,"from_pretrained()"),oVt.forEach(t),iOr=r(Nae," class method or the "),kee=n(Nae,"A",{href:!0});var rVt=s(kee);dOr=r(rVt,"from_config()"),rVt.forEach(t),cOr=r(Nae,` class
method.`),Nae.forEach(t),mOr=i(si),A$=n(si,"P",{});var eUe=s(A$);fOr=r(eUe,"This class cannot be instantiated directly using "),iwe=n(eUe,"CODE",{});var tVt=s(iwe);gOr=r(tVt,"__init__()"),tVt.forEach(t),hOr=r(eUe," (throws an error)."),eUe.forEach(t),uOr=i(si),Qt=n(si,"DIV",{class:!0});var QL=s(Qt);T(L$.$$.fragment,QL),pOr=i(QL),dwe=n(QL,"P",{});var aVt=s(dwe);_Or=r(aVt,"Instantiates one of the base model classes of the library from a configuration."),aVt.forEach(t),bOr=i(QL),Kc=n(QL,"P",{});var qae=s(Kc);vOr=r(qae,`Note:
Loading a model from its configuration file does `),cwe=n(qae,"STRONG",{});var nVt=s(cwe);FOr=r(nVt,"not"),nVt.forEach(t),TOr=r(qae,` load the model weights. It only affects the
model\u2019s configuration. Use `),See=n(qae,"A",{href:!0});var sVt=s(See);MOr=r(sVt,"from_pretrained()"),sVt.forEach(t),EOr=r(qae," to load the model weights."),qae.forEach(t),COr=i(QL),T(uw.$$.fragment,QL),QL.forEach(t),wOr=i(si),Xr=n(si,"DIV",{class:!0});var li=s(Xr);T(y$.$$.fragment,li),AOr=i(li),mwe=n(li,"P",{});var lVt=s(mwe);LOr=r(lVt,"Instantiate one of the base model classes of the library from a pretrained model."),lVt.forEach(t),yOr=i(li),Mn=n(li,"P",{});var HL=s(Mn);xOr=r(HL,"The model class to instantiate is selected based on the "),fwe=n(HL,"CODE",{});var iVt=s(fwe);$Or=r(iVt,"model_type"),iVt.forEach(t),kOr=r(HL,` property of the config object (either
passed as an argument or loaded from `),gwe=n(HL,"CODE",{});var dVt=s(gwe);SOr=r(dVt,"pretrained_model_name_or_path"),dVt.forEach(t),ROr=r(HL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hwe=n(HL,"CODE",{});var cVt=s(hwe);POr=r(cVt,"pretrained_model_name_or_path"),cVt.forEach(t),BOr=r(HL,":"),HL.forEach(t),IOr=i(li),oe=n(li,"UL",{});var ae=s(oe);pw=n(ae,"LI",{});var lVe=s(pw);uwe=n(lVe,"STRONG",{});var mVt=s(uwe);NOr=r(mVt,"albert"),mVt.forEach(t),qOr=r(lVe," \u2014 "),Ree=n(lVe,"A",{href:!0});var fVt=s(Ree);jOr=r(fVt,"FlaxAlbertModel"),fVt.forEach(t),DOr=r(lVe," (ALBERT model)"),lVe.forEach(t),GOr=i(ae),_w=n(ae,"LI",{});var iVe=s(_w);pwe=n(iVe,"STRONG",{});var gVt=s(pwe);OOr=r(gVt,"bart"),gVt.forEach(t),VOr=r(iVe," \u2014 "),Pee=n(iVe,"A",{href:!0});var hVt=s(Pee);XOr=r(hVt,"FlaxBartModel"),hVt.forEach(t),zOr=r(iVe," (BART model)"),iVe.forEach(t),WOr=i(ae),bw=n(ae,"LI",{});var dVe=s(bw);_we=n(dVe,"STRONG",{});var uVt=s(_we);QOr=r(uVt,"beit"),uVt.forEach(t),HOr=r(dVe," \u2014 "),Bee=n(dVe,"A",{href:!0});var pVt=s(Bee);UOr=r(pVt,"FlaxBeitModel"),pVt.forEach(t),JOr=r(dVe," (BEiT model)"),dVe.forEach(t),YOr=i(ae),vw=n(ae,"LI",{});var cVe=s(vw);bwe=n(cVe,"STRONG",{});var _Vt=s(bwe);KOr=r(_Vt,"bert"),_Vt.forEach(t),ZOr=r(cVe," \u2014 "),Iee=n(cVe,"A",{href:!0});var bVt=s(Iee);eVr=r(bVt,"FlaxBertModel"),bVt.forEach(t),oVr=r(cVe," (BERT model)"),cVe.forEach(t),rVr=i(ae),Fw=n(ae,"LI",{});var mVe=s(Fw);vwe=n(mVe,"STRONG",{});var vVt=s(vwe);tVr=r(vVt,"big_bird"),vVt.forEach(t),aVr=r(mVe," \u2014 "),Nee=n(mVe,"A",{href:!0});var FVt=s(Nee);nVr=r(FVt,"FlaxBigBirdModel"),FVt.forEach(t),sVr=r(mVe," (BigBird model)"),mVe.forEach(t),lVr=i(ae),Tw=n(ae,"LI",{});var fVe=s(Tw);Fwe=n(fVe,"STRONG",{});var TVt=s(Fwe);iVr=r(TVt,"blenderbot"),TVt.forEach(t),dVr=r(fVe," \u2014 "),qee=n(fVe,"A",{href:!0});var MVt=s(qee);cVr=r(MVt,"FlaxBlenderbotModel"),MVt.forEach(t),mVr=r(fVe," (Blenderbot model)"),fVe.forEach(t),fVr=i(ae),Mw=n(ae,"LI",{});var gVe=s(Mw);Twe=n(gVe,"STRONG",{});var EVt=s(Twe);gVr=r(EVt,"blenderbot-small"),EVt.forEach(t),hVr=r(gVe," \u2014 "),jee=n(gVe,"A",{href:!0});var CVt=s(jee);uVr=r(CVt,"FlaxBlenderbotSmallModel"),CVt.forEach(t),pVr=r(gVe," (BlenderbotSmall model)"),gVe.forEach(t),_Vr=i(ae),Ew=n(ae,"LI",{});var hVe=s(Ew);Mwe=n(hVe,"STRONG",{});var wVt=s(Mwe);bVr=r(wVt,"clip"),wVt.forEach(t),vVr=r(hVe," \u2014 "),Dee=n(hVe,"A",{href:!0});var AVt=s(Dee);FVr=r(AVt,"FlaxCLIPModel"),AVt.forEach(t),TVr=r(hVe," (CLIP model)"),hVe.forEach(t),MVr=i(ae),Cw=n(ae,"LI",{});var uVe=s(Cw);Ewe=n(uVe,"STRONG",{});var LVt=s(Ewe);EVr=r(LVt,"distilbert"),LVt.forEach(t),CVr=r(uVe," \u2014 "),Gee=n(uVe,"A",{href:!0});var yVt=s(Gee);wVr=r(yVt,"FlaxDistilBertModel"),yVt.forEach(t),AVr=r(uVe," (DistilBERT model)"),uVe.forEach(t),LVr=i(ae),ww=n(ae,"LI",{});var pVe=s(ww);Cwe=n(pVe,"STRONG",{});var xVt=s(Cwe);yVr=r(xVt,"electra"),xVt.forEach(t),xVr=r(pVe," \u2014 "),Oee=n(pVe,"A",{href:!0});var $Vt=s(Oee);$Vr=r($Vt,"FlaxElectraModel"),$Vt.forEach(t),kVr=r(pVe," (ELECTRA model)"),pVe.forEach(t),SVr=i(ae),Aw=n(ae,"LI",{});var _Ve=s(Aw);wwe=n(_Ve,"STRONG",{});var kVt=s(wwe);RVr=r(kVt,"gpt2"),kVt.forEach(t),PVr=r(_Ve," \u2014 "),Vee=n(_Ve,"A",{href:!0});var SVt=s(Vee);BVr=r(SVt,"FlaxGPT2Model"),SVt.forEach(t),IVr=r(_Ve," (OpenAI GPT-2 model)"),_Ve.forEach(t),NVr=i(ae),Lw=n(ae,"LI",{});var bVe=s(Lw);Awe=n(bVe,"STRONG",{});var RVt=s(Awe);qVr=r(RVt,"gpt_neo"),RVt.forEach(t),jVr=r(bVe," \u2014 "),Xee=n(bVe,"A",{href:!0});var PVt=s(Xee);DVr=r(PVt,"FlaxGPTNeoModel"),PVt.forEach(t),GVr=r(bVe," (GPT Neo model)"),bVe.forEach(t),OVr=i(ae),yw=n(ae,"LI",{});var vVe=s(yw);Lwe=n(vVe,"STRONG",{});var BVt=s(Lwe);VVr=r(BVt,"gptj"),BVt.forEach(t),XVr=r(vVe," \u2014 "),zee=n(vVe,"A",{href:!0});var IVt=s(zee);zVr=r(IVt,"FlaxGPTJModel"),IVt.forEach(t),WVr=r(vVe," (GPT-J model)"),vVe.forEach(t),QVr=i(ae),xw=n(ae,"LI",{});var FVe=s(xw);ywe=n(FVe,"STRONG",{});var NVt=s(ywe);HVr=r(NVt,"longt5"),NVt.forEach(t),UVr=r(FVe," \u2014 "),Wee=n(FVe,"A",{href:!0});var qVt=s(Wee);JVr=r(qVt,"FlaxLongT5Model"),qVt.forEach(t),YVr=r(FVe," (LongT5 model)"),FVe.forEach(t),KVr=i(ae),$w=n(ae,"LI",{});var TVe=s($w);xwe=n(TVe,"STRONG",{});var jVt=s(xwe);ZVr=r(jVt,"marian"),jVt.forEach(t),eXr=r(TVe," \u2014 "),Qee=n(TVe,"A",{href:!0});var DVt=s(Qee);oXr=r(DVt,"FlaxMarianModel"),DVt.forEach(t),rXr=r(TVe," (Marian model)"),TVe.forEach(t),tXr=i(ae),kw=n(ae,"LI",{});var MVe=s(kw);$we=n(MVe,"STRONG",{});var GVt=s($we);aXr=r(GVt,"mbart"),GVt.forEach(t),nXr=r(MVe," \u2014 "),Hee=n(MVe,"A",{href:!0});var OVt=s(Hee);sXr=r(OVt,"FlaxMBartModel"),OVt.forEach(t),lXr=r(MVe," (mBART model)"),MVe.forEach(t),iXr=i(ae),Sw=n(ae,"LI",{});var EVe=s(Sw);kwe=n(EVe,"STRONG",{});var VVt=s(kwe);dXr=r(VVt,"mt5"),VVt.forEach(t),cXr=r(EVe," \u2014 "),Uee=n(EVe,"A",{href:!0});var XVt=s(Uee);mXr=r(XVt,"FlaxMT5Model"),XVt.forEach(t),fXr=r(EVe," (MT5 model)"),EVe.forEach(t),gXr=i(ae),Rw=n(ae,"LI",{});var CVe=s(Rw);Swe=n(CVe,"STRONG",{});var zVt=s(Swe);hXr=r(zVt,"opt"),zVt.forEach(t),uXr=r(CVe," \u2014 "),Jee=n(CVe,"A",{href:!0});var WVt=s(Jee);pXr=r(WVt,"FlaxOPTModel"),WVt.forEach(t),_Xr=r(CVe," (OPT model)"),CVe.forEach(t),bXr=i(ae),Pw=n(ae,"LI",{});var wVe=s(Pw);Rwe=n(wVe,"STRONG",{});var QVt=s(Rwe);vXr=r(QVt,"pegasus"),QVt.forEach(t),FXr=r(wVe," \u2014 "),Yee=n(wVe,"A",{href:!0});var HVt=s(Yee);TXr=r(HVt,"FlaxPegasusModel"),HVt.forEach(t),MXr=r(wVe," (Pegasus model)"),wVe.forEach(t),EXr=i(ae),Bw=n(ae,"LI",{});var AVe=s(Bw);Pwe=n(AVe,"STRONG",{});var UVt=s(Pwe);CXr=r(UVt,"roberta"),UVt.forEach(t),wXr=r(AVe," \u2014 "),Kee=n(AVe,"A",{href:!0});var JVt=s(Kee);AXr=r(JVt,"FlaxRobertaModel"),JVt.forEach(t),LXr=r(AVe," (RoBERTa model)"),AVe.forEach(t),yXr=i(ae),Iw=n(ae,"LI",{});var LVe=s(Iw);Bwe=n(LVe,"STRONG",{});var YVt=s(Bwe);xXr=r(YVt,"roformer"),YVt.forEach(t),$Xr=r(LVe," \u2014 "),Zee=n(LVe,"A",{href:!0});var KVt=s(Zee);kXr=r(KVt,"FlaxRoFormerModel"),KVt.forEach(t),SXr=r(LVe," (RoFormer model)"),LVe.forEach(t),RXr=i(ae),Nw=n(ae,"LI",{});var yVe=s(Nw);Iwe=n(yVe,"STRONG",{});var ZVt=s(Iwe);PXr=r(ZVt,"t5"),ZVt.forEach(t),BXr=r(yVe," \u2014 "),eoe=n(yVe,"A",{href:!0});var eXt=s(eoe);IXr=r(eXt,"FlaxT5Model"),eXt.forEach(t),NXr=r(yVe," (T5 model)"),yVe.forEach(t),qXr=i(ae),qw=n(ae,"LI",{});var xVe=s(qw);Nwe=n(xVe,"STRONG",{});var oXt=s(Nwe);jXr=r(oXt,"vision-text-dual-encoder"),oXt.forEach(t),DXr=r(xVe," \u2014 "),ooe=n(xVe,"A",{href:!0});var rXt=s(ooe);GXr=r(rXt,"FlaxVisionTextDualEncoderModel"),rXt.forEach(t),OXr=r(xVe," (VisionTextDualEncoder model)"),xVe.forEach(t),VXr=i(ae),jw=n(ae,"LI",{});var $Ve=s(jw);qwe=n($Ve,"STRONG",{});var tXt=s(qwe);XXr=r(tXt,"vit"),tXt.forEach(t),zXr=r($Ve," \u2014 "),roe=n($Ve,"A",{href:!0});var aXt=s(roe);WXr=r(aXt,"FlaxViTModel"),aXt.forEach(t),QXr=r($Ve," (ViT model)"),$Ve.forEach(t),HXr=i(ae),Dw=n(ae,"LI",{});var kVe=s(Dw);jwe=n(kVe,"STRONG",{});var nXt=s(jwe);UXr=r(nXt,"wav2vec2"),nXt.forEach(t),JXr=r(kVe," \u2014 "),toe=n(kVe,"A",{href:!0});var sXt=s(toe);YXr=r(sXt,"FlaxWav2Vec2Model"),sXt.forEach(t),KXr=r(kVe," (Wav2Vec2 model)"),kVe.forEach(t),ZXr=i(ae),Gw=n(ae,"LI",{});var SVe=s(Gw);Dwe=n(SVe,"STRONG",{});var lXt=s(Dwe);ezr=r(lXt,"xglm"),lXt.forEach(t),ozr=r(SVe," \u2014 "),aoe=n(SVe,"A",{href:!0});var iXt=s(aoe);rzr=r(iXt,"FlaxXGLMModel"),iXt.forEach(t),tzr=r(SVe," (XGLM model)"),SVe.forEach(t),azr=i(ae),Ow=n(ae,"LI",{});var RVe=s(Ow);Gwe=n(RVe,"STRONG",{});var dXt=s(Gwe);nzr=r(dXt,"xlm-roberta"),dXt.forEach(t),szr=r(RVe," \u2014 "),noe=n(RVe,"A",{href:!0});var cXt=s(noe);lzr=r(cXt,"FlaxXLMRobertaModel"),cXt.forEach(t),izr=r(RVe," (XLM-RoBERTa model)"),RVe.forEach(t),ae.forEach(t),dzr=i(li),T(Vw.$$.fragment,li),li.forEach(t),si.forEach(t),WWe=i(m),Zc=n(m,"H2",{class:!0});var oUe=s(Zc);Xw=n(oUe,"A",{id:!0,class:!0,href:!0});var mXt=s(Xw);Owe=n(mXt,"SPAN",{});var fXt=s(Owe);T(x$.$$.fragment,fXt),fXt.forEach(t),mXt.forEach(t),czr=i(oUe),Vwe=n(oUe,"SPAN",{});var gXt=s(Vwe);mzr=r(gXt,"FlaxAutoModelForCausalLM"),gXt.forEach(t),oUe.forEach(t),QWe=i(m),_r=n(m,"DIV",{class:!0});var ii=s(_r);T($$.$$.fragment,ii),fzr=i(ii),em=n(ii,"P",{});var jae=s(em);gzr=r(jae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),soe=n(jae,"A",{href:!0});var hXt=s(soe);hzr=r(hXt,"from_pretrained()"),hXt.forEach(t),uzr=r(jae," class method or the "),loe=n(jae,"A",{href:!0});var uXt=s(loe);pzr=r(uXt,"from_config()"),uXt.forEach(t),_zr=r(jae,` class
method.`),jae.forEach(t),bzr=i(ii),k$=n(ii,"P",{});var rUe=s(k$);vzr=r(rUe,"This class cannot be instantiated directly using "),Xwe=n(rUe,"CODE",{});var pXt=s(Xwe);Fzr=r(pXt,"__init__()"),pXt.forEach(t),Tzr=r(rUe," (throws an error)."),rUe.forEach(t),Mzr=i(ii),Ht=n(ii,"DIV",{class:!0});var UL=s(Ht);T(S$.$$.fragment,UL),Ezr=i(UL),zwe=n(UL,"P",{});var _Xt=s(zwe);Czr=r(_Xt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_Xt.forEach(t),wzr=i(UL),om=n(UL,"P",{});var Dae=s(om);Azr=r(Dae,`Note:
Loading a model from its configuration file does `),Wwe=n(Dae,"STRONG",{});var bXt=s(Wwe);Lzr=r(bXt,"not"),bXt.forEach(t),yzr=r(Dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ioe=n(Dae,"A",{href:!0});var vXt=s(ioe);xzr=r(vXt,"from_pretrained()"),vXt.forEach(t),$zr=r(Dae," to load the model weights."),Dae.forEach(t),kzr=i(UL),T(zw.$$.fragment,UL),UL.forEach(t),Szr=i(ii),zr=n(ii,"DIV",{class:!0});var di=s(zr);T(R$.$$.fragment,di),Rzr=i(di),Qwe=n(di,"P",{});var FXt=s(Qwe);Pzr=r(FXt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),FXt.forEach(t),Bzr=i(di),En=n(di,"P",{});var JL=s(En);Izr=r(JL,"The model class to instantiate is selected based on the "),Hwe=n(JL,"CODE",{});var TXt=s(Hwe);Nzr=r(TXt,"model_type"),TXt.forEach(t),qzr=r(JL,` property of the config object (either
passed as an argument or loaded from `),Uwe=n(JL,"CODE",{});var MXt=s(Uwe);jzr=r(MXt,"pretrained_model_name_or_path"),MXt.forEach(t),Dzr=r(JL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jwe=n(JL,"CODE",{});var EXt=s(Jwe);Gzr=r(EXt,"pretrained_model_name_or_path"),EXt.forEach(t),Ozr=r(JL,":"),JL.forEach(t),Vzr=i(di),xe=n(di,"UL",{});var Ne=s(xe);Ww=n(Ne,"LI",{});var PVe=s(Ww);Ywe=n(PVe,"STRONG",{});var CXt=s(Ywe);Xzr=r(CXt,"bart"),CXt.forEach(t),zzr=r(PVe," \u2014 "),doe=n(PVe,"A",{href:!0});var wXt=s(doe);Wzr=r(wXt,"FlaxBartForCausalLM"),wXt.forEach(t),Qzr=r(PVe," (BART model)"),PVe.forEach(t),Hzr=i(Ne),Qw=n(Ne,"LI",{});var BVe=s(Qw);Kwe=n(BVe,"STRONG",{});var AXt=s(Kwe);Uzr=r(AXt,"bert"),AXt.forEach(t),Jzr=r(BVe," \u2014 "),coe=n(BVe,"A",{href:!0});var LXt=s(coe);Yzr=r(LXt,"FlaxBertForCausalLM"),LXt.forEach(t),Kzr=r(BVe," (BERT model)"),BVe.forEach(t),Zzr=i(Ne),Hw=n(Ne,"LI",{});var IVe=s(Hw);Zwe=n(IVe,"STRONG",{});var yXt=s(Zwe);eWr=r(yXt,"big_bird"),yXt.forEach(t),oWr=r(IVe," \u2014 "),moe=n(IVe,"A",{href:!0});var xXt=s(moe);rWr=r(xXt,"FlaxBigBirdForCausalLM"),xXt.forEach(t),tWr=r(IVe," (BigBird model)"),IVe.forEach(t),aWr=i(Ne),Uw=n(Ne,"LI",{});var NVe=s(Uw);eAe=n(NVe,"STRONG",{});var $Xt=s(eAe);nWr=r($Xt,"electra"),$Xt.forEach(t),sWr=r(NVe," \u2014 "),foe=n(NVe,"A",{href:!0});var kXt=s(foe);lWr=r(kXt,"FlaxElectraForCausalLM"),kXt.forEach(t),iWr=r(NVe," (ELECTRA model)"),NVe.forEach(t),dWr=i(Ne),Jw=n(Ne,"LI",{});var qVe=s(Jw);oAe=n(qVe,"STRONG",{});var SXt=s(oAe);cWr=r(SXt,"gpt2"),SXt.forEach(t),mWr=r(qVe," \u2014 "),goe=n(qVe,"A",{href:!0});var RXt=s(goe);fWr=r(RXt,"FlaxGPT2LMHeadModel"),RXt.forEach(t),gWr=r(qVe," (OpenAI GPT-2 model)"),qVe.forEach(t),hWr=i(Ne),Yw=n(Ne,"LI",{});var jVe=s(Yw);rAe=n(jVe,"STRONG",{});var PXt=s(rAe);uWr=r(PXt,"gpt_neo"),PXt.forEach(t),pWr=r(jVe," \u2014 "),hoe=n(jVe,"A",{href:!0});var BXt=s(hoe);_Wr=r(BXt,"FlaxGPTNeoForCausalLM"),BXt.forEach(t),bWr=r(jVe," (GPT Neo model)"),jVe.forEach(t),vWr=i(Ne),Kw=n(Ne,"LI",{});var DVe=s(Kw);tAe=n(DVe,"STRONG",{});var IXt=s(tAe);FWr=r(IXt,"gptj"),IXt.forEach(t),TWr=r(DVe," \u2014 "),uoe=n(DVe,"A",{href:!0});var NXt=s(uoe);MWr=r(NXt,"FlaxGPTJForCausalLM"),NXt.forEach(t),EWr=r(DVe," (GPT-J model)"),DVe.forEach(t),CWr=i(Ne),Zw=n(Ne,"LI",{});var GVe=s(Zw);aAe=n(GVe,"STRONG",{});var qXt=s(aAe);wWr=r(qXt,"opt"),qXt.forEach(t),AWr=r(GVe," \u2014 "),poe=n(GVe,"A",{href:!0});var jXt=s(poe);LWr=r(jXt,"FlaxOPTForCausalLM"),jXt.forEach(t),yWr=r(GVe," (OPT model)"),GVe.forEach(t),xWr=i(Ne),eA=n(Ne,"LI",{});var OVe=s(eA);nAe=n(OVe,"STRONG",{});var DXt=s(nAe);$Wr=r(DXt,"roberta"),DXt.forEach(t),kWr=r(OVe," \u2014 "),_oe=n(OVe,"A",{href:!0});var GXt=s(_oe);SWr=r(GXt,"FlaxRobertaForCausalLM"),GXt.forEach(t),RWr=r(OVe," (RoBERTa model)"),OVe.forEach(t),PWr=i(Ne),oA=n(Ne,"LI",{});var VVe=s(oA);sAe=n(VVe,"STRONG",{});var OXt=s(sAe);BWr=r(OXt,"xglm"),OXt.forEach(t),IWr=r(VVe," \u2014 "),boe=n(VVe,"A",{href:!0});var VXt=s(boe);NWr=r(VXt,"FlaxXGLMForCausalLM"),VXt.forEach(t),qWr=r(VVe," (XGLM model)"),VVe.forEach(t),Ne.forEach(t),jWr=i(di),T(rA.$$.fragment,di),di.forEach(t),ii.forEach(t),HWe=i(m),rm=n(m,"H2",{class:!0});var tUe=s(rm);tA=n(tUe,"A",{id:!0,class:!0,href:!0});var XXt=s(tA);lAe=n(XXt,"SPAN",{});var zXt=s(lAe);T(P$.$$.fragment,zXt),zXt.forEach(t),XXt.forEach(t),DWr=i(tUe),iAe=n(tUe,"SPAN",{});var WXt=s(iAe);GWr=r(WXt,"FlaxAutoModelForPreTraining"),WXt.forEach(t),tUe.forEach(t),UWe=i(m),br=n(m,"DIV",{class:!0});var ci=s(br);T(B$.$$.fragment,ci),OWr=i(ci),tm=n(ci,"P",{});var Gae=s(tm);VWr=r(Gae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),voe=n(Gae,"A",{href:!0});var QXt=s(voe);XWr=r(QXt,"from_pretrained()"),QXt.forEach(t),zWr=r(Gae," class method or the "),Foe=n(Gae,"A",{href:!0});var HXt=s(Foe);WWr=r(HXt,"from_config()"),HXt.forEach(t),QWr=r(Gae,` class
method.`),Gae.forEach(t),HWr=i(ci),I$=n(ci,"P",{});var aUe=s(I$);UWr=r(aUe,"This class cannot be instantiated directly using "),dAe=n(aUe,"CODE",{});var UXt=s(dAe);JWr=r(UXt,"__init__()"),UXt.forEach(t),YWr=r(aUe," (throws an error)."),aUe.forEach(t),KWr=i(ci),Ut=n(ci,"DIV",{class:!0});var YL=s(Ut);T(N$.$$.fragment,YL),ZWr=i(YL),cAe=n(YL,"P",{});var JXt=s(cAe);eQr=r(JXt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),JXt.forEach(t),oQr=i(YL),am=n(YL,"P",{});var Oae=s(am);rQr=r(Oae,`Note:
Loading a model from its configuration file does `),mAe=n(Oae,"STRONG",{});var YXt=s(mAe);tQr=r(YXt,"not"),YXt.forEach(t),aQr=r(Oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Toe=n(Oae,"A",{href:!0});var KXt=s(Toe);nQr=r(KXt,"from_pretrained()"),KXt.forEach(t),sQr=r(Oae," to load the model weights."),Oae.forEach(t),lQr=i(YL),T(aA.$$.fragment,YL),YL.forEach(t),iQr=i(ci),Wr=n(ci,"DIV",{class:!0});var mi=s(Wr);T(q$.$$.fragment,mi),dQr=i(mi),fAe=n(mi,"P",{});var ZXt=s(fAe);cQr=r(ZXt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ZXt.forEach(t),mQr=i(mi),Cn=n(mi,"P",{});var KL=s(Cn);fQr=r(KL,"The model class to instantiate is selected based on the "),gAe=n(KL,"CODE",{});var ezt=s(gAe);gQr=r(ezt,"model_type"),ezt.forEach(t),hQr=r(KL,` property of the config object (either
passed as an argument or loaded from `),hAe=n(KL,"CODE",{});var ozt=s(hAe);uQr=r(ozt,"pretrained_model_name_or_path"),ozt.forEach(t),pQr=r(KL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uAe=n(KL,"CODE",{});var rzt=s(uAe);_Qr=r(rzt,"pretrained_model_name_or_path"),rzt.forEach(t),bQr=r(KL,":"),KL.forEach(t),vQr=i(mi),Ee=n(mi,"UL",{});var we=s(Ee);nA=n(we,"LI",{});var XVe=s(nA);pAe=n(XVe,"STRONG",{});var tzt=s(pAe);FQr=r(tzt,"albert"),tzt.forEach(t),TQr=r(XVe," \u2014 "),Moe=n(XVe,"A",{href:!0});var azt=s(Moe);MQr=r(azt,"FlaxAlbertForPreTraining"),azt.forEach(t),EQr=r(XVe," (ALBERT model)"),XVe.forEach(t),CQr=i(we),sA=n(we,"LI",{});var zVe=s(sA);_Ae=n(zVe,"STRONG",{});var nzt=s(_Ae);wQr=r(nzt,"bart"),nzt.forEach(t),AQr=r(zVe," \u2014 "),Eoe=n(zVe,"A",{href:!0});var szt=s(Eoe);LQr=r(szt,"FlaxBartForConditionalGeneration"),szt.forEach(t),yQr=r(zVe," (BART model)"),zVe.forEach(t),xQr=i(we),lA=n(we,"LI",{});var WVe=s(lA);bAe=n(WVe,"STRONG",{});var lzt=s(bAe);$Qr=r(lzt,"bert"),lzt.forEach(t),kQr=r(WVe," \u2014 "),Coe=n(WVe,"A",{href:!0});var izt=s(Coe);SQr=r(izt,"FlaxBertForPreTraining"),izt.forEach(t),RQr=r(WVe," (BERT model)"),WVe.forEach(t),PQr=i(we),iA=n(we,"LI",{});var QVe=s(iA);vAe=n(QVe,"STRONG",{});var dzt=s(vAe);BQr=r(dzt,"big_bird"),dzt.forEach(t),IQr=r(QVe," \u2014 "),woe=n(QVe,"A",{href:!0});var czt=s(woe);NQr=r(czt,"FlaxBigBirdForPreTraining"),czt.forEach(t),qQr=r(QVe," (BigBird model)"),QVe.forEach(t),jQr=i(we),dA=n(we,"LI",{});var HVe=s(dA);FAe=n(HVe,"STRONG",{});var mzt=s(FAe);DQr=r(mzt,"electra"),mzt.forEach(t),GQr=r(HVe," \u2014 "),Aoe=n(HVe,"A",{href:!0});var fzt=s(Aoe);OQr=r(fzt,"FlaxElectraForPreTraining"),fzt.forEach(t),VQr=r(HVe," (ELECTRA model)"),HVe.forEach(t),XQr=i(we),cA=n(we,"LI",{});var UVe=s(cA);TAe=n(UVe,"STRONG",{});var gzt=s(TAe);zQr=r(gzt,"longt5"),gzt.forEach(t),WQr=r(UVe," \u2014 "),Loe=n(UVe,"A",{href:!0});var hzt=s(Loe);QQr=r(hzt,"FlaxLongT5ForConditionalGeneration"),hzt.forEach(t),HQr=r(UVe," (LongT5 model)"),UVe.forEach(t),UQr=i(we),mA=n(we,"LI",{});var JVe=s(mA);MAe=n(JVe,"STRONG",{});var uzt=s(MAe);JQr=r(uzt,"mbart"),uzt.forEach(t),YQr=r(JVe," \u2014 "),yoe=n(JVe,"A",{href:!0});var pzt=s(yoe);KQr=r(pzt,"FlaxMBartForConditionalGeneration"),pzt.forEach(t),ZQr=r(JVe," (mBART model)"),JVe.forEach(t),eHr=i(we),fA=n(we,"LI",{});var YVe=s(fA);EAe=n(YVe,"STRONG",{});var _zt=s(EAe);oHr=r(_zt,"mt5"),_zt.forEach(t),rHr=r(YVe," \u2014 "),xoe=n(YVe,"A",{href:!0});var bzt=s(xoe);tHr=r(bzt,"FlaxMT5ForConditionalGeneration"),bzt.forEach(t),aHr=r(YVe," (MT5 model)"),YVe.forEach(t),nHr=i(we),gA=n(we,"LI",{});var KVe=s(gA);CAe=n(KVe,"STRONG",{});var vzt=s(CAe);sHr=r(vzt,"roberta"),vzt.forEach(t),lHr=r(KVe," \u2014 "),$oe=n(KVe,"A",{href:!0});var Fzt=s($oe);iHr=r(Fzt,"FlaxRobertaForMaskedLM"),Fzt.forEach(t),dHr=r(KVe," (RoBERTa model)"),KVe.forEach(t),cHr=i(we),hA=n(we,"LI",{});var ZVe=s(hA);wAe=n(ZVe,"STRONG",{});var Tzt=s(wAe);mHr=r(Tzt,"roformer"),Tzt.forEach(t),fHr=r(ZVe," \u2014 "),koe=n(ZVe,"A",{href:!0});var Mzt=s(koe);gHr=r(Mzt,"FlaxRoFormerForMaskedLM"),Mzt.forEach(t),hHr=r(ZVe," (RoFormer model)"),ZVe.forEach(t),uHr=i(we),uA=n(we,"LI",{});var eXe=s(uA);AAe=n(eXe,"STRONG",{});var Ezt=s(AAe);pHr=r(Ezt,"t5"),Ezt.forEach(t),_Hr=r(eXe," \u2014 "),Soe=n(eXe,"A",{href:!0});var Czt=s(Soe);bHr=r(Czt,"FlaxT5ForConditionalGeneration"),Czt.forEach(t),vHr=r(eXe," (T5 model)"),eXe.forEach(t),FHr=i(we),pA=n(we,"LI",{});var oXe=s(pA);LAe=n(oXe,"STRONG",{});var wzt=s(LAe);THr=r(wzt,"wav2vec2"),wzt.forEach(t),MHr=r(oXe," \u2014 "),Roe=n(oXe,"A",{href:!0});var Azt=s(Roe);EHr=r(Azt,"FlaxWav2Vec2ForPreTraining"),Azt.forEach(t),CHr=r(oXe," (Wav2Vec2 model)"),oXe.forEach(t),wHr=i(we),_A=n(we,"LI",{});var rXe=s(_A);yAe=n(rXe,"STRONG",{});var Lzt=s(yAe);AHr=r(Lzt,"xlm-roberta"),Lzt.forEach(t),LHr=r(rXe," \u2014 "),Poe=n(rXe,"A",{href:!0});var yzt=s(Poe);yHr=r(yzt,"FlaxXLMRobertaForMaskedLM"),yzt.forEach(t),xHr=r(rXe," (XLM-RoBERTa model)"),rXe.forEach(t),we.forEach(t),$Hr=i(mi),T(bA.$$.fragment,mi),mi.forEach(t),ci.forEach(t),JWe=i(m),nm=n(m,"H2",{class:!0});var nUe=s(nm);vA=n(nUe,"A",{id:!0,class:!0,href:!0});var xzt=s(vA);xAe=n(xzt,"SPAN",{});var $zt=s(xAe);T(j$.$$.fragment,$zt),$zt.forEach(t),xzt.forEach(t),kHr=i(nUe),$Ae=n(nUe,"SPAN",{});var kzt=s($Ae);SHr=r(kzt,"FlaxAutoModelForMaskedLM"),kzt.forEach(t),nUe.forEach(t),YWe=i(m),vr=n(m,"DIV",{class:!0});var fi=s(vr);T(D$.$$.fragment,fi),RHr=i(fi),sm=n(fi,"P",{});var Vae=s(sm);PHr=r(Vae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Boe=n(Vae,"A",{href:!0});var Szt=s(Boe);BHr=r(Szt,"from_pretrained()"),Szt.forEach(t),IHr=r(Vae," class method or the "),Ioe=n(Vae,"A",{href:!0});var Rzt=s(Ioe);NHr=r(Rzt,"from_config()"),Rzt.forEach(t),qHr=r(Vae,` class
method.`),Vae.forEach(t),jHr=i(fi),G$=n(fi,"P",{});var sUe=s(G$);DHr=r(sUe,"This class cannot be instantiated directly using "),kAe=n(sUe,"CODE",{});var Pzt=s(kAe);GHr=r(Pzt,"__init__()"),Pzt.forEach(t),OHr=r(sUe," (throws an error)."),sUe.forEach(t),VHr=i(fi),Jt=n(fi,"DIV",{class:!0});var ZL=s(Jt);T(O$.$$.fragment,ZL),XHr=i(ZL),SAe=n(ZL,"P",{});var Bzt=s(SAe);zHr=r(Bzt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Bzt.forEach(t),WHr=i(ZL),lm=n(ZL,"P",{});var Xae=s(lm);QHr=r(Xae,`Note:
Loading a model from its configuration file does `),RAe=n(Xae,"STRONG",{});var Izt=s(RAe);HHr=r(Izt,"not"),Izt.forEach(t),UHr=r(Xae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Noe=n(Xae,"A",{href:!0});var Nzt=s(Noe);JHr=r(Nzt,"from_pretrained()"),Nzt.forEach(t),YHr=r(Xae," to load the model weights."),Xae.forEach(t),KHr=i(ZL),T(FA.$$.fragment,ZL),ZL.forEach(t),ZHr=i(fi),Qr=n(fi,"DIV",{class:!0});var gi=s(Qr);T(V$.$$.fragment,gi),eUr=i(gi),PAe=n(gi,"P",{});var qzt=s(PAe);oUr=r(qzt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qzt.forEach(t),rUr=i(gi),wn=n(gi,"P",{});var ey=s(wn);tUr=r(ey,"The model class to instantiate is selected based on the "),BAe=n(ey,"CODE",{});var jzt=s(BAe);aUr=r(jzt,"model_type"),jzt.forEach(t),nUr=r(ey,` property of the config object (either
passed as an argument or loaded from `),IAe=n(ey,"CODE",{});var Dzt=s(IAe);sUr=r(Dzt,"pretrained_model_name_or_path"),Dzt.forEach(t),lUr=r(ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NAe=n(ey,"CODE",{});var Gzt=s(NAe);iUr=r(Gzt,"pretrained_model_name_or_path"),Gzt.forEach(t),dUr=r(ey,":"),ey.forEach(t),cUr=i(gi),$e=n(gi,"UL",{});var qe=s($e);TA=n(qe,"LI",{});var tXe=s(TA);qAe=n(tXe,"STRONG",{});var Ozt=s(qAe);mUr=r(Ozt,"albert"),Ozt.forEach(t),fUr=r(tXe," \u2014 "),qoe=n(tXe,"A",{href:!0});var Vzt=s(qoe);gUr=r(Vzt,"FlaxAlbertForMaskedLM"),Vzt.forEach(t),hUr=r(tXe," (ALBERT model)"),tXe.forEach(t),uUr=i(qe),MA=n(qe,"LI",{});var aXe=s(MA);jAe=n(aXe,"STRONG",{});var Xzt=s(jAe);pUr=r(Xzt,"bart"),Xzt.forEach(t),_Ur=r(aXe," \u2014 "),joe=n(aXe,"A",{href:!0});var zzt=s(joe);bUr=r(zzt,"FlaxBartForConditionalGeneration"),zzt.forEach(t),vUr=r(aXe," (BART model)"),aXe.forEach(t),FUr=i(qe),EA=n(qe,"LI",{});var nXe=s(EA);DAe=n(nXe,"STRONG",{});var Wzt=s(DAe);TUr=r(Wzt,"bert"),Wzt.forEach(t),MUr=r(nXe," \u2014 "),Doe=n(nXe,"A",{href:!0});var Qzt=s(Doe);EUr=r(Qzt,"FlaxBertForMaskedLM"),Qzt.forEach(t),CUr=r(nXe," (BERT model)"),nXe.forEach(t),wUr=i(qe),CA=n(qe,"LI",{});var sXe=s(CA);GAe=n(sXe,"STRONG",{});var Hzt=s(GAe);AUr=r(Hzt,"big_bird"),Hzt.forEach(t),LUr=r(sXe," \u2014 "),Goe=n(sXe,"A",{href:!0});var Uzt=s(Goe);yUr=r(Uzt,"FlaxBigBirdForMaskedLM"),Uzt.forEach(t),xUr=r(sXe," (BigBird model)"),sXe.forEach(t),$Ur=i(qe),wA=n(qe,"LI",{});var lXe=s(wA);OAe=n(lXe,"STRONG",{});var Jzt=s(OAe);kUr=r(Jzt,"distilbert"),Jzt.forEach(t),SUr=r(lXe," \u2014 "),Ooe=n(lXe,"A",{href:!0});var Yzt=s(Ooe);RUr=r(Yzt,"FlaxDistilBertForMaskedLM"),Yzt.forEach(t),PUr=r(lXe," (DistilBERT model)"),lXe.forEach(t),BUr=i(qe),AA=n(qe,"LI",{});var iXe=s(AA);VAe=n(iXe,"STRONG",{});var Kzt=s(VAe);IUr=r(Kzt,"electra"),Kzt.forEach(t),NUr=r(iXe," \u2014 "),Voe=n(iXe,"A",{href:!0});var Zzt=s(Voe);qUr=r(Zzt,"FlaxElectraForMaskedLM"),Zzt.forEach(t),jUr=r(iXe," (ELECTRA model)"),iXe.forEach(t),DUr=i(qe),LA=n(qe,"LI",{});var dXe=s(LA);XAe=n(dXe,"STRONG",{});var eWt=s(XAe);GUr=r(eWt,"mbart"),eWt.forEach(t),OUr=r(dXe," \u2014 "),Xoe=n(dXe,"A",{href:!0});var oWt=s(Xoe);VUr=r(oWt,"FlaxMBartForConditionalGeneration"),oWt.forEach(t),XUr=r(dXe," (mBART model)"),dXe.forEach(t),zUr=i(qe),yA=n(qe,"LI",{});var cXe=s(yA);zAe=n(cXe,"STRONG",{});var rWt=s(zAe);WUr=r(rWt,"roberta"),rWt.forEach(t),QUr=r(cXe," \u2014 "),zoe=n(cXe,"A",{href:!0});var tWt=s(zoe);HUr=r(tWt,"FlaxRobertaForMaskedLM"),tWt.forEach(t),UUr=r(cXe," (RoBERTa model)"),cXe.forEach(t),JUr=i(qe),xA=n(qe,"LI",{});var mXe=s(xA);WAe=n(mXe,"STRONG",{});var aWt=s(WAe);YUr=r(aWt,"roformer"),aWt.forEach(t),KUr=r(mXe," \u2014 "),Woe=n(mXe,"A",{href:!0});var nWt=s(Woe);ZUr=r(nWt,"FlaxRoFormerForMaskedLM"),nWt.forEach(t),eJr=r(mXe," (RoFormer model)"),mXe.forEach(t),oJr=i(qe),$A=n(qe,"LI",{});var fXe=s($A);QAe=n(fXe,"STRONG",{});var sWt=s(QAe);rJr=r(sWt,"xlm-roberta"),sWt.forEach(t),tJr=r(fXe," \u2014 "),Qoe=n(fXe,"A",{href:!0});var lWt=s(Qoe);aJr=r(lWt,"FlaxXLMRobertaForMaskedLM"),lWt.forEach(t),nJr=r(fXe," (XLM-RoBERTa model)"),fXe.forEach(t),qe.forEach(t),sJr=i(gi),T(kA.$$.fragment,gi),gi.forEach(t),fi.forEach(t),KWe=i(m),im=n(m,"H2",{class:!0});var lUe=s(im);SA=n(lUe,"A",{id:!0,class:!0,href:!0});var iWt=s(SA);HAe=n(iWt,"SPAN",{});var dWt=s(HAe);T(X$.$$.fragment,dWt),dWt.forEach(t),iWt.forEach(t),lJr=i(lUe),UAe=n(lUe,"SPAN",{});var cWt=s(UAe);iJr=r(cWt,"FlaxAutoModelForSeq2SeqLM"),cWt.forEach(t),lUe.forEach(t),ZWe=i(m),Fr=n(m,"DIV",{class:!0});var hi=s(Fr);T(z$.$$.fragment,hi),dJr=i(hi),dm=n(hi,"P",{});var zae=s(dm);cJr=r(zae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Hoe=n(zae,"A",{href:!0});var mWt=s(Hoe);mJr=r(mWt,"from_pretrained()"),mWt.forEach(t),fJr=r(zae," class method or the "),Uoe=n(zae,"A",{href:!0});var fWt=s(Uoe);gJr=r(fWt,"from_config()"),fWt.forEach(t),hJr=r(zae,` class
method.`),zae.forEach(t),uJr=i(hi),W$=n(hi,"P",{});var iUe=s(W$);pJr=r(iUe,"This class cannot be instantiated directly using "),JAe=n(iUe,"CODE",{});var gWt=s(JAe);_Jr=r(gWt,"__init__()"),gWt.forEach(t),bJr=r(iUe," (throws an error)."),iUe.forEach(t),vJr=i(hi),Yt=n(hi,"DIV",{class:!0});var oy=s(Yt);T(Q$.$$.fragment,oy),FJr=i(oy),YAe=n(oy,"P",{});var hWt=s(YAe);TJr=r(hWt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hWt.forEach(t),MJr=i(oy),cm=n(oy,"P",{});var Wae=s(cm);EJr=r(Wae,`Note:
Loading a model from its configuration file does `),KAe=n(Wae,"STRONG",{});var uWt=s(KAe);CJr=r(uWt,"not"),uWt.forEach(t),wJr=r(Wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Joe=n(Wae,"A",{href:!0});var pWt=s(Joe);AJr=r(pWt,"from_pretrained()"),pWt.forEach(t),LJr=r(Wae," to load the model weights."),Wae.forEach(t),yJr=i(oy),T(RA.$$.fragment,oy),oy.forEach(t),xJr=i(hi),Hr=n(hi,"DIV",{class:!0});var ui=s(Hr);T(H$.$$.fragment,ui),$Jr=i(ui),ZAe=n(ui,"P",{});var _Wt=s(ZAe);kJr=r(_Wt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_Wt.forEach(t),SJr=i(ui),An=n(ui,"P",{});var ry=s(An);RJr=r(ry,"The model class to instantiate is selected based on the "),e6e=n(ry,"CODE",{});var bWt=s(e6e);PJr=r(bWt,"model_type"),bWt.forEach(t),BJr=r(ry,` property of the config object (either
passed as an argument or loaded from `),o6e=n(ry,"CODE",{});var vWt=s(o6e);IJr=r(vWt,"pretrained_model_name_or_path"),vWt.forEach(t),NJr=r(ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r6e=n(ry,"CODE",{});var FWt=s(r6e);qJr=r(FWt,"pretrained_model_name_or_path"),FWt.forEach(t),jJr=r(ry,":"),ry.forEach(t),DJr=i(ui),ke=n(ui,"UL",{});var je=s(ke);PA=n(je,"LI",{});var gXe=s(PA);t6e=n(gXe,"STRONG",{});var TWt=s(t6e);GJr=r(TWt,"bart"),TWt.forEach(t),OJr=r(gXe," \u2014 "),Yoe=n(gXe,"A",{href:!0});var MWt=s(Yoe);VJr=r(MWt,"FlaxBartForConditionalGeneration"),MWt.forEach(t),XJr=r(gXe," (BART model)"),gXe.forEach(t),zJr=i(je),BA=n(je,"LI",{});var hXe=s(BA);a6e=n(hXe,"STRONG",{});var EWt=s(a6e);WJr=r(EWt,"blenderbot"),EWt.forEach(t),QJr=r(hXe," \u2014 "),Koe=n(hXe,"A",{href:!0});var CWt=s(Koe);HJr=r(CWt,"FlaxBlenderbotForConditionalGeneration"),CWt.forEach(t),UJr=r(hXe," (Blenderbot model)"),hXe.forEach(t),JJr=i(je),IA=n(je,"LI",{});var uXe=s(IA);n6e=n(uXe,"STRONG",{});var wWt=s(n6e);YJr=r(wWt,"blenderbot-small"),wWt.forEach(t),KJr=r(uXe," \u2014 "),Zoe=n(uXe,"A",{href:!0});var AWt=s(Zoe);ZJr=r(AWt,"FlaxBlenderbotSmallForConditionalGeneration"),AWt.forEach(t),eYr=r(uXe," (BlenderbotSmall model)"),uXe.forEach(t),oYr=i(je),NA=n(je,"LI",{});var pXe=s(NA);s6e=n(pXe,"STRONG",{});var LWt=s(s6e);rYr=r(LWt,"encoder-decoder"),LWt.forEach(t),tYr=r(pXe," \u2014 "),ere=n(pXe,"A",{href:!0});var yWt=s(ere);aYr=r(yWt,"FlaxEncoderDecoderModel"),yWt.forEach(t),nYr=r(pXe," (Encoder decoder model)"),pXe.forEach(t),sYr=i(je),qA=n(je,"LI",{});var _Xe=s(qA);l6e=n(_Xe,"STRONG",{});var xWt=s(l6e);lYr=r(xWt,"longt5"),xWt.forEach(t),iYr=r(_Xe," \u2014 "),ore=n(_Xe,"A",{href:!0});var $Wt=s(ore);dYr=r($Wt,"FlaxLongT5ForConditionalGeneration"),$Wt.forEach(t),cYr=r(_Xe," (LongT5 model)"),_Xe.forEach(t),mYr=i(je),jA=n(je,"LI",{});var bXe=s(jA);i6e=n(bXe,"STRONG",{});var kWt=s(i6e);fYr=r(kWt,"marian"),kWt.forEach(t),gYr=r(bXe," \u2014 "),rre=n(bXe,"A",{href:!0});var SWt=s(rre);hYr=r(SWt,"FlaxMarianMTModel"),SWt.forEach(t),uYr=r(bXe," (Marian model)"),bXe.forEach(t),pYr=i(je),DA=n(je,"LI",{});var vXe=s(DA);d6e=n(vXe,"STRONG",{});var RWt=s(d6e);_Yr=r(RWt,"mbart"),RWt.forEach(t),bYr=r(vXe," \u2014 "),tre=n(vXe,"A",{href:!0});var PWt=s(tre);vYr=r(PWt,"FlaxMBartForConditionalGeneration"),PWt.forEach(t),FYr=r(vXe," (mBART model)"),vXe.forEach(t),TYr=i(je),GA=n(je,"LI",{});var FXe=s(GA);c6e=n(FXe,"STRONG",{});var BWt=s(c6e);MYr=r(BWt,"mt5"),BWt.forEach(t),EYr=r(FXe," \u2014 "),are=n(FXe,"A",{href:!0});var IWt=s(are);CYr=r(IWt,"FlaxMT5ForConditionalGeneration"),IWt.forEach(t),wYr=r(FXe," (MT5 model)"),FXe.forEach(t),AYr=i(je),OA=n(je,"LI",{});var TXe=s(OA);m6e=n(TXe,"STRONG",{});var NWt=s(m6e);LYr=r(NWt,"pegasus"),NWt.forEach(t),yYr=r(TXe," \u2014 "),nre=n(TXe,"A",{href:!0});var qWt=s(nre);xYr=r(qWt,"FlaxPegasusForConditionalGeneration"),qWt.forEach(t),$Yr=r(TXe," (Pegasus model)"),TXe.forEach(t),kYr=i(je),VA=n(je,"LI",{});var MXe=s(VA);f6e=n(MXe,"STRONG",{});var jWt=s(f6e);SYr=r(jWt,"t5"),jWt.forEach(t),RYr=r(MXe," \u2014 "),sre=n(MXe,"A",{href:!0});var DWt=s(sre);PYr=r(DWt,"FlaxT5ForConditionalGeneration"),DWt.forEach(t),BYr=r(MXe," (T5 model)"),MXe.forEach(t),je.forEach(t),IYr=i(ui),T(XA.$$.fragment,ui),ui.forEach(t),hi.forEach(t),eQe=i(m),mm=n(m,"H2",{class:!0});var dUe=s(mm);zA=n(dUe,"A",{id:!0,class:!0,href:!0});var GWt=s(zA);g6e=n(GWt,"SPAN",{});var OWt=s(g6e);T(U$.$$.fragment,OWt),OWt.forEach(t),GWt.forEach(t),NYr=i(dUe),h6e=n(dUe,"SPAN",{});var VWt=s(h6e);qYr=r(VWt,"FlaxAutoModelForSequenceClassification"),VWt.forEach(t),dUe.forEach(t),oQe=i(m),Tr=n(m,"DIV",{class:!0});var pi=s(Tr);T(J$.$$.fragment,pi),jYr=i(pi),fm=n(pi,"P",{});var Qae=s(fm);DYr=r(Qae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lre=n(Qae,"A",{href:!0});var XWt=s(lre);GYr=r(XWt,"from_pretrained()"),XWt.forEach(t),OYr=r(Qae," class method or the "),ire=n(Qae,"A",{href:!0});var zWt=s(ire);VYr=r(zWt,"from_config()"),zWt.forEach(t),XYr=r(Qae,` class
method.`),Qae.forEach(t),zYr=i(pi),Y$=n(pi,"P",{});var cUe=s(Y$);WYr=r(cUe,"This class cannot be instantiated directly using "),u6e=n(cUe,"CODE",{});var WWt=s(u6e);QYr=r(WWt,"__init__()"),WWt.forEach(t),HYr=r(cUe," (throws an error)."),cUe.forEach(t),UYr=i(pi),Kt=n(pi,"DIV",{class:!0});var ty=s(Kt);T(K$.$$.fragment,ty),JYr=i(ty),p6e=n(ty,"P",{});var QWt=s(p6e);YYr=r(QWt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),QWt.forEach(t),KYr=i(ty),gm=n(ty,"P",{});var Hae=s(gm);ZYr=r(Hae,`Note:
Loading a model from its configuration file does `),_6e=n(Hae,"STRONG",{});var HWt=s(_6e);eKr=r(HWt,"not"),HWt.forEach(t),oKr=r(Hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),dre=n(Hae,"A",{href:!0});var UWt=s(dre);rKr=r(UWt,"from_pretrained()"),UWt.forEach(t),tKr=r(Hae," to load the model weights."),Hae.forEach(t),aKr=i(ty),T(WA.$$.fragment,ty),ty.forEach(t),nKr=i(pi),Ur=n(pi,"DIV",{class:!0});var _i=s(Ur);T(Z$.$$.fragment,_i),sKr=i(_i),b6e=n(_i,"P",{});var JWt=s(b6e);lKr=r(JWt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),JWt.forEach(t),iKr=i(_i),Ln=n(_i,"P",{});var ay=s(Ln);dKr=r(ay,"The model class to instantiate is selected based on the "),v6e=n(ay,"CODE",{});var YWt=s(v6e);cKr=r(YWt,"model_type"),YWt.forEach(t),mKr=r(ay,` property of the config object (either
passed as an argument or loaded from `),F6e=n(ay,"CODE",{});var KWt=s(F6e);fKr=r(KWt,"pretrained_model_name_or_path"),KWt.forEach(t),gKr=r(ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T6e=n(ay,"CODE",{});var ZWt=s(T6e);hKr=r(ZWt,"pretrained_model_name_or_path"),ZWt.forEach(t),uKr=r(ay,":"),ay.forEach(t),pKr=i(_i),Se=n(_i,"UL",{});var De=s(Se);QA=n(De,"LI",{});var EXe=s(QA);M6e=n(EXe,"STRONG",{});var eQt=s(M6e);_Kr=r(eQt,"albert"),eQt.forEach(t),bKr=r(EXe," \u2014 "),cre=n(EXe,"A",{href:!0});var oQt=s(cre);vKr=r(oQt,"FlaxAlbertForSequenceClassification"),oQt.forEach(t),FKr=r(EXe," (ALBERT model)"),EXe.forEach(t),TKr=i(De),HA=n(De,"LI",{});var CXe=s(HA);E6e=n(CXe,"STRONG",{});var rQt=s(E6e);MKr=r(rQt,"bart"),rQt.forEach(t),EKr=r(CXe," \u2014 "),mre=n(CXe,"A",{href:!0});var tQt=s(mre);CKr=r(tQt,"FlaxBartForSequenceClassification"),tQt.forEach(t),wKr=r(CXe," (BART model)"),CXe.forEach(t),AKr=i(De),UA=n(De,"LI",{});var wXe=s(UA);C6e=n(wXe,"STRONG",{});var aQt=s(C6e);LKr=r(aQt,"bert"),aQt.forEach(t),yKr=r(wXe," \u2014 "),fre=n(wXe,"A",{href:!0});var nQt=s(fre);xKr=r(nQt,"FlaxBertForSequenceClassification"),nQt.forEach(t),$Kr=r(wXe," (BERT model)"),wXe.forEach(t),kKr=i(De),JA=n(De,"LI",{});var AXe=s(JA);w6e=n(AXe,"STRONG",{});var sQt=s(w6e);SKr=r(sQt,"big_bird"),sQt.forEach(t),RKr=r(AXe," \u2014 "),gre=n(AXe,"A",{href:!0});var lQt=s(gre);PKr=r(lQt,"FlaxBigBirdForSequenceClassification"),lQt.forEach(t),BKr=r(AXe," (BigBird model)"),AXe.forEach(t),IKr=i(De),YA=n(De,"LI",{});var LXe=s(YA);A6e=n(LXe,"STRONG",{});var iQt=s(A6e);NKr=r(iQt,"distilbert"),iQt.forEach(t),qKr=r(LXe," \u2014 "),hre=n(LXe,"A",{href:!0});var dQt=s(hre);jKr=r(dQt,"FlaxDistilBertForSequenceClassification"),dQt.forEach(t),DKr=r(LXe," (DistilBERT model)"),LXe.forEach(t),GKr=i(De),KA=n(De,"LI",{});var yXe=s(KA);L6e=n(yXe,"STRONG",{});var cQt=s(L6e);OKr=r(cQt,"electra"),cQt.forEach(t),VKr=r(yXe," \u2014 "),ure=n(yXe,"A",{href:!0});var mQt=s(ure);XKr=r(mQt,"FlaxElectraForSequenceClassification"),mQt.forEach(t),zKr=r(yXe," (ELECTRA model)"),yXe.forEach(t),WKr=i(De),ZA=n(De,"LI",{});var xXe=s(ZA);y6e=n(xXe,"STRONG",{});var fQt=s(y6e);QKr=r(fQt,"mbart"),fQt.forEach(t),HKr=r(xXe," \u2014 "),pre=n(xXe,"A",{href:!0});var gQt=s(pre);UKr=r(gQt,"FlaxMBartForSequenceClassification"),gQt.forEach(t),JKr=r(xXe," (mBART model)"),xXe.forEach(t),YKr=i(De),e6=n(De,"LI",{});var $Xe=s(e6);x6e=n($Xe,"STRONG",{});var hQt=s(x6e);KKr=r(hQt,"roberta"),hQt.forEach(t),ZKr=r($Xe," \u2014 "),_re=n($Xe,"A",{href:!0});var uQt=s(_re);eZr=r(uQt,"FlaxRobertaForSequenceClassification"),uQt.forEach(t),oZr=r($Xe," (RoBERTa model)"),$Xe.forEach(t),rZr=i(De),o6=n(De,"LI",{});var kXe=s(o6);$6e=n(kXe,"STRONG",{});var pQt=s($6e);tZr=r(pQt,"roformer"),pQt.forEach(t),aZr=r(kXe," \u2014 "),bre=n(kXe,"A",{href:!0});var _Qt=s(bre);nZr=r(_Qt,"FlaxRoFormerForSequenceClassification"),_Qt.forEach(t),sZr=r(kXe," (RoFormer model)"),kXe.forEach(t),lZr=i(De),r6=n(De,"LI",{});var SXe=s(r6);k6e=n(SXe,"STRONG",{});var bQt=s(k6e);iZr=r(bQt,"xlm-roberta"),bQt.forEach(t),dZr=r(SXe," \u2014 "),vre=n(SXe,"A",{href:!0});var vQt=s(vre);cZr=r(vQt,"FlaxXLMRobertaForSequenceClassification"),vQt.forEach(t),mZr=r(SXe," (XLM-RoBERTa model)"),SXe.forEach(t),De.forEach(t),fZr=i(_i),T(t6.$$.fragment,_i),_i.forEach(t),pi.forEach(t),rQe=i(m),hm=n(m,"H2",{class:!0});var mUe=s(hm);a6=n(mUe,"A",{id:!0,class:!0,href:!0});var FQt=s(a6);S6e=n(FQt,"SPAN",{});var TQt=s(S6e);T(ek.$$.fragment,TQt),TQt.forEach(t),FQt.forEach(t),gZr=i(mUe),R6e=n(mUe,"SPAN",{});var MQt=s(R6e);hZr=r(MQt,"FlaxAutoModelForQuestionAnswering"),MQt.forEach(t),mUe.forEach(t),tQe=i(m),Mr=n(m,"DIV",{class:!0});var bi=s(Mr);T(ok.$$.fragment,bi),uZr=i(bi),um=n(bi,"P",{});var Uae=s(um);pZr=r(Uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Fre=n(Uae,"A",{href:!0});var EQt=s(Fre);_Zr=r(EQt,"from_pretrained()"),EQt.forEach(t),bZr=r(Uae," class method or the "),Tre=n(Uae,"A",{href:!0});var CQt=s(Tre);vZr=r(CQt,"from_config()"),CQt.forEach(t),FZr=r(Uae,` class
method.`),Uae.forEach(t),TZr=i(bi),rk=n(bi,"P",{});var fUe=s(rk);MZr=r(fUe,"This class cannot be instantiated directly using "),P6e=n(fUe,"CODE",{});var wQt=s(P6e);EZr=r(wQt,"__init__()"),wQt.forEach(t),CZr=r(fUe," (throws an error)."),fUe.forEach(t),wZr=i(bi),Zt=n(bi,"DIV",{class:!0});var ny=s(Zt);T(tk.$$.fragment,ny),AZr=i(ny),B6e=n(ny,"P",{});var AQt=s(B6e);LZr=r(AQt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),AQt.forEach(t),yZr=i(ny),pm=n(ny,"P",{});var Jae=s(pm);xZr=r(Jae,`Note:
Loading a model from its configuration file does `),I6e=n(Jae,"STRONG",{});var LQt=s(I6e);$Zr=r(LQt,"not"),LQt.forEach(t),kZr=r(Jae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mre=n(Jae,"A",{href:!0});var yQt=s(Mre);SZr=r(yQt,"from_pretrained()"),yQt.forEach(t),RZr=r(Jae," to load the model weights."),Jae.forEach(t),PZr=i(ny),T(n6.$$.fragment,ny),ny.forEach(t),BZr=i(bi),Jr=n(bi,"DIV",{class:!0});var vi=s(Jr);T(ak.$$.fragment,vi),IZr=i(vi),N6e=n(vi,"P",{});var xQt=s(N6e);NZr=r(xQt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xQt.forEach(t),qZr=i(vi),yn=n(vi,"P",{});var sy=s(yn);jZr=r(sy,"The model class to instantiate is selected based on the "),q6e=n(sy,"CODE",{});var $Qt=s(q6e);DZr=r($Qt,"model_type"),$Qt.forEach(t),GZr=r(sy,` property of the config object (either
passed as an argument or loaded from `),j6e=n(sy,"CODE",{});var kQt=s(j6e);OZr=r(kQt,"pretrained_model_name_or_path"),kQt.forEach(t),VZr=r(sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D6e=n(sy,"CODE",{});var SQt=s(D6e);XZr=r(SQt,"pretrained_model_name_or_path"),SQt.forEach(t),zZr=r(sy,":"),sy.forEach(t),WZr=i(vi),Re=n(vi,"UL",{});var Ge=s(Re);s6=n(Ge,"LI",{});var RXe=s(s6);G6e=n(RXe,"STRONG",{});var RQt=s(G6e);QZr=r(RQt,"albert"),RQt.forEach(t),HZr=r(RXe," \u2014 "),Ere=n(RXe,"A",{href:!0});var PQt=s(Ere);UZr=r(PQt,"FlaxAlbertForQuestionAnswering"),PQt.forEach(t),JZr=r(RXe," (ALBERT model)"),RXe.forEach(t),YZr=i(Ge),l6=n(Ge,"LI",{});var PXe=s(l6);O6e=n(PXe,"STRONG",{});var BQt=s(O6e);KZr=r(BQt,"bart"),BQt.forEach(t),ZZr=r(PXe," \u2014 "),Cre=n(PXe,"A",{href:!0});var IQt=s(Cre);eet=r(IQt,"FlaxBartForQuestionAnswering"),IQt.forEach(t),oet=r(PXe," (BART model)"),PXe.forEach(t),ret=i(Ge),i6=n(Ge,"LI",{});var BXe=s(i6);V6e=n(BXe,"STRONG",{});var NQt=s(V6e);tet=r(NQt,"bert"),NQt.forEach(t),aet=r(BXe," \u2014 "),wre=n(BXe,"A",{href:!0});var qQt=s(wre);net=r(qQt,"FlaxBertForQuestionAnswering"),qQt.forEach(t),set=r(BXe," (BERT model)"),BXe.forEach(t),iet=i(Ge),d6=n(Ge,"LI",{});var IXe=s(d6);X6e=n(IXe,"STRONG",{});var jQt=s(X6e);det=r(jQt,"big_bird"),jQt.forEach(t),cet=r(IXe," \u2014 "),Are=n(IXe,"A",{href:!0});var DQt=s(Are);met=r(DQt,"FlaxBigBirdForQuestionAnswering"),DQt.forEach(t),fet=r(IXe," (BigBird model)"),IXe.forEach(t),get=i(Ge),c6=n(Ge,"LI",{});var NXe=s(c6);z6e=n(NXe,"STRONG",{});var GQt=s(z6e);het=r(GQt,"distilbert"),GQt.forEach(t),uet=r(NXe," \u2014 "),Lre=n(NXe,"A",{href:!0});var OQt=s(Lre);pet=r(OQt,"FlaxDistilBertForQuestionAnswering"),OQt.forEach(t),_et=r(NXe," (DistilBERT model)"),NXe.forEach(t),bet=i(Ge),m6=n(Ge,"LI",{});var qXe=s(m6);W6e=n(qXe,"STRONG",{});var VQt=s(W6e);vet=r(VQt,"electra"),VQt.forEach(t),Fet=r(qXe," \u2014 "),yre=n(qXe,"A",{href:!0});var XQt=s(yre);Tet=r(XQt,"FlaxElectraForQuestionAnswering"),XQt.forEach(t),Met=r(qXe," (ELECTRA model)"),qXe.forEach(t),Eet=i(Ge),f6=n(Ge,"LI",{});var jXe=s(f6);Q6e=n(jXe,"STRONG",{});var zQt=s(Q6e);Cet=r(zQt,"mbart"),zQt.forEach(t),wet=r(jXe," \u2014 "),xre=n(jXe,"A",{href:!0});var WQt=s(xre);Aet=r(WQt,"FlaxMBartForQuestionAnswering"),WQt.forEach(t),Let=r(jXe," (mBART model)"),jXe.forEach(t),yet=i(Ge),g6=n(Ge,"LI",{});var DXe=s(g6);H6e=n(DXe,"STRONG",{});var QQt=s(H6e);xet=r(QQt,"roberta"),QQt.forEach(t),$et=r(DXe," \u2014 "),$re=n(DXe,"A",{href:!0});var HQt=s($re);ket=r(HQt,"FlaxRobertaForQuestionAnswering"),HQt.forEach(t),Set=r(DXe," (RoBERTa model)"),DXe.forEach(t),Ret=i(Ge),h6=n(Ge,"LI",{});var GXe=s(h6);U6e=n(GXe,"STRONG",{});var UQt=s(U6e);Pet=r(UQt,"roformer"),UQt.forEach(t),Bet=r(GXe," \u2014 "),kre=n(GXe,"A",{href:!0});var JQt=s(kre);Iet=r(JQt,"FlaxRoFormerForQuestionAnswering"),JQt.forEach(t),Net=r(GXe," (RoFormer model)"),GXe.forEach(t),qet=i(Ge),u6=n(Ge,"LI",{});var OXe=s(u6);J6e=n(OXe,"STRONG",{});var YQt=s(J6e);jet=r(YQt,"xlm-roberta"),YQt.forEach(t),Det=r(OXe," \u2014 "),Sre=n(OXe,"A",{href:!0});var KQt=s(Sre);Get=r(KQt,"FlaxXLMRobertaForQuestionAnswering"),KQt.forEach(t),Oet=r(OXe," (XLM-RoBERTa model)"),OXe.forEach(t),Ge.forEach(t),Vet=i(vi),T(p6.$$.fragment,vi),vi.forEach(t),bi.forEach(t),aQe=i(m),_m=n(m,"H2",{class:!0});var gUe=s(_m);_6=n(gUe,"A",{id:!0,class:!0,href:!0});var ZQt=s(_6);Y6e=n(ZQt,"SPAN",{});var eHt=s(Y6e);T(nk.$$.fragment,eHt),eHt.forEach(t),ZQt.forEach(t),Xet=i(gUe),K6e=n(gUe,"SPAN",{});var oHt=s(K6e);zet=r(oHt,"FlaxAutoModelForTokenClassification"),oHt.forEach(t),gUe.forEach(t),nQe=i(m),Er=n(m,"DIV",{class:!0});var Fi=s(Er);T(sk.$$.fragment,Fi),Wet=i(Fi),bm=n(Fi,"P",{});var Yae=s(bm);Qet=r(Yae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Rre=n(Yae,"A",{href:!0});var rHt=s(Rre);Het=r(rHt,"from_pretrained()"),rHt.forEach(t),Uet=r(Yae," class method or the "),Pre=n(Yae,"A",{href:!0});var tHt=s(Pre);Jet=r(tHt,"from_config()"),tHt.forEach(t),Yet=r(Yae,` class
method.`),Yae.forEach(t),Ket=i(Fi),lk=n(Fi,"P",{});var hUe=s(lk);Zet=r(hUe,"This class cannot be instantiated directly using "),Z6e=n(hUe,"CODE",{});var aHt=s(Z6e);eot=r(aHt,"__init__()"),aHt.forEach(t),oot=r(hUe," (throws an error)."),hUe.forEach(t),rot=i(Fi),ea=n(Fi,"DIV",{class:!0});var ly=s(ea);T(ik.$$.fragment,ly),tot=i(ly),e7e=n(ly,"P",{});var nHt=s(e7e);aot=r(nHt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nHt.forEach(t),not=i(ly),vm=n(ly,"P",{});var Kae=s(vm);sot=r(Kae,`Note:
Loading a model from its configuration file does `),o7e=n(Kae,"STRONG",{});var sHt=s(o7e);lot=r(sHt,"not"),sHt.forEach(t),iot=r(Kae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bre=n(Kae,"A",{href:!0});var lHt=s(Bre);dot=r(lHt,"from_pretrained()"),lHt.forEach(t),cot=r(Kae," to load the model weights."),Kae.forEach(t),mot=i(ly),T(b6.$$.fragment,ly),ly.forEach(t),fot=i(Fi),Yr=n(Fi,"DIV",{class:!0});var Ti=s(Yr);T(dk.$$.fragment,Ti),got=i(Ti),r7e=n(Ti,"P",{});var iHt=s(r7e);hot=r(iHt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),iHt.forEach(t),uot=i(Ti),xn=n(Ti,"P",{});var iy=s(xn);pot=r(iy,"The model class to instantiate is selected based on the "),t7e=n(iy,"CODE",{});var dHt=s(t7e);_ot=r(dHt,"model_type"),dHt.forEach(t),bot=r(iy,` property of the config object (either
passed as an argument or loaded from `),a7e=n(iy,"CODE",{});var cHt=s(a7e);vot=r(cHt,"pretrained_model_name_or_path"),cHt.forEach(t),Fot=r(iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n7e=n(iy,"CODE",{});var mHt=s(n7e);Tot=r(mHt,"pretrained_model_name_or_path"),mHt.forEach(t),Mot=r(iy,":"),iy.forEach(t),Eot=i(Ti),Xe=n(Ti,"UL",{});var Eo=s(Xe);v6=n(Eo,"LI",{});var VXe=s(v6);s7e=n(VXe,"STRONG",{});var fHt=s(s7e);Cot=r(fHt,"albert"),fHt.forEach(t),wot=r(VXe," \u2014 "),Ire=n(VXe,"A",{href:!0});var gHt=s(Ire);Aot=r(gHt,"FlaxAlbertForTokenClassification"),gHt.forEach(t),Lot=r(VXe," (ALBERT model)"),VXe.forEach(t),yot=i(Eo),F6=n(Eo,"LI",{});var XXe=s(F6);l7e=n(XXe,"STRONG",{});var hHt=s(l7e);xot=r(hHt,"bert"),hHt.forEach(t),$ot=r(XXe," \u2014 "),Nre=n(XXe,"A",{href:!0});var uHt=s(Nre);kot=r(uHt,"FlaxBertForTokenClassification"),uHt.forEach(t),Sot=r(XXe," (BERT model)"),XXe.forEach(t),Rot=i(Eo),T6=n(Eo,"LI",{});var zXe=s(T6);i7e=n(zXe,"STRONG",{});var pHt=s(i7e);Pot=r(pHt,"big_bird"),pHt.forEach(t),Bot=r(zXe," \u2014 "),qre=n(zXe,"A",{href:!0});var _Ht=s(qre);Iot=r(_Ht,"FlaxBigBirdForTokenClassification"),_Ht.forEach(t),Not=r(zXe," (BigBird model)"),zXe.forEach(t),qot=i(Eo),M6=n(Eo,"LI",{});var WXe=s(M6);d7e=n(WXe,"STRONG",{});var bHt=s(d7e);jot=r(bHt,"distilbert"),bHt.forEach(t),Dot=r(WXe," \u2014 "),jre=n(WXe,"A",{href:!0});var vHt=s(jre);Got=r(vHt,"FlaxDistilBertForTokenClassification"),vHt.forEach(t),Oot=r(WXe," (DistilBERT model)"),WXe.forEach(t),Vot=i(Eo),E6=n(Eo,"LI",{});var QXe=s(E6);c7e=n(QXe,"STRONG",{});var FHt=s(c7e);Xot=r(FHt,"electra"),FHt.forEach(t),zot=r(QXe," \u2014 "),Dre=n(QXe,"A",{href:!0});var THt=s(Dre);Wot=r(THt,"FlaxElectraForTokenClassification"),THt.forEach(t),Qot=r(QXe," (ELECTRA model)"),QXe.forEach(t),Hot=i(Eo),C6=n(Eo,"LI",{});var HXe=s(C6);m7e=n(HXe,"STRONG",{});var MHt=s(m7e);Uot=r(MHt,"roberta"),MHt.forEach(t),Jot=r(HXe," \u2014 "),Gre=n(HXe,"A",{href:!0});var EHt=s(Gre);Yot=r(EHt,"FlaxRobertaForTokenClassification"),EHt.forEach(t),Kot=r(HXe," (RoBERTa model)"),HXe.forEach(t),Zot=i(Eo),w6=n(Eo,"LI",{});var UXe=s(w6);f7e=n(UXe,"STRONG",{});var CHt=s(f7e);ert=r(CHt,"roformer"),CHt.forEach(t),ort=r(UXe," \u2014 "),Ore=n(UXe,"A",{href:!0});var wHt=s(Ore);rrt=r(wHt,"FlaxRoFormerForTokenClassification"),wHt.forEach(t),trt=r(UXe," (RoFormer model)"),UXe.forEach(t),art=i(Eo),A6=n(Eo,"LI",{});var JXe=s(A6);g7e=n(JXe,"STRONG",{});var AHt=s(g7e);nrt=r(AHt,"xlm-roberta"),AHt.forEach(t),srt=r(JXe," \u2014 "),Vre=n(JXe,"A",{href:!0});var LHt=s(Vre);lrt=r(LHt,"FlaxXLMRobertaForTokenClassification"),LHt.forEach(t),irt=r(JXe," (XLM-RoBERTa model)"),JXe.forEach(t),Eo.forEach(t),drt=i(Ti),T(L6.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),sQe=i(m),Fm=n(m,"H2",{class:!0});var uUe=s(Fm);y6=n(uUe,"A",{id:!0,class:!0,href:!0});var yHt=s(y6);h7e=n(yHt,"SPAN",{});var xHt=s(h7e);T(ck.$$.fragment,xHt),xHt.forEach(t),yHt.forEach(t),crt=i(uUe),u7e=n(uUe,"SPAN",{});var $Ht=s(u7e);mrt=r($Ht,"FlaxAutoModelForMultipleChoice"),$Ht.forEach(t),uUe.forEach(t),lQe=i(m),Cr=n(m,"DIV",{class:!0});var Mi=s(Cr);T(mk.$$.fragment,Mi),frt=i(Mi),Tm=n(Mi,"P",{});var Zae=s(Tm);grt=r(Zae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Xre=n(Zae,"A",{href:!0});var kHt=s(Xre);hrt=r(kHt,"from_pretrained()"),kHt.forEach(t),urt=r(Zae," class method or the "),zre=n(Zae,"A",{href:!0});var SHt=s(zre);prt=r(SHt,"from_config()"),SHt.forEach(t),_rt=r(Zae,` class
method.`),Zae.forEach(t),brt=i(Mi),fk=n(Mi,"P",{});var pUe=s(fk);vrt=r(pUe,"This class cannot be instantiated directly using "),p7e=n(pUe,"CODE",{});var RHt=s(p7e);Frt=r(RHt,"__init__()"),RHt.forEach(t),Trt=r(pUe," (throws an error)."),pUe.forEach(t),Mrt=i(Mi),oa=n(Mi,"DIV",{class:!0});var dy=s(oa);T(gk.$$.fragment,dy),Ert=i(dy),_7e=n(dy,"P",{});var PHt=s(_7e);Crt=r(PHt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),PHt.forEach(t),wrt=i(dy),Mm=n(dy,"P",{});var ene=s(Mm);Art=r(ene,`Note:
Loading a model from its configuration file does `),b7e=n(ene,"STRONG",{});var BHt=s(b7e);Lrt=r(BHt,"not"),BHt.forEach(t),yrt=r(ene,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wre=n(ene,"A",{href:!0});var IHt=s(Wre);xrt=r(IHt,"from_pretrained()"),IHt.forEach(t),$rt=r(ene," to load the model weights."),ene.forEach(t),krt=i(dy),T(x6.$$.fragment,dy),dy.forEach(t),Srt=i(Mi),Kr=n(Mi,"DIV",{class:!0});var Ei=s(Kr);T(hk.$$.fragment,Ei),Rrt=i(Ei),v7e=n(Ei,"P",{});var NHt=s(v7e);Prt=r(NHt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),NHt.forEach(t),Brt=i(Ei),$n=n(Ei,"P",{});var cy=s($n);Irt=r(cy,"The model class to instantiate is selected based on the "),F7e=n(cy,"CODE",{});var qHt=s(F7e);Nrt=r(qHt,"model_type"),qHt.forEach(t),qrt=r(cy,` property of the config object (either
passed as an argument or loaded from `),T7e=n(cy,"CODE",{});var jHt=s(T7e);jrt=r(jHt,"pretrained_model_name_or_path"),jHt.forEach(t),Drt=r(cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M7e=n(cy,"CODE",{});var DHt=s(M7e);Grt=r(DHt,"pretrained_model_name_or_path"),DHt.forEach(t),Ort=r(cy,":"),cy.forEach(t),Vrt=i(Ei),ze=n(Ei,"UL",{});var Co=s(ze);$6=n(Co,"LI",{});var YXe=s($6);E7e=n(YXe,"STRONG",{});var GHt=s(E7e);Xrt=r(GHt,"albert"),GHt.forEach(t),zrt=r(YXe," \u2014 "),Qre=n(YXe,"A",{href:!0});var OHt=s(Qre);Wrt=r(OHt,"FlaxAlbertForMultipleChoice"),OHt.forEach(t),Qrt=r(YXe," (ALBERT model)"),YXe.forEach(t),Hrt=i(Co),k6=n(Co,"LI",{});var KXe=s(k6);C7e=n(KXe,"STRONG",{});var VHt=s(C7e);Urt=r(VHt,"bert"),VHt.forEach(t),Jrt=r(KXe," \u2014 "),Hre=n(KXe,"A",{href:!0});var XHt=s(Hre);Yrt=r(XHt,"FlaxBertForMultipleChoice"),XHt.forEach(t),Krt=r(KXe," (BERT model)"),KXe.forEach(t),Zrt=i(Co),S6=n(Co,"LI",{});var ZXe=s(S6);w7e=n(ZXe,"STRONG",{});var zHt=s(w7e);ett=r(zHt,"big_bird"),zHt.forEach(t),ott=r(ZXe," \u2014 "),Ure=n(ZXe,"A",{href:!0});var WHt=s(Ure);rtt=r(WHt,"FlaxBigBirdForMultipleChoice"),WHt.forEach(t),ttt=r(ZXe," (BigBird model)"),ZXe.forEach(t),att=i(Co),R6=n(Co,"LI",{});var eze=s(R6);A7e=n(eze,"STRONG",{});var QHt=s(A7e);ntt=r(QHt,"distilbert"),QHt.forEach(t),stt=r(eze," \u2014 "),Jre=n(eze,"A",{href:!0});var HHt=s(Jre);ltt=r(HHt,"FlaxDistilBertForMultipleChoice"),HHt.forEach(t),itt=r(eze," (DistilBERT model)"),eze.forEach(t),dtt=i(Co),P6=n(Co,"LI",{});var oze=s(P6);L7e=n(oze,"STRONG",{});var UHt=s(L7e);ctt=r(UHt,"electra"),UHt.forEach(t),mtt=r(oze," \u2014 "),Yre=n(oze,"A",{href:!0});var JHt=s(Yre);ftt=r(JHt,"FlaxElectraForMultipleChoice"),JHt.forEach(t),gtt=r(oze," (ELECTRA model)"),oze.forEach(t),htt=i(Co),B6=n(Co,"LI",{});var rze=s(B6);y7e=n(rze,"STRONG",{});var YHt=s(y7e);utt=r(YHt,"roberta"),YHt.forEach(t),ptt=r(rze," \u2014 "),Kre=n(rze,"A",{href:!0});var KHt=s(Kre);_tt=r(KHt,"FlaxRobertaForMultipleChoice"),KHt.forEach(t),btt=r(rze," (RoBERTa model)"),rze.forEach(t),vtt=i(Co),I6=n(Co,"LI",{});var tze=s(I6);x7e=n(tze,"STRONG",{});var ZHt=s(x7e);Ftt=r(ZHt,"roformer"),ZHt.forEach(t),Ttt=r(tze," \u2014 "),Zre=n(tze,"A",{href:!0});var eUt=s(Zre);Mtt=r(eUt,"FlaxRoFormerForMultipleChoice"),eUt.forEach(t),Ett=r(tze," (RoFormer model)"),tze.forEach(t),Ctt=i(Co),N6=n(Co,"LI",{});var aze=s(N6);$7e=n(aze,"STRONG",{});var oUt=s($7e);wtt=r(oUt,"xlm-roberta"),oUt.forEach(t),Att=r(aze," \u2014 "),ete=n(aze,"A",{href:!0});var rUt=s(ete);Ltt=r(rUt,"FlaxXLMRobertaForMultipleChoice"),rUt.forEach(t),ytt=r(aze," (XLM-RoBERTa model)"),aze.forEach(t),Co.forEach(t),xtt=i(Ei),T(q6.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),iQe=i(m),Em=n(m,"H2",{class:!0});var _Ue=s(Em);j6=n(_Ue,"A",{id:!0,class:!0,href:!0});var tUt=s(j6);k7e=n(tUt,"SPAN",{});var aUt=s(k7e);T(uk.$$.fragment,aUt),aUt.forEach(t),tUt.forEach(t),$tt=i(_Ue),S7e=n(_Ue,"SPAN",{});var nUt=s(S7e);ktt=r(nUt,"FlaxAutoModelForNextSentencePrediction"),nUt.forEach(t),_Ue.forEach(t),dQe=i(m),wr=n(m,"DIV",{class:!0});var Ci=s(wr);T(pk.$$.fragment,Ci),Stt=i(Ci),Cm=n(Ci,"P",{});var one=s(Cm);Rtt=r(one,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ote=n(one,"A",{href:!0});var sUt=s(ote);Ptt=r(sUt,"from_pretrained()"),sUt.forEach(t),Btt=r(one," class method or the "),rte=n(one,"A",{href:!0});var lUt=s(rte);Itt=r(lUt,"from_config()"),lUt.forEach(t),Ntt=r(one,` class
method.`),one.forEach(t),qtt=i(Ci),_k=n(Ci,"P",{});var bUe=s(_k);jtt=r(bUe,"This class cannot be instantiated directly using "),R7e=n(bUe,"CODE",{});var iUt=s(R7e);Dtt=r(iUt,"__init__()"),iUt.forEach(t),Gtt=r(bUe," (throws an error)."),bUe.forEach(t),Ott=i(Ci),ra=n(Ci,"DIV",{class:!0});var my=s(ra);T(bk.$$.fragment,my),Vtt=i(my),P7e=n(my,"P",{});var dUt=s(P7e);Xtt=r(dUt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dUt.forEach(t),ztt=i(my),wm=n(my,"P",{});var rne=s(wm);Wtt=r(rne,`Note:
Loading a model from its configuration file does `),B7e=n(rne,"STRONG",{});var cUt=s(B7e);Qtt=r(cUt,"not"),cUt.forEach(t),Htt=r(rne,` load the model weights. It only affects the
model\u2019s configuration. Use `),tte=n(rne,"A",{href:!0});var mUt=s(tte);Utt=r(mUt,"from_pretrained()"),mUt.forEach(t),Jtt=r(rne," to load the model weights."),rne.forEach(t),Ytt=i(my),T(D6.$$.fragment,my),my.forEach(t),Ktt=i(Ci),Zr=n(Ci,"DIV",{class:!0});var wi=s(Zr);T(vk.$$.fragment,wi),Ztt=i(wi),I7e=n(wi,"P",{});var fUt=s(I7e);eat=r(fUt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fUt.forEach(t),oat=i(wi),kn=n(wi,"P",{});var fy=s(kn);rat=r(fy,"The model class to instantiate is selected based on the "),N7e=n(fy,"CODE",{});var gUt=s(N7e);tat=r(gUt,"model_type"),gUt.forEach(t),aat=r(fy,` property of the config object (either
passed as an argument or loaded from `),q7e=n(fy,"CODE",{});var hUt=s(q7e);nat=r(hUt,"pretrained_model_name_or_path"),hUt.forEach(t),sat=r(fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=n(fy,"CODE",{});var uUt=s(j7e);lat=r(uUt,"pretrained_model_name_or_path"),uUt.forEach(t),iat=r(fy,":"),fy.forEach(t),dat=i(wi),D7e=n(wi,"UL",{});var pUt=s(D7e);G6=n(pUt,"LI",{});var nze=s(G6);G7e=n(nze,"STRONG",{});var _Ut=s(G7e);cat=r(_Ut,"bert"),_Ut.forEach(t),mat=r(nze," \u2014 "),ate=n(nze,"A",{href:!0});var bUt=s(ate);fat=r(bUt,"FlaxBertForNextSentencePrediction"),bUt.forEach(t),gat=r(nze," (BERT model)"),nze.forEach(t),pUt.forEach(t),hat=i(wi),T(O6.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),cQe=i(m),Am=n(m,"H2",{class:!0});var vUe=s(Am);V6=n(vUe,"A",{id:!0,class:!0,href:!0});var vUt=s(V6);O7e=n(vUt,"SPAN",{});var FUt=s(O7e);T(Fk.$$.fragment,FUt),FUt.forEach(t),vUt.forEach(t),uat=i(vUe),V7e=n(vUe,"SPAN",{});var TUt=s(V7e);pat=r(TUt,"FlaxAutoModelForImageClassification"),TUt.forEach(t),vUe.forEach(t),mQe=i(m),Ar=n(m,"DIV",{class:!0});var Ai=s(Ar);T(Tk.$$.fragment,Ai),_at=i(Ai),Lm=n(Ai,"P",{});var tne=s(Lm);bat=r(tne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nte=n(tne,"A",{href:!0});var MUt=s(nte);vat=r(MUt,"from_pretrained()"),MUt.forEach(t),Fat=r(tne," class method or the "),ste=n(tne,"A",{href:!0});var EUt=s(ste);Tat=r(EUt,"from_config()"),EUt.forEach(t),Mat=r(tne,` class
method.`),tne.forEach(t),Eat=i(Ai),Mk=n(Ai,"P",{});var FUe=s(Mk);Cat=r(FUe,"This class cannot be instantiated directly using "),X7e=n(FUe,"CODE",{});var CUt=s(X7e);wat=r(CUt,"__init__()"),CUt.forEach(t),Aat=r(FUe," (throws an error)."),FUe.forEach(t),Lat=i(Ai),ta=n(Ai,"DIV",{class:!0});var gy=s(ta);T(Ek.$$.fragment,gy),yat=i(gy),z7e=n(gy,"P",{});var wUt=s(z7e);xat=r(wUt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wUt.forEach(t),$at=i(gy),ym=n(gy,"P",{});var ane=s(ym);kat=r(ane,`Note:
Loading a model from its configuration file does `),W7e=n(ane,"STRONG",{});var AUt=s(W7e);Sat=r(AUt,"not"),AUt.forEach(t),Rat=r(ane,` load the model weights. It only affects the
model\u2019s configuration. Use `),lte=n(ane,"A",{href:!0});var LUt=s(lte);Pat=r(LUt,"from_pretrained()"),LUt.forEach(t),Bat=r(ane," to load the model weights."),ane.forEach(t),Iat=i(gy),T(X6.$$.fragment,gy),gy.forEach(t),Nat=i(Ai),et=n(Ai,"DIV",{class:!0});var Li=s(et);T(Ck.$$.fragment,Li),qat=i(Li),Q7e=n(Li,"P",{});var yUt=s(Q7e);jat=r(yUt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),yUt.forEach(t),Dat=i(Li),Sn=n(Li,"P",{});var hy=s(Sn);Gat=r(hy,"The model class to instantiate is selected based on the "),H7e=n(hy,"CODE",{});var xUt=s(H7e);Oat=r(xUt,"model_type"),xUt.forEach(t),Vat=r(hy,` property of the config object (either
passed as an argument or loaded from `),U7e=n(hy,"CODE",{});var $Ut=s(U7e);Xat=r($Ut,"pretrained_model_name_or_path"),$Ut.forEach(t),zat=r(hy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J7e=n(hy,"CODE",{});var kUt=s(J7e);Wat=r(kUt,"pretrained_model_name_or_path"),kUt.forEach(t),Qat=r(hy,":"),hy.forEach(t),Hat=i(Li),wk=n(Li,"UL",{});var TUe=s(wk);z6=n(TUe,"LI",{});var sze=s(z6);Y7e=n(sze,"STRONG",{});var SUt=s(Y7e);Uat=r(SUt,"beit"),SUt.forEach(t),Jat=r(sze," \u2014 "),ite=n(sze,"A",{href:!0});var RUt=s(ite);Yat=r(RUt,"FlaxBeitForImageClassification"),RUt.forEach(t),Kat=r(sze," (BEiT model)"),sze.forEach(t),Zat=i(TUe),W6=n(TUe,"LI",{});var lze=s(W6);K7e=n(lze,"STRONG",{});var PUt=s(K7e);ent=r(PUt,"vit"),PUt.forEach(t),ont=r(lze," \u2014 "),dte=n(lze,"A",{href:!0});var BUt=s(dte);rnt=r(BUt,"FlaxViTForImageClassification"),BUt.forEach(t),tnt=r(lze," (ViT model)"),lze.forEach(t),TUe.forEach(t),ant=i(Li),T(Q6.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),fQe=i(m),xm=n(m,"H2",{class:!0});var MUe=s(xm);H6=n(MUe,"A",{id:!0,class:!0,href:!0});var IUt=s(H6);Z7e=n(IUt,"SPAN",{});var NUt=s(Z7e);T(Ak.$$.fragment,NUt),NUt.forEach(t),IUt.forEach(t),nnt=i(MUe),eLe=n(MUe,"SPAN",{});var qUt=s(eLe);snt=r(qUt,"FlaxAutoModelForVision2Seq"),qUt.forEach(t),MUe.forEach(t),gQe=i(m),Lr=n(m,"DIV",{class:!0});var yi=s(Lr);T(Lk.$$.fragment,yi),lnt=i(yi),$m=n(yi,"P",{});var nne=s($m);int=r(nne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cte=n(nne,"A",{href:!0});var jUt=s(cte);dnt=r(jUt,"from_pretrained()"),jUt.forEach(t),cnt=r(nne," class method or the "),mte=n(nne,"A",{href:!0});var DUt=s(mte);mnt=r(DUt,"from_config()"),DUt.forEach(t),fnt=r(nne,` class
method.`),nne.forEach(t),gnt=i(yi),yk=n(yi,"P",{});var EUe=s(yk);hnt=r(EUe,"This class cannot be instantiated directly using "),oLe=n(EUe,"CODE",{});var GUt=s(oLe);unt=r(GUt,"__init__()"),GUt.forEach(t),pnt=r(EUe," (throws an error)."),EUe.forEach(t),_nt=i(yi),aa=n(yi,"DIV",{class:!0});var uy=s(aa);T(xk.$$.fragment,uy),bnt=i(uy),rLe=n(uy,"P",{});var OUt=s(rLe);vnt=r(OUt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),OUt.forEach(t),Fnt=i(uy),km=n(uy,"P",{});var sne=s(km);Tnt=r(sne,`Note:
Loading a model from its configuration file does `),tLe=n(sne,"STRONG",{});var VUt=s(tLe);Mnt=r(VUt,"not"),VUt.forEach(t),Ent=r(sne,` load the model weights. It only affects the
model\u2019s configuration. Use `),fte=n(sne,"A",{href:!0});var XUt=s(fte);Cnt=r(XUt,"from_pretrained()"),XUt.forEach(t),wnt=r(sne," to load the model weights."),sne.forEach(t),Ant=i(uy),T(U6.$$.fragment,uy),uy.forEach(t),Lnt=i(yi),ot=n(yi,"DIV",{class:!0});var xi=s(ot);T($k.$$.fragment,xi),ynt=i(xi),aLe=n(xi,"P",{});var zUt=s(aLe);xnt=r(zUt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),zUt.forEach(t),$nt=i(xi),Rn=n(xi,"P",{});var py=s(Rn);knt=r(py,"The model class to instantiate is selected based on the "),nLe=n(py,"CODE",{});var WUt=s(nLe);Snt=r(WUt,"model_type"),WUt.forEach(t),Rnt=r(py,` property of the config object (either
passed as an argument or loaded from `),sLe=n(py,"CODE",{});var QUt=s(sLe);Pnt=r(QUt,"pretrained_model_name_or_path"),QUt.forEach(t),Bnt=r(py,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lLe=n(py,"CODE",{});var HUt=s(lLe);Int=r(HUt,"pretrained_model_name_or_path"),HUt.forEach(t),Nnt=r(py,":"),py.forEach(t),qnt=i(xi),iLe=n(xi,"UL",{});var UUt=s(iLe);J6=n(UUt,"LI",{});var ize=s(J6);dLe=n(ize,"STRONG",{});var JUt=s(dLe);jnt=r(JUt,"vision-encoder-decoder"),JUt.forEach(t),Dnt=r(ize," \u2014 "),gte=n(ize,"A",{href:!0});var YUt=s(gte);Gnt=r(YUt,"FlaxVisionEncoderDecoderModel"),YUt.forEach(t),Ont=r(ize," (Vision Encoder decoder model)"),ize.forEach(t),UUt.forEach(t),Vnt=i(xi),T(Y6.$$.fragment,xi),xi.forEach(t),yi.forEach(t),this.h()},h(){d(g,"name","hf:doc:metadata"),d(g,"content",JSON.stringify(tKt)),d(f,"id","auto-classes"),d(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f,"href","#auto-classes"),d(u,"class","relative group"),d(Bn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),d(Nn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),d(qn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),d(Ii,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),d(jm,"id","extending-the-auto-classes"),d(jm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jm,"href","#extending-the-auto-classes"),d(Ni,"class","relative group"),d(Gm,"id","transformers.AutoConfig"),d(Gm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gm,"href","#transformers.AutoConfig"),d(qi,"class","relative group"),d(sR,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(lR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),d(iR,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),d(dR,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),d(cR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),d(mR,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(fR,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),d(gR,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(hR,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(uR,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(pR,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),d(_R,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),d(bR,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),d(vR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),d(FR,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),d(TR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),d(MR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),d(ER,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),d(CR,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),d(wR,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(AR,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(LR,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(yR,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),d(xR,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d($R,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(kR,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),d(SR,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),d(RR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),d(PR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),d(BR,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),d(IR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),d(NR,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(qR,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),d(jR,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),d(DR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),d(GR,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),d(OR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),d(VR,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),d(XR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),d(zR,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(WR,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),d(QR,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),d(HR,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),d(UR,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),d(JR,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),d(YR,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(KR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(ZR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(eP,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),d(oP,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),d(rP,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),d(tP,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),d(aP,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),d(nP,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),d(sP,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),d(lP,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),d(iP,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),d(dP,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(cP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),d(mP,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),d(fP,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(gP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(hP,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"),d(uP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),d(pP,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),d(_P,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig"),d(bP,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),d(vP,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(FP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(TP,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),d(MP,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig"),d(EP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),d(CP,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),d(wP,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),d(AP,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(LP,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(yP,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(xP,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),d($P,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),d(kP,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),d(SP,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),d(RP,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),d(PP,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),d(BP,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),d(IP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),d(NP,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),d(qP,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),d(jP,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),d(DP,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),d(GP,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(OP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(VP,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(XP,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),d(zP,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(WP,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),d(QP,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config"),d(HP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),d(UP,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),d(JP,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),d(YP,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(KP,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),d(ZP,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(eB,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(oB,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),d(rB,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),d(tB,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(aB,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(nB,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(sB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),d(lB,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(iB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(dB,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),d(cB,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),d(mB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),d(fB,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),d(gB,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(hB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(uB,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(pB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),d(_B,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),d(bB,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(th,"id","transformers.AutoTokenizer"),d(th,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(th,"href","#transformers.AutoTokenizer"),d(Di,"class","relative group"),d(vB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(FB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),d(TB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(MB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),d(EB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),d(CB,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),d(wB,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(AB,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(LB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(yB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(xB,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d($B,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(kB,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(SB,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(RB,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(PB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(BB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(IB,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(NB,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(qB,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(jB,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),d(DB,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(GB,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),d(OB,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(VB,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),d(XB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(zB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(WB,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),d(QB,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),d(HB,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(UB,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(JB,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),d(YB,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),d(KB,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(ZB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(eI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(oI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),d(rI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(tI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(aI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),d(nI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(sI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(lI,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(iI,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(dI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),d(cI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(mI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(fI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),d(gI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(hI,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(uI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),d(pI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(_I,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(bI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(vI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(FI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(TI,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),d(MI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(EI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(CI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(wI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(AI,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),d(LI,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(yI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(xI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d($I,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(kI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(SI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(RI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(PI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(BI,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),d(II,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),d(NI,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(qI,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(jI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),d(DI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),d(GI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),d(OI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(VI,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(XI,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(zI,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),d(WI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(QI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(HI,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(UI,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),d(JI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),d(YI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(KI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(ZI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(eN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(oN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(rN,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),d(tN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(aN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(nN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(sN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(lN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(iN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(dN,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizer"),d(cN,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizerFast"),d(mN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(fN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(gN,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizer"),d(hN,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizerFast"),d(uN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),d(pN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(_N,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(bN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(vN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(FN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(TN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(MN,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(EN,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(CN,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(wN,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),d(AN,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),d(LN,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(yN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(xN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d($N,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),d(kN,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),d(SN,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),d(RN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),d(PN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(BN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),d(IN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(NN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(qN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(jN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(DN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(GN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(ON,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(VN,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(XN,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(zN,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),d(WN,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(QN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(HN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(UN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(JN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(YN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),d(KN,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),d(ZN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(eq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(oq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(rq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(tq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(aq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(nq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(sq,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(lq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),d(iq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(dq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),d(cq,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(mq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(fq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(gq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(hq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(uq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(pq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(_q,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),d(bq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jh,"id","transformers.AutoFeatureExtractor"),d(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jh,"href","#transformers.AutoFeatureExtractor"),d(Gi,"class","relative group"),d(vq,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(Fq,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(Tq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(Mq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Eq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Cq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(wq,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(Aq,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(Lq,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(yq,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),d(xq,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),d($q,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),d(kq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(Sq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Rq,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),d(Pq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(Bq,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),d(Iq,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),d(Nq,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(qq,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),d(jq,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),d(Dq,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),d(Gq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(Oq,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(Vq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Xq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(zq,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(Wq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(Qq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Hq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Uq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Jq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),d(Yq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Kq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Zq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(ej,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(oj,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wu,"id","transformers.AutoProcessor"),d(wu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wu,"href","#transformers.AutoProcessor"),d(Oi,"class","relative group"),d(rj,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(tj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),d(aj,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaProcessor"),d(nj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),d(sj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(lj,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),d(ij,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(dj,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTProcessor"),d(cj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(mj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(fj,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(gj,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(hj,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),d(uj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(pj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(_j,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),d(bj,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(vj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Fj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Tj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Hu,"id","transformers.AutoModel"),d(Hu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Hu,"href","#transformers.AutoModel"),d(Xi,"class","relative group"),d(Mj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ej,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Cj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),d(Aj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),d(Lj,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),d(yj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),d(xj,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d($j,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),d(kj,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(Sj,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(Rj,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(Pj,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),d(Bj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),d(Ij,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),d(Nj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),d(qj,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),d(jj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),d(Dj,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),d(Gj,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),d(Oj,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),d(Vj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(Xj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(zj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(Wj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),d(Qj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(Hj,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(Uj,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),d(Jj,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),d(Yj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),d(Kj,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(Zj,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),d(eD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),d(oD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),d(rD,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),d(tD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),d(aD,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),d(nD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),d(sD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),d(lD,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),d(iD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),d(dD,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(cD,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),d(mD,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),d(fD,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),d(gD,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),d(hD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),d(uD,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(pD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(_D,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(bD,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),d(vD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),d(FD,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),d(TD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),d(MD,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),d(ED,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),d(CD,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),d(wD,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),d(AD,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),d(LD,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),d(yD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),d(xD,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),d($D,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(kD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),d(SD,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),d(RD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),d(PD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),d(BD,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel"),d(ID,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),d(ND,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),d(qD,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),d(jD,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(DD,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),d(GD,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel"),d(OD,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),d(VD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),d(XD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),d(zD,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),d(WD,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(QD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),d(HD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),d(UD,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),d(JD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),d(YD,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),d(KD,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),d(ZD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),d(eG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),d(oG,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),d(rG,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),d(tG,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),d(aG,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(nG,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),d(sG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(lG,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),d(iG,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model"),d(dG,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),d(cG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),d(mG,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),d(fG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(gG,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),d(hG,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(uG,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),d(pG,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),d(_G,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(bG,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),d(vG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),d(FG,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(TG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(MG,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),d(EG,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),d(CG,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),d(wG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),d(AG,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(LG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(yG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(xG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),d($G,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),d(kG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(t2,"id","transformers.AutoModelForPreTraining"),d(t2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t2,"href","#transformers.AutoModelForPreTraining"),d(Qi,"class","relative group"),d(SG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),d(IG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(NG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),d(qG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(jG,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),d(DG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(GG,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(OG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(VG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(XG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(zG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(WG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),d(QG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(HG,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),d(UG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),d(JG,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(YG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(KG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(ZG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(eO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(oO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(rO,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(tO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(aO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(nO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(sO,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(lO,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),d(iO,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(dO,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),d(cO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(mO,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),d(fO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(gO,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(hO,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(uO,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(pO,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(_O,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(bO,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(vO,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(FO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(TO,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),d(MO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(EO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(CO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(wO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(K2,"id","transformers.AutoModelForCausalLM"),d(K2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K2,"href","#transformers.AutoModelForCausalLM"),d(Ji,"class","relative group"),d(AO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),d($O,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),d(kO,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(SO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(RO,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(PO,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(BO,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(IO,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),d(NO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(qO,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),d(jO,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(DO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(GO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),d(OO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(VO,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(XO,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),d(zO,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(WO,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),d(QO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),d(HO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(UO,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM"),d(JO,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(YO,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),d(KO,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(ZO,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(eV,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(oV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(rV,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(tV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(aV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(nV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(sV,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(lV,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(iV,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(dV,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(cV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(mV,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(fV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(gV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(hV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ob,"id","transformers.AutoModelForMaskedLM"),d(Ob,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ob,"href","#transformers.AutoModelForMaskedLM"),d(Zi,"class","relative group"),d(uV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_V,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(vV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(FV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),d(TV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(MV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(EV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(CV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(wV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(AV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(LV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(yV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(xV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d($V,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(kV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(SV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(RV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(PV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(BV,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),d(IV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(NV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(qV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(jV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(DV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(GV,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),d(OV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(VV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(XV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(zV,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(WV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(QV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(HV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(UV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(JV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(YV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(KV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(ZV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(eX,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($v,"id","transformers.AutoModelForSeq2SeqLM"),d($v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($v,"href","#transformers.AutoModelForSeq2SeqLM"),d(rd,"class","relative group"),d(oX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aX,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(nX,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(sX,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(lX,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(iX,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(dX,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(cX,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(mX,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),d(fX,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(gX,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),d(hX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(uX,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(pX,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(_X,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(bX,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(vX,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(FX,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(TX,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(MX,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zv,"id","transformers.AutoModelForSequenceClassification"),d(Zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Zv,"href","#transformers.AutoModelForSequenceClassification"),d(nd,"class","relative group"),d(EX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(LX,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),d(yX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),d(xX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d($X,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(kX,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),d(SX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(RX,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(PX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(BX,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(IX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(NX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(qX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(jX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(DX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(GX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(OX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(VX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(XX,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(zX,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(WX,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(QX,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(HX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(UX,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(JX,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),d(YX,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),d(KX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(ZX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(ez,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(oz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(rz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(tz,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification"),d(az,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),d(nz,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(sz,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(lz,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification"),d(iz,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(dz,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(cz,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(mz,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(fz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(gz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(hz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(uz,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(pz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(_z,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(bz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(vz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(Fz,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(Tz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(Mz,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eF,"id","transformers.AutoModelForMultipleChoice"),d(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eF,"href","#transformers.AutoModelForMultipleChoice"),d(id,"class","relative group"),d(Ez,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Cz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Az,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(Lz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),d(yz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(xz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d($z,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(kz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(Sz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(Rz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),d(Pz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(Bz,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(Iz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(Nz,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(qz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(jz,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(Dz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(Gz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(Oz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(Vz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(Xz,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),d(zz,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(Wz,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(Qz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(Hz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(Uz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(Jz,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(Yz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(Kz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(Zz,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(eW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(oW,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(PF,"id","transformers.AutoModelForNextSentencePrediction"),d(PF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(PF,"href","#transformers.AutoModelForNextSentencePrediction"),d(md,"class","relative group"),d(rW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nW,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(sW,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(lW,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(iW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(dW,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),d(cW,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XF,"id","transformers.AutoModelForTokenClassification"),d(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XF,"href","#transformers.AutoModelForTokenClassification"),d(hd,"class","relative group"),d(mW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hW,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(uW,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),d(pW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(_W,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),d(bW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(vW,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),d(FW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(TW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(MW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(EW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(CW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(wW,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(AW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(LW,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(yW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(xW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d($W,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(kW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(SW,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(RW,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),d(PW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(BW,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(IW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(NW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(qW,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),d(jW,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(DW,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(GW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(OW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(VW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(XW,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(zW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(WW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(QW,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(HW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(UW,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($T,"id","transformers.AutoModelForQuestionAnswering"),d($T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($T,"href","#transformers.AutoModelForQuestionAnswering"),d(_d,"class","relative group"),d(JW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ZW,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(eQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(oQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(rQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(tQ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(aQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(nQ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(sQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(lQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(iQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(dQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(cQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(mQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(fQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(gQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(hQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(uQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(pQ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(_Q,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(bQ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),d(vQ,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(FQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(TQ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(MQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(EQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(CQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(wQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(AQ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),d(LQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),d(yQ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(xQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d($Q,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(kQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(SQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(RQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(PQ,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(BQ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(IQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(NQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(qQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(jQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(DQ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MM,"id","transformers.AutoModelForTableQuestionAnswering"),d(MM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(MM,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Fd,"class","relative group"),d(GQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LM,"id","transformers.AutoModelForImageClassification"),d(LM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LM,"href","#transformers.AutoModelForImageClassification"),d(Ed,"class","relative group"),d(zQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HQ,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),d(UQ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(JQ,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),d(YQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(KQ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),d(ZQ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(eH,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(oH,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),d(rH,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),d(tH,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),d(aH,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(nH,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(sH,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(lH,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(iH,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(dH,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(cH,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(mH,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),d(fH,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),d(gH,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),d(hH,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),d(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zM,"id","transformers.AutoModelForVision2Seq"),d(zM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zM,"href","#transformers.AutoModelForVision2Seq"),d(Ad,"class","relative group"),d(uH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_H,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bH,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(JM,"id","transformers.AutoModelForVisualQuestionAnswering"),d(JM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(JM,"href","#transformers.AutoModelForVisualQuestionAnswering"),d(xd,"class","relative group"),d(vH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MH,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),d(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(o4,"id","transformers.AutoModelForAudioClassification"),d(o4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o4,"href","#transformers.AutoModelForAudioClassification"),d(Sd,"class","relative group"),d(EH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(LH,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(yH,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(xH,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d($H,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(kH,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(SH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(RH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),d(PH,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(h4,"id","transformers.AutoModelForAudioFrameClassification"),d(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h4,"href","#transformers.AutoModelForAudioFrameClassification"),d(Bd,"class","relative group"),d(BH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(jH,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(DH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(GH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),d(OH,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(E4,"id","transformers.AutoModelForCTC"),d(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E4,"href","#transformers.AutoModelForCTC"),d(qd,"class","relative group"),d(VH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(QH,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),d(HH,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),d(UH,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),d(JH,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),d(YH,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(KH,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(ZH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(eU,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),d(oU,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N4,"id","transformers.AutoModelForSpeechSeq2Seq"),d(N4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N4,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Gd,"class","relative group"),d(rU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nU,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(sU,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(V4,"id","transformers.AutoModelForAudioXVector"),d(V4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V4,"href","#transformers.AutoModelForAudioXVector"),d(Xd,"class","relative group"),d(lU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(mU,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(fU,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(gU,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),d(hU,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(K4,"id","transformers.AutoModelForMaskedImageModeling"),d(K4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K4,"href","#transformers.AutoModelForMaskedImageModeling"),d(Qd,"class","relative group"),d(uU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_U,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bU,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(vU,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(FU,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),d(TU,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sE,"id","transformers.AutoModelForObjectDetection"),d(sE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(sE,"href","#transformers.AutoModelForObjectDetection"),d(Jd,"class","relative group"),d(MU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(EU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(CU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wU,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),d(AU,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fE,"id","transformers.AutoModelForImageSegmentation"),d(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fE,"href","#transformers.AutoModelForImageSegmentation"),d(Zd,"class","relative group"),d(LU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($U,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_E,"id","transformers.AutoModelForSemanticSegmentation"),d(_E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_E,"href","#transformers.AutoModelForSemanticSegmentation"),d(rc,"class","relative group"),d(kU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(PU,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(BU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(IU,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(NU,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),d(qU,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AE,"id","transformers.AutoModelForInstanceSegmentation"),d(AE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(AE,"href","#transformers.AutoModelForInstanceSegmentation"),d(nc,"class","relative group"),d(jU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(OU,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kE,"id","transformers.TFAutoModel"),d(kE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kE,"href","#transformers.TFAutoModel"),d(ic,"class","relative group"),d(VU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),d(QU,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),d(HU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),d(UU,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(JU,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(YU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),d(KU,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),d(ZU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),d(eJ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),d(oJ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),d(rJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),d(tJ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),d(aJ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(nJ,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel"),d(sJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(lJ,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(iJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),d(dJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(cJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),d(mJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(fJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),d(gJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),d(hJ,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),d(uJ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(pJ,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),d(_J,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),d(bJ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),d(vJ,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),d(FJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),d(TJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(MJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),d(EJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),d(CJ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(wJ,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),d(AJ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),d(LJ,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),d(yJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),d(xJ,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel"),d($J,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),d(kJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),d(SJ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel"),d(RJ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(PJ,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),d(BJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),d(IJ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),d(NJ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(qJ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),d(jJ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(DJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(GJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),d(OJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(VJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($C,"id","transformers.TFAutoModelForPreTraining"),d($C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($C,"href","#transformers.TFAutoModelForPreTraining"),d(mc,"class","relative group"),d(XJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(HJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(UJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),d(JJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(YJ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(KJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(ZJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(eY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(oY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(rY,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(tY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(aY,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(nY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(sY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(lY,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(iY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(dY,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(cY,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(mY,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(fY,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(gY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(hY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(uY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(r5,"id","transformers.TFAutoModelForCausalLM"),d(r5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r5,"href","#transformers.TFAutoModelForCausalLM"),d(hc,"class","relative group"),d(pY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_Y,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(FY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(TY,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(MY,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(EY,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(CY,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(wY,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),d(AY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(LY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(yY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(xY,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d($Y,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(kY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(b5,"id","transformers.TFAutoModelForImageClassification"),d(b5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b5,"href","#transformers.TFAutoModelForImageClassification"),d(_c,"class","relative group"),d(SY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BY,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(IY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),d(NY,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification"),d(qY,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),d(jY,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),d(DY,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification"),d(GY,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),d(OY,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),d(VY,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(y5,"id","transformers.TFAutoModelForMaskedLM"),d(y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y5,"href","#transformers.TFAutoModelForMaskedLM"),d(Fc,"class","relative group"),d(XY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QY,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(HY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(UY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(JY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(YY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(KY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(ZY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(eK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(oK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(rK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(tK,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(aK,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(nK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(sK,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(lK,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(iK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(dK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(cK,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(mK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(fK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y5,"id","transformers.TFAutoModelForSeq2SeqLM"),d(Y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y5,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Ec,"class","relative group"),d(gK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pK,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(_K,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(bK,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(vK,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(FK,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(TK,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),d(MK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(EK,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(CK,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(wK,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(c3,"id","transformers.TFAutoModelForSequenceClassification"),d(c3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c3,"href","#transformers.TFAutoModelForSequenceClassification"),d(Ac,"class","relative group"),d(AK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xK,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d($K,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(kK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(SK,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(RK,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(PK,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(BK,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(IK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(NK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(qK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(jK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(DK,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(GK,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(OK,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(VK,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(XK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(zK,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(WK,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(QK,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(HK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(UK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(JK,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(YK,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(KK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(ZK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(eZ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j3,"id","transformers.TFAutoModelForMultipleChoice"),d(j3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j3,"href","#transformers.TFAutoModelForMultipleChoice"),d(xc,"class","relative group"),d(oZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(nZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(sZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(lZ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(iZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(dZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(cZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(mZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(fZ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(gZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(hZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(uZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(pZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(_Z,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(bZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(vZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(FZ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(n0,"id","transformers.TFAutoModelForNextSentencePrediction"),d(n0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n0,"href","#transformers.TFAutoModelForNextSentencePrediction"),d(Sc,"class","relative group"),d(TZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),d(wZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(c0,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(c0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c0,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Bc,"class","relative group"),d(AZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xZ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(h0,"id","transformers.TFAutoModelForTokenClassification"),d(h0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h0,"href","#transformers.TFAutoModelForTokenClassification"),d(qc,"class","relative group"),d($Z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(PZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(BZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(IZ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(NZ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(qZ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(jZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(DZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(GZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(OZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(VZ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(XZ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(zZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(WZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(QZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(HZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(UZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(JZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(YZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(KZ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N0,"id","transformers.TFAutoModelForQuestionAnswering"),d(N0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N0,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Gc,"class","relative group"),d(ZZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ree,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(tee,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(aee,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(nee,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(see,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(lee,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(iee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(dee,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(cee,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(mee,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(fee,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(gee,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(hee,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(uee,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(pee,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(_ee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(bee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(vee,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(Fee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(Tee,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sw,"id","transformers.TFAutoModelForVision2Seq"),d(sw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(sw,"href","#transformers.TFAutoModelForVision2Seq"),d(Xc,"class","relative group"),d(Mee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Eee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Cee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wee,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cw,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(cw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cw,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Qc,"class","relative group"),d(Aee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xee,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hw,"id","transformers.FlaxAutoModel"),d(hw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hw,"href","#transformers.FlaxAutoModel"),d(Jc,"class","relative group"),d($ee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(See,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ree,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),d(Pee,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),d(Bee,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),d(Iee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),d(Nee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(qee,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(jee,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(Dee,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),d(Gee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(Oee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),d(Vee,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(Xee,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(zee,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(Wee,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),d(Qee,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),d(Hee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),d(Uee,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),d(Jee,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),d(Yee,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(Kee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(Zee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(eoe,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),d(ooe,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(roe,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),d(toe,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(aoe,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(noe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xw,"id","transformers.FlaxAutoModelForCausalLM"),d(Xw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xw,"href","#transformers.FlaxAutoModelForCausalLM"),d(Zc,"class","relative group"),d(soe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(loe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ioe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(doe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(coe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),d(moe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),d(foe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),d(goe,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(hoe,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(uoe,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(poe,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),d(_oe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),d(boe,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tA,"id","transformers.FlaxAutoModelForPreTraining"),d(tA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tA,"href","#transformers.FlaxAutoModelForPreTraining"),d(rm,"class","relative group"),d(voe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Foe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Toe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Moe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(Eoe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(Coe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(woe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(Aoe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(Loe,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(yoe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(xoe,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d($oe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(koe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(Soe,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(Roe,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(Poe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vA,"id","transformers.FlaxAutoModelForMaskedLM"),d(vA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vA,"href","#transformers.FlaxAutoModelForMaskedLM"),d(nm,"class","relative group"),d(Boe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ioe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Noe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qoe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(joe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(Doe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(Goe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(Ooe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(Voe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(Xoe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(zoe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(Woe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(Qoe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SA,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(SA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(SA,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(im,"class","relative group"),d(Hoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Uoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Joe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yoe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(Koe,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(Zoe,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(ere,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(ore,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(rre,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(tre,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(are,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(nre,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(sre,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zA,"id","transformers.FlaxAutoModelForSequenceClassification"),d(zA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zA,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(mm,"class","relative group"),d(lre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ire,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cre,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(mre,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(fre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(gre,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(hre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(ure,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(pre,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(_re,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(bre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(vre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(a6,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(a6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a6,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(hm,"class","relative group"),d(Fre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Mre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ere,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(Cre,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(wre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(Are,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(Lre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(yre,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(xre,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d($re,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(kre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(Sre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_6,"id","transformers.FlaxAutoModelForTokenClassification"),d(_6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_6,"href","#transformers.FlaxAutoModelForTokenClassification"),d(_m,"class","relative group"),d(Rre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Bre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ire,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(Nre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(qre,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(jre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(Dre,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(Gre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(Ore,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(Vre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(y6,"id","transformers.FlaxAutoModelForMultipleChoice"),d(y6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y6,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Fm,"class","relative group"),d(Xre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Wre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qre,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(Hre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(Ure,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(Jre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(Yre,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(Kre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(Zre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(ete,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j6,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(j6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j6,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Em,"class","relative group"),d(ote,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ate,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(V6,"id","transformers.FlaxAutoModelForImageClassification"),d(V6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V6,"href","#transformers.FlaxAutoModelForImageClassification"),d(Am,"class","relative group"),d(nte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ste,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ite,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(dte,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(H6,"id","transformers.FlaxAutoModelForVision2Seq"),d(H6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H6,"href","#transformers.FlaxAutoModelForVision2Seq"),d(xm,"class","relative group"),d(cte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gte,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(c,p,null),e(u,h),e(u,wo),e(wo,$i),b(m,Bm,_),b(m,lt,_),e(lt,ki),e(lt,Si),e(Si,_y),e(lt,Im),b(m,Oe,_),b(m,Qe,_),e(Qe,Ri),e(Qe,Bn),e(Bn,by),e(Qe,In),e(Qe,Nn),e(Nn,vy),e(Qe,Pi),e(Qe,qn),e(qn,Fy),e(Qe,Bi),b(m,Nm,_),M(Sa,m,_),b(m,He,_),b(m,Ae,_),e(Ae,eR),e(Ae,Ii),e(Ii,oR),e(Ae,rR),b(m,Ao,_),b(m,Ra,_),e(Ra,tR),e(Ra,qm),e(qm,aR),e(Ra,CUe),b(m,dze,_),b(m,Ni,_),e(Ni,jm),e(jm,lne),M(Ty,lne,null),e(Ni,wUe),e(Ni,ine),e(ine,AUe),b(m,cze,_),b(m,jn,_),e(jn,LUe),e(jn,dne),e(dne,yUe),e(jn,xUe),e(jn,cne),e(cne,$Ue),e(jn,kUe),b(m,mze,_),M(My,m,_),b(m,fze,_),b(m,nR,_),e(nR,SUe),b(m,gze,_),M(Dm,m,_),b(m,hze,_),b(m,qi,_),e(qi,Gm),e(Gm,mne),M(Ey,mne,null),e(qi,RUe),e(qi,fne),e(fne,PUe),b(m,uze,_),b(m,Lo,_),M(Cy,Lo,null),e(Lo,BUe),e(Lo,wy),e(wy,IUe),e(wy,sR),e(sR,NUe),e(wy,qUe),e(Lo,jUe),e(Lo,Ay),e(Ay,DUe),e(Ay,gne),e(gne,GUe),e(Ay,OUe),e(Lo,VUe),e(Lo,yr),M(Ly,yr,null),e(yr,XUe),e(yr,hne),e(hne,zUe),e(yr,WUe),e(yr,ji),e(ji,QUe),e(ji,une),e(une,HUe),e(ji,UUe),e(ji,pne),e(pne,JUe),e(ji,YUe),e(yr,KUe),e(yr,A),e(A,Om),e(Om,_ne),e(_ne,ZUe),e(Om,eJe),e(Om,lR),e(lR,oJe),e(Om,rJe),e(A,tJe),e(A,Vm),e(Vm,bne),e(bne,aJe),e(Vm,nJe),e(Vm,iR),e(iR,sJe),e(Vm,lJe),e(A,iJe),e(A,Xm),e(Xm,vne),e(vne,dJe),e(Xm,cJe),e(Xm,dR),e(dR,mJe),e(Xm,fJe),e(A,gJe),e(A,zm),e(zm,Fne),e(Fne,hJe),e(zm,uJe),e(zm,cR),e(cR,pJe),e(zm,_Je),e(A,bJe),e(A,Wm),e(Wm,Tne),e(Tne,vJe),e(Wm,FJe),e(Wm,mR),e(mR,TJe),e(Wm,MJe),e(A,EJe),e(A,Qm),e(Qm,Mne),e(Mne,CJe),e(Qm,wJe),e(Qm,fR),e(fR,AJe),e(Qm,LJe),e(A,yJe),e(A,Hm),e(Hm,Ene),e(Ene,xJe),e(Hm,$Je),e(Hm,gR),e(gR,kJe),e(Hm,SJe),e(A,RJe),e(A,Um),e(Um,Cne),e(Cne,PJe),e(Um,BJe),e(Um,hR),e(hR,IJe),e(Um,NJe),e(A,qJe),e(A,Jm),e(Jm,wne),e(wne,jJe),e(Jm,DJe),e(Jm,uR),e(uR,GJe),e(Jm,OJe),e(A,VJe),e(A,Ym),e(Ym,Ane),e(Ane,XJe),e(Ym,zJe),e(Ym,pR),e(pR,WJe),e(Ym,QJe),e(A,HJe),e(A,Km),e(Km,Lne),e(Lne,UJe),e(Km,JJe),e(Km,_R),e(_R,YJe),e(Km,KJe),e(A,ZJe),e(A,Zm),e(Zm,yne),e(yne,eYe),e(Zm,oYe),e(Zm,bR),e(bR,rYe),e(Zm,tYe),e(A,aYe),e(A,ef),e(ef,xne),e(xne,nYe),e(ef,sYe),e(ef,vR),e(vR,lYe),e(ef,iYe),e(A,dYe),e(A,of),e(of,$ne),e($ne,cYe),e(of,mYe),e(of,FR),e(FR,fYe),e(of,gYe),e(A,hYe),e(A,rf),e(rf,kne),e(kne,uYe),e(rf,pYe),e(rf,TR),e(TR,_Ye),e(rf,bYe),e(A,vYe),e(A,tf),e(tf,Sne),e(Sne,FYe),e(tf,TYe),e(tf,MR),e(MR,MYe),e(tf,EYe),e(A,CYe),e(A,af),e(af,Rne),e(Rne,wYe),e(af,AYe),e(af,ER),e(ER,LYe),e(af,yYe),e(A,xYe),e(A,nf),e(nf,Pne),e(Pne,$Ye),e(nf,kYe),e(nf,CR),e(CR,SYe),e(nf,RYe),e(A,PYe),e(A,sf),e(sf,Bne),e(Bne,BYe),e(sf,IYe),e(sf,wR),e(wR,NYe),e(sf,qYe),e(A,jYe),e(A,lf),e(lf,Ine),e(Ine,DYe),e(lf,GYe),e(lf,AR),e(AR,OYe),e(lf,VYe),e(A,XYe),e(A,df),e(df,Nne),e(Nne,zYe),e(df,WYe),e(df,LR),e(LR,QYe),e(df,HYe),e(A,UYe),e(A,cf),e(cf,qne),e(qne,JYe),e(cf,YYe),e(cf,yR),e(yR,KYe),e(cf,ZYe),e(A,eKe),e(A,mf),e(mf,jne),e(jne,oKe),e(mf,rKe),e(mf,xR),e(xR,tKe),e(mf,aKe),e(A,nKe),e(A,ff),e(ff,Dne),e(Dne,sKe),e(ff,lKe),e(ff,$R),e($R,iKe),e(ff,dKe),e(A,cKe),e(A,gf),e(gf,Gne),e(Gne,mKe),e(gf,fKe),e(gf,kR),e(kR,gKe),e(gf,hKe),e(A,uKe),e(A,hf),e(hf,One),e(One,pKe),e(hf,_Ke),e(hf,SR),e(SR,bKe),e(hf,vKe),e(A,FKe),e(A,uf),e(uf,Vne),e(Vne,TKe),e(uf,MKe),e(uf,RR),e(RR,EKe),e(uf,CKe),e(A,wKe),e(A,pf),e(pf,Xne),e(Xne,AKe),e(pf,LKe),e(pf,PR),e(PR,yKe),e(pf,xKe),e(A,$Ke),e(A,_f),e(_f,zne),e(zne,kKe),e(_f,SKe),e(_f,BR),e(BR,RKe),e(_f,PKe),e(A,BKe),e(A,bf),e(bf,Wne),e(Wne,IKe),e(bf,NKe),e(bf,IR),e(IR,qKe),e(bf,jKe),e(A,DKe),e(A,vf),e(vf,Qne),e(Qne,GKe),e(vf,OKe),e(vf,NR),e(NR,VKe),e(vf,XKe),e(A,zKe),e(A,Ff),e(Ff,Hne),e(Hne,WKe),e(Ff,QKe),e(Ff,qR),e(qR,HKe),e(Ff,UKe),e(A,JKe),e(A,Tf),e(Tf,Une),e(Une,YKe),e(Tf,KKe),e(Tf,jR),e(jR,ZKe),e(Tf,eZe),e(A,oZe),e(A,Mf),e(Mf,Jne),e(Jne,rZe),e(Mf,tZe),e(Mf,DR),e(DR,aZe),e(Mf,nZe),e(A,sZe),e(A,Ef),e(Ef,Yne),e(Yne,lZe),e(Ef,iZe),e(Ef,GR),e(GR,dZe),e(Ef,cZe),e(A,mZe),e(A,Cf),e(Cf,Kne),e(Kne,fZe),e(Cf,gZe),e(Cf,OR),e(OR,hZe),e(Cf,uZe),e(A,pZe),e(A,wf),e(wf,Zne),e(Zne,_Ze),e(wf,bZe),e(wf,VR),e(VR,vZe),e(wf,FZe),e(A,TZe),e(A,Af),e(Af,ese),e(ese,MZe),e(Af,EZe),e(Af,XR),e(XR,CZe),e(Af,wZe),e(A,AZe),e(A,Lf),e(Lf,ose),e(ose,LZe),e(Lf,yZe),e(Lf,zR),e(zR,xZe),e(Lf,$Ze),e(A,kZe),e(A,yf),e(yf,rse),e(rse,SZe),e(yf,RZe),e(yf,WR),e(WR,PZe),e(yf,BZe),e(A,IZe),e(A,xf),e(xf,tse),e(tse,NZe),e(xf,qZe),e(xf,QR),e(QR,jZe),e(xf,DZe),e(A,GZe),e(A,$f),e($f,ase),e(ase,OZe),e($f,VZe),e($f,HR),e(HR,XZe),e($f,zZe),e(A,WZe),e(A,kf),e(kf,nse),e(nse,QZe),e(kf,HZe),e(kf,UR),e(UR,UZe),e(kf,JZe),e(A,YZe),e(A,Sf),e(Sf,sse),e(sse,KZe),e(Sf,ZZe),e(Sf,JR),e(JR,eeo),e(Sf,oeo),e(A,reo),e(A,Rf),e(Rf,lse),e(lse,teo),e(Rf,aeo),e(Rf,YR),e(YR,neo),e(Rf,seo),e(A,leo),e(A,Pf),e(Pf,ise),e(ise,ieo),e(Pf,deo),e(Pf,KR),e(KR,ceo),e(Pf,meo),e(A,feo),e(A,Bf),e(Bf,dse),e(dse,geo),e(Bf,heo),e(Bf,ZR),e(ZR,ueo),e(Bf,peo),e(A,_eo),e(A,If),e(If,cse),e(cse,beo),e(If,veo),e(If,eP),e(eP,Feo),e(If,Teo),e(A,Meo),e(A,Nf),e(Nf,mse),e(mse,Eeo),e(Nf,Ceo),e(Nf,oP),e(oP,weo),e(Nf,Aeo),e(A,Leo),e(A,qf),e(qf,fse),e(fse,yeo),e(qf,xeo),e(qf,rP),e(rP,$eo),e(qf,keo),e(A,Seo),e(A,jf),e(jf,gse),e(gse,Reo),e(jf,Peo),e(jf,tP),e(tP,Beo),e(jf,Ieo),e(A,Neo),e(A,Df),e(Df,hse),e(hse,qeo),e(Df,jeo),e(Df,aP),e(aP,Deo),e(Df,Geo),e(A,Oeo),e(A,Gf),e(Gf,use),e(use,Veo),e(Gf,Xeo),e(Gf,nP),e(nP,zeo),e(Gf,Weo),e(A,Qeo),e(A,Of),e(Of,pse),e(pse,Heo),e(Of,Ueo),e(Of,sP),e(sP,Jeo),e(Of,Yeo),e(A,Keo),e(A,Vf),e(Vf,_se),e(_se,Zeo),e(Vf,eoo),e(Vf,lP),e(lP,ooo),e(Vf,roo),e(A,too),e(A,Xf),e(Xf,bse),e(bse,aoo),e(Xf,noo),e(Xf,iP),e(iP,soo),e(Xf,loo),e(A,ioo),e(A,zf),e(zf,vse),e(vse,doo),e(zf,coo),e(zf,dP),e(dP,moo),e(zf,foo),e(A,goo),e(A,Wf),e(Wf,Fse),e(Fse,hoo),e(Wf,uoo),e(Wf,cP),e(cP,poo),e(Wf,_oo),e(A,boo),e(A,Qf),e(Qf,Tse),e(Tse,voo),e(Qf,Foo),e(Qf,mP),e(mP,Too),e(Qf,Moo),e(A,Eoo),e(A,Hf),e(Hf,Mse),e(Mse,Coo),e(Hf,woo),e(Hf,fP),e(fP,Aoo),e(Hf,Loo),e(A,yoo),e(A,Uf),e(Uf,Ese),e(Ese,xoo),e(Uf,$oo),e(Uf,gP),e(gP,koo),e(Uf,Soo),e(A,Roo),e(A,Jf),e(Jf,Cse),e(Cse,Poo),e(Jf,Boo),e(Jf,hP),e(hP,Ioo),e(Jf,Noo),e(A,qoo),e(A,Yf),e(Yf,wse),e(wse,joo),e(Yf,Doo),e(Yf,uP),e(uP,Goo),e(Yf,Ooo),e(A,Voo),e(A,Kf),e(Kf,Ase),e(Ase,Xoo),e(Kf,zoo),e(Kf,pP),e(pP,Woo),e(Kf,Qoo),e(A,Hoo),e(A,Zf),e(Zf,Lse),e(Lse,Uoo),e(Zf,Joo),e(Zf,_P),e(_P,Yoo),e(Zf,Koo),e(A,Zoo),e(A,eg),e(eg,yse),e(yse,ero),e(eg,oro),e(eg,bP),e(bP,rro),e(eg,tro),e(A,aro),e(A,og),e(og,xse),e(xse,nro),e(og,sro),e(og,vP),e(vP,lro),e(og,iro),e(A,dro),e(A,rg),e(rg,$se),e($se,cro),e(rg,mro),e(rg,FP),e(FP,fro),e(rg,gro),e(A,hro),e(A,tg),e(tg,kse),e(kse,uro),e(tg,pro),e(tg,TP),e(TP,_ro),e(tg,bro),e(A,vro),e(A,ag),e(ag,Sse),e(Sse,Fro),e(ag,Tro),e(ag,MP),e(MP,Mro),e(ag,Ero),e(A,Cro),e(A,ng),e(ng,Rse),e(Rse,wro),e(ng,Aro),e(ng,EP),e(EP,Lro),e(ng,yro),e(A,xro),e(A,sg),e(sg,Pse),e(Pse,$ro),e(sg,kro),e(sg,CP),e(CP,Sro),e(sg,Rro),e(A,Pro),e(A,lg),e(lg,Bse),e(Bse,Bro),e(lg,Iro),e(lg,wP),e(wP,Nro),e(lg,qro),e(A,jro),e(A,ig),e(ig,Ise),e(Ise,Dro),e(ig,Gro),e(ig,AP),e(AP,Oro),e(ig,Vro),e(A,Xro),e(A,dg),e(dg,Nse),e(Nse,zro),e(dg,Wro),e(dg,LP),e(LP,Qro),e(dg,Hro),e(A,Uro),e(A,cg),e(cg,qse),e(qse,Jro),e(cg,Yro),e(cg,yP),e(yP,Kro),e(cg,Zro),e(A,eto),e(A,mg),e(mg,jse),e(jse,oto),e(mg,rto),e(mg,xP),e(xP,tto),e(mg,ato),e(A,nto),e(A,fg),e(fg,Dse),e(Dse,sto),e(fg,lto),e(fg,$P),e($P,ito),e(fg,dto),e(A,cto),e(A,gg),e(gg,Gse),e(Gse,mto),e(gg,fto),e(gg,kP),e(kP,gto),e(gg,hto),e(A,uto),e(A,hg),e(hg,Ose),e(Ose,pto),e(hg,_to),e(hg,SP),e(SP,bto),e(hg,vto),e(A,Fto),e(A,ug),e(ug,Vse),e(Vse,Tto),e(ug,Mto),e(ug,RP),e(RP,Eto),e(ug,Cto),e(A,wto),e(A,pg),e(pg,Xse),e(Xse,Ato),e(pg,Lto),e(pg,PP),e(PP,yto),e(pg,xto),e(A,$to),e(A,_g),e(_g,zse),e(zse,kto),e(_g,Sto),e(_g,BP),e(BP,Rto),e(_g,Pto),e(A,Bto),e(A,bg),e(bg,Wse),e(Wse,Ito),e(bg,Nto),e(bg,IP),e(IP,qto),e(bg,jto),e(A,Dto),e(A,vg),e(vg,Qse),e(Qse,Gto),e(vg,Oto),e(vg,NP),e(NP,Vto),e(vg,Xto),e(A,zto),e(A,Fg),e(Fg,Hse),e(Hse,Wto),e(Fg,Qto),e(Fg,qP),e(qP,Hto),e(Fg,Uto),e(A,Jto),e(A,Tg),e(Tg,Use),e(Use,Yto),e(Tg,Kto),e(Tg,jP),e(jP,Zto),e(Tg,eao),e(A,oao),e(A,Mg),e(Mg,Jse),e(Jse,rao),e(Mg,tao),e(Mg,DP),e(DP,aao),e(Mg,nao),e(A,sao),e(A,Eg),e(Eg,Yse),e(Yse,lao),e(Eg,iao),e(Eg,GP),e(GP,dao),e(Eg,cao),e(A,mao),e(A,Cg),e(Cg,Kse),e(Kse,fao),e(Cg,gao),e(Cg,OP),e(OP,hao),e(Cg,uao),e(A,pao),e(A,wg),e(wg,Zse),e(Zse,_ao),e(wg,bao),e(wg,VP),e(VP,vao),e(wg,Fao),e(A,Tao),e(A,Ag),e(Ag,ele),e(ele,Mao),e(Ag,Eao),e(Ag,XP),e(XP,Cao),e(Ag,wao),e(A,Aao),e(A,Lg),e(Lg,ole),e(ole,Lao),e(Lg,yao),e(Lg,zP),e(zP,xao),e(Lg,$ao),e(A,kao),e(A,yg),e(yg,rle),e(rle,Sao),e(yg,Rao),e(yg,WP),e(WP,Pao),e(yg,Bao),e(A,Iao),e(A,xg),e(xg,tle),e(tle,Nao),e(xg,qao),e(xg,QP),e(QP,jao),e(xg,Dao),e(A,Gao),e(A,$g),e($g,ale),e(ale,Oao),e($g,Vao),e($g,HP),e(HP,Xao),e($g,zao),e(A,Wao),e(A,kg),e(kg,nle),e(nle,Qao),e(kg,Hao),e(kg,UP),e(UP,Uao),e(kg,Jao),e(A,Yao),e(A,Sg),e(Sg,sle),e(sle,Kao),e(Sg,Zao),e(Sg,JP),e(JP,eno),e(Sg,ono),e(A,rno),e(A,Rg),e(Rg,lle),e(lle,tno),e(Rg,ano),e(Rg,YP),e(YP,nno),e(Rg,sno),e(A,lno),e(A,Pg),e(Pg,ile),e(ile,ino),e(Pg,dno),e(Pg,KP),e(KP,cno),e(Pg,mno),e(A,fno),e(A,Bg),e(Bg,dle),e(dle,gno),e(Bg,hno),e(Bg,ZP),e(ZP,uno),e(Bg,pno),e(A,_no),e(A,Ig),e(Ig,cle),e(cle,bno),e(Ig,vno),e(Ig,eB),e(eB,Fno),e(Ig,Tno),e(A,Mno),e(A,Ng),e(Ng,mle),e(mle,Eno),e(Ng,Cno),e(Ng,oB),e(oB,wno),e(Ng,Ano),e(A,Lno),e(A,qg),e(qg,fle),e(fle,yno),e(qg,xno),e(qg,rB),e(rB,$no),e(qg,kno),e(A,Sno),e(A,jg),e(jg,gle),e(gle,Rno),e(jg,Pno),e(jg,tB),e(tB,Bno),e(jg,Ino),e(A,Nno),e(A,Dg),e(Dg,hle),e(hle,qno),e(Dg,jno),e(Dg,aB),e(aB,Dno),e(Dg,Gno),e(A,Ono),e(A,Gg),e(Gg,ule),e(ule,Vno),e(Gg,Xno),e(Gg,nB),e(nB,zno),e(Gg,Wno),e(A,Qno),e(A,Og),e(Og,ple),e(ple,Hno),e(Og,Uno),e(Og,sB),e(sB,Jno),e(Og,Yno),e(A,Kno),e(A,Vg),e(Vg,_le),e(_le,Zno),e(Vg,eso),e(Vg,lB),e(lB,oso),e(Vg,rso),e(A,tso),e(A,Xg),e(Xg,ble),e(ble,aso),e(Xg,nso),e(Xg,iB),e(iB,sso),e(Xg,lso),e(A,iso),e(A,zg),e(zg,vle),e(vle,dso),e(zg,cso),e(zg,dB),e(dB,mso),e(zg,fso),e(A,gso),e(A,Wg),e(Wg,Fle),e(Fle,hso),e(Wg,uso),e(Wg,cB),e(cB,pso),e(Wg,_so),e(A,bso),e(A,Qg),e(Qg,Tle),e(Tle,vso),e(Qg,Fso),e(Qg,mB),e(mB,Tso),e(Qg,Mso),e(A,Eso),e(A,Hg),e(Hg,Mle),e(Mle,Cso),e(Hg,wso),e(Hg,fB),e(fB,Aso),e(Hg,Lso),e(A,yso),e(A,Ug),e(Ug,Ele),e(Ele,xso),e(Ug,$so),e(Ug,gB),e(gB,kso),e(Ug,Sso),e(A,Rso),e(A,Jg),e(Jg,Cle),e(Cle,Pso),e(Jg,Bso),e(Jg,hB),e(hB,Iso),e(Jg,Nso),e(A,qso),e(A,Yg),e(Yg,wle),e(wle,jso),e(Yg,Dso),e(Yg,uB),e(uB,Gso),e(Yg,Oso),e(A,Vso),e(A,Kg),e(Kg,Ale),e(Ale,Xso),e(Kg,zso),e(Kg,pB),e(pB,Wso),e(Kg,Qso),e(A,Hso),e(A,Zg),e(Zg,Lle),e(Lle,Uso),e(Zg,Jso),e(Zg,_B),e(_B,Yso),e(Zg,Kso),e(A,Zso),e(A,eh),e(eh,yle),e(yle,elo),e(eh,olo),e(eh,bB),e(bB,rlo),e(eh,tlo),e(yr,alo),M(oh,yr,null),e(Lo,nlo),e(Lo,rh),M(yy,rh,null),e(rh,slo),e(rh,xle),e(xle,llo),b(m,pze,_),b(m,Di,_),e(Di,th),e(th,$le),M(xy,$le,null),e(Di,ilo),e(Di,kle),e(kle,dlo),b(m,_ze,_),b(m,yo,_),M($y,yo,null),e(yo,clo),e(yo,ky),e(ky,mlo),e(ky,vB),e(vB,flo),e(ky,glo),e(yo,hlo),e(yo,Sy),e(Sy,ulo),e(Sy,Sle),e(Sle,plo),e(Sy,_lo),e(yo,blo),e(yo,xr),M(Ry,xr,null),e(xr,vlo),e(xr,Rle),e(Rle,Flo),e(xr,Tlo),e(xr,Pa),e(Pa,Mlo),e(Pa,Ple),e(Ple,Elo),e(Pa,Clo),e(Pa,Ble),e(Ble,wlo),e(Pa,Alo),e(Pa,Ile),e(Ile,Llo),e(Pa,ylo),e(xr,xlo),e(xr,k),e(k,Dn),e(Dn,Nle),e(Nle,$lo),e(Dn,klo),e(Dn,FB),e(FB,Slo),e(Dn,Rlo),e(Dn,TB),e(TB,Plo),e(Dn,Blo),e(k,Ilo),e(k,Gn),e(Gn,qle),e(qle,Nlo),e(Gn,qlo),e(Gn,MB),e(MB,jlo),e(Gn,Dlo),e(Gn,EB),e(EB,Glo),e(Gn,Olo),e(k,Vlo),e(k,On),e(On,jle),e(jle,Xlo),e(On,zlo),e(On,CB),e(CB,Wlo),e(On,Qlo),e(On,wB),e(wB,Hlo),e(On,Ulo),e(k,Jlo),e(k,ah),e(ah,Dle),e(Dle,Ylo),e(ah,Klo),e(ah,AB),e(AB,Zlo),e(ah,eio),e(k,oio),e(k,Vn),e(Vn,Gle),e(Gle,rio),e(Vn,tio),e(Vn,LB),e(LB,aio),e(Vn,nio),e(Vn,yB),e(yB,sio),e(Vn,lio),e(k,iio),e(k,nh),e(nh,Ole),e(Ole,dio),e(nh,cio),e(nh,xB),e(xB,mio),e(nh,fio),e(k,gio),e(k,sh),e(sh,Vle),e(Vle,hio),e(sh,uio),e(sh,$B),e($B,pio),e(sh,_io),e(k,bio),e(k,lh),e(lh,Xle),e(Xle,vio),e(lh,Fio),e(lh,kB),e(kB,Tio),e(lh,Mio),e(k,Eio),e(k,Xn),e(Xn,zle),e(zle,Cio),e(Xn,wio),e(Xn,SB),e(SB,Aio),e(Xn,Lio),e(Xn,RB),e(RB,yio),e(Xn,xio),e(k,$io),e(k,zn),e(zn,Wle),e(Wle,kio),e(zn,Sio),e(zn,PB),e(PB,Rio),e(zn,Pio),e(zn,BB),e(BB,Bio),e(zn,Iio),e(k,Nio),e(k,Wn),e(Wn,Qle),e(Qle,qio),e(Wn,jio),e(Wn,IB),e(IB,Dio),e(Wn,Gio),e(Wn,NB),e(NB,Oio),e(Wn,Vio),e(k,Xio),e(k,ih),e(ih,Hle),e(Hle,zio),e(ih,Wio),e(ih,qB),e(qB,Qio),e(ih,Hio),e(k,Uio),e(k,dh),e(dh,Ule),e(Ule,Jio),e(dh,Yio),e(dh,jB),e(jB,Kio),e(dh,Zio),e(k,edo),e(k,ch),e(ch,Jle),e(Jle,odo),e(ch,rdo),e(ch,DB),e(DB,tdo),e(ch,ado),e(k,ndo),e(k,Qn),e(Qn,Yle),e(Yle,sdo),e(Qn,ldo),e(Qn,GB),e(GB,ido),e(Qn,ddo),e(Qn,OB),e(OB,cdo),e(Qn,mdo),e(k,fdo),e(k,mh),e(mh,Kle),e(Kle,gdo),e(mh,hdo),e(mh,VB),e(VB,udo),e(mh,pdo),e(k,_do),e(k,Hn),e(Hn,Zle),e(Zle,bdo),e(Hn,vdo),e(Hn,XB),e(XB,Fdo),e(Hn,Tdo),e(Hn,zB),e(zB,Mdo),e(Hn,Edo),e(k,Cdo),e(k,Un),e(Un,eie),e(eie,wdo),e(Un,Ado),e(Un,WB),e(WB,Ldo),e(Un,ydo),e(Un,QB),e(QB,xdo),e(Un,$do),e(k,kdo),e(k,Jn),e(Jn,oie),e(oie,Sdo),e(Jn,Rdo),e(Jn,HB),e(HB,Pdo),e(Jn,Bdo),e(Jn,UB),e(UB,Ido),e(Jn,Ndo),e(k,qdo),e(k,Yn),e(Yn,rie),e(rie,jdo),e(Yn,Ddo),e(Yn,JB),e(JB,Gdo),e(Yn,Odo),e(Yn,YB),e(YB,Vdo),e(Yn,Xdo),e(k,zdo),e(k,fh),e(fh,tie),e(tie,Wdo),e(fh,Qdo),e(fh,KB),e(KB,Hdo),e(fh,Udo),e(k,Jdo),e(k,Kn),e(Kn,aie),e(aie,Ydo),e(Kn,Kdo),e(Kn,ZB),e(ZB,Zdo),e(Kn,eco),e(Kn,eI),e(eI,oco),e(Kn,rco),e(k,tco),e(k,Zn),e(Zn,nie),e(nie,aco),e(Zn,nco),e(Zn,oI),e(oI,sco),e(Zn,lco),e(Zn,rI),e(rI,ico),e(Zn,dco),e(k,cco),e(k,es),e(es,sie),e(sie,mco),e(es,fco),e(es,tI),e(tI,gco),e(es,hco),e(es,aI),e(aI,uco),e(es,pco),e(k,_co),e(k,os),e(os,lie),e(lie,bco),e(os,vco),e(os,nI),e(nI,Fco),e(os,Tco),e(os,sI),e(sI,Mco),e(os,Eco),e(k,Cco),e(k,rs),e(rs,iie),e(iie,wco),e(rs,Aco),e(rs,lI),e(lI,Lco),e(rs,yco),e(rs,iI),e(iI,xco),e(rs,$co),e(k,kco),e(k,ts),e(ts,die),e(die,Sco),e(ts,Rco),e(ts,dI),e(dI,Pco),e(ts,Bco),e(ts,cI),e(cI,Ico),e(ts,Nco),e(k,qco),e(k,gh),e(gh,cie),e(cie,jco),e(gh,Dco),e(gh,mI),e(mI,Gco),e(gh,Oco),e(k,Vco),e(k,as),e(as,mie),e(mie,Xco),e(as,zco),e(as,fI),e(fI,Wco),e(as,Qco),e(as,gI),e(gI,Hco),e(as,Uco),e(k,Jco),e(k,hh),e(hh,fie),e(fie,Yco),e(hh,Kco),e(hh,hI),e(hI,Zco),e(hh,emo),e(k,omo),e(k,ns),e(ns,gie),e(gie,rmo),e(ns,tmo),e(ns,uI),e(uI,amo),e(ns,nmo),e(ns,pI),e(pI,smo),e(ns,lmo),e(k,imo),e(k,ss),e(ss,hie),e(hie,dmo),e(ss,cmo),e(ss,_I),e(_I,mmo),e(ss,fmo),e(ss,bI),e(bI,gmo),e(ss,hmo),e(k,umo),e(k,ls),e(ls,uie),e(uie,pmo),e(ls,_mo),e(ls,vI),e(vI,bmo),e(ls,vmo),e(ls,FI),e(FI,Fmo),e(ls,Tmo),e(k,Mmo),e(k,uh),e(uh,pie),e(pie,Emo),e(uh,Cmo),e(uh,TI),e(TI,wmo),e(uh,Amo),e(k,Lmo),e(k,is),e(is,_ie),e(_ie,ymo),e(is,xmo),e(is,MI),e(MI,$mo),e(is,kmo),e(is,EI),e(EI,Smo),e(is,Rmo),e(k,Pmo),e(k,ds),e(ds,bie),e(bie,Bmo),e(ds,Imo),e(ds,CI),e(CI,Nmo),e(ds,qmo),e(ds,wI),e(wI,jmo),e(ds,Dmo),e(k,Gmo),e(k,cs),e(cs,vie),e(vie,Omo),e(cs,Vmo),e(cs,AI),e(AI,Xmo),e(cs,zmo),e(cs,LI),e(LI,Wmo),e(cs,Qmo),e(k,Hmo),e(k,ph),e(ph,Fie),e(Fie,Umo),e(ph,Jmo),e(ph,yI),e(yI,Ymo),e(ph,Kmo),e(k,Zmo),e(k,ms),e(ms,Tie),e(Tie,efo),e(ms,ofo),e(ms,xI),e(xI,rfo),e(ms,tfo),e(ms,$I),e($I,afo),e(ms,nfo),e(k,sfo),e(k,fs),e(fs,Mie),e(Mie,lfo),e(fs,ifo),e(fs,kI),e(kI,dfo),e(fs,cfo),e(fs,SI),e(SI,mfo),e(fs,ffo),e(k,gfo),e(k,gs),e(gs,Eie),e(Eie,hfo),e(gs,ufo),e(gs,RI),e(RI,pfo),e(gs,_fo),e(gs,PI),e(PI,bfo),e(gs,vfo),e(k,Ffo),e(k,hs),e(hs,Cie),e(Cie,Tfo),e(hs,Mfo),e(hs,BI),e(BI,Efo),e(hs,Cfo),e(hs,II),e(II,wfo),e(hs,Afo),e(k,Lfo),e(k,us),e(us,wie),e(wie,yfo),e(us,xfo),e(us,NI),e(NI,$fo),e(us,kfo),e(us,qI),e(qI,Sfo),e(us,Rfo),e(k,Pfo),e(k,ps),e(ps,Aie),e(Aie,Bfo),e(ps,Ifo),e(ps,jI),e(jI,Nfo),e(ps,qfo),e(ps,DI),e(DI,jfo),e(ps,Dfo),e(k,Gfo),e(k,_s),e(_s,Lie),e(Lie,Ofo),e(_s,Vfo),e(_s,GI),e(GI,Xfo),e(_s,zfo),e(_s,OI),e(OI,Wfo),e(_s,Qfo),e(k,Hfo),e(k,bs),e(bs,yie),e(yie,Ufo),e(bs,Jfo),e(bs,VI),e(VI,Yfo),e(bs,Kfo),e(bs,XI),e(XI,Zfo),e(bs,ego),e(k,ogo),e(k,_h),e(_h,xie),e(xie,rgo),e(_h,tgo),e(_h,zI),e(zI,ago),e(_h,ngo),e(k,sgo),e(k,vs),e(vs,$ie),e($ie,lgo),e(vs,igo),e(vs,WI),e(WI,dgo),e(vs,cgo),e(vs,QI),e(QI,mgo),e(vs,fgo),e(k,ggo),e(k,bh),e(bh,kie),e(kie,hgo),e(bh,ugo),e(bh,HI),e(HI,pgo),e(bh,_go),e(k,bgo),e(k,vh),e(vh,Sie),e(Sie,vgo),e(vh,Fgo),e(vh,UI),e(UI,Tgo),e(vh,Mgo),e(k,Ego),e(k,Fs),e(Fs,Rie),e(Rie,Cgo),e(Fs,wgo),e(Fs,JI),e(JI,Ago),e(Fs,Lgo),e(Fs,YI),e(YI,ygo),e(Fs,xgo),e(k,$go),e(k,Ts),e(Ts,Pie),e(Pie,kgo),e(Ts,Sgo),e(Ts,KI),e(KI,Rgo),e(Ts,Pgo),e(Ts,ZI),e(ZI,Bgo),e(Ts,Igo),e(k,Ngo),e(k,Ms),e(Ms,Bie),e(Bie,qgo),e(Ms,jgo),e(Ms,eN),e(eN,Dgo),e(Ms,Ggo),e(Ms,oN),e(oN,Ogo),e(Ms,Vgo),e(k,Xgo),e(k,Fh),e(Fh,Iie),e(Iie,zgo),e(Fh,Wgo),e(Fh,rN),e(rN,Qgo),e(Fh,Hgo),e(k,Ugo),e(k,Es),e(Es,Nie),e(Nie,Jgo),e(Es,Ygo),e(Es,tN),e(tN,Kgo),e(Es,Zgo),e(Es,aN),e(aN,eho),e(Es,oho),e(k,rho),e(k,Cs),e(Cs,qie),e(qie,tho),e(Cs,aho),e(Cs,nN),e(nN,nho),e(Cs,sho),e(Cs,sN),e(sN,lho),e(Cs,iho),e(k,dho),e(k,ws),e(ws,jie),e(jie,cho),e(ws,mho),e(ws,lN),e(lN,fho),e(ws,gho),e(ws,iN),e(iN,hho),e(ws,uho),e(k,pho),e(k,As),e(As,Die),e(Die,_ho),e(As,bho),e(As,dN),e(dN,vho),e(As,Fho),e(As,cN),e(cN,Tho),e(As,Mho),e(k,Eho),e(k,Ls),e(Ls,Gie),e(Gie,Cho),e(Ls,who),e(Ls,mN),e(mN,Aho),e(Ls,Lho),e(Ls,fN),e(fN,yho),e(Ls,xho),e(k,$ho),e(k,ys),e(ys,Oie),e(Oie,kho),e(ys,Sho),e(ys,gN),e(gN,Rho),e(ys,Pho),e(ys,hN),e(hN,Bho),e(ys,Iho),e(k,Nho),e(k,xs),e(xs,Vie),e(Vie,qho),e(xs,jho),e(xs,uN),e(uN,Dho),e(xs,Gho),e(xs,pN),e(pN,Oho),e(xs,Vho),e(k,Xho),e(k,$s),e($s,Xie),e(Xie,zho),e($s,Who),e($s,_N),e(_N,Qho),e($s,Hho),e($s,bN),e(bN,Uho),e($s,Jho),e(k,Yho),e(k,Th),e(Th,zie),e(zie,Kho),e(Th,Zho),e(Th,vN),e(vN,euo),e(Th,ouo),e(k,ruo),e(k,ks),e(ks,Wie),e(Wie,tuo),e(ks,auo),e(ks,FN),e(FN,nuo),e(ks,suo),e(ks,TN),e(TN,luo),e(ks,iuo),e(k,duo),e(k,Ss),e(Ss,Qie),e(Qie,cuo),e(Ss,muo),e(Ss,MN),e(MN,fuo),e(Ss,guo),e(Ss,EN),e(EN,huo),e(Ss,uuo),e(k,puo),e(k,Mh),e(Mh,Hie),e(Hie,_uo),e(Mh,buo),e(Mh,CN),e(CN,vuo),e(Mh,Fuo),e(k,Tuo),e(k,Eh),e(Eh,Uie),e(Uie,Muo),e(Eh,Euo),e(Eh,wN),e(wN,Cuo),e(Eh,wuo),e(k,Auo),e(k,Ch),e(Ch,Jie),e(Jie,Luo),e(Ch,yuo),e(Ch,AN),e(AN,xuo),e(Ch,$uo),e(k,kuo),e(k,wh),e(wh,Yie),e(Yie,Suo),e(wh,Ruo),e(wh,LN),e(LN,Puo),e(wh,Buo),e(k,Iuo),e(k,Rs),e(Rs,Kie),e(Kie,Nuo),e(Rs,quo),e(Rs,yN),e(yN,juo),e(Rs,Duo),e(Rs,xN),e(xN,Guo),e(Rs,Ouo),e(k,Vuo),e(k,Ah),e(Ah,Zie),e(Zie,Xuo),e(Ah,zuo),e(Ah,$N),e($N,Wuo),e(Ah,Quo),e(k,Huo),e(k,Ps),e(Ps,ede),e(ede,Uuo),e(Ps,Juo),e(Ps,kN),e(kN,Yuo),e(Ps,Kuo),e(Ps,SN),e(SN,Zuo),e(Ps,epo),e(k,opo),e(k,Bs),e(Bs,ode),e(ode,rpo),e(Bs,tpo),e(Bs,RN),e(RN,apo),e(Bs,npo),e(Bs,PN),e(PN,spo),e(Bs,lpo),e(k,ipo),e(k,Is),e(Is,rde),e(rde,dpo),e(Is,cpo),e(Is,BN),e(BN,mpo),e(Is,fpo),e(Is,IN),e(IN,gpo),e(Is,hpo),e(k,upo),e(k,Ns),e(Ns,tde),e(tde,ppo),e(Ns,_po),e(Ns,NN),e(NN,bpo),e(Ns,vpo),e(Ns,qN),e(qN,Fpo),e(Ns,Tpo),e(k,Mpo),e(k,qs),e(qs,ade),e(ade,Epo),e(qs,Cpo),e(qs,jN),e(jN,wpo),e(qs,Apo),e(qs,DN),e(DN,Lpo),e(qs,ypo),e(k,xpo),e(k,js),e(js,nde),e(nde,$po),e(js,kpo),e(js,GN),e(GN,Spo),e(js,Rpo),e(js,ON),e(ON,Ppo),e(js,Bpo),e(k,Ipo),e(k,Lh),e(Lh,sde),e(sde,Npo),e(Lh,qpo),e(Lh,VN),e(VN,jpo),e(Lh,Dpo),e(k,Gpo),e(k,yh),e(yh,lde),e(lde,Opo),e(yh,Vpo),e(yh,XN),e(XN,Xpo),e(yh,zpo),e(k,Wpo),e(k,Ds),e(Ds,ide),e(ide,Qpo),e(Ds,Hpo),e(Ds,zN),e(zN,Upo),e(Ds,Jpo),e(Ds,WN),e(WN,Ypo),e(Ds,Kpo),e(k,Zpo),e(k,Gs),e(Gs,dde),e(dde,e_o),e(Gs,o_o),e(Gs,QN),e(QN,r_o),e(Gs,t_o),e(Gs,HN),e(HN,a_o),e(Gs,n_o),e(k,s_o),e(k,Os),e(Os,cde),e(cde,l_o),e(Os,i_o),e(Os,UN),e(UN,d_o),e(Os,c_o),e(Os,JN),e(JN,m_o),e(Os,f_o),e(k,g_o),e(k,xh),e(xh,mde),e(mde,h_o),e(xh,u_o),e(xh,YN),e(YN,p_o),e(xh,__o),e(k,b_o),e(k,$h),e($h,fde),e(fde,v_o),e($h,F_o),e($h,KN),e(KN,T_o),e($h,M_o),e(k,E_o),e(k,kh),e(kh,gde),e(gde,C_o),e(kh,w_o),e(kh,ZN),e(ZN,A_o),e(kh,L_o),e(k,y_o),e(k,Vs),e(Vs,hde),e(hde,x_o),e(Vs,$_o),e(Vs,eq),e(eq,k_o),e(Vs,S_o),e(Vs,oq),e(oq,R_o),e(Vs,P_o),e(k,B_o),e(k,Xs),e(Xs,ude),e(ude,I_o),e(Xs,N_o),e(Xs,rq),e(rq,q_o),e(Xs,j_o),e(Xs,tq),e(tq,D_o),e(Xs,G_o),e(k,O_o),e(k,Sh),e(Sh,pde),e(pde,V_o),e(Sh,X_o),e(Sh,aq),e(aq,z_o),e(Sh,W_o),e(k,Q_o),e(k,Rh),e(Rh,_de),e(_de,H_o),e(Rh,U_o),e(Rh,nq),e(nq,J_o),e(Rh,Y_o),e(k,K_o),e(k,Ph),e(Ph,bde),e(bde,Z_o),e(Ph,e2o),e(Ph,sq),e(sq,o2o),e(Ph,r2o),e(k,t2o),e(k,zs),e(zs,vde),e(vde,a2o),e(zs,n2o),e(zs,lq),e(lq,s2o),e(zs,l2o),e(zs,iq),e(iq,i2o),e(zs,d2o),e(k,c2o),e(k,Bh),e(Bh,Fde),e(Fde,m2o),e(Bh,f2o),e(Bh,dq),e(dq,g2o),e(Bh,h2o),e(k,u2o),e(k,Ih),e(Ih,Tde),e(Tde,p2o),e(Ih,_2o),e(Ih,cq),e(cq,b2o),e(Ih,v2o),e(k,F2o),e(k,Ws),e(Ws,Mde),e(Mde,T2o),e(Ws,M2o),e(Ws,mq),e(mq,E2o),e(Ws,C2o),e(Ws,fq),e(fq,w2o),e(Ws,A2o),e(k,L2o),e(k,Qs),e(Qs,Ede),e(Ede,y2o),e(Qs,x2o),e(Qs,gq),e(gq,$2o),e(Qs,k2o),e(Qs,hq),e(hq,S2o),e(Qs,R2o),e(k,P2o),e(k,Hs),e(Hs,Cde),e(Cde,B2o),e(Hs,I2o),e(Hs,uq),e(uq,N2o),e(Hs,q2o),e(Hs,pq),e(pq,j2o),e(Hs,D2o),e(k,G2o),e(k,Us),e(Us,wde),e(wde,O2o),e(Us,V2o),e(Us,_q),e(_q,X2o),e(Us,z2o),e(Us,bq),e(bq,W2o),e(Us,Q2o),e(xr,H2o),M(Nh,xr,null),e(yo,U2o),e(yo,qh),M(Py,qh,null),e(qh,J2o),e(qh,Ade),e(Ade,Y2o),b(m,bze,_),b(m,Gi,_),e(Gi,jh),e(jh,Lde),M(By,Lde,null),e(Gi,K2o),e(Gi,yde),e(yde,Z2o),b(m,vze,_),b(m,xo,_),M(Iy,xo,null),e(xo,ebo),e(xo,Ny),e(Ny,obo),e(Ny,vq),e(vq,rbo),e(Ny,tbo),e(xo,abo),e(xo,qy),e(qy,nbo),e(qy,xde),e(xde,sbo),e(qy,lbo),e(xo,ibo),e(xo,Ue),M(jy,Ue,null),e(Ue,dbo),e(Ue,$de),e($de,cbo),e(Ue,mbo),e(Ue,Ba),e(Ba,fbo),e(Ba,kde),e(kde,gbo),e(Ba,hbo),e(Ba,Sde),e(Sde,ubo),e(Ba,pbo),e(Ba,Rde),e(Rde,_bo),e(Ba,bbo),e(Ue,vbo),e(Ue,U),e(U,Dh),e(Dh,Pde),e(Pde,Fbo),e(Dh,Tbo),e(Dh,Fq),e(Fq,Mbo),e(Dh,Ebo),e(U,Cbo),e(U,Gh),e(Gh,Bde),e(Bde,wbo),e(Gh,Abo),e(Gh,Tq),e(Tq,Lbo),e(Gh,ybo),e(U,xbo),e(U,Oh),e(Oh,Ide),e(Ide,$bo),e(Oh,kbo),e(Oh,Mq),e(Mq,Sbo),e(Oh,Rbo),e(U,Pbo),e(U,Vh),e(Vh,Nde),e(Nde,Bbo),e(Vh,Ibo),e(Vh,Eq),e(Eq,Nbo),e(Vh,qbo),e(U,jbo),e(U,Xh),e(Xh,qde),e(qde,Dbo),e(Xh,Gbo),e(Xh,Cq),e(Cq,Obo),e(Xh,Vbo),e(U,Xbo),e(U,zh),e(zh,jde),e(jde,zbo),e(zh,Wbo),e(zh,wq),e(wq,Qbo),e(zh,Hbo),e(U,Ubo),e(U,Wh),e(Wh,Dde),e(Dde,Jbo),e(Wh,Ybo),e(Wh,Aq),e(Aq,Kbo),e(Wh,Zbo),e(U,evo),e(U,Qh),e(Qh,Gde),e(Gde,ovo),e(Qh,rvo),e(Qh,Lq),e(Lq,tvo),e(Qh,avo),e(U,nvo),e(U,Hh),e(Hh,Ode),e(Ode,svo),e(Hh,lvo),e(Hh,yq),e(yq,ivo),e(Hh,dvo),e(U,cvo),e(U,Uh),e(Uh,Vde),e(Vde,mvo),e(Uh,fvo),e(Uh,xq),e(xq,gvo),e(Uh,hvo),e(U,uvo),e(U,Jh),e(Jh,Xde),e(Xde,pvo),e(Jh,_vo),e(Jh,$q),e($q,bvo),e(Jh,vvo),e(U,Fvo),e(U,Yh),e(Yh,zde),e(zde,Tvo),e(Yh,Mvo),e(Yh,kq),e(kq,Evo),e(Yh,Cvo),e(U,wvo),e(U,Kh),e(Kh,Wde),e(Wde,Avo),e(Kh,Lvo),e(Kh,Sq),e(Sq,yvo),e(Kh,xvo),e(U,$vo),e(U,Zh),e(Zh,Qde),e(Qde,kvo),e(Zh,Svo),e(Zh,Rq),e(Rq,Rvo),e(Zh,Pvo),e(U,Bvo),e(U,eu),e(eu,Hde),e(Hde,Ivo),e(eu,Nvo),e(eu,Pq),e(Pq,qvo),e(eu,jvo),e(U,Dvo),e(U,ou),e(ou,Ude),e(Ude,Gvo),e(ou,Ovo),e(ou,Bq),e(Bq,Vvo),e(ou,Xvo),e(U,zvo),e(U,ru),e(ru,Jde),e(Jde,Wvo),e(ru,Qvo),e(ru,Iq),e(Iq,Hvo),e(ru,Uvo),e(U,Jvo),e(U,tu),e(tu,Yde),e(Yde,Yvo),e(tu,Kvo),e(tu,Nq),e(Nq,Zvo),e(tu,e1o),e(U,o1o),e(U,au),e(au,Kde),e(Kde,r1o),e(au,t1o),e(au,qq),e(qq,a1o),e(au,n1o),e(U,s1o),e(U,nu),e(nu,Zde),e(Zde,l1o),e(nu,i1o),e(nu,jq),e(jq,d1o),e(nu,c1o),e(U,m1o),e(U,su),e(su,ece),e(ece,f1o),e(su,g1o),e(su,Dq),e(Dq,h1o),e(su,u1o),e(U,p1o),e(U,lu),e(lu,oce),e(oce,_1o),e(lu,b1o),e(lu,Gq),e(Gq,v1o),e(lu,F1o),e(U,T1o),e(U,iu),e(iu,rce),e(rce,M1o),e(iu,E1o),e(iu,Oq),e(Oq,C1o),e(iu,w1o),e(U,A1o),e(U,du),e(du,tce),e(tce,L1o),e(du,y1o),e(du,Vq),e(Vq,x1o),e(du,$1o),e(U,k1o),e(U,cu),e(cu,ace),e(ace,S1o),e(cu,R1o),e(cu,Xq),e(Xq,P1o),e(cu,B1o),e(U,I1o),e(U,mu),e(mu,nce),e(nce,N1o),e(mu,q1o),e(mu,zq),e(zq,j1o),e(mu,D1o),e(U,G1o),e(U,fu),e(fu,sce),e(sce,O1o),e(fu,V1o),e(fu,Wq),e(Wq,X1o),e(fu,z1o),e(U,W1o),e(U,gu),e(gu,lce),e(lce,Q1o),e(gu,H1o),e(gu,Qq),e(Qq,U1o),e(gu,J1o),e(U,Y1o),e(U,hu),e(hu,ice),e(ice,K1o),e(hu,Z1o),e(hu,Hq),e(Hq,eFo),e(hu,oFo),e(U,rFo),e(U,uu),e(uu,dce),e(dce,tFo),e(uu,aFo),e(uu,Uq),e(Uq,nFo),e(uu,sFo),e(U,lFo),e(U,pu),e(pu,cce),e(cce,iFo),e(pu,dFo),e(pu,Jq),e(Jq,cFo),e(pu,mFo),e(U,fFo),e(U,_u),e(_u,mce),e(mce,gFo),e(_u,hFo),e(_u,Yq),e(Yq,uFo),e(_u,pFo),e(U,_Fo),e(U,bu),e(bu,fce),e(fce,bFo),e(bu,vFo),e(bu,Kq),e(Kq,FFo),e(bu,TFo),e(U,MFo),e(U,vu),e(vu,gce),e(gce,EFo),e(vu,CFo),e(vu,Zq),e(Zq,wFo),e(vu,AFo),e(U,LFo),e(U,Fu),e(Fu,hce),e(hce,yFo),e(Fu,xFo),e(Fu,ej),e(ej,$Fo),e(Fu,kFo),e(U,SFo),e(U,Tu),e(Tu,uce),e(uce,RFo),e(Tu,PFo),e(Tu,oj),e(oj,BFo),e(Tu,IFo),e(Ue,NFo),M(Mu,Ue,null),e(Ue,qFo),M(Eu,Ue,null),e(xo,jFo),e(xo,Cu),M(Dy,Cu,null),e(Cu,DFo),e(Cu,pce),e(pce,GFo),b(m,Fze,_),b(m,Oi,_),e(Oi,wu),e(wu,_ce),M(Gy,_ce,null),e(Oi,OFo),e(Oi,bce),e(bce,VFo),b(m,Tze,_),b(m,$o,_),M(Oy,$o,null),e($o,XFo),e($o,Vy),e(Vy,zFo),e(Vy,rj),e(rj,WFo),e(Vy,QFo),e($o,HFo),e($o,Xy),e(Xy,UFo),e(Xy,vce),e(vce,JFo),e(Xy,YFo),e($o,KFo),e($o,Je),M(zy,Je,null),e(Je,ZFo),e(Je,Fce),e(Fce,eTo),e(Je,oTo),e(Je,Vi),e(Vi,rTo),e(Vi,Tce),e(Tce,tTo),e(Vi,aTo),e(Vi,Mce),e(Mce,nTo),e(Vi,sTo),e(Je,lTo),e(Je,me),e(me,Au),e(Au,Ece),e(Ece,iTo),e(Au,dTo),e(Au,tj),e(tj,cTo),e(Au,mTo),e(me,fTo),e(me,Lu),e(Lu,Cce),e(Cce,gTo),e(Lu,hTo),e(Lu,aj),e(aj,uTo),e(Lu,pTo),e(me,_To),e(me,yu),e(yu,wce),e(wce,bTo),e(yu,vTo),e(yu,nj),e(nj,FTo),e(yu,TTo),e(me,MTo),e(me,xu),e(xu,Ace),e(Ace,ETo),e(xu,CTo),e(xu,sj),e(sj,wTo),e(xu,ATo),e(me,LTo),e(me,$u),e($u,Lce),e(Lce,yTo),e($u,xTo),e($u,lj),e(lj,$To),e($u,kTo),e(me,STo),e(me,ku),e(ku,yce),e(yce,RTo),e(ku,PTo),e(ku,ij),e(ij,BTo),e(ku,ITo),e(me,NTo),e(me,Su),e(Su,xce),e(xce,qTo),e(Su,jTo),e(Su,dj),e(dj,DTo),e(Su,GTo),e(me,OTo),e(me,Ru),e(Ru,$ce),e($ce,VTo),e(Ru,XTo),e(Ru,cj),e(cj,zTo),e(Ru,WTo),e(me,QTo),e(me,Pu),e(Pu,kce),e(kce,HTo),e(Pu,UTo),e(Pu,mj),e(mj,JTo),e(Pu,YTo),e(me,KTo),e(me,Bu),e(Bu,Sce),e(Sce,ZTo),e(Bu,eMo),e(Bu,fj),e(fj,oMo),e(Bu,rMo),e(me,tMo),e(me,Iu),e(Iu,Rce),e(Rce,aMo),e(Iu,nMo),e(Iu,gj),e(gj,sMo),e(Iu,lMo),e(me,iMo),e(me,Nu),e(Nu,Pce),e(Pce,dMo),e(Nu,cMo),e(Nu,hj),e(hj,mMo),e(Nu,fMo),e(me,gMo),e(me,qu),e(qu,Bce),e(Bce,hMo),e(qu,uMo),e(qu,uj),e(uj,pMo),e(qu,_Mo),e(me,bMo),e(me,ju),e(ju,Ice),e(Ice,vMo),e(ju,FMo),e(ju,pj),e(pj,TMo),e(ju,MMo),e(me,EMo),e(me,Du),e(Du,Nce),e(Nce,CMo),e(Du,wMo),e(Du,_j),e(_j,AMo),e(Du,LMo),e(me,yMo),e(me,Gu),e(Gu,qce),e(qce,xMo),e(Gu,$Mo),e(Gu,bj),e(bj,kMo),e(Gu,SMo),e(me,RMo),e(me,Ou),e(Ou,jce),e(jce,PMo),e(Ou,BMo),e(Ou,vj),e(vj,IMo),e(Ou,NMo),e(me,qMo),e(me,Vu),e(Vu,Dce),e(Dce,jMo),e(Vu,DMo),e(Vu,Fj),e(Fj,GMo),e(Vu,OMo),e(me,VMo),e(me,Xu),e(Xu,Gce),e(Gce,XMo),e(Xu,zMo),e(Xu,Tj),e(Tj,WMo),e(Xu,QMo),e(Je,HMo),M(zu,Je,null),e(Je,UMo),M(Wu,Je,null),e($o,JMo),e($o,Qu),M(Wy,Qu,null),e(Qu,YMo),e(Qu,Oce),e(Oce,KMo),b(m,Mze,_),b(m,Xi,_),e(Xi,Hu),e(Hu,Vce),M(Qy,Vce,null),e(Xi,ZMo),e(Xi,Xce),e(Xce,e4o),b(m,Eze,_),b(m,ko,_),M(Hy,ko,null),e(ko,o4o),e(ko,zi),e(zi,r4o),e(zi,Mj),e(Mj,t4o),e(zi,a4o),e(zi,Ej),e(Ej,n4o),e(zi,s4o),e(ko,l4o),e(ko,Uy),e(Uy,i4o),e(Uy,zce),e(zce,d4o),e(Uy,c4o),e(ko,m4o),e(ko,it),M(Jy,it,null),e(it,f4o),e(it,Wce),e(Wce,g4o),e(it,h4o),e(it,Wi),e(Wi,u4o),e(Wi,Qce),e(Qce,p4o),e(Wi,_4o),e(Wi,Cj),e(Cj,b4o),e(Wi,v4o),e(it,F4o),M(Uu,it,null),e(ko,T4o),e(ko,Ye),M(Yy,Ye,null),e(Ye,M4o),e(Ye,Hce),e(Hce,E4o),e(Ye,C4o),e(Ye,Ia),e(Ia,w4o),e(Ia,Uce),e(Uce,A4o),e(Ia,L4o),e(Ia,Jce),e(Jce,y4o),e(Ia,x4o),e(Ia,Yce),e(Yce,$4o),e(Ia,k4o),e(Ye,S4o),e(Ye,y),e(y,Ju),e(Ju,Kce),e(Kce,R4o),e(Ju,P4o),e(Ju,wj),e(wj,B4o),e(Ju,I4o),e(y,N4o),e(y,Yu),e(Yu,Zce),e(Zce,q4o),e(Yu,j4o),e(Yu,Aj),e(Aj,D4o),e(Yu,G4o),e(y,O4o),e(y,Ku),e(Ku,eme),e(eme,V4o),e(Ku,X4o),e(Ku,Lj),e(Lj,z4o),e(Ku,W4o),e(y,Q4o),e(y,Zu),e(Zu,ome),e(ome,H4o),e(Zu,U4o),e(Zu,yj),e(yj,J4o),e(Zu,Y4o),e(y,K4o),e(y,ep),e(ep,rme),e(rme,Z4o),e(ep,eEo),e(ep,xj),e(xj,oEo),e(ep,rEo),e(y,tEo),e(y,op),e(op,tme),e(tme,aEo),e(op,nEo),e(op,$j),e($j,sEo),e(op,lEo),e(y,iEo),e(y,rp),e(rp,ame),e(ame,dEo),e(rp,cEo),e(rp,kj),e(kj,mEo),e(rp,fEo),e(y,gEo),e(y,tp),e(tp,nme),e(nme,hEo),e(tp,uEo),e(tp,Sj),e(Sj,pEo),e(tp,_Eo),e(y,bEo),e(y,ap),e(ap,sme),e(sme,vEo),e(ap,FEo),e(ap,Rj),e(Rj,TEo),e(ap,MEo),e(y,EEo),e(y,np),e(np,lme),e(lme,CEo),e(np,wEo),e(np,Pj),e(Pj,AEo),e(np,LEo),e(y,yEo),e(y,sp),e(sp,ime),e(ime,xEo),e(sp,$Eo),e(sp,Bj),e(Bj,kEo),e(sp,SEo),e(y,REo),e(y,lp),e(lp,dme),e(dme,PEo),e(lp,BEo),e(lp,Ij),e(Ij,IEo),e(lp,NEo),e(y,qEo),e(y,ip),e(ip,cme),e(cme,jEo),e(ip,DEo),e(ip,Nj),e(Nj,GEo),e(ip,OEo),e(y,VEo),e(y,dp),e(dp,mme),e(mme,XEo),e(dp,zEo),e(dp,qj),e(qj,WEo),e(dp,QEo),e(y,HEo),e(y,cp),e(cp,fme),e(fme,UEo),e(cp,JEo),e(cp,jj),e(jj,YEo),e(cp,KEo),e(y,ZEo),e(y,mp),e(mp,gme),e(gme,eCo),e(mp,oCo),e(mp,Dj),e(Dj,rCo),e(mp,tCo),e(y,aCo),e(y,fp),e(fp,hme),e(hme,nCo),e(fp,sCo),e(fp,Gj),e(Gj,lCo),e(fp,iCo),e(y,dCo),e(y,gp),e(gp,ume),e(ume,cCo),e(gp,mCo),e(gp,Oj),e(Oj,fCo),e(gp,gCo),e(y,hCo),e(y,hp),e(hp,pme),e(pme,uCo),e(hp,pCo),e(hp,Vj),e(Vj,_Co),e(hp,bCo),e(y,vCo),e(y,up),e(up,_me),e(_me,FCo),e(up,TCo),e(up,Xj),e(Xj,MCo),e(up,ECo),e(y,CCo),e(y,pp),e(pp,bme),e(bme,wCo),e(pp,ACo),e(pp,zj),e(zj,LCo),e(pp,yCo),e(y,xCo),e(y,_p),e(_p,vme),e(vme,$Co),e(_p,kCo),e(_p,Wj),e(Wj,SCo),e(_p,RCo),e(y,PCo),e(y,bp),e(bp,Fme),e(Fme,BCo),e(bp,ICo),e(bp,Qj),e(Qj,NCo),e(bp,qCo),e(y,jCo),e(y,vp),e(vp,Tme),e(Tme,DCo),e(vp,GCo),e(vp,Hj),e(Hj,OCo),e(vp,VCo),e(y,XCo),e(y,Fp),e(Fp,Mme),e(Mme,zCo),e(Fp,WCo),e(Fp,Uj),e(Uj,QCo),e(Fp,HCo),e(y,UCo),e(y,Tp),e(Tp,Eme),e(Eme,JCo),e(Tp,YCo),e(Tp,Jj),e(Jj,KCo),e(Tp,ZCo),e(y,e5o),e(y,Mp),e(Mp,Cme),e(Cme,o5o),e(Mp,r5o),e(Mp,Yj),e(Yj,t5o),e(Mp,a5o),e(y,n5o),e(y,Ep),e(Ep,wme),e(wme,s5o),e(Ep,l5o),e(Ep,Kj),e(Kj,i5o),e(Ep,d5o),e(y,c5o),e(y,Cp),e(Cp,Ame),e(Ame,m5o),e(Cp,f5o),e(Cp,Zj),e(Zj,g5o),e(Cp,h5o),e(y,u5o),e(y,wp),e(wp,Lme),e(Lme,p5o),e(wp,_5o),e(wp,eD),e(eD,b5o),e(wp,v5o),e(y,F5o),e(y,Ap),e(Ap,yme),e(yme,T5o),e(Ap,M5o),e(Ap,oD),e(oD,E5o),e(Ap,C5o),e(y,w5o),e(y,Lp),e(Lp,xme),e(xme,A5o),e(Lp,L5o),e(Lp,rD),e(rD,y5o),e(Lp,x5o),e(y,$5o),e(y,yp),e(yp,$me),e($me,k5o),e(yp,S5o),e(yp,tD),e(tD,R5o),e(yp,P5o),e(y,B5o),e(y,xp),e(xp,kme),e(kme,I5o),e(xp,N5o),e(xp,aD),e(aD,q5o),e(xp,j5o),e(y,D5o),e(y,Js),e(Js,Sme),e(Sme,G5o),e(Js,O5o),e(Js,nD),e(nD,V5o),e(Js,X5o),e(Js,sD),e(sD,z5o),e(Js,W5o),e(y,Q5o),e(y,$p),e($p,Rme),e(Rme,H5o),e($p,U5o),e($p,lD),e(lD,J5o),e($p,Y5o),e(y,K5o),e(y,kp),e(kp,Pme),e(Pme,Z5o),e(kp,e3o),e(kp,iD),e(iD,o3o),e(kp,r3o),e(y,t3o),e(y,Sp),e(Sp,Bme),e(Bme,a3o),e(Sp,n3o),e(Sp,dD),e(dD,s3o),e(Sp,l3o),e(y,i3o),e(y,Rp),e(Rp,Ime),e(Ime,d3o),e(Rp,c3o),e(Rp,cD),e(cD,m3o),e(Rp,f3o),e(y,g3o),e(y,Pp),e(Pp,Nme),e(Nme,h3o),e(Pp,u3o),e(Pp,mD),e(mD,p3o),e(Pp,_3o),e(y,b3o),e(y,Bp),e(Bp,qme),e(qme,v3o),e(Bp,F3o),e(Bp,fD),e(fD,T3o),e(Bp,M3o),e(y,E3o),e(y,Ip),e(Ip,jme),e(jme,C3o),e(Ip,w3o),e(Ip,gD),e(gD,A3o),e(Ip,L3o),e(y,y3o),e(y,Np),e(Np,Dme),e(Dme,x3o),e(Np,$3o),e(Np,hD),e(hD,k3o),e(Np,S3o),e(y,R3o),e(y,qp),e(qp,Gme),e(Gme,P3o),e(qp,B3o),e(qp,uD),e(uD,I3o),e(qp,N3o),e(y,q3o),e(y,jp),e(jp,Ome),e(Ome,j3o),e(jp,D3o),e(jp,pD),e(pD,G3o),e(jp,O3o),e(y,V3o),e(y,Dp),e(Dp,Vme),e(Vme,X3o),e(Dp,z3o),e(Dp,_D),e(_D,W3o),e(Dp,Q3o),e(y,H3o),e(y,Gp),e(Gp,Xme),e(Xme,U3o),e(Gp,J3o),e(Gp,bD),e(bD,Y3o),e(Gp,K3o),e(y,Z3o),e(y,Op),e(Op,zme),e(zme,e0o),e(Op,o0o),e(Op,vD),e(vD,r0o),e(Op,t0o),e(y,a0o),e(y,Vp),e(Vp,Wme),e(Wme,n0o),e(Vp,s0o),e(Vp,FD),e(FD,l0o),e(Vp,i0o),e(y,d0o),e(y,Xp),e(Xp,Qme),e(Qme,c0o),e(Xp,m0o),e(Xp,TD),e(TD,f0o),e(Xp,g0o),e(y,h0o),e(y,zp),e(zp,Hme),e(Hme,u0o),e(zp,p0o),e(zp,MD),e(MD,_0o),e(zp,b0o),e(y,v0o),e(y,Wp),e(Wp,Ume),e(Ume,F0o),e(Wp,T0o),e(Wp,ED),e(ED,M0o),e(Wp,E0o),e(y,C0o),e(y,Qp),e(Qp,Jme),e(Jme,w0o),e(Qp,A0o),e(Qp,CD),e(CD,L0o),e(Qp,y0o),e(y,x0o),e(y,Hp),e(Hp,Yme),e(Yme,$0o),e(Hp,k0o),e(Hp,wD),e(wD,S0o),e(Hp,R0o),e(y,P0o),e(y,Up),e(Up,Kme),e(Kme,B0o),e(Up,I0o),e(Up,AD),e(AD,N0o),e(Up,q0o),e(y,j0o),e(y,Jp),e(Jp,Zme),e(Zme,D0o),e(Jp,G0o),e(Jp,LD),e(LD,O0o),e(Jp,V0o),e(y,X0o),e(y,Yp),e(Yp,efe),e(efe,z0o),e(Yp,W0o),e(Yp,yD),e(yD,Q0o),e(Yp,H0o),e(y,U0o),e(y,Kp),e(Kp,ofe),e(ofe,J0o),e(Kp,Y0o),e(Kp,xD),e(xD,K0o),e(Kp,Z0o),e(y,ewo),e(y,Zp),e(Zp,rfe),e(rfe,owo),e(Zp,rwo),e(Zp,$D),e($D,two),e(Zp,awo),e(y,nwo),e(y,e_),e(e_,tfe),e(tfe,swo),e(e_,lwo),e(e_,kD),e(kD,iwo),e(e_,dwo),e(y,cwo),e(y,o_),e(o_,afe),e(afe,mwo),e(o_,fwo),e(o_,SD),e(SD,gwo),e(o_,hwo),e(y,uwo),e(y,r_),e(r_,nfe),e(nfe,pwo),e(r_,_wo),e(r_,RD),e(RD,bwo),e(r_,vwo),e(y,Fwo),e(y,t_),e(t_,sfe),e(sfe,Two),e(t_,Mwo),e(t_,PD),e(PD,Ewo),e(t_,Cwo),e(y,wwo),e(y,a_),e(a_,lfe),e(lfe,Awo),e(a_,Lwo),e(a_,BD),e(BD,ywo),e(a_,xwo),e(y,$wo),e(y,n_),e(n_,ife),e(ife,kwo),e(n_,Swo),e(n_,ID),e(ID,Rwo),e(n_,Pwo),e(y,Bwo),e(y,s_),e(s_,dfe),e(dfe,Iwo),e(s_,Nwo),e(s_,ND),e(ND,qwo),e(s_,jwo),e(y,Dwo),e(y,l_),e(l_,cfe),e(cfe,Gwo),e(l_,Owo),e(l_,qD),e(qD,Vwo),e(l_,Xwo),e(y,zwo),e(y,i_),e(i_,mfe),e(mfe,Wwo),e(i_,Qwo),e(i_,jD),e(jD,Hwo),e(i_,Uwo),e(y,Jwo),e(y,d_),e(d_,ffe),e(ffe,Ywo),e(d_,Kwo),e(d_,DD),e(DD,Zwo),e(d_,eAo),e(y,oAo),e(y,c_),e(c_,gfe),e(gfe,rAo),e(c_,tAo),e(c_,GD),e(GD,aAo),e(c_,nAo),e(y,sAo),e(y,m_),e(m_,hfe),e(hfe,lAo),e(m_,iAo),e(m_,OD),e(OD,dAo),e(m_,cAo),e(y,mAo),e(y,f_),e(f_,ufe),e(ufe,fAo),e(f_,gAo),e(f_,VD),e(VD,hAo),e(f_,uAo),e(y,pAo),e(y,g_),e(g_,pfe),e(pfe,_Ao),e(g_,bAo),e(g_,XD),e(XD,vAo),e(g_,FAo),e(y,TAo),e(y,h_),e(h_,_fe),e(_fe,MAo),e(h_,EAo),e(h_,zD),e(zD,CAo),e(h_,wAo),e(y,AAo),e(y,u_),e(u_,bfe),e(bfe,LAo),e(u_,yAo),e(u_,WD),e(WD,xAo),e(u_,$Ao),e(y,kAo),e(y,p_),e(p_,vfe),e(vfe,SAo),e(p_,RAo),e(p_,QD),e(QD,PAo),e(p_,BAo),e(y,IAo),e(y,__),e(__,Ffe),e(Ffe,NAo),e(__,qAo),e(__,HD),e(HD,jAo),e(__,DAo),e(y,GAo),e(y,b_),e(b_,Tfe),e(Tfe,OAo),e(b_,VAo),e(b_,UD),e(UD,XAo),e(b_,zAo),e(y,WAo),e(y,v_),e(v_,Mfe),e(Mfe,QAo),e(v_,HAo),e(v_,JD),e(JD,UAo),e(v_,JAo),e(y,YAo),e(y,F_),e(F_,Efe),e(Efe,KAo),e(F_,ZAo),e(F_,YD),e(YD,e6o),e(F_,o6o),e(y,r6o),e(y,T_),e(T_,Cfe),e(Cfe,t6o),e(T_,a6o),e(T_,KD),e(KD,n6o),e(T_,s6o),e(y,l6o),e(y,M_),e(M_,wfe),e(wfe,i6o),e(M_,d6o),e(M_,ZD),e(ZD,c6o),e(M_,m6o),e(y,f6o),e(y,E_),e(E_,Afe),e(Afe,g6o),e(E_,h6o),e(E_,eG),e(eG,u6o),e(E_,p6o),e(y,_6o),e(y,C_),e(C_,Lfe),e(Lfe,b6o),e(C_,v6o),e(C_,oG),e(oG,F6o),e(C_,T6o),e(y,M6o),e(y,w_),e(w_,yfe),e(yfe,E6o),e(w_,C6o),e(w_,rG),e(rG,w6o),e(w_,A6o),e(y,L6o),e(y,A_),e(A_,xfe),e(xfe,y6o),e(A_,x6o),e(A_,tG),e(tG,$6o),e(A_,k6o),e(y,S6o),e(y,L_),e(L_,$fe),e($fe,R6o),e(L_,P6o),e(L_,aG),e(aG,B6o),e(L_,I6o),e(y,N6o),e(y,y_),e(y_,kfe),e(kfe,q6o),e(y_,j6o),e(y_,nG),e(nG,D6o),e(y_,G6o),e(y,O6o),e(y,x_),e(x_,Sfe),e(Sfe,V6o),e(x_,X6o),e(x_,sG),e(sG,z6o),e(x_,W6o),e(y,Q6o),e(y,$_),e($_,Rfe),e(Rfe,H6o),e($_,U6o),e($_,lG),e(lG,J6o),e($_,Y6o),e(y,K6o),e(y,k_),e(k_,Pfe),e(Pfe,Z6o),e(k_,e7o),e(k_,iG),e(iG,o7o),e(k_,r7o),e(y,t7o),e(y,S_),e(S_,Bfe),e(Bfe,a7o),e(S_,n7o),e(S_,dG),e(dG,s7o),e(S_,l7o),e(y,i7o),e(y,R_),e(R_,Ife),e(Ife,d7o),e(R_,c7o),e(R_,cG),e(cG,m7o),e(R_,f7o),e(y,g7o),e(y,P_),e(P_,Nfe),e(Nfe,h7o),e(P_,u7o),e(P_,mG),e(mG,p7o),e(P_,_7o),e(y,b7o),e(y,B_),e(B_,qfe),e(qfe,v7o),e(B_,F7o),e(B_,fG),e(fG,T7o),e(B_,M7o),e(y,E7o),e(y,I_),e(I_,jfe),e(jfe,C7o),e(I_,w7o),e(I_,gG),e(gG,A7o),e(I_,L7o),e(y,y7o),e(y,N_),e(N_,Dfe),e(Dfe,x7o),e(N_,$7o),e(N_,hG),e(hG,k7o),e(N_,S7o),e(y,R7o),e(y,q_),e(q_,Gfe),e(Gfe,P7o),e(q_,B7o),e(q_,uG),e(uG,I7o),e(q_,N7o),e(y,q7o),e(y,j_),e(j_,Ofe),e(Ofe,j7o),e(j_,D7o),e(j_,pG),e(pG,G7o),e(j_,O7o),e(y,V7o),e(y,D_),e(D_,Vfe),e(Vfe,X7o),e(D_,z7o),e(D_,_G),e(_G,W7o),e(D_,Q7o),e(y,H7o),e(y,G_),e(G_,Xfe),e(Xfe,U7o),e(G_,J7o),e(G_,bG),e(bG,Y7o),e(G_,K7o),e(y,Z7o),e(y,O_),e(O_,zfe),e(zfe,eLo),e(O_,oLo),e(O_,vG),e(vG,rLo),e(O_,tLo),e(y,aLo),e(y,V_),e(V_,Wfe),e(Wfe,nLo),e(V_,sLo),e(V_,FG),e(FG,lLo),e(V_,iLo),e(y,dLo),e(y,X_),e(X_,Qfe),e(Qfe,cLo),e(X_,mLo),e(X_,TG),e(TG,fLo),e(X_,gLo),e(y,hLo),e(y,z_),e(z_,Hfe),e(Hfe,uLo),e(z_,pLo),e(z_,MG),e(MG,_Lo),e(z_,bLo),e(y,vLo),e(y,W_),e(W_,Ufe),e(Ufe,FLo),e(W_,TLo),e(W_,EG),e(EG,MLo),e(W_,ELo),e(y,CLo),e(y,Q_),e(Q_,Jfe),e(Jfe,wLo),e(Q_,ALo),e(Q_,CG),e(CG,LLo),e(Q_,yLo),e(y,xLo),e(y,H_),e(H_,Yfe),e(Yfe,$Lo),e(H_,kLo),e(H_,wG),e(wG,SLo),e(H_,RLo),e(y,PLo),e(y,U_),e(U_,Kfe),e(Kfe,BLo),e(U_,ILo),e(U_,AG),e(AG,NLo),e(U_,qLo),e(y,jLo),e(y,J_),e(J_,Zfe),e(Zfe,DLo),e(J_,GLo),e(J_,LG),e(LG,OLo),e(J_,VLo),e(y,XLo),e(y,Y_),e(Y_,ege),e(ege,zLo),e(Y_,WLo),e(Y_,yG),e(yG,QLo),e(Y_,HLo),e(y,ULo),e(y,K_),e(K_,oge),e(oge,JLo),e(K_,YLo),e(K_,xG),e(xG,KLo),e(K_,ZLo),e(y,eyo),e(y,Z_),e(Z_,rge),e(rge,oyo),e(Z_,ryo),e(Z_,$G),e($G,tyo),e(Z_,ayo),e(y,nyo),e(y,e2),e(e2,tge),e(tge,syo),e(e2,lyo),e(e2,kG),e(kG,iyo),e(e2,dyo),e(Ye,cyo),e(Ye,o2),e(o2,myo),e(o2,age),e(age,fyo),e(o2,gyo),e(o2,nge),e(nge,hyo),e(Ye,uyo),M(r2,Ye,null),b(m,Cze,_),b(m,Qi,_),e(Qi,t2),e(t2,sge),M(Ky,sge,null),e(Qi,pyo),e(Qi,lge),e(lge,_yo),b(m,wze,_),b(m,So,_),M(Zy,So,null),e(So,byo),e(So,Hi),e(Hi,vyo),e(Hi,SG),e(SG,Fyo),e(Hi,Tyo),e(Hi,RG),e(RG,Myo),e(Hi,Eyo),e(So,Cyo),e(So,e8),e(e8,wyo),e(e8,ige),e(ige,Ayo),e(e8,Lyo),e(So,yyo),e(So,dt),M(o8,dt,null),e(dt,xyo),e(dt,dge),e(dge,$yo),e(dt,kyo),e(dt,Ui),e(Ui,Syo),e(Ui,cge),e(cge,Ryo),e(Ui,Pyo),e(Ui,PG),e(PG,Byo),e(Ui,Iyo),e(dt,Nyo),M(a2,dt,null),e(So,qyo),e(So,Ke),M(r8,Ke,null),e(Ke,jyo),e(Ke,mge),e(mge,Dyo),e(Ke,Gyo),e(Ke,Na),e(Na,Oyo),e(Na,fge),e(fge,Vyo),e(Na,Xyo),e(Na,gge),e(gge,zyo),e(Na,Wyo),e(Na,hge),e(hge,Qyo),e(Na,Hyo),e(Ke,Uyo),e(Ke,G),e(G,n2),e(n2,uge),e(uge,Jyo),e(n2,Yyo),e(n2,BG),e(BG,Kyo),e(n2,Zyo),e(G,e8o),e(G,s2),e(s2,pge),e(pge,o8o),e(s2,r8o),e(s2,IG),e(IG,t8o),e(s2,a8o),e(G,n8o),e(G,l2),e(l2,_ge),e(_ge,s8o),e(l2,l8o),e(l2,NG),e(NG,i8o),e(l2,d8o),e(G,c8o),e(G,i2),e(i2,bge),e(bge,m8o),e(i2,f8o),e(i2,qG),e(qG,g8o),e(i2,h8o),e(G,u8o),e(G,d2),e(d2,vge),e(vge,p8o),e(d2,_8o),e(d2,jG),e(jG,b8o),e(d2,v8o),e(G,F8o),e(G,c2),e(c2,Fge),e(Fge,T8o),e(c2,M8o),e(c2,DG),e(DG,E8o),e(c2,C8o),e(G,w8o),e(G,m2),e(m2,Tge),e(Tge,A8o),e(m2,L8o),e(m2,GG),e(GG,y8o),e(m2,x8o),e(G,$8o),e(G,f2),e(f2,Mge),e(Mge,k8o),e(f2,S8o),e(f2,OG),e(OG,R8o),e(f2,P8o),e(G,B8o),e(G,g2),e(g2,Ege),e(Ege,I8o),e(g2,N8o),e(g2,VG),e(VG,q8o),e(g2,j8o),e(G,D8o),e(G,h2),e(h2,Cge),e(Cge,G8o),e(h2,O8o),e(h2,XG),e(XG,V8o),e(h2,X8o),e(G,z8o),e(G,u2),e(u2,wge),e(wge,W8o),e(u2,Q8o),e(u2,zG),e(zG,H8o),e(u2,U8o),e(G,J8o),e(G,p2),e(p2,Age),e(Age,Y8o),e(p2,K8o),e(p2,WG),e(WG,Z8o),e(p2,e9o),e(G,o9o),e(G,_2),e(_2,Lge),e(Lge,r9o),e(_2,t9o),e(_2,QG),e(QG,a9o),e(_2,n9o),e(G,s9o),e(G,b2),e(b2,yge),e(yge,l9o),e(b2,i9o),e(b2,HG),e(HG,d9o),e(b2,c9o),e(G,m9o),e(G,v2),e(v2,xge),e(xge,f9o),e(v2,g9o),e(v2,UG),e(UG,h9o),e(v2,u9o),e(G,p9o),e(G,F2),e(F2,$ge),e($ge,_9o),e(F2,b9o),e(F2,JG),e(JG,v9o),e(F2,F9o),e(G,T9o),e(G,T2),e(T2,kge),e(kge,M9o),e(T2,E9o),e(T2,YG),e(YG,C9o),e(T2,w9o),e(G,A9o),e(G,M2),e(M2,Sge),e(Sge,L9o),e(M2,y9o),e(M2,KG),e(KG,x9o),e(M2,$9o),e(G,k9o),e(G,E2),e(E2,Rge),e(Rge,S9o),e(E2,R9o),e(E2,ZG),e(ZG,P9o),e(E2,B9o),e(G,I9o),e(G,C2),e(C2,Pge),e(Pge,N9o),e(C2,q9o),e(C2,eO),e(eO,j9o),e(C2,D9o),e(G,G9o),e(G,w2),e(w2,Bge),e(Bge,O9o),e(w2,V9o),e(w2,oO),e(oO,X9o),e(w2,z9o),e(G,W9o),e(G,A2),e(A2,Ige),e(Ige,Q9o),e(A2,H9o),e(A2,rO),e(rO,U9o),e(A2,J9o),e(G,Y9o),e(G,L2),e(L2,Nge),e(Nge,K9o),e(L2,Z9o),e(L2,tO),e(tO,exo),e(L2,oxo),e(G,rxo),e(G,y2),e(y2,qge),e(qge,txo),e(y2,axo),e(y2,aO),e(aO,nxo),e(y2,sxo),e(G,lxo),e(G,x2),e(x2,jge),e(jge,ixo),e(x2,dxo),e(x2,nO),e(nO,cxo),e(x2,mxo),e(G,fxo),e(G,$2),e($2,Dge),e(Dge,gxo),e($2,hxo),e($2,sO),e(sO,uxo),e($2,pxo),e(G,_xo),e(G,k2),e(k2,Gge),e(Gge,bxo),e(k2,vxo),e(k2,lO),e(lO,Fxo),e(k2,Txo),e(G,Mxo),e(G,S2),e(S2,Oge),e(Oge,Exo),e(S2,Cxo),e(S2,iO),e(iO,wxo),e(S2,Axo),e(G,Lxo),e(G,R2),e(R2,Vge),e(Vge,yxo),e(R2,xxo),e(R2,dO),e(dO,$xo),e(R2,kxo),e(G,Sxo),e(G,P2),e(P2,Xge),e(Xge,Rxo),e(P2,Pxo),e(P2,cO),e(cO,Bxo),e(P2,Ixo),e(G,Nxo),e(G,B2),e(B2,zge),e(zge,qxo),e(B2,jxo),e(B2,mO),e(mO,Dxo),e(B2,Gxo),e(G,Oxo),e(G,I2),e(I2,Wge),e(Wge,Vxo),e(I2,Xxo),e(I2,fO),e(fO,zxo),e(I2,Wxo),e(G,Qxo),e(G,N2),e(N2,Qge),e(Qge,Hxo),e(N2,Uxo),e(N2,gO),e(gO,Jxo),e(N2,Yxo),e(G,Kxo),e(G,q2),e(q2,Hge),e(Hge,Zxo),e(q2,e$o),e(q2,hO),e(hO,o$o),e(q2,r$o),e(G,t$o),e(G,j2),e(j2,Uge),e(Uge,a$o),e(j2,n$o),e(j2,uO),e(uO,s$o),e(j2,l$o),e(G,i$o),e(G,D2),e(D2,Jge),e(Jge,d$o),e(D2,c$o),e(D2,pO),e(pO,m$o),e(D2,f$o),e(G,g$o),e(G,G2),e(G2,Yge),e(Yge,h$o),e(G2,u$o),e(G2,_O),e(_O,p$o),e(G2,_$o),e(G,b$o),e(G,O2),e(O2,Kge),e(Kge,v$o),e(O2,F$o),e(O2,bO),e(bO,T$o),e(O2,M$o),e(G,E$o),e(G,V2),e(V2,Zge),e(Zge,C$o),e(V2,w$o),e(V2,vO),e(vO,A$o),e(V2,L$o),e(G,y$o),e(G,X2),e(X2,ehe),e(ehe,x$o),e(X2,$$o),e(X2,FO),e(FO,k$o),e(X2,S$o),e(G,R$o),e(G,z2),e(z2,ohe),e(ohe,P$o),e(z2,B$o),e(z2,TO),e(TO,I$o),e(z2,N$o),e(G,q$o),e(G,W2),e(W2,rhe),e(rhe,j$o),e(W2,D$o),e(W2,MO),e(MO,G$o),e(W2,O$o),e(G,V$o),e(G,Q2),e(Q2,the),e(the,X$o),e(Q2,z$o),e(Q2,EO),e(EO,W$o),e(Q2,Q$o),e(G,H$o),e(G,H2),e(H2,ahe),e(ahe,U$o),e(H2,J$o),e(H2,CO),e(CO,Y$o),e(H2,K$o),e(G,Z$o),e(G,U2),e(U2,nhe),e(nhe,eko),e(U2,oko),e(U2,wO),e(wO,rko),e(U2,tko),e(Ke,ako),e(Ke,J2),e(J2,nko),e(J2,she),e(she,sko),e(J2,lko),e(J2,lhe),e(lhe,iko),e(Ke,dko),M(Y2,Ke,null),b(m,Aze,_),b(m,Ji,_),e(Ji,K2),e(K2,ihe),M(t8,ihe,null),e(Ji,cko),e(Ji,dhe),e(dhe,mko),b(m,Lze,_),b(m,Ro,_),M(a8,Ro,null),e(Ro,fko),e(Ro,Yi),e(Yi,gko),e(Yi,AO),e(AO,hko),e(Yi,uko),e(Yi,LO),e(LO,pko),e(Yi,_ko),e(Ro,bko),e(Ro,n8),e(n8,vko),e(n8,che),e(che,Fko),e(n8,Tko),e(Ro,Mko),e(Ro,ct),M(s8,ct,null),e(ct,Eko),e(ct,mhe),e(mhe,Cko),e(ct,wko),e(ct,Ki),e(Ki,Ako),e(Ki,fhe),e(fhe,Lko),e(Ki,yko),e(Ki,yO),e(yO,xko),e(Ki,$ko),e(ct,kko),M(Z2,ct,null),e(Ro,Sko),e(Ro,Ze),M(l8,Ze,null),e(Ze,Rko),e(Ze,ghe),e(ghe,Pko),e(Ze,Bko),e(Ze,qa),e(qa,Iko),e(qa,hhe),e(hhe,Nko),e(qa,qko),e(qa,uhe),e(uhe,jko),e(qa,Dko),e(qa,phe),e(phe,Gko),e(qa,Oko),e(Ze,Vko),e(Ze,z),e(z,eb),e(eb,_he),e(_he,Xko),e(eb,zko),e(eb,xO),e(xO,Wko),e(eb,Qko),e(z,Hko),e(z,ob),e(ob,bhe),e(bhe,Uko),e(ob,Jko),e(ob,$O),e($O,Yko),e(ob,Kko),e(z,Zko),e(z,rb),e(rb,vhe),e(vhe,eSo),e(rb,oSo),e(rb,kO),e(kO,rSo),e(rb,tSo),e(z,aSo),e(z,tb),e(tb,Fhe),e(Fhe,nSo),e(tb,sSo),e(tb,SO),e(SO,lSo),e(tb,iSo),e(z,dSo),e(z,ab),e(ab,The),e(The,cSo),e(ab,mSo),e(ab,RO),e(RO,fSo),e(ab,gSo),e(z,hSo),e(z,nb),e(nb,Mhe),e(Mhe,uSo),e(nb,pSo),e(nb,PO),e(PO,_So),e(nb,bSo),e(z,vSo),e(z,sb),e(sb,Ehe),e(Ehe,FSo),e(sb,TSo),e(sb,BO),e(BO,MSo),e(sb,ESo),e(z,CSo),e(z,lb),e(lb,Che),e(Che,wSo),e(lb,ASo),e(lb,IO),e(IO,LSo),e(lb,ySo),e(z,xSo),e(z,ib),e(ib,whe),e(whe,$So),e(ib,kSo),e(ib,NO),e(NO,SSo),e(ib,RSo),e(z,PSo),e(z,db),e(db,Ahe),e(Ahe,BSo),e(db,ISo),e(db,qO),e(qO,NSo),e(db,qSo),e(z,jSo),e(z,cb),e(cb,Lhe),e(Lhe,DSo),e(cb,GSo),e(cb,jO),e(jO,OSo),e(cb,VSo),e(z,XSo),e(z,mb),e(mb,yhe),e(yhe,zSo),e(mb,WSo),e(mb,DO),e(DO,QSo),e(mb,HSo),e(z,USo),e(z,fb),e(fb,xhe),e(xhe,JSo),e(fb,YSo),e(fb,GO),e(GO,KSo),e(fb,ZSo),e(z,eRo),e(z,gb),e(gb,$he),e($he,oRo),e(gb,rRo),e(gb,OO),e(OO,tRo),e(gb,aRo),e(z,nRo),e(z,hb),e(hb,khe),e(khe,sRo),e(hb,lRo),e(hb,VO),e(VO,iRo),e(hb,dRo),e(z,cRo),e(z,ub),e(ub,She),e(She,mRo),e(ub,fRo),e(ub,XO),e(XO,gRo),e(ub,hRo),e(z,uRo),e(z,pb),e(pb,Rhe),e(Rhe,pRo),e(pb,_Ro),e(pb,zO),e(zO,bRo),e(pb,vRo),e(z,FRo),e(z,_b),e(_b,Phe),e(Phe,TRo),e(_b,MRo),e(_b,WO),e(WO,ERo),e(_b,CRo),e(z,wRo),e(z,bb),e(bb,Bhe),e(Bhe,ARo),e(bb,LRo),e(bb,QO),e(QO,yRo),e(bb,xRo),e(z,$Ro),e(z,vb),e(vb,Ihe),e(Ihe,kRo),e(vb,SRo),e(vb,HO),e(HO,RRo),e(vb,PRo),e(z,BRo),e(z,Fb),e(Fb,Nhe),e(Nhe,IRo),e(Fb,NRo),e(Fb,UO),e(UO,qRo),e(Fb,jRo),e(z,DRo),e(z,Tb),e(Tb,qhe),e(qhe,GRo),e(Tb,ORo),e(Tb,JO),e(JO,VRo),e(Tb,XRo),e(z,zRo),e(z,Mb),e(Mb,jhe),e(jhe,WRo),e(Mb,QRo),e(Mb,YO),e(YO,HRo),e(Mb,URo),e(z,JRo),e(z,Eb),e(Eb,Dhe),e(Dhe,YRo),e(Eb,KRo),e(Eb,KO),e(KO,ZRo),e(Eb,ePo),e(z,oPo),e(z,Cb),e(Cb,Ghe),e(Ghe,rPo),e(Cb,tPo),e(Cb,ZO),e(ZO,aPo),e(Cb,nPo),e(z,sPo),e(z,wb),e(wb,Ohe),e(Ohe,lPo),e(wb,iPo),e(wb,eV),e(eV,dPo),e(wb,cPo),e(z,mPo),e(z,Ab),e(Ab,Vhe),e(Vhe,fPo),e(Ab,gPo),e(Ab,oV),e(oV,hPo),e(Ab,uPo),e(z,pPo),e(z,Lb),e(Lb,Xhe),e(Xhe,_Po),e(Lb,bPo),e(Lb,rV),e(rV,vPo),e(Lb,FPo),e(z,TPo),e(z,yb),e(yb,zhe),e(zhe,MPo),e(yb,EPo),e(yb,tV),e(tV,CPo),e(yb,wPo),e(z,APo),e(z,xb),e(xb,Whe),e(Whe,LPo),e(xb,yPo),e(xb,aV),e(aV,xPo),e(xb,$Po),e(z,kPo),e(z,$b),e($b,Qhe),e(Qhe,SPo),e($b,RPo),e($b,nV),e(nV,PPo),e($b,BPo),e(z,IPo),e(z,kb),e(kb,Hhe),e(Hhe,NPo),e(kb,qPo),e(kb,sV),e(sV,jPo),e(kb,DPo),e(z,GPo),e(z,Sb),e(Sb,Uhe),e(Uhe,OPo),e(Sb,VPo),e(Sb,lV),e(lV,XPo),e(Sb,zPo),e(z,WPo),e(z,Rb),e(Rb,Jhe),e(Jhe,QPo),e(Rb,HPo),e(Rb,iV),e(iV,UPo),e(Rb,JPo),e(z,YPo),e(z,Pb),e(Pb,Yhe),e(Yhe,KPo),e(Pb,ZPo),e(Pb,dV),e(dV,eBo),e(Pb,oBo),e(z,rBo),e(z,Bb),e(Bb,Khe),e(Khe,tBo),e(Bb,aBo),e(Bb,cV),e(cV,nBo),e(Bb,sBo),e(z,lBo),e(z,Ib),e(Ib,Zhe),e(Zhe,iBo),e(Ib,dBo),e(Ib,mV),e(mV,cBo),e(Ib,mBo),e(z,fBo),e(z,Nb),e(Nb,eue),e(eue,gBo),e(Nb,hBo),e(Nb,fV),e(fV,uBo),e(Nb,pBo),e(z,_Bo),e(z,qb),e(qb,oue),e(oue,bBo),e(qb,vBo),e(qb,gV),e(gV,FBo),e(qb,TBo),e(z,MBo),e(z,jb),e(jb,rue),e(rue,EBo),e(jb,CBo),e(jb,hV),e(hV,wBo),e(jb,ABo),e(Ze,LBo),e(Ze,Db),e(Db,yBo),e(Db,tue),e(tue,xBo),e(Db,$Bo),e(Db,aue),e(aue,kBo),e(Ze,SBo),M(Gb,Ze,null),b(m,yze,_),b(m,Zi,_),e(Zi,Ob),e(Ob,nue),M(i8,nue,null),e(Zi,RBo),e(Zi,sue),e(sue,PBo),b(m,xze,_),b(m,Po,_),M(d8,Po,null),e(Po,BBo),e(Po,ed),e(ed,IBo),e(ed,uV),e(uV,NBo),e(ed,qBo),e(ed,pV),e(pV,jBo),e(ed,DBo),e(Po,GBo),e(Po,c8),e(c8,OBo),e(c8,lue),e(lue,VBo),e(c8,XBo),e(Po,zBo),e(Po,mt),M(m8,mt,null),e(mt,WBo),e(mt,iue),e(iue,QBo),e(mt,HBo),e(mt,od),e(od,UBo),e(od,due),e(due,JBo),e(od,YBo),e(od,_V),e(_V,KBo),e(od,ZBo),e(mt,eIo),M(Vb,mt,null),e(Po,oIo),e(Po,eo),M(f8,eo,null),e(eo,rIo),e(eo,cue),e(cue,tIo),e(eo,aIo),e(eo,ja),e(ja,nIo),e(ja,mue),e(mue,sIo),e(ja,lIo),e(ja,fue),e(fue,iIo),e(ja,dIo),e(ja,gue),e(gue,cIo),e(ja,mIo),e(eo,fIo),e(eo,Q),e(Q,Xb),e(Xb,hue),e(hue,gIo),e(Xb,hIo),e(Xb,bV),e(bV,uIo),e(Xb,pIo),e(Q,_Io),e(Q,zb),e(zb,uue),e(uue,bIo),e(zb,vIo),e(zb,vV),e(vV,FIo),e(zb,TIo),e(Q,MIo),e(Q,Wb),e(Wb,pue),e(pue,EIo),e(Wb,CIo),e(Wb,FV),e(FV,wIo),e(Wb,AIo),e(Q,LIo),e(Q,Qb),e(Qb,_ue),e(_ue,yIo),e(Qb,xIo),e(Qb,TV),e(TV,$Io),e(Qb,kIo),e(Q,SIo),e(Q,Hb),e(Hb,bue),e(bue,RIo),e(Hb,PIo),e(Hb,MV),e(MV,BIo),e(Hb,IIo),e(Q,NIo),e(Q,Ub),e(Ub,vue),e(vue,qIo),e(Ub,jIo),e(Ub,EV),e(EV,DIo),e(Ub,GIo),e(Q,OIo),e(Q,Jb),e(Jb,Fue),e(Fue,VIo),e(Jb,XIo),e(Jb,CV),e(CV,zIo),e(Jb,WIo),e(Q,QIo),e(Q,Yb),e(Yb,Tue),e(Tue,HIo),e(Yb,UIo),e(Yb,wV),e(wV,JIo),e(Yb,YIo),e(Q,KIo),e(Q,Kb),e(Kb,Mue),e(Mue,ZIo),e(Kb,eNo),e(Kb,AV),e(AV,oNo),e(Kb,rNo),e(Q,tNo),e(Q,Zb),e(Zb,Eue),e(Eue,aNo),e(Zb,nNo),e(Zb,LV),e(LV,sNo),e(Zb,lNo),e(Q,iNo),e(Q,ev),e(ev,Cue),e(Cue,dNo),e(ev,cNo),e(ev,yV),e(yV,mNo),e(ev,fNo),e(Q,gNo),e(Q,ov),e(ov,wue),e(wue,hNo),e(ov,uNo),e(ov,xV),e(xV,pNo),e(ov,_No),e(Q,bNo),e(Q,rv),e(rv,Aue),e(Aue,vNo),e(rv,FNo),e(rv,$V),e($V,TNo),e(rv,MNo),e(Q,ENo),e(Q,tv),e(tv,Lue),e(Lue,CNo),e(tv,wNo),e(tv,kV),e(kV,ANo),e(tv,LNo),e(Q,yNo),e(Q,av),e(av,yue),e(yue,xNo),e(av,$No),e(av,SV),e(SV,kNo),e(av,SNo),e(Q,RNo),e(Q,nv),e(nv,xue),e(xue,PNo),e(nv,BNo),e(nv,RV),e(RV,INo),e(nv,NNo),e(Q,qNo),e(Q,sv),e(sv,$ue),e($ue,jNo),e(sv,DNo),e(sv,PV),e(PV,GNo),e(sv,ONo),e(Q,VNo),e(Q,lv),e(lv,kue),e(kue,XNo),e(lv,zNo),e(lv,BV),e(BV,WNo),e(lv,QNo),e(Q,HNo),e(Q,iv),e(iv,Sue),e(Sue,UNo),e(iv,JNo),e(iv,IV),e(IV,YNo),e(iv,KNo),e(Q,ZNo),e(Q,dv),e(dv,Rue),e(Rue,eqo),e(dv,oqo),e(dv,NV),e(NV,rqo),e(dv,tqo),e(Q,aqo),e(Q,cv),e(cv,Pue),e(Pue,nqo),e(cv,sqo),e(cv,qV),e(qV,lqo),e(cv,iqo),e(Q,dqo),e(Q,mv),e(mv,Bue),e(Bue,cqo),e(mv,mqo),e(mv,jV),e(jV,fqo),e(mv,gqo),e(Q,hqo),e(Q,fv),e(fv,Iue),e(Iue,uqo),e(fv,pqo),e(fv,DV),e(DV,_qo),e(fv,bqo),e(Q,vqo),e(Q,gv),e(gv,Nue),e(Nue,Fqo),e(gv,Tqo),e(gv,GV),e(GV,Mqo),e(gv,Eqo),e(Q,Cqo),e(Q,hv),e(hv,que),e(que,wqo),e(hv,Aqo),e(hv,OV),e(OV,Lqo),e(hv,yqo),e(Q,xqo),e(Q,uv),e(uv,jue),e(jue,$qo),e(uv,kqo),e(uv,VV),e(VV,Sqo),e(uv,Rqo),e(Q,Pqo),e(Q,pv),e(pv,Due),e(Due,Bqo),e(pv,Iqo),e(pv,XV),e(XV,Nqo),e(pv,qqo),e(Q,jqo),e(Q,_v),e(_v,Gue),e(Gue,Dqo),e(_v,Gqo),e(_v,zV),e(zV,Oqo),e(_v,Vqo),e(Q,Xqo),e(Q,bv),e(bv,Oue),e(Oue,zqo),e(bv,Wqo),e(bv,WV),e(WV,Qqo),e(bv,Hqo),e(Q,Uqo),e(Q,vv),e(vv,Vue),e(Vue,Jqo),e(vv,Yqo),e(vv,QV),e(QV,Kqo),e(vv,Zqo),e(Q,ejo),e(Q,Fv),e(Fv,Xue),e(Xue,ojo),e(Fv,rjo),e(Fv,HV),e(HV,tjo),e(Fv,ajo),e(Q,njo),e(Q,Tv),e(Tv,zue),e(zue,sjo),e(Tv,ljo),e(Tv,UV),e(UV,ijo),e(Tv,djo),e(Q,cjo),e(Q,Mv),e(Mv,Wue),e(Wue,mjo),e(Mv,fjo),e(Mv,JV),e(JV,gjo),e(Mv,hjo),e(Q,ujo),e(Q,Ev),e(Ev,Que),e(Que,pjo),e(Ev,_jo),e(Ev,Hue),e(Hue,bjo),e(Ev,vjo),e(Q,Fjo),e(Q,Cv),e(Cv,Uue),e(Uue,Tjo),e(Cv,Mjo),e(Cv,YV),e(YV,Ejo),e(Cv,Cjo),e(Q,wjo),e(Q,wv),e(wv,Jue),e(Jue,Ajo),e(wv,Ljo),e(wv,KV),e(KV,yjo),e(wv,xjo),e(Q,$jo),e(Q,Av),e(Av,Yue),e(Yue,kjo),e(Av,Sjo),e(Av,ZV),e(ZV,Rjo),e(Av,Pjo),e(Q,Bjo),e(Q,Lv),e(Lv,Kue),e(Kue,Ijo),e(Lv,Njo),e(Lv,eX),e(eX,qjo),e(Lv,jjo),e(eo,Djo),e(eo,yv),e(yv,Gjo),e(yv,Zue),e(Zue,Ojo),e(yv,Vjo),e(yv,epe),e(epe,Xjo),e(eo,zjo),M(xv,eo,null),b(m,$ze,_),b(m,rd,_),e(rd,$v),e($v,ope),M(g8,ope,null),e(rd,Wjo),e(rd,rpe),e(rpe,Qjo),b(m,kze,_),b(m,Bo,_),M(h8,Bo,null),e(Bo,Hjo),e(Bo,td),e(td,Ujo),e(td,oX),e(oX,Jjo),e(td,Yjo),e(td,rX),e(rX,Kjo),e(td,Zjo),e(Bo,eDo),e(Bo,u8),e(u8,oDo),e(u8,tpe),e(tpe,rDo),e(u8,tDo),e(Bo,aDo),e(Bo,ft),M(p8,ft,null),e(ft,nDo),e(ft,ape),e(ape,sDo),e(ft,lDo),e(ft,ad),e(ad,iDo),e(ad,npe),e(npe,dDo),e(ad,cDo),e(ad,tX),e(tX,mDo),e(ad,fDo),e(ft,gDo),M(kv,ft,null),e(Bo,hDo),e(Bo,oo),M(_8,oo,null),e(oo,uDo),e(oo,spe),e(spe,pDo),e(oo,_Do),e(oo,Da),e(Da,bDo),e(Da,lpe),e(lpe,vDo),e(Da,FDo),e(Da,ipe),e(ipe,TDo),e(Da,MDo),e(Da,dpe),e(dpe,EDo),e(Da,CDo),e(oo,wDo),e(oo,fe),e(fe,Sv),e(Sv,cpe),e(cpe,ADo),e(Sv,LDo),e(Sv,aX),e(aX,yDo),e(Sv,xDo),e(fe,$Do),e(fe,Rv),e(Rv,mpe),e(mpe,kDo),e(Rv,SDo),e(Rv,nX),e(nX,RDo),e(Rv,PDo),e(fe,BDo),e(fe,Pv),e(Pv,fpe),e(fpe,IDo),e(Pv,NDo),e(Pv,sX),e(sX,qDo),e(Pv,jDo),e(fe,DDo),e(fe,Bv),e(Bv,gpe),e(gpe,GDo),e(Bv,ODo),e(Bv,lX),e(lX,VDo),e(Bv,XDo),e(fe,zDo),e(fe,Iv),e(Iv,hpe),e(hpe,WDo),e(Iv,QDo),e(Iv,iX),e(iX,HDo),e(Iv,UDo),e(fe,JDo),e(fe,Nv),e(Nv,upe),e(upe,YDo),e(Nv,KDo),e(Nv,dX),e(dX,ZDo),e(Nv,eGo),e(fe,oGo),e(fe,qv),e(qv,ppe),e(ppe,rGo),e(qv,tGo),e(qv,cX),e(cX,aGo),e(qv,nGo),e(fe,sGo),e(fe,jv),e(jv,_pe),e(_pe,lGo),e(jv,iGo),e(jv,mX),e(mX,dGo),e(jv,cGo),e(fe,mGo),e(fe,Dv),e(Dv,bpe),e(bpe,fGo),e(Dv,gGo),e(Dv,fX),e(fX,hGo),e(Dv,uGo),e(fe,pGo),e(fe,Gv),e(Gv,vpe),e(vpe,_Go),e(Gv,bGo),e(Gv,gX),e(gX,vGo),e(Gv,FGo),e(fe,TGo),e(fe,Ov),e(Ov,Fpe),e(Fpe,MGo),e(Ov,EGo),e(Ov,hX),e(hX,CGo),e(Ov,wGo),e(fe,AGo),e(fe,Vv),e(Vv,Tpe),e(Tpe,LGo),e(Vv,yGo),e(Vv,uX),e(uX,xGo),e(Vv,$Go),e(fe,kGo),e(fe,Xv),e(Xv,Mpe),e(Mpe,SGo),e(Xv,RGo),e(Xv,pX),e(pX,PGo),e(Xv,BGo),e(fe,IGo),e(fe,zv),e(zv,Epe),e(Epe,NGo),e(zv,qGo),e(zv,_X),e(_X,jGo),e(zv,DGo),e(fe,GGo),e(fe,Wv),e(Wv,Cpe),e(Cpe,OGo),e(Wv,VGo),e(Wv,bX),e(bX,XGo),e(Wv,zGo),e(fe,WGo),e(fe,Qv),e(Qv,wpe),e(wpe,QGo),e(Qv,HGo),e(Qv,vX),e(vX,UGo),e(Qv,JGo),e(fe,YGo),e(fe,Hv),e(Hv,Ape),e(Ape,KGo),e(Hv,ZGo),e(Hv,FX),e(FX,eOo),e(Hv,oOo),e(fe,rOo),e(fe,Uv),e(Uv,Lpe),e(Lpe,tOo),e(Uv,aOo),e(Uv,TX),e(TX,nOo),e(Uv,sOo),e(fe,lOo),e(fe,Jv),e(Jv,ype),e(ype,iOo),e(Jv,dOo),e(Jv,MX),e(MX,cOo),e(Jv,mOo),e(oo,fOo),e(oo,Yv),e(Yv,gOo),e(Yv,xpe),e(xpe,hOo),e(Yv,uOo),e(Yv,$pe),e($pe,pOo),e(oo,_Oo),M(Kv,oo,null),b(m,Sze,_),b(m,nd,_),e(nd,Zv),e(Zv,kpe),M(b8,kpe,null),e(nd,bOo),e(nd,Spe),e(Spe,vOo),b(m,Rze,_),b(m,Io,_),M(v8,Io,null),e(Io,FOo),e(Io,sd),e(sd,TOo),e(sd,EX),e(EX,MOo),e(sd,EOo),e(sd,CX),e(CX,COo),e(sd,wOo),e(Io,AOo),e(Io,F8),e(F8,LOo),e(F8,Rpe),e(Rpe,yOo),e(F8,xOo),e(Io,$Oo),e(Io,gt),M(T8,gt,null),e(gt,kOo),e(gt,Ppe),e(Ppe,SOo),e(gt,ROo),e(gt,ld),e(ld,POo),e(ld,Bpe),e(Bpe,BOo),e(ld,IOo),e(ld,wX),e(wX,NOo),e(ld,qOo),e(gt,jOo),M(e1,gt,null),e(Io,DOo),e(Io,ro),M(M8,ro,null),e(ro,GOo),e(ro,Ipe),e(Ipe,OOo),e(ro,VOo),e(ro,Ga),e(Ga,XOo),e(Ga,Npe),e(Npe,zOo),e(Ga,WOo),e(Ga,qpe),e(qpe,QOo),e(Ga,HOo),e(Ga,jpe),e(jpe,UOo),e(Ga,JOo),e(ro,YOo),e(ro,B),e(B,o1),e(o1,Dpe),e(Dpe,KOo),e(o1,ZOo),e(o1,AX),e(AX,eVo),e(o1,oVo),e(B,rVo),e(B,r1),e(r1,Gpe),e(Gpe,tVo),e(r1,aVo),e(r1,LX),e(LX,nVo),e(r1,sVo),e(B,lVo),e(B,t1),e(t1,Ope),e(Ope,iVo),e(t1,dVo),e(t1,yX),e(yX,cVo),e(t1,mVo),e(B,fVo),e(B,a1),e(a1,Vpe),e(Vpe,gVo),e(a1,hVo),e(a1,xX),e(xX,uVo),e(a1,pVo),e(B,_Vo),e(B,n1),e(n1,Xpe),e(Xpe,bVo),e(n1,vVo),e(n1,$X),e($X,FVo),e(n1,TVo),e(B,MVo),e(B,s1),e(s1,zpe),e(zpe,EVo),e(s1,CVo),e(s1,kX),e(kX,wVo),e(s1,AVo),e(B,LVo),e(B,l1),e(l1,Wpe),e(Wpe,yVo),e(l1,xVo),e(l1,SX),e(SX,$Vo),e(l1,kVo),e(B,SVo),e(B,i1),e(i1,Qpe),e(Qpe,RVo),e(i1,PVo),e(i1,RX),e(RX,BVo),e(i1,IVo),e(B,NVo),e(B,d1),e(d1,Hpe),e(Hpe,qVo),e(d1,jVo),e(d1,PX),e(PX,DVo),e(d1,GVo),e(B,OVo),e(B,c1),e(c1,Upe),e(Upe,VVo),e(c1,XVo),e(c1,BX),e(BX,zVo),e(c1,WVo),e(B,QVo),e(B,m1),e(m1,Jpe),e(Jpe,HVo),e(m1,UVo),e(m1,IX),e(IX,JVo),e(m1,YVo),e(B,KVo),e(B,f1),e(f1,Ype),e(Ype,ZVo),e(f1,eXo),e(f1,NX),e(NX,oXo),e(f1,rXo),e(B,tXo),e(B,g1),e(g1,Kpe),e(Kpe,aXo),e(g1,nXo),e(g1,qX),e(qX,sXo),e(g1,lXo),e(B,iXo),e(B,h1),e(h1,Zpe),e(Zpe,dXo),e(h1,cXo),e(h1,jX),e(jX,mXo),e(h1,fXo),e(B,gXo),e(B,u1),e(u1,e_e),e(e_e,hXo),e(u1,uXo),e(u1,DX),e(DX,pXo),e(u1,_Xo),e(B,bXo),e(B,p1),e(p1,o_e),e(o_e,vXo),e(p1,FXo),e(p1,GX),e(GX,TXo),e(p1,MXo),e(B,EXo),e(B,_1),e(_1,r_e),e(r_e,CXo),e(_1,wXo),e(_1,OX),e(OX,AXo),e(_1,LXo),e(B,yXo),e(B,b1),e(b1,t_e),e(t_e,xXo),e(b1,$Xo),e(b1,VX),e(VX,kXo),e(b1,SXo),e(B,RXo),e(B,v1),e(v1,a_e),e(a_e,PXo),e(v1,BXo),e(v1,XX),e(XX,IXo),e(v1,NXo),e(B,qXo),e(B,F1),e(F1,n_e),e(n_e,jXo),e(F1,DXo),e(F1,zX),e(zX,GXo),e(F1,OXo),e(B,VXo),e(B,T1),e(T1,s_e),e(s_e,XXo),e(T1,zXo),e(T1,WX),e(WX,WXo),e(T1,QXo),e(B,HXo),e(B,M1),e(M1,l_e),e(l_e,UXo),e(M1,JXo),e(M1,QX),e(QX,YXo),e(M1,KXo),e(B,ZXo),e(B,E1),e(E1,i_e),e(i_e,ezo),e(E1,ozo),e(E1,HX),e(HX,rzo),e(E1,tzo),e(B,azo),e(B,C1),e(C1,d_e),e(d_e,nzo),e(C1,szo),e(C1,UX),e(UX,lzo),e(C1,izo),e(B,dzo),e(B,w1),e(w1,c_e),e(c_e,czo),e(w1,mzo),e(w1,JX),e(JX,fzo),e(w1,gzo),e(B,hzo),e(B,A1),e(A1,m_e),e(m_e,uzo),e(A1,pzo),e(A1,YX),e(YX,_zo),e(A1,bzo),e(B,vzo),e(B,L1),e(L1,f_e),e(f_e,Fzo),e(L1,Tzo),e(L1,KX),e(KX,Mzo),e(L1,Ezo),e(B,Czo),e(B,y1),e(y1,g_e),e(g_e,wzo),e(y1,Azo),e(y1,ZX),e(ZX,Lzo),e(y1,yzo),e(B,xzo),e(B,x1),e(x1,h_e),e(h_e,$zo),e(x1,kzo),e(x1,ez),e(ez,Szo),e(x1,Rzo),e(B,Pzo),e(B,$1),e($1,u_e),e(u_e,Bzo),e($1,Izo),e($1,oz),e(oz,Nzo),e($1,qzo),e(B,jzo),e(B,k1),e(k1,p_e),e(p_e,Dzo),e(k1,Gzo),e(k1,rz),e(rz,Ozo),e(k1,Vzo),e(B,Xzo),e(B,S1),e(S1,__e),e(__e,zzo),e(S1,Wzo),e(S1,tz),e(tz,Qzo),e(S1,Hzo),e(B,Uzo),e(B,R1),e(R1,b_e),e(b_e,Jzo),e(R1,Yzo),e(R1,az),e(az,Kzo),e(R1,Zzo),e(B,eWo),e(B,P1),e(P1,v_e),e(v_e,oWo),e(P1,rWo),e(P1,nz),e(nz,tWo),e(P1,aWo),e(B,nWo),e(B,B1),e(B1,F_e),e(F_e,sWo),e(B1,lWo),e(B1,sz),e(sz,iWo),e(B1,dWo),e(B,cWo),e(B,I1),e(I1,T_e),e(T_e,mWo),e(I1,fWo),e(I1,lz),e(lz,gWo),e(I1,hWo),e(B,uWo),e(B,N1),e(N1,M_e),e(M_e,pWo),e(N1,_Wo),e(N1,iz),e(iz,bWo),e(N1,vWo),e(B,FWo),e(B,q1),e(q1,E_e),e(E_e,TWo),e(q1,MWo),e(q1,dz),e(dz,EWo),e(q1,CWo),e(B,wWo),e(B,j1),e(j1,C_e),e(C_e,AWo),e(j1,LWo),e(j1,cz),e(cz,yWo),e(j1,xWo),e(B,$Wo),e(B,D1),e(D1,w_e),e(w_e,kWo),e(D1,SWo),e(D1,mz),e(mz,RWo),e(D1,PWo),e(B,BWo),e(B,G1),e(G1,A_e),e(A_e,IWo),e(G1,NWo),e(G1,fz),e(fz,qWo),e(G1,jWo),e(B,DWo),e(B,O1),e(O1,L_e),e(L_e,GWo),e(O1,OWo),e(O1,gz),e(gz,VWo),e(O1,XWo),e(B,zWo),e(B,V1),e(V1,y_e),e(y_e,WWo),e(V1,QWo),e(V1,hz),e(hz,HWo),e(V1,UWo),e(B,JWo),e(B,X1),e(X1,x_e),e(x_e,YWo),e(X1,KWo),e(X1,uz),e(uz,ZWo),e(X1,eQo),e(B,oQo),e(B,z1),e(z1,$_e),e($_e,rQo),e(z1,tQo),e(z1,pz),e(pz,aQo),e(z1,nQo),e(B,sQo),e(B,W1),e(W1,k_e),e(k_e,lQo),e(W1,iQo),e(W1,_z),e(_z,dQo),e(W1,cQo),e(B,mQo),e(B,Q1),e(Q1,S_e),e(S_e,fQo),e(Q1,gQo),e(Q1,bz),e(bz,hQo),e(Q1,uQo),e(B,pQo),e(B,H1),e(H1,R_e),e(R_e,_Qo),e(H1,bQo),e(H1,vz),e(vz,vQo),e(H1,FQo),e(B,TQo),e(B,U1),e(U1,P_e),e(P_e,MQo),e(U1,EQo),e(U1,Fz),e(Fz,CQo),e(U1,wQo),e(B,AQo),e(B,J1),e(J1,B_e),e(B_e,LQo),e(J1,yQo),e(J1,Tz),e(Tz,xQo),e(J1,$Qo),e(B,kQo),e(B,Y1),e(Y1,I_e),e(I_e,SQo),e(Y1,RQo),e(Y1,Mz),e(Mz,PQo),e(Y1,BQo),e(ro,IQo),e(ro,K1),e(K1,NQo),e(K1,N_e),e(N_e,qQo),e(K1,jQo),e(K1,q_e),e(q_e,DQo),e(ro,GQo),M(Z1,ro,null),b(m,Pze,_),b(m,id,_),e(id,eF),e(eF,j_e),M(E8,j_e,null),e(id,OQo),e(id,D_e),e(D_e,VQo),b(m,Bze,_),b(m,No,_),M(C8,No,null),e(No,XQo),e(No,dd),e(dd,zQo),e(dd,Ez),e(Ez,WQo),e(dd,QQo),e(dd,Cz),e(Cz,HQo),e(dd,UQo),e(No,JQo),e(No,w8),e(w8,YQo),e(w8,G_e),e(G_e,KQo),e(w8,ZQo),e(No,eHo),e(No,ht),M(A8,ht,null),e(ht,oHo),e(ht,O_e),e(O_e,rHo),e(ht,tHo),e(ht,cd),e(cd,aHo),e(cd,V_e),e(V_e,nHo),e(cd,sHo),e(cd,wz),e(wz,lHo),e(cd,iHo),e(ht,dHo),M(oF,ht,null),e(No,cHo),e(No,to),M(L8,to,null),e(to,mHo),e(to,X_e),e(X_e,fHo),e(to,gHo),e(to,Oa),e(Oa,hHo),e(Oa,z_e),e(z_e,uHo),e(Oa,pHo),e(Oa,W_e),e(W_e,_Ho),e(Oa,bHo),e(Oa,Q_e),e(Q_e,vHo),e(Oa,FHo),e(to,THo),e(to,Z),e(Z,rF),e(rF,H_e),e(H_e,MHo),e(rF,EHo),e(rF,Az),e(Az,CHo),e(rF,wHo),e(Z,AHo),e(Z,tF),e(tF,U_e),e(U_e,LHo),e(tF,yHo),e(tF,Lz),e(Lz,xHo),e(tF,$Ho),e(Z,kHo),e(Z,aF),e(aF,J_e),e(J_e,SHo),e(aF,RHo),e(aF,yz),e(yz,PHo),e(aF,BHo),e(Z,IHo),e(Z,nF),e(nF,Y_e),e(Y_e,NHo),e(nF,qHo),e(nF,xz),e(xz,jHo),e(nF,DHo),e(Z,GHo),e(Z,sF),e(sF,K_e),e(K_e,OHo),e(sF,VHo),e(sF,$z),e($z,XHo),e(sF,zHo),e(Z,WHo),e(Z,lF),e(lF,Z_e),e(Z_e,QHo),e(lF,HHo),e(lF,kz),e(kz,UHo),e(lF,JHo),e(Z,YHo),e(Z,iF),e(iF,e2e),e(e2e,KHo),e(iF,ZHo),e(iF,Sz),e(Sz,eUo),e(iF,oUo),e(Z,rUo),e(Z,dF),e(dF,o2e),e(o2e,tUo),e(dF,aUo),e(dF,Rz),e(Rz,nUo),e(dF,sUo),e(Z,lUo),e(Z,cF),e(cF,r2e),e(r2e,iUo),e(cF,dUo),e(cF,Pz),e(Pz,cUo),e(cF,mUo),e(Z,fUo),e(Z,mF),e(mF,t2e),e(t2e,gUo),e(mF,hUo),e(mF,Bz),e(Bz,uUo),e(mF,pUo),e(Z,_Uo),e(Z,fF),e(fF,a2e),e(a2e,bUo),e(fF,vUo),e(fF,Iz),e(Iz,FUo),e(fF,TUo),e(Z,MUo),e(Z,gF),e(gF,n2e),e(n2e,EUo),e(gF,CUo),e(gF,Nz),e(Nz,wUo),e(gF,AUo),e(Z,LUo),e(Z,hF),e(hF,s2e),e(s2e,yUo),e(hF,xUo),e(hF,qz),e(qz,$Uo),e(hF,kUo),e(Z,SUo),e(Z,uF),e(uF,l2e),e(l2e,RUo),e(uF,PUo),e(uF,jz),e(jz,BUo),e(uF,IUo),e(Z,NUo),e(Z,pF),e(pF,i2e),e(i2e,qUo),e(pF,jUo),e(pF,Dz),e(Dz,DUo),e(pF,GUo),e(Z,OUo),e(Z,_F),e(_F,d2e),e(d2e,VUo),e(_F,XUo),e(_F,Gz),e(Gz,zUo),e(_F,WUo),e(Z,QUo),e(Z,bF),e(bF,c2e),e(c2e,HUo),e(bF,UUo),e(bF,Oz),e(Oz,JUo),e(bF,YUo),e(Z,KUo),e(Z,vF),e(vF,m2e),e(m2e,ZUo),e(vF,eJo),e(vF,Vz),e(Vz,oJo),e(vF,rJo),e(Z,tJo),e(Z,FF),e(FF,f2e),e(f2e,aJo),e(FF,nJo),e(FF,Xz),e(Xz,sJo),e(FF,lJo),e(Z,iJo),e(Z,TF),e(TF,g2e),e(g2e,dJo),e(TF,cJo),e(TF,zz),e(zz,mJo),e(TF,fJo),e(Z,gJo),e(Z,MF),e(MF,h2e),e(h2e,hJo),e(MF,uJo),e(MF,Wz),e(Wz,pJo),e(MF,_Jo),e(Z,bJo),e(Z,EF),e(EF,u2e),e(u2e,vJo),e(EF,FJo),e(EF,Qz),e(Qz,TJo),e(EF,MJo),e(Z,EJo),e(Z,CF),e(CF,p2e),e(p2e,CJo),e(CF,wJo),e(CF,Hz),e(Hz,AJo),e(CF,LJo),e(Z,yJo),e(Z,wF),e(wF,_2e),e(_2e,xJo),e(wF,$Jo),e(wF,Uz),e(Uz,kJo),e(wF,SJo),e(Z,RJo),e(Z,AF),e(AF,b2e),e(b2e,PJo),e(AF,BJo),e(AF,Jz),e(Jz,IJo),e(AF,NJo),e(Z,qJo),e(Z,LF),e(LF,v2e),e(v2e,jJo),e(LF,DJo),e(LF,Yz),e(Yz,GJo),e(LF,OJo),e(Z,VJo),e(Z,yF),e(yF,F2e),e(F2e,XJo),e(yF,zJo),e(yF,Kz),e(Kz,WJo),e(yF,QJo),e(Z,HJo),e(Z,xF),e(xF,T2e),e(T2e,UJo),e(xF,JJo),e(xF,Zz),e(Zz,YJo),e(xF,KJo),e(Z,ZJo),e(Z,$F),e($F,M2e),e(M2e,eYo),e($F,oYo),e($F,eW),e(eW,rYo),e($F,tYo),e(Z,aYo),e(Z,kF),e(kF,E2e),e(E2e,nYo),e(kF,sYo),e(kF,oW),e(oW,lYo),e(kF,iYo),e(to,dYo),e(to,SF),e(SF,cYo),e(SF,C2e),e(C2e,mYo),e(SF,fYo),e(SF,w2e),e(w2e,gYo),e(to,hYo),M(RF,to,null),b(m,Ize,_),b(m,md,_),e(md,PF),e(PF,A2e),M(y8,A2e,null),e(md,uYo),e(md,L2e),e(L2e,pYo),b(m,Nze,_),b(m,qo,_),M(x8,qo,null),e(qo,_Yo),e(qo,fd),e(fd,bYo),e(fd,rW),e(rW,vYo),e(fd,FYo),e(fd,tW),e(tW,TYo),e(fd,MYo),e(qo,EYo),e(qo,$8),e($8,CYo),e($8,y2e),e(y2e,wYo),e($8,AYo),e(qo,LYo),e(qo,ut),M(k8,ut,null),e(ut,yYo),e(ut,x2e),e(x2e,xYo),e(ut,$Yo),e(ut,gd),e(gd,kYo),e(gd,$2e),e($2e,SYo),e(gd,RYo),e(gd,aW),e(aW,PYo),e(gd,BYo),e(ut,IYo),M(BF,ut,null),e(qo,NYo),e(qo,ao),M(S8,ao,null),e(ao,qYo),e(ao,k2e),e(k2e,jYo),e(ao,DYo),e(ao,Va),e(Va,GYo),e(Va,S2e),e(S2e,OYo),e(Va,VYo),e(Va,R2e),e(R2e,XYo),e(Va,zYo),e(Va,P2e),e(P2e,WYo),e(Va,QYo),e(ao,HYo),e(ao,jo),e(jo,IF),e(IF,B2e),e(B2e,UYo),e(IF,JYo),e(IF,nW),e(nW,YYo),e(IF,KYo),e(jo,ZYo),e(jo,NF),e(NF,I2e),e(I2e,eKo),e(NF,oKo),e(NF,sW),e(sW,rKo),e(NF,tKo),e(jo,aKo),e(jo,qF),e(qF,N2e),e(N2e,nKo),e(qF,sKo),e(qF,lW),e(lW,lKo),e(qF,iKo),e(jo,dKo),e(jo,jF),e(jF,q2e),e(q2e,cKo),e(jF,mKo),e(jF,iW),e(iW,fKo),e(jF,gKo),e(jo,hKo),e(jo,DF),e(DF,j2e),e(j2e,uKo),e(DF,pKo),e(DF,dW),e(dW,_Ko),e(DF,bKo),e(jo,vKo),e(jo,GF),e(GF,D2e),e(D2e,FKo),e(GF,TKo),e(GF,cW),e(cW,MKo),e(GF,EKo),e(ao,CKo),e(ao,OF),e(OF,wKo),e(OF,G2e),e(G2e,AKo),e(OF,LKo),e(OF,O2e),e(O2e,yKo),e(ao,xKo),M(VF,ao,null),b(m,qze,_),b(m,hd,_),e(hd,XF),e(XF,V2e),M(R8,V2e,null),e(hd,$Ko),e(hd,X2e),e(X2e,kKo),b(m,jze,_),b(m,Do,_),M(P8,Do,null),e(Do,SKo),e(Do,ud),e(ud,RKo),e(ud,mW),e(mW,PKo),e(ud,BKo),e(ud,fW),e(fW,IKo),e(ud,NKo),e(Do,qKo),e(Do,B8),e(B8,jKo),e(B8,z2e),e(z2e,DKo),e(B8,GKo),e(Do,OKo),e(Do,pt),M(I8,pt,null),e(pt,VKo),e(pt,W2e),e(W2e,XKo),e(pt,zKo),e(pt,pd),e(pd,WKo),e(pd,Q2e),e(Q2e,QKo),e(pd,HKo),e(pd,gW),e(gW,UKo),e(pd,JKo),e(pt,YKo),M(zF,pt,null),e(Do,KKo),e(Do,no),M(N8,no,null),e(no,ZKo),e(no,H2e),e(H2e,eZo),e(no,oZo),e(no,Xa),e(Xa,rZo),e(Xa,U2e),e(U2e,tZo),e(Xa,aZo),e(Xa,J2e),e(J2e,nZo),e(Xa,sZo),e(Xa,Y2e),e(Y2e,lZo),e(Xa,iZo),e(no,dZo),e(no,J),e(J,WF),e(WF,K2e),e(K2e,cZo),e(WF,mZo),e(WF,hW),e(hW,fZo),e(WF,gZo),e(J,hZo),e(J,QF),e(QF,Z2e),e(Z2e,uZo),e(QF,pZo),e(QF,uW),e(uW,_Zo),e(QF,bZo),e(J,vZo),e(J,HF),e(HF,ebe),e(ebe,FZo),e(HF,TZo),e(HF,pW),e(pW,MZo),e(HF,EZo),e(J,CZo),e(J,UF),e(UF,obe),e(obe,wZo),e(UF,AZo),e(UF,_W),e(_W,LZo),e(UF,yZo),e(J,xZo),e(J,JF),e(JF,rbe),e(rbe,$Zo),e(JF,kZo),e(JF,bW),e(bW,SZo),e(JF,RZo),e(J,PZo),e(J,YF),e(YF,tbe),e(tbe,BZo),e(YF,IZo),e(YF,vW),e(vW,NZo),e(YF,qZo),e(J,jZo),e(J,KF),e(KF,abe),e(abe,DZo),e(KF,GZo),e(KF,FW),e(FW,OZo),e(KF,VZo),e(J,XZo),e(J,ZF),e(ZF,nbe),e(nbe,zZo),e(ZF,WZo),e(ZF,TW),e(TW,QZo),e(ZF,HZo),e(J,UZo),e(J,eT),e(eT,sbe),e(sbe,JZo),e(eT,YZo),e(eT,MW),e(MW,KZo),e(eT,ZZo),e(J,eer),e(J,oT),e(oT,lbe),e(lbe,oer),e(oT,rer),e(oT,EW),e(EW,ter),e(oT,aer),e(J,ner),e(J,rT),e(rT,ibe),e(ibe,ser),e(rT,ler),e(rT,CW),e(CW,ier),e(rT,der),e(J,cer),e(J,tT),e(tT,dbe),e(dbe,mer),e(tT,fer),e(tT,wW),e(wW,ger),e(tT,her),e(J,uer),e(J,aT),e(aT,cbe),e(cbe,per),e(aT,_er),e(aT,AW),e(AW,ber),e(aT,ver),e(J,Fer),e(J,nT),e(nT,mbe),e(mbe,Ter),e(nT,Mer),e(nT,LW),e(LW,Eer),e(nT,Cer),e(J,wer),e(J,sT),e(sT,fbe),e(fbe,Aer),e(sT,Ler),e(sT,yW),e(yW,yer),e(sT,xer),e(J,$er),e(J,lT),e(lT,gbe),e(gbe,ker),e(lT,Ser),e(lT,xW),e(xW,Rer),e(lT,Per),e(J,Ber),e(J,iT),e(iT,hbe),e(hbe,Ier),e(iT,Ner),e(iT,$W),e($W,qer),e(iT,jer),e(J,Der),e(J,dT),e(dT,ube),e(ube,Ger),e(dT,Oer),e(dT,kW),e(kW,Ver),e(dT,Xer),e(J,zer),e(J,cT),e(cT,pbe),e(pbe,Wer),e(cT,Qer),e(cT,SW),e(SW,Her),e(cT,Uer),e(J,Jer),e(J,mT),e(mT,_be),e(_be,Yer),e(mT,Ker),e(mT,RW),e(RW,Zer),e(mT,eor),e(J,oor),e(J,fT),e(fT,bbe),e(bbe,ror),e(fT,tor),e(fT,PW),e(PW,aor),e(fT,nor),e(J,sor),e(J,gT),e(gT,vbe),e(vbe,lor),e(gT,ior),e(gT,BW),e(BW,dor),e(gT,cor),e(J,mor),e(J,hT),e(hT,Fbe),e(Fbe,gor),e(hT,hor),e(hT,IW),e(IW,uor),e(hT,por),e(J,_or),e(J,uT),e(uT,Tbe),e(Tbe,bor),e(uT,vor),e(uT,NW),e(NW,For),e(uT,Tor),e(J,Mor),e(J,pT),e(pT,Mbe),e(Mbe,Eor),e(pT,Cor),e(pT,qW),e(qW,wor),e(pT,Aor),e(J,Lor),e(J,_T),e(_T,Ebe),e(Ebe,yor),e(_T,xor),e(_T,jW),e(jW,$or),e(_T,kor),e(J,Sor),e(J,bT),e(bT,Cbe),e(Cbe,Ror),e(bT,Por),e(bT,DW),e(DW,Bor),e(bT,Ior),e(J,Nor),e(J,vT),e(vT,wbe),e(wbe,qor),e(vT,jor),e(vT,GW),e(GW,Dor),e(vT,Gor),e(J,Oor),e(J,FT),e(FT,Abe),e(Abe,Vor),e(FT,Xor),e(FT,OW),e(OW,zor),e(FT,Wor),e(J,Qor),e(J,TT),e(TT,Lbe),e(Lbe,Hor),e(TT,Uor),e(TT,VW),e(VW,Jor),e(TT,Yor),e(J,Kor),e(J,MT),e(MT,ybe),e(ybe,Zor),e(MT,err),e(MT,XW),e(XW,orr),e(MT,rrr),e(J,trr),e(J,ET),e(ET,xbe),e(xbe,arr),e(ET,nrr),e(ET,zW),e(zW,srr),e(ET,lrr),e(J,irr),e(J,CT),e(CT,$be),e($be,drr),e(CT,crr),e(CT,WW),e(WW,mrr),e(CT,frr),e(J,grr),e(J,wT),e(wT,kbe),e(kbe,hrr),e(wT,urr),e(wT,QW),e(QW,prr),e(wT,_rr),e(J,brr),e(J,AT),e(AT,Sbe),e(Sbe,vrr),e(AT,Frr),e(AT,HW),e(HW,Trr),e(AT,Mrr),e(J,Err),e(J,LT),e(LT,Rbe),e(Rbe,Crr),e(LT,wrr),e(LT,UW),e(UW,Arr),e(LT,Lrr),e(no,yrr),e(no,yT),e(yT,xrr),e(yT,Pbe),e(Pbe,$rr),e(yT,krr),e(yT,Bbe),e(Bbe,Srr),e(no,Rrr),M(xT,no,null),b(m,Dze,_),b(m,_d,_),e(_d,$T),e($T,Ibe),M(q8,Ibe,null),e(_d,Prr),e(_d,Nbe),e(Nbe,Brr),b(m,Gze,_),b(m,Go,_),M(j8,Go,null),e(Go,Irr),e(Go,bd),e(bd,Nrr),e(bd,JW),e(JW,qrr),e(bd,jrr),e(bd,YW),e(YW,Drr),e(bd,Grr),e(Go,Orr),e(Go,D8),e(D8,Vrr),e(D8,qbe),e(qbe,Xrr),e(D8,zrr),e(Go,Wrr),e(Go,_t),M(G8,_t,null),e(_t,Qrr),e(_t,jbe),e(jbe,Hrr),e(_t,Urr),e(_t,vd),e(vd,Jrr),e(vd,Dbe),e(Dbe,Yrr),e(vd,Krr),e(vd,KW),e(KW,Zrr),e(vd,etr),e(_t,otr),M(kT,_t,null),e(Go,rtr),e(Go,so),M(O8,so,null),e(so,ttr),e(so,Gbe),e(Gbe,atr),e(so,ntr),e(so,za),e(za,str),e(za,Obe),e(Obe,ltr),e(za,itr),e(za,Vbe),e(Vbe,dtr),e(za,ctr),e(za,Xbe),e(Xbe,mtr),e(za,ftr),e(so,gtr),e(so,V),e(V,ST),e(ST,zbe),e(zbe,htr),e(ST,utr),e(ST,ZW),e(ZW,ptr),e(ST,_tr),e(V,btr),e(V,RT),e(RT,Wbe),e(Wbe,vtr),e(RT,Ftr),e(RT,eQ),e(eQ,Ttr),e(RT,Mtr),e(V,Etr),e(V,PT),e(PT,Qbe),e(Qbe,Ctr),e(PT,wtr),e(PT,oQ),e(oQ,Atr),e(PT,Ltr),e(V,ytr),e(V,BT),e(BT,Hbe),e(Hbe,xtr),e(BT,$tr),e(BT,rQ),e(rQ,ktr),e(BT,Str),e(V,Rtr),e(V,IT),e(IT,Ube),e(Ube,Ptr),e(IT,Btr),e(IT,tQ),e(tQ,Itr),e(IT,Ntr),e(V,qtr),e(V,NT),e(NT,Jbe),e(Jbe,jtr),e(NT,Dtr),e(NT,aQ),e(aQ,Gtr),e(NT,Otr),e(V,Vtr),e(V,qT),e(qT,Ybe),e(Ybe,Xtr),e(qT,ztr),e(qT,nQ),e(nQ,Wtr),e(qT,Qtr),e(V,Htr),e(V,jT),e(jT,Kbe),e(Kbe,Utr),e(jT,Jtr),e(jT,sQ),e(sQ,Ytr),e(jT,Ktr),e(V,Ztr),e(V,DT),e(DT,Zbe),e(Zbe,ear),e(DT,oar),e(DT,lQ),e(lQ,rar),e(DT,tar),e(V,aar),e(V,GT),e(GT,eve),e(eve,nar),e(GT,sar),e(GT,iQ),e(iQ,lar),e(GT,iar),e(V,dar),e(V,OT),e(OT,ove),e(ove,car),e(OT,mar),e(OT,dQ),e(dQ,far),e(OT,gar),e(V,har),e(V,VT),e(VT,rve),e(rve,uar),e(VT,par),e(VT,cQ),e(cQ,_ar),e(VT,bar),e(V,Far),e(V,XT),e(XT,tve),e(tve,Tar),e(XT,Mar),e(XT,mQ),e(mQ,Ear),e(XT,Car),e(V,war),e(V,zT),e(zT,ave),e(ave,Aar),e(zT,Lar),e(zT,fQ),e(fQ,yar),e(zT,xar),e(V,$ar),e(V,WT),e(WT,nve),e(nve,kar),e(WT,Sar),e(WT,gQ),e(gQ,Rar),e(WT,Par),e(V,Bar),e(V,QT),e(QT,sve),e(sve,Iar),e(QT,Nar),e(QT,hQ),e(hQ,qar),e(QT,jar),e(V,Dar),e(V,HT),e(HT,lve),e(lve,Gar),e(HT,Oar),e(HT,uQ),e(uQ,Var),e(HT,Xar),e(V,zar),e(V,UT),e(UT,ive),e(ive,War),e(UT,Qar),e(UT,pQ),e(pQ,Har),e(UT,Uar),e(V,Jar),e(V,JT),e(JT,dve),e(dve,Yar),e(JT,Kar),e(JT,_Q),e(_Q,Zar),e(JT,enr),e(V,onr),e(V,YT),e(YT,cve),e(cve,rnr),e(YT,tnr),e(YT,bQ),e(bQ,anr),e(YT,nnr),e(V,snr),e(V,KT),e(KT,mve),e(mve,lnr),e(KT,inr),e(KT,vQ),e(vQ,dnr),e(KT,cnr),e(V,mnr),e(V,ZT),e(ZT,fve),e(fve,fnr),e(ZT,gnr),e(ZT,FQ),e(FQ,hnr),e(ZT,unr),e(V,pnr),e(V,eM),e(eM,gve),e(gve,_nr),e(eM,bnr),e(eM,TQ),e(TQ,vnr),e(eM,Fnr),e(V,Tnr),e(V,oM),e(oM,hve),e(hve,Mnr),e(oM,Enr),e(oM,MQ),e(MQ,Cnr),e(oM,wnr),e(V,Anr),e(V,rM),e(rM,uve),e(uve,Lnr),e(rM,ynr),e(rM,EQ),e(EQ,xnr),e(rM,$nr),e(V,knr),e(V,tM),e(tM,pve),e(pve,Snr),e(tM,Rnr),e(tM,CQ),e(CQ,Pnr),e(tM,Bnr),e(V,Inr),e(V,aM),e(aM,_ve),e(_ve,Nnr),e(aM,qnr),e(aM,wQ),e(wQ,jnr),e(aM,Dnr),e(V,Gnr),e(V,nM),e(nM,bve),e(bve,Onr),e(nM,Vnr),e(nM,AQ),e(AQ,Xnr),e(nM,znr),e(V,Wnr),e(V,sM),e(sM,vve),e(vve,Qnr),e(sM,Hnr),e(sM,LQ),e(LQ,Unr),e(sM,Jnr),e(V,Ynr),e(V,lM),e(lM,Fve),e(Fve,Knr),e(lM,Znr),e(lM,yQ),e(yQ,esr),e(lM,osr),e(V,rsr),e(V,iM),e(iM,Tve),e(Tve,tsr),e(iM,asr),e(iM,xQ),e(xQ,nsr),e(iM,ssr),e(V,lsr),e(V,dM),e(dM,Mve),e(Mve,isr),e(dM,dsr),e(dM,$Q),e($Q,csr),e(dM,msr),e(V,fsr),e(V,cM),e(cM,Eve),e(Eve,gsr),e(cM,hsr),e(cM,kQ),e(kQ,usr),e(cM,psr),e(V,_sr),e(V,mM),e(mM,Cve),e(Cve,bsr),e(mM,vsr),e(mM,SQ),e(SQ,Fsr),e(mM,Tsr),e(V,Msr),e(V,fM),e(fM,wve),e(wve,Esr),e(fM,Csr),e(fM,RQ),e(RQ,wsr),e(fM,Asr),e(V,Lsr),e(V,gM),e(gM,Ave),e(Ave,ysr),e(gM,xsr),e(gM,PQ),e(PQ,$sr),e(gM,ksr),e(V,Ssr),e(V,hM),e(hM,Lve),e(Lve,Rsr),e(hM,Psr),e(hM,BQ),e(BQ,Bsr),e(hM,Isr),e(V,Nsr),e(V,uM),e(uM,yve),e(yve,qsr),e(uM,jsr),e(uM,IQ),e(IQ,Dsr),e(uM,Gsr),e(V,Osr),e(V,pM),e(pM,xve),e(xve,Vsr),e(pM,Xsr),e(pM,NQ),e(NQ,zsr),e(pM,Wsr),e(V,Qsr),e(V,_M),e(_M,$ve),e($ve,Hsr),e(_M,Usr),e(_M,qQ),e(qQ,Jsr),e(_M,Ysr),e(V,Ksr),e(V,bM),e(bM,kve),e(kve,Zsr),e(bM,elr),e(bM,jQ),e(jQ,olr),e(bM,rlr),e(V,tlr),e(V,vM),e(vM,Sve),e(Sve,alr),e(vM,nlr),e(vM,DQ),e(DQ,slr),e(vM,llr),e(so,ilr),e(so,FM),e(FM,dlr),e(FM,Rve),e(Rve,clr),e(FM,mlr),e(FM,Pve),e(Pve,flr),e(so,glr),M(TM,so,null),b(m,Oze,_),b(m,Fd,_),e(Fd,MM),e(MM,Bve),M(V8,Bve,null),e(Fd,hlr),e(Fd,Ive),e(Ive,ulr),b(m,Vze,_),b(m,Oo,_),M(X8,Oo,null),e(Oo,plr),e(Oo,Td),e(Td,_lr),e(Td,GQ),e(GQ,blr),e(Td,vlr),e(Td,OQ),e(OQ,Flr),e(Td,Tlr),e(Oo,Mlr),e(Oo,z8),e(z8,Elr),e(z8,Nve),e(Nve,Clr),e(z8,wlr),e(Oo,Alr),e(Oo,bt),M(W8,bt,null),e(bt,Llr),e(bt,qve),e(qve,ylr),e(bt,xlr),e(bt,Md),e(Md,$lr),e(Md,jve),e(jve,klr),e(Md,Slr),e(Md,VQ),e(VQ,Rlr),e(Md,Plr),e(bt,Blr),M(EM,bt,null),e(Oo,Ilr),e(Oo,lo),M(Q8,lo,null),e(lo,Nlr),e(lo,Dve),e(Dve,qlr),e(lo,jlr),e(lo,Wa),e(Wa,Dlr),e(Wa,Gve),e(Gve,Glr),e(Wa,Olr),e(Wa,Ove),e(Ove,Vlr),e(Wa,Xlr),e(Wa,Vve),e(Vve,zlr),e(Wa,Wlr),e(lo,Qlr),e(lo,Xve),e(Xve,CM),e(CM,zve),e(zve,Hlr),e(CM,Ulr),e(CM,XQ),e(XQ,Jlr),e(CM,Ylr),e(lo,Klr),e(lo,wM),e(wM,Zlr),e(wM,Wve),e(Wve,eir),e(wM,oir),e(wM,Qve),e(Qve,rir),e(lo,tir),M(AM,lo,null),b(m,Xze,_),b(m,Ed,_),e(Ed,LM),e(LM,Hve),M(H8,Hve,null),e(Ed,air),e(Ed,Uve),e(Uve,nir),b(m,zze,_),b(m,Vo,_),M(U8,Vo,null),e(Vo,sir),e(Vo,Cd),e(Cd,lir),e(Cd,zQ),e(zQ,iir),e(Cd,dir),e(Cd,WQ),e(WQ,cir),e(Cd,mir),e(Vo,fir),e(Vo,J8),e(J8,gir),e(J8,Jve),e(Jve,hir),e(J8,uir),e(Vo,pir),e(Vo,vt),M(Y8,vt,null),e(vt,_ir),e(vt,Yve),e(Yve,bir),e(vt,vir),e(vt,wd),e(wd,Fir),e(wd,Kve),e(Kve,Tir),e(wd,Mir),e(wd,QQ),e(QQ,Eir),e(wd,Cir),e(vt,wir),M(yM,vt,null),e(Vo,Air),e(Vo,io),M(K8,io,null),e(io,Lir),e(io,Zve),e(Zve,yir),e(io,xir),e(io,Qa),e(Qa,$ir),e(Qa,e1e),e(e1e,kir),e(Qa,Sir),e(Qa,o1e),e(o1e,Rir),e(Qa,Pir),e(Qa,r1e),e(r1e,Bir),e(Qa,Iir),e(io,Nir),e(io,be),e(be,xM),e(xM,t1e),e(t1e,qir),e(xM,jir),e(xM,HQ),e(HQ,Dir),e(xM,Gir),e(be,Oir),e(be,$M),e($M,a1e),e(a1e,Vir),e($M,Xir),e($M,UQ),e(UQ,zir),e($M,Wir),e(be,Qir),e(be,kM),e(kM,n1e),e(n1e,Hir),e(kM,Uir),e(kM,JQ),e(JQ,Jir),e(kM,Yir),e(be,Kir),e(be,SM),e(SM,s1e),e(s1e,Zir),e(SM,edr),e(SM,YQ),e(YQ,odr),e(SM,rdr),e(be,tdr),e(be,Ys),e(Ys,l1e),e(l1e,adr),e(Ys,ndr),e(Ys,KQ),e(KQ,sdr),e(Ys,ldr),e(Ys,ZQ),e(ZQ,idr),e(Ys,ddr),e(be,cdr),e(be,RM),e(RM,i1e),e(i1e,mdr),e(RM,fdr),e(RM,eH),e(eH,gdr),e(RM,hdr),e(be,udr),e(be,Ks),e(Ks,d1e),e(d1e,pdr),e(Ks,_dr),e(Ks,oH),e(oH,bdr),e(Ks,vdr),e(Ks,rH),e(rH,Fdr),e(Ks,Tdr),e(be,Mdr),e(be,PM),e(PM,c1e),e(c1e,Edr),e(PM,Cdr),e(PM,tH),e(tH,wdr),e(PM,Adr),e(be,Ldr),e(be,Ft),e(Ft,m1e),e(m1e,ydr),e(Ft,xdr),e(Ft,aH),e(aH,$dr),e(Ft,kdr),e(Ft,nH),e(nH,Sdr),e(Ft,Rdr),e(Ft,sH),e(sH,Pdr),e(Ft,Bdr),e(be,Idr),e(be,BM),e(BM,f1e),e(f1e,Ndr),e(BM,qdr),e(BM,lH),e(lH,jdr),e(BM,Ddr),e(be,Gdr),e(be,IM),e(IM,g1e),e(g1e,Odr),e(IM,Vdr),e(IM,iH),e(iH,Xdr),e(IM,zdr),e(be,Wdr),e(be,NM),e(NM,h1e),e(h1e,Qdr),e(NM,Hdr),e(NM,dH),e(dH,Udr),e(NM,Jdr),e(be,Ydr),e(be,qM),e(qM,u1e),e(u1e,Kdr),e(qM,Zdr),e(qM,cH),e(cH,ecr),e(qM,ocr),e(be,rcr),e(be,jM),e(jM,p1e),e(p1e,tcr),e(jM,acr),e(jM,mH),e(mH,ncr),e(jM,scr),e(be,lcr),e(be,DM),e(DM,_1e),e(_1e,icr),e(DM,dcr),e(DM,fH),e(fH,ccr),e(DM,mcr),e(be,fcr),e(be,GM),e(GM,b1e),e(b1e,gcr),e(GM,hcr),e(GM,gH),e(gH,ucr),e(GM,pcr),e(be,_cr),e(be,OM),e(OM,v1e),e(v1e,bcr),e(OM,vcr),e(OM,hH),e(hH,Fcr),e(OM,Tcr),e(io,Mcr),e(io,VM),e(VM,Ecr),e(VM,F1e),e(F1e,Ccr),e(VM,wcr),e(VM,T1e),e(T1e,Acr),e(io,Lcr),M(XM,io,null),b(m,Wze,_),b(m,Ad,_),e(Ad,zM),e(zM,M1e),M(Z8,M1e,null),e(Ad,ycr),e(Ad,E1e),e(E1e,xcr),b(m,Qze,_),b(m,Xo,_),M(e9,Xo,null),e(Xo,$cr),e(Xo,Ld),e(Ld,kcr),e(Ld,uH),e(uH,Scr),e(Ld,Rcr),e(Ld,pH),e(pH,Pcr),e(Ld,Bcr),e(Xo,Icr),e(Xo,o9),e(o9,Ncr),e(o9,C1e),e(C1e,qcr),e(o9,jcr),e(Xo,Dcr),e(Xo,Tt),M(r9,Tt,null),e(Tt,Gcr),e(Tt,w1e),e(w1e,Ocr),e(Tt,Vcr),e(Tt,yd),e(yd,Xcr),e(yd,A1e),e(A1e,zcr),e(yd,Wcr),e(yd,_H),e(_H,Qcr),e(yd,Hcr),e(Tt,Ucr),M(WM,Tt,null),e(Xo,Jcr),e(Xo,co),M(t9,co,null),e(co,Ycr),e(co,L1e),e(L1e,Kcr),e(co,Zcr),e(co,Ha),e(Ha,emr),e(Ha,y1e),e(y1e,omr),e(Ha,rmr),e(Ha,x1e),e(x1e,tmr),e(Ha,amr),e(Ha,$1e),e($1e,nmr),e(Ha,smr),e(co,lmr),e(co,k1e),e(k1e,QM),e(QM,S1e),e(S1e,imr),e(QM,dmr),e(QM,bH),e(bH,cmr),e(QM,mmr),e(co,fmr),e(co,HM),e(HM,gmr),e(HM,R1e),e(R1e,hmr),e(HM,umr),e(HM,P1e),e(P1e,pmr),e(co,_mr),M(UM,co,null),b(m,Hze,_),b(m,xd,_),e(xd,JM),e(JM,B1e),M(a9,B1e,null),e(xd,bmr),e(xd,I1e),e(I1e,vmr),b(m,Uze,_),b(m,zo,_),M(n9,zo,null),e(zo,Fmr),e(zo,$d),e($d,Tmr),e($d,vH),e(vH,Mmr),e($d,Emr),e($d,FH),e(FH,Cmr),e($d,wmr),e(zo,Amr),e(zo,s9),e(s9,Lmr),e(s9,N1e),e(N1e,ymr),e(s9,xmr),e(zo,$mr),e(zo,Mt),M(l9,Mt,null),e(Mt,kmr),e(Mt,q1e),e(q1e,Smr),e(Mt,Rmr),e(Mt,kd),e(kd,Pmr),e(kd,j1e),e(j1e,Bmr),e(kd,Imr),e(kd,TH),e(TH,Nmr),e(kd,qmr),e(Mt,jmr),M(YM,Mt,null),e(zo,Dmr),e(zo,mo),M(i9,mo,null),e(mo,Gmr),e(mo,D1e),e(D1e,Omr),e(mo,Vmr),e(mo,Ua),e(Ua,Xmr),e(Ua,G1e),e(G1e,zmr),e(Ua,Wmr),e(Ua,O1e),e(O1e,Qmr),e(Ua,Hmr),e(Ua,V1e),e(V1e,Umr),e(Ua,Jmr),e(mo,Ymr),e(mo,X1e),e(X1e,KM),e(KM,z1e),e(z1e,Kmr),e(KM,Zmr),e(KM,MH),e(MH,efr),e(KM,ofr),e(mo,rfr),e(mo,ZM),e(ZM,tfr),e(ZM,W1e),e(W1e,afr),e(ZM,nfr),e(ZM,Q1e),e(Q1e,sfr),e(mo,lfr),M(e4,mo,null),b(m,Jze,_),b(m,Sd,_),e(Sd,o4),e(o4,H1e),M(d9,H1e,null),e(Sd,ifr),e(Sd,U1e),e(U1e,dfr),b(m,Yze,_),b(m,Wo,_),M(c9,Wo,null),e(Wo,cfr),e(Wo,Rd),e(Rd,mfr),e(Rd,EH),e(EH,ffr),e(Rd,gfr),e(Rd,CH),e(CH,hfr),e(Rd,ufr),e(Wo,pfr),e(Wo,m9),e(m9,_fr),e(m9,J1e),e(J1e,bfr),e(m9,vfr),e(Wo,Ffr),e(Wo,Et),M(f9,Et,null),e(Et,Tfr),e(Et,Y1e),e(Y1e,Mfr),e(Et,Efr),e(Et,Pd),e(Pd,Cfr),e(Pd,K1e),e(K1e,wfr),e(Pd,Afr),e(Pd,wH),e(wH,Lfr),e(Pd,yfr),e(Et,xfr),M(r4,Et,null),e(Wo,$fr),e(Wo,fo),M(g9,fo,null),e(fo,kfr),e(fo,Z1e),e(Z1e,Sfr),e(fo,Rfr),e(fo,Ja),e(Ja,Pfr),e(Ja,eFe),e(eFe,Bfr),e(Ja,Ifr),e(Ja,oFe),e(oFe,Nfr),e(Ja,qfr),e(Ja,rFe),e(rFe,jfr),e(Ja,Dfr),e(fo,Gfr),e(fo,Pe),e(Pe,t4),e(t4,tFe),e(tFe,Ofr),e(t4,Vfr),e(t4,AH),e(AH,Xfr),e(t4,zfr),e(Pe,Wfr),e(Pe,a4),e(a4,aFe),e(aFe,Qfr),e(a4,Hfr),e(a4,LH),e(LH,Ufr),e(a4,Jfr),e(Pe,Yfr),e(Pe,n4),e(n4,nFe),e(nFe,Kfr),e(n4,Zfr),e(n4,yH),e(yH,egr),e(n4,ogr),e(Pe,rgr),e(Pe,s4),e(s4,sFe),e(sFe,tgr),e(s4,agr),e(s4,xH),e(xH,ngr),e(s4,sgr),e(Pe,lgr),e(Pe,l4),e(l4,lFe),e(lFe,igr),e(l4,dgr),e(l4,$H),e($H,cgr),e(l4,mgr),e(Pe,fgr),e(Pe,i4),e(i4,iFe),e(iFe,ggr),e(i4,hgr),e(i4,kH),e(kH,ugr),e(i4,pgr),e(Pe,_gr),e(Pe,d4),e(d4,dFe),e(dFe,bgr),e(d4,vgr),e(d4,SH),e(SH,Fgr),e(d4,Tgr),e(Pe,Mgr),e(Pe,c4),e(c4,cFe),e(cFe,Egr),e(c4,Cgr),e(c4,RH),e(RH,wgr),e(c4,Agr),e(Pe,Lgr),e(Pe,m4),e(m4,mFe),e(mFe,ygr),e(m4,xgr),e(m4,PH),e(PH,$gr),e(m4,kgr),e(fo,Sgr),e(fo,f4),e(f4,Rgr),e(f4,fFe),e(fFe,Pgr),e(f4,Bgr),e(f4,gFe),e(gFe,Igr),e(fo,Ngr),M(g4,fo,null),b(m,Kze,_),b(m,Bd,_),e(Bd,h4),e(h4,hFe),M(h9,hFe,null),e(Bd,qgr),e(Bd,uFe),e(uFe,jgr),b(m,Zze,_),b(m,Qo,_),M(u9,Qo,null),e(Qo,Dgr),e(Qo,Id),e(Id,Ggr),e(Id,BH),e(BH,Ogr),e(Id,Vgr),e(Id,IH),e(IH,Xgr),e(Id,zgr),e(Qo,Wgr),e(Qo,p9),e(p9,Qgr),e(p9,pFe),e(pFe,Hgr),e(p9,Ugr),e(Qo,Jgr),e(Qo,Ct),M(_9,Ct,null),e(Ct,Ygr),e(Ct,_Fe),e(_Fe,Kgr),e(Ct,Zgr),e(Ct,Nd),e(Nd,ehr),e(Nd,bFe),e(bFe,ohr),e(Nd,rhr),e(Nd,NH),e(NH,thr),e(Nd,ahr),e(Ct,nhr),M(u4,Ct,null),e(Qo,shr),e(Qo,go),M(b9,go,null),e(go,lhr),e(go,vFe),e(vFe,ihr),e(go,dhr),e(go,Ya),e(Ya,chr),e(Ya,FFe),e(FFe,mhr),e(Ya,fhr),e(Ya,TFe),e(TFe,ghr),e(Ya,hhr),e(Ya,MFe),e(MFe,uhr),e(Ya,phr),e(go,_hr),e(go,rt),e(rt,p4),e(p4,EFe),e(EFe,bhr),e(p4,vhr),e(p4,qH),e(qH,Fhr),e(p4,Thr),e(rt,Mhr),e(rt,_4),e(_4,CFe),e(CFe,Ehr),e(_4,Chr),e(_4,jH),e(jH,whr),e(_4,Ahr),e(rt,Lhr),e(rt,b4),e(b4,wFe),e(wFe,yhr),e(b4,xhr),e(b4,DH),e(DH,$hr),e(b4,khr),e(rt,Shr),e(rt,v4),e(v4,AFe),e(AFe,Rhr),e(v4,Phr),e(v4,GH),e(GH,Bhr),e(v4,Ihr),e(rt,Nhr),e(rt,F4),e(F4,LFe),e(LFe,qhr),e(F4,jhr),e(F4,OH),e(OH,Dhr),e(F4,Ghr),e(go,Ohr),e(go,T4),e(T4,Vhr),e(T4,yFe),e(yFe,Xhr),e(T4,zhr),e(T4,xFe),e(xFe,Whr),e(go,Qhr),M(M4,go,null),b(m,eWe,_),b(m,qd,_),e(qd,E4),e(E4,$Fe),M(v9,$Fe,null),e(qd,Hhr),e(qd,kFe),e(kFe,Uhr),b(m,oWe,_),b(m,Ho,_),M(F9,Ho,null),e(Ho,Jhr),e(Ho,jd),e(jd,Yhr),e(jd,VH),e(VH,Khr),e(jd,Zhr),e(jd,XH),e(XH,eur),e(jd,our),e(Ho,rur),e(Ho,T9),e(T9,tur),e(T9,SFe),e(SFe,aur),e(T9,nur),e(Ho,sur),e(Ho,wt),M(M9,wt,null),e(wt,lur),e(wt,RFe),e(RFe,iur),e(wt,dur),e(wt,Dd),e(Dd,cur),e(Dd,PFe),e(PFe,mur),e(Dd,fur),e(Dd,zH),e(zH,gur),e(Dd,hur),e(wt,uur),M(C4,wt,null),e(Ho,pur),e(Ho,ho),M(E9,ho,null),e(ho,_ur),e(ho,BFe),e(BFe,bur),e(ho,vur),e(ho,Ka),e(Ka,Fur),e(Ka,IFe),e(IFe,Tur),e(Ka,Mur),e(Ka,NFe),e(NFe,Eur),e(Ka,Cur),e(Ka,qFe),e(qFe,wur),e(Ka,Aur),e(ho,Lur),e(ho,Le),e(Le,w4),e(w4,jFe),e(jFe,yur),e(w4,xur),e(w4,WH),e(WH,$ur),e(w4,kur),e(Le,Sur),e(Le,A4),e(A4,DFe),e(DFe,Rur),e(A4,Pur),e(A4,QH),e(QH,Bur),e(A4,Iur),e(Le,Nur),e(Le,L4),e(L4,GFe),e(GFe,qur),e(L4,jur),e(L4,HH),e(HH,Dur),e(L4,Gur),e(Le,Our),e(Le,y4),e(y4,OFe),e(OFe,Vur),e(y4,Xur),e(y4,UH),e(UH,zur),e(y4,Wur),e(Le,Qur),e(Le,x4),e(x4,VFe),e(VFe,Hur),e(x4,Uur),e(x4,JH),e(JH,Jur),e(x4,Yur),e(Le,Kur),e(Le,$4),e($4,XFe),e(XFe,Zur),e($4,epr),e($4,YH),e(YH,opr),e($4,rpr),e(Le,tpr),e(Le,k4),e(k4,zFe),e(zFe,apr),e(k4,npr),e(k4,KH),e(KH,spr),e(k4,lpr),e(Le,ipr),e(Le,S4),e(S4,WFe),e(WFe,dpr),e(S4,cpr),e(S4,ZH),e(ZH,mpr),e(S4,fpr),e(Le,gpr),e(Le,R4),e(R4,QFe),e(QFe,hpr),e(R4,upr),e(R4,eU),e(eU,ppr),e(R4,_pr),e(Le,bpr),e(Le,P4),e(P4,HFe),e(HFe,vpr),e(P4,Fpr),e(P4,oU),e(oU,Tpr),e(P4,Mpr),e(ho,Epr),e(ho,B4),e(B4,Cpr),e(B4,UFe),e(UFe,wpr),e(B4,Apr),e(B4,JFe),e(JFe,Lpr),e(ho,ypr),M(I4,ho,null),b(m,rWe,_),b(m,Gd,_),e(Gd,N4),e(N4,YFe),M(C9,YFe,null),e(Gd,xpr),e(Gd,KFe),e(KFe,$pr),b(m,tWe,_),b(m,Uo,_),M(w9,Uo,null),e(Uo,kpr),e(Uo,Od),e(Od,Spr),e(Od,rU),e(rU,Rpr),e(Od,Ppr),e(Od,tU),e(tU,Bpr),e(Od,Ipr),e(Uo,Npr),e(Uo,A9),e(A9,qpr),e(A9,ZFe),e(ZFe,jpr),e(A9,Dpr),e(Uo,Gpr),e(Uo,At),M(L9,At,null),e(At,Opr),e(At,eTe),e(eTe,Vpr),e(At,Xpr),e(At,Vd),e(Vd,zpr),e(Vd,oTe),e(oTe,Wpr),e(Vd,Qpr),e(Vd,aU),e(aU,Hpr),e(Vd,Upr),e(At,Jpr),M(q4,At,null),e(Uo,Ypr),e(Uo,uo),M(y9,uo,null),e(uo,Kpr),e(uo,rTe),e(rTe,Zpr),e(uo,e_r),e(uo,Za),e(Za,o_r),e(Za,tTe),e(tTe,r_r),e(Za,t_r),e(Za,aTe),e(aTe,a_r),e(Za,n_r),e(Za,nTe),e(nTe,s_r),e(Za,l_r),e(uo,i_r),e(uo,x9),e(x9,j4),e(j4,sTe),e(sTe,d_r),e(j4,c_r),e(j4,nU),e(nU,m_r),e(j4,f_r),e(x9,g_r),e(x9,D4),e(D4,lTe),e(lTe,h_r),e(D4,u_r),e(D4,sU),e(sU,p_r),e(D4,__r),e(uo,b_r),e(uo,G4),e(G4,v_r),e(G4,iTe),e(iTe,F_r),e(G4,T_r),e(G4,dTe),e(dTe,M_r),e(uo,E_r),M(O4,uo,null),b(m,aWe,_),b(m,Xd,_),e(Xd,V4),e(V4,cTe),M($9,cTe,null),e(Xd,C_r),e(Xd,mTe),e(mTe,w_r),b(m,nWe,_),b(m,Jo,_),M(k9,Jo,null),e(Jo,A_r),e(Jo,zd),e(zd,L_r),e(zd,lU),e(lU,y_r),e(zd,x_r),e(zd,iU),e(iU,$_r),e(zd,k_r),e(Jo,S_r),e(Jo,S9),e(S9,R_r),e(S9,fTe),e(fTe,P_r),e(S9,B_r),e(Jo,I_r),e(Jo,Lt),M(R9,Lt,null),e(Lt,N_r),e(Lt,gTe),e(gTe,q_r),e(Lt,j_r),e(Lt,Wd),e(Wd,D_r),e(Wd,hTe),e(hTe,G_r),e(Wd,O_r),e(Wd,dU),e(dU,V_r),e(Wd,X_r),e(Lt,z_r),M(X4,Lt,null),e(Jo,W_r),e(Jo,po),M(P9,po,null),e(po,Q_r),e(po,uTe),e(uTe,H_r),e(po,U_r),e(po,en),e(en,J_r),e(en,pTe),e(pTe,Y_r),e(en,K_r),e(en,_Te),e(_Te,Z_r),e(en,e2r),e(en,bTe),e(bTe,o2r),e(en,r2r),e(po,t2r),e(po,tt),e(tt,z4),e(z4,vTe),e(vTe,a2r),e(z4,n2r),e(z4,cU),e(cU,s2r),e(z4,l2r),e(tt,i2r),e(tt,W4),e(W4,FTe),e(FTe,d2r),e(W4,c2r),e(W4,mU),e(mU,m2r),e(W4,f2r),e(tt,g2r),e(tt,Q4),e(Q4,TTe),e(TTe,h2r),e(Q4,u2r),e(Q4,fU),e(fU,p2r),e(Q4,_2r),e(tt,b2r),e(tt,H4),e(H4,MTe),e(MTe,v2r),e(H4,F2r),e(H4,gU),e(gU,T2r),e(H4,M2r),e(tt,E2r),e(tt,U4),e(U4,ETe),e(ETe,C2r),e(U4,w2r),e(U4,hU),e(hU,A2r),e(U4,L2r),e(po,y2r),e(po,J4),e(J4,x2r),e(J4,CTe),e(CTe,$2r),e(J4,k2r),e(J4,wTe),e(wTe,S2r),e(po,R2r),M(Y4,po,null),b(m,sWe,_),b(m,Qd,_),e(Qd,K4),e(K4,ATe),M(B9,ATe,null),e(Qd,P2r),e(Qd,LTe),e(LTe,B2r),b(m,lWe,_),b(m,Yo,_),M(I9,Yo,null),e(Yo,I2r),e(Yo,Hd),e(Hd,N2r),e(Hd,uU),e(uU,q2r),e(Hd,j2r),e(Hd,pU),e(pU,D2r),e(Hd,G2r),e(Yo,O2r),e(Yo,N9),e(N9,V2r),e(N9,yTe),e(yTe,X2r),e(N9,z2r),e(Yo,W2r),e(Yo,yt),M(q9,yt,null),e(yt,Q2r),e(yt,xTe),e(xTe,H2r),e(yt,U2r),e(yt,Ud),e(Ud,J2r),e(Ud,$Te),e($Te,Y2r),e(Ud,K2r),e(Ud,_U),e(_U,Z2r),e(Ud,ebr),e(yt,obr),M(Z4,yt,null),e(Yo,rbr),e(Yo,_o),M(j9,_o,null),e(_o,tbr),e(_o,kTe),e(kTe,abr),e(_o,nbr),e(_o,on),e(on,sbr),e(on,STe),e(STe,lbr),e(on,ibr),e(on,RTe),e(RTe,dbr),e(on,cbr),e(on,PTe),e(PTe,mbr),e(on,fbr),e(_o,gbr),e(_o,rn),e(rn,eE),e(eE,BTe),e(BTe,hbr),e(eE,ubr),e(eE,bU),e(bU,pbr),e(eE,_br),e(rn,bbr),e(rn,oE),e(oE,ITe),e(ITe,vbr),e(oE,Fbr),e(oE,vU),e(vU,Tbr),e(oE,Mbr),e(rn,Ebr),e(rn,rE),e(rE,NTe),e(NTe,Cbr),e(rE,wbr),e(rE,FU),e(FU,Abr),e(rE,Lbr),e(rn,ybr),e(rn,tE),e(tE,qTe),e(qTe,xbr),e(tE,$br),e(tE,TU),e(TU,kbr),e(tE,Sbr),e(_o,Rbr),e(_o,aE),e(aE,Pbr),e(aE,jTe),e(jTe,Bbr),e(aE,Ibr),e(aE,DTe),e(DTe,Nbr),e(_o,qbr),M(nE,_o,null),b(m,iWe,_),b(m,Jd,_),e(Jd,sE),e(sE,GTe),M(D9,GTe,null),e(Jd,jbr),e(Jd,OTe),e(OTe,Dbr),b(m,dWe,_),b(m,Ko,_),M(G9,Ko,null),e(Ko,Gbr),e(Ko,Yd),e(Yd,Obr),e(Yd,MU),e(MU,Vbr),e(Yd,Xbr),e(Yd,EU),e(EU,zbr),e(Yd,Wbr),e(Ko,Qbr),e(Ko,O9),e(O9,Hbr),e(O9,VTe),e(VTe,Ubr),e(O9,Jbr),e(Ko,Ybr),e(Ko,xt),M(V9,xt,null),e(xt,Kbr),e(xt,XTe),e(XTe,Zbr),e(xt,evr),e(xt,Kd),e(Kd,ovr),e(Kd,zTe),e(zTe,rvr),e(Kd,tvr),e(Kd,CU),e(CU,avr),e(Kd,nvr),e(xt,svr),M(lE,xt,null),e(Ko,lvr),e(Ko,bo),M(X9,bo,null),e(bo,ivr),e(bo,WTe),e(WTe,dvr),e(bo,cvr),e(bo,tn),e(tn,mvr),e(tn,QTe),e(QTe,fvr),e(tn,gvr),e(tn,HTe),e(HTe,hvr),e(tn,uvr),e(tn,UTe),e(UTe,pvr),e(tn,_vr),e(bo,bvr),e(bo,z9),e(z9,iE),e(iE,JTe),e(JTe,vvr),e(iE,Fvr),e(iE,wU),e(wU,Tvr),e(iE,Mvr),e(z9,Evr),e(z9,dE),e(dE,YTe),e(YTe,Cvr),e(dE,wvr),e(dE,AU),e(AU,Avr),e(dE,Lvr),e(bo,yvr),e(bo,cE),e(cE,xvr),e(cE,KTe),e(KTe,$vr),e(cE,kvr),e(cE,ZTe),e(ZTe,Svr),e(bo,Rvr),M(mE,bo,null),b(m,cWe,_),b(m,Zd,_),e(Zd,fE),e(fE,eMe),M(W9,eMe,null),e(Zd,Pvr),e(Zd,oMe),e(oMe,Bvr),b(m,mWe,_),b(m,Zo,_),M(Q9,Zo,null),e(Zo,Ivr),e(Zo,ec),e(ec,Nvr),e(ec,LU),e(LU,qvr),e(ec,jvr),e(ec,yU),e(yU,Dvr),e(ec,Gvr),e(Zo,Ovr),e(Zo,H9),e(H9,Vvr),e(H9,rMe),e(rMe,Xvr),e(H9,zvr),e(Zo,Wvr),e(Zo,$t),M(U9,$t,null),e($t,Qvr),e($t,tMe),e(tMe,Hvr),e($t,Uvr),e($t,oc),e(oc,Jvr),e(oc,aMe),e(aMe,Yvr),e(oc,Kvr),e(oc,xU),e(xU,Zvr),e(oc,e1r),e($t,o1r),M(gE,$t,null),e(Zo,r1r),e(Zo,vo),M(J9,vo,null),e(vo,t1r),e(vo,nMe),e(nMe,a1r),e(vo,n1r),e(vo,an),e(an,s1r),e(an,sMe),e(sMe,l1r),e(an,i1r),e(an,lMe),e(lMe,d1r),e(an,c1r),e(an,iMe),e(iMe,m1r),e(an,f1r),e(vo,g1r),e(vo,dMe),e(dMe,hE),e(hE,cMe),e(cMe,h1r),e(hE,u1r),e(hE,$U),e($U,p1r),e(hE,_1r),e(vo,b1r),e(vo,uE),e(uE,v1r),e(uE,mMe),e(mMe,F1r),e(uE,T1r),e(uE,fMe),e(fMe,M1r),e(vo,E1r),M(pE,vo,null),b(m,fWe,_),b(m,rc,_),e(rc,_E),e(_E,gMe),M(Y9,gMe,null),e(rc,C1r),e(rc,hMe),e(hMe,w1r),b(m,gWe,_),b(m,er,_),M(K9,er,null),e(er,A1r),e(er,tc),e(tc,L1r),e(tc,kU),e(kU,y1r),e(tc,x1r),e(tc,SU),e(SU,$1r),e(tc,k1r),e(er,S1r),e(er,Z9),e(Z9,R1r),e(Z9,uMe),e(uMe,P1r),e(Z9,B1r),e(er,I1r),e(er,kt),M(ex,kt,null),e(kt,N1r),e(kt,pMe),e(pMe,q1r),e(kt,j1r),e(kt,ac),e(ac,D1r),e(ac,_Me),e(_Me,G1r),e(ac,O1r),e(ac,RU),e(RU,V1r),e(ac,X1r),e(kt,z1r),M(bE,kt,null),e(er,W1r),e(er,Fo),M(ox,Fo,null),e(Fo,Q1r),e(Fo,bMe),e(bMe,H1r),e(Fo,U1r),e(Fo,nn),e(nn,J1r),e(nn,vMe),e(vMe,Y1r),e(nn,K1r),e(nn,FMe),e(FMe,Z1r),e(nn,eFr),e(nn,TMe),e(TMe,oFr),e(nn,rFr),e(Fo,tFr),e(Fo,at),e(at,vE),e(vE,MMe),e(MMe,aFr),e(vE,nFr),e(vE,PU),e(PU,sFr),e(vE,lFr),e(at,iFr),e(at,FE),e(FE,EMe),e(EMe,dFr),e(FE,cFr),e(FE,BU),e(BU,mFr),e(FE,fFr),e(at,gFr),e(at,TE),e(TE,CMe),e(CMe,hFr),e(TE,uFr),e(TE,IU),e(IU,pFr),e(TE,_Fr),e(at,bFr),e(at,ME),e(ME,wMe),e(wMe,vFr),e(ME,FFr),e(ME,NU),e(NU,TFr),e(ME,MFr),e(at,EFr),e(at,EE),e(EE,AMe),e(AMe,CFr),e(EE,wFr),e(EE,qU),e(qU,AFr),e(EE,LFr),e(Fo,yFr),e(Fo,CE),e(CE,xFr),e(CE,LMe),e(LMe,$Fr),e(CE,kFr),e(CE,yMe),e(yMe,SFr),e(Fo,RFr),M(wE,Fo,null),b(m,hWe,_),b(m,nc,_),e(nc,AE),e(AE,xMe),M(rx,xMe,null),e(nc,PFr),e(nc,$Me),e($Me,BFr),b(m,uWe,_),b(m,or,_),M(tx,or,null),e(or,IFr),e(or,sc),e(sc,NFr),e(sc,jU),e(jU,qFr),e(sc,jFr),e(sc,DU),e(DU,DFr),e(sc,GFr),e(or,OFr),e(or,ax),e(ax,VFr),e(ax,kMe),e(kMe,XFr),e(ax,zFr),e(or,WFr),e(or,St),M(nx,St,null),e(St,QFr),e(St,SMe),e(SMe,HFr),e(St,UFr),e(St,lc),e(lc,JFr),e(lc,RMe),e(RMe,YFr),e(lc,KFr),e(lc,GU),e(GU,ZFr),e(lc,eTr),e(St,oTr),M(LE,St,null),e(or,rTr),e(or,To),M(sx,To,null),e(To,tTr),e(To,PMe),e(PMe,aTr),e(To,nTr),e(To,sn),e(sn,sTr),e(sn,BMe),e(BMe,lTr),e(sn,iTr),e(sn,IMe),e(IMe,dTr),e(sn,cTr),e(sn,NMe),e(NMe,mTr),e(sn,fTr),e(To,gTr),e(To,qMe),e(qMe,yE),e(yE,jMe),e(jMe,hTr),e(yE,uTr),e(yE,OU),e(OU,pTr),e(yE,_Tr),e(To,bTr),e(To,xE),e(xE,vTr),e(xE,DMe),e(DMe,FTr),e(xE,TTr),e(xE,GMe),e(GMe,MTr),e(To,ETr),M($E,To,null),b(m,pWe,_),b(m,ic,_),e(ic,kE),e(kE,OMe),M(lx,OMe,null),e(ic,CTr),e(ic,VMe),e(VMe,wTr),b(m,_We,_),b(m,rr,_),M(ix,rr,null),e(rr,ATr),e(rr,dc),e(dc,LTr),e(dc,VU),e(VU,yTr),e(dc,xTr),e(dc,XU),e(XU,$Tr),e(dc,kTr),e(rr,STr),e(rr,dx),e(dx,RTr),e(dx,XMe),e(XMe,PTr),e(dx,BTr),e(rr,ITr),e(rr,Rt),M(cx,Rt,null),e(Rt,NTr),e(Rt,zMe),e(zMe,qTr),e(Rt,jTr),e(Rt,cc),e(cc,DTr),e(cc,WMe),e(WMe,GTr),e(cc,OTr),e(cc,zU),e(zU,VTr),e(cc,XTr),e(Rt,zTr),M(SE,Rt,null),e(rr,WTr),e(rr,$r),M(mx,$r,null),e($r,QTr),e($r,QMe),e(QMe,HTr),e($r,UTr),e($r,ln),e(ln,JTr),e(ln,HMe),e(HMe,YTr),e(ln,KTr),e(ln,UMe),e(UMe,ZTr),e(ln,eMr),e(ln,JMe),e(JMe,oMr),e(ln,rMr),e($r,tMr),e($r,I),e(I,RE),e(RE,YMe),e(YMe,aMr),e(RE,nMr),e(RE,WU),e(WU,sMr),e(RE,lMr),e(I,iMr),e(I,PE),e(PE,KMe),e(KMe,dMr),e(PE,cMr),e(PE,QU),e(QU,mMr),e(PE,fMr),e(I,gMr),e(I,BE),e(BE,ZMe),e(ZMe,hMr),e(BE,uMr),e(BE,HU),e(HU,pMr),e(BE,_Mr),e(I,bMr),e(I,IE),e(IE,e4e),e(e4e,vMr),e(IE,FMr),e(IE,UU),e(UU,TMr),e(IE,MMr),e(I,EMr),e(I,NE),e(NE,o4e),e(o4e,CMr),e(NE,wMr),e(NE,JU),e(JU,AMr),e(NE,LMr),e(I,yMr),e(I,qE),e(qE,r4e),e(r4e,xMr),e(qE,$Mr),e(qE,YU),e(YU,kMr),e(qE,SMr),e(I,RMr),e(I,jE),e(jE,t4e),e(t4e,PMr),e(jE,BMr),e(jE,KU),e(KU,IMr),e(jE,NMr),e(I,qMr),e(I,DE),e(DE,a4e),e(a4e,jMr),e(DE,DMr),e(DE,ZU),e(ZU,GMr),e(DE,OMr),e(I,VMr),e(I,GE),e(GE,n4e),e(n4e,XMr),e(GE,zMr),e(GE,eJ),e(eJ,WMr),e(GE,QMr),e(I,HMr),e(I,OE),e(OE,s4e),e(s4e,UMr),e(OE,JMr),e(OE,oJ),e(oJ,YMr),e(OE,KMr),e(I,ZMr),e(I,VE),e(VE,l4e),e(l4e,e4r),e(VE,o4r),e(VE,rJ),e(rJ,r4r),e(VE,t4r),e(I,a4r),e(I,XE),e(XE,i4e),e(i4e,n4r),e(XE,s4r),e(XE,tJ),e(tJ,l4r),e(XE,i4r),e(I,d4r),e(I,zE),e(zE,d4e),e(d4e,c4r),e(zE,m4r),e(zE,aJ),e(aJ,f4r),e(zE,g4r),e(I,h4r),e(I,WE),e(WE,c4e),e(c4e,u4r),e(WE,p4r),e(WE,nJ),e(nJ,_4r),e(WE,b4r),e(I,v4r),e(I,QE),e(QE,m4e),e(m4e,F4r),e(QE,T4r),e(QE,sJ),e(sJ,M4r),e(QE,E4r),e(I,C4r),e(I,HE),e(HE,f4e),e(f4e,w4r),e(HE,A4r),e(HE,lJ),e(lJ,L4r),e(HE,y4r),e(I,x4r),e(I,UE),e(UE,g4e),e(g4e,$4r),e(UE,k4r),e(UE,iJ),e(iJ,S4r),e(UE,R4r),e(I,P4r),e(I,JE),e(JE,h4e),e(h4e,B4r),e(JE,I4r),e(JE,dJ),e(dJ,N4r),e(JE,q4r),e(I,j4r),e(I,Zs),e(Zs,u4e),e(u4e,D4r),e(Zs,G4r),e(Zs,cJ),e(cJ,O4r),e(Zs,V4r),e(Zs,mJ),e(mJ,X4r),e(Zs,z4r),e(I,W4r),e(I,YE),e(YE,p4e),e(p4e,Q4r),e(YE,H4r),e(YE,fJ),e(fJ,U4r),e(YE,J4r),e(I,Y4r),e(I,KE),e(KE,_4e),e(_4e,K4r),e(KE,Z4r),e(KE,gJ),e(gJ,eEr),e(KE,oEr),e(I,rEr),e(I,ZE),e(ZE,b4e),e(b4e,tEr),e(ZE,aEr),e(ZE,hJ),e(hJ,nEr),e(ZE,sEr),e(I,lEr),e(I,eC),e(eC,v4e),e(v4e,iEr),e(eC,dEr),e(eC,uJ),e(uJ,cEr),e(eC,mEr),e(I,fEr),e(I,oC),e(oC,F4e),e(F4e,gEr),e(oC,hEr),e(oC,pJ),e(pJ,uEr),e(oC,pEr),e(I,_Er),e(I,rC),e(rC,T4e),e(T4e,bEr),e(rC,vEr),e(rC,_J),e(_J,FEr),e(rC,TEr),e(I,MEr),e(I,tC),e(tC,M4e),e(M4e,EEr),e(tC,CEr),e(tC,bJ),e(bJ,wEr),e(tC,AEr),e(I,LEr),e(I,aC),e(aC,E4e),e(E4e,yEr),e(aC,xEr),e(aC,vJ),e(vJ,$Er),e(aC,kEr),e(I,SEr),e(I,nC),e(nC,C4e),e(C4e,REr),e(nC,PEr),e(nC,FJ),e(FJ,BEr),e(nC,IEr),e(I,NEr),e(I,sC),e(sC,w4e),e(w4e,qEr),e(sC,jEr),e(sC,TJ),e(TJ,DEr),e(sC,GEr),e(I,OEr),e(I,lC),e(lC,A4e),e(A4e,VEr),e(lC,XEr),e(lC,MJ),e(MJ,zEr),e(lC,WEr),e(I,QEr),e(I,iC),e(iC,L4e),e(L4e,HEr),e(iC,UEr),e(iC,EJ),e(EJ,JEr),e(iC,YEr),e(I,KEr),e(I,dC),e(dC,y4e),e(y4e,ZEr),e(dC,eCr),e(dC,CJ),e(CJ,oCr),e(dC,rCr),e(I,tCr),e(I,cC),e(cC,x4e),e(x4e,aCr),e(cC,nCr),e(cC,wJ),e(wJ,sCr),e(cC,lCr),e(I,iCr),e(I,mC),e(mC,$4e),e($4e,dCr),e(mC,cCr),e(mC,AJ),e(AJ,mCr),e(mC,fCr),e(I,gCr),e(I,fC),e(fC,k4e),e(k4e,hCr),e(fC,uCr),e(fC,LJ),e(LJ,pCr),e(fC,_Cr),e(I,bCr),e(I,gC),e(gC,S4e),e(S4e,vCr),e(gC,FCr),e(gC,yJ),e(yJ,TCr),e(gC,MCr),e(I,ECr),e(I,hC),e(hC,R4e),e(R4e,CCr),e(hC,wCr),e(hC,xJ),e(xJ,ACr),e(hC,LCr),e(I,yCr),e(I,uC),e(uC,P4e),e(P4e,xCr),e(uC,$Cr),e(uC,$J),e($J,kCr),e(uC,SCr),e(I,RCr),e(I,pC),e(pC,B4e),e(B4e,PCr),e(pC,BCr),e(pC,kJ),e(kJ,ICr),e(pC,NCr),e(I,qCr),e(I,_C),e(_C,I4e),e(I4e,jCr),e(_C,DCr),e(_C,SJ),e(SJ,GCr),e(_C,OCr),e(I,VCr),e(I,bC),e(bC,N4e),e(N4e,XCr),e(bC,zCr),e(bC,RJ),e(RJ,WCr),e(bC,QCr),e(I,HCr),e(I,vC),e(vC,q4e),e(q4e,UCr),e(vC,JCr),e(vC,PJ),e(PJ,YCr),e(vC,KCr),e(I,ZCr),e(I,FC),e(FC,j4e),e(j4e,e5r),e(FC,o5r),e(FC,BJ),e(BJ,r5r),e(FC,t5r),e(I,a5r),e(I,TC),e(TC,D4e),e(D4e,n5r),e(TC,s5r),e(TC,IJ),e(IJ,l5r),e(TC,i5r),e(I,d5r),e(I,MC),e(MC,G4e),e(G4e,c5r),e(MC,m5r),e(MC,NJ),e(NJ,f5r),e(MC,g5r),e(I,h5r),e(I,EC),e(EC,O4e),e(O4e,u5r),e(EC,p5r),e(EC,qJ),e(qJ,_5r),e(EC,b5r),e(I,v5r),e(I,CC),e(CC,V4e),e(V4e,F5r),e(CC,T5r),e(CC,jJ),e(jJ,M5r),e(CC,E5r),e(I,C5r),e(I,wC),e(wC,X4e),e(X4e,w5r),e(wC,A5r),e(wC,DJ),e(DJ,L5r),e(wC,y5r),e(I,x5r),e(I,AC),e(AC,z4e),e(z4e,$5r),e(AC,k5r),e(AC,GJ),e(GJ,S5r),e(AC,R5r),e(I,P5r),e(I,LC),e(LC,W4e),e(W4e,B5r),e(LC,I5r),e(LC,OJ),e(OJ,N5r),e(LC,q5r),e(I,j5r),e(I,yC),e(yC,Q4e),e(Q4e,D5r),e(yC,G5r),e(yC,VJ),e(VJ,O5r),e(yC,V5r),e($r,X5r),M(xC,$r,null),b(m,bWe,_),b(m,mc,_),e(mc,$C),e($C,H4e),M(fx,H4e,null),e(mc,z5r),e(mc,U4e),e(U4e,W5r),b(m,vWe,_),b(m,tr,_),M(gx,tr,null),e(tr,Q5r),e(tr,fc),e(fc,H5r),e(fc,XJ),e(XJ,U5r),e(fc,J5r),e(fc,zJ),e(zJ,Y5r),e(fc,K5r),e(tr,Z5r),e(tr,hx),e(hx,e3r),e(hx,J4e),e(J4e,o3r),e(hx,r3r),e(tr,t3r),e(tr,Pt),M(ux,Pt,null),e(Pt,a3r),e(Pt,Y4e),e(Y4e,n3r),e(Pt,s3r),e(Pt,gc),e(gc,l3r),e(gc,K4e),e(K4e,i3r),e(gc,d3r),e(gc,WJ),e(WJ,c3r),e(gc,m3r),e(Pt,f3r),M(kC,Pt,null),e(tr,g3r),e(tr,kr),M(px,kr,null),e(kr,h3r),e(kr,Z4e),e(Z4e,u3r),e(kr,p3r),e(kr,dn),e(dn,_3r),e(dn,eEe),e(eEe,b3r),e(dn,v3r),e(dn,oEe),e(oEe,F3r),e(dn,T3r),e(dn,rEe),e(rEe,M3r),e(dn,E3r),e(kr,C3r),e(kr,se),e(se,SC),e(SC,tEe),e(tEe,w3r),e(SC,A3r),e(SC,QJ),e(QJ,L3r),e(SC,y3r),e(se,x3r),e(se,RC),e(RC,aEe),e(aEe,$3r),e(RC,k3r),e(RC,HJ),e(HJ,S3r),e(RC,R3r),e(se,P3r),e(se,PC),e(PC,nEe),e(nEe,B3r),e(PC,I3r),e(PC,UJ),e(UJ,N3r),e(PC,q3r),e(se,j3r),e(se,BC),e(BC,sEe),e(sEe,D3r),e(BC,G3r),e(BC,JJ),e(JJ,O3r),e(BC,V3r),e(se,X3r),e(se,IC),e(IC,lEe),e(lEe,z3r),e(IC,W3r),e(IC,YJ),e(YJ,Q3r),e(IC,H3r),e(se,U3r),e(se,NC),e(NC,iEe),e(iEe,J3r),e(NC,Y3r),e(NC,KJ),e(KJ,K3r),e(NC,Z3r),e(se,e0r),e(se,qC),e(qC,dEe),e(dEe,o0r),e(qC,r0r),e(qC,ZJ),e(ZJ,t0r),e(qC,a0r),e(se,n0r),e(se,jC),e(jC,cEe),e(cEe,s0r),e(jC,l0r),e(jC,eY),e(eY,i0r),e(jC,d0r),e(se,c0r),e(se,DC),e(DC,mEe),e(mEe,m0r),e(DC,f0r),e(DC,oY),e(oY,g0r),e(DC,h0r),e(se,u0r),e(se,GC),e(GC,fEe),e(fEe,p0r),e(GC,_0r),e(GC,rY),e(rY,b0r),e(GC,v0r),e(se,F0r),e(se,OC),e(OC,gEe),e(gEe,T0r),e(OC,M0r),e(OC,tY),e(tY,E0r),e(OC,C0r),e(se,w0r),e(se,VC),e(VC,hEe),e(hEe,A0r),e(VC,L0r),e(VC,aY),e(aY,y0r),e(VC,x0r),e(se,$0r),e(se,XC),e(XC,uEe),e(uEe,k0r),e(XC,S0r),e(XC,nY),e(nY,R0r),e(XC,P0r),e(se,B0r),e(se,zC),e(zC,pEe),e(pEe,I0r),e(zC,N0r),e(zC,sY),e(sY,q0r),e(zC,j0r),e(se,D0r),e(se,WC),e(WC,_Ee),e(_Ee,G0r),e(WC,O0r),e(WC,lY),e(lY,V0r),e(WC,X0r),e(se,z0r),e(se,QC),e(QC,bEe),e(bEe,W0r),e(QC,Q0r),e(QC,iY),e(iY,H0r),e(QC,U0r),e(se,J0r),e(se,HC),e(HC,vEe),e(vEe,Y0r),e(HC,K0r),e(HC,dY),e(dY,Z0r),e(HC,ewr),e(se,owr),e(se,UC),e(UC,FEe),e(FEe,rwr),e(UC,twr),e(UC,cY),e(cY,awr),e(UC,nwr),e(se,swr),e(se,JC),e(JC,TEe),e(TEe,lwr),e(JC,iwr),e(JC,mY),e(mY,dwr),e(JC,cwr),e(se,mwr),e(se,YC),e(YC,MEe),e(MEe,fwr),e(YC,gwr),e(YC,fY),e(fY,hwr),e(YC,uwr),e(se,pwr),e(se,KC),e(KC,EEe),e(EEe,_wr),e(KC,bwr),e(KC,gY),e(gY,vwr),e(KC,Fwr),e(se,Twr),e(se,ZC),e(ZC,CEe),e(CEe,Mwr),e(ZC,Ewr),e(ZC,hY),e(hY,Cwr),e(ZC,wwr),e(se,Awr),e(se,e5),e(e5,wEe),e(wEe,Lwr),e(e5,ywr),e(e5,uY),e(uY,xwr),e(e5,$wr),e(kr,kwr),M(o5,kr,null),b(m,FWe,_),b(m,hc,_),e(hc,r5),e(r5,AEe),M(_x,AEe,null),e(hc,Swr),e(hc,LEe),e(LEe,Rwr),b(m,TWe,_),b(m,ar,_),M(bx,ar,null),e(ar,Pwr),e(ar,uc),e(uc,Bwr),e(uc,pY),e(pY,Iwr),e(uc,Nwr),e(uc,_Y),e(_Y,qwr),e(uc,jwr),e(ar,Dwr),e(ar,vx),e(vx,Gwr),e(vx,yEe),e(yEe,Owr),e(vx,Vwr),e(ar,Xwr),e(ar,Bt),M(Fx,Bt,null),e(Bt,zwr),e(Bt,xEe),e(xEe,Wwr),e(Bt,Qwr),e(Bt,pc),e(pc,Hwr),e(pc,$Ee),e($Ee,Uwr),e(pc,Jwr),e(pc,bY),e(bY,Ywr),e(pc,Kwr),e(Bt,Zwr),M(t5,Bt,null),e(ar,eAr),e(ar,Sr),M(Tx,Sr,null),e(Sr,oAr),e(Sr,kEe),e(kEe,rAr),e(Sr,tAr),e(Sr,cn),e(cn,aAr),e(cn,SEe),e(SEe,nAr),e(cn,sAr),e(cn,REe),e(REe,lAr),e(cn,iAr),e(cn,PEe),e(PEe,dAr),e(cn,cAr),e(Sr,mAr),e(Sr,Me),e(Me,a5),e(a5,BEe),e(BEe,fAr),e(a5,gAr),e(a5,vY),e(vY,hAr),e(a5,uAr),e(Me,pAr),e(Me,n5),e(n5,IEe),e(IEe,_Ar),e(n5,bAr),e(n5,FY),e(FY,vAr),e(n5,FAr),e(Me,TAr),e(Me,s5),e(s5,NEe),e(NEe,MAr),e(s5,EAr),e(s5,TY),e(TY,CAr),e(s5,wAr),e(Me,AAr),e(Me,l5),e(l5,qEe),e(qEe,LAr),e(l5,yAr),e(l5,MY),e(MY,xAr),e(l5,$Ar),e(Me,kAr),e(Me,i5),e(i5,jEe),e(jEe,SAr),e(i5,RAr),e(i5,EY),e(EY,PAr),e(i5,BAr),e(Me,IAr),e(Me,d5),e(d5,DEe),e(DEe,NAr),e(d5,qAr),e(d5,CY),e(CY,jAr),e(d5,DAr),e(Me,GAr),e(Me,c5),e(c5,GEe),e(GEe,OAr),e(c5,VAr),e(c5,wY),e(wY,XAr),e(c5,zAr),e(Me,WAr),e(Me,m5),e(m5,OEe),e(OEe,QAr),e(m5,HAr),e(m5,AY),e(AY,UAr),e(m5,JAr),e(Me,YAr),e(Me,f5),e(f5,VEe),e(VEe,KAr),e(f5,ZAr),e(f5,LY),e(LY,e6r),e(f5,o6r),e(Me,r6r),e(Me,g5),e(g5,XEe),e(XEe,t6r),e(g5,a6r),e(g5,yY),e(yY,n6r),e(g5,s6r),e(Me,l6r),e(Me,h5),e(h5,zEe),e(zEe,i6r),e(h5,d6r),e(h5,xY),e(xY,c6r),e(h5,m6r),e(Me,f6r),e(Me,u5),e(u5,WEe),e(WEe,g6r),e(u5,h6r),e(u5,$Y),e($Y,u6r),e(u5,p6r),e(Me,_6r),e(Me,p5),e(p5,QEe),e(QEe,b6r),e(p5,v6r),e(p5,kY),e(kY,F6r),e(p5,T6r),e(Sr,M6r),M(_5,Sr,null),b(m,MWe,_),b(m,_c,_),e(_c,b5),e(b5,HEe),M(Mx,HEe,null),e(_c,E6r),e(_c,UEe),e(UEe,C6r),b(m,EWe,_),b(m,nr,_),M(Ex,nr,null),e(nr,w6r),e(nr,bc),e(bc,A6r),e(bc,SY),e(SY,L6r),e(bc,y6r),e(bc,RY),e(RY,x6r),e(bc,$6r),e(nr,k6r),e(nr,Cx),e(Cx,S6r),e(Cx,JEe),e(JEe,R6r),e(Cx,P6r),e(nr,B6r),e(nr,It),M(wx,It,null),e(It,I6r),e(It,YEe),e(YEe,N6r),e(It,q6r),e(It,vc),e(vc,j6r),e(vc,KEe),e(KEe,D6r),e(vc,G6r),e(vc,PY),e(PY,O6r),e(vc,V6r),e(It,X6r),M(v5,It,null),e(nr,z6r),e(nr,Rr),M(Ax,Rr,null),e(Rr,W6r),e(Rr,ZEe),e(ZEe,Q6r),e(Rr,H6r),e(Rr,mn),e(mn,U6r),e(mn,eCe),e(eCe,J6r),e(mn,Y6r),e(mn,oCe),e(oCe,K6r),e(mn,Z6r),e(mn,rCe),e(rCe,e7r),e(mn,o7r),e(Rr,r7r),e(Rr,Ve),e(Ve,F5),e(F5,tCe),e(tCe,t7r),e(F5,a7r),e(F5,BY),e(BY,n7r),e(F5,s7r),e(Ve,l7r),e(Ve,T5),e(T5,aCe),e(aCe,i7r),e(T5,d7r),e(T5,IY),e(IY,c7r),e(T5,m7r),e(Ve,f7r),e(Ve,el),e(el,nCe),e(nCe,g7r),e(el,h7r),e(el,NY),e(NY,u7r),e(el,p7r),e(el,qY),e(qY,_7r),e(el,b7r),e(Ve,v7r),e(Ve,M5),e(M5,sCe),e(sCe,F7r),e(M5,T7r),e(M5,jY),e(jY,M7r),e(M5,E7r),e(Ve,C7r),e(Ve,E5),e(E5,lCe),e(lCe,w7r),e(E5,A7r),e(E5,DY),e(DY,L7r),e(E5,y7r),e(Ve,x7r),e(Ve,C5),e(C5,iCe),e(iCe,$7r),e(C5,k7r),e(C5,GY),e(GY,S7r),e(C5,R7r),e(Ve,P7r),e(Ve,w5),e(w5,dCe),e(dCe,B7r),e(w5,I7r),e(w5,OY),e(OY,N7r),e(w5,q7r),e(Ve,j7r),e(Ve,A5),e(A5,cCe),e(cCe,D7r),e(A5,G7r),e(A5,VY),e(VY,O7r),e(A5,V7r),e(Rr,X7r),M(L5,Rr,null),b(m,CWe,_),b(m,Fc,_),e(Fc,y5),e(y5,mCe),M(Lx,mCe,null),e(Fc,z7r),e(Fc,fCe),e(fCe,W7r),b(m,wWe,_),b(m,sr,_),M(yx,sr,null),e(sr,Q7r),e(sr,Tc),e(Tc,H7r),e(Tc,XY),e(XY,U7r),e(Tc,J7r),e(Tc,zY),e(zY,Y7r),e(Tc,K7r),e(sr,Z7r),e(sr,xx),e(xx,eLr),e(xx,gCe),e(gCe,oLr),e(xx,rLr),e(sr,tLr),e(sr,Nt),M($x,Nt,null),e(Nt,aLr),e(Nt,hCe),e(hCe,nLr),e(Nt,sLr),e(Nt,Mc),e(Mc,lLr),e(Mc,uCe),e(uCe,iLr),e(Mc,dLr),e(Mc,WY),e(WY,cLr),e(Mc,mLr),e(Nt,fLr),M(x5,Nt,null),e(sr,gLr),e(sr,Pr),M(kx,Pr,null),e(Pr,hLr),e(Pr,pCe),e(pCe,uLr),e(Pr,pLr),e(Pr,fn),e(fn,_Lr),e(fn,_Ce),e(_Ce,bLr),e(fn,vLr),e(fn,bCe),e(bCe,FLr),e(fn,TLr),e(fn,vCe),e(vCe,MLr),e(fn,ELr),e(Pr,CLr),e(Pr,ie),e(ie,$5),e($5,FCe),e(FCe,wLr),e($5,ALr),e($5,QY),e(QY,LLr),e($5,yLr),e(ie,xLr),e(ie,k5),e(k5,TCe),e(TCe,$Lr),e(k5,kLr),e(k5,HY),e(HY,SLr),e(k5,RLr),e(ie,PLr),e(ie,S5),e(S5,MCe),e(MCe,BLr),e(S5,ILr),e(S5,UY),e(UY,NLr),e(S5,qLr),e(ie,jLr),e(ie,R5),e(R5,ECe),e(ECe,DLr),e(R5,GLr),e(R5,JY),e(JY,OLr),e(R5,VLr),e(ie,XLr),e(ie,P5),e(P5,CCe),e(CCe,zLr),e(P5,WLr),e(P5,YY),e(YY,QLr),e(P5,HLr),e(ie,ULr),e(ie,B5),e(B5,wCe),e(wCe,JLr),e(B5,YLr),e(B5,KY),e(KY,KLr),e(B5,ZLr),e(ie,eyr),e(ie,I5),e(I5,ACe),e(ACe,oyr),e(I5,ryr),e(I5,ZY),e(ZY,tyr),e(I5,ayr),e(ie,nyr),e(ie,N5),e(N5,LCe),e(LCe,syr),e(N5,lyr),e(N5,eK),e(eK,iyr),e(N5,dyr),e(ie,cyr),e(ie,q5),e(q5,yCe),e(yCe,myr),e(q5,fyr),e(q5,oK),e(oK,gyr),e(q5,hyr),e(ie,uyr),e(ie,j5),e(j5,xCe),e(xCe,pyr),e(j5,_yr),e(j5,rK),e(rK,byr),e(j5,vyr),e(ie,Fyr),e(ie,D5),e(D5,$Ce),e($Ce,Tyr),e(D5,Myr),e(D5,tK),e(tK,Eyr),e(D5,Cyr),e(ie,wyr),e(ie,G5),e(G5,kCe),e(kCe,Ayr),e(G5,Lyr),e(G5,aK),e(aK,yyr),e(G5,xyr),e(ie,$yr),e(ie,O5),e(O5,SCe),e(SCe,kyr),e(O5,Syr),e(O5,nK),e(nK,Ryr),e(O5,Pyr),e(ie,Byr),e(ie,V5),e(V5,RCe),e(RCe,Iyr),e(V5,Nyr),e(V5,sK),e(sK,qyr),e(V5,jyr),e(ie,Dyr),e(ie,X5),e(X5,PCe),e(PCe,Gyr),e(X5,Oyr),e(X5,lK),e(lK,Vyr),e(X5,Xyr),e(ie,zyr),e(ie,z5),e(z5,BCe),e(BCe,Wyr),e(z5,Qyr),e(z5,iK),e(iK,Hyr),e(z5,Uyr),e(ie,Jyr),e(ie,W5),e(W5,ICe),e(ICe,Yyr),e(W5,Kyr),e(W5,dK),e(dK,Zyr),e(W5,e8r),e(ie,o8r),e(ie,Q5),e(Q5,NCe),e(NCe,r8r),e(Q5,t8r),e(Q5,cK),e(cK,a8r),e(Q5,n8r),e(ie,s8r),e(ie,H5),e(H5,qCe),e(qCe,l8r),e(H5,i8r),e(H5,mK),e(mK,d8r),e(H5,c8r),e(ie,m8r),e(ie,U5),e(U5,jCe),e(jCe,f8r),e(U5,g8r),e(U5,fK),e(fK,h8r),e(U5,u8r),e(Pr,p8r),M(J5,Pr,null),b(m,AWe,_),b(m,Ec,_),e(Ec,Y5),e(Y5,DCe),M(Sx,DCe,null),e(Ec,_8r),e(Ec,GCe),e(GCe,b8r),b(m,LWe,_),b(m,lr,_),M(Rx,lr,null),e(lr,v8r),e(lr,Cc),e(Cc,F8r),e(Cc,gK),e(gK,T8r),e(Cc,M8r),e(Cc,hK),e(hK,E8r),e(Cc,C8r),e(lr,w8r),e(lr,Px),e(Px,A8r),e(Px,OCe),e(OCe,L8r),e(Px,y8r),e(lr,x8r),e(lr,qt),M(Bx,qt,null),e(qt,$8r),e(qt,VCe),e(VCe,k8r),e(qt,S8r),e(qt,wc),e(wc,R8r),e(wc,XCe),e(XCe,P8r),e(wc,B8r),e(wc,uK),e(uK,I8r),e(wc,N8r),e(qt,q8r),M(K5,qt,null),e(lr,j8r),e(lr,Br),M(Ix,Br,null),e(Br,D8r),e(Br,zCe),e(zCe,G8r),e(Br,O8r),e(Br,gn),e(gn,V8r),e(gn,WCe),e(WCe,X8r),e(gn,z8r),e(gn,QCe),e(QCe,W8r),e(gn,Q8r),e(gn,HCe),e(HCe,H8r),e(gn,U8r),e(Br,J8r),e(Br,ye),e(ye,Z5),e(Z5,UCe),e(UCe,Y8r),e(Z5,K8r),e(Z5,pK),e(pK,Z8r),e(Z5,e9r),e(ye,o9r),e(ye,e3),e(e3,JCe),e(JCe,r9r),e(e3,t9r),e(e3,_K),e(_K,a9r),e(e3,n9r),e(ye,s9r),e(ye,o3),e(o3,YCe),e(YCe,l9r),e(o3,i9r),e(o3,bK),e(bK,d9r),e(o3,c9r),e(ye,m9r),e(ye,r3),e(r3,KCe),e(KCe,f9r),e(r3,g9r),e(r3,vK),e(vK,h9r),e(r3,u9r),e(ye,p9r),e(ye,t3),e(t3,ZCe),e(ZCe,_9r),e(t3,b9r),e(t3,FK),e(FK,v9r),e(t3,F9r),e(ye,T9r),e(ye,a3),e(a3,e5e),e(e5e,M9r),e(a3,E9r),e(a3,TK),e(TK,C9r),e(a3,w9r),e(ye,A9r),e(ye,n3),e(n3,o5e),e(o5e,L9r),e(n3,y9r),e(n3,MK),e(MK,x9r),e(n3,$9r),e(ye,k9r),e(ye,s3),e(s3,r5e),e(r5e,S9r),e(s3,R9r),e(s3,EK),e(EK,P9r),e(s3,B9r),e(ye,I9r),e(ye,l3),e(l3,t5e),e(t5e,N9r),e(l3,q9r),e(l3,CK),e(CK,j9r),e(l3,D9r),e(ye,G9r),e(ye,i3),e(i3,a5e),e(a5e,O9r),e(i3,V9r),e(i3,wK),e(wK,X9r),e(i3,z9r),e(Br,W9r),M(d3,Br,null),b(m,yWe,_),b(m,Ac,_),e(Ac,c3),e(c3,n5e),M(Nx,n5e,null),e(Ac,Q9r),e(Ac,s5e),e(s5e,H9r),b(m,xWe,_),b(m,ir,_),M(qx,ir,null),e(ir,U9r),e(ir,Lc),e(Lc,J9r),e(Lc,AK),e(AK,Y9r),e(Lc,K9r),e(Lc,LK),e(LK,Z9r),e(Lc,exr),e(ir,oxr),e(ir,jx),e(jx,rxr),e(jx,l5e),e(l5e,txr),e(jx,axr),e(ir,nxr),e(ir,jt),M(Dx,jt,null),e(jt,sxr),e(jt,i5e),e(i5e,lxr),e(jt,ixr),e(jt,yc),e(yc,dxr),e(yc,d5e),e(d5e,cxr),e(yc,mxr),e(yc,yK),e(yK,fxr),e(yc,gxr),e(jt,hxr),M(m3,jt,null),e(ir,uxr),e(ir,Ir),M(Gx,Ir,null),e(Ir,pxr),e(Ir,c5e),e(c5e,_xr),e(Ir,bxr),e(Ir,hn),e(hn,vxr),e(hn,m5e),e(m5e,Fxr),e(hn,Txr),e(hn,f5e),e(f5e,Mxr),e(hn,Exr),e(hn,g5e),e(g5e,Cxr),e(hn,wxr),e(Ir,Axr),e(Ir,te),e(te,f3),e(f3,h5e),e(h5e,Lxr),e(f3,yxr),e(f3,xK),e(xK,xxr),e(f3,$xr),e(te,kxr),e(te,g3),e(g3,u5e),e(u5e,Sxr),e(g3,Rxr),e(g3,$K),e($K,Pxr),e(g3,Bxr),e(te,Ixr),e(te,h3),e(h3,p5e),e(p5e,Nxr),e(h3,qxr),e(h3,kK),e(kK,jxr),e(h3,Dxr),e(te,Gxr),e(te,u3),e(u3,_5e),e(_5e,Oxr),e(u3,Vxr),e(u3,SK),e(SK,Xxr),e(u3,zxr),e(te,Wxr),e(te,p3),e(p3,b5e),e(b5e,Qxr),e(p3,Hxr),e(p3,RK),e(RK,Uxr),e(p3,Jxr),e(te,Yxr),e(te,_3),e(_3,v5e),e(v5e,Kxr),e(_3,Zxr),e(_3,PK),e(PK,e$r),e(_3,o$r),e(te,r$r),e(te,b3),e(b3,F5e),e(F5e,t$r),e(b3,a$r),e(b3,BK),e(BK,n$r),e(b3,s$r),e(te,l$r),e(te,v3),e(v3,T5e),e(T5e,i$r),e(v3,d$r),e(v3,IK),e(IK,c$r),e(v3,m$r),e(te,f$r),e(te,F3),e(F3,M5e),e(M5e,g$r),e(F3,h$r),e(F3,NK),e(NK,u$r),e(F3,p$r),e(te,_$r),e(te,T3),e(T3,E5e),e(E5e,b$r),e(T3,v$r),e(T3,qK),e(qK,F$r),e(T3,T$r),e(te,M$r),e(te,M3),e(M3,C5e),e(C5e,E$r),e(M3,C$r),e(M3,jK),e(jK,w$r),e(M3,A$r),e(te,L$r),e(te,E3),e(E3,w5e),e(w5e,y$r),e(E3,x$r),e(E3,DK),e(DK,$$r),e(E3,k$r),e(te,S$r),e(te,C3),e(C3,A5e),e(A5e,R$r),e(C3,P$r),e(C3,GK),e(GK,B$r),e(C3,I$r),e(te,N$r),e(te,w3),e(w3,L5e),e(L5e,q$r),e(w3,j$r),e(w3,OK),e(OK,D$r),e(w3,G$r),e(te,O$r),e(te,A3),e(A3,y5e),e(y5e,V$r),e(A3,X$r),e(A3,VK),e(VK,z$r),e(A3,W$r),e(te,Q$r),e(te,L3),e(L3,x5e),e(x5e,H$r),e(L3,U$r),e(L3,XK),e(XK,J$r),e(L3,Y$r),e(te,K$r),e(te,y3),e(y3,$5e),e($5e,Z$r),e(y3,ekr),e(y3,zK),e(zK,okr),e(y3,rkr),e(te,tkr),e(te,x3),e(x3,k5e),e(k5e,akr),e(x3,nkr),e(x3,WK),e(WK,skr),e(x3,lkr),e(te,ikr),e(te,$3),e($3,S5e),e(S5e,dkr),e($3,ckr),e($3,QK),e(QK,mkr),e($3,fkr),e(te,gkr),e(te,k3),e(k3,R5e),e(R5e,hkr),e(k3,ukr),e(k3,HK),e(HK,pkr),e(k3,_kr),e(te,bkr),e(te,S3),e(S3,P5e),e(P5e,vkr),e(S3,Fkr),e(S3,UK),e(UK,Tkr),e(S3,Mkr),e(te,Ekr),e(te,R3),e(R3,B5e),e(B5e,Ckr),e(R3,wkr),e(R3,JK),e(JK,Akr),e(R3,Lkr),e(te,ykr),e(te,P3),e(P3,I5e),e(I5e,xkr),e(P3,$kr),e(P3,YK),e(YK,kkr),e(P3,Skr),e(te,Rkr),e(te,B3),e(B3,N5e),e(N5e,Pkr),e(B3,Bkr),e(B3,KK),e(KK,Ikr),e(B3,Nkr),e(te,qkr),e(te,I3),e(I3,q5e),e(q5e,jkr),e(I3,Dkr),e(I3,ZK),e(ZK,Gkr),e(I3,Okr),e(te,Vkr),e(te,N3),e(N3,j5e),e(j5e,Xkr),e(N3,zkr),e(N3,eZ),e(eZ,Wkr),e(N3,Qkr),e(Ir,Hkr),M(q3,Ir,null),b(m,$We,_),b(m,xc,_),e(xc,j3),e(j3,D5e),M(Ox,D5e,null),e(xc,Ukr),e(xc,G5e),e(G5e,Jkr),b(m,kWe,_),b(m,dr,_),M(Vx,dr,null),e(dr,Ykr),e(dr,$c),e($c,Kkr),e($c,oZ),e(oZ,Zkr),e($c,eSr),e($c,rZ),e(rZ,oSr),e($c,rSr),e(dr,tSr),e(dr,Xx),e(Xx,aSr),e(Xx,O5e),e(O5e,nSr),e(Xx,sSr),e(dr,lSr),e(dr,Dt),M(zx,Dt,null),e(Dt,iSr),e(Dt,V5e),e(V5e,dSr),e(Dt,cSr),e(Dt,kc),e(kc,mSr),e(kc,X5e),e(X5e,fSr),e(kc,gSr),e(kc,tZ),e(tZ,hSr),e(kc,uSr),e(Dt,pSr),M(D3,Dt,null),e(dr,_Sr),e(dr,Nr),M(Wx,Nr,null),e(Nr,bSr),e(Nr,z5e),e(z5e,vSr),e(Nr,FSr),e(Nr,un),e(un,TSr),e(un,W5e),e(W5e,MSr),e(un,ESr),e(un,Q5e),e(Q5e,CSr),e(un,wSr),e(un,H5e),e(H5e,ASr),e(un,LSr),e(Nr,ySr),e(Nr,ve),e(ve,G3),e(G3,U5e),e(U5e,xSr),e(G3,$Sr),e(G3,aZ),e(aZ,kSr),e(G3,SSr),e(ve,RSr),e(ve,O3),e(O3,J5e),e(J5e,PSr),e(O3,BSr),e(O3,nZ),e(nZ,ISr),e(O3,NSr),e(ve,qSr),e(ve,V3),e(V3,Y5e),e(Y5e,jSr),e(V3,DSr),e(V3,sZ),e(sZ,GSr),e(V3,OSr),e(ve,VSr),e(ve,X3),e(X3,K5e),e(K5e,XSr),e(X3,zSr),e(X3,lZ),e(lZ,WSr),e(X3,QSr),e(ve,HSr),e(ve,z3),e(z3,Z5e),e(Z5e,USr),e(z3,JSr),e(z3,iZ),e(iZ,YSr),e(z3,KSr),e(ve,ZSr),e(ve,W3),e(W3,e3e),e(e3e,eRr),e(W3,oRr),e(W3,dZ),e(dZ,rRr),e(W3,tRr),e(ve,aRr),e(ve,Q3),e(Q3,o3e),e(o3e,nRr),e(Q3,sRr),e(Q3,cZ),e(cZ,lRr),e(Q3,iRr),e(ve,dRr),e(ve,H3),e(H3,r3e),e(r3e,cRr),e(H3,mRr),e(H3,mZ),e(mZ,fRr),e(H3,gRr),e(ve,hRr),e(ve,U3),e(U3,t3e),e(t3e,uRr),e(U3,pRr),e(U3,fZ),e(fZ,_Rr),e(U3,bRr),e(ve,vRr),e(ve,J3),e(J3,a3e),e(a3e,FRr),e(J3,TRr),e(J3,gZ),e(gZ,MRr),e(J3,ERr),e(ve,CRr),e(ve,Y3),e(Y3,n3e),e(n3e,wRr),e(Y3,ARr),e(Y3,hZ),e(hZ,LRr),e(Y3,yRr),e(ve,xRr),e(ve,K3),e(K3,s3e),e(s3e,$Rr),e(K3,kRr),e(K3,uZ),e(uZ,SRr),e(K3,RRr),e(ve,PRr),e(ve,Z3),e(Z3,l3e),e(l3e,BRr),e(Z3,IRr),e(Z3,pZ),e(pZ,NRr),e(Z3,qRr),e(ve,jRr),e(ve,e0),e(e0,i3e),e(i3e,DRr),e(e0,GRr),e(e0,_Z),e(_Z,ORr),e(e0,VRr),e(ve,XRr),e(ve,o0),e(o0,d3e),e(d3e,zRr),e(o0,WRr),e(o0,bZ),e(bZ,QRr),e(o0,HRr),e(ve,URr),e(ve,r0),e(r0,c3e),e(c3e,JRr),e(r0,YRr),e(r0,vZ),e(vZ,KRr),e(r0,ZRr),e(ve,ePr),e(ve,t0),e(t0,m3e),e(m3e,oPr),e(t0,rPr),e(t0,FZ),e(FZ,tPr),e(t0,aPr),e(Nr,nPr),M(a0,Nr,null),b(m,SWe,_),b(m,Sc,_),e(Sc,n0),e(n0,f3e),M(Qx,f3e,null),e(Sc,sPr),e(Sc,g3e),e(g3e,lPr),b(m,RWe,_),b(m,cr,_),M(Hx,cr,null),e(cr,iPr),e(cr,Rc),e(Rc,dPr),e(Rc,TZ),e(TZ,cPr),e(Rc,mPr),e(Rc,MZ),e(MZ,fPr),e(Rc,gPr),e(cr,hPr),e(cr,Ux),e(Ux,uPr),e(Ux,h3e),e(h3e,pPr),e(Ux,_Pr),e(cr,bPr),e(cr,Gt),M(Jx,Gt,null),e(Gt,vPr),e(Gt,u3e),e(u3e,FPr),e(Gt,TPr),e(Gt,Pc),e(Pc,MPr),e(Pc,p3e),e(p3e,EPr),e(Pc,CPr),e(Pc,EZ),e(EZ,wPr),e(Pc,APr),e(Gt,LPr),M(s0,Gt,null),e(cr,yPr),e(cr,qr),M(Yx,qr,null),e(qr,xPr),e(qr,_3e),e(_3e,$Pr),e(qr,kPr),e(qr,pn),e(pn,SPr),e(pn,b3e),e(b3e,RPr),e(pn,PPr),e(pn,v3e),e(v3e,BPr),e(pn,IPr),e(pn,F3e),e(F3e,NPr),e(pn,qPr),e(qr,jPr),e(qr,Kx),e(Kx,l0),e(l0,T3e),e(T3e,DPr),e(l0,GPr),e(l0,CZ),e(CZ,OPr),e(l0,VPr),e(Kx,XPr),e(Kx,i0),e(i0,M3e),e(M3e,zPr),e(i0,WPr),e(i0,wZ),e(wZ,QPr),e(i0,HPr),e(qr,UPr),M(d0,qr,null),b(m,PWe,_),b(m,Bc,_),e(Bc,c0),e(c0,E3e),M(Zx,E3e,null),e(Bc,JPr),e(Bc,C3e),e(C3e,YPr),b(m,BWe,_),b(m,mr,_),M(e$,mr,null),e(mr,KPr),e(mr,Ic),e(Ic,ZPr),e(Ic,AZ),e(AZ,eBr),e(Ic,oBr),e(Ic,LZ),e(LZ,rBr),e(Ic,tBr),e(mr,aBr),e(mr,o$),e(o$,nBr),e(o$,w3e),e(w3e,sBr),e(o$,lBr),e(mr,iBr),e(mr,Ot),M(r$,Ot,null),e(Ot,dBr),e(Ot,A3e),e(A3e,cBr),e(Ot,mBr),e(Ot,Nc),e(Nc,fBr),e(Nc,L3e),e(L3e,gBr),e(Nc,hBr),e(Nc,yZ),e(yZ,uBr),e(Nc,pBr),e(Ot,_Br),M(m0,Ot,null),e(mr,bBr),e(mr,jr),M(t$,jr,null),e(jr,vBr),e(jr,y3e),e(y3e,FBr),e(jr,TBr),e(jr,_n),e(_n,MBr),e(_n,x3e),e(x3e,EBr),e(_n,CBr),e(_n,$3e),e($3e,wBr),e(_n,ABr),e(_n,k3e),e(k3e,LBr),e(_n,yBr),e(jr,xBr),e(jr,S3e),e(S3e,f0),e(f0,R3e),e(R3e,$Br),e(f0,kBr),e(f0,xZ),e(xZ,SBr),e(f0,RBr),e(jr,PBr),M(g0,jr,null),b(m,IWe,_),b(m,qc,_),e(qc,h0),e(h0,P3e),M(a$,P3e,null),e(qc,BBr),e(qc,B3e),e(B3e,IBr),b(m,NWe,_),b(m,fr,_),M(n$,fr,null),e(fr,NBr),e(fr,jc),e(jc,qBr),e(jc,$Z),e($Z,jBr),e(jc,DBr),e(jc,kZ),e(kZ,GBr),e(jc,OBr),e(fr,VBr),e(fr,s$),e(s$,XBr),e(s$,I3e),e(I3e,zBr),e(s$,WBr),e(fr,QBr),e(fr,Vt),M(l$,Vt,null),e(Vt,HBr),e(Vt,N3e),e(N3e,UBr),e(Vt,JBr),e(Vt,Dc),e(Dc,YBr),e(Dc,q3e),e(q3e,KBr),e(Dc,ZBr),e(Dc,SZ),e(SZ,eIr),e(Dc,oIr),e(Vt,rIr),M(u0,Vt,null),e(fr,tIr),e(fr,Dr),M(i$,Dr,null),e(Dr,aIr),e(Dr,j3e),e(j3e,nIr),e(Dr,sIr),e(Dr,bn),e(bn,lIr),e(bn,D3e),e(D3e,iIr),e(bn,dIr),e(bn,G3e),e(G3e,cIr),e(bn,mIr),e(bn,O3e),e(O3e,fIr),e(bn,gIr),e(Dr,hIr),e(Dr,de),e(de,p0),e(p0,V3e),e(V3e,uIr),e(p0,pIr),e(p0,RZ),e(RZ,_Ir),e(p0,bIr),e(de,vIr),e(de,_0),e(_0,X3e),e(X3e,FIr),e(_0,TIr),e(_0,PZ),e(PZ,MIr),e(_0,EIr),e(de,CIr),e(de,b0),e(b0,z3e),e(z3e,wIr),e(b0,AIr),e(b0,BZ),e(BZ,LIr),e(b0,yIr),e(de,xIr),e(de,v0),e(v0,W3e),e(W3e,$Ir),e(v0,kIr),e(v0,IZ),e(IZ,SIr),e(v0,RIr),e(de,PIr),e(de,F0),e(F0,Q3e),e(Q3e,BIr),e(F0,IIr),e(F0,NZ),e(NZ,NIr),e(F0,qIr),e(de,jIr),e(de,T0),e(T0,H3e),e(H3e,DIr),e(T0,GIr),e(T0,qZ),e(qZ,OIr),e(T0,VIr),e(de,XIr),e(de,M0),e(M0,U3e),e(U3e,zIr),e(M0,WIr),e(M0,jZ),e(jZ,QIr),e(M0,HIr),e(de,UIr),e(de,E0),e(E0,J3e),e(J3e,JIr),e(E0,YIr),e(E0,DZ),e(DZ,KIr),e(E0,ZIr),e(de,eNr),e(de,C0),e(C0,Y3e),e(Y3e,oNr),e(C0,rNr),e(C0,GZ),e(GZ,tNr),e(C0,aNr),e(de,nNr),e(de,w0),e(w0,K3e),e(K3e,sNr),e(w0,lNr),e(w0,OZ),e(OZ,iNr),e(w0,dNr),e(de,cNr),e(de,A0),e(A0,Z3e),e(Z3e,mNr),e(A0,fNr),e(A0,VZ),e(VZ,gNr),e(A0,hNr),e(de,uNr),e(de,L0),e(L0,e0e),e(e0e,pNr),e(L0,_Nr),e(L0,XZ),e(XZ,bNr),e(L0,vNr),e(de,FNr),e(de,y0),e(y0,o0e),e(o0e,TNr),e(y0,MNr),e(y0,zZ),e(zZ,ENr),e(y0,CNr),e(de,wNr),e(de,x0),e(x0,r0e),e(r0e,ANr),e(x0,LNr),e(x0,WZ),e(WZ,yNr),e(x0,xNr),e(de,$Nr),e(de,$0),e($0,t0e),e(t0e,kNr),e($0,SNr),e($0,QZ),e(QZ,RNr),e($0,PNr),e(de,BNr),e(de,k0),e(k0,a0e),e(a0e,INr),e(k0,NNr),e(k0,HZ),e(HZ,qNr),e(k0,jNr),e(de,DNr),e(de,S0),e(S0,n0e),e(n0e,GNr),e(S0,ONr),e(S0,UZ),e(UZ,VNr),e(S0,XNr),e(de,zNr),e(de,R0),e(R0,s0e),e(s0e,WNr),e(R0,QNr),e(R0,JZ),e(JZ,HNr),e(R0,UNr),e(de,JNr),e(de,P0),e(P0,l0e),e(l0e,YNr),e(P0,KNr),e(P0,YZ),e(YZ,ZNr),e(P0,eqr),e(de,oqr),e(de,B0),e(B0,i0e),e(i0e,rqr),e(B0,tqr),e(B0,KZ),e(KZ,aqr),e(B0,nqr),e(Dr,sqr),M(I0,Dr,null),b(m,qWe,_),b(m,Gc,_),e(Gc,N0),e(N0,d0e),M(d$,d0e,null),e(Gc,lqr),e(Gc,c0e),e(c0e,iqr),b(m,jWe,_),b(m,gr,_),M(c$,gr,null),e(gr,dqr),e(gr,Oc),e(Oc,cqr),e(Oc,ZZ),e(ZZ,mqr),e(Oc,fqr),e(Oc,eee),e(eee,gqr),e(Oc,hqr),e(gr,uqr),e(gr,m$),e(m$,pqr),e(m$,m0e),e(m0e,_qr),e(m$,bqr),e(gr,vqr),e(gr,Xt),M(f$,Xt,null),e(Xt,Fqr),e(Xt,f0e),e(f0e,Tqr),e(Xt,Mqr),e(Xt,Vc),e(Vc,Eqr),e(Vc,g0e),e(g0e,Cqr),e(Vc,wqr),e(Vc,oee),e(oee,Aqr),e(Vc,Lqr),e(Xt,yqr),M(q0,Xt,null),e(gr,xqr),e(gr,Gr),M(g$,Gr,null),e(Gr,$qr),e(Gr,h0e),e(h0e,kqr),e(Gr,Sqr),e(Gr,vn),e(vn,Rqr),e(vn,u0e),e(u0e,Pqr),e(vn,Bqr),e(vn,p0e),e(p0e,Iqr),e(vn,Nqr),e(vn,_0e),e(_0e,qqr),e(vn,jqr),e(Gr,Dqr),e(Gr,ce),e(ce,j0),e(j0,b0e),e(b0e,Gqr),e(j0,Oqr),e(j0,ree),e(ree,Vqr),e(j0,Xqr),e(ce,zqr),e(ce,D0),e(D0,v0e),e(v0e,Wqr),e(D0,Qqr),e(D0,tee),e(tee,Hqr),e(D0,Uqr),e(ce,Jqr),e(ce,G0),e(G0,F0e),e(F0e,Yqr),e(G0,Kqr),e(G0,aee),e(aee,Zqr),e(G0,ejr),e(ce,ojr),e(ce,O0),e(O0,T0e),e(T0e,rjr),e(O0,tjr),e(O0,nee),e(nee,ajr),e(O0,njr),e(ce,sjr),e(ce,V0),e(V0,M0e),e(M0e,ljr),e(V0,ijr),e(V0,see),e(see,djr),e(V0,cjr),e(ce,mjr),e(ce,X0),e(X0,E0e),e(E0e,fjr),e(X0,gjr),e(X0,lee),e(lee,hjr),e(X0,ujr),e(ce,pjr),e(ce,z0),e(z0,C0e),e(C0e,_jr),e(z0,bjr),e(z0,iee),e(iee,vjr),e(z0,Fjr),e(ce,Tjr),e(ce,W0),e(W0,w0e),e(w0e,Mjr),e(W0,Ejr),e(W0,dee),e(dee,Cjr),e(W0,wjr),e(ce,Ajr),e(ce,Q0),e(Q0,A0e),e(A0e,Ljr),e(Q0,yjr),e(Q0,cee),e(cee,xjr),e(Q0,$jr),e(ce,kjr),e(ce,H0),e(H0,L0e),e(L0e,Sjr),e(H0,Rjr),e(H0,mee),e(mee,Pjr),e(H0,Bjr),e(ce,Ijr),e(ce,U0),e(U0,y0e),e(y0e,Njr),e(U0,qjr),e(U0,fee),e(fee,jjr),e(U0,Djr),e(ce,Gjr),e(ce,J0),e(J0,x0e),e(x0e,Ojr),e(J0,Vjr),e(J0,gee),e(gee,Xjr),e(J0,zjr),e(ce,Wjr),e(ce,Y0),e(Y0,$0e),e($0e,Qjr),e(Y0,Hjr),e(Y0,hee),e(hee,Ujr),e(Y0,Jjr),e(ce,Yjr),e(ce,K0),e(K0,k0e),e(k0e,Kjr),e(K0,Zjr),e(K0,uee),e(uee,eDr),e(K0,oDr),e(ce,rDr),e(ce,Z0),e(Z0,S0e),e(S0e,tDr),e(Z0,aDr),e(Z0,pee),e(pee,nDr),e(Z0,sDr),e(ce,lDr),e(ce,ew),e(ew,R0e),e(R0e,iDr),e(ew,dDr),e(ew,_ee),e(_ee,cDr),e(ew,mDr),e(ce,fDr),e(ce,ow),e(ow,P0e),e(P0e,gDr),e(ow,hDr),e(ow,bee),e(bee,uDr),e(ow,pDr),e(ce,_Dr),e(ce,rw),e(rw,B0e),e(B0e,bDr),e(rw,vDr),e(rw,vee),e(vee,FDr),e(rw,TDr),e(ce,MDr),e(ce,tw),e(tw,I0e),e(I0e,EDr),e(tw,CDr),e(tw,Fee),e(Fee,wDr),e(tw,ADr),e(ce,LDr),e(ce,aw),e(aw,N0e),e(N0e,yDr),e(aw,xDr),e(aw,Tee),e(Tee,$Dr),e(aw,kDr),e(Gr,SDr),M(nw,Gr,null),b(m,DWe,_),b(m,Xc,_),e(Xc,sw),e(sw,q0e),M(h$,q0e,null),e(Xc,RDr),e(Xc,j0e),e(j0e,PDr),b(m,GWe,_),b(m,hr,_),M(u$,hr,null),e(hr,BDr),e(hr,zc),e(zc,IDr),e(zc,Mee),e(Mee,NDr),e(zc,qDr),e(zc,Eee),e(Eee,jDr),e(zc,DDr),e(hr,GDr),e(hr,p$),e(p$,ODr),e(p$,D0e),e(D0e,VDr),e(p$,XDr),e(hr,zDr),e(hr,zt),M(_$,zt,null),e(zt,WDr),e(zt,G0e),e(G0e,QDr),e(zt,HDr),e(zt,Wc),e(Wc,UDr),e(Wc,O0e),e(O0e,JDr),e(Wc,YDr),e(Wc,Cee),e(Cee,KDr),e(Wc,ZDr),e(zt,eGr),M(lw,zt,null),e(hr,oGr),e(hr,Or),M(b$,Or,null),e(Or,rGr),e(Or,V0e),e(V0e,tGr),e(Or,aGr),e(Or,Fn),e(Fn,nGr),e(Fn,X0e),e(X0e,sGr),e(Fn,lGr),e(Fn,z0e),e(z0e,iGr),e(Fn,dGr),e(Fn,W0e),e(W0e,cGr),e(Fn,mGr),e(Or,fGr),e(Or,Q0e),e(Q0e,iw),e(iw,H0e),e(H0e,gGr),e(iw,hGr),e(iw,wee),e(wee,uGr),e(iw,pGr),e(Or,_Gr),M(dw,Or,null),b(m,OWe,_),b(m,Qc,_),e(Qc,cw),e(cw,U0e),M(v$,U0e,null),e(Qc,bGr),e(Qc,J0e),e(J0e,vGr),b(m,VWe,_),b(m,ur,_),M(F$,ur,null),e(ur,FGr),e(ur,Hc),e(Hc,TGr),e(Hc,Aee),e(Aee,MGr),e(Hc,EGr),e(Hc,Lee),e(Lee,CGr),e(Hc,wGr),e(ur,AGr),e(ur,T$),e(T$,LGr),e(T$,Y0e),e(Y0e,yGr),e(T$,xGr),e(ur,$Gr),e(ur,Wt),M(M$,Wt,null),e(Wt,kGr),e(Wt,K0e),e(K0e,SGr),e(Wt,RGr),e(Wt,Uc),e(Uc,PGr),e(Uc,Z0e),e(Z0e,BGr),e(Uc,IGr),e(Uc,yee),e(yee,NGr),e(Uc,qGr),e(Wt,jGr),M(mw,Wt,null),e(ur,DGr),e(ur,Vr),M(E$,Vr,null),e(Vr,GGr),e(Vr,ewe),e(ewe,OGr),e(Vr,VGr),e(Vr,Tn),e(Tn,XGr),e(Tn,owe),e(owe,zGr),e(Tn,WGr),e(Tn,rwe),e(rwe,QGr),e(Tn,HGr),e(Tn,twe),e(twe,UGr),e(Tn,JGr),e(Vr,YGr),e(Vr,awe),e(awe,fw),e(fw,nwe),e(nwe,KGr),e(fw,ZGr),e(fw,xee),e(xee,eOr),e(fw,oOr),e(Vr,rOr),M(gw,Vr,null),b(m,XWe,_),b(m,Jc,_),e(Jc,hw),e(hw,swe),M(C$,swe,null),e(Jc,tOr),e(Jc,lwe),e(lwe,aOr),b(m,zWe,_),b(m,pr,_),M(w$,pr,null),e(pr,nOr),e(pr,Yc),e(Yc,sOr),e(Yc,$ee),e($ee,lOr),e(Yc,iOr),e(Yc,kee),e(kee,dOr),e(Yc,cOr),e(pr,mOr),e(pr,A$),e(A$,fOr),e(A$,iwe),e(iwe,gOr),e(A$,hOr),e(pr,uOr),e(pr,Qt),M(L$,Qt,null),e(Qt,pOr),e(Qt,dwe),e(dwe,_Or),e(Qt,bOr),e(Qt,Kc),e(Kc,vOr),e(Kc,cwe),e(cwe,FOr),e(Kc,TOr),e(Kc,See),e(See,MOr),e(Kc,EOr),e(Qt,COr),M(uw,Qt,null),e(pr,wOr),e(pr,Xr),M(y$,Xr,null),e(Xr,AOr),e(Xr,mwe),e(mwe,LOr),e(Xr,yOr),e(Xr,Mn),e(Mn,xOr),e(Mn,fwe),e(fwe,$Or),e(Mn,kOr),e(Mn,gwe),e(gwe,SOr),e(Mn,ROr),e(Mn,hwe),e(hwe,POr),e(Mn,BOr),e(Xr,IOr),e(Xr,oe),e(oe,pw),e(pw,uwe),e(uwe,NOr),e(pw,qOr),e(pw,Ree),e(Ree,jOr),e(pw,DOr),e(oe,GOr),e(oe,_w),e(_w,pwe),e(pwe,OOr),e(_w,VOr),e(_w,Pee),e(Pee,XOr),e(_w,zOr),e(oe,WOr),e(oe,bw),e(bw,_we),e(_we,QOr),e(bw,HOr),e(bw,Bee),e(Bee,UOr),e(bw,JOr),e(oe,YOr),e(oe,vw),e(vw,bwe),e(bwe,KOr),e(vw,ZOr),e(vw,Iee),e(Iee,eVr),e(vw,oVr),e(oe,rVr),e(oe,Fw),e(Fw,vwe),e(vwe,tVr),e(Fw,aVr),e(Fw,Nee),e(Nee,nVr),e(Fw,sVr),e(oe,lVr),e(oe,Tw),e(Tw,Fwe),e(Fwe,iVr),e(Tw,dVr),e(Tw,qee),e(qee,cVr),e(Tw,mVr),e(oe,fVr),e(oe,Mw),e(Mw,Twe),e(Twe,gVr),e(Mw,hVr),e(Mw,jee),e(jee,uVr),e(Mw,pVr),e(oe,_Vr),e(oe,Ew),e(Ew,Mwe),e(Mwe,bVr),e(Ew,vVr),e(Ew,Dee),e(Dee,FVr),e(Ew,TVr),e(oe,MVr),e(oe,Cw),e(Cw,Ewe),e(Ewe,EVr),e(Cw,CVr),e(Cw,Gee),e(Gee,wVr),e(Cw,AVr),e(oe,LVr),e(oe,ww),e(ww,Cwe),e(Cwe,yVr),e(ww,xVr),e(ww,Oee),e(Oee,$Vr),e(ww,kVr),e(oe,SVr),e(oe,Aw),e(Aw,wwe),e(wwe,RVr),e(Aw,PVr),e(Aw,Vee),e(Vee,BVr),e(Aw,IVr),e(oe,NVr),e(oe,Lw),e(Lw,Awe),e(Awe,qVr),e(Lw,jVr),e(Lw,Xee),e(Xee,DVr),e(Lw,GVr),e(oe,OVr),e(oe,yw),e(yw,Lwe),e(Lwe,VVr),e(yw,XVr),e(yw,zee),e(zee,zVr),e(yw,WVr),e(oe,QVr),e(oe,xw),e(xw,ywe),e(ywe,HVr),e(xw,UVr),e(xw,Wee),e(Wee,JVr),e(xw,YVr),e(oe,KVr),e(oe,$w),e($w,xwe),e(xwe,ZVr),e($w,eXr),e($w,Qee),e(Qee,oXr),e($w,rXr),e(oe,tXr),e(oe,kw),e(kw,$we),e($we,aXr),e(kw,nXr),e(kw,Hee),e(Hee,sXr),e(kw,lXr),e(oe,iXr),e(oe,Sw),e(Sw,kwe),e(kwe,dXr),e(Sw,cXr),e(Sw,Uee),e(Uee,mXr),e(Sw,fXr),e(oe,gXr),e(oe,Rw),e(Rw,Swe),e(Swe,hXr),e(Rw,uXr),e(Rw,Jee),e(Jee,pXr),e(Rw,_Xr),e(oe,bXr),e(oe,Pw),e(Pw,Rwe),e(Rwe,vXr),e(Pw,FXr),e(Pw,Yee),e(Yee,TXr),e(Pw,MXr),e(oe,EXr),e(oe,Bw),e(Bw,Pwe),e(Pwe,CXr),e(Bw,wXr),e(Bw,Kee),e(Kee,AXr),e(Bw,LXr),e(oe,yXr),e(oe,Iw),e(Iw,Bwe),e(Bwe,xXr),e(Iw,$Xr),e(Iw,Zee),e(Zee,kXr),e(Iw,SXr),e(oe,RXr),e(oe,Nw),e(Nw,Iwe),e(Iwe,PXr),e(Nw,BXr),e(Nw,eoe),e(eoe,IXr),e(Nw,NXr),e(oe,qXr),e(oe,qw),e(qw,Nwe),e(Nwe,jXr),e(qw,DXr),e(qw,ooe),e(ooe,GXr),e(qw,OXr),e(oe,VXr),e(oe,jw),e(jw,qwe),e(qwe,XXr),e(jw,zXr),e(jw,roe),e(roe,WXr),e(jw,QXr),e(oe,HXr),e(oe,Dw),e(Dw,jwe),e(jwe,UXr),e(Dw,JXr),e(Dw,toe),e(toe,YXr),e(Dw,KXr),e(oe,ZXr),e(oe,Gw),e(Gw,Dwe),e(Dwe,ezr),e(Gw,ozr),e(Gw,aoe),e(aoe,rzr),e(Gw,tzr),e(oe,azr),e(oe,Ow),e(Ow,Gwe),e(Gwe,nzr),e(Ow,szr),e(Ow,noe),e(noe,lzr),e(Ow,izr),e(Xr,dzr),M(Vw,Xr,null),b(m,WWe,_),b(m,Zc,_),e(Zc,Xw),e(Xw,Owe),M(x$,Owe,null),e(Zc,czr),e(Zc,Vwe),e(Vwe,mzr),b(m,QWe,_),b(m,_r,_),M($$,_r,null),e(_r,fzr),e(_r,em),e(em,gzr),e(em,soe),e(soe,hzr),e(em,uzr),e(em,loe),e(loe,pzr),e(em,_zr),e(_r,bzr),e(_r,k$),e(k$,vzr),e(k$,Xwe),e(Xwe,Fzr),e(k$,Tzr),e(_r,Mzr),e(_r,Ht),M(S$,Ht,null),e(Ht,Ezr),e(Ht,zwe),e(zwe,Czr),e(Ht,wzr),e(Ht,om),e(om,Azr),e(om,Wwe),e(Wwe,Lzr),e(om,yzr),e(om,ioe),e(ioe,xzr),e(om,$zr),e(Ht,kzr),M(zw,Ht,null),e(_r,Szr),e(_r,zr),M(R$,zr,null),e(zr,Rzr),e(zr,Qwe),e(Qwe,Pzr),e(zr,Bzr),e(zr,En),e(En,Izr),e(En,Hwe),e(Hwe,Nzr),e(En,qzr),e(En,Uwe),e(Uwe,jzr),e(En,Dzr),e(En,Jwe),e(Jwe,Gzr),e(En,Ozr),e(zr,Vzr),e(zr,xe),e(xe,Ww),e(Ww,Ywe),e(Ywe,Xzr),e(Ww,zzr),e(Ww,doe),e(doe,Wzr),e(Ww,Qzr),e(xe,Hzr),e(xe,Qw),e(Qw,Kwe),e(Kwe,Uzr),e(Qw,Jzr),e(Qw,coe),e(coe,Yzr),e(Qw,Kzr),e(xe,Zzr),e(xe,Hw),e(Hw,Zwe),e(Zwe,eWr),e(Hw,oWr),e(Hw,moe),e(moe,rWr),e(Hw,tWr),e(xe,aWr),e(xe,Uw),e(Uw,eAe),e(eAe,nWr),e(Uw,sWr),e(Uw,foe),e(foe,lWr),e(Uw,iWr),e(xe,dWr),e(xe,Jw),e(Jw,oAe),e(oAe,cWr),e(Jw,mWr),e(Jw,goe),e(goe,fWr),e(Jw,gWr),e(xe,hWr),e(xe,Yw),e(Yw,rAe),e(rAe,uWr),e(Yw,pWr),e(Yw,hoe),e(hoe,_Wr),e(Yw,bWr),e(xe,vWr),e(xe,Kw),e(Kw,tAe),e(tAe,FWr),e(Kw,TWr),e(Kw,uoe),e(uoe,MWr),e(Kw,EWr),e(xe,CWr),e(xe,Zw),e(Zw,aAe),e(aAe,wWr),e(Zw,AWr),e(Zw,poe),e(poe,LWr),e(Zw,yWr),e(xe,xWr),e(xe,eA),e(eA,nAe),e(nAe,$Wr),e(eA,kWr),e(eA,_oe),e(_oe,SWr),e(eA,RWr),e(xe,PWr),e(xe,oA),e(oA,sAe),e(sAe,BWr),e(oA,IWr),e(oA,boe),e(boe,NWr),e(oA,qWr),e(zr,jWr),M(rA,zr,null),b(m,HWe,_),b(m,rm,_),e(rm,tA),e(tA,lAe),M(P$,lAe,null),e(rm,DWr),e(rm,iAe),e(iAe,GWr),b(m,UWe,_),b(m,br,_),M(B$,br,null),e(br,OWr),e(br,tm),e(tm,VWr),e(tm,voe),e(voe,XWr),e(tm,zWr),e(tm,Foe),e(Foe,WWr),e(tm,QWr),e(br,HWr),e(br,I$),e(I$,UWr),e(I$,dAe),e(dAe,JWr),e(I$,YWr),e(br,KWr),e(br,Ut),M(N$,Ut,null),e(Ut,ZWr),e(Ut,cAe),e(cAe,eQr),e(Ut,oQr),e(Ut,am),e(am,rQr),e(am,mAe),e(mAe,tQr),e(am,aQr),e(am,Toe),e(Toe,nQr),e(am,sQr),e(Ut,lQr),M(aA,Ut,null),e(br,iQr),e(br,Wr),M(q$,Wr,null),e(Wr,dQr),e(Wr,fAe),e(fAe,cQr),e(Wr,mQr),e(Wr,Cn),e(Cn,fQr),e(Cn,gAe),e(gAe,gQr),e(Cn,hQr),e(Cn,hAe),e(hAe,uQr),e(Cn,pQr),e(Cn,uAe),e(uAe,_Qr),e(Cn,bQr),e(Wr,vQr),e(Wr,Ee),e(Ee,nA),e(nA,pAe),e(pAe,FQr),e(nA,TQr),e(nA,Moe),e(Moe,MQr),e(nA,EQr),e(Ee,CQr),e(Ee,sA),e(sA,_Ae),e(_Ae,wQr),e(sA,AQr),e(sA,Eoe),e(Eoe,LQr),e(sA,yQr),e(Ee,xQr),e(Ee,lA),e(lA,bAe),e(bAe,$Qr),e(lA,kQr),e(lA,Coe),e(Coe,SQr),e(lA,RQr),e(Ee,PQr),e(Ee,iA),e(iA,vAe),e(vAe,BQr),e(iA,IQr),e(iA,woe),e(woe,NQr),e(iA,qQr),e(Ee,jQr),e(Ee,dA),e(dA,FAe),e(FAe,DQr),e(dA,GQr),e(dA,Aoe),e(Aoe,OQr),e(dA,VQr),e(Ee,XQr),e(Ee,cA),e(cA,TAe),e(TAe,zQr),e(cA,WQr),e(cA,Loe),e(Loe,QQr),e(cA,HQr),e(Ee,UQr),e(Ee,mA),e(mA,MAe),e(MAe,JQr),e(mA,YQr),e(mA,yoe),e(yoe,KQr),e(mA,ZQr),e(Ee,eHr),e(Ee,fA),e(fA,EAe),e(EAe,oHr),e(fA,rHr),e(fA,xoe),e(xoe,tHr),e(fA,aHr),e(Ee,nHr),e(Ee,gA),e(gA,CAe),e(CAe,sHr),e(gA,lHr),e(gA,$oe),e($oe,iHr),e(gA,dHr),e(Ee,cHr),e(Ee,hA),e(hA,wAe),e(wAe,mHr),e(hA,fHr),e(hA,koe),e(koe,gHr),e(hA,hHr),e(Ee,uHr),e(Ee,uA),e(uA,AAe),e(AAe,pHr),e(uA,_Hr),e(uA,Soe),e(Soe,bHr),e(uA,vHr),e(Ee,FHr),e(Ee,pA),e(pA,LAe),e(LAe,THr),e(pA,MHr),e(pA,Roe),e(Roe,EHr),e(pA,CHr),e(Ee,wHr),e(Ee,_A),e(_A,yAe),e(yAe,AHr),e(_A,LHr),e(_A,Poe),e(Poe,yHr),e(_A,xHr),e(Wr,$Hr),M(bA,Wr,null),b(m,JWe,_),b(m,nm,_),e(nm,vA),e(vA,xAe),M(j$,xAe,null),e(nm,kHr),e(nm,$Ae),e($Ae,SHr),b(m,YWe,_),b(m,vr,_),M(D$,vr,null),e(vr,RHr),e(vr,sm),e(sm,PHr),e(sm,Boe),e(Boe,BHr),e(sm,IHr),e(sm,Ioe),e(Ioe,NHr),e(sm,qHr),e(vr,jHr),e(vr,G$),e(G$,DHr),e(G$,kAe),e(kAe,GHr),e(G$,OHr),e(vr,VHr),e(vr,Jt),M(O$,Jt,null),e(Jt,XHr),e(Jt,SAe),e(SAe,zHr),e(Jt,WHr),e(Jt,lm),e(lm,QHr),e(lm,RAe),e(RAe,HHr),e(lm,UHr),e(lm,Noe),e(Noe,JHr),e(lm,YHr),e(Jt,KHr),M(FA,Jt,null),e(vr,ZHr),e(vr,Qr),M(V$,Qr,null),e(Qr,eUr),e(Qr,PAe),e(PAe,oUr),e(Qr,rUr),e(Qr,wn),e(wn,tUr),e(wn,BAe),e(BAe,aUr),e(wn,nUr),e(wn,IAe),e(IAe,sUr),e(wn,lUr),e(wn,NAe),e(NAe,iUr),e(wn,dUr),e(Qr,cUr),e(Qr,$e),e($e,TA),e(TA,qAe),e(qAe,mUr),e(TA,fUr),e(TA,qoe),e(qoe,gUr),e(TA,hUr),e($e,uUr),e($e,MA),e(MA,jAe),e(jAe,pUr),e(MA,_Ur),e(MA,joe),e(joe,bUr),e(MA,vUr),e($e,FUr),e($e,EA),e(EA,DAe),e(DAe,TUr),e(EA,MUr),e(EA,Doe),e(Doe,EUr),e(EA,CUr),e($e,wUr),e($e,CA),e(CA,GAe),e(GAe,AUr),e(CA,LUr),e(CA,Goe),e(Goe,yUr),e(CA,xUr),e($e,$Ur),e($e,wA),e(wA,OAe),e(OAe,kUr),e(wA,SUr),e(wA,Ooe),e(Ooe,RUr),e(wA,PUr),e($e,BUr),e($e,AA),e(AA,VAe),e(VAe,IUr),e(AA,NUr),e(AA,Voe),e(Voe,qUr),e(AA,jUr),e($e,DUr),e($e,LA),e(LA,XAe),e(XAe,GUr),e(LA,OUr),e(LA,Xoe),e(Xoe,VUr),e(LA,XUr),e($e,zUr),e($e,yA),e(yA,zAe),e(zAe,WUr),e(yA,QUr),e(yA,zoe),e(zoe,HUr),e(yA,UUr),e($e,JUr),e($e,xA),e(xA,WAe),e(WAe,YUr),e(xA,KUr),e(xA,Woe),e(Woe,ZUr),e(xA,eJr),e($e,oJr),e($e,$A),e($A,QAe),e(QAe,rJr),e($A,tJr),e($A,Qoe),e(Qoe,aJr),e($A,nJr),e(Qr,sJr),M(kA,Qr,null),b(m,KWe,_),b(m,im,_),e(im,SA),e(SA,HAe),M(X$,HAe,null),e(im,lJr),e(im,UAe),e(UAe,iJr),b(m,ZWe,_),b(m,Fr,_),M(z$,Fr,null),e(Fr,dJr),e(Fr,dm),e(dm,cJr),e(dm,Hoe),e(Hoe,mJr),e(dm,fJr),e(dm,Uoe),e(Uoe,gJr),e(dm,hJr),e(Fr,uJr),e(Fr,W$),e(W$,pJr),e(W$,JAe),e(JAe,_Jr),e(W$,bJr),e(Fr,vJr),e(Fr,Yt),M(Q$,Yt,null),e(Yt,FJr),e(Yt,YAe),e(YAe,TJr),e(Yt,MJr),e(Yt,cm),e(cm,EJr),e(cm,KAe),e(KAe,CJr),e(cm,wJr),e(cm,Joe),e(Joe,AJr),e(cm,LJr),e(Yt,yJr),M(RA,Yt,null),e(Fr,xJr),e(Fr,Hr),M(H$,Hr,null),e(Hr,$Jr),e(Hr,ZAe),e(ZAe,kJr),e(Hr,SJr),e(Hr,An),e(An,RJr),e(An,e6e),e(e6e,PJr),e(An,BJr),e(An,o6e),e(o6e,IJr),e(An,NJr),e(An,r6e),e(r6e,qJr),e(An,jJr),e(Hr,DJr),e(Hr,ke),e(ke,PA),e(PA,t6e),e(t6e,GJr),e(PA,OJr),e(PA,Yoe),e(Yoe,VJr),e(PA,XJr),e(ke,zJr),e(ke,BA),e(BA,a6e),e(a6e,WJr),e(BA,QJr),e(BA,Koe),e(Koe,HJr),e(BA,UJr),e(ke,JJr),e(ke,IA),e(IA,n6e),e(n6e,YJr),e(IA,KJr),e(IA,Zoe),e(Zoe,ZJr),e(IA,eYr),e(ke,oYr),e(ke,NA),e(NA,s6e),e(s6e,rYr),e(NA,tYr),e(NA,ere),e(ere,aYr),e(NA,nYr),e(ke,sYr),e(ke,qA),e(qA,l6e),e(l6e,lYr),e(qA,iYr),e(qA,ore),e(ore,dYr),e(qA,cYr),e(ke,mYr),e(ke,jA),e(jA,i6e),e(i6e,fYr),e(jA,gYr),e(jA,rre),e(rre,hYr),e(jA,uYr),e(ke,pYr),e(ke,DA),e(DA,d6e),e(d6e,_Yr),e(DA,bYr),e(DA,tre),e(tre,vYr),e(DA,FYr),e(ke,TYr),e(ke,GA),e(GA,c6e),e(c6e,MYr),e(GA,EYr),e(GA,are),e(are,CYr),e(GA,wYr),e(ke,AYr),e(ke,OA),e(OA,m6e),e(m6e,LYr),e(OA,yYr),e(OA,nre),e(nre,xYr),e(OA,$Yr),e(ke,kYr),e(ke,VA),e(VA,f6e),e(f6e,SYr),e(VA,RYr),e(VA,sre),e(sre,PYr),e(VA,BYr),e(Hr,IYr),M(XA,Hr,null),b(m,eQe,_),b(m,mm,_),e(mm,zA),e(zA,g6e),M(U$,g6e,null),e(mm,NYr),e(mm,h6e),e(h6e,qYr),b(m,oQe,_),b(m,Tr,_),M(J$,Tr,null),e(Tr,jYr),e(Tr,fm),e(fm,DYr),e(fm,lre),e(lre,GYr),e(fm,OYr),e(fm,ire),e(ire,VYr),e(fm,XYr),e(Tr,zYr),e(Tr,Y$),e(Y$,WYr),e(Y$,u6e),e(u6e,QYr),e(Y$,HYr),e(Tr,UYr),e(Tr,Kt),M(K$,Kt,null),e(Kt,JYr),e(Kt,p6e),e(p6e,YYr),e(Kt,KYr),e(Kt,gm),e(gm,ZYr),e(gm,_6e),e(_6e,eKr),e(gm,oKr),e(gm,dre),e(dre,rKr),e(gm,tKr),e(Kt,aKr),M(WA,Kt,null),e(Tr,nKr),e(Tr,Ur),M(Z$,Ur,null),e(Ur,sKr),e(Ur,b6e),e(b6e,lKr),e(Ur,iKr),e(Ur,Ln),e(Ln,dKr),e(Ln,v6e),e(v6e,cKr),e(Ln,mKr),e(Ln,F6e),e(F6e,fKr),e(Ln,gKr),e(Ln,T6e),e(T6e,hKr),e(Ln,uKr),e(Ur,pKr),e(Ur,Se),e(Se,QA),e(QA,M6e),e(M6e,_Kr),e(QA,bKr),e(QA,cre),e(cre,vKr),e(QA,FKr),e(Se,TKr),e(Se,HA),e(HA,E6e),e(E6e,MKr),e(HA,EKr),e(HA,mre),e(mre,CKr),e(HA,wKr),e(Se,AKr),e(Se,UA),e(UA,C6e),e(C6e,LKr),e(UA,yKr),e(UA,fre),e(fre,xKr),e(UA,$Kr),e(Se,kKr),e(Se,JA),e(JA,w6e),e(w6e,SKr),e(JA,RKr),e(JA,gre),e(gre,PKr),e(JA,BKr),e(Se,IKr),e(Se,YA),e(YA,A6e),e(A6e,NKr),e(YA,qKr),e(YA,hre),e(hre,jKr),e(YA,DKr),e(Se,GKr),e(Se,KA),e(KA,L6e),e(L6e,OKr),e(KA,VKr),e(KA,ure),e(ure,XKr),e(KA,zKr),e(Se,WKr),e(Se,ZA),e(ZA,y6e),e(y6e,QKr),e(ZA,HKr),e(ZA,pre),e(pre,UKr),e(ZA,JKr),e(Se,YKr),e(Se,e6),e(e6,x6e),e(x6e,KKr),e(e6,ZKr),e(e6,_re),e(_re,eZr),e(e6,oZr),e(Se,rZr),e(Se,o6),e(o6,$6e),e($6e,tZr),e(o6,aZr),e(o6,bre),e(bre,nZr),e(o6,sZr),e(Se,lZr),e(Se,r6),e(r6,k6e),e(k6e,iZr),e(r6,dZr),e(r6,vre),e(vre,cZr),e(r6,mZr),e(Ur,fZr),M(t6,Ur,null),b(m,rQe,_),b(m,hm,_),e(hm,a6),e(a6,S6e),M(ek,S6e,null),e(hm,gZr),e(hm,R6e),e(R6e,hZr),b(m,tQe,_),b(m,Mr,_),M(ok,Mr,null),e(Mr,uZr),e(Mr,um),e(um,pZr),e(um,Fre),e(Fre,_Zr),e(um,bZr),e(um,Tre),e(Tre,vZr),e(um,FZr),e(Mr,TZr),e(Mr,rk),e(rk,MZr),e(rk,P6e),e(P6e,EZr),e(rk,CZr),e(Mr,wZr),e(Mr,Zt),M(tk,Zt,null),e(Zt,AZr),e(Zt,B6e),e(B6e,LZr),e(Zt,yZr),e(Zt,pm),e(pm,xZr),e(pm,I6e),e(I6e,$Zr),e(pm,kZr),e(pm,Mre),e(Mre,SZr),e(pm,RZr),e(Zt,PZr),M(n6,Zt,null),e(Mr,BZr),e(Mr,Jr),M(ak,Jr,null),e(Jr,IZr),e(Jr,N6e),e(N6e,NZr),e(Jr,qZr),e(Jr,yn),e(yn,jZr),e(yn,q6e),e(q6e,DZr),e(yn,GZr),e(yn,j6e),e(j6e,OZr),e(yn,VZr),e(yn,D6e),e(D6e,XZr),e(yn,zZr),e(Jr,WZr),e(Jr,Re),e(Re,s6),e(s6,G6e),e(G6e,QZr),e(s6,HZr),e(s6,Ere),e(Ere,UZr),e(s6,JZr),e(Re,YZr),e(Re,l6),e(l6,O6e),e(O6e,KZr),e(l6,ZZr),e(l6,Cre),e(Cre,eet),e(l6,oet),e(Re,ret),e(Re,i6),e(i6,V6e),e(V6e,tet),e(i6,aet),e(i6,wre),e(wre,net),e(i6,set),e(Re,iet),e(Re,d6),e(d6,X6e),e(X6e,det),e(d6,cet),e(d6,Are),e(Are,met),e(d6,fet),e(Re,get),e(Re,c6),e(c6,z6e),e(z6e,het),e(c6,uet),e(c6,Lre),e(Lre,pet),e(c6,_et),e(Re,bet),e(Re,m6),e(m6,W6e),e(W6e,vet),e(m6,Fet),e(m6,yre),e(yre,Tet),e(m6,Met),e(Re,Eet),e(Re,f6),e(f6,Q6e),e(Q6e,Cet),e(f6,wet),e(f6,xre),e(xre,Aet),e(f6,Let),e(Re,yet),e(Re,g6),e(g6,H6e),e(H6e,xet),e(g6,$et),e(g6,$re),e($re,ket),e(g6,Set),e(Re,Ret),e(Re,h6),e(h6,U6e),e(U6e,Pet),e(h6,Bet),e(h6,kre),e(kre,Iet),e(h6,Net),e(Re,qet),e(Re,u6),e(u6,J6e),e(J6e,jet),e(u6,Det),e(u6,Sre),e(Sre,Get),e(u6,Oet),e(Jr,Vet),M(p6,Jr,null),b(m,aQe,_),b(m,_m,_),e(_m,_6),e(_6,Y6e),M(nk,Y6e,null),e(_m,Xet),e(_m,K6e),e(K6e,zet),b(m,nQe,_),b(m,Er,_),M(sk,Er,null),e(Er,Wet),e(Er,bm),e(bm,Qet),e(bm,Rre),e(Rre,Het),e(bm,Uet),e(bm,Pre),e(Pre,Jet),e(bm,Yet),e(Er,Ket),e(Er,lk),e(lk,Zet),e(lk,Z6e),e(Z6e,eot),e(lk,oot),e(Er,rot),e(Er,ea),M(ik,ea,null),e(ea,tot),e(ea,e7e),e(e7e,aot),e(ea,not),e(ea,vm),e(vm,sot),e(vm,o7e),e(o7e,lot),e(vm,iot),e(vm,Bre),e(Bre,dot),e(vm,cot),e(ea,mot),M(b6,ea,null),e(Er,fot),e(Er,Yr),M(dk,Yr,null),e(Yr,got),e(Yr,r7e),e(r7e,hot),e(Yr,uot),e(Yr,xn),e(xn,pot),e(xn,t7e),e(t7e,_ot),e(xn,bot),e(xn,a7e),e(a7e,vot),e(xn,Fot),e(xn,n7e),e(n7e,Tot),e(xn,Mot),e(Yr,Eot),e(Yr,Xe),e(Xe,v6),e(v6,s7e),e(s7e,Cot),e(v6,wot),e(v6,Ire),e(Ire,Aot),e(v6,Lot),e(Xe,yot),e(Xe,F6),e(F6,l7e),e(l7e,xot),e(F6,$ot),e(F6,Nre),e(Nre,kot),e(F6,Sot),e(Xe,Rot),e(Xe,T6),e(T6,i7e),e(i7e,Pot),e(T6,Bot),e(T6,qre),e(qre,Iot),e(T6,Not),e(Xe,qot),e(Xe,M6),e(M6,d7e),e(d7e,jot),e(M6,Dot),e(M6,jre),e(jre,Got),e(M6,Oot),e(Xe,Vot),e(Xe,E6),e(E6,c7e),e(c7e,Xot),e(E6,zot),e(E6,Dre),e(Dre,Wot),e(E6,Qot),e(Xe,Hot),e(Xe,C6),e(C6,m7e),e(m7e,Uot),e(C6,Jot),e(C6,Gre),e(Gre,Yot),e(C6,Kot),e(Xe,Zot),e(Xe,w6),e(w6,f7e),e(f7e,ert),e(w6,ort),e(w6,Ore),e(Ore,rrt),e(w6,trt),e(Xe,art),e(Xe,A6),e(A6,g7e),e(g7e,nrt),e(A6,srt),e(A6,Vre),e(Vre,lrt),e(A6,irt),e(Yr,drt),M(L6,Yr,null),b(m,sQe,_),b(m,Fm,_),e(Fm,y6),e(y6,h7e),M(ck,h7e,null),e(Fm,crt),e(Fm,u7e),e(u7e,mrt),b(m,lQe,_),b(m,Cr,_),M(mk,Cr,null),e(Cr,frt),e(Cr,Tm),e(Tm,grt),e(Tm,Xre),e(Xre,hrt),e(Tm,urt),e(Tm,zre),e(zre,prt),e(Tm,_rt),e(Cr,brt),e(Cr,fk),e(fk,vrt),e(fk,p7e),e(p7e,Frt),e(fk,Trt),e(Cr,Mrt),e(Cr,oa),M(gk,oa,null),e(oa,Ert),e(oa,_7e),e(_7e,Crt),e(oa,wrt),e(oa,Mm),e(Mm,Art),e(Mm,b7e),e(b7e,Lrt),e(Mm,yrt),e(Mm,Wre),e(Wre,xrt),e(Mm,$rt),e(oa,krt),M(x6,oa,null),e(Cr,Srt),e(Cr,Kr),M(hk,Kr,null),e(Kr,Rrt),e(Kr,v7e),e(v7e,Prt),e(Kr,Brt),e(Kr,$n),e($n,Irt),e($n,F7e),e(F7e,Nrt),e($n,qrt),e($n,T7e),e(T7e,jrt),e($n,Drt),e($n,M7e),e(M7e,Grt),e($n,Ort),e(Kr,Vrt),e(Kr,ze),e(ze,$6),e($6,E7e),e(E7e,Xrt),e($6,zrt),e($6,Qre),e(Qre,Wrt),e($6,Qrt),e(ze,Hrt),e(ze,k6),e(k6,C7e),e(C7e,Urt),e(k6,Jrt),e(k6,Hre),e(Hre,Yrt),e(k6,Krt),e(ze,Zrt),e(ze,S6),e(S6,w7e),e(w7e,ett),e(S6,ott),e(S6,Ure),e(Ure,rtt),e(S6,ttt),e(ze,att),e(ze,R6),e(R6,A7e),e(A7e,ntt),e(R6,stt),e(R6,Jre),e(Jre,ltt),e(R6,itt),e(ze,dtt),e(ze,P6),e(P6,L7e),e(L7e,ctt),e(P6,mtt),e(P6,Yre),e(Yre,ftt),e(P6,gtt),e(ze,htt),e(ze,B6),e(B6,y7e),e(y7e,utt),e(B6,ptt),e(B6,Kre),e(Kre,_tt),e(B6,btt),e(ze,vtt),e(ze,I6),e(I6,x7e),e(x7e,Ftt),e(I6,Ttt),e(I6,Zre),e(Zre,Mtt),e(I6,Ett),e(ze,Ctt),e(ze,N6),e(N6,$7e),e($7e,wtt),e(N6,Att),e(N6,ete),e(ete,Ltt),e(N6,ytt),e(Kr,xtt),M(q6,Kr,null),b(m,iQe,_),b(m,Em,_),e(Em,j6),e(j6,k7e),M(uk,k7e,null),e(Em,$tt),e(Em,S7e),e(S7e,ktt),b(m,dQe,_),b(m,wr,_),M(pk,wr,null),e(wr,Stt),e(wr,Cm),e(Cm,Rtt),e(Cm,ote),e(ote,Ptt),e(Cm,Btt),e(Cm,rte),e(rte,Itt),e(Cm,Ntt),e(wr,qtt),e(wr,_k),e(_k,jtt),e(_k,R7e),e(R7e,Dtt),e(_k,Gtt),e(wr,Ott),e(wr,ra),M(bk,ra,null),e(ra,Vtt),e(ra,P7e),e(P7e,Xtt),e(ra,ztt),e(ra,wm),e(wm,Wtt),e(wm,B7e),e(B7e,Qtt),e(wm,Htt),e(wm,tte),e(tte,Utt),e(wm,Jtt),e(ra,Ytt),M(D6,ra,null),e(wr,Ktt),e(wr,Zr),M(vk,Zr,null),e(Zr,Ztt),e(Zr,I7e),e(I7e,eat),e(Zr,oat),e(Zr,kn),e(kn,rat),e(kn,N7e),e(N7e,tat),e(kn,aat),e(kn,q7e),e(q7e,nat),e(kn,sat),e(kn,j7e),e(j7e,lat),e(kn,iat),e(Zr,dat),e(Zr,D7e),e(D7e,G6),e(G6,G7e),e(G7e,cat),e(G6,mat),e(G6,ate),e(ate,fat),e(G6,gat),e(Zr,hat),M(O6,Zr,null),b(m,cQe,_),b(m,Am,_),e(Am,V6),e(V6,O7e),M(Fk,O7e,null),e(Am,uat),e(Am,V7e),e(V7e,pat),b(m,mQe,_),b(m,Ar,_),M(Tk,Ar,null),e(Ar,_at),e(Ar,Lm),e(Lm,bat),e(Lm,nte),e(nte,vat),e(Lm,Fat),e(Lm,ste),e(ste,Tat),e(Lm,Mat),e(Ar,Eat),e(Ar,Mk),e(Mk,Cat),e(Mk,X7e),e(X7e,wat),e(Mk,Aat),e(Ar,Lat),e(Ar,ta),M(Ek,ta,null),e(ta,yat),e(ta,z7e),e(z7e,xat),e(ta,$at),e(ta,ym),e(ym,kat),e(ym,W7e),e(W7e,Sat),e(ym,Rat),e(ym,lte),e(lte,Pat),e(ym,Bat),e(ta,Iat),M(X6,ta,null),e(Ar,Nat),e(Ar,et),M(Ck,et,null),e(et,qat),e(et,Q7e),e(Q7e,jat),e(et,Dat),e(et,Sn),e(Sn,Gat),e(Sn,H7e),e(H7e,Oat),e(Sn,Vat),e(Sn,U7e),e(U7e,Xat),e(Sn,zat),e(Sn,J7e),e(J7e,Wat),e(Sn,Qat),e(et,Hat),e(et,wk),e(wk,z6),e(z6,Y7e),e(Y7e,Uat),e(z6,Jat),e(z6,ite),e(ite,Yat),e(z6,Kat),e(wk,Zat),e(wk,W6),e(W6,K7e),e(K7e,ent),e(W6,ont),e(W6,dte),e(dte,rnt),e(W6,tnt),e(et,ant),M(Q6,et,null),b(m,fQe,_),b(m,xm,_),e(xm,H6),e(H6,Z7e),M(Ak,Z7e,null),e(xm,nnt),e(xm,eLe),e(eLe,snt),b(m,gQe,_),b(m,Lr,_),M(Lk,Lr,null),e(Lr,lnt),e(Lr,$m),e($m,int),e($m,cte),e(cte,dnt),e($m,cnt),e($m,mte),e(mte,mnt),e($m,fnt),e(Lr,gnt),e(Lr,yk),e(yk,hnt),e(yk,oLe),e(oLe,unt),e(yk,pnt),e(Lr,_nt),e(Lr,aa),M(xk,aa,null),e(aa,bnt),e(aa,rLe),e(rLe,vnt),e(aa,Fnt),e(aa,km),e(km,Tnt),e(km,tLe),e(tLe,Mnt),e(km,Ent),e(km,fte),e(fte,Cnt),e(km,wnt),e(aa,Ant),M(U6,aa,null),e(Lr,Lnt),e(Lr,ot),M($k,ot,null),e(ot,ynt),e(ot,aLe),e(aLe,xnt),e(ot,$nt),e(ot,Rn),e(Rn,knt),e(Rn,nLe),e(nLe,Snt),e(Rn,Rnt),e(Rn,sLe),e(sLe,Pnt),e(Rn,Bnt),e(Rn,lLe),e(lLe,Int),e(Rn,Nnt),e(ot,qnt),e(ot,iLe),e(iLe,J6),e(J6,dLe),e(dLe,jnt),e(J6,Dnt),e(J6,gte),e(gte,Gnt),e(J6,Ont),e(ot,Vnt),M(Y6,ot,null),hQe=!0},p(m,[_]){const kk={};_&2&&(kk.$$scope={dirty:_,ctx:m}),Dm.$set(kk);const cLe={};_&2&&(cLe.$$scope={dirty:_,ctx:m}),oh.$set(cLe);const mLe={};_&2&&(mLe.$$scope={dirty:_,ctx:m}),Nh.$set(mLe);const fLe={};_&2&&(fLe.$$scope={dirty:_,ctx:m}),Mu.$set(fLe);const Sk={};_&2&&(Sk.$$scope={dirty:_,ctx:m}),Eu.$set(Sk);const gLe={};_&2&&(gLe.$$scope={dirty:_,ctx:m}),zu.$set(gLe);const Pn={};_&2&&(Pn.$$scope={dirty:_,ctx:m}),Wu.$set(Pn);const hLe={};_&2&&(hLe.$$scope={dirty:_,ctx:m}),Uu.$set(hLe);const uLe={};_&2&&(uLe.$$scope={dirty:_,ctx:m}),r2.$set(uLe);const pLe={};_&2&&(pLe.$$scope={dirty:_,ctx:m}),a2.$set(pLe);const Rk={};_&2&&(Rk.$$scope={dirty:_,ctx:m}),Y2.$set(Rk);const _Le={};_&2&&(_Le.$$scope={dirty:_,ctx:m}),Z2.$set(_Le);const Pk={};_&2&&(Pk.$$scope={dirty:_,ctx:m}),Gb.$set(Pk);const bLe={};_&2&&(bLe.$$scope={dirty:_,ctx:m}),Vb.$set(bLe);const Bk={};_&2&&(Bk.$$scope={dirty:_,ctx:m}),xv.$set(Bk);const vLe={};_&2&&(vLe.$$scope={dirty:_,ctx:m}),kv.$set(vLe);const FLe={};_&2&&(FLe.$$scope={dirty:_,ctx:m}),Kv.$set(FLe);const TLe={};_&2&&(TLe.$$scope={dirty:_,ctx:m}),e1.$set(TLe);const Sm={};_&2&&(Sm.$$scope={dirty:_,ctx:m}),Z1.$set(Sm);const MLe={};_&2&&(MLe.$$scope={dirty:_,ctx:m}),oF.$set(MLe);const ELe={};_&2&&(ELe.$$scope={dirty:_,ctx:m}),RF.$set(ELe);const CLe={};_&2&&(CLe.$$scope={dirty:_,ctx:m}),BF.$set(CLe);const Ik={};_&2&&(Ik.$$scope={dirty:_,ctx:m}),VF.$set(Ik);const wLe={};_&2&&(wLe.$$scope={dirty:_,ctx:m}),zF.$set(wLe);const ALe={};_&2&&(ALe.$$scope={dirty:_,ctx:m}),xT.$set(ALe);const LLe={};_&2&&(LLe.$$scope={dirty:_,ctx:m}),kT.$set(LLe);const nt={};_&2&&(nt.$$scope={dirty:_,ctx:m}),TM.$set(nt);const Nk={};_&2&&(Nk.$$scope={dirty:_,ctx:m}),EM.$set(Nk);const yLe={};_&2&&(yLe.$$scope={dirty:_,ctx:m}),AM.$set(yLe);const qk={};_&2&&(qk.$$scope={dirty:_,ctx:m}),yM.$set(qk);const xLe={};_&2&&(xLe.$$scope={dirty:_,ctx:m}),XM.$set(xLe);const st={};_&2&&(st.$$scope={dirty:_,ctx:m}),WM.$set(st);const $Le={};_&2&&($Le.$$scope={dirty:_,ctx:m}),UM.$set($Le);const Rm={};_&2&&(Rm.$$scope={dirty:_,ctx:m}),YM.$set(Rm);const kLe={};_&2&&(kLe.$$scope={dirty:_,ctx:m}),e4.$set(kLe);const SLe={};_&2&&(SLe.$$scope={dirty:_,ctx:m}),r4.$set(SLe);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),g4.$set(L);const K6={};_&2&&(K6.$$scope={dirty:_,ctx:m}),u4.$set(K6);const RLe={};_&2&&(RLe.$$scope={dirty:_,ctx:m}),M4.$set(RLe);const PLe={};_&2&&(PLe.$$scope={dirty:_,ctx:m}),C4.$set(PLe);const Z6={};_&2&&(Z6.$$scope={dirty:_,ctx:m}),I4.$set(Z6);const BLe={};_&2&&(BLe.$$scope={dirty:_,ctx:m}),q4.$set(BLe);const ILe={};_&2&&(ILe.$$scope={dirty:_,ctx:m}),O4.$set(ILe);const e7={};_&2&&(e7.$$scope={dirty:_,ctx:m}),X4.$set(e7);const NLe={};_&2&&(NLe.$$scope={dirty:_,ctx:m}),Y4.$set(NLe);const qLe={};_&2&&(qLe.$$scope={dirty:_,ctx:m}),Z4.$set(qLe);const o7={};_&2&&(o7.$$scope={dirty:_,ctx:m}),nE.$set(o7);const jLe={};_&2&&(jLe.$$scope={dirty:_,ctx:m}),lE.$set(jLe);const DLe={};_&2&&(DLe.$$scope={dirty:_,ctx:m}),mE.$set(DLe);const r7={};_&2&&(r7.$$scope={dirty:_,ctx:m}),gE.$set(r7);const GLe={};_&2&&(GLe.$$scope={dirty:_,ctx:m}),pE.$set(GLe);const OLe={};_&2&&(OLe.$$scope={dirty:_,ctx:m}),bE.$set(OLe);const t7={};_&2&&(t7.$$scope={dirty:_,ctx:m}),wE.$set(t7);const VLe={};_&2&&(VLe.$$scope={dirty:_,ctx:m}),LE.$set(VLe);const XLe={};_&2&&(XLe.$$scope={dirty:_,ctx:m}),$E.$set(XLe);const a7={};_&2&&(a7.$$scope={dirty:_,ctx:m}),SE.$set(a7);const zLe={};_&2&&(zLe.$$scope={dirty:_,ctx:m}),xC.$set(zLe);const WLe={};_&2&&(WLe.$$scope={dirty:_,ctx:m}),kC.$set(WLe);const n7={};_&2&&(n7.$$scope={dirty:_,ctx:m}),o5.$set(n7);const QLe={};_&2&&(QLe.$$scope={dirty:_,ctx:m}),t5.$set(QLe);const HLe={};_&2&&(HLe.$$scope={dirty:_,ctx:m}),_5.$set(HLe);const s7={};_&2&&(s7.$$scope={dirty:_,ctx:m}),v5.$set(s7);const ULe={};_&2&&(ULe.$$scope={dirty:_,ctx:m}),L5.$set(ULe);const JLe={};_&2&&(JLe.$$scope={dirty:_,ctx:m}),x5.$set(JLe);const l7={};_&2&&(l7.$$scope={dirty:_,ctx:m}),J5.$set(l7);const YLe={};_&2&&(YLe.$$scope={dirty:_,ctx:m}),K5.$set(YLe);const KLe={};_&2&&(KLe.$$scope={dirty:_,ctx:m}),d3.$set(KLe);const i7={};_&2&&(i7.$$scope={dirty:_,ctx:m}),m3.$set(i7);const ZLe={};_&2&&(ZLe.$$scope={dirty:_,ctx:m}),q3.$set(ZLe);const eye={};_&2&&(eye.$$scope={dirty:_,ctx:m}),D3.$set(eye);const d7={};_&2&&(d7.$$scope={dirty:_,ctx:m}),a0.$set(d7);const oye={};_&2&&(oye.$$scope={dirty:_,ctx:m}),s0.$set(oye);const rye={};_&2&&(rye.$$scope={dirty:_,ctx:m}),d0.$set(rye);const c7={};_&2&&(c7.$$scope={dirty:_,ctx:m}),m0.$set(c7);const tye={};_&2&&(tye.$$scope={dirty:_,ctx:m}),g0.$set(tye);const aye={};_&2&&(aye.$$scope={dirty:_,ctx:m}),u0.$set(aye);const m7={};_&2&&(m7.$$scope={dirty:_,ctx:m}),I0.$set(m7);const nye={};_&2&&(nye.$$scope={dirty:_,ctx:m}),q0.$set(nye);const sye={};_&2&&(sye.$$scope={dirty:_,ctx:m}),nw.$set(sye);const f7={};_&2&&(f7.$$scope={dirty:_,ctx:m}),lw.$set(f7);const lye={};_&2&&(lye.$$scope={dirty:_,ctx:m}),dw.$set(lye);const iye={};_&2&&(iye.$$scope={dirty:_,ctx:m}),mw.$set(iye);const g7={};_&2&&(g7.$$scope={dirty:_,ctx:m}),gw.$set(g7);const dye={};_&2&&(dye.$$scope={dirty:_,ctx:m}),uw.$set(dye);const cye={};_&2&&(cye.$$scope={dirty:_,ctx:m}),Vw.$set(cye);const h7={};_&2&&(h7.$$scope={dirty:_,ctx:m}),zw.$set(h7);const mye={};_&2&&(mye.$$scope={dirty:_,ctx:m}),rA.$set(mye);const fye={};_&2&&(fye.$$scope={dirty:_,ctx:m}),aA.$set(fye);const u7={};_&2&&(u7.$$scope={dirty:_,ctx:m}),bA.$set(u7);const gye={};_&2&&(gye.$$scope={dirty:_,ctx:m}),FA.$set(gye);const hye={};_&2&&(hye.$$scope={dirty:_,ctx:m}),kA.$set(hye);const p7={};_&2&&(p7.$$scope={dirty:_,ctx:m}),RA.$set(p7);const uye={};_&2&&(uye.$$scope={dirty:_,ctx:m}),XA.$set(uye);const pye={};_&2&&(pye.$$scope={dirty:_,ctx:m}),WA.$set(pye);const _7={};_&2&&(_7.$$scope={dirty:_,ctx:m}),t6.$set(_7);const _ye={};_&2&&(_ye.$$scope={dirty:_,ctx:m}),n6.$set(_ye);const bye={};_&2&&(bye.$$scope={dirty:_,ctx:m}),p6.$set(bye);const b7={};_&2&&(b7.$$scope={dirty:_,ctx:m}),b6.$set(b7);const vye={};_&2&&(vye.$$scope={dirty:_,ctx:m}),L6.$set(vye);const Fye={};_&2&&(Fye.$$scope={dirty:_,ctx:m}),x6.$set(Fye);const v7={};_&2&&(v7.$$scope={dirty:_,ctx:m}),q6.$set(v7);const Tye={};_&2&&(Tye.$$scope={dirty:_,ctx:m}),D6.$set(Tye);const Mye={};_&2&&(Mye.$$scope={dirty:_,ctx:m}),O6.$set(Mye);const F7={};_&2&&(F7.$$scope={dirty:_,ctx:m}),X6.$set(F7);const Eye={};_&2&&(Eye.$$scope={dirty:_,ctx:m}),Q6.$set(Eye);const Cye={};_&2&&(Cye.$$scope={dirty:_,ctx:m}),U6.$set(Cye);const T7={};_&2&&(T7.$$scope={dirty:_,ctx:m}),Y6.$set(T7)},i(m){hQe||(E(c.$$.fragment,m),E(Sa.$$.fragment,m),E(Ty.$$.fragment,m),E(My.$$.fragment,m),E(Dm.$$.fragment,m),E(Ey.$$.fragment,m),E(Cy.$$.fragment,m),E(Ly.$$.fragment,m),E(oh.$$.fragment,m),E(yy.$$.fragment,m),E(xy.$$.fragment,m),E($y.$$.fragment,m),E(Ry.$$.fragment,m),E(Nh.$$.fragment,m),E(Py.$$.fragment,m),E(By.$$.fragment,m),E(Iy.$$.fragment,m),E(jy.$$.fragment,m),E(Mu.$$.fragment,m),E(Eu.$$.fragment,m),E(Dy.$$.fragment,m),E(Gy.$$.fragment,m),E(Oy.$$.fragment,m),E(zy.$$.fragment,m),E(zu.$$.fragment,m),E(Wu.$$.fragment,m),E(Wy.$$.fragment,m),E(Qy.$$.fragment,m),E(Hy.$$.fragment,m),E(Jy.$$.fragment,m),E(Uu.$$.fragment,m),E(Yy.$$.fragment,m),E(r2.$$.fragment,m),E(Ky.$$.fragment,m),E(Zy.$$.fragment,m),E(o8.$$.fragment,m),E(a2.$$.fragment,m),E(r8.$$.fragment,m),E(Y2.$$.fragment,m),E(t8.$$.fragment,m),E(a8.$$.fragment,m),E(s8.$$.fragment,m),E(Z2.$$.fragment,m),E(l8.$$.fragment,m),E(Gb.$$.fragment,m),E(i8.$$.fragment,m),E(d8.$$.fragment,m),E(m8.$$.fragment,m),E(Vb.$$.fragment,m),E(f8.$$.fragment,m),E(xv.$$.fragment,m),E(g8.$$.fragment,m),E(h8.$$.fragment,m),E(p8.$$.fragment,m),E(kv.$$.fragment,m),E(_8.$$.fragment,m),E(Kv.$$.fragment,m),E(b8.$$.fragment,m),E(v8.$$.fragment,m),E(T8.$$.fragment,m),E(e1.$$.fragment,m),E(M8.$$.fragment,m),E(Z1.$$.fragment,m),E(E8.$$.fragment,m),E(C8.$$.fragment,m),E(A8.$$.fragment,m),E(oF.$$.fragment,m),E(L8.$$.fragment,m),E(RF.$$.fragment,m),E(y8.$$.fragment,m),E(x8.$$.fragment,m),E(k8.$$.fragment,m),E(BF.$$.fragment,m),E(S8.$$.fragment,m),E(VF.$$.fragment,m),E(R8.$$.fragment,m),E(P8.$$.fragment,m),E(I8.$$.fragment,m),E(zF.$$.fragment,m),E(N8.$$.fragment,m),E(xT.$$.fragment,m),E(q8.$$.fragment,m),E(j8.$$.fragment,m),E(G8.$$.fragment,m),E(kT.$$.fragment,m),E(O8.$$.fragment,m),E(TM.$$.fragment,m),E(V8.$$.fragment,m),E(X8.$$.fragment,m),E(W8.$$.fragment,m),E(EM.$$.fragment,m),E(Q8.$$.fragment,m),E(AM.$$.fragment,m),E(H8.$$.fragment,m),E(U8.$$.fragment,m),E(Y8.$$.fragment,m),E(yM.$$.fragment,m),E(K8.$$.fragment,m),E(XM.$$.fragment,m),E(Z8.$$.fragment,m),E(e9.$$.fragment,m),E(r9.$$.fragment,m),E(WM.$$.fragment,m),E(t9.$$.fragment,m),E(UM.$$.fragment,m),E(a9.$$.fragment,m),E(n9.$$.fragment,m),E(l9.$$.fragment,m),E(YM.$$.fragment,m),E(i9.$$.fragment,m),E(e4.$$.fragment,m),E(d9.$$.fragment,m),E(c9.$$.fragment,m),E(f9.$$.fragment,m),E(r4.$$.fragment,m),E(g9.$$.fragment,m),E(g4.$$.fragment,m),E(h9.$$.fragment,m),E(u9.$$.fragment,m),E(_9.$$.fragment,m),E(u4.$$.fragment,m),E(b9.$$.fragment,m),E(M4.$$.fragment,m),E(v9.$$.fragment,m),E(F9.$$.fragment,m),E(M9.$$.fragment,m),E(C4.$$.fragment,m),E(E9.$$.fragment,m),E(I4.$$.fragment,m),E(C9.$$.fragment,m),E(w9.$$.fragment,m),E(L9.$$.fragment,m),E(q4.$$.fragment,m),E(y9.$$.fragment,m),E(O4.$$.fragment,m),E($9.$$.fragment,m),E(k9.$$.fragment,m),E(R9.$$.fragment,m),E(X4.$$.fragment,m),E(P9.$$.fragment,m),E(Y4.$$.fragment,m),E(B9.$$.fragment,m),E(I9.$$.fragment,m),E(q9.$$.fragment,m),E(Z4.$$.fragment,m),E(j9.$$.fragment,m),E(nE.$$.fragment,m),E(D9.$$.fragment,m),E(G9.$$.fragment,m),E(V9.$$.fragment,m),E(lE.$$.fragment,m),E(X9.$$.fragment,m),E(mE.$$.fragment,m),E(W9.$$.fragment,m),E(Q9.$$.fragment,m),E(U9.$$.fragment,m),E(gE.$$.fragment,m),E(J9.$$.fragment,m),E(pE.$$.fragment,m),E(Y9.$$.fragment,m),E(K9.$$.fragment,m),E(ex.$$.fragment,m),E(bE.$$.fragment,m),E(ox.$$.fragment,m),E(wE.$$.fragment,m),E(rx.$$.fragment,m),E(tx.$$.fragment,m),E(nx.$$.fragment,m),E(LE.$$.fragment,m),E(sx.$$.fragment,m),E($E.$$.fragment,m),E(lx.$$.fragment,m),E(ix.$$.fragment,m),E(cx.$$.fragment,m),E(SE.$$.fragment,m),E(mx.$$.fragment,m),E(xC.$$.fragment,m),E(fx.$$.fragment,m),E(gx.$$.fragment,m),E(ux.$$.fragment,m),E(kC.$$.fragment,m),E(px.$$.fragment,m),E(o5.$$.fragment,m),E(_x.$$.fragment,m),E(bx.$$.fragment,m),E(Fx.$$.fragment,m),E(t5.$$.fragment,m),E(Tx.$$.fragment,m),E(_5.$$.fragment,m),E(Mx.$$.fragment,m),E(Ex.$$.fragment,m),E(wx.$$.fragment,m),E(v5.$$.fragment,m),E(Ax.$$.fragment,m),E(L5.$$.fragment,m),E(Lx.$$.fragment,m),E(yx.$$.fragment,m),E($x.$$.fragment,m),E(x5.$$.fragment,m),E(kx.$$.fragment,m),E(J5.$$.fragment,m),E(Sx.$$.fragment,m),E(Rx.$$.fragment,m),E(Bx.$$.fragment,m),E(K5.$$.fragment,m),E(Ix.$$.fragment,m),E(d3.$$.fragment,m),E(Nx.$$.fragment,m),E(qx.$$.fragment,m),E(Dx.$$.fragment,m),E(m3.$$.fragment,m),E(Gx.$$.fragment,m),E(q3.$$.fragment,m),E(Ox.$$.fragment,m),E(Vx.$$.fragment,m),E(zx.$$.fragment,m),E(D3.$$.fragment,m),E(Wx.$$.fragment,m),E(a0.$$.fragment,m),E(Qx.$$.fragment,m),E(Hx.$$.fragment,m),E(Jx.$$.fragment,m),E(s0.$$.fragment,m),E(Yx.$$.fragment,m),E(d0.$$.fragment,m),E(Zx.$$.fragment,m),E(e$.$$.fragment,m),E(r$.$$.fragment,m),E(m0.$$.fragment,m),E(t$.$$.fragment,m),E(g0.$$.fragment,m),E(a$.$$.fragment,m),E(n$.$$.fragment,m),E(l$.$$.fragment,m),E(u0.$$.fragment,m),E(i$.$$.fragment,m),E(I0.$$.fragment,m),E(d$.$$.fragment,m),E(c$.$$.fragment,m),E(f$.$$.fragment,m),E(q0.$$.fragment,m),E(g$.$$.fragment,m),E(nw.$$.fragment,m),E(h$.$$.fragment,m),E(u$.$$.fragment,m),E(_$.$$.fragment,m),E(lw.$$.fragment,m),E(b$.$$.fragment,m),E(dw.$$.fragment,m),E(v$.$$.fragment,m),E(F$.$$.fragment,m),E(M$.$$.fragment,m),E(mw.$$.fragment,m),E(E$.$$.fragment,m),E(gw.$$.fragment,m),E(C$.$$.fragment,m),E(w$.$$.fragment,m),E(L$.$$.fragment,m),E(uw.$$.fragment,m),E(y$.$$.fragment,m),E(Vw.$$.fragment,m),E(x$.$$.fragment,m),E($$.$$.fragment,m),E(S$.$$.fragment,m),E(zw.$$.fragment,m),E(R$.$$.fragment,m),E(rA.$$.fragment,m),E(P$.$$.fragment,m),E(B$.$$.fragment,m),E(N$.$$.fragment,m),E(aA.$$.fragment,m),E(q$.$$.fragment,m),E(bA.$$.fragment,m),E(j$.$$.fragment,m),E(D$.$$.fragment,m),E(O$.$$.fragment,m),E(FA.$$.fragment,m),E(V$.$$.fragment,m),E(kA.$$.fragment,m),E(X$.$$.fragment,m),E(z$.$$.fragment,m),E(Q$.$$.fragment,m),E(RA.$$.fragment,m),E(H$.$$.fragment,m),E(XA.$$.fragment,m),E(U$.$$.fragment,m),E(J$.$$.fragment,m),E(K$.$$.fragment,m),E(WA.$$.fragment,m),E(Z$.$$.fragment,m),E(t6.$$.fragment,m),E(ek.$$.fragment,m),E(ok.$$.fragment,m),E(tk.$$.fragment,m),E(n6.$$.fragment,m),E(ak.$$.fragment,m),E(p6.$$.fragment,m),E(nk.$$.fragment,m),E(sk.$$.fragment,m),E(ik.$$.fragment,m),E(b6.$$.fragment,m),E(dk.$$.fragment,m),E(L6.$$.fragment,m),E(ck.$$.fragment,m),E(mk.$$.fragment,m),E(gk.$$.fragment,m),E(x6.$$.fragment,m),E(hk.$$.fragment,m),E(q6.$$.fragment,m),E(uk.$$.fragment,m),E(pk.$$.fragment,m),E(bk.$$.fragment,m),E(D6.$$.fragment,m),E(vk.$$.fragment,m),E(O6.$$.fragment,m),E(Fk.$$.fragment,m),E(Tk.$$.fragment,m),E(Ek.$$.fragment,m),E(X6.$$.fragment,m),E(Ck.$$.fragment,m),E(Q6.$$.fragment,m),E(Ak.$$.fragment,m),E(Lk.$$.fragment,m),E(xk.$$.fragment,m),E(U6.$$.fragment,m),E($k.$$.fragment,m),E(Y6.$$.fragment,m),hQe=!0)},o(m){C(c.$$.fragment,m),C(Sa.$$.fragment,m),C(Ty.$$.fragment,m),C(My.$$.fragment,m),C(Dm.$$.fragment,m),C(Ey.$$.fragment,m),C(Cy.$$.fragment,m),C(Ly.$$.fragment,m),C(oh.$$.fragment,m),C(yy.$$.fragment,m),C(xy.$$.fragment,m),C($y.$$.fragment,m),C(Ry.$$.fragment,m),C(Nh.$$.fragment,m),C(Py.$$.fragment,m),C(By.$$.fragment,m),C(Iy.$$.fragment,m),C(jy.$$.fragment,m),C(Mu.$$.fragment,m),C(Eu.$$.fragment,m),C(Dy.$$.fragment,m),C(Gy.$$.fragment,m),C(Oy.$$.fragment,m),C(zy.$$.fragment,m),C(zu.$$.fragment,m),C(Wu.$$.fragment,m),C(Wy.$$.fragment,m),C(Qy.$$.fragment,m),C(Hy.$$.fragment,m),C(Jy.$$.fragment,m),C(Uu.$$.fragment,m),C(Yy.$$.fragment,m),C(r2.$$.fragment,m),C(Ky.$$.fragment,m),C(Zy.$$.fragment,m),C(o8.$$.fragment,m),C(a2.$$.fragment,m),C(r8.$$.fragment,m),C(Y2.$$.fragment,m),C(t8.$$.fragment,m),C(a8.$$.fragment,m),C(s8.$$.fragment,m),C(Z2.$$.fragment,m),C(l8.$$.fragment,m),C(Gb.$$.fragment,m),C(i8.$$.fragment,m),C(d8.$$.fragment,m),C(m8.$$.fragment,m),C(Vb.$$.fragment,m),C(f8.$$.fragment,m),C(xv.$$.fragment,m),C(g8.$$.fragment,m),C(h8.$$.fragment,m),C(p8.$$.fragment,m),C(kv.$$.fragment,m),C(_8.$$.fragment,m),C(Kv.$$.fragment,m),C(b8.$$.fragment,m),C(v8.$$.fragment,m),C(T8.$$.fragment,m),C(e1.$$.fragment,m),C(M8.$$.fragment,m),C(Z1.$$.fragment,m),C(E8.$$.fragment,m),C(C8.$$.fragment,m),C(A8.$$.fragment,m),C(oF.$$.fragment,m),C(L8.$$.fragment,m),C(RF.$$.fragment,m),C(y8.$$.fragment,m),C(x8.$$.fragment,m),C(k8.$$.fragment,m),C(BF.$$.fragment,m),C(S8.$$.fragment,m),C(VF.$$.fragment,m),C(R8.$$.fragment,m),C(P8.$$.fragment,m),C(I8.$$.fragment,m),C(zF.$$.fragment,m),C(N8.$$.fragment,m),C(xT.$$.fragment,m),C(q8.$$.fragment,m),C(j8.$$.fragment,m),C(G8.$$.fragment,m),C(kT.$$.fragment,m),C(O8.$$.fragment,m),C(TM.$$.fragment,m),C(V8.$$.fragment,m),C(X8.$$.fragment,m),C(W8.$$.fragment,m),C(EM.$$.fragment,m),C(Q8.$$.fragment,m),C(AM.$$.fragment,m),C(H8.$$.fragment,m),C(U8.$$.fragment,m),C(Y8.$$.fragment,m),C(yM.$$.fragment,m),C(K8.$$.fragment,m),C(XM.$$.fragment,m),C(Z8.$$.fragment,m),C(e9.$$.fragment,m),C(r9.$$.fragment,m),C(WM.$$.fragment,m),C(t9.$$.fragment,m),C(UM.$$.fragment,m),C(a9.$$.fragment,m),C(n9.$$.fragment,m),C(l9.$$.fragment,m),C(YM.$$.fragment,m),C(i9.$$.fragment,m),C(e4.$$.fragment,m),C(d9.$$.fragment,m),C(c9.$$.fragment,m),C(f9.$$.fragment,m),C(r4.$$.fragment,m),C(g9.$$.fragment,m),C(g4.$$.fragment,m),C(h9.$$.fragment,m),C(u9.$$.fragment,m),C(_9.$$.fragment,m),C(u4.$$.fragment,m),C(b9.$$.fragment,m),C(M4.$$.fragment,m),C(v9.$$.fragment,m),C(F9.$$.fragment,m),C(M9.$$.fragment,m),C(C4.$$.fragment,m),C(E9.$$.fragment,m),C(I4.$$.fragment,m),C(C9.$$.fragment,m),C(w9.$$.fragment,m),C(L9.$$.fragment,m),C(q4.$$.fragment,m),C(y9.$$.fragment,m),C(O4.$$.fragment,m),C($9.$$.fragment,m),C(k9.$$.fragment,m),C(R9.$$.fragment,m),C(X4.$$.fragment,m),C(P9.$$.fragment,m),C(Y4.$$.fragment,m),C(B9.$$.fragment,m),C(I9.$$.fragment,m),C(q9.$$.fragment,m),C(Z4.$$.fragment,m),C(j9.$$.fragment,m),C(nE.$$.fragment,m),C(D9.$$.fragment,m),C(G9.$$.fragment,m),C(V9.$$.fragment,m),C(lE.$$.fragment,m),C(X9.$$.fragment,m),C(mE.$$.fragment,m),C(W9.$$.fragment,m),C(Q9.$$.fragment,m),C(U9.$$.fragment,m),C(gE.$$.fragment,m),C(J9.$$.fragment,m),C(pE.$$.fragment,m),C(Y9.$$.fragment,m),C(K9.$$.fragment,m),C(ex.$$.fragment,m),C(bE.$$.fragment,m),C(ox.$$.fragment,m),C(wE.$$.fragment,m),C(rx.$$.fragment,m),C(tx.$$.fragment,m),C(nx.$$.fragment,m),C(LE.$$.fragment,m),C(sx.$$.fragment,m),C($E.$$.fragment,m),C(lx.$$.fragment,m),C(ix.$$.fragment,m),C(cx.$$.fragment,m),C(SE.$$.fragment,m),C(mx.$$.fragment,m),C(xC.$$.fragment,m),C(fx.$$.fragment,m),C(gx.$$.fragment,m),C(ux.$$.fragment,m),C(kC.$$.fragment,m),C(px.$$.fragment,m),C(o5.$$.fragment,m),C(_x.$$.fragment,m),C(bx.$$.fragment,m),C(Fx.$$.fragment,m),C(t5.$$.fragment,m),C(Tx.$$.fragment,m),C(_5.$$.fragment,m),C(Mx.$$.fragment,m),C(Ex.$$.fragment,m),C(wx.$$.fragment,m),C(v5.$$.fragment,m),C(Ax.$$.fragment,m),C(L5.$$.fragment,m),C(Lx.$$.fragment,m),C(yx.$$.fragment,m),C($x.$$.fragment,m),C(x5.$$.fragment,m),C(kx.$$.fragment,m),C(J5.$$.fragment,m),C(Sx.$$.fragment,m),C(Rx.$$.fragment,m),C(Bx.$$.fragment,m),C(K5.$$.fragment,m),C(Ix.$$.fragment,m),C(d3.$$.fragment,m),C(Nx.$$.fragment,m),C(qx.$$.fragment,m),C(Dx.$$.fragment,m),C(m3.$$.fragment,m),C(Gx.$$.fragment,m),C(q3.$$.fragment,m),C(Ox.$$.fragment,m),C(Vx.$$.fragment,m),C(zx.$$.fragment,m),C(D3.$$.fragment,m),C(Wx.$$.fragment,m),C(a0.$$.fragment,m),C(Qx.$$.fragment,m),C(Hx.$$.fragment,m),C(Jx.$$.fragment,m),C(s0.$$.fragment,m),C(Yx.$$.fragment,m),C(d0.$$.fragment,m),C(Zx.$$.fragment,m),C(e$.$$.fragment,m),C(r$.$$.fragment,m),C(m0.$$.fragment,m),C(t$.$$.fragment,m),C(g0.$$.fragment,m),C(a$.$$.fragment,m),C(n$.$$.fragment,m),C(l$.$$.fragment,m),C(u0.$$.fragment,m),C(i$.$$.fragment,m),C(I0.$$.fragment,m),C(d$.$$.fragment,m),C(c$.$$.fragment,m),C(f$.$$.fragment,m),C(q0.$$.fragment,m),C(g$.$$.fragment,m),C(nw.$$.fragment,m),C(h$.$$.fragment,m),C(u$.$$.fragment,m),C(_$.$$.fragment,m),C(lw.$$.fragment,m),C(b$.$$.fragment,m),C(dw.$$.fragment,m),C(v$.$$.fragment,m),C(F$.$$.fragment,m),C(M$.$$.fragment,m),C(mw.$$.fragment,m),C(E$.$$.fragment,m),C(gw.$$.fragment,m),C(C$.$$.fragment,m),C(w$.$$.fragment,m),C(L$.$$.fragment,m),C(uw.$$.fragment,m),C(y$.$$.fragment,m),C(Vw.$$.fragment,m),C(x$.$$.fragment,m),C($$.$$.fragment,m),C(S$.$$.fragment,m),C(zw.$$.fragment,m),C(R$.$$.fragment,m),C(rA.$$.fragment,m),C(P$.$$.fragment,m),C(B$.$$.fragment,m),C(N$.$$.fragment,m),C(aA.$$.fragment,m),C(q$.$$.fragment,m),C(bA.$$.fragment,m),C(j$.$$.fragment,m),C(D$.$$.fragment,m),C(O$.$$.fragment,m),C(FA.$$.fragment,m),C(V$.$$.fragment,m),C(kA.$$.fragment,m),C(X$.$$.fragment,m),C(z$.$$.fragment,m),C(Q$.$$.fragment,m),C(RA.$$.fragment,m),C(H$.$$.fragment,m),C(XA.$$.fragment,m),C(U$.$$.fragment,m),C(J$.$$.fragment,m),C(K$.$$.fragment,m),C(WA.$$.fragment,m),C(Z$.$$.fragment,m),C(t6.$$.fragment,m),C(ek.$$.fragment,m),C(ok.$$.fragment,m),C(tk.$$.fragment,m),C(n6.$$.fragment,m),C(ak.$$.fragment,m),C(p6.$$.fragment,m),C(nk.$$.fragment,m),C(sk.$$.fragment,m),C(ik.$$.fragment,m),C(b6.$$.fragment,m),C(dk.$$.fragment,m),C(L6.$$.fragment,m),C(ck.$$.fragment,m),C(mk.$$.fragment,m),C(gk.$$.fragment,m),C(x6.$$.fragment,m),C(hk.$$.fragment,m),C(q6.$$.fragment,m),C(uk.$$.fragment,m),C(pk.$$.fragment,m),C(bk.$$.fragment,m),C(D6.$$.fragment,m),C(vk.$$.fragment,m),C(O6.$$.fragment,m),C(Fk.$$.fragment,m),C(Tk.$$.fragment,m),C(Ek.$$.fragment,m),C(X6.$$.fragment,m),C(Ck.$$.fragment,m),C(Q6.$$.fragment,m),C(Ak.$$.fragment,m),C(Lk.$$.fragment,m),C(xk.$$.fragment,m),C(U6.$$.fragment,m),C($k.$$.fragment,m),C(Y6.$$.fragment,m),hQe=!1},d(m){t(g),m&&t(v),m&&t(u),w(c),m&&t(Bm),m&&t(lt),m&&t(Oe),m&&t(Qe),m&&t(Nm),w(Sa,m),m&&t(He),m&&t(Ae),m&&t(Ao),m&&t(Ra),m&&t(dze),m&&t(Ni),w(Ty),m&&t(cze),m&&t(jn),m&&t(mze),w(My,m),m&&t(fze),m&&t(nR),m&&t(gze),w(Dm,m),m&&t(hze),m&&t(qi),w(Ey),m&&t(uze),m&&t(Lo),w(Cy),w(Ly),w(oh),w(yy),m&&t(pze),m&&t(Di),w(xy),m&&t(_ze),m&&t(yo),w($y),w(Ry),w(Nh),w(Py),m&&t(bze),m&&t(Gi),w(By),m&&t(vze),m&&t(xo),w(Iy),w(jy),w(Mu),w(Eu),w(Dy),m&&t(Fze),m&&t(Oi),w(Gy),m&&t(Tze),m&&t($o),w(Oy),w(zy),w(zu),w(Wu),w(Wy),m&&t(Mze),m&&t(Xi),w(Qy),m&&t(Eze),m&&t(ko),w(Hy),w(Jy),w(Uu),w(Yy),w(r2),m&&t(Cze),m&&t(Qi),w(Ky),m&&t(wze),m&&t(So),w(Zy),w(o8),w(a2),w(r8),w(Y2),m&&t(Aze),m&&t(Ji),w(t8),m&&t(Lze),m&&t(Ro),w(a8),w(s8),w(Z2),w(l8),w(Gb),m&&t(yze),m&&t(Zi),w(i8),m&&t(xze),m&&t(Po),w(d8),w(m8),w(Vb),w(f8),w(xv),m&&t($ze),m&&t(rd),w(g8),m&&t(kze),m&&t(Bo),w(h8),w(p8),w(kv),w(_8),w(Kv),m&&t(Sze),m&&t(nd),w(b8),m&&t(Rze),m&&t(Io),w(v8),w(T8),w(e1),w(M8),w(Z1),m&&t(Pze),m&&t(id),w(E8),m&&t(Bze),m&&t(No),w(C8),w(A8),w(oF),w(L8),w(RF),m&&t(Ize),m&&t(md),w(y8),m&&t(Nze),m&&t(qo),w(x8),w(k8),w(BF),w(S8),w(VF),m&&t(qze),m&&t(hd),w(R8),m&&t(jze),m&&t(Do),w(P8),w(I8),w(zF),w(N8),w(xT),m&&t(Dze),m&&t(_d),w(q8),m&&t(Gze),m&&t(Go),w(j8),w(G8),w(kT),w(O8),w(TM),m&&t(Oze),m&&t(Fd),w(V8),m&&t(Vze),m&&t(Oo),w(X8),w(W8),w(EM),w(Q8),w(AM),m&&t(Xze),m&&t(Ed),w(H8),m&&t(zze),m&&t(Vo),w(U8),w(Y8),w(yM),w(K8),w(XM),m&&t(Wze),m&&t(Ad),w(Z8),m&&t(Qze),m&&t(Xo),w(e9),w(r9),w(WM),w(t9),w(UM),m&&t(Hze),m&&t(xd),w(a9),m&&t(Uze),m&&t(zo),w(n9),w(l9),w(YM),w(i9),w(e4),m&&t(Jze),m&&t(Sd),w(d9),m&&t(Yze),m&&t(Wo),w(c9),w(f9),w(r4),w(g9),w(g4),m&&t(Kze),m&&t(Bd),w(h9),m&&t(Zze),m&&t(Qo),w(u9),w(_9),w(u4),w(b9),w(M4),m&&t(eWe),m&&t(qd),w(v9),m&&t(oWe),m&&t(Ho),w(F9),w(M9),w(C4),w(E9),w(I4),m&&t(rWe),m&&t(Gd),w(C9),m&&t(tWe),m&&t(Uo),w(w9),w(L9),w(q4),w(y9),w(O4),m&&t(aWe),m&&t(Xd),w($9),m&&t(nWe),m&&t(Jo),w(k9),w(R9),w(X4),w(P9),w(Y4),m&&t(sWe),m&&t(Qd),w(B9),m&&t(lWe),m&&t(Yo),w(I9),w(q9),w(Z4),w(j9),w(nE),m&&t(iWe),m&&t(Jd),w(D9),m&&t(dWe),m&&t(Ko),w(G9),w(V9),w(lE),w(X9),w(mE),m&&t(cWe),m&&t(Zd),w(W9),m&&t(mWe),m&&t(Zo),w(Q9),w(U9),w(gE),w(J9),w(pE),m&&t(fWe),m&&t(rc),w(Y9),m&&t(gWe),m&&t(er),w(K9),w(ex),w(bE),w(ox),w(wE),m&&t(hWe),m&&t(nc),w(rx),m&&t(uWe),m&&t(or),w(tx),w(nx),w(LE),w(sx),w($E),m&&t(pWe),m&&t(ic),w(lx),m&&t(_We),m&&t(rr),w(ix),w(cx),w(SE),w(mx),w(xC),m&&t(bWe),m&&t(mc),w(fx),m&&t(vWe),m&&t(tr),w(gx),w(ux),w(kC),w(px),w(o5),m&&t(FWe),m&&t(hc),w(_x),m&&t(TWe),m&&t(ar),w(bx),w(Fx),w(t5),w(Tx),w(_5),m&&t(MWe),m&&t(_c),w(Mx),m&&t(EWe),m&&t(nr),w(Ex),w(wx),w(v5),w(Ax),w(L5),m&&t(CWe),m&&t(Fc),w(Lx),m&&t(wWe),m&&t(sr),w(yx),w($x),w(x5),w(kx),w(J5),m&&t(AWe),m&&t(Ec),w(Sx),m&&t(LWe),m&&t(lr),w(Rx),w(Bx),w(K5),w(Ix),w(d3),m&&t(yWe),m&&t(Ac),w(Nx),m&&t(xWe),m&&t(ir),w(qx),w(Dx),w(m3),w(Gx),w(q3),m&&t($We),m&&t(xc),w(Ox),m&&t(kWe),m&&t(dr),w(Vx),w(zx),w(D3),w(Wx),w(a0),m&&t(SWe),m&&t(Sc),w(Qx),m&&t(RWe),m&&t(cr),w(Hx),w(Jx),w(s0),w(Yx),w(d0),m&&t(PWe),m&&t(Bc),w(Zx),m&&t(BWe),m&&t(mr),w(e$),w(r$),w(m0),w(t$),w(g0),m&&t(IWe),m&&t(qc),w(a$),m&&t(NWe),m&&t(fr),w(n$),w(l$),w(u0),w(i$),w(I0),m&&t(qWe),m&&t(Gc),w(d$),m&&t(jWe),m&&t(gr),w(c$),w(f$),w(q0),w(g$),w(nw),m&&t(DWe),m&&t(Xc),w(h$),m&&t(GWe),m&&t(hr),w(u$),w(_$),w(lw),w(b$),w(dw),m&&t(OWe),m&&t(Qc),w(v$),m&&t(VWe),m&&t(ur),w(F$),w(M$),w(mw),w(E$),w(gw),m&&t(XWe),m&&t(Jc),w(C$),m&&t(zWe),m&&t(pr),w(w$),w(L$),w(uw),w(y$),w(Vw),m&&t(WWe),m&&t(Zc),w(x$),m&&t(QWe),m&&t(_r),w($$),w(S$),w(zw),w(R$),w(rA),m&&t(HWe),m&&t(rm),w(P$),m&&t(UWe),m&&t(br),w(B$),w(N$),w(aA),w(q$),w(bA),m&&t(JWe),m&&t(nm),w(j$),m&&t(YWe),m&&t(vr),w(D$),w(O$),w(FA),w(V$),w(kA),m&&t(KWe),m&&t(im),w(X$),m&&t(ZWe),m&&t(Fr),w(z$),w(Q$),w(RA),w(H$),w(XA),m&&t(eQe),m&&t(mm),w(U$),m&&t(oQe),m&&t(Tr),w(J$),w(K$),w(WA),w(Z$),w(t6),m&&t(rQe),m&&t(hm),w(ek),m&&t(tQe),m&&t(Mr),w(ok),w(tk),w(n6),w(ak),w(p6),m&&t(aQe),m&&t(_m),w(nk),m&&t(nQe),m&&t(Er),w(sk),w(ik),w(b6),w(dk),w(L6),m&&t(sQe),m&&t(Fm),w(ck),m&&t(lQe),m&&t(Cr),w(mk),w(gk),w(x6),w(hk),w(q6),m&&t(iQe),m&&t(Em),w(uk),m&&t(dQe),m&&t(wr),w(pk),w(bk),w(D6),w(vk),w(O6),m&&t(cQe),m&&t(Am),w(Fk),m&&t(mQe),m&&t(Ar),w(Tk),w(Ek),w(X6),w(Ck),w(Q6),m&&t(fQe),m&&t(xm),w(Ak),m&&t(gQe),m&&t(Lr),w(Lk),w(xk),w(U6),w($k),w(Y6)}}}const tKt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function aKt($){return rJt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class mKt extends KUt{constructor(g){super();ZUt(this,g,aKt,rKt,eJt,{})}}export{mKt as default,tKt as metadata};
